{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "// version: 0.10.1
// date: Wed Nov 29 2017 10:49:01 GMT+0000 (WET)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


// version: 0.10.1
// date: Wed Nov 29 2017 10:49:01 GMT+0000 (WET)
// licence: 
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/


!function(e, n) {
    "object" == typeof exports && "object" == typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define("Runtime", [], n) : "object" == typeof exports ? exports.Runtime = n() : e.Runtime = n();
}(this, function() {
    return function(e) {
        function __webpack_require__(t) {
            if (n[t]) return n[t].exports;
            var c = n[t] = {
                i: t,
                l: !1,
                exports: {}
            };
            return e[t].call(c.exports, c, c.exports, __webpack_require__), c.l = !0, c.exports;
        }
        var n = {};
        return __webpack_require__.m = e, __webpack_require__.c = n, __webpack_require__.d = function(e, n, t) {
            __webpack_require__.o(e, n) || Object.defineProperty(e, n, {
                configurable: !1,
                enumerable: !0,
                get: t
            });
        }, __webpack_require__.n = function(e) {
            var n = e && e.__esModule ? function() {
                return e.default;
            } : function() {
                return e;
            };
            return __webpack_require__.d(n, "a", n), n;
        }, __webpack_require__.o = function(e, n) {
            return Object.prototype.hasOwnProperty.call(e, n);
        }, __webpack_require__.p = "", __webpack_require__(__webpack_require__.s = 207);
    }([ function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(4);\nvar core = __webpack_require__(30);\nvar hide = __webpack_require__(18);\nvar redefine = __webpack_require__(19);\nvar ctx = __webpack_require__(27);\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcz8wZWNlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nexports.__esModule = true;\n\nexports.default = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError("Cannot call a class as a function");\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanM/NjZiOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nexports.__esModule = true;\n\nvar _defineProperty = __webpack_require__(197);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if ("value" in descriptor) descriptor.writable = true;\n      (0, _defineProperty2.default)(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanM/YzMxMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n');
    }, function(module, exports, __webpack_require__) {
        eval("var isObject = __webpack_require__(6);\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcz8wYzg1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4tb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");
    }, function(module, exports) {
        eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcz8zYjMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");
    }, function(module, exports) {
        eval("module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLmpzP2NlMDIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");
    }, function(module, exports) {
        eval("module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLW9iamVjdC5qcz81MGEzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");
    }, function(module, exports, __webpack_require__) {
        eval("var store = __webpack_require__(78)('wks');\nvar uid = __webpack_require__(48);\nvar Symbol = __webpack_require__(4).Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcz85MjQwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");
    }, function(module, exports, __webpack_require__) {
        eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(5)(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzPzZkNGEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");
    }, function(module, exports, __webpack_require__) {
        eval("var anObject = __webpack_require__(3);\nvar IE8_DOM_DEFINE = __webpack_require__(145);\nvar toPrimitive = __webpack_require__(31);\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qcz85NDMyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcC5qc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.1.15 ToLength\nvar toInteger = __webpack_require__(33);\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanM/MDViYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzXG4vLyBtb2R1bGUgaWQgPSAxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");
    }, function(module, exports, __webpack_require__) {
        eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    "use strict";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof module === \'object\' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    "use strict";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = "undefined";\n\n    var logMethods = [\n        "trace",\n        "debug",\n        "info",\n        "warn",\n        "error"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === \'function\') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === \'debug\') {\n            methodName = \'log\';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, \'log\');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn\'t present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = "loglevel";\n      if (name) {\n        storageKey += ":" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || \'silent\').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + "=" + levelName + ";";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + "=");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,\n          "ERROR": 4, "SILENT": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return "No console available for logging";\n              }\n          } else {\n              throw "log.setLevel() called with invalid level: " + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== "string" || name === "") {\n          throw new TypeError("You must supply a name when creating a logger.");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9nbGV2ZWwvbGliL2xvZ2xldmVsLmpzPzA2ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiLypcbiogbG9nbGV2ZWwgLSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWxcbipcbiogQ29weXJpZ2h0IChjKSAyMDEzIFRpbSBQZXJyeVxuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4qL1xuKGZ1bmN0aW9uIChyb290LCBkZWZpbml0aW9uKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoZGVmaW5pdGlvbik7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByb290LmxvZyA9IGRlZmluaXRpb24oKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIC8vIFNsaWdodGx5IGR1YmlvdXMgdHJpY2tzIHRvIGN1dCBkb3duIG1pbmltaXplZCBmaWxlIHNpemVcbiAgICB2YXIgbm9vcCA9IGZ1bmN0aW9uKCkge307XG4gICAgdmFyIHVuZGVmaW5lZFR5cGUgPSBcInVuZGVmaW5lZFwiO1xuXG4gICAgdmFyIGxvZ01ldGhvZHMgPSBbXG4gICAgICAgIFwidHJhY2VcIixcbiAgICAgICAgXCJkZWJ1Z1wiLFxuICAgICAgICBcImluZm9cIixcbiAgICAgICAgXCJ3YXJuXCIsXG4gICAgICAgIFwiZXJyb3JcIlxuICAgIF07XG5cbiAgICAvLyBDcm9zcy1icm93c2VyIGJpbmQgZXF1aXZhbGVudCB0aGF0IHdvcmtzIGF0IGxlYXN0IGJhY2sgdG8gSUU2XG4gICAgZnVuY3Rpb24gYmluZE1ldGhvZChvYmosIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIG1ldGhvZCA9IG9ialttZXRob2ROYW1lXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRob2QuYmluZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZC5iaW5kKG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5jYWxsKG1ldGhvZCwgb2JqKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBNaXNzaW5nIGJpbmQgc2hpbSBvciBJRTggKyBNb2Rlcm5penIsIGZhbGxiYWNrIHRvIHdyYXBwaW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmFwcGx5KG1ldGhvZCwgW29iaiwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJ1aWxkIHRoZSBiZXN0IGxvZ2dpbmcgbWV0aG9kIHBvc3NpYmxlIGZvciB0aGlzIGVudlxuICAgIC8vIFdoZXJldmVyIHBvc3NpYmxlIHdlIHdhbnQgdG8gYmluZCwgbm90IHdyYXAsIHRvIHByZXNlcnZlIHN0YWNrIHRyYWNlc1xuICAgIGZ1bmN0aW9uIHJlYWxNZXRob2QobWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAobWV0aG9kTmFtZSA9PT0gJ2RlYnVnJykge1xuICAgICAgICAgICAgbWV0aG9kTmFtZSA9ICdsb2cnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSB1bmRlZmluZWRUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIE5vIG1ldGhvZCBwb3NzaWJsZSwgZm9yIG5vdyAtIGZpeGVkIGxhdGVyIGJ5IGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXNcbiAgICAgICAgfSBlbHNlIGlmIChjb25zb2xlW21ldGhvZE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsIG1ldGhvZE5hbWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGUubG9nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBiaW5kTWV0aG9kKGNvbnNvbGUsICdsb2cnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBub29wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhlc2UgcHJpdmF0ZSBmdW5jdGlvbnMgYWx3YXlzIG5lZWQgYHRoaXNgIHRvIGJlIHNldCBwcm9wZXJseVxuXG4gICAgZnVuY3Rpb24gcmVwbGFjZUxvZ2dpbmdNZXRob2RzKGxldmVsLCBsb2dnZXJOYW1lKSB7XG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9nTWV0aG9kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG1ldGhvZE5hbWUgPSBsb2dNZXRob2RzW2ldO1xuICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXSA9IChpIDwgbGV2ZWwpID9cbiAgICAgICAgICAgICAgICBub29wIDpcbiAgICAgICAgICAgICAgICB0aGlzLm1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmaW5lIGxvZy5sb2cgYXMgYW4gYWxpYXMgZm9yIGxvZy5kZWJ1Z1xuICAgICAgICB0aGlzLmxvZyA9IHRoaXMuZGVidWc7XG4gICAgfVxuXG4gICAgLy8gSW4gb2xkIElFIHZlcnNpb25zLCB0aGUgY29uc29sZSBpc24ndCBwcmVzZW50IHVudGlsIHlvdSBmaXJzdCBvcGVuIGl0LlxuICAgIC8vIFdlIGJ1aWxkIHJlYWxNZXRob2QoKSByZXBsYWNlbWVudHMgaGVyZSB0aGF0IHJlZ2VuZXJhdGUgbG9nZ2luZyBtZXRob2RzXG4gICAgZnVuY3Rpb24gZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcyhtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSB1bmRlZmluZWRUeXBlKSB7XG4gICAgICAgICAgICAgICAgcmVwbGFjZUxvZ2dpbmdNZXRob2RzLmNhbGwodGhpcywgbGV2ZWwsIGxvZ2dlck5hbWUpO1xuICAgICAgICAgICAgICAgIHRoaXNbbWV0aG9kTmFtZV0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBCeSBkZWZhdWx0LCB3ZSB1c2UgY2xvc2VseSBib3VuZCByZWFsIG1ldGhvZHMgd2hlcmV2ZXIgcG9zc2libGUsIGFuZFxuICAgIC8vIG90aGVyd2lzZSB3ZSB3YWl0IGZvciBhIGNvbnNvbGUgdG8gYXBwZWFyLCBhbmQgdGhlbiB0cnkgYWdhaW4uXG4gICAgZnVuY3Rpb24gZGVmYXVsdE1ldGhvZEZhY3RvcnkobWV0aG9kTmFtZSwgbGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgcmV0dXJuIHJlYWxNZXRob2QobWV0aG9kTmFtZSkgfHxcbiAgICAgICAgICAgICAgIGVuYWJsZUxvZ2dpbmdXaGVuQ29uc29sZUFycml2ZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2dnZXIobmFtZSwgZGVmYXVsdExldmVsLCBmYWN0b3J5KSB7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgY3VycmVudExldmVsO1xuICAgICAgdmFyIHN0b3JhZ2VLZXkgPSBcImxvZ2xldmVsXCI7XG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICBzdG9yYWdlS2V5ICs9IFwiOlwiICsgbmFtZTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGVyc2lzdExldmVsSWZQb3NzaWJsZShsZXZlbE51bSkge1xuICAgICAgICAgIHZhciBsZXZlbE5hbWUgPSAobG9nTWV0aG9kc1tsZXZlbE51bV0gfHwgJ3NpbGVudCcpLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gdW5kZWZpbmVkVHlwZSkgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gVXNlIGxvY2FsU3RvcmFnZSBpZiBhdmFpbGFibGVcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlW3N0b3JhZ2VLZXldID0gbGV2ZWxOYW1lO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXG4gICAgICAgICAgLy8gVXNlIHNlc3Npb24gY29va2llIGFzIGZhbGxiYWNrXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmNvb2tpZSA9XG4gICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0b3JhZ2VLZXkpICsgXCI9XCIgKyBsZXZlbE5hbWUgKyBcIjtcIjtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldFBlcnNpc3RlZExldmVsKCkge1xuICAgICAgICAgIHZhciBzdG9yZWRMZXZlbDtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWRUeXBlKSByZXR1cm47XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IHdpbmRvdy5sb2NhbFN0b3JhZ2Vbc3RvcmFnZUtleV07XG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuXG4gICAgICAgICAgLy8gRmFsbGJhY2sgdG8gY29va2llcyBpZiBsb2NhbCBzdG9yYWdlIGdpdmVzIHVzIG5vdGhpbmdcbiAgICAgICAgICBpZiAodHlwZW9mIHN0b3JlZExldmVsID09PSB1bmRlZmluZWRUeXBlKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICB2YXIgY29va2llID0gd2luZG93LmRvY3VtZW50LmNvb2tpZTtcbiAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IGNvb2tpZS5pbmRleE9mKFxuICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdG9yYWdlS2V5KSArIFwiPVwiKTtcbiAgICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBzdG9yZWRMZXZlbCA9IC9eKFteO10rKS8uZXhlYyhjb29raWUuc2xpY2UobG9jYXRpb24pKVsxXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIElmIHRoZSBzdG9yZWQgbGV2ZWwgaXMgbm90IHZhbGlkLCB0cmVhdCBpdCBhcyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG4gICAgICAgICAgaWYgKHNlbGYubGV2ZWxzW3N0b3JlZExldmVsXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHN0b3JlZExldmVsID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdG9yZWRMZXZlbDtcbiAgICAgIH1cblxuICAgICAgLypcbiAgICAgICAqXG4gICAgICAgKiBQdWJsaWMgbG9nZ2VyIEFQSSAtIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWwgZm9yIGRldGFpbHNcbiAgICAgICAqXG4gICAgICAgKi9cblxuICAgICAgc2VsZi5uYW1lID0gbmFtZTtcblxuICAgICAgc2VsZi5sZXZlbHMgPSB7IFwiVFJBQ0VcIjogMCwgXCJERUJVR1wiOiAxLCBcIklORk9cIjogMiwgXCJXQVJOXCI6IDMsXG4gICAgICAgICAgXCJFUlJPUlwiOiA0LCBcIlNJTEVOVFwiOiA1fTtcblxuICAgICAgc2VsZi5tZXRob2RGYWN0b3J5ID0gZmFjdG9yeSB8fCBkZWZhdWx0TWV0aG9kRmFjdG9yeTtcblxuICAgICAgc2VsZi5nZXRMZXZlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY3VycmVudExldmVsO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5zZXRMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCwgcGVyc2lzdCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwic3RyaW5nXCIgJiYgc2VsZi5sZXZlbHNbbGV2ZWwudG9VcHBlckNhc2UoKV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBsZXZlbCA9IHNlbGYubGV2ZWxzW2xldmVsLnRvVXBwZXJDYXNlKCldO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGxldmVsID09PSBcIm51bWJlclwiICYmIGxldmVsID49IDAgJiYgbGV2ZWwgPD0gc2VsZi5sZXZlbHMuU0lMRU5UKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRMZXZlbCA9IGxldmVsO1xuICAgICAgICAgICAgICBpZiAocGVyc2lzdCAhPT0gZmFsc2UpIHsgIC8vIGRlZmF1bHRzIHRvIHRydWVcbiAgICAgICAgICAgICAgICAgIHBlcnNpc3RMZXZlbElmUG9zc2libGUobGV2ZWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcGxhY2VMb2dnaW5nTWV0aG9kcy5jYWxsKHNlbGYsIGxldmVsLCBuYW1lKTtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlID09PSB1bmRlZmluZWRUeXBlICYmIGxldmVsIDwgc2VsZi5sZXZlbHMuU0lMRU5UKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCJObyBjb25zb2xlIGF2YWlsYWJsZSBmb3IgbG9nZ2luZ1wiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgXCJsb2cuc2V0TGV2ZWwoKSBjYWxsZWQgd2l0aCBpbnZhbGlkIGxldmVsOiBcIiArIGxldmVsO1xuICAgICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYuc2V0RGVmYXVsdExldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7XG4gICAgICAgICAgaWYgKCFnZXRQZXJzaXN0ZWRMZXZlbCgpKSB7XG4gICAgICAgICAgICAgIHNlbGYuc2V0TGV2ZWwobGV2ZWwsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBzZWxmLmVuYWJsZUFsbCA9IGZ1bmN0aW9uKHBlcnNpc3QpIHtcbiAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlRSQUNFLCBwZXJzaXN0KTtcbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZGlzYWJsZUFsbCA9IGZ1bmN0aW9uKHBlcnNpc3QpIHtcbiAgICAgICAgICBzZWxmLnNldExldmVsKHNlbGYubGV2ZWxzLlNJTEVOVCwgcGVyc2lzdCk7XG4gICAgICB9O1xuXG4gICAgICAvLyBJbml0aWFsaXplIHdpdGggdGhlIHJpZ2h0IGxldmVsXG4gICAgICB2YXIgaW5pdGlhbExldmVsID0gZ2V0UGVyc2lzdGVkTGV2ZWwoKTtcbiAgICAgIGlmIChpbml0aWFsTGV2ZWwgPT0gbnVsbCkge1xuICAgICAgICAgIGluaXRpYWxMZXZlbCA9IGRlZmF1bHRMZXZlbCA9PSBudWxsID8gXCJXQVJOXCIgOiBkZWZhdWx0TGV2ZWw7XG4gICAgICB9XG4gICAgICBzZWxmLnNldExldmVsKGluaXRpYWxMZXZlbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICpcbiAgICAgKiBUb3AtbGV2ZWwgQVBJXG4gICAgICpcbiAgICAgKi9cblxuICAgIHZhciBkZWZhdWx0TG9nZ2VyID0gbmV3IExvZ2dlcigpO1xuXG4gICAgdmFyIF9sb2dnZXJzQnlOYW1lID0ge307XG4gICAgZGVmYXVsdExvZ2dlci5nZXRMb2dnZXIgPSBmdW5jdGlvbiBnZXRMb2dnZXIobmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwic3RyaW5nXCIgfHwgbmFtZSA9PT0gXCJcIikge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJZb3UgbXVzdCBzdXBwbHkgYSBuYW1lIHdoZW4gY3JlYXRpbmcgYSBsb2dnZXIuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdO1xuICAgICAgICBpZiAoIWxvZ2dlcikge1xuICAgICAgICAgIGxvZ2dlciA9IF9sb2dnZXJzQnlOYW1lW25hbWVdID0gbmV3IExvZ2dlcihcbiAgICAgICAgICAgIG5hbWUsIGRlZmF1bHRMb2dnZXIuZ2V0TGV2ZWwoKSwgZGVmYXVsdExvZ2dlci5tZXRob2RGYWN0b3J5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9nZ2VyO1xuICAgIH07XG5cbiAgICAvLyBHcmFiIHRoZSBjdXJyZW50IGdsb2JhbCBsb2cgdmFyaWFibGUgaW4gY2FzZSBvZiBvdmVyd3JpdGVcbiAgICB2YXIgX2xvZyA9ICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWRUeXBlKSA/IHdpbmRvdy5sb2cgOiB1bmRlZmluZWQ7XG4gICAgZGVmYXVsdExvZ2dlci5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSB1bmRlZmluZWRUeXBlICYmXG4gICAgICAgICAgICAgICB3aW5kb3cubG9nID09PSBkZWZhdWx0TG9nZ2VyKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9nID0gX2xvZztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xuICAgIH07XG5cbiAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlcnMgPSBmdW5jdGlvbiBnZXRMb2dnZXJzKCkge1xuICAgICAgICByZXR1cm4gX2xvZ2dlcnNCeU5hbWU7XG4gICAgfTtcblxuICAgIHJldHVybiBkZWZhdWx0TG9nZ2VyO1xufSkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvbG9nbGV2ZWwvbGliL2xvZ2xldmVsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n');
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(411), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UuanM/ZmZmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///12\n');
    }, function(module, exports) {
        eval("var core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanM/MTVlMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///13\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(32);\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanM/MTZiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __webpack_require__(40);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _keys = __webpack_require__(46);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nexports.divideURL = divideURL;\nexports.emptyObject = emptyObject;\nexports.deepClone = deepClone;\nexports.removePathFromURL = removePathFromURL;\nexports.getUserURLFromEmail = getUserURLFromEmail;\nexports.getUserEmailFromURL = getUserEmailFromURL;\nexports.convertToUserURL = convertToUserURL;\nexports.isDataObjectURL = isDataObjectURL;\nexports.isLegacy = isLegacy;\nexports.isURL = isURL;\nexports.isUserURL = isUserURL;\nexports.isHypertyURL = isHypertyURL;\nexports.getConfigurationResources = getConfigurationResources;\nexports.buildURL = buildURL;\nexports.generateGUID = generateGUID;\nexports.getUserIdentityDomain = getUserIdentityDomain;\nexports.isBackendServiceURL = isBackendServiceURL;\nexports.divideEmail = divideEmail;\nexports.assign = assign;\nexports.splitObjectURL = splitObjectURL;\nexports.checkAttribute = checkAttribute;\nexports.parseAttributes = parseAttributes;\nexports.isEmpty = isEmpty;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n/**\n * Support module with some functions will be useful\n * @module utils\n */\n\n/**\n * @typedef divideURL\n * @type Object\n * @property {string} type The type of URL\n * @property {string} domain The domain of URL\n * @property {string} identity The identity of URL\n */\n\n/**\n * Divide an url in type, domain and identity\n * @param  {URL.URL} url - url address\n * @return {divideURL} the result of divideURL\n */\nfunction divideURL(url) {\n\n  function recurse(value) {\n    var regex = /([a-zA-Z-]*)(:\\/\\/(?:\\.)?|:)([-a-zA-Z0-9@:%._\\+~#=]{2,256})([-a-zA-Z0-9@:%._\\+~#=\\/]*)/gi;\n    var subst = '$1,$3,$4';\n    var parts = value.replace(regex, subst).split(',');\n    return parts;\n  }\n\n  var parts = recurse(url);\n\n  // If the url has no scheme\n  if (parts[0] === url && !parts[0].includes('@')) {\n\n    var _result = {\n      type: '',\n      domain: url,\n      identity: ''\n    };\n\n    console.warn('[DivideURL] DivideURL don\\'t support url without scheme. Please review your url address', url);\n\n    return _result;\n  }\n\n  // check if the url has the scheme and includes an @\n  if (parts[0] === url && parts[0].includes('@')) {\n    var scheme = parts[0] === url ? 'smtp' : parts[0];\n    parts = recurse(scheme + '://' + parts[0]);\n  }\n\n  // if the domain includes an @, divide it to domain and identity respectively\n  if (parts[1].includes('@')) {\n    parts[2] = parts[0] + '://' + parts[1];\n    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);\n  } /*else if (parts[2].includes('/')) {\n    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);\n    }*/\n\n  var result = {\n    type: parts[0],\n    domain: parts[1],\n    identity: parts[2]\n  };\n\n  return result;\n}\n\n/**\n * Check if an Object is empty\n * @param  {Object} object Object to be checked\n * @return {Boolean}       status of Object, empty or not (true|false);\n */\nfunction emptyObject(object) {\n  return (0, _keys2.default)(object).length > 0 ? false : true;\n}\n\n/**\n * Make a COPY of the original data\n * @param  {Object}  obj - object to be cloned\n * @return {Object}\n */\nfunction deepClone(obj) {\n  //TODO: simple but inefficient JSON deep clone...\n  if (obj) return JSON.parse((0, _stringify2.default)(obj));\n}\n\nfunction removePathFromURL(url) {\n  var splitURL = url.split('/');\n  return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];\n}\n\n/**\n * Obtains the user URL that corresponds to a given email\n * @param  {string} userEmail The user email\n * @return {URL.URL} userURL The user URL\n */\nfunction getUserURLFromEmail(userEmail) {\n  var indexOfAt = userEmail.indexOf('@');\n  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);\n}\n\n/**\n * Obtains the user email that corresponds to a given URL\n * @param  {URL.URL} userURL The user URL\n * @return {string} userEmail The user email\n */\nfunction getUserEmailFromURL(userURL) {\n  var url = divideURL(userURL);\n  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'\n}\n\n/**\n * Check if the user identifier is already in the URL format, if not, convert to URL format\n * @param  {string}   identifier  user identifier\n * @return {string}   userURL    the user URL\n */\nfunction convertToUserURL(identifier) {\n\n  // check if the identifier is already in the url format\n  if (identifier.substring(0, 7) === 'user://') {\n    var dividedURL = divideURL(identifier);\n\n    //check if the url is well formated\n    if (dividedURL.domain && dividedURL.identity) {\n      return identifier;\n    } else {\n      throw 'userURL with wrong format';\n    }\n\n    //if not, convert the user email to URL format\n  } else {\n    return getUserURLFromEmail(identifier);\n  }\n}\n\nfunction isDataObjectURL(url) {\n  var schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];\n  var splitURL = url.split('://');\n  var urlSchema = splitURL[0];\n\n  return schemasToIgnore.indexOf(urlSchema) === -1;\n}\n\nfunction isLegacy(url) {\n  if (url.split('@').length > 1) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction isURL(url) {\n  return url.split('/').length >= 3;\n}\n\nfunction isUserURL(url) {\n  return divideURL(url).type === 'user';\n}\n\nfunction isHypertyURL(url) {\n  return divideURL(url).type === 'hyperty';\n}\n\n/**\n * get information relative each component configured on runtime configuration;\n * @param  {object} configuration object with all configuration\n * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;\n * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy\n * @return {object}               return an object with all configurations;\n */\nfunction getConfigurationResources(configuration, component, resource) {\n  var objectResource = configuration[component];\n  var resourceType = objectResource[resource];\n\n  return resourceType;\n}\n\n/**\n * Build a full url with the runtime configuration;\n * @param  {object} configuration object with all configuration\n * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;\n * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy\n * @param  {string} type          resource to get, like a hyperty name or protocolstub name;\n * @param  {boolean} useFallback  if true the function will check if have a fallback url;\n * @return {string}               partial url to contact the resource;\n */\nfunction buildURL(configuration, component, resource, type) {\n  var useFallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  var objectResource = configuration[component];\n  var url = void 0;\n\n  if (!objectResource.hasOwnProperty(resource)) {\n    throw Error('The configuration ' + (0, _stringify2.default)(objectResource, '', 2) + ' don\\'t have the ' + resource + ' resource you are looking for');\n  }\n\n  var resourceType = objectResource[resource];\n\n  if (type) {\n    url = resourceType.prefix + configuration.domain + resourceType.suffix + type;\n    if (resourceType.hasOwnProperty('fallback') && useFallback) {\n      if (resourceType.fallback.indexOf('%domain%')) {\n        url = resourceType.fallback.replace(/(%domain%)/g, configuration.domain) + type;\n      } else {\n        url = resourceType.fallback + type;\n      }\n    }\n  } else {\n    url = resourceType.prefix + configuration.domain + resourceType.suffix;\n  }\n\n  // console.log(url);\n\n  return url;\n}\n\n/**\n * Generate a Global Unique ID\n *\n * @returns String;\n */\nfunction generateGUID() {\n\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n}\n\nfunction getUserIdentityDomain(url) {\n  var dividedURL = divideURL(url);\n  var splitedDomain = dividedURL.domain.split('.');\n  var splitedLength = splitedDomain.length;\n  if (splitedLength == 1) {\n    return splitedDomain[splitedLength - 1];\n  }\n  var domain = splitedDomain[splitedLength - 2] + '.' + splitedDomain[splitedLength - 1];\n  return domain;\n}\n\n/**\n * Check if URL is from a backend service\n * @param  {string} url     URL to be processed\n * @return {boolean}\n */\n\nfunction isBackendServiceURL(url) {\n  var dividedURL = divideURL(url);\n  var splitedDomain = dividedURL.domain.split('.');\n  var backendSchemes = ['domain', 'global', 'domain-idp']; // should be defined in the runtime configuration\n  var backendSubDomains = ['registry', 'msg-node']; // should be defined in the runtime configuration\n  var subDomain = void 0;\n\n  if (splitedDomain.length > 1) {\n    subDomain = splitedDomain.filter(function (item) {\n      return backendSubDomains.indexOf(item) !== -1;\n    })[0];\n  }\n\n  if (subDomain && backendSubDomains.indexOf(subDomain) !== -1) {\n    return true;\n  }\n\n  if (dividedURL.type) {\n    return backendSchemes.indexOf(dividedURL.type) !== -1;\n  }\n\n  return false;\n}\n\nfunction divideEmail(email) {\n  var indexOfAt = email.indexOf('@');\n\n  var result = {\n    username: email.substring(0, indexOfAt),\n    domain: email.substring(indexOfAt + 1, email.length)\n  };\n\n  return result;\n}\n\nfunction assign(obj, keyPath, value) {\n\n  if (!obj) obj = {};\n  if (typeof keyPath === 'string') keyPath = parseAttributes(keyPath);\n\n  var lastKeyIndex = keyPath.length - 1;\n\n  for (var i = 0; i < lastKeyIndex; ++i) {\n    var key = keyPath[i];\n    if (!(key in obj)) {\n      obj[key] = {};\n    }\n\n    obj = obj[key];\n  }\n\n  obj[keyPath[lastKeyIndex]] = value;\n}\n\nfunction splitObjectURL(dataObjectURL) {\n  console.info('[utils - splitObjectURL]: ', dataObjectURL);\n\n  var splitedURL = dataObjectURL.split('/');\n  var url = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3];\n  var resource = splitedURL[5];\n\n  var result = {\n    url: url,\n    resource: resource\n  };\n\n  console.info('[utils - splitObjectURL]: ', result);\n\n  return result;\n}\n\nfunction checkAttribute(path) {\n\n  var regex = /((([a-zA-Z]+):\\/\\/([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})\\/[a-zA-Z0-9\\.]+@[a-zA-Z0-9]+(\\-)?[a-zA-Z0-9]+(\\.)?[a-zA-Z0-9]{2,10}?\\.[a-zA-Z]{2,10})(.+(?=.identity))?/gm;\n\n  var list = [];\n  var final = [];\n  var test = path.match(regex);\n\n  if (test == null) {\n    final = path.split('.');\n  } else {\n    var m = void 0;\n    while ((m = regex.exec(path)) !== null) {\n      // This is necessary to avoid infinite loops with zero-width matches\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n\n      // The result can be accessed through the `m`-variable.\n      m.forEach(function (match, groupIndex) {\n        if (groupIndex === 0) {\n          list.push(match);\n        }\n      });\n    }\n    var result = void 0;\n    list.forEach(function (url) {\n\n      result = path.replace(url, '*-*');\n      final = result.split('.').map(function (item) {\n\n        if (item === '*-*') {\n          return url;\n        }\n\n        return item;\n      });\n    });\n  }\n\n  console.log('[RuntimeCore.Utils.checkAttribute]', final);\n  return final;\n}\n\nfunction parseAttributes(path) {\n  var regex = /([0-9a-zA-Z][-\\w]*):\\/\\//g;\n\n  var string3 = 'identity';\n\n  if (!path.includes('://')) {\n    return path.split('.');\n  } else {\n    var string1 = path.split(regex)[0];\n\n    var array1 = string1.split('.');\n\n    var string2 = path.replace(string1, '');\n\n    if (path.includes(string3)) {\n\n      var array2 = string2.split(string3 + '.');\n\n      console.log('array2 ' + array2);\n\n      string2 = array2[0].slice('.', -1);\n\n      array2 = array2[1].split('.');\n\n      array1.push(string2, string3);\n\n      array1 = array1.concat(array2);\n    } else {\n      array1.push(string2);\n    }\n\n    return array1.filter(Boolean);\n  }\n}\n\nfunction isEmpty(obj) {\n  for (var prop in obj) {\n\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n\n  return (0, _stringify2.default)(obj) === (0, _stringify2.default)({});\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3V0aWxzL3V0aWxzLmpzP2JlNzMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuLyoqXG4gKiBTdXBwb3J0IG1vZHVsZSB3aXRoIHNvbWUgZnVuY3Rpb25zIHdpbGwgYmUgdXNlZnVsXG4gKiBAbW9kdWxlIHV0aWxzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBkaXZpZGVVUkxcbiAqIEB0eXBlIE9iamVjdFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgVVJMXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gb2YgVVJMXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaWRlbnRpdHkgVGhlIGlkZW50aXR5IG9mIFVSTFxuICovXG5cbi8qKlxuICogRGl2aWRlIGFuIHVybCBpbiB0eXBlLCBkb21haW4gYW5kIGlkZW50aXR5XG4gKiBAcGFyYW0gIHtVUkwuVVJMfSB1cmwgLSB1cmwgYWRkcmVzc1xuICogQHJldHVybiB7ZGl2aWRlVVJMfSB0aGUgcmVzdWx0IG9mIGRpdmlkZVVSTFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlVVJMKHVybCkge1xuXG4gIGZ1bmN0aW9uIHJlY3Vyc2UodmFsdWUpIHtcbiAgICBjb25zdCByZWdleCA9IC8oW2EtekEtWi1dKikoOlxcL1xcLyg/OlxcLik/fDopKFstYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1xcK34jPVxcL10qKS9naTtcbiAgICBjb25zdCBzdWJzdCA9ICckMSwkMywkNCc7XG4gICAgbGV0IHBhcnRzID0gdmFsdWUucmVwbGFjZShyZWdleCwgc3Vic3QpLnNwbGl0KCcsJyk7XG4gICAgcmV0dXJuIHBhcnRzO1xuICB9XG5cbiAgbGV0IHBhcnRzID0gcmVjdXJzZSh1cmwpO1xuXG4gIC8vIElmIHRoZSB1cmwgaGFzIG5vIHNjaGVtZVxuICBpZiAocGFydHNbMF0gPT09IHVybCAmJiAhcGFydHNbMF0uaW5jbHVkZXMoJ0AnKSkge1xuXG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgIHR5cGU6ICcnLFxuICAgICAgZG9tYWluOiB1cmwsXG4gICAgICBpZGVudGl0eTogJydcbiAgICB9O1xuXG4gICAgY29uc29sZS53YXJuKCdbRGl2aWRlVVJMXSBEaXZpZGVVUkwgZG9uXFwndCBzdXBwb3J0IHVybCB3aXRob3V0IHNjaGVtZS4gUGxlYXNlIHJldmlldyB5b3VyIHVybCBhZGRyZXNzJywgdXJsKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXHQvLyBjaGVjayBpZiB0aGUgdXJsIGhhcyB0aGUgc2NoZW1lIGFuZCBpbmNsdWRlcyBhbiBAXG4gIGlmIChwYXJ0c1swXSA9PT0gdXJsICYmIHBhcnRzWzBdLmluY2x1ZGVzKCdAJykpIHtcbiAgICBsZXQgc2NoZW1lID0gcGFydHNbMF0gPT09IHVybCA/ICdzbXRwJyA6IHBhcnRzWzBdO1xuICAgIHBhcnRzID0gcmVjdXJzZShzY2hlbWUgKyAnOi8vJyArIHBhcnRzWzBdKTtcbiAgfVxuXG5cdC8vIGlmIHRoZSBkb21haW4gaW5jbHVkZXMgYW4gQCwgZGl2aWRlIGl0IHRvIGRvbWFpbiBhbmQgaWRlbnRpdHkgcmVzcGVjdGl2ZWx5XG4gIGlmIChwYXJ0c1sxXS5pbmNsdWRlcygnQCcpKSB7XG4gICAgcGFydHNbMl0gPSBwYXJ0c1swXSArICc6Ly8nICsgcGFydHNbMV07XG4gICAgcGFydHNbMV0gPSBwYXJ0c1sxXS5zdWJzdHIocGFydHNbMV0uaW5kZXhPZignQCcpICsgMSk7XG4gIH0gXHQvKmVsc2UgaWYgKHBhcnRzWzJdLmluY2x1ZGVzKCcvJykpIHtcbiAgICBwYXJ0c1syXSA9IHBhcnRzWzJdLnN1YnN0cihwYXJ0c1syXS5sYXN0SW5kZXhPZignLycpKzEpO1xuICB9Ki9cblxuICBsZXQgcmVzdWx0ID0ge1xuICAgIHR5cGU6IHBhcnRzWzBdLFxuICAgIGRvbWFpbjogcGFydHNbMV0sXG4gICAgaWRlbnRpdHk6IHBhcnRzWzJdXG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcblxufVxuXG4vKipcbiAqIENoZWNrIGlmIGFuIE9iamVjdCBpcyBlbXB0eVxuICogQHBhcmFtICB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGJlIGNoZWNrZWRcbiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIHN0YXR1cyBvZiBPYmplY3QsIGVtcHR5IG9yIG5vdCAodHJ1ZXxmYWxzZSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbXB0eU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iamVjdCkubGVuZ3RoID4gMCA/IGZhbHNlIDogdHJ1ZTtcbn1cblxuLyoqXG4gKiBNYWtlIGEgQ09QWSBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICogQHBhcmFtICB7T2JqZWN0fSAgb2JqIC0gb2JqZWN0IHRvIGJlIGNsb25lZFxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVlcENsb25lKG9iaikge1xuICAvL1RPRE86IHNpbXBsZSBidXQgaW5lZmZpY2llbnQgSlNPTiBkZWVwIGNsb25lLi4uXG4gIGlmIChvYmopIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUGF0aEZyb21VUkwodXJsKSB7XG4gIGxldCBzcGxpdFVSTCA9IHVybC5zcGxpdCgnLycpO1xuICByZXR1cm4gc3BsaXRVUkxbMF0gKyAnLy8nICsgc3BsaXRVUkxbMl0gKyAnLycgKyBzcGxpdFVSTFszXTtcbn1cblxuLyoqXG4gKiBPYnRhaW5zIHRoZSB1c2VyIFVSTCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gZW1haWxcbiAqIEBwYXJhbSAge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsXG4gKiBAcmV0dXJuIHtVUkwuVVJMfSB1c2VyVVJMIFRoZSB1c2VyIFVSTFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlclVSTEZyb21FbWFpbCh1c2VyRW1haWwpIHtcbiAgbGV0IGluZGV4T2ZBdCA9IHVzZXJFbWFpbC5pbmRleE9mKCdAJyk7XG4gIHJldHVybiAndXNlcjovLycgKyB1c2VyRW1haWwuc3Vic3RyaW5nKGluZGV4T2ZBdCArIDEsIHVzZXJFbWFpbC5sZW5ndGgpICsgJy8nICsgdXNlckVtYWlsLnN1YnN0cmluZygwLCBpbmRleE9mQXQpO1xufVxuXG4vKipcbiAqIE9idGFpbnMgdGhlIHVzZXIgZW1haWwgdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIFVSTFxuICogQHBhcmFtICB7VVJMLlVSTH0gdXNlclVSTCBUaGUgdXNlciBVUkxcbiAqIEByZXR1cm4ge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyRW1haWxGcm9tVVJMKHVzZXJVUkwpIHtcbiAgbGV0IHVybCA9IGRpdmlkZVVSTCh1c2VyVVJMKTtcbiAgcmV0dXJuIHVybC5pZGVudGl0eS5yZXBsYWNlKCcvJywgJycpICsgJ0AnICsgdXJsLmRvbWFpbjsgLy8gaWRlbnRpdHkgZmllbGQgaGFzICcvZXhhbXBsZUlEJyBpbnN0ZWFkIG9mICdleGFtcGxlSUQnXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHVzZXIgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSBVUkwgZm9ybWF0LCBpZiBub3QsIGNvbnZlcnQgdG8gVVJMIGZvcm1hdFxuICogQHBhcmFtICB7c3RyaW5nfSAgIGlkZW50aWZpZXIgIHVzZXIgaWRlbnRpZmllclxuICogQHJldHVybiB7c3RyaW5nfSAgIHVzZXJVUkwgICAgdGhlIHVzZXIgVVJMXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9Vc2VyVVJMKGlkZW50aWZpZXIpIHtcblxuICAvLyBjaGVjayBpZiB0aGUgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSB1cmwgZm9ybWF0XG4gIGlmIChpZGVudGlmaWVyLnN1YnN0cmluZygwLCA3KSA9PT0gJ3VzZXI6Ly8nKSB7XG4gICAgbGV0IGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwoaWRlbnRpZmllcik7XG5cbiAgICAvL2NoZWNrIGlmIHRoZSB1cmwgaXMgd2VsbCBmb3JtYXRlZFxuICAgIGlmIChkaXZpZGVkVVJMLmRvbWFpbiAmJiBkaXZpZGVkVVJMLmlkZW50aXR5KSB7XG4gICAgICByZXR1cm4gaWRlbnRpZmllcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ3VzZXJVUkwgd2l0aCB3cm9uZyBmb3JtYXQnO1xuICAgIH1cblxuICAvL2lmIG5vdCwgY29udmVydCB0aGUgdXNlciBlbWFpbCB0byBVUkwgZm9ybWF0XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldFVzZXJVUkxGcm9tRW1haWwoaWRlbnRpZmllcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0YU9iamVjdFVSTCh1cmwpIHtcbiAgbGV0IHNjaGVtYXNUb0lnbm9yZSA9IFsnZG9tYWluLWlkcCcsICdydW50aW1lJywgJ2RvbWFpbicsICdoeXBlcnR5J107XG4gIGxldCBzcGxpdFVSTCA9ICh1cmwpLnNwbGl0KCc6Ly8nKTtcbiAgbGV0IHVybFNjaGVtYSA9IHNwbGl0VVJMWzBdO1xuXG4gIHJldHVybiBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZih1cmxTY2hlbWEpID09PSAtMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVnYWN5KHVybCkge1xuICBpZiAodXJsLnNwbGl0KCdAJykubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVUkwodXJsKSB7XG4gIHJldHVybiAodXJsKS5zcGxpdCgnLycpLmxlbmd0aCA+PSAzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVc2VyVVJMKHVybCkge1xuICByZXR1cm4gZGl2aWRlVVJMKHVybCkudHlwZSA9PT0gJ3VzZXInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNIeXBlcnR5VVJMKHVybCkge1xuICByZXR1cm4gZGl2aWRlVVJMKHVybCkudHlwZSA9PT0gJ2h5cGVydHknO1xufVxuXG4vKipcbiAqIGdldCBpbmZvcm1hdGlvbiByZWxhdGl2ZSBlYWNoIGNvbXBvbmVudCBjb25maWd1cmVkIG9uIHJ1bnRpbWUgY29uZmlndXJhdGlvbjtcbiAqIEBwYXJhbSAge29iamVjdH0gY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBhbGwgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7c3RyaW5nfSBjb21wb25lbnQgICAgIHN0cmluZyB3aXRoIHRoZSBjb21wb25lbnQgdG8gZ2V0IHRoZSBjb25maWd1cmF0aW9uLCBsaWtlLCBydW50aW1lVVJMUywgY2F0YWxvZ3VlVVJMcywgbXNnTm9kZVVSTCwgZG9tYWluUmVnaXN0cnlVUkw7XG4gKiBAcGFyYW0gIHtzdHJpbmd9IHJlc291cmNlICAgICAgdHlwZSBvZiByZXNvdXJjZSB0byBnZXQsIGxpa2UsIGNhdGFsb2d1ZSwgcnVudGltZVVBLCBwcm90b2NvbHN0dWIsIGlkcFByb3h5XG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgICAgICAgcmV0dXJuIGFuIG9iamVjdCB3aXRoIGFsbCBjb25maWd1cmF0aW9ucztcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXMoY29uZmlndXJhdGlvbiwgY29tcG9uZW50LCByZXNvdXJjZSkge1xuICBsZXQgb2JqZWN0UmVzb3VyY2UgPSBjb25maWd1cmF0aW9uW2NvbXBvbmVudF07XG4gIGxldCByZXNvdXJjZVR5cGUgPSBvYmplY3RSZXNvdXJjZVtyZXNvdXJjZV07XG5cbiAgcmV0dXJuIHJlc291cmNlVHlwZTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIGZ1bGwgdXJsIHdpdGggdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbjtcbiAqIEBwYXJhbSAge29iamVjdH0gY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBhbGwgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7c3RyaW5nfSBjb21wb25lbnQgICAgIHN0cmluZyB3aXRoIHRoZSBjb21wb25lbnQgdG8gZ2V0IHRoZSBjb25maWd1cmF0aW9uLCBsaWtlLCBydW50aW1lVVJMUywgY2F0YWxvZ3VlVVJMcywgbXNnTm9kZVVSTCwgZG9tYWluUmVnaXN0cnlVUkw7XG4gKiBAcGFyYW0gIHtzdHJpbmd9IHJlc291cmNlICAgICAgdHlwZSBvZiByZXNvdXJjZSB0byBnZXQsIGxpa2UsIGNhdGFsb2d1ZSwgcnVudGltZVVBLCBwcm90b2NvbHN0dWIsIGlkcFByb3h5XG4gKiBAcGFyYW0gIHtzdHJpbmd9IHR5cGUgICAgICAgICAgcmVzb3VyY2UgdG8gZ2V0LCBsaWtlIGEgaHlwZXJ0eSBuYW1lIG9yIHByb3RvY29sc3R1YiBuYW1lO1xuICogQHBhcmFtICB7Ym9vbGVhbn0gdXNlRmFsbGJhY2sgIGlmIHRydWUgdGhlIGZ1bmN0aW9uIHdpbGwgY2hlY2sgaWYgaGF2ZSBhIGZhbGxiYWNrIHVybDtcbiAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgICBwYXJ0aWFsIHVybCB0byBjb250YWN0IHRoZSByZXNvdXJjZTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkVVJMKGNvbmZpZ3VyYXRpb24sIGNvbXBvbmVudCwgcmVzb3VyY2UsIHR5cGUsIHVzZUZhbGxiYWNrID0gZmFsc2UpIHtcbiAgbGV0IG9iamVjdFJlc291cmNlID0gY29uZmlndXJhdGlvbltjb21wb25lbnRdO1xuICBsZXQgdXJsO1xuXG4gIGlmICghb2JqZWN0UmVzb3VyY2UuaGFzT3duUHJvcGVydHkocmVzb3VyY2UpKSB7XG4gICAgdGhyb3cgRXJyb3IoJ1RoZSBjb25maWd1cmF0aW9uICcgKyBKU09OLnN0cmluZ2lmeShvYmplY3RSZXNvdXJjZSwgJycsIDIpICsgJyBkb25cXCd0IGhhdmUgdGhlICcgKyByZXNvdXJjZSArICcgcmVzb3VyY2UgeW91IGFyZSBsb29raW5nIGZvcicpO1xuICB9XG5cbiAgbGV0IHJlc291cmNlVHlwZSA9IG9iamVjdFJlc291cmNlW3Jlc291cmNlXTtcblxuICBpZiAodHlwZSkge1xuICAgIHVybCA9IHJlc291cmNlVHlwZS5wcmVmaXggKyBjb25maWd1cmF0aW9uLmRvbWFpbiArIHJlc291cmNlVHlwZS5zdWZmaXggKyB0eXBlO1xuICAgIGlmIChyZXNvdXJjZVR5cGUuaGFzT3duUHJvcGVydHkoJ2ZhbGxiYWNrJykgJiYgdXNlRmFsbGJhY2spIHtcbiAgICAgIGlmIChyZXNvdXJjZVR5cGUuZmFsbGJhY2suaW5kZXhPZignJWRvbWFpbiUnKSkge1xuICAgICAgICB1cmwgPSByZXNvdXJjZVR5cGUuZmFsbGJhY2sucmVwbGFjZSgvKCVkb21haW4lKS9nLCBjb25maWd1cmF0aW9uLmRvbWFpbikgKyB0eXBlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJsID0gcmVzb3VyY2VUeXBlLmZhbGxiYWNrICsgdHlwZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdXJsID0gcmVzb3VyY2VUeXBlLnByZWZpeCArIGNvbmZpZ3VyYXRpb24uZG9tYWluICsgcmVzb3VyY2VUeXBlLnN1ZmZpeDtcbiAgfVxuXG4gIC8vIGNvbnNvbGUubG9nKHVybCk7XG5cbiAgcmV0dXJuIHVybDtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIEdsb2JhbCBVbmlxdWUgSURcbiAqXG4gKiBAcmV0dXJucyBTdHJpbmc7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUdVSUQoKSB7XG5cbiAgZnVuY3Rpb24gczQoKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXG4gICAgICAudG9TdHJpbmcoMTYpXG4gICAgICAuc3Vic3RyaW5nKDEpO1xuICB9XG5cbiAgcmV0dXJuIHM0KCkgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArIHM0KCkgKyBzNCgpO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VySWRlbnRpdHlEb21haW4odXJsKSB7XG4gIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKHVybCk7XG4gIGxldCBzcGxpdGVkRG9tYWluID0gZGl2aWRlZFVSTC5kb21haW4uc3BsaXQoJy4nKTtcbiAgbGV0IHNwbGl0ZWRMZW5ndGggPSBzcGxpdGVkRG9tYWluLmxlbmd0aDtcbiAgaWYgKHNwbGl0ZWRMZW5ndGggPT0gMSkge1xuICAgIHJldHVybiBzcGxpdGVkRG9tYWluW3NwbGl0ZWRMZW5ndGggLSAxXTtcbiAgfVxuICBsZXQgZG9tYWluID0gc3BsaXRlZERvbWFpbltzcGxpdGVkTGVuZ3RoIC0gMl0gKyAnLicgKyBzcGxpdGVkRG9tYWluW3NwbGl0ZWRMZW5ndGggLSAxXTtcbiAgcmV0dXJuIGRvbWFpbjtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBVUkwgaXMgZnJvbSBhIGJhY2tlbmQgc2VydmljZVxuICogQHBhcmFtICB7c3RyaW5nfSB1cmwgICAgIFVSTCB0byBiZSBwcm9jZXNzZWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQmFja2VuZFNlcnZpY2VVUkwodXJsKSB7XG4gIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKHVybCk7XG4gIGxldCBzcGxpdGVkRG9tYWluID0gZGl2aWRlZFVSTC5kb21haW4uc3BsaXQoJy4nKTtcbiAgbGV0IGJhY2tlbmRTY2hlbWVzID0gWydkb21haW4nLCAnZ2xvYmFsJywgJ2RvbWFpbi1pZHAnXTsgLy8gc2hvdWxkIGJlIGRlZmluZWQgaW4gdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvblxuICBsZXQgYmFja2VuZFN1YkRvbWFpbnMgPSBbJ3JlZ2lzdHJ5JywgJ21zZy1ub2RlJ107IC8vIHNob3VsZCBiZSBkZWZpbmVkIGluIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb25cbiAgbGV0IHN1YkRvbWFpbjtcblxuICBpZiAoc3BsaXRlZERvbWFpbi5sZW5ndGggPiAxKSB7XG4gICAgc3ViRG9tYWluID0gc3BsaXRlZERvbWFpbi5maWx0ZXIoaXRlbSA9PiBiYWNrZW5kU3ViRG9tYWlucy5pbmRleE9mKGl0ZW0pICE9PSAtMSlbMF07XG4gIH1cblxuICBpZiAoc3ViRG9tYWluICYmIGJhY2tlbmRTdWJEb21haW5zLmluZGV4T2Yoc3ViRG9tYWluKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChkaXZpZGVkVVJMLnR5cGUpIHtcbiAgICByZXR1cm4gKGJhY2tlbmRTY2hlbWVzLmluZGV4T2YoZGl2aWRlZFVSTC50eXBlKSAhPT0gLTEpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlRW1haWwoZW1haWwpIHtcbiAgbGV0IGluZGV4T2ZBdCA9IGVtYWlsLmluZGV4T2YoJ0AnKTtcblxuICBsZXQgcmVzdWx0ID0ge1xuICAgIHVzZXJuYW1lOiBlbWFpbC5zdWJzdHJpbmcoMCwgaW5kZXhPZkF0KSxcbiAgICBkb21haW46IGVtYWlsLnN1YnN0cmluZyhpbmRleE9mQXQgKyAxLCBlbWFpbC5sZW5ndGgpXG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKG9iaiwga2V5UGF0aCwgdmFsdWUpIHtcblxuICBpZiAoIW9iaikgb2JqID0ge307XG4gIGlmICh0eXBlb2Yoa2V5UGF0aCkgPT09ICdzdHJpbmcnKSBrZXlQYXRoID0gcGFyc2VBdHRyaWJ1dGVzKGtleVBhdGgpO1xuXG4gIGxldCBsYXN0S2V5SW5kZXggPSBrZXlQYXRoLmxlbmd0aCAtIDE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0S2V5SW5kZXg7ICsraSkge1xuICAgIGxldCBrZXkgPSBrZXlQYXRoW2ldO1xuICAgIGlmICghKGtleSBpbiBvYmopKSB7XG4gICAgICBvYmpba2V5XSA9IHt9O1xuICAgIH1cblxuICAgIG9iaiA9IG9ialtrZXldO1xuXG4gIH1cblxuICBvYmpba2V5UGF0aFtsYXN0S2V5SW5kZXhdXSA9IHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRPYmplY3RVUkwoZGF0YU9iamVjdFVSTCkge1xuICBjb25zb2xlLmluZm8oJ1t1dGlscyAtIHNwbGl0T2JqZWN0VVJMXTogJywgZGF0YU9iamVjdFVSTCk7XG5cbiAgbGV0IHNwbGl0ZWRVUkwgPSBkYXRhT2JqZWN0VVJMLnNwbGl0KCcvJyk7XG4gIGxldCB1cmwgPSBzcGxpdGVkVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRVUkxbMl0gKyAnLycgKyBzcGxpdGVkVVJMWzNdO1xuICBsZXQgcmVzb3VyY2UgPSBzcGxpdGVkVVJMWzVdO1xuXG4gIGxldCByZXN1bHQgPSB7XG4gICAgdXJsOiB1cmwsXG4gICAgcmVzb3VyY2U6IHJlc291cmNlXG4gIH07XG5cbiAgY29uc29sZS5pbmZvKCdbdXRpbHMgLSBzcGxpdE9iamVjdFVSTF06ICcsIHJlc3VsdCk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQXR0cmlidXRlKHBhdGgpIHtcblxuICBsZXQgcmVnZXggPSAvKCgoW2EtekEtWl0rKTpcXC9cXC8oWzAtOWEtekEtWl1bLVxcd10qWzAtOWEtekEtWl1cXC4pK1thLXpBLVpdezIsOX0pXFwvW2EtekEtWjAtOVxcLl0rQFthLXpBLVowLTldKyhcXC0pP1thLXpBLVowLTldKyhcXC4pP1thLXpBLVowLTldezIsMTB9P1xcLlthLXpBLVpdezIsMTB9KSguKyg/PS5pZGVudGl0eSkpPy9nbTtcblxuICBsZXQgbGlzdCA9IFtdO1xuICBsZXQgZmluYWwgPSBbXTtcbiAgbGV0IHRlc3QgPSBwYXRoLm1hdGNoKHJlZ2V4KTtcblxuICBpZiAodGVzdCA9PSBudWxsKSB7XG4gICAgZmluYWwgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IG07XG4gICAgd2hpbGUgKChtID0gcmVnZXguZXhlYyhwYXRoKSkgIT09IG51bGwpIHtcbiAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIGF2b2lkIGluZmluaXRlIGxvb3BzIHdpdGggemVyby13aWR0aCBtYXRjaGVzXG4gICAgICBpZiAobS5pbmRleCA9PT0gcmVnZXgubGFzdEluZGV4KSB7XG4gICAgICAgIHJlZ2V4Lmxhc3RJbmRleCsrO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVzdWx0IGNhbiBiZSBhY2Nlc3NlZCB0aHJvdWdoIHRoZSBgbWAtdmFyaWFibGUuXG4gICAgICBtLmZvckVhY2goKG1hdGNoLCBncm91cEluZGV4KSA9PiB7XG4gICAgICAgIGlmIChncm91cEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgbGlzdC5wdXNoKG1hdGNoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXN1bHQ7XG4gICAgbGlzdC5mb3JFYWNoKCh1cmwpID0+IHtcblxuICAgICAgcmVzdWx0ID0gcGF0aC5yZXBsYWNlKHVybCwgJyotKicpO1xuICAgICAgZmluYWwgPSByZXN1bHQuc3BsaXQoJy4nKS5tYXAoKGl0ZW0pID0+IHtcblxuICAgICAgICBpZiAoaXRlbSA9PT0gJyotKicpIHsgcmV0dXJuIHVybDsgfVxuXG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjb25zb2xlLmxvZygnW1J1bnRpbWVDb3JlLlV0aWxzLmNoZWNrQXR0cmlidXRlXScsIGZpbmFsKTtcbiAgcmV0dXJuIGZpbmFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBdHRyaWJ1dGVzKHBhdGgpIHtcbiAgbGV0IHJlZ2V4ID0gLyhbMC05YS16QS1aXVstXFx3XSopOlxcL1xcLy9nO1xuXG4gIGxldCBzdHJpbmczID0gJ2lkZW50aXR5JztcblxuICBpZiAoIXBhdGguaW5jbHVkZXMoJzovLycpKSB7XG4gICAgcmV0dXJuIChwYXRoLnNwbGl0KCcuJykpO1xuICB9IGVsc2Uge1xuICAgIGxldCBzdHJpbmcxID0gcGF0aC5zcGxpdChyZWdleClbMF07XG5cbiAgICBsZXQgYXJyYXkxID0gc3RyaW5nMS5zcGxpdCgnLicpO1xuXG4gICAgbGV0IHN0cmluZzIgPSBwYXRoLnJlcGxhY2Uoc3RyaW5nMSwgJycpO1xuXG4gICAgaWYgKHBhdGguaW5jbHVkZXMoc3RyaW5nMykpIHtcblxuICAgICAgbGV0IGFycmF5MiA9IHN0cmluZzIuc3BsaXQoc3RyaW5nMyArICcuJyk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdhcnJheTIgJyArIGFycmF5Mik7XG5cbiAgICAgIHN0cmluZzIgPSBhcnJheTJbMF0uc2xpY2UoJy4nLCAtMSk7XG5cbiAgICAgIGFycmF5MiA9IGFycmF5MlsxXS5zcGxpdCgnLicpO1xuXG4gICAgICBhcnJheTEucHVzaChzdHJpbmcyLCBzdHJpbmczKTtcblxuICAgICAgYXJyYXkxID0gYXJyYXkxLmNvbmNhdChhcnJheTIpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIGFycmF5MS5wdXNoKHN0cmluZzIpO1xuXG4gICAgfVxuXG4gICAgcmV0dXJuIChhcnJheTEuZmlsdGVyKEJvb2xlYW4pKTtcblxuICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XG4gIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG5cbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gIH1cblxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKSA9PT0gSlNPTi5zdHJpbmdpZnkoe30pO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy91dGlscy91dGlscy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUF3Q0E7QUFzREE7QUFTQTtBQUtBO0FBVUE7QUFVQTtBQVVBO0FBbUJBO0FBUUE7QUFRQTtBQUlBO0FBSUE7QUFXQTtBQWdCQTtBQWlDQTtBQVlBO0FBaUJBO0FBc0JBO0FBWUE7QUFvQkE7QUFpQkE7QUEwQ0E7QUF1Q0E7QUFDQTs7O0FBdmFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBOzs7OztBQUtBOzs7Ozs7OztBQVFBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFDQTtBQUtBO0FBRUE7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n");
    }, function(module, exports) {
        eval("module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzPzVkMjMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");
    }, function(module, exports) {
        eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanM/NTgxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanNcbi8vIG1vZHVsZSBpZCA9IDE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");
    }, function(module, exports, __webpack_require__) {
        eval("var dP = __webpack_require__(9);\nvar createDesc = __webpack_require__(47);\nmodule.exports = __webpack_require__(8) ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzP2RhOWQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oaWRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(4);\nvar hide = __webpack_require__(18);\nvar has = __webpack_require__(17);\nvar SRC = __webpack_require__(48)('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n__webpack_require__(30).inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcz80NzcwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR107XG52YXIgVFBMID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZiAoT1trZXldID09PSB2YWwpIHJldHVybjtcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\nvar fails = __webpack_require__(5);\nvar defined = __webpack_require__(32);\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctaHRtbC5qcz9jYjdkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgcXVvdCA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uIChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCBleGVjKSB7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanNcbi8vIG1vZHVsZSBpZCA9IDIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");
    }, function(module, exports) {
        eval("// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2dsb2JhbC5qcz9lY2FiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");
    }, function(module, exports, __webpack_require__) {
        eval("var store = __webpack_require__(134)('wks');\nvar uid = __webpack_require__(94);\nvar Symbol = __webpack_require__(21).Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy5qcz83NTJjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanNcbi8vIG1vZHVsZSBpZCA9IDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n");
    }, function(module, exports, __webpack_require__) {
        eval("// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(70);\nvar defined = __webpack_require__(32);\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzPzNjN2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n");
    }, function(module, exports, __webpack_require__) {
        eval("var pIE = __webpack_require__(71);\nvar createDesc = __webpack_require__(47);\nvar toIObject = __webpack_require__(23);\nvar toPrimitive = __webpack_require__(31);\nvar has = __webpack_require__(17);\nvar IE8_DOM_DEFINE = __webpack_require__(145);\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcz9jN2RjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///24\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = __webpack_require__(17);\nvar toObject = __webpack_require__(14);\nvar IE_PROTO = __webpack_require__(102)('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzPzI4ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1ncG8uanNcbi8vIG1vZHVsZSBpZCA9IDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(21);\nvar core = __webpack_require__(13);\nvar ctx = __webpack_require__(65);\nvar hide = __webpack_require__(58);\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && key in exports) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qcz85MGNkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVztcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGtleSwgb3duLCBvdXQ7XG4gIGlmIChJU19HTE9CQUwpIHNvdXJjZSA9IG5hbWU7XG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG93biAmJiBrZXkgaW4gZXhwb3J0cykgY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbiAoQykge1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIEMpIHtcbiAgICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDKCk7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmIChJU19QUk9UTykge1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmICh0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKSBoaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2V4cG9ydC5qc1xuLy8gbW9kdWxlIGlkID0gMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n");
    }, function(module, exports, __webpack_require__) {
        eval("// optional / simple context binding\nvar aFunction = __webpack_require__(16);\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanM/YWM1YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");
    }, function(module, exports) {
        eval("var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanM/YzlkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qc1xuLy8gbW9kdWxlIGlkID0gMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar fails = __webpack_require__(5);\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpY3QtbWV0aG9kLmpzPzM0ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanNcbi8vIG1vZHVsZSBpZCA9IDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///29\n");
    }, function(module, exports) {
        eval("var core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb3JlLmpzP2VlMDUiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNS4xJyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qc1xuLy8gbW9kdWxlIGlkID0gMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(6);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1wcmltaXRpdmUuanM/YjM4OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");
    }, function(module, exports) {
        eval('// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError("Can\'t call method on  " + it);\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kZWZpbmVkLmpzP2ZmMDgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qc1xuLy8gbW9kdWxlIGlkID0gMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n');
    }, function(module, exports) {
        eval("// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzP2ExZTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n");
    }, function(module, exports, __webpack_require__) {
        eval("// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(0);\nvar core = __webpack_require__(30);\nvar fails = __webpack_require__(5);\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzP2RlMmUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcbiAgdmFyIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanNcbi8vIG1vZHVsZSBpZCA9IDM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = __webpack_require__(27);\nvar IObject = __webpack_require__(70);\nvar toObject = __webpack_require__(14);\nvar toLength = __webpack_require__(10);\nvar asc = __webpack_require__(119);\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzPzJlMTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFzYyA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xuICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsLCByZXM7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSByZXN1bHRbaW5kZXhdID0gcmVzOyAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZiAoSVNfRVZFUlkpIHJldHVybiBmYWxzZTsgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanNcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///35\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nif (__webpack_require__(8)) {\n  var LIBRARY = __webpack_require__(49);\n  var global = __webpack_require__(4);\n  var fails = __webpack_require__(5);\n  var $export = __webpack_require__(0);\n  var $typed = __webpack_require__(88);\n  var $buffer = __webpack_require__(125);\n  var ctx = __webpack_require__(27);\n  var anInstance = __webpack_require__(55);\n  var propertyDesc = __webpack_require__(47);\n  var hide = __webpack_require__(18);\n  var redefineAll = __webpack_require__(57);\n  var toInteger = __webpack_require__(33);\n  var toLength = __webpack_require__(10);\n  var toIndex = __webpack_require__(171);\n  var toAbsoluteIndex = __webpack_require__(51);\n  var toPrimitive = __webpack_require__(31);\n  var has = __webpack_require__(17);\n  var classof = __webpack_require__(72);\n  var isObject = __webpack_require__(6);\n  var toObject = __webpack_require__(14);\n  var isArrayIter = __webpack_require__(116);\n  var create = __webpack_require__(52);\n  var getPrototypeOf = __webpack_require__(25);\n  var gOPN = __webpack_require__(53).f;\n  var getIterFn = __webpack_require__(118);\n  var uid = __webpack_require__(48);\n  var wks = __webpack_require__(7);\n  var createArrayMethod = __webpack_require__(35);\n  var createArrayIncludes = __webpack_require__(79);\n  var speciesConstructor = __webpack_require__(86);\n  var ArrayIterators = __webpack_require__(121);\n  var Iterators = __webpack_require__(63);\n  var $iterDetect = __webpack_require__(83);\n  var setSpecies = __webpack_require__(54);\n  var arrayFill = __webpack_require__(120);\n  var arrayCopyWithin = __webpack_require__(161);\n  var $DP = __webpack_require__(9);\n  var $GOPD = __webpack_require__(24);\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1hcnJheS5qcz9lZmI1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKSB7XG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG4gIHZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xuICB2YXIgJGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbiAgdmFyIHByb3BlcnR5RGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xuICB2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xuICB2YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbiAgdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbiAgdmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG4gIHZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xuICB2YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xuICB2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG4gIHZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcbiAgdmFyIGFycmF5Q29weVdpdGhpbiA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyk7XG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbiAgdmFyIGRQID0gJERQLmY7XG4gIHZhciBnT1BEID0gJEdPUEQuZjtcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcbiAgdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuICB2YXIgU0hBUkVEX0JVRkZFUiA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSO1xuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXlbUFJPVE9UWVBFXTtcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xuICB2YXIgYXJyYXlGb3JFYWNoID0gY3JlYXRlQXJyYXlNZXRob2QoMCk7XG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XG4gIHZhciBhcnJheUV2ZXJ5ID0gY3JlYXRlQXJyYXlNZXRob2QoNCk7XG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XG4gIHZhciBhcnJheUluY2x1ZGVzID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKTtcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XG4gIHZhciBhcnJheUtleXMgPSBBcnJheUl0ZXJhdG9ycy5rZXlzO1xuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xuICB2YXIgYXJyYXlSZWR1Y2UgPSBBcnJheVByb3RvLnJlZHVjZTtcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xuICB2YXIgYXJyYXlTb3J0ID0gQXJyYXlQcm90by5zb3J0O1xuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcbiAgdmFyIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nO1xuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG4gIHZhciBUWVBFRF9DT05TVFJVQ1RPUiA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKTtcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcbiAgdmFyIFRZUEVEX0FSUkFZID0gJHR5cGVkLlRZUEVEO1xuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KSByZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKykge1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyogLi4uaXRlbXMgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgICAgICB2YWx1ZSA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICAgICAgdmFyIE8gPSB2YWxpZGF0ZSh0aGlzKTtcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyogLCBvZmZzZXQgKi8pIHtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSB7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgaWYgKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApIHtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmICghQUxMX0NPTlNUUlVDVE9SUykge1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xuICB9KTtcblxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICRzbGljZSxcbiAgICBzZXQ6ICRzZXQsXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xuICAgIHZhciBTRVRURVIgPSAnc2V0JyArIEtFWTtcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XG4gICAgdmFyIFRBQyA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSk7XG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xuICAgIHZhciBPID0ge307XG4gICAgdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgVHlwZWRBcnJheSgxKTtcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoLTEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKSB7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgQmFzZSh0b0luZGV4KGRhdGEpKTtcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gVHlwZWRBcnJheSkpIGhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYgKCFMSUJSQVJZKSBUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xuICAgIHZhciBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xuICAgIH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7IHNldDogJHNldCB9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///36\n");
    }, function(module, exports, __webpack_require__) {
        eval("var Map = __webpack_require__(166);\nvar $export = __webpack_require__(0);\nvar shared = __webpack_require__(78)('metadata');\nvar store = shared.store || (shared.store = new (__webpack_require__(169))());\n\nvar getOrCreateMetadataMap = function (target, targetKey, create) {\n  var targetMetadata = store.get(target);\n  if (!targetMetadata) {\n    if (!create) return undefined;\n    store.set(target, targetMetadata = new Map());\n  }\n  var keyMetadata = targetMetadata.get(targetKey);\n  if (!keyMetadata) {\n    if (!create) return undefined;\n    targetMetadata.set(targetKey, keyMetadata = new Map());\n  } return keyMetadata;\n};\nvar ordinaryHasOwnMetadata = function (MetadataKey, O, P) {\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);\n};\nvar ordinaryGetOwnMetadata = function (MetadataKey, O, P) {\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);\n};\nvar ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {\n  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);\n};\nvar ordinaryOwnMetadataKeys = function (target, targetKey) {\n  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);\n  var keys = [];\n  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });\n  return keys;\n};\nvar toMetaKey = function (it) {\n  return it === undefined || typeof it == 'symbol' ? it : String(it);\n};\nvar exp = function (O) {\n  $export($export.S, 'Reflect', O);\n};\n\nmodule.exports = {\n  store: store,\n  map: getOrCreateMetadataMap,\n  has: ordinaryHasOwnMetadata,\n  get: ordinaryGetOwnMetadata,\n  set: ordinaryDefineOwnMetadata,\n  keys: ordinaryOwnMetadataKeys,\n  key: toMetaKey,\n  exp: exp\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhZGF0YS5qcz9jMDJiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBNYXAgPSByZXF1aXJlKCcuL2VzNi5tYXAnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ21ldGFkYXRhJyk7XG52YXIgc3RvcmUgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAocmVxdWlyZSgnLi9lczYud2Vhay1tYXAnKSkoKSk7XG5cbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gZnVuY3Rpb24gKHRhcmdldCwgdGFyZ2V0S2V5LCBjcmVhdGUpIHtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIGlmICghdGFyZ2V0TWV0YWRhdGEpIHtcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBzdG9yZS5zZXQodGFyZ2V0LCB0YXJnZXRNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH1cbiAgdmFyIGtleU1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KHRhcmdldEtleSk7XG4gIGlmICgha2V5TWV0YWRhdGEpIHtcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XG4gIH0gcmV0dXJuIGtleU1ldGFkYXRhO1xufTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKSB7XG4gIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbn07XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHRhcmdldEtleSwgZmFsc2UpO1xuICB2YXIga2V5cyA9IFtdO1xuICBpZiAobWV0YWRhdGFNYXApIG1ldGFkYXRhTWFwLmZvckVhY2goZnVuY3Rpb24gKF8sIGtleSkgeyBrZXlzLnB1c2goa2V5KTsgfSk7XG4gIHJldHVybiBrZXlzO1xufTtcbnZhciB0b01ldGFLZXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcbnZhciBleHAgPSBmdW5jdGlvbiAoTykge1xuICAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCBPKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdG9yZTogc3RvcmUsXG4gIG1hcDogZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCxcbiAgaGFzOiBvcmRpbmFyeUhhc093bk1ldGFkYXRhLFxuICBnZXQ6IG9yZGluYXJ5R2V0T3duTWV0YWRhdGEsXG4gIHNldDogb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSxcbiAga2V5czogb3JkaW5hcnlPd25NZXRhZGF0YUtleXMsXG4gIGtleTogdG9NZXRhS2V5LFxuICBleHA6IGV4cFxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YWRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n");
    }, function(module, exports, __webpack_require__) {
        eval("var anObject = __webpack_require__(39);\nvar IE8_DOM_DEFINE = __webpack_require__(181);\nvar toPrimitive = __webpack_require__(130);\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(44) ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcC5qcz83YWYwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzXG4vLyBtb2R1bGUgaWQgPSAzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n");
    }, function(module, exports, __webpack_require__) {
        eval("var isObject = __webpack_require__(43);\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLW9iamVjdC5qcz9lZmIzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(460), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5LmpzPzlhZjEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5LmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///40\n');
    }, function(module, exports, __webpack_require__) {
        eval("var META = __webpack_require__(48)('meta');\nvar isObject = __webpack_require__(6);\nvar has = __webpack_require__(17);\nvar setDesc = __webpack_require__(9).f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !__webpack_require__(5)(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzP2Q1YTAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzXG4vLyBtb2R1bGUgaWQgPSA0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///41\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = __webpack_require__(7)('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(18)(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanM/NDYxMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///42\n");
    }, function(module, exports) {
        eval("module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcz8xMmE4Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///43\n");
    }, function(module, exports, __webpack_require__) {
        eval("// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(66)(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Rlc2NyaXB0b3JzLmpzP2Y4NGQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44\n");
    }, function(module, exports, __webpack_require__) {
        eval("// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(184);\nvar defined = __webpack_require__(128);\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanM/NGRjNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWlvYmplY3QuanNcbi8vIG1vZHVsZSBpZCA9IDQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(436), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzPzdkOTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///46\n');
    }, function(module, exports) {
        eval("module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wcm9wZXJ0eS1kZXNjLmpzPzdkNGQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qc1xuLy8gbW9kdWxlIGlkID0gNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///47\n");
    }, function(module, exports) {
        eval("var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanM/YmE1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaWQgPSAwO1xudmFyIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzXG4vLyBtb2R1bGUgaWQgPSA0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n");
    }, function(module, exports) {
        eval("module.exports = false;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19saWJyYXJ5LmpzPzU3NzkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qc1xuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = __webpack_require__(147);\nvar enumBugKeys = __webpack_require__(103);\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcz80MjFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///50\n");
    }, function(module, exports, __webpack_require__) {
        eval("var toInteger = __webpack_require__(33);\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcz9jZThmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = __webpack_require__(3);\nvar dPs = __webpack_require__(148);\nvar enumBugKeys = __webpack_require__(103);\nvar IE_PROTO = __webpack_require__(102)('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(100)('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(104).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzP2VmMjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///52\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = __webpack_require__(147);\nvar hiddenKeys = __webpack_require__(103).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcz81OWMzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///53\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar global = __webpack_require__(4);\nvar dP = __webpack_require__(9);\nvar DESCRIPTORS = __webpack_require__(8);\nvar SPECIES = __webpack_require__(7)('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcz8wODQ5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXNwZWNpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///54\n");
    }, function(module, exports) {
        eval("module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcz9mNDZhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qc1xuLy8gbW9kdWxlIGlkID0gNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55\n");
    }, function(module, exports, __webpack_require__) {
        eval("var ctx = __webpack_require__(27);\nvar call = __webpack_require__(159);\nvar isArrayIter = __webpack_require__(116);\nvar anObject = __webpack_require__(3);\nvar toLength = __webpack_require__(10);\nvar getIterFn = __webpack_require__(118);\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanM/YmU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n");
    }, function(module, exports, __webpack_require__) {
        eval("var redefine = __webpack_require__(19);\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanM/MDM1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qc1xuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///57\n");
    }, function(module, exports, __webpack_require__) {
        eval("var dP = __webpack_require__(38);\nvar createDesc = __webpack_require__(73);\nmodule.exports = __webpack_require__(44) ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hpZGUuanM/ODQ5YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qc1xuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58\n");
    }, function(module, exports) {
        eval("var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcz8wZjYyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGFzLmpzXG4vLyBtb2R1bGUgaWQgPSA1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///59\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(439), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzPzY3MWUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///60\n');
    }, function(module, exports, __webpack_require__) {
        eval("var def = __webpack_require__(9).f;\nvar has = __webpack_require__(17);\nvar TAG = __webpack_require__(7)('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qcz9jOThiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtdG8tc3RyaW5nLXRhZy5qc1xuLy8gbW9kdWxlIGlkID0gNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///61\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\nvar defined = __webpack_require__(32);\nvar fails = __webpack_require__(5);\nvar spaces = __webpack_require__(106);\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcz82MjY3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///62\n");
    }, function(module, exports) {
        eval("module.exports = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanM/NmNkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanNcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///63\n");
    }, function(module, exports, __webpack_require__) {
        eval("var isObject = __webpack_require__(6);\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL192YWxpZGF0ZS1jb2xsZWN0aW9uLmpzP2NlYWYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSB8fCBpdC5fdCAhPT0gVFlQRSkgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///64\n");
    }, function(module, exports, __webpack_require__) {
        eval("// optional / simple context binding\nvar aFunction = __webpack_require__(93);\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcz9mOTkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jdHguanNcbi8vIG1vZHVsZSBpZCA9IDY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///65\n");
    }, function(module, exports) {
        eval("module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzPzRiY2QiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ZhaWxzLmpzXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///66\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = __webpack_require__(183);\nvar enumBugKeys = __webpack_require__(135);\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLmpzPzk2NGIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///67\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nexports.__esModule = true;\n\nvar _typeof2 = __webpack_require__(98);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (self, call) {\n  if (!self) {\n    throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");\n  }\n\n  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanM/Y2YwYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzXG4vLyBtb2R1bGUgaWQgPSA2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///68\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nexports.__esModule = true;\n\nvar _setPrototypeOf = __webpack_require__(452);\n\nvar _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);\n\nvar _create = __webpack_require__(199);\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = __webpack_require__(98);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (subClass, superClass) {\n  if (typeof superClass !== "function" && superClass !== null) {\n    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));\n  }\n\n  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzPzNkZmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxudmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzXG4vLyBtb2R1bGUgaWQgPSA2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///69\n');
    }, function(module, exports, __webpack_require__) {
        eval("// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(28);\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pb2JqZWN0LmpzPzQzYTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///70\n");
    }, function(module, exports) {
        eval("exports.f = {}.propertyIsEnumerable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtcGllLmpzPzYzNTYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanNcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///71\n");
    }, function(module, exports, __webpack_require__) {
        eval("// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(28);\nvar TAG = __webpack_require__(7)('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzP2MwMmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n");
    }, function(module, exports) {
        eval("module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanM/NWZjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanNcbi8vIG1vZHVsZSBpZCA9IDczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///73\n");
    }, function(module, exports) {
        eval("module.exports = {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcz9mZGI0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge307XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlcmF0b3JzLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///74\n");
    }, function(module, exports) {
        eval("var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvZi5qcz80N2QzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanNcbi8vIG1vZHVsZSBpZCA9IDc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///75\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(128);\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qcz9iMDFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLW9iamVjdC5qc1xuLy8gbW9kdWxlIGlkID0gNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///76\n");
    }, function(module, exports) {
        eval("exports.f = {}.propertyIsEnumerable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1waWUuanM/MzY5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtcGllLmpzXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///77\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(4);\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanM/NTU2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQuanNcbi8vIG1vZHVsZSBpZCA9IDc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///78\n");
    }, function(module, exports, __webpack_require__) {
        eval("// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(23);\nvar toLength = __webpack_require__(10);\nvar toAbsoluteIndex = __webpack_require__(51);\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcz9hMmRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///79\n");
    }, function(module, exports) {
        eval("exports.f = Object.getOwnPropertySymbols;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcz82MzUzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzXG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///80\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(28);\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcz81Y2VkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///81\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.2.8 IsRegExp(argument)\nvar isObject = __webpack_require__(6);\nvar cof = __webpack_require__(28);\nvar MATCH = __webpack_require__(7)('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanM/YmI0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qc1xuLy8gbW9kdWxlIGlkID0gODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///82\n");
    }, function(module, exports, __webpack_require__) {
        eval("var ITERATOR = __webpack_require__(7)('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcz9hYTRjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///83\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = __webpack_require__(3);\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcz9kMjkxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdGhhdCA9IGFuT2JqZWN0KHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qc1xuLy8gbW9kdWxlIGlkID0gODRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///84\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar hide = __webpack_require__(18);\nvar redefine = __webpack_require__(19);\nvar fails = __webpack_require__(5);\nvar defined = __webpack_require__(32);\nvar wks = __webpack_require__(7);\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var fns = exec(defined, SYMBOL, ''[KEY]);\n  var strfn = fns[0];\n  var rxfn = fns[1];\n  if (fails(function () {\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  })) {\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzPzU2MGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGxlbmd0aCwgZXhlYykge1xuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XG4gIHZhciBmbnMgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSk7XG4gIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgdmFyIHJ4Zm4gPSBmbnNbMV07XG4gIGlmIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKSB7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanNcbi8vIG1vZHVsZSBpZCA9IDg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///85\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = __webpack_require__(3);\nvar aFunction = __webpack_require__(16);\nvar SPECIES = __webpack_require__(7)('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzP2VjZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///86\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar global = __webpack_require__(4);\nvar $export = __webpack_require__(0);\nvar redefine = __webpack_require__(19);\nvar redefineAll = __webpack_require__(57);\nvar meta = __webpack_require__(41);\nvar forOf = __webpack_require__(56);\nvar anInstance = __webpack_require__(55);\nvar isObject = __webpack_require__(6);\nvar fails = __webpack_require__(5);\nvar $iterDetect = __webpack_require__(83);\nvar setToStringTag = __webpack_require__(61);\nvar inheritIfRequired = __webpack_require__(107);\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzP2QxMTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///87\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(4);\nvar hide = __webpack_require__(18);\nvar uid = __webpack_require__(48);\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcz9kM2I5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcbnZhciBBQlYgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KTtcbnZhciBDT05TVFIgPSBBQlY7XG52YXIgaSA9IDA7XG52YXIgbCA9IDk7XG52YXIgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlIChpIDwgbCkge1xuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6IEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiBUWVBFRCxcbiAgVklFVzogVklFV1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanNcbi8vIG1vZHVsZSBpZCA9IDg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///88\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// Forced replacement prototype accessors methods\nmodule.exports = __webpack_require__(49) || !__webpack_require__(5)(function () {\n  var K = Math.random();\n  // In FF throws only define methods\n  // eslint-disable-next-line no-undef, no-useless-call\n  __defineSetter__.call(null, K, function () { /* empty */ });\n  delete __webpack_require__(4)[K];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZm9yY2VkLXBhbS5qcz83NjZlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEZvcmNlZCByZXBsYWNlbWVudCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbFxuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIHJlcXVpcmUoJy4vX2dsb2JhbCcpW0tdO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1mb3JjZWQtcGFtLmpzXG4vLyBtb2R1bGUgaWQgPSA4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///89\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = __webpack_require__(0);\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { of: function of() {\n    var length = arguments.length;\n    var A = Array(length);\n    while (length--) A[length] = arguments[length];\n    return new this(A);\n  } });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1vZi5qcz9kMjNkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgb2Y6IGZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBBID0gQXJyYXkobGVuZ3RoKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSA5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///90\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = __webpack_require__(0);\nvar aFunction = __webpack_require__(16);\nvar ctx = __webpack_require__(27);\nvar forOf = __webpack_require__(56);\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n    var mapFn = arguments[1];\n    var mapping, A, n, cb;\n    aFunction(this);\n    mapping = mapFn !== undefined;\n    if (mapping) aFunction(mapFn);\n    if (source == undefined) return new this();\n    A = [];\n    if (mapping) {\n      n = 0;\n      cb = ctx(mapFn, arguments[2], 2);\n      forOf(source, false, function (nextItem) {\n        A.push(cb(nextItem, n++));\n      });\n    } else {\n      forOf(source, false, A.push, A);\n    }\n    return new this(A);\n  } });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtY29sbGVjdGlvbi1mcm9tLmpzPzg4YWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBmcm9tOiBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcbiAgICBhRnVuY3Rpb24odGhpcyk7XG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XG4gICAgaWYgKHNvdXJjZSA9PSB1bmRlZmluZWQpIHJldHVybiBuZXcgdGhpcygpO1xuICAgIEEgPSBbXTtcbiAgICBpZiAobWFwcGluZykge1xuICAgICAgbiA9IDA7XG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xuICAgICAgICBBLnB1c2goY2IobmV4dEl0ZW0sIG4rKykpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIEEucHVzaCwgQSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcbiAgfSB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1jb2xsZWN0aW9uLWZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///91\n");
    }, function(module, exports) {
        eval("module.exports = true;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanM/M2I4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fbGlicmFyeS5qc1xuLy8gbW9kdWxlIGlkID0gOTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///92\n");
    }, function(module, exports) {
        eval("module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2EtZnVuY3Rpb24uanM/OTRlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fYS1mdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gOTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///93\n");
    }, function(module, exports) {
        eval("var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qcz9kYzRhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3VpZC5qc1xuLy8gbW9kdWxlIGlkID0gOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///94\n");
    }, function(module, exports, __webpack_require__) {
        eval("var def = __webpack_require__(38).f;\nvar has = __webpack_require__(59);\nvar TAG = __webpack_require__(22)('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC10by1zdHJpbmctdGFnLmpzPzdiYTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanNcbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///95\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(429), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24uanM/YzI4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSA5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///96\n');
    }, function(module, exports, __webpack_require__) {
        eval("// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(26);\nvar core = __webpack_require__(13);\nvar fails = __webpack_require__(66);\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1zYXAuanM/YmFhNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qtc2FwLmpzXG4vLyBtb2R1bGUgaWQgPSA5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///97\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nexports.__esModule = true;\n\nvar _iterator = __webpack_require__(441);\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _symbol = __webpack_require__(443);\n\nvar _symbol2 = _interopRequireDefault(_symbol);\n\nvar _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {\n  return typeof obj === "undefined" ? "undefined" : _typeof(obj);\n} : function (obj) {\n  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZi5qcz9hNDU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy90eXBlb2YuanNcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///98\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('address-allocation'); /**\n                                                  * Copyright 2016 PT Inovação e Sistemas SA\n                                                  * Copyright 2016 INESC-ID\n                                                  * Copyright 2016 QUOBIS NETWORKS SL\n                                                  * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                                                  * Copyright 2016 ORANGE SA\n                                                  * Copyright 2016 Deutsche Telekom AG\n                                                  * Copyright 2016 Apizee\n                                                  * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                                                  *\n                                                  * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                                  * you may not use this file except in compliance with the License.\n                                                  * You may obtain a copy of the License at\n                                                  *\n                                                  *   http://www.apache.org/licenses/LICENSE-2.0\n                                                  *\n                                                  * Unless required by applicable law or agreed to in writing, software\n                                                  * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                                  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                                  * See the License for the specific language governing permissions and\n                                                  * limitations under the License.\n                                                  **/\n\n// Log system\n\n\n// TODO: this could not be the best way to do a Singleton but at this moment it works;\n\nvar instance = void 0;\n\n/**\n * Class will ask to the message node for addresses\n */\n\nvar AddressAllocation = function () {\n  /* private\n  _url: URL\n  _bus: MiniBus\n  */\n\n  /**\n   * Create an Address Allocation\n   * @param  {URL.URL}      url - url from who is sending the message\n   * @param  {MiniBus}      bus - MiniBus used for address allocation\n   */\n  function AddressAllocation(url, bus, registry) {\n    (0, _classCallCheck3.default)(this, AddressAllocation);\n\n\n    if (!instance) {\n      this._url = url + '/address-allocation';\n      this._bus = bus;\n      this._registry = registry;\n      instance = this;\n    } else {\n      return instance;\n    }\n  }\n\n  (0, _createClass3.default)(AddressAllocation, [{\n    key: 'create',\n\n\n    /**\n     *\n     * Ask for creation of a number of Hyperty addresses, to the domain message node.\n     *\n     * @param {Domain} domain - domain of the message node\n     * @param {Number} number - number of address to be allocated\n     * @param {Descriptor} info - descriptor to search for the hyperty (TODO:// this should be confirmed)\n     * @see https://github.com/reTHINK-project/specs/blob/master/datamodel/core/hyperty-catalogue/readme.md#catalogue-data-model\n     * @param {scheme} scheme - scheme of address to be created or reused, like: hyperty, comm, context, etc;\n     * @param {boolean|URL.HypertyURL} reuseURL - reuseURL is used to reuse the hypertyURL previously registred;\n     * @returns {Promise<Object, Error>} this is Promise and returns an object with the address information\n     *\n     * @memberOf AddressAllocation\n     */\n    value: function create(domain, number, info, scheme, reuseURL) {\n\n      // // console.log('typeof(reuseURL)', typeof(reuseURL), reuseURL);\n\n      if (reuseURL) {\n\n        if (typeof reuseURL === 'boolean') {\n\n          if (reuseURL) {\n            return this._reuseAllocatedAddress(domain, number, info, scheme, reuseURL);\n          } else {\n            return this._allocateNewAddress(domain, scheme, number);\n          }\n        }\n\n        if (typeof reuseURL === 'string' && (0, _utils.isURL)(reuseURL)) {\n          return this._reuseAllocatedAddress(domain, number, info, scheme, reuseURL);\n        }\n      } else {\n        log.info('[AddressAllocation] - new address will be allocated');\n\n        // if there is no URL saved request a new URL\n        return this._allocateNewAddress(domain, scheme, number);\n      }\n    }\n  }, {\n    key: '_reuseAllocatedAddress',\n    value: function _reuseAllocatedAddress(domain, number, info, scheme, reuseURL) {\n      var _this2 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this2._registry.checkRegisteredURLs(info, reuseURL).then(function (urls) {\n\n          if (urls) {\n            log.info('[AddressAllocation - ' + scheme + '] - Reuse URL');\n            var value = { newAddress: false, address: urls };\n            resolve(value);\n          } else {\n\n            if (typeof reuseURL === 'string') {\n              log.info('[AddressAllocation - reuseURL] - Object ' + reuseURL + ' not found');\n              reject('URL Not Found');\n            } else if (typeof reuseURL === 'boolean') {\n              _this2._allocateNewAddress(domain, scheme, number).then(resolve).catch(reject);\n            } else {\n              reject('URL Not Found');\n            }\n          }\n        });\n      });\n    }\n  }, {\n    key: '_allocateNewAddress',\n    value: function _allocateNewAddress(domain, scheme, number) {\n      var _this3 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var msg = {\n          type: 'create', from: _this3._url, to: 'domain://msg-node.' + domain + '/address-allocation',\n          body: { value: { number: number } }\n        };\n\n        if (scheme !== 'hyperty') msg.body.scheme = scheme;\n\n        log.info('[AddressAllocation - ' + scheme + '] - Request new URL');\n\n        _this3._bus.postMessage(msg, function (reply) {\n          if (reply.body.code === 200) {\n            var result = { newAddress: true, address: reply.body.value.allocated };\n            resolve(result);\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n\n    /**\n    * Send a request to the domain message node, to deallocate one or more addresses\n    * @param  {Domain} domain - Domain of the message node.\n    * @param  {addresses} addresses to request the deallocation\n    * @returns {Promise}  the response by the message node\n    */\n\n  }, {\n    key: 'delete',\n    value: function _delete(domain, addresses) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var message = {\n          type: 'delete', from: _this._url, to: 'domain://msg-node.' + domain + '/address-allocation',\n          body: { childrenResources: addresses }\n        };\n\n        _this._bus.postMessage(message, function (reply) {\n          if (reply.body.code === 200) {\n            resolve(reply.body.code);\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n  }, {\n    key: 'url',\n\n\n    /**\n     * get the URL value\n     * @return {string} The url value;\n     */\n    get: function get() {\n      return this._url;\n    }\n  }], [{\n    key: 'instance',\n    get: function get() {\n      if (!instance) {\n        throw new Error('The address allocation was not instantiated');\n      }\n\n      return instance;\n    }\n  }]);\n  return AddressAllocation;\n}();\n\nexports.default = AddressAllocation;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2FsbG9jYXRpb24vQWRkcmVzc0FsbG9jYXRpb24uanM/MWU2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8vIExvZyBzeXN0ZW1cbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignYWRkcmVzcy1hbGxvY2F0aW9uJyk7XG5cblxuaW1wb3J0IHtpc1VSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG4vLyBUT0RPOiB0aGlzIGNvdWxkIG5vdCBiZSB0aGUgYmVzdCB3YXkgdG8gZG8gYSBTaW5nbGV0b24gYnV0IGF0IHRoaXMgbW9tZW50IGl0IHdvcmtzO1xuXG5sZXQgaW5zdGFuY2U7XG5cbi8qKlxuICogQ2xhc3Mgd2lsbCBhc2sgdG8gdGhlIG1lc3NhZ2Ugbm9kZSBmb3IgYWRkcmVzc2VzXG4gKi9cbmNsYXNzIEFkZHJlc3NBbGxvY2F0aW9uIHtcbiAgLyogcHJpdmF0ZVxuICBfdXJsOiBVUkxcbiAgX2J1czogTWluaUJ1c1xuICAqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gQWRkcmVzcyBBbGxvY2F0aW9uXG4gICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICAgdXJsIC0gdXJsIGZyb20gd2hvIGlzIHNlbmRpbmcgdGhlIG1lc3NhZ2VcbiAgICogQHBhcmFtICB7TWluaUJ1c30gICAgICBidXMgLSBNaW5pQnVzIHVzZWQgZm9yIGFkZHJlc3MgYWxsb2NhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IodXJsLCBidXMsIHJlZ2lzdHJ5KSB7XG5cbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICB0aGlzLl91cmwgPSB1cmwgKyAnL2FkZHJlc3MtYWxsb2NhdGlvbic7XG4gICAgICB0aGlzLl9idXMgPSBidXM7XG4gICAgICB0aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICAgICAgaW5zdGFuY2UgPSB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpIHtcbiAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBhZGRyZXNzIGFsbG9jYXRpb24gd2FzIG5vdCBpbnN0YW50aWF0ZWQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2VcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgdGhlIFVSTCB2YWx1ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB1cmwgdmFsdWU7XG4gICAqL1xuICBnZXQgdXJsKCkgeyByZXR1cm4gdGhpcy5fdXJsOyB9XG5cblxuICAvKipcbiAgICpcbiAgICogQXNrIGZvciBjcmVhdGlvbiBvZiBhIG51bWJlciBvZiBIeXBlcnR5IGFkZHJlc3NlcywgdG8gdGhlIGRvbWFpbiBtZXNzYWdlIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RG9tYWlufSBkb21haW4gLSBkb21haW4gb2YgdGhlIG1lc3NhZ2Ugbm9kZVxuICAgKiBAcGFyYW0ge051bWJlcn0gbnVtYmVyIC0gbnVtYmVyIG9mIGFkZHJlc3MgdG8gYmUgYWxsb2NhdGVkXG4gICAqIEBwYXJhbSB7RGVzY3JpcHRvcn0gaW5mbyAtIGRlc2NyaXB0b3IgdG8gc2VhcmNoIGZvciB0aGUgaHlwZXJ0eSAoVE9ETzovLyB0aGlzIHNob3VsZCBiZSBjb25maXJtZWQpXG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9zcGVjcy9ibG9iL21hc3Rlci9kYXRhbW9kZWwvY29yZS9oeXBlcnR5LWNhdGFsb2d1ZS9yZWFkbWUubWQjY2F0YWxvZ3VlLWRhdGEtbW9kZWxcbiAgICogQHBhcmFtIHtzY2hlbWV9IHNjaGVtZSAtIHNjaGVtZSBvZiBhZGRyZXNzIHRvIGJlIGNyZWF0ZWQgb3IgcmV1c2VkLCBsaWtlOiBoeXBlcnR5LCBjb21tLCBjb250ZXh0LCBldGM7XG4gICAqIEBwYXJhbSB7Ym9vbGVhbnxVUkwuSHlwZXJ0eVVSTH0gcmV1c2VVUkwgLSByZXVzZVVSTCBpcyB1c2VkIHRvIHJldXNlIHRoZSBoeXBlcnR5VVJMIHByZXZpb3VzbHkgcmVnaXN0cmVkO1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3QsIEVycm9yPn0gdGhpcyBpcyBQcm9taXNlIGFuZCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIHRoZSBhZGRyZXNzIGluZm9ybWF0aW9uXG4gICAqXG4gICAqIEBtZW1iZXJPZiBBZGRyZXNzQWxsb2NhdGlvblxuICAgKi9cbiAgY3JlYXRlKGRvbWFpbiwgbnVtYmVyLCBpbmZvLCBzY2hlbWUsIHJldXNlVVJMKSB7XG5cbiAgICAvLyAvLyBjb25zb2xlLmxvZygndHlwZW9mKHJldXNlVVJMKScsIHR5cGVvZihyZXVzZVVSTCksIHJldXNlVVJMKTtcblxuICAgIGlmIChyZXVzZVVSTCkge1xuXG4gICAgICBpZiAodHlwZW9mKHJldXNlVVJMKSA9PT0gJ2Jvb2xlYW4nKSB7XG5cbiAgICAgICAgaWYgKHJldXNlVVJMKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3JldXNlQWxsb2NhdGVkQWRkcmVzcyhkb21haW4sIG51bWJlciwgaW5mbywgc2NoZW1lLCByZXVzZVVSTCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2FsbG9jYXRlTmV3QWRkcmVzcyhkb21haW4sIHNjaGVtZSwgbnVtYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YocmV1c2VVUkwpID09PSAnc3RyaW5nJyAmJiBpc1VSTChyZXVzZVVSTCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JldXNlQWxsb2NhdGVkQWRkcmVzcyhkb21haW4sIG51bWJlciwgaW5mbywgc2NoZW1lLCByZXVzZVVSTCk7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmluZm8oJ1tBZGRyZXNzQWxsb2NhdGlvbl0gLSBuZXcgYWRkcmVzcyB3aWxsIGJlIGFsbG9jYXRlZCcpO1xuXG4gICAgICAvLyBpZiB0aGVyZSBpcyBubyBVUkwgc2F2ZWQgcmVxdWVzdCBhIG5ldyBVUkxcbiAgICAgIHJldHVybiB0aGlzLl9hbGxvY2F0ZU5ld0FkZHJlc3MoZG9tYWluLCBzY2hlbWUsIG51bWJlcik7XG4gICAgfVxuXG4gIH1cblxuICBfcmV1c2VBbGxvY2F0ZWRBZGRyZXNzKGRvbWFpbiwgbnVtYmVyLCBpbmZvLCBzY2hlbWUsIHJldXNlVVJMKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICB0aGlzLl9yZWdpc3RyeS5jaGVja1JlZ2lzdGVyZWRVUkxzKGluZm8sIHJldXNlVVJMKS50aGVuKCh1cmxzKSA9PiB7XG5cbiAgICAgICAgaWYgKHVybHMpIHtcbiAgICAgICAgICBsb2cuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gJyArIHNjaGVtZSArICddIC0gUmV1c2UgVVJMJyk7XG4gICAgICAgICAgbGV0IHZhbHVlID0ge25ld0FkZHJlc3M6IGZhbHNlLCBhZGRyZXNzOiB1cmxzfTtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIGlmICh0eXBlb2YocmV1c2VVUkwpID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgbG9nLmluZm8oJ1tBZGRyZXNzQWxsb2NhdGlvbiAtIHJldXNlVVJMXSAtIE9iamVjdCAnICsgcmV1c2VVUkwgKyAnIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgcmVqZWN0KCdVUkwgTm90IEZvdW5kJyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YocmV1c2VVUkwpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHRoaXMuX2FsbG9jYXRlTmV3QWRkcmVzcyhkb21haW4sIHNjaGVtZSwgbnVtYmVyKS50aGVuKHJlc29sdmUpLmNhdGNoKHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnVVJMIE5vdCBGb3VuZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBfYWxsb2NhdGVOZXdBZGRyZXNzKGRvbWFpbiwgc2NoZW1lLCBudW1iZXIpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBtc2cgPSB7XG4gICAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiB0aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvYWRkcmVzcy1hbGxvY2F0aW9uJyxcbiAgICAgICAgYm9keToge3ZhbHVlOiB7IG51bWJlcjogbnVtYmVyIH0gfVxuICAgICAgfTtcblxuICAgICAgaWYgKHNjaGVtZSAhPT0gJ2h5cGVydHknKSBtc2cuYm9keS5zY2hlbWUgPSBzY2hlbWU7XG5cbiAgICAgIGxvZy5pbmZvKCdbQWRkcmVzc0FsbG9jYXRpb24gLSAnICsgc2NoZW1lICsgJ10gLSBSZXF1ZXN0IG5ldyBVUkwnKTtcblxuICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIGxldCByZXN1bHQgPSB7bmV3QWRkcmVzczogdHJ1ZSwgYWRkcmVzczogcmVwbHkuYm9keS52YWx1ZS5hbGxvY2F0ZWR9O1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogU2VuZCBhIHJlcXVlc3QgdG8gdGhlIGRvbWFpbiBtZXNzYWdlIG5vZGUsIHRvIGRlYWxsb2NhdGUgb25lIG9yIG1vcmUgYWRkcmVzc2VzXG4gICogQHBhcmFtICB7RG9tYWlufSBkb21haW4gLSBEb21haW4gb2YgdGhlIG1lc3NhZ2Ugbm9kZS5cbiAgKiBAcGFyYW0gIHthZGRyZXNzZXN9IGFkZHJlc3NlcyB0byByZXF1ZXN0IHRoZSBkZWFsbG9jYXRpb25cbiAgKiBAcmV0dXJucyB7UHJvbWlzZX0gIHRoZSByZXNwb25zZSBieSB0aGUgbWVzc2FnZSBub2RlXG4gICovXG4gIGRlbGV0ZShkb21haW4sIGFkZHJlc3Nlcykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvYWRkcmVzcy1hbGxvY2F0aW9uJyxcbiAgICAgICAgYm9keToge2NoaWxkcmVuUmVzb3VyY2VzOiBhZGRyZXNzZXN9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICByZXNvbHZlKHJlcGx5LmJvZHkuY29kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWRkcmVzc0FsbG9jYXRpb247XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2FsbG9jYXRpb24vQWRkcmVzc0FsbG9jYXRpb24uanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7Ozs7O0FBSkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRkE7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUdBO0FBQ0E7Ozs7O0FBS0E7Ozs7O0FBS0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFnQkE7Ozs7Ozs7Ozs7Ozs7O0FBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFqSUE7Ozs7QUFJQTtBQUFBO0FBQUE7OztBQVpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQXNJQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///99\n");
    }, function(module, exports, __webpack_require__) {
        eval("var isObject = __webpack_require__(6);\nvar document = __webpack_require__(4).document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qcz84ZTFjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///100\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(4);\nvar core = __webpack_require__(30);\nvar LIBRARY = __webpack_require__(49);\nvar wksExt = __webpack_require__(146);\nvar defineProperty = __webpack_require__(9).f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcz9kZTBmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///101\n");
    }, function(module, exports, __webpack_require__) {
        eval("var shared = __webpack_require__(78)('keys');\nvar uid = __webpack_require__(48);\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcz85OTkzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zaGFyZWQta2V5LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///102\n");
    }, function(module, exports) {
        eval("// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qcz80MGE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///103\n");
    }, function(module, exports, __webpack_require__) {
        eval("var document = __webpack_require__(4).document;\nmodule.exports = document && document.documentElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcz83NzRlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xubW9kdWxlLmV4cG9ydHMgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanNcbi8vIG1vZHVsZSBpZCA9IDEwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///104\n");
    }, function(module, exports, __webpack_require__) {
        eval("// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = __webpack_require__(6);\nvar anObject = __webpack_require__(3);\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = __webpack_require__(27)(Function.call, __webpack_require__(24).f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzPzgyZjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanNcbi8vIG1vZHVsZSBpZCA9IDEwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///105\n");
    }, function(module, exports) {
        eval("module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzPzVkZGIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanNcbi8vIG1vZHVsZSBpZCA9IDEwNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///106\n");
    }, function(module, exports, __webpack_require__) {
        eval("var isObject = __webpack_require__(6);\nvar setPrototypeOf = __webpack_require__(105).set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcz85MjI3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanNcbi8vIG1vZHVsZSBpZCA9IDEwN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///107\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar toInteger = __webpack_require__(33);\nvar defined = __webpack_require__(32);\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcz9jNDA3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpIHtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcbiAgdmFyIHJlcyA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qc1xuLy8gbW9kdWxlIGlkID0gMTA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///108\n");
    }, function(module, exports) {
        eval("// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzPzczMDkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///109\n");
    }, function(module, exports) {
        eval("// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1leHBtMS5qcz9jN2JmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///110\n");
    }, function(module, exports, __webpack_require__) {
        eval("var toInteger = __webpack_require__(33);\nvar defined = __webpack_require__(32);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzP2UzZGEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///111\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar LIBRARY = __webpack_require__(49);\nvar $export = __webpack_require__(0);\nvar redefine = __webpack_require__(19);\nvar hide = __webpack_require__(18);\nvar has = __webpack_require__(17);\nvar Iterators = __webpack_require__(63);\nvar $iterCreate = __webpack_require__(113);\nvar setToStringTag = __webpack_require__(61);\nvar getPrototypeOf = __webpack_require__(25);\nvar ITERATOR = __webpack_require__(7)('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanM/YjljZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gMTEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///112\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar create = __webpack_require__(52);\nvar descriptor = __webpack_require__(47);\nvar setToStringTag = __webpack_require__(61);\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(18)(IteratorPrototype, __webpack_require__(7)('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanM/MjExMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n");
    }, function(module, exports, __webpack_require__) {
        eval("// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = __webpack_require__(82);\nvar defined = __webpack_require__(32);\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanM/OTJhYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XG4gIGlmIChpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKSB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///114\n");
    }, function(module, exports, __webpack_require__) {
        eval("var MATCH = __webpack_require__(7)('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzP2Q0NDQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qc1xuLy8gbW9kdWxlIGlkID0gMTE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///115\n");
    }, function(module, exports, __webpack_require__) {
        eval("// check on default Array iterator\nvar Iterators = __webpack_require__(63);\nvar ITERATOR = __webpack_require__(7)('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcz9mNmY2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///116\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $defineProperty = __webpack_require__(9);\nvar createDesc = __webpack_require__(47);\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzPzZkMjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgaW5kZXgsIHZhbHVlKSB7XG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDExN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///117\n");
    }, function(module, exports, __webpack_require__) {
        eval("var classof = __webpack_require__(72);\nvar ITERATOR = __webpack_require__(7)('iterator');\nvar Iterators = __webpack_require__(63);\nmodule.exports = __webpack_require__(30).getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanM/NDg3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanNcbi8vIG1vZHVsZSBpZCA9IDExOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///118\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = __webpack_require__(300);\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanM/YTY1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///119\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n\nvar toObject = __webpack_require__(14);\nvar toAbsoluteIndex = __webpack_require__(51);\nvar toLength = __webpack_require__(10);\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZmlsbC5qcz9jYzI2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///120\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar addToUnscopables = __webpack_require__(42);\nvar step = __webpack_require__(162);\nvar Iterators = __webpack_require__(63);\nvar toIObject = __webpack_require__(23);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(112)(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanM/NWEwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBraW5kID0gdGhpcy5faztcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///121\n");
    }, function(module, exports, __webpack_require__) {
        eval("var ctx = __webpack_require__(27);\nvar invoke = __webpack_require__(152);\nvar html = __webpack_require__(104);\nvar cel = __webpack_require__(100);\nvar global = __webpack_require__(4);\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (__webpack_require__(28)(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcz80OWU4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qc1xuLy8gbW9kdWxlIGlkID0gMTIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///122\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(4);\nvar macrotask = __webpack_require__(122).set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = __webpack_require__(28)(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if (Observer) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    var promise = Promise.resolve();\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzPzgzN2UiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChpc05vZGUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXJcbiAgfSBlbHNlIGlmIChPYnNlcnZlcikge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWljcm90YXNrLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///123\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = __webpack_require__(16);\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcz9jM2EwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///124\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar global = __webpack_require__(4);\nvar DESCRIPTORS = __webpack_require__(8);\nvar LIBRARY = __webpack_require__(49);\nvar $typed = __webpack_require__(88);\nvar hide = __webpack_require__(18);\nvar redefineAll = __webpack_require__(57);\nvar fails = __webpack_require__(5);\nvar anInstance = __webpack_require__(55);\nvar toInteger = __webpack_require__(33);\nvar toLength = __webpack_require__(10);\nvar toIndex = __webpack_require__(171);\nvar gOPN = __webpack_require__(53).f;\nvar dP = __webpack_require__(9).f;\nvar arrayFill = __webpack_require__(120);\nvar setToStringTag = __webpack_require__(61);\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYnVmZmVyLmpzPzJlYjciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcbnZhciAkQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XG52YXIgQmFzZUJ1ZmZlciA9ICRBcnJheUJ1ZmZlcjtcbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE4yID0gTWF0aC5MTjI7XG52YXIgQlVGRkVSID0gJ2J1ZmZlcic7XG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XG52YXIgJEJVRkZFUiA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUjtcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgYnVmZmVyID0gQXJyYXkobkJ5dGVzKTtcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XG4gIHZhciBydCA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBpID0gMDtcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xuICB2YXIgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIGlmICh2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmICh2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59XG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcbiAgdmFyIGkgPSBuQnl0ZXMgLSAxO1xuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xuICB2YXIgZSA9IHMgJiAxMjc7XG4gIHZhciBtO1xuICBzID4+PSA3O1xuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn1cblxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufVxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn1cbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59XG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufVxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn1cblxuZnVuY3Rpb24gYWRkR2V0dGVyKEMsIGtleSwgaW50ZXJuYWwpIHtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufVxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59XG5cbmlmICghJHR5cGVkLkFCVikge1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcbiAgICB0aGlzLl9iID0gYXJyYXlGaWxsLmNhbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCkge1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICRBcnJheUJ1ZmZlcigxKTtcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIHJldHVybiAkQXJyYXlCdWZmZXIubmFtZSAhPSBBUlJBWV9CVUZGRVI7XG4gIH0pKSB7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlcik7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfVxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///125\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $at = __webpack_require__(412)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(180)(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanM/Y2QwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIE8gPSB0aGlzLl90O1xuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBPLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDEyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///126\n");
    }, function(module, exports) {
        eval("// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbnRlZ2VyLmpzPzUyZTEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMTI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///127\n");
    }, function(module, exports) {
        eval('// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError("Can\'t call method on  " + it);\n  return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzP2U3NjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kZWZpbmVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///128\n');
    }, function(module, exports, __webpack_require__) {
        eval("var isObject = __webpack_require__(43);\nvar document = __webpack_require__(21).document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19kb20tY3JlYXRlLmpzPzM4ZGQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZG9tLWNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///129\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(43);\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1wcmltaXRpdmUuanM/MzI2MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///130\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = __webpack_require__(39);\nvar dPs = __webpack_require__(414);\nvar enumBugKeys = __webpack_require__(135);\nvar IE_PROTO = __webpack_require__(133)('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(129)('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(185).appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtY3JlYXRlLmpzPzYyODYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///131\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.1.15 ToLength\nvar toInteger = __webpack_require__(127);\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanM/NDExMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1sZW5ndGguanNcbi8vIG1vZHVsZSBpZCA9IDEzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///132\n");
    }, function(module, exports, __webpack_require__) {
        eval("var shared = __webpack_require__(134)('keys');\nvar uid = __webpack_require__(94);\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQta2V5LmpzPzZiMWQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2hhcmVkLWtleS5qc1xuLy8gbW9kdWxlIGlkID0gMTMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///133\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(21);\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zaGFyZWQuanM/N2JjMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qc1xuLy8gbW9kdWxlIGlkID0gMTM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///134\n");
    }, function(module, exports) {
        eval("// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzP2M2NzciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZW51bS1idWcta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMTM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///135\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = __webpack_require__(93);\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzP2E4MDQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX25ldy1wcm9taXNlLWNhcGFiaWxpdHkuanNcbi8vIG1vZHVsZSBpZCA9IDEzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///136\n");
    }, function(module, exports) {
        eval("exports.f = Object.getOwnPropertySymbols;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wcy5qcz9kNjQ0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanNcbi8vIG1vZHVsZSBpZCA9IDEzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///137\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\nvar runtimeUtils = exports.runtimeUtils = {\n  runtimeDescriptor: {},\n  runtimeCapabilities: {\n    constraints: {}\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9ydW50aW1lL3J1bnRpbWVVdGlscy5qcz9iYWE0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBsZXQgcnVudGltZVV0aWxzID0ge1xuICBydW50aW1lRGVzY3JpcHRvcjoge30sXG4gIHJ1bnRpbWVDYXBhYmlsaXRpZXM6IHtcbiAgICBjb25zdHJhaW50czoge31cbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcnVudGltZS9ydW50aW1lVXRpbHMuanMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUZBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///138\n');
    }, function(module, exports, __webpack_require__) {
        eval("exports.f = __webpack_require__(22);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzPzJhMWUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fd2tzLWV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMTM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///139\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(21);\nvar core = __webpack_require__(13);\nvar LIBRARY = __webpack_require__(92);\nvar wksExt = __webpack_require__(139);\nvar defineProperty = __webpack_require__(38).f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzPzcyYjkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3drcy1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDE0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///140\n");
    }, function(module, exports, __webpack_require__) {
        eval("var pIE = __webpack_require__(77);\nvar createDesc = __webpack_require__(73);\nvar toIObject = __webpack_require__(45);\nvar toPrimitive = __webpack_require__(130);\nvar has = __webpack_require__(59);\nvar IE8_DOM_DEFINE = __webpack_require__(181);\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = __webpack_require__(44) ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcz8yY2E2Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1nb3BkLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///141\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Operators = function () {\n  function Operators() {\n    (0, _classCallCheck3.default)(this, Operators);\n  }\n\n  (0, _createClass3.default)(Operators, [{\n    key: 'and',\n    value: function and(params) {\n      return params[0] && params[1];\n    }\n  }, {\n    key: 'between',\n    value: function between(params) {\n      var start = parseInt(params[0][0]);\n      var end = parseInt(params[0][1]);\n      var now = params[1];\n\n      if (end < start) {\n        now = now < start ? now += 2400 : now;\n        end += 2400;\n      }\n\n      return now > start && now < end;\n    }\n  }, {\n    key: 'equals',\n    value: function equals(params) {\n      return String(params[0]) === '*' || String(params[0]) === String(params[1]);\n    }\n  }, {\n    key: 'greaterThan',\n    value: function greaterThan(params) {\n      return params[1] > params[0];\n    }\n  }, {\n    key: 'in',\n    value: function _in(params) {\n      return params[0].indexOf(params[1]) > -1;\n    }\n  }, {\n    key: 'lessThan',\n    value: function lessThan(params) {\n      return params[1] < params[0];\n    }\n  }, {\n    key: 'not',\n    value: function not(params) {\n      return !params[0];\n    }\n  }, {\n    key: 'or',\n    value: function or(params) {\n      return params[0] || params[1];\n    }\n  }]);\n  return Operators;\n}();\n\nexports.default = Operators;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvT3BlcmF0b3JzLmpzPzFjNDIiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgT3BlcmF0b3JzIHtcblxuICBhbmQocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtc1swXSAmJiBwYXJhbXNbMV07XG4gIH1cblxuICBiZXR3ZWVuKHBhcmFtcykge1xuICAgIGxldCBzdGFydCA9IHBhcnNlSW50KHBhcmFtc1swXVswXSk7XG4gICAgbGV0IGVuZCA9IHBhcnNlSW50KHBhcmFtc1swXVsxXSk7XG4gICAgbGV0IG5vdyA9IHBhcmFtc1sxXTtcblxuICAgIGlmIChlbmQgPCBzdGFydCkge1xuICAgICAgbm93ID0gKG5vdyA8IHN0YXJ0KSA/IG5vdyArPSAyNDAwIDogbm93O1xuICAgICAgZW5kICs9IDI0MDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIChub3cgPiBzdGFydCAmJiBub3cgPCBlbmQpO1xuICB9XG5cbiAgZXF1YWxzKHBhcmFtcykge1xuICAgIHJldHVybiBTdHJpbmcocGFyYW1zWzBdKSA9PT0gJyonIHx8IFN0cmluZyhwYXJhbXNbMF0pID09PSBTdHJpbmcocGFyYW1zWzFdKTtcbiAgfVxuXG4gIGdyZWF0ZXJUaGFuKHBhcmFtcykge1xuICAgIHJldHVybiBwYXJhbXNbMV0gPiBwYXJhbXNbMF07XG4gIH1cblxuICBpbihwYXJhbXMpIHtcbiAgICByZXR1cm4gcGFyYW1zWzBdLmluZGV4T2YocGFyYW1zWzFdKSA+IC0xO1xuICB9XG5cbiAgbGVzc1RoYW4ocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtc1sxXSA8IHBhcmFtc1swXTtcbiAgfVxuXG4gIG5vdChwYXJhbXMpIHtcbiAgICByZXR1cm4gIXBhcmFtc1swXTtcbiAgfVxuXG4gIG9yKHBhcmFtcykge1xuICAgIHJldHVybiBwYXJhbXNbMF0gfHwgcGFyYW1zWzFdO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgT3BlcmF0b3JzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9wb2xpY3kvT3BlcmF0b3JzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///142\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Operators = __webpack_require__(142);\n\nvar _Operators2 = _interopRequireDefault(_Operators);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\n* @classdesc Class to represent a condition and evaluate its applicability.\n*/\nvar Condition = function () {\n\n  /**\n  * Creates a new Condition.\n  * @class\n  * @param  {string}  attribute\n  * @param  {string}  operator\n  * @param  {*}       params\n  */\n  function Condition(attribute, operator, params) {\n    (0, _classCallCheck3.default)(this, Condition);\n\n    this.attribute = attribute;\n    this.operator = operator;\n    this.params = params;\n    this.operators = new _Operators2.default();\n  }\n\n  /**\n  * Verifies if the condition is applicable to the message. First, the system value that corresponds to the attribute is retrieved; then, that value is compared with the parameter specified in the condition by executing the operator implementation. If the operator is 'in' and the name of a group is given, then the array holding the members of the group is retrieved before the comparison.\n  * @param  {Object}    context   environment where the Policy Engine is being used\n  * @param  {Object}    message\n  */\n\n\n  (0, _createClass3.default)(Condition, [{\n    key: 'isApplicable',\n    value: function isApplicable(context, message) {\n      context[this.attribute] = { message: message };\n      var value = context[this.attribute];\n      var tempParam = void 0;\n\n      if (this.operator === 'in') {\n        if (!Array.isArray(this.params)) {\n          tempParam = context.getGroup(this.params, message.to);\n          return this.operators[this.operator]([tempParam, value]);\n        }\n      }\n\n      return this.operators[this.operator]([this.params, value]);\n    }\n  }]);\n  return Condition;\n}(); /**\n     * Copyright 2016 PT Inovação e Sistemas SA\n     * Copyright 2016 INESC-ID\n     * Copyright 2016 QUOBIS NETWORKS SL\n     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n     * Copyright 2016 ORANGE SA\n     * Copyright 2016 Deutsche Telekom AG\n     * Copyright 2016 Apizee\n     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n     *\n     * Licensed under the Apache License, Version 2.0 (the \"License\");\n     * you may not use this file except in compliance with the License.\n     * You may obtain a copy of the License at\n     *\n     *   http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     **/\n\nexports.default = Condition;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvY29uZGl0aW9ucy9Db25kaXRpb24uanM/MmUzMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbmltcG9ydCBPcGVyYXRvcnMgZnJvbSAnLi4vT3BlcmF0b3JzJztcblxuLyoqXG4qIEBhdXRob3IgQW5hIENhbGRlaXJhIDxhbmEuY2FsZGVpcmFAdGVjbmljby51bGlzYm9hLnB0PlxuKiBAY2xhc3NkZXNjIENsYXNzIHRvIHJlcHJlc2VudCBhIGNvbmRpdGlvbiBhbmQgZXZhbHVhdGUgaXRzIGFwcGxpY2FiaWxpdHkuXG4qL1xuY2xhc3MgQ29uZGl0aW9uIHtcblxuICAvKipcbiAgKiBDcmVhdGVzIGEgbmV3IENvbmRpdGlvbi5cbiAgKiBAY2xhc3NcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBhdHRyaWJ1dGVcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBvcGVyYXRvclxuICAqIEBwYXJhbSAgeyp9ICAgICAgIHBhcmFtc1xuICAqL1xuICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcbiAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgdGhpcy5vcGVyYXRvcnMgPSBuZXcgT3BlcmF0b3JzKCk7XG4gIH1cblxuICAvKipcbiAgKiBWZXJpZmllcyBpZiB0aGUgY29uZGl0aW9uIGlzIGFwcGxpY2FibGUgdG8gdGhlIG1lc3NhZ2UuIEZpcnN0LCB0aGUgc3lzdGVtIHZhbHVlIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGF0dHJpYnV0ZSBpcyByZXRyaWV2ZWQ7IHRoZW4sIHRoYXQgdmFsdWUgaXMgY29tcGFyZWQgd2l0aCB0aGUgcGFyYW1ldGVyIHNwZWNpZmllZCBpbiB0aGUgY29uZGl0aW9uIGJ5IGV4ZWN1dGluZyB0aGUgb3BlcmF0b3IgaW1wbGVtZW50YXRpb24uIElmIHRoZSBvcGVyYXRvciBpcyAnaW4nIGFuZCB0aGUgbmFtZSBvZiBhIGdyb3VwIGlzIGdpdmVuLCB0aGVuIHRoZSBhcnJheSBob2xkaW5nIHRoZSBtZW1iZXJzIG9mIHRoZSBncm91cCBpcyByZXRyaWV2ZWQgYmVmb3JlIHRoZSBjb21wYXJpc29uLlxuICAqIEBwYXJhbSAge09iamVjdH0gICAgY29udGV4dCAgIGVudmlyb25tZW50IHdoZXJlIHRoZSBQb2xpY3kgRW5naW5lIGlzIGJlaW5nIHVzZWRcbiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIG1lc3NhZ2VcbiAgKi9cbiAgaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UpIHtcbiAgICBjb250ZXh0W3RoaXMuYXR0cmlidXRlXSA9IHsgbWVzc2FnZTogbWVzc2FnZSB9O1xuICAgIGxldCB2YWx1ZSA9IGNvbnRleHRbdGhpcy5hdHRyaWJ1dGVdO1xuICAgIGxldCB0ZW1wUGFyYW07XG5cbiAgICBpZiAodGhpcy5vcGVyYXRvciA9PT0gJ2luJykge1xuICAgICAgaWYgKCEoQXJyYXkuaXNBcnJheSh0aGlzLnBhcmFtcykpKSB7XG4gICAgICAgIHRlbXBQYXJhbSA9IGNvbnRleHQuZ2V0R3JvdXAodGhpcy5wYXJhbXMsIG1lc3NhZ2UudG8pO1xuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbdGhpcy5vcGVyYXRvcl0oW3RlbXBQYXJhbSwgdmFsdWVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbdGhpcy5vcGVyYXRvcl0oW3RoaXMucGFyYW1zLCB2YWx1ZV0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29uZGl0aW9uO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9wb2xpY3kvY29uZGl0aW9ucy9Db25kaXRpb24uanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBdUJBO0FBQ0E7Ozs7O0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBL0RBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1FQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///143\n");
    }, function(module, exports) {
        eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function("return this")() || (1,eval)("this");\n} catch(e) {\n\t// This works if the window reference is available\n\tif(typeof window === "object")\n\t\tg = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcz8zNjk4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2goZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxuXHRcdGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///144\n');
    }, function(module, exports, __webpack_require__) {
        eval("module.exports = !__webpack_require__(8) && !__webpack_require__(5)(function () {\n  return Object.defineProperty(__webpack_require__(100)('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanM/YzU5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qc1xuLy8gbW9kdWxlIGlkID0gMTQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///145\n");
    }, function(module, exports, __webpack_require__) {
        eval("exports.f = __webpack_require__(7);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcz8zM2M1Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzXG4vLyBtb2R1bGUgaWQgPSAxNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///146\n");
    }, function(module, exports, __webpack_require__) {
        eval("var has = __webpack_require__(17);\nvar toIObject = __webpack_require__(23);\nvar arrayIndexOf = __webpack_require__(79)(false);\nvar IE_PROTO = __webpack_require__(102)('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanM/NDVlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanNcbi8vIG1vZHVsZSBpZCA9IDE0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///147\n");
    }, function(module, exports, __webpack_require__) {
        eval("var dP = __webpack_require__(9);\nvar anObject = __webpack_require__(3);\nvar getKeys = __webpack_require__(50);\n\nmodule.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcz9iNzBjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qc1xuLy8gbW9kdWxlIGlkID0gMTQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///148\n");
    }, function(module, exports, __webpack_require__) {
        eval("// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = __webpack_require__(23);\nvar gOPN = __webpack_require__(53).f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzPzZjNmYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///149\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = __webpack_require__(50);\nvar gOPS = __webpack_require__(80);\nvar pIE = __webpack_require__(71);\nvar toObject = __webpack_require__(14);\nvar IObject = __webpack_require__(70);\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __webpack_require__(5)(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcz9hMTg3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHZhciBBID0ge307XG4gIHZhciBCID0ge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgUyA9IFN5bWJvbCgpO1xuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaikgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpIFRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///150\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar aFunction = __webpack_require__(16);\nvar isObject = __webpack_require__(6);\nvar invoke = __webpack_require__(152);\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYmluZC5qcz82NmRjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XG52YXIgZmFjdG9yaWVzID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKSBuW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyogLCAuLi5hcmdzICovKSB7XG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uICgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2JpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDE1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///151\n");
    }, function(module, exports) {
        eval("// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzPzNjNzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgYXJncywgdGhhdCkge1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbnZva2UuanNcbi8vIG1vZHVsZSBpZCA9IDE1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///152\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $parseInt = __webpack_require__(4).parseInt;\nvar $trim = __webpack_require__(62).trim;\nvar ws = __webpack_require__(106);\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzPzNhMDQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgaGV4ID0gL15bLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///153\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $parseFloat = __webpack_require__(4).parseFloat;\nvar $trim = __webpack_require__(62).trim;\n\nmodule.exports = 1 / $parseFloat(__webpack_require__(106) + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanM/ZjJkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1mbG9hdC5qc1xuLy8gbW9kdWxlIGlkID0gMTU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///154\n");
    }, function(module, exports, __webpack_require__) {
        eval("var cof = __webpack_require__(28);\nmodule.exports = function (it, msg) {\n  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);\n  return +it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanM/N2QyZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLW51bWJlci12YWx1ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///155\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.1.2.3 Number.isInteger(number)\nvar isObject = __webpack_require__(6);\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcz85ZmRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///156\n");
    }, function(module, exports) {
        eval("// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x) {\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcz80NzNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///157\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.16 Math.fround(x)\nvar sign = __webpack_require__(109);\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1mcm91bmQuanM/ODNmOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xudmFyIE1BWDMyID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMik7XG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbiAobikge1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XG4gIHZhciAkc2lnbiA9IHNpZ24oeCk7XG4gIHZhciBhLCByZXN1bHQ7XG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpIHJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWZyb3VuZC5qc1xuLy8gbW9kdWxlIGlkID0gMTU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///158\n");
    }, function(module, exports, __webpack_require__) {
        eval("// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(3);\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzPzVlZjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qc1xuLy8gbW9kdWxlIGlkID0gMTU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///159\n");
    }, function(module, exports, __webpack_require__) {
        eval("var aFunction = __webpack_require__(16);\nvar toObject = __webpack_require__(14);\nvar IObject = __webpack_require__(70);\nvar toLength = __webpack_require__(10);\n\nmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n  aFunction(callbackfn);\n  var O = toObject(that);\n  var self = IObject(O);\n  var length = toLength(O.length);\n  var index = isRight ? length - 1 : 0;\n  var i = isRight ? -1 : 1;\n  if (aLen < 2) for (;;) {\n    if (index in self) {\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if (isRight ? index < 0 : length <= index) {\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktcmVkdWNlLmpzPzE2NDIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCkge1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XG4gIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xuICB2YXIgaSA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IgKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKSBpZiAoaW5kZXggaW4gc2VsZikge1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanNcbi8vIG1vZHVsZSBpZCA9IDE2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///160\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n\nvar toObject = __webpack_require__(14);\nvar toAbsoluteIndex = __webpack_require__(51);\nvar toLength = __webpack_require__(10);\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanM/MGNmYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICB2YXIgZW5kID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanNcbi8vIG1vZHVsZSBpZCA9IDE2MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///161\n");
    }, function(module, exports) {
        eval("module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzPzI4MWQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcbiAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmUgfTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItc3RlcC5qc1xuLy8gbW9kdWxlIGlkID0gMTYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///162\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 21.2.5.3 get RegExp.prototype.flags()\nif (__webpack_require__(8) && /./g.flags != 'g') __webpack_require__(9).f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: __webpack_require__(84)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzP2E1ZGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qc1xuLy8gbW9kdWxlIGlkID0gMTYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///163\n");
    }, function(module, exports) {
        eval("module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcz80ODM1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BlcmZvcm0uanNcbi8vIG1vZHVsZSBpZCA9IDE2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///164\n");
    }, function(module, exports, __webpack_require__) {
        eval("var anObject = __webpack_require__(3);\nvar isObject = __webpack_require__(6);\nvar newPromiseCapability = __webpack_require__(124);\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzPzllOTgiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///165\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar strong = __webpack_require__(167);\nvar validate = __webpack_require__(64);\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = __webpack_require__(87)(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzPzMyY2IiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgTUFQID0gJ01hcCc7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTUFQKSwga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///166\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar dP = __webpack_require__(9).f;\nvar create = __webpack_require__(52);\nvar redefineAll = __webpack_require__(57);\nvar ctx = __webpack_require__(27);\nvar anInstance = __webpack_require__(55);\nvar forOf = __webpack_require__(56);\nvar $iterDefine = __webpack_require__(112);\nvar step = __webpack_require__(162);\nvar setSpecies = __webpack_require__(54);\nvar DESCRIPTORS = __webpack_require__(8);\nvar fastKey = __webpack_require__(41).fastKey;\nvar validate = __webpack_require__(64);\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanM/MGUwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///167\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar strong = __webpack_require__(167);\nvar validate = __webpack_require__(64);\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = __webpack_require__(87)(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzPzc1MjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///168\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar each = __webpack_require__(35)(0);\nvar redefine = __webpack_require__(19);\nvar meta = __webpack_require__(41);\nvar assign = __webpack_require__(150);\nvar weak = __webpack_require__(170);\nvar isObject = __webpack_require__(6);\nvar fails = __webpack_require__(5);\nvar validate = __webpack_require__(64);\nvar WEAK_MAP = 'WeakMap';\nvar getWeak = meta.getWeak;\nvar isExtensible = Object.isExtensible;\nvar uncaughtFrozenStore = weak.ufstore;\nvar tmp = {};\nvar InternalMap;\n\nvar wrapper = function (get) {\n  return function WeakMap() {\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key) {\n    if (isObject(key)) {\n      var data = getWeak(key);\n      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value) {\n    return weak.def(validate(this, WEAK_MAP), key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = __webpack_require__(87)(WEAK_MAP, wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {\n  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function (key) {\n    var proto = $WeakMap.prototype;\n    var method = proto[key];\n    redefine(proto, key, function (a, b) {\n      // store frozen objects on internal weakmap shim\n      if (isObject(a) && !isExtensible(a)) {\n        if (!this._f) this._f = new InternalMap();\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanM/NjQzNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfTUFQID0gJ1dlYWtNYXAnO1xudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlO1xudmFyIHRtcCA9IHt9O1xudmFyIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KGtleSkpIHtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNzsgfSkpIHtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBwcm90byA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDE2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///169\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar redefineAll = __webpack_require__(57);\nvar getWeak = __webpack_require__(41).getWeak;\nvar anObject = __webpack_require__(3);\nvar isObject = __webpack_require__(6);\nvar anInstance = __webpack_require__(55);\nvar forOf = __webpack_require__(56);\nvar createArrayMethod = __webpack_require__(35);\nvar $has = __webpack_require__(17);\nvar validate = __webpack_require__(64);\nvar arrayFind = createArrayMethod(5);\nvar arrayFindIndex = createArrayMethod(6);\nvar id = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function (that) {\n  return that._l || (that._l = new UncaughtFrozenStore());\n};\nvar UncaughtFrozenStore = function () {\n  this.a = [];\n};\nvar findUncaughtFrozen = function (store, key) {\n  return arrayFind(store.a, function (it) {\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = arrayFindIndex(this.a, function (it) {\n      return it[0] === key;\n    });\n    if (~index) this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;      // collection type\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function (key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var data = getWeak(anObject(key), true);\n    if (data === true) uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi13ZWFrLmpzPzdjOTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xudmFyIGlkID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICh0aGF0KSB7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbiAoc3RvcmUsIGtleSkge1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYgKGVudHJ5KSBlbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qc1xuLy8gbW9kdWxlIGlkID0gMTcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///170\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = __webpack_require__(33);\nvar toLength = __webpack_require__(10);\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW5kZXguanM/ZjAzZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXIoaXQpO1xuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XG4gIHJldHVybiBsZW5ndGg7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///171\n");
    }, function(module, exports, __webpack_require__) {
        eval("// all object keys, includes non-enumerable and symbols\nvar gOPN = __webpack_require__(53);\nvar gOPS = __webpack_require__(80);\nvar anObject = __webpack_require__(3);\nvar Reflect = __webpack_require__(4).Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = gOPN.f(anObject(it));\n  var getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanM/NjE0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb3duLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDE3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///172\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar isArray = __webpack_require__(81);\nvar isObject = __webpack_require__(6);\nvar toLength = __webpack_require__(10);\nvar ctx = __webpack_require__(27);\nvar IS_CONCAT_SPREADABLE = __webpack_require__(7)('isConcatSpreadable');\n\nfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n  var element, spreadable;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      spreadable = false;\n      if (isObject(element)) {\n        spreadable = element[IS_CONCAT_SPREADABLE];\n        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n      }\n\n      if (spreadable && depth > 0) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n}\n\nmodule.exports = flattenIntoArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhdHRlbi1pbnRvLWFycmF5LmpzPzIwNWEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuZnVuY3Rpb24gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoLCBtYXBwZXIsIHRoaXNBcmcpIHtcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XG4gIHZhciBtYXBGbiA9IG1hcHBlciA/IGN0eChtYXBwZXIsIHRoaXNBcmcsIDMpIDogZmFsc2U7XG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xuXG4gIHdoaWxlIChzb3VyY2VJbmRleCA8IHNvdXJjZUxlbikge1xuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xuXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcbiAgICAgICAgc3ByZWFkYWJsZSA9IGVsZW1lbnRbSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5JbnRvQXJyYXk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZsYXR0ZW4taW50by1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMTczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///173\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = __webpack_require__(10);\nvar repeat = __webpack_require__(108);\nvar defined = __webpack_require__(32);\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcz9kOTU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XG4gIHZhciBTID0gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xuICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICB2YXIgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1wYWQuanNcbi8vIG1vZHVsZSBpZCA9IDE3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///174\n");
    }, function(module, exports, __webpack_require__) {
        eval("var getKeys = __webpack_require__(50);\nvar toIObject = __webpack_require__(23);\nvar isEnum = __webpack_require__(71).f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzPzk0YTEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXRvLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///175\n");
    }, function(module, exports, __webpack_require__) {
        eval('// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = __webpack_require__(72);\nvar from = __webpack_require__(177);\nmodule.exports = function (NAME) {\n  return function toJSON() {\n    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn\'t generic");\n    return from(this);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzPzVkNzAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///176\n');
    }, function(module, exports, __webpack_require__) {
        eval("var forOf = __webpack_require__(56);\n\nmodule.exports = function (iter, ITERATOR) {\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcz80MDZlIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1mcm9tLWl0ZXJhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///177\n");
    }, function(module, exports) {
        eval("// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  if (\n    arguments.length === 0\n      // eslint-disable-next-line no-self-compare\n      || x != x\n      // eslint-disable-next-line no-self-compare\n      || inLow != inLow\n      // eslint-disable-next-line no-self-compare\n      || inHigh != inHigh\n      // eslint-disable-next-line no-self-compare\n      || outLow != outLow\n      // eslint-disable-next-line no-self-compare\n      || outHigh != outHigh\n  ) return NaN;\n  if (x === Infinity || x === -Infinity) return x;\n  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcz81OThmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcbiAgaWYgKFxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IHggIT0geFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dExvdyAhPSBvdXRMb3dcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxuICApIHJldHVybiBOYU47XG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///178\n");
    }, function(module, exports) {
        eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5LmpzIiwic291cmNlcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///179\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar LIBRARY = __webpack_require__(92);\nvar $export = __webpack_require__(26);\nvar redefine = __webpack_require__(182);\nvar hide = __webpack_require__(58);\nvar has = __webpack_require__(59);\nvar Iterators = __webpack_require__(74);\nvar $iterCreate = __webpack_require__(413);\nvar setToStringTag = __webpack_require__(95);\nvar getPrototypeOf = __webpack_require__(186);\nvar ITERATOR = __webpack_require__(22)('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRlZmluZS5qcz9iYzgwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDE4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///180\n");
    }, function(module, exports, __webpack_require__) {
        eval("module.exports = !__webpack_require__(44) && !__webpack_require__(66)(function () {\n  return Object.defineProperty(__webpack_require__(129)('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcz80OWYwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDE4MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///181\n");
    }, function(module, exports, __webpack_require__) {
        eval("module.exports = __webpack_require__(58);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcz9mM2NkIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3JlZGVmaW5lLmpzXG4vLyBtb2R1bGUgaWQgPSAxODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///182\n");
    }, function(module, exports, __webpack_require__) {
        eval("var has = __webpack_require__(59);\nvar toIObject = __webpack_require__(45);\nvar arrayIndexOf = __webpack_require__(415)(false);\nvar IE_PROTO = __webpack_require__(133)('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy1pbnRlcm5hbC5qcz8yMWI4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxODNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///183\n");
    }, function(module, exports, __webpack_require__) {
        eval("// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(75);\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzPzMxNGUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pb2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxODRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///184\n");
    }, function(module, exports, __webpack_require__) {
        eval("var document = __webpack_require__(21).document;\nmodule.exports = document && document.documentElement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzPzQ0ZjIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19odG1sLmpzXG4vLyBtb2R1bGUgaWQgPSAxODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///185\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = __webpack_require__(59);\nvar toObject = __webpack_require__(76);\nvar IE_PROTO = __webpack_require__(133)('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ3BvLmpzPzNmM2MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdwby5qc1xuLy8gbW9kdWxlIGlkID0gMTg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///186\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(417);\nvar global = __webpack_require__(21);\nvar hide = __webpack_require__(58);\nvar Iterators = __webpack_require__(74);\nvar TO_STRING_TAG = __webpack_require__(22)('toStringTag');\n\nvar DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +\n  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +\n  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +\n  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +\n  'TextTrackList,TouchList').split(',');\n\nfor (var i = 0; i < DOMIterables.length; i++) {\n  var NAME = DOMIterables[i];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n  Iterators[NAME] = Iterators.Array;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanM/ZmFkMyJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG52YXIgRE9NSXRlcmFibGVzID0gKCdDU1NSdWxlTGlzdCxDU1NTdHlsZURlY2xhcmF0aW9uLENTU1ZhbHVlTGlzdCxDbGllbnRSZWN0TGlzdCxET01SZWN0TGlzdCxET01TdHJpbmdMaXN0LCcgK1xuICAnRE9NVG9rZW5MaXN0LERhdGFUcmFuc2Zlckl0ZW1MaXN0LEZpbGVMaXN0LEhUTUxBbGxDb2xsZWN0aW9uLEhUTUxDb2xsZWN0aW9uLEhUTUxGb3JtRWxlbWVudCxIVE1MU2VsZWN0RWxlbWVudCwnICtcbiAgJ01lZGlhTGlzdCxNaW1lVHlwZUFycmF5LE5hbWVkTm9kZU1hcCxOb2RlTGlzdCxQYWludFJlcXVlc3RMaXN0LFBsdWdpbixQbHVnaW5BcnJheSxTVkdMZW5ndGhMaXN0LFNWR051bWJlckxpc3QsJyArXG4gICdTVkdQYXRoU2VnTGlzdCxTVkdQb2ludExpc3QsU1ZHU3RyaW5nTGlzdCxTVkdUcmFuc2Zvcm1MaXN0LFNvdXJjZUJ1ZmZlckxpc3QsU3R5bGVTaGVldExpc3QsVGV4dFRyYWNrQ3VlTGlzdCwnICtcbiAgJ1RleHRUcmFja0xpc3QsVG91Y2hMaXN0Jykuc3BsaXQoJywnKTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCBET01JdGVyYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgdmFyIE5BTUUgPSBET01JdGVyYWJsZXNbaV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///187\n");
    }, function(module, exports, __webpack_require__) {
        eval("// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(75);\nvar TAG = __webpack_require__(22)('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzPzQ1OGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NsYXNzb2YuanNcbi8vIG1vZHVsZSBpZCA9IDE4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///188\n");
    }, function(module, exports, __webpack_require__) {
        eval("// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(39);\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanM/OWFjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNhbGwuanNcbi8vIG1vZHVsZSBpZCA9IDE4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///189\n");
    }, function(module, exports, __webpack_require__) {
        eval("// check on default Array iterator\nvar Iterators = __webpack_require__(74);\nvar ITERATOR = __webpack_require__(22)('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzPzMyMWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qc1xuLy8gbW9kdWxlIGlkID0gMTkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///190\n");
    }, function(module, exports, __webpack_require__) {
        eval("var classof = __webpack_require__(188);\nvar ITERATOR = __webpack_require__(22)('iterator');\nvar Iterators = __webpack_require__(74);\nmodule.exports = __webpack_require__(13).getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcz9kZGZiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgIT0gdW5kZWZpbmVkKSByZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///191\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = __webpack_require__(39);\nvar aFunction = __webpack_require__(93);\nvar SPECIES = __webpack_require__(22)('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzP2I3Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDE5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///192\n");
    }, function(module, exports, __webpack_require__) {
        eval("var ctx = __webpack_require__(65);\nvar invoke = __webpack_require__(423);\nvar html = __webpack_require__(185);\nvar cel = __webpack_require__(129);\nvar global = __webpack_require__(21);\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (__webpack_require__(75)(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzPzJmOGQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Rhc2suanNcbi8vIG1vZHVsZSBpZCA9IDE5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///193\n");
    }, function(module, exports) {
        eval("module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wZXJmb3JtLmpzPzc0ZDAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wZXJmb3JtLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///194\n");
    }, function(module, exports, __webpack_require__) {
        eval("var anObject = __webpack_require__(39);\nvar isObject = __webpack_require__(43);\nvar newPromiseCapability = __webpack_require__(136);\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19wcm9taXNlLXJlc29sdmUuanM/N2M5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///195\n");
    }, function(module, exports, __webpack_require__) {
        eval("var ITERATOR = __webpack_require__(22)('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWRldGVjdC5qcz83NThkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZXRlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDE5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///196\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(432), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzPzBiODMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMTk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///197\n');
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = __webpack_require__(183);\nvar hiddenKeys = __webpack_require__(135).concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcz85ZjQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanNcbi8vIG1vZHVsZSBpZCA9IDE5OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///198\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(456), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvY3JlYXRlLmpzPzNhZjQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///199\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('Bus');\n\n/**\n* @author micaelpedrosa@gmail.com\n* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.\n* Components that need a message system should receive this class as a dependency or extend it.\n* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener\n*/\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n// Log system\n\nvar Bus = function () {\n  /* private\n  _msgId: number;\n  _subscriptions: <url: MsgListener[]>\n   _responseTimeOut: number\n  _responseCallbacks: <url+id: (msg) => void>\n   */\n\n  function Bus() {\n    (0, _classCallCheck3.default)(this, Bus);\n\n    var _this = this;\n    _this._msgId = 0;\n    _this._subscriptions = {};\n\n    _this._responseTimeOut = 15000; //default to 3s\n    _this._responseCallbacks = {};\n\n    _this._registerExternalListener();\n  }\n\n  /**\n  * Register listener to receive message when \"msg.to === url\".\n  * Special url \"*\" for default listener is accepted to intercept all messages.\n  * @param {URL} url Address to intercept, tha is in the message \"to\"\n  * @param {Listener} listener listener\n  * @return {MsgListener} instance of MsgListener\n  */\n\n\n  (0, _createClass3.default)(Bus, [{\n    key: 'addListener',\n    value: function addListener(url, listener) {\n      var _this = this;\n\n      var item = new MsgListener(_this._subscriptions, url, listener);\n      var itemList = _this._subscriptions[url];\n      if (!itemList) {\n        itemList = [];\n        _this._subscriptions[url] = itemList;\n      }\n\n      itemList.push(item);\n      return item;\n    }\n\n    /**\n     * Manually add a response listener. Only one listener per message ID should exist.\n     * ATENTION, there is no timeout for this listener.\n     * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.\n     * @param {URL} url Origin address of the message sent, \"msg.from\".\n     * @param {number} msgId Message ID that is returned from the postMessage.\n     * @param {Function} responseListener Callback function for the response\n     */\n\n  }, {\n    key: 'addResponseListener',\n    value: function addResponseListener(url, msgId, responseListener) {\n      this._responseCallbacks[url + msgId] = responseListener;\n    }\n\n    /**\n     * Remove the response listener.\n     * @param {URL} url Origin address of the message sent, \"msg.from\".\n     * @param {number} msgId  Message ID that is returned from the postMessage\n     */\n\n  }, {\n    key: 'removeResponseListener',\n    value: function removeResponseListener(url, msgId) {\n      delete this._responseCallbacks[url + msgId];\n    }\n\n    /**\n     * Remove all existent listeners for the URL\n     * @param  {URL} url Address registered\n     */\n\n  }, {\n    key: 'removeAllListenersOf',\n    value: function removeAllListenersOf(url) {\n      delete this._subscriptions[url];\n    }\n\n    /**\n     * Helper method to bind listeners (in both directions) into other MiniBus target.\n     * @param  {URL} outUrl Outbound URL, register listener for url in direction \"this -> target\"\n     * @param  {URL} inUrl Inbound URL, register listener for url in direction \"target -> this\"\n     * @param  {MiniBus} target The other target MiniBus\n     * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.\n     */\n\n  }, {\n    key: 'bind',\n    value: function bind(outUrl, inUrl, target) {\n      var _this2 = this;\n\n      var _this = this;\n\n      var thisListn = _this.addListener(outUrl, function (msg) {\n        target.postMessage(msg);\n      });\n\n      var targetListn = target.addListener(inUrl, function (msg) {\n        _this.postMessage(msg);\n      });\n\n      return {\n        thisListener: thisListn,\n        targetListener: targetListn,\n        unbind: function unbind() {\n          _this2.thisListener.remove();\n          _this2.targetListener.remove();\n        }\n      };\n    }\n\n    //publish on default listeners\n\n  }, {\n    key: '_publishOnDefault',\n    value: function _publishOnDefault(msg) {\n      //is there any \"*\" (default) listeners?\n      var itemList = this._subscriptions['*'];\n      if (itemList) {\n        this._publishOn(itemList, msg);\n      }\n    }\n\n    //publish on a subscription list.\n\n  }, {\n    key: '_publishOn',\n    value: function _publishOn(itemList, msg) {\n      itemList.forEach(function (sub) {\n        sub._callback(msg);\n      });\n    }\n  }, {\n    key: '_responseCallback',\n    value: function _responseCallback(inMsg, responseCallback) {\n      var _this = this;\n\n      //automatic management of response handlers\n      if (responseCallback) {\n        var responseId = inMsg.from + inMsg.id;\n        _this._responseCallbacks[responseId] = responseCallback;\n\n        setTimeout(function () {\n          var responseFun = _this._responseCallbacks[responseId];\n          delete _this._responseCallbacks[responseId];\n\n          if (responseFun) {\n            var errorMsg = {\n              id: inMsg.id, type: 'response',\n              body: { code: 408, desc: 'Response timeout!', value: inMsg }\n            };\n\n            responseFun(errorMsg);\n          }\n        }, _this._responseTimeOut);\n      }\n    }\n\n    //TODO: provisional responses should reset timeout\n\n  }, {\n    key: '_onResponse',\n    value: function _onResponse(msg) {\n      var _this = this;\n\n      if (msg.type === 'response') {\n        var responseId = msg.to + msg.id;\n        var responseFun = _this._responseCallbacks[responseId];\n\n        if (msg.body.code >= 200) {\n          //if it's a provisional response, don't delete response listener\n          delete _this._responseCallbacks[responseId];\n        }\n\n        if (responseFun) {\n          responseFun(msg);\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    //receive messages from external interface\n\n  }, {\n    key: '_onMessage',\n    value: function _onMessage(msg) {\n      var _this = this;\n\n      if (!_this._onResponse(msg)) {\n        var itemList = _this._subscriptions[msg.to];\n        if (itemList) {\n          _this._publishOn(itemList, msg);\n        } else {\n          _this._publishOnDefault(msg);\n        }\n      }\n    }\n  }, {\n    key: '_genId',\n    value: function _genId(inMsg) {\n      //TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?\n      //Global counter will not work, because there will be multiple MiniBus instances!\n      //Per URL, can be a lot of data to maintain!\n      //Maybe a counter per MiniBus instance. This is the assumed solution for now.\n      if (!inMsg.id || inMsg.id === 0) {\n        this._msgId++;\n        inMsg.id = this._msgId;\n      }\n    }\n\n    /**\n    * Send messages to local listeners, or if not exists to external listeners.\n    * It's has an optional mechanism for automatic management of response handlers.\n    * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).\n    * @param  {Message} msg Message to send. Message ID is automatically added to the message.\n    * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.\n    * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.\n    */\n\n  }, {\n    key: 'postMessage',\n    value: function postMessage(inMsg, responseCallback) {}\n\n    /**\n     * Function to post messages with a number of retries in case timeouts occur.\n     * @param  {Message} msg Message to send. Message ID is automatically added to the message.\n     * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.\n     * @param  {integer} retries number of retries when timeouts occur\n     * @return {boolean} message delivery result;\n     */\n\n  }, {\n    key: 'postMessageWithRetries',\n    value: function postMessageWithRetries(msg, retries, callback) {\n\n      var _this = this;\n\n      var retry = 0;\n      //let timeout = true;\n\n      var sendMsg = function sendMsg() {\n\n        return new _promise2.default(function (resolve, reject) {\n          _this.postMessage(msg, function (reply) {\n            if (reply.body.code === 408 || reply.body.code === 500) reject();else {\n              log.info('[Bus.postMessageWithRetries] msg delivered: ', msg);\n              callback(reply);\n              resolve();\n            }\n          });\n        });\n      };\n\n      var tryAgain = function tryAgain() {\n        sendMsg().then(function () {\n          //timeout = false;\n          return;\n        }, function () {\n          log.warn('[Bus.postMessageWithRetries] Message Bounced (retry ' + retry + '): \\'', msg);\n          if (retry++ < retries) {\n            tryAgain();\n            // setTimeout(() => { tryAgain(); }, 1000);\n          } else {\n            var error = '[Error] Message Bounced (delivery attempts ' + retries + '): \\'';\n            throw new Error(error + msg);\n          }\n        });\n      };\n      tryAgain();\n    }\n\n    /**\n     * Not public available, used by the class extension implementation, to process messages from the public \"postMessage\" without a registered listener.\n     * Used to send the message to an external interface, like a WebWorker, IFrame, etc.\n     * @param  {Message.Message} msg Message\n     */\n\n  }, {\n    key: '_onPostMessage',\n    value: function _onPostMessage(msg) {} /*implementation will send message to external system*/\n\n    /**\n     * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.\n     * This method is called one time in the constructor to register external listeners.\n     * The implementation will probably call the \"_onMessage\" method to publish in the local listeners.\n     * DO NOT call \"postMessage\", there is a danger that the message enters in a cycle!\n     */\n\n  }, {\n    key: '_registerExternalListener',\n    value: function _registerExternalListener() {/*implementation will register external listener and call \"this._onMessage(msg)\" */}\n  }]);\n  return Bus;\n}();\n\nvar MsgListener = function () {\n  /* private\n  _subscriptions: <string: MsgListener[]>;\n  _url: string;\n  _callback: (msg) => void;\n  */\n\n  function MsgListener(subscriptions, url, callback) {\n    (0, _classCallCheck3.default)(this, MsgListener);\n\n    var _this = this;\n\n    _this._subscriptions = subscriptions;\n    _this._url = url;\n    _this._callback = callback;\n  }\n\n  (0, _createClass3.default)(MsgListener, [{\n    key: 'remove',\n\n\n    /**\n     * Remove this listener from the Bus\n     */\n    value: function remove() {\n      var _this = this;\n\n      var subs = _this._subscriptions[_this._url];\n      if (subs) {\n        var index = subs.indexOf(_this);\n        subs.splice(index, 1);\n\n        //if there are no listeners, remove the subscription entirely.\n        if (subs.length === 0) {\n          delete _this._subscriptions[_this._url];\n        }\n      }\n    }\n  }, {\n    key: 'url',\n    get: function get() {\n      return this._url;\n    }\n  }]);\n  return MsgListener;\n}();\n\nexports.default = Bus;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9idXMvQnVzLmpzPzZkMTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG4vLyBMb2cgc3lzdGVtXG5pbXBvcnQgKiBhcyBsb2dnZXIgZnJvbSAnbG9nbGV2ZWwnO1xubGV0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ0J1cycpO1xuXG4vKipcbiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxuKiBNaW5pbWFsIGludGVyZmFjZSBhbmQgaW1wbGVtZW50YXRpb24gdG8gc2VuZCBhbmQgcmVjZWl2ZSBtZXNzYWdlcy4gSXQgY2FuIGJlIHJldXNlZCBpbiBtYW55IHR5cGUgb2YgY29tcG9uZW50cy5cbiogQ29tcG9uZW50cyB0aGF0IG5lZWQgYSBtZXNzYWdlIHN5c3RlbSBzaG91bGQgcmVjZWl2ZSB0aGlzIGNsYXNzIGFzIGEgZGVwZW5kZW5jeSBvciBleHRlbmQgaXQuXG4qIEV4dGVuc2lvbnMgc2hvdWxkIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByaXZhdGUgbWV0aG9kczogX29uUG9zdE1lc3NhZ2UgYW5kIF9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXJcbiovXG5jbGFzcyBCdXMge1xuICAvKiBwcml2YXRlXG4gIF9tc2dJZDogbnVtYmVyO1xuICBfc3Vic2NyaXB0aW9uczogPHVybDogTXNnTGlzdGVuZXJbXT5cblxuICBfcmVzcG9uc2VUaW1lT3V0OiBudW1iZXJcbiAgX3Jlc3BvbnNlQ2FsbGJhY2tzOiA8dXJsK2lkOiAobXNnKSA9PiB2b2lkPlxuXG4gICovXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fbXNnSWQgPSAwO1xuICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307XG5cbiAgICBfdGhpcy5fcmVzcG9uc2VUaW1lT3V0ID0gMTUwMDA7IC8vZGVmYXVsdCB0byAzc1xuICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrcyA9IHt9O1xuXG4gICAgX3RoaXMuX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lcigpO1xuICB9XG5cbiAgLyoqXG4gICogUmVnaXN0ZXIgbGlzdGVuZXIgdG8gcmVjZWl2ZSBtZXNzYWdlIHdoZW4gXCJtc2cudG8gPT09IHVybFwiLlxuICAqIFNwZWNpYWwgdXJsIFwiKlwiIGZvciBkZWZhdWx0IGxpc3RlbmVyIGlzIGFjY2VwdGVkIHRvIGludGVyY2VwdCBhbGwgbWVzc2FnZXMuXG4gICogQHBhcmFtIHtVUkx9IHVybCBBZGRyZXNzIHRvIGludGVyY2VwdCwgdGhhIGlzIGluIHRoZSBtZXNzYWdlIFwidG9cIlxuICAqIEBwYXJhbSB7TGlzdGVuZXJ9IGxpc3RlbmVyIGxpc3RlbmVyXG4gICogQHJldHVybiB7TXNnTGlzdGVuZXJ9IGluc3RhbmNlIG9mIE1zZ0xpc3RlbmVyXG4gICovXG4gIGFkZExpc3RlbmVyKHVybCwgbGlzdGVuZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGl0ZW0gPSBuZXcgTXNnTGlzdGVuZXIoX3RoaXMuX3N1YnNjcmlwdGlvbnMsIHVybCwgbGlzdGVuZXIpO1xuICAgIGxldCBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW3VybF07XG4gICAgaWYgKCFpdGVtTGlzdCkge1xuICAgICAgaXRlbUxpc3QgPSBbXTtcbiAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW3VybF0gPSBpdGVtTGlzdDtcbiAgICB9XG5cbiAgICBpdGVtTGlzdC5wdXNoKGl0ZW0pO1xuICAgIHJldHVybiBpdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hbnVhbGx5IGFkZCBhIHJlc3BvbnNlIGxpc3RlbmVyLiBPbmx5IG9uZSBsaXN0ZW5lciBwZXIgbWVzc2FnZSBJRCBzaG91bGQgZXhpc3QuXG4gICAqIEFURU5USU9OLCB0aGVyZSBpcyBubyB0aW1lb3V0IGZvciB0aGlzIGxpc3RlbmVyLlxuICAgKiBUaGUgbGlzdGVuZXIgc2hvdWxkIGJlIHJlbW92ZWQgd2l0aCBhIHJlbW92ZVJlc3BvbnNlTGlzdGVuZXIsIGZhaWxpbmcgdG8gZG8gdGhpcyB3aWxsIHJlc3VsdCBpbiBhIHVucmVsZWFzZWQgbWVtb3J5IHByb2JsZW0uXG4gICAqIEBwYXJhbSB7VVJMfSB1cmwgT3JpZ2luIGFkZHJlc3Mgb2YgdGhlIG1lc3NhZ2Ugc2VudCwgXCJtc2cuZnJvbVwiLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbXNnSWQgTWVzc2FnZSBJRCB0aGF0IGlzIHJldHVybmVkIGZyb20gdGhlIHBvc3RNZXNzYWdlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNwb25zZUxpc3RlbmVyIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB0aGUgcmVzcG9uc2VcbiAgICovXG4gIGFkZFJlc3BvbnNlTGlzdGVuZXIodXJsLCBtc2dJZCwgcmVzcG9uc2VMaXN0ZW5lcikge1xuICAgIHRoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3VybCArIG1zZ0lkXSA9IHJlc3BvbnNlTGlzdGVuZXI7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSByZXNwb25zZSBsaXN0ZW5lci5cbiAgICogQHBhcmFtIHtVUkx9IHVybCBPcmlnaW4gYWRkcmVzcyBvZiB0aGUgbWVzc2FnZSBzZW50LCBcIm1zZy5mcm9tXCIuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtc2dJZCAgTWVzc2FnZSBJRCB0aGF0IGlzIHJldHVybmVkIGZyb20gdGhlIHBvc3RNZXNzYWdlXG4gICAqL1xuICByZW1vdmVSZXNwb25zZUxpc3RlbmVyKHVybCwgbXNnSWQpIHtcbiAgICBkZWxldGUgdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbdXJsICsgbXNnSWRdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgZXhpc3RlbnQgbGlzdGVuZXJzIGZvciB0aGUgVVJMXG4gICAqIEBwYXJhbSAge1VSTH0gdXJsIEFkZHJlc3MgcmVnaXN0ZXJlZFxuICAgKi9cbiAgcmVtb3ZlQWxsTGlzdGVuZXJzT2YodXJsKSB7XG4gICAgZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIHRvIGJpbmQgbGlzdGVuZXJzIChpbiBib3RoIGRpcmVjdGlvbnMpIGludG8gb3RoZXIgTWluaUJ1cyB0YXJnZXQuXG4gICAqIEBwYXJhbSAge1VSTH0gb3V0VXJsIE91dGJvdW5kIFVSTCwgcmVnaXN0ZXIgbGlzdGVuZXIgZm9yIHVybCBpbiBkaXJlY3Rpb24gXCJ0aGlzIC0+IHRhcmdldFwiXG4gICAqIEBwYXJhbSAge1VSTH0gaW5VcmwgSW5ib3VuZCBVUkwsIHJlZ2lzdGVyIGxpc3RlbmVyIGZvciB1cmwgaW4gZGlyZWN0aW9uIFwidGFyZ2V0IC0+IHRoaXNcIlxuICAgKiBAcGFyYW0gIHtNaW5pQnVzfSB0YXJnZXQgVGhlIG90aGVyIHRhcmdldCBNaW5pQnVzXG4gICAqIEByZXR1cm4ge0JvdW5kfSBhbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgcHJvcGVydGllcyBbdGhpc0xpc3RlbmVyLCB0YXJnZXRMaXN0ZW5lcl0gYW5kIHRoZSB1bmJpbmQgbWV0aG9kLlxuICAgKi9cbiAgYmluZChvdXRVcmwsIGluVXJsLCB0YXJnZXQpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IHRoaXNMaXN0biA9IF90aGlzLmFkZExpc3RlbmVyKG91dFVybCwgKG1zZykgPT4ge1xuICAgICAgdGFyZ2V0LnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgfSk7XG5cbiAgICBsZXQgdGFyZ2V0TGlzdG4gPSB0YXJnZXQuYWRkTGlzdGVuZXIoaW5VcmwsIChtc2cpID0+IHtcbiAgICAgIF90aGlzLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGhpc0xpc3RlbmVyOiB0aGlzTGlzdG4sXG4gICAgICB0YXJnZXRMaXN0ZW5lcjogdGFyZ2V0TGlzdG4sXG4gICAgICB1bmJpbmQ6ICgpID0+IHtcbiAgICAgICAgdGhpcy50aGlzTGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMudGFyZ2V0TGlzdGVuZXIucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vcHVibGlzaCBvbiBkZWZhdWx0IGxpc3RlbmVyc1xuICBfcHVibGlzaE9uRGVmYXVsdChtc2cpIHtcbiAgICAvL2lzIHRoZXJlIGFueSBcIipcIiAoZGVmYXVsdCkgbGlzdGVuZXJzP1xuICAgIGxldCBpdGVtTGlzdCA9IHRoaXMuX3N1YnNjcmlwdGlvbnNbJyonXTtcbiAgICBpZiAoaXRlbUxpc3QpIHtcbiAgICAgIHRoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcbiAgICB9XG4gIH1cblxuICAvL3B1Ymxpc2ggb24gYSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKSB7XG4gICAgaXRlbUxpc3QuZm9yRWFjaCgoc3ViKSA9PiB7XG4gICAgICBzdWIuX2NhbGxiYWNrKG1zZyk7XG4gICAgfSk7XG4gIH1cblxuICBfcmVzcG9uc2VDYWxsYmFjayhpbk1zZywgcmVzcG9uc2VDYWxsYmFjaykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvL2F1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzXG4gICAgaWYgKHJlc3BvbnNlQ2FsbGJhY2spIHtcbiAgICAgIGxldCByZXNwb25zZUlkID0gaW5Nc2cuZnJvbSArIGluTXNnLmlkO1xuICAgICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdID0gcmVzcG9uc2VDYWxsYmFjaztcblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGxldCByZXNwb25zZUZ1biA9IF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXTtcbiAgICAgICAgZGVsZXRlIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXTtcblxuICAgICAgICBpZiAocmVzcG9uc2VGdW4pIHtcbiAgICAgICAgICBsZXQgZXJyb3JNc2cgPSB7XG4gICAgICAgICAgICBpZDogaW5Nc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsXG4gICAgICAgICAgICBib2R5OiB7IGNvZGU6IDQwOCwgZGVzYzogJ1Jlc3BvbnNlIHRpbWVvdXQhJywgdmFsdWU6IGluTXNnIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgcmVzcG9uc2VGdW4oZXJyb3JNc2cpO1xuICAgICAgICB9XG4gICAgICB9LCBfdGhpcy5fcmVzcG9uc2VUaW1lT3V0KTtcbiAgICB9XG4gIH1cblxuLy9UT0RPOiBwcm92aXNpb25hbCByZXNwb25zZXMgc2hvdWxkIHJlc2V0IHRpbWVvdXRcbiAgX29uUmVzcG9uc2UobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmIChtc2cudHlwZSA9PT0gJ3Jlc3BvbnNlJykge1xuICAgICAgbGV0IHJlc3BvbnNlSWQgPSBtc2cudG8gKyBtc2cuaWQ7XG4gICAgICBsZXQgcmVzcG9uc2VGdW4gPSBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbcmVzcG9uc2VJZF07XG5cbiAgICAgIGlmIChtc2cuYm9keS5jb2RlID49IDIwMCkgeyAvL2lmIGl0J3MgYSBwcm92aXNpb25hbCByZXNwb25zZSwgZG9uJ3QgZGVsZXRlIHJlc3BvbnNlIGxpc3RlbmVyXG4gICAgICAgIGRlbGV0ZSBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbcmVzcG9uc2VJZF07XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZUZ1bikge1xuICAgICAgICByZXNwb25zZUZ1bihtc2cpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy9yZWNlaXZlIG1lc3NhZ2VzIGZyb20gZXh0ZXJuYWwgaW50ZXJmYWNlXG4gIF9vbk1lc3NhZ2UobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmICghX3RoaXMuX29uUmVzcG9uc2UobXNnKSkge1xuICAgICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbbXNnLnRvXTtcbiAgICAgIGlmIChpdGVtTGlzdCkge1xuICAgICAgICBfdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbkRlZmF1bHQobXNnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfZ2VuSWQoaW5Nc2cpIHtcbiAgICAvL1RPRE86IGhvdyBkbyB3ZSBtYW5hZ2UgbWVzc2FnZSBJRCdzPyBTaG91bGQgaXQgYmUgYSBnbG9iYWwgcnVudGltZSBjb3VudGVyLCBvciBwZXIgVVJMIGFkZHJlc3M/XG4gICAgLy9HbG9iYWwgY291bnRlciB3aWxsIG5vdCB3b3JrLCBiZWNhdXNlIHRoZXJlIHdpbGwgYmUgbXVsdGlwbGUgTWluaUJ1cyBpbnN0YW5jZXMhXG4gICAgLy9QZXIgVVJMLCBjYW4gYmUgYSBsb3Qgb2YgZGF0YSB0byBtYWludGFpbiFcbiAgICAvL01heWJlIGEgY291bnRlciBwZXIgTWluaUJ1cyBpbnN0YW5jZS4gVGhpcyBpcyB0aGUgYXNzdW1lZCBzb2x1dGlvbiBmb3Igbm93LlxuICAgIGlmICghaW5Nc2cuaWQgfHwgaW5Nc2cuaWQgPT09IDApIHtcbiAgICAgIHRoaXMuX21zZ0lkKys7XG4gICAgICBpbk1zZy5pZCA9IHRoaXMuX21zZ0lkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFNlbmQgbWVzc2FnZXMgdG8gbG9jYWwgbGlzdGVuZXJzLCBvciBpZiBub3QgZXhpc3RzIHRvIGV4dGVybmFsIGxpc3RlbmVycy5cbiAgKiBJdCdzIGhhcyBhbiBvcHRpb25hbCBtZWNoYW5pc20gZm9yIGF1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzLlxuICAqIFRoZSByZXNwb25zZSBoYW5kbGVyIHdpbGwgYmUgdW5yZWdpc3RlcmVkIGFmdGVyIHJlY2VpdmluZyB0aGUgcmVzcG9uc2UsIG9yIGFmdGVyIHJlc3BvbnNlIHRpbWVvdXQgKGRlZmF1bHQgdG8gM3MpLlxuICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBNZXNzYWdlIHRvIHNlbmQuIE1lc3NhZ2UgSUQgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgbWVzc2FnZS5cbiAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBwYXJhbWV0ZXIsIGlmIHRoZSBkZXZlbG9wZXIgd2hhdCdzIGF1dG9tYXRpYyByZXNwb25zZSBtYW5hZ2VtZW50LlxuICAqIEByZXR1cm4ge251bWJlcn0gUmV0dXJucyB0aGUgbWVzc2FnZSBJRCwgaW4gY2FzZSBpdCBzaG91bGQgYmUgbmVlZGVkIGZvciBtYW51YWwgbWFuYWdlbWVudCBvZiB0aGUgcmVzcG9uc2UgaGFuZGxlci5cbiAgKi9cbiAgcG9zdE1lc3NhZ2UoaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spIHsgfVxuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBwb3N0IG1lc3NhZ2VzIHdpdGggYSBudW1iZXIgb2YgcmV0cmllcyBpbiBjYXNlIHRpbWVvdXRzIG9jY3VyLlxuICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgTWVzc2FnZSB0byBzZW5kLiBNZXNzYWdlIElEIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gdGhlIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSByZXNwb25zZUNhbGxiYWNrIE9wdGlvbmFsIHBhcmFtZXRlciwgaWYgdGhlIGRldmVsb3BlciB3aGF0J3MgYXV0b21hdGljIHJlc3BvbnNlIG1hbmFnZW1lbnQuXG4gICAqIEBwYXJhbSAge2ludGVnZXJ9IHJldHJpZXMgbnVtYmVyIG9mIHJldHJpZXMgd2hlbiB0aW1lb3V0cyBvY2N1clxuICAgKiBAcmV0dXJuIHtib29sZWFufSBtZXNzYWdlIGRlbGl2ZXJ5IHJlc3VsdDtcbiAgICovXG5cblxuICBwb3N0TWVzc2FnZVdpdGhSZXRyaWVzKG1zZywgcmV0cmllcywgY2FsbGJhY2spIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgcmV0cnkgPSAwO1xuICAgIC8vbGV0IHRpbWVvdXQgPSB0cnVlO1xuXG4gICAgbGV0IHNlbmRNc2cgPSBmdW5jdGlvbigpIHtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgX3RoaXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcbiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSA0MDggfHwgcmVwbHkuYm9keS5jb2RlID09PSA1MDApIHJlamVjdCgpO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbG9nLmluZm8oJ1tCdXMucG9zdE1lc3NhZ2VXaXRoUmV0cmllc10gbXNnIGRlbGl2ZXJlZDogJywgbXNnKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKHJlcGx5KTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGxldCB0cnlBZ2FpbiA9ICgpID0+IHtcbiAgICAgIHNlbmRNc2coKS50aGVuKCgpPT57XG4gICAgICAgIC8vdGltZW91dCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9LCAoKT0+e1xuICAgICAgICBsb2cud2FybihgW0J1cy5wb3N0TWVzc2FnZVdpdGhSZXRyaWVzXSBNZXNzYWdlIEJvdW5jZWQgKHJldHJ5ICR7cmV0cnl9KTogJ2AsIG1zZyk7XG4gICAgICAgIGlmIChyZXRyeSsrIDwgcmV0cmllcykge1xuICAgICAgICAgIHRyeUFnYWluKCk7XG4gICAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiB7IHRyeUFnYWluKCk7IH0sIDEwMDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGVycm9yID0gYFtFcnJvcl0gTWVzc2FnZSBCb3VuY2VkIChkZWxpdmVyeSBhdHRlbXB0cyAke3JldHJpZXN9KTogJ2A7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yICsgbXNnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB0cnlBZ2FpbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIE5vdCBwdWJsaWMgYXZhaWxhYmxlLCB1c2VkIGJ5IHRoZSBjbGFzcyBleHRlbnNpb24gaW1wbGVtZW50YXRpb24sIHRvIHByb2Nlc3MgbWVzc2FnZXMgZnJvbSB0aGUgcHVibGljIFwicG9zdE1lc3NhZ2VcIiB3aXRob3V0IGEgcmVnaXN0ZXJlZCBsaXN0ZW5lci5cbiAgICogVXNlZCB0byBzZW5kIHRoZSBtZXNzYWdlIHRvIGFuIGV4dGVybmFsIGludGVyZmFjZSwgbGlrZSBhIFdlYldvcmtlciwgSUZyYW1lLCBldGMuXG4gICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gbXNnIE1lc3NhZ2VcbiAgICovXG4gIF9vblBvc3RNZXNzYWdlKG1zZykgeyAvKmltcGxlbWVudGF0aW9uIHdpbGwgc2VuZCBtZXNzYWdlIHRvIGV4dGVybmFsIHN5c3RlbSovIH1cblxuICAvKipcbiAgICogTm90IHB1YmxpYyBhdmFpbGFibGUsIHVzZWQgYnkgdGhlIGNsYXNzIGV4dGVuc2lvbiBpbXBsZW1lbnRhdGlvbiwgdG8gcHJvY2VzcyBhbGwgbWVzc2FnZXMgdGhhdCBlbnRlciB0aGUgTWluaUJ1cyBmcm9tIGFuIGV4dGVybmFsIGludGVyZmFjZSwgbGlrZSBhIFdlYldvcmtlciwgSUZyYW1lLCBldGMuXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbmUgdGltZSBpbiB0aGUgY29uc3RydWN0b3IgdG8gcmVnaXN0ZXIgZXh0ZXJuYWwgbGlzdGVuZXJzLlxuICAgKiBUaGUgaW1wbGVtZW50YXRpb24gd2lsbCBwcm9iYWJseSBjYWxsIHRoZSBcIl9vbk1lc3NhZ2VcIiBtZXRob2QgdG8gcHVibGlzaCBpbiB0aGUgbG9jYWwgbGlzdGVuZXJzLlxuICAgKiBETyBOT1QgY2FsbCBcInBvc3RNZXNzYWdlXCIsIHRoZXJlIGlzIGEgZGFuZ2VyIHRoYXQgdGhlIG1lc3NhZ2UgZW50ZXJzIGluIGEgY3ljbGUhXG4gICAqL1xuICBfcmVnaXN0ZXJFeHRlcm5hbExpc3RlbmVyKCkgeyAvKmltcGxlbWVudGF0aW9uIHdpbGwgcmVnaXN0ZXIgZXh0ZXJuYWwgbGlzdGVuZXIgYW5kIGNhbGwgXCJ0aGlzLl9vbk1lc3NhZ2UobXNnKVwiICovIH1cblxufVxuXG5jbGFzcyBNc2dMaXN0ZW5lciB7XG4gIC8qIHByaXZhdGVcbiAgX3N1YnNjcmlwdGlvbnM6IDxzdHJpbmc6IE1zZ0xpc3RlbmVyW10+O1xuICBfdXJsOiBzdHJpbmc7XG4gIF9jYWxsYmFjazogKG1zZykgPT4gdm9pZDtcbiAgKi9cblxuICBjb25zdHJ1Y3RvcihzdWJzY3JpcHRpb25zLCB1cmwsIGNhbGxiYWNrKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9ucztcbiAgICBfdGhpcy5fdXJsID0gdXJsO1xuICAgIF90aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB9XG5cbiAgZ2V0IHVybCgpIHsgcmV0dXJuIHRoaXMuX3VybDsgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhpcyBsaXN0ZW5lciBmcm9tIHRoZSBCdXNcbiAgICovXG4gIHJlbW92ZSgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IHN1YnMgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXTtcbiAgICBpZiAoc3Vicykge1xuICAgICAgbGV0IGluZGV4ID0gc3Vicy5pbmRleE9mKF90aGlzKTtcbiAgICAgIHN1YnMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgLy9pZiB0aGVyZSBhcmUgbm8gbGlzdGVuZXJzLCByZW1vdmUgdGhlIHN1YnNjcmlwdGlvbiBlbnRpcmVseS5cbiAgICAgIGlmIChzdWJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbX3RoaXMuX3VybF07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1cztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYnVzL0J1cy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBO0FBQ0E7QUFEQTtBQUNBOzs7OztBQUFBO0FBQ0E7QUFDQTs7Ozs7O0FBM0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQTtBQUNBO0FBU0E7QUFDQTs7Ozs7OztBQVNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFPQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQU1BOzs7OztBQUlBO0FBQ0E7Ozs7OztBQU1BO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUdBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFsQkE7QUFBQTtBQUFBOzs7OztBQXFCQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///200\n");
    }, function(module, exports, __webpack_require__) {
        eval('// version: 0.7.2\n// date: Thu Nov 16 2017 12:35:01 GMT+0000 (WET)\n// licence: \n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the "License");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an "AS IS" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n\n!function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define("Utils",[],t):"object"==typeof exports?exports.Utils=t():(e[""]=e[""]||{},e[""].Utils=t())}(this,function(){return function(e){function __webpack_require__(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,__webpack_require__),n.l=!0,n.exports}var t={};return __webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.d=function(e,t,r){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},__webpack_require__.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=182)}({0:function(e,t){var r=e.exports={version:"2.5.1"};"number"==typeof __e&&(__e=r)},1:function(e,t){var r=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},10:function(e,t,r){var n=r(6),o=r(15);e.exports=r(3)?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},117:function(e,t){!function(){"use strict";function Observer(e,t,r,n,o,i){function deliver(e,n){if(deliver.delay=n,!deliver.pause&&c.changeset.length>0){if(!e){var o=c.changeset.filter(function(e){return!r||r.indexOf(e.type)>=0});o.length>0&&t(o)}c.changeset=[]}}var u,c=this;return deliver.pause=o,deliver.delay=i,c.get=function(e,t){return"__observer__"===t?c:"unobserve"===t?function(){return Object.unobserve(e),e}:"deliver"===t?deliver:e[t]},c.target=e,c.changeset=[],c.target.__observerCallbacks__||(Object.defineProperty(e,"__observerCallbacks__",{enumerable:!1,configurable:!0,writable:!1,value:[]}),Object.defineProperty(e,"__observers__",{enumerable:!1,configurable:!0,writable:!1,value:[]})),c.target.__observerCallbacks__.push(t),c.target.__observers__.push(this),u=new Proxy(e,c),deliver(!1,i),u}Object.observe||"function"!=typeof Proxy||(Observer.prototype.deliver=function(){return this.get(null,"deliver")},Observer.prototype.set=function(e,t,r){var n=e[t],o=void 0===n?"add":"update";if(e[t]=r,e.__observers__.indexOf(this)>=0&&(!this.acceptlist||this.acceptlist.indexOf(o)>=0)){var i={object:e,name:t,type:o},u=0===this.changeset.length,c=this.deliver();"update"===o&&(i.oldValue=n),this.changeset.push(i),u&&c(!1,"number"==typeof c.delay?c.delay:10)}return!0},Observer.prototype.deleteProperty=function(e,t){var r=e[t];if(delete e[t],e.__observers__.indexOf(this)>=0&&!this.acceptlist||this.acceptlist.indexOf("delete")>=0){var n={object:e,name:t,type:"delete",oldValue:r},o=0===this.changeset.length,i=this.deliver();this.changeset.push(n),o&&i(!1,"number"==typeof i.delay?i.delay:10)}return!0},Observer.prototype.defineProperty=function(e,t,r){if(Object.defineProperty(e,t,r),e.__observers__.indexOf(this)>=0&&!this.acceptlist||this.acceptlist.indexOf("reconfigure")>=0){var n={object:e,name:t,type:"reconfigure"},o=0===this.changeset.length,i=this.deliver();this.changeset.push(n),o&&i(!1,"number"==typeof i.delay?i.delay:10)}return!0},Observer.prototype.setPrototypeOf=function(e,t){var r=Object.getPrototypeOf(e);if(Object.setPrototypeOf(e,t),e.__observers__.indexOf(this)>=0&&!this.acceptlist||this.acceptlist.indexOf("setPrototype")>=0){var n={object:e,name:"__proto__",type:"setPrototype",oldValue:r},o=0===this.changeset.length,i=this.deliver();this.changeset.push(n),o&&i(!1,"number"==typeof i.delay?i.delay:10)}return!0},Observer.prototype.preventExtensions=function(e){if(Object.preventExtensions(e),e.__observers__.indexOf(this)>=0&&!this.acceptlist||this.acceptlist.indexOf("preventExtensions")>=0){var t={object:e,type:"preventExtensions"},r=0===this.changeset.length,n=this.deliver();this.changeset.push(t),r&&n(!1,"number"==typeof n.delay?n.delay:10)}return!0},Object.observe=function(e,t,r,n,o,i){return new Observer(e,t,r,n,o,i)},Object.unobserve=function(e,t){if(e.__observerCallbacks__){if(!t)return e.__observerCallbacks__.splice(0,e.__observerCallbacks__.length),void e.__observers__.splice(0,e.__observers__.length);e.__observerCallbacks__.forEach(function(r,n){t===r&&(e.__observerCallbacks__.splice(n,1),delete e.__observers__[n].callback,e.__observers__.splice(n,1))})}},Array.observe=function(e,t,r,n,o,i){if(!(e instanceof Array||Array.isArray(e)))throw new TypeError("First argument to Array.observer is not an Array");r=r||["add","update","delete","splice"];var u=new Proxy(e,{get:function(t,n){return"unobserve"===n?function(e){return e?Object.unobserve(t,e):t.unobserve()}:"splice"===n?function(n,o){if("number"!=typeof n||"number"!=typeof o)throw new TypeError("First two arguments to Array splice are not number, number");var i=this.slice(n,n+o),u=arguments.length>1?arguments.length-2:0,s={object:e,type:"splice",index:n,removed:i,addedCount:u};if(t.splice.apply(t,arguments),r.indexOf("splice")>=0){var n=0===c.__observer__.changeset.length,a=c.__observer__.deliver();c.__observer__.changeset.push(s),n&&a(!1,"number"==typeof a.delay?a.delay:10)}}:"push"===n?function(e){return this.splice(this.length,0,e)}:"pop"===n?function(){return this.splice(this.length-1,1)}:"unshift"===n?function(e){return this.splice(0,0,e)}:"shift"===n?function(){return this.splice(0,1)}:t[n]}}),c=Object.observe(u,function(e){var n=e.filter(function(e){return"length"!==e.name&&"add"!==e.name&&(!r||r.indexOf(e.type)>=0)});n.length>0&&t(n)},r,n,o,i);return c},Array.unobserve=function(e,t){return e.unobserve(t)}),Object.deepObserve=function(e,t,r){function reobserve(e,r){Object.keys(e).forEach(function(o){if(("object"===n(e[o])||"array"===n(e[o]))&&!e[o].hasOwnProperty("__observers__")){var i=r.slice(0);i.push(o),e[o]=Object.deepObserve(e[o],t,i)}})}r=r||[];var n=function(e){return{}.toString.call(e).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()};return reobserve(e,r),Object.observe(e,function(e){function recurse(e,t,r,o,i){if(o instanceof Object){Object.keys(o).forEach(function(u){if(!r||r[u]!==o[u]){var c=r&&void 0!==r[u]?r[u]:void 0,s=void 0===c?"add":"update",a=i+"."+u;n.push({name:e,object:t,type:s,oldValue:c,newValue:o[u],keypath:a}),recurse(e,t,c,o[u],a)}})}else if(r instanceof Object){var u=Object.keys(r);u.forEach(function(u){var c=null===o?"update":"delete",s=i+"."+u;n.push({name:e,object:t,type:c,oldValue:r[u],newValue:o,keypath:s}),recurse(e,t,r[u],void 0,s)})}}var n=[];e.forEach(function(e){var t=(r.length>0?r.join(".")+".":"")+e.name;"update"!==e.type&&"add"!==e.type||reobserve(e.object,r),n.push({name:e.name,object:e.object,type:e.type,oldValue:e.oldValue,newValue:e.object[e.name],keypath:t}),recurse(e.name,e.object,e.oldValue,e.object[e.name],t)}),t(n)})}}()},12:function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},14:function(e,t,r){var n=r(17);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},15:function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},17:function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},182:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WatchingYou=void 0;var n=r(183),o=function(e){return e&&e.__esModule?e:{default:e}}(n);t.WatchingYou=o.default},183:function(e,t,r){"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=r(5),o=_interopRequireDefault(n),i=r(9),u=_interopRequireDefault(i);r(117);var c=function(){function WatchingYou(){(0,o.default)(this,WatchingYou),this._watching={},this._observers=[]}return(0,u.default)(WatchingYou,[{key:"watch",value:function(e,t){var r=this,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return this._watching[e]=n?Object.deepObserve(t,function(t){t.every(function(t){r._fireEvent(e,t)})}):Object.observe(t,function(t){t.every(function(t){r._fireEvent(e,t)})}),this._watching[e]}},{key:"observe",value:function(e,t){this._observers.push({key:e,callback:t})}},{key:"_fireEvent",value:function(e,t){this._observers.filter(function(t){return t.key===e}).forEach(function(e){e.callback(t)})}}]),WatchingYou}();t.default=c,e.exports=t.default},19:function(e,t,r){var n=r(8),o=r(1).document,i=n(o)&&n(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},20:function(e,t,r){var n=r(8);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can\'t convert object to primitive value")}},3:function(e,t,r){e.exports=!r(12)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},34:function(e,t,r){e.exports=!r(3)&&!r(12)(function(){return 7!=Object.defineProperty(r(19)("div"),"a",{get:function(){return 7}}).a})},4:function(e,t,r){var n=r(1),o=r(0),i=r(14),u=r(10),c=function(e,t,r){var s,a,f,l=e&c.F,p=e&c.G,_=e&c.S,b=e&c.P,v=e&c.B,d=e&c.W,h=p?o:o[t]||(o[t]={}),y=h.prototype,g=p?n:_?n[t]:(n[t]||{}).prototype;p&&(r=t);for(s in r)(a=!l&&g&&void 0!==g[s])&&s in h||(f=a?g[s]:r[s],h[s]=p&&"function"!=typeof g[s]?r[s]:v&&a?i(f,n):d&&g[s]==f?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t.prototype=e.prototype,t}(f):b&&"function"==typeof f?i(Function.call,f):f,b&&((h.virtual||(h.virtual={}))[s]=f,e&c.R&&y&&!y[s]&&u(y,s,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,e.exports=c},43:function(e,t,r){e.exports={default:r(44),__esModule:!0}},44:function(e,t,r){r(45);var n=r(0).Object;e.exports=function(e,t,r){return n.defineProperty(e,t,r)}},45:function(e,t,r){var n=r(4);n(n.S+n.F*!r(3),"Object",{defineProperty:r(6).f})},5:function(e,t,r){"use strict";t.__esModule=!0,t.default=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},6:function(e,t,r){var n=r(7),o=r(34),i=r(20),u=Object.defineProperty;t.f=r(3)?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return u(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},7:function(e,t,r){var n=r(8);e.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},8:function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},9:function(e,t,r){"use strict";t.__esModule=!0;var n=r(43),o=function(e){return e&&e.__esModule?e:{default:e}}(n);t.default=function(){function defineProperties(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,o.default)(e,n.key,n)}}return function(e,t,r){return t&&defineProperties(e.prototype,t),r&&defineProperties(e,r),e}}()}})});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvVXRpbHMuanM/MDY0YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2ZXJzaW9uOiAwLjcuMlxuLy8gZGF0ZTogVGh1IE5vdiAxNiAyMDE3IDEyOjM1OjAxIEdNVCswMDAwIChXRVQpXG4vLyBsaWNlbmNlOiBcbi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuXG4hZnVuY3Rpb24oZSx0KXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcIlV0aWxzXCIsW10sdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5VdGlscz10KCk6KGVbXCJcIl09ZVtcIlwiXXx8e30sZVtcIlwiXS5VdGlscz10KCkpfSh0aGlzLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18ocil7aWYodFtyXSlyZXR1cm4gdFtyXS5leHBvcnRzO3ZhciBuPXRbcl09e2k6cixsOiExLGV4cG9ydHM6e319O3JldHVybiBlW3JdLmNhbGwobi5leHBvcnRzLG4sbi5leHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pLG4ubD0hMCxuLmV4cG9ydHN9dmFyIHQ9e307cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ubT1lLF9fd2VicGFja19yZXF1aXJlX18uYz10LF9fd2VicGFja19yZXF1aXJlX18uZD1mdW5jdGlvbihlLHQscil7X193ZWJwYWNrX3JlcXVpcmVfXy5vKGUsdCl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse2NvbmZpZ3VyYWJsZTohMSxlbnVtZXJhYmxlOiEwLGdldDpyfSl9LF9fd2VicGFja19yZXF1aXJlX18ubj1mdW5jdGlvbihlKXt2YXIgdD1lJiZlLl9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiBlfTtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5kKHQsXCJhXCIsdCksdH0sX193ZWJwYWNrX3JlcXVpcmVfXy5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxfX3dlYnBhY2tfcmVxdWlyZV9fLnA9XCJcIixfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucz0xODIpfSh7MDpmdW5jdGlvbihlLHQpe3ZhciByPWUuZXhwb3J0cz17dmVyc2lvbjpcIjIuNS4xXCJ9O1wibnVtYmVyXCI9PXR5cGVvZiBfX2UmJihfX2U9cil9LDE6ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLmV4cG9ydHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XCJudW1iZXJcIj09dHlwZW9mIF9fZyYmKF9fZz1yKX0sMTA6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoNiksbz1yKDE1KTtlLmV4cG9ydHM9cigzKT9mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZihlLHQsbygxLHIpKX06ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlW3RdPXIsZX19LDExNzpmdW5jdGlvbihlLHQpeyFmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIE9ic2VydmVyKGUsdCxyLG4sbyxpKXtmdW5jdGlvbiBkZWxpdmVyKGUsbil7aWYoZGVsaXZlci5kZWxheT1uLCFkZWxpdmVyLnBhdXNlJiZjLmNoYW5nZXNldC5sZW5ndGg+MCl7aWYoIWUpe3ZhciBvPWMuY2hhbmdlc2V0LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hcnx8ci5pbmRleE9mKGUudHlwZSk+PTB9KTtvLmxlbmd0aD4wJiZ0KG8pfWMuY2hhbmdlc2V0PVtdfX12YXIgdSxjPXRoaXM7cmV0dXJuIGRlbGl2ZXIucGF1c2U9byxkZWxpdmVyLmRlbGF5PWksYy5nZXQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cIl9fb2JzZXJ2ZXJfX1wiPT09dD9jOlwidW5vYnNlcnZlXCI9PT10P2Z1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC51bm9ic2VydmUoZSksZX06XCJkZWxpdmVyXCI9PT10P2RlbGl2ZXI6ZVt0XX0sYy50YXJnZXQ9ZSxjLmNoYW5nZXNldD1bXSxjLnRhcmdldC5fX29ic2VydmVyQ2FsbGJhY2tzX198fChPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fb2JzZXJ2ZXJDYWxsYmFja3NfX1wiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMSx2YWx1ZTpbXX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19vYnNlcnZlcnNfX1wiLHtlbnVtZXJhYmxlOiExLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMSx2YWx1ZTpbXX0pKSxjLnRhcmdldC5fX29ic2VydmVyQ2FsbGJhY2tzX18ucHVzaCh0KSxjLnRhcmdldC5fX29ic2VydmVyc19fLnB1c2godGhpcyksdT1uZXcgUHJveHkoZSxjKSxkZWxpdmVyKCExLGkpLHV9T2JqZWN0Lm9ic2VydmV8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIFByb3h5fHwoT2JzZXJ2ZXIucHJvdG90eXBlLmRlbGl2ZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXQobnVsbCxcImRlbGl2ZXJcIil9LE9ic2VydmVyLnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWVbdF0sbz12b2lkIDA9PT1uP1wiYWRkXCI6XCJ1cGRhdGVcIjtpZihlW3RdPXIsZS5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAmJighdGhpcy5hY2NlcHRsaXN0fHx0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZihvKT49MCkpe3ZhciBpPXtvYmplY3Q6ZSxuYW1lOnQsdHlwZTpvfSx1PTA9PT10aGlzLmNoYW5nZXNldC5sZW5ndGgsYz10aGlzLmRlbGl2ZXIoKTtcInVwZGF0ZVwiPT09byYmKGkub2xkVmFsdWU9biksdGhpcy5jaGFuZ2VzZXQucHVzaChpKSx1JiZjKCExLFwibnVtYmVyXCI9PXR5cGVvZiBjLmRlbGF5P2MuZGVsYXk6MTApfXJldHVybiEwfSxPYnNlcnZlci5wcm90b3R5cGUuZGVsZXRlUHJvcGVydHk9ZnVuY3Rpb24oZSx0KXt2YXIgcj1lW3RdO2lmKGRlbGV0ZSBlW3RdLGUuX19vYnNlcnZlcnNfXy5pbmRleE9mKHRoaXMpPj0wJiYhdGhpcy5hY2NlcHRsaXN0fHx0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZihcImRlbGV0ZVwiKT49MCl7dmFyIG49e29iamVjdDplLG5hbWU6dCx0eXBlOlwiZGVsZXRlXCIsb2xkVmFsdWU6cn0sbz0wPT09dGhpcy5jaGFuZ2VzZXQubGVuZ3RoLGk9dGhpcy5kZWxpdmVyKCk7dGhpcy5jaGFuZ2VzZXQucHVzaChuKSxvJiZpKCExLFwibnVtYmVyXCI9PXR5cGVvZiBpLmRlbGF5P2kuZGVsYXk6MTApfXJldHVybiEwfSxPYnNlcnZlci5wcm90b3R5cGUuZGVmaW5lUHJvcGVydHk9ZnVuY3Rpb24oZSx0LHIpe2lmKE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsciksZS5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAmJiF0aGlzLmFjY2VwdGxpc3R8fHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKFwicmVjb25maWd1cmVcIik+PTApe3ZhciBuPXtvYmplY3Q6ZSxuYW1lOnQsdHlwZTpcInJlY29uZmlndXJlXCJ9LG89MD09PXRoaXMuY2hhbmdlc2V0Lmxlbmd0aCxpPXRoaXMuZGVsaXZlcigpO3RoaXMuY2hhbmdlc2V0LnB1c2gobiksbyYmaSghMSxcIm51bWJlclwiPT10eXBlb2YgaS5kZWxheT9pLmRlbGF5OjEwKX1yZXR1cm4hMH0sT2JzZXJ2ZXIucHJvdG90eXBlLnNldFByb3RvdHlwZU9mPWZ1bmN0aW9uKGUsdCl7dmFyIHI9T2JqZWN0LmdldFByb3RvdHlwZU9mKGUpO2lmKE9iamVjdC5zZXRQcm90b3R5cGVPZihlLHQpLGUuX19vYnNlcnZlcnNfXy5pbmRleE9mKHRoaXMpPj0wJiYhdGhpcy5hY2NlcHRsaXN0fHx0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZihcInNldFByb3RvdHlwZVwiKT49MCl7dmFyIG49e29iamVjdDplLG5hbWU6XCJfX3Byb3RvX19cIix0eXBlOlwic2V0UHJvdG90eXBlXCIsb2xkVmFsdWU6cn0sbz0wPT09dGhpcy5jaGFuZ2VzZXQubGVuZ3RoLGk9dGhpcy5kZWxpdmVyKCk7dGhpcy5jaGFuZ2VzZXQucHVzaChuKSxvJiZpKCExLFwibnVtYmVyXCI9PXR5cGVvZiBpLmRlbGF5P2kuZGVsYXk6MTApfXJldHVybiEwfSxPYnNlcnZlci5wcm90b3R5cGUucHJldmVudEV4dGVuc2lvbnM9ZnVuY3Rpb24oZSl7aWYoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKGUpLGUuX19vYnNlcnZlcnNfXy5pbmRleE9mKHRoaXMpPj0wJiYhdGhpcy5hY2NlcHRsaXN0fHx0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZihcInByZXZlbnRFeHRlbnNpb25zXCIpPj0wKXt2YXIgdD17b2JqZWN0OmUsdHlwZTpcInByZXZlbnRFeHRlbnNpb25zXCJ9LHI9MD09PXRoaXMuY2hhbmdlc2V0Lmxlbmd0aCxuPXRoaXMuZGVsaXZlcigpO3RoaXMuY2hhbmdlc2V0LnB1c2godCksciYmbighMSxcIm51bWJlclwiPT10eXBlb2Ygbi5kZWxheT9uLmRlbGF5OjEwKX1yZXR1cm4hMH0sT2JqZWN0Lm9ic2VydmU9ZnVuY3Rpb24oZSx0LHIsbixvLGkpe3JldHVybiBuZXcgT2JzZXJ2ZXIoZSx0LHIsbixvLGkpfSxPYmplY3QudW5vYnNlcnZlPWZ1bmN0aW9uKGUsdCl7aWYoZS5fX29ic2VydmVyQ2FsbGJhY2tzX18pe2lmKCF0KXJldHVybiBlLl9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5zcGxpY2UoMCxlLl9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5sZW5ndGgpLHZvaWQgZS5fX29ic2VydmVyc19fLnNwbGljZSgwLGUuX19vYnNlcnZlcnNfXy5sZW5ndGgpO2UuX19vYnNlcnZlckNhbGxiYWNrc19fLmZvckVhY2goZnVuY3Rpb24ocixuKXt0PT09ciYmKGUuX19vYnNlcnZlckNhbGxiYWNrc19fLnNwbGljZShuLDEpLGRlbGV0ZSBlLl9fb2JzZXJ2ZXJzX19bbl0uY2FsbGJhY2ssZS5fX29ic2VydmVyc19fLnNwbGljZShuLDEpKX0pfX0sQXJyYXkub2JzZXJ2ZT1mdW5jdGlvbihlLHQscixuLG8saSl7aWYoIShlIGluc3RhbmNlb2YgQXJyYXl8fEFycmF5LmlzQXJyYXkoZSkpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJGaXJzdCBhcmd1bWVudCB0byBBcnJheS5vYnNlcnZlciBpcyBub3QgYW4gQXJyYXlcIik7cj1yfHxbXCJhZGRcIixcInVwZGF0ZVwiLFwiZGVsZXRlXCIsXCJzcGxpY2VcIl07dmFyIHU9bmV3IFByb3h5KGUse2dldDpmdW5jdGlvbih0LG4pe3JldHVyblwidW5vYnNlcnZlXCI9PT1uP2Z1bmN0aW9uKGUpe3JldHVybiBlP09iamVjdC51bm9ic2VydmUodCxlKTp0LnVub2JzZXJ2ZSgpfTpcInNwbGljZVwiPT09bj9mdW5jdGlvbihuLG8pe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBufHxcIm51bWJlclwiIT10eXBlb2Ygbyl0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmlyc3QgdHdvIGFyZ3VtZW50cyB0byBBcnJheSBzcGxpY2UgYXJlIG5vdCBudW1iZXIsIG51bWJlclwiKTt2YXIgaT10aGlzLnNsaWNlKG4sbitvKSx1PWFyZ3VtZW50cy5sZW5ndGg+MT9hcmd1bWVudHMubGVuZ3RoLTI6MCxzPXtvYmplY3Q6ZSx0eXBlOlwic3BsaWNlXCIsaW5kZXg6bixyZW1vdmVkOmksYWRkZWRDb3VudDp1fTtpZih0LnNwbGljZS5hcHBseSh0LGFyZ3VtZW50cyksci5pbmRleE9mKFwic3BsaWNlXCIpPj0wKXt2YXIgbj0wPT09Yy5fX29ic2VydmVyX18uY2hhbmdlc2V0Lmxlbmd0aCxhPWMuX19vYnNlcnZlcl9fLmRlbGl2ZXIoKTtjLl9fb2JzZXJ2ZXJfXy5jaGFuZ2VzZXQucHVzaChzKSxuJiZhKCExLFwibnVtYmVyXCI9PXR5cGVvZiBhLmRlbGF5P2EuZGVsYXk6MTApfX06XCJwdXNoXCI9PT1uP2Z1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNwbGljZSh0aGlzLmxlbmd0aCwwLGUpfTpcInBvcFwiPT09bj9mdW5jdGlvbigpe3JldHVybiB0aGlzLnNwbGljZSh0aGlzLmxlbmd0aC0xLDEpfTpcInVuc2hpZnRcIj09PW4/ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuc3BsaWNlKDAsMCxlKX06XCJzaGlmdFwiPT09bj9mdW5jdGlvbigpe3JldHVybiB0aGlzLnNwbGljZSgwLDEpfTp0W25dfX0pLGM9T2JqZWN0Lm9ic2VydmUodSxmdW5jdGlvbihlKXt2YXIgbj1lLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm5cImxlbmd0aFwiIT09ZS5uYW1lJiZcImFkZFwiIT09ZS5uYW1lJiYoIXJ8fHIuaW5kZXhPZihlLnR5cGUpPj0wKX0pO24ubGVuZ3RoPjAmJnQobil9LHIsbixvLGkpO3JldHVybiBjfSxBcnJheS51bm9ic2VydmU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS51bm9ic2VydmUodCl9KSxPYmplY3QuZGVlcE9ic2VydmU9ZnVuY3Rpb24oZSx0LHIpe2Z1bmN0aW9uIHJlb2JzZXJ2ZShlLHIpe09iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24obyl7aWYoKFwib2JqZWN0XCI9PT1uKGVbb10pfHxcImFycmF5XCI9PT1uKGVbb10pKSYmIWVbb10uaGFzT3duUHJvcGVydHkoXCJfX29ic2VydmVyc19fXCIpKXt2YXIgaT1yLnNsaWNlKDApO2kucHVzaChvKSxlW29dPU9iamVjdC5kZWVwT2JzZXJ2ZShlW29dLHQsaSl9fSl9cj1yfHxbXTt2YXIgbj1mdW5jdGlvbihlKXtyZXR1cm57fS50b1N0cmluZy5jYWxsKGUpLm1hdGNoKC9cXHMoW2EtekEtWl0rKS8pWzFdLnRvTG93ZXJDYXNlKCl9O3JldHVybiByZW9ic2VydmUoZSxyKSxPYmplY3Qub2JzZXJ2ZShlLGZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHJlY3Vyc2UoZSx0LHIsbyxpKXtpZihvIGluc3RhbmNlb2YgT2JqZWN0KXtPYmplY3Qua2V5cyhvKS5mb3JFYWNoKGZ1bmN0aW9uKHUpe2lmKCFyfHxyW3VdIT09b1t1XSl7dmFyIGM9ciYmdm9pZCAwIT09clt1XT9yW3VdOnZvaWQgMCxzPXZvaWQgMD09PWM/XCJhZGRcIjpcInVwZGF0ZVwiLGE9aStcIi5cIit1O24ucHVzaCh7bmFtZTplLG9iamVjdDp0LHR5cGU6cyxvbGRWYWx1ZTpjLG5ld1ZhbHVlOm9bdV0sa2V5cGF0aDphfSkscmVjdXJzZShlLHQsYyxvW3VdLGEpfX0pfWVsc2UgaWYociBpbnN0YW5jZW9mIE9iamVjdCl7dmFyIHU9T2JqZWN0LmtleXMocik7dS5mb3JFYWNoKGZ1bmN0aW9uKHUpe3ZhciBjPW51bGw9PT1vP1widXBkYXRlXCI6XCJkZWxldGVcIixzPWkrXCIuXCIrdTtuLnB1c2goe25hbWU6ZSxvYmplY3Q6dCx0eXBlOmMsb2xkVmFsdWU6clt1XSxuZXdWYWx1ZTpvLGtleXBhdGg6c30pLHJlY3Vyc2UoZSx0LHJbdV0sdm9pZCAwLHMpfSl9fXZhciBuPVtdO2UuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD0oci5sZW5ndGg+MD9yLmpvaW4oXCIuXCIpK1wiLlwiOlwiXCIpK2UubmFtZTtcInVwZGF0ZVwiIT09ZS50eXBlJiZcImFkZFwiIT09ZS50eXBlfHxyZW9ic2VydmUoZS5vYmplY3Qsciksbi5wdXNoKHtuYW1lOmUubmFtZSxvYmplY3Q6ZS5vYmplY3QsdHlwZTplLnR5cGUsb2xkVmFsdWU6ZS5vbGRWYWx1ZSxuZXdWYWx1ZTplLm9iamVjdFtlLm5hbWVdLGtleXBhdGg6dH0pLHJlY3Vyc2UoZS5uYW1lLGUub2JqZWN0LGUub2xkVmFsdWUsZS5vYmplY3RbZS5uYW1lXSx0KX0pLHQobil9KX19KCl9LDEyOmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4hIWUoKX1jYXRjaChlKXtyZXR1cm4hMH19fSwxNDpmdW5jdGlvbihlLHQscil7dmFyIG49cigxNyk7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHZvaWQgMD09PXQpcmV0dXJuIGU7c3dpdGNoKHIpe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIGUuY2FsbCh0LHIpfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHIsbil7cmV0dXJuIGUuY2FsbCh0LHIsbil9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24ocixuLG8pe3JldHVybiBlLmNhbGwodCxyLG4sbyl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHQsYXJndW1lbnRzKX19fSwxNTpmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybntlbnVtZXJhYmxlOiEoMSZlKSxjb25maWd1cmFibGU6ISgyJmUpLHdyaXRhYmxlOiEoNCZlKSx2YWx1ZTp0fX19LDE3OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgZnVuY3Rpb24hXCIpO3JldHVybiBlfX0sMTgyOmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSx0LldhdGNoaW5nWW91PXZvaWQgMDt2YXIgbj1yKDE4Myksbz1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KG4pO3QuV2F0Y2hpbmdZb3U9by5kZWZhdWx0fSwxODM6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPXIoNSksbz1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KG4pLGk9cig5KSx1PV9pbnRlcm9wUmVxdWlyZURlZmF1bHQoaSk7cigxMTcpO3ZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gV2F0Y2hpbmdZb3UoKXsoMCxvLmRlZmF1bHQpKHRoaXMsV2F0Y2hpbmdZb3UpLHRoaXMuX3dhdGNoaW5nPXt9LHRoaXMuX29ic2VydmVycz1bXX1yZXR1cm4oMCx1LmRlZmF1bHQpKFdhdGNoaW5nWW91LFt7a2V5Olwid2F0Y2hcIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciByPXRoaXMsbj1hcmd1bWVudHMubGVuZ3RoPjImJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdO3JldHVybiB0aGlzLl93YXRjaGluZ1tlXT1uP09iamVjdC5kZWVwT2JzZXJ2ZSh0LGZ1bmN0aW9uKHQpe3QuZXZlcnkoZnVuY3Rpb24odCl7ci5fZmlyZUV2ZW50KGUsdCl9KX0pOk9iamVjdC5vYnNlcnZlKHQsZnVuY3Rpb24odCl7dC5ldmVyeShmdW5jdGlvbih0KXtyLl9maXJlRXZlbnQoZSx0KX0pfSksdGhpcy5fd2F0Y2hpbmdbZV19fSx7a2V5Olwib2JzZXJ2ZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dGhpcy5fb2JzZXJ2ZXJzLnB1c2goe2tleTplLGNhbGxiYWNrOnR9KX19LHtrZXk6XCJfZmlyZUV2ZW50XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt0aGlzLl9vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0LmtleT09PWV9KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuY2FsbGJhY2sodCl9KX19XSksV2F0Y2hpbmdZb3V9KCk7dC5kZWZhdWx0PWMsZS5leHBvcnRzPXQuZGVmYXVsdH0sMTk6ZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXIoOCksbz1yKDEpLmRvY3VtZW50LGk9bihvKSYmbihvLmNyZWF0ZUVsZW1lbnQpO2UuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaT9vLmNyZWF0ZUVsZW1lbnQoZSk6e319fSwyMDpmdW5jdGlvbihlLHQscil7dmFyIG49cig4KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighbihlKSlyZXR1cm4gZTt2YXIgcixvO2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbztpZihcImZ1bmN0aW9uXCI9PXR5cGVvZihyPWUudmFsdWVPZikmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbztpZighdCYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO3Rocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKX19LDM6ZnVuY3Rpb24oZSx0LHIpe2UuZXhwb3J0cz0hcigxMikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LDM0OmZ1bmN0aW9uKGUsdCxyKXtlLmV4cG9ydHM9IXIoMykmJiFyKDEyKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkocigxOSkoXCJkaXZcIiksXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0sNDpmdW5jdGlvbihlLHQscil7dmFyIG49cigxKSxvPXIoMCksaT1yKDE0KSx1PXIoMTApLGM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBzLGEsZixsPWUmYy5GLHA9ZSZjLkcsXz1lJmMuUyxiPWUmYy5QLHY9ZSZjLkIsZD1lJmMuVyxoPXA/bzpvW3RdfHwob1t0XT17fSkseT1oLnByb3RvdHlwZSxnPXA/bjpfP25bdF06KG5bdF18fHt9KS5wcm90b3R5cGU7cCYmKHI9dCk7Zm9yKHMgaW4gcikoYT0hbCYmZyYmdm9pZCAwIT09Z1tzXSkmJnMgaW4gaHx8KGY9YT9nW3NdOnJbc10saFtzXT1wJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBnW3NdP3Jbc106diYmYT9pKGYsbik6ZCYmZ1tzXT09Zj9mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbih0LHIsbil7aWYodGhpcyBpbnN0YW5jZW9mIGUpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyBlO2Nhc2UgMTpyZXR1cm4gbmV3IGUodCk7Y2FzZSAyOnJldHVybiBuZXcgZSh0LHIpfXJldHVybiBuZXcgZSh0LHIsbil9cmV0dXJuIGUuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gdC5wcm90b3R5cGU9ZS5wcm90b3R5cGUsdH0oZik6YiYmXCJmdW5jdGlvblwiPT10eXBlb2YgZj9pKEZ1bmN0aW9uLmNhbGwsZik6ZixiJiYoKGgudmlydHVhbHx8KGgudmlydHVhbD17fSkpW3NdPWYsZSZjLlImJnkmJiF5W3NdJiZ1KHkscyxmKSkpfTtjLkY9MSxjLkc9MixjLlM9NCxjLlA9OCxjLkI9MTYsYy5XPTMyLGMuVT02NCxjLlI9MTI4LGUuZXhwb3J0cz1jfSw0MzpmdW5jdGlvbihlLHQscil7ZS5leHBvcnRzPXtkZWZhdWx0OnIoNDQpLF9fZXNNb2R1bGU6ITB9fSw0NDpmdW5jdGlvbihlLHQscil7cig0NSk7dmFyIG49cigwKS5PYmplY3Q7ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbi5kZWZpbmVQcm9wZXJ0eShlLHQscil9fSw0NTpmdW5jdGlvbihlLHQscil7dmFyIG49cig0KTtuKG4uUytuLkYqIXIoMyksXCJPYmplY3RcIix7ZGVmaW5lUHJvcGVydHk6cig2KS5mfSl9LDU6ZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3QuX19lc01vZHVsZT0hMCx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfX0sNjpmdW5jdGlvbihlLHQscil7dmFyIG49cig3KSxvPXIoMzQpLGk9cigyMCksdT1PYmplY3QuZGVmaW5lUHJvcGVydHk7dC5mPXIoMyk/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHQ9aSh0LCEwKSxuKHIpLG8pdHJ5e3JldHVybiB1KGUsdCxyKX1jYXRjaChlKXt9aWYoXCJnZXRcImluIHJ8fFwic2V0XCJpbiByKXRocm93IFR5cGVFcnJvcihcIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIVwiKTtyZXR1cm5cInZhbHVlXCJpbiByJiYoZVt0XT1yLnZhbHVlKSxlfX0sNzpmdW5jdGlvbihlLHQscil7dmFyIG49cig4KTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoIW4oZSkpdGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGFuIG9iamVjdCFcIik7cmV0dXJuIGV9fSw4OmZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlP251bGwhPT1lOlwiZnVuY3Rpb25cIj09dHlwZW9mIGV9fSw5OmZ1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt0Ll9fZXNNb2R1bGU9ITA7dmFyIG49cig0Myksbz1mdW5jdGlvbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19KG4pO3QuZGVmYXVsdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksKDAsby5kZWZhdWx0KShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0JiZkZWZpbmVQcm9wZXJ0aWVzKGUucHJvdG90eXBlLHQpLHImJmRlZmluZVByb3BlcnRpZXMoZSxyKSxlfX0oKX19KX0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDIwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///201\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n/**\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\n* @classdesc Class to combine the authorization decisions that result from rules evaluation.\n*/\nvar AllowOverrides = function () {\n  function AllowOverrides() {\n    (0, _classCallCheck3.default)(this, AllowOverrides);\n  }\n\n  (0, _createClass3.default)(AllowOverrides, [{\n    key: 'combine',\n\n\n    /**\n    * Given an array of individual authorization decisions, prioritizes a positive one.\n    * @param    {boolean[]}   decisions\n    * @returns  {boolean}\n    */\n    value: function combine(decisions) {\n      if (decisions.indexOf(true) !== -1) {\n        return true;\n      } else {\n        if (decisions.indexOf(false) !== -1) {\n          return false;\n        } else {\n          return 'Not Applicable';\n        }\n      }\n    }\n  }]);\n  return AllowOverrides;\n}();\n\nexports.default = AllowOverrides;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvY29tYmluaW5nQWxnb3JpdGhtcy9BbGxvd092ZXJyaWRlcy5qcz80YzQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuLyoqXG4qIEBhdXRob3IgQW5hIENhbGRlaXJhIDxhbmEuY2FsZGVpcmFAdGVjbmljby51bGlzYm9hLnB0PlxuKiBAY2xhc3NkZXNjIENsYXNzIHRvIGNvbWJpbmUgdGhlIGF1dGhvcml6YXRpb24gZGVjaXNpb25zIHRoYXQgcmVzdWx0IGZyb20gcnVsZXMgZXZhbHVhdGlvbi5cbiovXG5jbGFzcyBBbGxvd092ZXJyaWRlcyB7XG5cbiAgLyoqXG4gICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3JpemF0aW9uIGRlY2lzaW9ucywgcHJpb3JpdGl6ZXMgYSBwb3NpdGl2ZSBvbmUuXG4gICogQHBhcmFtICAgIHtib29sZWFuW119ICAgZGVjaXNpb25zXG4gICogQHJldHVybnMgIHtib29sZWFufVxuICAqL1xuICBjb21iaW5lKGRlY2lzaW9ucykge1xuICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZih0cnVlKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGVjaXNpb25zLmluZGV4T2YoZmFsc2UpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBbGxvd092ZXJyaWRlcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcG9saWN5L2NvbWJpbmluZ0FsZ29yaXRobXMvQWxsb3dPdmVycmlkZXMuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7QUFJQTs7Ozs7Ozs7O0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///202\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n/**\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\n* @classdesc Class to combine the authorization decisions that result from rules evaluation.\n*/\nvar BlockOverrides = function () {\n  function BlockOverrides() {\n    (0, _classCallCheck3.default)(this, BlockOverrides);\n  }\n\n  (0, _createClass3.default)(BlockOverrides, [{\n    key: 'combine',\n\n\n    /**\n    * Given an array of individual authorisation decisions, prioritises a negative one.\n    * @param    {boolean[]}   decisions\n    * @returns  {boolean}\n    */\n    value: function combine(decisions) {\n      if (decisions.indexOf(false) !== -1) {\n        return false;\n      } else {\n        if (decisions.indexOf(true) !== -1) {\n          return true;\n        } else {\n          return 'Not Applicable';\n        }\n      }\n    }\n  }]);\n  return BlockOverrides;\n}();\n\nexports.default = BlockOverrides;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvY29tYmluaW5nQWxnb3JpdGhtcy9CbG9ja092ZXJyaWRlcy5qcz82MWM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuLyoqXG4qIEBhdXRob3IgQW5hIENhbGRlaXJhIDxhbmEuY2FsZGVpcmFAdGVjbmljby51bGlzYm9hLnB0PlxuKiBAY2xhc3NkZXNjIENsYXNzIHRvIGNvbWJpbmUgdGhlIGF1dGhvcml6YXRpb24gZGVjaXNpb25zIHRoYXQgcmVzdWx0IGZyb20gcnVsZXMgZXZhbHVhdGlvbi5cbiovXG5jbGFzcyBCbG9ja092ZXJyaWRlcyB7XG5cbiAgLyoqXG4gICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3Jpc2F0aW9uIGRlY2lzaW9ucywgcHJpb3JpdGlzZXMgYSBuZWdhdGl2ZSBvbmUuXG4gICogQHBhcmFtICAgIHtib29sZWFuW119ICAgZGVjaXNpb25zXG4gICogQHJldHVybnMgIHtib29sZWFufVxuICAqL1xuICBjb21iaW5lKGRlY2lzaW9ucykge1xuICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZihmYWxzZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZih0cnVlKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBCbG9ja092ZXJyaWRlcztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcG9saWN5L2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7QUFJQTs7Ozs7Ozs7O0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///203\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n/**\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\n* @classdesc Class to combine the authorization decisions that result from rules evaluation.\n*/\nvar FirstApplicable = function () {\n  function FirstApplicable() {\n    (0, _classCallCheck3.default)(this, FirstApplicable);\n  }\n\n  (0, _createClass3.default)(FirstApplicable, [{\n    key: 'combine',\n\n\n    /**\n    * Given an array of individual authorisation decisions, returns the first one different from 'Not Applicable', either positive or negative.\n    * @param    {boolean[]}     decisions\n    * @returns  {boolean}\n    */\n    value: function combine(decisions) {\n      for (var i in decisions) {\n        if (decisions[i] !== 'Not Applicable') {\n          return decisions[i];\n        }\n      }\n      return 'Not Applicable';\n    }\n  }]);\n  return FirstApplicable;\n}();\n\nexports.default = FirstApplicable;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvY29tYmluaW5nQWxnb3JpdGhtcy9GaXJzdEFwcGxpY2FibGUuanM/MzNkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8qKlxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cbiogQGNsYXNzZGVzYyBDbGFzcyB0byBjb21iaW5lIHRoZSBhdXRob3JpemF0aW9uIGRlY2lzaW9ucyB0aGF0IHJlc3VsdCBmcm9tIHJ1bGVzIGV2YWx1YXRpb24uXG4qL1xuY2xhc3MgRmlyc3RBcHBsaWNhYmxlIHtcblxuICAvKipcbiAgKiBHaXZlbiBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIGF1dGhvcmlzYXRpb24gZGVjaXNpb25zLCByZXR1cm5zIHRoZSBmaXJzdCBvbmUgZGlmZmVyZW50IGZyb20gJ05vdCBBcHBsaWNhYmxlJywgZWl0aGVyIHBvc2l0aXZlIG9yIG5lZ2F0aXZlLlxuICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgICAgZGVjaXNpb25zXG4gICogQHJldHVybnMgIHtib29sZWFufVxuICAqL1xuICBjb21iaW5lKGRlY2lzaW9ucykge1xuICAgIGZvciAobGV0IGkgaW4gZGVjaXNpb25zKSB7XG4gICAgICBpZiAoZGVjaXNpb25zW2ldICE9PSAnTm90IEFwcGxpY2FibGUnKSB7XG4gICAgICAgIHJldHVybiBkZWNpc2lvbnNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlyc3RBcHBsaWNhYmxlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9wb2xpY3kvY29tYmluaW5nQWxnb3JpdGhtcy9GaXJzdEFwcGxpY2FibGUuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7QUFJQTs7Ozs7Ozs7O0FBRUE7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///204\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(496), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvdmFsdWVzLmpzPzgxMTEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC92YWx1ZXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L3ZhbHVlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///205\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('SynSubscription'); // Log System\n\nvar Subscription = function () {\n  function Subscription(bus, owner, url, childrens, isReporter) {\n    (0, _classCallCheck3.default)(this, Subscription);\n\n    var _this = this;\n    var childBaseURL = url + '/children/';\n    var changeURL = url + '/changes';\n\n    //process delete message\n    _this._deleteListener = bus.addListener(changeURL, function (msg) {\n      if (msg.type === 'delete') {\n        log.log('Subscription-DELETE: ', msg);\n\n        //FLOW-OUT: message sent to all subscribers\n        var deleteMessageToHyperty = {\n          type: 'delete', from: msg.from, to: owner,\n          body: { identity: msg.body.identity, resource: url }\n        };\n\n        //send delete to hyperty\n        bus.postMessage(deleteMessageToHyperty, function (reply) {\n          log.log('Subscription-DELETE-REPLY: ', reply);\n          if (reply.body.code === 200) {\n            _this._releaseListeners();\n          }\n        });\n      }\n    });\n\n    //add change publish address or forward\n    if (isReporter) {\n      _this._changeListener = bus.addPublish(changeURL);\n    } else {\n      _this._changeListener = bus.addForward(changeURL, owner);\n    }\n\n    _this._childrenListeners = [];\n    log.log('[Subscription] - childID', childrens);\n    childrens.forEach(function (child) {\n      var childId = childBaseURL + child;\n\n      log.log('[Subscription] - childID', childBaseURL, childId, child);\n\n      //add children publish address\n      var childrenForward = bus.addPublish(childId);\n      _this._childrenListeners.push(childrenForward);\n\n      //add self forward if an observer\n      if (!isReporter) {\n        var selfForward = bus.addForward(childId, owner);\n        _this._childrenListeners.push(selfForward);\n      }\n    });\n  }\n\n  (0, _createClass3.default)(Subscription, [{\n    key: '_releaseListeners',\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._deleteListener.remove();\n\n      _this._changeListener.remove();\n\n      _this._childrenListeners.forEach(function (forward) {\n        forward.remove();\n      });\n    }\n  }]);\n  return Subscription;\n}();\n\nexports.default = Subscription;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9zeW5jaGVyL1N1YnNjcmlwdGlvbi5qcz8yZTg1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExvZyBTeXN0ZW1cbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignU3luU3Vic2NyaXB0aW9uJyk7XG5cbmNsYXNzIFN1YnNjcmlwdGlvbiB7XG5cbiAgY29uc3RydWN0b3IoYnVzLCBvd25lciwgdXJsLCBjaGlsZHJlbnMsIGlzUmVwb3J0ZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBjaGlsZEJhc2VVUkwgPSB1cmwgKyAnL2NoaWxkcmVuLyc7XG4gICAgbGV0IGNoYW5nZVVSTCA9IHVybCArICcvY2hhbmdlcyc7XG5cbiAgICAvL3Byb2Nlc3MgZGVsZXRlIG1lc3NhZ2VcbiAgICBfdGhpcy5fZGVsZXRlTGlzdGVuZXIgPSBidXMuYWRkTGlzdGVuZXIoY2hhbmdlVVJMLCAobXNnKSA9PiB7XG4gICAgICBpZiAobXNnLnR5cGUgPT09ICdkZWxldGUnKSB7XG4gICAgICAgIGxvZy5sb2coJ1N1YnNjcmlwdGlvbi1ERUxFVEU6ICcsIG1zZyk7XG5cbiAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIGFsbCBzdWJzY3JpYmVyc1xuICAgICAgICBsZXQgZGVsZXRlTWVzc2FnZVRvSHlwZXJ0eSA9IHtcbiAgICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogbXNnLmZyb20sIHRvOiBvd25lcixcbiAgICAgICAgICBib2R5OiB7IGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSwgcmVzb3VyY2U6IHVybCB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy9zZW5kIGRlbGV0ZSB0byBoeXBlcnR5XG4gICAgICAgIGJ1cy5wb3N0TWVzc2FnZShkZWxldGVNZXNzYWdlVG9IeXBlcnR5LCAocmVwbHkpID0+IHtcbiAgICAgICAgICBsb2cubG9nKCdTdWJzY3JpcHRpb24tREVMRVRFLVJFUExZOiAnLCByZXBseSk7XG4gICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvL2FkZCBjaGFuZ2UgcHVibGlzaCBhZGRyZXNzIG9yIGZvcndhcmRcbiAgICBpZiAoaXNSZXBvcnRlcikge1xuICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZFB1Ymxpc2goY2hhbmdlVVJMKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZEZvcndhcmQoY2hhbmdlVVJMLCBvd25lcik7XG4gICAgfVxuXG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107XG4gICAgbG9nLmxvZygnW1N1YnNjcmlwdGlvbl0gLSBjaGlsZElEJywgY2hpbGRyZW5zKTtcbiAgICBjaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIGxldCBjaGlsZElkID0gY2hpbGRCYXNlVVJMICsgY2hpbGQ7XG5cbiAgICAgIGxvZy5sb2coJ1tTdWJzY3JpcHRpb25dIC0gY2hpbGRJRCcsIGNoaWxkQmFzZVVSTCwgY2hpbGRJZCwgY2hpbGQpO1xuXG4gICAgICAvL2FkZCBjaGlsZHJlbiBwdWJsaXNoIGFkZHJlc3NcbiAgICAgIGxldCBjaGlsZHJlbkZvcndhcmQgPSBidXMuYWRkUHVibGlzaChjaGlsZElkKTtcbiAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGNoaWxkcmVuRm9yd2FyZCk7XG5cbiAgICAgIC8vYWRkIHNlbGYgZm9yd2FyZCBpZiBhbiBvYnNlcnZlclxuICAgICAgaWYgKCFpc1JlcG9ydGVyKSB7XG4gICAgICAgIGxldCBzZWxmRm9yd2FyZCA9IGJ1cy5hZGRGb3J3YXJkKGNoaWxkSWQsIG93bmVyKTtcbiAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goc2VsZkZvcndhcmQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgX3JlbGVhc2VMaXN0ZW5lcnMoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9kZWxldGVMaXN0ZW5lci5yZW1vdmUoKTtcblxuICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lci5yZW1vdmUoKTtcblxuICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5mb3JFYWNoKChmb3J3YXJkKSA9PiB7XG4gICAgICBmb3J3YXJkLnJlbW92ZSgpO1xuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3Vic2NyaXB0aW9uO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9zeW5jaGVyL1N1YnNjcmlwdGlvbi5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBREE7QUFDQTs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///206\n");
    }, function(e, n, t) {
        t(208), e.exports = t(410);
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('/* WEBPACK VAR INJECTION */(function(global) {\n\n__webpack_require__(209);\n\n__webpack_require__(406);\n\n__webpack_require__(407);\n\nif (global._babelPolyfill) {\n  throw new Error("only one instance of babel-polyfill is allowed");\n}\nglobal._babelPolyfill = true;\n\nvar DEFINE_PROPERTY = "defineProperty";\nfunction define(O, key, value) {\n  O[key] || Object[DEFINE_PROPERTY](O, key, {\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\n\ndefine(String.prototype, "padLeft", "".padStart);\ndefine(String.prototype, "padRight", "".padEnd);\n\n"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {\n  [][key] && define(Array, key, Function.call.bind([][key]));\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(144)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL2xpYi9pbmRleC5qcz84ZjU4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///208\n');
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(210);\n__webpack_require__(212);\n__webpack_require__(213);\n__webpack_require__(214);\n__webpack_require__(215);\n__webpack_require__(216);\n__webpack_require__(217);\n__webpack_require__(218);\n__webpack_require__(219);\n__webpack_require__(220);\n__webpack_require__(221);\n__webpack_require__(222);\n__webpack_require__(223);\n__webpack_require__(224);\n__webpack_require__(225);\n__webpack_require__(226);\n__webpack_require__(228);\n__webpack_require__(229);\n__webpack_require__(230);\n__webpack_require__(231);\n__webpack_require__(232);\n__webpack_require__(233);\n__webpack_require__(234);\n__webpack_require__(235);\n__webpack_require__(236);\n__webpack_require__(237);\n__webpack_require__(238);\n__webpack_require__(239);\n__webpack_require__(240);\n__webpack_require__(241);\n__webpack_require__(242);\n__webpack_require__(243);\n__webpack_require__(244);\n__webpack_require__(245);\n__webpack_require__(246);\n__webpack_require__(247);\n__webpack_require__(248);\n__webpack_require__(249);\n__webpack_require__(250);\n__webpack_require__(251);\n__webpack_require__(252);\n__webpack_require__(253);\n__webpack_require__(254);\n__webpack_require__(255);\n__webpack_require__(256);\n__webpack_require__(257);\n__webpack_require__(258);\n__webpack_require__(259);\n__webpack_require__(260);\n__webpack_require__(261);\n__webpack_require__(262);\n__webpack_require__(263);\n__webpack_require__(264);\n__webpack_require__(265);\n__webpack_require__(266);\n__webpack_require__(267);\n__webpack_require__(268);\n__webpack_require__(269);\n__webpack_require__(270);\n__webpack_require__(271);\n__webpack_require__(272);\n__webpack_require__(273);\n__webpack_require__(274);\n__webpack_require__(275);\n__webpack_require__(276);\n__webpack_require__(277);\n__webpack_require__(278);\n__webpack_require__(279);\n__webpack_require__(280);\n__webpack_require__(281);\n__webpack_require__(282);\n__webpack_require__(283);\n__webpack_require__(284);\n__webpack_require__(285);\n__webpack_require__(286);\n__webpack_require__(287);\n__webpack_require__(288);\n__webpack_require__(290);\n__webpack_require__(291);\n__webpack_require__(293);\n__webpack_require__(294);\n__webpack_require__(295);\n__webpack_require__(296);\n__webpack_require__(297);\n__webpack_require__(298);\n__webpack_require__(299);\n__webpack_require__(301);\n__webpack_require__(302);\n__webpack_require__(303);\n__webpack_require__(304);\n__webpack_require__(305);\n__webpack_require__(306);\n__webpack_require__(307);\n__webpack_require__(308);\n__webpack_require__(309);\n__webpack_require__(310);\n__webpack_require__(311);\n__webpack_require__(312);\n__webpack_require__(313);\n__webpack_require__(121);\n__webpack_require__(314);\n__webpack_require__(315);\n__webpack_require__(163);\n__webpack_require__(316);\n__webpack_require__(317);\n__webpack_require__(318);\n__webpack_require__(319);\n__webpack_require__(320);\n__webpack_require__(166);\n__webpack_require__(168);\n__webpack_require__(169);\n__webpack_require__(321);\n__webpack_require__(322);\n__webpack_require__(323);\n__webpack_require__(324);\n__webpack_require__(325);\n__webpack_require__(326);\n__webpack_require__(327);\n__webpack_require__(328);\n__webpack_require__(329);\n__webpack_require__(330);\n__webpack_require__(331);\n__webpack_require__(332);\n__webpack_require__(333);\n__webpack_require__(334);\n__webpack_require__(335);\n__webpack_require__(336);\n__webpack_require__(337);\n__webpack_require__(338);\n__webpack_require__(339);\n__webpack_require__(340);\n__webpack_require__(341);\n__webpack_require__(342);\n__webpack_require__(343);\n__webpack_require__(344);\n__webpack_require__(345);\n__webpack_require__(346);\n__webpack_require__(347);\n__webpack_require__(348);\n__webpack_require__(349);\n__webpack_require__(350);\n__webpack_require__(351);\n__webpack_require__(352);\n__webpack_require__(353);\n__webpack_require__(354);\n__webpack_require__(355);\n__webpack_require__(356);\n__webpack_require__(357);\n__webpack_require__(358);\n__webpack_require__(359);\n__webpack_require__(360);\n__webpack_require__(361);\n__webpack_require__(362);\n__webpack_require__(363);\n__webpack_require__(364);\n__webpack_require__(365);\n__webpack_require__(366);\n__webpack_require__(367);\n__webpack_require__(368);\n__webpack_require__(369);\n__webpack_require__(370);\n__webpack_require__(371);\n__webpack_require__(372);\n__webpack_require__(373);\n__webpack_require__(374);\n__webpack_require__(375);\n__webpack_require__(376);\n__webpack_require__(377);\n__webpack_require__(378);\n__webpack_require__(379);\n__webpack_require__(380);\n__webpack_require__(381);\n__webpack_require__(382);\n__webpack_require__(383);\n__webpack_require__(384);\n__webpack_require__(385);\n__webpack_require__(386);\n__webpack_require__(387);\n__webpack_require__(388);\n__webpack_require__(389);\n__webpack_require__(390);\n__webpack_require__(391);\n__webpack_require__(392);\n__webpack_require__(393);\n__webpack_require__(394);\n__webpack_require__(395);\n__webpack_require__(396);\n__webpack_require__(397);\n__webpack_require__(398);\n__webpack_require__(399);\n__webpack_require__(400);\n__webpack_require__(401);\n__webpack_require__(402);\n__webpack_require__(403);\n__webpack_require__(404);\n__webpack_require__(405);\nmodule.exports = __webpack_require__(30);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvc2hpbS5qcz9lMGNkIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5jbGFtcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgudW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zaWduYml0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL3NoaW0uanNcbi8vIG1vZHVsZSBpZCA9IDIwOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///209\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// ECMAScript 6 symbols shim\nvar global = __webpack_require__(4);\nvar has = __webpack_require__(17);\nvar DESCRIPTORS = __webpack_require__(8);\nvar $export = __webpack_require__(0);\nvar redefine = __webpack_require__(19);\nvar META = __webpack_require__(41).KEY;\nvar $fails = __webpack_require__(5);\nvar shared = __webpack_require__(78);\nvar setToStringTag = __webpack_require__(61);\nvar uid = __webpack_require__(48);\nvar wks = __webpack_require__(7);\nvar wksExt = __webpack_require__(146);\nvar wksDefine = __webpack_require__(101);\nvar enumKeys = __webpack_require__(211);\nvar isArray = __webpack_require__(81);\nvar anObject = __webpack_require__(3);\nvar toIObject = __webpack_require__(23);\nvar toPrimitive = __webpack_require__(31);\nvar createDesc = __webpack_require__(47);\nvar _create = __webpack_require__(52);\nvar gOPNExt = __webpack_require__(149);\nvar $GOPD = __webpack_require__(24);\nvar $DP = __webpack_require__(9);\nvar $keys = __webpack_require__(50);\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  __webpack_require__(53).f = gOPNExt.f = $getOwnPropertyNames;\n  __webpack_require__(71).f = $propertyIsEnumerable;\n  __webpack_require__(80).f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !__webpack_require__(49)) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    replacer = args[1];\n    if (typeof replacer == 'function') $replacer = replacer;\n    if ($replacer || !isArray(replacer)) replacer = function (key, value) {\n      if ($replacer) value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(18)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3ltYm9sLmpzPzAzNDkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIE1FVEEgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZO1xudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XG52YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BEID0gJEdPUEQuZjtcbnZhciBkUCA9ICREUC5mO1xudmFyIGdPUE4gPSBnT1BORXh0LmY7XG52YXIgJFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcbnZhciBpc0VudW0gPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xudmFyIE9QU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XG52YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChpdCwga2V5LCBEKSB7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7IGVudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICB2YXIgbmFtZXMgPSBnT1BOKHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcbiAgdmFyIElTX09QID0gaXQgPT09IE9iamVjdFByb3RvO1xuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmIChoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpIHJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5JykpIHtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFN5bWJvbDogJFN5bWJvbCB9KTtcblxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcblxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcbiAgICBpZiAoIWlzU3ltYm9sKHN5bSkpIHRocm93IFR5cGVFcnJvcihzeW0gKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KSB7XG4gICAgaWYgKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICB2YXIgYXJncyA9IFtpdF07XG4gICAgdmFyIGkgPSAxO1xuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PSAnZnVuY3Rpb24nKSAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICBpZiAoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKCRyZXBsYWNlcikgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDIxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///210\n");
    }, function(module, exports, __webpack_require__) {
        eval("// all enumerable object keys, includes symbols\nvar getKeys = __webpack_require__(50);\nvar gOPS = __webpack_require__(80);\nvar pIE = __webpack_require__(71);\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzPzBiZTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///211\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: __webpack_require__(52) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcz84YmFmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///212\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !__webpack_require__(8), 'Object', { defineProperty: __webpack_require__(9).f });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcz80MzMyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHsgZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkuanNcbi8vIG1vZHVsZSBpZCA9IDIxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///213\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !__webpack_require__(8), 'Object', { defineProperties: __webpack_require__(148) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzPzFlMTkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///214\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = __webpack_require__(23);\nvar $getOwnPropertyDescriptor = __webpack_require__(24).f;\n\n__webpack_require__(34)('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcz8wYmVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1xuLy8gbW9kdWxlIGlkID0gMjE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///215\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = __webpack_require__(14);\nvar $getPrototypeOf = __webpack_require__(25);\n\n__webpack_require__(34)('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanM/NWI4NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///216\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(14);\nvar $keys = __webpack_require__(50);\n\n__webpack_require__(34)('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmtleXMuanM/YjQ5YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///217\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.7 Object.getOwnPropertyNames(O)\n__webpack_require__(34)('getOwnPropertyNames', function () {\n  return __webpack_require__(149).f;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanM/NzgyZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qc1xuLy8gbW9kdWxlIGlkID0gMjE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///218\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.5 Object.freeze(O)\nvar isObject = __webpack_require__(6);\nvar meta = __webpack_require__(41).onFreeze;\n\n__webpack_require__(34)('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qcz81NTM5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24gKCRmcmVlemUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///219\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.17 Object.seal(O)\nvar isObject = __webpack_require__(6);\nvar meta = __webpack_require__(41).onFreeze;\n\n__webpack_require__(34)('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNlYWwuanM/NWJmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qc1xuLy8gbW9kdWxlIGlkID0gMjIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///220\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = __webpack_require__(6);\nvar meta = __webpack_require__(41).onFreeze;\n\n__webpack_require__(34)('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcz82Mzk3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCkge1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDIyMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///221\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.12 Object.isFrozen(O)\nvar isObject = __webpack_require__(6);\n\n__webpack_require__(34)('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcz81YTkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24gKCRpc0Zyb3plbikge1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///222\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.13 Object.isSealed(O)\nvar isObject = __webpack_require__(6);\n\n__webpack_require__(34)('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcz9mYjI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24gKCRpc1NlYWxlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///223\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.11 Object.isExtensible(O)\nvar isObject = __webpack_require__(6);\n\n__webpack_require__(34)('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanM/ODBmYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUuanNcbi8vIG1vZHVsZSBpZCA9IDIyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///224\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.3.1 Object.assign(target, source)\nvar $export = __webpack_require__(0);\n\n$export($export.S + $export.F, 'Object', { assign: __webpack_require__(150) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcz85ZjVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHsgYXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanNcbi8vIG1vZHVsZSBpZCA9IDIyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///225\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.3.10 Object.is(value1, value2)\nvar $export = __webpack_require__(0);\n$export($export.S, 'Object', { is: __webpack_require__(227) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzPzlkMWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///226\n");
    }, function(module, exports) {
        eval("// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcz9lMDg2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjI3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///227\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = __webpack_require__(0);\n$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(105).set });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanM/OGViMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gMjI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///228\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 19.1.3.6 Object.prototype.toString()\nvar classof = __webpack_require__(72);\nvar test = {};\ntest[__webpack_require__(7)('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  __webpack_require__(19)(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcz84MTg2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgdGVzdCA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDIyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///229\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\nvar $export = __webpack_require__(0);\n\n$export($export.P, 'Function', { bind: __webpack_require__(151) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcz9kZDBhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qc1xuLy8gbW9kdWxlIGlkID0gMjMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///230\n");
    }, function(module, exports, __webpack_require__) {
        eval("var dP = __webpack_require__(9).f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || __webpack_require__(8) && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcz8xMmU1Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qc1xuLy8gbW9kdWxlIGlkID0gMjMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///231\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar isObject = __webpack_require__(6);\nvar getPrototypeOf = __webpack_require__(25);\nvar HAS_INSTANCE = __webpack_require__(7)('hasInstance');\nvar FunctionProto = Function.prototype;\n// 19.2.3.6 Function.prototype[@@hasInstance](V)\nif (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(9).f(FunctionProto, HAS_INSTANCE, { value: function (O) {\n  if (typeof this != 'function' || !isObject(O)) return false;\n  if (!isObject(this.prototype)) return O instanceof this;\n  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;\n  return false;\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzPzNkYjMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKSByZXR1cm4gZmFsc2U7XG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gTykgcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qc1xuLy8gbW9kdWxlIGlkID0gMjMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///232\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\nvar $parseInt = __webpack_require__(153);\n// 18.2.5 parseInt(string, radix)\n$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtaW50LmpzPzRiZTEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanNcbi8vIG1vZHVsZSBpZCA9IDIzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///233\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\nvar $parseFloat = __webpack_require__(154);\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanM/MTJmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qc1xuLy8gbW9kdWxlIGlkID0gMjM0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///234\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar global = __webpack_require__(4);\nvar has = __webpack_require__(17);\nvar cof = __webpack_require__(28);\nvar inheritIfRequired = __webpack_require__(107);\nvar toPrimitive = __webpack_require__(31);\nvar fails = __webpack_require__(5);\nvar gOPN = __webpack_require__(53).f;\nvar gOPD = __webpack_require__(24).f;\nvar dP = __webpack_require__(9).f;\nvar $trim = __webpack_require__(62).trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(__webpack_require__(52)(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = __webpack_require__(8) ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  __webpack_require__(19)(global, NUMBER, $Number);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzPzQwMWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xudmFyIEJhc2UgPSAkTnVtYmVyO1xudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbnZhciBCUk9LRU5fQ09GID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUjtcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMikge1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmICh0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMCkgcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKSB7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcbiAgICBpZiAoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSkge1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDIzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///235\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar toInteger = __webpack_require__(33);\nvar aNumberValue = __webpack_require__(155);\nvar repeat = __webpack_require__(108);\nvar $toFixed = 1.0.toFixed;\nvar floor = Math.floor;\nvar data = [0, 0, 0, 0, 0, 0];\nvar ERROR = 'Number.toFixed: incorrect invocation!';\nvar ZERO = '0';\n\nvar multiply = function (n, c) {\n  var i = -1;\n  var c2 = c;\n  while (++i < 6) {\n    c2 += n * data[i];\n    data[i] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\nvar divide = function (n) {\n  var i = 6;\n  var c = 0;\n  while (--i >= 0) {\n    c += data[i];\n    data[i] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\nvar numToString = function () {\n  var i = 6;\n  var s = '';\n  while (--i >= 0) {\n    if (s !== '' || i === 0 || data[i] !== 0) {\n      var t = String(data[i]);\n      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n    }\n  } return s;\n};\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\n$export($export.P + $export.F * (!!$toFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !__webpack_require__(5)(function () {\n  // V8 ~ Android 4.3-\n  $toFixed.call({});\n})), 'Number', {\n  toFixed: function toFixed(fractionDigits) {\n    var x = aNumberValue(this, ERROR);\n    var f = toInteger(fractionDigits);\n    var s = '';\n    var m = ZERO;\n    var e, z, j, k;\n    if (f < 0 || f > 20) throw RangeError(ERROR);\n    // eslint-disable-next-line no-self-compare\n    if (x != x) return 'NaN';\n    if (x <= -1e21 || x >= 1e21) return String(x);\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n    if (x > 1e-21) {\n      e = log(x * pow(2, 69, 1)) - 69;\n      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = f;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        m = numToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        m = numToString() + repeat.call(ZERO, f);\n      }\n    }\n    if (f > 0) {\n      k = m.length;\n      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n    } else {\n      m = s + m;\n    } return m;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzPzQxNjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgZGF0YSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcbnZhciBaRVJPID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xuICB2YXIgaSA9IC0xO1xuICB2YXIgYzIgPSBjO1xuICB3aGlsZSAoKytpIDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xuICB2YXIgaSA9IDY7XG4gIHZhciBjID0gMDtcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpID0gNjtcbiAgdmFyIHMgPSAnJztcbiAgd2hpbGUgKC0taSA+PSAwKSB7XG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XG4gIHZhciBuID0gMDtcbiAgdmFyIHgyID0geDtcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUgKHgyID49IDIpIHtcbiAgICBuICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKSB7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcbiAgICB2YXIgcyA9ICcnO1xuICAgIHZhciBtID0gWkVSTztcbiAgICB2YXIgZSwgeiwgaiwgaztcbiAgICBpZiAoZiA8IDAgfHwgZiA+IDIwKSB0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xuICAgIGlmICh4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSkgcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZiAoeCA8IDApIHtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmICh4ID4gMWUtMjEpIHtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYgKGUgPiAwKSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZiA+IDApIHtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///236\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $fails = __webpack_require__(5);\nvar aNumberValue = __webpack_require__(155);\nvar $toPrecision = 1.0.toPrecision;\n\n$export($export.P + $export.F * ($fails(function () {\n  // IE7-\n  return $toPrecision.call(1, undefined) !== '1';\n}) || !$fails(function () {\n  // V8 ~ Android 4.3-\n  $toPrecision.call({});\n})), 'Number', {\n  toPrecision: function toPrecision(precision) {\n    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcz82NTEyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xudmFyICR0b1ByZWNpc2lvbiA9IDEuMC50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbikge1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24uanNcbi8vIG1vZHVsZSBpZCA9IDIzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///237\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.1.2.1 Number.EPSILON\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanM/NGFkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///238\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.1.2.2 Number.isFinite(number)\nvar $export = __webpack_require__(0);\nvar _isFinite = __webpack_require__(4).isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it) {\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qcz9jYWU1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///239\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.1.2.3 Number.isInteger(number)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Number', { isInteger: __webpack_require__(156) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanM/NWVkOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///240\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.1.2.4 Number.isNaN(number)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcz8yYzZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4uanNcbi8vIG1vZHVsZSBpZCA9IDI0MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///241\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.1.2.5 Number.isSafeInteger(number)\nvar $export = __webpack_require__(0);\nvar isInteger = __webpack_require__(156);\nvar abs = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number) {\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcz8wMzU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xudmFyIGFicyA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpIHtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///242\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanM/NWEyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///243\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanM/Njg5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDI0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///244\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\nvar $parseFloat = __webpack_require__(154);\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzPzZhNWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///245\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\nvar $parseInt = __webpack_require__(153);\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qcz83NTQyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludC5qc1xuLy8gbW9kdWxlIGlkID0gMjQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///246\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.3 Math.acosh(x)\nvar $export = __webpack_require__(0);\nvar log1p = __webpack_require__(157);\nvar sqrt = Math.sqrt;\nvar $acosh = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x) {\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hY29zaC5qcz9iZjY5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgbG9nMXAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyk7XG52YXIgc3FydCA9IE1hdGguc3FydDtcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanNcbi8vIG1vZHVsZSBpZCA9IDI0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///247\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.5 Math.asinh(x)\nvar $export = __webpack_require__(0);\nvar $asinh = Math.asinh;\n\nfunction asinh(x) {\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0\n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcz9lYzliIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywgeyBhc2luaDogYXNpbmggfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYXNpbmguanNcbi8vIG1vZHVsZSBpZCA9IDI0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///248\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.7 Math.atanh(x)\nvar $export = __webpack_require__(0);\nvar $atanh = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0\n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x) {\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcz85NzI4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCkge1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzXG4vLyBtb2R1bGUgaWQgPSAyNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///249\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.9 Math.cbrt(x)\nvar $export = __webpack_require__(0);\nvar sign = __webpack_require__(109);\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x) {\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jYnJ0LmpzPzkwMTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpIHtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qc1xuLy8gbW9kdWxlIGlkID0gMjUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///250\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.11 Math.clz32(x)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qcz9jNGUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jbHozMi5qc1xuLy8gbW9kdWxlIGlkID0gMjUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///251\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.12 Math.cosh(x)\nvar $export = __webpack_require__(0);\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x) {\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzPzJlNTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5jb3NoLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///252\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.14 Math.expm1(x)\nvar $export = __webpack_require__(0);\nvar $expm1 = __webpack_require__(110);\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qcz9mNzEyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5leHBtMS5qc1xuLy8gbW9kdWxlIGlkID0gMjUzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///253\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.16 Math.fround(x)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', { fround: __webpack_require__(158) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanM/OWJhNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZC5qc1xuLy8gbW9kdWxlIGlkID0gMjU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///254\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = __webpack_require__(0);\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5oeXBvdC5qcz9jMmJiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhYnMgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGxhcmcgPSAwO1xuICAgIHZhciBhcmcsIGRpdjtcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZiAobGFyZyA8IGFyZykge1xuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XG4gICAgICAgIGRpdiA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzXG4vLyBtb2R1bGUgaWQgPSAyNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///255\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.18 Math.imul(x, y)\nvar $export = __webpack_require__(0);\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * __webpack_require__(5)(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzPzJlYTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW11bCA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgeG4gPSAreDtcbiAgICB2YXIgeW4gPSAreTtcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///256\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.21 Math.log10(x)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', {\n  log10: function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcz9kNjJhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwLmpzXG4vLyBtb2R1bGUgaWQgPSAyNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///257\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.20 Math.log1p(x)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', { log1p: __webpack_require__(157) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcz9hNTYxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGxvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanNcbi8vIG1vZHVsZSBpZCA9IDI1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///258\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.22 Math.log2(x)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', {\n  log2: function log2(x) {\n    return Math.log(x) / Math.LN2;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cyLmpzPzM3ODIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMi5qc1xuLy8gbW9kdWxlIGlkID0gMjU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///259\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.28 Math.sign(x)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', { sign: __webpack_require__(109) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzPzFlNWYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///260\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.30 Math.sinh(x)\nvar $export = __webpack_require__(0);\nvar expm1 = __webpack_require__(110);\nvar exp = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * __webpack_require__(5)(function () {\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x) {\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzPzMyMzEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaW5oLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///261\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.33 Math.tanh(x)\nvar $export = __webpack_require__(0);\nvar expm1 = __webpack_require__(110);\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x) {\n    var a = expm1(x = +x);\n    var b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50YW5oLmpzPzQ5MTAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcbnZhciBleHAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XG4gICAgdmFyIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgudGFuaC5qc1xuLy8gbW9kdWxlIGlkID0gMjYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///262\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.2.2.34 Math.trunc(x)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcz8xZjQ5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qc1xuLy8gbW9kdWxlIGlkID0gMjYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///263\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\nvar toAbsoluteIndex = __webpack_require__(51);\nvar fromCharCode = String.fromCharCode;\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var res = [];\n    var aLen = arguments.length;\n    var i = 0;\n    var code;\n    while (aLen > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcz82ZWEzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBjb2RlO1xuICAgIHdoaWxlIChhTGVuID4gaSkge1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qc1xuLy8gbW9kdWxlIGlkID0gMjY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///264\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\nvar toIObject = __webpack_require__(23);\nvar toLength = __webpack_require__(10);\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite) {\n    var tpl = toIObject(callSite.raw);\n    var len = toLength(tpl.length);\n    var aLen = arguments.length;\n    var res = [];\n    var i = 0;\n    while (len > i) {\n      res.push(String(tpl[i++]));\n      if (i < aLen) res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qcz8xNzdiIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodHBsLmxlbmd0aCk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYgKGkgPCBhTGVuKSByZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJhdy5qc1xuLy8gbW9kdWxlIGlkID0gMjY1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///265\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 21.1.3.25 String.prototype.trim()\n__webpack_require__(62)('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanM/OWExOSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///266\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $at = __webpack_require__(111)(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n__webpack_require__(112)(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzP2Q0MGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMjY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///267\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $at = __webpack_require__(111)(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos) {\n    return $at(this, pos);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQuanM/NDVhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzXG4vLyBtb2R1bGUgaWQgPSAyNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///268\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n\nvar $export = __webpack_require__(0);\nvar toLength = __webpack_require__(10);\nvar context = __webpack_require__(114);\nvar ENDS_WITH = 'endsWith';\nvar $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * __webpack_require__(115)(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = context(this, searchString, ENDS_WITH);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n    var search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aC5qcz82MzU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSCk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoLmpzXG4vLyBtb2R1bGUgaWQgPSAyNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///269\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n\nvar $export = __webpack_require__(0);\nvar context = __webpack_require__(114);\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * __webpack_require__(115)(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzPzFhMWUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMjcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///270\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: __webpack_require__(108)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcz9iNmE0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qc1xuLy8gbW9kdWxlIGlkID0gMjcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///271\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n\nvar $export = __webpack_require__(0);\nvar toLength = __webpack_require__(10);\nvar context = __webpack_require__(114);\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * __webpack_require__(115)(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzPzBhZjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpO1xuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGguanNcbi8vIG1vZHVsZSBpZCA9IDI3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///272\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.2 String.prototype.anchor(name)\n__webpack_require__(20)('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvci5qcz9mMGRhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///273\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.3 String.prototype.big()\n__webpack_require__(20)('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcz80NzhhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///274\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.4 String.prototype.blink()\n__webpack_require__(20)('blink', function (createHTML) {\n  return function blink() {\n    return createHTML(this, 'blink', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzP2UxMTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///275\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.5 String.prototype.bold()\n__webpack_require__(20)('bold', function (createHTML) {\n  return function bold() {\n    return createHTML(this, 'b', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanM/ODhjZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///276\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.6 String.prototype.fixed()\n__webpack_require__(20)('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzPzI3ZTgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzXG4vLyBtb2R1bGUgaWQgPSAyNzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///277\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.7 String.prototype.fontcolor(color)\n__webpack_require__(20)('fontcolor', function (createHTML) {\n  return function fontcolor(color) {\n    return createHTML(this, 'font', 'color', color);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qcz9mMzZhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvci5qc1xuLy8gbW9kdWxlIGlkID0gMjc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///278\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.8 String.prototype.fontsize(size)\n__webpack_require__(20)('fontsize', function (createHTML) {\n  return function fontsize(size) {\n    return createHTML(this, 'font', 'size', size);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzPzVmZjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///279\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.9 String.prototype.italics()\n__webpack_require__(20)('italics', function (createHTML) {\n  return function italics() {\n    return createHTML(this, 'i', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MuanM/Nzk1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzXG4vLyBtb2R1bGUgaWQgPSAyODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///280\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.10 String.prototype.link(url)\n__webpack_require__(20)('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanM/NTA5OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzXG4vLyBtb2R1bGUgaWQgPSAyODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///281\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.11 String.prototype.small()\n__webpack_require__(20)('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsLmpzPzQ5NGYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qc1xuLy8gbW9kdWxlIGlkID0gMjgyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///282\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.12 String.prototype.strike()\n__webpack_require__(20)('strike', function (createHTML) {\n  return function strike() {\n    return createHTML(this, 'strike', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qcz9lNjJjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZS5qc1xuLy8gbW9kdWxlIGlkID0gMjgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///283\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.13 String.prototype.sub()\n__webpack_require__(20)('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qcz8xMTZhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1Yi5qc1xuLy8gbW9kdWxlIGlkID0gMjg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///284\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// B.2.3.14 String.prototype.sup()\n__webpack_require__(20)('sup', function (createHTML) {\n  return function sup() {\n    return createHTML(this, 'sup', '', '');\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcz8yNzZhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qc1xuLy8gbW9kdWxlIGlkID0gMjg1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///285\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanM/NDFhMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS5ub3cuanNcbi8vIG1vZHVsZSBpZCA9IDI4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///286\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar toObject = __webpack_require__(14);\nvar toPrimitive = __webpack_require__(31);\n\n$export($export.P + $export.F * __webpack_require__(5)(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1qc29uLmpzP2YxZjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qc1xuLy8gbW9kdWxlIGlkID0gMjg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///287\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar $export = __webpack_require__(0);\nvar toISOString = __webpack_require__(289);\n\n// PhantomJS / old WebKit has a broken implementations\n$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {\n  toISOString: toISOString\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzPzUxYjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IHRvSVNPU3RyaW5nXG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAyODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///288\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar fails = __webpack_require__(5);\nvar getTime = Date.prototype.getTime;\nvar $toISOString = Date.prototype.toISOString;\n\nvar lz = function (num) {\n  return num > 9 ? num : '0' + num;\n};\n\n// PhantomJS / old WebKit has a broken implementations\nmodule.exports = (fails(function () {\n  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  $toISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var d = this;\n  var y = d.getUTCFullYear();\n  var m = d.getUTCMilliseconds();\n  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n} : $toISOString;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1pc28tc3RyaW5nLmpzPzYzYjQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbm1vZHVsZS5leHBvcnRzID0gKGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvSVNPU3RyaW5nLmNhbGwobmV3IERhdGUoTmFOKSk7XG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgdmFyIGQgPSB0aGlzO1xuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICB2YXIgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbn0gOiAkdG9JU09TdHJpbmc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qc1xuLy8gbW9kdWxlIGlkID0gMjg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///289\n");
    }, function(module, exports, __webpack_require__) {
        eval("var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  __webpack_require__(19)(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanM/NDY0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgRGF0ZVByb3RvID0gRGF0ZS5wcm90b3R5cGU7XG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAyOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///290\n");
    }, function(module, exports, __webpack_require__) {
        eval("var TO_PRIMITIVE = __webpack_require__(7)('toPrimitive');\nvar proto = Date.prototype;\n\nif (!(TO_PRIMITIVE in proto)) __webpack_require__(18)(proto, TO_PRIMITIVE, __webpack_require__(292));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUuanM/ZTEwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJyk7XG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcblxuaWYgKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSkgcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qc1xuLy8gbW9kdWxlIGlkID0gMjkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///291\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar anObject = __webpack_require__(3);\nvar toPrimitive = __webpack_require__(31);\nvar NUMBER = 'number';\n\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');\n  return toPrimitive(anObject(this), hint != NUMBER);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanM/OGMxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIE5VTUJFUiA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XG4gIGlmIChoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanNcbi8vIG1vZHVsZSBpZCA9IDI5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///292\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Array', { isArray: __webpack_require__(81) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanM/MjBjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDI5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///293\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar ctx = __webpack_require__(27);\nvar $export = __webpack_require__(0);\nvar toObject = __webpack_require__(14);\nvar call = __webpack_require__(159);\nvar isArrayIter = __webpack_require__(116);\nvar toLength = __webpack_require__(10);\nvar createProperty = __webpack_require__(117);\nvar getIterFn = __webpack_require__(118);\n\n$export($export.S + $export.F * !__webpack_require__(83)(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcz82ZGUxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpO1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGl0ZXJGbiA9IGdldEl0ZXJGbihPKTtcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDI5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///294\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar createProperty = __webpack_require__(117);\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * __webpack_require__(5)(function () {\n  function F() { /* empty */ }\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */) {\n    var index = 0;\n    var aLen = arguments.length;\n    var result = new (typeof this == 'function' ? this : Array)(aLen);\n    while (aLen > index) createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkub2YuanM/YzRjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5vZi5qc1xuLy8gbW9kdWxlIGlkID0gMjk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///295\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 22.1.3.13 Array.prototype.join(separator)\nvar $export = __webpack_require__(0);\nvar toIObject = __webpack_require__(23);\nvar arrayJoin = [].join;\n\n// fallback for not array-like strings\n$export($export.P + $export.F * (__webpack_require__(70) != Object || !__webpack_require__(29)(arrayJoin)), 'Array', {\n  join: function join(separator) {\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qcz84ZjhkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuam9pbi5qc1xuLy8gbW9kdWxlIGlkID0gMjk2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///296\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar html = __webpack_require__(104);\nvar cof = __webpack_require__(28);\nvar toAbsoluteIndex = __webpack_require__(51);\nvar toLength = __webpack_require__(10);\nvar arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * __webpack_require__(5)(function () {\n  if (html) arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end) {\n    var len = toLength(this.length);\n    var klass = cof(this);\n    end = end === undefined ? len : end;\n    if (klass == 'Array') return arraySlice.call(this, begin, end);\n    var start = toAbsoluteIndex(begin, len);\n    var upTo = toAbsoluteIndex(end, len);\n    var size = toLength(upTo - start);\n    var cloned = Array(size);\n    var i = 0;\n    for (; i < size; i++) cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanM/ZjM1NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xuICAgIHZhciB1cFRvID0gdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuKTtcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XG4gICAgdmFyIGNsb25lZCA9IEFycmF5KHNpemUpO1xuICAgIHZhciBpID0gMDtcbiAgICBmb3IgKDsgaSA8IHNpemU7IGkrKykgY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlLmpzXG4vLyBtb2R1bGUgaWQgPSAyOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///297\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar aFunction = __webpack_require__(16);\nvar toObject = __webpack_require__(14);\nvar fails = __webpack_require__(5);\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !__webpack_require__(29)($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcz9iODM2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyICRzb3J0ID0gW10uc29ydDtcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qc1xuLy8gbW9kdWxlIGlkID0gMjk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///298\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $forEach = __webpack_require__(35)(0);\nvar STRICT = __webpack_require__(29)([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjk5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanM/MDg0MyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qc1xuLy8gbW9kdWxlIGlkID0gMjk5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///299\n");
    }, function(module, exports, __webpack_require__) {
        eval("var isObject = __webpack_require__(6);\nvar isArray = __webpack_require__(81);\nvar SPECIES = __webpack_require__(7)('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcz82ZThhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNPYmplY3QoQykpIHtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSAzMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///300\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $map = __webpack_require__(35)(1);\n\n$export($export.P + $export.F * !__webpack_require__(29)([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzP2MzYTUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanNcbi8vIG1vZHVsZSBpZCA9IDMwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///301\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $filter = __webpack_require__(35)(2);\n\n$export($export.P + $export.F * !__webpack_require__(29)([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyLmpzPzdjZTciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMzAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///302\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $some = __webpack_require__(35)(3);\n\n$export($export.P + $export.F * !__webpack_require__(29)([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcz9jMTU3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJHNvbWUgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qc1xuLy8gbW9kdWxlIGlkID0gMzAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///303\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $every = __webpack_require__(35)(4);\n\n$export($export.P + $export.F * !__webpack_require__(29)([].every, true), 'Array', {\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n  every: function every(callbackfn /* , thisArg */) {\n    return $every(this, callbackfn, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanM/MzY0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkuanNcbi8vIG1vZHVsZSBpZCA9IDMwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///304\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $reduce = __webpack_require__(160);\n\n$export($export.P + $export.F * !__webpack_require__(29)([].reduce, true), 'Array', {\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzP2MyNzQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzXG4vLyBtb2R1bGUgaWQgPSAzMDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///305\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $reduce = __webpack_require__(160);\n\n$export($export.P + $export.F * !__webpack_require__(29)([].reduceRight, true), 'Array', {\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzPzk2NDQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodC5qc1xuLy8gbW9kdWxlIGlkID0gMzA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///306\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $indexOf = __webpack_require__(79)(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(29)($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YuanM/ZjgyMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAzMDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///307\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar toIObject = __webpack_require__(23);\nvar toInteger = __webpack_require__(33);\nvar toLength = __webpack_require__(10);\nvar $native = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(29)($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n    // convert -0 to +0\n    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n    var O = toIObject(this);\n    var length = toLength(O.length);\n    var index = length - 1;\n    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n    if (index < 0) index = length + index;\n    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n    return -1;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcz9hMDcyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYgKE5FR0FUSVZFX1pFUk8pIHJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IGxlbmd0aCAtIDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTykgaWYgKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KSByZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAzMDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///308\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = __webpack_require__(0);\n\n$export($export.P, 'Array', { copyWithin: __webpack_require__(161) });\n\n__webpack_require__(42)('copyWithin');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanM/ZjZmNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7IGNvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJykgfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluLmpzXG4vLyBtb2R1bGUgaWQgPSAzMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///309\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = __webpack_require__(0);\n\n$export($export.P, 'Array', { fill: __webpack_require__(120) });\n\n__webpack_require__(42)('fill');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcz8zNjhlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAzMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///310\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = __webpack_require__(0);\nvar $find = __webpack_require__(35)(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n__webpack_require__(42)(KEY);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcz81YTk0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSk7XG52YXIgS0VZID0gJ2ZpbmQnO1xudmFyIGZvcmNlZCA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDMxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///311\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = __webpack_require__(0);\nvar $find = __webpack_require__(35)(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n__webpack_require__(42)(KEY);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qcz81M2FhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcbnZhciBLRVkgPSAnZmluZEluZGV4JztcbnZhciBmb3JjZWQgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMzEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///312\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(54)('Array');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcz80M2YwIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDMxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///313\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(4);\nvar inheritIfRequired = __webpack_require__(107);\nvar dP = __webpack_require__(9).f;\nvar gOPN = __webpack_require__(53).f;\nvar isRegExp = __webpack_require__(82);\nvar $flags = __webpack_require__(84);\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (__webpack_require__(8) && (!CORRECT_NEW || __webpack_require__(5)(function () {\n  re2[__webpack_require__(7)('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  __webpack_require__(19)(global, 'RegExp', $RegExp);\n}\n\n__webpack_require__(54)('RegExp');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzPzk2NzYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcbnZhciBCYXNlID0gJFJlZ0V4cDtcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKSB7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZikge1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcbiAgICB2YXIgZmlVID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDMxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///314\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n__webpack_require__(163);\nvar anObject = __webpack_require__(3);\nvar $flags = __webpack_require__(84);\nvar DESCRIPTORS = __webpack_require__(8);\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  __webpack_require__(19)(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (__webpack_require__(5)(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcz8xNWE2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzXG4vLyBtb2R1bGUgaWQgPSAzMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///315\n");
    }, function(module, exports, __webpack_require__) {
        eval("// @@match logic\n__webpack_require__(85)('match', 1, function (defined, MATCH, $match) {\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzPzMxZjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKSB7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xuICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaC5qc1xuLy8gbW9kdWxlIGlkID0gMzE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///316\n");
    }, function(module, exports, __webpack_require__) {
        eval("// @@replace logic\n__webpack_require__(85)('replace', 2, function (defined, REPLACE, $replace) {\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue) {\n    'use strict';\n    var O = defined(this);\n    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanM/NTYzYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSkge1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlLmpzXG4vLyBtb2R1bGUgaWQgPSAzMTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///317\n");
    }, function(module, exports, __webpack_require__) {
        eval("// @@search logic\n__webpack_require__(85)('search', 1, function (defined, SEARCH, $search) {\n  // 21.1.3.15 String.prototype.search(regexp)\n  return [function search(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[SEARCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n  }, $search];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcz9hYjA0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gpIHtcbiAgLy8gMjEuMS4zLjE1IFN0cmluZy5wcm90b3R5cGUuc2VhcmNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzXG4vLyBtb2R1bGUgaWQgPSAzMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///318\n");
    }, function(module, exports, __webpack_require__) {
        eval("// @@split logic\n__webpack_require__(85)('split', 2, function (defined, SPLIT, $split) {\n  'use strict';\n  var isRegExp = __webpack_require__(82);\n  var _split = $split;\n  var $push = [].push;\n  var $SPLIT = 'split';\n  var LENGTH = 'length';\n  var LAST_INDEX = 'lastIndex';\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while (match = separatorCopy.exec(string)) {\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          // eslint-disable-next-line no-loop-func\n          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {\n            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;\n          });\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    $split = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit) {\n    var O = defined(this);\n    var fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzPzk4OWMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0KSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG4gIHZhciBfc3BsaXQgPSAkc3BsaXQ7XG4gIHZhciAkcHVzaCA9IFtdLnB1c2g7XG4gIHZhciAkU1BMSVQgPSAnc3BsaXQnO1xuICB2YXIgTEVOR1RIID0gJ2xlbmd0aCc7XG4gIHZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmIChcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKSB7XG4gICAgdmFyIE5QQ0cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHVuZGVmaW5lZDsgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCkgcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuIF9zcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTtcbiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgaWYgKCFOUENHKSBzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZykpIHtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0dcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICAgICAgaWYgKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKSBtYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKykgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSkgb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICB2YXIgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdC5qc1xuLy8gbW9kdWxlIGlkID0gMzE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///319\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar LIBRARY = __webpack_require__(49);\nvar global = __webpack_require__(4);\nvar ctx = __webpack_require__(27);\nvar classof = __webpack_require__(72);\nvar $export = __webpack_require__(0);\nvar isObject = __webpack_require__(6);\nvar aFunction = __webpack_require__(16);\nvar anInstance = __webpack_require__(55);\nvar forOf = __webpack_require__(56);\nvar speciesConstructor = __webpack_require__(86);\nvar task = __webpack_require__(122).set;\nvar microtask = __webpack_require__(123)();\nvar newPromiseCapabilityModule = __webpack_require__(124);\nvar perform = __webpack_require__(164);\nvar promiseResolve = __webpack_require__(165);\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[__webpack_require__(7)('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value);\n            if (domain) domain.exit();\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  if (promise._h == 1) return false;\n  var chain = promise._a || promise._c;\n  var i = 0;\n  var reaction;\n  while (chain.length > i) {\n    reaction = chain[i++];\n    if (reaction.fail || !isUnhandled(reaction.promise)) return false;\n  } return true;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = __webpack_require__(57)($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\n__webpack_require__(61)($Promise, PROMISE);\n__webpack_require__(54)(PROMISE);\nWrapper = __webpack_require__(30)[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(83)(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcz9jYmQ5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgJFByb21pc2UgPSBnbG9iYWxbUFJPTUlTRV07XG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWwsIG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XG4gICAgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW47XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZXhpdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmIChpc1JlamVjdCAmJiAhcHJvbWlzZS5faCkgb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciB1bmhhbmRsZWQgPSBpc1VuaGFuZGxlZChwcm9taXNlKTtcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmICh1bmhhbmRsZWQpIHtcbiAgICAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbikge1xuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgdGhyb3cgcmVzdWx0LnY7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIGlmIChwcm9taXNlLl9oID09IDEpIHJldHVybiBmYWxzZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZWFjdGlvbjtcbiAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHtcbiAgICByZWFjdGlvbiA9IGNoYWluW2krK107XG4gICAgaWYgKHJlYWN0aW9uLmZhaWwgfHwgIWlzVW5oYW5kbGVkKHJlYWN0aW9uLnByb21pc2UpKSByZXR1cm4gZmFsc2U7XG4gIH0gcmV0dXJuIHRydWU7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gMzIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///320\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar weak = __webpack_require__(170);\nvar validate = __webpack_require__(64);\nvar WEAK_SET = 'WeakSet';\n\n// 23.4 WeakSet Objects\n__webpack_require__(87)(WEAK_SET, function (get) {\n  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value) {\n    return weak.def(validate(this, WEAK_SET), value, true);\n  }\n}, weak, false, true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanM/NTdmMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qc1xuLy8gbW9kdWxlIGlkID0gMzIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///321\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar $typed = __webpack_require__(88);\nvar buffer = __webpack_require__(125);\nvar anObject = __webpack_require__(3);\nvar toAbsoluteIndex = __webpack_require__(51);\nvar toLength = __webpack_require__(10);\nvar isObject = __webpack_require__(6);\nvar ArrayBuffer = __webpack_require__(4).ArrayBuffer;\nvar speciesConstructor = __webpack_require__(86);\nvar $ArrayBuffer = buffer.ArrayBuffer;\nvar $DataView = buffer.DataView;\nvar $isView = $typed.ABV && ArrayBuffer.isView;\nvar $slice = $ArrayBuffer.prototype.slice;\nvar VIEW = $typed.VIEW;\nvar ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it) {\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * __webpack_require__(5)(function () {\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end) {\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n    var len = anObject(this).byteLength;\n    var first = toAbsoluteIndex(start, len);\n    var final = toAbsoluteIndex(end === undefined ? len : end, len);\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));\n    var viewS = new $DataView(this);\n    var viewT = new $DataView(result);\n    var index = 0;\n    while (first < final) {\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\n__webpack_require__(54)(ARRAY_BUFFER);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzP2Y2NjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcjtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xudmFyICREYXRhVmlldyA9IGJ1ZmZlci5EYXRhVmlldztcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcbnZhciBWSUVXID0gJHR5cGVkLlZJRVc7XG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHsgQXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlciB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aDtcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gICAgdmFyIGZpbmFsID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW5hbCAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcbiAgICB2YXIgdmlld1QgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW5hbCkge1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///322\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\n$export($export.G + $export.W + $export.F * !__webpack_require__(88).ABV, {\n  DataView: __webpack_require__(125).DataView\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzP2Q2ZTIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldy5qc1xuLy8gbW9kdWxlIGlkID0gMzIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///323\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(36)('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcz9lNzY1Il0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMzI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///324\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(36)('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanM/NGM1NSJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDMyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///325\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(36)('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcz8zMzI4Il0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMzI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///326\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(36)('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanM/YWFkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDMyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///327\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(36)('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzPzRjNzkiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///328\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(36)('Int32', 4, function (init) {\n  return function Int32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanM/MmI0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanNcbi8vIG1vZHVsZSBpZCA9IDMyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///329\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(36)('Uint32', 4, function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzPzM1ZjYiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///330\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(36)('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcz83NTNjIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMzMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///331\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(36)('Float64', 8, function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcz9mYWY1Il0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gMzMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///332\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export = __webpack_require__(0);\nvar aFunction = __webpack_require__(16);\nvar anObject = __webpack_require__(3);\nvar rApply = (__webpack_require__(4).Reflect || {}).apply;\nvar fApply = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !__webpack_require__(5)(function () {\n  rApply(function () { /* empty */ });\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList) {\n    var T = aFunction(target);\n    var L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseS5qcz8wOTU0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciByQXBwbHkgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHk7XG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KSB7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///333\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = __webpack_require__(0);\nvar create = __webpack_require__(52);\nvar aFunction = __webpack_require__(16);\nvar anObject = __webpack_require__(3);\nvar isObject = __webpack_require__(6);\nvar fails = __webpack_require__(5);\nvar bind = __webpack_require__(151);\nvar rConstruct = (__webpack_require__(4).Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QuanM/YmU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9fYmluZCcpO1xudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAzMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///334\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP = __webpack_require__(9);\nvar $export = __webpack_require__(0);\nvar anObject = __webpack_require__(3);\nvar toPrimitive = __webpack_require__(31);\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * __webpack_require__(5)(function () {\n  // eslint-disable-next-line no-undef\n  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes) {\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHkuanM/ZTE5NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///335\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export = __webpack_require__(0);\nvar gOPD = __webpack_require__(24).f;\nvar anObject = __webpack_require__(3);\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey) {\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanM/Y2IxZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gMzM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///336\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 26.1.5 Reflect.enumerate(target)\nvar $export = __webpack_require__(0);\nvar anObject = __webpack_require__(3);\nvar Enumerate = function (iterated) {\n  this._t = anObject(iterated); // target\n  this._i = 0;                  // next index\n  var keys = this._k = [];      // keys\n  var key;\n  for (key in iterated) keys.push(key);\n};\n__webpack_require__(113)(Enumerate, 'Object', function () {\n  var that = this;\n  var keys = that._k;\n  var key;\n  do {\n    if (that._i >= keys.length) return { value: undefined, done: true };\n  } while (!((key = keys[that._i++]) in that._t));\n  return { value: key, done: false };\n});\n\n$export($export.S, 'Reflect', {\n  enumerate: function enumerate(target) {\n    return new Enumerate(target);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUuanM/NWZiNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSB0aGlzO1xuICB2YXIga2V5cyA9IHRoYXQuX2s7XG4gIHZhciBrZXk7XG4gIGRvIHtcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9IHdoaWxlICghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMzM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///337\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD = __webpack_require__(24);\nvar getPrototypeOf = __webpack_require__(25);\nvar has = __webpack_require__(17);\nvar $export = __webpack_require__(0);\nvar isObject = __webpack_require__(6);\nvar anObject = __webpack_require__(3);\n\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var desc, proto;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', { get: get });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanM/NDhmYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2MsIHByb3RvO1xuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC5qc1xuLy8gbW9kdWxlIGlkID0gMzM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///338\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD = __webpack_require__(24);\nvar $export = __webpack_require__(0);\nvar anObject = __webpack_require__(3);\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanM/MDM5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1xuLy8gbW9kdWxlIGlkID0gMzM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///339\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export = __webpack_require__(0);\nvar getProto = __webpack_require__(25);\nvar anObject = __webpack_require__(3);\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target) {\n    return getProto(anObject(target));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzPzNlZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDM0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///340\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey) {\n    return propertyKey in target;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5oYXMuanM/NzY2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qc1xuLy8gbW9kdWxlIGlkID0gMzQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///341\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.10 Reflect.isExtensible(target)\nvar $export = __webpack_require__(0);\nvar anObject = __webpack_require__(3);\nvar $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target) {\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlLmpzPzI0NmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanNcbi8vIG1vZHVsZSBpZCA9IDM0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///342\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.11 Reflect.ownKeys(target)\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Reflect', { ownKeys: __webpack_require__(172) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcz80NzBlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gMzQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///343\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.12 Reflect.preventExtensions(target)\nvar $export = __webpack_require__(0);\nvar anObject = __webpack_require__(3);\nvar $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target) {\n    anObject(target);\n    try {\n      if ($preventExtensions) $preventExtensions(target);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanM/ZjY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKCRwcmV2ZW50RXh0ZW5zaW9ucykgJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDM0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///344\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP = __webpack_require__(9);\nvar gOPD = __webpack_require__(24);\nvar getPrototypeOf = __webpack_require__(25);\nvar has = __webpack_require__(17);\nvar $export = __webpack_require__(0);\nvar createDesc = __webpack_require__(47);\nvar anObject = __webpack_require__(3);\nvar isObject = __webpack_require__(6);\n\nfunction set(target, propertyKey, V /* , receiver */) {\n  var receiver = arguments.length < 4 ? target : arguments[3];\n  var ownDesc = gOPD.f(anObject(target), propertyKey);\n  var existingDescriptor, proto;\n  if (!ownDesc) {\n    if (isObject(proto = getPrototypeOf(target))) {\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if (has(ownDesc, 'value')) {\n    if (ownDesc.writable === false || !isObject(receiver)) return false;\n    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);\n    existingDescriptor.value = V;\n    dP.f(receiver, propertyKey, existingDescriptor);\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', { set: set });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQuanM/NmQ0NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIHZhciBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZiAoIW93bkRlc2MpIHtcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkgfHwgY3JlYXRlRGVzYygwKTtcbiAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qc1xuLy8gbW9kdWxlIGlkID0gMzQ1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///345\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export = __webpack_require__(0);\nvar setProto = __webpack_require__(105);\n\nif (setProto) $export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto) {\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzPzk5M2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmIChzZXRQcm90bykgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mLmpzXG4vLyBtb2R1bGUgaWQgPSAzNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///346\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://github.com/tc39/Array.prototype.includes\nvar $export = __webpack_require__(0);\nvar $includes = __webpack_require__(79)(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n__webpack_require__(42)('includes');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanM/ODFiYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qc1xuLy8gbW9kdWxlIGlkID0gMzQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///347\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\nvar $export = __webpack_require__(0);\nvar flattenIntoArray = __webpack_require__(173);\nvar toObject = __webpack_require__(14);\nvar toLength = __webpack_require__(10);\nvar aFunction = __webpack_require__(16);\nvar arraySpeciesCreate = __webpack_require__(119);\n\n$export($export.P, 'Array', {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen, A;\n    aFunction(callbackfn);\n    sourceLen = toLength(O.length);\n    A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n    return A;\n  }\n});\n\n__webpack_require__(42)('flatMap');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanM/YTA1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdE1hcFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuLCBBO1xuICAgIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXQtbWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAzNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///348\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten\nvar $export = __webpack_require__(0);\nvar flattenIntoArray = __webpack_require__(173);\nvar toObject = __webpack_require__(14);\nvar toLength = __webpack_require__(10);\nvar toInteger = __webpack_require__(33);\nvar arraySpeciesCreate = __webpack_require__(119);\n\n$export($export.P, 'Array', {\n  flatten: function flatten(/* depthArg = 1 */) {\n    var depthArg = arguments[0];\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n\n__webpack_require__(42)('flatten');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcz9iZmRkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0dGVuXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGZsYXR0ZW46IGZ1bmN0aW9uIGZsYXR0ZW4oLyogZGVwdGhBcmcgPSAxICovKSB7XG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4uanNcbi8vIG1vZHVsZSBpZCA9IDM0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///349\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://github.com/mathiasbynens/String.prototype.at\nvar $export = __webpack_require__(0);\nvar $at = __webpack_require__(111)(true);\n\n$export($export.P, 'String', {\n  at: function at(pos) {\n    return $at(this, pos);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLmF0LmpzP2ZiNmYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3MpIHtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanNcbi8vIG1vZHVsZSBpZCA9IDM1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///350\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = __webpack_require__(0);\nvar $pad = __webpack_require__(174);\n\n$export($export.P, 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcz9iMjY0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qc1xuLy8gbW9kdWxlIGlkID0gMzUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///351\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = __webpack_require__(0);\nvar $pad = __webpack_require__(174);\n\n$export($export.P, 'String', {\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanM/OWJjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkcGFkID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kLmpzXG4vLyBtb2R1bGUgaWQgPSAzNTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///352\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n__webpack_require__(62)('trimLeft', function ($trim) {\n  return function trimLeft() {\n    return $trim(this, 1);\n  };\n}, 'trimStart');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcz9jNjdmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQuanNcbi8vIG1vZHVsZSBpZCA9IDM1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///353\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\n__webpack_require__(62)('trimRight', function ($trim) {\n  return function trimRight() {\n    return $trim(this, 2);\n  };\n}, 'trimEnd');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQuanM/MmQxMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodC5qc1xuLy8gbW9kdWxlIGlkID0gMzU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///354\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://tc39.github.io/String.prototype.matchAll/\nvar $export = __webpack_require__(0);\nvar defined = __webpack_require__(32);\nvar toLength = __webpack_require__(10);\nvar isRegExp = __webpack_require__(82);\nvar getFlags = __webpack_require__(84);\nvar RegExpProto = RegExp.prototype;\n\nvar $RegExpStringIterator = function (regexp, string) {\n  this._r = regexp;\n  this._s = string;\n};\n\n__webpack_require__(113)($RegExpStringIterator, 'RegExp String', function next() {\n  var match = this._r.exec(this._s);\n  return { value: match, done: match === null };\n});\n\n$export($export.P, 'String', {\n  matchAll: function matchAll(regexp) {\n    defined(this);\n    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');\n    var S = String(this);\n    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);\n    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n    rx.lastIndex = toLength(regexp.lastIndex);\n    return new $RegExpStringIterator(rx, S);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbC5qcz9iMWNlIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xudmFyIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4geyB2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsIH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmICghaXNSZWdFeHAocmVnZXhwKSkgdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcbiAgICB2YXIgcnggPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzXG4vLyBtb2R1bGUgaWQgPSAzNTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///355\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(101)('asyncIterator');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzP2Y1ODgiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gMzU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///356\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(101)('observable');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanM/YmVlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDM1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///357\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export = __webpack_require__(0);\nvar ownKeys = __webpack_require__(172);\nvar toIObject = __webpack_require__(23);\nvar gOPD = __webpack_require__(24);\nvar createProperty = __webpack_require__(117);\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIObject(object);\n    var getDesc = gOPD.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var i = 0;\n    var key, desc;\n    while (keys.length > i) {\n      desc = getDesc(O, key = keys[i++]);\n      if (desc !== undefined) createProperty(result, key, desc);\n    }\n    return result;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanM/Y2U2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgICB2YXIgZ2V0RGVzYyA9IGdPUEQuZjtcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5LCBkZXNjO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcbiAgICAgIGRlc2MgPSBnZXREZXNjKE8sIGtleSA9IGtleXNbaSsrXSk7XG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qc1xuLy8gbW9kdWxlIGlkID0gMzU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///358\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/tc39/proposal-object-values-entries\nvar $export = __webpack_require__(0);\nvar $values = __webpack_require__(175)(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qcz82MTU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpIHtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///359\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/tc39/proposal-object-values-entries\nvar $export = __webpack_require__(0);\nvar $entries = __webpack_require__(175)(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanM/MTRhNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDM2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///360\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar toObject = __webpack_require__(14);\nvar aFunction = __webpack_require__(16);\nvar $defineProperty = __webpack_require__(9);\n\n// B.2.2.2 Object.prototype.__defineGetter__(P, getter)\n__webpack_require__(8) && $export($export.P + __webpack_require__(89), 'Object', {\n  __defineGetter__: function __defineGetter__(P, getter) {\n    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanM/YTE4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMzYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///361\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar toObject = __webpack_require__(14);\nvar aFunction = __webpack_require__(16);\nvar $defineProperty = __webpack_require__(9);\n\n// B.2.2.3 Object.prototype.__defineSetter__(P, setter)\n__webpack_require__(8) && $export($export.P + __webpack_require__(89), 'Object', {\n  __defineSetter__: function __defineSetter__(P, setter) {\n    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanM/NzcxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlci5qc1xuLy8gbW9kdWxlIGlkID0gMzYyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///362\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar toObject = __webpack_require__(14);\nvar toPrimitive = __webpack_require__(31);\nvar getPrototypeOf = __webpack_require__(25);\nvar getOwnPropertyDescriptor = __webpack_require__(24).f;\n\n// B.2.2.4 Object.prototype.__lookupGetter__(P)\n__webpack_require__(8) && $export($export.P + __webpack_require__(89), 'Object', {\n  __lookupGetter__: function __lookupGetter__(P) {\n    var O = toObject(this);\n    var K = toPrimitive(P, true);\n    var D;\n    do {\n      if (D = getOwnPropertyDescriptor(O, K)) return D.get;\n    } while (O = getPrototypeOf(O));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanM/YzQyYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///363\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $export = __webpack_require__(0);\nvar toObject = __webpack_require__(14);\nvar toPrimitive = __webpack_require__(31);\nvar getPrototypeOf = __webpack_require__(25);\nvar getOwnPropertyDescriptor = __webpack_require__(24).f;\n\n// B.2.2.5 Object.prototype.__lookupSetter__(P)\n__webpack_require__(8) && $export($export.P + __webpack_require__(89), 'Object', {\n  __lookupSetter__: function __lookupSetter__(P) {\n    var O = toObject(this);\n    var K = toPrimitive(P, true);\n    var D;\n    do {\n      if (D = getOwnPropertyDescriptor(O, K)) return D.set;\n    } while (O = getPrototypeOf(O));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanM/MDI0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICAgIHZhciBEO1xuICAgIGRvIHtcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///364\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = __webpack_require__(0);\n\n$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(176)('Map') });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanM/ODdiNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///365\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = __webpack_require__(0);\n\n$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(176)('Set') });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanM/NmFiMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0JykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC50by1qc29uLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///366\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\n__webpack_require__(90)('Map');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzPzI0OWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdNYXAnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///367\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of\n__webpack_require__(90)('Set');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzP2E5OTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0Lm9mLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///368\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of\n__webpack_require__(90)('WeakMap');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAub2YuanM/MmRhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLm9mLmpzXG4vLyBtb2R1bGUgaWQgPSAzNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///369\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of\n__webpack_require__(90)('WeakSet');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQub2YuanM/MDRlNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrU2V0Jyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///370\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\n__webpack_require__(91)('Map');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanM/ZTJiOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLmZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDM3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///371\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from\n__webpack_require__(91)('Set');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanM/NjIwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LmZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDM3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///372\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from\n__webpack_require__(91)('WeakMap');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbS5qcz9lOTdjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDM3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///373\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from\n__webpack_require__(91)('WeakSet');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcud2Vhay1zZXQuZnJvbS5qcz9hOWQxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20uanNcbi8vIG1vZHVsZSBpZCA9IDM3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///374\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/tc39/proposal-global\nvar $export = __webpack_require__(0);\n\n$export($export.G, { global: __webpack_require__(4) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZ2xvYmFsLmpzPzBkMDciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDM3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///375\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/tc39/proposal-global\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'System', { global: __webpack_require__(4) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcz84ZmYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7IGdsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJykgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDM3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///376\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/ljharb/proposal-is-error\nvar $export = __webpack_require__(0);\nvar cof = __webpack_require__(28);\n\n$export($export.S, 'Error', {\n  isError: function isError(it) {\n    return cof(it) === 'Error';\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanM/NTNlNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWlzLWVycm9yXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0Vycm9yJywge1xuICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KSB7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qc1xuLy8gbW9kdWxlIGlkID0gMzc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///377\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', {\n  clamp: function clamp(x, lower, upper) {\n    return Math.min(upper, Math.max(lower, x));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5jbGFtcC5qcz81ZmEzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2xhbXA6IGZ1bmN0aW9uIGNsYW1wKHgsIGxvd2VyLCB1cHBlcikge1xuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguY2xhbXAuanNcbi8vIG1vZHVsZSBpZCA9IDM3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///378\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZC5qcz81YjRhIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgREVHX1BFUl9SQUQ6IE1hdGguUEkgLyAxODAgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQuanNcbi8vIG1vZHVsZSBpZCA9IDM3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///379\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = __webpack_require__(0);\nvar RAD_PER_DEG = 180 / Math.PI;\n\n$export($export.S, 'Math', {\n  degrees: function degrees(radians) {\n    return radians * RAD_PER_DEG;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5kZWdyZWVzLmpzP2I1YTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qc1xuLy8gbW9kdWxlIGlkID0gMzgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///380\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = __webpack_require__(0);\nvar scale = __webpack_require__(178);\nvar fround = __webpack_require__(158);\n\n$export($export.S, 'Math', {\n  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {\n    return fround(scale(x, inLow, inHigh, outLow, outHigh));\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5mc2NhbGUuanM/YmU3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XG4gICAgcmV0dXJuIGZyb3VuZChzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAzODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///381\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', {\n  iaddh: function iaddh(x0, x1, y0, y1) {\n    var $x0 = x0 >>> 0;\n    var $x1 = x1 >>> 0;\n    var $y0 = y0 >>> 0;\n    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcz80NzcyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzXG4vLyBtb2R1bGUgaWQgPSAzODJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///382\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', {\n  isubh: function isubh(x0, x1, y0, y1) {\n    var $x0 = x0 >>> 0;\n    var $x1 = x1 >>> 0;\n    var $y0 = y0 >>> 0;\n    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pc3ViaC5qcz9lYTIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSkge1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XG4gICAgdmFyICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanNcbi8vIG1vZHVsZSBpZCA9IDM4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///383\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', {\n  imulh: function imulh(u, v) {\n    var UINT16 = 0xffff;\n    var $u = +u;\n    var $v = +v;\n    var u0 = $u & UINT16;\n    var v0 = $v & UINT16;\n    var u1 = $u >> 16;\n    var v1 = $v >> 16;\n    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pbXVsaC5qcz8wNzc1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcbiAgICB2YXIgdCA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanNcbi8vIG1vZHVsZSBpZCA9IDM4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///384\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZy5qcz9kZWNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgUkFEX1BFUl9ERUc6IDE4MCAvIE1hdGguUEkgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcuanNcbi8vIG1vZHVsZSBpZCA9IDM4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///385\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = __webpack_require__(0);\nvar DEG_PER_RAD = Math.PI / 180;\n\n$export($export.S, 'Math', {\n  radians: function radians(degrees) {\n    return degrees * DEG_PER_RAD;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5yYWRpYW5zLmpzPzE3NWIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBERUdfUEVSX1JBRCA9IE1hdGguUEkgLyAxODA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgcmFkaWFuczogZnVuY3Rpb24gcmFkaWFucyhkZWdyZWVzKSB7XG4gICAgcmV0dXJuIGRlZ3JlZXMgKiBERUdfUEVSX1JBRDtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qc1xuLy8gbW9kdWxlIGlkID0gMzg2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///386\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', { scale: __webpack_require__(178) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qcz9iODQxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2NhbGU6IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zY2FsZS5qc1xuLy8gbW9kdWxlIGlkID0gMzg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///387\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', {\n  umulh: function umulh(u, v) {\n    var UINT16 = 0xffff;\n    var $u = +u;\n    var $v = +v;\n    var u0 = $u & UINT16;\n    var v0 = $v & UINT16;\n    var u1 = $u >>> 16;\n    var v1 = $v >>> 16;\n    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcz84YjRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KSB7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcbiAgICB2YXIgJHUgPSArdTtcbiAgICB2YXIgJHYgPSArdjtcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcbiAgICB2YXIgdTEgPSAkdSA+Pj4gMTY7XG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoLmpzXG4vLyBtb2R1bGUgaWQgPSAzODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///388\n");
    }, function(module, exports, __webpack_require__) {
        eval("// http://jfbastien.github.io/papers/Math.signbit.html\nvar $export = __webpack_require__(0);\n\n$export($export.S, 'Math', { signbit: function signbit(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zaWduYml0LmpzPzFmYmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cDovL2pmYmFzdGllbi5naXRodWIuaW8vcGFwZXJzL01hdGguc2lnbmJpdC5odG1sXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ25iaXQ6IGZ1bmN0aW9uIHNpZ25iaXQoeCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNpZ25iaXQuanNcbi8vIG1vZHVsZSBpZCA9IDM4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///389\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("// https://github.com/tc39/proposal-promise-finally\n\nvar $export = __webpack_require__(0);\nvar core = __webpack_require__(30);\nvar global = __webpack_require__(4);\nvar speciesConstructor = __webpack_require__(86);\nvar promiseResolve = __webpack_require__(165);\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzP2Y4Y2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnUHJvbWlzZScsIHsgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xuICByZXR1cm4gdGhpcy50aGVuKFxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHksXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcbiAgICB9IDogb25GaW5hbGx5XG4gICk7XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanNcbi8vIG1vZHVsZSBpZCA9IDM5MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///390\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://github.com/tc39/proposal-promise-try\nvar $export = __webpack_require__(0);\nvar newPromiseCapability = __webpack_require__(124);\nvar perform = __webpack_require__(164);\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucHJvbWlzZS50cnkuanM/NDFjNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLXRyeVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKHRoaXMpO1xuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UudHJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAzOTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///391\n");
    }, function(module, exports, __webpack_require__) {
        eval("var metadata = __webpack_require__(37);\nvar anObject = __webpack_require__(3);\nvar toMetaKey = metadata.key;\nvar ordinaryDefineOwnMetadata = metadata.set;\n\nmetadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {\n  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanM/Yzg5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDM5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///392\n");
    }, function(module, exports, __webpack_require__) {
        eval("var metadata = __webpack_require__(37);\nvar anObject = __webpack_require__(3);\nvar toMetaKey = metadata.key;\nvar getOrCreateMetadataMap = metadata.map;\nvar store = metadata.store;\n\nmetadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {\n  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);\n  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);\n  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;\n  if (metadataMap.size) return true;\n  var targetMetadata = store.get(target);\n  targetMetadata['delete'](targetKey);\n  return !!targetMetadata.size || store['delete'](target);\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanM/ZGVhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7XG52YXIgc3RvcmUgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcbiAgdmFyIHRhcmdldEtleSA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSk7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XG4gIGlmIChtZXRhZGF0YU1hcC5zaXplKSByZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDM5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///393\n");
    }, function(module, exports, __webpack_require__) {
        eval("var metadata = __webpack_require__(37);\nvar anObject = __webpack_require__(3);\nvar getPrototypeOf = __webpack_require__(25);\nvar ordinaryHasOwnMetadata = metadata.has;\nvar ordinaryGetOwnMetadata = metadata.get;\nvar toMetaKey = metadata.key;\n\nvar ordinaryGetMetadata = function (MetadataKey, O, P) {\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;\n};\n\nmetadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEuanM/MzQ3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZiAoaGFzT3duKSByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XG59O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMzk0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///394\n");
    }, function(module, exports, __webpack_require__) {
        eval("var Set = __webpack_require__(168);\nvar from = __webpack_require__(177);\nvar metadata = __webpack_require__(37);\nvar anObject = __webpack_require__(3);\nvar getPrototypeOf = __webpack_require__(25);\nvar ordinaryOwnMetadataKeys = metadata.keys;\nvar toMetaKey = metadata.key;\n\nvar ordinaryMetadataKeys = function (O, P) {\n  var oKeys = ordinaryOwnMetadataKeys(O, P);\n  var parent = getPrototypeOf(O);\n  if (parent === null) return oKeys;\n  var pKeys = ordinaryMetadataKeys(parent, P);\n  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;\n};\n\nmetadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {\n  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cy5qcz9iZjc4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBTZXQgPSByZXF1aXJlKCcuL2VzNi5zZXQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xudmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XG4gIHZhciBvS2V5cyA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanNcbi8vIG1vZHVsZSBpZCA9IDM5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///395\n");
    }, function(module, exports, __webpack_require__) {
        eval("var metadata = __webpack_require__(37);\nvar anObject = __webpack_require__(3);\nvar ordinaryGetOwnMetadata = metadata.get;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryGetOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzP2NkOTEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDM5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///396\n");
    }, function(module, exports, __webpack_require__) {
        eval("var metadata = __webpack_require__(37);\nvar anObject = __webpack_require__(3);\nvar ordinaryOwnMetadataKeys = metadata.keys;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {\n  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMuanM/YmVjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzXG4vLyBtb2R1bGUgaWQgPSAzOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///397\n");
    }, function(module, exports, __webpack_require__) {
        eval("var metadata = __webpack_require__(37);\nvar anObject = __webpack_require__(3);\nvar getPrototypeOf = __webpack_require__(25);\nvar ordinaryHasOwnMetadata = metadata.has;\nvar toMetaKey = metadata.key;\n\nvar ordinaryHasMetadata = function (MetadataKey, O, P) {\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if (hasOwn) return true;\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;\n};\n\nmetadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanM/ZjE2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhcztcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhLmpzXG4vLyBtb2R1bGUgaWQgPSAzOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///398\n");
    }, function(module, exports, __webpack_require__) {
        eval("var metadata = __webpack_require__(37);\nvar anObject = __webpack_require__(3);\nvar ordinaryHasOwnMetadata = metadata.has;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryHasOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzk5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhLmpzP2M4ZWIiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoeyBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59IH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDM5OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///399\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $metadata = __webpack_require__(37);\nvar anObject = __webpack_require__(3);\nvar aFunction = __webpack_require__(16);\nvar toMetaKey = $metadata.key;\nvar ordinaryDefineOwnMetadata = $metadata.set;\n\n$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {\n  return function decorator(target, targetKey) {\n    ordinaryDefineOwnMetadata(\n      metadataKey, metadataValue,\n      (targetKey !== undefined ? anObject : aFunction)(target),\n      toMetaKey(targetKey)\n    );\n  };\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcz8xMTlmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciAkbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIHRvTWV0YUtleSA9ICRtZXRhZGF0YS5rZXk7XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9ICRtZXRhZGF0YS5zZXQ7XG5cbiRtZXRhZGF0YS5leHAoeyBtZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSkge1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gNDAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///400\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask\nvar $export = __webpack_require__(0);\nvar microtask = __webpack_require__(123)();\nvar process = __webpack_require__(4).process;\nvar isNode = __webpack_require__(28)(process) == 'process';\n\n$export($export.G, {\n  asap: function asap(fn) {\n    var domain = isNode && process.domain;\n    microtask(domain ? domain.bind(fn) : fn);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXNhcC5qcz82OGNkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yd2FsZHJvbi90YzM5LW5vdGVzL2Jsb2IvbWFzdGVyL2VzNi8yMDE0LTA5L3NlcHQtMjUubWQjNTEwLWdsb2JhbGFzYXAtZm9yLWVucXVldWluZy1hLW1pY3JvdGFza1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIHByb2Nlc3MgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wcm9jZXNzO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbikge1xuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanNcbi8vIG1vZHVsZSBpZCA9IDQwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///401\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://github.com/zenparsing/es-observable\nvar $export = __webpack_require__(0);\nvar global = __webpack_require__(4);\nvar core = __webpack_require__(30);\nvar microtask = __webpack_require__(123)();\nvar OBSERVABLE = __webpack_require__(7)('observable');\nvar aFunction = __webpack_require__(16);\nvar anObject = __webpack_require__(3);\nvar anInstance = __webpack_require__(55);\nvar redefineAll = __webpack_require__(57);\nvar hide = __webpack_require__(18);\nvar forOf = __webpack_require__(56);\nvar RETURN = forOf.RETURN;\n\nvar getMethod = function (fn) {\n  return fn == null ? undefined : aFunction(fn);\n};\n\nvar cleanupSubscription = function (subscription) {\n  var cleanup = subscription._c;\n  if (cleanup) {\n    subscription._c = undefined;\n    cleanup();\n  }\n};\n\nvar subscriptionClosed = function (subscription) {\n  return subscription._o === undefined;\n};\n\nvar closeSubscription = function (subscription) {\n  if (!subscriptionClosed(subscription)) {\n    subscription._o = undefined;\n    cleanupSubscription(subscription);\n  }\n};\n\nvar Subscription = function (observer, subscriber) {\n  anObject(observer);\n  this._c = undefined;\n  this._o = observer;\n  observer = new SubscriptionObserver(this);\n  try {\n    var cleanup = subscriber(observer);\n    var subscription = cleanup;\n    if (cleanup != null) {\n      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };\n      else aFunction(cleanup);\n      this._c = cleanup;\n    }\n  } catch (e) {\n    observer.error(e);\n    return;\n  } if (subscriptionClosed(this)) cleanupSubscription(this);\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe() { closeSubscription(this); }\n});\n\nvar SubscriptionObserver = function (subscription) {\n  this._s = subscription;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value) {\n    var subscription = this._s;\n    if (!subscriptionClosed(subscription)) {\n      var observer = subscription._o;\n      try {\n        var m = getMethod(observer.next);\n        if (m) return m.call(observer, value);\n      } catch (e) {\n        try {\n          closeSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      }\n    }\n  },\n  error: function error(value) {\n    var subscription = this._s;\n    if (subscriptionClosed(subscription)) throw value;\n    var observer = subscription._o;\n    subscription._o = undefined;\n    try {\n      var m = getMethod(observer.error);\n      if (!m) throw value;\n      value = m.call(observer, value);\n    } catch (e) {\n      try {\n        cleanupSubscription(subscription);\n      } finally {\n        throw e;\n      }\n    } cleanupSubscription(subscription);\n    return value;\n  },\n  complete: function complete(value) {\n    var subscription = this._s;\n    if (!subscriptionClosed(subscription)) {\n      var observer = subscription._o;\n      subscription._o = undefined;\n      try {\n        var m = getMethod(observer.complete);\n        value = m ? m.call(observer, value) : undefined;\n      } catch (e) {\n        try {\n          cleanupSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      } cleanupSubscription(subscription);\n      return value;\n    }\n  }\n});\n\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);\n};\n\nredefineAll($Observable.prototype, {\n  subscribe: function subscribe(observer) {\n    return new Subscription(observer, this._f);\n  },\n  forEach: function forEach(fn) {\n    var that = this;\n    return new (core.Promise || global.Promise)(function (resolve, reject) {\n      aFunction(fn);\n      var subscription = that.subscribe({\n        next: function (value) {\n          try {\n            return fn(value);\n          } catch (e) {\n            reject(e);\n            subscription.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n    });\n  }\n});\n\nredefineAll($Observable, {\n  from: function from(x) {\n    var C = typeof this === 'function' ? this : $Observable;\n    var method = getMethod(anObject(x)[OBSERVABLE]);\n    if (method) {\n      var observable = anObject(method.call(x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n    return new C(function (observer) {\n      var done = false;\n      microtask(function () {\n        if (!done) {\n          try {\n            if (forOf(x, false, function (it) {\n              observer.next(it);\n              if (done) return RETURN;\n            }) === RETURN) return;\n          } catch (e) {\n            if (done) throw e;\n            observer.error(e);\n            return;\n          } observer.complete();\n        }\n      });\n      return function () { done = true; };\n    });\n  },\n  of: function of() {\n    for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];\n    return new (typeof this === 'function' ? this : $Observable)(function (observer) {\n      var done = false;\n      microtask(function () {\n        if (!done) {\n          for (var j = 0; j < items.length; ++j) {\n            observer.next(items[j]);\n            if (done) return;\n          } observer.complete();\n        }\n      });\n      return function () { done = true; };\n    });\n  }\n});\n\nhide($Observable.prototype, OBSERVABLE, function () { return this; });\n\n$export($export.G, { Observable: $Observable });\n\n__webpack_require__(54)('Observable');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qcz85ZTFkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIFJFVFVSTiA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZiAoY2xlYW51cCAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZG9uZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKSByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFkb25lKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XG4gICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JzZXJ2YWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gNDAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///402\n");
    }, function(module, exports, __webpack_require__) {
        eval("// ie9- setTimeout & setInterval additional parameters fix\nvar global = __webpack_require__(4);\nvar $export = __webpack_require__(0);\nvar navigator = global.navigator;\nvar slice = [].slice;\nvar MSIE = !!navigator && /MSIE .\\./.test(navigator.userAgent); // <- dirty ie9- check\nvar wrap = function (set) {\n  return function (fn, time /* , ...args */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : false;\n    return set(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n    } : fn, time);\n  };\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout: wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzP2JmYzUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xudmFyIHNsaWNlID0gW10uc2xpY2U7XG52YXIgTVNJRSA9ICEhbmF2aWdhdG9yICYmIC9NU0lFIC5cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24gKHNldCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IGZhbHNlO1xuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGZuLCB0aW1lKTtcbiAgfTtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanNcbi8vIG1vZHVsZSBpZCA9IDQwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///403\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(0);\nvar $task = __webpack_require__(122);\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzPzc2MjciXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDQwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///404\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $iterators = __webpack_require__(121);\nvar getKeys = __webpack_require__(50);\nvar redefine = __webpack_require__(19);\nvar global = __webpack_require__(4);\nvar hide = __webpack_require__(18);\nvar Iterators = __webpack_require__(63);\nvar wks = __webpack_require__(7);\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzPzdmMWQiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qc1xuLy8gbW9kdWxlIGlkID0gNDA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///405\n");
    }, function(module, exports, __webpack_require__) {
        eval('/* WEBPACK VAR INJECTION */(function(global) {/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  var inModule = typeof module === "object";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we\'re in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don\'t bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we\'re in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = "GeneratorFunction";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = "GeneratorFunction";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === "object" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = "Generator";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === "object" ? global :\n  typeof window === "object" ? window :\n  typeof self === "object" ? self : this\n);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(144)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanM/Y2U0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGdsb2JhbC5wcm9jZXNzID09PSBcIm9iamVjdFwiICYmIGdsb2JhbC5wcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanNcbi8vIG1vZHVsZSBpZCA9IDQwNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///406\n');
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(408);\nmodule.exports = __webpack_require__(30).RegExp.escape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcz81YjA5Il0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlLmpzXG4vLyBtb2R1bGUgaWQgPSA0MDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///407\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/benjamingr/RexExp.escape\nvar $export = __webpack_require__(0);\nvar $re = __webpack_require__(409)(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanM/YWY2MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywgeyBlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCkgeyByZXR1cm4gJHJlKGl0KTsgfSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUuanNcbi8vIG1vZHVsZSBpZCA9IDQwOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///408\n");
    }, function(module, exports) {
        eval("module.exports = function (regExp, replace) {\n  var replacer = replace === Object(replace) ? function (part) {\n    return replace[part];\n  } : replace;\n  return function (it) {\n    return String(it).replace(regExp, replacer);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanM/OWVhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24gKHBhcnQpIHtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVwbGFjZXIuanNcbi8vIG1vZHVsZSBpZCA9IDQwOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///409\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _assign = __webpack_require__(96);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _logLevels = __webpack_require__(434);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _Registry = __webpack_require__(435);\n\nvar _Registry2 = _interopRequireDefault(_Registry);\n\nvar _IdentityModule = __webpack_require__(465);\n\nvar _IdentityModule2 = _interopRequireDefault(_IdentityModule);\n\nvar _PEP = __webpack_require__(470);\n\nvar _PEP2 = _interopRequireDefault(_PEP);\n\nvar _MessageBus = __webpack_require__(481);\n\nvar _MessageBus2 = _interopRequireDefault(_MessageBus);\n\nvar _utils = __webpack_require__(15);\n\nvar _AddressAllocation = __webpack_require__(99);\n\nvar _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);\n\nvar _Loader = __webpack_require__(483);\n\nvar _Loader2 = _interopRequireDefault(_Loader);\n\nvar _Descriptors = __webpack_require__(484);\n\nvar _Descriptors2 = _interopRequireDefault(_Descriptors);\n\nvar _runtimeConfiguration = __webpack_require__(485);\n\nvar _runtimeUtils = __webpack_require__(138);\n\nvar _GraphConnector = __webpack_require__(486);\n\nvar _GraphConnector2 = _interopRequireDefault(_GraphConnector);\n\nvar _CoreDiscovery = __webpack_require__(488);\n\nvar _CoreDiscovery2 = _interopRequireDefault(_CoreDiscovery);\n\nvar _DataObjectsStorage = __webpack_require__(489);\n\nvar _DataObjectsStorage2 = _interopRequireDefault(_DataObjectsStorage);\n\nvar _HypertyResourcesStorage = __webpack_require__(494);\n\nvar _HypertyResourcesStorage2 = _interopRequireDefault(_HypertyResourcesStorage);\n\nvar _SyncherManager = __webpack_require__(495);\n\nvar _SyncherManager2 = _interopRequireDefault(_SyncherManager);\n\nvar _SubscriptionManager = __webpack_require__(506);\n\nvar _SubscriptionManager2 = _interopRequireDefault(_SubscriptionManager);\n\nvar _RuntimeCoreCtx = __webpack_require__(508);\n\nvar _RuntimeCoreCtx2 = _interopRequireDefault(_RuntimeCoreCtx);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n// import 'babel-polyfill';\n\nvar log = logger.getLogger('RuntimeUA');\n\n//Main dependecies\n\n\n// Log System\n\n/**\n * Runtime User Agent Interface will process all the dependecies of the core runtime;\n * @author Vitor Silva [vitor-t-silva@telecom.pt]\n * @version 0.4.0\n *\n * @property {runtimeFactory} runtimeFactory - Specific implementation for all environments;\n * @property {RuntimeCatalogue} runtimeCatalogue - Catalogue of components can be installed;\n * @property {runtimeURL} runtimeURL - This identify the core runtime, should be unique;\n * @property {IdentityModule} identityModule - Identity Module;\n * @property {PEP} policyEngine - Policy Engine Module;\n * @property {Registry} registry - Registry Module;\n * @property {MessageBus} messageBus - Message Bus is used like a router to redirect the messages from one component to other(s)\n * @property {GraphConnector} graphConnector - Graph Connector handling GUID and contacts\n * @property {CoreDiscovery} coreDiscovery - Discovery for discovery hyperties/dataObjects\n */\nvar RuntimeUA = function () {\n\n  /**\n   * Create a new instance of Runtime User Agent\n   * @param {descriptor} runtimeDescriptor - pass all the hyperty runtime descriptor\n   * @param {runtimeFactory} runtimeFactory - Specific implementation for the environment where the core runtime will run;\n   * @param {domain} domainURL - specify the domain base for the runtime;\n   */\n  function RuntimeUA(runtimeDescriptor, runtimeFactory, domain) {\n    (0, _classCallCheck3.default)(this, RuntimeUA);\n\n    if (!runtimeDescriptor) throw new Error('The runtime descriptor is a needed parameter');\n    if (!runtimeFactory) throw new Error('The sandbox factory is a needed parameter');\n    if (!domain) throw new Error('You need the domain of runtime');\n\n    // Configuration object with information related with servers\n    this.runtimeConfiguration = (0, _assign2.default)({ domain: domain }, _runtimeConfiguration.runtimeConfiguration);\n    this.runtimeFactory = runtimeFactory;\n    this.runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();\n\n    this.log = log;\n    this.logLevels = _logLevels.log;\n\n    if (runtimeDescriptor.p2pHandlerStub && typeof runtimeDescriptor.p2pHandlerStub === 'string' && runtimeDescriptor.p2pHandlerStub.includes('://')) {\n      this.p2p = true;\n    } else {\n      this.p2p = false;\n    }\n\n    _runtimeUtils.runtimeUtils.runtimeDescriptor = runtimeDescriptor;\n    this.runtimeUtils = _runtimeUtils.runtimeUtils;\n\n    if (typeof runtimeFactory.createRuntimeCatalogue === 'function') {\n      this.persistenceManager = runtimeFactory.createRuntimeCatalogue();\n    } else {\n      throw new Error('Check your Runtime Factory because it needs the Runtime Catalogue implementation');\n    }\n\n    if (typeof runtimeFactory.persistenceManager === 'function') {\n      this.persistenceManager = runtimeFactory.persistenceManager();\n    } else {\n      throw new Error('Check your Runtime Factory because it needs the Persistence Manager implementation');\n    }\n\n    if (typeof runtimeFactory.storageManager === 'function') {\n      this.storageManager = runtimeFactory.storageManager();\n    } else {\n      throw new Error('Check your Runtime Factory because it needs the Storage Manager implementation');\n    }\n\n    if (typeof runtimeFactory.runtimeCapabilities === 'function') {\n      this.runtimeCapabilities = runtimeFactory.runtimeCapabilities(this.storageManager);\n    } else {\n      log.info('Check your RuntimeFactory because it needs the Runtime Capabilities implementation');\n    }\n  }\n\n  /**\n   * Intialize the installation of runtime\n   *\n   * @access public\n   * @return {Promise<Boolean, Error>} this is Promise and if the installation process happened without any problems returns true otherwise the error.\n   *\n   * @memberOf RuntimeUA\n   */\n\n\n  (0, _createClass3.default)(RuntimeUA, [{\n    key: 'init',\n    value: function init() {\n      var _this2 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this2.domain = _this2.runtimeConfiguration.domain;\n\n        try {\n          var getCapabilities = _this2.runtimeCapabilities.getRuntimeCapabilities();\n          var getRuntimeURL = _this2.storageManager.get('runtime:URL');\n          var getStoredDataObjects = _this2.storageManager.get('syncherManager:ObjectURLs');\n          var getHypertyStorageObjects = _this2.storageManager.get('hypertyResources');\n          var getP2PHandlerURL = _this2.storageManager.get('p2pHandler:URL');\n\n          _promise2.default.all([getRuntimeURL, getCapabilities, getStoredDataObjects, getHypertyStorageObjects, getP2PHandlerURL]).then(function (results) {\n\n            _this2.runtimeURL = results[0] ? results[0].runtimeURL : results[0];\n            if (!_this2.runtimeURL) {\n              _this2.runtimeURL = 'runtime://' + _this2.domain + '/' + (0, _utils.generateGUID)();\n              _this2.storageManager.set('runtime:URL', 1, { runtimeURL: _this2.runtimeURL });\n            }\n\n            _this2.capabilities = results[1];\n            (0, _assign2.default)(_runtimeUtils.runtimeUtils.runtimeCapabilities.constraints, results[1]);\n\n            _this2._dataObjectsStorage = new _DataObjectsStorage2.default(_this2.storageManager, results[2] || {});\n\n            _this2._hypertyResources = results[3] || {};\n\n            _this2.p2pHandlerURL = results[4] ? results[4].p2pHandlerURL : results[4];\n            if (!_this2.p2pHandlerURL) {\n              _this2.p2pHandlerURL = _this2.runtimeURL + '/p2phandler/' + (0, _utils.generateGUID)();\n              log.info('[RuntimeUA - init] P2PHandlerURL: ', _this2.p2pHandlerURL);\n\n              _this2.storageManager.set('p2pHandler:URL', 1, { p2pHandlerURL: _this2.p2pHandlerURL });\n            }\n\n            return _this2._loadComponents();\n          }).then(function (status) {\n\n            _this2._hypertyResourcesStorage = new _HypertyResourcesStorage2.default(_this2.runtimeURL, _this2.messageBus, _this2.storageManager, _this2._hypertyResources);\n\n            if (_this2.p2p) {\n              log.info('[RuntimeUA - init] load p2pHandler: ', status);\n              return _this2._loadP2PHandler();\n            } else {\n              log.info('[RuntimeUA - init] P2P not supported');\n              return 'P2P Not Supported';\n            }\n          }).then(function (result) {\n            log.info('[runtime ua - init] - status: ', result);\n            resolve(true);\n          }, function (reason) {\n            log.error('ERROR: ', reason);\n            resolve(true);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n  }, {\n    key: '_loadP2PHandler',\n    value: function _loadP2PHandler() {\n      var _this3 = this;\n\n      return new _promise2.default(function (resolve) {\n\n        var runtimeDescriptor = _runtimeUtils.runtimeUtils.runtimeDescriptor;\n        var p2pStubHandler = runtimeDescriptor.p2pHandlerStub;\n\n        var p2pConfig = {\n          isHandlerStub: true,\n          runtimeURL: _this3.runtimeURL\n        };\n\n        log.log('[RuntimeUA loadP2PHandler] P2PStubHandler: ', p2pStubHandler);\n\n        _this3.loader.loadStub(p2pStubHandler, p2pConfig).then(function (result) {\n\n          var runtimeUAURL = _this3.runtimeURL + '/ua';\n          var msg = {\n            type: 'subscribe',\n            from: runtimeUAURL,\n            to: 'domain://msg-node.' + _this3.domain + '/sm',\n            body: {\n              subscribe: [result.url],\n              source: _this3.runtimeURL\n            }\n          };\n\n          _this3.messageBus.addListener(runtimeUAURL, function (msg) {\n            log.log('[runtime ua - listener] - receive msg: ', msg);\n          });\n\n          _this3.messageBus.postMessage(msg, function (reply) {\n            log.log('[runtime ua - postMessage] - reply: ', reply);\n          });\n\n          log.info('[runtime ua - p2p installation] - success: ', result);\n          resolve(true);\n        }).catch(function (reason) {\n          log.info('[runtime ua - p2p installation] - fail: ', reason);\n          resolve(false);\n        });\n      });\n    }\n\n    /**\n     *\n     * @access private\n     * @return {Promise<Boolean, Error>} this is Promise and returns true if all components are loaded with success or an error if someone fails.\n     *\n     * @memberOf RuntimeUA\n     */\n\n  }, {\n    key: '_loadComponents',\n    value: function _loadComponents() {\n      var _this4 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        try {\n\n          // Prepare the on instance to handle with the fallbacks and runtimeCatalogue;\n          _this4.descriptorInstance = new _Descriptors2.default(_this4.runtimeURL, _this4.runtimeCatalogue, _this4.runtimeConfiguration);\n\n          // Prepare the loader to load the hyperties, protostubs and idpproxy;\n          _this4.loader = new _Loader2.default(_this4.runtimeURL, _this4.runtimeConfiguration, _this4.descriptorInstance);\n\n          // Instantiate the identity Module\n          _this4.identityModule = new _IdentityModule2.default(_this4.runtimeURL, _this4.runtimeCapabilities, _this4.storageManager, _this4._dataObjectsStorage, _this4.runtimeFactory);\n\n          // Use the sandbox factory to create an AppSandbox;\n          // In the future can be decided by policyEngine if we need\n          // create a AppSandbox or not;\n          var appSandbox = _this4.runtimeFactory.createAppSandbox();\n\n          // Instantiate the Registry Module\n          _this4.registry = new _Registry2.default(_this4.runtimeURL, appSandbox, _this4.identityModule, _this4.runtimeCatalogue, _this4.runtimeCapabilities, _this4.storageManager, _this4.p2pHandlerURL);\n\n          // Set the loader to load Hyperties, Stubs and IdpProxies\n          _this4.registry.loader = _this4.loader;\n\n          // Instantiate the Message Bus\n          _this4.messageBus = new _MessageBus2.default(_this4.registry);\n\n          // Prepare the address allocation instance;\n          _this4.addressAllocation = new _AddressAllocation2.default(_this4.runtimeURL, _this4.messageBus, _this4.registry);\n\n          // Instantiate the Policy Engine\n          _this4.policyEngine = new _PEP2.default(new _RuntimeCoreCtx2.default(_this4.runtimeURL, _this4.identityModule, _this4.registry, _this4.storageManager, _this4.runtimeCapabilities));\n\n          _this4.messageBus.pipeline.handlers = [\n\n          // Policy message authorise\n          function (ctx) {\n            _this4.policyEngine.authorise(ctx.msg).then(function (changedMgs) {\n              ctx.msg = changedMgs;\n              ctx.next();\n            }).catch(function (reason) {\n              log.error(reason);\n              ctx.fail(reason);\n            });\n          }];\n\n          // Instantiate the Graph Connector\n          _this4.graphConnector =  true ? new _GraphConnector2.default(_this4.runtimeURL, _this4.messageBus, _this4.storageManager) : null;\n\n          // Instantiate Discovery\n          _this4.coreDiscovery = new _CoreDiscovery2.default(_this4.runtimeURL, _this4.messageBus, _this4.graphConnector, _this4.runtimeFactory, _this4.registry);\n\n          // Add to App Sandbox the listener;\n          appSandbox.addListener('*', function (msg) {\n            _this4.messageBus.postMessage(msg);\n          });\n\n          // Register messageBus on Registry\n          _this4.registry.messageBus = _this4.messageBus;\n\n          // Policy Engine\n          _this4.policyEngine.messageBus = _this4.messageBus;\n\n          // Register messageBus on IDM\n          _this4.identityModule.messageBus = _this4.messageBus;\n\n          // Register registry on IdentityModule\n          _this4.identityModule.registry = _this4.registry;\n\n          // Register coreDiscovery on IdentityModule\n          _this4.identityModule.coreDiscovery = _this4.coreDiscovery;\n\n          // Use sandbox factory to use specific methods\n          // and set the message bus to the factory\n          _this4.runtimeFactory.messageBus = _this4.messageBus;\n\n          // Instanciate the SyncherManager;\n          _this4.syncherManager = new _SyncherManager2.default(_this4.runtimeURL, _this4.messageBus, _this4.registry, _this4.runtimeCatalogue, _this4.storageManager, null, _this4._dataObjectsStorage, _this4.identityModule);\n\n          // Set into loader the needed components;\n          _this4.loader.runtimeURL = _this4.runtimeURL;\n          _this4.loader.messageBus = _this4.messageBus;\n          _this4.loader.registry = _this4.registry;\n          _this4.loader.runtimeCatalogue = _this4.runtimeCatalogue;\n          _this4.loader.runtimeFactory = _this4.runtimeFactory;\n\n          //Instantiate Discovery Lib for notification testing\n          // this.discovery = new Discovery(\"hyperty://localhost/test\", this.runtimeURL, this.messageBus);\n          // this.loadStub(\"localhost\");\n          // setTimeout(() => {\n          //   this.discovery.discoverHypertiesDO(\"user://google.com/openidtest20@gmail.com\")\n          //   .then(hyperties => {\n          //     hyperties.forEach(hyperty =>{\n          //       hyperty.onLive(() => log.log(`Notification from ${hyperty.data.hypertyID} changed to live`));\n          //       hyperty.onDisconnected(() => log.log(`Notification from ${hyperty.data.hypertyID} changed to disconnected`));\n          //     });\n          //   });\n          // }, 2000);\n\n          // Instanciate the SubscriptionManager;\n          _this4.subscriptionManager = new _SubscriptionManager2.default(_this4.runtimeURL, _this4.messageBus, _this4.storageManager);\n\n          // this.subscriptionManager.init().then(()=>{\n          //   resolve(true);\n          // });\n\n          var prepareComponents = [];\n          prepareComponents.push(_this4.subscriptionManager.init());\n          prepareComponents.push(_this4.identityModule.loadIdentities());\n          prepareComponents.push(_this4.identityModule.loadSessionKeys());\n\n          _promise2.default.all(prepareComponents).then(function (result) {\n            if (result.length === 3) {\n              resolve(true);\n            } else {\n              reject('[RuntimeUA._loadComponents] Error ] ', result);\n            }\n          }).catch(function (reason) {\n            throw Error(reason);\n          });\n        } catch (e) {\n          reject(e);\n        }\n      });\n    }\n\n    /**\n     * Deploy Hyperty from Catalogue URL\n     *\n     * @see https://github.com/reTHINK-project/specs/tree/master/datamodel/core/address\n     *\n     * @param {URL.HypertyCatalogueURL} hypertyCatalogueURL - The Catalogue URL used to identify descriptors in the Catalogue.\n     * @param {boolean|URL.HypertyURL} [reuseURL=false] reuseURL - reuseURL is used to reuse the hypertyURL previously registred, by default the reuse is disabled;\n     * @param {URL} appURL - the app url address; // TODO: improve this description;\n     * @returns {Promise<Boolean, Error>} this is Promise and returns true if all components are loaded with success or an error if someone fails.\n     *\n     * @memberOf RuntimeUA\n     */\n\n  }, {\n    key: 'loadHyperty',\n    value: function loadHyperty(hypertyCatalogueURL) {\n      var reuseURL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var appURL = arguments[2];\n\n\n      if (!hypertyCatalogueURL) throw new Error('Hyperty descriptor url parameter is needed');\n      return this.loader.loadHyperty(hypertyCatalogueURL, reuseURL, appURL);\n    }\n\n    /**\n    * Deploy Stub from Catalogue URL or domain url\n    * @param  {URL.URL}     domain          domain\n    */\n\n  }, {\n    key: 'loadStub',\n    value: function loadStub(protocolstubCatalogueURL) {\n\n      if (!protocolstubCatalogueURL) throw new Error('ProtoStub descriptor url parameter is needed');\n      return this.loader.loadStub(protocolstubCatalogueURL);\n    }\n\n    /**\n    * Deploy idpProxy from Catalogue URL or domain url\n    * @param  {URL.URL}     domain          domain\n    */\n\n  }, {\n    key: 'loadIdpProxy',\n    value: function loadIdpProxy(ipdProxyCatalogueURL) {\n      console.log('ipdProxyCatalogueURL', ipdProxyCatalogueURL);\n\n      if (!ipdProxyCatalogueURL) throw new Error('The IDP Proxy URL is a needed parameter, could be a DOMAIN or a URL');\n      return this.loader.loadIdpProxy(ipdProxyCatalogueURL);\n    }\n\n    /**\n     * Used to close all the runtime; Unregister all hyperties;\n     * @return {Promise<Boolean>} result of the close method, with true or false to the operation success;\n     */\n\n  }, {\n    key: 'close',\n    value: function close() {\n      var _this = this;\n\n      log.info('Unregister all hyperties');\n      return new _promise2.default(function (resolve, reject) {\n\n        _this.registry.unregisterAllHyperties().then(function (result) {\n          log.info('All the hyperties are unregisted with Success:', result);\n          resolve(true);\n        }).catch(function (reason) {\n          log.error('Failed to unregister the hyperties', reason);\n          reject(false);\n        });\n      });\n    }\n  }]);\n  return RuntimeUA;\n}();\n\nexports.default = RuntimeUA;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9ydW50aW1lL1J1bnRpbWVVQS5qcz9iZmFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuLy8gaW1wb3J0ICdiYWJlbC1wb2x5ZmlsbCc7XG5cbmltcG9ydCB7IGxvZyBhcyBsb2dMZXZlbHMgfSBmcm9tICcuLi9sb2dMZXZlbHMnO1xuXG4vLyBMb2cgU3lzdGVtXG5pbXBvcnQgKiBhcyBsb2dnZXIgZnJvbSAnbG9nbGV2ZWwnO1xubGV0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ1J1bnRpbWVVQScpO1xuXG4vL01haW4gZGVwZW5kZWNpZXNcbmltcG9ydCBSZWdpc3RyeSBmcm9tICcuLi9yZWdpc3RyeS9SZWdpc3RyeSc7XG5pbXBvcnQgSWRlbnRpdHlNb2R1bGUgZnJvbSAnLi4vaWRlbnRpdHkvSWRlbnRpdHlNb2R1bGUnO1xuaW1wb3J0IFBFUCBmcm9tICcuLi9wb2xpY3kvUEVQJztcbmltcG9ydCBNZXNzYWdlQnVzIGZyb20gJy4uL2J1cy9NZXNzYWdlQnVzJztcbmltcG9ydCB7IGdlbmVyYXRlR1VJRCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBBZGRyZXNzQWxsb2NhdGlvbiBmcm9tICcuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uJztcblxuaW1wb3J0IExvYWRlciBmcm9tICcuL0xvYWRlcic7XG5pbXBvcnQgRGVzY3JpcHRvcnMgZnJvbSAnLi9EZXNjcmlwdG9ycyc7XG5cbmltcG9ydCB7IHJ1bnRpbWVDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9ydW50aW1lQ29uZmlndXJhdGlvbic7XG5pbXBvcnQgeyBydW50aW1lVXRpbHMgfSBmcm9tICcuL3J1bnRpbWVVdGlscyc7XG5cbmltcG9ydCBHcmFwaENvbm5lY3RvciBmcm9tICcuLi9ncmFwaGNvbm5lY3Rvci9HcmFwaENvbm5lY3Rvcic7XG5cbmltcG9ydCBDb3JlRGlzY292ZXJ5IGZyb20gJy4uL2Rpc2NvdmVyeS9Db3JlRGlzY292ZXJ5JztcblxuaW1wb3J0IERhdGFPYmplY3RzU3RvcmFnZSBmcm9tICcuLi9zdG9yZS1vYmplY3RzL0RhdGFPYmplY3RzU3RvcmFnZSc7XG5pbXBvcnQgSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2UgZnJvbSAnLi4vaHlwZXJ0eS1yZXNvdXJjZXMtc3RvcmFnZS9IeXBlcnR5UmVzb3VyY2VzU3RvcmFnZSc7XG5pbXBvcnQgU3luY2hlck1hbmFnZXIgZnJvbSAnLi4vc3luY2hlci9TeW5jaGVyTWFuYWdlcic7XG5pbXBvcnQgU3Vic2NyaXB0aW9uTWFuYWdlciBmcm9tICcuLi9zdWJzY3JpcHRpb25NYW5hZ2VyL1N1YnNjcmlwdGlvbk1hbmFnZXInO1xuaW1wb3J0IFJ1bnRpbWVDb3JlQ3R4IGZyb20gJy4uL3BvbGljeS9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4JztcblxuLyoqXG4gKiBSdW50aW1lIFVzZXIgQWdlbnQgSW50ZXJmYWNlIHdpbGwgcHJvY2VzcyBhbGwgdGhlIGRlcGVuZGVjaWVzIG9mIHRoZSBjb3JlIHJ1bnRpbWU7XG4gKiBAYXV0aG9yIFZpdG9yIFNpbHZhIFt2aXRvci10LXNpbHZhQHRlbGVjb20ucHRdXG4gKiBAdmVyc2lvbiAwLjQuMFxuICpcbiAqIEBwcm9wZXJ0eSB7cnVudGltZUZhY3Rvcnl9IHJ1bnRpbWVGYWN0b3J5IC0gU3BlY2lmaWMgaW1wbGVtZW50YXRpb24gZm9yIGFsbCBlbnZpcm9ubWVudHM7XG4gKiBAcHJvcGVydHkge1J1bnRpbWVDYXRhbG9ndWV9IHJ1bnRpbWVDYXRhbG9ndWUgLSBDYXRhbG9ndWUgb2YgY29tcG9uZW50cyBjYW4gYmUgaW5zdGFsbGVkO1xuICogQHByb3BlcnR5IHtydW50aW1lVVJMfSBydW50aW1lVVJMIC0gVGhpcyBpZGVudGlmeSB0aGUgY29yZSBydW50aW1lLCBzaG91bGQgYmUgdW5pcXVlO1xuICogQHByb3BlcnR5IHtJZGVudGl0eU1vZHVsZX0gaWRlbnRpdHlNb2R1bGUgLSBJZGVudGl0eSBNb2R1bGU7XG4gKiBAcHJvcGVydHkge1BFUH0gcG9saWN5RW5naW5lIC0gUG9saWN5IEVuZ2luZSBNb2R1bGU7XG4gKiBAcHJvcGVydHkge1JlZ2lzdHJ5fSByZWdpc3RyeSAtIFJlZ2lzdHJ5IE1vZHVsZTtcbiAqIEBwcm9wZXJ0eSB7TWVzc2FnZUJ1c30gbWVzc2FnZUJ1cyAtIE1lc3NhZ2UgQnVzIGlzIHVzZWQgbGlrZSBhIHJvdXRlciB0byByZWRpcmVjdCB0aGUgbWVzc2FnZXMgZnJvbSBvbmUgY29tcG9uZW50IHRvIG90aGVyKHMpXG4gKiBAcHJvcGVydHkge0dyYXBoQ29ubmVjdG9yfSBncmFwaENvbm5lY3RvciAtIEdyYXBoIENvbm5lY3RvciBoYW5kbGluZyBHVUlEIGFuZCBjb250YWN0c1xuICogQHByb3BlcnR5IHtDb3JlRGlzY292ZXJ5fSBjb3JlRGlzY292ZXJ5IC0gRGlzY292ZXJ5IGZvciBkaXNjb3ZlcnkgaHlwZXJ0aWVzL2RhdGFPYmplY3RzXG4gKi9cbmNsYXNzIFJ1bnRpbWVVQSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBSdW50aW1lIFVzZXIgQWdlbnRcbiAgICogQHBhcmFtIHtkZXNjcmlwdG9yfSBydW50aW1lRGVzY3JpcHRvciAtIHBhc3MgYWxsIHRoZSBoeXBlcnR5IHJ1bnRpbWUgZGVzY3JpcHRvclxuICAgKiBAcGFyYW0ge3J1bnRpbWVGYWN0b3J5fSBydW50aW1lRmFjdG9yeSAtIFNwZWNpZmljIGltcGxlbWVudGF0aW9uIGZvciB0aGUgZW52aXJvbm1lbnQgd2hlcmUgdGhlIGNvcmUgcnVudGltZSB3aWxsIHJ1bjtcbiAgICogQHBhcmFtIHtkb21haW59IGRvbWFpblVSTCAtIHNwZWNpZnkgdGhlIGRvbWFpbiBiYXNlIGZvciB0aGUgcnVudGltZTtcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVEZXNjcmlwdG9yLCBydW50aW1lRmFjdG9yeSwgZG9tYWluKSB7XG4gICAgaWYgKCFydW50aW1lRGVzY3JpcHRvcikgdGhyb3cgbmV3IEVycm9yKCdUaGUgcnVudGltZSBkZXNjcmlwdG9yIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpO1xuICAgIGlmICghcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIHNhbmRib3ggZmFjdG9yeSBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcbiAgICBpZiAoIWRvbWFpbikgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0aGUgZG9tYWluIG9mIHJ1bnRpbWUnKTtcblxuICAgIC8vIENvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gcmVsYXRlZCB3aXRoIHNlcnZlcnNcbiAgICB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7ZG9tYWluOiBkb21haW59LCBydW50aW1lQ29uZmlndXJhdGlvbik7XG4gICAgdGhpcy5ydW50aW1lRmFjdG9yeSA9IHJ1bnRpbWVGYWN0b3J5O1xuICAgIHRoaXMucnVudGltZUNhdGFsb2d1ZSA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTtcblxuICAgIHRoaXMubG9nID0gbG9nO1xuICAgIHRoaXMubG9nTGV2ZWxzID0gbG9nTGV2ZWxzO1xuXG4gICAgaWYgKHJ1bnRpbWVEZXNjcmlwdG9yLnAycEhhbmRsZXJTdHViICYmIHR5cGVvZiBydW50aW1lRGVzY3JpcHRvci5wMnBIYW5kbGVyU3R1YiAgPT09ICdzdHJpbmcnICYmIHJ1bnRpbWVEZXNjcmlwdG9yLnAycEhhbmRsZXJTdHViLmluY2x1ZGVzKCc6Ly8nKSkge1xuICAgICAgdGhpcy5wMnAgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnAycCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvciA9IHJ1bnRpbWVEZXNjcmlwdG9yO1xuICAgIHRoaXMucnVudGltZVV0aWxzID0gcnVudGltZVV0aWxzO1xuXG4gICAgaWYgKHR5cGVvZiBydW50aW1lRmFjdG9yeS5jcmVhdGVSdW50aW1lQ2F0YWxvZ3VlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaGVjayB5b3VyIFJ1bnRpbWUgRmFjdG9yeSBiZWNhdXNlIGl0IG5lZWRzIHRoZSBSdW50aW1lIENhdGFsb2d1ZSBpbXBsZW1lbnRhdGlvbicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3RvcnkucGVyc2lzdGVuY2VNYW5hZ2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LnBlcnNpc3RlbmNlTWFuYWdlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZHMgdGhlIFBlcnNpc3RlbmNlIE1hbmFnZXIgaW1wbGVtZW50YXRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJ1bnRpbWVGYWN0b3J5LnN0b3JhZ2VNYW5hZ2VyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyID0gcnVudGltZUZhY3Rvcnkuc3RvcmFnZU1hbmFnZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaGVjayB5b3VyIFJ1bnRpbWUgRmFjdG9yeSBiZWNhdXNlIGl0IG5lZWRzIHRoZSBTdG9yYWdlIE1hbmFnZXIgaW1wbGVtZW50YXRpb24nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJ1bnRpbWVGYWN0b3J5LnJ1bnRpbWVDYXBhYmlsaXRpZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMucnVudGltZUNhcGFiaWxpdGllcyA9IHJ1bnRpbWVGYWN0b3J5LnJ1bnRpbWVDYXBhYmlsaXRpZXModGhpcy5zdG9yYWdlTWFuYWdlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5pbmZvKCdDaGVjayB5b3VyIFJ1bnRpbWVGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZHMgdGhlIFJ1bnRpbWUgQ2FwYWJpbGl0aWVzIGltcGxlbWVudGF0aW9uJyk7XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogSW50aWFsaXplIHRoZSBpbnN0YWxsYXRpb24gb2YgcnVudGltZVxuICAgKlxuICAgKiBAYWNjZXNzIHB1YmxpY1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJvb2xlYW4sIEVycm9yPn0gdGhpcyBpcyBQcm9taXNlIGFuZCBpZiB0aGUgaW5zdGFsbGF0aW9uIHByb2Nlc3MgaGFwcGVuZWQgd2l0aG91dCBhbnkgcHJvYmxlbXMgcmV0dXJucyB0cnVlIG90aGVyd2lzZSB0aGUgZXJyb3IuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBSdW50aW1lVUFcbiAgICovXG4gIGluaXQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdGhpcy5kb21haW4gPSB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLmRvbWFpbjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGdldENhcGFiaWxpdGllcyA9IHRoaXMucnVudGltZUNhcGFiaWxpdGllcy5nZXRSdW50aW1lQ2FwYWJpbGl0aWVzKCk7XG4gICAgICAgIGxldCBnZXRSdW50aW1lVVJMID0gdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3J1bnRpbWU6VVJMJyk7XG4gICAgICAgIGxldCBnZXRTdG9yZWREYXRhT2JqZWN0cyA9IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdzeW5jaGVyTWFuYWdlcjpPYmplY3RVUkxzJyk7XG4gICAgICAgIGxldCBnZXRIeXBlcnR5U3RvcmFnZU9iamVjdHMgPSB0aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgnaHlwZXJ0eVJlc291cmNlcycpO1xuICAgICAgICBsZXQgZ2V0UDJQSGFuZGxlclVSTCA9IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdwMnBIYW5kbGVyOlVSTCcpO1xuXG4gICAgICAgIFByb21pc2UuYWxsKFtnZXRSdW50aW1lVVJMLCBnZXRDYXBhYmlsaXRpZXMsIGdldFN0b3JlZERhdGFPYmplY3RzLCBnZXRIeXBlcnR5U3RvcmFnZU9iamVjdHMsIGdldFAyUEhhbmRsZXJVUkxdKS50aGVuKChyZXN1bHRzKSA9PiB7XG5cbiAgICAgICAgICB0aGlzLnJ1bnRpbWVVUkwgPSByZXN1bHRzWzBdID8gcmVzdWx0c1swXS5ydW50aW1lVVJMIDogcmVzdWx0c1swXTtcbiAgICAgICAgICBpZiAoIXRoaXMucnVudGltZVVSTCkge1xuICAgICAgICAgICAgdGhpcy5ydW50aW1lVVJMID0gJ3J1bnRpbWU6Ly8nICsgdGhpcy5kb21haW4gKyAnLycgKyBnZW5lcmF0ZUdVSUQoKTtcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdydW50aW1lOlVSTCcsIDEsIHtydW50aW1lVVJMOiB0aGlzLnJ1bnRpbWVVUkx9KTtcbiAgICAgICAgICB9XG5cblxuICAgICAgICAgIHRoaXMuY2FwYWJpbGl0aWVzID0gcmVzdWx0c1sxXTtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHJ1bnRpbWVVdGlscy5ydW50aW1lQ2FwYWJpbGl0aWVzLmNvbnN0cmFpbnRzLCByZXN1bHRzWzFdKTtcblxuICAgICAgICAgIHRoaXMuX2RhdGFPYmplY3RzU3RvcmFnZSA9IG5ldyBEYXRhT2JqZWN0c1N0b3JhZ2UodGhpcy5zdG9yYWdlTWFuYWdlciwgcmVzdWx0c1syXSB8fCB7fSk7XG5cbiAgICAgICAgICB0aGlzLl9oeXBlcnR5UmVzb3VyY2VzID0gcmVzdWx0c1szXSB8fCB7fTtcblxuICAgICAgICAgIHRoaXMucDJwSGFuZGxlclVSTCA9IHJlc3VsdHNbNF0gPyByZXN1bHRzWzRdLnAycEhhbmRsZXJVUkwgOiByZXN1bHRzWzRdO1xuICAgICAgICAgIGlmICghdGhpcy5wMnBIYW5kbGVyVVJMKSB7XG4gICAgICAgICAgICB0aGlzLnAycEhhbmRsZXJVUkwgPSB0aGlzLnJ1bnRpbWVVUkwgKyAnL3AycGhhbmRsZXIvJyArIGdlbmVyYXRlR1VJRCgpO1xuICAgICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lVUEgLSBpbml0XSBQMlBIYW5kbGVyVVJMOiAnLCB0aGlzLnAycEhhbmRsZXJVUkwpO1xuXG4gICAgICAgICAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncDJwSGFuZGxlcjpVUkwnLCAxLCB7cDJwSGFuZGxlclVSTDogdGhpcy5wMnBIYW5kbGVyVVJMfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRDb21wb25lbnRzKCk7XG5cbiAgICAgICAgfSkudGhlbigoc3RhdHVzKSA9PiB7XG5cbiAgICAgICAgICB0aGlzLl9oeXBlcnR5UmVzb3VyY2VzU3RvcmFnZSA9IG5ldyBIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZSh0aGlzLnJ1bnRpbWVVUkwsIHRoaXMubWVzc2FnZUJ1cywgdGhpcy5zdG9yYWdlTWFuYWdlciwgdGhpcy5faHlwZXJ0eVJlc291cmNlcyk7XG5cbiAgICAgICAgICBpZiAodGhpcy5wMnApIHtcbiAgICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZVVBIC0gaW5pdF0gbG9hZCBwMnBIYW5kbGVyOiAnLCBzdGF0dXMpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRQMlBIYW5kbGVyKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZVVBIC0gaW5pdF0gUDJQIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgIHJldHVybiAoJ1AyUCBOb3QgU3VwcG9ydGVkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGxvZy5pbmZvKCdbcnVudGltZSB1YSAtIGluaXRdIC0gc3RhdHVzOiAnLCByZXN1bHQpO1xuICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0sIChyZWFzb24pID0+IHtcbiAgICAgICAgICBsb2cuZXJyb3IoJ0VSUk9SOiAnLCByZWFzb24pO1xuICAgICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gIH1cblxuICBfbG9hZFAyUEhhbmRsZXIoKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcblxuICAgICAgbGV0IHJ1bnRpbWVEZXNjcmlwdG9yID0gcnVudGltZVV0aWxzLnJ1bnRpbWVEZXNjcmlwdG9yO1xuICAgICAgbGV0IHAycFN0dWJIYW5kbGVyID0gcnVudGltZURlc2NyaXB0b3IucDJwSGFuZGxlclN0dWI7XG5cbiAgICAgIGxldCBwMnBDb25maWcgPSB7XG4gICAgICAgIGlzSGFuZGxlclN0dWI6IHRydWUsXG4gICAgICAgIHJ1bnRpbWVVUkw6IHRoaXMucnVudGltZVVSTFxuICAgICAgfTtcblxuICAgICAgbG9nLmxvZygnW1J1bnRpbWVVQSBsb2FkUDJQSGFuZGxlcl0gUDJQU3R1YkhhbmRsZXI6ICcsIHAycFN0dWJIYW5kbGVyKTtcblxuICAgICAgdGhpcy5sb2FkZXIubG9hZFN0dWIocDJwU3R1YkhhbmRsZXIsIHAycENvbmZpZykudGhlbigocmVzdWx0KSA9PiB7XG5cbiAgICAgICAgbGV0IHJ1bnRpbWVVQVVSTCA9IHRoaXMucnVudGltZVVSTCArICcvdWEnO1xuICAgICAgICBsZXQgbXNnID0ge1xuICAgICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLFxuICAgICAgICAgIGZyb206IHJ1bnRpbWVVQVVSTCxcbiAgICAgICAgICB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyB0aGlzLmRvbWFpbiArICcvc20nLFxuICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIHN1YnNjcmliZTogW3Jlc3VsdC51cmxdLFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLnJ1bnRpbWVVUkxcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKHJ1bnRpbWVVQVVSTCwgKG1zZykgPT4ge1xuICAgICAgICAgIGxvZy5sb2coJ1tydW50aW1lIHVhIC0gbGlzdGVuZXJdIC0gcmVjZWl2ZSBtc2c6ICcsIG1zZyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xuICAgICAgICAgIGxvZy5sb2coJ1tydW50aW1lIHVhIC0gcG9zdE1lc3NhZ2VdIC0gcmVwbHk6ICcsIHJlcGx5KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbG9nLmluZm8oJ1tydW50aW1lIHVhIC0gcDJwIGluc3RhbGxhdGlvbl0gLSBzdWNjZXNzOiAnLCByZXN1bHQpO1xuICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICBsb2cuaW5mbygnW3J1bnRpbWUgdWEgLSBwMnAgaW5zdGFsbGF0aW9uXSAtIGZhaWw6ICcsIHJlYXNvbik7XG4gICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBhY2Nlc3MgcHJpdmF0ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJvb2xlYW4sIEVycm9yPn0gdGhpcyBpcyBQcm9taXNlIGFuZCByZXR1cm5zIHRydWUgaWYgYWxsIGNvbXBvbmVudHMgYXJlIGxvYWRlZCB3aXRoIHN1Y2Nlc3Mgb3IgYW4gZXJyb3IgaWYgc29tZW9uZSBmYWlscy5cbiAgICpcbiAgICogQG1lbWJlck9mIFJ1bnRpbWVVQVxuICAgKi9cbiAgX2xvYWRDb21wb25lbnRzKCkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgdHJ5IHtcblxuICAgICAgICAvLyBQcmVwYXJlIHRoZSBvbiBpbnN0YW5jZSB0byBoYW5kbGUgd2l0aCB0aGUgZmFsbGJhY2tzIGFuZCBydW50aW1lQ2F0YWxvZ3VlO1xuICAgICAgICB0aGlzLmRlc2NyaXB0b3JJbnN0YW5jZSA9IG5ldyBEZXNjcmlwdG9ycyh0aGlzLnJ1bnRpbWVVUkwsIHRoaXMucnVudGltZUNhdGFsb2d1ZSwgdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbik7XG5cbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgbG9hZGVyIHRvIGxvYWQgdGhlIGh5cGVydGllcywgcHJvdG9zdHVicyBhbmQgaWRwcHJveHk7XG4gICAgICAgIHRoaXMubG9hZGVyID0gbmV3IExvYWRlcih0aGlzLnJ1bnRpbWVVUkwsIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sIHRoaXMuZGVzY3JpcHRvckluc3RhbmNlKTtcblxuICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgaWRlbnRpdHkgTW9kdWxlXG4gICAgICAgIHRoaXMuaWRlbnRpdHlNb2R1bGUgPSBuZXcgSWRlbnRpdHlNb2R1bGUodGhpcy5ydW50aW1lVVJMLCB0aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMsIHRoaXMuc3RvcmFnZU1hbmFnZXIsIHRoaXMuX2RhdGFPYmplY3RzU3RvcmFnZSwgdGhpcy5ydW50aW1lRmFjdG9yeSk7XG5cbiAgICAgICAgLy8gVXNlIHRoZSBzYW5kYm94IGZhY3RvcnkgdG8gY3JlYXRlIGFuIEFwcFNhbmRib3g7XG4gICAgICAgIC8vIEluIHRoZSBmdXR1cmUgY2FuIGJlIGRlY2lkZWQgYnkgcG9saWN5RW5naW5lIGlmIHdlIG5lZWRcbiAgICAgICAgLy8gY3JlYXRlIGEgQXBwU2FuZGJveCBvciBub3Q7XG4gICAgICAgIGxldCBhcHBTYW5kYm94ID0gdGhpcy5ydW50aW1lRmFjdG9yeS5jcmVhdGVBcHBTYW5kYm94KCk7XG5cbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFJlZ2lzdHJ5IE1vZHVsZVxuICAgICAgICB0aGlzLnJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KHRoaXMucnVudGltZVVSTCwgYXBwU2FuZGJveCwgdGhpcy5pZGVudGl0eU1vZHVsZSwgdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLCB0aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMsIHRoaXMuc3RvcmFnZU1hbmFnZXIsIHRoaXMucDJwSGFuZGxlclVSTCk7XG5cbiAgICAgICAgLy8gU2V0IHRoZSBsb2FkZXIgdG8gbG9hZCBIeXBlcnRpZXMsIFN0dWJzIGFuZCBJZHBQcm94aWVzXG4gICAgICAgIHRoaXMucmVnaXN0cnkubG9hZGVyID0gdGhpcy5sb2FkZXI7XG5cbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIE1lc3NhZ2UgQnVzXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1cyA9IG5ldyBNZXNzYWdlQnVzKHRoaXMucmVnaXN0cnkpO1xuXG4gICAgICAgIC8vIFByZXBhcmUgdGhlIGFkZHJlc3MgYWxsb2NhdGlvbiBpbnN0YW5jZTtcbiAgICAgICAgdGhpcy5hZGRyZXNzQWxsb2NhdGlvbiA9IG5ldyBBZGRyZXNzQWxsb2NhdGlvbih0aGlzLnJ1bnRpbWVVUkwsIHRoaXMubWVzc2FnZUJ1cywgdGhpcy5yZWdpc3RyeSk7XG5cbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFBvbGljeSBFbmdpbmVcbiAgICAgICAgdGhpcy5wb2xpY3lFbmdpbmUgPSBuZXcgUEVQKG5ldyBSdW50aW1lQ29yZUN0eCh0aGlzLnJ1bnRpbWVVUkwsIHRoaXMuaWRlbnRpdHlNb2R1bGUsIHRoaXMucmVnaXN0cnksIHRoaXMuc3RvcmFnZU1hbmFnZXIsIHRoaXMucnVudGltZUNhcGFiaWxpdGllcykpO1xuXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1cy5waXBlbGluZS5oYW5kbGVycyA9IFtcblxuICAgICAgICAgIC8vIFBvbGljeSBtZXNzYWdlIGF1dGhvcmlzZVxuICAgICAgICAgIChjdHgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucG9saWN5RW5naW5lLmF1dGhvcmlzZShjdHgubXNnKS50aGVuKChjaGFuZ2VkTWdzKSA9PiB7XG4gICAgICAgICAgICAgIGN0eC5tc2cgPSBjaGFuZ2VkTWdzO1xuICAgICAgICAgICAgICBjdHgubmV4dCgpO1xuICAgICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgICBsb2cuZXJyb3IocmVhc29uKTtcbiAgICAgICAgICAgICAgY3R4LmZhaWwocmVhc29uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgXTtcblxuICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgR3JhcGggQ29ubmVjdG9yXG4gICAgICAgIHRoaXMuZ3JhcGhDb25uZWN0b3IgPSBwcm9jZXNzLmVudi5NT0RFICE9PSAnbGlnaHQnID8gbmV3IEdyYXBoQ29ubmVjdG9yKHRoaXMucnVudGltZVVSTCwgdGhpcy5tZXNzYWdlQnVzLCB0aGlzLnN0b3JhZ2VNYW5hZ2VyKSA6IG51bGw7XG5cbiAgICAgICAgLy8gSW5zdGFudGlhdGUgRGlzY292ZXJ5XG4gICAgICAgIHRoaXMuY29yZURpc2NvdmVyeSA9IG5ldyBDb3JlRGlzY292ZXJ5KHRoaXMucnVudGltZVVSTCwgdGhpcy5tZXNzYWdlQnVzLCB0aGlzLmdyYXBoQ29ubmVjdG9yLCB0aGlzLnJ1bnRpbWVGYWN0b3J5LCB0aGlzLnJlZ2lzdHJ5KTtcblxuICAgICAgICAvLyBBZGQgdG8gQXBwIFNhbmRib3ggdGhlIGxpc3RlbmVyO1xuICAgICAgICBhcHBTYW5kYm94LmFkZExpc3RlbmVyKCcqJywgKG1zZykgPT4ge1xuICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBSZWdpc3RlciBtZXNzYWdlQnVzIG9uIFJlZ2lzdHJ5XG4gICAgICAgIHRoaXMucmVnaXN0cnkubWVzc2FnZUJ1cyA9IHRoaXMubWVzc2FnZUJ1cztcblxuICAgICAgICAvLyBQb2xpY3kgRW5naW5lXG4gICAgICAgIHRoaXMucG9saWN5RW5naW5lLm1lc3NhZ2VCdXMgPSB0aGlzLm1lc3NhZ2VCdXM7XG5cbiAgICAgICAgLy8gUmVnaXN0ZXIgbWVzc2FnZUJ1cyBvbiBJRE1cbiAgICAgICAgdGhpcy5pZGVudGl0eU1vZHVsZS5tZXNzYWdlQnVzID0gdGhpcy5tZXNzYWdlQnVzO1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIHJlZ2lzdHJ5IG9uIElkZW50aXR5TW9kdWxlXG4gICAgICAgIHRoaXMuaWRlbnRpdHlNb2R1bGUucmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5O1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIGNvcmVEaXNjb3Zlcnkgb24gSWRlbnRpdHlNb2R1bGVcbiAgICAgICAgdGhpcy5pZGVudGl0eU1vZHVsZS5jb3JlRGlzY292ZXJ5ID0gdGhpcy5jb3JlRGlzY292ZXJ5O1xuXG4gICAgICAgIC8vIFVzZSBzYW5kYm94IGZhY3RvcnkgdG8gdXNlIHNwZWNpZmljIG1ldGhvZHNcbiAgICAgICAgLy8gYW5kIHNldCB0aGUgbWVzc2FnZSBidXMgdG8gdGhlIGZhY3RvcnlcbiAgICAgICAgdGhpcy5ydW50aW1lRmFjdG9yeS5tZXNzYWdlQnVzID0gdGhpcy5tZXNzYWdlQnVzO1xuXG4gICAgICAgIC8vIEluc3RhbmNpYXRlIHRoZSBTeW5jaGVyTWFuYWdlcjtcbiAgICAgICAgdGhpcy5zeW5jaGVyTWFuYWdlciA9IG5ldyBTeW5jaGVyTWFuYWdlcih0aGlzLnJ1bnRpbWVVUkwsIHRoaXMubWVzc2FnZUJ1cywgdGhpcy5yZWdpc3RyeSwgdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLCB0aGlzLnN0b3JhZ2VNYW5hZ2VyLCBudWxsLCB0aGlzLl9kYXRhT2JqZWN0c1N0b3JhZ2UsIHRoaXMuaWRlbnRpdHlNb2R1bGUpO1xuXG5cbiAgICAgICAgLy8gU2V0IGludG8gbG9hZGVyIHRoZSBuZWVkZWQgY29tcG9uZW50cztcbiAgICAgICAgdGhpcy5sb2FkZXIucnVudGltZVVSTCA9IHRoaXMucnVudGltZVVSTDtcbiAgICAgICAgdGhpcy5sb2FkZXIubWVzc2FnZUJ1cyA9IHRoaXMubWVzc2FnZUJ1cztcbiAgICAgICAgdGhpcy5sb2FkZXIucmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5O1xuICAgICAgICB0aGlzLmxvYWRlci5ydW50aW1lQ2F0YWxvZ3VlID0gdGhpcy5ydW50aW1lQ2F0YWxvZ3VlO1xuICAgICAgICB0aGlzLmxvYWRlci5ydW50aW1lRmFjdG9yeSA9IHRoaXMucnVudGltZUZhY3Rvcnk7XG5cbiAgICAgICAgLy9JbnN0YW50aWF0ZSBEaXNjb3ZlcnkgTGliIGZvciBub3RpZmljYXRpb24gdGVzdGluZ1xuICAgICAgICAvLyB0aGlzLmRpc2NvdmVyeSA9IG5ldyBEaXNjb3ZlcnkoXCJoeXBlcnR5Oi8vbG9jYWxob3N0L3Rlc3RcIiwgdGhpcy5ydW50aW1lVVJMLCB0aGlzLm1lc3NhZ2VCdXMpO1xuICAgICAgICAvLyB0aGlzLmxvYWRTdHViKFwibG9jYWxob3N0XCIpO1xuICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgLy8gICB0aGlzLmRpc2NvdmVyeS5kaXNjb3Zlckh5cGVydGllc0RPKFwidXNlcjovL2dvb2dsZS5jb20vb3BlbmlkdGVzdDIwQGdtYWlsLmNvbVwiKVxuICAgICAgICAvLyAgIC50aGVuKGh5cGVydGllcyA9PiB7XG4gICAgICAgIC8vICAgICBoeXBlcnRpZXMuZm9yRWFjaChoeXBlcnR5ID0+e1xuICAgICAgICAvLyAgICAgICBoeXBlcnR5Lm9uTGl2ZSgoKSA9PiBsb2cubG9nKGBOb3RpZmljYXRpb24gZnJvbSAke2h5cGVydHkuZGF0YS5oeXBlcnR5SUR9IGNoYW5nZWQgdG8gbGl2ZWApKTtcbiAgICAgICAgLy8gICAgICAgaHlwZXJ0eS5vbkRpc2Nvbm5lY3RlZCgoKSA9PiBsb2cubG9nKGBOb3RpZmljYXRpb24gZnJvbSAke2h5cGVydHkuZGF0YS5oeXBlcnR5SUR9IGNoYW5nZWQgdG8gZGlzY29ubmVjdGVkYCkpO1xuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vICAgfSk7XG4gICAgICAgIC8vIH0sIDIwMDApO1xuXG4gICAgICAgIC8vIEluc3RhbmNpYXRlIHRoZSBTdWJzY3JpcHRpb25NYW5hZ2VyO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbk1hbmFnZXIgPSBuZXcgU3Vic2NyaXB0aW9uTWFuYWdlcih0aGlzLnJ1bnRpbWVVUkwsIHRoaXMubWVzc2FnZUJ1cywgdGhpcy5zdG9yYWdlTWFuYWdlcik7XG5cbiAgICAgICAgLy8gdGhpcy5zdWJzY3JpcHRpb25NYW5hZ2VyLmluaXQoKS50aGVuKCgpPT57XG4gICAgICAgIC8vICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgY29uc3QgcHJlcGFyZUNvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgcHJlcGFyZUNvbXBvbmVudHMucHVzaCh0aGlzLnN1YnNjcmlwdGlvbk1hbmFnZXIuaW5pdCgpKTtcbiAgICAgICAgcHJlcGFyZUNvbXBvbmVudHMucHVzaCh0aGlzLmlkZW50aXR5TW9kdWxlLmxvYWRJZGVudGl0aWVzKCkpO1xuICAgICAgICBwcmVwYXJlQ29tcG9uZW50cy5wdXNoKHRoaXMuaWRlbnRpdHlNb2R1bGUubG9hZFNlc3Npb25LZXlzKCkpO1xuXG4gICAgICAgIFByb21pc2UuYWxsKHByZXBhcmVDb21wb25lbnRzKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdbUnVudGltZVVBLl9sb2FkQ29tcG9uZW50c10gRXJyb3IgXSAnLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgIHRocm93IEVycm9yKHJlYXNvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICogRGVwbG95IEh5cGVydHkgZnJvbSBDYXRhbG9ndWUgVVJMXG4gICAqXG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9zcGVjcy90cmVlL21hc3Rlci9kYXRhbW9kZWwvY29yZS9hZGRyZXNzXG4gICAqXG4gICAqIEBwYXJhbSB7VVJMLkh5cGVydHlDYXRhbG9ndWVVUkx9IGh5cGVydHlDYXRhbG9ndWVVUkwgLSBUaGUgQ2F0YWxvZ3VlIFVSTCB1c2VkIHRvIGlkZW50aWZ5IGRlc2NyaXB0b3JzIGluIHRoZSBDYXRhbG9ndWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbnxVUkwuSHlwZXJ0eVVSTH0gW3JldXNlVVJMPWZhbHNlXSByZXVzZVVSTCAtIHJldXNlVVJMIGlzIHVzZWQgdG8gcmV1c2UgdGhlIGh5cGVydHlVUkwgcHJldmlvdXNseSByZWdpc3RyZWQsIGJ5IGRlZmF1bHQgdGhlIHJldXNlIGlzIGRpc2FibGVkO1xuICAgKiBAcGFyYW0ge1VSTH0gYXBwVVJMIC0gdGhlIGFwcCB1cmwgYWRkcmVzczsgLy8gVE9ETzogaW1wcm92ZSB0aGlzIGRlc2NyaXB0aW9uO1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxCb29sZWFuLCBFcnJvcj59IHRoaXMgaXMgUHJvbWlzZSBhbmQgcmV0dXJucyB0cnVlIGlmIGFsbCBjb21wb25lbnRzIGFyZSBsb2FkZWQgd2l0aCBzdWNjZXNzIG9yIGFuIGVycm9yIGlmIHNvbWVvbmUgZmFpbHMuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBSdW50aW1lVUFcbiAgICovXG4gIGxvYWRIeXBlcnR5KGh5cGVydHlDYXRhbG9ndWVVUkwsIHJldXNlVVJMID0gZmFsc2UsIGFwcFVSTCkge1xuXG4gICAgaWYgKCFoeXBlcnR5Q2F0YWxvZ3VlVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ0h5cGVydHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpO1xuICAgIHJldHVybiB0aGlzLmxvYWRlci5sb2FkSHlwZXJ0eShoeXBlcnR5Q2F0YWxvZ3VlVVJMLCByZXVzZVVSTCwgYXBwVVJMKTtcblxuICB9XG5cbiAgLyoqXG4gICogRGVwbG95IFN0dWIgZnJvbSBDYXRhbG9ndWUgVVJMIG9yIGRvbWFpbiB1cmxcbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpblxuICAqL1xuICBsb2FkU3R1Yihwcm90b2NvbHN0dWJDYXRhbG9ndWVVUkwpIHtcblxuICAgIGlmICghcHJvdG9jb2xzdHViQ2F0YWxvZ3VlVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1Byb3RvU3R1YiBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVyLmxvYWRTdHViKHByb3RvY29sc3R1YkNhdGFsb2d1ZVVSTCk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIERlcGxveSBpZHBQcm94eSBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybFxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICBkb21haW4gICAgICAgICAgZG9tYWluXG4gICovXG4gIGxvYWRJZHBQcm94eShpcGRQcm94eUNhdGFsb2d1ZVVSTCkge1xuICAgIGNvbnNvbGUubG9nKCdpcGRQcm94eUNhdGFsb2d1ZVVSTCcsIGlwZFByb3h5Q2F0YWxvZ3VlVVJMKTtcblxuICAgIGlmICghaXBkUHJveHlDYXRhbG9ndWVVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIElEUCBQcm94eSBVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyLCBjb3VsZCBiZSBhIERPTUFJTiBvciBhIFVSTCcpO1xuICAgIHJldHVybiB0aGlzLmxvYWRlci5sb2FkSWRwUHJveHkoaXBkUHJveHlDYXRhbG9ndWVVUkwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gY2xvc2UgYWxsIHRoZSBydW50aW1lOyBVbnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXM7XG4gICAqIEByZXR1cm4ge1Byb21pc2U8Qm9vbGVhbj59IHJlc3VsdCBvZiB0aGUgY2xvc2UgbWV0aG9kLCB3aXRoIHRydWUgb3IgZmFsc2UgdG8gdGhlIG9wZXJhdGlvbiBzdWNjZXNzO1xuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxvZy5pbmZvKCdVbnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXMnKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIF90aGlzLnJlZ2lzdHJ5LnVucmVnaXN0ZXJBbGxIeXBlcnRpZXMoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBsb2cuaW5mbygnQWxsIHRoZSBoeXBlcnRpZXMgYXJlIHVucmVnaXN0ZWQgd2l0aCBTdWNjZXNzOicsIHJlc3VsdCk7XG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgbG9nLmVycm9yKCdGYWlsZWQgdG8gdW5yZWdpc3RlciB0aGUgaHlwZXJ0aWVzJywgcmVhc29uKTtcbiAgICAgICAgcmVqZWN0KGZhbHNlKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJ1bnRpbWVVQTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcnVudGltZS9SdW50aW1lVUEuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkE7QUFDQTtBQUVBO0FBQ0E7QUFEQTtBQUNBO0FBR0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTtBQUFBO0FBQ0E7OztBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7OztBQXREQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFOQTtBQUNBO0FBMkJBOzs7Ozs7Ozs7Ozs7Ozs7QUFlQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBOzs7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSkE7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQU9BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7QUFZQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTs7Ozs7QUFJQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///410\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(179);\n__webpack_require__(126);\n__webpack_require__(187);\n__webpack_require__(420);\n__webpack_require__(427);\n__webpack_require__(428);\nmodule.exports = __webpack_require__(13).Promise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlLmpzPzUzOTgiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2U7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZS5qc1xuLy8gbW9kdWxlIGlkID0gNDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///411\n");
    }, function(module, exports, __webpack_require__) {
        eval("var toInteger = __webpack_require__(127);\nvar defined = __webpack_require__(128);\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zdHJpbmctYXQuanM/ODdhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3N0cmluZy1hdC5qc1xuLy8gbW9kdWxlIGlkID0gNDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///412\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar create = __webpack_require__(131);\nvar descriptor = __webpack_require__(73);\nvar setToStringTag = __webpack_require__(95);\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(58)(IteratorPrototype, __webpack_require__(22)('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcz9mNzg1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItY3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSA0MTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///413\n");
    }, function(module, exports, __webpack_require__) {
        eval("var dP = __webpack_require__(38);\nvar anObject = __webpack_require__(39);\nvar getKeys = __webpack_require__(67);\n\nmodule.exports = __webpack_require__(44) ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzP2FhMmEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1kcHMuanNcbi8vIG1vZHVsZSBpZCA9IDQxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///414\n");
    }, function(module, exports, __webpack_require__) {
        eval("// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(45);\nvar toLength = __webpack_require__(132);\nvar toAbsoluteIndex = __webpack_require__(416);\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcz9iYzU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA0MTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///415\n");
    }, function(module, exports, __webpack_require__) {
        eval("var toInteger = __webpack_require__(127);\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcz83ZTQwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLWFic29sdXRlLWluZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA0MTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///416\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar addToUnscopables = __webpack_require__(418);\nvar step = __webpack_require__(419);\nvar Iterators = __webpack_require__(74);\nvar toIObject = __webpack_require__(45);\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(180)(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcz9jNDY5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///417\n");
    }, function(module, exports) {
        eval("module.exports = function () { /* empty */ };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanM/ZTI2NyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanNcbi8vIG1vZHVsZSBpZCA9IDQxOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///418\n");
    }, function(module, exports) {
        eval("module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanM/MTA2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanNcbi8vIG1vZHVsZSBpZCA9IDQxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///419\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar LIBRARY = __webpack_require__(92);\nvar global = __webpack_require__(21);\nvar ctx = __webpack_require__(65);\nvar classof = __webpack_require__(188);\nvar $export = __webpack_require__(26);\nvar isObject = __webpack_require__(43);\nvar aFunction = __webpack_require__(93);\nvar anInstance = __webpack_require__(421);\nvar forOf = __webpack_require__(422);\nvar speciesConstructor = __webpack_require__(192);\nvar task = __webpack_require__(193).set;\nvar microtask = __webpack_require__(424)();\nvar newPromiseCapabilityModule = __webpack_require__(136);\nvar perform = __webpack_require__(194);\nvar promiseResolve = __webpack_require__(195);\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[__webpack_require__(22)('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value);\n            if (domain) domain.exit();\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  if (promise._h == 1) return false;\n  var chain = promise._a || promise._c;\n  var i = 0;\n  var reaction;\n  while (chain.length > i) {\n    reaction = chain[i++];\n    if (reaction.fail || !isUnhandled(reaction.promise)) return false;\n  } return true;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = __webpack_require__(425)($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\n__webpack_require__(95)($Promise, PROMISE);\n__webpack_require__(426)(PROMISE);\nWrapper = __webpack_require__(13)[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(196)(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5wcm9taXNlLmpzPzA5N2MiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xuICBpZiAocHJvbWlzZS5fbikgcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgaWYgKHByb21pc2UuX2ggPT0gMSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2M7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlYWN0aW9uO1xuICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkge1xuICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTtcbiAgICBpZiAocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpIHJldHVybiBmYWxzZTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xuICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdiB9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICB2YXIgdGhlbjtcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmIChwcm9taXNlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX2EpIHRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgJGluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2LnByb21pc2UuanNcbi8vIG1vZHVsZSBpZCA9IDQyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///420\n");
    }, function(module, exports) {
        eval("module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcz9kOGFjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzXG4vLyBtb2R1bGUgaWQgPSA0MjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///421\n");
    }, function(module, exports, __webpack_require__) {
        eval("var ctx = __webpack_require__(65);\nvar call = __webpack_require__(189);\nvar isArrayIter = __webpack_require__(190);\nvar anObject = __webpack_require__(39);\nvar toLength = __webpack_require__(132);\nvar getIterFn = __webpack_require__(191);\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mb3Itb2YuanM/MzU2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2Zvci1vZi5qc1xuLy8gbW9kdWxlIGlkID0gNDIyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///422\n");
    }, function(module, exports) {
        eval("// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pbnZva2UuanM/OTI3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW52b2tlLmpzXG4vLyBtb2R1bGUgaWQgPSA0MjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///423\n");
    }, function(module, exports, __webpack_require__) {
        eval("var global = __webpack_require__(21);\nvar macrotask = __webpack_require__(193).set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = __webpack_require__(75)(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if (Observer) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    var promise = Promise.resolve();\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19taWNyb3Rhc2suanM/ZjM2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlclxuICB9IGVsc2UgaWYgKE9ic2VydmVyKSB7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWU7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21pY3JvdGFzay5qc1xuLy8gbW9kdWxlIGlkID0gNDI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///424\n");
    }, function(module, exports, __webpack_require__) {
        eval("var hide = __webpack_require__(58);\nmodule.exports = function (target, src, safe) {\n  for (var key in src) {\n    if (safe && target[key]) target[key] = src[key];\n    else hide(target, key, src[key]);\n  } return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS1hbGwuanM/YzQ3ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBpZiAoc2FmZSAmJiB0YXJnZXRba2V5XSkgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS1hbGwuanNcbi8vIG1vZHVsZSBpZCA9IDQyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///425\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar global = __webpack_require__(21);\nvar core = __webpack_require__(13);\nvar dP = __webpack_require__(38);\nvar DESCRIPTORS = __webpack_require__(44);\nvar SPECIES = __webpack_require__(22)('species');\n\nmodule.exports = function (KEY) {\n  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qcz82ZDFhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pIGRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NldC1zcGVjaWVzLmpzXG4vLyBtb2R1bGUgaWQgPSA0MjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///426\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("// https://github.com/tc39/proposal-promise-finally\n\nvar $export = __webpack_require__(26);\nvar core = __webpack_require__(13);\nvar global = __webpack_require__(21);\nvar speciesConstructor = __webpack_require__(192);\nvar promiseResolve = __webpack_require__(195);\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5wcm9taXNlLmZpbmFsbHkuanM/MTJhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1wcm9taXNlLWZpbmFsbHlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuL19wcm9taXNlLXJlc29sdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcbiAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKTtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gIHJldHVybiB0aGlzLnRoZW4oXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgfSA6IG9uRmluYWxseSxcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgIH0gOiBvbkZpbmFsbHlcbiAgKTtcbn0gfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5LmpzXG4vLyBtb2R1bGUgaWQgPSA0Mjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///427\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// https://github.com/tc39/proposal-promise-try\nvar $export = __webpack_require__(26);\nvar newPromiseCapability = __webpack_require__(136);\nvar perform = __webpack_require__(194);\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcz84Y2E1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XG4gIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qc1xuLy8gbW9kdWxlIGlkID0gNDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///428\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(430);\nmodule.exports = __webpack_require__(13).Object.assign;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzPzU3N2IiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSA0Mjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///429\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.3.1 Object.assign(target, source)\nvar $export = __webpack_require__(26);\n\n$export($export.S + $export.F, 'Object', { assign: __webpack_require__(431) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzPzQ3OGMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduLmpzXG4vLyBtb2R1bGUgaWQgPSA0MzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///430\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = __webpack_require__(67);\nvar gOPS = __webpack_require__(137);\nvar pIE = __webpack_require__(77);\nvar toObject = __webpack_require__(76);\nvar IObject = __webpack_require__(184);\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __webpack_require__(66)(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtYXNzaWduLmpzPzRlOGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpO1xuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICB2YXIgaXNFbnVtID0gcElFLmY7XG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcbiAgICB2YXIgUyA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qc1xuLy8gbW9kdWxlIGlkID0gNDMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///431\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(433);\nvar $Object = __webpack_require__(13).Object;\nmodule.exports = function defineProperty(it, key, desc) {\n  return $Object.defineProperty(it, key, desc);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzP2Y1YjAiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKSB7XG4gIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSA0MzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///432\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(26);\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !__webpack_require__(44), 'Object', { defineProperty: __webpack_require__(38).f });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzPzk4MjkiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSA0MzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///433\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.log = undefined;\n\nvar _loglevel = __webpack_require__(11);\n\nvar _loglevel2 = _interopRequireDefault(_loglevel);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar a = _loglevel2.default.getLogger('address-allocation');\nvar b = _loglevel2.default.getLogger('Bus');\nvar c = _loglevel2.default.getLogger('MessageBus');\nvar d = _loglevel2.default.getLogger('CoreDiscovery');\nvar e = _loglevel2.default.getLogger('GraphConnector');\nvar f = _loglevel2.default.getLogger('HypertyResourcesStorage');\nvar g = _loglevel2.default.getLogger('IdentityModule');\nvar h = _loglevel2.default.getLogger('PEP');\nvar i = _loglevel2.default.getLogger('P2PConnectionResolve');\nvar j = _loglevel2.default.getLogger('Registry');\nvar k = _loglevel2.default.getLogger('RuntimeUA');\nvar l = _loglevel2.default.getLogger('Loader');\nvar m = _loglevel2.default.getLogger('Descriptors');\nvar n = _loglevel2.default.getLogger('DataObjectsStorage');\nvar o = _loglevel2.default.getLogger('Subscription');\nvar p = _loglevel2.default.getLogger('SubscriptionManager');\nvar q = _loglevel2.default.getLogger('ObserverObject');\nvar r = _loglevel2.default.getLogger('ReporterObject');\nvar s = _loglevel2.default.getLogger('SynSubscription');\nvar t = _loglevel2.default.getLogger('SyncherManager');\n\nexports.log = _loglevel2.default;\n\n/**\n  5 actual logging methods, ordered and available as:\n\n      0 - log.trace(msg)\n      1 - log.debug(msg)\n      2 - log.info(msg)\n      3 - log.warn(msg)\n      4 - log.error(msg)\n\n  log.log(msg) is also available, as an alias for log.debug(msg), to improve compatibility with console, and make migration easier.\n\n  Exact output formatting of these will depend on the console available in the current context of your application. For example, many environments will include a full stack trace with all trace() calls, and icons or similar to highlight other calls.\n\n  These methods should never fail in any environment, even if no console object is currently available, and should always fall back to an available log method even if the specific method called (e.g. warn) isn't available.\n\n  Be aware that all this means that these method won't necessarily always produce exactly the output you expect in every environment; loglevel only guarantees that these methods will never explode on you, and that it will call the most relevant method it can find, with your argument. Firefox is a notable example here: due to a current Firefox bug log.trace(msg) calls in Firefox will print only the stacktrace, and won't include any passed message arguments.\n\n*/\n\n// address-allocation\n\na.setLevel(5);\n\n// Bus\nb.setLevel(0);\n\n// MessageBus\nc.setLevel(0);\n\n// CoreDiscovery\nd.setLevel(5);\n\n// GraphConnector\ne.setLevel(5);\n\n// HypertyResourcesStorage\nf.setLevel(0);\n\n// IdentityModule\ng.setLevel(1);\n\n// PEP\nh.setLevel(5);\n\n// P2PConnectionResolve\ni.setLevel(0);\n\n// Registry\nj.setLevel(0);\n\n// RuntimeUA\nk.setLevel(0);\n\n// Loader\nl.setLevel(0);\n\n// Descriptors\nm.setLevel(0);\n\n// DataObjectsStorage\nn.setLevel(5);\n\n// Subscription\no.setLevel(5);\n\n// SubscriptionManager\np.setLevel(5);\n\n// ObserverObject\nq.setLevel(1);\n\n// ReporterObject\nr.setLevel(1);\n\n// SynSubscription\ns.setLevel(1);\n\n// SyncherManager\nt.setLevel(1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9sb2dMZXZlbHMuanM/ZjM5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJ2xvZ2xldmVsJztcblxuY29uc3QgYSA9IGxvZy5nZXRMb2dnZXIoJ2FkZHJlc3MtYWxsb2NhdGlvbicpO1xuY29uc3QgYiA9IGxvZy5nZXRMb2dnZXIoJ0J1cycpO1xuY29uc3QgYyA9IGxvZy5nZXRMb2dnZXIoJ01lc3NhZ2VCdXMnKTtcbmNvbnN0IGQgPSBsb2cuZ2V0TG9nZ2VyKCdDb3JlRGlzY292ZXJ5Jyk7XG5jb25zdCBlID0gbG9nLmdldExvZ2dlcignR3JhcGhDb25uZWN0b3InKTtcbmNvbnN0IGYgPSBsb2cuZ2V0TG9nZ2VyKCdIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZScpO1xuY29uc3QgZyA9IGxvZy5nZXRMb2dnZXIoJ0lkZW50aXR5TW9kdWxlJyk7XG5jb25zdCBoID0gbG9nLmdldExvZ2dlcignUEVQJyk7XG5jb25zdCBpID0gbG9nLmdldExvZ2dlcignUDJQQ29ubmVjdGlvblJlc29sdmUnKTtcbmNvbnN0IGogPSBsb2cuZ2V0TG9nZ2VyKCdSZWdpc3RyeScpO1xuY29uc3QgayA9IGxvZy5nZXRMb2dnZXIoJ1J1bnRpbWVVQScpO1xuY29uc3QgbCA9IGxvZy5nZXRMb2dnZXIoJ0xvYWRlcicpO1xuY29uc3QgbSA9IGxvZy5nZXRMb2dnZXIoJ0Rlc2NyaXB0b3JzJyk7XG5jb25zdCBuID0gbG9nLmdldExvZ2dlcignRGF0YU9iamVjdHNTdG9yYWdlJyk7XG5jb25zdCBvID0gbG9nLmdldExvZ2dlcignU3Vic2NyaXB0aW9uJyk7XG5jb25zdCBwID0gbG9nLmdldExvZ2dlcignU3Vic2NyaXB0aW9uTWFuYWdlcicpO1xuY29uc3QgcSA9IGxvZy5nZXRMb2dnZXIoJ09ic2VydmVyT2JqZWN0Jyk7XG5jb25zdCByID0gbG9nLmdldExvZ2dlcignUmVwb3J0ZXJPYmplY3QnKTtcbmNvbnN0IHMgPSBsb2cuZ2V0TG9nZ2VyKCdTeW5TdWJzY3JpcHRpb24nKTtcbmNvbnN0IHQgPSBsb2cuZ2V0TG9nZ2VyKCdTeW5jaGVyTWFuYWdlcicpO1xuXG5cbmV4cG9ydCB7IGxvZyB9O1xuXG4vKipcbiAgNSBhY3R1YWwgbG9nZ2luZyBtZXRob2RzLCBvcmRlcmVkIGFuZCBhdmFpbGFibGUgYXM6XG5cbiAgICAgIDAgLSBsb2cudHJhY2UobXNnKVxuICAgICAgMSAtIGxvZy5kZWJ1Zyhtc2cpXG4gICAgICAyIC0gbG9nLmluZm8obXNnKVxuICAgICAgMyAtIGxvZy53YXJuKG1zZylcbiAgICAgIDQgLSBsb2cuZXJyb3IobXNnKVxuXG4gIGxvZy5sb2cobXNnKSBpcyBhbHNvIGF2YWlsYWJsZSwgYXMgYW4gYWxpYXMgZm9yIGxvZy5kZWJ1Zyhtc2cpLCB0byBpbXByb3ZlIGNvbXBhdGliaWxpdHkgd2l0aCBjb25zb2xlLCBhbmQgbWFrZSBtaWdyYXRpb24gZWFzaWVyLlxuXG4gIEV4YWN0IG91dHB1dCBmb3JtYXR0aW5nIG9mIHRoZXNlIHdpbGwgZGVwZW5kIG9uIHRoZSBjb25zb2xlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBjb250ZXh0IG9mIHlvdXIgYXBwbGljYXRpb24uIEZvciBleGFtcGxlLCBtYW55IGVudmlyb25tZW50cyB3aWxsIGluY2x1ZGUgYSBmdWxsIHN0YWNrIHRyYWNlIHdpdGggYWxsIHRyYWNlKCkgY2FsbHMsIGFuZCBpY29ucyBvciBzaW1pbGFyIHRvIGhpZ2hsaWdodCBvdGhlciBjYWxscy5cblxuICBUaGVzZSBtZXRob2RzIHNob3VsZCBuZXZlciBmYWlsIGluIGFueSBlbnZpcm9ubWVudCwgZXZlbiBpZiBubyBjb25zb2xlIG9iamVjdCBpcyBjdXJyZW50bHkgYXZhaWxhYmxlLCBhbmQgc2hvdWxkIGFsd2F5cyBmYWxsIGJhY2sgdG8gYW4gYXZhaWxhYmxlIGxvZyBtZXRob2QgZXZlbiBpZiB0aGUgc3BlY2lmaWMgbWV0aG9kIGNhbGxlZCAoZS5nLiB3YXJuKSBpc24ndCBhdmFpbGFibGUuXG5cbiAgQmUgYXdhcmUgdGhhdCBhbGwgdGhpcyBtZWFucyB0aGF0IHRoZXNlIG1ldGhvZCB3b24ndCBuZWNlc3NhcmlseSBhbHdheXMgcHJvZHVjZSBleGFjdGx5IHRoZSBvdXRwdXQgeW91IGV4cGVjdCBpbiBldmVyeSBlbnZpcm9ubWVudDsgbG9nbGV2ZWwgb25seSBndWFyYW50ZWVzIHRoYXQgdGhlc2UgbWV0aG9kcyB3aWxsIG5ldmVyIGV4cGxvZGUgb24geW91LCBhbmQgdGhhdCBpdCB3aWxsIGNhbGwgdGhlIG1vc3QgcmVsZXZhbnQgbWV0aG9kIGl0IGNhbiBmaW5kLCB3aXRoIHlvdXIgYXJndW1lbnQuIEZpcmVmb3ggaXMgYSBub3RhYmxlIGV4YW1wbGUgaGVyZTogZHVlIHRvIGEgY3VycmVudCBGaXJlZm94IGJ1ZyBsb2cudHJhY2UobXNnKSBjYWxscyBpbiBGaXJlZm94IHdpbGwgcHJpbnQgb25seSB0aGUgc3RhY2t0cmFjZSwgYW5kIHdvbid0IGluY2x1ZGUgYW55IHBhc3NlZCBtZXNzYWdlIGFyZ3VtZW50cy5cblxuKi9cblxuXG4vLyBhZGRyZXNzLWFsbG9jYXRpb25cbmEuc2V0TGV2ZWwoNSk7XG5cbi8vIEJ1c1xuYi5zZXRMZXZlbCgwKTtcblxuLy8gTWVzc2FnZUJ1c1xuYy5zZXRMZXZlbCgwKTtcblxuLy8gQ29yZURpc2NvdmVyeVxuZC5zZXRMZXZlbCg1KTtcblxuLy8gR3JhcGhDb25uZWN0b3JcbmUuc2V0TGV2ZWwoNSk7XG5cbi8vIEh5cGVydHlSZXNvdXJjZXNTdG9yYWdlXG5mLnNldExldmVsKDApO1xuXG4vLyBJZGVudGl0eU1vZHVsZVxuZy5zZXRMZXZlbCgxKTtcblxuLy8gUEVQXG5oLnNldExldmVsKDUpO1xuXG4vLyBQMlBDb25uZWN0aW9uUmVzb2x2ZVxuaS5zZXRMZXZlbCgwKTtcblxuLy8gUmVnaXN0cnlcbmouc2V0TGV2ZWwoMCk7XG5cbi8vIFJ1bnRpbWVVQVxuay5zZXRMZXZlbCgwKTtcblxuLy8gTG9hZGVyXG5sLnNldExldmVsKDApO1xuXG4vLyBEZXNjcmlwdG9yc1xubS5zZXRMZXZlbCgwKTtcblxuLy8gRGF0YU9iamVjdHNTdG9yYWdlXG5uLnNldExldmVsKDUpO1xuXG4vLyBTdWJzY3JpcHRpb25cbm8uc2V0TGV2ZWwoNSk7XG5cbi8vIFN1YnNjcmlwdGlvbk1hbmFnZXJcbnAuc2V0TGV2ZWwoNSk7XG5cbi8vIE9ic2VydmVyT2JqZWN0XG5xLnNldExldmVsKDEpO1xuXG4vLyBSZXBvcnRlck9iamVjdFxuci5zZXRMZXZlbCgxKTtcblxuLy8gU3luU3Vic2NyaXB0aW9uXG5zLnNldExldmVsKDEpO1xuXG4vLyBTeW5jaGVyTWFuYWdlclxudC5zZXRMZXZlbCgxKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvbG9nTGV2ZWxzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///434\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = __webpack_require__(46);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _runtimeUtils = __webpack_require__(138);\n\nvar _Sandbox = __webpack_require__(438);\n\nvar _AddressAllocation = __webpack_require__(99);\n\nvar _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);\n\nvar _HypertyInstance = __webpack_require__(461);\n\nvar _HypertyInstance2 = _interopRequireDefault(_HypertyInstance);\n\nvar _P2PConnectionResolve = __webpack_require__(463);\n\nvar _P2PConnectionResolve2 = _interopRequireDefault(_P2PConnectionResolve);\n\nvar _utils = __webpack_require__(15);\n\n__webpack_require__(464);\n\nvar _Utils = __webpack_require__(201);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('Registry'); /**\n                                        * Copyright 2016 PT Inovação e Sistemas SA\n                                        * Copyright 2016 INESC-ID\n                                        * Copyright 2016 QUOBIS NETWORKS SL\n                                        * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                                        * Copyright 2016 ORANGE SA\n                                        * Copyright 2016 Deutsche Telekom AG\n                                        * Copyright 2016 Apizee\n                                        * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                                        *\n                                        * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                        * you may not use this file except in compliance with the License.\n                                        * You may obtain a copy of the License at\n                                        *\n                                        *   http://www.apache.org/licenses/LICENSE-2.0\n                                        *\n                                        * Unless required by applicable law or agreed to in writing, software\n                                        * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                        * See the License for the specific language governing permissions and\n                                        * limitations under the License.\n                                        **/\n\n// Log System\n\n\n// import DiscoveryServiceFramework from './DiscoveryServiceFramework';\n\nvar STATUS = { CREATED: 'created', LIVE: 'live', DEPLOYING: 'deploying', DEPLOYED: 'deployed', PROGRESS: 'in-progress', DISCONNECTED: 'disconnected', FAILED: 'deployment-failed', DEAD: 'dead' };\n\n/*import IdentityManager from './IdentityManager';\nimport Discovery from './Discovery';*/\n\n/**\n* Runtime Registry Interface\n*/\n\nvar Registry = function () {\n\n  /**\n  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.\n  * @param  {MessageBus}          msgbus                msgbus\n  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL\n  * @param  {AppSandbox}          appSandbox            appSandbox\n  * @param  {runtimeCatalogue}    runtimeCatalogue      runtimeCatalogue\n  * @param  {DomainURL}           remoteRegistry        remoteRegistry\n  * @param  {storageManager}      storageManager\n  */\n  function Registry(runtimeURL, appSandbox, identityModule, runtimeCatalogue, runtimeCapabilities, storageManager, p2pHandlerURL, remoteRegistry) {\n    (0, _classCallCheck3.default)(this, Registry);\n\n\n    // how some functions receive the parameters for example:\n    // new Registry('hyperty-runtime://sp1/123', appSandbox, idModule, remoteRegistry);\n    // registry.registerStub(sandbox, 'sp1');\n    // registry.registerHyperty(sandBox, 'hyperty-runtime://sp1/123');\n    // registry.resolve('hyperty-runtime://sp1/123');\n\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\n    if (!storageManager) throw new Error('storageManager is missing.');\n\n    /*if (!remoteRegistry) throw new Error('remoteRegistry is missing');*/\n\n    var _this = this;\n\n    _this.registryURL = runtimeURL + '/registry/';\n    _this.appSandbox = appSandbox;\n    _this.runtimeURL = runtimeURL;\n    _this.p2pHandlerURL = p2pHandlerURL;\n    _this.runtimeCatalogue = runtimeCatalogue;\n    _this.remoteRegistry = remoteRegistry;\n    _this.idModule = identityModule;\n    _this.storageManager = storageManager;\n    _this.runtimeCapabilities = runtimeCapabilities;\n    _this.identifier = (0, _utils.generateGUID)();\n    _this.registrationRetries = 5; // number of attempts to register Hyperties and DataObjects when errors occurs\n\n    // the expires in 3600, represents 1 hour\n    //the expires is in seconds, unit of measure received by the domain registry\n    _this.expiresTime = 3600;\n\n    _this.hypertiesListToRemove = {};\n    _this.hypertiesList = [];\n    _this.remoteHypertyList = [];\n    _this.remoteDataObjectList = [];\n    _this.idpLegacyProxyList = {};\n\n    _this.watchingYou = new _Utils.WatchingYou();\n    _this.p2pHandlerStub = {};\n    _this.p2pRequesterStub = _this.watchingYou.watch('p2pRequesterStub', {}, true);\n    _this.p2pConnectionList = _this.watchingYou.watch('p2pConnectionList', {}, true);\n    _this.p2pHandlerAssociation = {};\n\n    _this.protostubsList = _this.watchingYou.watch('protostubsList', {}, true);\n    _this.idpProxyList = _this.watchingYou.watch('idpProxyList', {}, true);\n    _this.dataObjectList = {};\n    _this.subscribedDataObjectList = {};\n    _this.sandboxesList = { sandbox: {}, appSandbox: {} };\n    _this.pepList = {};\n    _this.registries = {};\n\n    _this._domain = (0, _utils.divideURL)(_this.registryURL).domain;\n    _this.sandboxesList.appSandbox[runtimeURL] = appSandbox;\n    var p2pConnectionResolve = new _P2PConnectionResolve2.default(_this);\n\n    _this._p2pConnectionResolve = p2pConnectionResolve;\n  }\n\n  (0, _createClass3.default)(Registry, [{\n    key: '_getIdentityAssociated',\n    value: function _getIdentityAssociated(type, hypertyURL) {\n      var _this = this;\n\n      for (var hyperty in _this.hypertiesList) {\n        var value = _this.hypertiesList[hyperty];\n\n        if (value._hypertyURL === hypertyURL) {\n          switch (type) {\n            case 'username':\n              return value._user.username;\n            case 'cn':\n              return value._user.cn;\n            case 'locale':\n              return value._user.locale;\n            case 'avatar':\n              return value._user.avatar;\n            case 'userURL':\n              return value._user.userURL;\n            case '.':\n              return value._user;\n            default:\n              return '';\n          }\n        }\n      }\n      return '';\n    }\n\n    /**\n    * This function is used to return the sandbox instance where the Application is executing. It is assumed there is just one App per Runtime instance.\n    */\n\n  }, {\n    key: 'getAppSandbox',\n    value: function getAppSandbox() {\n      var _this = this;\n      return _this.appSandbox;\n    }\n\n    /**\n    * This function returns the user associated to the hyperty URL\n    * @param    {String}    hypertyURL      hyperty URL\n    * @return   {String}    userURL         user URL\n    */\n\n  }, {\n    key: 'getHypertyOwner',\n    value: function getHypertyOwner(hypertyURL) {\n\n      var _this = this;\n      var userURL = void 0;\n\n      for (var index in _this.hypertiesList) {\n        var hyperty = _this.hypertiesList[index];\n\n        if (hyperty.hypertyURL === hypertyURL) {\n          userURL = hyperty.user.userURL;\n        }\n      }\n      return userURL;\n    }\n\n    /**\n    * returns the hyperty Name from a given url. This url could be from a dataObject or hyperty\n    * @param    {String}    url      hyperty or dataObject URL\n    * @return   {String}    hypertyName     hyperty Name\n    */\n\n  }, {\n    key: 'getHypertyName',\n    value: function getHypertyName(url) {\n      var _this = this;\n\n      var isHypertyURL = (0, _utils.divideURL)(url).type === 'hyperty';\n\n      //value to be returned in the end\n      var hypertyName = void 0;\n\n      //if is not an hyperty, check if is a dataObject and obtain his reporter\n      var hypertyURL = isHypertyURL ? url : _this.getReporterURLSynchonous(url);\n\n      for (var index in _this.hypertiesList) {\n        var hyperty = _this.hypertiesList[index];\n        if (hyperty.hypertyURL === hypertyURL) {\n          hypertyName = hyperty.objectName;\n          break;\n        }\n      }\n      return hypertyName;\n    }\n\n    /**\n    * function to return the reporterURL associated with the dataobject URL\n    * @param    {String}     dataObjectURL    dataObjectURL\n    * @return   {String}     reporterURL      reporterURL\n    */\n\n  }, {\n    key: 'getReporterURL',\n    value: function getReporterURL(dataObjectURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var dataObject = _this.dataObjectList[dataObjectURL];\n\n        if (dataObject) {\n          resolve(dataObject.reporter);\n        } else {\n          reject('No reporter was found');\n        }\n      });\n    }\n\n    /**\n    * function to return the reporterURL associated with the dataobject URL. no promise returned\n    * @param    {String}     dataObjectURL    dataObjectURL\n    * @return   {String}     reporterURL      reporterURL\n    */\n\n  }, {\n    key: 'getReporterURLSynchonous',\n    value: function getReporterURLSynchonous(dataObjectURL) {\n      var _this = this;\n\n      var dataObject = _this.dataObjectList[dataObjectURL];\n\n      return dataObject ? dataObject.reporter : undefined;\n    }\n\n    /**\n    * returns the hyperty URL that subscribed the dataObject\n    * @param    {String}     url            url format\n    * @return   {String}    Hyperty URL subscribed to the URL\n    */\n\n  }, {\n    key: 'getDataObjectSubscriberHyperty',\n    value: function getDataObjectSubscriberHyperty(url) {\n      var _this = this;\n\n      return _this.subscribedDataObjectList[url];\n    }\n\n    /**\n    * register a desired dataObject to subscribe\n    * @param    {String}    dataObjectURL      dataObject URL\n    */\n\n  }, {\n    key: 'registerSubscribedDataObject',\n    value: function registerSubscribedDataObject(dataObjectURL, hypertyURL) {\n      var _this = this;\n      if (_this.subscribedDataObjectList[dataObjectURL] === undefined) {\n        _this.subscribedDataObjectList[dataObjectURL] = hypertyURL;\n      }\n    }\n\n    /**\n    * Function to return the list of pre authorised users received in the creation of a data object\n    * @param    {String}            dataObjectURL    dataObjectURL\n    * @return   {Array<String>}     preAuth         List of pre authorised users\n    */\n\n  }, {\n    key: 'getPreAuthSubscribers',\n    value: function getPreAuthSubscribers(dataObjectURL) {\n      var _this = this;\n      var dataObject = _this.dataObjectList[dataObjectURL];\n      var preAuth = [];\n\n      if (dataObject) {\n        preAuth = dataObject.authorise;\n      }\n      return preAuth;\n    }\n\n    /**\n    * send requests to unregister all hyperties registered in domain registry\n    * @return   {Promise}     return a promise if the result of unregistration all hyperties\n    */\n\n  }, {\n    key: 'unregisterAllHyperties',\n    value: function unregisterAllHyperties() {\n      var _this = this;\n\n      var unregisterResults = [];\n\n      return new _promise2.default(function (resolve, reject) {\n\n        for (var index in _this.hypertiesList) {\n          var hyperty = _this.hypertiesList[index];\n          var result = _this.unregisterHypertyInstance(hyperty.hypertyURL);\n          unregisterResults.push(result);\n        }\n\n        _promise2.default.all(unregisterResults).then(function () {\n\n          resolve('successfully unregistered all hyperties');\n        }, function (error) {\n          reject(error);\n        });\n      });\n    }\n\n    /**\n    *  function to unregister an hypertyInstance in the Domain Registry\n    *  @param   {String}      hypertyInstance   HypertyInsntance url\n    *\n    */\n\n  }, {\n    key: 'unregisterHypertyInstance',\n    value: function unregisterHypertyInstance(hypertyInstance) {\n      //TODO working but the user\n      var _this = this;\n\n      var closeMsg = { type: 'execute', from: _this.registryURL,\n        to: hypertyInstance,\n        body: { method: 'close' } };\n\n      // Send message to hyperty to close\n      _this._messageBus.postMessage(closeMsg, function (reply) {\n        log.log('[Registry.unregisterHypertyInstance] Close Reply', reply);\n\n        var message = { type: 'update', from: _this.registryURL,\n          to: 'domain://registry.' + _this._domain,\n          body: { resource: '/hyperty/' + hypertyInstance, value: 'disconnected', attribute: 'status' } };\n\n        _this._messageBus.postMessage(message, function (reply) {\n          log.log('[Registry] unregister hyperty Reply', reply);\n        });\n      });\n    }\n\n    /**\n    *  function to unregister an hypertyInstance in the Domain Registry\n    *  @param   {String}      hypertyInstance   HypertyInsntance url\n    *\n    */\n\n  }, {\n    key: 'unregisterDataObject',\n    value: function unregisterDataObject(url) {\n      var _this = this;\n\n      var message = { type: 'update', from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain,\n        body: {\n          resource: url,\n          value: {\n            status: 'disconnected'\n          }\n        } };\n\n      _this._messageBus.postMessage(message, function (reply) {\n        log.log('[Registry] unregister dataObject Reply', reply);\n      });\n    }\n\n    /**\n    *  function to delete an dataObjectInstance in the Domain Registry\n    *  @param   {String}    name      DataObjectName\n    */\n\n  }, {\n    key: 'deleteDataObjectInstance',\n    value: function deleteDataObjectInstance(name) {\n      var _this = this;\n\n      var message = { type: 'delete', from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain,\n        body: { value: { name: name } } };\n\n      _this._messageBus.postMessage(message, function (reply) {\n        log.log('[Registry] unregister dataObject Reply', reply);\n      });\n    }\n\n    /**\n    * Function to update an Hyperty\n    */\n\n  }, {\n    key: 'updateHypertyInstance',\n    value: function updateHypertyInstance(resource, value) {\n      var _this = this;\n\n      var message = { type: 'UPDATE', from: _this.registryURL,\n        to: 'domain://registry.' + _this._domain,\n        body: { resource: resource, value: value } };\n\n      _this._messageBus.post.postMessage(message, function (reply) {\n        // log.log('[Registry] Updated hyperty reply', reply);\n      });\n    }\n\n    /**\n    * register a new subscriber in the dataObject registered\n    * @param  {String}   dataObjectURL    dataObject URL\n    * @param  {String}   subscriberURL    subscriber URL\n    */\n\n  }, {\n    key: 'registerSubscriber',\n    value: function registerSubscriber(dataObjectURL, subscriberURL) {\n      var _this = this;\n      var dataObject = _this.dataObjectList[dataObjectURL];\n\n      if (dataObject) {\n\n        if (!dataObject.subscribers) dataObject.subscribers = [];\n\n        dataObject.subscribers.push(subscriberURL);\n        _this.dataObjectList[dataObjectURL] = dataObject;\n      }\n    }\n\n    /**\n    * get the subscribers registered within a dataObject\n    * @param  {String}          dataObjectURL    dataObject URL\n    * @param  {Array<String>}   Substribers List\n    */\n\n  }, {\n    key: 'getDataObjectSubscribers',\n    value: function getDataObjectSubscribers(dataObjectURL) {\n      var _this = this;\n      var dataObject = _this.dataObjectList[dataObjectURL];\n\n      if (dataObject) {\n        return dataObject.subscribers;\n      } else {\n        throw 'No dataObject was found';\n      }\n    }\n\n    /**\n    * To register a new Data Object in the runtime which returns the dataObjectURL allocated to the new Data Object.\n    * @param  {String}      identifier                  identifier\n    * @param  {String}      dataObjectschema            dataObjectschema\n    * @param  {String}      dataObjectUrl               dataObjectUrl\n    * @param {String}      dataObjectReporter           dataObjectReporter\n    * @param  {Array}     resources                     dataObject resources\n    * @param  {Array}     authorise                     list of pre authorised authorised IDs\n    */\n    //registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, resources, addressURL, authorise) {\n\n  }, {\n    key: 'registerDataObject',\n    value: function registerDataObject(objectRegistration) {\n      var _this = this;\n\n      var registration = (0, _utils.deepClone)(objectRegistration);\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var dataScheme = [];\n        var filteredDataScheme = registration.url.split(':');\n        dataScheme.push(filteredDataScheme[0]);\n\n        _this.storageManager.get('registry:DataObjectURLs').then(function (urlsList) {\n\n          if (!urlsList) {\n            urlsList = {};\n          }\n\n          //update the list with the new elements\n          urlsList[objectRegistration.name + objectRegistration.schema + objectRegistration.resources + objectRegistration.reporter] = objectRegistration.url;\n\n          var p2pHandler = void 0;\n          var p2pRequester = void 0;\n\n          if ((0, _keys2.default)(_this.p2pHandlerStub).length !== 0) {\n            p2pHandler = _this.p2pHandlerStub[_this.runtimeURL].url;\n            p2pRequester = _runtimeUtils.runtimeUtils.runtimeDescriptor.p2pRequesterStub;\n          }\n\n          registration.startingTime = registration.created;\n\n          delete registration.authorise;\n          delete registration.created;\n          delete registration.mutual;\n          delete registration.resume;\n\n          if (!registration.expires) registration.expires = _this.expiresTime;\n\n          registration.dataSchemes = dataScheme;\n\n          if (p2pHandler) {\n            registration.p2pHandler = p2pHandler;\n            registration.p2pRequester = p2pRequester;\n          }\n\n          if (_this.isInterworkingProtoStub(registration.reporter)) {\n            registration.interworking = true;\n          }\n\n          registration.status = 'live';\n\n          var message = void 0;\n\n          if (!objectRegistration.resume) {\n\n            log.log('[Registry.registerDataObject] registering new data object URL', registration);\n\n            message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain, body: { value: registration, policy: 'policy' } };\n          } else {\n\n            log.log('[Registry.registerDataObject] registering previously registered data object URL', registration);\n\n            message = {\n              type: 'update',\n              to: 'domain://registry.' + _this.registryDomain,\n              from: _this.registryURL,\n              body: { resource: registration.url, value: { status: 'live' } }\n            };\n          }\n\n          _this.dataObjectList[registration.url] = objectRegistration;\n\n          // step to obtain the list of all URL registered to updated with the new one.\n          _this.storageManager.set('registry:DataObjectURLs', 0, urlsList).then(function () {\n\n            try {\n              _this._messageBus.postMessageWithRetries(message, _this._registrationRetries, function (reply) {\n                // log.log('[Registry.registerDataObject] ===> registerDataObject Reply: ', reply);\n                if (reply.body.code === 200) {\n                  resolve(registration);\n                } else {\n                  reject('error on register DataObject');\n                }\n              });\n            } catch (e) {\n              log.error(e);\n              reject(e);\n            }\n\n            //timer to keep the registration alive\n            // the time is defined by a little less than half of the expires time defined\n            var keepAliveTimer = setInterval(function () {\n\n              var message = {\n                type: 'update',\n                from: _this.registryURL,\n                to: 'domain://registry.' + _this.registryDomain,\n                body: { resource: registration.url, value: { status: 'live' }, method: 'refresh' }\n              };\n\n              _this._messageBus.postMessage(message, function (reply) {\n                // log.log('[Registry.registerDataObject] KeepAlive Reply: ', reply);\n              });\n            }, registration.expires / 1.1 / 2 * 1000);\n          }).catch(function (reason) {\n            log.error('[Registry registerHyperty] Error: ', reason);\n            reject(reason);\n          });\n        });\n      });\n    }\n  }, {\n    key: '_getResourcesAndSchemes',\n    value: function _getResourcesAndSchemes(descriptor) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve) {\n\n        var resources = void 0;\n\n        // check if the hyperty resources is a vector or a string\n        // TODO delete later when catalogue is fixed\n        if (typeof descriptor.hypertyType === 'string') {\n          resources = [];\n          resources.push(descriptor.hypertyType);\n        } else {\n          resources = descriptor.hypertyType;\n        }\n\n        var objName = descriptor.objectName;\n\n        var descriptorDataSchema = descriptor.dataObjects;\n        var dataSchemasArray = [];\n\n        //this will create a array with a Promise in each position\n        for (var index in descriptorDataSchema) {\n          dataSchemasArray.push(_this.runtimeCatalogue.getDataSchemaDescriptor(descriptorDataSchema[index]));\n        }\n\n        // as soon as the previous array is completed, this will wait for the resolve of all promises in the array\n        _promise2.default.all(dataSchemasArray).then(function (dataSchemas) {\n\n          var filteredDataSchemas = [];\n          for (var _index in dataSchemas) {\n            var dataSchema = dataSchemas[_index];\n            filteredDataSchemas.push(dataSchema.sourcePackage.sourceCode.properties.scheme.constant);\n          }\n\n          // log.log('[Registry] Hyperty Schemas', filteredDataSchemas);\n          // log.log('[Registry] Hyperty resources', resources);\n\n          resolve({ resources: resources, dataSchema: filteredDataSchemas, name: objName });\n        });\n      });\n    }\n\n    /**\n    * method that returns previously registered Hyperty or DataObjects URLS, for given characteristics\n    * @param  {JSON}        info           object or hyperty charateristics info\n    * @return {addressURL}  addressURL     return the URL if there is any previousy registered URL, return undefined otherwise\n    */\n\n  }, {\n    key: 'checkRegisteredURLs',\n    value: function checkRegisteredURLs(info, reuseURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve) {\n\n        var objectType = info.reporter ? 'registry:DataObjectURLs' : 'registry:HypertyURLs';\n\n        if (typeof reuseURL === 'string') {\n          objectType = reuseURL && (0, _utils.divideURL)(reuseURL).type !== 'hyperty' ? 'registry:DataObjectURLs' : 'registry:HypertyURLs';\n        }\n\n        _this.storageManager.get(objectType).then(function (urlsList) {\n\n          if (!urlsList) {\n            urlsList = {};\n          }\n\n          if (typeof reuseURL === 'string') {\n            log.info('[Registry - checkRegisteredURLs] - look for ' + reuseURL + ' on ', urlsList);\n\n            var searchResult = (0, _keys2.default)(urlsList).map(function (key) {\n              var indexOf = urlsList[key].indexOf(reuseURL);\n              return urlsList[key][indexOf];\n            });\n\n            log.info('[Registry - checkRegisteredURLs] - found ' + searchResult.length + ' results on ', searchResult);\n            if (searchResult.length === 1) {\n              return resolve(searchResult);\n            } else {\n              return resolve(undefined);\n            }\n          }\n\n          if (objectType === 'registry:HypertyURLs') {\n            _this._getResourcesAndSchemes(info).then(function (value) {\n              if (urlsList[value.resources + value.dataSchema + value.name]) {\n                // log.log('[Registry] reusage of hyperty URL');\n                return resolve(urlsList[value.resources + value.dataSchema + value.name]);\n              } else {\n                // log.log('[Registry] no hyperty URL was previously registered ');\n                return resolve(undefined);\n              }\n            });\n          } else {\n\n            var characteristics = info.name + info.schema + info.resources + info.reporter;\n\n            if (urlsList[characteristics]) {\n              // log.log('[Registry] reusage of dataObject URL');\n              return resolve(urlsList[characteristics]);\n            } else {\n              // log.log('[Registry] no dataObject URL was previously registered');\n              return resolve(undefined);\n            }\n          }\n        });\n      });\n    }\n\n    /**\n    * To register a new Hyperty in the runtime which returns the HypertyURL allocated to the new Hyperty.\n    * @param  {Sandbox}             sandbox               sandbox\n    * @param  {HypertyCatalogueURL} HypertyCatalogueURL   descriptor\n    * @param {object} IdpConstraint - constraints to be used when selecting the identity to be associated with the Hyperty including origin, idp, and idHint.\n    * @return {HypertyURL}          HypertyURL\n    */\n\n  }, {\n    key: 'registerHyperty',\n    value: function registerHyperty(sandbox, descriptorURL, descriptor, addressURL, IdpConstraint) {\n      var _this = this;\n\n      var hypertyCapabilities = void 0;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //assuming descriptor come in this format, the service-provider-domain url is retrieved by a split instruction\n        //hyperty-catalogue://<service-provider-domain>/<catalogue-object-identifier>\n        var domainUrl = (0, _utils.divideURL)(descriptorURL).domain;\n\n        if (domainUrl.includes('catalogue')) {\n          domainUrl = domainUrl.replace('catalogue.', '');\n        }\n\n        _this.idModule.getIdentityAssertion(IdpConstraint).then(function (result) {\n\n          var userProfile = result.userProfile;\n\n          // log.log('[Registry registerHyperty] userProfile', userProfile);\n          var emailURL = userProfile.userURL;\n\n          if (_this._messageBus === undefined) {\n            reject('[Registry registerHyperty] MessageBus is undefined');\n          } else {\n            //call check if the protostub exist: to be removed\n            /*  _this.resolve(domainUrl).then(function(a) {\n              // log.log('[Registry registerHyperty] stub to domain registry- ', a);*/\n\n            _this.storageManager.get('registry:HypertyURLs').then(function (urlsList) {\n\n              // log.log('[Registry registerHyperty] storageManager] - ', urlsList);\n\n              _this._getResourcesAndSchemes(descriptor).then(function (value) {\n\n                hypertyCapabilities = value;\n\n                if (!urlsList) {\n                  urlsList = {};\n                }\n\n                urlsList[hypertyCapabilities.resources + hypertyCapabilities.dataSchema + hypertyCapabilities.name] = addressURL.address;\n                _this.storageManager.set('registry:HypertyURLs', 0, urlsList).then(function () {\n\n                  _this.registryDomain = domainUrl;\n\n                  //check whether the received sanbox e ApplicationSandbox or a normal sandbox\n                  if (sandbox.type === 'app') {\n                    _this.sandboxesList.appSandbox[addressURL.address[0]] = sandbox;\n                  } else if (sandbox.type === 'normal') {\n                    _this.sandboxesList.sandbox[addressURL.address[0]] = sandbox;\n                  } else {\n                    reject('Wrong SandboxType');\n                  }\n\n                  var p2pHandler = void 0;\n                  var p2pRequester = void 0;\n\n                  if ((0, _keys2.default)(_this.p2pHandlerStub).length !== 0) {\n                    p2pHandler = _this.p2pHandlerStub[_this.runtimeURL].url;\n                    p2pRequester = _runtimeUtils.runtimeUtils.runtimeDescriptor.p2pRequesterStub;\n                  }\n\n                  var runtime = _this.runtimeURL;\n                  var status = 'live';\n\n                  var hyperty = new _HypertyInstance2.default(_this.identifier, _this.registryURL, descriptorURL, descriptor, addressURL.address[0], userProfile, 'guid', _this.runtimeURL, 'ctx', p2pHandler, p2pRequester, hypertyCapabilities.dataSchema, hypertyCapabilities.resources);\n\n                  _this.hypertiesList.push(hyperty);\n\n                  //message to register the new hyperty, within the domain registry\n                  var messageValue = void 0;\n                  var message = void 0;\n                  var registrationExpires = _this.expiresTime;\n\n                  // set a different expires value if configured in the Hyperty descriptor\n\n                  if (descriptor.configuration && descriptor.configuration.expires) registrationExpires = descriptor.configuration.expires;\n\n                  if (addressURL.newAddress) {\n                    // log.log('[Registry registerHyperty] registering new Hyperty URL', addressURL.address[0]);\n\n                    messageValue = {\n                      user: emailURL,\n                      descriptor: descriptorURL,\n                      url: addressURL.address[0],\n                      expires: registrationExpires,\n                      resources: hypertyCapabilities.resources,\n                      dataSchemes: hypertyCapabilities.dataSchema,\n                      runtime: runtime,\n                      status: status\n                    };\n\n                    // set a different expires if defined in the hyperty configuration\n\n                    if (p2pHandler) {\n                      messageValue.p2pHandler = p2pHandler;\n                      messageValue.p2pRequester = p2pRequester;\n                    }\n\n                    // log.log('[Registry registerHyperty] registering new Hyperty at domain registry ', messageValue);\n\n                    message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain, body: { value: messageValue, policy: 'policy' } };\n                  } else {\n                    // log.log('[Registry registerHyperty] registering previously registered Hyperty URL', addressURL.address[0]);\n\n                    message = {\n                      type: 'update',\n                      to: 'domain://registry.' + _this.registryDomain,\n                      from: _this.registryURL,\n                      body: { resource: addressURL.address[0], value: { status: 'live', user: emailURL } }\n                    };\n\n                    if (p2pHandler) {\n                      message.body.value.p2pHandler = p2pHandler;\n                      message.body.value.p2pRequester = p2pRequester;\n                    }\n                  }\n\n                  // log.log('[Registry registerHyperty] Hyperty registration at domain registry  - ', message);\n\n                  try {\n                    _this._messageBus.postMessageWithRetries(message, _this.registrationRetries, function (reply) {\n                      // log.log('[Registry registerHyperty] Hyperty registration response: ', reply);\n\n                      if (reply.body.code === 200) {\n                        var _result = { url: addressURL.address[0] };\n                        if (p2pHandler) {\n                          _result.p2pHandler = p2pHandler;\n                          _result.p2pRequester = p2pRequester;\n                        }\n\n                        resolve(_result);\n                      } else if (reply.body.code === 404) {\n                        // log.log('[Registry registerHyperty] The update was not possible. Registering new Hyperty at domain registry');\n\n                        messageValue = {\n                          user: emailURL,\n                          descriptor: descriptorURL,\n                          url: addressURL.address[0],\n                          expires: registrationExpires,\n                          resources: hypertyCapabilities.resources,\n                          dataSchemes: hypertyCapabilities.dataSchema,\n                          runtime: runtime,\n                          status: status\n                        };\n\n                        if (p2pHandler) {\n                          messageValue.p2pHandler = p2pHandler;\n                          messageValue.p2pRequester = p2pRequester;\n                        }\n\n                        message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain, body: { value: messageValue, policy: 'policy' } };\n\n                        try {\n                          _this._messageBus.postMessageWithRetries(message, _this.registrationRetries, function (reply) {\n                            // log.log('[Registry registerHyperty] Hyperty registration update response: ', reply);\n\n                            if (reply.body.code === 200) {\n                              var _result2 = { url: addressURL.address[0] };\n                              if (p2pHandler) {\n                                _result2.p2pHandler = p2pHandler;\n                                _result2.p2pRequester = p2pRequester;\n                              }\n\n                              resolve(_result2);\n                            } else {\n                              throw new Error('Failed to register an Hyperty: ' + reply);\n                            }\n                          });\n                        } catch (e) {\n                          log.error(e);\n                          reject(e);\n                        }\n                      } else throw new Error('Failed to register an Hyperty: ', reply);\n                    });\n                  } catch (e) {\n                    log.error(e);\n                    reject(e);\n                  }\n\n                  //timer to keep the registration alive\n                  // the time is defined by a little less than half of the expires time defined\n                  var keepAliveTimer = setInterval(function () {\n\n                    var message = {\n                      type: 'update',\n                      from: _this.registryURL,\n                      to: 'domain://registry.' + _this.registryDomain,\n                      body: { resource: addressURL.address[0], value: { status: 'live' }, method: 'refresh' } };\n\n                    _this._messageBus.postMessage(message, function (reply) {\n                      // log.log('[Registry registerHyperty] KeepAlive Reply: ', reply);\n                    });\n                  }, registrationExpires / 1.1 / 2 * 1000);\n                }).catch(function (reason) {\n                  // log.log('[Registry registerHyperty] Error: ', reason);\n                  reject(reason);\n                });\n              });\n            });\n          }\n        }, function (err) {\n          reject('[Registry registerHyperty] ', err);\n        });\n      });\n    }\n\n    /**\n    * To unregister a previously registered Hyperty\n    * @param  {HypertyURL}          HypertyURL url        url\n    */\n\n  }, {\n    key: 'unregisterHyperty',\n    value: function unregisterHyperty(url) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var found = false;\n        var index = 0;\n\n        for (index = 0; index < _this.hypertiesList.length; index++) {\n          var hyperty = _this.hypertiesList[index];\n          if (hyperty !== undefined) {\n            if (hyperty.hypertyURL === url) {\n              found = true;\n              break;\n            }\n          }\n        }\n\n        if (found === false) {\n          reject('Hyperty not found');\n        } else {\n          delete _this.hypertiesList[index];\n          resolve('Hyperty successfully deleted');\n        }\n      });\n    }\n\n    /**\n    * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).\n    * @param  {DomainURL}           DomainURL            url\n    * @return {RuntimeURL}           RuntimeURL\n    */\n\n  }, {\n    key: 'discoverProtostub',\n    value: function discoverProtostub(url) {\n      if (!url) throw new Error('Parameter url needed');\n      var _this = this;\n\n      var dividedURL = (0, _utils.divideURL)(url);\n      var domainURL = dividedURL.domain;\n\n      if (_this.protostubsList.hasOwnProperty(domainURL) && _this.protostubsList[domainURL].status === STATUS.LIVE) {\n        return _this.protostubsList[domainURL];\n      } else {\n\n        _this.protostubsList[domainURL] = {\n          status: STATUS.DEPLOYING\n        };\n\n        throw new Error('[Registry - discoverProtoStub ] Message Node Protostub Not Found. Creating one');\n      }\n    }\n\n    /**\n    * To discover protocol stubs available in the runtime for a certain remote runtime URL. If available, it returns the runtime url for the protocol stub that connects to the requested domain.\n    * Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).\n    * @param  {RuntimeURL}           RuntimeURL            url\n    * @return {p2pRequester}           RuntimeURL\n    */\n\n  }, {\n    key: 'discoverP2PStub',\n    value: function discoverP2PStub(runtimeURL) {\n      var _this = this;\n\n      if (runtimeURL) {\n\n        if (_this.p2pRequesterStub.hasOwnProperty(runtimeURL) && _this.p2pRequesterStub[runtimeURL].status === STATUS.LIVE) {\n          return _this.p2pRequesterStub[runtimeURL];\n        } else {\n          _this.p2pRequesterStub[runtimeURL] = {\n            status: STATUS.CREATED\n          };\n\n          throw new Error('[Registry - discoverP2PStub ] P2P Requester Stub Not Found. Creating one');\n        }\n      } else {\n\n        if (_this.p2pHandlerStub.hasOwnProperty(_this.runtimeURL)) {\n          return _this.p2pHandlerStub[_this.runtimeURL];\n        } else {\n          _this.p2pHandlerStub[_this.runtimeURL] = {\n            status: STATUS.CREATED\n          };\n\n          throw new Error('[Registry - discoverP2PStub ] P2P Handler Stub Not Found.');\n        }\n      }\n    }\n\n    /**\n     * To register a new Protocol Stub in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.\n     * @param  {Sandbox}       Sandbox\n     * @param  {stubID}        Domain or hyperty runtime to register the stub\n     * @param  {descriptorURL}     Catalogue URL of the Protostub descriptor\n     * @param  {descriptor}     Protostub descriptor\n     * @return {RuntimeProtoStubURL}\n     */\n\n  }, {\n    key: 'registerStub',\n    value: function registerStub(sandbox, stubID, p2pConfig, descriptorURL, descriptor) {\n      var _this = this;\n\n      var _stubDescriptor = descriptor;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var runtimeProtoStubURL = void 0;\n\n        //check if messageBus is registered in registry or not\n        if (_this._messageBus === undefined) {\n          reject('MessageBus not found on registerStub');\n        }\n\n        log.info('[Registry - registerStub] - stubID ', stubID);\n\n        /* if (!stubID.indexOf('msg-node.')) {\n          stubID = stubID.substring(stubID.indexOf('.') + 1);\n        }*/\n\n        var P2PRequesterStub = void 0;\n\n        if (p2pConfig) {\n\n          if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {\n            runtimeProtoStubURL = _this.p2pHandlerURL;\n\n            _this.p2pHandlerStub[stubID] = {\n              url: runtimeProtoStubURL,\n              status: STATUS.CREATED\n            };\n\n            _this.p2pHandlerAssociation[_this.runtimeURL] = [];\n\n            _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;\n            log.info('[Registry - registerStub - P2PHandlerStub] - ', stubID, ' - ', runtimeProtoStubURL);\n            resolve(_this.p2pHandlerStub[stubID]);\n          } else {\n            P2PRequesterStub = p2pConfig.p2pRequesterStub;\n            runtimeProtoStubURL = 'runtime://' + (0, _utils.divideURL)(p2pConfig.remoteRuntimeURL).domain + '/p2prequester/' + (0, _utils.generateGUID)();\n            log.info('[Registry - registerStub - P2PRequesterStub] - ', P2PRequesterStub, ' - ', runtimeProtoStubURL);\n\n            // to be clarified what is this p2pHandlerAssociation\n            _this.p2pHandlerAssociation[_this.runtimeURL].push(runtimeProtoStubURL);\n            _this.p2pRequesterStub[stubID] = {\n              url: runtimeProtoStubURL,\n              status: STATUS.CREATED\n            };\n\n            _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;\n\n            //Setup P2P Requester path into MN\n\n            var msg = {\n              type: 'subscribe',\n              from: _this.registryURL,\n              to: 'domain://msg-node.' + _this._domain + '/sm',\n              body: {\n                subscribe: [runtimeProtoStubURL],\n                source: _this.registryURL\n              }\n            };\n\n            _this._messageBus.postMessage(msg, function (reply) {\n              // log.log('[Registry - register Stub] p2pRequester path setup: ', reply);\n            });\n\n            resolve(_this.p2pRequesterStub[stubID]);\n          }\n        } else {\n          runtimeProtoStubURL = 'runtime://' + stubID + '/protostub/' + (0, _utils.generateGUID)();\n\n          log.info('[Registry - registerStub - Normal Stub] - ', stubID);\n\n          // TODO: Optimize this\n          _this.protostubsList[stubID] = {\n            url: runtimeProtoStubURL,\n            status: STATUS.DEPLOYING\n          };\n\n          if (descriptorURL) {\n            _this.protostubsList[stubID].descriptorURL = descriptorURL;\n          }\n\n          if (_stubDescriptor && _stubDescriptor.interworking) {\n            _this.protostubsList[stubID].interworking = _stubDescriptor.interworking;\n          }\n\n          _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;\n\n          resolve(_this.protostubsList[stubID]);\n        }\n\n        // resolve(runtimeProtoStubURL);\n\n        _this._messageBus.addListener(runtimeProtoStubURL + '/status', function (msg) {\n          _this._onProtostubStatusEvent(msg);\n        });\n      });\n    }\n\n    /**\n    * To Process status events fired by protostubs\n    * @param  {Message}   message     Event Message\n    */\n\n  }, {\n    key: '_onProtostubStatusEvent',\n    value: function _onProtostubStatusEvent(msg) {\n\n      var _this = this;\n\n      // log.log('[Registry onProtostubStatusEvent]: ', msg);\n\n      var runtimeProtoStubURL = msg.from;\n\n      if (!msg.to.includes('/status')) {\n        log.error('[Registry onProtostubStatusEvent] Not Status Event: ', msg);\n        return;\n      }\n\n      // process status events from message node protostubs\n\n      if (runtimeProtoStubURL.includes('/protostub/')) {\n\n        // TODO: uncomment below when protostubs are updated with new status value \"live\"\n        (0, _keys2.default)(_this.protostubsList).filter(function (key) {\n          return _this.protostubsList[key].url === runtimeProtoStubURL;\n        }).map(function (key) {\n          _this.protostubsList[key].status = msg.body.value;\n\n          // log.log('[Registry - onProtostubStatusEvent] - Protostub status: ', _this.protostubsList[key]);\n        });\n      } else {\n        // process status events from p2p connections\n\n        if (msg.body.resource) {\n          var remoteRuntimeURL = msg.body.resource;\n\n          if (_this.p2pConnectionList[remoteRuntimeURL]) {\n            _this.p2pConnectionList[remoteRuntimeURL].status = msg.body.value;\n            _this.p2pConnectionList[remoteRuntimeURL].url = runtimeProtoStubURL;\n          } else {\n\n            var p2pConnection = {\n              status: msg.body.value,\n              url: runtimeProtoStubURL\n            };\n\n            _this.p2pConnectionList[remoteRuntimeURL] = p2pConnection;\n          }\n\n          // log.log('[Registry - onProtostubStatusEvent] - P2PConnection status: ', _this.p2pConnectionList[remoteRuntimeURL]);\n\n          // Update P2P Requester protostub if it is coming from there\n          if (runtimeProtoStubURL.includes('/p2prequester/')) {\n            _this.p2pRequesterStub[remoteRuntimeURL].status = msg.body.value;\n\n            // log.log('[Registry - onProtostubStatusEvent] - P2P Requester status: ', _this.p2pRequesterStub[remoteRuntimeURL]);\n          } else {\n            // if from P2PHandler with status disconencted, lets remove from p2pConnectionList\n            if (msg.body.value === 'disconnected') delete _this.p2pConnectionList[remoteRuntimeURL];\n          }\n        } else {\n          if (runtimeProtoStubURL.includes('/p2prequester/')) {\n            // It is an event from P2P Requester without mandatory \"resource\" field\n            log.error('[Registry onProtostubStatusEvent] resource missing: ', msg);\n            return;\n          } else {\n            // It is an event from P2P Handler\n            _this.p2pHandlerStub[_this.runtimeURL].status = msg.body.value;\n\n            // log.log('[Registry - onProtostubStatusEvent] - P2PHandler Stub status: ', _this.p2pHandlerStub[_this.runtimeURL]);\n          }\n        }\n      }\n    }\n\n    /**\n    * To unregister a previously registered protocol stub\n    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     hypertyRuntimeURL\n    */\n\n  }, {\n    key: 'unregisterStub',\n    value: function unregisterStub(hypertyRuntimeURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        if (_this.protostubsList.hasOwnProperty(hypertyRuntimeURL)) {\n          delete _this.protostubsList[hypertyRuntimeURL];\n          resolve('ProtostubURL removed');\n        } else {\n          reject('Error on unregisterStub: Hyperty not found');\n        }\n      });\n    }\n\n    /**\n     * To register a new Identity Provider proxy in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.\n     * @param {Sandbox}        Sandbox\n     * @param  {DomainURL}     DomainURL service provider domain\n     * @return {RuntimeIdpProxyURL}\n     */\n\n  }, {\n    key: 'registerIdpProxy',\n    value: function registerIdpProxy(sandbox, domainURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var idpProxyStubURL = void 0;\n\n        //check if messageBus is registered in registry or not\n        if (_this._messageBus === undefined) {\n          reject('MessageBus not found on registerStub');\n        }\n\n        idpProxyStubURL = 'domain-idp://' + domainURL + '/stub/' + (0, _utils.generateGUID)();\n\n        // TODO: Optimize this\n        _this.idpProxyList[domainURL] = {\n          url: idpProxyStubURL,\n          status: STATUS.DEPLOYING\n        };\n\n        _this.sandboxesList.sandbox[idpProxyStubURL] = sandbox;\n\n        // sandbox.addListener('*', function(msg) {\n        //   _this._messageBus.postMessage(msg);\n        // });\n\n        resolve(idpProxyStubURL);\n\n        _this._messageBus.addListener(idpProxyStubURL + '/status', function (msg) {\n          _this._onIdpProxyStatusEvent(msg);\n        });\n      });\n    }\n\n    /**\n    * To Process status events fired by Idp Proxies\n    * @param  {Message}   message     Event Message\n    */\n\n  }, {\n    key: '_onIdpProxyStatusEvent',\n    value: function _onIdpProxyStatusEvent(msg) {\n\n      var _this = this;\n\n      // log.log('[Registry onIdpProxyStatusEvent]: ', msg);\n\n      var idpProxyURL = msg.from;\n\n      if (!msg.to.includes('/status')) {\n        log.error('[Registry onIdpProxyStatusEvent] Not Status Event: ', msg);\n        return;\n      }\n\n      (0, _keys2.default)(_this.idpProxyList).filter(function (key) {\n        return _this.idpProxyList[key].url === idpProxyURL;\n      }).map(function (key) {\n        _this.idpProxyList[key].status = msg.body.value;\n\n        // log.log('[Registry - onIdpProxyStatusEvent] - Idp Proxy status: ', _this.idpProxyList[key]);\n      });\n    }\n\n    /**\n    * To discover idpProxy stubs available in the runtime for a certain domain. If available, it returns the runtime url for the idpProxy stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers\n    * @param  {DomainURL}           DomainURL            url\n    * @return {RuntimeURL}           RuntimeURL         idpProxyUrl\n    */\n\n  }, {\n    key: 'discoverIdpProxy',\n    value: function discoverIdpProxy(url) {\n      if (!url) throw new Error('Parameter url needed');\n      var _this = this;\n\n      var dividedURL = (0, _utils.divideURL)(url);\n      var domainURL = dividedURL.domain;\n\n      if (_this.idpProxyList.hasOwnProperty(domainURL) && _this.idpProxyList[domainURL].status === STATUS.LIVE) {\n        return _this.idpProxyList[domainURL];\n      } else {\n\n        _this.idpProxyList[domainURL] = {\n          status: STATUS.PROGRESS\n        };\n\n        throw new Error('[Registry - discoverIdpProxy ] Idp Proxy Not Found. Creating one');\n      }\n    }\n\n    /**\n    * To register a new Policy Enforcer in the runtime including as input parameters the function to postMessage, the HypertyURL associated with the PEP, which returns the RuntimeURL allocated to the new Policy Enforcer component.\n    * @param  {Message.Message} postMessage postMessage\n    * @param  {HypertyURL}          HypertyURL            hyperty\n    * @return {HypertyRuntimeURL}   HypertyRuntimeURL\n    */\n\n  }, {\n    key: 'registerPEP',\n    value: function registerPEP(postMessage, hyperty) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve) {\n        //TODO check what parameter in the postMessage the pep is.\n        _this.pepList[hyperty] = postMessage;\n        resolve('PEP registered with success');\n      });\n    }\n\n    /**\n    * To unregister a previously registered protocol stub\n    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     HypertyRuntimeURL\n    */\n\n  }, {\n    key: 'unregisterPEP',\n    value: function unregisterPEP(HypertyRuntimeURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var result = _this.pepList[HypertyRuntimeURL];\n\n        if (result === undefined) {\n          reject('Pep Not found.');\n        } else {\n          resolve('PEP successfully removed.');\n        }\n      });\n    }\n\n    /**\n    * To discover sandboxes available in the runtime for a certain domain and a certain set of capabilities. Required by the runtime UA to avoid more than one sandbox for the same domain.\n    * @param  {DomainURL} DomainURL url\n    * @return {RuntimeSandbox}           RuntimeSandbox\n    */\n\n  }, {\n    key: 'getSandbox',\n    value: function getSandbox(url, constraints) {\n      if (!url) throw new Error('Parameter url needed');\n\n      // log.log('[Registry getSandbox] getSandbox for: ', url, ' and capabilities: ', constraints);\n\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n\n        var request = void 0;\n\n        //first try to find the url in the appSandbox list\n        request = _this.sandboxesList.appSandbox[url];\n\n        //if no appSandbox was found, try to search in the normal sandboxes list\n        if (!request) {\n          request = _this.sandboxesList.sandbox[url];\n\n          if (!request) {\n\n            var domain = void 0;\n\n            if (url.includes('://')) {\n              domain = (0, _utils.divideURL)(url).domain;\n            } else {\n              domain = url;\n            }\n\n            // search in the sandboxes list for a entry containing the domain given\n            for (var sandbox in _this.sandboxesList.sandbox) {\n              //todo: uncomment sandbox constraints match condition with runtime sharing\n              if (sandbox.includes(domain) && _this.sandboxesList.sandbox[sandbox].matches(constraints)) {\n                var _ret = function () {\n                  var current = _this.sandboxesList.sandbox[sandbox];\n                  var match = (0, _keys2.default)(constraints).filter(function (constraint) {\n                    return constraint === 'browser' && current.type === _Sandbox.SandboxType.NORMAL || constraint === 'windowSanbox' && current.type === _Sandbox.SandboxType.WINDOW;\n                  }).length > 0 ? true : false;\n\n                  if (match) {\n                    request = current;\n                  }\n                  return 'break';\n                }();\n\n                if (_ret === 'break') break;\n              }\n            }\n          }\n        }\n\n        if (!request) {\n          reject('no sandbox found for: ' + url);\n        } else {\n          resolve(request);\n        }\n      });\n    }\n  }, {\n    key: 'resolveNormalStub',\n    value: function resolveNormalStub(url) {\n      // log.log('resolveNormalStub ' + url);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //split the url to find the domainURL. deals with the url for example as:\n        //\"hyperty-runtime://sp1/protostub/123\",\n        var dividedURL = (0, _utils.divideURL)(url);\n        var domainUrl = dividedURL.domain;\n        var type = dividedURL.type;\n\n        if (url.includes(_this.runtimeURL)) {\n          log.error('[Registry - resolve] URL to be resolved should have listeners ', url);\n          reject('[Registry - resolve] URL to be resolved should have listeners ', url);\n        }\n\n        // resolve the domain protostub in case of a message to global registry\n        if (url.includes('global://registry')) {\n          domainUrl = _this._domain;\n        } else {\n          if (!domainUrl.indexOf('msg-node.') || !domainUrl.indexOf('registry.')) {\n            domainUrl = domainUrl.substring(domainUrl.indexOf('.') + 1);\n          }\n        }\n\n        _this.isLegacy(url).then(function (isLegacy) {\n\n          // if legacy it should resolve for <protocol>.<domain>\n          if (isLegacy && type !== 'domain-idp') {\n            domainUrl = type + '.' + (0, _utils.getUserIdentityDomain)(url);\n          }\n\n          log.info('[Registry.resolve] domainUrl:', domainUrl);\n\n          var registredComponent = void 0;\n\n          if (type === 'domain-idp') {\n            registredComponent = _this.idpProxyList.hasOwnProperty(domainUrl) ? _this.idpProxyList[domainUrl] : false;\n          } else {\n            registredComponent = _this.protostubsList.hasOwnProperty(domainUrl) ? _this.protostubsList[domainUrl] : false;\n          }\n\n          log.info('[Registry.resolve] registred:', registredComponent);\n\n          // TODO since the protostubs have other states this should be revised, because the status could change from DEPLOYED to LIVE\n          // TODO and this validation will trigger a new load of IDPProxy or Protostub;\n          if (registredComponent && registredComponent.hasOwnProperty('status') && (registredComponent.status === STATUS.DEPLOYED || registredComponent.status === STATUS.CREATED || registredComponent.status === STATUS.LIVE || registredComponent.status === STATUS.DISCONNECTED)) {\n            log.info('[Registry.resolve] Resolved: ', registredComponent.url, registredComponent.status);\n            resolve(registredComponent.url);\n          } else {\n            //todo: use switch-case to support other types of stubs\n            if (type === 'domain-idp') {\n\n              // The IdP Proxy does not exist, let's prepare its deployment by watching its status\n\n              _this.watchingYou.observe('idpProxyList', function (change) {\n\n                // log.log('[Registry - resolveNormalStub] idpProxyList changed ' + _this.idpProxyList);\n\n                var keypath = change.keypath;\n\n                if (keypath.includes('status')) keypath = keypath.replace('.status', '');\n\n                if (keypath === domainUrl && change.name === 'status' && change.newValue === STATUS.CREATED) {\n                  // log.log('[Registry - resolveNormalStub] idpProxyList is live ' + _this.idpProxyList[domainUrl]);\n                  resolve(_this.idpProxyList[domainUrl].url);\n                }\n              });\n\n              if (!registredComponent) {\n                // this process will load the idp proxy, because is not yet registered;\n                log.info('[Registry.resolveNormalStub] deploy new IDPProxy: ', domainUrl);\n                _this.loader.loadIdpProxy(domainUrl).then(function () {\n\n                  log.info('[Registry.resolveNormalStub] IdP Proxy deployed: ', _this.idpProxyList[domainUrl]);\n                }).catch(function (reason) {\n                  log.error('[Registry.resolve] Error resolving Load IDPProxy: ', reason);\n                  _this.idpProxyList[domainUrl].status = 'deployment-failed';\n                  reject(reason);\n                });\n              }\n            } else {\n\n              // The protoStub does not exist, let's prepare its deployment by watching its status\n\n              _this.watchingYou.observe('protostubsList', function (change) {\n\n                // log.log('[Registry - resolveNormalStub] protostubsList changed ' + _this.protostubsList);\n\n                var keypath = change.keypath;\n\n                if (keypath.includes('status')) keypath = keypath.replace('.status', '');\n\n                if (keypath === domainUrl && change.name === 'status' && change.newValue === STATUS.CREATED) {\n                  // log.log('[Registry - resolve] protostub is live ' + _this.protostubsList[domainUrl]);\n                  resolve(_this.protostubsList[domainUrl].url);\n                }\n              });\n\n              if (!registredComponent) {\n                // lets deploy the protostub\n                log.info('[Registry.resolve] trigger new ProtocolStub: ', domainUrl);\n                _this.loader.loadStub(domainUrl).then(function () {\n\n                  // log.log('[Registry - resolveNormalStub] Stub deployed: ', _this.protostubsList[domainUrl]);\n                }).catch(function (reason) {\n                  log.error('[Registry.resolveNormalStub] Error resolving Load ProtocolStub: ', reason);\n                  reject(reason);\n                });\n              }\n            }\n          }\n        }).catch(function (reason) {\n          log.error('[Registry.resolve] Error resolving islegacy: ', reason);\n          reject(reason);\n        });\n      });\n    }\n\n    /**\n    * To verify if source is valid and to resolve target runtime url address if needed (eg protostub runtime url in case the message is to be dispatched to a remote endpoint).\n    * @param  {URL.URL}  url       url\n    * @return {Promise<URL.URL>}                 Promise <URL.URL>\n    */\n\n  }, {\n    key: 'resolve',\n    value: function resolve(msg) {\n      log.info('[Registry - Resolve] -  ', msg);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var url = msg.to ? msg.to : msg;\n\n        var p2p = msg.body && msg.body.p2p ? msg.body.p2p : false;\n\n        // log.log('P2P: ', p2p, url);\n        // log.log('P2P - p2pHandlerStub: ', !_this.p2pHandlerStub[_this.runtimeURL], _this.p2pHandlerStub, _this.runtimeURL);\n        // log.log('P2P - isBackendServiceURL: ', isBackendServiceURL(url), isBackendServiceURL, url);\n        // log.log('P2P - includes runtimeURL: ', url.includes(_this.runtimeURL));\n        // log.log('P2P - includes p2phandler: ', url.includes('/p2phandler/'));\n        // log.log('P2P - includes p2prequester: ', url.includes('/p2prequester/'));\n\n        // Skip p2p procedure when not supported by the Runtime or for backend services\n\n        if (!_this.p2pHandlerStub[_this.runtimeURL] || (0, _utils.isBackendServiceURL)(url) || url.includes(_this.runtimeURL) || url.includes('/p2phandler/') || url.includes('/p2prequester/')) {\n\n          log.info('[Registry - resolve] - Resolve normal stub: ', _this.p2pHandlerStub, _this.runtimeURL, (0, _utils.isBackendServiceURL)(url), p2p, url);\n          _this.resolveNormalStub(url).then(function (returnURL) {\n            resolve(returnURL);\n          });\n        } else {\n\n          log.info('[Registry - resolve] - checkP2P: ', p2p, url, _this._p2pConnectionResolve);\n          _this._p2pConnectionResolve.checkP2P(msg).then(function (registeredP2P) {\n\n            // log.log('[Registry - resolve] found registered P2P: ', registeredP2P);\n\n            var p2pConnection = _this.p2pConnectionList[registeredP2P.runtime];\n\n            if (!p2pConnection) {\n              p2pConnection = registeredP2P;\n              _this.p2pConnectionList[registeredP2P.runtime] = p2pConnection;\n            }\n\n            switch (p2pConnection.status) {\n              case STATUS.LIVE:\n                msg.body.peer = registeredP2P.runtime;\n                resolve(p2pConnection.url, msg);\n                break;\n              case STATUS.CREATED: // p2p connection setup is ongoing, use MN Stub\n              case STATUS.PROGRESS:\n                _this.resolveNormalStub(url).then(function (returnURL) {\n                  resolve(returnURL);\n                });\n                break;\n              case STATUS.DISCONNECTED:\n                // p2p connection stub was disconnected, let's ask to connect again\n                log.info('[Registry - Resolve] - p2pConnection is disconnected lets try to reconnect');\n                _this._p2pConnectionResolve.reconnectP2PRequester(p2pConnection).then(function (returnURL) {\n                  // log.log('[Registry - Resolve] - was reconnected with p2pRequesterStubt: ', returnURL);\n                  resolve(returnURL);\n                }, function (reason) {\n                  log.info('[Registry - Resolve] - Reason: ', reason);\n\n                  _this.resolveNormalStub(url).then(function (returnURL) {\n                    resolve(returnURL);\n                  });\n                });\n                break;\n              default:\n\n                log.info('[Registry - resolve] - P2P: ', p2p);\n                if (!p2p) {\n                  // no p2p connection exists and the message sender does not ask one. Lets use the MN Stub\n                  _this.resolveNormalStub(url).then(function (returnURL) {\n                    resolve(returnURL);\n                  });\n                } else {\n                  _this._setupP2PRequester(registeredP2P).then(function (returnURL) {\n                    // no p2p connection exists but the message sender is asking one. Lets try to setup one\n                    resolve(returnURL);\n                  }, function (reason) {\n                    log.info('[Registry - Resolve] - Reason: ', reason);\n\n                    _this.resolveNormalStub(url).then(function (returnURL) {\n                      resolve(returnURL);\n                    });\n                  });\n                }\n                break;\n            }\n          }, function (reason) {\n            log.info('[Registry - Resolve] - Reason: ', reason);\n\n            _this.resolveNormalStub(url).then(function (returnURL) {\n              resolve(returnURL);\n            });\n          });\n        }\n      });\n    }\n  }, {\n    key: '_setupP2PRequester',\n    value: function _setupP2PRequester(input) {\n      var _this = this;\n\n      log.log('[Registry._setupP2PConnection] loadStub with p2pRequester: ', input);\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var remoteRuntime = input.runtime;\n\n        var p2pConfig = { remoteRuntimeURL: remoteRuntime, p2pHandler: input.p2pHandler, p2pRequesterStub: true };\n\n        // lets prepare the p2pRequesterSTub deployment by setting an observer to its status changes\n\n        _this.watchingYou.observe('p2pRequesterStub', function (change) {\n\n          log.log('[Registry._setupP2PConnection] p2pRequesterStubs changed ' + _this.p2pRequesterStub);\n\n          if (change.keypath.split('.')[0] === remoteRuntime && change.name === 'status' && change.newValue === STATUS.LIVE) {\n            log.log('[Registry._setupP2PConnection] p2pRequester is live ' + _this.p2pRequesterStub[remoteRuntime]);\n            resolve(_this.p2pRequesterStub[remoteRuntime].url);\n          }\n        });\n\n        //  stub load\n        _this.loader.loadStub(input.p2pRequester, p2pConfig).then(function () {\n\n          log.log('[Registry._setupP2PConnection] p2pRequester deployed: ', _this.p2pRequesterStub[remoteRuntime]);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n\n    /**\n    * To verify if url is for a legacy service.\n    * @param  {URL.URL}  url      url\n    * @return {boolean}\n    */\n\n  }, {\n    key: 'isLegacy',\n    value: function isLegacy(url) {\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        if (url === _this._domain) {\n          return resolve(false);\n        }\n\n        log.log('[Registry] [Registry.Registry.isLegacy] ', url);\n\n        // TODO: to be defined in the runtime configuration\n        var nonLegacy = ['hyperty-runtime', 'domain', 'global', 'hyperty'];\n\n        var urlDivided = (0, _utils.divideURL)(url);\n\n        if (nonLegacy.indexOf(urlDivided.type) !== -1 || urlDivided.domain === _this._domain) {\n          return resolve(false);\n        }\n\n        // process User URLs\n        if (url.split('@').length > 1) {\n          var domain = urlDivided.domain;\n\n          // log.log('[Registry] [Registry.Registry.isLegacy] domain: ', domain);\n          if (_this.idpLegacyProxyList.hasOwnProperty(domain)) {\n\n            var result = _this.idpLegacyProxyList[domain];\n\n            if (result.interworking) {\n              return resolve(result.interworking);\n            } else {\n              return resolve(false);\n            }\n          }\n\n          _this._loader.descriptors.getIdpProxyDescriptor(domain).then(function (result) {\n\n            // log.log('[Registry] [Registry.Registry.isLegacy] Legacy stub descriptor: ', result);\n\n            if (result.interworking) {\n              _this.idpLegacyProxyList[domain] = result;\n              resolve(result.interworking);\n            } else {\n              resolve(false);\n            }\n          }).catch(function (reason) {\n            log.warn('problem loading idp proxy descriptor for domain:', domain, ' because ', reason);\n            reject(reason);\n          });\n        } else {\n          // process protostub URLs\n          resolve(_this.isInterworkingProtoStub(url));\n        }\n      });\n    }\n\n    /**\n    * To verify if URL is locally registered or not.\n    * @param  {URL.URL}  url      url\n    * @return {boolean}\n    */\n\n  }, {\n    key: 'isLocal',\n    value: function isLocal(url) {\n\n      var runtimeScheme = ['hyperty-runtime', 'runtime'];\n      var hypertyScheme = ['hyperty'];\n      var urlScheme = url.split('://')[0];\n\n      // Process Runtime Core URLs.\n      // Messages originated from protostubs should also not include the runtimeURL in its URL.\n\n      if (runtimeScheme.indexOf(urlScheme) !== -1) {\n        return url.includes(this.runtimeURL);\n      }\n\n      // Process Hyperty URLs\n      // Todo: hypertiesList should be an object not an array\n\n      if (hypertyScheme.indexOf(urlScheme) !== -1) {\n\n        for (var index in this.hypertiesList) {\n          var hyperty = this.hypertiesList[index];\n          if (hyperty.hypertyURL === url) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      // Process Data Object URLs\n\n      if (url.includes('/subscription')) {\n        url = url.substring(0, url.indexOf('/subscription'));\n      }\n\n      var dataObject = this.dataObjectList[url];\n\n      if (dataObject) {\n        if (dataObject.interworking) {\n          return !dataObject.interworking;\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n    * To verify if protostub is to interwork with a legacy domain.\n    * @param  {URL.URL}  runtimeProtostubURL      The runtime URL of the Protostub\n    * @return {boolean}\n    */\n\n  }, {\n    key: 'isInterworkingProtoStub',\n    value: function isInterworkingProtoStub(runtimeProtostubURL) {\n\n      var _this = this;\n\n      if (!runtimeProtostubURL.includes('/protostub/')) {\n        return false;\n      }\n\n      var filtered = (0, _keys2.default)(_this.protostubsList).filter(function (key) {\n        return _this.protostubsList[key].url === runtimeProtostubURL;\n      }).map(function (key) {\n\n        if (_this.protostubsList[key].hasOwnProperty('interworking')) {\n          return _this.protostubsList[key].interworking;\n        } else {\n          return false;\n        }\n      })[0];\n\n      return filtered;\n    }\n  }, {\n    key: 'loader',\n    set: function set(loader) {\n      var _this = this;\n      _this._loader = loader;\n    },\n    get: function get() {\n      var _this = this;\n      return _this._loader;\n    }\n\n    /**\n    * return the messageBus in this Registry\n    * @param {MessageBus}           messageBus\n    */\n\n  }, {\n    key: 'messageBus',\n    get: function get() {\n      var _this = this;\n      return _this._messageBus;\n    }\n\n    /**\n    * Set the messageBus in this Registry\n    * @param {MessageBus}           messageBus\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n      _this._messageBus = messageBus;\n\n      _this._messageBus.addListener(_this.registryURL, function (msg) {\n\n        // log.log('[Registry listener] ', msg);\n\n        var isHyperty = (0, _utils.isHypertyURL)(msg.from);\n        var hasCriteria = msg.body.hasOwnProperty('criteria');\n        var isURLResource = void 0;\n        var isUserResource = void 0;\n        var isHypertyResource = void 0;\n\n        if (msg.body.hasOwnProperty('resource') && msg.body.resource !== '.') {\n          isURLResource = (0, _utils.isURL)(msg.body.resource);\n          isUserResource = (0, _utils.isUserURL)(msg.body.resource);\n          isHypertyResource = (0, _utils.isHypertyURL)(msg.body.resource);\n        }\n        var isDelete = msg.type === 'delete';\n        var hasName = void 0;\n        var hasUser = void 0;\n\n        if (msg.body.hasOwnProperty('value')) {\n          hasName = msg.body.value.hasOwnProperty('name');\n          hasUser = msg.body.value.hasOwnProperty('user');\n        }\n\n        if (msg.type === 'response') {\n          log.error('[Register listener] skipping ', msg);\n          return;\n        }\n\n        // msg sent by identity manager library\n        var userUrl = _this._getIdentityAssociated(msg.body.resource, msg.body.criteria);\n\n        var reply = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { resource: userUrl } };\n        reply.body.code = userUrl ? 200 : 404;\n\n        _this._messageBus.postMessage(reply);\n      });\n\n      // Install AddressAllocation\n      var addressAllocation = _AddressAllocation2.default.instance;\n      _this.addressAllocation = addressAllocation;\n\n      // log.log('[Registry - AddressAllocation] - ', addressAllocation);\n    }\n  }]);\n  return Registry;\n}();\n\nexports.default = Registry;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9yZWdpc3RyeS9SZWdpc3RyeS5qcz82MTZlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuLy8gTG9nIFN5c3RlbVxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJ2xvZ2xldmVsJztcbmxldCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdSZWdpc3RyeScpO1xuXG5pbXBvcnQgeyBydW50aW1lVXRpbHMgfSBmcm9tICcuLi9ydW50aW1lL3J1bnRpbWVVdGlscyc7XG5pbXBvcnQgeyBTYW5kYm94VHlwZX0gZnJvbSAnLi4vc2FuZGJveC9TYW5kYm94JztcblxuaW1wb3J0IEFkZHJlc3NBbGxvY2F0aW9uIGZyb20gJy4uL2FsbG9jYXRpb24vQWRkcmVzc0FsbG9jYXRpb24nO1xuaW1wb3J0IEh5cGVydHlJbnN0YW5jZSBmcm9tICcuL0h5cGVydHlJbnN0YW5jZSc7XG5pbXBvcnQgUDJQQ29ubmVjdGlvblJlc29sdmUgZnJvbSAnLi9QMlBDb25uZWN0aW9uUmVzb2x2ZSc7XG5cbmltcG9ydCB7IGRpdmlkZVVSTCwgaXNIeXBlcnR5VVJMLCBpc1VSTCwgaXNVc2VyVVJMLCBnZW5lcmF0ZUdVSUQsIGdldFVzZXJJZGVudGl0eURvbWFpbiwgaXNCYWNrZW5kU2VydmljZVVSTCwgZGVlcENsb25lIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMuanMnO1xuXG5pbXBvcnQgJ3Byb3h5LW9ic2VydmUnO1xuaW1wb3J0IHsgV2F0Y2hpbmdZb3UgfSBmcm9tICdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1V0aWxzJztcblxuLy8gaW1wb3J0IERpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcmsgZnJvbSAnLi9EaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrJztcblxuY29uc3QgU1RBVFVTID0geyBDUkVBVEVEOiAnY3JlYXRlZCcsIExJVkU6ICdsaXZlJywgREVQTE9ZSU5HOiAnZGVwbG95aW5nJywgREVQTE9ZRUQ6ICdkZXBsb3llZCcsIFBST0dSRVNTOiAnaW4tcHJvZ3Jlc3MnLCBESVNDT05ORUNURUQ6ICdkaXNjb25uZWN0ZWQnLCBGQUlMRUQ6ICdkZXBsb3ltZW50LWZhaWxlZCcsIERFQUQ6ICdkZWFkJyB9O1xuXG4vKmltcG9ydCBJZGVudGl0eU1hbmFnZXIgZnJvbSAnLi9JZGVudGl0eU1hbmFnZXInO1xuaW1wb3J0IERpc2NvdmVyeSBmcm9tICcuL0Rpc2NvdmVyeSc7Ki9cblxuLyoqXG4qIFJ1bnRpbWUgUmVnaXN0cnkgSW50ZXJmYWNlXG4qL1xuY2xhc3MgUmVnaXN0cnkge1xuXG4gIC8qKlxuICAqIFRvIGluaXRpYWxpc2UgdGhlIFJ1bnRpbWUgUmVnaXN0cnkgd2l0aCB0aGUgUnVudGltZVVSTCB0aGF0IHdpbGwgYmUgdGhlIGJhc2lzIHRvIGRlcml2ZSB0aGUgaW50ZXJuYWwgcnVudGltZSBhZGRyZXNzZXMgd2hlbiBhbGxvY2F0aW5nIGFkZHJlc3NlcyB0byBpbnRlcm5hbCBydW50aW1lIGNvbXBvbmVudC4gSW4gYWRkaXRpb24sIHRoZSBSZWdpc3RyeSBkb21haW4gYmFjay1lbmQgdG8gYmUgdXNlZCB0byByZW1vdGVseSByZWdpc3RlciBSdW50aW1lIGNvbXBvbmVudHMsIGlzIGFsc28gcGFzc2VkIGFzIGlucHV0IHBhcmFtZXRlci5cbiAgKiBAcGFyYW0gIHtNZXNzYWdlQnVzfSAgICAgICAgICBtc2didXMgICAgICAgICAgICAgICAgbXNnYnVzXG4gICogQHBhcmFtICB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgcnVudGltZVVSTCAgICAgICAgICAgIHJ1bnRpbWVVUkxcbiAgKiBAcGFyYW0gIHtBcHBTYW5kYm94fSAgICAgICAgICBhcHBTYW5kYm94ICAgICAgICAgICAgYXBwU2FuZGJveFxuICAqIEBwYXJhbSAge3J1bnRpbWVDYXRhbG9ndWV9ICAgIHJ1bnRpbWVDYXRhbG9ndWUgICAgICBydW50aW1lQ2F0YWxvZ3VlXG4gICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgcmVtb3RlUmVnaXN0cnkgICAgICAgIHJlbW90ZVJlZ2lzdHJ5XG4gICogQHBhcmFtICB7c3RvcmFnZU1hbmFnZXJ9ICAgICAgc3RvcmFnZU1hbmFnZXJcbiAgKi9cbiAgY29uc3RydWN0b3IocnVudGltZVVSTCwgYXBwU2FuZGJveCwgaWRlbnRpdHlNb2R1bGUsIHJ1bnRpbWVDYXRhbG9ndWUsIHJ1bnRpbWVDYXBhYmlsaXRpZXMsIHN0b3JhZ2VNYW5hZ2VyLCBwMnBIYW5kbGVyVVJMLCByZW1vdGVSZWdpc3RyeSkge1xuXG4gICAgLy8gaG93IHNvbWUgZnVuY3Rpb25zIHJlY2VpdmUgdGhlIHBhcmFtZXRlcnMgZm9yIGV4YW1wbGU6XG4gICAgLy8gbmV3IFJlZ2lzdHJ5KCdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJywgYXBwU2FuZGJveCwgaWRNb2R1bGUsIHJlbW90ZVJlZ2lzdHJ5KTtcbiAgICAvLyByZWdpc3RyeS5yZWdpc3RlclN0dWIoc2FuZGJveCwgJ3NwMScpO1xuICAgIC8vIHJlZ2lzdHJ5LnJlZ2lzdGVySHlwZXJ0eShzYW5kQm94LCAnaHlwZXJ0eS1ydW50aW1lOi8vc3AxLzEyMycpO1xuICAgIC8vIHJlZ2lzdHJ5LnJlc29sdmUoJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnKTtcblxuICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7XG4gICAgaWYgKCFzdG9yYWdlTWFuYWdlcikgdGhyb3cgbmV3IEVycm9yKCdzdG9yYWdlTWFuYWdlciBpcyBtaXNzaW5nLicpO1xuXG4gICAgLyppZiAoIXJlbW90ZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ3JlbW90ZVJlZ2lzdHJ5IGlzIG1pc3NpbmcnKTsqL1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnJlZ2lzdHJ5VVJMID0gcnVudGltZVVSTCArICcvcmVnaXN0cnkvJztcbiAgICBfdGhpcy5hcHBTYW5kYm94ID0gYXBwU2FuZGJveDtcbiAgICBfdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDtcbiAgICBfdGhpcy5wMnBIYW5kbGVyVVJMID0gcDJwSGFuZGxlclVSTDtcbiAgICBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlID0gcnVudGltZUNhdGFsb2d1ZTtcbiAgICBfdGhpcy5yZW1vdGVSZWdpc3RyeSA9IHJlbW90ZVJlZ2lzdHJ5O1xuICAgIF90aGlzLmlkTW9kdWxlID0gaWRlbnRpdHlNb2R1bGU7XG4gICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIgPSBzdG9yYWdlTWFuYWdlcjtcbiAgICBfdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzID0gcnVudGltZUNhcGFiaWxpdGllcztcbiAgICBfdGhpcy5pZGVudGlmaWVyID0gZ2VuZXJhdGVHVUlEKCk7XG4gICAgX3RoaXMucmVnaXN0cmF0aW9uUmV0cmllcyA9IDU7Ly8gbnVtYmVyIG9mIGF0dGVtcHRzIHRvIHJlZ2lzdGVyIEh5cGVydGllcyBhbmQgRGF0YU9iamVjdHMgd2hlbiBlcnJvcnMgb2NjdXJzXG5cbiAgICAvLyB0aGUgZXhwaXJlcyBpbiAzNjAwLCByZXByZXNlbnRzIDEgaG91clxuICAgIC8vdGhlIGV4cGlyZXMgaXMgaW4gc2Vjb25kcywgdW5pdCBvZiBtZWFzdXJlIHJlY2VpdmVkIGJ5IHRoZSBkb21haW4gcmVnaXN0cnlcbiAgICBfdGhpcy5leHBpcmVzVGltZSA9IDM2MDA7XG5cbiAgICBfdGhpcy5oeXBlcnRpZXNMaXN0VG9SZW1vdmUgPSB7fTtcbiAgICBfdGhpcy5oeXBlcnRpZXNMaXN0ID0gW107XG4gICAgX3RoaXMucmVtb3RlSHlwZXJ0eUxpc3QgPSBbXTtcbiAgICBfdGhpcy5yZW1vdGVEYXRhT2JqZWN0TGlzdCA9IFtdO1xuICAgIF90aGlzLmlkcExlZ2FjeVByb3h5TGlzdCA9IHt9O1xuXG4gICAgX3RoaXMud2F0Y2hpbmdZb3UgPSBuZXcgV2F0Y2hpbmdZb3UoKTtcbiAgICBfdGhpcy5wMnBIYW5kbGVyU3R1YiA9IHt9O1xuICAgIF90aGlzLnAycFJlcXVlc3RlclN0dWIgPSBfdGhpcy53YXRjaGluZ1lvdS53YXRjaCgncDJwUmVxdWVzdGVyU3R1YicsIHt9LCB0cnVlKTtcbiAgICBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdCA9IF90aGlzLndhdGNoaW5nWW91LndhdGNoKCdwMnBDb25uZWN0aW9uTGlzdCcsIHt9LCB0cnVlKTtcbiAgICBfdGhpcy5wMnBIYW5kbGVyQXNzb2NpYXRpb24gPSB7fTtcblxuICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0ID0gX3RoaXMud2F0Y2hpbmdZb3Uud2F0Y2goJ3Byb3Rvc3R1YnNMaXN0Jywge30sIHRydWUpO1xuICAgIF90aGlzLmlkcFByb3h5TGlzdCA9IF90aGlzLndhdGNoaW5nWW91LndhdGNoKCdpZHBQcm94eUxpc3QnLCB7fSwgdHJ1ZSk7XG4gICAgX3RoaXMuZGF0YU9iamVjdExpc3QgPSB7fTtcbiAgICBfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3QgPSB7fTtcbiAgICBfdGhpcy5zYW5kYm94ZXNMaXN0ID0ge3NhbmRib3g6IHt9LCBhcHBTYW5kYm94OiB7fSB9O1xuICAgIF90aGlzLnBlcExpc3QgPSB7fTtcbiAgICBfdGhpcy5yZWdpc3RyaWVzID0ge307XG5cbiAgICBfdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKF90aGlzLnJlZ2lzdHJ5VVJMKS5kb21haW47XG4gICAgX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W3J1bnRpbWVVUkxdID0gYXBwU2FuZGJveDtcbiAgICBsZXQgcDJwQ29ubmVjdGlvblJlc29sdmUgPSBuZXcgUDJQQ29ubmVjdGlvblJlc29sdmUoX3RoaXMpO1xuXG4gICAgX3RoaXMuX3AycENvbm5lY3Rpb25SZXNvbHZlID0gcDJwQ29ubmVjdGlvblJlc29sdmU7XG4gIH1cblxuICBzZXQgbG9hZGVyKGxvYWRlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX2xvYWRlciA9IGxvYWRlcjtcbiAgfVxuXG4gIGdldCBsb2FkZXIoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX2xvYWRlcjtcbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1cztcbiAgfVxuXG4gIC8qKlxuICAqIFNldCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBzZXQgbWVzc2FnZUJ1cyhtZXNzYWdlQnVzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5yZWdpc3RyeVVSTCwgZnVuY3Rpb24obXNnKSB7XG5cbiAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSBsaXN0ZW5lcl0gJywgbXNnKTtcblxuICAgICAgbGV0IGlzSHlwZXJ0eSA9IGlzSHlwZXJ0eVVSTChtc2cuZnJvbSk7XG4gICAgICBsZXQgaGFzQ3JpdGVyaWEgPSBtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgnY3JpdGVyaWEnKTtcbiAgICAgIGxldCBpc1VSTFJlc291cmNlO1xuICAgICAgbGV0IGlzVXNlclJlc291cmNlO1xuICAgICAgbGV0IGlzSHlwZXJ0eVJlc291cmNlO1xuXG4gICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ3Jlc291cmNlJykgJiYgbXNnLmJvZHkucmVzb3VyY2UgIT09ICcuJykge1xuICAgICAgICBpc1VSTFJlc291cmNlID0gaXNVUkwobXNnLmJvZHkucmVzb3VyY2UpO1xuICAgICAgICBpc1VzZXJSZXNvdXJjZSA9IGlzVXNlclVSTChtc2cuYm9keS5yZXNvdXJjZSk7XG4gICAgICAgIGlzSHlwZXJ0eVJlc291cmNlID0gaXNIeXBlcnR5VVJMKG1zZy5ib2R5LnJlc291cmNlKTtcbiAgICAgIH1cbiAgICAgIGxldCBpc0RlbGV0ZSA9IG1zZy50eXBlID09PSAnZGVsZXRlJztcbiAgICAgIGxldCBoYXNOYW1lO1xuICAgICAgbGV0IGhhc1VzZXI7XG5cbiAgICAgIGlmIChtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgICAgICBoYXNOYW1lID0gbXNnLmJvZHkudmFsdWUuaGFzT3duUHJvcGVydHkoJ25hbWUnKTtcbiAgICAgICAgaGFzVXNlciA9IG1zZy5ib2R5LnZhbHVlLmhhc093blByb3BlcnR5KCd1c2VyJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtc2cudHlwZSA9PT0gJ3Jlc3BvbnNlJykge1xuICAgICAgICBsb2cuZXJyb3IoJ1tSZWdpc3RlciBsaXN0ZW5lcl0gc2tpcHBpbmcgJywgbXNnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBtc2cgc2VudCBieSBpZGVudGl0eSBtYW5hZ2VyIGxpYnJhcnlcbiAgICAgIGxldCB1c2VyVXJsID0gX3RoaXMuX2dldElkZW50aXR5QXNzb2NpYXRlZChtc2cuYm9keS5yZXNvdXJjZSwgbXNnLmJvZHkuY3JpdGVyaWEpO1xuXG4gICAgICBsZXQgcmVwbHkgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHtyZXNvdXJjZTogdXNlclVybH19O1xuICAgICAgcmVwbHkuYm9keS5jb2RlID0gKHVzZXJVcmwpID8gMjAwIDogNDA0O1xuXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseSk7XG5cbiAgICB9KTtcblxuICAgIC8vIEluc3RhbGwgQWRkcmVzc0FsbG9jYXRpb25cbiAgICBsZXQgYWRkcmVzc0FsbG9jYXRpb24gPSBBZGRyZXNzQWxsb2NhdGlvbi5pbnN0YW5jZTtcbiAgICBfdGhpcy5hZGRyZXNzQWxsb2NhdGlvbiA9IGFkZHJlc3NBbGxvY2F0aW9uO1xuXG4gICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gQWRkcmVzc0FsbG9jYXRpb25dIC0gJywgYWRkcmVzc0FsbG9jYXRpb24pO1xuICB9XG5cblxuICBfZ2V0SWRlbnRpdHlBc3NvY2lhdGVkKHR5cGUsIGh5cGVydHlVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yIChsZXQgaHlwZXJ0eSBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICBsZXQgdmFsdWUgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2h5cGVydHldO1xuXG4gICAgICBpZiAodmFsdWUuX2h5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSAndXNlcm5hbWUnOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLnVzZXJuYW1lO1xuICAgICAgICAgIGNhc2UgJ2NuJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci5jbjtcbiAgICAgICAgICBjYXNlICdsb2NhbGUnOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmxvY2FsZTtcbiAgICAgICAgICBjYXNlICdhdmF0YXInOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmF2YXRhcjtcbiAgICAgICAgICBjYXNlICd1c2VyVVJMJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci51c2VyVVJMO1xuICAgICAgICAgIGNhc2UgJy4nOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHJldHVybiB0aGUgc2FuZGJveCBpbnN0YW5jZSB3aGVyZSB0aGUgQXBwbGljYXRpb24gaXMgZXhlY3V0aW5nLiBJdCBpcyBhc3N1bWVkIHRoZXJlIGlzIGp1c3Qgb25lIEFwcCBwZXIgUnVudGltZSBpbnN0YW5jZS5cbiAgKi9cbiAgZ2V0QXBwU2FuZGJveCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5hcHBTYW5kYm94O1xuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB1c2VyIGFzc29jaWF0ZWQgdG8gdGhlIGh5cGVydHkgVVJMXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGh5cGVydHlVUkwgICAgICBoeXBlcnR5IFVSTFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICB1c2VyVVJMICAgICAgICAgdXNlciBVUkxcbiAgKi9cbiAgZ2V0SHlwZXJ0eU93bmVyKGh5cGVydHlVUkwpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHVzZXJVUkw7XG5cbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICBsZXQgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuXG4gICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSBoeXBlcnR5VVJMKSB7XG4gICAgICAgIHVzZXJVUkwgPSBoeXBlcnR5LnVzZXIudXNlclVSTDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVzZXJVUkw7XG4gIH1cblxuICAvKipcbiAgKiByZXR1cm5zIHRoZSBoeXBlcnR5IE5hbWUgZnJvbSBhIGdpdmVuIHVybC4gVGhpcyB1cmwgY291bGQgYmUgZnJvbSBhIGRhdGFPYmplY3Qgb3IgaHlwZXJ0eVxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICB1cmwgICAgICBoeXBlcnR5IG9yIGRhdGFPYmplY3QgVVJMXG4gICogQHJldHVybiAgIHtTdHJpbmd9ICAgIGh5cGVydHlOYW1lICAgICBoeXBlcnR5IE5hbWVcbiAgKi9cbiAgZ2V0SHlwZXJ0eU5hbWUodXJsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBpc0h5cGVydHlVUkwgPSBkaXZpZGVVUkwodXJsKS50eXBlID09PSAnaHlwZXJ0eSc7XG5cbiAgICAvL3ZhbHVlIHRvIGJlIHJldHVybmVkIGluIHRoZSBlbmRcbiAgICBsZXQgaHlwZXJ0eU5hbWU7XG5cbiAgICAvL2lmIGlzIG5vdCBhbiBoeXBlcnR5LCBjaGVjayBpZiBpcyBhIGRhdGFPYmplY3QgYW5kIG9idGFpbiBoaXMgcmVwb3J0ZXJcbiAgICBsZXQgaHlwZXJ0eVVSTCA9IGlzSHlwZXJ0eVVSTCA/IHVybCA6IF90aGlzLmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyh1cmwpO1xuXG4gICAgZm9yIChsZXQgaW5kZXggaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkge1xuICAgICAgbGV0IGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTtcbiAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHtcbiAgICAgICAgaHlwZXJ0eU5hbWUgPSBoeXBlcnR5Lm9iamVjdE5hbWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaHlwZXJ0eU5hbWU7XG4gIH1cblxuICAvKipcbiAgKiBmdW5jdGlvbiB0byByZXR1cm4gdGhlIHJlcG9ydGVyVVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YW9iamVjdCBVUkxcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdFVSTFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICAgcmVwb3J0ZXJVUkwgICAgICByZXBvcnRlclVSTFxuICAqL1xuICBnZXRSZXBvcnRlclVSTChkYXRhT2JqZWN0VVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgICAgaWYgKGRhdGFPYmplY3QpIHtcbiAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0LnJlcG9ydGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgnTm8gcmVwb3J0ZXIgd2FzIGZvdW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBmdW5jdGlvbiB0byByZXR1cm4gdGhlIHJlcG9ydGVyVVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YW9iamVjdCBVUkwuIG5vIHByb21pc2UgcmV0dXJuZWRcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdFVSTFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICAgcmVwb3J0ZXJVUkwgICAgICByZXBvcnRlclVSTFxuICAqL1xuICBnZXRSZXBvcnRlclVSTFN5bmNob25vdXMoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdO1xuXG4gICAgcmV0dXJuIChkYXRhT2JqZWN0KSA/IGRhdGFPYmplY3QucmVwb3J0ZXIgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgKiByZXR1cm5zIHRoZSBoeXBlcnR5IFVSTCB0aGF0IHN1YnNjcmliZWQgdGhlIGRhdGFPYmplY3RcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIHVybCAgICAgICAgICAgIHVybCBmb3JtYXRcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgSHlwZXJ0eSBVUkwgc3Vic2NyaWJlZCB0byB0aGUgVVJMXG4gICovXG4gIGdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eSh1cmwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdFt1cmxdO1xuICB9XG5cbiAgLyoqXG4gICogcmVnaXN0ZXIgYSBkZXNpcmVkIGRhdGFPYmplY3QgdG8gc3Vic2NyaWJlXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGRhdGFPYmplY3RVUkwgICAgICBkYXRhT2JqZWN0IFVSTFxuICAqL1xuICByZWdpc3RlclN1YnNjcmliZWREYXRhT2JqZWN0KGRhdGFPYmplY3RVUkwsIGh5cGVydHlVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGlmIChfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID0gaHlwZXJ0eVVSTDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gdGhlIGxpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgdXNlcnMgcmVjZWl2ZWQgaW4gdGhlIGNyZWF0aW9uIG9mIGEgZGF0YSBvYmplY3RcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgICAgICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkxcbiAgKiBAcmV0dXJuICAge0FycmF5PFN0cmluZz59ICAgICBwcmVBdXRoICAgICAgICAgTGlzdCBvZiBwcmUgYXV0aG9yaXNlZCB1c2Vyc1xuICAqL1xuICBnZXRQcmVBdXRoU3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcbiAgICBsZXQgcHJlQXV0aCA9IFtdO1xuXG4gICAgaWYgKGRhdGFPYmplY3QpIHtcbiAgICAgIHByZUF1dGggPSBkYXRhT2JqZWN0LmF1dGhvcmlzZTtcbiAgICB9XG4gICAgcmV0dXJuIHByZUF1dGg7XG4gIH1cblxuICAvKipcbiAgKiBzZW5kIHJlcXVlc3RzIHRvIHVucmVnaXN0ZXIgYWxsIGh5cGVydGllcyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeVxuICAqIEByZXR1cm4gICB7UHJvbWlzZX0gICAgIHJldHVybiBhIHByb21pc2UgaWYgdGhlIHJlc3VsdCBvZiB1bnJlZ2lzdHJhdGlvbiBhbGwgaHlwZXJ0aWVzXG4gICovXG4gIHVucmVnaXN0ZXJBbGxIeXBlcnRpZXMoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCB1bnJlZ2lzdGVyUmVzdWx0cyA9IFtdO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICAgIGxldCBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07XG4gICAgICAgIGxldCByZXN1bHQgPSBfdGhpcy51bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKGh5cGVydHkuaHlwZXJ0eVVSTCk7XG4gICAgICAgIHVucmVnaXN0ZXJSZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgUHJvbWlzZS5hbGwodW5yZWdpc3RlclJlc3VsdHMpLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgIHJlc29sdmUoJ3N1Y2Nlc3NmdWxseSB1bnJlZ2lzdGVyZWQgYWxsIGh5cGVydGllcycpO1xuICAgICAgfSwgZXJyb3IgPT4geyByZWplY3QoZXJyb3IpOyB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqICBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIGFuIGh5cGVydHlJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgaHlwZXJ0eUluc3RhbmNlICAgSHlwZXJ0eUluc250YW5jZSB1cmxcbiAgKlxuICAqL1xuICB1bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKGh5cGVydHlJbnN0YW5jZSkge1xuICAgIC8vVE9ETyB3b3JraW5nIGJ1dCB0aGUgdXNlclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgY2xvc2VNc2cgPSB7IHR5cGU6ICdleGVjdXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICB0bzogaHlwZXJ0eUluc3RhbmNlLFxuICAgICAgYm9keTogeyBtZXRob2Q6ICdjbG9zZScgfX07XG5cbiAgICAvLyBTZW5kIG1lc3NhZ2UgdG8gaHlwZXJ0eSB0byBjbG9zZVxuICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGNsb3NlTXNnLCAocmVwbHkpID0+IHtcbiAgICAgIGxvZy5sb2coJ1tSZWdpc3RyeS51bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlXSBDbG9zZSBSZXBseScsIHJlcGx5KTtcblxuICAgICAgbGV0IG1lc3NhZ2UgPSB7IHR5cGU6ICd1cGRhdGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbixcbiAgICAgICAgYm9keTogeyByZXNvdXJjZTogJy9oeXBlcnR5LycgKyBoeXBlcnR5SW5zdGFuY2UsIHZhbHVlOiAnZGlzY29ubmVjdGVkJywgYXR0cmlidXRlOiAnc3RhdHVzJyB9fTtcblxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgIGxvZy5sb2coJ1tSZWdpc3RyeV0gdW5yZWdpc3RlciBoeXBlcnR5IFJlcGx5JywgcmVwbHkpO1xuXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqICBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIGFuIGh5cGVydHlJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgaHlwZXJ0eUluc3RhbmNlICAgSHlwZXJ0eUluc250YW5jZSB1cmxcbiAgKlxuICAqL1xuICB1bnJlZ2lzdGVyRGF0YU9iamVjdCh1cmwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG1lc3NhZ2UgPSB7IHR5cGU6ICd1cGRhdGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHJlc291cmNlOiB1cmwsXG4gICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgc3RhdHVzOiAnZGlzY29ubmVjdGVkJ1xuICAgICAgICB9XG4gICAgICB9fTtcblxuICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgbG9nLmxvZygnW1JlZ2lzdHJ5XSB1bnJlZ2lzdGVyIGRhdGFPYmplY3QgUmVwbHknLCByZXBseSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIGRhdGFPYmplY3RJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgIG5hbWUgICAgICBEYXRhT2JqZWN0TmFtZVxuICAqL1xuICBkZWxldGVEYXRhT2JqZWN0SW5zdGFuY2UobmFtZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHsgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbixcbiAgICAgIGJvZHk6IHsgdmFsdWU6IHtuYW1lOiBuYW1lfX19O1xuXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICBsb2cubG9nKCdbUmVnaXN0cnldIHVucmVnaXN0ZXIgZGF0YU9iamVjdCBSZXBseScsIHJlcGx5KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHVwZGF0ZSBhbiBIeXBlcnR5XG4gICovXG4gIHVwZGF0ZUh5cGVydHlJbnN0YW5jZShyZXNvdXJjZSwgdmFsdWUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG1lc3NhZ2UgPSB7IHR5cGU6ICdVUERBVEUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4sXG4gICAgICBib2R5OiB7IHJlc291cmNlOiByZXNvdXJjZSwgdmFsdWU6IHZhbHVlfX07XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5XSBVcGRhdGVkIGh5cGVydHkgcmVwbHknLCByZXBseSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiByZWdpc3RlciBhIG5ldyBzdWJzY3JpYmVyIGluIHRoZSBkYXRhT2JqZWN0IHJlZ2lzdGVyZWRcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0IFVSTFxuICAqIEBwYXJhbSAge1N0cmluZ30gICBzdWJzY3JpYmVyVVJMICAgIHN1YnNjcmliZXIgVVJMXG4gICovXG4gIHJlZ2lzdGVyU3Vic2NyaWJlcihkYXRhT2JqZWN0VVJMLCBzdWJzY3JpYmVyVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdO1xuXG4gICAgaWYgKGRhdGFPYmplY3QpIHtcblxuICAgICAgaWYgKCFkYXRhT2JqZWN0LnN1YnNjcmliZXJzKSBkYXRhT2JqZWN0LnN1YnNjcmliZXJzID0gW107XG5cbiAgICAgIGRhdGFPYmplY3Quc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyVVJMKTtcbiAgICAgIF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID0gZGF0YU9iamVjdDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBnZXQgdGhlIHN1YnNjcmliZXJzIHJlZ2lzdGVyZWQgd2l0aGluIGEgZGF0YU9iamVjdFxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0IFVSTFxuICAqIEBwYXJhbSAge0FycmF5PFN0cmluZz59ICAgU3Vic3RyaWJlcnMgTGlzdFxuICAqL1xuICBnZXREYXRhT2JqZWN0U3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICByZXR1cm4gZGF0YU9iamVjdC5zdWJzY3JpYmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ05vIGRhdGFPYmplY3Qgd2FzIGZvdW5kJztcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIHJlZ2lzdGVyIGEgbmV3IERhdGEgT2JqZWN0IGluIHRoZSBydW50aW1lIHdoaWNoIHJldHVybnMgdGhlIGRhdGFPYmplY3RVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgRGF0YSBPYmplY3QuXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgIGlkZW50aWZpZXIgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgIGRhdGFPYmplY3RzY2hlbWEgICAgICAgICAgICBkYXRhT2JqZWN0c2NoZW1hXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgIGRhdGFPYmplY3RVcmwgICAgICAgICAgICAgICBkYXRhT2JqZWN0VXJsXG4gICogQHBhcmFtIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdFJlcG9ydGVyICAgICAgICAgICBkYXRhT2JqZWN0UmVwb3J0ZXJcbiAgKiBAcGFyYW0gIHtBcnJheX0gICAgIHJlc291cmNlcyAgICAgICAgICAgICAgICAgICAgIGRhdGFPYmplY3QgcmVzb3VyY2VzXG4gICogQHBhcmFtICB7QXJyYXl9ICAgICBhdXRob3Jpc2UgICAgICAgICAgICAgICAgICAgICBsaXN0IG9mIHByZSBhdXRob3Jpc2VkIGF1dGhvcmlzZWQgSURzXG4gICovXG4gIC8vcmVnaXN0ZXJEYXRhT2JqZWN0KGlkZW50aWZpZXIsIGRhdGFPYmplY3RzY2hlbWEsIGRhdGFPYmplY3RVcmwsIGRhdGFPYmplY3RSZXBvcnRlciwgcmVzb3VyY2VzLCBhZGRyZXNzVVJMLCBhdXRob3Jpc2UpIHtcbiAgcmVnaXN0ZXJEYXRhT2JqZWN0KG9iamVjdFJlZ2lzdHJhdGlvbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgcmVnaXN0cmF0aW9uID0gZGVlcENsb25lKG9iamVjdFJlZ2lzdHJhdGlvbik7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGxldCBkYXRhU2NoZW1lID0gW107XG4gICAgICBsZXQgZmlsdGVyZWREYXRhU2NoZW1lID0gcmVnaXN0cmF0aW9uLnVybC5zcGxpdCgnOicpO1xuICAgICAgZGF0YVNjaGVtZS5wdXNoKGZpbHRlcmVkRGF0YVNjaGVtZVswXSk7XG5cbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgncmVnaXN0cnk6RGF0YU9iamVjdFVSTHMnKS50aGVuKCh1cmxzTGlzdCkgPT4ge1xuXG4gICAgICAgIGlmICghdXJsc0xpc3QpIHtcbiAgICAgICAgICB1cmxzTGlzdCA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy91cGRhdGUgdGhlIGxpc3Qgd2l0aCB0aGUgbmV3IGVsZW1lbnRzXG4gICAgICAgIHVybHNMaXN0W29iamVjdFJlZ2lzdHJhdGlvbi5uYW1lICsgb2JqZWN0UmVnaXN0cmF0aW9uLnNjaGVtYSArIG9iamVjdFJlZ2lzdHJhdGlvbi5yZXNvdXJjZXMgKyBvYmplY3RSZWdpc3RyYXRpb24ucmVwb3J0ZXJdID0gb2JqZWN0UmVnaXN0cmF0aW9uLnVybDtcblxuICAgICAgICBsZXQgcDJwSGFuZGxlcjtcbiAgICAgICAgbGV0IHAycFJlcXVlc3RlcjtcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoX3RoaXMucDJwSGFuZGxlclN0dWIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIHAycEhhbmRsZXIgPSBfdGhpcy5wMnBIYW5kbGVyU3R1YltfdGhpcy5ydW50aW1lVVJMXS51cmw7XG4gICAgICAgICAgcDJwUmVxdWVzdGVyID0gcnVudGltZVV0aWxzLnJ1bnRpbWVEZXNjcmlwdG9yLnAycFJlcXVlc3RlclN0dWI7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RyYXRpb24uc3RhcnRpbmdUaW1lID0gcmVnaXN0cmF0aW9uLmNyZWF0ZWQ7XG5cbiAgICAgICAgZGVsZXRlIHJlZ2lzdHJhdGlvbi5hdXRob3Jpc2U7XG4gICAgICAgIGRlbGV0ZSByZWdpc3RyYXRpb24uY3JlYXRlZDtcbiAgICAgICAgZGVsZXRlIHJlZ2lzdHJhdGlvbi5tdXR1YWw7XG4gICAgICAgIGRlbGV0ZSByZWdpc3RyYXRpb24ucmVzdW1lO1xuXG4gICAgICAgIGlmICghcmVnaXN0cmF0aW9uLmV4cGlyZXMpIHJlZ2lzdHJhdGlvbi5leHBpcmVzID0gX3RoaXMuZXhwaXJlc1RpbWU7XG5cbiAgICAgICAgcmVnaXN0cmF0aW9uLmRhdGFTY2hlbWVzID0gZGF0YVNjaGVtZTtcblxuICAgICAgICBpZiAocDJwSGFuZGxlcikge1xuICAgICAgICAgIHJlZ2lzdHJhdGlvbi5wMnBIYW5kbGVyID0gcDJwSGFuZGxlcjtcbiAgICAgICAgICByZWdpc3RyYXRpb24ucDJwUmVxdWVzdGVyID0gcDJwUmVxdWVzdGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90aGlzLmlzSW50ZXJ3b3JraW5nUHJvdG9TdHViKHJlZ2lzdHJhdGlvbi5yZXBvcnRlcikpIHtcbiAgICAgICAgICByZWdpc3RyYXRpb24uaW50ZXJ3b3JraW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdHJhdGlvbi5zdGF0dXMgPSAnbGl2ZSc7XG5cbiAgICAgICAgbGV0IG1lc3NhZ2U7XG5cbiAgICAgICAgaWYgKCFvYmplY3RSZWdpc3RyYXRpb24ucmVzdW1lKSB7XG5cbiAgICAgICAgICBsb2cubG9nKCdbUmVnaXN0cnkucmVnaXN0ZXJEYXRhT2JqZWN0XSByZWdpc3RlcmluZyBuZXcgZGF0YSBvYmplY3QgVVJMJywgcmVnaXN0cmF0aW9uKTtcblxuICAgICAgICAgIG1lc3NhZ2UgPSB7dHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiwgYm9keToge3ZhbHVlOiByZWdpc3RyYXRpb24sIHBvbGljeTogJ3BvbGljeSd9fTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgbG9nLmxvZygnW1JlZ2lzdHJ5LnJlZ2lzdGVyRGF0YU9iamVjdF0gcmVnaXN0ZXJpbmcgcHJldmlvdXNseSByZWdpc3RlcmVkIGRhdGEgb2JqZWN0IFVSTCcsIHJlZ2lzdHJhdGlvbik7XG5cbiAgICAgICAgICBtZXNzYWdlID0ge1xuICAgICAgICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbixcbiAgICAgICAgICAgIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgYm9keToge3Jlc291cmNlOiByZWdpc3RyYXRpb24udXJsLCB2YWx1ZToge3N0YXR1czogJ2xpdmUnfSB9XG4gICAgICAgICAgfTtcblxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuZGF0YU9iamVjdExpc3RbcmVnaXN0cmF0aW9uLnVybF0gPSBvYmplY3RSZWdpc3RyYXRpb247XG5cbiAgICAgICAgLy8gc3RlcCB0byBvYnRhaW4gdGhlIGxpc3Qgb2YgYWxsIFVSTCByZWdpc3RlcmVkIHRvIHVwZGF0ZWQgd2l0aCB0aGUgbmV3IG9uZS5cbiAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZWdpc3RyeTpEYXRhT2JqZWN0VVJMcycsIDAsIHVybHNMaXN0KS50aGVuKCgpID0+IHtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZVdpdGhSZXRyaWVzKG1lc3NhZ2UsIF90aGlzLl9yZWdpc3RyYXRpb25SZXRyaWVzLCAocmVwbHkpID0+IHtcbiAgICAgICAgICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5LnJlZ2lzdGVyRGF0YU9iamVjdF0gPT09PiByZWdpc3RlckRhdGFPYmplY3QgUmVwbHk6ICcsIHJlcGx5KTtcbiAgICAgICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZWdpc3RyYXRpb24pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gcmVnaXN0ZXIgRGF0YU9iamVjdCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgfVxuXG5cbiAgICAgICAgICAvL3RpbWVyIHRvIGtlZXAgdGhlIHJlZ2lzdHJhdGlvbiBhbGl2ZVxuICAgICAgICAgIC8vIHRoZSB0aW1lIGlzIGRlZmluZWQgYnkgYSBsaXR0bGUgbGVzcyB0aGFuIGhhbGYgb2YgdGhlIGV4cGlyZXMgdGltZSBkZWZpbmVkXG4gICAgICAgICAgbGV0IGtlZXBBbGl2ZVRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICB0eXBlOiAndXBkYXRlJyxcbiAgICAgICAgICAgICAgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluLFxuICAgICAgICAgICAgICBib2R5OiB7IHJlc291cmNlOiByZWdpc3RyYXRpb24udXJsLCB2YWx1ZToge3N0YXR1czogJ2xpdmUnfSwgbWV0aG9kOiAncmVmcmVzaCcgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeS5yZWdpc3RlckRhdGFPYmplY3RdIEtlZXBBbGl2ZSBSZXBseTogJywgcmVwbHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgKCgocmVnaXN0cmF0aW9uLmV4cGlyZXMgLyAxLjEpIC8gMikgKiAxMDAwKSk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgICAgbG9nLmVycm9yKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBFcnJvcjogJywgcmVhc29uKTtcbiAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9nZXRSZXNvdXJjZXNBbmRTY2hlbWVzKGRlc2NyaXB0b3IpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKT0+IHtcblxuICAgICAgbGV0IHJlc291cmNlcztcblxuICAgICAgLy8gY2hlY2sgaWYgdGhlIGh5cGVydHkgcmVzb3VyY2VzIGlzIGEgdmVjdG9yIG9yIGEgc3RyaW5nXG4gICAgICAvLyBUT0RPIGRlbGV0ZSBsYXRlciB3aGVuIGNhdGFsb2d1ZSBpcyBmaXhlZFxuICAgICAgaWYgKHR5cGVvZiAoZGVzY3JpcHRvci5oeXBlcnR5VHlwZSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJlc291cmNlcyA9IFtdO1xuICAgICAgICByZXNvdXJjZXMucHVzaChkZXNjcmlwdG9yLmh5cGVydHlUeXBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc291cmNlcyA9IGRlc2NyaXB0b3IuaHlwZXJ0eVR5cGU7XG4gICAgICB9XG5cbiAgICAgIGxldCBvYmpOYW1lID0gZGVzY3JpcHRvci5vYmplY3ROYW1lO1xuXG4gICAgICBsZXQgZGVzY3JpcHRvckRhdGFTY2hlbWEgPSBkZXNjcmlwdG9yLmRhdGFPYmplY3RzO1xuICAgICAgbGV0IGRhdGFTY2hlbWFzQXJyYXkgPSBbXTtcblxuICAgICAgLy90aGlzIHdpbGwgY3JlYXRlIGEgYXJyYXkgd2l0aCBhIFByb21pc2UgaW4gZWFjaCBwb3NpdGlvblxuICAgICAgZm9yIChsZXQgaW5kZXggaW4gZGVzY3JpcHRvckRhdGFTY2hlbWEpIHtcbiAgICAgICAgZGF0YVNjaGVtYXNBcnJheS5wdXNoKF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3IoZGVzY3JpcHRvckRhdGFTY2hlbWFbaW5kZXhdKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFzIHNvb24gYXMgdGhlIHByZXZpb3VzIGFycmF5IGlzIGNvbXBsZXRlZCwgdGhpcyB3aWxsIHdhaXQgZm9yIHRoZSByZXNvbHZlIG9mIGFsbCBwcm9taXNlcyBpbiB0aGUgYXJyYXlcbiAgICAgIFByb21pc2UuYWxsKGRhdGFTY2hlbWFzQXJyYXkpLnRoZW4oZnVuY3Rpb24oZGF0YVNjaGVtYXMpIHtcblxuICAgICAgICBsZXQgZmlsdGVyZWREYXRhU2NoZW1hcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBkYXRhU2NoZW1hcykge1xuICAgICAgICAgIGxldCBkYXRhU2NoZW1hID0gZGF0YVNjaGVtYXNbaW5kZXhdO1xuICAgICAgICAgIGZpbHRlcmVkRGF0YVNjaGVtYXMucHVzaChkYXRhU2NoZW1hLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzLnNjaGVtZS5jb25zdGFudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnldIEh5cGVydHkgU2NoZW1hcycsIGZpbHRlcmVkRGF0YVNjaGVtYXMpO1xuICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnldIEh5cGVydHkgcmVzb3VyY2VzJywgcmVzb3VyY2VzKTtcblxuICAgICAgICByZXNvbHZlKHtyZXNvdXJjZXM6IHJlc291cmNlcywgZGF0YVNjaGVtYTogZmlsdGVyZWREYXRhU2NoZW1hcywgbmFtZTogb2JqTmFtZX0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBtZXRob2QgdGhhdCByZXR1cm5zIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBIeXBlcnR5IG9yIERhdGFPYmplY3RzIFVSTFMsIGZvciBnaXZlbiBjaGFyYWN0ZXJpc3RpY3NcbiAgKiBAcGFyYW0gIHtKU09OfSAgICAgICAgaW5mbyAgICAgICAgICAgb2JqZWN0IG9yIGh5cGVydHkgY2hhcmF0ZXJpc3RpY3MgaW5mb1xuICAqIEByZXR1cm4ge2FkZHJlc3NVUkx9ICBhZGRyZXNzVVJMICAgICByZXR1cm4gdGhlIFVSTCBpZiB0aGVyZSBpcyBhbnkgcHJldmlvdXN5IHJlZ2lzdGVyZWQgVVJMLCByZXR1cm4gdW5kZWZpbmVkIG90aGVyd2lzZVxuICAqL1xuICBjaGVja1JlZ2lzdGVyZWRVUkxzKGluZm8sIHJldXNlVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXG4gICAgICBsZXQgb2JqZWN0VHlwZSA9IChpbmZvLnJlcG9ydGVyKSA/ICdyZWdpc3RyeTpEYXRhT2JqZWN0VVJMcycgOiAncmVnaXN0cnk6SHlwZXJ0eVVSTHMnO1xuXG4gICAgICBpZiAodHlwZW9mKHJldXNlVVJMKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb2JqZWN0VHlwZSA9IHJldXNlVVJMICYmIGRpdmlkZVVSTChyZXVzZVVSTCkudHlwZSAhPT0gJ2h5cGVydHknID8gJ3JlZ2lzdHJ5OkRhdGFPYmplY3RVUkxzJyA6ICdyZWdpc3RyeTpIeXBlcnR5VVJMcyc7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldChvYmplY3RUeXBlKS50aGVuKCh1cmxzTGlzdCkgPT4ge1xuXG4gICAgICAgIGlmICghdXJsc0xpc3QpIHtcbiAgICAgICAgICB1cmxzTGlzdCA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZihyZXVzZVVSTCkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgbG9nLmluZm8oJ1tSZWdpc3RyeSAtIGNoZWNrUmVnaXN0ZXJlZFVSTHNdIC0gbG9vayBmb3IgJyArIHJldXNlVVJMICsgJyBvbiAnLCB1cmxzTGlzdCk7XG5cbiAgICAgICAgICBsZXQgc2VhcmNoUmVzdWx0ID0gT2JqZWN0LmtleXModXJsc0xpc3QpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBsZXQgaW5kZXhPZiA9IHVybHNMaXN0W2tleV0uaW5kZXhPZihyZXVzZVVSTCk7XG4gICAgICAgICAgICByZXR1cm4gdXJsc0xpc3Rba2V5XVtpbmRleE9mXTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGxvZy5pbmZvKCdbUmVnaXN0cnkgLSBjaGVja1JlZ2lzdGVyZWRVUkxzXSAtIGZvdW5kICcgKyBzZWFyY2hSZXN1bHQubGVuZ3RoICsgJyByZXN1bHRzIG9uICcsIHNlYXJjaFJlc3VsdCk7XG4gICAgICAgICAgaWYgKHNlYXJjaFJlc3VsdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHNlYXJjaFJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9iamVjdFR5cGUgPT09ICdyZWdpc3RyeTpIeXBlcnR5VVJMcycpIHtcbiAgICAgICAgICBfdGhpcy5fZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyhpbmZvKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKHVybHNMaXN0W3ZhbHVlLnJlc291cmNlcyArIHZhbHVlLmRhdGFTY2hlbWEgKyB2YWx1ZS5uYW1lXSkge1xuICAgICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnldIHJldXNhZ2Ugb2YgaHlwZXJ0eSBVUkwnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodXJsc0xpc3RbdmFsdWUucmVzb3VyY2VzICsgdmFsdWUuZGF0YVNjaGVtYSArIHZhbHVlLm5hbWVdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeV0gbm8gaHlwZXJ0eSBVUkwgd2FzIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCAnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIGxldCBjaGFyYWN0ZXJpc3RpY3MgPSBpbmZvLm5hbWUgKyBpbmZvLnNjaGVtYSArIGluZm8ucmVzb3VyY2VzICsgaW5mby5yZXBvcnRlcjtcblxuICAgICAgICAgIGlmICh1cmxzTGlzdFtjaGFyYWN0ZXJpc3RpY3NdKSB7XG4gICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnldIHJldXNhZ2Ugb2YgZGF0YU9iamVjdCBVUkwnKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVybHNMaXN0W2NoYXJhY3RlcmlzdGljc10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnldIG5vIGRhdGFPYmplY3QgVVJMIHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQnKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuXG4gIC8qKlxuICAqIFRvIHJlZ2lzdGVyIGEgbmV3IEh5cGVydHkgaW4gdGhlIHJ1bnRpbWUgd2hpY2ggcmV0dXJucyB0aGUgSHlwZXJ0eVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBIeXBlcnR5LlxuICAqIEBwYXJhbSAge1NhbmRib3h9ICAgICAgICAgICAgIHNhbmRib3ggICAgICAgICAgICAgICBzYW5kYm94XG4gICogQHBhcmFtICB7SHlwZXJ0eUNhdGFsb2d1ZVVSTH0gSHlwZXJ0eUNhdGFsb2d1ZVVSTCAgIGRlc2NyaXB0b3JcbiAgKiBAcGFyYW0ge29iamVjdH0gSWRwQ29uc3RyYWludCAtIGNvbnN0cmFpbnRzIHRvIGJlIHVzZWQgd2hlbiBzZWxlY3RpbmcgdGhlIGlkZW50aXR5IHRvIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgSHlwZXJ0eSBpbmNsdWRpbmcgb3JpZ2luLCBpZHAsIGFuZCBpZEhpbnQuXG4gICogQHJldHVybiB7SHlwZXJ0eVVSTH0gICAgICAgICAgSHlwZXJ0eVVSTFxuICAqL1xuICByZWdpc3Rlckh5cGVydHkoc2FuZGJveCwgZGVzY3JpcHRvclVSTCwgZGVzY3JpcHRvciwgYWRkcmVzc1VSTCwgSWRwQ29uc3RyYWludCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgaHlwZXJ0eUNhcGFiaWxpdGllcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgLy9hc3N1bWluZyBkZXNjcmlwdG9yIGNvbWUgaW4gdGhpcyBmb3JtYXQsIHRoZSBzZXJ2aWNlLXByb3ZpZGVyLWRvbWFpbiB1cmwgaXMgcmV0cmlldmVkIGJ5IGEgc3BsaXQgaW5zdHJ1Y3Rpb25cbiAgICAgIC8vaHlwZXJ0eS1jYXRhbG9ndWU6Ly88c2VydmljZS1wcm92aWRlci1kb21haW4+LzxjYXRhbG9ndWUtb2JqZWN0LWlkZW50aWZpZXI+XG4gICAgICBsZXQgZG9tYWluVXJsID0gZGl2aWRlVVJMKGRlc2NyaXB0b3JVUkwpLmRvbWFpbjtcblxuICAgICAgaWYgKGRvbWFpblVybC5pbmNsdWRlcygnY2F0YWxvZ3VlJykpIHtcbiAgICAgICAgZG9tYWluVXJsID0gZG9tYWluVXJsLnJlcGxhY2UoJ2NhdGFsb2d1ZS4nLCAnJyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmlkTW9kdWxlLmdldElkZW50aXR5QXNzZXJ0aW9uKElkcENvbnN0cmFpbnQpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG5cbiAgICAgICAgbGV0IHVzZXJQcm9maWxlID0gcmVzdWx0LnVzZXJQcm9maWxlO1xuXG4gICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIHVzZXJQcm9maWxlJywgdXNlclByb2ZpbGUpO1xuICAgICAgICBsZXQgZW1haWxVUkwgPSB1c2VyUHJvZmlsZS51c2VyVVJMO1xuXG4gICAgICAgIGlmIChfdGhpcy5fbWVzc2FnZUJ1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVqZWN0KCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBNZXNzYWdlQnVzIGlzIHVuZGVmaW5lZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vY2FsbCBjaGVjayBpZiB0aGUgcHJvdG9zdHViIGV4aXN0OiB0byBiZSByZW1vdmVkXG4gICAgICAgICAgLyogIF90aGlzLnJlc29sdmUoZG9tYWluVXJsKS50aGVuKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIHN0dWIgdG8gZG9tYWluIHJlZ2lzdHJ5LSAnLCBhKTsqL1xuXG4gICAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZWdpc3RyeTpIeXBlcnR5VVJMcycpLnRoZW4oKHVybHNMaXN0KSA9PiB7XG5cbiAgICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIHN0b3JhZ2VNYW5hZ2VyXSAtICcsIHVybHNMaXN0KTtcblxuICAgICAgICAgICAgX3RoaXMuX2dldFJlc291cmNlc0FuZFNjaGVtZXMoZGVzY3JpcHRvcikudGhlbigodmFsdWUpID0+IHtcblxuICAgICAgICAgICAgICBoeXBlcnR5Q2FwYWJpbGl0aWVzID0gdmFsdWU7XG5cbiAgICAgICAgICAgICAgaWYgKCF1cmxzTGlzdCkge1xuICAgICAgICAgICAgICAgIHVybHNMaXN0ID0ge307XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB1cmxzTGlzdFtoeXBlcnR5Q2FwYWJpbGl0aWVzLnJlc291cmNlcyArIGh5cGVydHlDYXBhYmlsaXRpZXMuZGF0YVNjaGVtYSArIGh5cGVydHlDYXBhYmlsaXRpZXMubmFtZV0gPSBhZGRyZXNzVVJMLmFkZHJlc3M7XG4gICAgICAgICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmVnaXN0cnk6SHlwZXJ0eVVSTHMnLCAwLCB1cmxzTGlzdCkudGhlbigoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyeURvbWFpbiA9IGRvbWFpblVybDtcblxuICAgICAgICAgICAgICAgIC8vY2hlY2sgd2hldGhlciB0aGUgcmVjZWl2ZWQgc2FuYm94IGUgQXBwbGljYXRpb25TYW5kYm94IG9yIGEgbm9ybWFsIHNhbmRib3hcbiAgICAgICAgICAgICAgICBpZiAoc2FuZGJveC50eXBlID09PSAnYXBwJykge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W2FkZHJlc3NVUkwuYWRkcmVzc1swXV0gPSBzYW5kYm94O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2FuZGJveC50eXBlID09PSAnbm9ybWFsJykge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W2FkZHJlc3NVUkwuYWRkcmVzc1swXV0gPSBzYW5kYm94O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZWplY3QoJ1dyb25nIFNhbmRib3hUeXBlJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHAycEhhbmRsZXI7XG4gICAgICAgICAgICAgICAgbGV0IHAycFJlcXVlc3RlcjtcblxuICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhfdGhpcy5wMnBIYW5kbGVyU3R1YikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICBwMnBIYW5kbGVyID0gX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0udXJsO1xuICAgICAgICAgICAgICAgICAgcDJwUmVxdWVzdGVyID0gcnVudGltZVV0aWxzLnJ1bnRpbWVEZXNjcmlwdG9yLnAycFJlcXVlc3RlclN0dWI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHJ1bnRpbWUgPSBfdGhpcy5ydW50aW1lVVJMO1xuICAgICAgICAgICAgICAgIGxldCBzdGF0dXMgPSAnbGl2ZSc7XG5cbiAgICAgICAgICAgICAgICBsZXQgaHlwZXJ0eSA9IG5ldyBIeXBlcnR5SW5zdGFuY2UoX3RoaXMuaWRlbnRpZmllciwgX3RoaXMucmVnaXN0cnlVUkwsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGFkZHJlc3NVUkwuYWRkcmVzc1swXSwgdXNlclByb2ZpbGUsICdndWlkJywgX3RoaXMucnVudGltZVVSTCwgJ2N0eCcsIHAycEhhbmRsZXIsIHAycFJlcXVlc3RlciwgaHlwZXJ0eUNhcGFiaWxpdGllcy5kYXRhU2NoZW1hLCBoeXBlcnR5Q2FwYWJpbGl0aWVzLnJlc291cmNlcyk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5oeXBlcnRpZXNMaXN0LnB1c2goaHlwZXJ0eSk7XG5cbiAgICAgICAgICAgICAgICAvL21lc3NhZ2UgdG8gcmVnaXN0ZXIgdGhlIG5ldyBoeXBlcnR5LCB3aXRoaW4gdGhlIGRvbWFpbiByZWdpc3RyeVxuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlVmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgbGV0IHJlZ2lzdHJhdGlvbkV4cGlyZXMgPSBfdGhpcy5leHBpcmVzVGltZTtcblxuICAgICAgICAgICAgICAgIC8vIHNldCBhIGRpZmZlcmVudCBleHBpcmVzIHZhbHVlIGlmIGNvbmZpZ3VyZWQgaW4gdGhlIEh5cGVydHkgZGVzY3JpcHRvclxuXG4gICAgICAgICAgICAgICAgaWYgKGRlc2NyaXB0b3IuY29uZmlndXJhdGlvbiAmJiBkZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24uZXhwaXJlcykgcmVnaXN0cmF0aW9uRXhwaXJlcyA9IGRlc2NyaXB0b3IuY29uZmlndXJhdGlvbi5leHBpcmVzO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFkZHJlc3NVUkwubmV3QWRkcmVzcykge1xuICAgICAgICAgICAgICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gcmVnaXN0ZXJpbmcgbmV3IEh5cGVydHkgVVJMJywgYWRkcmVzc1VSTC5hZGRyZXNzWzBdKTtcblxuICAgICAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICB1c2VyOiBlbWFpbFVSTCxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvclVSTCxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBhZGRyZXNzVVJMLmFkZHJlc3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXM6IHJlZ2lzdHJhdGlvbkV4cGlyZXMsXG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlczogaHlwZXJ0eUNhcGFiaWxpdGllcy5yZXNvdXJjZXMsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFTY2hlbWVzOiBoeXBlcnR5Q2FwYWJpbGl0aWVzLmRhdGFTY2hlbWEsXG4gICAgICAgICAgICAgICAgICAgIHJ1bnRpbWU6IHJ1bnRpbWUsXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzXG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAvLyBzZXQgYSBkaWZmZXJlbnQgZXhwaXJlcyBpZiBkZWZpbmVkIGluIHRoZSBoeXBlcnR5IGNvbmZpZ3VyYXRpb25cblxuICAgICAgICAgICAgICAgICAgaWYgKHAycEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlLnAycEhhbmRsZXIgPSBwMnBIYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVmFsdWUucDJwUmVxdWVzdGVyID0gcDJwUmVxdWVzdGVyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSByZWdpc3RlcmluZyBuZXcgSHlwZXJ0eSBhdCBkb21haW4gcmVnaXN0cnkgJywgbWVzc2FnZVZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHt0eXBlOiAnY3JlYXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluLCBib2R5OiB7dmFsdWU6IG1lc3NhZ2VWYWx1ZSwgcG9saWN5OiAncG9saWN5J319O1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIHJlZ2lzdGVyaW5nIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBIeXBlcnR5IFVSTCcsIGFkZHJlc3NVUkwuYWRkcmVzc1swXSk7XG5cbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgICAgICAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbixcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHtyZXNvdXJjZTogYWRkcmVzc1VSTC5hZGRyZXNzWzBdLCB2YWx1ZTogeyBzdGF0dXM6ICdsaXZlJywgdXNlcjogZW1haWxVUkwgfX1cbiAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIGlmIChwMnBIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZS5wMnBIYW5kbGVyID0gcDJwSGFuZGxlcjtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlLnAycFJlcXVlc3RlciA9IHAycFJlcXVlc3RlcjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBIeXBlcnR5IHJlZ2lzdHJhdGlvbiBhdCBkb21haW4gcmVnaXN0cnkgIC0gJywgbWVzc2FnZSk7XG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2VXaXRoUmV0cmllcyhtZXNzYWdlLCBfdGhpcy5yZWdpc3RyYXRpb25SZXRyaWVzLCAocmVwbHkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gSHlwZXJ0eSByZWdpc3RyYXRpb24gcmVzcG9uc2U6ICcsIHJlcGx5KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0geyB1cmw6IGFkZHJlc3NVUkwuYWRkcmVzc1swXX07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHAycEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wMnBIYW5kbGVyID0gcDJwSGFuZGxlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wMnBSZXF1ZXN0ZXIgPSBwMnBSZXF1ZXN0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gNDA0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gVGhlIHVwZGF0ZSB3YXMgbm90IHBvc3NpYmxlLiBSZWdpc3RlcmluZyBuZXcgSHlwZXJ0eSBhdCBkb21haW4gcmVnaXN0cnknKTtcblxuICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VWYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI6IGVtYWlsVVJMLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvclVSTCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYWRkcmVzc1VSTC5hZGRyZXNzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwaXJlczogcmVnaXN0cmF0aW9uRXhwaXJlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlczogaHlwZXJ0eUNhcGFiaWxpdGllcy5yZXNvdXJjZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhU2NoZW1lczogaHlwZXJ0eUNhcGFiaWxpdGllcy5kYXRhU2NoZW1hLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZTogcnVudGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChwMnBIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVmFsdWUucDJwSGFuZGxlciA9IHAycEhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVmFsdWUucDJwUmVxdWVzdGVyID0gcDJwUmVxdWVzdGVyO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB7dHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiwgYm9keToge3ZhbHVlOiBtZXNzYWdlVmFsdWUsIHBvbGljeTogJ3BvbGljeSd9fTtcblxuICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZVdpdGhSZXRyaWVzKG1lc3NhZ2UsIF90aGlzLnJlZ2lzdHJhdGlvblJldHJpZXMsIChyZXBseSkgPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIEh5cGVydHkgcmVnaXN0cmF0aW9uIHVwZGF0ZSByZXNwb25zZTogJywgcmVwbHkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSB7IHVybDogYWRkcmVzc1VSTC5hZGRyZXNzWzBdfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocDJwSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnAycEhhbmRsZXIgPSBwMnBIYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnAycFJlcXVlc3RlciA9IHAycFJlcXVlc3RlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZWdpc3RlciBhbiBIeXBlcnR5OiAnICsgcmVwbHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZWdpc3RlciBhbiBIeXBlcnR5OiAnLCByZXBseSk7XG5cbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vdGltZXIgdG8ga2VlcCB0aGUgcmVnaXN0cmF0aW9uIGFsaXZlXG4gICAgICAgICAgICAgICAgLy8gdGhlIHRpbWUgaXMgZGVmaW5lZCBieSBhIGxpdHRsZSBsZXNzIHRoYW4gaGFsZiBvZiB0aGUgZXhwaXJlcyB0aW1lIGRlZmluZWRcbiAgICAgICAgICAgICAgICBsZXQga2VlcEFsaXZlVGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgICAgICAgICAgICAgICBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgICAgICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4sXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IGFkZHJlc3NVUkwuYWRkcmVzc1swXSwgdmFsdWU6IHtzdGF0dXM6ICdsaXZlJ30sIG1ldGhvZDogJ3JlZnJlc2gnIH19O1xuXG4gICAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gS2VlcEFsaXZlIFJlcGx5OiAnLCByZXBseSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCAoKChyZWdpc3RyYXRpb25FeHBpcmVzIC8gMS4xKSAvIDIpICogMTAwMCkpO1xuXG4gICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIEVycm9yOiAnLCByZWFzb24pO1xuICAgICAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgcmVqZWN0KCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSAnLCBlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIEh5cGVydHlcbiAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMIHVybCAgICAgICAgdXJsXG4gICovXG4gIHVucmVnaXN0ZXJIeXBlcnR5KHVybCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgbGV0IGluZGV4ID0gMDtcblxuICAgICAgZm9yXHQoaW5kZXggPSAwOyBpbmRleCA8IF90aGlzLmh5cGVydGllc0xpc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIGxldCBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07XG4gICAgICAgIGlmIChoeXBlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSB1cmwpIHtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZm91bmQgPT09IGZhbHNlKSB7XG4gICAgICAgIHJlamVjdCgnSHlwZXJ0eSBub3QgZm91bmQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTtcbiAgICAgICAgcmVzb2x2ZSgnSHlwZXJ0eSBzdWNjZXNzZnVsbHkgZGVsZXRlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyBkaXNjb3ZlciBwcm90b2NvbCBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBwcm90b2NvbCBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVycyAoZG8gd2UgbmVlZCBzb21ldGhpbmcgc2ltaWxhciBmb3IgSHlwZXJ0aWVzPykuXG4gICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgRG9tYWluVVJMICAgICAgICAgICAgdXJsXG4gICogQHJldHVybiB7UnVudGltZVVSTH0gICAgICAgICAgIFJ1bnRpbWVVUkxcbiAgKi9cbiAgZGlzY292ZXJQcm90b3N0dWIodXJsKSB7XG4gICAgaWYgKCF1cmwpIHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyIHVybCBuZWVkZWQnKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodXJsKTtcbiAgICBsZXQgZG9tYWluVVJMID0gZGl2aWRlZFVSTC5kb21haW47XG5cbiAgICBpZiAoX3RoaXMucHJvdG9zdHVic0xpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVVJMKSAmJiBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VUkxdLnN0YXR1cyA9PT0gU1RBVFVTLkxJVkUpIHtcbiAgICAgIHJldHVybiAoX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVVJMXSk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVVJMXSA9IHtcbiAgICAgICAgc3RhdHVzOiBTVEFUVVMuREVQTE9ZSU5HXG4gICAgICB9O1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tSZWdpc3RyeSAtIGRpc2NvdmVyUHJvdG9TdHViIF0gTWVzc2FnZSBOb2RlIFByb3Rvc3R1YiBOb3QgRm91bmQuIENyZWF0aW5nIG9uZScpO1xuXG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgKiBUbyBkaXNjb3ZlciBwcm90b2NvbCBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiByZW1vdGUgcnVudGltZSBVUkwuIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBwcm90b2NvbCBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uXG4gICogUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgQlVTIHRvIHJvdXRlIG1lc3NhZ2VzIHRvIHJlbW90ZSBzZXJ2ZXJzIG9yIHBlZXJzIChkbyB3ZSBuZWVkIHNvbWV0aGluZyBzaW1pbGFyIGZvciBIeXBlcnRpZXM/KS5cbiAgKiBAcGFyYW0gIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTCAgICAgICAgICAgIHVybFxuICAqIEByZXR1cm4ge3AycFJlcXVlc3Rlcn0gICAgICAgICAgIFJ1bnRpbWVVUkxcbiAgKi9cbiAgZGlzY292ZXJQMlBTdHViKHJ1bnRpbWVVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHJ1bnRpbWVVUkwpIHtcblxuICAgICAgaWYgKF90aGlzLnAycFJlcXVlc3RlclN0dWIuaGFzT3duUHJvcGVydHkocnVudGltZVVSTCkgJiYgX3RoaXMucDJwUmVxdWVzdGVyU3R1YltydW50aW1lVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5MSVZFKSB7XG4gICAgICAgIHJldHVybiAoX3RoaXMucDJwUmVxdWVzdGVyU3R1YltydW50aW1lVVJMXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViW3J1bnRpbWVVUkxdID0ge1xuICAgICAgICAgIHN0YXR1czogU1RBVFVTLkNSRUFURURcbiAgICAgICAgfTtcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tSZWdpc3RyeSAtIGRpc2NvdmVyUDJQU3R1YiBdIFAyUCBSZXF1ZXN0ZXIgU3R1YiBOb3QgRm91bmQuIENyZWF0aW5nIG9uZScpO1xuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcblxuICAgICAgaWYgKF90aGlzLnAycEhhbmRsZXJTdHViLmhhc093blByb3BlcnR5KF90aGlzLnJ1bnRpbWVVUkwpKSB7XG4gICAgICAgIHJldHVybiAoX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0gPSB7XG4gICAgICAgICAgc3RhdHVzOiBTVEFUVVMuQ1JFQVRFRFxuICAgICAgICB9O1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW1JlZ2lzdHJ5IC0gZGlzY292ZXJQMlBTdHViIF0gUDJQIEhhbmRsZXIgU3R1YiBOb3QgRm91bmQuJyk7XG4gICAgICB9XG5cbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBUbyByZWdpc3RlciBhIG5ldyBQcm90b2NvbCBTdHViIGluIHRoZSBydW50aW1lIGluY2x1ZGluZyBhcyBpbnB1dCBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbiB0byBwb3N0TWVzc2FnZSwgdGhlIERvbWFpblVSTCB0aGF0IGlzIGNvbm5lY3RlZCB3aXRoIHRoZSBzdHViLCB3aGljaCByZXR1cm5zIHRoZSBSdW50aW1lVVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IFByb3RvY29sU3R1Yi5cbiAgICogQHBhcmFtICB7U2FuZGJveH0gICAgICAgU2FuZGJveFxuICAgKiBAcGFyYW0gIHtzdHViSUR9ICAgICAgICBEb21haW4gb3IgaHlwZXJ0eSBydW50aW1lIHRvIHJlZ2lzdGVyIHRoZSBzdHViXG4gICAqIEBwYXJhbSAge2Rlc2NyaXB0b3JVUkx9ICAgICBDYXRhbG9ndWUgVVJMIG9mIHRoZSBQcm90b3N0dWIgZGVzY3JpcHRvclxuICAgKiBAcGFyYW0gIHtkZXNjcmlwdG9yfSAgICAgUHJvdG9zdHViIGRlc2NyaXB0b3JcbiAgICogQHJldHVybiB7UnVudGltZVByb3RvU3R1YlVSTH1cbiAgICovXG4gIHJlZ2lzdGVyU3R1YihzYW5kYm94LCBzdHViSUQsIHAycENvbmZpZywgZGVzY3JpcHRvclVSTCwgZGVzY3JpcHRvcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgX3N0dWJEZXNjcmlwdG9yID0gZGVzY3JpcHRvcjtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgbGV0IHJ1bnRpbWVQcm90b1N0dWJVUkw7XG5cbiAgICAgIC8vY2hlY2sgaWYgbWVzc2FnZUJ1cyBpcyByZWdpc3RlcmVkIGluIHJlZ2lzdHJ5IG9yIG5vdFxuICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVqZWN0KCdNZXNzYWdlQnVzIG5vdCBmb3VuZCBvbiByZWdpc3RlclN0dWInKTtcbiAgICAgIH1cblxuICAgICAgbG9nLmluZm8oJ1tSZWdpc3RyeSAtIHJlZ2lzdGVyU3R1Yl0gLSBzdHViSUQgJywgc3R1YklEKTtcblxuICAgICAgLyogaWYgKCFzdHViSUQuaW5kZXhPZignbXNnLW5vZGUuJykpIHtcbiAgICAgICAgc3R1YklEID0gc3R1YklELnN1YnN0cmluZyhzdHViSUQuaW5kZXhPZignLicpICsgMSk7XG4gICAgICB9Ki9cblxuICAgICAgbGV0IFAyUFJlcXVlc3RlclN0dWI7XG5cbiAgICAgIGlmIChwMnBDb25maWcpIHtcblxuICAgICAgICBpZiAocDJwQ29uZmlnLmhhc093blByb3BlcnR5KCdpc0hhbmRsZXJTdHViJykgJiYgcDJwQ29uZmlnLmlzSGFuZGxlclN0dWIpIHtcbiAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMID0gX3RoaXMucDJwSGFuZGxlclVSTDtcblxuICAgICAgICAgIF90aGlzLnAycEhhbmRsZXJTdHViW3N0dWJJRF0gPSB7XG4gICAgICAgICAgICB1cmw6IHJ1bnRpbWVQcm90b1N0dWJVUkwsXG4gICAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5DUkVBVEVEXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIF90aGlzLnAycEhhbmRsZXJBc3NvY2lhdGlvbltfdGhpcy5ydW50aW1lVVJMXSA9IFtdO1xuXG4gICAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3J1bnRpbWVQcm90b1N0dWJVUkxdID0gc2FuZGJveDtcbiAgICAgICAgICBsb2cuaW5mbygnW1JlZ2lzdHJ5IC0gcmVnaXN0ZXJTdHViIC0gUDJQSGFuZGxlclN0dWJdIC0gJywgc3R1YklELCAnIC0gJywgcnVudGltZVByb3RvU3R1YlVSTCk7XG4gICAgICAgICAgcmVzb2x2ZShfdGhpcy5wMnBIYW5kbGVyU3R1YltzdHViSURdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBQMlBSZXF1ZXN0ZXJTdHViID0gcDJwQ29uZmlnLnAycFJlcXVlc3RlclN0dWI7XG4gICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCA9ICdydW50aW1lOi8vJyArIGRpdmlkZVVSTChwMnBDb25maWcucmVtb3RlUnVudGltZVVSTCkuZG9tYWluICsgJy9wMnByZXF1ZXN0ZXIvJyArIGdlbmVyYXRlR1VJRCgpO1xuICAgICAgICAgIGxvZy5pbmZvKCdbUmVnaXN0cnkgLSByZWdpc3RlclN0dWIgLSBQMlBSZXF1ZXN0ZXJTdHViXSAtICcsIFAyUFJlcXVlc3RlclN0dWIsICcgLSAnLCBydW50aW1lUHJvdG9TdHViVVJMKTtcblxuICAgICAgICAgIC8vIHRvIGJlIGNsYXJpZmllZCB3aGF0IGlzIHRoaXMgcDJwSGFuZGxlckFzc29jaWF0aW9uXG4gICAgICAgICAgX3RoaXMucDJwSGFuZGxlckFzc29jaWF0aW9uW190aGlzLnJ1bnRpbWVVUkxdLnB1c2gocnVudGltZVByb3RvU3R1YlVSTCk7XG4gICAgICAgICAgX3RoaXMucDJwUmVxdWVzdGVyU3R1YltzdHViSURdID0ge1xuICAgICAgICAgICAgdXJsOiBydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgICAgICAgc3RhdHVzOiBTVEFUVVMuQ1JFQVRFRFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbcnVudGltZVByb3RvU3R1YlVSTF0gPSBzYW5kYm94O1xuXG4gICAgICAgICAgLy9TZXR1cCBQMlAgUmVxdWVzdGVyIHBhdGggaW50byBNTlxuXG4gICAgICAgICAgbGV0IG1zZyA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLFxuICAgICAgICAgICAgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgIHN1YnNjcmliZTogW3J1bnRpbWVQcm90b1N0dWJVUkxdLFxuICAgICAgICAgICAgICBzb3VyY2U6IF90aGlzLnJlZ2lzdHJ5VVJMXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgLSByZWdpc3RlciBTdHViXSBwMnBSZXF1ZXN0ZXIgcGF0aCBzZXR1cDogJywgcmVwbHkpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmVzb2x2ZShfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViW3N0dWJJRF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMID0gJ3J1bnRpbWU6Ly8nICsgc3R1YklEICsgJy9wcm90b3N0dWIvJyArIGdlbmVyYXRlR1VJRCgpO1xuXG4gICAgICAgIGxvZy5pbmZvKCdbUmVnaXN0cnkgLSByZWdpc3RlclN0dWIgLSBOb3JtYWwgU3R1Yl0gLSAnLCBzdHViSUQpO1xuXG4gICAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXNcbiAgICAgICAgX3RoaXMucHJvdG9zdHVic0xpc3Rbc3R1YklEXSA9IHtcbiAgICAgICAgICB1cmw6IHJ1bnRpbWVQcm90b1N0dWJVUkwsXG4gICAgICAgICAgc3RhdHVzOiBTVEFUVVMuREVQTE9ZSU5HXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGRlc2NyaXB0b3JVUkwpIHtcbiAgICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtzdHViSURdLmRlc2NyaXB0b3JVUkwgPSBkZXNjcmlwdG9yVVJMO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9zdHViRGVzY3JpcHRvciAmJiAoX3N0dWJEZXNjcmlwdG9yLmludGVyd29ya2luZykpIHtcbiAgICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtzdHViSURdLmludGVyd29ya2luZyA9IF9zdHViRGVzY3JpcHRvci5pbnRlcndvcmtpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbcnVudGltZVByb3RvU3R1YlVSTF0gPSBzYW5kYm94O1xuXG4gICAgICAgIHJlc29sdmUoX3RoaXMucHJvdG9zdHVic0xpc3Rbc3R1YklEXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlc29sdmUocnVudGltZVByb3RvU3R1YlVSTCk7XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKHJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsIChtc2cpID0+IHtcbiAgICAgICAgX3RoaXMuX29uUHJvdG9zdHViU3RhdHVzRXZlbnQobXNnKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIFByb2Nlc3Mgc3RhdHVzIGV2ZW50cyBmaXJlZCBieSBwcm90b3N0dWJzXG4gICogQHBhcmFtICB7TWVzc2FnZX0gICBtZXNzYWdlICAgICBFdmVudCBNZXNzYWdlXG4gICovXG5cbiAgX29uUHJvdG9zdHViU3RhdHVzRXZlbnQobXNnKSB7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IG9uUHJvdG9zdHViU3RhdHVzRXZlbnRdOiAnLCBtc2cpO1xuXG4gICAgbGV0IHJ1bnRpbWVQcm90b1N0dWJVUkwgPSBtc2cuZnJvbTtcblxuICAgIGlmICghbXNnLnRvLmluY2x1ZGVzKCcvc3RhdHVzJykpIHtcbiAgICAgIGxvZy5lcnJvcignW1JlZ2lzdHJ5IG9uUHJvdG9zdHViU3RhdHVzRXZlbnRdIE5vdCBTdGF0dXMgRXZlbnQ6ICcsIG1zZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gcHJvY2VzcyBzdGF0dXMgZXZlbnRzIGZyb20gbWVzc2FnZSBub2RlIHByb3Rvc3R1YnNcblxuICAgIGlmIChydW50aW1lUHJvdG9TdHViVVJMLmluY2x1ZGVzKCcvcHJvdG9zdHViLycpKSB7XG5cbiAgICAvLyBUT0RPOiB1bmNvbW1lbnQgYmVsb3cgd2hlbiBwcm90b3N0dWJzIGFyZSB1cGRhdGVkIHdpdGggbmV3IHN0YXR1cyB2YWx1ZSBcImxpdmVcIlxuICAgICAgT2JqZWN0LmtleXMoX3RoaXMucHJvdG9zdHVic0xpc3QpLmZpbHRlcigoa2V5KSA9PiB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wcm90b3N0dWJzTGlzdFtrZXldLnVybCA9PT0gcnVudGltZVByb3RvU3R1YlVSTDtcbiAgICAgIH0pLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0W2tleV0uc3RhdHVzID0gbXNnLmJvZHkudmFsdWU7XG5cbiAgICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gb25Qcm90b3N0dWJTdGF0dXNFdmVudF0gLSBQcm90b3N0dWIgc3RhdHVzOiAnLCBfdGhpcy5wcm90b3N0dWJzTGlzdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7IC8vIHByb2Nlc3Mgc3RhdHVzIGV2ZW50cyBmcm9tIHAycCBjb25uZWN0aW9uc1xuXG4gICAgICBpZiAobXNnLmJvZHkucmVzb3VyY2UpIHtcbiAgICAgICAgbGV0IHJlbW90ZVJ1bnRpbWVVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTtcblxuICAgICAgICBpZiAoX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbcmVtb3RlUnVudGltZVVSTF0pIHtcbiAgICAgICAgICBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdFtyZW1vdGVSdW50aW1lVVJMXS5zdGF0dXMgPSAgbXNnLmJvZHkudmFsdWU7XG4gICAgICAgICAgX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbcmVtb3RlUnVudGltZVVSTF0udXJsID0gIHJ1bnRpbWVQcm90b1N0dWJVUkw7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBsZXQgIHAycENvbm5lY3Rpb24gPSB7XG4gICAgICAgICAgICBzdGF0dXM6IG1zZy5ib2R5LnZhbHVlLFxuICAgICAgICAgICAgdXJsOiBydW50aW1lUHJvdG9TdHViVVJMXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIF90aGlzLnAycENvbm5lY3Rpb25MaXN0W3JlbW90ZVJ1bnRpbWVVUkxdID0gIHAycENvbm5lY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgLSBvblByb3Rvc3R1YlN0YXR1c0V2ZW50XSAtIFAyUENvbm5lY3Rpb24gc3RhdHVzOiAnLCBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdFtyZW1vdGVSdW50aW1lVVJMXSk7XG5cbiAgICAgICAgLy8gVXBkYXRlIFAyUCBSZXF1ZXN0ZXIgcHJvdG9zdHViIGlmIGl0IGlzIGNvbWluZyBmcm9tIHRoZXJlXG4gICAgICAgIGlmIChydW50aW1lUHJvdG9TdHViVVJMLmluY2x1ZGVzKCcvcDJwcmVxdWVzdGVyLycpKSB7XG4gICAgICAgICAgX3RoaXMucDJwUmVxdWVzdGVyU3R1YltyZW1vdGVSdW50aW1lVVJMXS5zdGF0dXMgPSBtc2cuYm9keS52YWx1ZTtcblxuICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSAtIG9uUHJvdG9zdHViU3RhdHVzRXZlbnRdIC0gUDJQIFJlcXVlc3RlciBzdGF0dXM6ICcsIF90aGlzLnAycFJlcXVlc3RlclN0dWJbcmVtb3RlUnVudGltZVVSTF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlmIGZyb20gUDJQSGFuZGxlciB3aXRoIHN0YXR1cyBkaXNjb25lbmN0ZWQsIGxldHMgcmVtb3ZlIGZyb20gcDJwQ29ubmVjdGlvbkxpc3RcbiAgICAgICAgICBpZiAobXNnLmJvZHkudmFsdWUgPT09ICdkaXNjb25uZWN0ZWQnKSBkZWxldGUgX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbcmVtb3RlUnVudGltZVVSTF07XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJ1bnRpbWVQcm90b1N0dWJVUkwuaW5jbHVkZXMoJy9wMnByZXF1ZXN0ZXIvJykpIHtcbiAgICAgICAgICAvLyBJdCBpcyBhbiBldmVudCBmcm9tIFAyUCBSZXF1ZXN0ZXIgd2l0aG91dCBtYW5kYXRvcnkgXCJyZXNvdXJjZVwiIGZpZWxkXG4gICAgICAgICAgbG9nLmVycm9yKCdbUmVnaXN0cnkgb25Qcm90b3N0dWJTdGF0dXNFdmVudF0gcmVzb3VyY2UgbWlzc2luZzogJywgbXNnKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSXQgaXMgYW4gZXZlbnQgZnJvbSBQMlAgSGFuZGxlclxuICAgICAgICAgIF90aGlzLnAycEhhbmRsZXJTdHViW190aGlzLnJ1bnRpbWVVUkxdLnN0YXR1cyA9IG1zZy5ib2R5LnZhbHVlO1xuXG4gICAgICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gb25Qcm90b3N0dWJTdGF0dXNFdmVudF0gLSBQMlBIYW5kbGVyIFN0dWIgc3RhdHVzOiAnLCBfdGhpcy5wMnBIYW5kbGVyU3R1YltfdGhpcy5ydW50aW1lVVJMXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH1cblxuICB9XG5cbiAgLyoqXG4gICogVG8gdW5yZWdpc3RlciBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBwcm90b2NvbCBzdHViXG4gICogQHBhcmFtICB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgSHlwZXJ0eVJ1bnRpbWVVUkwgICAgIGh5cGVydHlSdW50aW1lVVJMXG4gICovXG4gIHVucmVnaXN0ZXJTdHViKGh5cGVydHlSdW50aW1lVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgaWYgKF90aGlzLnByb3Rvc3R1YnNMaXN0Lmhhc093blByb3BlcnR5KGh5cGVydHlSdW50aW1lVVJMKSkge1xuICAgICAgICBkZWxldGUgX3RoaXMucHJvdG9zdHVic0xpc3RbaHlwZXJ0eVJ1bnRpbWVVUkxdO1xuICAgICAgICByZXNvbHZlKCdQcm90b3N0dWJVUkwgcmVtb3ZlZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KCdFcnJvciBvbiB1bnJlZ2lzdGVyU3R1YjogSHlwZXJ0eSBub3QgZm91bmQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUbyByZWdpc3RlciBhIG5ldyBJZGVudGl0eSBQcm92aWRlciBwcm94eSBpbiB0aGUgcnVudGltZSBpbmNsdWRpbmcgYXMgaW5wdXQgcGFyYW1ldGVycyB0aGUgZnVuY3Rpb24gdG8gcG9zdE1lc3NhZ2UsIHRoZSBEb21haW5VUkwgdGhhdCBpcyBjb25uZWN0ZWQgd2l0aCB0aGUgc3R1Yiwgd2hpY2ggcmV0dXJucyB0aGUgUnVudGltZVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBQcm90b2NvbFN0dWIuXG4gICAqIEBwYXJhbSB7U2FuZGJveH0gICAgICAgIFNhbmRib3hcbiAgICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgRG9tYWluVVJMIHNlcnZpY2UgcHJvdmlkZXIgZG9tYWluXG4gICAqIEByZXR1cm4ge1J1bnRpbWVJZHBQcm94eVVSTH1cbiAgICovXG4gIHJlZ2lzdGVySWRwUHJveHkoc2FuZGJveCwgZG9tYWluVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgbGV0IGlkcFByb3h5U3R1YlVSTDtcblxuICAgICAgLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90XG4gICAgICBpZiAoX3RoaXMuX21lc3NhZ2VCdXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpO1xuICAgICAgfVxuXG4gICAgICBpZHBQcm94eVN0dWJVUkwgPSAnZG9tYWluLWlkcDovLycgKyBkb21haW5VUkwgKyAnL3N0dWIvJyArIGdlbmVyYXRlR1VJRCgpO1xuXG4gICAgICAvLyBUT0RPOiBPcHRpbWl6ZSB0aGlzXG4gICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXSA9IHtcbiAgICAgICAgdXJsOiBpZHBQcm94eVN0dWJVUkwsXG4gICAgICAgIHN0YXR1czogU1RBVFVTLkRFUExPWUlOR1xuICAgICAgfTtcblxuICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W2lkcFByb3h5U3R1YlVSTF0gPSBzYW5kYm94O1xuXG4gICAgICAvLyBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7XG4gICAgICAvLyAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAvLyB9KTtcblxuICAgICAgcmVzb2x2ZShpZHBQcm94eVN0dWJVUkwpO1xuXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihpZHBQcm94eVN0dWJVUkwgKyAnL3N0YXR1cycsIChtc2cpID0+IHtcbiAgICAgICAgX3RoaXMuX29uSWRwUHJveHlTdGF0dXNFdmVudChtc2cpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyBQcm9jZXNzIHN0YXR1cyBldmVudHMgZmlyZWQgYnkgSWRwIFByb3hpZXNcbiAgKiBAcGFyYW0gIHtNZXNzYWdlfSAgIG1lc3NhZ2UgICAgIEV2ZW50IE1lc3NhZ2VcbiAgKi9cblxuICBfb25JZHBQcm94eVN0YXR1c0V2ZW50KG1zZykge1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSBvbklkcFByb3h5U3RhdHVzRXZlbnRdOiAnLCBtc2cpO1xuXG4gICAgbGV0IGlkcFByb3h5VVJMID0gbXNnLmZyb207XG5cbiAgICBpZiAoIW1zZy50by5pbmNsdWRlcygnL3N0YXR1cycpKSB7XG4gICAgICBsb2cuZXJyb3IoJ1tSZWdpc3RyeSBvbklkcFByb3h5U3RhdHVzRXZlbnRdIE5vdCBTdGF0dXMgRXZlbnQ6ICcsIG1zZyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgT2JqZWN0LmtleXMoX3RoaXMuaWRwUHJveHlMaXN0KS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgcmV0dXJuIF90aGlzLmlkcFByb3h5TGlzdFtrZXldLnVybCA9PT0gaWRwUHJveHlVUkw7XG4gICAgfSkubWFwKChrZXkpID0+IHtcbiAgICAgIF90aGlzLmlkcFByb3h5TGlzdFtrZXldLnN0YXR1cyA9IG1zZy5ib2R5LnZhbHVlO1xuXG4gICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgLSBvbklkcFByb3h5U3RhdHVzRXZlbnRdIC0gSWRwIFByb3h5IHN0YXR1czogJywgX3RoaXMuaWRwUHJveHlMaXN0W2tleV0pO1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyBkaXNjb3ZlciBpZHBQcm94eSBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBpZHBQcm94eSBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVyc1xuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIERvbWFpblVSTCAgICAgICAgICAgIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMICAgICAgICAgaWRwUHJveHlVcmxcbiAgKi9cbiAgZGlzY292ZXJJZHBQcm94eSh1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTCh1cmwpO1xuICAgIGxldCBkb21haW5VUkwgPSBkaXZpZGVkVVJMLmRvbWFpbjtcblxuICAgIGlmIChfdGhpcy5pZHBQcm94eUxpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVVJMKSAmJiBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5MSVZFKSB7XG4gICAgICByZXR1cm4gKF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VUkxdKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXSA9IHtcbiAgICAgICAgc3RhdHVzOiBTVEFUVVMuUFJPR1JFU1NcbiAgICAgIH07XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcignW1JlZ2lzdHJ5IC0gZGlzY292ZXJJZHBQcm94eSBdIElkcCBQcm94eSBOb3QgRm91bmQuIENyZWF0aW5nIG9uZScpO1xuXG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgKiBUbyByZWdpc3RlciBhIG5ldyBQb2xpY3kgRW5mb3JjZXIgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgSHlwZXJ0eVVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIFBFUCwgd2hpY2ggcmV0dXJucyB0aGUgUnVudGltZVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBQb2xpY3kgRW5mb3JjZXIgY29tcG9uZW50LlxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gcG9zdE1lc3NhZ2UgcG9zdE1lc3NhZ2VcbiAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMICAgICAgICAgICAgaHlwZXJ0eVxuICAqIEByZXR1cm4ge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMXG4gICovXG4gIHJlZ2lzdGVyUEVQKHBvc3RNZXNzYWdlLCBoeXBlcnR5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAvL1RPRE8gY2hlY2sgd2hhdCBwYXJhbWV0ZXIgaW4gdGhlIHBvc3RNZXNzYWdlIHRoZSBwZXAgaXMuXG4gICAgICBfdGhpcy5wZXBMaXN0W2h5cGVydHldID0gcG9zdE1lc3NhZ2U7XG4gICAgICByZXNvbHZlKCdQRVAgcmVnaXN0ZXJlZCB3aXRoIHN1Y2Nlc3MnKTtcbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogVG8gdW5yZWdpc3RlciBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBwcm90b2NvbCBzdHViXG4gICogQHBhcmFtICB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgSHlwZXJ0eVJ1bnRpbWVVUkwgICAgIEh5cGVydHlSdW50aW1lVVJMXG4gICovXG4gIHVucmVnaXN0ZXJQRVAoSHlwZXJ0eVJ1bnRpbWVVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBsZXQgcmVzdWx0ID0gX3RoaXMucGVwTGlzdFtIeXBlcnR5UnVudGltZVVSTF07XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWplY3QoJ1BlcCBOb3QgZm91bmQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCdQRVAgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQuJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIGRpc2NvdmVyIHNhbmRib3hlcyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4gYW5kIGEgY2VydGFpbiBzZXQgb2YgY2FwYWJpbGl0aWVzLiBSZXF1aXJlZCBieSB0aGUgcnVudGltZSBVQSB0byBhdm9pZCBtb3JlIHRoYW4gb25lIHNhbmRib3ggZm9yIHRoZSBzYW1lIGRvbWFpbi5cbiAgKiBAcGFyYW0gIHtEb21haW5VUkx9IERvbWFpblVSTCB1cmxcbiAgKiBAcmV0dXJuIHtSdW50aW1lU2FuZGJveH0gICAgICAgICAgIFJ1bnRpbWVTYW5kYm94XG4gICovXG4gIGdldFNhbmRib3godXJsLCBjb25zdHJhaW50cykge1xuICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciB1cmwgbmVlZGVkJyk7XG5cbiAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgZ2V0U2FuZGJveF0gZ2V0U2FuZGJveCBmb3I6ICcsIHVybCwgJyBhbmQgY2FwYWJpbGl0aWVzOiAnLCBjb25zdHJhaW50cyk7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgbGV0IHJlcXVlc3Q7XG5cbiAgICAgIC8vZmlyc3QgdHJ5IHRvIGZpbmQgdGhlIHVybCBpbiB0aGUgYXBwU2FuZGJveCBsaXN0XG4gICAgICByZXF1ZXN0ID0gX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W3VybF07XG5cbiAgICAgIC8vaWYgbm8gYXBwU2FuZGJveCB3YXMgZm91bmQsIHRyeSB0byBzZWFyY2ggaW4gdGhlIG5vcm1hbCBzYW5kYm94ZXMgbGlzdFxuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbdXJsXTtcblxuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcblxuICAgICAgICAgIGxldCBkb21haW47XG5cbiAgICAgICAgICBpZiAodXJsLmluY2x1ZGVzKCc6Ly8nKSkge1xuICAgICAgICAgICAgZG9tYWluID0gZGl2aWRlVVJMKHVybCkuZG9tYWluO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb21haW4gPSB1cmw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc2VhcmNoIGluIHRoZSBzYW5kYm94ZXMgbGlzdCBmb3IgYSBlbnRyeSBjb250YWluaW5nIHRoZSBkb21haW4gZ2l2ZW5cbiAgICAgICAgICBmb3IgKGxldCBzYW5kYm94IGluIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveCkge1xuICAgICAgICAgICAgLy90b2RvOiB1bmNvbW1lbnQgc2FuZGJveCBjb25zdHJhaW50cyBtYXRjaCBjb25kaXRpb24gd2l0aCBydW50aW1lIHNoYXJpbmdcbiAgICAgICAgICAgIGlmIChzYW5kYm94LmluY2x1ZGVzKGRvbWFpbikgJiYgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3NhbmRib3hdLm1hdGNoZXMoY29uc3RyYWludHMpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbc2FuZGJveF07XG4gICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gT2JqZWN0LmtleXMoY29uc3RyYWludHMpLmZpbHRlcihjb25zdHJhaW50ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNvbnN0cmFpbnQgPT09ICdicm93c2VyJyAmJiBjdXJyZW50LnR5cGUgPT09IFNhbmRib3hUeXBlLk5PUk1BTCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAoY29uc3RyYWludCA9PT0gJ3dpbmRvd1NhbmJveCcgJiYgY3VycmVudC50eXBlID09PSBTYW5kYm94VHlwZS5XSU5ET1cpO1xuXG4gICAgICAgICAgICAgIH0pLmxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7XG5cbiAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7IHJlcXVlc3QgPSBjdXJyZW50OyB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmVqZWN0KCdubyBzYW5kYm94IGZvdW5kIGZvcjogJyArIHVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICByZXNvbHZlTm9ybWFsU3R1Yih1cmwpIHtcbiAgICAvLyBsb2cubG9nKCdyZXNvbHZlTm9ybWFsU3R1YiAnICsgdXJsKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgLy9zcGxpdCB0aGUgdXJsIHRvIGZpbmQgdGhlIGRvbWFpblVSTC4gZGVhbHMgd2l0aCB0aGUgdXJsIGZvciBleGFtcGxlIGFzOlxuICAgICAgLy9cImh5cGVydHktcnVudGltZTovL3NwMS9wcm90b3N0dWIvMTIzXCIsXG4gICAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTCh1cmwpO1xuICAgICAgbGV0IGRvbWFpblVybCA9IGRpdmlkZWRVUkwuZG9tYWluO1xuICAgICAgbGV0IHR5cGUgPSBkaXZpZGVkVVJMLnR5cGU7XG5cbiAgICAgIGlmICh1cmwuaW5jbHVkZXMoX3RoaXMucnVudGltZVVSTCkpIHtcbiAgICAgICAgbG9nLmVycm9yKCdbUmVnaXN0cnkgLSByZXNvbHZlXSBVUkwgdG8gYmUgcmVzb2x2ZWQgc2hvdWxkIGhhdmUgbGlzdGVuZXJzICcsIHVybCk7XG4gICAgICAgIHJlamVjdCgnW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gVVJMIHRvIGJlIHJlc29sdmVkIHNob3VsZCBoYXZlIGxpc3RlbmVycyAnLCB1cmwpO1xuICAgICAgfVxuXG4gICAgICAvLyByZXNvbHZlIHRoZSBkb21haW4gcHJvdG9zdHViIGluIGNhc2Ugb2YgYSBtZXNzYWdlIHRvIGdsb2JhbCByZWdpc3RyeVxuICAgICAgaWYgKHVybC5pbmNsdWRlcygnZ2xvYmFsOi8vcmVnaXN0cnknKSkge1xuICAgICAgICBkb21haW5VcmwgPSBfdGhpcy5fZG9tYWluO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFkb21haW5VcmwuaW5kZXhPZignbXNnLW5vZGUuJykgfHwgIWRvbWFpblVybC5pbmRleE9mKCdyZWdpc3RyeS4nKSkge1xuICAgICAgICAgIGRvbWFpblVybCA9IGRvbWFpblVybC5zdWJzdHJpbmcoZG9tYWluVXJsLmluZGV4T2YoJy4nKSArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmlzTGVnYWN5KHVybCkudGhlbigoaXNMZWdhY3kpID0+IHtcblxuICAgICAgICAvLyBpZiBsZWdhY3kgaXQgc2hvdWxkIHJlc29sdmUgZm9yIDxwcm90b2NvbD4uPGRvbWFpbj5cbiAgICAgICAgaWYgKGlzTGVnYWN5ICYmIHR5cGUgIT09ICdkb21haW4taWRwJykge1xuICAgICAgICAgIGRvbWFpblVybCA9IHR5cGUgKyAnLicgKyBnZXRVc2VySWRlbnRpdHlEb21haW4odXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZy5pbmZvKCdbUmVnaXN0cnkucmVzb2x2ZV0gZG9tYWluVXJsOicsIGRvbWFpblVybCk7XG5cbiAgICAgICAgbGV0IHJlZ2lzdHJlZENvbXBvbmVudDtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RvbWFpbi1pZHAnKSB7XG4gICAgICAgICAgcmVnaXN0cmVkQ29tcG9uZW50ICA9IF90aGlzLmlkcFByb3h5TGlzdC5oYXNPd25Qcm9wZXJ0eShkb21haW5VcmwpID8gX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVybF0gOiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWdpc3RyZWRDb21wb25lbnQgID0gX3RoaXMucHJvdG9zdHVic0xpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVXJsKSA/IF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVybF0gOiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZy5pbmZvKCdbUmVnaXN0cnkucmVzb2x2ZV0gcmVnaXN0cmVkOicsIHJlZ2lzdHJlZENvbXBvbmVudCk7XG5cbiAgICAgICAgLy8gVE9ETyBzaW5jZSB0aGUgcHJvdG9zdHVicyBoYXZlIG90aGVyIHN0YXRlcyB0aGlzIHNob3VsZCBiZSByZXZpc2VkLCBiZWNhdXNlIHRoZSBzdGF0dXMgY291bGQgY2hhbmdlIGZyb20gREVQTE9ZRUQgdG8gTElWRVxuICAgICAgICAvLyBUT0RPIGFuZCB0aGlzIHZhbGlkYXRpb24gd2lsbCB0cmlnZ2VyIGEgbmV3IGxvYWQgb2YgSURQUHJveHkgb3IgUHJvdG9zdHViO1xuICAgICAgICBpZiAocmVnaXN0cmVkQ29tcG9uZW50ICYmIHJlZ2lzdHJlZENvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgnc3RhdHVzJykgJiZcbiAgICAgICAgIChyZWdpc3RyZWRDb21wb25lbnQuc3RhdHVzID09PSBTVEFUVVMuREVQTE9ZRUQgfHwgcmVnaXN0cmVkQ29tcG9uZW50LnN0YXR1cyA9PT0gU1RBVFVTLkNSRUFURUQgfHxcbiAgICAgICAgICByZWdpc3RyZWRDb21wb25lbnQuc3RhdHVzID09PSBTVEFUVVMuTElWRSB8fCByZWdpc3RyZWRDb21wb25lbnQuc3RhdHVzID09PSBTVEFUVVMuRElTQ09OTkVDVEVEKSkge1xuICAgICAgICAgIGxvZy5pbmZvKCdbUmVnaXN0cnkucmVzb2x2ZV0gUmVzb2x2ZWQ6ICcsIHJlZ2lzdHJlZENvbXBvbmVudC51cmwsIHJlZ2lzdHJlZENvbXBvbmVudC5zdGF0dXMpO1xuICAgICAgICAgIHJlc29sdmUocmVnaXN0cmVkQ29tcG9uZW50LnVybCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy90b2RvOiB1c2Ugc3dpdGNoLWNhc2UgdG8gc3VwcG9ydCBvdGhlciB0eXBlcyBvZiBzdHVic1xuICAgICAgICAgIGlmICh0eXBlID09PSAnZG9tYWluLWlkcCcpIHtcblxuICAgICAgICAgICAgLy8gVGhlIElkUCBQcm94eSBkb2VzIG5vdCBleGlzdCwgbGV0J3MgcHJlcGFyZSBpdHMgZGVwbG95bWVudCBieSB3YXRjaGluZyBpdHMgc3RhdHVzXG5cbiAgICAgICAgICAgIF90aGlzLndhdGNoaW5nWW91Lm9ic2VydmUoJ2lkcFByb3h5TGlzdCcsIChjaGFuZ2UpID0+IHtcblxuICAgICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgLSByZXNvbHZlTm9ybWFsU3R1Yl0gaWRwUHJveHlMaXN0IGNoYW5nZWQgJyArIF90aGlzLmlkcFByb3h5TGlzdCk7XG5cbiAgICAgICAgICAgICAgbGV0IGtleXBhdGggPSBjaGFuZ2Uua2V5cGF0aDtcblxuICAgICAgICAgICAgICBpZiAoa2V5cGF0aC5pbmNsdWRlcygnc3RhdHVzJykpXG4gICAgICAgICAgICAgICAga2V5cGF0aCA9IGtleXBhdGgucmVwbGFjZSgnLnN0YXR1cycsICcnKTtcblxuICAgICAgICAgICAgICBpZiAoa2V5cGF0aCA9PT0gZG9tYWluVXJsICYmIGNoYW5nZS5uYW1lID09PSAnc3RhdHVzJyAmJiBjaGFuZ2UubmV3VmFsdWUgPT09IFNUQVRVUy5DUkVBVEVEKSB7XG4gICAgICAgICAgICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZU5vcm1hbFN0dWJdIGlkcFByb3h5TGlzdCBpcyBsaXZlICcgKyBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXS51cmwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFyZWdpc3RyZWRDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgLy8gdGhpcyBwcm9jZXNzIHdpbGwgbG9hZCB0aGUgaWRwIHByb3h5LCBiZWNhdXNlIGlzIG5vdCB5ZXQgcmVnaXN0ZXJlZDtcbiAgICAgICAgICAgICAgbG9nLmluZm8oJ1tSZWdpc3RyeS5yZXNvbHZlTm9ybWFsU3R1Yl0gZGVwbG95IG5ldyBJRFBQcm94eTogJywgZG9tYWluVXJsKTtcbiAgICAgICAgICAgICAgX3RoaXMubG9hZGVyLmxvYWRJZHBQcm94eShkb21haW5VcmwpLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgbG9nLmluZm8oJ1tSZWdpc3RyeS5yZXNvbHZlTm9ybWFsU3R1Yl0gSWRQIFByb3h5IGRlcGxveWVkOiAnLCBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXSk7XG5cbiAgICAgICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgICAgIGxvZy5lcnJvcignW1JlZ2lzdHJ5LnJlc29sdmVdIEVycm9yIHJlc29sdmluZyBMb2FkIElEUFByb3h5OiAnLCByZWFzb24pO1xuICAgICAgICAgICAgICAgIF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdLnN0YXR1cyA9ICdkZXBsb3ltZW50LWZhaWxlZCc7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBUaGUgcHJvdG9TdHViIGRvZXMgbm90IGV4aXN0LCBsZXQncyBwcmVwYXJlIGl0cyBkZXBsb3ltZW50IGJ5IHdhdGNoaW5nIGl0cyBzdGF0dXNcblxuICAgICAgICAgICAgX3RoaXMud2F0Y2hpbmdZb3Uub2JzZXJ2ZSgncHJvdG9zdHVic0xpc3QnLCAoY2hhbmdlKSA9PiB7XG5cbiAgICAgICAgICAgICAgLy8gbG9nLmxvZygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZU5vcm1hbFN0dWJdIHByb3Rvc3R1YnNMaXN0IGNoYW5nZWQgJyArIF90aGlzLnByb3Rvc3R1YnNMaXN0KTtcblxuICAgICAgICAgICAgICBsZXQga2V5cGF0aCA9IGNoYW5nZS5rZXlwYXRoO1xuXG4gICAgICAgICAgICAgIGlmIChrZXlwYXRoLmluY2x1ZGVzKCdzdGF0dXMnKSlcbiAgICAgICAgICAgICAgICBrZXlwYXRoID0ga2V5cGF0aC5yZXBsYWNlKCcuc3RhdHVzJywgJycpO1xuXG4gICAgICAgICAgICAgIGlmIChrZXlwYXRoID09PSBkb21haW5VcmwgJiYgY2hhbmdlLm5hbWUgPT09ICdzdGF0dXMnICYmIGNoYW5nZS5uZXdWYWx1ZSA9PT0gU1RBVFVTLkNSRUFURUQpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgLSByZXNvbHZlXSBwcm90b3N0dWIgaXMgbGl2ZSAnICsgX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVXJsXSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdLnVybCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXJlZ2lzdHJlZENvbXBvbmVudCkge1xuICAgICAgICAgICAgICAvLyBsZXRzIGRlcGxveSB0aGUgcHJvdG9zdHViXG4gICAgICAgICAgICAgIGxvZy5pbmZvKCdbUmVnaXN0cnkucmVzb2x2ZV0gdHJpZ2dlciBuZXcgUHJvdG9jb2xTdHViOiAnLCBkb21haW5VcmwpO1xuICAgICAgICAgICAgICBfdGhpcy5sb2FkZXIubG9hZFN0dWIoZG9tYWluVXJsKS50aGVuKCgpID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSAtIHJlc29sdmVOb3JtYWxTdHViXSBTdHViIGRlcGxveWVkOiAnLCBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdKTtcbiAgICAgICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgICAgIGxvZy5lcnJvcignW1JlZ2lzdHJ5LnJlc29sdmVOb3JtYWxTdHViXSBFcnJvciByZXNvbHZpbmcgTG9hZCBQcm90b2NvbFN0dWI6ICcsIHJlYXNvbik7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICBsb2cuZXJyb3IoJ1tSZWdpc3RyeS5yZXNvbHZlXSBFcnJvciByZXNvbHZpbmcgaXNsZWdhY3k6ICcsIHJlYXNvbik7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogVG8gdmVyaWZ5IGlmIHNvdXJjZSBpcyB2YWxpZCBhbmQgdG8gcmVzb2x2ZSB0YXJnZXQgcnVudGltZSB1cmwgYWRkcmVzcyBpZiBuZWVkZWQgKGVnIHByb3Rvc3R1YiBydW50aW1lIHVybCBpbiBjYXNlIHRoZSBtZXNzYWdlIGlzIHRvIGJlIGRpc3BhdGNoZWQgdG8gYSByZW1vdGUgZW5kcG9pbnQpLlxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICB1cmwgICAgICAgdXJsXG4gICogQHJldHVybiB7UHJvbWlzZTxVUkwuVVJMPn0gICAgICAgICAgICAgICAgIFByb21pc2UgPFVSTC5VUkw+XG4gICovXG4gIHJlc29sdmUobXNnKSB7XG4gICAgbG9nLmluZm8oJ1tSZWdpc3RyeSAtIFJlc29sdmVdIC0gICcsIG1zZyk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCB1cmwgPSBtc2cudG8gPyBtc2cudG8gOiBtc2c7XG5cbiAgICAgIGxldCBwMnAgPSAobXNnLmJvZHkgJiYgbXNnLmJvZHkucDJwKSA/IG1zZy5ib2R5LnAycCA6IGZhbHNlO1xuXG4gICAgICAvLyBsb2cubG9nKCdQMlA6ICcsIHAycCwgdXJsKTtcbiAgICAgIC8vIGxvZy5sb2coJ1AyUCAtIHAycEhhbmRsZXJTdHViOiAnLCAhX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0sIF90aGlzLnAycEhhbmRsZXJTdHViLCBfdGhpcy5ydW50aW1lVVJMKTtcbiAgICAgIC8vIGxvZy5sb2coJ1AyUCAtIGlzQmFja2VuZFNlcnZpY2VVUkw6ICcsIGlzQmFja2VuZFNlcnZpY2VVUkwodXJsKSwgaXNCYWNrZW5kU2VydmljZVVSTCwgdXJsKTtcbiAgICAgIC8vIGxvZy5sb2coJ1AyUCAtIGluY2x1ZGVzIHJ1bnRpbWVVUkw6ICcsIHVybC5pbmNsdWRlcyhfdGhpcy5ydW50aW1lVVJMKSk7XG4gICAgICAvLyBsb2cubG9nKCdQMlAgLSBpbmNsdWRlcyBwMnBoYW5kbGVyOiAnLCB1cmwuaW5jbHVkZXMoJy9wMnBoYW5kbGVyLycpKTtcbiAgICAgIC8vIGxvZy5sb2coJ1AyUCAtIGluY2x1ZGVzIHAycHJlcXVlc3RlcjogJywgdXJsLmluY2x1ZGVzKCcvcDJwcmVxdWVzdGVyLycpKTtcblxuICAgICAgLy8gU2tpcCBwMnAgcHJvY2VkdXJlIHdoZW4gbm90IHN1cHBvcnRlZCBieSB0aGUgUnVudGltZSBvciBmb3IgYmFja2VuZCBzZXJ2aWNlc1xuXG4gICAgICBpZiAoIV90aGlzLnAycEhhbmRsZXJTdHViW190aGlzLnJ1bnRpbWVVUkxdIHx8IGlzQmFja2VuZFNlcnZpY2VVUkwodXJsKSB8fCB1cmwuaW5jbHVkZXMoX3RoaXMucnVudGltZVVSTCkgfHwgdXJsLmluY2x1ZGVzKCcvcDJwaGFuZGxlci8nKSB8fCB1cmwuaW5jbHVkZXMoJy9wMnByZXF1ZXN0ZXIvJykpIHtcblxuICAgICAgICBsb2cuaW5mbygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gLSBSZXNvbHZlIG5vcm1hbCBzdHViOiAnLCBfdGhpcy5wMnBIYW5kbGVyU3R1YiwgX3RoaXMucnVudGltZVVSTCwgaXNCYWNrZW5kU2VydmljZVVSTCh1cmwpLCBwMnAsIHVybCk7XG4gICAgICAgIF90aGlzLnJlc29sdmVOb3JtYWxTdHViKHVybCkudGhlbigocmV0dXJuVVJMKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXR1cm5VUkwpO1xuICAgICAgICB9KTtcblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICBsb2cuaW5mbygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gLSBjaGVja1AyUDogJywgcDJwLCB1cmwsIF90aGlzLl9wMnBDb25uZWN0aW9uUmVzb2x2ZSk7XG4gICAgICAgIF90aGlzLl9wMnBDb25uZWN0aW9uUmVzb2x2ZS5jaGVja1AyUChtc2cpLnRoZW4oKHJlZ2lzdGVyZWRQMlApID0+IHtcblxuICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeSAtIHJlc29sdmVdIGZvdW5kIHJlZ2lzdGVyZWQgUDJQOiAnLCByZWdpc3RlcmVkUDJQKTtcblxuICAgICAgICAgIGxldCBwMnBDb25uZWN0aW9uID0gX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbcmVnaXN0ZXJlZFAyUC5ydW50aW1lXTtcblxuICAgICAgICAgIGlmICghcDJwQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgcDJwQ29ubmVjdGlvbiA9IHJlZ2lzdGVyZWRQMlA7XG4gICAgICAgICAgICBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdFtyZWdpc3RlcmVkUDJQLnJ1bnRpbWVdID0gcDJwQ29ubmVjdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzd2l0Y2ggKHAycENvbm5lY3Rpb24uc3RhdHVzKSB7XG4gICAgICAgICAgICBjYXNlIFNUQVRVUy5MSVZFOlxuICAgICAgICAgICAgICBtc2cuYm9keS5wZWVyID0gcmVnaXN0ZXJlZFAyUC5ydW50aW1lO1xuICAgICAgICAgICAgICByZXNvbHZlKHAycENvbm5lY3Rpb24udXJsLCBtc2cpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU1RBVFVTLkNSRUFURUQ6IC8vIHAycCBjb25uZWN0aW9uIHNldHVwIGlzIG9uZ29pbmcsIHVzZSBNTiBTdHViXG4gICAgICAgICAgICBjYXNlIFNUQVRVUy5QUk9HUkVTUzpcbiAgICAgICAgICAgICAgX3RoaXMucmVzb2x2ZU5vcm1hbFN0dWIodXJsKS50aGVuKChyZXR1cm5VUkwpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblVSTCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU1RBVFVTLkRJU0NPTk5FQ1RFRDogLy8gcDJwIGNvbm5lY3Rpb24gc3R1YiB3YXMgZGlzY29ubmVjdGVkLCBsZXQncyBhc2sgdG8gY29ubmVjdCBhZ2FpblxuICAgICAgICAgICAgICBsb2cuaW5mbygnW1JlZ2lzdHJ5IC0gUmVzb2x2ZV0gLSBwMnBDb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RlZCBsZXRzIHRyeSB0byByZWNvbm5lY3QnKTtcbiAgICAgICAgICAgICAgX3RoaXMuX3AycENvbm5lY3Rpb25SZXNvbHZlLnJlY29ubmVjdFAyUFJlcXVlc3RlcihwMnBDb25uZWN0aW9uKS50aGVuKChyZXR1cm5VUkwpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBsb2cubG9nKCdbUmVnaXN0cnkgLSBSZXNvbHZlXSAtIHdhcyByZWNvbm5lY3RlZCB3aXRoIHAycFJlcXVlc3RlclN0dWJ0OiAnLCByZXR1cm5VUkwpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVVJMKTtcbiAgICAgICAgICAgICAgfSwgKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgICAgIGxvZy5pbmZvKCdbUmVnaXN0cnkgLSBSZXNvbHZlXSAtIFJlYXNvbjogJywgcmVhc29uKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLnJlc29sdmVOb3JtYWxTdHViKHVybCkudGhlbigocmV0dXJuVVJMKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblVSTCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG5cbiAgICAgICAgICAgICAgbG9nLmluZm8oJ1tSZWdpc3RyeSAtIHJlc29sdmVdIC0gUDJQOiAnLCBwMnApO1xuICAgICAgICAgICAgICBpZiAoIXAycCkgeyAvLyBubyBwMnAgY29ubmVjdGlvbiBleGlzdHMgYW5kIHRoZSBtZXNzYWdlIHNlbmRlciBkb2VzIG5vdCBhc2sgb25lLiBMZXRzIHVzZSB0aGUgTU4gU3R1YlxuICAgICAgICAgICAgICAgIF90aGlzLnJlc29sdmVOb3JtYWxTdHViKHVybCkudGhlbigocmV0dXJuVVJMKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblVSTCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fc2V0dXBQMlBSZXF1ZXN0ZXIocmVnaXN0ZXJlZFAyUCkudGhlbigocmV0dXJuVVJMKSA9PiB7IC8vIG5vIHAycCBjb25uZWN0aW9uIGV4aXN0cyBidXQgdGhlIG1lc3NhZ2Ugc2VuZGVyIGlzIGFza2luZyBvbmUuIExldHMgdHJ5IHRvIHNldHVwIG9uZVxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5VUkwpO1xuICAgICAgICAgICAgICAgIH0sIChyZWFzb24pID0+IHtcbiAgICAgICAgICAgICAgICAgIGxvZy5pbmZvKCdbUmVnaXN0cnkgLSBSZXNvbHZlXSAtIFJlYXNvbjogJywgcmVhc29uKTtcblxuICAgICAgICAgICAgICAgICAgX3RoaXMucmVzb2x2ZU5vcm1hbFN0dWIodXJsKS50aGVuKChyZXR1cm5VUkwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5VUkwpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAocmVhc29uKSA9PiB7XG4gICAgICAgICAgbG9nLmluZm8oJ1tSZWdpc3RyeSAtIFJlc29sdmVdIC0gUmVhc29uOiAnLCByZWFzb24pO1xuXG4gICAgICAgICAgX3RoaXMucmVzb2x2ZU5vcm1hbFN0dWIodXJsKS50aGVuKChyZXR1cm5VUkwpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVVJMKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIF9zZXR1cFAyUFJlcXVlc3RlcihpbnB1dCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsb2cubG9nKCdbUmVnaXN0cnkuX3NldHVwUDJQQ29ubmVjdGlvbl0gbG9hZFN0dWIgd2l0aCBwMnBSZXF1ZXN0ZXI6ICcsIGlucHV0KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCByZW1vdGVSdW50aW1lID0gaW5wdXQucnVudGltZTtcblxuICAgICAgbGV0IHAycENvbmZpZyA9IHsgcmVtb3RlUnVudGltZVVSTDogcmVtb3RlUnVudGltZSwgcDJwSGFuZGxlcjogaW5wdXQucDJwSGFuZGxlciwgcDJwUmVxdWVzdGVyU3R1YjogdHJ1ZSB9O1xuXG4gICAgICAvLyBsZXRzIHByZXBhcmUgdGhlIHAycFJlcXVlc3RlclNUdWIgZGVwbG95bWVudCBieSBzZXR0aW5nIGFuIG9ic2VydmVyIHRvIGl0cyBzdGF0dXMgY2hhbmdlc1xuXG4gICAgICBfdGhpcy53YXRjaGluZ1lvdS5vYnNlcnZlKCdwMnBSZXF1ZXN0ZXJTdHViJywgKGNoYW5nZSkgPT4ge1xuXG4gICAgICAgIGxvZy5sb2coJ1tSZWdpc3RyeS5fc2V0dXBQMlBDb25uZWN0aW9uXSBwMnBSZXF1ZXN0ZXJTdHVicyBjaGFuZ2VkICcgKyBfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViKTtcblxuICAgICAgICBpZiAoY2hhbmdlLmtleXBhdGguc3BsaXQoJy4nKVswXSA9PT0gcmVtb3RlUnVudGltZSAmJiBjaGFuZ2UubmFtZSA9PT0gJ3N0YXR1cycgJiYgY2hhbmdlLm5ld1ZhbHVlID09PSBTVEFUVVMuTElWRSkge1xuICAgICAgICAgIGxvZy5sb2coJ1tSZWdpc3RyeS5fc2V0dXBQMlBDb25uZWN0aW9uXSBwMnBSZXF1ZXN0ZXIgaXMgbGl2ZSAnICsgX3RoaXMucDJwUmVxdWVzdGVyU3R1YltyZW1vdGVSdW50aW1lXSk7XG4gICAgICAgICAgcmVzb2x2ZShfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViW3JlbW90ZVJ1bnRpbWVdLnVybCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyAgc3R1YiBsb2FkXG4gICAgICBfdGhpcy5sb2FkZXIubG9hZFN0dWIoaW5wdXQucDJwUmVxdWVzdGVyLCBwMnBDb25maWcpLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgIGxvZy5sb2coJ1tSZWdpc3RyeS5fc2V0dXBQMlBDb25uZWN0aW9uXSBwMnBSZXF1ZXN0ZXIgZGVwbG95ZWQ6ICcsIF90aGlzLnAycFJlcXVlc3RlclN0dWJbcmVtb3RlUnVudGltZV0pO1xuXG5cbiAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyB2ZXJpZnkgaWYgdXJsIGlzIGZvciBhIGxlZ2FjeSBzZXJ2aWNlLlxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICB1cmwgICAgICB1cmxcbiAgKiBAcmV0dXJuIHtib29sZWFufVxuICAqL1xuICBpc0xlZ2FjeSh1cmwpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBpZiAodXJsID09PSBfdGhpcy5fZG9tYWluKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgbG9nLmxvZygnW1JlZ2lzdHJ5XSBbUmVnaXN0cnkuUmVnaXN0cnkuaXNMZWdhY3ldICcsIHVybCk7XG5cbiAgICAgIC8vIFRPRE86IHRvIGJlIGRlZmluZWQgaW4gdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvblxuICAgICAgbGV0IG5vbkxlZ2FjeSA9IFsnaHlwZXJ0eS1ydW50aW1lJywgJ2RvbWFpbicsICdnbG9iYWwnLCAnaHlwZXJ0eSddO1xuXG4gICAgICBsZXQgdXJsRGl2aWRlZCA9IGRpdmlkZVVSTCh1cmwpO1xuXG4gICAgICBpZiAobm9uTGVnYWN5LmluZGV4T2YodXJsRGl2aWRlZC50eXBlKSAhPT0gLTEgfHwgdXJsRGl2aWRlZC5kb21haW4gPT09IF90aGlzLl9kb21haW4pIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBwcm9jZXNzIFVzZXIgVVJMc1xuICAgICAgaWYgKHVybC5zcGxpdCgnQCcpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbGV0IGRvbWFpbiA9IHVybERpdmlkZWQuZG9tYWluO1xuXG4gICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeV0gW1JlZ2lzdHJ5LlJlZ2lzdHJ5LmlzTGVnYWN5XSBkb21haW46ICcsIGRvbWFpbik7XG4gICAgICAgIGlmIChfdGhpcy5pZHBMZWdhY3lQcm94eUxpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluKSkge1xuXG4gICAgICAgICAgbGV0IHJlc3VsdCA9IF90aGlzLmlkcExlZ2FjeVByb3h5TGlzdFtkb21haW5dO1xuXG4gICAgICAgICAgaWYgKHJlc3VsdC5pbnRlcndvcmtpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlc3VsdC5pbnRlcndvcmtpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuX2xvYWRlci5kZXNjcmlwdG9ycy5nZXRJZHBQcm94eURlc2NyaXB0b3IoZG9tYWluKS50aGVuKChyZXN1bHQpID0+IHtcblxuICAgICAgICAgIC8vIGxvZy5sb2coJ1tSZWdpc3RyeV0gW1JlZ2lzdHJ5LlJlZ2lzdHJ5LmlzTGVnYWN5XSBMZWdhY3kgc3R1YiBkZXNjcmlwdG9yOiAnLCByZXN1bHQpO1xuXG4gICAgICAgICAgaWYgKHJlc3VsdC5pbnRlcndvcmtpbmcpIHtcbiAgICAgICAgICAgIF90aGlzLmlkcExlZ2FjeVByb3h5TGlzdFtkb21haW5dID0gcmVzdWx0O1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuaW50ZXJ3b3JraW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICBsb2cud2FybigncHJvYmxlbSBsb2FkaW5nIGlkcCBwcm94eSBkZXNjcmlwdG9yIGZvciBkb21haW46JywgZG9tYWluLCAnIGJlY2F1c2UgJywgcmVhc29uKTtcbiAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgeyAvLyBwcm9jZXNzIHByb3Rvc3R1YiBVUkxzXG4gICAgICAgIHJlc29sdmUoX3RoaXMuaXNJbnRlcndvcmtpbmdQcm90b1N0dWIodXJsKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyB2ZXJpZnkgaWYgVVJMIGlzIGxvY2FsbHkgcmVnaXN0ZXJlZCBvciBub3QuXG4gICogQHBhcmFtICB7VVJMLlVSTH0gIHVybCAgICAgIHVybFxuICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICovXG5cbiAgaXNMb2NhbCh1cmwpIHtcblxuICAgIGxldCBydW50aW1lU2NoZW1lID0gWydoeXBlcnR5LXJ1bnRpbWUnLCAncnVudGltZSddO1xuICAgIGxldCBoeXBlcnR5U2NoZW1lID0gWydoeXBlcnR5J107XG4gICAgbGV0IHVybFNjaGVtZSA9IHVybC5zcGxpdCgnOi8vJylbMF07XG5cbiAgICAvLyBQcm9jZXNzIFJ1bnRpbWUgQ29yZSBVUkxzLlxuICAgIC8vIE1lc3NhZ2VzIG9yaWdpbmF0ZWQgZnJvbSBwcm90b3N0dWJzIHNob3VsZCBhbHNvIG5vdCBpbmNsdWRlIHRoZSBydW50aW1lVVJMIGluIGl0cyBVUkwuXG5cbiAgICBpZiAocnVudGltZVNjaGVtZS5pbmRleE9mKHVybFNjaGVtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gdXJsLmluY2x1ZGVzKHRoaXMucnVudGltZVVSTCk7XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBIeXBlcnR5IFVSTHNcbiAgICAvLyBUb2RvOiBoeXBlcnRpZXNMaXN0IHNob3VsZCBiZSBhbiBvYmplY3Qgbm90IGFuIGFycmF5XG5cbiAgICBpZiAoaHlwZXJ0eVNjaGVtZS5pbmRleE9mKHVybFNjaGVtZSkgIT09IC0xKSB7XG5cbiAgICAgIGZvciAobGV0IGluZGV4IGluIHRoaXMuaHlwZXJ0aWVzTGlzdCkge1xuICAgICAgICBsZXQgaHlwZXJ0eSA9IHRoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07XG4gICAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlVUkwgPT09IHVybCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIERhdGEgT2JqZWN0IFVSTHNcblxuICAgIGlmICh1cmwuaW5jbHVkZXMoJy9zdWJzY3JpcHRpb24nKSkge1xuICAgICAgdXJsID0gdXJsLnN1YnN0cmluZygwLCB1cmwuaW5kZXhPZignL3N1YnNjcmlwdGlvbicpKTtcbiAgICB9XG5cbiAgICBsZXQgZGF0YU9iamVjdCA9IHRoaXMuZGF0YU9iamVjdExpc3RbdXJsXTtcblxuICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICBpZiAoZGF0YU9iamVjdC5pbnRlcndvcmtpbmcpIHtcbiAgICAgICAgcmV0dXJuICFkYXRhT2JqZWN0LmludGVyd29ya2luZztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAqIFRvIHZlcmlmeSBpZiBwcm90b3N0dWIgaXMgdG8gaW50ZXJ3b3JrIHdpdGggYSBsZWdhY3kgZG9tYWluLlxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICBydW50aW1lUHJvdG9zdHViVVJMICAgICAgVGhlIHJ1bnRpbWUgVVJMIG9mIHRoZSBQcm90b3N0dWJcbiAgKiBAcmV0dXJuIHtib29sZWFufVxuICAqL1xuXG4gIGlzSW50ZXJ3b3JraW5nUHJvdG9TdHViKHJ1bnRpbWVQcm90b3N0dWJVUkwpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIShydW50aW1lUHJvdG9zdHViVVJMLmluY2x1ZGVzKCcvcHJvdG9zdHViLycpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGxldCBmaWx0ZXJlZCA9IE9iamVjdC5rZXlzKF90aGlzLnByb3Rvc3R1YnNMaXN0KS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgcmV0dXJuIF90aGlzLnByb3Rvc3R1YnNMaXN0W2tleV0udXJsID09PSBydW50aW1lUHJvdG9zdHViVVJMO1xuICAgIH0pLm1hcCgoa2V5KSA9PiB7XG5cbiAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdFtrZXldLmhhc093blByb3BlcnR5KCdpbnRlcndvcmtpbmcnKSkge1xuICAgICAgICByZXR1cm4gX3RoaXMucHJvdG9zdHVic0xpc3Rba2V5XS5pbnRlcndvcmtpbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSlbMF07XG5cbiAgICByZXR1cm4gZmlsdGVyZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0cnk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3JlZ2lzdHJ5L1JlZ2lzdHJ5LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7Ozs7O0FBYkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRkE7QUFDQTtBQUNBO0FBY0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7Ozs7QUFHQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQVNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBMkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEE7QUFnQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFGQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVJBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBR0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUpBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUVBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQVRBO0FBQ0E7QUFEQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUEzQ0E7QUE2Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQTVyREE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQXduREE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///435\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(437);\nmodule.exports = __webpack_require__(13).Object.keys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcz84YzU2Il0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Qua2V5cztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gNDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///436\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(76);\nvar $keys = __webpack_require__(67);\n\n__webpack_require__(97)('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcz8wOWRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gNDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///437\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SandboxType = undefined;\n\nvar _keys = __webpack_require__(46);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = __webpack_require__(60);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(68);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(69);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _SandboxRegistry = __webpack_require__(458);\n\nvar _SandboxRegistry2 = _interopRequireDefault(_SandboxRegistry);\n\nvar _MiniBus2 = __webpack_require__(459);\n\nvar _MiniBus3 = _interopRequireDefault(_MiniBus2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\nvar SandboxType = exports.SandboxType = { APP: 'app', NORMAL: 'normal', WINDOW: 'window' };\n\n/**\n * @author micaelpedrosa@gmail.com\n * Base class to implement external sandbox component\n */\n\nvar Sandbox = function (_MiniBus) {\n  (0, _inherits3.default)(Sandbox, _MiniBus);\n\n  function Sandbox(capabilities) {\n    (0, _classCallCheck3.default)(this, Sandbox);\n\n    var _this2 = (0, _possibleConstructorReturn3.default)(this, (Sandbox.__proto__ || (0, _getPrototypeOf2.default)(Sandbox)).call(this));\n\n    var _this = _this2;\n\n    if (capabilities) {\n      _this.capabilities = capabilities;\n    }\n\n    return _this2;\n  }\n\n  /**\n   * Deploy an instance of the component into the sandbox.\n   * @param  {string} componentSourceCode Component source code (Hyperty, ProtoStub, etc)\n   * @param  {URL} componentURL Hyperty, ProtoStub, or any other component address.\n   * @param  {Config} configuration Config parameters of the component\n   * @return {Promise<string>} return deployed if successful, or any other string with an error\n   */\n\n\n  (0, _createClass3.default)(Sandbox, [{\n    key: 'deployComponent',\n    value: function deployComponent(componentSourceCode, componentURL, configuration) {\n\n      var _this = this;\n\n      // let messageFactory = _this.messageFactory;\n\n      return new _promise2.default(function (resolve, reject) {\n        //FLOW-OUT: deploy message for the internal SandboxRegistry -> _onDeploy\n        var deployMessage = {\n          type: 'create', from: _SandboxRegistry2.default.ExternalDeployAddress, to: _SandboxRegistry2.default.InternalDeployAddress,\n          body: { url: componentURL, sourceCode: componentSourceCode, config: configuration }\n        };\n\n        //send message into the sandbox internals and wait for reply\n        _this.postMessage(deployMessage, function (reply) {\n          if (reply.body.code === 200) {\n            //is this response complaint with the spec?\n            resolve('deployed');\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n\n    /**\n     * Remove the instance of a previously deployed component.\n     * @param  {URL} componentURL Hyperty, ProtoStub, or any other component address.\n     * @return {Promise<string>} return undeployed if successful, or any other string with an error\n     */\n\n  }, {\n    key: 'removeComponent',\n    value: function removeComponent(componentURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        //FLOW-OUT: un-deploy message for the internal SandboxRegistry -> _onRemove\n        var removeMessage = {\n          type: 'delete', from: _SandboxRegistry2.default.ExternalDeployAddress, to: _SandboxRegistry2.default.InternalDeployAddress,\n          body: { url: componentURL }\n        };\n\n        //send message into the sandbox internals and wait for reply\n        _this.postMessage(removeMessage, function (reply) {\n          if (reply.body.code === 200) {\n            //is this response complaint with the spec?\n            resolve('undeployed');\n          } else {\n            reject(reply.body.desc);\n          }\n        });\n      });\n    }\n\n    /**\n    * Matches Sandbox capabilities against provided capabilities. Used to check if sandbox provides all required capabilities\n    * @param  {RuntimeCapabilities} constraints set of RuntimeCapabilities to match with.\n    * @return {boolean} return true if constraints are matched false otherwise\n     */\n\n  }, {\n    key: 'matches',\n    value: function matches(constraints) {\n      var _this = this;\n\n      var filtered = (0, _keys2.default)(constraints).filter(function (key) {\n        return !(_this.capabilities[key] && _this.capabilities[key] === constraints[key]);\n      });\n\n      if (filtered.length === 0) {\n        return true;\n      } else {\n        return !constraints[filtered];\n      }\n    }\n  }]);\n  return Sandbox;\n}(_MiniBus3.default);\n\nexports.default = Sandbox;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9zYW5kYm94L1NhbmRib3guanM/MGEzMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5pbXBvcnQgU2FuZGJveFJlZ2lzdHJ5IGZyb20gJy4uL3NhbmRib3gvU2FuZGJveFJlZ2lzdHJ5JztcbmltcG9ydCBNaW5pQnVzIGZyb20gJy4uL2J1cy9NaW5pQnVzJztcblxuZXhwb3J0IGxldCBTYW5kYm94VHlwZSA9IHtBUFA6ICdhcHAnLCBOT1JNQUw6ICdub3JtYWwnLCBXSU5ET1c6ICd3aW5kb3cnfTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXG4gKiBCYXNlIGNsYXNzIHRvIGltcGxlbWVudCBleHRlcm5hbCBzYW5kYm94IGNvbXBvbmVudFxuICovXG5jbGFzcyBTYW5kYm94IGV4dGVuZHMgTWluaUJ1cyB7XG5cbiAgY29uc3RydWN0b3IoY2FwYWJpbGl0aWVzKSB7XG5cbiAgICBzdXBlcigpO1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmIChjYXBhYmlsaXRpZXMpICAgICAgeyBfdGhpcy5jYXBhYmlsaXRpZXMgPSBjYXBhYmlsaXRpZXM7IH1cblxuICB9XG5cbiAgLyoqXG4gICAqIERlcGxveSBhbiBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50IGludG8gdGhlIHNhbmRib3guXG4gICAqIEBwYXJhbSAge3N0cmluZ30gY29tcG9uZW50U291cmNlQ29kZSBDb21wb25lbnQgc291cmNlIGNvZGUgKEh5cGVydHksIFByb3RvU3R1YiwgZXRjKVxuICAgKiBAcGFyYW0gIHtVUkx9IGNvbXBvbmVudFVSTCBIeXBlcnR5LCBQcm90b1N0dWIsIG9yIGFueSBvdGhlciBjb21wb25lbnQgYWRkcmVzcy5cbiAgICogQHBhcmFtICB7Q29uZmlnfSBjb25maWd1cmF0aW9uIENvbmZpZyBwYXJhbWV0ZXJzIG9mIHRoZSBjb21wb25lbnRcbiAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSByZXR1cm4gZGVwbG95ZWQgaWYgc3VjY2Vzc2Z1bCwgb3IgYW55IG90aGVyIHN0cmluZyB3aXRoIGFuIGVycm9yXG4gICAqL1xuICBkZXBsb3lDb21wb25lbnQoY29tcG9uZW50U291cmNlQ29kZSwgY29tcG9uZW50VVJMLCBjb25maWd1cmF0aW9uKSB7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gbGV0IG1lc3NhZ2VGYWN0b3J5ID0gX3RoaXMubWVzc2FnZUZhY3Rvcnk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy9GTE9XLU9VVDogZGVwbG95IG1lc3NhZ2UgZm9yIHRoZSBpbnRlcm5hbCBTYW5kYm94UmVnaXN0cnkgLT4gX29uRGVwbG95XG4gICAgICBsZXQgZGVwbG95TWVzc2FnZSA9IHtcbiAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IFNhbmRib3hSZWdpc3RyeS5FeHRlcm5hbERlcGxveUFkZHJlc3MsIHRvOiBTYW5kYm94UmVnaXN0cnkuSW50ZXJuYWxEZXBsb3lBZGRyZXNzLFxuICAgICAgICBib2R5OiB7IHVybDogY29tcG9uZW50VVJMLCBzb3VyY2VDb2RlOiBjb21wb25lbnRTb3VyY2VDb2RlLCBjb25maWc6IGNvbmZpZ3VyYXRpb24gfVxuICAgICAgfTtcblxuICAgICAgLy9zZW5kIG1lc3NhZ2UgaW50byB0aGUgc2FuZGJveCBpbnRlcm5hbHMgYW5kIHdhaXQgZm9yIHJlcGx5XG4gICAgICBfdGhpcy5wb3N0TWVzc2FnZShkZXBsb3lNZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgLy9pcyB0aGlzIHJlc3BvbnNlIGNvbXBsYWludCB3aXRoIHRoZSBzcGVjP1xuICAgICAgICAgIHJlc29sdmUoJ2RlcGxveWVkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgaW5zdGFuY2Ugb2YgYSBwcmV2aW91c2x5IGRlcGxveWVkIGNvbXBvbmVudC5cbiAgICogQHBhcmFtICB7VVJMfSBjb21wb25lbnRVUkwgSHlwZXJ0eSwgUHJvdG9TdHViLCBvciBhbnkgb3RoZXIgY29tcG9uZW50IGFkZHJlc3MuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gcmV0dXJuIHVuZGVwbG95ZWQgaWYgc3VjY2Vzc2Z1bCwgb3IgYW55IG90aGVyIHN0cmluZyB3aXRoIGFuIGVycm9yXG4gICAqL1xuICByZW1vdmVDb21wb25lbnQoY29tcG9uZW50VVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvL0ZMT1ctT1VUOiB1bi1kZXBsb3kgbWVzc2FnZSBmb3IgdGhlIGludGVybmFsIFNhbmRib3hSZWdpc3RyeSAtPiBfb25SZW1vdmVcbiAgICAgIGxldCByZW1vdmVNZXNzYWdlID0ge1xuICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogU2FuZGJveFJlZ2lzdHJ5LkV4dGVybmFsRGVwbG95QWRkcmVzcywgdG86IFNhbmRib3hSZWdpc3RyeS5JbnRlcm5hbERlcGxveUFkZHJlc3MsXG4gICAgICAgIGJvZHk6IHsgdXJsOiBjb21wb25lbnRVUkwgfVxuICAgICAgfTtcblxuICAgICAgLy9zZW5kIG1lc3NhZ2UgaW50byB0aGUgc2FuZGJveCBpbnRlcm5hbHMgYW5kIHdhaXQgZm9yIHJlcGx5XG4gICAgICBfdGhpcy5wb3N0TWVzc2FnZShyZW1vdmVNZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgLy9pcyB0aGlzIHJlc3BvbnNlIGNvbXBsYWludCB3aXRoIHRoZSBzcGVjP1xuICAgICAgICAgIHJlc29sdmUoJ3VuZGVwbG95ZWQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBNYXRjaGVzIFNhbmRib3ggY2FwYWJpbGl0aWVzIGFnYWluc3QgcHJvdmlkZWQgY2FwYWJpbGl0aWVzLiBVc2VkIHRvIGNoZWNrIGlmIHNhbmRib3ggcHJvdmlkZXMgYWxsIHJlcXVpcmVkIGNhcGFiaWxpdGllc1xuICAqIEBwYXJhbSAge1J1bnRpbWVDYXBhYmlsaXRpZXN9IGNvbnN0cmFpbnRzIHNldCBvZiBSdW50aW1lQ2FwYWJpbGl0aWVzIHRvIG1hdGNoIHdpdGguXG4gICogQHJldHVybiB7Ym9vbGVhbn0gcmV0dXJuIHRydWUgaWYgY29uc3RyYWludHMgYXJlIG1hdGNoZWQgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuXG4gIG1hdGNoZXMoY29uc3RyYWludHMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGZpbHRlcmVkID0gT2JqZWN0LmtleXMoY29uc3RyYWludHMpLmZpbHRlcigoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gIShfdGhpcy5jYXBhYmlsaXRpZXNba2V5XSAmJiBfdGhpcy5jYXBhYmlsaXRpZXNba2V5XSA9PT0gY29uc3RyYWludHNba2V5XSk7XG4gICAgfSk7XG5cbiAgICBpZiAoZmlsdGVyZWQubGVuZ3RoID09PSAwKSAgICAgIHsgcmV0dXJuIHRydWU7IH0gICAgZWxzZSAgICAgIHsgcmV0dXJuICEoY29uc3RyYWludHNbZmlsdGVyZWRdKTsgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2FuZGJveDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvc2FuZGJveC9TYW5kYm94LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQXhCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7OztBQUVBO0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFQQTtBQVFBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7Ozs7O0FBSUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///438\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(440);\nmodule.exports = __webpack_require__(13).Object.getPrototypeOf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZi5qcz83ZDJlIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDQzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///439\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = __webpack_require__(76);\nvar $getPrototypeOf = __webpack_require__(186);\n\n__webpack_require__(97)('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcz8yYTFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gNDQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///440\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(442), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanM/NjczOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qc1xuLy8gbW9kdWxlIGlkID0gNDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///441\n');
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(126);\n__webpack_require__(187);\nmodule.exports = __webpack_require__(139).f('iterator');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanM/ZmU3ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQ0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///442\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(444), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wuanM/ZTUwNSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL3N5bWJvbC5qc1xuLy8gbW9kdWxlIGlkID0gNDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///443\n');
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(445);\n__webpack_require__(179);\n__webpack_require__(450);\n__webpack_require__(451);\nmodule.exports = __webpack_require__(13).Symbol;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanM/MDcwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQ0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///444\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n// ECMAScript 6 symbols shim\nvar global = __webpack_require__(21);\nvar has = __webpack_require__(59);\nvar DESCRIPTORS = __webpack_require__(44);\nvar $export = __webpack_require__(26);\nvar redefine = __webpack_require__(182);\nvar META = __webpack_require__(446).KEY;\nvar $fails = __webpack_require__(66);\nvar shared = __webpack_require__(134);\nvar setToStringTag = __webpack_require__(95);\nvar uid = __webpack_require__(94);\nvar wks = __webpack_require__(22);\nvar wksExt = __webpack_require__(139);\nvar wksDefine = __webpack_require__(140);\nvar enumKeys = __webpack_require__(447);\nvar isArray = __webpack_require__(448);\nvar anObject = __webpack_require__(39);\nvar toIObject = __webpack_require__(45);\nvar toPrimitive = __webpack_require__(130);\nvar createDesc = __webpack_require__(73);\nvar _create = __webpack_require__(131);\nvar gOPNExt = __webpack_require__(449);\nvar $GOPD = __webpack_require__(141);\nvar $DP = __webpack_require__(38);\nvar $keys = __webpack_require__(67);\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  __webpack_require__(198).f = gOPNExt.f = $getOwnPropertyNames;\n  __webpack_require__(77).f = $propertyIsEnumerable;\n  __webpack_require__(137).f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !__webpack_require__(92)) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    replacer = args[1];\n    if (typeof replacer == 'function') $replacer = replacer;\n    if ($replacer || !isArray(replacer)) replacer = function (key, value) {\n      if ($replacer) value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(58)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanM/N2Q2NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciBfY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XG52YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUEQgPSAkR09QRC5mO1xudmFyIGRQID0gJERQLmY7XG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciAkSlNPTiA9IGdsb2JhbC5KU09OO1xudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgSElEREVOID0gd2tzKCdfaGlkZGVuJyk7XG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKTtcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7IHZhbHVlOiA3IH0pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYgKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pIGRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24gKHRhZykge1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCkge1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcbiAgICBpZiAoIUQuZW51bWVyYWJsZSkge1xuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCkge1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XG4gIHZhciBpID0gMDtcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGwgPiBpKSAkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKSB7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KSB7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICBpdCA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XG4gIHZhciBuYW1lcyA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcbiAgICBpZiAodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG8pICRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xuXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xuXG5mb3IgKHZhciB3ZWxsS25vd25TeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgayA9IDA7IHdlbGxLbm93blN5bWJvbHMubGVuZ3RoID4gazspIHdrc0RlZmluZSh3ZWxsS25vd25TeW1ib2xzW2srK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICAgIGZvciAodmFyIGtleSBpbiBTeW1ib2xSZWdpc3RyeSkgaWYgKFN5bWJvbFJlZ2lzdHJ5W2tleV0gPT09IHN5bSkgcmV0dXJuIGtleTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHsgYTogUyB9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcbiAgICBpZiAoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmICgkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoJHJlcGxhY2VyKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3ltYm9sLmpzXG4vLyBtb2R1bGUgaWQgPSA0NDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///445\n");
    }, function(module, exports, __webpack_require__) {
        eval("var META = __webpack_require__(94)('meta');\nvar isObject = __webpack_require__(43);\nvar has = __webpack_require__(59);\nvar setDesc = __webpack_require__(38).f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !__webpack_require__(66)(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19tZXRhLmpzP2QzYTMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIE1FVEEgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgc2V0RGVzYyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgaWQgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBzZXREZXNjKGl0LCBNRVRBLCB7IHZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiBNRVRBLFxuICBORUVEOiBmYWxzZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2VhazogZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanNcbi8vIG1vZHVsZSBpZCA9IDQ0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///446\n");
    }, function(module, exports, __webpack_require__) {
        eval("// all enumerable object keys, includes symbols\nvar getKeys = __webpack_require__(67);\nvar gOPS = __webpack_require__(137);\nvar pIE = __webpack_require__(77);\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19lbnVtLWtleXMuanM/NWRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmIChnZXRTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcbiAgICB2YXIgaXNFbnVtID0gcElFLmY7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKHN5bWJvbHMubGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKSByZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qc1xuLy8gbW9kdWxlIGlkID0gNDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///447\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(75);\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pcy1hcnJheS5qcz9lZDQzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLWFycmF5LmpzXG4vLyBtb2R1bGUgaWQgPSA0NDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///448\n");
    }, function(module, exports, __webpack_require__) {
        eval("// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = __webpack_require__(45);\nvar gOPN = __webpack_require__(198).f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanM/NDZiNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkge1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi1leHQuanNcbi8vIG1vZHVsZSBpZCA9IDQ0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///449\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(140)('asyncIterator');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanM/Mzk4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQ1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///450\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(140)('observable');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZS5qcz80MTY3Il0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzXG4vLyBtb2R1bGUgaWQgPSA0NTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///451\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(453), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcz85MjIwIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qc1xuLy8gbW9kdWxlIGlkID0gNDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///452\n');
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(454);\nmodule.exports = __webpack_require__(13).Object.setPrototypeOf;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcz84YmYwIl0sInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDQ1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///453\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = __webpack_require__(26);\n$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(455).set });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcz83YjE4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanNcbi8vIG1vZHVsZSBpZCA9IDQ1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///454\n");
    }, function(module, exports, __webpack_require__) {
        eval("// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = __webpack_require__(43);\nvar anObject = __webpack_require__(39);\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = __webpack_require__(65)(Function.call, __webpack_require__(141).f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtcHJvdG8uanM/NjVhNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzXG4vLyBtb2R1bGUgaWQgPSA0NTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///455\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(457);\nvar $Object = __webpack_require__(13).Object;\nmodule.exports = function create(P, D) {\n  return $Object.create(P, D);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlLmpzP2EwY2UiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCkge1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDQ1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///456\n");
    }, function(module, exports, __webpack_require__) {
        eval("var $export = __webpack_require__(26);\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: __webpack_require__(131) });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlLmpzP2IwNWYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDQ1N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///457\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n/**\n * @author micaelpedrosa@gmail.com\n * Base class to implement internal deploy manager of components.\n */\n\n/**\n * @author micaelpedrosa@gmail.com\n * Internal component registry of all sandboxes.\n * Process internal request's for component deploy.\n */\nvar SandboxRegistry = function () {\n  /* private\n  _components: <url: instance>\n  */\n\n  function SandboxRegistry(bus) {\n    (0, _classCallCheck3.default)(this, SandboxRegistry);\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._components = {};\n\n    bus.addListener(SandboxRegistry.InternalDeployAddress, function (msg) {\n      //console.log('SandboxRegistry-RCV: ', msg);\n      // let responseMsg = {\n      //   id: msg.id, type: 'response', from: SandboxRegistry.InternalDeployAddress, to: SandboxRegistry.ExternalDeployAddress\n      // };\n\n      switch (msg.type) {\n        case 'create':\n          _this._onDeploy(msg);break;\n        case 'delete':\n          _this._onRemove(msg);break;\n      }\n    });\n  }\n\n  (0, _createClass3.default)(SandboxRegistry, [{\n    key: '_responseMsg',\n    value: function _responseMsg(msg, code, value) {\n\n      var _this = this;\n\n      // let messageFactory = _this.messageFactory;\n\n      //FLOW-OUT: generic response message to external Sandbox (deploy and un-deploy responses)\n      var responseMsg = {\n        id: msg.id, type: 'response', from: SandboxRegistry.InternalDeployAddress, to: SandboxRegistry.ExternalDeployAddress\n      };\n\n      // Chanege the origin message, because the response;\n      // msg.from = SandboxRegistry.InternalDeployAddress;\n      // msg.to = SandboxRegistry.ExternalDeployAddress;\n\n      var body = {};\n      if (code) body.code = code;\n      if (value) body.desc = value;\n\n      responseMsg.body = body;\n\n      // return messageFactory.createResponse(msg, code, value);\n      return responseMsg;\n    }\n\n    //FLOW-IN: message from the runtime core Sandbox -> deployComponent\n\n  }, {\n    key: '_onDeploy',\n    value: function _onDeploy(msg) {\n      var _this = this;\n      var config = msg.body.config;\n      var componentURL = msg.body.url;\n      var sourceCode = msg.body.sourceCode;\n      var responseCode = void 0;\n      var responseDesc = void 0;\n\n      if (!_this._components.hasOwnProperty(componentURL)) {\n        try {\n          _this._components[componentURL] = _this._create(componentURL, sourceCode, config);\n          responseCode = 200;\n        } catch (error) {\n          responseCode = 500;\n          responseDesc = error;\n        }\n      } else {\n        responseCode = 500;\n        responseDesc = 'Instance ' + componentURL + ' already exist!';\n      }\n\n      var responseMsg = _this._responseMsg(msg, responseCode, responseDesc);\n      _this._bus.postMessage(responseMsg);\n    }\n\n    //FLOW-IN: message from the runtime core Sandbox -> removeComponent\n\n  }, {\n    key: '_onRemove',\n    value: function _onRemove(msg) {\n      var _this = this;\n      var componentURL = msg.body.url;\n      var responseCode = void 0;\n      var responseDesc = void 0;\n\n      if (_this._components.hasOwnProperty(componentURL)) {\n        //remove component from the pool and all listeners\n        delete _this._components[componentURL];\n        _this._bus.removeAllListenersOf(componentURL);\n        responseCode = 200;\n      } else {\n        responseCode = 500;\n        responseDesc = 'Instance ' + componentURL + ' doesn\\'t exist!';\n      }\n\n      var responseMsg = _this._responseMsg(msg, responseCode, responseDesc);\n\n      _this._bus.postMessage(responseMsg);\n    }\n\n    /**\n     * This method should be implemented by the internal sandbox code.\n     * @param  {ComponentURL} url URL used for the instance\n     * @param  {string} sourceCode Code of the component\n     * @param  {Config} config Configuration parameters\n     * @return {Object} Returns instance of the component or throw an error \"throw 'error message'\"\n     */\n\n  }, {\n    key: '_create',\n    value: function _create(url, sourceCode, config) {\n      //implementation specific\n      /* example code:\n        eval(sourceCode);\n        return activate(url, _this._bus, config);\n      */\n    }\n  }, {\n    key: 'components',\n    get: function get() {\n      return this._components;\n    }\n  }]);\n  return SandboxRegistry;\n}();\n\nSandboxRegistry.ExternalDeployAddress = 'hyperty-runtime://sandbox/external';\nSandboxRegistry.InternalDeployAddress = 'hyperty-runtime://sandbox/internal';\n\nexports.default = SandboxRegistry;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9zYW5kYm94L1NhbmRib3hSZWdpc3RyeS5qcz9lZTFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cbi8qKlxuICogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxuICogQmFzZSBjbGFzcyB0byBpbXBsZW1lbnQgaW50ZXJuYWwgZGVwbG95IG1hbmFnZXIgb2YgY29tcG9uZW50cy5cbiAqL1xuXG4vKipcbiAqIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb21cbiAqIEludGVybmFsIGNvbXBvbmVudCByZWdpc3RyeSBvZiBhbGwgc2FuZGJveGVzLlxuICogUHJvY2VzcyBpbnRlcm5hbCByZXF1ZXN0J3MgZm9yIGNvbXBvbmVudCBkZXBsb3kuXG4gKi9cbmNsYXNzIFNhbmRib3hSZWdpc3RyeSB7XG4gIC8qIHByaXZhdGVcbiAgX2NvbXBvbmVudHM6IDx1cmw6IGluc3RhbmNlPlxuICAqL1xuXG4gIGNvbnN0cnVjdG9yKGJ1cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fYnVzID0gYnVzO1xuICAgIF90aGlzLl9jb21wb25lbnRzID0ge307XG5cbiAgICBidXMuYWRkTGlzdGVuZXIoU2FuZGJveFJlZ2lzdHJ5LkludGVybmFsRGVwbG95QWRkcmVzcywgKG1zZykgPT4ge1xuICAgICAgLy9jb25zb2xlLmxvZygnU2FuZGJveFJlZ2lzdHJ5LVJDVjogJywgbXNnKTtcbiAgICAgIC8vIGxldCByZXNwb25zZU1zZyA9IHtcbiAgICAgIC8vICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogU2FuZGJveFJlZ2lzdHJ5LkludGVybmFsRGVwbG95QWRkcmVzcywgdG86IFNhbmRib3hSZWdpc3RyeS5FeHRlcm5hbERlcGxveUFkZHJlc3NcbiAgICAgIC8vIH07XG5cbiAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnY3JlYXRlJzogX3RoaXMuX29uRGVwbG95KG1zZyk7IGJyZWFrO1xuICAgICAgICBjYXNlICdkZWxldGUnOiBfdGhpcy5fb25SZW1vdmUobXNnKTsgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXQgY29tcG9uZW50cygpIHsgcmV0dXJuIHRoaXMuX2NvbXBvbmVudHM7IH1cblxuICBfcmVzcG9uc2VNc2cobXNnLCBjb2RlLCB2YWx1ZSkge1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIC8vIGxldCBtZXNzYWdlRmFjdG9yeSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5O1xuXG4gICAgLy9GTE9XLU9VVDogZ2VuZXJpYyByZXNwb25zZSBtZXNzYWdlIHRvIGV4dGVybmFsIFNhbmRib3ggKGRlcGxveSBhbmQgdW4tZGVwbG95IHJlc3BvbnNlcylcbiAgICBsZXQgcmVzcG9uc2VNc2cgPSB7XG4gICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBTYW5kYm94UmVnaXN0cnkuSW50ZXJuYWxEZXBsb3lBZGRyZXNzLCB0bzogU2FuZGJveFJlZ2lzdHJ5LkV4dGVybmFsRGVwbG95QWRkcmVzc1xuICAgIH07XG5cbiAgICAvLyBDaGFuZWdlIHRoZSBvcmlnaW4gbWVzc2FnZSwgYmVjYXVzZSB0aGUgcmVzcG9uc2U7XG4gICAgLy8gbXNnLmZyb20gPSBTYW5kYm94UmVnaXN0cnkuSW50ZXJuYWxEZXBsb3lBZGRyZXNzO1xuICAgIC8vIG1zZy50byA9IFNhbmRib3hSZWdpc3RyeS5FeHRlcm5hbERlcGxveUFkZHJlc3M7XG5cbiAgICBsZXQgYm9keSA9IHt9O1xuICAgIGlmIChjb2RlKSBib2R5LmNvZGUgPSBjb2RlO1xuICAgIGlmICh2YWx1ZSkgYm9keS5kZXNjID0gdmFsdWU7XG5cbiAgICByZXNwb25zZU1zZy5ib2R5ID0gYm9keTtcblxuICAgIC8vIHJldHVybiBtZXNzYWdlRmFjdG9yeS5jcmVhdGVSZXNwb25zZShtc2csIGNvZGUsIHZhbHVlKTtcbiAgICByZXR1cm4gcmVzcG9uc2VNc2c7XG4gIH1cblxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgZnJvbSB0aGUgcnVudGltZSBjb3JlIFNhbmRib3ggLT4gZGVwbG95Q29tcG9uZW50XG4gIF9vbkRlcGxveShtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBjb25maWcgPSBtc2cuYm9keS5jb25maWc7XG4gICAgbGV0IGNvbXBvbmVudFVSTCA9IG1zZy5ib2R5LnVybDtcbiAgICBsZXQgc291cmNlQ29kZSA9IG1zZy5ib2R5LnNvdXJjZUNvZGU7XG4gICAgbGV0IHJlc3BvbnNlQ29kZTtcbiAgICBsZXQgcmVzcG9uc2VEZXNjO1xuXG4gICAgaWYgKCFfdGhpcy5fY29tcG9uZW50cy5oYXNPd25Qcm9wZXJ0eShjb21wb25lbnRVUkwpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBfdGhpcy5fY29tcG9uZW50c1tjb21wb25lbnRVUkxdID0gX3RoaXMuX2NyZWF0ZShjb21wb25lbnRVUkwsIHNvdXJjZUNvZGUsIGNvbmZpZyk7XG4gICAgICAgIHJlc3BvbnNlQ29kZSA9IDIwMDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJlc3BvbnNlQ29kZSA9IDUwMDtcbiAgICAgICAgcmVzcG9uc2VEZXNjID0gZXJyb3I7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlQ29kZSA9IDUwMDtcbiAgICAgIHJlc3BvbnNlRGVzYyA9ICdJbnN0YW5jZSAnICsgY29tcG9uZW50VVJMICsgJyBhbHJlYWR5IGV4aXN0ISc7XG4gICAgfVxuXG4gICAgbGV0IHJlc3BvbnNlTXNnID0gX3RoaXMuX3Jlc3BvbnNlTXNnKG1zZywgcmVzcG9uc2VDb2RlLCByZXNwb25zZURlc2MpO1xuICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVzcG9uc2VNc2cpO1xuICB9XG5cbiAgLy9GTE9XLUlOOiBtZXNzYWdlIGZyb20gdGhlIHJ1bnRpbWUgY29yZSBTYW5kYm94IC0+IHJlbW92ZUNvbXBvbmVudFxuICBfb25SZW1vdmUobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgY29tcG9uZW50VVJMID0gbXNnLmJvZHkudXJsO1xuICAgIGxldCByZXNwb25zZUNvZGU7XG4gICAgbGV0IHJlc3BvbnNlRGVzYztcblxuICAgIGlmIChfdGhpcy5fY29tcG9uZW50cy5oYXNPd25Qcm9wZXJ0eShjb21wb25lbnRVUkwpKSB7XG4gICAgICAvL3JlbW92ZSBjb21wb25lbnQgZnJvbSB0aGUgcG9vbCBhbmQgYWxsIGxpc3RlbmVyc1xuICAgICAgZGVsZXRlIF90aGlzLl9jb21wb25lbnRzW2NvbXBvbmVudFVSTF07XG4gICAgICBfdGhpcy5fYnVzLnJlbW92ZUFsbExpc3RlbmVyc09mKGNvbXBvbmVudFVSTCk7XG4gICAgICByZXNwb25zZUNvZGUgPSAyMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlQ29kZSA9IDUwMDtcbiAgICAgIHJlc3BvbnNlRGVzYyA9ICdJbnN0YW5jZSAnICsgY29tcG9uZW50VVJMICsgJyBkb2VzblxcJ3QgZXhpc3QhJztcbiAgICB9XG5cbiAgICBsZXQgcmVzcG9uc2VNc2cgPSBfdGhpcy5fcmVzcG9uc2VNc2cobXNnLCByZXNwb25zZUNvZGUsIHJlc3BvbnNlRGVzYyk7XG5cbiAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlc3BvbnNlTXNnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgaW1wbGVtZW50ZWQgYnkgdGhlIGludGVybmFsIHNhbmRib3ggY29kZS5cbiAgICogQHBhcmFtICB7Q29tcG9uZW50VVJMfSB1cmwgVVJMIHVzZWQgZm9yIHRoZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHNvdXJjZUNvZGUgQ29kZSBvZiB0aGUgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge0NvbmZpZ30gY29uZmlnIENvbmZpZ3VyYXRpb24gcGFyYW1ldGVyc1xuICAgKiBAcmV0dXJuIHtPYmplY3R9IFJldHVybnMgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudCBvciB0aHJvdyBhbiBlcnJvciBcInRocm93ICdlcnJvciBtZXNzYWdlJ1wiXG4gICAqL1xuICBfY3JlYXRlKHVybCwgc291cmNlQ29kZSwgY29uZmlnKSB7XG4gICAgLy9pbXBsZW1lbnRhdGlvbiBzcGVjaWZpY1xuICAgIC8qIGV4YW1wbGUgY29kZTpcbiAgICAgIGV2YWwoc291cmNlQ29kZSk7XG4gICAgICByZXR1cm4gYWN0aXZhdGUodXJsLCBfdGhpcy5fYnVzLCBjb25maWcpO1xuICAgICovXG4gIH1cbn1cblxuU2FuZGJveFJlZ2lzdHJ5LkV4dGVybmFsRGVwbG95QWRkcmVzcyA9ICdoeXBlcnR5LXJ1bnRpbWU6Ly9zYW5kYm94L2V4dGVybmFsJztcblNhbmRib3hSZWdpc3RyeS5JbnRlcm5hbERlcGxveUFkZHJlc3MgPSAnaHlwZXJ0eS1ydW50aW1lOi8vc2FuZGJveC9pbnRlcm5hbCc7XG5cbmV4cG9ydCBkZWZhdWx0IFNhbmRib3hSZWdpc3RyeTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvc2FuZGJveC9TYW5kYm94UmVnaXN0cnkuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCQTs7Ozs7QUFLQTs7Ozs7QUFLQTtBQUNBOzs7O0FBSUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFGQTtBQUlBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBOzs7O0FBSUE7OztBQXhGQTtBQUFBO0FBQUE7Ozs7O0FBMkZBO0FBQ0E7QUFDQTtBQUNBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///458\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(60);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(68);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(69);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _Bus2 = __webpack_require__(200);\n\nvar _Bus3 = _interopRequireDefault(_Bus2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* @author micaelpedrosa@gmail.com\n* Message BUS Interface is an extension of the Bus\n* It is used mainly in the internal sandbox routing.\n*/\nvar MiniBus = function (_Bus) {\n  (0, _inherits3.default)(MiniBus, _Bus);\n\n  function MiniBus() {\n    (0, _classCallCheck3.default)(this, MiniBus);\n    return (0, _possibleConstructorReturn3.default)(this, (MiniBus.__proto__ || (0, _getPrototypeOf2.default)(MiniBus)).call(this));\n  }\n\n  /**\n   * Post a message for routing. Message is routed directly to the external routing _onPostMessage.\n   * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\n   * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\n   * @return {number}                  the Message id\n   */\n\n\n  (0, _createClass3.default)(MiniBus, [{\n    key: 'postMessage',\n    value: function postMessage(inMsg, responseCallback) {\n      var _this = this;\n\n      _this._genId(inMsg);\n      _this._responseCallback(inMsg, responseCallback);\n\n      //always send to external (to core MessageBus)\n      _this._onPostMessage(inMsg);\n\n      return inMsg.id;\n    }\n\n    //internal method used when a message is received by an external routing system\n\n  }, {\n    key: '_onMessage',\n    value: function _onMessage(msg) {\n      var _this = this;\n\n      if (!_this._onResponse(msg)) {\n        var itemList = _this._subscriptions[msg.to];\n        if (itemList) {\n          _this._publishOn(itemList, msg);\n          if (!msg.to.startsWith('hyperty')) {\n            _this._publishOnDefault(msg);\n          }\n        } else {\n          _this._publishOnDefault(msg);\n        }\n      }\n    }\n  }]);\n  return MiniBus;\n}(_Bus3.default); /**\n                  * Copyright 2016 PT Inovação e Sistemas SA\n                  * Copyright 2016 INESC-ID\n                  * Copyright 2016 QUOBIS NETWORKS SL\n                  * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                  * Copyright 2016 ORANGE SA\n                  * Copyright 2016 Deutsche Telekom AG\n                  * Copyright 2016 Apizee\n                  * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                  *\n                  * Licensed under the Apache License, Version 2.0 (the \"License\");\n                  * you may not use this file except in compliance with the License.\n                  * You may obtain a copy of the License at\n                  *\n                  *   http://www.apache.org/licenses/LICENSE-2.0\n                  *\n                  * Unless required by applicable law or agreed to in writing, software\n                  * distributed under the License is distributed on an \"AS IS\" BASIS,\n                  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                  * See the License for the specific language governing permissions and\n                  * limitations under the License.\n                  **/\n\n\nexports.default = MiniBus;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9idXMvTWluaUJ1cy5qcz9lNTIwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cbmltcG9ydCBCdXMgZnJvbSAnLi9CdXMnO1xuXG4vKipcbiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxuKiBNZXNzYWdlIEJVUyBJbnRlcmZhY2UgaXMgYW4gZXh0ZW5zaW9uIG9mIHRoZSBCdXNcbiogSXQgaXMgdXNlZCBtYWlubHkgaW4gdGhlIGludGVybmFsIHNhbmRib3ggcm91dGluZy5cbiovXG5jbGFzcyBNaW5pQnVzIGV4dGVuZHMgQnVzIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvc3QgYSBtZXNzYWdlIGZvciByb3V0aW5nLiBNZXNzYWdlIGlzIHJvdXRlZCBkaXJlY3RseSB0byB0aGUgZXh0ZXJuYWwgcm91dGluZyBfb25Qb3N0TWVzc2FnZS5cbiAgICogQHBhcmFtICB7TWVzc2FnZX0gaW5Nc2cgICAgICAgICAgICBKU09OIHdpdGggbWFuZGF0b3J5IE1lc3NhZ2Ugc3RydWN0dXJlIHtpZCwgdHlwZSwgZnJvbSwgdG99XG4gICAqIEBwYXJhbSAge0NhbGxiYWNrfSByZXNwb25zZUNhbGxiYWNrIE9wdGlvbmFsIGNhbGxiYWNrIGlmIGEgcmVzcG9uc2UgaXMgZXhwZWN0ZWQgZnJvbSB0aGUgcmVxdWVzdC4gQSByZXNwb25zZSB3aWxsIGJlIGFsd2F5cyBzZW50LCBldmVuIGlmIGl0IGlzIGEgXCJUaW1lb3V0XCIuXG4gICAqIEByZXR1cm4ge251bWJlcn0gICAgICAgICAgICAgICAgICB0aGUgTWVzc2FnZSBpZFxuICAgKi9cbiAgcG9zdE1lc3NhZ2UoaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX2dlbklkKGluTXNnKTtcbiAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFjayhpbk1zZywgcmVzcG9uc2VDYWxsYmFjayk7XG5cbiAgICAvL2Fsd2F5cyBzZW5kIHRvIGV4dGVybmFsICh0byBjb3JlIE1lc3NhZ2VCdXMpXG4gICAgX3RoaXMuX29uUG9zdE1lc3NhZ2UoaW5Nc2cpO1xuXG4gICAgcmV0dXJuIGluTXNnLmlkO1xuICB9XG5cbiAgLy9pbnRlcm5hbCBtZXRob2QgdXNlZCB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZCBieSBhbiBleHRlcm5hbCByb3V0aW5nIHN5c3RlbVxuICBfb25NZXNzYWdlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHtcbiAgICAgIGxldCBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW21zZy50b107XG4gICAgICBpZiAoaXRlbUxpc3QpIHtcbiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcbiAgICAgICAgaWYgKCFtc2cudG8uc3RhcnRzV2l0aCgnaHlwZXJ0eScpKSB7XG4gICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbkRlZmF1bHQobXNnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbkRlZmF1bHQobXNnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBNaW5pQnVzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9idXMvTWluaUJ1cy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7QUFDQTs7Ozs7QUFDQTs7Ozs7QUFLQTs7O0FBRUE7QUFBQTtBQUFBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFwRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdFQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///459\n");
    }, function(module, exports, __webpack_require__) {
        eval("var core = __webpack_require__(13);\nvar $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });\nmodule.exports = function stringify(it) { // eslint-disable-line no-unused-vars\n  return $JSON.stringify.apply($JSON, arguments);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeS5qcz9hYTQyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBjb3JlID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpO1xudmFyICRKU09OID0gY29yZS5KU09OIHx8IChjb3JlLkpTT04gPSB7IHN0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnkgfSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHJldHVybiAkSlNPTi5zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3VtZW50cyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5LmpzXG4vLyBtb2R1bGUgaWQgPSA0NjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///460\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(60);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(68);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(69);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _RegistryDataModel2 = __webpack_require__(462);\n\nvar _RegistryDataModel3 = _interopRequireDefault(_RegistryDataModel2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)\n*   HypertyInstance Data Model used to model instances of Hyperties running in devices and servers.\n*/\nvar HypertyInstance = function (_RegistryDataModel) {\n  (0, _inherits3.default)(HypertyInstance, _RegistryDataModel);\n\n  function HypertyInstance(id, url, descriptorURL, descriptor, hypertyURL, user, guid, runtime, context, p2pHandler, p2pRequester, dataSchemes, resources, startingTime, lastModified) {\n    (0, _classCallCheck3.default)(this, HypertyInstance);\n\n    var _this2 = (0, _possibleConstructorReturn3.default)(this, (HypertyInstance.__proto__ || (0, _getPrototypeOf2.default)(HypertyInstance)).call(this, id, url, descriptorURL, p2pRequester, startingTime, lastModified));\n\n    var _this = _this2;\n    _this._descriptor = descriptor;\n    _this._hypertyURL = hypertyURL;\n    _this._user = user;\n    _this._guid = guid;\n    _this._runtime = runtime;\n    _this._context = context;\n    _this._p2pHandler = p2pHandler;\n    _this._dataSchemes = dataSchemes;\n    _this._resources = resources;\n    return _this2;\n  }\n\n  (0, _createClass3.default)(HypertyInstance, [{\n    key: 'user',\n    set: function set(identity) {\n      var _this = this;\n      _this.user = identity;\n    },\n    get: function get() {\n      var _this = this;\n      return _this._user;\n    }\n  }, {\n    key: 'hypertyURL',\n    get: function get() {\n      var _this = this;\n      return _this._hypertyURL;\n    }\n  }, {\n    key: 'descriptor',\n    get: function get() {\n      var _this = this;\n      return _this._descriptor;\n    }\n  }, {\n    key: 'objectName',\n    get: function get() {\n      var _this = this;\n      return _this._descriptor._objectName;\n    }\n  }, {\n    key: 'p2pHandler',\n    get: function get() {\n      var _this = this;\n      return _this._p2pHandler;\n    }\n  }, {\n    key: 'dataSchemes',\n    get: function get() {\n      var _this = this;\n      return _this._dataSchemes;\n    }\n  }, {\n    key: 'resources',\n    get: function get() {\n      var _this = this;\n      return _this._resources;\n    }\n  }, {\n    key: 'runtimeURL',\n    get: function get() {\n      var _this = this;\n      return _this._runtime;\n    }\n  }]);\n  return HypertyInstance;\n}(_RegistryDataModel3.default); /**\n                                * Copyright 2016 PT Inovação e Sistemas SA\n                                * Copyright 2016 INESC-ID\n                                * Copyright 2016 QUOBIS NETWORKS SL\n                                * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                                * Copyright 2016 ORANGE SA\n                                * Copyright 2016 Deutsche Telekom AG\n                                * Copyright 2016 Apizee\n                                * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                                *\n                                * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                * you may not use this file except in compliance with the License.\n                                * You may obtain a copy of the License at\n                                *\n                                *   http://www.apache.org/licenses/LICENSE-2.0\n                                *\n                                * Unless required by applicable law or agreed to in writing, software\n                                * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                * See the License for the specific language governing permissions and\n                                * limitations under the License.\n                                **/\n\n\nexports.default = HypertyInstance;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9yZWdpc3RyeS9IeXBlcnR5SW5zdGFuY2UuanM/Zjg1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5pbXBvcnQgUmVnaXN0cnlEYXRhTW9kZWwgZnJvbSAnLi9SZWdpc3RyeURhdGFNb2RlbCc7XG5cbi8qKlxuKiAgIEBhdXRob3I6IEdpbCBEaWFzIChnaWwuZGlhc0B0ZWNuaWNvLnVsaXNib2EucHQpXG4qICAgSHlwZXJ0eUluc3RhbmNlIERhdGEgTW9kZWwgdXNlZCB0byBtb2RlbCBpbnN0YW5jZXMgb2YgSHlwZXJ0aWVzIHJ1bm5pbmcgaW4gZGV2aWNlcyBhbmQgc2VydmVycy5cbiovXG5jbGFzcyBIeXBlcnR5SW5zdGFuY2UgZXh0ZW5kcyBSZWdpc3RyeURhdGFNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IoaWQsIHVybCwgZGVzY3JpcHRvclVSTCwgZGVzY3JpcHRvciwgaHlwZXJ0eVVSTCwgdXNlciwgZ3VpZCwgcnVudGltZSwgY29udGV4dCwgcDJwSGFuZGxlciwgcDJwUmVxdWVzdGVyLCBkYXRhU2NoZW1lcywgcmVzb3VyY2VzLCBzdGFydGluZ1RpbWUsIGxhc3RNb2RpZmllZCkge1xuICAgIHN1cGVyKGlkLCB1cmwsIGRlc2NyaXB0b3JVUkwsIHAycFJlcXVlc3Rlciwgc3RhcnRpbmdUaW1lLCBsYXN0TW9kaWZpZWQpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX2Rlc2NyaXB0b3IgPSBkZXNjcmlwdG9yO1xuICAgIF90aGlzLl9oeXBlcnR5VVJMID0gaHlwZXJ0eVVSTDtcbiAgICBfdGhpcy5fdXNlciA9IHVzZXI7XG4gICAgX3RoaXMuX2d1aWQgPSBndWlkO1xuICAgIF90aGlzLl9ydW50aW1lID0gcnVudGltZTtcbiAgICBfdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgX3RoaXMuX3AycEhhbmRsZXIgPSBwMnBIYW5kbGVyO1xuICAgIF90aGlzLl9kYXRhU2NoZW1lcyA9IGRhdGFTY2hlbWVzO1xuICAgIF90aGlzLl9yZXNvdXJjZXMgPSByZXNvdXJjZXM7XG4gIH1cblxuICBzZXQgdXNlcihpZGVudGl0eSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMudXNlciA9IGlkZW50aXR5O1xuICB9XG5cbiAgZ2V0IHVzZXIoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX3VzZXI7XG4gIH1cblxuICBnZXQgaHlwZXJ0eVVSTCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5faHlwZXJ0eVVSTDtcbiAgfVxuXG4gIGdldCBkZXNjcmlwdG9yKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yO1xuICB9XG5cbiAgZ2V0IG9iamVjdE5hbWUoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX2Rlc2NyaXB0b3IuX29iamVjdE5hbWU7XG4gIH1cblxuICBnZXQgcDJwSGFuZGxlcigpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fcDJwSGFuZGxlcjtcbiAgfVxuXG4gIGdldCBkYXRhU2NoZW1lcygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fZGF0YVNjaGVtZXM7XG4gIH1cblxuICBnZXQgcmVzb3VyY2VzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9yZXNvdXJjZXM7XG4gIH1cblxuICBnZXQgcnVudGltZVVSTCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fcnVudGltZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBIeXBlcnR5SW5zdGFuY2U7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3JlZ2lzdHJ5L0h5cGVydHlJbnN0YW5jZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7QUFDQTs7Ozs7QUFDQTs7OztBQUlBOzs7QUFFQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFYQTtBQVlBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUF2RkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBGQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///461\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the "License");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an "AS IS" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n/**\n*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)\n*   Registry Data Model includes all Objects to be handled by the Registry functionality including\n*/\nvar RegistryDataModel = function () {\n  function RegistryDataModel(id, url, descriptorURL, p2pRequester, startingTime, lastModified, status, stubs, stubsConfiguration) {\n    (0, _classCallCheck3.default)(this, RegistryDataModel);\n\n    var _this = this;\n\n    _this._id = id;\n    _this._url = url;\n    _this._descriptorURL = descriptorURL;\n    _this._startingTime = startingTime;\n    _this._lastModified = lastModified;\n    _this._status = status;\n    _this._stubs = stubs;\n    _this._stubsConfiguration = stubsConfiguration;\n    _this._p2pRequester = p2pRequester;\n  }\n\n  (0, _createClass3.default)(RegistryDataModel, [{\n    key: "id",\n    get: function get() {\n      var _this = this;\n      return _this._id;\n    }\n  }, {\n    key: "url",\n    get: function get() {\n      var _this = this;\n      return _this._url;\n    }\n  }, {\n    key: "descriptor",\n    get: function get() {\n      var _this = this;\n      return _this._descriptorURL;\n    }\n  }, {\n    key: "p2pRequester",\n    get: function get() {\n      var _this = this;\n      return _this._p2pRequester;\n    }\n  }, {\n    key: "lastModified",\n    get: function get() {\n      var _this = this;\n      return _this._lastModified;\n    }\n  }]);\n  return RegistryDataModel;\n}();\n\nexports.default = RegistryDataModel;\nmodule.exports = exports["default"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9yZWdpc3RyeS9SZWdpc3RyeURhdGFNb2RlbC5qcz83YTJmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cbi8qKlxuKiAgIEBhdXRob3I6IEdpbCBEaWFzIChnaWwuZGlhc0B0ZWNuaWNvLnVsaXNib2EucHQpXG4qICAgUmVnaXN0cnkgRGF0YSBNb2RlbCBpbmNsdWRlcyBhbGwgT2JqZWN0cyB0byBiZSBoYW5kbGVkIGJ5IHRoZSBSZWdpc3RyeSBmdW5jdGlvbmFsaXR5IGluY2x1ZGluZ1xuKi9cbmNsYXNzIFJlZ2lzdHJ5RGF0YU1vZGVsIHtcblxuICBjb25zdHJ1Y3RvcihpZCwgdXJsLCBkZXNjcmlwdG9yVVJMLCBwMnBSZXF1ZXN0ZXIsIHN0YXJ0aW5nVGltZSwgbGFzdE1vZGlmaWVkLCBzdGF0dXMsIHN0dWJzLCBzdHVic0NvbmZpZ3VyYXRpb24pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX2lkID0gaWQ7XG4gICAgX3RoaXMuX3VybCA9IHVybDtcbiAgICBfdGhpcy5fZGVzY3JpcHRvclVSTCA9IGRlc2NyaXB0b3JVUkw7XG4gICAgX3RoaXMuX3N0YXJ0aW5nVGltZSA9IHN0YXJ0aW5nVGltZTtcbiAgICBfdGhpcy5fbGFzdE1vZGlmaWVkID0gbGFzdE1vZGlmaWVkO1xuICAgIF90aGlzLl9zdGF0dXMgPSBzdGF0dXM7XG4gICAgX3RoaXMuX3N0dWJzID0gc3R1YnM7XG4gICAgX3RoaXMuX3N0dWJzQ29uZmlndXJhdGlvbiA9IHN0dWJzQ29uZmlndXJhdGlvbjtcbiAgICBfdGhpcy5fcDJwUmVxdWVzdGVyID0gcDJwUmVxdWVzdGVyO1xuICB9XG5cbiAgZ2V0IGlkKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9pZDtcbiAgfVxuXG4gIGdldCB1cmwoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX3VybDtcbiAgfVxuXG4gIGdldCBkZXNjcmlwdG9yKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yVVJMO1xuICB9XG5cbiAgZ2V0IHAycFJlcXVlc3RlcigpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fcDJwUmVxdWVzdGVyO1xuICB9XG5cbiAgZ2V0IGxhc3RNb2RpZmllZCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fbGFzdE1vZGlmaWVkO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0cnlEYXRhTW9kZWw7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3JlZ2lzdHJ5L1JlZ2lzdHJ5RGF0YU1vZGVsLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7Ozs7QUFJQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///462\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('P2PConnectionResolve');\n\n/**\n*   To process address resolution for p2p connections\n*/\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n// Log System\n\nvar P2PConnectionResolve = function () {\n  function P2PConnectionResolve(registry) {\n    (0, _classCallCheck3.default)(this, P2PConnectionResolve);\n\n    var _this = this;\n    _this._registry = registry;\n    _this._remoteP2PEntities = {}; // All remote entities and associated runtime url that are reachable with existing p2p connections\n  }\n\n  /**\n  * Verifies if remote Entity can be reached with a P2P Connection.\n  * @param  {URL.URL}        info           object URL\n  * @return {HypertyDataObjectInstance}  addressURL     return the Data Object instance registered URL, return undefined otherwise\n  */\n\n  (0, _createClass3.default)(P2PConnectionResolve, [{\n    key: 'checkP2P',\n    value: function checkP2P(msg) {\n\n      if (!msg.hasOwnProperty('to')) {\n        // throw Error('The p2p verification was failed');\n        return _promise2.default.reject('The p2p verification was failed');\n      }\n\n      var scheme = msg.to.split('://')[0];\n\n      var comp = msg.to.split('://')[1].split('/')[2];\n\n      var url = void 0;\n\n      if (comp) url = msg.to.substring(0, msg.to.indexOf('/' + comp));else url = msg.to;\n\n      var p2p = {};\n\n      if (msg.body.p2p) p2p.p2p = msg.body.p2p;\n\n      if (msg.body.p2pHandler && msg.body.p2pRequester) {\n        p2p.p2pHandler = msg.body.p2pHandler;\n        p2p.p2pRequester = msg.body.p2pRequester;\n        p2p.runtime = msg.body.p2pHandler.split('/p2phandler/')[0];\n      }\n\n      switch (scheme) {\n        case 'runtime':\n          return this.checkP2PRuntime(url, p2p);\n          break;\n        default:\n          return this.checkP2PEntity(url, p2p);\n          break;\n\n      }\n    }\n\n    /**\n    * Verifies if remote Entity (Hyperty or Data Object) can be reached with a P2P Connection.\n    * @param  {string}        url           Remote Entity URL to be checked\n    * @param  {object}        p2p           p2p information to be used including ´runtime´ with remote Runtime URL, 'p2pHandler' remote P2P Handler Stub URL and p2pRequester with Catalogue URL of P2P Requester to be used\n    * @return {promise} registeredEntity     if p2p connection is possible it returns p2p information to be used in the connection, otherwise the promise is rejected\n    */\n\n  }, {\n    key: 'checkP2PEntity',\n    value: function checkP2PEntity(url, p2p) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var remoteEntity = _this._remoteP2PEntities[url];\n\n        if (remoteEntity) resolve(remoteEntity);else if (p2p.runtime) resolve(p2p); // use provided p2p if available in the message body\n        else if (p2p.p2p) {\n            // otherwise look on Domain Registry\n\n            log.log('[Registry - checkP2PEntity] - search in Domain Registry: ', url);\n\n            var message = {\n              type: 'read',\n              from: _this._registry.registryURL,\n              to: 'domain://registry.' + _this._registry._domain,\n              body: {\n                resource: url\n              }\n            };\n\n            _this._registry._messageBus.postMessage(message, function (reply) {\n              log.log('[Registry - checkP2PEntity] Domain Registry reply', reply);\n              if ('value' in reply.body) {\n\n                //todo: store retrieved entity\n                var resolvedEntity = reply.body.value;\n\n                if (resolvedEntity.hasOwnProperty('p2pHandler')) {\n                  resolve(resolvedEntity);\n                } else {\n                  reject('[Registry checkP2PEntity] Hyperty found does not support P2P', reply.body.value);\n                }\n              } else {\n                reject('[Registry checkP2PEntity] Hyperty with P2PHandler not found', reply.body.code);\n              }\n            });\n          } else reject('[Registry checkP2PEntity] No P2P Connection available for ', url);\n      });\n    }\n\n    /**\n    * Verifies if remote Runtime can be reached with a P2P Connection.\n    * @param  {URL.URL}        runtimeURL           Runtime URL\n    * @return {Object}  p2pConnection    return the P2PConnection instance registered URL, return undefined otherwise\n    */\n\n  }, {\n    key: 'checkP2PRuntime',\n    value: function checkP2PRuntime(runtimeURL, p2p) {\n      var _this = this;\n\n      var registeredRuntime = {};\n\n      // look on locally stored p2p connections\n      return new _promise2.default(function (resolve, reject) {\n        if (_this._registry.p2pConnectionList[runtimeURL]) {\n          resolve({ runtime: runtimeURL });\n        } else if (p2p.runtime) {\n          registeredRuntime = p2p;\n          resolve(registeredRuntime);\n        } else reject('[Registry.P2PConnectionResolve.checkP2PRuntime] No P2P Connection found to ', runtimeURL);\n      });\n    }\n\n    /**\n    * Verifies if remote Hyperty can be reached with a P2P Connection.\n    * @param  {JSON}        info           object or entity charateristics info\n    * @return {addressURL}  addressURL     return the URL if there is any previousy registered URL, return undefined otherwise\n    */\n\n  }, {\n    key: 'checkP2PHyperty',\n    value: function checkP2PHyperty(hypertyURL, p2p) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var hyperty = void 0;\n\n        // look on locally stored hyperties\n\n        for (var i in _this._registry.remoteHypertyList) {\n          hyperty = _this._registry.remoteHypertyList[i];\n\n          log.log('[Registry - checkP2PHyperty] - for each Hyperty: ', hyperty);\n\n          // todo: change to \"hyperty.url\" to be aligned with hyperty instance data model spec\n\n          if (hyperty.hypertyID === hypertyURL) {\n\n            if (hyperty.hasOwnProperty('p2pHandler')) {\n              resolve(hyperty);\n            } else {\n              reject('[Registry checkP2PHyperty] Hyperty found does not support P2P', hyperty);\n            }\n            return;\n          }\n        }\n\n        if (!hyperty && p2p.runtime) resolve(p2p); // use provided p2p if available in the message body\n        else if (!hyperty && p2p.p2p) {\n            // otherwise look on Domain Registry\n\n            log.log('[Registry - checkP2PHyperty] - search in Domain Registry: ', hyperty);\n\n            var message = {\n              type: 'read',\n              from: _this._registry.registryURL,\n              to: 'domain://registry.' + _this._registry._domain,\n              body: {\n                resource: hypertyURL\n              }\n            };\n\n            _this._registry._messageBus.postMessage(message, function (reply) {\n              log.log('[Registry - checkP2PHyperty] Domain Registry reply', reply);\n              if ('value' in reply.body) {\n\n                //todo: store retrieved hyperty\n                var resolvedHyperty = reply.body.value;\n\n                _this._registry.remoteHypertyList.push(resolvedHyperty);\n\n                if (resolvedHyperty.hasOwnProperty('p2pHandler')) {\n                  resolve(resolvedHyperty);\n                } else {\n                  reject('[Registry checkP2PHyperty] Hyperty found does not support P2P', reply.body.value);\n                }\n              } else {\n                reject('[Registry checkP2PHyperty] Hyperty with P2PHandler not found', reply.body.code);\n              }\n            });\n          } else reject('[Registry checkP2PHyperty] No P2P Connection available for ', hypertyURL);\n      });\n    }\n\n    /**\n    * Verifies if remote Data Object can be reached with a P2P Connection.\n    * @param  {URL.URL}        DataObjectURL           object URL\n    * @return {HypertyDataObjectInstance}  addressURL     return the Data Object instance registered URL, return undefined otherwise\n    */\n\n  }, {\n    key: 'checkP2PDataObject',\n    value: function checkP2PDataObject(url, p2p) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        // look on locally stored Remote Data Objects\n\n        var dataobject = _this._registry.remoteDataObjectList.filter(function (i) {\n          return _this._registry.remoteDataObjectList[i].url === url;\n        });\n\n        if (dataobject.length !== 0 && dataobject[0].p2pRequester) {\n          resolve(dataobject[0]);\n        } else if (dataobject.length !== 0) {\n          reject('[Registry checkP2PDataObject] Data Object found does not support P2P', dataobject[0]);\n        } else if (dataobject.length === 0 && p2p.runtime) resolve(p2p); // use provided p2p info if available in the message body\n        else if (dataobject.length && p2p.p2p) {\n            // otherwise look on Domain Registry\n\n            // look on Domain Registry\n\n            var message = {\n              type: 'read',\n              from: _this._registry.registryURL,\n              to: 'domain://registry.' + _this._registry._domain,\n              body: {\n                resource: url\n              }\n            };\n\n            _this._registry._messageBus.postMessage(message, function (reply) {\n              log.log('discover data object per url reply', reply);\n              if ('value' in reply.body) {\n\n                //todo: store retrieved hyperty\n                var resolvedDataObject = reply.body.value;\n\n                _this._registry.remoteDataObjectList.push(resolvedDataObject);\n\n                if (resolvedDataObject.p2pRequester) {\n                  resolve(resolvedDataObject);\n                } else {\n                  reject('[Registry checkP2PDataObject] Data Object found does not support P2P', reply.body.value);\n                }\n              } else {\n                reject('[Registry checkP2PDataObject] not found', reply.body.code);\n              }\n            });\n          } else reject('[Registry checkP2PDataObject] no P2P Connection found');\n      });\n    }\n  }, {\n    key: 'addRemoteP2PEntity',\n    value: function addRemoteP2PEntity(url, runtime) {\n      this._remoteP2PEntities[url] = runtime;\n    }\n  }, {\n    key: 'removeRemoteP2PEntity',\n    value: function removeRemoteP2PEntity(url) {\n      delete this._remoteP2PEntities[url];\n    }\n  }, {\n    key: 'reconnectP2PRequester',\n    value: function reconnectP2PRequester(p2pRequester) {\n      var _this = this;\n\n      log.log('[P2PConenctionResolve.reconnectP2PRequester] lets try to reconnect P2P Requester Stub: ', p2pRequester);\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var remoteRuntime = p2pRequester.runtime;\n\n        var message = {\n          type: 'execute',\n          from: _this._registry.registryURL,\n          to: p2pRequester.url,\n          body: {\n            method: 'connect',\n            params: [p2pRequester.p2pHandler]\n          }\n        };\n\n        // lets prepare the p2pRequesterSTub reconnect by setting an observer to its status changes\n\n        _this._registry.watchingYou.observe('p2pRequesterStub', function (change) {\n\n          log.log('[P2PConenctionResolve.reconnectP2PRequester] p2pRequesterStubs changed ' + _this._registry.p2pRequesterStub);\n\n          if (change.keypath.split('.')[0] === remoteRuntime && change.name === 'status') {\n            switch (change.newValue) {\n              case 'live':\n                log.log('[P2PConenctionResolve.reconnectP2PRequester] p2pRequester is live ' + _this._registry.p2pRequesterStub[remoteRuntime]);\n                resolve(_this._registry.p2pRequesterStub[remoteRuntime].url);\n                break;\n              case 'failed':\n                log.log('[P2PConenctionResolve.reconnectP2PRequester] p2pRequester reconnect failed ' + _this._registry.p2pRequesterStub[remoteRuntime]);\n                reject('P2P Requester reconnect failed');\n                break;\n              default:\n            }\n          }\n        });\n\n        //  stub load\n        _this._registry._messageBus.postMessage(message, function (reply) {\n          log.log('[P2PConenctionResolve.reconnectP2PRequester] reconnect request reply', reply);\n        });\n      });\n    }\n  }]);\n  return P2PConnectionResolve;\n}();\n\nexports.default = P2PConnectionResolve;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9yZWdpc3RyeS9QMlBDb25uZWN0aW9uUmVzb2x2ZS5qcz9iNTVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuLy8gTG9nIFN5c3RlbVxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJ2xvZ2xldmVsJztcbmxldCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdQMlBDb25uZWN0aW9uUmVzb2x2ZScpO1xuXG4vKipcbiogICBUbyBwcm9jZXNzIGFkZHJlc3MgcmVzb2x1dGlvbiBmb3IgcDJwIGNvbm5lY3Rpb25zXG4qL1xuY2xhc3MgUDJQQ29ubmVjdGlvblJlc29sdmUgIHtcblxuICBjb25zdHJ1Y3RvcihyZWdpc3RyeSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gICAgX3RoaXMuX3JlbW90ZVAyUEVudGl0aWVzID0ge307IC8vIEFsbCByZW1vdGUgZW50aXRpZXMgYW5kIGFzc29jaWF0ZWQgcnVudGltZSB1cmwgdGhhdCBhcmUgcmVhY2hhYmxlIHdpdGggZXhpc3RpbmcgcDJwIGNvbm5lY3Rpb25zXG5cbiAgfVxuXG5cbiAgLyoqXG4gICogVmVyaWZpZXMgaWYgcmVtb3RlIEVudGl0eSBjYW4gYmUgcmVhY2hlZCB3aXRoIGEgUDJQIENvbm5lY3Rpb24uXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgICAgIGluZm8gICAgICAgICAgIG9iamVjdCBVUkxcbiAgKiBAcmV0dXJuIHtIeXBlcnR5RGF0YU9iamVjdEluc3RhbmNlfSAgYWRkcmVzc1VSTCAgICAgcmV0dXJuIHRoZSBEYXRhIE9iamVjdCBpbnN0YW5jZSByZWdpc3RlcmVkIFVSTCwgcmV0dXJuIHVuZGVmaW5lZCBvdGhlcndpc2VcbiAgKi9cblxuICBjaGVja1AyUChtc2cpIHtcblxuICAgIGlmICghbXNnLmhhc093blByb3BlcnR5KCd0bycpKSB7XG4gICAgICAvLyB0aHJvdyBFcnJvcignVGhlIHAycCB2ZXJpZmljYXRpb24gd2FzIGZhaWxlZCcpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdUaGUgcDJwIHZlcmlmaWNhdGlvbiB3YXMgZmFpbGVkJyk7XG4gICAgfVxuXG4gICAgbGV0IHNjaGVtZSA9IG1zZy50by5zcGxpdCgnOi8vJylbMF07XG5cbiAgICBsZXQgY29tcCA9IG1zZy50by5zcGxpdCgnOi8vJylbMV0uc3BsaXQoJy8nKVsyXTtcblxuICAgIGxldCB1cmw7XG5cbiAgICBpZiAoY29tcCkgdXJsID0gbXNnLnRvLnN1YnN0cmluZygwLCBtc2cudG8uaW5kZXhPZignLycgKyBjb21wKSlcbiAgICBlbHNlIHVybCA9IG1zZy50bztcblxuICAgIGxldCBwMnAgPSB7fTtcblxuICAgIGlmIChtc2cuYm9keS5wMnApIHAycC5wMnAgPSBtc2cuYm9keS5wMnA7XG5cbiAgICBpZiAobXNnLmJvZHkucDJwSGFuZGxlciAmJiBtc2cuYm9keS5wMnBSZXF1ZXN0ZXIpIHtcbiAgICAgIHAycC5wMnBIYW5kbGVyID0gbXNnLmJvZHkucDJwSGFuZGxlcjtcbiAgICAgIHAycC5wMnBSZXF1ZXN0ZXIgPSBtc2cuYm9keS5wMnBSZXF1ZXN0ZXI7XG4gICAgICBwMnAucnVudGltZSA9IG1zZy5ib2R5LnAycEhhbmRsZXIuc3BsaXQoJy9wMnBoYW5kbGVyLycpWzBdO1xuICAgIH1cblxuICAgIHN3aXRjaCAoc2NoZW1lKSB7XG4gICAgICBjYXNlICdydW50aW1lJzpcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tQMlBSdW50aW1lKHVybCwgcDJwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdGhpcy5jaGVja1AyUEVudGl0eSh1cmwsIHAycCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVmVyaWZpZXMgaWYgcmVtb3RlIEVudGl0eSAoSHlwZXJ0eSBvciBEYXRhIE9iamVjdCkgY2FuIGJlIHJlYWNoZWQgd2l0aCBhIFAyUCBDb25uZWN0aW9uLlxuICAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgIHVybCAgICAgICAgICAgUmVtb3RlIEVudGl0eSBVUkwgdG8gYmUgY2hlY2tlZFxuICAqIEBwYXJhbSAge29iamVjdH0gICAgICAgIHAycCAgICAgICAgICAgcDJwIGluZm9ybWF0aW9uIHRvIGJlIHVzZWQgaW5jbHVkaW5nIMK0cnVudGltZcK0IHdpdGggcmVtb3RlIFJ1bnRpbWUgVVJMLCAncDJwSGFuZGxlcicgcmVtb3RlIFAyUCBIYW5kbGVyIFN0dWIgVVJMIGFuZCBwMnBSZXF1ZXN0ZXIgd2l0aCBDYXRhbG9ndWUgVVJMIG9mIFAyUCBSZXF1ZXN0ZXIgdG8gYmUgdXNlZFxuICAqIEByZXR1cm4ge3Byb21pc2V9IHJlZ2lzdGVyZWRFbnRpdHkgICAgIGlmIHAycCBjb25uZWN0aW9uIGlzIHBvc3NpYmxlIGl0IHJldHVybnMgcDJwIGluZm9ybWF0aW9uIHRvIGJlIHVzZWQgaW4gdGhlIGNvbm5lY3Rpb24sIG90aGVyd2lzZSB0aGUgcHJvbWlzZSBpcyByZWplY3RlZFxuICAqL1xuXG4gIGNoZWNrUDJQRW50aXR5KHVybCwgcDJwKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgcmVtb3RlRW50aXR5ID0gX3RoaXMuX3JlbW90ZVAyUEVudGl0aWVzW3VybF07XG5cbiAgICAgIGlmIChyZW1vdGVFbnRpdHkpIHJlc29sdmUocmVtb3RlRW50aXR5KTtcbiAgICAgIGVsc2UgaWYgKHAycC5ydW50aW1lKSByZXNvbHZlKHAycCk7IC8vIHVzZSBwcm92aWRlZCBwMnAgaWYgYXZhaWxhYmxlIGluIHRoZSBtZXNzYWdlIGJvZHlcbiAgICAgIGVsc2UgaWYgKHAycC5wMnApIHsgLy8gb3RoZXJ3aXNlIGxvb2sgb24gRG9tYWluIFJlZ2lzdHJ5XG5cbiAgICAgICAgbG9nLmxvZygnW1JlZ2lzdHJ5IC0gY2hlY2tQMlBFbnRpdHldIC0gc2VhcmNoIGluIERvbWFpbiBSZWdpc3RyeTogJywgdXJsKTtcblxuICAgICAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgICAgICB0eXBlOiAncmVhZCcsXG4gICAgICAgICAgZnJvbTogX3RoaXMuX3JlZ2lzdHJ5LnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9yZWdpc3RyeS5fZG9tYWluLFxuICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIHJlc291cmNlOiB1cmxcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMuX3JlZ2lzdHJ5Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgICAgIGxvZy5sb2coJ1tSZWdpc3RyeSAtIGNoZWNrUDJQRW50aXR5XSBEb21haW4gUmVnaXN0cnkgcmVwbHknLCByZXBseSk7XG4gICAgICAgICAgaWYgKCd2YWx1ZScgaW4gcmVwbHkuYm9keSkge1xuXG4gICAgICAgICAgICAvL3RvZG86IHN0b3JlIHJldHJpZXZlZCBlbnRpdHlcbiAgICAgICAgICAgIGxldCByZXNvbHZlZEVudGl0eSA9IHJlcGx5LmJvZHkudmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChyZXNvbHZlZEVudGl0eS5oYXNPd25Qcm9wZXJ0eSgncDJwSGFuZGxlcicpKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUocmVzb2x2ZWRFbnRpdHkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVqZWN0KCdbUmVnaXN0cnkgY2hlY2tQMlBFbnRpdHldIEh5cGVydHkgZm91bmQgZG9lcyBub3Qgc3VwcG9ydCBQMlAnLCByZXBseS5ib2R5LnZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ1tSZWdpc3RyeSBjaGVja1AyUEVudGl0eV0gSHlwZXJ0eSB3aXRoIFAyUEhhbmRsZXIgbm90IGZvdW5kJywgcmVwbHkuYm9keS5jb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHJlamVjdCgnW1JlZ2lzdHJ5IGNoZWNrUDJQRW50aXR5XSBObyBQMlAgQ29ubmVjdGlvbiBhdmFpbGFibGUgZm9yICcsIHVybCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBWZXJpZmllcyBpZiByZW1vdGUgUnVudGltZSBjYW4gYmUgcmVhY2hlZCB3aXRoIGEgUDJQIENvbm5lY3Rpb24uXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgICAgIHJ1bnRpbWVVUkwgICAgICAgICAgIFJ1bnRpbWUgVVJMXG4gICogQHJldHVybiB7T2JqZWN0fSAgcDJwQ29ubmVjdGlvbiAgICByZXR1cm4gdGhlIFAyUENvbm5lY3Rpb24gaW5zdGFuY2UgcmVnaXN0ZXJlZCBVUkwsIHJldHVybiB1bmRlZmluZWQgb3RoZXJ3aXNlXG4gICovXG5cbiAgY2hlY2tQMlBSdW50aW1lKHJ1bnRpbWVVUkwsIHAycCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgcmVnaXN0ZXJlZFJ1bnRpbWUgPSB7fTtcblxuICAgIC8vIGxvb2sgb24gbG9jYWxseSBzdG9yZWQgcDJwIGNvbm5lY3Rpb25zXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChfdGhpcy5fcmVnaXN0cnkucDJwQ29ubmVjdGlvbkxpc3RbcnVudGltZVVSTF0pIHtcbiAgICAgICAgcmVzb2x2ZSh7cnVudGltZTogcnVudGltZVVSTH0pO1xuICAgICAgfSBlbHNlIGlmICggcDJwLnJ1bnRpbWUpIHtcbiAgICAgICAgcmVnaXN0ZXJlZFJ1bnRpbWUgPSBwMnA7XG4gICAgICAgIHJlc29sdmUocmVnaXN0ZXJlZFJ1bnRpbWUpO1xuICAgICAgfSBlbHNlIHJlamVjdCgnW1JlZ2lzdHJ5LlAyUENvbm5lY3Rpb25SZXNvbHZlLmNoZWNrUDJQUnVudGltZV0gTm8gUDJQIENvbm5lY3Rpb24gZm91bmQgdG8gJywgcnVudGltZVVSTCk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogVmVyaWZpZXMgaWYgcmVtb3RlIEh5cGVydHkgY2FuIGJlIHJlYWNoZWQgd2l0aCBhIFAyUCBDb25uZWN0aW9uLlxuICAqIEBwYXJhbSAge0pTT059ICAgICAgICBpbmZvICAgICAgICAgICBvYmplY3Qgb3IgZW50aXR5IGNoYXJhdGVyaXN0aWNzIGluZm9cbiAgKiBAcmV0dXJuIHthZGRyZXNzVVJMfSAgYWRkcmVzc1VSTCAgICAgcmV0dXJuIHRoZSBVUkwgaWYgdGhlcmUgaXMgYW55IHByZXZpb3VzeSByZWdpc3RlcmVkIFVSTCwgcmV0dXJuIHVuZGVmaW5lZCBvdGhlcndpc2VcbiAgKi9cblxuICBjaGVja1AyUEh5cGVydHkoaHlwZXJ0eVVSTCwgcDJwKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgaHlwZXJ0eTtcblxuXG4gICAgICAvLyBsb29rIG9uIGxvY2FsbHkgc3RvcmVkIGh5cGVydGllc1xuXG4gICAgICBmb3IgKGxldCBpIGluIF90aGlzLl9yZWdpc3RyeS5yZW1vdGVIeXBlcnR5TGlzdCkge1xuICAgICAgICBoeXBlcnR5ID0gX3RoaXMuX3JlZ2lzdHJ5LnJlbW90ZUh5cGVydHlMaXN0W2ldO1xuXG4gICAgICAgIGxvZy5sb2coJ1tSZWdpc3RyeSAtIGNoZWNrUDJQSHlwZXJ0eV0gLSBmb3IgZWFjaCBIeXBlcnR5OiAnLCBoeXBlcnR5KTtcblxuICAgICAgICAvLyB0b2RvOiBjaGFuZ2UgdG8gXCJoeXBlcnR5LnVybFwiIHRvIGJlIGFsaWduZWQgd2l0aCBoeXBlcnR5IGluc3RhbmNlIGRhdGEgbW9kZWwgc3BlY1xuXG4gICAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlJRCA9PT0gaHlwZXJ0eVVSTCkge1xuXG4gICAgICAgICAgaWYgKGh5cGVydHkuaGFzT3duUHJvcGVydHkoJ3AycEhhbmRsZXInKSkge1xuICAgICAgICAgICAgcmVzb2x2ZShoeXBlcnR5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdbUmVnaXN0cnkgY2hlY2tQMlBIeXBlcnR5XSBIeXBlcnR5IGZvdW5kIGRvZXMgbm90IHN1cHBvcnQgUDJQJywgaHlwZXJ0eSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWh5cGVydHkgJiYgcDJwLnJ1bnRpbWUpIHJlc29sdmUocDJwKTsgLy8gdXNlIHByb3ZpZGVkIHAycCBpZiBhdmFpbGFibGUgaW4gdGhlIG1lc3NhZ2UgYm9keVxuICAgICAgZWxzZSBpZiAoIWh5cGVydHkgJiYgcDJwLnAycCkgeyAvLyBvdGhlcndpc2UgbG9vayBvbiBEb21haW4gUmVnaXN0cnlcblxuICAgICAgICBsb2cubG9nKCdbUmVnaXN0cnkgLSBjaGVja1AyUEh5cGVydHldIC0gc2VhcmNoIGluIERvbWFpbiBSZWdpc3RyeTogJywgaHlwZXJ0eSk7XG5cbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgdHlwZTogJ3JlYWQnLFxuICAgICAgICAgIGZyb206IF90aGlzLl9yZWdpc3RyeS5yZWdpc3RyeVVSTCxcbiAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fcmVnaXN0cnkuX2RvbWFpbixcbiAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICByZXNvdXJjZTogaHlwZXJ0eVVSTFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5fcmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgbG9nLmxvZygnW1JlZ2lzdHJ5IC0gY2hlY2tQMlBIeXBlcnR5XSBEb21haW4gUmVnaXN0cnkgcmVwbHknLCByZXBseSk7XG4gICAgICAgICAgaWYgKCd2YWx1ZScgaW4gcmVwbHkuYm9keSkge1xuXG4gICAgICAgICAgICAvL3RvZG86IHN0b3JlIHJldHJpZXZlZCBoeXBlcnR5XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZWRIeXBlcnR5ID0gcmVwbHkuYm9keS52YWx1ZTtcblxuICAgICAgICAgICAgX3RoaXMuX3JlZ2lzdHJ5LnJlbW90ZUh5cGVydHlMaXN0LnB1c2gocmVzb2x2ZWRIeXBlcnR5KTtcblxuICAgICAgICAgICAgaWYgKHJlc29sdmVkSHlwZXJ0eS5oYXNPd25Qcm9wZXJ0eSgncDJwSGFuZGxlcicpKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUocmVzb2x2ZWRIeXBlcnR5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlamVjdCgnW1JlZ2lzdHJ5IGNoZWNrUDJQSHlwZXJ0eV0gSHlwZXJ0eSBmb3VuZCBkb2VzIG5vdCBzdXBwb3J0IFAyUCcsIHJlcGx5LmJvZHkudmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnW1JlZ2lzdHJ5IGNoZWNrUDJQSHlwZXJ0eV0gSHlwZXJ0eSB3aXRoIFAyUEhhbmRsZXIgbm90IGZvdW5kJywgcmVwbHkuYm9keS5jb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHJlamVjdCgnW1JlZ2lzdHJ5IGNoZWNrUDJQSHlwZXJ0eV0gTm8gUDJQIENvbm5lY3Rpb24gYXZhaWxhYmxlIGZvciAnLCBoeXBlcnR5VVJMKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFZlcmlmaWVzIGlmIHJlbW90ZSBEYXRhIE9iamVjdCBjYW4gYmUgcmVhY2hlZCB3aXRoIGEgUDJQIENvbm5lY3Rpb24uXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgICAgIERhdGFPYmplY3RVUkwgICAgICAgICAgIG9iamVjdCBVUkxcbiAgKiBAcmV0dXJuIHtIeXBlcnR5RGF0YU9iamVjdEluc3RhbmNlfSAgYWRkcmVzc1VSTCAgICAgcmV0dXJuIHRoZSBEYXRhIE9iamVjdCBpbnN0YW5jZSByZWdpc3RlcmVkIFVSTCwgcmV0dXJuIHVuZGVmaW5lZCBvdGhlcndpc2VcbiAgKi9cblxuICBjaGVja1AyUERhdGFPYmplY3QodXJsLCBwMnApIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgLy8gbG9vayBvbiBsb2NhbGx5IHN0b3JlZCBSZW1vdGUgRGF0YSBPYmplY3RzXG5cbiAgICAgIGxldCBkYXRhb2JqZWN0ID0gX3RoaXMuX3JlZ2lzdHJ5LnJlbW90ZURhdGFPYmplY3RMaXN0LmZpbHRlcigoaSkgPT4ge1xuICAgICAgICByZXR1cm4gKF90aGlzLl9yZWdpc3RyeS5yZW1vdGVEYXRhT2JqZWN0TGlzdFtpXS51cmwgPT09IHVybCk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRhdGFvYmplY3QubGVuZ3RoICE9PSAwICYmIGRhdGFvYmplY3RbMF0ucDJwUmVxdWVzdGVyKSB7XG4gICAgICAgIHJlc29sdmUoZGF0YW9iamVjdFswXSk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGFvYmplY3QubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJlamVjdCgnW1JlZ2lzdHJ5IGNoZWNrUDJQRGF0YU9iamVjdF0gRGF0YSBPYmplY3QgZm91bmQgZG9lcyBub3Qgc3VwcG9ydCBQMlAnLCBkYXRhb2JqZWN0WzBdKTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YW9iamVjdC5sZW5ndGggPT09IDAgJiYgcDJwLnJ1bnRpbWUpIHJlc29sdmUocDJwKTsgLy8gdXNlIHByb3ZpZGVkIHAycCBpbmZvIGlmIGF2YWlsYWJsZSBpbiB0aGUgbWVzc2FnZSBib2R5XG4gICAgICBlbHNlIGlmIChkYXRhb2JqZWN0Lmxlbmd0aCAmJiBwMnAucDJwKSB7IC8vIG90aGVyd2lzZSBsb29rIG9uIERvbWFpbiBSZWdpc3RyeVxuXG4gICAgICAvLyBsb29rIG9uIERvbWFpbiBSZWdpc3RyeVxuXG4gICAgICAgIGxldCBtZXNzYWdlID0ge1xuICAgICAgICAgIHR5cGU6ICdyZWFkJyxcbiAgICAgICAgICBmcm9tOiBfdGhpcy5fcmVnaXN0cnkucmVnaXN0cnlVUkwsXG4gICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX3JlZ2lzdHJ5Ll9kb21haW4sXG4gICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgcmVzb3VyY2U6IHVybFxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBfdGhpcy5fcmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgbG9nLmxvZygnZGlzY292ZXIgZGF0YSBvYmplY3QgcGVyIHVybCByZXBseScsIHJlcGx5KTtcbiAgICAgICAgICBpZiAoJ3ZhbHVlJyBpbiByZXBseS5ib2R5KSB7XG5cbiAgICAgICAgICAgIC8vdG9kbzogc3RvcmUgcmV0cmlldmVkIGh5cGVydHlcbiAgICAgICAgICAgIGxldCByZXNvbHZlZERhdGFPYmplY3QgPSByZXBseS5ib2R5LnZhbHVlO1xuXG4gICAgICAgICAgICBfdGhpcy5fcmVnaXN0cnkucmVtb3RlRGF0YU9iamVjdExpc3QucHVzaChyZXNvbHZlZERhdGFPYmplY3QpO1xuXG4gICAgICAgICAgICBpZiAocmVzb2x2ZWREYXRhT2JqZWN0LnAycFJlcXVlc3Rlcikge1xuICAgICAgICAgICAgICByZXNvbHZlKHJlc29sdmVkRGF0YU9iamVjdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QoJ1tSZWdpc3RyeSBjaGVja1AyUERhdGFPYmplY3RdIERhdGEgT2JqZWN0IGZvdW5kIGRvZXMgbm90IHN1cHBvcnQgUDJQJywgcmVwbHkuYm9keS52YWx1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdbUmVnaXN0cnkgY2hlY2tQMlBEYXRhT2JqZWN0XSBub3QgZm91bmQnLCByZXBseS5ib2R5LmNvZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgcmVqZWN0KCdbUmVnaXN0cnkgY2hlY2tQMlBEYXRhT2JqZWN0XSBubyBQMlAgQ29ubmVjdGlvbiBmb3VuZCcpO1xuICAgIH0pO1xuICB9XG5cbiAgYWRkUmVtb3RlUDJQRW50aXR5KHVybCwgcnVudGltZSkge1xuICAgIHRoaXMuX3JlbW90ZVAyUEVudGl0aWVzW3VybF0gPSBydW50aW1lO1xuICB9XG5cbiAgcmVtb3ZlUmVtb3RlUDJQRW50aXR5KHVybCkge1xuICAgIGRlbGV0ZSB0aGlzLl9yZW1vdGVQMlBFbnRpdGllc1t1cmxdO1xuICB9XG5cbiAgcmVjb25uZWN0UDJQUmVxdWVzdGVyKHAycFJlcXVlc3Rlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsb2cubG9nKCdbUDJQQ29uZW5jdGlvblJlc29sdmUucmVjb25uZWN0UDJQUmVxdWVzdGVyXSBsZXRzIHRyeSB0byByZWNvbm5lY3QgUDJQIFJlcXVlc3RlciBTdHViOiAnLCBwMnBSZXF1ZXN0ZXIpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IHJlbW90ZVJ1bnRpbWUgPSBwMnBSZXF1ZXN0ZXIucnVudGltZTtcblxuICAgICAgbGV0IG1lc3NhZ2UgPSB7XG4gICAgICAgIHR5cGU6ICdleGVjdXRlJyxcbiAgICAgICAgZnJvbTogX3RoaXMuX3JlZ2lzdHJ5LnJlZ2lzdHJ5VVJMLFxuICAgICAgICB0bzogcDJwUmVxdWVzdGVyLnVybCxcbiAgICAgICAgYm9keToge1xuICAgICAgICAgIG1ldGhvZDogJ2Nvbm5lY3QnLFxuICAgICAgICAgIHBhcmFtczogW3AycFJlcXVlc3Rlci5wMnBIYW5kbGVyXVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBsZXRzIHByZXBhcmUgdGhlIHAycFJlcXVlc3RlclNUdWIgcmVjb25uZWN0IGJ5IHNldHRpbmcgYW4gb2JzZXJ2ZXIgdG8gaXRzIHN0YXR1cyBjaGFuZ2VzXG5cbiAgICAgIF90aGlzLl9yZWdpc3RyeS53YXRjaGluZ1lvdS5vYnNlcnZlKCdwMnBSZXF1ZXN0ZXJTdHViJywgKGNoYW5nZSkgPT4ge1xuXG4gICAgICAgIGxvZy5sb2coJ1tQMlBDb25lbmN0aW9uUmVzb2x2ZS5yZWNvbm5lY3RQMlBSZXF1ZXN0ZXJdIHAycFJlcXVlc3RlclN0dWJzIGNoYW5nZWQgJyArIF90aGlzLl9yZWdpc3RyeS5wMnBSZXF1ZXN0ZXJTdHViKTtcblxuICAgICAgICBpZiAoY2hhbmdlLmtleXBhdGguc3BsaXQoJy4nKVswXSA9PT0gcmVtb3RlUnVudGltZSAmJiBjaGFuZ2UubmFtZSA9PT0gJ3N0YXR1cycpIHtcbiAgICAgICAgICBzd2l0Y2ggKGNoYW5nZS5uZXdWYWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnbGl2ZSc6XG4gICAgICAgICAgICAgIGxvZy5sb2coJ1tQMlBDb25lbmN0aW9uUmVzb2x2ZS5yZWNvbm5lY3RQMlBSZXF1ZXN0ZXJdIHAycFJlcXVlc3RlciBpcyBsaXZlICcgKyBfdGhpcy5fcmVnaXN0cnkucDJwUmVxdWVzdGVyU3R1YltyZW1vdGVSdW50aW1lXSk7XG4gICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuX3JlZ2lzdHJ5LnAycFJlcXVlc3RlclN0dWJbcmVtb3RlUnVudGltZV0udXJsKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgICAgICAgICBsb2cubG9nKCdbUDJQQ29uZW5jdGlvblJlc29sdmUucmVjb25uZWN0UDJQUmVxdWVzdGVyXSBwMnBSZXF1ZXN0ZXIgcmVjb25uZWN0IGZhaWxlZCAnICsgX3RoaXMuX3JlZ2lzdHJ5LnAycFJlcXVlc3RlclN0dWJbcmVtb3RlUnVudGltZV0pO1xuICAgICAgICAgICAgICByZWplY3QoJ1AyUCBSZXF1ZXN0ZXIgcmVjb25uZWN0IGZhaWxlZCcpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gIHN0dWIgbG9hZFxuICAgICAgX3RoaXMuX3JlZ2lzdHJ5Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgICBsb2cubG9nKCdbUDJQQ29uZW5jdGlvblJlc29sdmUucmVjb25uZWN0UDJQUmVxdWVzdGVyXSByZWNvbm5lY3QgcmVxdWVzdCByZXBseScsIHJlcGx5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUDJQQ29ubmVjdGlvblJlc29sdmU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3JlZ2lzdHJ5L1AyUENvbm5lY3Rpb25SZXNvbHZlLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkE7QUFDQTtBQURBO0FBQ0E7Ozs7O0FBQUE7QUFDQTtBQUNBOzs7QUEzQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBO0FBQ0E7QUFNQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFKQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBSkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFKQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUpBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///463\n");
    }, function(module, exports) {
        eval('//     proxy-observe v0.0.18\r\n//     Copyright (c) 2015, 2016 Simon Y. Blackwell, AnyWhichWay\r\n//     MIT License - http://opensource.org/licenses/mit-license.php\r\n(function() {\r\n\t"use strict";\r\n\t// Creates and returns a Proxy wrapping a target so that all changes can be trapped and forwarded to\r\n\t// a callback. The callback takes an array of changes just like the traditional original Chrome Object.observe\r\n\t// {object:<object changed>,name:<field changed>,type:add|update|delete|reconfigure|preventExtensions|setPrototype,oldValue:<old value if update | delete>}\r\n\t// The acceptlist can be add|update|delete|reconfigure|preventExtensions|setPrototype.\r\n\t// v 0.0.10 to support pausing and restarting observation two additional constructor arguments are available to Object.observe:\r\n\t// pausable - create the Observer so it can be paused\r\n\t// pause - create observer in paused state\r\n\t// if pausable is true then an additional method deliver(ignorePrevious) is available to start delivery\r\n\t// to pause delivery set a property called pause on the function deliver to true\r\n\t// pausable is optional to reduce the chance of shadowing a property or method on any existing code called deliver\r\n\tif(!Object.observe && typeof(Proxy)==="function") {\r\n\t\tfunction Observer(target,callback,acceptlist,pausable,pause,delay) {\r\n\t    \tvar me = this, proxy;\r\n\t    \tfunction deliver(ignorePrevious,delay) {\r\n\t    \t\tdeliver.delay = delay;\r\n\t    \t\tif(!deliver.pause) {\r\n\t        \t\tif(me.changeset.length>0) {\r\n\t        \t\t\tif(!ignorePrevious) {\r\n\t\t    \t    \t\tvar changes = me.changeset.filter(function(change) { return !acceptlist || acceptlist.indexOf(change.type)>=0; });\r\n\t\t        \t\t\tif(changes.length>0) {\r\n\t\t        \t\t\t\tcallback(changes);\r\n\t\t        \t\t\t}\r\n\t        \t\t\t}\r\n\t        \t\t\tme.changeset = [];\r\n\t        \t\t}\r\n\t    \t\t}\r\n\t    \t}\r\n\t    \tdeliver.pause = pause;\r\n\t    \tdeliver.delay = delay;\r\n\t\t    me.get = function(target, property) {\r\n\t\t    \tif(property==="__observer__") {\r\n\t\t    \t\treturn me;\r\n\t\t    \t}\r\n\t\t    \tif(property==="unobserve") {\r\n\t\t    \t\treturn function() {\r\n\t\t    \t\t\tObject.unobserve(target);\r\n\t\t    \t\t\treturn target;\r\n\t\t    \t\t};\r\n\t\t    \t}\r\n\t\t    \tif(property==="deliver") {\r\n\t\t    \t\treturn deliver;\r\n\t\t    \t}\r\n\t\t    \treturn target[property];\r\n\t\t    }\r\n\t    \tme.target = target;\r\n\t    \tme.changeset = [];\r\n\t    \tif(!me.target.__observerCallbacks__) {\r\n\t    \t\t// __observerCallbacks__ is used as an index to get at the proxy which is the observer, so we can unobserve\r\n\t    \t\tObject.defineProperty(target,"__observerCallbacks__",{enumerable:false,configurable:true,writable:false,value:[]});\r\n\t    \t\tObject.defineProperty(target,"__observers__",{enumerable:false,configurable:true,writable:false,value:[]});\r\n\t    \t}\r\n\t    \tme.target.__observerCallbacks__.push(callback);\r\n\t    \tme.target.__observers__.push(this);\r\n\t    \tproxy = new Proxy(target,me);\r\n\t    \tdeliver(false,delay);\r\n\t    \treturn proxy;\r\n\t    }\r\n\t\tObserver.prototype.deliver = function() {\r\n\t\t\treturn this.get(null,"deliver");\r\n\t\t}\r\n\t    Observer.prototype.set = function(target, property, value) { // , receiver\r\n\t    \tvar oldvalue = target[property];\r\n\t    \tvar type = (oldvalue===undefined ? "add" : "update");\r\n\t    \ttarget[property] = value;\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && (!this.acceptlist || this.acceptlist.indexOf(type)>=0)) {\r\n\t        \tvar change = {object:target,name:property,type:type},\r\n\t        \t\tstart = this.changeset.length === 0,\r\n\t        \t\tdeliver = this.deliver();\r\n\t        \tif(type==="update") {\r\n\t        \t\tchange.oldValue = oldvalue;\r\n\t        \t}\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.deleteProperty = function(target, property) {\r\n\t    \tvar oldvalue = target[property];\r\n\t    \t//if(typeof(oldvalue)!=="undefined") {\r\n\t\t    \tdelete target[property];\r\n\t\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("delete")>=0) {\r\n\t\t        \tvar change = {object:target,name:property,type:"delete",oldValue:oldvalue},\r\n\t\t        \t\tstart = this.changeset.length === 0,\r\n\t\t        \t\tdeliver = this.deliver();\r\n\t\t        \tthis.changeset.push(change);\r\n\t\t        \tif(start) {\r\n\t\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t\t        \t}\r\n\t\t    \t}\r\n\t    \t//}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.defineProperty = function(target, property, descriptor) {\r\n\t    \tObject.defineProperty(target, property, descriptor);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("reconfigure")>=0) {\r\n\t        \tvar change = {object:target,name:property,type:"reconfigure"},\r\n        \t\t\tstart = this.changeset.length === 0,\r\n        \t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.setPrototypeOf = function(target, prototype) {\r\n\t    \tvar oldvalue = Object.getPrototypeOf(target);\r\n\t    \tObject.setPrototypeOf(target, prototype);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("setPrototype")>=0) {\r\n\t        \tvar change = {object:target,name:"__proto__",type:"setPrototype",oldValue:oldvalue},\r\n    \t\t\t\tstart = this.changeset.length === 0,\r\n    \t\t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Observer.prototype.preventExtensions = function(target) {\r\n\t        Object.preventExtensions(target);\r\n\t    \tif(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("preventExtensions")>=0) {\r\n\t        \tvar change = {object:target,type:"preventExtensions"},\r\n\t\t\t\t\tstart = this.changeset.length === 0,\r\n\t\t\t\t\tdeliver = this.deliver();\r\n\t        \tthis.changeset.push(change);\r\n\t        \tif(start) {\r\n\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t        \t}\r\n\t    \t}\r\n\t    \treturn true;\r\n\t    };\r\n\t    Object.observe = function(object,callback,acceptlist,pausable,pause,delay) {\r\n\t    \treturn new Observer(object,callback,acceptlist,pausable,pause,delay);\r\n\t    };\r\n\t    Object.unobserve = function(object,callback) {\r\n\t    \tif(object.__observerCallbacks__) {\r\n\t    \t\tif(!callback) {\r\n\t    \t\t\tobject.__observerCallbacks__.splice(0,object.__observerCallbacks__.length);\r\n\t    \t\t\tobject.__observers__.splice(0,object.__observers__.length);\r\n\t    \t\t\treturn;\r\n\t    \t\t}\r\n\t    \t\tobject.__observerCallbacks__.forEach(function(observercallback,i) {\r\n\t    \t\t\tif(callback===observercallback) {\r\n\t    \t\t\t\tobject.__observerCallbacks__.splice(i,1);\r\n\t    \t\t\t\tdelete object.__observers__[i].callback;\r\n\t    \t\t\t\tobject.__observers__.splice(i,1);\r\n\t    \t\t\t}\r\n\t    \t\t});\r\n\t    \t}\r\n\t    };\r\n\t    Array.observe = function(object,callback,acceptlist,pausable,pause,delay) {\r\n\t    \tif(!(object instanceof Array) && !Array.isArray(object)) {\r\n\t    \t\tthrow new TypeError("First argument to Array.observer is not an Array");\r\n\t    \t}\r\n            \tacceptlist = acceptlist || ["add", "update", "delete", "splice"];\r\n\t    \tvar arrayproxy = new Proxy(object,{get: function(target,property) {\r\n\t    \t\tif(property==="unobserve") {\r\n\t\t    \t\treturn function(callback) {\r\n\t\t    \t\t\tif(callback) {\r\n\t\t    \t\t\t\treturn Object.unobserve(target,callback);\r\n\t\t    \t\t\t}\r\n\t\t    \t\t\treturn target.unobserve();\r\n\t\t    \t\t};\r\n\t\t    \t}\r\n\t    \t\tif(property==="splice") {\r\n\t    \t\t\treturn function(start,end) {\r\n\t    \t\t\t\tif(typeof(start)!=="number" || typeof(end)!=="number") {\r\n\t    \t\t\t\t\tthrow new TypeError("First two arguments to Array splice are not number, number");\r\n\t    \t\t\t\t}\r\n\t    \t    \t\tvar removed = this.slice(start,start+end),\r\n\t    \t    \t\t\taddedCount = (arguments.length > 1 ? arguments.length-2 : 0),\r\n\t    \t    \t\t\tchange =  {object:object,type:"splice",index:start,removed:removed,addedCount:addedCount};\r\n\t    \t    \t\ttarget.splice.apply(target,arguments);\r\n\t    \t    \t\tif(acceptlist.indexOf("splice")>=0) {\r\n\t    \t    \t\t\tvar start = proxy.__observer__.changeset.length === 0,\r\n\t    \t        \t\t\tdeliver = proxy.__observer__.deliver();\r\n\t    \t    \t\t\tproxy.__observer__.changeset.push(change);\r\n\t    \t    \t\t\tif(start) {\r\n\t    \t\t        \t\tdeliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));\r\n\t    \t\t        \t}\r\n\t    \t    \t\t}\r\n\t    \t    \t}\r\n\t    \t\t}\r\n\t    \t\tif(property==="push") {\r\n\t    \t\t\t return function(item) {\r\n\t    \t\t    \treturn this.splice(this.length,0,item);\r\n\t    \t\t    }\r\n\t    \t\t}\r\n\t    \t\tif(property==="pop") {\r\n\t    \t\t\t return function() {\r\n\t    \t\t    \treturn this.splice(this.length-1,1);\r\n\t    \t\t    }\r\n\t    \t\t}\r\n\t    \t\tif(property==="unshift") {\r\n\t    \t\t\t return function(item) {\r\n    \t\t    \t\treturn this.splice(0,0,item);\r\n    \t\t    \t}\r\n\t    \t\t}\r\n\t    \t\tif(property==="shift") {\r\n\t    \t\t\treturn function() {\r\n\t    \t    \t\treturn this.splice(0,1);\r\n\t    \t    \t}\r\n\t    \t\t}\r\n\t    \t\treturn target[property];\r\n\t    \t}});\r\n\t    \tvar proxy = Object.observe(arrayproxy,function(changeset) { \r\n\t    \t\tvar changes = changeset.filter(function(change) { return change.name!=="length" && change.name!=="add" && (!acceptlist || acceptlist.indexOf(change.type)>=0); });\r\n\t    \t\tif(changes.length>0) {\r\n\t    \t\t\tcallback(changes);\r\n\t    \t\t}\r\n\t    \t},acceptlist,pausable,pause,delay);\r\n\t    \treturn proxy;\r\n\t    };\r\n\t    Array.unobserve = function(object,callback) {\r\n\t\t  return object.unobserve(callback);\r\n\t    }\r\n\t}\r\n\tObject.deepObserve = function(object,callback,parts) {\r\n\r\n\t\tparts = (parts ? parts : []);\r\n\r\n\t\tvar toTypeName = function(obj) {\r\n\t\t\treturn ({}).toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase()\r\n\t\t}\r\n\r\n\t\tfunction reobserve(value, parts) {\r\n\t\t\tvar keys = Object.keys(value);\r\n\t\t\tkeys.forEach(function(key) {\r\n\t\t\t\tif((toTypeName(value[key]) === \'object\' || toTypeName(value[key]) === \'array\') && !value[key].hasOwnProperty(\'__observers__\')) {\r\n\t\t\t\t\tvar newparts = parts.slice(0);\r\n\t\t\t\t\tnewparts.push(key);\r\n\t\t\t\t\tvalue[key] = Object.deepObserve(value[key],callback,newparts);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treobserve(object, parts);\r\n\r\n\t\tvar observed = Object.observe(object,function(changeset) {\r\n\t\t\tvar changes = [];\r\n\t\t\tfunction recurse(name,rootObject,oldObject,newObject,path) {\r\n\t\t\t\tif(newObject instanceof Object) {\r\n\t\t\t\t\tvar newkeys = Object.keys(newObject);\r\n\t\t\t\t\tnewkeys.forEach(function(key) {\r\n\t\t\t\t\t\tif(!oldObject || (oldObject[key]!==newObject[key])) {\r\n\t\t\t\t\t\t\tvar oldvalue = (oldObject && oldObject[key]!==undefined ? oldObject[key] : undefined),\r\n\t\t\t\t\t\t\t\tchange = (oldvalue===undefined ? "add" : "update"),\r\n\t\t\t\t\t\t\t\tkeypath = path + "." + key;\r\n\r\n\t\t\t\t\t\t\tchanges.push({name:name,object:rootObject,type:change,oldValue:oldvalue,newValue:newObject[key],keypath:keypath});\r\n\t\t\t\t\t\t\trecurse(name,rootObject,oldvalue,newObject[key],keypath);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} else if(oldObject instanceof Object) {\r\n\t\t\t\t\tvar oldkeys = Object.keys(oldObject);\r\n\t\t\t\t\toldkeys.forEach(function(key) {\r\n\t\t\t\t\t\tvar change = (newObject===null ? "update" : "delete"),\r\n\t\t\t\t\t\t\tkeypath = path + "." + key;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tchanges.push({name:name,object:rootObject,type:change,oldValue:oldObject[key],newValue:newObject,keypath:keypath});\r\n\t\t\t\t\t\trecurse(name,rootObject,oldObject[key],undefined,keypath);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tchangeset.forEach(function(change) {\r\n\t\t\t\tvar keypath = (parts.length>0 ? parts.join(".") + "." : "") + change.name;\r\n\r\n\t\t\t\tif (change.type === "update" || change.type === "add") { \r\n\t\t\t\t\treobserve(change.object, parts);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchanges.push({name:change.name,object:change.object,type:change.type,oldValue:change.oldValue,newValue:change.object[change.name],keypath:keypath});\r\n\t\t\t\trecurse(change.name,change.object,change.oldValue,change.object[change.name],keypath);\r\n\t\t\t});\r\n\t\t\tcallback(changes);\r\n\t\t});\r\n\t\treturn observed;\r\n\t};\r\n})();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3h5LW9ic2VydmUvaW5kZXguanM/MTIwYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAgICAgcHJveHktb2JzZXJ2ZSB2MC4wLjE4XHJcbi8vICAgICBDb3B5cmlnaHQgKGMpIDIwMTUsIDIwMTYgU2ltb24gWS4gQmxhY2t3ZWxsLCBBbnlXaGljaFdheVxyXG4vLyAgICAgTUlUIExpY2Vuc2UgLSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXHJcbihmdW5jdGlvbigpIHtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHQvLyBDcmVhdGVzIGFuZCByZXR1cm5zIGEgUHJveHkgd3JhcHBpbmcgYSB0YXJnZXQgc28gdGhhdCBhbGwgY2hhbmdlcyBjYW4gYmUgdHJhcHBlZCBhbmQgZm9yd2FyZGVkIHRvXHJcblx0Ly8gYSBjYWxsYmFjay4gVGhlIGNhbGxiYWNrIHRha2VzIGFuIGFycmF5IG9mIGNoYW5nZXMganVzdCBsaWtlIHRoZSB0cmFkaXRpb25hbCBvcmlnaW5hbCBDaHJvbWUgT2JqZWN0Lm9ic2VydmVcclxuXHQvLyB7b2JqZWN0OjxvYmplY3QgY2hhbmdlZD4sbmFtZTo8ZmllbGQgY2hhbmdlZD4sdHlwZTphZGR8dXBkYXRlfGRlbGV0ZXxyZWNvbmZpZ3VyZXxwcmV2ZW50RXh0ZW5zaW9uc3xzZXRQcm90b3R5cGUsb2xkVmFsdWU6PG9sZCB2YWx1ZSBpZiB1cGRhdGUgfCBkZWxldGU+fVxyXG5cdC8vIFRoZSBhY2NlcHRsaXN0IGNhbiBiZSBhZGR8dXBkYXRlfGRlbGV0ZXxyZWNvbmZpZ3VyZXxwcmV2ZW50RXh0ZW5zaW9uc3xzZXRQcm90b3R5cGUuXHJcblx0Ly8gdiAwLjAuMTAgdG8gc3VwcG9ydCBwYXVzaW5nIGFuZCByZXN0YXJ0aW5nIG9ic2VydmF0aW9uIHR3byBhZGRpdGlvbmFsIGNvbnN0cnVjdG9yIGFyZ3VtZW50cyBhcmUgYXZhaWxhYmxlIHRvIE9iamVjdC5vYnNlcnZlOlxyXG5cdC8vIHBhdXNhYmxlIC0gY3JlYXRlIHRoZSBPYnNlcnZlciBzbyBpdCBjYW4gYmUgcGF1c2VkXHJcblx0Ly8gcGF1c2UgLSBjcmVhdGUgb2JzZXJ2ZXIgaW4gcGF1c2VkIHN0YXRlXHJcblx0Ly8gaWYgcGF1c2FibGUgaXMgdHJ1ZSB0aGVuIGFuIGFkZGl0aW9uYWwgbWV0aG9kIGRlbGl2ZXIoaWdub3JlUHJldmlvdXMpIGlzIGF2YWlsYWJsZSB0byBzdGFydCBkZWxpdmVyeVxyXG5cdC8vIHRvIHBhdXNlIGRlbGl2ZXJ5IHNldCBhIHByb3BlcnR5IGNhbGxlZCBwYXVzZSBvbiB0aGUgZnVuY3Rpb24gZGVsaXZlciB0byB0cnVlXHJcblx0Ly8gcGF1c2FibGUgaXMgb3B0aW9uYWwgdG8gcmVkdWNlIHRoZSBjaGFuY2Ugb2Ygc2hhZG93aW5nIGEgcHJvcGVydHkgb3IgbWV0aG9kIG9uIGFueSBleGlzdGluZyBjb2RlIGNhbGxlZCBkZWxpdmVyXHJcblx0aWYoIU9iamVjdC5vYnNlcnZlICYmIHR5cGVvZihQcm94eSk9PT1cImZ1bmN0aW9uXCIpIHtcclxuXHRcdGZ1bmN0aW9uIE9ic2VydmVyKHRhcmdldCxjYWxsYmFjayxhY2NlcHRsaXN0LHBhdXNhYmxlLHBhdXNlLGRlbGF5KSB7XHJcblx0ICAgIFx0dmFyIG1lID0gdGhpcywgcHJveHk7XHJcblx0ICAgIFx0ZnVuY3Rpb24gZGVsaXZlcihpZ25vcmVQcmV2aW91cyxkZWxheSkge1xyXG5cdCAgICBcdFx0ZGVsaXZlci5kZWxheSA9IGRlbGF5O1xyXG5cdCAgICBcdFx0aWYoIWRlbGl2ZXIucGF1c2UpIHtcclxuXHQgICAgICAgIFx0XHRpZihtZS5jaGFuZ2VzZXQubGVuZ3RoPjApIHtcclxuXHQgICAgICAgIFx0XHRcdGlmKCFpZ25vcmVQcmV2aW91cykge1xyXG5cdFx0ICAgIFx0ICAgIFx0XHR2YXIgY2hhbmdlcyA9IG1lLmNoYW5nZXNldC5maWx0ZXIoZnVuY3Rpb24oY2hhbmdlKSB7IHJldHVybiAhYWNjZXB0bGlzdCB8fCBhY2NlcHRsaXN0LmluZGV4T2YoY2hhbmdlLnR5cGUpPj0wOyB9KTtcclxuXHRcdCAgICAgICAgXHRcdFx0aWYoY2hhbmdlcy5sZW5ndGg+MCkge1xyXG5cdFx0ICAgICAgICBcdFx0XHRcdGNhbGxiYWNrKGNoYW5nZXMpO1xyXG5cdFx0ICAgICAgICBcdFx0XHR9XHJcblx0ICAgICAgICBcdFx0XHR9XHJcblx0ICAgICAgICBcdFx0XHRtZS5jaGFuZ2VzZXQgPSBbXTtcclxuXHQgICAgICAgIFx0XHR9XHJcblx0ICAgIFx0XHR9XHJcblx0ICAgIFx0fVxyXG5cdCAgICBcdGRlbGl2ZXIucGF1c2UgPSBwYXVzZTtcclxuXHQgICAgXHRkZWxpdmVyLmRlbGF5ID0gZGVsYXk7XHJcblx0XHQgICAgbWUuZ2V0ID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSkge1xyXG5cdFx0ICAgIFx0aWYocHJvcGVydHk9PT1cIl9fb2JzZXJ2ZXJfX1wiKSB7XHJcblx0XHQgICAgXHRcdHJldHVybiBtZTtcclxuXHRcdCAgICBcdH1cclxuXHRcdCAgICBcdGlmKHByb3BlcnR5PT09XCJ1bm9ic2VydmVcIikge1xyXG5cdFx0ICAgIFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XHJcblx0XHQgICAgXHRcdFx0T2JqZWN0LnVub2JzZXJ2ZSh0YXJnZXQpO1xyXG5cdFx0ICAgIFx0XHRcdHJldHVybiB0YXJnZXQ7XHJcblx0XHQgICAgXHRcdH07XHJcblx0XHQgICAgXHR9XHJcblx0XHQgICAgXHRpZihwcm9wZXJ0eT09PVwiZGVsaXZlclwiKSB7XHJcblx0XHQgICAgXHRcdHJldHVybiBkZWxpdmVyO1xyXG5cdFx0ICAgIFx0fVxyXG5cdFx0ICAgIFx0cmV0dXJuIHRhcmdldFtwcm9wZXJ0eV07XHJcblx0XHQgICAgfVxyXG5cdCAgICBcdG1lLnRhcmdldCA9IHRhcmdldDtcclxuXHQgICAgXHRtZS5jaGFuZ2VzZXQgPSBbXTtcclxuXHQgICAgXHRpZighbWUudGFyZ2V0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfXykge1xyXG5cdCAgICBcdFx0Ly8gX19vYnNlcnZlckNhbGxiYWNrc19fIGlzIHVzZWQgYXMgYW4gaW5kZXggdG8gZ2V0IGF0IHRoZSBwcm94eSB3aGljaCBpcyB0aGUgb2JzZXJ2ZXIsIHNvIHdlIGNhbiB1bm9ic2VydmVcclxuXHQgICAgXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsXCJfX29ic2VydmVyQ2FsbGJhY2tzX19cIix7ZW51bWVyYWJsZTpmYWxzZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTpmYWxzZSx2YWx1ZTpbXX0pO1xyXG5cdCAgICBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxcIl9fb2JzZXJ2ZXJzX19cIix7ZW51bWVyYWJsZTpmYWxzZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTpmYWxzZSx2YWx1ZTpbXX0pO1xyXG5cdCAgICBcdH1cclxuXHQgICAgXHRtZS50YXJnZXQuX19vYnNlcnZlckNhbGxiYWNrc19fLnB1c2goY2FsbGJhY2spO1xyXG5cdCAgICBcdG1lLnRhcmdldC5fX29ic2VydmVyc19fLnB1c2godGhpcyk7XHJcblx0ICAgIFx0cHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LG1lKTtcclxuXHQgICAgXHRkZWxpdmVyKGZhbHNlLGRlbGF5KTtcclxuXHQgICAgXHRyZXR1cm4gcHJveHk7XHJcblx0ICAgIH1cclxuXHRcdE9ic2VydmVyLnByb3RvdHlwZS5kZWxpdmVyID0gZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmdldChudWxsLFwiZGVsaXZlclwiKTtcclxuXHRcdH1cclxuXHQgICAgT2JzZXJ2ZXIucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKHRhcmdldCwgcHJvcGVydHksIHZhbHVlKSB7IC8vICwgcmVjZWl2ZXJcclxuXHQgICAgXHR2YXIgb2xkdmFsdWUgPSB0YXJnZXRbcHJvcGVydHldO1xyXG5cdCAgICBcdHZhciB0eXBlID0gKG9sZHZhbHVlPT09dW5kZWZpbmVkID8gXCJhZGRcIiA6IFwidXBkYXRlXCIpO1xyXG5cdCAgICBcdHRhcmdldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuXHQgICAgXHRpZih0YXJnZXQuX19vYnNlcnZlcnNfXy5pbmRleE9mKHRoaXMpPj0wICYmICghdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKHR5cGUpPj0wKSkge1xyXG5cdCAgICAgICAgXHR2YXIgY2hhbmdlID0ge29iamVjdDp0YXJnZXQsbmFtZTpwcm9wZXJ0eSx0eXBlOnR5cGV9LFxyXG5cdCAgICAgICAgXHRcdHN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLFxyXG5cdCAgICAgICAgXHRcdGRlbGl2ZXIgPSB0aGlzLmRlbGl2ZXIoKTtcclxuXHQgICAgICAgIFx0aWYodHlwZT09PVwidXBkYXRlXCIpIHtcclxuXHQgICAgICAgIFx0XHRjaGFuZ2Uub2xkVmFsdWUgPSBvbGR2YWx1ZTtcclxuXHQgICAgICAgIFx0fVxyXG5cdCAgICAgICAgXHR0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7XHJcblx0ICAgICAgICBcdGlmKHN0YXJ0KSB7XHJcblx0ICAgICAgICBcdFx0ZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09XCJudW1iZXJcIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpO1xyXG5cdCAgICAgICAgXHR9XHJcblx0ICAgIFx0fVxyXG5cdCAgICBcdHJldHVybiB0cnVlO1xyXG5cdCAgICB9O1xyXG5cdCAgICBPYnNlcnZlci5wcm90b3R5cGUuZGVsZXRlUHJvcGVydHkgPSBmdW5jdGlvbih0YXJnZXQsIHByb3BlcnR5KSB7XHJcblx0ICAgIFx0dmFyIG9sZHZhbHVlID0gdGFyZ2V0W3Byb3BlcnR5XTtcclxuXHQgICAgXHQvL2lmKHR5cGVvZihvbGR2YWx1ZSkhPT1cInVuZGVmaW5lZFwiKSB7XHJcblx0XHQgICAgXHRkZWxldGUgdGFyZ2V0W3Byb3BlcnR5XTtcclxuXHRcdCAgICBcdGlmKHRhcmdldC5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAgJiYgIXRoaXMuYWNjZXB0bGlzdCB8fCB0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZihcImRlbGV0ZVwiKT49MCkge1xyXG5cdFx0ICAgICAgICBcdHZhciBjaGFuZ2UgPSB7b2JqZWN0OnRhcmdldCxuYW1lOnByb3BlcnR5LHR5cGU6XCJkZWxldGVcIixvbGRWYWx1ZTpvbGR2YWx1ZX0sXHJcblx0XHQgICAgICAgIFx0XHRzdGFydCA9IHRoaXMuY2hhbmdlc2V0Lmxlbmd0aCA9PT0gMCxcclxuXHRcdCAgICAgICAgXHRcdGRlbGl2ZXIgPSB0aGlzLmRlbGl2ZXIoKTtcclxuXHRcdCAgICAgICAgXHR0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7XHJcblx0XHQgICAgICAgIFx0aWYoc3RhcnQpIHtcclxuXHRcdCAgICAgICAgXHRcdGRlbGl2ZXIoZmFsc2UsKHR5cGVvZihkZWxpdmVyLmRlbGF5KT09PVwibnVtYmVyXCIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTtcclxuXHRcdCAgICAgICAgXHR9XHJcblx0XHQgICAgXHR9XHJcblx0ICAgIFx0Ly99XHJcblx0ICAgIFx0cmV0dXJuIHRydWU7XHJcblx0ICAgIH07XHJcblx0ICAgIE9ic2VydmVyLnByb3RvdHlwZS5kZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHtcclxuXHQgICAgXHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XHJcblx0ICAgIFx0aWYodGFyZ2V0Ll9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCAmJiAhdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKFwicmVjb25maWd1cmVcIik+PTApIHtcclxuXHQgICAgICAgIFx0dmFyIGNoYW5nZSA9IHtvYmplY3Q6dGFyZ2V0LG5hbWU6cHJvcGVydHksdHlwZTpcInJlY29uZmlndXJlXCJ9LFxyXG4gICAgICAgIFx0XHRcdHN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLFxyXG4gICAgICAgIFx0XHRcdGRlbGl2ZXIgPSB0aGlzLmRlbGl2ZXIoKTtcclxuXHQgICAgICAgIFx0dGhpcy5jaGFuZ2VzZXQucHVzaChjaGFuZ2UpO1xyXG5cdCAgICAgICAgXHRpZihzdGFydCkge1xyXG5cdCAgICAgICAgXHRcdGRlbGl2ZXIoZmFsc2UsKHR5cGVvZihkZWxpdmVyLmRlbGF5KT09PVwibnVtYmVyXCIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTtcclxuXHQgICAgICAgIFx0fVxyXG5cdCAgICBcdH1cclxuXHQgICAgXHRyZXR1cm4gdHJ1ZTtcclxuXHQgICAgfTtcclxuXHQgICAgT2JzZXJ2ZXIucHJvdG90eXBlLnNldFByb3RvdHlwZU9mID0gZnVuY3Rpb24odGFyZ2V0LCBwcm90b3R5cGUpIHtcclxuXHQgICAgXHR2YXIgb2xkdmFsdWUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KTtcclxuXHQgICAgXHRPYmplY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90b3R5cGUpO1xyXG5cdCAgICBcdGlmKHRhcmdldC5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAgJiYgIXRoaXMuYWNjZXB0bGlzdCB8fCB0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZihcInNldFByb3RvdHlwZVwiKT49MCkge1xyXG5cdCAgICAgICAgXHR2YXIgY2hhbmdlID0ge29iamVjdDp0YXJnZXQsbmFtZTpcIl9fcHJvdG9fX1wiLHR5cGU6XCJzZXRQcm90b3R5cGVcIixvbGRWYWx1ZTpvbGR2YWx1ZX0sXHJcbiAgICBcdFx0XHRcdHN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLFxyXG4gICAgXHRcdFx0XHRkZWxpdmVyID0gdGhpcy5kZWxpdmVyKCk7XHJcblx0ICAgICAgICBcdHRoaXMuY2hhbmdlc2V0LnB1c2goY2hhbmdlKTtcclxuXHQgICAgICAgIFx0aWYoc3RhcnQpIHtcclxuXHQgICAgICAgIFx0XHRkZWxpdmVyKGZhbHNlLCh0eXBlb2YoZGVsaXZlci5kZWxheSk9PT1cIm51bWJlclwiID8gZGVsaXZlci5kZWxheSA6IDEwKSk7XHJcblx0ICAgICAgICBcdH1cclxuXHQgICAgXHR9XHJcblx0ICAgIFx0cmV0dXJuIHRydWU7XHJcblx0ICAgIH07XHJcblx0ICAgIE9ic2VydmVyLnByb3RvdHlwZS5wcmV2ZW50RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uKHRhcmdldCkge1xyXG5cdCAgICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XHJcblx0ICAgIFx0aWYodGFyZ2V0Ll9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCAmJiAhdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKFwicHJldmVudEV4dGVuc2lvbnNcIik+PTApIHtcclxuXHQgICAgICAgIFx0dmFyIGNoYW5nZSA9IHtvYmplY3Q6dGFyZ2V0LHR5cGU6XCJwcmV2ZW50RXh0ZW5zaW9uc1wifSxcclxuXHRcdFx0XHRcdHN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLFxyXG5cdFx0XHRcdFx0ZGVsaXZlciA9IHRoaXMuZGVsaXZlcigpO1xyXG5cdCAgICAgICAgXHR0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7XHJcblx0ICAgICAgICBcdGlmKHN0YXJ0KSB7XHJcblx0ICAgICAgICBcdFx0ZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09XCJudW1iZXJcIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpO1xyXG5cdCAgICAgICAgXHR9XHJcblx0ICAgIFx0fVxyXG5cdCAgICBcdHJldHVybiB0cnVlO1xyXG5cdCAgICB9O1xyXG5cdCAgICBPYmplY3Qub2JzZXJ2ZSA9IGZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjayxhY2NlcHRsaXN0LHBhdXNhYmxlLHBhdXNlLGRlbGF5KSB7XHJcblx0ICAgIFx0cmV0dXJuIG5ldyBPYnNlcnZlcihvYmplY3QsY2FsbGJhY2ssYWNjZXB0bGlzdCxwYXVzYWJsZSxwYXVzZSxkZWxheSk7XHJcblx0ICAgIH07XHJcblx0ICAgIE9iamVjdC51bm9ic2VydmUgPSBmdW5jdGlvbihvYmplY3QsY2FsbGJhY2spIHtcclxuXHQgICAgXHRpZihvYmplY3QuX19vYnNlcnZlckNhbGxiYWNrc19fKSB7XHJcblx0ICAgIFx0XHRpZighY2FsbGJhY2spIHtcclxuXHQgICAgXHRcdFx0b2JqZWN0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5zcGxpY2UoMCxvYmplY3QuX19vYnNlcnZlckNhbGxiYWNrc19fLmxlbmd0aCk7XHJcblx0ICAgIFx0XHRcdG9iamVjdC5fX29ic2VydmVyc19fLnNwbGljZSgwLG9iamVjdC5fX29ic2VydmVyc19fLmxlbmd0aCk7XHJcblx0ICAgIFx0XHRcdHJldHVybjtcclxuXHQgICAgXHRcdH1cclxuXHQgICAgXHRcdG9iamVjdC5fX29ic2VydmVyQ2FsbGJhY2tzX18uZm9yRWFjaChmdW5jdGlvbihvYnNlcnZlcmNhbGxiYWNrLGkpIHtcclxuXHQgICAgXHRcdFx0aWYoY2FsbGJhY2s9PT1vYnNlcnZlcmNhbGxiYWNrKSB7XHJcblx0ICAgIFx0XHRcdFx0b2JqZWN0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5zcGxpY2UoaSwxKTtcclxuXHQgICAgXHRcdFx0XHRkZWxldGUgb2JqZWN0Ll9fb2JzZXJ2ZXJzX19baV0uY2FsbGJhY2s7XHJcblx0ICAgIFx0XHRcdFx0b2JqZWN0Ll9fb2JzZXJ2ZXJzX18uc3BsaWNlKGksMSk7XHJcblx0ICAgIFx0XHRcdH1cclxuXHQgICAgXHRcdH0pO1xyXG5cdCAgICBcdH1cclxuXHQgICAgfTtcclxuXHQgICAgQXJyYXkub2JzZXJ2ZSA9IGZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjayxhY2NlcHRsaXN0LHBhdXNhYmxlLHBhdXNlLGRlbGF5KSB7XHJcblx0ICAgIFx0aWYoIShvYmplY3QgaW5zdGFuY2VvZiBBcnJheSkgJiYgIUFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xyXG5cdCAgICBcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcIkZpcnN0IGFyZ3VtZW50IHRvIEFycmF5Lm9ic2VydmVyIGlzIG5vdCBhbiBBcnJheVwiKTtcclxuXHQgICAgXHR9XHJcbiAgICAgICAgICAgIFx0YWNjZXB0bGlzdCA9IGFjY2VwdGxpc3QgfHwgW1wiYWRkXCIsIFwidXBkYXRlXCIsIFwiZGVsZXRlXCIsIFwic3BsaWNlXCJdO1xyXG5cdCAgICBcdHZhciBhcnJheXByb3h5ID0gbmV3IFByb3h5KG9iamVjdCx7Z2V0OiBmdW5jdGlvbih0YXJnZXQscHJvcGVydHkpIHtcclxuXHQgICAgXHRcdGlmKHByb3BlcnR5PT09XCJ1bm9ic2VydmVcIikge1xyXG5cdFx0ICAgIFx0XHRyZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuXHRcdCAgICBcdFx0XHRpZihjYWxsYmFjaykge1xyXG5cdFx0ICAgIFx0XHRcdFx0cmV0dXJuIE9iamVjdC51bm9ic2VydmUodGFyZ2V0LGNhbGxiYWNrKTtcclxuXHRcdCAgICBcdFx0XHR9XHJcblx0XHQgICAgXHRcdFx0cmV0dXJuIHRhcmdldC51bm9ic2VydmUoKTtcclxuXHRcdCAgICBcdFx0fTtcclxuXHRcdCAgICBcdH1cclxuXHQgICAgXHRcdGlmKHByb3BlcnR5PT09XCJzcGxpY2VcIikge1xyXG5cdCAgICBcdFx0XHRyZXR1cm4gZnVuY3Rpb24oc3RhcnQsZW5kKSB7XHJcblx0ICAgIFx0XHRcdFx0aWYodHlwZW9mKHN0YXJ0KSE9PVwibnVtYmVyXCIgfHwgdHlwZW9mKGVuZCkhPT1cIm51bWJlclwiKSB7XHJcblx0ICAgIFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmlyc3QgdHdvIGFyZ3VtZW50cyB0byBBcnJheSBzcGxpY2UgYXJlIG5vdCBudW1iZXIsIG51bWJlclwiKTtcclxuXHQgICAgXHRcdFx0XHR9XHJcblx0ICAgIFx0ICAgIFx0XHR2YXIgcmVtb3ZlZCA9IHRoaXMuc2xpY2Uoc3RhcnQsc3RhcnQrZW5kKSxcclxuXHQgICAgXHQgICAgXHRcdFx0YWRkZWRDb3VudCA9IChhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50cy5sZW5ndGgtMiA6IDApLFxyXG5cdCAgICBcdCAgICBcdFx0XHRjaGFuZ2UgPSAge29iamVjdDpvYmplY3QsdHlwZTpcInNwbGljZVwiLGluZGV4OnN0YXJ0LHJlbW92ZWQ6cmVtb3ZlZCxhZGRlZENvdW50OmFkZGVkQ291bnR9O1xyXG5cdCAgICBcdCAgICBcdFx0dGFyZ2V0LnNwbGljZS5hcHBseSh0YXJnZXQsYXJndW1lbnRzKTtcclxuXHQgICAgXHQgICAgXHRcdGlmKGFjY2VwdGxpc3QuaW5kZXhPZihcInNwbGljZVwiKT49MCkge1xyXG5cdCAgICBcdCAgICBcdFx0XHR2YXIgc3RhcnQgPSBwcm94eS5fX29ic2VydmVyX18uY2hhbmdlc2V0Lmxlbmd0aCA9PT0gMCxcclxuXHQgICAgXHQgICAgICAgIFx0XHRcdGRlbGl2ZXIgPSBwcm94eS5fX29ic2VydmVyX18uZGVsaXZlcigpO1xyXG5cdCAgICBcdCAgICBcdFx0XHRwcm94eS5fX29ic2VydmVyX18uY2hhbmdlc2V0LnB1c2goY2hhbmdlKTtcclxuXHQgICAgXHQgICAgXHRcdFx0aWYoc3RhcnQpIHtcclxuXHQgICAgXHRcdCAgICAgICAgXHRcdGRlbGl2ZXIoZmFsc2UsKHR5cGVvZihkZWxpdmVyLmRlbGF5KT09PVwibnVtYmVyXCIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTtcclxuXHQgICAgXHRcdCAgICAgICAgXHR9XHJcblx0ICAgIFx0ICAgIFx0XHR9XHJcblx0ICAgIFx0ICAgIFx0fVxyXG5cdCAgICBcdFx0fVxyXG5cdCAgICBcdFx0aWYocHJvcGVydHk9PT1cInB1c2hcIikge1xyXG5cdCAgICBcdFx0XHQgcmV0dXJuIGZ1bmN0aW9uKGl0ZW0pIHtcclxuXHQgICAgXHRcdCAgICBcdHJldHVybiB0aGlzLnNwbGljZSh0aGlzLmxlbmd0aCwwLGl0ZW0pO1xyXG5cdCAgICBcdFx0ICAgIH1cclxuXHQgICAgXHRcdH1cclxuXHQgICAgXHRcdGlmKHByb3BlcnR5PT09XCJwb3BcIikge1xyXG5cdCAgICBcdFx0XHQgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG5cdCAgICBcdFx0ICAgIFx0cmV0dXJuIHRoaXMuc3BsaWNlKHRoaXMubGVuZ3RoLTEsMSk7XHJcblx0ICAgIFx0XHQgICAgfVxyXG5cdCAgICBcdFx0fVxyXG5cdCAgICBcdFx0aWYocHJvcGVydHk9PT1cInVuc2hpZnRcIikge1xyXG5cdCAgICBcdFx0XHQgcmV0dXJuIGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIFx0XHQgICAgXHRcdHJldHVybiB0aGlzLnNwbGljZSgwLDAsaXRlbSk7XHJcbiAgICBcdFx0ICAgIFx0fVxyXG5cdCAgICBcdFx0fVxyXG5cdCAgICBcdFx0aWYocHJvcGVydHk9PT1cInNoaWZ0XCIpIHtcclxuXHQgICAgXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xyXG5cdCAgICBcdCAgICBcdFx0cmV0dXJuIHRoaXMuc3BsaWNlKDAsMSk7XHJcblx0ICAgIFx0ICAgIFx0fVxyXG5cdCAgICBcdFx0fVxyXG5cdCAgICBcdFx0cmV0dXJuIHRhcmdldFtwcm9wZXJ0eV07XHJcblx0ICAgIFx0fX0pO1xyXG5cdCAgICBcdHZhciBwcm94eSA9IE9iamVjdC5vYnNlcnZlKGFycmF5cHJveHksZnVuY3Rpb24oY2hhbmdlc2V0KSB7IFxyXG5cdCAgICBcdFx0dmFyIGNoYW5nZXMgPSBjaGFuZ2VzZXQuZmlsdGVyKGZ1bmN0aW9uKGNoYW5nZSkgeyByZXR1cm4gY2hhbmdlLm5hbWUhPT1cImxlbmd0aFwiICYmIGNoYW5nZS5uYW1lIT09XCJhZGRcIiAmJiAoIWFjY2VwdGxpc3QgfHwgYWNjZXB0bGlzdC5pbmRleE9mKGNoYW5nZS50eXBlKT49MCk7IH0pO1xyXG5cdCAgICBcdFx0aWYoY2hhbmdlcy5sZW5ndGg+MCkge1xyXG5cdCAgICBcdFx0XHRjYWxsYmFjayhjaGFuZ2VzKTtcclxuXHQgICAgXHRcdH1cclxuXHQgICAgXHR9LGFjY2VwdGxpc3QscGF1c2FibGUscGF1c2UsZGVsYXkpO1xyXG5cdCAgICBcdHJldHVybiBwcm94eTtcclxuXHQgICAgfTtcclxuXHQgICAgQXJyYXkudW5vYnNlcnZlID0gZnVuY3Rpb24ob2JqZWN0LGNhbGxiYWNrKSB7XHJcblx0XHQgIHJldHVybiBvYmplY3QudW5vYnNlcnZlKGNhbGxiYWNrKTtcclxuXHQgICAgfVxyXG5cdH1cclxuXHRPYmplY3QuZGVlcE9ic2VydmUgPSBmdW5jdGlvbihvYmplY3QsY2FsbGJhY2sscGFydHMpIHtcclxuXHJcblx0XHRwYXJ0cyA9IChwYXJ0cyA/IHBhcnRzIDogW10pO1xyXG5cclxuXHRcdHZhciB0b1R5cGVOYW1lID0gZnVuY3Rpb24ob2JqKSB7XHJcblx0XHRcdHJldHVybiAoe30pLnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXFxzKFthLXpBLVpdKykvKVsxXS50b0xvd2VyQ2FzZSgpXHJcblx0XHR9XHJcblxyXG5cdFx0ZnVuY3Rpb24gcmVvYnNlcnZlKHZhbHVlLCBwYXJ0cykge1xyXG5cdFx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcclxuXHRcdFx0a2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xyXG5cdFx0XHRcdGlmKCh0b1R5cGVOYW1lKHZhbHVlW2tleV0pID09PSAnb2JqZWN0JyB8fCB0b1R5cGVOYW1lKHZhbHVlW2tleV0pID09PSAnYXJyYXknKSAmJiAhdmFsdWVba2V5XS5oYXNPd25Qcm9wZXJ0eSgnX19vYnNlcnZlcnNfXycpKSB7XHJcblx0XHRcdFx0XHR2YXIgbmV3cGFydHMgPSBwYXJ0cy5zbGljZSgwKTtcclxuXHRcdFx0XHRcdG5ld3BhcnRzLnB1c2goa2V5KTtcclxuXHRcdFx0XHRcdHZhbHVlW2tleV0gPSBPYmplY3QuZGVlcE9ic2VydmUodmFsdWVba2V5XSxjYWxsYmFjayxuZXdwYXJ0cyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZW9ic2VydmUob2JqZWN0LCBwYXJ0cyk7XHJcblxyXG5cdFx0dmFyIG9ic2VydmVkID0gT2JqZWN0Lm9ic2VydmUob2JqZWN0LGZ1bmN0aW9uKGNoYW5nZXNldCkge1xyXG5cdFx0XHR2YXIgY2hhbmdlcyA9IFtdO1xyXG5cdFx0XHRmdW5jdGlvbiByZWN1cnNlKG5hbWUscm9vdE9iamVjdCxvbGRPYmplY3QsbmV3T2JqZWN0LHBhdGgpIHtcclxuXHRcdFx0XHRpZihuZXdPYmplY3QgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuXHRcdFx0XHRcdHZhciBuZXdrZXlzID0gT2JqZWN0LmtleXMobmV3T2JqZWN0KTtcclxuXHRcdFx0XHRcdG5ld2tleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuXHRcdFx0XHRcdFx0aWYoIW9sZE9iamVjdCB8fCAob2xkT2JqZWN0W2tleV0hPT1uZXdPYmplY3Rba2V5XSkpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgb2xkdmFsdWUgPSAob2xkT2JqZWN0ICYmIG9sZE9iamVjdFtrZXldIT09dW5kZWZpbmVkID8gb2xkT2JqZWN0W2tleV0gOiB1bmRlZmluZWQpLFxyXG5cdFx0XHRcdFx0XHRcdFx0Y2hhbmdlID0gKG9sZHZhbHVlPT09dW5kZWZpbmVkID8gXCJhZGRcIiA6IFwidXBkYXRlXCIpLFxyXG5cdFx0XHRcdFx0XHRcdFx0a2V5cGF0aCA9IHBhdGggKyBcIi5cIiArIGtleTtcclxuXHJcblx0XHRcdFx0XHRcdFx0Y2hhbmdlcy5wdXNoKHtuYW1lOm5hbWUsb2JqZWN0OnJvb3RPYmplY3QsdHlwZTpjaGFuZ2Usb2xkVmFsdWU6b2xkdmFsdWUsbmV3VmFsdWU6bmV3T2JqZWN0W2tleV0sa2V5cGF0aDprZXlwYXRofSk7XHJcblx0XHRcdFx0XHRcdFx0cmVjdXJzZShuYW1lLHJvb3RPYmplY3Qsb2xkdmFsdWUsbmV3T2JqZWN0W2tleV0sa2V5cGF0aCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0gZWxzZSBpZihvbGRPYmplY3QgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuXHRcdFx0XHRcdHZhciBvbGRrZXlzID0gT2JqZWN0LmtleXMob2xkT2JqZWN0KTtcclxuXHRcdFx0XHRcdG9sZGtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcclxuXHRcdFx0XHRcdFx0dmFyIGNoYW5nZSA9IChuZXdPYmplY3Q9PT1udWxsID8gXCJ1cGRhdGVcIiA6IFwiZGVsZXRlXCIpLFxyXG5cdFx0XHRcdFx0XHRcdGtleXBhdGggPSBwYXRoICsgXCIuXCIgKyBrZXk7XHJcblx0XHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdGNoYW5nZXMucHVzaCh7bmFtZTpuYW1lLG9iamVjdDpyb290T2JqZWN0LHR5cGU6Y2hhbmdlLG9sZFZhbHVlOm9sZE9iamVjdFtrZXldLG5ld1ZhbHVlOm5ld09iamVjdCxrZXlwYXRoOmtleXBhdGh9KTtcclxuXHRcdFx0XHRcdFx0cmVjdXJzZShuYW1lLHJvb3RPYmplY3Qsb2xkT2JqZWN0W2tleV0sdW5kZWZpbmVkLGtleXBhdGgpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGNoYW5nZXNldC5mb3JFYWNoKGZ1bmN0aW9uKGNoYW5nZSkge1xyXG5cdFx0XHRcdHZhciBrZXlwYXRoID0gKHBhcnRzLmxlbmd0aD4wID8gcGFydHMuam9pbihcIi5cIikgKyBcIi5cIiA6IFwiXCIpICsgY2hhbmdlLm5hbWU7XHJcblxyXG5cdFx0XHRcdGlmIChjaGFuZ2UudHlwZSA9PT0gXCJ1cGRhdGVcIiB8fCBjaGFuZ2UudHlwZSA9PT0gXCJhZGRcIikgeyBcclxuXHRcdFx0XHRcdHJlb2JzZXJ2ZShjaGFuZ2Uub2JqZWN0LCBwYXJ0cyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRjaGFuZ2VzLnB1c2goe25hbWU6Y2hhbmdlLm5hbWUsb2JqZWN0OmNoYW5nZS5vYmplY3QsdHlwZTpjaGFuZ2UudHlwZSxvbGRWYWx1ZTpjaGFuZ2Uub2xkVmFsdWUsbmV3VmFsdWU6Y2hhbmdlLm9iamVjdFtjaGFuZ2UubmFtZV0sa2V5cGF0aDprZXlwYXRofSk7XHJcblx0XHRcdFx0cmVjdXJzZShjaGFuZ2UubmFtZSxjaGFuZ2Uub2JqZWN0LGNoYW5nZS5vbGRWYWx1ZSxjaGFuZ2Uub2JqZWN0W2NoYW5nZS5uYW1lXSxrZXlwYXRoKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGNhbGxiYWNrKGNoYW5nZXMpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gb2JzZXJ2ZWQ7XHJcblx0fTtcclxufSkoKTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJveHktb2JzZXJ2ZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///464\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __webpack_require__(40);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _assign = __webpack_require__(96);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nvar _Identity = __webpack_require__(466);\n\nvar _Identity2 = _interopRequireDefault(_Identity);\n\nvar _Crypto = __webpack_require__(467);\n\nvar _Crypto2 = _interopRequireDefault(_Crypto);\n\nvar _GuiFake = __webpack_require__(469);\n\nvar _GuiFake2 = _interopRequireDefault(_GuiFake);\n\nvar _Utils = __webpack_require__(201);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('IdentityModule'); // Log System\n\n/**\n*\n* The Identity Module (Id Module) is the component responsible for handling the\n* user identity and the association of this identity with the Hyperty instances,\n* in order to make Hyperty instances identifiable. The identity in the reTHINK project\n* is not fixed to a unique Identity Service Provider, but obtained through several\n* different Identity sources. With this approach, the Id Module provides to the user the\n* option to choose the preferred method for authentication.\n* This module will thus able to support multiple Identity acquisition methods,\n* such as OpenID connect 1.0, Kerberos System, or authentication through smart cards.\n* For example, a user with a Google account can use the Google as an Identity Provider to provide Identity Tokens,\n*  which can be used by the Identity Module to associate it with a Hyperty instance.\n*\n* The Identity Module uses a node package, the HelloJS, which is a client-side JavaScript API for authentication\n* that facilitates the requests for the OpenID connect protocol. This method allows for some abstraction\n* when making requests for different Identity Providers, such as OpenID connect used by Google, Facebook, Microsoft, for example.\n*\n* When a request for a user identity is made using the method loginWithRP(identifier, scope),\n* this method will analyse the Identity Provider chosen to obtain an identity and will use the HelloJS node package\n* with the selected Identity Provider and identity scope. After the HelloJS request for an Access Token\n* to the Identity Providers, the user will be prompted to authenticate towards the Identity Provider.\n* Upon receiving the Access Token, this token is validated with a RESTful web service request to an endpoint\n* on the Identity Provider Authorization Server, and after the validation is done,\n* an ID token is obtained with the information according to the scope required.\n* This ID token is then preserved in this module that can obtained through the getIdentities()\n* and is passed as return value of the loginWithRP function. The methods generateAssertion and validateAssertion have not yet been developed.\n*\n*/\nvar IdentityModule = function () {\n\n  /**\n  * This is the constructor to initialise the Identity Module it does not require any input.\n  */\n  function IdentityModule(runtimeURL, runtimeCapabilities, storageManager, dataObjectsStorage, runtimeFactory) {\n    (0, _classCallCheck3.default)(this, IdentityModule);\n\n    var _this = this;\n\n    if (!runtimeURL) throw new Error('runtimeURL is missing.');\n    if (!storageManager) throw new Error('storageManager is missing');\n    if (!runtimeFactory) throw new Error('runtimeFactory is missing');\n\n    _this._runtimeURL = runtimeURL;\n    _this.storageManager = storageManager;\n    _this.dataObjectsStorage = dataObjectsStorage;\n    _this._idmURL = _this._runtimeURL + '/idm';\n    _this._guiURL = _this._runtimeURL + '/identity-gui';\n    _this.runtimeCapabilities = runtimeCapabilities;\n    _this.runtimeFactory = runtimeFactory;\n\n    _this._domain = (0, _utils.divideURL)(_this._runtimeURL).domain;\n\n    _this.watchingYou = new _Utils.WatchingYou();\n\n    //to store items with this format: {identity: identityURL, token: tokenID}\n    _this.identities = [];\n    _this.identitiesList = _this.watchingYou.watch('identitiesList', {}, true);\n    _this.emailsList = [];\n    var newIdentity = new _Identity2.default('guid', 'HUMAN');\n    _this.identity = newIdentity;\n    _this.crypto = new _Crypto2.default(_this.runtimeFactory);\n    _this.currentIdentity;\n    _this.defaultIdentity;\n\n    //stores the association of the dataObject and the Hyperty registered within\n    _this.dataObjectsIdentity = {};\n\n    // hashTable to store all the crypto information between two hyperties\n    _this.chatKeys = {};\n\n    // hashTable to store the symmetric keys to be used in the chat group\n    _this.dataObjectSessionKeys = {};\n\n    //failsafe to enable/disable all the criptographic functions\n    _this.isToUseEncryption = true;\n\n    // variable to know if the GUI is deployed to choose the identity. if the real GUI is not deployed, a fake gui is deployed instead.\n    _this.guiDeployed = false;\n\n    // verification of nodeJS, and in case it is nodeJS then disable encryption\n    // TODO improve later, this exists because the crypto lib uses browser cryptographic methods\n    //_this.isToUseEncryption = (window) ? true : false;\n\n    // _this.loadIdentities();\n  }\n\n  //******************* GET AND SET METHODS *******************\n\n  /**\n  * return the messageBus in this Registry\n  * @param {MessageBus}           messageBus\n  */\n\n\n  (0, _createClass3.default)(IdentityModule, [{\n    key: 'getIdentity',\n\n\n    //******************* IDENTITY RELEATED METHODS *******************\n    /**\n    * gets all the information from a given userURL\n    * @param  {String}  userURL     user url\n    * @return {JSON}    identity    identity bundle from the userURL\n    */\n    value: function getIdentity(userURL) {\n      var _this = this;\n\n      for (var index in _this.identities) {\n\n        var identity = _this.identities[index];\n\n        if (identity.identity === userURL) {\n          return identity;\n        }\n      }\n\n      throw 'identity not found';\n    }\n\n    /**\n    * Function to set the current Identity with a given Identity\n    * @param {Identity}        identity         identity\n    */\n\n  }, {\n    key: 'setCurrentIdentity',\n    value: function setCurrentIdentity(identity) {\n      var _this = this;\n      _this.currentIdentity = identity;\n    }\n\n    /**\n    * Function to return all the identities registered within a session by a user.\n    * These identities are returned in an array containing a JSON package for each user identity.\n    * @return {Array<Identities>}         Identities\n    */\n\n  }, {\n    key: 'getIdentities',\n    value: function getIdentities() {\n      var _this = this;\n      return _this.identities;\n    }\n  }, {\n    key: 'getIdentitiesToChoose',\n    value: function getIdentitiesToChoose() {\n      var _this = this;\n      var identities = _this.emailsList;\n\n      // let idps = [\n      //   { domain: 'google.com', type: 'idToken'},\n      //   { domain: 'microsoft.com', type: 'idToken'},\n      //   { domain: 'orange.fr', type: 'idToken'},\n      //   { domain: 'slack.com', type: 'Legacy'}\n      // ];\n\n      var idps = [{ domain: 'google.com', type: 'idToken' }, { domain: 'microsoft.com', type: 'idToken' }, { domain: 'slack.com', type: 'Legacy' }];\n\n      return { identities: identities, idps: idps };\n    }\n\n    /**\n    * Function to return the selected Identity within a session\n    * @return {Identity}        identity         identity\n    */\n\n  }, {\n    key: 'getCurrentIdentity',\n    value: function getCurrentIdentity() {\n      var _this = this;\n      return _this.currentIdentity;\n    }\n  }, {\n    key: 'loadIdentities',\n    value: function loadIdentities() {\n      var _this = this;\n      return new _promise2.default(function (resolve) {\n\n        _this.storageManager.get('idModule:identities').then(function (identities) {\n\n          if (identities) {\n            _this.identities = identities;\n\n            identities.forEach(function (identity) {\n              var timeNow = _this._secondsSinceEpoch();\n              var expires = 0;\n\n              if (identity.info && identity.info.expires) {\n                expires = identity.info.expires;\n              } else if (identity.info && identity.info.tokenIDJSON && identity.info.tokenIDJSON.exp) {\n                expires = identity.info.tokenIDJSON.exp;\n              }\n\n              if (!identity.hasOwnProperty('interworking') && !identity.interworking) {\n                _this.defaultIdentity = identity.messageInfo;\n\n                if (parseInt(expires) > timeNow) {\n                  _this.defaultIdentity.expires = parseInt(expires);\n                  _this.currentIdentity = _this.defaultIdentity;\n                }\n              }\n            });\n          }\n          resolve();\n        });\n      });\n    }\n\n    /**\n    * Function that fetch an identityAssertion from a user.\n    *\n    * @return {IdAssertion}              IdAssertion\n    */\n\n  }, {\n    key: 'getIdentityAssertion',\n    value: function getIdentityAssertion(identityBundle) {\n      log.log('[getIdentityAssertion:identityBundle]', identityBundle);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //CHECK whether is browser environment or nodejs\n        //if it is browser, then create a fake identity\n\n        _this.runtimeCapabilities.isAvailable('browser').then(function (result) {\n          log.log('runtime browser identity acquisition', result);\n\n          if (!result) return;\n\n          //todo: only idp should be mandatory when identityBundle exists\n\n          if (identityBundle && identityBundle.hasOwnProperty('idp')) {\n\n            var idp = identityBundle.idp;\n            var origin = identityBundle.hasOwnProperty('origin') ? identityBundle.origin : 'origin';\n            var idHint = identityBundle.hasOwnProperty('idHint') ? identityBundle.idHint : '';\n\n            _this.selectIdentityForHyperty(origin, idp, idHint).then(function (assertion) {\n              log.log('[IdentityModule] Identity selected by hyperty.');\n              return resolve(assertion);\n            }, function (err) {\n              // if it got an error then just select identity from GUI\n              // console.error('[IdentityModule] Could not select identity from hyperty.');\n              _this.selectIdentityFromGUI().then(function (newAssertion) {\n                log.log('[IdentityModule] Identity selected by hyperty.');\n                return resolve(newAssertion);\n              }, function (err) {\n                return reject(err);\n              });\n            });\n          } else {\n\n            if (_this.defaultIdentity && _this.defaultIdentity.expires > _this._secondsSinceEpoch()) {\n              return resolve(_this.defaultIdentity);\n            } else {\n              _this.selectIdentityFromGUI().then(function (assertion) {\n\n                log.log('[IdentityModule] Identity selected from GUI.');\n\n                if (assertion.hasOwnProperty('messageInfo')) {\n                  _this.defaultIdentity = assertion.messageInfo;\n                  return resolve(assertion.messageInfo);\n                }\n\n                _this.defaultIdentity = assertion;\n                return resolve(assertion);\n              }, function (err) {\n                return reject(err);\n              });\n            }\n          }\n        }).catch(function (error) {\n          console.error('Error on identity acquisition ', error);\n          return reject(error);\n        });\n\n        _this.runtimeCapabilities.isAvailable('node').then(function (result) {\n          log.log('node identity acquisition', result);\n\n          if (!result) return;\n\n          if (_this.currentIdentity !== undefined) {\n            //TODO verify whether the token is still valid or not.\n            // should be needed to make further requests, to obtain a valid token\n            return resolve(_this.currentIdentity);\n          } else {\n            log.log('getIdentityAssertion for nodejs');\n\n            var idp = { type: 'idp', value: 'nodejs-idp', code: 200, auth: false };\n            _this.callNodeJsGenerateMethods(idp.value, 'origin').then(function (value) {\n              resolve(value);\n            }, function (err) {\n              reject(err);\n            });\n          }\n        }).catch(function (error) {\n          console.error('Error on identity acquisition ', error);\n          reject(error);\n        });\n      });\n    }\n\n    /**\n    * Function to return all the users URLs registered within a session\n    * These users URLs are returned in an array of strings.\n    * @param  {Boolean}  emailFormat (Optional)   boolean to indicate to return in email format\n    * @return {Array<String>}         users\n    */\n\n  }, {\n    key: 'getUsersIDs',\n    value: function getUsersIDs(emailFormat) {\n      log.log('[getUsersIDs:emailFormat]', emailFormat);\n      log.log('getUsersIDs:emailFormat', emailFormat);\n      var _this = this;\n      var users = [];\n\n      //if request comes with the emailFormat option, then convert url to email format\n      var converter = emailFormat ? _utils.getUserEmailFromURL : function (value) {\n        return value;\n      };\n\n      for (var index in _this.identities) {\n        var identity = _this.identities[index];\n        users.push(converter(identity.identity));\n      }\n\n      return users;\n    }\n\n    /**\n    * Function to remove an identity from the Identities array\n    * @param {String}    userURL      userURL\n    */\n\n  }, {\n    key: 'deleteIdentity',\n    value: function deleteIdentity(userURL) {\n      var _this = this;\n\n      //let userURL = convertToUserURL(userID);\n\n      for (var identity in _this.identities) {\n        if (_this.identities[identity].identity === userURL) {\n          _this.identities.splice(identity, 1);\n        }\n      }\n    }\n\n    /**\n    * Function to unregister an identity from the emailsList array and not show in to the GUI\n    * @param {String}    email      email\n    */\n\n  }, {\n    key: 'unregisterIdentity',\n    value: function unregisterIdentity(email) {\n      var _this = this;\n\n      for (var e in _this.emailsList) {\n        if (_this.emailsList[e] === email) {\n          _this.emailsList.splice(e, 1);\n        }\n      }\n    }\n\n    /**\n    * Function that sends a request to the GUI using messages. Sends all identities registered and\n    * the Idps supported, and return the identity/idp received by the GUI\n    * @param {Array<identity>}  identities      list of identitiies\n    * @param {Array<String>}    idps            list of idps to authenticate\n    * @return {Promise}         returns a chosen identity or idp\n    */\n\n  }, {\n    key: 'requestIdentityToGUI',\n    value: function requestIdentityToGUI(identities, idps) {\n      log.log('[requestIdentityToGUI:identities]', identities);\n      log.log('[requestIdentityToGUI:idps]', idps);\n\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n\n        //condition to check if the real GUI is deployed. If not, deploys a fake gui\n        if (_this.guiDeployed === false) {\n          var guiFakeURL = _this._guiURL;\n          var guiFake = new _GuiFake2.default(guiFakeURL, _this._messageBus);\n          _this.guiFake = guiFake;\n          _this.guiDeployed = true;\n        }\n\n        var message = { type: 'create', to: _this._guiURL, from: _this._idmURL,\n          body: { value: { identities: identities, idps: idps } } };\n\n        var id = _this._messageBus.postMessage(message);\n\n        //add listener without timout\n        try {\n          _this._messageBus.addResponseListener(_this._idmURL, id, function (msg) {\n            _this._messageBus.removeResponseListener(_this._idmURL, id);\n\n            // todo: to return the user URL and not the email or identifier\n\n            if (msg.body.code === 200) {\n              var selectedIdentity = msg.body;\n\n              log.log('selectedIdentity: ', selectedIdentity.value);\n              resolve(selectedIdentity);\n            } else {\n              reject('error on requesting an identity to the GUI');\n            }\n          });\n        } catch (err) {\n          reject('In method callIdentityModuleFunc error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: 'callNodeJsGenerateMethods',\n    value: function callNodeJsGenerateMethods(idp, origin) {\n      log.log('[callNodeJsGenerateMethods:idp]', idp);\n      log.log('[callNodeJsGenerateMethods:origin]', origin);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        //debugger;\n        var publicKey = void 0;\n        var userkeyPair = void 0;\n\n        //generates the RSA key pair\n        _this.crypto.generateRSAKeyPair().then(function (keyPair) {\n\n          log.log('[callNodeJsGenerateMethods:keyPair.public]', keyPair.public);\n\n          publicKey = _this.crypto.encode(keyPair.public);\n          userkeyPair = keyPair;\n\n          //log.log('[callNodeJsGenerateMethods:generateSelectedIdentity] NO_URL');\n          //    return _this.generateAssertion(publicKey, origin, '', userkeyPair, idp);\n          //}).then(function(url) {\n\n          log.log('[callNodeJsGenerateMethods:generateSelectedIdentity] NO_URL');\n\n          var url = 'https://localhost/#state=state&code=4/-mlGUZDkPUC79MzA9sd4Sk5vMJLihmmxFvewM8yJrbs&access_token=ya29.Glv3BKDuB09-tnIKKu5WT_Zextcd7ysgWKvZbvGv-RYI0HaQ76qwIvsTF3sVuJfh2e-cztojXy0ZsjHSfa1cMfnqNKYtjg8Z2qm0POvZkJODsNVUdO2-oz7dHhvr&token_type=Bearer&expires_in=3600&id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6ImI3NjcxOTI2M2NlYWFkZTkyZGI5YTMxMzI4YWRhNDRiNzE5MjA3ZjcifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMTc5NTkxMDUyOTU3NjE2ODc4ODkiLCJlbWFpbCI6InRlc3RhbmR0aGluazEyM0BnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6Ikl6NnZJNXRremZlelY2VDVadGVtdEEiLCJjX2hhc2giOiI1ZGV6Z1FrTTFyZ25FVTJFanpTUFVBIiwibm9uY2UiOiJORGdzTVRNd0xERXNNelFzTkRnc01UTXNOaXc1TERReUxERXpOQ3czTWl3eE16UXNNalEzTERFekxERXNNU3d4TERVc01Dd3pMREV6TUN3eExERTFMREFzTkRnc01UTXdMREVzTVRBc01pd3hNekFzTVN3eExEQXNNVGd3TERFME1pd3lNekFzTWpJeUxESXpMREU1T0N3eU9Td3hOVFlzTVRFeUxESXpOaXd4TWpZc01qSXlMREkwTml3ME15dzROaXc0TUN3eE9Ea3NNVFE0TERZNExERTVOaXd4TmpJc09USXNOakVzTWpZc01qUTRMRE15TERJeE5TdzROU3d4T1RJc01UVXhMRGs0TERRM0xESTBNaXd4TVN3eE56UXNNVGNzTWpJeUxERXhNeXd5TkRrc09EVXNNVE0xTERFeU9Dd3lOVFFzTVRJMUxERTNOQ3d5TURBc01UYzRMRGd4TERZMkxEazRMRFUwTERFMU1Td3hNelFzTVRJMUxETTFMREl5TVN3eE9UZ3NNeklzTVRBNUxETTJMRGNzTnpJc01UVTVMRFUyTERZekxEWXlMRGMwTERFNU1Td3hNellzTVRVc016WXNNVGd3TERFM09Td3hOVGdzTlRFc01UZ3NNVGt5TERFM01pd3lNamtzTWpVMUxERXhPU3cxTnl3eU16QXNNakFzTWpReUxESXdNaXd4T0RBc01URXdMREUyTnl3NE15d3lORGNzTVRVekxERTVPU3c1TVN3eE1qVXNNVGt5TERJeE9Dd3hNeXd4TlRrc01qRTNMREV5Tnl3eE1EUXNNakUwTERRNExEVXNNVEl4TERJeU9Dd3pNeXd4TWpZc09UUXNNVEU0TERneExERTJNaXd4TURJc01URXdMRGMxTERrNExETXhMREl3TWl3ek5Td3hOemtzTVRRc016Y3NNVElzTWpFMkxEWTFMREkwTlN3Mk5Td3hNRFVzTWpNM0xESTBOU3d4TkRBc01UZzBMRFU0TERJeU15dzNOeXd4TXpVc01qVXlMRElzTkRjc01UQTBMRFU1TERJMU5Td3lNVFlzTVRNM0xERTFNeXd5Tnl3eE56SXNNakl3TERFMU9Td3hPVFVzTWpFeUxESTVMREV4Tml3eE1EVXNNVEUyTERJeE1pd3lORGdzTnl3MU1pd3lPQ3d4TlRBc016QXNNamNzTWpFc01UY3NNVEkzTERnNExEVTBMREUzTkN3eE15dzBPU3d5TWpJc01UY3lMREl4TXl3eE1EZ3NNVFl5TERRM0xERTROaXd4TXpBc01qSTJMRFFzTVRjc01UZzVMRGcxTERFNE5Dd3lNVGNzTVRnMUxERTFNaXd4TVRrc01UQTBMREU1TXl3MU5Dd3lNVEVzTVRZeExERTVNU3d6TVN3ek9Dd3hNamtzTVRFM0xESXdOU3d4TURRc05pd3hOelVzTWpFNUxERXhOQ3czTERnMkxERTJNeXd4TWpZc01qVXpMREl4TXl3ek5pd3hNamtzTVRJc01UWTBMREV5Tnl3eU1qY3NNakF6TERnMUxEWTJMREl6TERVM0xERTBMREU1Tnl3eU9Dd3lOVElzTWpJeExEUXNNelFzTWpVd0xERTNOU3d5TVRnc01UZzFMREV4T1N3M01Dd3lORFlzTVRNMkxEZzVMREl3TERjd0xERXlNaXd4TURjc01qSXdMRGMxTERJd01Td3hOekFzTkRNc01qTXdMREl6Tml3ME55d3hNQ3d5TURjc01URTFMREkyTERFek1Td3lMRE1zTVN3d0xERT0iLCJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwianRpIjoiNDU0MTM3NGVjMmY1OWExMWMwNWE0NDFjMTRmMTJkNTllY2UxYzVmYiIsImlhdCI6MTUwOTY0MDA0OSwiZXhwIjoxNTA5NjQzNjQ5fQ.vlWWkWcz333hA4lY0onl2jeat5eHCKvyMD_m-KieMtGqcLhtknMl3HbYTABL2k3HEdqbnNlD1G6OyRG-nDWt6qWCgI-gGJ6ZeU9Xrd5fPlFyRPj-FOAhA514uaYss10GYgt5XoArV7oXrR1-FNVZVNhyioggqJjJ4xtnZ6_j0isUxE7uZTlJLX8ixL44eoPVujmXKIJaXRYp0xf3626rnBz8znmGTt1G1jTwMNZmhZc8LxSauVFMLLoRjmLgNKgsGJNKN3ND7H6rsD0Vw5t24tlBwT_fsYIPauJJVZeqpmzy6L-pCEPUc0oJ7OqML84MB2W2zTq4uv6bMh4nQ_mdrA&authuser=0&session_state=44077304f5ec024da73af13a720afad0e4cb945d..2df8&prompt=consent';\n          _this.myHint = url;\n\n          return _this.generateAssertion(publicKey, origin, url, userkeyPair, idp);\n        }).then(function (value) {\n          if (value) {\n            resolve(value);\n          } else {\n            reject('Error on obtaining Identity');\n          }\n        }).catch(function (err) {\n          log.log(err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: 'fakeNodePopUp',\n    value: function fakeNodePopUp() {\n      log.log('[fakeNodePopUp]');\n      return new _promise2.default(function (resolve, reject) {\n\n        var url = 'https://localhost/#state=state&code=4/xWFnH5iLpxv4W4Bm58oVqDK6vwVessKKMoNs-LsSKNY&access_token=ya29.GlsVBM3VBlBR1YNREuXqOr4G_UzvoL_y64YtOGGKJJ-QlasBW-HrV0b1HsxR4uNB7r-N-pElCleW6kNYW4WIIr6mOSp1euVD09eoDXtVZZFHuU8LEzcGYmVV7QLh&token_type=Bearer&expires_in=3600&id_token=eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ5N2Y2MGIxMjRhNjc1NDI2NDhlYjIzYjc0YmY4YTg2MDJkY2I4YTYifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMTE5MzQyMzM2MzI1MjAwNzc3NDMiLCJlbWFpbCI6Im9wZW5pZHRlc3QxMEBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6Im94X1Vva3FwRDNkMjBpZzRXeEd2WlEiLCJjX2hhc2giOiJFem9RYmNwdGJxQlhoa0NEZGVOUFNRIiwibm9uY2UiOiJORGdzTVRNd0xERXNNelFzTkRnc01UTXNOaXc1TERReUxERXpOQ3czTWl3eE16UXNNalEzTERFekxERXNNU3d4TERVc01Dd3pMREV6TUN3eExERTFMREFzTkRnc01UTXdMREVzTVRBc01pd3hNekFzTVN3eExEQXNNVGd4TERFeU9Dd3hNRGdzTVRnekxESTFNeXd5TlN3eU16WXNPVGdzT0RBc016a3NNakl4TERrekxESXhMRFV4TERFNUxERXlMRFEzTERFd0xESTFOU3d5Tnl3eU1qWXNNVFV4TERFNU55d3hNRGNzTVRRekxERTJOeXd4T1N3eE5EQXNNVGs1TERFNE9Dd3lNelFzTVRNMUxEVTFMREl3TlN3eU1Ua3NNVGdzT0RRc01qSXlMREV4TUN3eU1Ea3NNVFU1TERFNE5Td3lORFFzTWpRM0xERXhPQ3d4T0RBc01qQXhMREV6T1N3eE1pd3lNakFzTVRBNExERTROaXd6T1N3eU1qQXNPRFFzTVRVeExESTFNeXd6TlN3MU1Td3hPVEVzT0RFc01UYzBMREU0T1N3NExEa3dMREkxTWl3eU1EWXNNalFzTVRVekxERTRPQ3d5TlRJc01qUXhMRFV4TERFMU9TdzVMREU0TERFM05Dd3pNaXd4T0RNc01qSXpMREU1Tml3ME1Td3hOeklzTlRNc01qRXNNemNzTWpReUxERTNOeXd4T1Rjc05Dd3lOQ3d4Tnprc01UYzRMREUxTnl3eE1UWXNNakkyTERjd0xERXdPQ3d4TkRFc01UZzVMREU1TWl3eU16Z3NNVEE0TERFeU9Dd3hNelFzTkRBc01pd3hOemtzTmpjc01UQXhMRE01TERjM0xESXhPQ3cwT0N3eU5UQXNNVGsyTERjd0xEZzBMREUyTml3eE55d3hOVFlzTlRZc01UTTFMRFFzTkRNc01UYzRMREkxTkN3ME5Dd3lOeXd4Tnpjc01UYzRMREUwTlN3eE5ESXNNVFF3TERJMUxERTBOU3d4TnpNc05ERXNNVEl4TERJeU9Dd3lORGtzTkRrc01UVTJMREl5TUN3eE1ESXNNVGd4TERFeUxERXdMREl4TkN3eE1Ea3NOVFFzTVRrekxESTBNQ3d5TVRZc01qRTRMRGNzTVRBNUxEa3dMREl4Tnl3ek1Dd3lORGNzTVRReExERTFOeXcxT1N3eU1qWXNORFlzTVRVMUxEUTBMREUxTml3NU55dzBPQ3d4T0Rrc01USXpMREU0TWl3eE5qVXNNalF3TERFd05TdzNPQ3d4T1Rnc05Ua3NNalVzTVRreUxESXhNeXd4TlRVc09EUXNNVGtzT1Rnc09EZ3NPVGNzTVRFNExERTVNU3czT1N3eE1EZ3NNakl4TERFd05Dd3lNVElzTlRBc016QXNNVGt5TERFeE1TdzNNeXd4T0RFc01USTRMRGt5TERFME9Dd3lNVEFzTWpBMExESXlNQ3d5TXpjc01UTTRMREkwTml3eE9Ea3NNVGsyTERFNE55d3pOU3d5TVRnc01qVXpMRFUzTERNd0xEWTFMRFkyTERFd015d3lPQ3d4TlRBc01USXNNakEwTERRd0xEZzBMRFF5TERFd05DdzJOU3d4TmpRc01UUTJMREl5Tnl3NE1pdzJMREUyTERFMk55d3hNak1zTVRrc01qSXhMREV6TVN3eE5UUXNOREVzT1RZc05qZ3NNakVzTVRRd0xESTJMRGc0TERFeU5pdzJOaXczTnl3NE9TdzNNeXd4T1RNc01pd3pMREVzTUN3eCIsImlzcyI6ImFjY291bnRzLmdvb2dsZS5jb20iLCJpYXQiOjE0OTAxMjEwNDQsImV4cCI6MTQ5MDEyNDY0NH0.GRnWCUx5r5ll9xkCRlYwUjISxi7nQ0OtlayWeqVcmoSf9W0k9HcBH_9U1CA-LJDkJCntDtkSkQyuRF-Sh53S2QYa396fqRZONp1czj6zCIxjZX30--vOvBCGyAI8sC9vssoKciTHn1aQhzDvY7HD4C7gt0KGI3FbtYRGa_RNm6v2ngqwVq0GyqE0KuosgVw0IjxbjOShrwWSHD1UszkEMhf4dQuekrZlvfkEfZN9aWbhy4qQy0y1Eiz0jTP2b5Yp1F1KyUQcgh8ofU2mE19nWzqxsMw-CEnGOUuwjfEGPqTg6ej0TDOz6rkODMvmQ9q33tL6TMbbJWga7DxAOOXSRQ&authuser=0&session_state=68cc1dc43bf1d78f415cc69354e639bdc52fb45f..2f30&prompt=consent';\n        resolve(url);\n      });\n    }\n  }, {\n    key: 'callGenerateMethods',\n    value: function callGenerateMethods(idp, origin) {\n      log.log('[callGenerateMethods:idp]', idp);\n      log.log('[callGenerateMethods:origin]', origin);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var publicKey = void 0;\n        var userkeyPair = void 0;\n\n        //generates the RSA key pair\n        _this.crypto.generateRSAKeyPair().then(function (keyPair) {\n\n          log.log('[callNodeJsGenerateMethods:keyPair.public]', keyPair.public);\n          log.log('[callNodeJsGenerateMethods:keyPair.private]', keyPair.private);\n\n          publicKey = _this.crypto.encode(keyPair.public);\n          userkeyPair = keyPair;\n          log.log('generateAssertion:no_hint');\n          return _this.generateAssertion(publicKey, origin, '', userkeyPair, idp);\n        }).then(function (url) {\n          log.log(['']);\n          _this.myHint = url;\n          log.log('generateAssertion:hint');\n          return _this.generateAssertion(publicKey, origin, url, userkeyPair, idp);\n        }).then(function (value) {\n          if (value) {\n            resolve(value);\n          } else {\n            reject('Error on obtaining Identity');\n          }\n        }).catch(function (err) {\n          console.error(err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: 'loginSelectedIdentity',\n    value: function loginSelectedIdentity(publicKey, origin, idp, keyPair, loginUrl) {\n      log.log('[loginSelectedIdentity:publicKey]', publicKey);\n      log.log('[loginSelectedIdentity:origin]', origin);\n      log.log('[loginSelectedIdentity:idp]', idp);\n      log.log('[loginSelectedIdentity:keyPair]', keyPair);\n      log.log('[loginSelectedIdentity:loginUrl]', loginUrl);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        log.log('[IdentityModule:generateSelectedIdentity] openPopup');\n        _this.callIdentityModuleFunc('openPopup', { urlreceived: loginUrl }).then(function (idCode) {\n          return idCode;\n        }, function (err) {\n          console.error('Error while logging in for the selected identity.');\n          return reject(err);\n        }).then(function (idCode) {\n          _this.sendGenerateMessage(publicKey, origin, idCode, idp).then(function (newResponse) {\n            if (newResponse.hasOwnProperty('assertion')) {\n              _this.storeIdentity(newResponse, keyPair).then(function (result) {\n                resolve('Login was successfull');\n              }).catch(function (err) {\n                reject('Login has failed:' + err);\n              });\n            } else {\n              console.error('Error while logging in for the selected identity.');\n              return reject('Could not generate a valid assertion for selected identity.');\n            }\n          }).catch(function (err) {\n            reject('On loginSelectedIdentity from method sendGenerateMessage error:  ' + err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'selectIdentityForHyperty',\n    value: function selectIdentityForHyperty(origin, idp, idHint) {\n      log.log('[selectIdentityForHyperty:origin]', origin);\n      log.log('[selectIdentityForHyperty:idp]', idp);\n      log.log('[selectIdentityForHyperty:idHint]', idHint);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //generates the RSA key pair\n        _this.crypto.generateRSAKeyPair().then(function (keyPair) {\n          publicKey = _this.crypto.encode(keyPair.public);\n\n          _this.sendGenerateMessage(publicKey, origin, idHint, idp).then(function (response) {\n            if (response.hasOwnProperty('assertion')) {\n              // identity was logged in, just save it\n              _this.storeIdentity(response, keyPair).then(function (value) {\n                return resolve(value);\n              }, function (err) {\n                return reject(err);\n              });\n            } else if (response.hasOwnProperty('loginUrl')) {\n              // identity was not logged in\n              _this.loginSelectedIdentity(publicKey, origin, idp, keyPair, response.loginUrl).then(function (value) {\n                return resolve(value);\n              }, function (err) {\n                return reject(err);\n              });\n            } else {\n              // you should never get here, if you do then the IdP Proxy is not well implemented\n              // console.error('GenerateAssertion returned invalid response.');\n              log.log('Proceeding by logging in.');\n              _this.generateSelectedIdentity(publicKey, origin, idp, keyPair).then(function (value) {\n                return resolve(value);\n              }, function (err) {\n                return reject(err);\n              });\n            }\n          }).catch(function (err) {\n            reject('On selectIdentityForHyperty from method sendGenerateMessage error:  ' + err);\n          });\n        }).catch(function (err) {\n          reject('On selectIdentityForHyperty from method generateRSAKeyPair error:  ' + err);\n        });\n      });\n    }\n  }, {\n    key: 'selectIdentityFromGUI',\n    value: function selectIdentityFromGUI(origin) {\n      log.log('[selectIdentityFromGUI:origin]', origin);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var identitiesInfo = _this.getIdentitiesToChoose();\n\n        _this.requestIdentityToGUI(identitiesInfo.identities, identitiesInfo.idps).then(function (value) {\n\n          if (value.type === 'identity') {\n\n            //  let chosenID = getUserURLFromEmail(value.value);\n            // hack while the user url is not returned from requestIdentityToGUI;\n\n            var chosenID = 'user://' + _this.currentIdentity.idp + '/' + value.value;\n\n            _this.defaultIdentity = _this.currentIdentity;\n\n            // returns the identity info from the chosen id\n            for (var i in _this.identities) {\n              if (_this.identities[i].identity === chosenID) {\n                return resolve(_this.identities[i].messageInfo);\n              }\n            }\n            return reject('no identity was found .');\n          } else if (value.type === 'idp') {\n\n            _this.callGenerateMethods(value.value, origin).then(function (value) {\n              return resolve(value);\n            }, function (err) {\n              return reject(err);\n            });\n          } else {\n            return reject('error on GUI received message.');\n          }\n        }).catch(function (err) {\n          reject('On selectIdentityFromGUI from method requestIdentityToGUI error:  ' + err);\n        });\n      });\n    }\n  }, {\n    key: 'storeIdentity',\n    value: function storeIdentity(result, keyPair) {\n      log.log('[storeIdentity:result]', result);\n      log.log('[storeIdentity:keyPair]', keyPair);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        if (!result.hasOwnProperty('assertion')) {\n          return reject('StoreIdentity: input is not an identity assertion.');\n        }\n\n        var splitedAssertion = result.assertion.split('.');\n        var assertionParsed = void 0;\n\n        //verify if the token contains the 3 components, or just the assertion\n        try {\n          if (splitedAssertion[1]) {\n            assertionParsed = _this.crypto.decode(splitedAssertion[1]);\n          } else {\n            assertionParsed = _this.crypto.decode(result.assertion);\n          }\n        } catch (err) {\n          return reject('In storeIdentity, error parsing assertion: ' + err);\n        }\n\n        var idToken = void 0;\n\n        //TODO remove the verification and remove the tokenIDJSON from the google idpProxy;\n        if (assertionParsed.tokenIDJSON) {\n          idToken = assertionParsed.tokenIDJSON;\n        } else {\n          idToken = assertionParsed;\n        }\n\n        idToken.idp = result.idp;\n\n        var email = idToken.email || idToken.sub;\n\n        // let identifier = getUserURLFromEmail(email);\n\n        var identifier = 'user://' + idToken.idp.domain + '/' + email;\n\n        result.identity = identifier;\n\n        _this.identity.addIdentity(result);\n\n        // check if exists any infoToken in the result received\n        var infoToken = result.infoToken ? result.infoToken : {};\n\n        var commonName = idToken.name || email.substring(0, email.indexOf('@'));\n        var userProfileBundle = { username: email, cn: commonName, avatar: infoToken.picture, locale: infoToken.locale, userURL: identifier };\n\n        var expires = undefined;\n        if (infoToken.hasOwnProperty('exp')) {\n          expires = infoToken.exp;\n        } else if (result.hasOwnProperty('info') && result.info.hasOwnProperty('expires')) {\n          expires = result.info.expires;\n        }\n\n        //creation of a new JSON with the identity to send via messages\n        var newIdentity = { userProfile: userProfileBundle, idp: result.idp.domain, assertion: result.assertion, expires: expires };\n        result.messageInfo = newIdentity;\n        result.keyPair = keyPair;\n\n        _this.currentIdentity = newIdentity;\n\n        //verify if the id already exists. If already exists then do not add to the identities list;\n        //to be reviewed since the identity contains data like the asssrtion and ley pairs that may be different if generated twice\n\n        var idAlreadyExists = false;\n        var oldId = void 0;\n        for (var identity in _this.identities) {\n          if (_this.identities[identity].identity === result.identity) {\n            idAlreadyExists = true;\n            oldId = _this.identities[identity];\n          }\n        }\n\n        if (idAlreadyExists) {\n          // TODO: maybe overwrite the identity\n\n          oldId = (0, _assign2.default)(oldId, result);\n          resolve(oldId.messageInfo);\n          var exists = false;\n\n          //check if the identity exists in emailList, if not add it\n          //This is useful if an identity was previously registered but was later unregistered\n          for (var i in _this.emailsList) {\n            if (_this.emailsList[i] === email) {\n              exists = true;\n              break;\n            }\n          }\n          if (!exists) {\n            _this.emailsList.push(email);\n          }\n        } else {\n          _this.emailsList.push(email);\n          _this.identities.push(result);\n        }\n\n        _this.storageManager.set('idModule:identities', 0, _this.identities).then(function () {\n\n          if (_this.identitiesList[idToken.idp.domain]) {\n            _this.identitiesList[idToken.idp.domain].status = 'created';\n          }\n          log.log('storeIdentity:newID', newIdentity);\n          resolve(newIdentity);\n        }).catch(function (err) {\n          reject('On _sendReporterSessionKey from method storeIdentity error: ' + err);\n        });\n      });\n    }\n  }, {\n    key: 'generateSelectedIdentity',\n    value: function generateSelectedIdentity(publicKey, origin, idp, keyPair) {\n      log.log('[generateSelectedIdentity:publicKey]', publicKey);\n      log.log('[generateSelectedIdentity:origin]', origin);\n      log.log('[generateSelectedIdentity:idp]', idp);\n      log.log('[generateSelectedIdentity:keyPair]', keyPair);\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        log.log('[IdentityModule:generateSelectedIdentity] NO_URL');\n        _this.generateAssertion(publicKey, origin, '', keyPair, idp).then(function (loginUrl) {\n          return loginUrl;\n        }).then(function (url) {\n          log.log('[IdentityModule:generateSelectedIdentity] URL');\n          return _this.generateAssertion(publicKey, origin, url, keyPair, idp);\n        }).then(function (value) {\n          if (value) {\n            return resolve(value);\n          } else {\n            return reject('Error on obtaining Identity');\n          }\n        }).catch(function (err) {\n          console.error(err);\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: 'callIdentityModuleFunc',\n    value: function callIdentityModuleFunc(methodName, parameters) {\n      log.log('[callIdentityModuleFunc:methodName]', methodName);\n      log.log('[callIdentityModuleFunc:parameters]', parameters);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var message = { type: 'execute', to: _this._guiURL, from: _this._idmURL,\n          body: { resource: 'identity', method: methodName, params: parameters } };\n        var id = _this._messageBus.postMessage(message);\n\n        //add listener without timout\n        try {\n          _this._messageBus.addResponseListener(_this._idmURL, id, function (msg) {\n            _this._messageBus.removeResponseListener(_this._idmURL, id);\n            var result = msg.body.value;\n            resolve(result);\n          });\n        } catch (err) {\n          reject('In method callIdentityModuleFunc error: ' + err);\n        }\n      });\n    }\n\n    //******************* ENCRYPTION METHODS *******************\n\n  }, {\n    key: 'encryptMessage',\n    value: function encryptMessage(message) {\n      //console.info('encryptMessage:message', message);\n      var _this = this;\n\n      log.log('encrypt message ');\n\n      return new _promise2.default(function (resolve, reject) {\n        var isHandShakeType = message.type === 'handshake';\n\n        //if is not to apply encryption, then returns resolve\n        if (!_this.isToUseEncryption && !isHandShakeType) {\n          console.info('encryption disabled');\n          return resolve(message);\n        }\n\n        var dataObjectURL = _this._parseMessageURL(message.to);\n\n        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);\n        var isToLegacyIdentity = (0, _utils.isLegacy)(message.to);\n        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';\n        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';\n\n        if (message.type === 'update') {\n          log.log('encrypt message: message type update');\n          return resolve(message);\n        }\n\n        if (isToLegacyIdentity) {\n          resolve(message);\n        } else if (isFromHyperty && isToHyperty) {\n          var userURL = _this._registry.getHypertyOwner(message.from);\n          if (userURL) {\n\n            // check if exists any keys between two users\n            var chatKeys = _this.chatKeys[message.from + '<->' + message.to];\n            if (!chatKeys) {\n              chatKeys = _this._newChatCrypto(message, userURL);\n\n              //log.log('createChatKey encrypt', message.from + message.to);\n              _this.chatKeys[message.from + '<->' + message.to] = chatKeys;\n              message.body.handshakePhase = 'startHandShake';\n            }\n\n            if (chatKeys.authenticated && !isHandShakeType) {\n\n              var iv = _this.crypto.generateIV();\n              _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, message.body.value, iv).then(function (encryptedValue) {\n\n                var filteredMessage = _this._filterMessageToHash(message, (0, _stringify2.default)(message.body.value) + (0, _stringify2.default)(iv), chatKeys.hypertyFrom.messageInfo);\n\n                _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage).then(function (hash) {\n                  //log.log('result of hash ', hash);\n                  var value = { iv: _this.crypto.encode(iv), value: _this.crypto.encode(encryptedValue), hash: _this.crypto.encode(hash) };\n                  message.body.value = _this.crypto.encode(value);\n\n                  resolve(message);\n                });\n              });\n\n              // if is a handshake message, just resolve it\n            } else if (isHandShakeType) {\n              resolve(message);\n\n              // else, starts a new handshake protocol\n            } else {\n              _this._doHandShakePhase(message, chatKeys).then(function (value) {\n                _this.chatKeys[message.from + '<->' + message.to] = value.chatKeys;\n\n                _this._messageBus.postMessage(value.message);\n                reject('encrypt handshake protocol phase ');\n              });\n            }\n          } else {\n            reject('In encryptMessage: Hyperty owner URL was not found');\n          }\n\n          //if from hyperty to a dataObjectURL\n        } else if (isFromHyperty && isToDataObject) {\n\n          //log.log('dataObject value to encrypt: ', message.body.value);\n          //log.log('IdentityModule - encrypt from hyperty to dataobject ', message);\n\n          _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n            sessionKeys = _chatkeysToArrayCloner(dataObjectURL, sessionKeys);\n            var dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\n\n            _this.dataObjectsStorage.getDataObject(dataObjectURL).then(function (isHypertyReporter) {\n              //if no key exists, create a new one if is the reporter of dataObject\n              if (!dataObjectKey) {\n                // if the hyperty is the reporter of the dataObject then generates a session key\n                if (isHypertyReporter.reporter && isHypertyReporter.reporter === message.from) {\n\n                  var sessionKey = _this.crypto.generateRandom();\n                  _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };\n                  var dataObjectSessionKeysClone = _chatkeysToStringCloner(dataObjectURL, _this.dataObjectSessionKeys);\n\n                  //TODO: check if this does not need to be stored\n                  _this.storageManager.set('dataObjectSessionKeys', 0, dataObjectSessionKeysClone).catch(function (err) {\n                    reject('On encryptMessage from method storageManager.set error: ' + err);\n                  });\n                  dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];\n                }\n              }\n\n              //check if there is already a session key for the chat room\n              if (dataObjectKey) {\n\n                // and if is to apply encryption, encrypt the messages\n                if (dataObjectKey.isToEncrypt) {\n                  var _iv = _this.crypto.generateIV();\n\n                  _this.crypto.encryptAES(dataObjectKey.sessionKey, _this.crypto.encode(message.body.value), _iv).then(function (encryptedValue) {\n                    delete message.body.identity.assertion; //TODO: Check why assertion is comming on the message!\n                    delete message.body.identity.expires; //TODO: Check why expires is comming on the message!\n                    var filteredMessage = _this._filterMessageToHash(message, (0, _stringify2.default)(message.body.value) + (0, _stringify2.default)(_iv));\n\n                    _this.crypto.hashHMAC(dataObjectKey.sessionKey, filteredMessage).then(function (hash) {\n                      // log.log('hash ', hash);\n\n                      var newValue = { value: _this.crypto.encode(encryptedValue), iv: _this.crypto.encode(_iv), hash: _this.crypto.encode(hash) };\n\n                      message.body.value = (0, _stringify2.default)(newValue);\n                      resolve(message);\n                    });\n                  });\n\n                  // if not, just send the message\n                } else {\n                  resolve(message);\n                }\n\n                // start the generation of a new session Key\n              } else {\n                reject('Data object key could not be defined: Failed to decrypt message ');\n              }\n            }).catch(function (err) {\n              reject('On encryptMessage from method dataObjectsStorage.getDataObject error: ' + err);\n            });\n          }).catch(function (err) {\n            reject('On encryptMessage from method storageManager.get error: ' + err);\n          });\n        }\n      });\n    }\n  }, {\n    key: 'encryptDataObject',\n    value: function encryptDataObject(dataObject, sender) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        console.info('dataObject value to encrypt: ', dataObject);\n\n        var dataObjectURL = _this._parseMessageURL(sender);\n\n        _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n          sessionKeys = _chatkeysToArrayCloner(dataObjectURL, sessionKeys);\n          var dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\n\n          //check if there is already a session key for the chat room\n          if (dataObjectKey) {\n\n            // and if is to apply encryption, encrypt the messages\n            if (dataObjectKey.isToEncrypt) {\n              var iv = _this.crypto.generateIV();\n\n              _this.crypto.encryptAES(dataObjectKey.sessionKey, _this.crypto.encode(dataObject), iv).then(function (encryptedValue) {\n                var newValue = { value: _this.crypto.encode(encryptedValue), iv: _this.crypto.encode(iv) };\n\n                //log.log('encrypted dataObject', newValue);\n                return resolve(newValue);\n              }).catch(function (err) {\n                reject('On encryptDataObject from method encryptAES error: ' + err);\n              });\n\n              // if not, just send the message\n            } else {\n              console.info('The dataObject is not encrypted');\n              return resolve(dataObject);\n            }\n\n            // start the generation of a new session Key\n          } else {\n            return reject('No dataObjectKey for this dataObjectURL:', dataObjectURL);\n          }\n        }).catch(function (err) {\n          reject('On encryptDataObject from method storageManager.get error: ' + err);\n        });\n      });\n    }\n  }, {\n    key: 'decryptMessage',\n    value: function decryptMessage(message) {\n      var _this = this;\n\n      //  log.log('decryptMessage:message', message);\n\n      return new _promise2.default(function (resolve, reject) {\n        var isHandShakeType = message.type === 'handshake';\n\n        //if is not to apply encryption, then returns resolve\n        if (!_this.isToUseEncryption && !isHandShakeType) {\n          // log.log('decryption disabled');\n          return resolve(message);\n        }\n\n        var dataObjectURL = _this._parseMessageURL(message.to);\n\n        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);\n        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';\n        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';\n\n        if (message.type === 'update') {\n          return resolve(message);\n        }\n\n        //is is hyperty to hyperty communication\n        if (isFromHyperty && isToHyperty) {\n          // log.log('decrypt hyperty to hyperty');\n          var userURL = _this._registry.getHypertyOwner(message.to);\n          if (userURL) {\n\n            var chatKeys = _this.chatKeys[message.to + '<->' + message.from];\n            if (!chatKeys) {\n              chatKeys = _this._newChatCrypto(message, userURL, 'decrypt');\n              _this.chatKeys[message.to + '<->' + message.from] = chatKeys;\n            }\n\n            if (chatKeys.authenticated && !isHandShakeType) {\n              var value = _this.crypto.decode(message.body.value);\n              var iv = _this.crypto.decodeToUint8Array(value.iv);\n              var data = _this.crypto.decodeToUint8Array(value.value);\n              var hash = _this.crypto.decodeToUint8Array(value.hash);\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {\n                // log.log('decrypted value ', decryptedData);\n                message.body.value = decryptedData;\n\n                var filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\n\n                _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {\n                  //log.log('result of hash verification! ', result);\n                  message.body.assertedIdentity = true;\n                  resolve(message);\n                });\n              });\n            } else if (isHandShakeType) {\n              _this._doHandShakePhase(message, chatKeys).then(function (value) {\n\n                //if it was started by doMutualAuthentication then ends the protocol\n                if (value === 'handShakeEnd') {\n                  //reject('decrypt handshake protocol phase');\n\n                  // if was started by a message, then resend that message\n                } else {\n                  _this.chatKeys[message.to + '<->' + message.from] = value.chatKeys;\n                  _this._messageBus.postMessage(value.message);\n\n                  //reject('decrypt handshake protocol phase ');\n                }\n              });\n            } else {\n              reject('wrong message do decrypt');\n            }\n          } else {\n            reject('error on decrypt message');\n          }\n\n          //if from hyperty to a dataObjectURL\n        } else if (isFromHyperty && isToDataObject) {\n          // log.log('dataObject value to decrypt: ', message.body);\n\n          _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n            sessionKeys = _chatkeysToArrayCloner(dataObjectURL, sessionKeys);\n            var dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\n\n            if (dataObjectKey) {\n\n              //check if is to apply encryption\n              if (dataObjectKey.isToEncrypt) {\n                var parsedValue = JSON.parse(message.body.value);\n                var _iv2 = _this.crypto.decodeToUint8Array(parsedValue.iv);\n                var encryptedValue = _this.crypto.decodeToUint8Array(parsedValue.value);\n                var _hash = _this.crypto.decodeToUint8Array(parsedValue.hash);\n\n                _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, _iv2).then(function (decryptedValue) {\n                  var parsedValue = _this.crypto.decode(decryptedValue);\n\n                  // log.log('decrypted Value,', parsedValue);\n                  message.body.value = parsedValue;\n\n                  var filteredMessage = _this._filterMessageToHash(message, (0, _stringify2.default)(parsedValue) + (0, _stringify2.default)(_iv2));\n\n                  _this.crypto.verifyHMAC(dataObjectKey.sessionKey, filteredMessage, _hash).then(function (result) {\n                    // log.log('result of hash verification! ', result);\n\n                    message.body.assertedIdentity = true;\n                    resolve(message);\n                  });\n                });\n\n                //if not, just return the message\n              } else {\n                message.body.assertedIdentity = true;\n                resolve(message);\n              }\n            } else {\n              message.body.assertedIdentity = true;\n              resolve(message);\n\n              //reject('no sessionKey for chat room found');\n            }\n          });\n        } else {\n          reject('wrong message to decrypt');\n        }\n      });\n    }\n  }, {\n    key: 'decryptDataObject',\n    value: function decryptDataObject(dataObject, sender) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        //if is not to apply encryption, then returns resolve\n        if (!_this.isToUseEncryption) {\n          // log.log('decryption disabled');\n          return resolve(dataObject);\n        }\n\n        var dataObjectURL = _this._parseMessageURL(sender);\n\n        // log.log('dataObject value to decrypt: ', dataObject);\n\n        _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n          sessionKeys = _chatkeysToArrayCloner(dataObjectURL, sessionKeys);\n          var dataObjectKey = sessionKeys ? sessionKeys[dataObjectURL] : null;\n\n          if (dataObjectKey) {\n\n            //check if is to apply encryption\n            if (dataObjectKey.isToEncrypt) {\n              var iv = _this.crypto.decodeToUint8Array(dataObject.iv);\n              var encryptedValue = _this.crypto.decodeToUint8Array(dataObject.value);\n\n              _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, iv).then(function (decryptedValue) {\n                var parsedValue = _this.crypto.decode(decryptedValue);\n                var newValue = { value: parsedValue, iv: _this.crypto.encode(iv) };\n\n                // log.log('decrypted dataObject,', newValue);\n\n                return resolve(newValue);\n              }).catch(function (err) {\n                reject('On decryptDataObject from method encryptAES error: ' + err);\n              });\n\n              //if not, just return the dataObject\n            } else {\n              // log.log('The dataObject is not encrypted');\n              return resolve(dataObject);\n            }\n          } else {\n            return reject('No dataObjectKey for this dataObjectURL:', dataObjectURL);\n          }\n        });\n      });\n    }\n  }, {\n    key: 'doMutualAuthentication',\n    value: function doMutualAuthentication(sender, receiver) {\n      console.info('doMutualAuthentication:sender ', sender);\n      console.info('doMutualAuthentication:receiver ', receiver);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var dataObjectURL = void 0;\n\n        // check if the sender is a dataObject and if so stores that value\n        var reporterURL = _this.registry.getReporterURLSynchonous(sender);\n        if (reporterURL) {\n          dataObjectURL = sender;\n          sender = reporterURL;\n        }\n\n        var msg = {\n          to: receiver,\n          from: sender,\n          callback: undefined,\n          body: { handshakePhase: 'startHandShake', ignore: 'ignoreMessage' }\n        };\n\n        if (!sender || !receiver) {\n          return reject('sender or receiver missing on doMutualAuthentication');\n        }\n\n        var chatKeys = _this.chatKeys[sender + '<->' + receiver];\n        var userURL = _this._registry.getHypertyOwner(sender);\n\n        if (userURL) {\n\n          if (!chatKeys) {\n            // callback to resolve when finish the mutual authentication\n            var resolved = function resolved(value) {\n              // log.log('callback value:', value);\n              resolve(value);\n            };\n            msg.callback = resolved;\n            msg.dataObjectURL = dataObjectURL;\n\n            chatKeys = _this._newChatCrypto(msg, userURL);\n            _this.chatKeys[sender + '<->' + receiver] = chatKeys;\n          }\n\n          if (chatKeys.authenticated) {\n\n            var startSessionKeyExchange = {\n              to: sender,\n              from: receiver\n            };\n            chatKeys.dataObjectURL = dataObjectURL;\n            _this._sendReporterSessionKey(startSessionKeyExchange, chatKeys).then(function (value) {\n\n              _this._messageBus.postMessage(value.message);\n              resolve('exchange of chat sessionKey initiated');\n            }).catch(function (err) {\n              reject('On doMutualAuthentication from method _sendReporterSessionKey error: ' + err);\n            });\n          } else {\n            _this._doHandShakePhase(msg, chatKeys);\n          }\n        } else {\n          reject('Mutual authentication error: Hyperty owner could not be resolved');\n        }\n      });\n    }\n\n    //******************* TOKEN METHODS *******************\n    /**\n    * get a Token to be added to a message\n    * @param  {String}  fromURL     origin of the message\n    * @param  {String}  toURL     target of the message\n    * @return {JSON}    token    token to be added to the message\n    */\n\n  }, {\n    key: 'getToken',\n    value: function getToken(fromURL, toUrl) {\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n        // log.log('[Identity.IdentityModule.getToken] from->', fromURL, '  to->', toUrl);\n\n        if (toUrl) {\n          //log.log('toUrl', toUrl);\n          _this.registry.isLegacy(toUrl).then(function (result) {\n            // log.log('[Identity.IdentityModule.getToken] isLEGACY: ', result);\n            if (result) {\n\n              // TODO: check if in the future other legacy hyperties have expiration times\n              // if so the check should be made here (or in the getAccessToken function)\n              var token = _this.getAccessToken(toUrl);\n              if (token) {\n                return resolve(token);\n              }\n\n              var domain = (0, _utils.getUserIdentityDomain)(toUrl);\n\n              // check if process to get token has already started\n              if (_this.identitiesList[domain] && _this.identitiesList[domain].status === 'in-progress') {\n                // The process to get the token has already started, let's wait by watching its status\n\n                _this.watchingYou.observe('identitiesList', function (change) {\n\n                  // log.log('[Identity.IdentityModule.getToken]  identitiesList changed ' + _this.identitiesList);\n\n                  var keypath = change.keypath;\n\n                  if (keypath.includes('status')) {\n                    keypath = keypath.replace('.status', '');\n                  }\n\n                  if (keypath === domain && change.name === 'status' && change.newValue === 'created') {\n                    // log.log('[Identity.IdentityModule.getToken] token is created ' + _this.identitiesList[domain]);\n                    return resolve(_this.getAccessToken(toUrl));\n                  }\n                });\n              } else {\n                //Token does not exist and the process to get has not started yet\n\n                _this.identitiesList[domain] = {\n                  status: 'in-progress'\n                };\n\n                // log.log('[Identity.IdentityModule.getToken] for-> ', domain);\n                _this.callGenerateMethods(domain).then(function (value) {\n                  // log.log('[Identity.IdentityModule.getToken] CallGeneratemethods', value);\n                  var token = _this.getAccessToken(toUrl);\n                  if (token) {\n                    return resolve(token);\n                  } else {\n                    return reject('No Access token found');\n                  }\n                }, function (err) {\n                  console.error('[Identity.IdentityModule.getToken] error CallGeneratemethods');\n                  return reject(err);\n                });\n              }\n            } else {\n              _this._getValidToken(fromURL).then(function (identity) {\n                resolve(identity);\n              }).catch(function (err) {\n                reject('On getToken from method _getValidToken error: ' + err);\n              });\n            }\n          }).catch(function (err) {\n            reject('On getToken from method isLegacy error: ' + err);\n          });\n        } else {\n          _this._getValidToken(fromURL).then(function (identity) {\n            resolve(identity);\n          });\n        }\n      });\n    }\n\n    /**\n    * get an Id Token for a HypertyURL\n    * @param  {String}  hypertyURL     the Hyperty address\n    * @return {JSON}    token    Id token to be added to the message\n    */\n\n  }, {\n    key: 'getIdToken',\n    value: function getIdToken(hypertyURL) {\n      console.info('getIdToken:hypertyURL ', hypertyURL);\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n        var splitURL = hypertyURL.split('://');\n        if (splitURL[0] !== 'hyperty') {\n\n          _this._getHypertyFromDataObject(hypertyURL).then(function (returnedHypertyURL) {\n\n            var userURL = _this.registry.getHypertyOwner(returnedHypertyURL);\n\n            if (userURL) {\n\n              for (var index in _this.identities) {\n                var identity = _this.identities[index];\n                if (identity.identity === userURL) {\n                  return resolve(identity.messageInfo);\n                }\n              }\n            } else {\n              return reject('no identity was found ');\n            }\n          }).catch(function (reason) {\n            console.error('no identity was found: ', reason);\n            reject(reason);\n          });\n        } else {\n          var userURL = _this.registry.getHypertyOwner(hypertyURL);\n          if (userURL) {\n\n            for (var index in _this.identities) {\n              var identity = _this.identities[index];\n              if (identity.identity === userURL) {\n                // TODO check this getIdToken when we run on nodejs environment;\n                if (identity.hasOwnProperty('messageInfo')) {\n                  if (identity.messageInfo.hasOwnProperty('assertion')) {\n                    return resolve(identity.messageInfo);\n                  } else {\n                    //hack while idm is not reestuctured\n                    identity.messageInfo.assertion = identity.assertion;\n                    return resolve(identity.messageInfo);\n                  }\n                } else {\n                  return resolve(identity);\n                }\n              }\n            }\n          } else {\n            return reject('no identity was found.');\n          }\n        }\n      });\n    }\n\n    /**\n    * get an Access Token for a legacyURL\n    * @param  {String}  legacyURL     the legacy address\n    * @return {JSON}    token    Access token to be added to the message\n    */\n\n  }, {\n    key: 'getAccessToken',\n    value: function getAccessToken(url) {\n      var _this = this;\n\n      /*  let urlSplit = url.split('.');\n      let length = urlSplit.length;*/\n\n      var domainToCheck = (0, _utils.divideURL)(url).domain;\n\n      if (url.includes('protostub')) {\n        domainToCheck = domainToCheck.replace(domainToCheck.split('.')[0] + '.', '');\n      }\n\n      var identityToReturn = void 0;\n      var expirationDate = undefined;\n      var timeNow = _this._secondsSinceEpoch();\n      for (var index in _this.identities) {\n        var identity = _this.identities[index];\n        if (identity.hasOwnProperty('interworking') && identity.interworking.domain === domainToCheck) {\n          // check if there is expiration time\n          if (identity.hasOwnProperty('info') && identity.info.hasOwnProperty('expires')) {\n            expirationDate = identity.info.expires;\n            log.log('[Identity.IdentityModule.getAccessToken] Token expires in', expirationDate);\n            log.log('[Identity.IdentityModule.getAccessToken] time now:', timeNow);\n\n            // TODO: this should not be verified in this way\n            // we should contact the IDP to verify this instead of using the local clock\n            // but this works for now...\n            if (timeNow >= expirationDate) {\n              // delete current identity\n              //_this.deleteIdentity(identity.identity);\n              return null; // the getToken function then generates a new token\n            }\n          } // else this access token has no expiration time\n\n          if (identity.hasOwnProperty('messageInfo') && identity.messageInfo.hasOwnProperty('userProfile') && identity.messageInfo.userProfile) {\n            identityToReturn = { userProfile: identity.messageInfo.userProfile, access_token: identity.interworking.access_token };\n            if (identity.hasOwnProperty('infoToken') && identity.infoToken.hasOwnProperty('id')) {\n              identityToReturn.userProfile.id = identity.infoToken.id;\n            }\n          }\n          return identityToReturn;\n        }\n      }\n\n      return null;\n    }\n\n    //******************* OTHER METHODS *******************\n\n  }, {\n    key: 'loadSessionKeys',\n    value: function loadSessionKeys() {\n      var _this = this;\n      return new _promise2.default(function (resolve) {\n\n        _this.storageManager.get('dataObjectSessionKeys').then(function (sessionKeys) {\n          if (sessionKeys) {\n            //TODO: Check if this is needed and if it is, how can the key be recovered (the keyURL is stored were?)\n            //sessionKeys.sessionKey = new Uint8Array(JSON.parse('[' + sessionKeys.sessionKey + ']'));\n            _this.dataObjectSessionKeys = sessionKeys;\n          } else {\n            _this.dataObjectSessionKeys = {};\n          }\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: 'sendRefreshMessage',\n    value: function sendRefreshMessage(oldIdentity) {\n      var _this = this;\n      var domain = _this._resolveDomain(oldIdentity.idp);\n      var message = void 0;\n      var assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\n\n      log.log('sendRefreshMessage:oldIdentity', oldIdentity);\n\n      return new _promise2.default(function (resolve, reject) {\n        var domain = _this._resolveDomain(oldIdentity.idp);\n        var message = void 0;\n        var assertion = _this.getIdentity(oldIdentity.userProfile.userURL);\n\n        console.info('sendRefreshMessage:oldIdentity', oldIdentity);\n\n        message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'refreshAssertion', params: { identity: assertion } } };\n        try {\n          _this._messageBus.postMessage(message, function (res) {\n            var result = res.body.value;\n            resolve(result);\n          });\n        } catch (err) {\n          reject('In sendRefreshMessage on postMessage error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: 'sendGenerateMessage',\n    value: function sendGenerateMessage(contents, origin, usernameHint, idpDomain) {\n      log.log('[sendGenerateMessage:contents]', contents);\n      log.log('[sendGenerateMessage:origin]', origin);\n      log.log('[sendGenerateMessage:usernameHint]', usernameHint);\n      log.log('[sendGenerateMessage:idpDomain]', idpDomain);\n      log.log('sendGenerateMessage_hint');\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var domain = _this._resolveDomain(idpDomain);\n        var message = void 0;\n\n        message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'generateAssertion', params: { contents: contents, origin: origin, usernameHint: usernameHint } } };\n        try {\n          _this._messageBus.postMessage(message, function (res) {\n            var result = res.body.value;\n            resolve(result);\n          });\n        } catch (err) {\n          reject('In sendRefreshMessage on postMessage error: ' + err);\n        }\n      });\n    }\n\n    /**\n    * Requests the IdpProxy from a given Domain for an identityAssertion\n    *\n    * @param  {DOMString} contents     contents\n    * @param  {DOMString} origin       origin\n    * @param  {DOMString} usernameHint usernameHint\n    * @param  {JSON}      keyPair       user keyPair\n    * @return {IdAssertion}              IdAssertion\n    */\n\n  }, {\n    key: 'generateAssertion',\n    value: function generateAssertion(contents, origin, usernameHint, keyPair, idpDomain) {\n      log.log('[generateAssertion:contents]', contents);\n      log.log('[generateAssertion:origin]', origin);\n      log.log('[generateAssertion:usernameHint]', usernameHint);\n      log.log('[generateAssertion:keyPair]', keyPair);\n      log.log('[generateAssertion:idpDomain]', idpDomain);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        log.log('[IdentityModule:generateSelectedIdentity:sendGenerateMessage]', usernameHint);\n        _this.sendGenerateMessage(contents, origin, usernameHint, idpDomain).then(function (result) {\n\n          if (result.loginUrl) {\n\n            _this.callIdentityModuleFunc('openPopup', { urlreceived: result.loginUrl }).then(function (value) {\n              log.log('[IdentityModule:generateSelectedIdentity:openPopup]', usernameHint);\n\n              resolve(value);\n            }, function (err) {\n              reject(err);\n            });\n          } else if (result) {\n\n            _this.storeIdentity(result, keyPair).then(function (value) {\n              resolve(value);\n            }, function (err) {\n              reject(err);\n            });\n          } else {\n            reject('error on obtaining identity information');\n          }\n        }).catch(function (err) {\n          reject('On generateAssertion from method sendGenerateMessage error: ' + err);\n        });\n      });\n    }\n\n    /**\n    * Requests the IdpProxy from a given Domain to validate an IdentityAssertion\n    * Returns a promise with the result from the validation.\n    * @param  {DOMString} assertion\n    * @param  {DOMString} origin       origin\n    * @return {Promise}         Promise         promise with the result from the validation\n    */\n\n  }, {\n    key: 'validateAssertion',\n    value: function validateAssertion(assertion, origin, idpDomain) {\n      log.log('[validateAssertion:assertion]', assertion);\n      log.log('[validateAssertion:origin]', origin);\n      log.log('[validateAssertion:idpDomain]', idpDomain);\n      var _this = this;\n\n      var domain = _this._resolveDomain(idpDomain);\n\n      var message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'validateAssertion',\n          params: { assertion: assertion, origin: origin } } };\n\n      return new _promise2.default(function (resolve, reject) {\n        try {\n          _this._messageBus.postMessage(message, function (result) {\n            if (result.body.code === 200) {\n              resolve(result.body.value);\n            } else {\n              reject('error', result.body.code);\n            }\n          });\n        } catch (err) {\n          reject('On validateAssertion from method postMessage error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: 'addGUIListeners',\n    value: function addGUIListeners() {\n      var _this = this;\n\n      _this._messageBus.addListener(_this._idmURL, function (msg) {\n        var funcName = msg.body.method;\n\n        var returnedValue = void 0;\n        if (funcName === 'deployGUI') {\n          returnedValue = _this.deployGUI();\n        } else if (funcName === 'getIdentitiesToChoose') {\n          returnedValue = _this.getIdentitiesToChoose();\n        } else if (funcName === 'unregisterIdentity') {\n          var email = msg.body.params.email;\n          returnedValue = _this.unregisterIdentity(email);\n        } else if (funcName === 'generateRSAKeyPair') {\n          // because generateRSAKeyPair is a promise\n          // we have to send the message only after getting the key pair\n          _this.crypto.generateRSAKeyPair().then(function (keyPair) {\n            var value = { type: 'execute', value: keyPair, code: 200 };\n            var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              reject('On addGUIListeners from if generateRSAKeyPair method postMessage error: ' + err);\n            }\n          });\n          return;\n        } else if (funcName === 'sendGenerateMessage') {\n          var contents = msg.body.params.contents;\n          var origin = msg.body.params.origin;\n          var usernameHint = msg.body.params.usernameHint;\n          var idpDomain = msg.body.params.idpDomain;\n          _this.sendGenerateMessage(contents, origin, usernameHint, idpDomain).then(function (returnedValue) {\n            var value = { type: 'execute', value: returnedValue, code: 200 };\n            var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              reject('On addGUIListeners from if sendGenerateMessage method postMessage error: ' + err);\n            }\n          });\n          return;\n        } else if (funcName === 'storeIdentity') {\n          var result = msg.body.params.result;\n          var keyPair = msg.body.params.keyPair;\n          _this.storeIdentity(result, keyPair).then(function (returnedValue) {\n            var value = { type: 'execute', value: returnedValue, code: 200 };\n            var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n            try {\n              _this._messageBus.postMessage(replyMsg);\n            } catch (err) {\n              reject('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\n            }\n          });\n          return;\n        } /*else if (funcName === 'selectIdentityForHyperty') {\n          let origin = msg.body.params.origin;\n          let idp = msg.body.params.idp;\n          let idHint = msg.body.params.idHint;\n          _this.selectIdentityForHyperty(origin, idp, idHint);\n          return;\n          }*/\n\n        // if the function requested is not a promise\n        var value = { type: 'execute', value: returnedValue, code: 200 };\n        var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n        try {\n          _this._messageBus.postMessage(replyMsg);\n        } catch (err) {\n          reject('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\n        }\n      });\n    }\n  }, {\n    key: 'deployGUI',\n    value: function deployGUI() {\n      var _this = this;\n      _this.guiDeployed = true;\n    }\n\n    //******************* PRIVATE METHODS *******************\n    /**\n     * GetValidToken is for non legacy hyperties and verifies if the Token is still valid\n     * if the token is invalid it requests a new token\n     * @param  {String} hypertyURL hypertyURL\n     * @return {Promise}\n     */\n\n  }, {\n    key: '_getValidToken',\n    value: function _getValidToken(hypertyURL) {\n      //  console.info('_getValidToken:hypertyURL', hypertyURL);\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n        _this.getIdToken(hypertyURL).then(function (identity) {\n          //        log.log('[Identity.IdentityModule.getValidToken] Token', identity);\n          var timeNow = _this._secondsSinceEpoch();\n          var completeId = _this.getIdentity(identity.userProfile.userURL);\n          var expirationDate = undefined;\n\n          if (completeId.hasOwnProperty('info')) {\n            if (completeId.info.hasOwnProperty('expires')) {\n              expirationDate = completeId.info.expires;\n            } else if (completeId.info.hasOwnProperty('tokenIDJSON')) {\n              expirationDate = completeId.info.tokenIDJSON.exp;\n            } else {\n              // throw 'The ID Token does not have an expiration time';\n              console.info('The ID Token does not have an expiration time');\n              resolve(identity);\n            }\n          } else if (completeId.hasOwnProperty('infoToken') && completeId.infoToken.hasOwnProperty('exp')) {\n            expirationDate = completeId.infoToken.exp;\n          } else {\n            // throw 'The ID Token does not have an expiration time';\n            console.info('The ID Token does not have an expiration time');\n            resolve(identity);\n          }\n\n          log.log('[Identity.IdentityModule.getValidToken] Token expires in', expirationDate);\n          log.log('[Identity.IdentityModule.getValidToken] time now:', timeNow);\n\n          if (timeNow >= expirationDate) {\n            if (identity.idp === 'google.com') {\n              _this.sendRefreshMessage(identity).then(function (newIdentity) {\n                _this.deleteIdentity(completeId.identity);\n                _this.storeIdentity(newIdentity.body.params.identity, newIdentity.body.params.identity.keyPair).then(function (value) {\n                  resolve(value);\n                }, function (err) {\n                  console.error('[Identity.IdentityModule.getToken] error on getToken', err);\n                  reject(err);\n                });\n              });\n            } else {\n              // microsoft.com\n              _this.deleteIdentity(completeId.identity);\n\n              // generate new idToken\n              _this.callGenerateMethods(identity.idp).then(function (value) {\n                resolve(value);\n              }).catch(function (err) {\n                reject('On addGUIListeners from if storeIdentity method postMessage error: ' + err);\n              });\n            }\n          } else {\n            resolve(identity);\n          }\n        }).catch(function (error) {\n          console.error('[Identity.IdentityModule.getToken] error on getToken', error);\n          reject(error);\n        });\n      });\n    }\n\n    /**\n    * returns the reporter associated to the dataObject URL\n    * @param   {String}   dataObjectURL         dataObject url\n    * @return   {String}  reporter              dataObject url reporter\n    */\n\n  }, {\n    key: '_getHypertyFromDataObject',\n    value: function _getHypertyFromDataObject(dataObjectURL) {\n      console.info('_getHypertyFromDataObject:dataObjectURL', dataObjectURL);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var splitedURL = (0, _utils.divideURL)(dataObjectURL);\n        var domain = splitedURL.domain;\n        var finalURL = _this._parseMessageURL(dataObjectURL);\n\n        // check if is the creator of the hyperty\n        var reporterURL = _this.registry.getReporterURLSynchonous(finalURL);\n        console.info('_getHypertyFromDataObject:reporterURL', reporterURL);\n\n        if (reporterURL) {\n          resolve(reporterURL);\n        } else {\n          // check if there is already an association from an hypertyURL to the dataObject\n          var storedReporterURL = _this.dataObjectsIdentity[finalURL];\n          console.info('_getHypertyFromDataObject:storedReporterURL', storedReporterURL);\n\n          if (storedReporterURL) {\n            resolve(storedReporterURL);\n          } else {\n            // check if there is any hyperty that subscribed the dataObjectURL\n            var subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);\n            console.info('_getHypertyFromDataObject:subscriberHyperty', subscriberHyperty);\n\n            if (subscriberHyperty) {\n              resolve(subscriberHyperty);\n            } else {\n              // search in domain registry for the hyperty associated to the dataObject\n              // search in case is a subscriber who wants to know the reporter\n              _this._coreDiscovery.discoverDataObjectPerURL(finalURL, domain).then(function (dataObject) {\n                console.info('_getHypertyFromDataObject:dataObject', dataObject);\n                _this.dataObjectsIdentity[finalURL] = dataObject.reporter;\n                console.info('_getHypertyFromDataObject:dataObject.reporter', dataObject.reporter);\n                resolve(dataObject.reporter);\n              }, function (err) {\n                reject(err);\n              });\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: '_sendReporterSessionKey',\n    value: function _sendReporterSessionKey(message, chatKeys) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var sessionKeyBundle = _this.dataObjectSessionKeys[chatKeys.dataObjectURL];\n        var reporterSessionKeyMsg = void 0;\n        var valueToEncrypt = void 0;\n        var sessionKey = void 0;\n        var iv = void 0;\n        var value = {};\n\n        //if there is not yet a session Key, generates a new one\n        if (!sessionKeyBundle) {\n          sessionKey = _this.crypto.generateRandom();\n          _this.dataObjectSessionKeys[chatKeys.dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };\n\n          var dataObjectSessionKeysClone = _chatkeysToStringCloner(chatKeys.dataObjectURL, _this.dataObjectSessionKeys);\n\n          _this.storageManager.set('dataObjectSessionKeys', 0, dataObjectSessionKeysClone).catch(function (err) {\n            reject('On _sendReporterSessionKey from method storageManager.set(dataObjectSessionKeys...) error: ' + err);\n          });\n        } else {\n          sessionKey = sessionKeyBundle.sessionKey;\n        }\n\n        try {\n          valueToEncrypt = _this.crypto.encode({ value: _this.crypto.encode(sessionKey), dataObjectURL: chatKeys.dataObjectURL });\n        } catch (err) {\n          return reject('On _sendReporterSessionKey from method storageManager.set error valueToEncrypt: ' + err);\n        }\n\n        iv = _this.crypto.generateIV();\n        value.iv = _this.crypto.encode(iv);\n        _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, valueToEncrypt, iv).then(function (encryptedValue) {\n\n          reporterSessionKeyMsg = {\n            type: 'handshake',\n            to: message.from,\n            from: message.to,\n            body: {\n              handshakePhase: 'reporterSessionKey',\n              value: _this.crypto.encode(encryptedValue)\n            }\n          };\n\n          var filteredMessage = _this._filterMessageToHash(reporterSessionKeyMsg, valueToEncrypt + iv, chatKeys.hypertyFrom.messageInfo);\n\n          return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\n        }).then(function (hashedMessage) {\n          var valueWithHash = _this.crypto.encode({ value: reporterSessionKeyMsg.body.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv });\n\n          reporterSessionKeyMsg.body.value = valueWithHash;\n\n          resolve({ message: reporterSessionKeyMsg, chatKeys: chatKeys });\n        }).catch(function (err) {\n          reject('On _sendReporterSessionKey from chained promises encryptAES error: ' + err);\n        });\n      });\n    }\n\n    /**\n    * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL\n    * @param {String}     idpDomain     idpDomain (Optional)\n    */\n\n  }, {\n    key: '_resolveDomain',\n    value: function _resolveDomain(idpDomain) {\n      if (!idpDomain) {\n        return 'domain-idp://google.com';\n      } else {\n        return 'domain-idp://' + idpDomain;\n      }\n    }\n  }, {\n    key: '_doHandShakePhase',\n    value: function _doHandShakePhase(message, chatKeys) {\n      // log('_doHandShakePhase:dataObject', message);\n      //\tlog('_doHandShakePhase:chatKeys', chatKeys);\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var handshakeType = message.body.handshakePhase;\n        var iv = void 0;\n        var hash = void 0;\n        var value = {};\n        var filteredMessage = void 0;\n\n        console.info('handshake phase: ', handshakeType);\n\n        switch (handshakeType) {\n\n          case 'startHandShake':\n            {\n              chatKeys.keys.fromRandom = _this.crypto.generateRandom();\n              var startHandShakeMsg = {\n                type: 'handshake',\n                to: message.to,\n                from: message.from,\n                body: {\n                  handshakePhase: 'senderHello',\n                  value: _this.crypto.encode(chatKeys.keys.fromRandom)\n                }\n              };\n              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(startHandShakeMsg, undefined, chatKeys.hypertyFrom.messageInfo);\n\n              // check if was the encrypt function or the mutual authentication that request the\n              // start of the handShakePhase.\n\n              if (chatKeys.initialMessage) {\n                resolve({ message: startHandShakeMsg, chatKeys: chatKeys });\n              } else {\n                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;\n                _this._messageBus.postMessage(startHandShakeMsg);\n              }\n\n              break;\n            }\n          case 'senderHello':\n            {\n\n              log.log('senderHello');\n              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(message);\n              chatKeys.keys.fromRandom = _this.crypto.decodeToUint8Array(message.body.value);\n              chatKeys.keys.toRandom = _this.crypto.generateRandom();\n\n              var senderHelloMsg = {\n                type: 'handshake',\n                to: message.from,\n                from: message.to,\n                body: {\n                  handshakePhase: 'receiverHello',\n                  value: _this.crypto.encode(chatKeys.keys.toRandom)\n                }\n              };\n              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(senderHelloMsg, undefined, chatKeys.hypertyFrom.messageInfo);\n              resolve({ message: senderHelloMsg, chatKeys: chatKeys });\n\n              break;\n            }\n          case 'receiverHello':\n            {\n\n              log.log('receiverHello');\n              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(message);\n\n              _this.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp).then(function (value) {\n\n                //TODO remove later this verification as soon as all the IdP proxy are updated in the example\n                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;\n\n                var receiverPublicKey = _this.crypto.decodeToUint8Array(encodedpublicKey);\n                var premasterSecret = _this.crypto.generatePMS();\n                var toRandom = message.body.value;\n                chatKeys.hypertyTo.assertion = message.body.identity.assertion;\n                chatKeys.hypertyTo.publicKey = receiverPublicKey;\n                chatKeys.hypertyTo.userID = value.contents.email;\n                chatKeys.keys.toRandom = _this.crypto.decodeToUint8Array(toRandom);\n                chatKeys.keys.premasterKey = premasterSecret;\n\n                var concatKey = _this.crypto.concatPMSwithRandoms(premasterSecret, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);\n\n                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\n\n                //generate the master key\n              }).then(function (masterKey) {\n                chatKeys.keys.masterKey = masterKey;\n\n                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\n\n                //generate the symmetric and hash keys\n              }).then(function (keys) {\n\n                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[0]);\n                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[1]);\n                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[2]);\n                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[3]);\n                iv = _this.crypto.generateIV();\n                value.iv = _this.crypto.encode(iv);\n\n                var messageStructure = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'senderCertificate'\n                  }\n                };\n\n                // hash the value and the iv\n                filteredMessage = _this._filterMessageToHash(messageStructure, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);\n                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\n              }).then(function (hash) {\n                value.hash = _this.crypto.encode(hash);\n\n                //encrypt the data\n                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok', iv);\n              }).then(function (encryptedData) {\n                value.symetricEncryption = _this.crypto.encode(encryptedData);\n\n                return _this.crypto.encryptRSA(chatKeys.hypertyTo.publicKey, chatKeys.keys.premasterKey);\n              }).then(function (encryptedValue) {\n\n                value.assymetricEncryption = _this.crypto.encode(encryptedValue);\n\n                var messageStructure = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'senderCertificate'\n                  }\n                };\n\n                var messageToHash = _this._filterMessageToHash(messageStructure, chatKeys.keys.premasterKey, chatKeys.hypertyFrom.messageInfo);\n\n                return _this.crypto.signRSA(chatKeys.hypertyFrom.privateKey, _this.crypto.encode(chatKeys.handshakeHistory) + _this.crypto.encode(messageToHash));\n              }).then(function (signature) {\n\n                value.signature = _this.crypto.encode(signature);\n\n                var receiverHelloMsg = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'senderCertificate',\n                    value: _this.crypto.encode(value)\n                  }\n                };\n                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(receiverHelloMsg, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);\n\n                resolve({ message: receiverHelloMsg, chatKeys: chatKeys });\n              }, function (error) {\n                return reject(error);\n              });\n\n              break;\n            }\n          case 'senderCertificate':\n            {\n\n              log.log('senderCertificate');\n              var receivedValue = _this.crypto.decode(message.body.value);\n\n              _this.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp).then(function (value) {\n                var encryptedPMS = _this.crypto.decodeToUint8Array(receivedValue.assymetricEncryption);\n\n                //TODO remove later this verification as soon as all the IdP proxy are updated in the example\n                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;\n\n                var senderPublicKey = _this.crypto.decodeToUint8Array(encodedpublicKey);\n                chatKeys.hypertyTo.assertion = message.body.identity.assertion;\n                chatKeys.hypertyTo.publicKey = senderPublicKey;\n                chatKeys.hypertyTo.userID = value.contents.email;\n\n                return _this.crypto.decryptRSA(chatKeys.hypertyFrom.privateKey, encryptedPMS);\n              }, function (error) {\n                // log.log(error);\n                reject('Error during authentication of identity');\n\n                //obtain the PremasterKey using the private key\n              }).then(function (pms) {\n\n                chatKeys.keys.premasterKey = new Uint8Array(pms);\n\n                var signature = _this.crypto.decodeToUint8Array(receivedValue.signature);\n\n                var receivedmsgToHash = _this._filterMessageToHash(message, chatKeys.keys.premasterKey);\n\n                return _this.crypto.verifyRSA(chatKeys.hypertyTo.publicKey, _this.crypto.encode(chatKeys.handshakeHistory) + _this.crypto.encode(receivedmsgToHash), signature);\n\n                // validates the signature received\n              }).then(function (signValidationResult) {\n\n                //log.log('SenderCertificate - signature validation result ', signValidationResult);\n                var concatKey = _this.crypto.concatPMSwithRandoms(chatKeys.keys.premasterKey, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);\n\n                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\n\n                // generates the master keys from the Premaster key and the randoms\n              }).then(function (masterKey) {\n                chatKeys.keys.masterKey = masterKey;\n\n                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);\n\n                // generates the symmetric keys to be used in the symmetric encryption\n              }).then(function (keys) {\n                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[0]);\n                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[1]);\n                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[2]);\n                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[3]);\n                iv = _this.crypto.decodeToUint8Array(receivedValue.iv);\n                var data = _this.crypto.decodeToUint8Array(receivedValue.symetricEncryption);\n\n                return _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv);\n              }).then(function (decryptedData) {\n                // log.log('decryptedData', decryptedData);\n\n                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(message, decryptedData + iv);\n\n                var hashReceived = _this.crypto.decodeToUint8Array(receivedValue.hash);\n\n                filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\n\n                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hashReceived);\n              }).then(function (verifiedHash) {\n\n                // log.log('result of hash verification ', verifiedHash);\n                var receiverFinishedMessage = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'receiverFinishedMessage'\n                  }\n                };\n                iv = _this.crypto.generateIV();\n                value.iv = _this.crypto.encode(iv);\n\n                filteredMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);\n\n                //log.log('TIAGO: doHandShakePhase verifiedHash');\n                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);\n              }).then(function (hash) {\n\n                value.hash = _this.crypto.encode(hash);\n                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!', iv);\n              }).then(function (encryptedValue) {\n                value.value = _this.crypto.encode(encryptedValue);\n                var receiverFinishedMessage = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'receiverFinishedMessage',\n                    value: _this.crypto.encode(value)\n                  }\n                };\n\n                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);\n                chatKeys.authenticated = true;\n                resolve({ message: receiverFinishedMessage, chatKeys: chatKeys });\n              }).catch(function (err) {\n                reject('On _doHandShakePhase from senderCertificate error: ' + err);\n              });\n\n              break;\n            }\n          case 'receiverFinishedMessage':\n            {\n\n              chatKeys.authenticated = true;\n\n              value = _this.crypto.decode(message.body.value);\n\n              iv = _this.crypto.decodeToUint8Array(value.iv);\n              var data = _this.crypto.decodeToUint8Array(value.value);\n              hash = _this.crypto.decodeToUint8Array(value.hash);\n\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {\n                // log.log('decryptedData', decryptedData);\n                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(message, decryptedData + iv);\n\n                var filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);\n                _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {\n\n                  // check if there was an initial message that was blocked and send it\n                  if (chatKeys.initialMessage) {\n\n                    var initialMessage = {\n                      type: 'create',\n                      to: message.from,\n                      from: message.to,\n                      body: {\n                        value: chatKeys.initialMessage.body.value\n                      }\n                    };\n\n                    resolve({ message: initialMessage, chatKeys: chatKeys });\n\n                    //sends the sessionKey to the subscriber hyperty\n                  } else {\n                    _this._sendReporterSessionKey(message, chatKeys).then(function (value) {\n\n                      resolve(value);\n                    }).catch(function (err) {\n                      reject('On _doHandShakePhase from receiverFinishedMessage error: ' + err);\n                    });\n                  }\n                });\n              });\n\n              break;\n            }\n\n          case 'reporterSessionKey':\n            {\n\n              log.log('reporterSessionKey');\n\n              var valueIVandHash = _this.crypto.decode(message.body.value);\n              hash = _this.crypto.decodeToUint8Array(valueIVandHash.hash);\n              iv = _this.crypto.decodeToUint8Array(valueIVandHash.iv);\n              var encryptedValue = _this.crypto.decodeToUint8Array(valueIVandHash.value);\n              var parsedValue = void 0;\n              var sessionKey = void 0;\n              var dataObjectURL = void 0;\n              var receiverAcknowledgeMsg = void 0;\n\n              //log.log('[IdentityModule reporterSessionKey] - decryptAES: ', chatKeys.keys.hypertyToSessionKey, encryptedValue, iv);\n\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, encryptedValue, iv).then(function (decryptedValue) {\n\n                parsedValue = _this.crypto.decode(decryptedValue);\n                sessionKey = _this.crypto.decodeToUint8Array(parsedValue.value);\n                dataObjectURL = parsedValue.dataObjectURL;\n\n                var messageToHash = _this._filterMessageToHash(message, decryptedValue + iv);\n\n                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, messageToHash, hash);\n              }).then(function (hashResult) {\n\n                // log.log('hash successfully validated ', hashResult);\n\n                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };\n                var dataObjectSessionKeysClone = _chatkeysToStringCloner(dataObjectURL, _this.dataObjectSessionKeys);\n                _this.storageManager.set('dataObjectSessionKeys', 0, dataObjectSessionKeysClone).catch(function (err) {\n                  reject('On _sendReporterSessionKey from method reporterSessionKey error: ' + err);\n                });\n\n                iv = _this.crypto.generateIV();\n                value.iv = _this.crypto.encode(iv);\n\n                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!!', iv);\n              }).then(function (encryptedValue) {\n\n                receiverAcknowledgeMsg = {\n                  type: 'handshake',\n                  to: message.from,\n                  from: message.to,\n                  body: {\n                    handshakePhase: 'receiverAcknowledge'\n                  }\n                };\n\n                value.value = _this.crypto.encode(encryptedValue);\n                var messageToHash = _this._filterMessageToHash(receiverAcknowledgeMsg, 'ok!!' + iv, chatKeys.hypertyFrom.messageInfo);\n\n                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, messageToHash);\n              }).then(function (hashedMessage) {\n                var finalValue = _this.crypto.encode({ value: value.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv });\n\n                receiverAcknowledgeMsg.body.value = finalValue;\n                resolve({ message: receiverAcknowledgeMsg, chatKeys: chatKeys });\n              }).catch(function (err) {\n                reject('On _doHandShakePhase from reporterSessionKey error: ' + err);\n              });\n\n              break;\n            }\n\n          case 'receiverAcknowledge':\n            {\n\n              log.log('receiverAcknowledge');\n\n              var receivedvalueIVandHash = _this.crypto.decode(message.body.value);\n              var receivedHash = _this.crypto.decodeToUint8Array(receivedvalueIVandHash.hash);\n              iv = _this.crypto.decodeToUint8Array(receivedvalueIVandHash.iv);\n              var receivedEncryptedValue = _this.crypto.decodeToUint8Array(receivedvalueIVandHash.value);\n\n              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, receivedEncryptedValue, iv).then(function (decryptedValue) {\n\n                var filteredMessage = _this._filterMessageToHash(message, decryptedValue + iv);\n                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, receivedHash);\n              }).then(function (hashResult) {\n                // log.log('hashResult ', hashResult);\n\n                var callback = chatKeys.callback;\n\n                if (callback) {\n                  callback('handShakeEnd');\n                }\n                resolve('handShakeEnd');\n              }).catch(function (err) {\n                reject('On _doHandShakePhase from receiverAcknowledge error: ' + err);\n              });\n\n              break;\n            }\n\n          default:\n            reject(message);\n        }\n      });\n    }\n\n    /**\n    * filter the messages to hash, by removing some fields not generated by the runtime core\n    * @param {Message}  message                     message\n    * @param {String}  decryptedValue (Optional)    value from body.value in case it originally comes encrypted\n    * @param {JSON}  identity(Optional)    add the hyperty identity associated in case is not added to the initial message\n    * @return {Message}  new message filtered\n    */\n\n  }, {\n    key: '_filterMessageToHash',\n    value: function _filterMessageToHash(message, decryptedValue, identity) {\n\n      return {\n        type: message.type,\n        from: message.from,\n        to: message.to,\n        body: {\n          identity: identity || message.body.identity,\n          value: decryptedValue || message.body.value,\n          handshakePhase: message.body.handshakePhase\n        }\n      };\n    }\n\n    /**\n    * generates the initial structure for the keys between two users\n    * @param {JSON}    message              initial message that triggers the mutual authentication\n    * @param {String}  userURL              userURL\n    * @param {boolean} receiver(Optional)  indicates if is the sender or the receiver that creates a new chat crypto\n    * @return {JSON} newChatCrypto  new JSON structure for the chat crypto\n    */\n\n  }, {\n    key: '_newChatCrypto',\n    value: function _newChatCrypto(message, userURL, receiver) {\n      var _this = this;\n\n      //check whether is the sender or the receiver to create a new chatCrypto\n      //to mantain consistency on the keys if the receiver create a new chatCrypto,\n      //then invert the fields\n      var from = receiver ? message.to : message.from;\n      var to = receiver ? message.from : message.to;\n\n      var userInfo = _this.getIdentity(userURL);\n\n      var newChatCrypto = {\n        hypertyFrom: {\n          hyperty: from,\n          userID: userInfo.messageInfo.userProfile.username,\n          privateKey: userInfo.keyPair.private,\n          publicKey: userInfo.keyPair.public,\n          assertion: userInfo.assertion,\n          messageInfo: userInfo.messageInfo\n        },\n        hypertyTo: {\n          hyperty: to,\n          userID: undefined,\n          publicKey: undefined,\n          assertion: undefined\n        },\n        keys: {\n          hypertyToSessionKey: undefined,\n          hypertyFromSessionKey: undefined,\n          hypertyToHashKey: undefined,\n          hypertyFromHashKey: undefined,\n          toRandom: undefined,\n          fromRandom: undefined,\n          premasterKey: undefined,\n          masterKey: undefined\n        },\n        handshakeHistory: {\n          senderHello: undefined,\n          receiverHello: undefined,\n          senderCertificate: undefined,\n          receiverFinishedMessage: undefined\n        },\n        initialMessage: message.body.ignore ? undefined : message,\n        callback: message.callback,\n        authenticated: false,\n        dataObjectURL: message.dataObjectURL\n      };\n\n      return newChatCrypto;\n    }\n  }, {\n    key: '_secondsSinceEpoch',\n    value: function _secondsSinceEpoch() {\n      return Math.floor(Date.now() / 1000);\n    }\n  }, {\n    key: '_parseMessageURL',\n    value: function _parseMessageURL(URL) {\n      var splitedToURL = URL.split('/');\n      if (splitedToURL.length <= 6) {\n        return splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];\n      } else {\n        return splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];\n      }\n    }\n  }, {\n    key: 'messageBus',\n    get: function get() {\n      var _this = this;\n      return _this._messageBus;\n    }\n\n    /**\n    * Set the messageBus in this Registry\n    * @param {MessageBus}           messageBus\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n      _this._messageBus = messageBus;\n      _this.addGUIListeners();\n    }\n\n    /**\n    * return the coreDiscovery component\n    */\n\n  }, {\n    key: 'coreDiscovery',\n    get: function get() {\n      var _this = this;\n      return _this._coreDiscovery;\n    }\n\n    /**\n    * Set the coreDiscovery component\n    * @param {coreDiscovery} coreDiscovery\n    */\n    ,\n    set: function set(coreDiscovery) {\n      var _this = this;\n      _this._coreDiscovery = coreDiscovery;\n    }\n\n    /**\n    * return the registry in this idModule\n    * @param {registry}           registry\n    */\n\n  }, {\n    key: 'registry',\n    get: function get() {\n      var _this = this;\n      return _this._registry;\n    }\n\n    /**\n    * Set the registry in this idModule\n    * @param {registry}     reg\n    */\n    ,\n    set: function set(registry) {\n      var _this = this;\n      _this._registry = registry;\n    }\n  }]);\n  return IdentityModule;\n}();\n\nfunction _chatkeysToStringCloner(chatKeysURL, chatKeys) {\n  var dataObjectSessionKeysClone = (0, _assign2.default)({}, chatKeys);\n  if (dataObjectSessionKeysClone[chatKeysURL].sessionKey) {\n    log.log('_chatkeysToStringCloner:keys', dataObjectSessionKeysClone[chatKeysURL].sessionKey);\n    try {\n      dataObjectSessionKeysClone[chatKeysURL].sessionKey = dataObjectSessionKeysClone[chatKeysURL].sessionKey.toString();\n    } catch (err) {\n      log.log('_chatkeysToStringCloner:err', err);\n    }\n  }\n  return dataObjectSessionKeysClone;\n}\n\nfunction _chatkeysToArrayCloner(chatKeysURL, sessionKeys) {\n  log.log('_chatkeysToArrayCloner', chatKeysURL, sessionKeys);\n  if (sessionKeys) {\n    log.log('_chatkeysToArrayCloner:insideIf', sessionKeys[chatKeysURL].sessionKey);\n    try {\n      sessionKeys[chatKeysURL].sessionKey = new Uint8Array(JSON.parse('[' + sessionKeys[chatKeysURL].sessionKey + ']'));\n    } catch (err) {\n      log.log('_chatkeysToArrayCloner:err', err);\n    }\n  }\n  return sessionKeys;\n}\n\n//function logS(f1, f2) {\n//  log.log(f1, JSON.stringify(util.inspect(f2)));\n//}\n\nexports.default = IdentityModule;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9pZGVudGl0eS9JZGVudGl0eU1vZHVsZS5qcz81MTE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExvZyBTeXN0ZW1cbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignSWRlbnRpdHlNb2R1bGUnKTtcblxuaW1wb3J0IHtkaXZpZGVVUkwsIGdldFVzZXJFbWFpbEZyb21VUkwsIGlzRGF0YU9iamVjdFVSTCwgZ2V0VXNlcklkZW50aXR5RG9tYWluLCBpc0xlZ2FjeSwgZGVlcENsb25lIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMuanMnO1xuaW1wb3J0IElkZW50aXR5IGZyb20gJy4vSWRlbnRpdHknO1xuaW1wb3J0IENyeXB0byBmcm9tICcuL0NyeXB0byc7XG5pbXBvcnQgR3VpRmFrZSBmcm9tICcuL0d1aUZha2UnO1xuaW1wb3J0IHsgV2F0Y2hpbmdZb3UgfSBmcm9tICdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1V0aWxzJztcblxuLyoqXG4qXG4qIFRoZSBJZGVudGl0eSBNb2R1bGUgKElkIE1vZHVsZSkgaXMgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlXG4qIHVzZXIgaWRlbnRpdHkgYW5kIHRoZSBhc3NvY2lhdGlvbiBvZiB0aGlzIGlkZW50aXR5IHdpdGggdGhlIEh5cGVydHkgaW5zdGFuY2VzLFxuKiBpbiBvcmRlciB0byBtYWtlIEh5cGVydHkgaW5zdGFuY2VzIGlkZW50aWZpYWJsZS4gVGhlIGlkZW50aXR5IGluIHRoZSByZVRISU5LIHByb2plY3RcbiogaXMgbm90IGZpeGVkIHRvIGEgdW5pcXVlIElkZW50aXR5IFNlcnZpY2UgUHJvdmlkZXIsIGJ1dCBvYnRhaW5lZCB0aHJvdWdoIHNldmVyYWxcbiogZGlmZmVyZW50IElkZW50aXR5IHNvdXJjZXMuIFdpdGggdGhpcyBhcHByb2FjaCwgdGhlIElkIE1vZHVsZSBwcm92aWRlcyB0byB0aGUgdXNlciB0aGVcbiogb3B0aW9uIHRvIGNob29zZSB0aGUgcHJlZmVycmVkIG1ldGhvZCBmb3IgYXV0aGVudGljYXRpb24uXG4qIFRoaXMgbW9kdWxlIHdpbGwgdGh1cyBhYmxlIHRvIHN1cHBvcnQgbXVsdGlwbGUgSWRlbnRpdHkgYWNxdWlzaXRpb24gbWV0aG9kcyxcbiogc3VjaCBhcyBPcGVuSUQgY29ubmVjdCAxLjAsIEtlcmJlcm9zIFN5c3RlbSwgb3IgYXV0aGVudGljYXRpb24gdGhyb3VnaCBzbWFydCBjYXJkcy5cbiogRm9yIGV4YW1wbGUsIGEgdXNlciB3aXRoIGEgR29vZ2xlIGFjY291bnQgY2FuIHVzZSB0aGUgR29vZ2xlIGFzIGFuIElkZW50aXR5IFByb3ZpZGVyIHRvIHByb3ZpZGUgSWRlbnRpdHkgVG9rZW5zLFxuKiAgd2hpY2ggY2FuIGJlIHVzZWQgYnkgdGhlIElkZW50aXR5IE1vZHVsZSB0byBhc3NvY2lhdGUgaXQgd2l0aCBhIEh5cGVydHkgaW5zdGFuY2UuXG4qXG4qIFRoZSBJZGVudGl0eSBNb2R1bGUgdXNlcyBhIG5vZGUgcGFja2FnZSwgdGhlIEhlbGxvSlMsIHdoaWNoIGlzIGEgY2xpZW50LXNpZGUgSmF2YVNjcmlwdCBBUEkgZm9yIGF1dGhlbnRpY2F0aW9uXG4qIHRoYXQgZmFjaWxpdGF0ZXMgdGhlIHJlcXVlc3RzIGZvciB0aGUgT3BlbklEIGNvbm5lY3QgcHJvdG9jb2wuIFRoaXMgbWV0aG9kIGFsbG93cyBmb3Igc29tZSBhYnN0cmFjdGlvblxuKiB3aGVuIG1ha2luZyByZXF1ZXN0cyBmb3IgZGlmZmVyZW50IElkZW50aXR5IFByb3ZpZGVycywgc3VjaCBhcyBPcGVuSUQgY29ubmVjdCB1c2VkIGJ5IEdvb2dsZSwgRmFjZWJvb2ssIE1pY3Jvc29mdCwgZm9yIGV4YW1wbGUuXG4qXG4qIFdoZW4gYSByZXF1ZXN0IGZvciBhIHVzZXIgaWRlbnRpdHkgaXMgbWFkZSB1c2luZyB0aGUgbWV0aG9kIGxvZ2luV2l0aFJQKGlkZW50aWZpZXIsIHNjb3BlKSxcbiogdGhpcyBtZXRob2Qgd2lsbCBhbmFseXNlIHRoZSBJZGVudGl0eSBQcm92aWRlciBjaG9zZW4gdG8gb2J0YWluIGFuIGlkZW50aXR5IGFuZCB3aWxsIHVzZSB0aGUgSGVsbG9KUyBub2RlIHBhY2thZ2Vcbiogd2l0aCB0aGUgc2VsZWN0ZWQgSWRlbnRpdHkgUHJvdmlkZXIgYW5kIGlkZW50aXR5IHNjb3BlLiBBZnRlciB0aGUgSGVsbG9KUyByZXF1ZXN0IGZvciBhbiBBY2Nlc3MgVG9rZW5cbiogdG8gdGhlIElkZW50aXR5IFByb3ZpZGVycywgdGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCB0byBhdXRoZW50aWNhdGUgdG93YXJkcyB0aGUgSWRlbnRpdHkgUHJvdmlkZXIuXG4qIFVwb24gcmVjZWl2aW5nIHRoZSBBY2Nlc3MgVG9rZW4sIHRoaXMgdG9rZW4gaXMgdmFsaWRhdGVkIHdpdGggYSBSRVNUZnVsIHdlYiBzZXJ2aWNlIHJlcXVlc3QgdG8gYW4gZW5kcG9pbnRcbiogb24gdGhlIElkZW50aXR5IFByb3ZpZGVyIEF1dGhvcml6YXRpb24gU2VydmVyLCBhbmQgYWZ0ZXIgdGhlIHZhbGlkYXRpb24gaXMgZG9uZSxcbiogYW4gSUQgdG9rZW4gaXMgb2J0YWluZWQgd2l0aCB0aGUgaW5mb3JtYXRpb24gYWNjb3JkaW5nIHRvIHRoZSBzY29wZSByZXF1aXJlZC5cbiogVGhpcyBJRCB0b2tlbiBpcyB0aGVuIHByZXNlcnZlZCBpbiB0aGlzIG1vZHVsZSB0aGF0IGNhbiBvYnRhaW5lZCB0aHJvdWdoIHRoZSBnZXRJZGVudGl0aWVzKClcbiogYW5kIGlzIHBhc3NlZCBhcyByZXR1cm4gdmFsdWUgb2YgdGhlIGxvZ2luV2l0aFJQIGZ1bmN0aW9uLiBUaGUgbWV0aG9kcyBnZW5lcmF0ZUFzc2VydGlvbiBhbmQgdmFsaWRhdGVBc3NlcnRpb24gaGF2ZSBub3QgeWV0IGJlZW4gZGV2ZWxvcGVkLlxuKlxuKi9cbmNsYXNzIElkZW50aXR5TW9kdWxlIHtcblxuICAvKipcbiAgKiBUaGlzIGlzIHRoZSBjb25zdHJ1Y3RvciB0byBpbml0aWFsaXNlIHRoZSBJZGVudGl0eSBNb2R1bGUgaXQgZG9lcyBub3QgcmVxdWlyZSBhbnkgaW5wdXQuXG4gICovXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIHJ1bnRpbWVDYXBhYmlsaXRpZXMsIHN0b3JhZ2VNYW5hZ2VyLCBkYXRhT2JqZWN0c1N0b3JhZ2UsIHJ1bnRpbWVGYWN0b3J5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7XG4gICAgaWYgKCFzdG9yYWdlTWFuYWdlcikgdGhyb3cgbmV3IEVycm9yKCdzdG9yYWdlTWFuYWdlciBpcyBtaXNzaW5nJyk7XG4gICAgaWYgKCFydW50aW1lRmFjdG9yeSkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lRmFjdG9yeSBpcyBtaXNzaW5nJyk7XG5cbiAgICBfdGhpcy5fcnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7XG4gICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIgPSBzdG9yYWdlTWFuYWdlcjtcbiAgICBfdGhpcy5kYXRhT2JqZWN0c1N0b3JhZ2UgPSBkYXRhT2JqZWN0c1N0b3JhZ2U7XG4gICAgX3RoaXMuX2lkbVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZG0nO1xuICAgIF90aGlzLl9ndWlVUkwgPSBfdGhpcy5fcnVudGltZVVSTCArICcvaWRlbnRpdHktZ3VpJztcbiAgICBfdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzID0gcnVudGltZUNhcGFiaWxpdGllcztcbiAgICBfdGhpcy5ydW50aW1lRmFjdG9yeSA9IHJ1bnRpbWVGYWN0b3J5O1xuXG4gICAgX3RoaXMuX2RvbWFpbiA9IGRpdmlkZVVSTChfdGhpcy5fcnVudGltZVVSTCkuZG9tYWluO1xuXG4gICAgX3RoaXMud2F0Y2hpbmdZb3UgPSBuZXcgV2F0Y2hpbmdZb3UoKTtcblxuICAgIC8vdG8gc3RvcmUgaXRlbXMgd2l0aCB0aGlzIGZvcm1hdDoge2lkZW50aXR5OiBpZGVudGl0eVVSTCwgdG9rZW46IHRva2VuSUR9XG4gICAgX3RoaXMuaWRlbnRpdGllcyA9IFtdO1xuICAgIF90aGlzLmlkZW50aXRpZXNMaXN0ID0gIF90aGlzLndhdGNoaW5nWW91LndhdGNoKCdpZGVudGl0aWVzTGlzdCcsIHt9LCB0cnVlKTtcbiAgICBfdGhpcy5lbWFpbHNMaXN0ID0gW107XG4gICAgbGV0IG5ld0lkZW50aXR5ID0gbmV3IElkZW50aXR5KCdndWlkJywgJ0hVTUFOJyk7XG4gICAgX3RoaXMuaWRlbnRpdHkgPSBuZXdJZGVudGl0eTtcbiAgICBfdGhpcy5jcnlwdG8gPSBuZXcgQ3J5cHRvKF90aGlzLnJ1bnRpbWVGYWN0b3J5KTtcbiAgICBfdGhpcy5jdXJyZW50SWRlbnRpdHk7XG4gICAgX3RoaXMuZGVmYXVsdElkZW50aXR5O1xuXG4gICAgLy9zdG9yZXMgdGhlIGFzc29jaWF0aW9uIG9mIHRoZSBkYXRhT2JqZWN0IGFuZCB0aGUgSHlwZXJ0eSByZWdpc3RlcmVkIHdpdGhpblxuICAgIF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHkgPSB7fTtcblxuICAgIC8vIGhhc2hUYWJsZSB0byBzdG9yZSBhbGwgdGhlIGNyeXB0byBpbmZvcm1hdGlvbiBiZXR3ZWVuIHR3byBoeXBlcnRpZXNcbiAgICBfdGhpcy5jaGF0S2V5cyA9IHt9O1xuXG4gICAgLy8gaGFzaFRhYmxlIHRvIHN0b3JlIHRoZSBzeW1tZXRyaWMga2V5cyB0byBiZSB1c2VkIGluIHRoZSBjaGF0IGdyb3VwXG4gICAgX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzID0ge307XG5cbiAgICAvL2ZhaWxzYWZlIHRvIGVuYWJsZS9kaXNhYmxlIGFsbCB0aGUgY3JpcHRvZ3JhcGhpYyBmdW5jdGlvbnNcbiAgICBfdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiA9IHRydWU7XG5cbiAgICAvLyB2YXJpYWJsZSB0byBrbm93IGlmIHRoZSBHVUkgaXMgZGVwbG95ZWQgdG8gY2hvb3NlIHRoZSBpZGVudGl0eS4gaWYgdGhlIHJlYWwgR1VJIGlzIG5vdCBkZXBsb3llZCwgYSBmYWtlIGd1aSBpcyBkZXBsb3llZCBpbnN0ZWFkLlxuICAgIF90aGlzLmd1aURlcGxveWVkID0gZmFsc2U7XG5cbiAgICAvLyB2ZXJpZmljYXRpb24gb2Ygbm9kZUpTLCBhbmQgaW4gY2FzZSBpdCBpcyBub2RlSlMgdGhlbiBkaXNhYmxlIGVuY3J5cHRpb25cbiAgICAvLyBUT0RPIGltcHJvdmUgbGF0ZXIsIHRoaXMgZXhpc3RzIGJlY2F1c2UgdGhlIGNyeXB0byBsaWIgdXNlcyBicm93c2VyIGNyeXB0b2dyYXBoaWMgbWV0aG9kc1xuICAgIC8vX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSAod2luZG93KSA/IHRydWUgOiBmYWxzZTtcblxuICAgIC8vIF90aGlzLmxvYWRJZGVudGl0aWVzKCk7XG5cbiAgfVxuXG4gIC8vKioqKioqKioqKioqKioqKioqKiBHRVQgQU5EIFNFVCBNRVRIT0RTICoqKioqKioqKioqKioqKioqKipcblxuICAvKipcbiAgKiByZXR1cm4gdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeVxuICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXNcbiAgKi9cbiAgZ2V0IG1lc3NhZ2VCdXMoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX21lc3NhZ2VCdXM7XG4gIH1cblxuICAvKipcbiAgKiBTZXQgdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeVxuICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXNcbiAgKi9cbiAgc2V0IG1lc3NhZ2VCdXMobWVzc2FnZUJ1cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX21lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzO1xuICAgIF90aGlzLmFkZEdVSUxpc3RlbmVycygpO1xuICB9XG5cbiAgLyoqXG4gICogcmV0dXJuIHRoZSBjb3JlRGlzY292ZXJ5IGNvbXBvbmVudFxuICAqL1xuICBnZXQgY29yZURpc2NvdmVyeSgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fY29yZURpc2NvdmVyeTtcbiAgfVxuXG4gIC8qKlxuICAqIFNldCB0aGUgY29yZURpc2NvdmVyeSBjb21wb25lbnRcbiAgKiBAcGFyYW0ge2NvcmVEaXNjb3Zlcnl9IGNvcmVEaXNjb3ZlcnlcbiAgKi9cbiAgc2V0IGNvcmVEaXNjb3ZlcnkoY29yZURpc2NvdmVyeSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX2NvcmVEaXNjb3ZlcnkgPSBjb3JlRGlzY292ZXJ5O1xuICB9XG5cbiAgLyoqXG4gICogcmV0dXJuIHRoZSByZWdpc3RyeSBpbiB0aGlzIGlkTW9kdWxlXG4gICogQHBhcmFtIHtyZWdpc3RyeX0gICAgICAgICAgIHJlZ2lzdHJ5XG4gICovXG4gIGdldCByZWdpc3RyeSgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fcmVnaXN0cnk7XG4gIH1cblxuICAvKipcbiAgKiBTZXQgdGhlIHJlZ2lzdHJ5IGluIHRoaXMgaWRNb2R1bGVcbiAgKiBAcGFyYW0ge3JlZ2lzdHJ5fSAgICAgcmVnXG4gICovXG4gIHNldCByZWdpc3RyeShyZWdpc3RyeSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gIH1cblxuXG4gIC8vKioqKioqKioqKioqKioqKioqKiBJREVOVElUWSBSRUxFQVRFRCBNRVRIT0RTICoqKioqKioqKioqKioqKioqKipcbiAgLyoqXG4gICogZ2V0cyBhbGwgdGhlIGluZm9ybWF0aW9uIGZyb20gYSBnaXZlbiB1c2VyVVJMXG4gICogQHBhcmFtICB7U3RyaW5nfSAgdXNlclVSTCAgICAgdXNlciB1cmxcbiAgKiBAcmV0dXJuIHtKU09OfSAgICBpZGVudGl0eSAgICBpZGVudGl0eSBidW5kbGUgZnJvbSB0aGUgdXNlclVSTFxuICAqL1xuICBnZXRJZGVudGl0eSh1c2VyVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGZvciAobGV0IGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHtcblxuICAgICAgbGV0IGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07XG5cbiAgICAgIGlmIChpZGVudGl0eS5pZGVudGl0eSA9PT0gdXNlclVSTCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgJ2lkZW50aXR5IG5vdCBmb3VuZCc7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byBzZXQgdGhlIGN1cnJlbnQgSWRlbnRpdHkgd2l0aCBhIGdpdmVuIElkZW50aXR5XG4gICogQHBhcmFtIHtJZGVudGl0eX0gICAgICAgIGlkZW50aXR5ICAgICAgICAgaWRlbnRpdHlcbiAgKi9cbiAgc2V0Q3VycmVudElkZW50aXR5KGlkZW50aXR5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5jdXJyZW50SWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHJldHVybiBhbGwgdGhlIGlkZW50aXRpZXMgcmVnaXN0ZXJlZCB3aXRoaW4gYSBzZXNzaW9uIGJ5IGEgdXNlci5cbiAgKiBUaGVzZSBpZGVudGl0aWVzIGFyZSByZXR1cm5lZCBpbiBhbiBhcnJheSBjb250YWluaW5nIGEgSlNPTiBwYWNrYWdlIGZvciBlYWNoIHVzZXIgaWRlbnRpdHkuXG4gICogQHJldHVybiB7QXJyYXk8SWRlbnRpdGllcz59ICAgICAgICAgSWRlbnRpdGllc1xuICAqL1xuICBnZXRJZGVudGl0aWVzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLmlkZW50aXRpZXM7XG4gIH1cblxuICBnZXRJZGVudGl0aWVzVG9DaG9vc2UoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgaWRlbnRpdGllcyA9IF90aGlzLmVtYWlsc0xpc3Q7XG5cbiAgICAvLyBsZXQgaWRwcyA9IFtcbiAgICAvLyAgIHsgZG9tYWluOiAnZ29vZ2xlLmNvbScsIHR5cGU6ICdpZFRva2VuJ30sXG4gICAgLy8gICB7IGRvbWFpbjogJ21pY3Jvc29mdC5jb20nLCB0eXBlOiAnaWRUb2tlbid9LFxuICAgIC8vICAgeyBkb21haW46ICdvcmFuZ2UuZnInLCB0eXBlOiAnaWRUb2tlbid9LFxuICAgIC8vICAgeyBkb21haW46ICdzbGFjay5jb20nLCB0eXBlOiAnTGVnYWN5J31cbiAgICAvLyBdO1xuXG4gICAgbGV0IGlkcHMgPSBbXG4gICAgICB7IGRvbWFpbjogJ2dvb2dsZS5jb20nLCB0eXBlOiAnaWRUb2tlbid9LFxuICAgICAgeyBkb21haW46ICdtaWNyb3NvZnQuY29tJywgdHlwZTogJ2lkVG9rZW4nfSxcbiAgICAgIHsgZG9tYWluOiAnc2xhY2suY29tJywgdHlwZTogJ0xlZ2FjeSd9XG4gICAgXTtcblxuICAgIHJldHVybiB7aWRlbnRpdGllczogaWRlbnRpdGllcywgaWRwczogaWRwc307XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gdGhlIHNlbGVjdGVkIElkZW50aXR5IHdpdGhpbiBhIHNlc3Npb25cbiAgKiBAcmV0dXJuIHtJZGVudGl0eX0gICAgICAgIGlkZW50aXR5ICAgICAgICAgaWRlbnRpdHlcbiAgKi9cbiAgZ2V0Q3VycmVudElkZW50aXR5KCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLmN1cnJlbnRJZGVudGl0eTtcbiAgfVxuXG4gIGxvYWRJZGVudGl0aWVzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgnaWRNb2R1bGU6aWRlbnRpdGllcycpLnRoZW4oKGlkZW50aXRpZXMpID0+IHtcblxuICAgICAgICBpZiAoaWRlbnRpdGllcykge1xuICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMgPSBpZGVudGl0aWVzO1xuXG4gICAgICAgICAgaWRlbnRpdGllcy5mb3JFYWNoKChpZGVudGl0eSkgPT4ge1xuICAgICAgICAgICAgbGV0IHRpbWVOb3cgPSBfdGhpcy5fc2Vjb25kc1NpbmNlRXBvY2goKTtcbiAgICAgICAgICAgIGxldCBleHBpcmVzID0gMDtcblxuICAgICAgICAgICAgaWYgKGlkZW50aXR5LmluZm8gJiYgaWRlbnRpdHkuaW5mby5leHBpcmVzKSB7XG4gICAgICAgICAgICAgIGV4cGlyZXMgPSBpZGVudGl0eS5pbmZvLmV4cGlyZXM7XG4gICAgICAgICAgICB9ICBlbHNlIGlmIChpZGVudGl0eS5pbmZvICYmIGlkZW50aXR5LmluZm8udG9rZW5JREpTT04gJiYgaWRlbnRpdHkuaW5mby50b2tlbklESlNPTi5leHApIHtcbiAgICAgICAgICAgICAgZXhwaXJlcyA9IGlkZW50aXR5LmluZm8udG9rZW5JREpTT04uZXhwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWlkZW50aXR5Lmhhc093blByb3BlcnR5KCdpbnRlcndvcmtpbmcnKSAmJiAhaWRlbnRpdHkuaW50ZXJ3b3JraW5nKSB7XG4gICAgICAgICAgICAgIF90aGlzLmRlZmF1bHRJZGVudGl0eSA9IGlkZW50aXR5Lm1lc3NhZ2VJbmZvO1xuXG4gICAgICAgICAgICAgIGlmIChwYXJzZUludChleHBpcmVzKSA+IHRpbWVOb3cpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5kZWZhdWx0SWRlbnRpdHkuZXhwaXJlcyA9IHBhcnNlSW50KGV4cGlyZXMpO1xuICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IF90aGlzLmRlZmF1bHRJZGVudGl0eTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgZmV0Y2ggYW4gaWRlbnRpdHlBc3NlcnRpb24gZnJvbSBhIHVzZXIuXG4gICpcbiAgKiBAcmV0dXJuIHtJZEFzc2VydGlvbn0gICAgICAgICAgICAgIElkQXNzZXJ0aW9uXG4gICovXG4gIGdldElkZW50aXR5QXNzZXJ0aW9uKGlkZW50aXR5QnVuZGxlKSB7XG4gICAgbG9nLmxvZygnW2dldElkZW50aXR5QXNzZXJ0aW9uOmlkZW50aXR5QnVuZGxlXScsIGlkZW50aXR5QnVuZGxlKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAvL0NIRUNLIHdoZXRoZXIgaXMgYnJvd3NlciBlbnZpcm9ubWVudCBvciBub2RlanNcbiAgICAgIC8vaWYgaXQgaXMgYnJvd3NlciwgdGhlbiBjcmVhdGUgYSBmYWtlIGlkZW50aXR5XG5cbiAgICAgIF90aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMuaXNBdmFpbGFibGUoJ2Jyb3dzZXInKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgbG9nLmxvZygncnVudGltZSBicm93c2VyIGlkZW50aXR5IGFjcXVpc2l0aW9uJywgcmVzdWx0KTtcblxuICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuO1xuXG4gICAgICAgIC8vdG9kbzogb25seSBpZHAgc2hvdWxkIGJlIG1hbmRhdG9yeSB3aGVuIGlkZW50aXR5QnVuZGxlIGV4aXN0c1xuXG4gICAgICAgIGlmIChpZGVudGl0eUJ1bmRsZSAmJlxuICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuaGFzT3duUHJvcGVydHkoJ2lkcCcpKSB7XG5cbiAgICAgICAgICBsZXQgaWRwID0gaWRlbnRpdHlCdW5kbGUuaWRwO1xuICAgICAgICAgIGxldCBvcmlnaW4gPSBpZGVudGl0eUJ1bmRsZS5oYXNPd25Qcm9wZXJ0eSgnb3JpZ2luJykgPyBpZGVudGl0eUJ1bmRsZS5vcmlnaW4gOiAnb3JpZ2luJztcbiAgICAgICAgICBsZXQgaWRIaW50ID0gaWRlbnRpdHlCdW5kbGUuaGFzT3duUHJvcGVydHkoJ2lkSGludCcpID8gaWRlbnRpdHlCdW5kbGUuaWRIaW50IDogJyc7XG5cbiAgICAgICAgICBfdGhpcy5zZWxlY3RJZGVudGl0eUZvckh5cGVydHkob3JpZ2luLCBpZHAsIGlkSGludCkudGhlbigoYXNzZXJ0aW9uKSA9PiB7XG4gICAgICAgICAgICBsb2cubG9nKCdbSWRlbnRpdHlNb2R1bGVdIElkZW50aXR5IHNlbGVjdGVkIGJ5IGh5cGVydHkuJyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShhc3NlcnRpb24pO1xuICAgICAgICAgIH0sIChlcnIpID0+IHsgLy8gaWYgaXQgZ290IGFuIGVycm9yIHRoZW4ganVzdCBzZWxlY3QgaWRlbnRpdHkgZnJvbSBHVUlcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ1tJZGVudGl0eU1vZHVsZV0gQ291bGQgbm90IHNlbGVjdCBpZGVudGl0eSBmcm9tIGh5cGVydHkuJyk7XG4gICAgICAgICAgICBfdGhpcy5zZWxlY3RJZGVudGl0eUZyb21HVUkoKS50aGVuKChuZXdBc3NlcnRpb24pID0+IHtcbiAgICAgICAgICAgICAgbG9nLmxvZygnW0lkZW50aXR5TW9kdWxlXSBJZGVudGl0eSBzZWxlY3RlZCBieSBoeXBlcnR5LicpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShuZXdBc3NlcnRpb24pO1xuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIGlmIChfdGhpcy5kZWZhdWx0SWRlbnRpdHkgJiYgX3RoaXMuZGVmYXVsdElkZW50aXR5LmV4cGlyZXMgPiBfdGhpcy5fc2Vjb25kc1NpbmNlRXBvY2goKSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMuZGVmYXVsdElkZW50aXR5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuc2VsZWN0SWRlbnRpdHlGcm9tR1VJKCkudGhlbigoYXNzZXJ0aW9uKSA9PiB7XG5cbiAgICAgICAgICAgICAgbG9nLmxvZygnW0lkZW50aXR5TW9kdWxlXSBJZGVudGl0eSBzZWxlY3RlZCBmcm9tIEdVSS4nKTtcblxuICAgICAgICAgICAgICBpZiAoYXNzZXJ0aW9uLmhhc093blByb3BlcnR5KCdtZXNzYWdlSW5mbycpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVmYXVsdElkZW50aXR5ID0gYXNzZXJ0aW9uLm1lc3NhZ2VJbmZvO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFzc2VydGlvbi5tZXNzYWdlSW5mbyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBfdGhpcy5kZWZhdWx0SWRlbnRpdHkgPSBhc3NlcnRpb247XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGFzc2VydGlvbik7XG4gICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBvbiBpZGVudGl0eSBhY3F1aXNpdGlvbiAnLCBlcnJvcik7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMuaXNBdmFpbGFibGUoJ25vZGUnKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgbG9nLmxvZygnbm9kZSBpZGVudGl0eSBhY3F1aXNpdGlvbicsIHJlc3VsdCk7XG5cbiAgICAgICAgaWYgKCFyZXN1bHQpIHJldHVybjtcblxuICAgICAgICBpZiAoX3RoaXMuY3VycmVudElkZW50aXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvL1RPRE8gdmVyaWZ5IHdoZXRoZXIgdGhlIHRva2VuIGlzIHN0aWxsIHZhbGlkIG9yIG5vdC5cbiAgICAgICAgICAvLyBzaG91bGQgYmUgbmVlZGVkIHRvIG1ha2UgZnVydGhlciByZXF1ZXN0cywgdG8gb2J0YWluIGEgdmFsaWQgdG9rZW5cbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5jdXJyZW50SWRlbnRpdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZy5sb2coJ2dldElkZW50aXR5QXNzZXJ0aW9uIGZvciBub2RlanMnKTtcblxuICAgICAgICAgIGxldCBpZHAgPSB7dHlwZTogJ2lkcCcsIHZhbHVlOiAnbm9kZWpzLWlkcCcsIGNvZGU6IDIwMCwgYXV0aDogZmFsc2V9O1xuICAgICAgICAgIF90aGlzLmNhbGxOb2RlSnNHZW5lcmF0ZU1ldGhvZHMoaWRwLnZhbHVlLCAnb3JpZ2luJykudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb24gaWRlbnRpdHkgYWNxdWlzaXRpb24gJywgZXJyb3IpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHJldHVybiBhbGwgdGhlIHVzZXJzIFVSTHMgcmVnaXN0ZXJlZCB3aXRoaW4gYSBzZXNzaW9uXG4gICogVGhlc2UgdXNlcnMgVVJMcyBhcmUgcmV0dXJuZWQgaW4gYW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAgKiBAcGFyYW0gIHtCb29sZWFufSAgZW1haWxGb3JtYXQgKE9wdGlvbmFsKSAgIGJvb2xlYW4gdG8gaW5kaWNhdGUgdG8gcmV0dXJuIGluIGVtYWlsIGZvcm1hdFxuICAqIEByZXR1cm4ge0FycmF5PFN0cmluZz59ICAgICAgICAgdXNlcnNcbiAgKi9cbiAgZ2V0VXNlcnNJRHMoZW1haWxGb3JtYXQpIHtcbiAgICBsb2cubG9nKCdbZ2V0VXNlcnNJRHM6ZW1haWxGb3JtYXRdJywgZW1haWxGb3JtYXQpO1xuICAgIGxvZy5sb2coJ2dldFVzZXJzSURzOmVtYWlsRm9ybWF0JywgZW1haWxGb3JtYXQpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHVzZXJzID0gW107XG5cbiAgICAvL2lmIHJlcXVlc3QgY29tZXMgd2l0aCB0aGUgZW1haWxGb3JtYXQgb3B0aW9uLCB0aGVuIGNvbnZlcnQgdXJsIHRvIGVtYWlsIGZvcm1hdFxuICAgIGxldCBjb252ZXJ0ZXIgPSAoZW1haWxGb3JtYXQpID8gZ2V0VXNlckVtYWlsRnJvbVVSTCA6ICh2YWx1ZSkgPT4geyByZXR1cm4gdmFsdWU7IH07XG5cbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XG4gICAgICBsZXQgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTtcbiAgICAgIHVzZXJzLnB1c2goY29udmVydGVyKGlkZW50aXR5LmlkZW50aXR5KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzZXJzO1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gcmVtb3ZlIGFuIGlkZW50aXR5IGZyb20gdGhlIElkZW50aXRpZXMgYXJyYXlcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgdXNlclVSTCAgICAgIHVzZXJVUkxcbiAgKi9cbiAgZGVsZXRlSWRlbnRpdHkodXNlclVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvL2xldCB1c2VyVVJMID0gY29udmVydFRvVXNlclVSTCh1c2VySUQpO1xuXG4gICAgZm9yIChsZXQgaWRlbnRpdHkgaW4gX3RoaXMuaWRlbnRpdGllcykge1xuICAgICAgaWYgKF90aGlzLmlkZW50aXRpZXNbaWRlbnRpdHldLmlkZW50aXR5ID09PSB1c2VyVVJMKSB7XG4gICAgICAgIF90aGlzLmlkZW50aXRpZXMuc3BsaWNlKGlkZW50aXR5LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byB1bnJlZ2lzdGVyIGFuIGlkZW50aXR5IGZyb20gdGhlIGVtYWlsc0xpc3QgYXJyYXkgYW5kIG5vdCBzaG93IGluIHRvIHRoZSBHVUlcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgZW1haWwgICAgICBlbWFpbFxuICAqL1xuICB1bnJlZ2lzdGVySWRlbnRpdHkoZW1haWwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yIChsZXQgZSBpbiBfdGhpcy5lbWFpbHNMaXN0KSB7XG4gICAgICBpZiAoX3RoaXMuZW1haWxzTGlzdFtlXSA9PT0gZW1haWwpIHtcbiAgICAgICAgX3RoaXMuZW1haWxzTGlzdC5zcGxpY2UoZSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdGhhdCBzZW5kcyBhIHJlcXVlc3QgdG8gdGhlIEdVSSB1c2luZyBtZXNzYWdlcy4gU2VuZHMgYWxsIGlkZW50aXRpZXMgcmVnaXN0ZXJlZCBhbmRcbiAgKiB0aGUgSWRwcyBzdXBwb3J0ZWQsIGFuZCByZXR1cm4gdGhlIGlkZW50aXR5L2lkcCByZWNlaXZlZCBieSB0aGUgR1VJXG4gICogQHBhcmFtIHtBcnJheTxpZGVudGl0eT59ICBpZGVudGl0aWVzICAgICAgbGlzdCBvZiBpZGVudGl0aWllc1xuICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nPn0gICAgaWRwcyAgICAgICAgICAgIGxpc3Qgb2YgaWRwcyB0byBhdXRoZW50aWNhdGVcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgIHJldHVybnMgYSBjaG9zZW4gaWRlbnRpdHkgb3IgaWRwXG4gICovXG4gIHJlcXVlc3RJZGVudGl0eVRvR1VJKGlkZW50aXRpZXMsIGlkcHMpIHtcbiAgICBsb2cubG9nKCdbcmVxdWVzdElkZW50aXR5VG9HVUk6aWRlbnRpdGllc10nLCBpZGVudGl0aWVzKTtcbiAgICBsb2cubG9nKCdbcmVxdWVzdElkZW50aXR5VG9HVUk6aWRwc10nLCBpZHBzKTtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAvL2NvbmRpdGlvbiB0byBjaGVjayBpZiB0aGUgcmVhbCBHVUkgaXMgZGVwbG95ZWQuIElmIG5vdCwgZGVwbG95cyBhIGZha2UgZ3VpXG4gICAgICBpZiAoX3RoaXMuZ3VpRGVwbG95ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIGxldCBndWlGYWtlVVJMID0gX3RoaXMuX2d1aVVSTDtcbiAgICAgICAgbGV0IGd1aUZha2UgPSBuZXcgR3VpRmFrZShndWlGYWtlVVJMLCBfdGhpcy5fbWVzc2FnZUJ1cyk7XG4gICAgICAgIF90aGlzLmd1aUZha2UgPSBndWlGYWtlO1xuICAgICAgICBfdGhpcy5ndWlEZXBsb3llZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGxldCBtZXNzYWdlID0ge3R5cGU6ICdjcmVhdGUnLCB0bzogX3RoaXMuX2d1aVVSTCwgZnJvbTogX3RoaXMuX2lkbVVSTCxcbiAgICAgICAgYm9keToge3ZhbHVlOiB7aWRlbnRpdGllczogaWRlbnRpdGllcywgaWRwczogaWRwc319fTtcblxuICAgICAgbGV0IGlkID0gX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG5cbiAgICAgIC8vYWRkIGxpc3RlbmVyIHdpdGhvdXQgdGltb3V0XG4gICAgICB0cnkge1xuICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRSZXNwb25zZUxpc3RlbmVyKF90aGlzLl9pZG1VUkwsIGlkLCBtc2cgPT4ge1xuICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnJlbW92ZVJlc3BvbnNlTGlzdGVuZXIoX3RoaXMuX2lkbVVSTCwgaWQpO1xuXG5cbiAgICAgICAgICAvLyB0b2RvOiB0byByZXR1cm4gdGhlIHVzZXIgVVJMIGFuZCBub3QgdGhlIGVtYWlsIG9yIGlkZW50aWZpZXJcblxuICAgICAgICAgIGlmIChtc2cuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICAgIGxldCBzZWxlY3RlZElkZW50aXR5ID0gbXNnLmJvZHk7XG5cbiAgICAgICAgICAgIGxvZy5sb2coJ3NlbGVjdGVkSWRlbnRpdHk6ICcsIHNlbGVjdGVkSWRlbnRpdHkudmFsdWUpO1xuICAgICAgICAgICAgcmVzb2x2ZShzZWxlY3RlZElkZW50aXR5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdlcnJvciBvbiByZXF1ZXN0aW5nIGFuIGlkZW50aXR5IHRvIHRoZSBHVUknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdCgnSW4gbWV0aG9kIGNhbGxJZGVudGl0eU1vZHVsZUZ1bmMgZXJyb3I6ICcgKyBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY2FsbE5vZGVKc0dlbmVyYXRlTWV0aG9kcyhpZHAsIG9yaWdpbikge1xuICAgIGxvZy5sb2coJ1tjYWxsTm9kZUpzR2VuZXJhdGVNZXRob2RzOmlkcF0nLCBpZHApO1xuICAgIGxvZy5sb2coJ1tjYWxsTm9kZUpzR2VuZXJhdGVNZXRob2RzOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy9kZWJ1Z2dlcjtcbiAgICAgIGxldCBwdWJsaWNLZXk7XG4gICAgICBsZXQgdXNlcmtleVBhaXI7XG5cbiAgICAgIC8vZ2VuZXJhdGVzIHRoZSBSU0Ega2V5IHBhaXJcbiAgICAgIF90aGlzLmNyeXB0by5nZW5lcmF0ZVJTQUtleVBhaXIoKS50aGVuKGZ1bmN0aW9uKGtleVBhaXIpIHtcblxuICAgICAgICBsb2cubG9nKCdbY2FsbE5vZGVKc0dlbmVyYXRlTWV0aG9kczprZXlQYWlyLnB1YmxpY10nLCBrZXlQYWlyLnB1YmxpYyk7XG5cblxuICAgICAgICBwdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGtleVBhaXIucHVibGljKTtcbiAgICAgICAgdXNlcmtleVBhaXIgPSBrZXlQYWlyO1xuXG4gICAgICAgIC8vbG9nLmxvZygnW2NhbGxOb2RlSnNHZW5lcmF0ZU1ldGhvZHM6Z2VuZXJhdGVTZWxlY3RlZElkZW50aXR5XSBOT19VUkwnKTtcbiAgICAgICAgLy8gICAgcmV0dXJuIF90aGlzLmdlbmVyYXRlQXNzZXJ0aW9uKHB1YmxpY0tleSwgb3JpZ2luLCAnJywgdXNlcmtleVBhaXIsIGlkcCk7XG4gICAgICAgIC8vfSkudGhlbihmdW5jdGlvbih1cmwpIHtcblxuICAgICAgICBsb2cubG9nKCdbY2FsbE5vZGVKc0dlbmVyYXRlTWV0aG9kczpnZW5lcmF0ZVNlbGVjdGVkSWRlbnRpdHldIE5PX1VSTCcpO1xuXG4gICAgICAgIGxldCB1cmwgPSAnaHR0cHM6Ly9sb2NhbGhvc3QvI3N0YXRlPXN0YXRlJmNvZGU9NC8tbWxHVVpEa1BVQzc5TXpBOXNkNFNrNXZNSkxpaG1teEZ2ZXdNOHlKcmJzJmFjY2Vzc190b2tlbj15YTI5LkdsdjNCS0R1QjA5LXRuSUtLdTVXVF9aZXh0Y2Q3eXNnV0t2WmJ2R3YtUllJMEhhUTc2cXdJdnNURjNzVnVKZmgyZS1jenRvalh5MFpzakhTZmExY01mbnFOS1l0amc4WjJxbTBQT3Zaa0pPRHNOVlVkTzItb3o3ZEhodnImdG9rZW5fdHlwZT1CZWFyZXImZXhwaXJlc19pbj0zNjAwJmlkX3Rva2VuPWV5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJbUkzTmpjeE9USTJNMk5sWVdGa1pUa3laR0k1WVRNeE16STRZV1JoTkRSaU56RTVNakEzWmpjaWZRLmV5SmhlbkFpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSmhkV1FpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSnpkV0lpT2lJeE1UYzVOVGt4TURVeU9UVTNOakUyT0RjNE9Ea2lMQ0psYldGcGJDSTZJblJsYzNSaGJtUjBhR2x1YXpFeU0wQm5iV0ZwYkM1amIyMGlMQ0psYldGcGJGOTJaWEpwWm1sbFpDSTZkSEoxWlN3aVlYUmZhR0Z6YUNJNklrbDZOblpKTlhScmVtWmxlbFkyVkRWYWRHVnRkRUVpTENKalgyaGhjMmdpT2lJMVpHVjZaMUZyVFRGeVoyNUZWVEpGYW5wVFVGVkJJaXdpYm05dVkyVWlPaUpPUkdkelRWUk5kMHhFUlhOTmVsRnpUa1JuYzAxVVRYTk9hWGMxVEVSUmVVeEVSWHBPUTNjelRXbDNlRTE2VVhOTmFsRXpURVJGZWt4RVJYTk5VM2Q0VEVSVmMwMURkM3BNUkVWNlRVTjNlRXhFUlRGTVJFRnpUa1JuYzAxVVRYZE1SRVZ6VFZSQmMwMXBkM2hOZWtGelRWTjNlRXhFUVhOTlZHZDNURVJGTUUxcGQzbE5la0Z6VFdwSmVVeEVTWHBNUkVVMVQwTjNlVTlUZDNoT1ZGbHpUVlJGZVV4RVNYcE9hWGQ0VFdwWmMwMXFTWGxNUkVrd1RtbDNNRTE1ZHpST2FYYzBUVU4zZUU5RWEzTk5WRkUwVEVSWk5FeEVSVFZPYVhkNFRtcEpjMDlVU1hOT2FrVnpUV3BaYzAxcVVUUk1SRTE1VEVSSmVFNVRkelJPVTNkNFQxUkpjMDFVVlhoTVJHczBURVJSTTB4RVNUQk5hWGQ0VFZOM2VFNTZVWE5OVkdOelRXcEplVXhFUlhoTmVYZDVUa1JyYzA5RVZYTk5WRTB4VEVSRmVVOURkM2xPVkZGelRWUkpNVXhFUlROT1EzZDVUVVJCYzAxVVl6Uk1SR2Q0VEVSWk1reEVhelJNUkZVd1RFUkZNVTFUZDNoTmVsRnpUVlJKTVV4RVRURk1SRWw1VFZOM2VFOVVaM05OZWtselRWUkJOVXhFVFRKTVJHTnpUbnBKYzAxVVZUVk1SRlV5VEVSWmVreEVXWGxNUkdNd1RFUkZOVTFUZDNoTmVsbHpUVlJWYzAxNldYTk5WR2QzVEVSRk0wOVRkM2hPVkdkelRsUkZjMDFVWjNOTlZHdDVURVJGTTAxcGQzbE5hbXR6VFdwVk1VeEVSWGhQVTNjeFRubDNlVTE2UVhOTmFrRnpUV3BSZVV4RVNYZE5hWGQ0VDBSQmMwMVVSWGRNUkVVeVRubDNORTE1ZDNsT1JHTnpUVlJWZWt4RVJUVlBVM2MxVFZOM2VFMXFWWE5OVkd0NVRFUkplRTlEZDNoTmVYZDRUbFJyYzAxcVJUTk1SRVY1VG5sM2VFMUVVWE5OYWtVd1RFUlJORXhFVlhOTlZFbDRURVJKZVU5RGQzcE5lWGQ0VFdwWmMwOVVVWE5OVkVVMFRFUm5lRXhFUlRKTmFYZDRUVVJKYzAxVVJYZE1SR014VEVSck5FeEVUWGhNUkVsM1RXbDNlazVUZDNoT2VtdHpUVlJSYzAxNlkzTk5WRWx6VFdwRk1reEVXVEZNUkVrd1RsTjNNazVUZDNoTlJGVnpUV3BOTTB4RVNUQk9VM2Q0VGtSQmMwMVVaekJNUkZVMFRFUkplVTE1ZHpOT2VYZDRUWHBWYzAxcVZYbE1SRWx6VGtSamMwMVVRVEJNUkZVMVRFUkpNVTVUZDNsTlZGbHpUVlJOTTB4RVJURk5lWGQ1VG5sM2VFNTZTWE5OYWtsM1RFUkZNVTlUZDNoUFZGVnpUV3BGZVV4RVNUVk1SRVY0VG1sM2VFMUVWWE5OVkVVeVRFUkplRTFwZDNsT1JHZHpUbmwzTVUxcGQzbFBRM2Q0VGxSQmMwMTZRWE5OYW1OelRXcEZjMDFVWTNOTlZFa3pURVJuTkV4RVZUQk1SRVV6VGtOM2VFMTVkekJQVTNkNVRXcEpjMDFVWTNsTVJFbDRUWGwzZUUxRVozTk5WRmw1VEVSUk0weEVSVFJPYVhkNFRYcEJjMDFxU1RKTVJGRnpUVlJqYzAxVVp6Vk1SR2N4VEVSRk5FNURkM2xOVkdOelRWUm5NVXhFUlRGTmFYZDRUVlJyYzAxVVFUQk1SRVUxVFhsM01VNURkM2xOVkVWelRWUlplRXhFUlRWTlUzZDZUVk4zZWs5RGQzaE5hbXR6VFZSRk0weEVTWGRPVTNkNFRVUlJjMDVwZDNoT2VsVnpUV3BGTlV4RVJYaE9RM2N6VEVSbk1reEVSVEpOZVhkNFRXcFpjMDFxVlhwTVJFbDRUWGwzZWs1cGQzaE5hbXR6VFZSSmMwMVVXVEJNUkVWNVRubDNlVTFxWTNOTmFrRjZURVJuTVV4RVdUSk1SRWw2VEVSVk0weEVSVEJNUkVVMVRubDNlVTlEZDNsT1ZFbHpUV3BKZUV4RVVYTk5lbEZ6VFdwVmQweEVSVE5PVTNkNVRWUm5jMDFVWnpGTVJFVjRUMU4zTTAxRGQzbE9SRmx6VFZSTk1reEVaelZNUkVsM1RFUmpkMHhFUlhsTmFYZDRUVVJqYzAxcVNYZE1SR014VEVSSmQwMVRkM2hPZWtGelRrUk5jMDFxVFhkTVJFbDZUbWwzTUU1NWQzaE5RM2Q1VFVSamMwMVVSVEZNUkVreVRFUkZlazFUZDNsTVJFMXpUVk4zZDB4RVJUMGlMQ0pwYzNNaU9pSmhZMk52ZFc1MGN5NW5iMjluYkdVdVkyOXRJaXdpYW5ScElqb2lORFUwTVRNM05HVmpNbVkxT1dFeE1XTXdOV0UwTkRGak1UUm1NVEprTlRsbFkyVXhZelZtWWlJc0ltbGhkQ0k2TVRVd09UWTBNREEwT1N3aVpYaHdJam94TlRBNU5qUXpOalE1ZlEudmxXV2tXY3ozMzNoQTRsWTBvbmwyamVhdDVlSENLdnlNRF9tLUtpZU10R3FjTGh0a25NbDNIYllUQUJMMmszSEVkcWJuTmxEMUc2T3lSRy1uRFd0NnFXQ2dJLWdHSjZaZVU5WHJkNWZQbEZ5UlBqLUZPQWhBNTE0dWFZc3MxMEdZZ3Q1WG9BclY3b1hyUjEtRk5WWlZOaHlpb2dncUpqSjR4dG5aNl9qMGlzVXhFN3VaVGxKTFg4aXhMNDRlb1BWdWptWEtJSmFYUllwMHhmMzYyNnJuQno4em5tR1R0MUcxalR3TU5abWhaYzhMeFNhdVZGTUxMb1JqbUxnTktnc0dKTktOM05EN0g2cnNEMFZ3NXQyNHRsQndUX2ZzWUlQYXVKSlZaZXFwbXp5NkwtcENFUFVjMG9KN09xTUw4NE1CMlcyelRxNHV2NmJNaDRuUV9tZHJBJmF1dGh1c2VyPTAmc2Vzc2lvbl9zdGF0ZT00NDA3NzMwNGY1ZWMwMjRkYTczYWYxM2E3MjBhZmFkMGU0Y2I5NDVkLi4yZGY4JnByb21wdD1jb25zZW50JztcbiAgICAgICAgX3RoaXMubXlIaW50ID0gdXJsO1xuXG4gICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgdXJsLCB1c2Vya2V5UGFpciwgaWRwKTtcblxuICAgICAgfSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIG9idGFpbmluZyBJZGVudGl0eScpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgbG9nLmxvZyhlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBmYWtlTm9kZVBvcFVwKCkge1xuICAgIGxvZy5sb2coJ1tmYWtlTm9kZVBvcFVwXScpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCB1cmwgPSAnaHR0cHM6Ly9sb2NhbGhvc3QvI3N0YXRlPXN0YXRlJmNvZGU9NC94V0ZuSDVpTHB4djRXNEJtNThvVnFESzZ2d1Zlc3NLS01vTnMtTHNTS05ZJmFjY2Vzc190b2tlbj15YTI5Lkdsc1ZCTTNWQmxCUjFZTlJFdVhxT3I0R19VenZvTF95NjRZdE9HR0tKSi1RbGFzQlctSHJWMGIxSHN4UjR1TkI3ci1OLXBFbENsZVc2a05ZVzRXSUlyNm1PU3AxZXVWRDA5ZW9EWHRWWlpGSHVVOExFemNHWW1WVjdRTGgmdG9rZW5fdHlwZT1CZWFyZXImZXhwaXJlc19pbj0zNjAwJmlkX3Rva2VuPWV5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalE1TjJZMk1HSXhNalJoTmpjMU5ESTJORGhsWWpJellqYzBZbVk0WVRnMk1ESmtZMkk0WVRZaWZRLmV5SmhlbkFpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSmhkV1FpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSnpkV0lpT2lJeE1URTVNelF5TXpNMk16STFNakF3TnpjM05ETWlMQ0psYldGcGJDSTZJbTl3Wlc1cFpIUmxjM1F4TUVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SW05NFgxVnZhM0Z3UkROa01qQnBaelJYZUVkMldsRWlMQ0pqWDJoaGMyZ2lPaUpGZW05UlltTndkR0p4UWxob2EwTkVaR1ZPVUZOUklpd2libTl1WTJVaU9pSk9SR2R6VFZSTmQweEVSWE5OZWxGelRrUm5jMDFVVFhOT2FYYzFURVJSZVV4RVJYcE9RM2N6VFdsM2VFMTZVWE5OYWxFelRFUkZla3hFUlhOTlUzZDRURVJWYzAxRGQzcE1SRVY2VFVOM2VFeEVSVEZNUkVGelRrUm5jMDFVVFhkTVJFVnpUVlJCYzAxcGQzaE5la0Z6VFZOM2VFeEVRWE5OVkdkNFRFUkZlVTlEZDNoTlJHZHpUVlJuZWt4RVNURk5lWGQ1VGxOM2VVMTZXWE5QVkdkelQwUkJjMDE2YTNOTmFrbDRURVJyZWt4RVNYaE1SRlY0VEVSRk5VeEVSWGxNUkZFelRFUkZkMHhFU1RGT1UzZDVUbmwzZVUxcVdYTk5WRlY0VEVSRk5VNTVkM2hOUkdOelRWUlJla3hFUlRKT2VYZDRUMU4zZUU1RVFYTk5WR3MxVEVSRk5FOURkM2xOZWxGelRWUk5NVXhFVlRGTVJFbDNUbE4zZVUxVWEzTk5WR2R6VDBSUmMwMXFTWGxNUkVWNFRVTjNlVTFFYTNOTlZGVTFURVJGTkU1VGQzbE9SRkZ6VFdwUk0weEVSWGhQUTNkNFQwUkJjMDFxUVhoTVJFVjZUMU4zZUUxcGQzbE5ha0Z6VFZSQk5FeEVSVFJPYVhkNlQxTjNlVTFxUVhOUFJGRnpUVlJWZUV4RVNURk5lWGQ2VGxOM01VMVRkM2hQVkVWelQwUkZjMDFVWXpCTVJFVTBUMU4zTkV4RWEzZE1SRWt4VFdsM2VVMUVXWE5OYWxGelRWUlZla3hFUlRSUFEzZDVUbFJKYzAxcVVYaE1SRlY0VEVSRk1VOVRkelZNUkVVMFRFUkZNMDVEZDNwTmFYZDRUMFJOYzAxcVNYcE1SRVUxVG1sM01FMVRkM2hPZWtselRsUk5jMDFxUlhOTmVtTnpUV3BSZVV4RVJUTk9lWGQ0VDFSamMwNURkM2xPUTNkNFRucHJjMDFVWXpSTVJFVXhUbmwzZUUxVVdYTk5ha2t5VEVSamQweEVSWGRQUTNkNFRrUkZjMDFVWnpWTVJFVTFUV2wzZVUxNlozTk5WRUUwVEVSRmVVOURkM2hOZWxGelRrUkJjMDFwZDNoT2VtdHpUbXBqYzAxVVFYaE1SRTAxVEVSak0weEVTWGhQUTNjd1QwTjNlVTVVUVhOTlZHc3lURVJqZDB4RVp6Qk1SRVV5VG1sM2VFNTVkM2hPVkZselRsUlpjMDFVVFRGTVJGRnpUa1JOYzAxVVl6Uk1SRWt4VGtOM01FNURkM2xPZVhkNFRucGpjMDFVWXpSTVJFVXdUbE4zZUU1RVNYTk5WRkYzVEVSSk1VeEVSVEJPVTNkNFRucE5jMDVFUlhOTlZFbDRURVJKZVU5RGQzbE9SR3R6VGtScmMwMVVWVEpNUkVsNVRVTjNlRTFFU1hOTlZHZDRURVJGZVV4RVJYZE1SRWw0VGtOM2VFMUVhM05PVkZGelRWUnJla3hFU1RCTlEzZDVUVlJaYzAxcVJUUk1SR056VFZSQk5VeEVhM2RNUkVsNFRubDNlazFEZDNsT1JHTnpUVlJSZUV4RVJURk9lWGN4VDFOM2VVMXFXWE5PUkZselRWUlZNVXhFVVRCTVJFVXhUbWwzTlU1NWR6QlBRM2Q0VDBScmMwMVVTWHBNUkVVMFRXbDNlRTVxVlhOTmFsRjNURVJGZDA1VGR6TlBRM2Q0VDFSbmMwNVVhM05OYWxWelRWUnJlVXhFU1hoTmVYZDRUbFJWYzA5RVVYTk5WR3R6VDFSbmMwOUVaM05QVkdOelRWUkZORXhFUlRWTlUzY3pUMU4zZUUxRVozTk5ha2w0VEVSRmQwNURkM2xOVkVselRsUkJjMDE2UVhOTlZHdDVURVJGZUUxVGR6Tk5lWGQ0VDBSRmMwMVVTVFJNUkd0NVRFUkZNRTlEZDNsTlZFRnpUV3BCTUV4RVNYbE5RM2Q1VFhwamMwMVVUVFJNUkVrd1RtbDNlRTlFYTNOTlZHc3lURVJGTkU1NWQzcE9VM2Q1VFZSbmMwMXFWWHBNUkZVelRFUk5kMHhFV1RGTVJGa3lURVJGZDAxNWQzbFBRM2Q0VGxSQmMwMVVTWE5OYWtFd1RFUlJkMHhFWnpCTVJGRjVURVJGZDA1RGR6Sk9VM2Q0VG1wUmMwMVVVVEpNUkVsNVRubDNORTFwZHpKTVJFVXlURVJGTWs1NWQzaE5hazF6VFZScmMwMXFTWGhNUkVWNlRWTjNlRTVVVVhOT1JFVnpUMVJaYzA1cVozTk5ha1Z6VFZSUmQweEVTVEpNUkdjMFRFUkZlVTVwZHpKT2FYY3pUbmwzTkU5VGR6Tk5lWGQ0VDFSTmMwMXBkM3BNUkVWelRVTjNlQ0lzSW1semN5STZJbUZqWTI5MWJuUnpMbWR2YjJkc1pTNWpiMjBpTENKcFlYUWlPakUwT1RBeE1qRXdORFFzSW1WNGNDSTZNVFE1TURFeU5EWTBOSDAuR1JuV0NVeDVyNWxsOXhrQ1JsWXdVaklTeGk3blEwT3RsYXlXZXFWY21vU2Y5VzBrOUhjQkhfOVUxQ0EtTEpEa0pDbnREdGtTa1F5dVJGLVNoNTNTMlFZYTM5NmZxUlpPTnAxY3pqNnpDSXhqWlgzMC0tdk92QkNHeUFJOHNDOXZzc29LY2lUSG4xYVFoekR2WTdIRDRDN2d0MEtHSTNGYnRZUkdhX1JObTZ2Mm5ncXdWcTBHeXFFMEt1b3NnVncwSWp4YmpPU2hyd1dTSEQxVXN6a0VNaGY0ZFF1ZWtyWmx2ZmtFZlpOOWFXYmh5NHFReTB5MUVpejBqVFAyYjVZcDFGMUt5VVFjZ2g4b2ZVMm1FMTluV3pxeHNNdy1DRW5HT1V1d2pmRUdQcVRnNmVqMFRET3o2cmtPRE12bVE5cTMzdEw2VE1iYkpXZ2E3RHhBT09YU1JRJmF1dGh1c2VyPTAmc2Vzc2lvbl9zdGF0ZT02OGNjMWRjNDNiZjFkNzhmNDE1Y2M2OTM1NGU2MzliZGM1MmZiNDVmLi4yZjMwJnByb21wdD1jb25zZW50JztcbiAgICAgIHJlc29sdmUodXJsKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNhbGxHZW5lcmF0ZU1ldGhvZHMoaWRwLCBvcmlnaW4pIHtcbiAgICBsb2cubG9nKCdbY2FsbEdlbmVyYXRlTWV0aG9kczppZHBdJywgaWRwKTtcbiAgICBsb2cubG9nKCdbY2FsbEdlbmVyYXRlTWV0aG9kczpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IHB1YmxpY0tleTtcbiAgICAgIGxldCB1c2Vya2V5UGFpcjtcblxuICAgICAgLy9nZW5lcmF0ZXMgdGhlIFJTQSBrZXkgcGFpclxuICAgICAgX3RoaXMuY3J5cHRvLmdlbmVyYXRlUlNBS2V5UGFpcigpLnRoZW4oZnVuY3Rpb24oa2V5UGFpcikge1xuXG4gICAgICAgIGxvZy5sb2coJ1tjYWxsTm9kZUpzR2VuZXJhdGVNZXRob2RzOmtleVBhaXIucHVibGljXScsIGtleVBhaXIucHVibGljKTtcbiAgICAgICAgbG9nLmxvZygnW2NhbGxOb2RlSnNHZW5lcmF0ZU1ldGhvZHM6a2V5UGFpci5wcml2YXRlXScsIGtleVBhaXIucHJpdmF0ZSk7XG5cbiAgICAgICAgcHVibGljS2V5ID0gX3RoaXMuY3J5cHRvLmVuY29kZShrZXlQYWlyLnB1YmxpYyk7XG4gICAgICAgIHVzZXJrZXlQYWlyID0ga2V5UGFpcjtcbiAgICAgICAgbG9nLmxvZygnZ2VuZXJhdGVBc3NlcnRpb246bm9faGludCcpO1xuICAgICAgICByZXR1cm4gX3RoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocHVibGljS2V5LCBvcmlnaW4sICcnLCB1c2Vya2V5UGFpciwgaWRwKTtcblxuICAgICAgfSkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgbG9nLmxvZyhbJyddKTtcbiAgICAgICAgX3RoaXMubXlIaW50ID0gdXJsO1xuICAgICAgICBsb2cubG9nKCdnZW5lcmF0ZUFzc2VydGlvbjpoaW50Jyk7XG4gICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgdXJsLCB1c2Vya2V5UGFpciwgaWRwKTtcblxuICAgICAgfSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIG9idGFpbmluZyBJZGVudGl0eScpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cblxuICBsb2dpblNlbGVjdGVkSWRlbnRpdHkocHVibGljS2V5LCBvcmlnaW4sIGlkcCwga2V5UGFpciwgbG9naW5VcmwpIHtcbiAgICBsb2cubG9nKCdbbG9naW5TZWxlY3RlZElkZW50aXR5OnB1YmxpY0tleV0nLCBwdWJsaWNLZXkpO1xuICAgIGxvZy5sb2coJ1tsb2dpblNlbGVjdGVkSWRlbnRpdHk6b3JpZ2luXScsIG9yaWdpbik7XG4gICAgbG9nLmxvZygnW2xvZ2luU2VsZWN0ZWRJZGVudGl0eTppZHBdJywgaWRwKTtcbiAgICBsb2cubG9nKCdbbG9naW5TZWxlY3RlZElkZW50aXR5OmtleVBhaXJdJywga2V5UGFpcik7XG4gICAgbG9nLmxvZygnW2xvZ2luU2VsZWN0ZWRJZGVudGl0eTpsb2dpblVybF0nLCBsb2dpblVybCk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsb2cubG9nKCdbSWRlbnRpdHlNb2R1bGU6Z2VuZXJhdGVTZWxlY3RlZElkZW50aXR5XSBvcGVuUG9wdXAnKTtcbiAgICAgIF90aGlzLmNhbGxJZGVudGl0eU1vZHVsZUZ1bmMoJ29wZW5Qb3B1cCcsIHt1cmxyZWNlaXZlZDogbG9naW5Vcmx9KS50aGVuKChpZENvZGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGlkQ29kZTtcbiAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igd2hpbGUgbG9nZ2luZyBpbiBmb3IgdGhlIHNlbGVjdGVkIGlkZW50aXR5LicpO1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9KS50aGVuKChpZENvZGUpID0+IHtcbiAgICAgICAgX3RoaXMuc2VuZEdlbmVyYXRlTWVzc2FnZShwdWJsaWNLZXksIG9yaWdpbiwgaWRDb2RlLCBpZHApLnRoZW4oKG5ld1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKG5ld1Jlc3BvbnNlLmhhc093blByb3BlcnR5KCdhc3NlcnRpb24nKSkge1xuICAgICAgICAgICAgX3RoaXMuc3RvcmVJZGVudGl0eShuZXdSZXNwb25zZSwga2V5UGFpcikudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKCdMb2dpbiB3YXMgc3VjY2Vzc2Z1bGwnKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7IHJlamVjdCgnTG9naW4gaGFzIGZhaWxlZDonICsgZXJyKTsgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHdoaWxlIGxvZ2dpbmcgaW4gZm9yIHRoZSBzZWxlY3RlZCBpZGVudGl0eS4nKTtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0NvdWxkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGFzc2VydGlvbiBmb3Igc2VsZWN0ZWQgaWRlbnRpdHkuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaChlcnIgPT4geyByZWplY3QoJ09uIGxvZ2luU2VsZWN0ZWRJZGVudGl0eSBmcm9tIG1ldGhvZCBzZW5kR2VuZXJhdGVNZXNzYWdlIGVycm9yOiAgJyArIGVycik7IH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuXG4gIHNlbGVjdElkZW50aXR5Rm9ySHlwZXJ0eShvcmlnaW4sIGlkcCwgaWRIaW50KSB7XG4gICAgbG9nLmxvZygnW3NlbGVjdElkZW50aXR5Rm9ySHlwZXJ0eTpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBsb2cubG9nKCdbc2VsZWN0SWRlbnRpdHlGb3JIeXBlcnR5OmlkcF0nLCBpZHApO1xuICAgIGxvZy5sb2coJ1tzZWxlY3RJZGVudGl0eUZvckh5cGVydHk6aWRIaW50XScsIGlkSGludCk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIC8vZ2VuZXJhdGVzIHRoZSBSU0Ega2V5IHBhaXJcbiAgICAgIF90aGlzLmNyeXB0by5nZW5lcmF0ZVJTQUtleVBhaXIoKS50aGVuKGZ1bmN0aW9uKGtleVBhaXIpIHtcbiAgICAgICAgcHVibGljS2V5ID0gX3RoaXMuY3J5cHRvLmVuY29kZShrZXlQYWlyLnB1YmxpYyk7XG5cbiAgICAgICAgX3RoaXMuc2VuZEdlbmVyYXRlTWVzc2FnZShwdWJsaWNLZXksIG9yaWdpbiwgaWRIaW50LCBpZHApLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmhhc093blByb3BlcnR5KCdhc3NlcnRpb24nKSkgeyAvLyBpZGVudGl0eSB3YXMgbG9nZ2VkIGluLCBqdXN0IHNhdmUgaXRcbiAgICAgICAgICAgIF90aGlzLnN0b3JlSWRlbnRpdHkocmVzcG9uc2UsIGtleVBhaXIpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5oYXNPd25Qcm9wZXJ0eSgnbG9naW5VcmwnKSkgeyAvLyBpZGVudGl0eSB3YXMgbm90IGxvZ2dlZCBpblxuICAgICAgICAgICAgX3RoaXMubG9naW5TZWxlY3RlZElkZW50aXR5KHB1YmxpY0tleSwgb3JpZ2luLCBpZHAsIGtleVBhaXIsIHJlc3BvbnNlLmxvZ2luVXJsKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7IC8vIHlvdSBzaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIGlmIHlvdSBkbyB0aGVuIHRoZSBJZFAgUHJveHkgaXMgbm90IHdlbGwgaW1wbGVtZW50ZWRcbiAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoJ0dlbmVyYXRlQXNzZXJ0aW9uIHJldHVybmVkIGludmFsaWQgcmVzcG9uc2UuJyk7XG4gICAgICAgICAgICBsb2cubG9nKCdQcm9jZWVkaW5nIGJ5IGxvZ2dpbmcgaW4uJyk7XG4gICAgICAgICAgICBfdGhpcy5nZW5lcmF0ZVNlbGVjdGVkSWRlbnRpdHkocHVibGljS2V5LCBvcmlnaW4sIGlkcCwga2V5UGFpcikudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7IHJlamVjdCgnT24gc2VsZWN0SWRlbnRpdHlGb3JIeXBlcnR5IGZyb20gbWV0aG9kIHNlbmRHZW5lcmF0ZU1lc3NhZ2UgZXJyb3I6ICAnICsgZXJyKTsgfSk7XG4gICAgICB9KS5jYXRjaChlcnIgPT4geyByZWplY3QoJ09uIHNlbGVjdElkZW50aXR5Rm9ySHlwZXJ0eSBmcm9tIG1ldGhvZCBnZW5lcmF0ZVJTQUtleVBhaXIgZXJyb3I6ICAnICsgZXJyKTsgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzZWxlY3RJZGVudGl0eUZyb21HVUkob3JpZ2luKSB7XG4gICAgbG9nLmxvZygnW3NlbGVjdElkZW50aXR5RnJvbUdVSTpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBpZGVudGl0aWVzSW5mbyA9IF90aGlzLmdldElkZW50aXRpZXNUb0Nob29zZSgpO1xuXG4gICAgICBfdGhpcy5yZXF1ZXN0SWRlbnRpdHlUb0dVSShpZGVudGl0aWVzSW5mby5pZGVudGl0aWVzLCBpZGVudGl0aWVzSW5mby5pZHBzKS50aGVuKHZhbHVlID0+IHtcblxuICAgICAgICBpZiAodmFsdWUudHlwZSA9PT0gJ2lkZW50aXR5Jykge1xuXG4gICAgICAgIC8vICBsZXQgY2hvc2VuSUQgPSBnZXRVc2VyVVJMRnJvbUVtYWlsKHZhbHVlLnZhbHVlKTtcbiAgICAgICAgLy8gaGFjayB3aGlsZSB0aGUgdXNlciB1cmwgaXMgbm90IHJldHVybmVkIGZyb20gcmVxdWVzdElkZW50aXR5VG9HVUk7XG5cbiAgICAgICAgICBsZXQgY2hvc2VuSUQgPSAndXNlcjovLycgKyBfdGhpcy5jdXJyZW50SWRlbnRpdHkuaWRwICsgJy8nICsgdmFsdWUudmFsdWU7XG5cbiAgICAgICAgICBfdGhpcy5kZWZhdWx0SWRlbnRpdHkgPSBfdGhpcy5jdXJyZW50SWRlbnRpdHk7XG5cbiAgICAgICAgICAvLyByZXR1cm5zIHRoZSBpZGVudGl0eSBpbmZvIGZyb20gdGhlIGNob3NlbiBpZFxuICAgICAgICAgIGZvciAobGV0IGkgaW4gX3RoaXMuaWRlbnRpdGllcykge1xuICAgICAgICAgICAgaWYgKF90aGlzLmlkZW50aXRpZXNbaV0uaWRlbnRpdHkgPT09IGNob3NlbklEKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzLmlkZW50aXRpZXNbaV0ubWVzc2FnZUluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBpZGVudGl0eSB3YXMgZm91bmQgLicpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnR5cGUgPT09ICdpZHAnKSB7XG5cbiAgICAgICAgICBfdGhpcy5jYWxsR2VuZXJhdGVNZXRob2RzKHZhbHVlLnZhbHVlLCBvcmlnaW4pLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnZXJyb3Igb24gR1VJIHJlY2VpdmVkIG1lc3NhZ2UuJyk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7IHJlamVjdCgnT24gc2VsZWN0SWRlbnRpdHlGcm9tR1VJIGZyb20gbWV0aG9kIHJlcXVlc3RJZGVudGl0eVRvR1VJIGVycm9yOiAgJyArIGVycik7IH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc3RvcmVJZGVudGl0eShyZXN1bHQsIGtleVBhaXIpIHtcbiAgICBsb2cubG9nKCdbc3RvcmVJZGVudGl0eTpyZXN1bHRdJywgcmVzdWx0KTtcbiAgICBsb2cubG9nKCdbc3RvcmVJZGVudGl0eTprZXlQYWlyXScsIGtleVBhaXIpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBpZiAoIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnYXNzZXJ0aW9uJykpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdCgnU3RvcmVJZGVudGl0eTogaW5wdXQgaXMgbm90IGFuIGlkZW50aXR5IGFzc2VydGlvbi4nKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHNwbGl0ZWRBc3NlcnRpb24gPSByZXN1bHQuYXNzZXJ0aW9uLnNwbGl0KCcuJyk7XG4gICAgICBsZXQgYXNzZXJ0aW9uUGFyc2VkO1xuXG4gICAgICAvL3ZlcmlmeSBpZiB0aGUgdG9rZW4gY29udGFpbnMgdGhlIDMgY29tcG9uZW50cywgb3IganVzdCB0aGUgYXNzZXJ0aW9uXG4gICAgICB0cnkge1xuICAgICAgICBpZiAoc3BsaXRlZEFzc2VydGlvblsxXSkge1xuICAgICAgICAgIGFzc2VydGlvblBhcnNlZCA9IF90aGlzLmNyeXB0by5kZWNvZGUoc3BsaXRlZEFzc2VydGlvblsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzZXJ0aW9uUGFyc2VkID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZXN1bHQuYXNzZXJ0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoJ0luIHN0b3JlSWRlbnRpdHksIGVycm9yIHBhcnNpbmcgYXNzZXJ0aW9uOiAnICsgZXJyKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGlkVG9rZW47XG5cbiAgICAgIC8vVE9ETyByZW1vdmUgdGhlIHZlcmlmaWNhdGlvbiBhbmQgcmVtb3ZlIHRoZSB0b2tlbklESlNPTiBmcm9tIHRoZSBnb29nbGUgaWRwUHJveHk7XG4gICAgICBpZiAoYXNzZXJ0aW9uUGFyc2VkLnRva2VuSURKU09OKSB7XG4gICAgICAgIGlkVG9rZW4gPSBhc3NlcnRpb25QYXJzZWQudG9rZW5JREpTT047XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZFRva2VuID0gYXNzZXJ0aW9uUGFyc2VkO1xuICAgICAgfVxuXG4gICAgICBpZFRva2VuLmlkcCA9IHJlc3VsdC5pZHA7XG5cbiAgICAgIGxldCBlbWFpbCA9IGlkVG9rZW4uZW1haWwgfHwgaWRUb2tlbi5zdWI7XG5cbiAgICAgIC8vIGxldCBpZGVudGlmaWVyID0gZ2V0VXNlclVSTEZyb21FbWFpbChlbWFpbCk7XG5cbiAgICAgIGxldCBpZGVudGlmaWVyID0gJ3VzZXI6Ly8nICsgaWRUb2tlbi5pZHAuZG9tYWluICsgJy8nICsgZW1haWw7XG5cbiAgICAgIHJlc3VsdC5pZGVudGl0eSA9IGlkZW50aWZpZXI7XG5cbiAgICAgIF90aGlzLmlkZW50aXR5LmFkZElkZW50aXR5KHJlc3VsdCk7XG5cbiAgICAgIC8vIGNoZWNrIGlmIGV4aXN0cyBhbnkgaW5mb1Rva2VuIGluIHRoZSByZXN1bHQgcmVjZWl2ZWRcbiAgICAgIGxldCBpbmZvVG9rZW4gPSAocmVzdWx0LmluZm9Ub2tlbikgPyByZXN1bHQuaW5mb1Rva2VuIDoge307XG5cbiAgICAgIGxldCBjb21tb25OYW1lID0gaWRUb2tlbi5uYW1lIHx8IGVtYWlsLnN1YnN0cmluZygwLCBlbWFpbC5pbmRleE9mKCdAJykpO1xuICAgICAgbGV0IHVzZXJQcm9maWxlQnVuZGxlID0ge3VzZXJuYW1lOiBlbWFpbCwgY246IGNvbW1vbk5hbWUsIGF2YXRhcjogaW5mb1Rva2VuLnBpY3R1cmUsIGxvY2FsZTogaW5mb1Rva2VuLmxvY2FsZSwgdXNlclVSTDogaWRlbnRpZmllcn07XG5cbiAgICAgIGxldCBleHBpcmVzID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGluZm9Ub2tlbi5oYXNPd25Qcm9wZXJ0eSgnZXhwJykpIHtcbiAgICAgICAgZXhwaXJlcyA9IGluZm9Ub2tlbi5leHA7XG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnaW5mbycpICYmIHJlc3VsdC5pbmZvLmhhc093blByb3BlcnR5KCdleHBpcmVzJykpIHtcbiAgICAgICAgZXhwaXJlcyA9IHJlc3VsdC5pbmZvLmV4cGlyZXM7XG4gICAgICB9XG5cbiAgICAgIC8vY3JlYXRpb24gb2YgYSBuZXcgSlNPTiB3aXRoIHRoZSBpZGVudGl0eSB0byBzZW5kIHZpYSBtZXNzYWdlc1xuICAgICAgbGV0IG5ld0lkZW50aXR5ID0ge3VzZXJQcm9maWxlOiB1c2VyUHJvZmlsZUJ1bmRsZSwgaWRwOiByZXN1bHQuaWRwLmRvbWFpbiwgYXNzZXJ0aW9uOiByZXN1bHQuYXNzZXJ0aW9uLCBleHBpcmVzOiBleHBpcmVzfTtcbiAgICAgIHJlc3VsdC5tZXNzYWdlSW5mbyA9IG5ld0lkZW50aXR5O1xuICAgICAgcmVzdWx0LmtleVBhaXIgPSBrZXlQYWlyO1xuXG4gICAgICBfdGhpcy5jdXJyZW50SWRlbnRpdHkgPSBuZXdJZGVudGl0eTtcblxuICAgICAgLy92ZXJpZnkgaWYgdGhlIGlkIGFscmVhZHkgZXhpc3RzLiBJZiBhbHJlYWR5IGV4aXN0cyB0aGVuIGRvIG5vdCBhZGQgdG8gdGhlIGlkZW50aXRpZXMgbGlzdDtcbiAgICAgIC8vdG8gYmUgcmV2aWV3ZWQgc2luY2UgdGhlIGlkZW50aXR5IGNvbnRhaW5zIGRhdGEgbGlrZSB0aGUgYXNzc3J0aW9uIGFuZCBsZXkgcGFpcnMgdGhhdCBtYXkgYmUgZGlmZmVyZW50IGlmIGdlbmVyYXRlZCB0d2ljZVxuXG4gICAgICBsZXQgaWRBbHJlYWR5RXhpc3RzID0gZmFsc2U7XG4gICAgICBsZXQgb2xkSWQ7XG4gICAgICBmb3IgKGxldCBpZGVudGl0eSBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XG4gICAgICAgIGlmIChfdGhpcy5pZGVudGl0aWVzW2lkZW50aXR5XS5pZGVudGl0eSA9PT0gcmVzdWx0LmlkZW50aXR5KSB7XG4gICAgICAgICAgaWRBbHJlYWR5RXhpc3RzID0gdHJ1ZTtcbiAgICAgICAgICBvbGRJZCA9IF90aGlzLmlkZW50aXRpZXNbaWRlbnRpdHldO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpZEFscmVhZHlFeGlzdHMpIHsgLy8gVE9ETzogbWF5YmUgb3ZlcndyaXRlIHRoZSBpZGVudGl0eVxuXG4gICAgICAgIG9sZElkID0gT2JqZWN0LmFzc2lnbihvbGRJZCwgcmVzdWx0KTtcbiAgICAgICAgcmVzb2x2ZShvbGRJZC5tZXNzYWdlSW5mbyk7XG4gICAgICAgIGxldCBleGlzdHMgPSBmYWxzZTtcblxuICAgICAgICAvL2NoZWNrIGlmIHRoZSBpZGVudGl0eSBleGlzdHMgaW4gZW1haWxMaXN0LCBpZiBub3QgYWRkIGl0XG4gICAgICAgIC8vVGhpcyBpcyB1c2VmdWwgaWYgYW4gaWRlbnRpdHkgd2FzIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBidXQgd2FzIGxhdGVyIHVucmVnaXN0ZXJlZFxuICAgICAgICBmb3IgKGxldCBpIGluIF90aGlzLmVtYWlsc0xpc3QpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuZW1haWxzTGlzdFtpXSA9PT0gZW1haWwpIHtcbiAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICBfdGhpcy5lbWFpbHNMaXN0LnB1c2goZW1haWwpO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLmVtYWlsc0xpc3QucHVzaChlbWFpbCk7XG4gICAgICAgIF90aGlzLmlkZW50aXRpZXMucHVzaChyZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ2lkTW9kdWxlOmlkZW50aXRpZXMnLCAwLCBfdGhpcy5pZGVudGl0aWVzKS50aGVuKCgpID0+IHtcblxuICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc0xpc3RbaWRUb2tlbi5pZHAuZG9tYWluXSkge1xuICAgICAgICAgIF90aGlzLmlkZW50aXRpZXNMaXN0W2lkVG9rZW4uaWRwLmRvbWFpbl0uc3RhdHVzID0gJ2NyZWF0ZWQnO1xuICAgICAgICB9XG4gICAgICAgIGxvZy5sb2coJ3N0b3JlSWRlbnRpdHk6bmV3SUQnLCBuZXdJZGVudGl0eSk7XG4gICAgICAgIHJlc29sdmUobmV3SWRlbnRpdHkpO1xuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgcmVqZWN0KCdPbiBfc2VuZFJlcG9ydGVyU2Vzc2lvbktleSBmcm9tIG1ldGhvZCBzdG9yZUlkZW50aXR5IGVycm9yOiAnICsgZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBnZW5lcmF0ZVNlbGVjdGVkSWRlbnRpdHkocHVibGljS2V5LCBvcmlnaW4sIGlkcCwga2V5UGFpcikge1xuICAgIGxvZy5sb2coJ1tnZW5lcmF0ZVNlbGVjdGVkSWRlbnRpdHk6cHVibGljS2V5XScsIHB1YmxpY0tleSk7XG4gICAgbG9nLmxvZygnW2dlbmVyYXRlU2VsZWN0ZWRJZGVudGl0eTpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBsb2cubG9nKCdbZ2VuZXJhdGVTZWxlY3RlZElkZW50aXR5OmlkcF0nLCBpZHApO1xuICAgIGxvZy5sb2coJ1tnZW5lcmF0ZVNlbGVjdGVkSWRlbnRpdHk6a2V5UGFpcl0nLCBrZXlQYWlyKTtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbG9nLmxvZygnW0lkZW50aXR5TW9kdWxlOmdlbmVyYXRlU2VsZWN0ZWRJZGVudGl0eV0gTk9fVVJMJyk7XG4gICAgICBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgJycsIGtleVBhaXIsIGlkcCkudGhlbigobG9naW5VcmwpID0+IHtcbiAgICAgICAgcmV0dXJuIGxvZ2luVXJsO1xuICAgICAgfSkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgbG9nLmxvZygnW0lkZW50aXR5TW9kdWxlOmdlbmVyYXRlU2VsZWN0ZWRJZGVudGl0eV0gVVJMJyk7XG4gICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgdXJsLCBrZXlQYWlyLCBpZHApO1xuICAgICAgfSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnRXJyb3Igb24gb2J0YWluaW5nIElkZW50aXR5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgY2FsbElkZW50aXR5TW9kdWxlRnVuYyhtZXRob2ROYW1lLCBwYXJhbWV0ZXJzKSB7XG4gICAgbG9nLmxvZygnW2NhbGxJZGVudGl0eU1vZHVsZUZ1bmM6bWV0aG9kTmFtZV0nLCBtZXRob2ROYW1lKTtcbiAgICBsb2cubG9nKCdbY2FsbElkZW50aXR5TW9kdWxlRnVuYzpwYXJhbWV0ZXJzXScsIHBhcmFtZXRlcnMpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IG1lc3NhZ2UgPSB7IHR5cGU6ICdleGVjdXRlJywgdG86IF90aGlzLl9ndWlVUkwsIGZyb206IF90aGlzLl9pZG1VUkwsXG4gICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogbWV0aG9kTmFtZSwgcGFyYW1zOiBwYXJhbWV0ZXJzIH19O1xuICAgICAgbGV0IGlkID0gX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG5cbiAgICAgIC8vYWRkIGxpc3RlbmVyIHdpdGhvdXQgdGltb3V0XG4gICAgICB0cnkge1xuICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRSZXNwb25zZUxpc3RlbmVyKF90aGlzLl9pZG1VUkwsIGlkLCBtc2cgPT4ge1xuICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnJlbW92ZVJlc3BvbnNlTGlzdGVuZXIoX3RoaXMuX2lkbVVSTCwgaWQpO1xuICAgICAgICAgIGxldCByZXN1bHQgPSBtc2cuYm9keS52YWx1ZTtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdCgnSW4gbWV0aG9kIGNhbGxJZGVudGl0eU1vZHVsZUZ1bmMgZXJyb3I6ICcgKyBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cblxuICAvLyoqKioqKioqKioqKioqKioqKiogRU5DUllQVElPTiBNRVRIT0RTICoqKioqKioqKioqKioqKioqKipcbiAgZW5jcnlwdE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIC8vY29uc29sZS5pbmZvKCdlbmNyeXB0TWVzc2FnZTptZXNzYWdlJywgbWVzc2FnZSk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxvZy5sb2coJ2VuY3J5cHQgbWVzc2FnZSAnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGxldCBpc0hhbmRTaGFrZVR5cGUgPSBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnO1xuXG4gICAgICAvL2lmIGlzIG5vdCB0byBhcHBseSBlbmNyeXB0aW9uLCB0aGVuIHJldHVybnMgcmVzb2x2ZVxuICAgICAgaWYgKCFfdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiAmJiAhaXNIYW5kU2hha2VUeXBlKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnZW5jcnlwdGlvbiBkaXNhYmxlZCcpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGRhdGFPYmplY3RVUkwgPSBfdGhpcy5fcGFyc2VNZXNzYWdlVVJMKG1lc3NhZ2UudG8pO1xuXG4gICAgICBsZXQgaXNUb0RhdGFPYmplY3QgPSBpc0RhdGFPYmplY3RVUkwoZGF0YU9iamVjdFVSTCk7XG4gICAgICBsZXQgaXNUb0xlZ2FjeUlkZW50aXR5ID0gaXNMZWdhY3kobWVzc2FnZS50byk7XG4gICAgICBsZXQgaXNGcm9tSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JztcbiAgICAgIGxldCBpc1RvSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLnRvKS50eXBlID09PSAnaHlwZXJ0eSc7XG5cbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnKSB7XG4gICAgICAgIGxvZy5sb2coJ2VuY3J5cHQgbWVzc2FnZTogbWVzc2FnZSB0eXBlIHVwZGF0ZScpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzVG9MZWdhY3lJZGVudGl0eSkge1xuICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5KSB7XG4gICAgICAgIGxldCB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihtZXNzYWdlLmZyb20pO1xuICAgICAgICBpZiAodXNlclVSTCkge1xuXG4gICAgICAgICAgLy8gY2hlY2sgaWYgZXhpc3RzIGFueSBrZXlzIGJldHdlZW4gdHdvIHVzZXJzXG4gICAgICAgICAgbGV0IGNoYXRLZXlzID0gX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXTtcbiAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7XG4gICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwpO1xuXG4gICAgICAgICAgICAvL2xvZy5sb2coJ2NyZWF0ZUNoYXRLZXkgZW5jcnlwdCcsIG1lc3NhZ2UuZnJvbSArIG1lc3NhZ2UudG8pO1xuICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IGNoYXRLZXlzO1xuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlID0gJ3N0YXJ0SGFuZFNoYWtlJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2hhdEtleXMuYXV0aGVudGljYXRlZCAmJiAhaXNIYW5kU2hha2VUeXBlKSB7XG5cbiAgICAgICAgICAgIGxldCBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XG4gICAgICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgbWVzc2FnZS5ib2R5LnZhbHVlLCBpdikudGhlbihlbmNyeXB0ZWRWYWx1ZSA9PiB7XG5cbiAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UuYm9keS52YWx1ZSkgKyBKU09OLnN0cmluZ2lmeShpdiksIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSkudGhlbihoYXNoID0+IHtcbiAgICAgICAgICAgICAgICAvL2xvZy5sb2coJ3Jlc3VsdCBvZiBoYXNoICcsIGhhc2gpO1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHtpdjogX3RoaXMuY3J5cHRvLmVuY29kZShpdiksIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKX07XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gX3RoaXMuY3J5cHRvLmVuY29kZSh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBpZiBpcyBhIGhhbmRzaGFrZSBtZXNzYWdlLCBqdXN0IHJlc29sdmUgaXRcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzSGFuZFNoYWtlVHlwZSkge1xuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcblxuICAgICAgICAgICAgLy8gZWxzZSwgc3RhcnRzIGEgbmV3IGhhbmRzaGFrZSBwcm90b2NvbFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5fZG9IYW5kU2hha2VQaGFzZShtZXNzYWdlLCBjaGF0S2V5cykudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLmZyb20gKyAnPC0+JyArIG1lc3NhZ2UudG9dID0gdmFsdWUuY2hhdEtleXM7XG5cbiAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UodmFsdWUubWVzc2FnZSk7XG4gICAgICAgICAgICAgIHJlamVjdCgnZW5jcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdJbiBlbmNyeXB0TWVzc2FnZTogSHlwZXJ0eSBvd25lciBVUkwgd2FzIG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG5cbiAgICAgIC8vaWYgZnJvbSBoeXBlcnR5IHRvIGEgZGF0YU9iamVjdFVSTFxuICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB7XG5cbiAgICAgICAgLy9sb2cubG9nKCdkYXRhT2JqZWN0IHZhbHVlIHRvIGVuY3J5cHQ6ICcsIG1lc3NhZ2UuYm9keS52YWx1ZSk7XG4gICAgICAgIC8vbG9nLmxvZygnSWRlbnRpdHlNb2R1bGUgLSBlbmNyeXB0IGZyb20gaHlwZXJ0eSB0byBkYXRhb2JqZWN0ICcsIG1lc3NhZ2UpO1xuXG4gICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgnZGF0YU9iamVjdFNlc3Npb25LZXlzJykudGhlbigoc2Vzc2lvbktleXMpID0+IHtcbiAgICAgICAgICBzZXNzaW9uS2V5cyA9IF9jaGF0a2V5c1RvQXJyYXlDbG9uZXIoZGF0YU9iamVjdFVSTCwgc2Vzc2lvbktleXMpO1xuICAgICAgICAgIGxldCBkYXRhT2JqZWN0S2V5ID0gc2Vzc2lvbktleXMgPyBzZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXSA6IG51bGw7XG5cbiAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0c1N0b3JhZ2UuZ2V0RGF0YU9iamVjdChkYXRhT2JqZWN0VVJMKS50aGVuKChpc0h5cGVydHlSZXBvcnRlcikgPT4ge1xuICAgICAgICAgICAgLy9pZiBubyBrZXkgZXhpc3RzLCBjcmVhdGUgYSBuZXcgb25lIGlmIGlzIHRoZSByZXBvcnRlciBvZiBkYXRhT2JqZWN0XG4gICAgICAgICAgICBpZiAoIWRhdGFPYmplY3RLZXkpIHtcbiAgICAgICAgICAgICAgLy8gaWYgdGhlIGh5cGVydHkgaXMgdGhlIHJlcG9ydGVyIG9mIHRoZSBkYXRhT2JqZWN0IHRoZW4gZ2VuZXJhdGVzIGEgc2Vzc2lvbiBrZXlcbiAgICAgICAgICAgICAgaWYgKGlzSHlwZXJ0eVJlcG9ydGVyLnJlcG9ydGVyICYmIGlzSHlwZXJ0eVJlcG9ydGVyLnJlcG9ydGVyID09PSBtZXNzYWdlLmZyb20pIHtcblxuICAgICAgICAgICAgICAgIGxldCBzZXNzaW9uS2V5ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdID0ge3Nlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlfTtcbiAgICAgICAgICAgICAgICBsZXQgZGF0YU9iamVjdFNlc3Npb25LZXlzQ2xvbmUgPSBfY2hhdGtleXNUb1N0cmluZ0Nsb25lcihkYXRhT2JqZWN0VVJMLCBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXMpO1xuXG4gICAgICAgICAgICAgICAgLy9UT0RPOiBjaGVjayBpZiB0aGlzIGRvZXMgbm90IG5lZWQgdG8gYmUgc3RvcmVkXG4gICAgICAgICAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdkYXRhT2JqZWN0U2Vzc2lvbktleXMnLCAwLCBkYXRhT2JqZWN0U2Vzc2lvbktleXNDbG9uZSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlamVjdCgnT24gZW5jcnlwdE1lc3NhZ2UgZnJvbSBtZXRob2Qgc3RvcmFnZU1hbmFnZXIuc2V0IGVycm9yOiAnICsgZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBkYXRhT2JqZWN0S2V5ID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhIHNlc3Npb24ga2V5IGZvciB0aGUgY2hhdCByb29tXG4gICAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleSkge1xuXG4gICAgICAgICAgICAgIC8vIGFuZCBpZiBpcyB0byBhcHBseSBlbmNyeXB0aW9uLCBlbmNyeXB0IHRoZSBtZXNzYWdlc1xuICAgICAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleS5pc1RvRW5jcnlwdCkge1xuICAgICAgICAgICAgICAgIGxldCBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIF90aGlzLmNyeXB0by5lbmNvZGUobWVzc2FnZS5ib2R5LnZhbHVlKSwgaXYpLnRoZW4oZW5jcnlwdGVkVmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb247IC8vVE9ETzogQ2hlY2sgd2h5IGFzc2VydGlvbiBpcyBjb21taW5nIG9uIHRoZSBtZXNzYWdlIVxuICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2UuYm9keS5pZGVudGl0eS5leHBpcmVzOyAvL1RPRE86IENoZWNrIHdoeSBleHBpcmVzIGlzIGNvbW1pbmcgb24gdGhlIG1lc3NhZ2UhXG4gICAgICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgSlNPTi5zdHJpbmdpZnkobWVzc2FnZS5ib2R5LnZhbHVlKSArIEpTT04uc3RyaW5naWZ5KGl2KSk7XG5cbiAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by5oYXNoSE1BQyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIGZpbHRlcmVkTWVzc2FnZSkudGhlbihoYXNoID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9nLmxvZygnaGFzaCAnLCBoYXNoKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSB7dmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpLCBpdjogX3RoaXMuY3J5cHRvLmVuY29kZShpdiksIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCl9O1xuXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIC8vIGlmIG5vdCwganVzdCBzZW5kIHRoZSBtZXNzYWdlXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIHN0YXJ0IHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IHNlc3Npb24gS2V5XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QoJ0RhdGEgb2JqZWN0IGtleSBjb3VsZCBub3QgYmUgZGVmaW5lZDogRmFpbGVkIHRvIGRlY3J5cHQgbWVzc2FnZSAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4geyByZWplY3QoJ09uIGVuY3J5cHRNZXNzYWdlIGZyb20gbWV0aG9kIGRhdGFPYmplY3RzU3RvcmFnZS5nZXREYXRhT2JqZWN0IGVycm9yOiAnICsgZXJyKTsgfSk7XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7IHJlamVjdCgnT24gZW5jcnlwdE1lc3NhZ2UgZnJvbSBtZXRob2Qgc3RvcmFnZU1hbmFnZXIuZ2V0IGVycm9yOiAnICsgZXJyKTsgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBlbmNyeXB0RGF0YU9iamVjdChkYXRhT2JqZWN0LCBzZW5kZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY29uc29sZS5pbmZvKCdkYXRhT2JqZWN0IHZhbHVlIHRvIGVuY3J5cHQ6ICcsIGRhdGFPYmplY3QpO1xuXG4gICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IF90aGlzLl9wYXJzZU1lc3NhZ2VVUkwoc2VuZGVyKTtcblxuICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdkYXRhT2JqZWN0U2Vzc2lvbktleXMnKS50aGVuKChzZXNzaW9uS2V5cykgPT4ge1xuICAgICAgICBzZXNzaW9uS2V5cyA9IF9jaGF0a2V5c1RvQXJyYXlDbG9uZXIoZGF0YU9iamVjdFVSTCwgc2Vzc2lvbktleXMpO1xuICAgICAgICBsZXQgZGF0YU9iamVjdEtleSA9IHNlc3Npb25LZXlzID8gc2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gOiBudWxsO1xuXG4gICAgICAgIC8vY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhIHNlc3Npb24ga2V5IGZvciB0aGUgY2hhdCByb29tXG4gICAgICAgIGlmIChkYXRhT2JqZWN0S2V5KSB7XG5cbiAgICAgICAgICAvLyBhbmQgaWYgaXMgdG8gYXBwbHkgZW5jcnlwdGlvbiwgZW5jcnlwdCB0aGUgbWVzc2FnZXNcbiAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleS5pc1RvRW5jcnlwdCkge1xuICAgICAgICAgICAgbGV0IGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcblxuICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBfdGhpcy5jcnlwdG8uZW5jb2RlKGRhdGFPYmplY3QpLCBpdikudGhlbihlbmNyeXB0ZWRWYWx1ZSA9PiB7XG4gICAgICAgICAgICAgIGxldCBuZXdWYWx1ZSA9IHsgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpLCBpdjogX3RoaXMuY3J5cHRvLmVuY29kZShpdikgfTtcblxuICAgICAgICAgICAgICAvL2xvZy5sb2coJ2VuY3J5cHRlZCBkYXRhT2JqZWN0JywgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4geyByZWplY3QoJ09uIGVuY3J5cHREYXRhT2JqZWN0IGZyb20gbWV0aG9kIGVuY3J5cHRBRVMgZXJyb3I6ICcgKyBlcnIpOyB9KTtcblxuICAgICAgICAgIC8vIGlmIG5vdCwganVzdCBzZW5kIHRoZSBtZXNzYWdlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnVGhlIGRhdGFPYmplY3QgaXMgbm90IGVuY3J5cHRlZCcpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZGF0YU9iamVjdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc3RhcnQgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgc2Vzc2lvbiBLZXlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdObyBkYXRhT2JqZWN0S2V5IGZvciB0aGlzIGRhdGFPYmplY3RVUkw6JywgZGF0YU9iamVjdFVSTCk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7IHJlamVjdCgnT24gZW5jcnlwdERhdGFPYmplY3QgZnJvbSBtZXRob2Qgc3RvcmFnZU1hbmFnZXIuZ2V0IGVycm9yOiAnICsgZXJyKTsgfSk7XG4gICAgfSk7XG4gIH1cblxuICBkZWNyeXB0TWVzc2FnZShtZXNzYWdlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIC8vICBsb2cubG9nKCdkZWNyeXB0TWVzc2FnZTptZXNzYWdlJywgbWVzc2FnZSk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBsZXQgaXNIYW5kU2hha2VUeXBlID0gbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJztcblxuICAgICAgLy9pZiBpcyBub3QgdG8gYXBwbHkgZW5jcnlwdGlvbiwgdGhlbiByZXR1cm5zIHJlc29sdmVcbiAgICAgIGlmICghX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gJiYgIWlzSGFuZFNoYWtlVHlwZSkge1xuICAgICAgICAvLyBsb2cubG9nKCdkZWNyeXB0aW9uIGRpc2FibGVkJyk7XG4gICAgICAgIHJldHVybiByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IF90aGlzLl9wYXJzZU1lc3NhZ2VVUkwobWVzc2FnZS50byk7XG5cbiAgICAgIGxldCBpc1RvRGF0YU9iamVjdCA9IGlzRGF0YU9iamVjdFVSTChkYXRhT2JqZWN0VVJMKTtcbiAgICAgIGxldCBpc0Zyb21IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknO1xuICAgICAgbGV0IGlzVG9IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JztcblxuICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIC8vaXMgaXMgaHlwZXJ0eSB0byBoeXBlcnR5IGNvbW11bmljYXRpb25cbiAgICAgIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5KSB7XG4gICAgICAgIC8vIGxvZy5sb2coJ2RlY3J5cHQgaHlwZXJ0eSB0byBoeXBlcnR5Jyk7XG4gICAgICAgIGxldCB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihtZXNzYWdlLnRvKTtcbiAgICAgICAgaWYgKHVzZXJVUkwpIHtcblxuICAgICAgICAgIGxldCBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW21lc3NhZ2UudG8gKyAnPC0+JyArIG1lc3NhZ2UuZnJvbV07XG4gICAgICAgICAgaWYgKCFjaGF0S2V5cykge1xuICAgICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtZXNzYWdlLCB1c2VyVVJMLCAnZGVjcnlwdCcpO1xuICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXSA9IGNoYXRLZXlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkICYmICFpc0hhbmRTaGFrZVR5cGUpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUobWVzc2FnZS5ib2R5LnZhbHVlKTtcbiAgICAgICAgICAgIGxldCBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGVUb1VpbnQ4QXJyYXkodmFsdWUuaXYpO1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgIGxldCBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZVRvVWludDhBcnJheSh2YWx1ZS5oYXNoKTtcbiAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpLnRoZW4oZGVjcnlwdGVkRGF0YSA9PiB7XG4gICAgICAgICAgICAgIC8vIGxvZy5sb2coJ2RlY3J5cHRlZCB2YWx1ZSAnLCBkZWNyeXB0ZWREYXRhKTtcbiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gZGVjcnlwdGVkRGF0YTtcblxuICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcblxuICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgIC8vbG9nLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uISAnLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfSBlbHNlIGlmIChpc0hhbmRTaGFrZVR5cGUpIHtcbiAgICAgICAgICAgIF90aGlzLl9kb0hhbmRTaGFrZVBoYXNlKG1lc3NhZ2UsIGNoYXRLZXlzKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG5cbiAgICAgICAgICAgICAgLy9pZiBpdCB3YXMgc3RhcnRlZCBieSBkb011dHVhbEF1dGhlbnRpY2F0aW9uIHRoZW4gZW5kcyB0aGUgcHJvdG9jb2xcbiAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnaGFuZFNoYWtlRW5kJykge1xuICAgICAgICAgICAgICAgIC8vcmVqZWN0KCdkZWNyeXB0IGhhbmRzaGFrZSBwcm90b2NvbCBwaGFzZScpO1xuXG4gICAgICAgICAgICAgIC8vIGlmIHdhcyBzdGFydGVkIGJ5IGEgbWVzc2FnZSwgdGhlbiByZXNlbmQgdGhhdCBtZXNzYWdlXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXSA9IHZhbHVlLmNoYXRLZXlzO1xuICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgICAgLy9yZWplY3QoJ2RlY3J5cHQgaGFuZHNoYWtlIHByb3RvY29sIHBoYXNlICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCd3cm9uZyBtZXNzYWdlIGRvIGRlY3J5cHQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdlcnJvciBvbiBkZWNyeXB0IG1lc3NhZ2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgZnJvbSBoeXBlcnR5IHRvIGEgZGF0YU9iamVjdFVSTFxuICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB7XG4gICAgICAgIC8vIGxvZy5sb2coJ2RhdGFPYmplY3QgdmFsdWUgdG8gZGVjcnlwdDogJywgbWVzc2FnZS5ib2R5KTtcblxuICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ2RhdGFPYmplY3RTZXNzaW9uS2V5cycpLnRoZW4oKHNlc3Npb25LZXlzKSA9PiB7XG4gICAgICAgICAgc2Vzc2lvbktleXMgPSBfY2hhdGtleXNUb0FycmF5Q2xvbmVyKGRhdGFPYmplY3RVUkwsIHNlc3Npb25LZXlzKTtcbiAgICAgICAgICBsZXQgZGF0YU9iamVjdEtleSA9IHNlc3Npb25LZXlzID8gc2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gOiBudWxsO1xuXG4gICAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkpIHtcblxuICAgICAgICAgICAgLy9jaGVjayBpZiBpcyB0byBhcHBseSBlbmNyeXB0aW9uXG4gICAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleS5pc1RvRW5jcnlwdCkge1xuICAgICAgICAgICAgICBsZXQgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKG1lc3NhZ2UuYm9keS52YWx1ZSk7XG4gICAgICAgICAgICAgIGxldCBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGVUb1VpbnQ4QXJyYXkocGFyc2VkVmFsdWUuaXYpO1xuICAgICAgICAgICAgICBsZXQgZW5jcnlwdGVkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHBhcnNlZFZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgICAgbGV0IGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHBhcnNlZFZhbHVlLmhhc2gpO1xuXG4gICAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGRlY3J5cHRlZFZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcGFyc2VkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKGRlY3J5cHRlZFZhbHVlKTtcblxuICAgICAgICAgICAgICAgIC8vIGxvZy5sb2coJ2RlY3J5cHRlZCBWYWx1ZSwnLCBwYXJzZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gcGFyc2VkVmFsdWU7XG5cbiAgICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgSlNPTi5zdHJpbmdpZnkocGFyc2VkVmFsdWUpICsgSlNPTi5zdHJpbmdpZnkoaXYpKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBsb2cubG9nKCdyZXN1bHQgb2YgaGFzaCB2ZXJpZmljYXRpb24hICcsIHJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvL2lmIG5vdCwganVzdCByZXR1cm4gdGhlIG1lc3NhZ2VcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7XG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAvL3JlamVjdCgnbm8gc2Vzc2lvbktleSBmb3IgY2hhdCByb29tIGZvdW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KCd3cm9uZyBtZXNzYWdlIHRvIGRlY3J5cHQnKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgZGVjcnlwdERhdGFPYmplY3QoZGF0YU9iamVjdCwgc2VuZGVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIC8vaWYgaXMgbm90IHRvIGFwcGx5IGVuY3J5cHRpb24sIHRoZW4gcmV0dXJucyByZXNvbHZlXG4gICAgICBpZiAoIV90aGlzLmlzVG9Vc2VFbmNyeXB0aW9uKSB7XG4gICAgICAgIC8vIGxvZy5sb2coJ2RlY3J5cHRpb24gZGlzYWJsZWQnKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoZGF0YU9iamVjdCk7XG4gICAgICB9XG5cbiAgICAgIGxldCBkYXRhT2JqZWN0VVJMID0gX3RoaXMuX3BhcnNlTWVzc2FnZVVSTChzZW5kZXIpO1xuXG4gICAgICAvLyBsb2cubG9nKCdkYXRhT2JqZWN0IHZhbHVlIHRvIGRlY3J5cHQ6ICcsIGRhdGFPYmplY3QpO1xuXG4gICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ2RhdGFPYmplY3RTZXNzaW9uS2V5cycpLnRoZW4oKHNlc3Npb25LZXlzKSA9PiB7XG4gICAgICAgIHNlc3Npb25LZXlzID0gX2NoYXRrZXlzVG9BcnJheUNsb25lcihkYXRhT2JqZWN0VVJMLCBzZXNzaW9uS2V5cyk7XG4gICAgICAgIGxldCBkYXRhT2JqZWN0S2V5ID0gc2Vzc2lvbktleXMgPyBzZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXSA6IG51bGw7XG5cbiAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkpIHtcblxuICAgICAgICAgIC8vY2hlY2sgaWYgaXMgdG8gYXBwbHkgZW5jcnlwdGlvblxuICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5LmlzVG9FbmNyeXB0KSB7XG4gICAgICAgICAgICBsZXQgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KGRhdGFPYmplY3QuaXYpO1xuICAgICAgICAgICAgbGV0IGVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZVRvVWludDhBcnJheShkYXRhT2JqZWN0LnZhbHVlKTtcblxuICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBlbmNyeXB0ZWRWYWx1ZSwgaXYpLnRoZW4oZGVjcnlwdGVkVmFsdWUgPT4ge1xuICAgICAgICAgICAgICBsZXQgcGFyc2VkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKGRlY3J5cHRlZFZhbHVlKTtcbiAgICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0geyB2YWx1ZTogcGFyc2VkVmFsdWUsIGl2OiBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KSB9O1xuXG4gICAgICAgICAgICAgIC8vIGxvZy5sb2coJ2RlY3J5cHRlZCBkYXRhT2JqZWN0LCcsIG5ld1ZhbHVlKTtcblxuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4geyByZWplY3QoJ09uIGRlY3J5cHREYXRhT2JqZWN0IGZyb20gbWV0aG9kIGVuY3J5cHRBRVMgZXJyb3I6ICcgKyBlcnIpOyB9KTtcblxuICAgICAgICAgIC8vaWYgbm90LCBqdXN0IHJldHVybiB0aGUgZGF0YU9iamVjdFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBsb2cubG9nKCdUaGUgZGF0YU9iamVjdCBpcyBub3QgZW5jcnlwdGVkJyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShkYXRhT2JqZWN0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdObyBkYXRhT2JqZWN0S2V5IGZvciB0aGlzIGRhdGFPYmplY3RVUkw6JywgZGF0YU9iamVjdFVSTCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZG9NdXR1YWxBdXRoZW50aWNhdGlvbihzZW5kZXIsIHJlY2VpdmVyKSB7XG4gICAgY29uc29sZS5pbmZvKCdkb011dHVhbEF1dGhlbnRpY2F0aW9uOnNlbmRlciAnLCBzZW5kZXIpO1xuICAgIGNvbnNvbGUuaW5mbygnZG9NdXR1YWxBdXRoZW50aWNhdGlvbjpyZWNlaXZlciAnLCByZWNlaXZlcik7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgbGV0IGRhdGFPYmplY3RVUkw7XG5cbiAgICAgIC8vIGNoZWNrIGlmIHRoZSBzZW5kZXIgaXMgYSBkYXRhT2JqZWN0IGFuZCBpZiBzbyBzdG9yZXMgdGhhdCB2YWx1ZVxuICAgICAgbGV0IHJlcG9ydGVyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHNlbmRlcik7XG4gICAgICBpZiAocmVwb3J0ZXJVUkwpIHtcbiAgICAgICAgZGF0YU9iamVjdFVSTCA9IHNlbmRlcjtcbiAgICAgICAgc2VuZGVyID0gcmVwb3J0ZXJVUkw7XG4gICAgICB9XG5cbiAgICAgIGxldCBtc2cgPSB7XG4gICAgICAgIHRvOiByZWNlaXZlcixcbiAgICAgICAgZnJvbTogc2VuZGVyLFxuICAgICAgICBjYWxsYmFjazogdW5kZWZpbmVkLFxuICAgICAgICBib2R5OiB7aGFuZHNoYWtlUGhhc2U6ICdzdGFydEhhbmRTaGFrZScsIGlnbm9yZTogJ2lnbm9yZU1lc3NhZ2UnfVxuICAgICAgfTtcblxuICAgICAgaWYgKCFzZW5kZXIgfHwgIXJlY2VpdmVyKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoJ3NlbmRlciBvciByZWNlaXZlciBtaXNzaW5nIG9uIGRvTXV0dWFsQXV0aGVudGljYXRpb24nKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGNoYXRLZXlzID0gX3RoaXMuY2hhdEtleXNbc2VuZGVyICsgJzwtPicgKyByZWNlaXZlcl07XG4gICAgICBsZXQgdXNlclVSTCA9IF90aGlzLl9yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIoc2VuZGVyKTtcblxuICAgICAgaWYgKHVzZXJVUkwpIHtcblxuICAgICAgICBpZiAoIWNoYXRLZXlzKSB7XG4gICAgICAgICAgLy8gY2FsbGJhY2sgdG8gcmVzb2x2ZSB3aGVuIGZpbmlzaCB0aGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uXG4gICAgICAgICAgbGV0IHJlc29sdmVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIC8vIGxvZy5sb2coJ2NhbGxiYWNrIHZhbHVlOicsIHZhbHVlKTtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgbXNnLmNhbGxiYWNrID0gcmVzb2x2ZWQ7XG4gICAgICAgICAgbXNnLmRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMO1xuXG4gICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtc2csIHVzZXJVUkwpO1xuICAgICAgICAgIF90aGlzLmNoYXRLZXlzW3NlbmRlciArICc8LT4nICsgcmVjZWl2ZXJdID0gY2hhdEtleXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhdEtleXMuYXV0aGVudGljYXRlZCkge1xuXG4gICAgICAgICAgbGV0IHN0YXJ0U2Vzc2lvbktleUV4Y2hhbmdlID0ge1xuICAgICAgICAgICAgdG86IHNlbmRlcixcbiAgICAgICAgICAgIGZyb206IHJlY2VpdmVyXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjaGF0S2V5cy5kYXRhT2JqZWN0VVJMID0gZGF0YU9iamVjdFVSTDtcbiAgICAgICAgICBfdGhpcy5fc2VuZFJlcG9ydGVyU2Vzc2lvbktleShzdGFydFNlc3Npb25LZXlFeGNoYW5nZSwgY2hhdEtleXMpLnRoZW4odmFsdWUgPT4ge1xuXG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh2YWx1ZS5tZXNzYWdlKTtcbiAgICAgICAgICAgIHJlc29sdmUoJ2V4Y2hhbmdlIG9mIGNoYXQgc2Vzc2lvbktleSBpbml0aWF0ZWQnKTtcbiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4geyByZWplY3QoJ09uIGRvTXV0dWFsQXV0aGVudGljYXRpb24gZnJvbSBtZXRob2QgX3NlbmRSZXBvcnRlclNlc3Npb25LZXkgZXJyb3I6ICcgKyBlcnIpOyB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fZG9IYW5kU2hha2VQaGFzZShtc2csIGNoYXRLZXlzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KCdNdXR1YWwgYXV0aGVudGljYXRpb24gZXJyb3I6IEh5cGVydHkgb3duZXIgY291bGQgbm90IGJlIHJlc29sdmVkJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG5cbiAgLy8qKioqKioqKioqKioqKioqKioqIFRPS0VOIE1FVEhPRFMgKioqKioqKioqKioqKioqKioqKlxuICAvKipcbiAgKiBnZXQgYSBUb2tlbiB0byBiZSBhZGRlZCB0byBhIG1lc3NhZ2VcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICBmcm9tVVJMICAgICBvcmlnaW4gb2YgdGhlIG1lc3NhZ2VcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICB0b1VSTCAgICAgdGFyZ2V0IG9mIHRoZSBtZXNzYWdlXG4gICogQHJldHVybiB7SlNPTn0gICAgdG9rZW4gICAgdG9rZW4gdG8gYmUgYWRkZWQgdG8gdGhlIG1lc3NhZ2VcbiAgKi9cbiAgZ2V0VG9rZW4oZnJvbVVSTCwgdG9VcmwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIC8vIGxvZy5sb2coJ1tJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRUb2tlbl0gZnJvbS0+JywgZnJvbVVSTCwgJyAgdG8tPicsIHRvVXJsKTtcblxuICAgICAgaWYgKHRvVXJsKSB7XG4gICAgICAgIC8vbG9nLmxvZygndG9VcmwnLCB0b1VybCk7XG4gICAgICAgIF90aGlzLnJlZ2lzdHJ5LmlzTGVnYWN5KHRvVXJsKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIC8vIGxvZy5sb2coJ1tJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRUb2tlbl0gaXNMRUdBQ1k6ICcsIHJlc3VsdCk7XG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBjaGVjayBpZiBpbiB0aGUgZnV0dXJlIG90aGVyIGxlZ2FjeSBoeXBlcnRpZXMgaGF2ZSBleHBpcmF0aW9uIHRpbWVzXG4gICAgICAgICAgICAvLyBpZiBzbyB0aGUgY2hlY2sgc2hvdWxkIGJlIG1hZGUgaGVyZSAob3IgaW4gdGhlIGdldEFjY2Vzc1Rva2VuIGZ1bmN0aW9uKVxuICAgICAgICAgICAgbGV0IHRva2VuID0gX3RoaXMuZ2V0QWNjZXNzVG9rZW4odG9VcmwpO1xuICAgICAgICAgICAgaWYgKHRva2VuKSAgICAgICAgICAgICAgeyByZXR1cm4gcmVzb2x2ZSh0b2tlbik7IH1cblxuICAgICAgICAgICAgbGV0IGRvbWFpbiA9IGdldFVzZXJJZGVudGl0eURvbWFpbih0b1VybCk7XG5cbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHByb2Nlc3MgdG8gZ2V0IHRva2VuIGhhcyBhbHJlYWR5IHN0YXJ0ZWRcbiAgICAgICAgICAgIGlmIChfdGhpcy5pZGVudGl0aWVzTGlzdFtkb21haW5dICYmIF90aGlzLmlkZW50aXRpZXNMaXN0W2RvbWFpbl0uc3RhdHVzID09PSAnaW4tcHJvZ3Jlc3MnKSB7XG4gICAgICAgICAgICAgIC8vIFRoZSBwcm9jZXNzIHRvIGdldCB0aGUgdG9rZW4gaGFzIGFscmVhZHkgc3RhcnRlZCwgbGV0J3Mgd2FpdCBieSB3YXRjaGluZyBpdHMgc3RhdHVzXG5cbiAgICAgICAgICAgICAgX3RoaXMud2F0Y2hpbmdZb3Uub2JzZXJ2ZSgnaWRlbnRpdGllc0xpc3QnLCAoY2hhbmdlKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBsb2cubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dICBpZGVudGl0aWVzTGlzdCBjaGFuZ2VkICcgKyBfdGhpcy5pZGVudGl0aWVzTGlzdCk7XG5cbiAgICAgICAgICAgICAgICBsZXQga2V5cGF0aCA9IGNoYW5nZS5rZXlwYXRoO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleXBhdGguaW5jbHVkZXMoJ3N0YXR1cycpKSB7XG4gICAgICAgICAgICAgICAgICBrZXlwYXRoID0ga2V5cGF0aC5yZXBsYWNlKCcuc3RhdHVzJywgJycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChrZXlwYXRoID09PSBkb21haW4gJiYgY2hhbmdlLm5hbWUgPT09ICdzdGF0dXMnICYmIGNoYW5nZS5uZXdWYWx1ZSA9PT0gJ2NyZWF0ZWQnKSB7XG4gICAgICAgICAgICAgICAgICAvLyBsb2cubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIHRva2VuIGlzIGNyZWF0ZWQgJyArIF90aGlzLmlkZW50aXRpZXNMaXN0W2RvbWFpbl0pO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMuZ2V0QWNjZXNzVG9rZW4odG9VcmwpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy9Ub2tlbiBkb2VzIG5vdCBleGlzdCBhbmQgdGhlIHByb2Nlc3MgdG8gZ2V0IGhhcyBub3Qgc3RhcnRlZCB5ZXRcblxuICAgICAgICAgICAgICBfdGhpcy5pZGVudGl0aWVzTGlzdFtkb21haW5dID0ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogJ2luLXByb2dyZXNzJ1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIC8vIGxvZy5sb2coJ1tJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRUb2tlbl0gZm9yLT4gJywgZG9tYWluKTtcbiAgICAgICAgICAgICAgX3RoaXMuY2FsbEdlbmVyYXRlTWV0aG9kcyhkb21haW4pLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gbG9nLmxvZygnW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBDYWxsR2VuZXJhdGVtZXRob2RzJywgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGxldCB0b2tlbiA9IF90aGlzLmdldEFjY2Vzc1Rva2VuKHRvVXJsKTtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnTm8gQWNjZXNzIHRva2VuIGZvdW5kJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBlcnJvciBDYWxsR2VuZXJhdGVtZXRob2RzJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5fZ2V0VmFsaWRUb2tlbihmcm9tVVJMKS50aGVuKChpZGVudGl0eSkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKGlkZW50aXR5KTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7IHJlamVjdCgnT24gZ2V0VG9rZW4gZnJvbSBtZXRob2QgX2dldFZhbGlkVG9rZW4gZXJyb3I6ICcgKyBlcnIpOyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7IHJlamVjdCgnT24gZ2V0VG9rZW4gZnJvbSBtZXRob2QgaXNMZWdhY3kgZXJyb3I6ICcgKyBlcnIpOyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9nZXRWYWxpZFRva2VuKGZyb21VUkwpLnRoZW4oKGlkZW50aXR5KSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShpZGVudGl0eSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogZ2V0IGFuIElkIFRva2VuIGZvciBhIEh5cGVydHlVUkxcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICBoeXBlcnR5VVJMICAgICB0aGUgSHlwZXJ0eSBhZGRyZXNzXG4gICogQHJldHVybiB7SlNPTn0gICAgdG9rZW4gICAgSWQgdG9rZW4gdG8gYmUgYWRkZWQgdG8gdGhlIG1lc3NhZ2VcbiAgKi9cbiAgZ2V0SWRUb2tlbihoeXBlcnR5VVJMKSB7XG4gICAgY29uc29sZS5pbmZvKCdnZXRJZFRva2VuOmh5cGVydHlVUkwgJywgaHlwZXJ0eVVSTCk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBsZXQgc3BsaXRVUkwgPSBoeXBlcnR5VVJMLnNwbGl0KCc6Ly8nKTtcbiAgICAgIGlmIChzcGxpdFVSTFswXSAhPT0gJ2h5cGVydHknKSB7XG5cbiAgICAgICAgX3RoaXMuX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdChoeXBlcnR5VVJMKS50aGVuKChyZXR1cm5lZEh5cGVydHlVUkwpID0+IHtcblxuICAgICAgICAgIGxldCB1c2VyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHJldHVybmVkSHlwZXJ0eVVSTCk7XG5cbiAgICAgICAgICBpZiAodXNlclVSTCkge1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XG4gICAgICAgICAgICAgIGxldCBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdO1xuICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnbm8gaWRlbnRpdHkgd2FzIGZvdW5kICcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ25vIGlkZW50aXR5IHdhcyBmb3VuZDogJywgcmVhc29uKTtcbiAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgdXNlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKTtcbiAgICAgICAgaWYgKHVzZXJVUkwpIHtcblxuICAgICAgICAgIGZvciAobGV0IGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHtcbiAgICAgICAgICAgIGxldCBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7XG4gICAgICAgICAgICAgIC8vIFRPRE8gY2hlY2sgdGhpcyBnZXRJZFRva2VuIHdoZW4gd2UgcnVuIG9uIG5vZGVqcyBlbnZpcm9ubWVudDtcbiAgICAgICAgICAgICAgaWYgKGlkZW50aXR5Lmhhc093blByb3BlcnR5KCdtZXNzYWdlSW5mbycpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlkZW50aXR5Lm1lc3NhZ2VJbmZvLmhhc093blByb3BlcnR5KCdhc3NlcnRpb24nKSkgeyByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7IH0gZWxzZSB7IC8vaGFjayB3aGlsZSBpZG0gaXMgbm90IHJlZXN0dWN0dXJlZFxuICAgICAgICAgICAgICAgICAgaWRlbnRpdHkubWVzc2FnZUluZm8uYXNzZXJ0aW9uID0gaWRlbnRpdHkuYXNzZXJ0aW9uO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaWRlbnRpdHkubWVzc2FnZUluZm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnbm8gaWRlbnRpdHkgd2FzIGZvdW5kLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBnZXQgYW4gQWNjZXNzIFRva2VuIGZvciBhIGxlZ2FjeVVSTFxuICAqIEBwYXJhbSAge1N0cmluZ30gIGxlZ2FjeVVSTCAgICAgdGhlIGxlZ2FjeSBhZGRyZXNzXG4gICogQHJldHVybiB7SlNPTn0gICAgdG9rZW4gICAgQWNjZXNzIHRva2VuIHRvIGJlIGFkZGVkIHRvIHRoZSBtZXNzYWdlXG4gICovXG4gIGdldEFjY2Vzc1Rva2VuKHVybCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvKiAgbGV0IHVybFNwbGl0ID0gdXJsLnNwbGl0KCcuJyk7XG4gICAgbGV0IGxlbmd0aCA9IHVybFNwbGl0Lmxlbmd0aDsqL1xuXG4gICAgbGV0IGRvbWFpblRvQ2hlY2sgPSBkaXZpZGVVUkwodXJsKS5kb21haW47XG5cbiAgICBpZiAodXJsLmluY2x1ZGVzKCdwcm90b3N0dWInKSkge1xuICAgICAgZG9tYWluVG9DaGVjayA9IGRvbWFpblRvQ2hlY2sucmVwbGFjZShkb21haW5Ub0NoZWNrLnNwbGl0KCcuJylbMF0gKyAnLicsICcnKTtcbiAgICB9XG5cbiAgICBsZXQgaWRlbnRpdHlUb1JldHVybjtcbiAgICBsZXQgZXhwaXJhdGlvbkRhdGUgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHRpbWVOb3cgPSBfdGhpcy5fc2Vjb25kc1NpbmNlRXBvY2goKTtcbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XG4gICAgICBsZXQgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTtcbiAgICAgIGlmIChpZGVudGl0eS5oYXNPd25Qcm9wZXJ0eSgnaW50ZXJ3b3JraW5nJykgJiYgaWRlbnRpdHkuaW50ZXJ3b3JraW5nLmRvbWFpbiA9PT0gZG9tYWluVG9DaGVjaykge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBleHBpcmF0aW9uIHRpbWVcbiAgICAgICAgaWYgKGlkZW50aXR5Lmhhc093blByb3BlcnR5KCdpbmZvJykgJiYgaWRlbnRpdHkuaW5mby5oYXNPd25Qcm9wZXJ0eSgnZXhwaXJlcycpKSB7XG4gICAgICAgICAgZXhwaXJhdGlvbkRhdGUgPSBpZGVudGl0eS5pbmZvLmV4cGlyZXM7XG4gICAgICAgICAgbG9nLmxvZygnW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldEFjY2Vzc1Rva2VuXSBUb2tlbiBleHBpcmVzIGluJywgZXhwaXJhdGlvbkRhdGUpO1xuICAgICAgICAgIGxvZy5sb2coJ1tJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRBY2Nlc3NUb2tlbl0gdGltZSBub3c6JywgdGltZU5vdyk7XG5cbiAgICAgICAgICAvLyBUT0RPOiB0aGlzIHNob3VsZCBub3QgYmUgdmVyaWZpZWQgaW4gdGhpcyB3YXlcbiAgICAgICAgICAvLyB3ZSBzaG91bGQgY29udGFjdCB0aGUgSURQIHRvIHZlcmlmeSB0aGlzIGluc3RlYWQgb2YgdXNpbmcgdGhlIGxvY2FsIGNsb2NrXG4gICAgICAgICAgLy8gYnV0IHRoaXMgd29ya3MgZm9yIG5vdy4uLlxuICAgICAgICAgIGlmICh0aW1lTm93ID49IGV4cGlyYXRpb25EYXRlKSB7XG4gICAgICAgICAgICAvLyBkZWxldGUgY3VycmVudCBpZGVudGl0eVxuICAgICAgICAgICAgLy9fdGhpcy5kZWxldGVJZGVudGl0eShpZGVudGl0eS5pZGVudGl0eSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gdGhlIGdldFRva2VuIGZ1bmN0aW9uIHRoZW4gZ2VuZXJhdGVzIGEgbmV3IHRva2VuXG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGVsc2UgdGhpcyBhY2Nlc3MgdG9rZW4gaGFzIG5vIGV4cGlyYXRpb24gdGltZVxuXG4gICAgICAgIGlmIChpZGVudGl0eS5oYXNPd25Qcm9wZXJ0eSgnbWVzc2FnZUluZm8nKSAmJiBpZGVudGl0eS5tZXNzYWdlSW5mby5oYXNPd25Qcm9wZXJ0eSgndXNlclByb2ZpbGUnKSAmJiBpZGVudGl0eS5tZXNzYWdlSW5mby51c2VyUHJvZmlsZSkge1xuICAgICAgICAgIGlkZW50aXR5VG9SZXR1cm4gPSB7IHVzZXJQcm9maWxlOiBpZGVudGl0eS5tZXNzYWdlSW5mby51c2VyUHJvZmlsZSwgYWNjZXNzX3Rva2VuOiBpZGVudGl0eS5pbnRlcndvcmtpbmcuYWNjZXNzX3Rva2VuIH07XG4gICAgICAgICAgaWYgKGlkZW50aXR5Lmhhc093blByb3BlcnR5KCdpbmZvVG9rZW4nKSAmJiBpZGVudGl0eS5pbmZvVG9rZW4uaGFzT3duUHJvcGVydHkoJ2lkJykpIHtcbiAgICAgICAgICAgIGlkZW50aXR5VG9SZXR1cm4udXNlclByb2ZpbGUuaWQgPSBpZGVudGl0eS5pbmZvVG9rZW4uaWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZGVudGl0eVRvUmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICAvLyoqKioqKioqKioqKioqKioqKiogT1RIRVIgTUVUSE9EUyAqKioqKioqKioqKioqKioqKioqXG5cbiAgbG9hZFNlc3Npb25LZXlzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgnZGF0YU9iamVjdFNlc3Npb25LZXlzJykudGhlbigoc2Vzc2lvbktleXMpID0+IHtcbiAgICAgICAgaWYgKHNlc3Npb25LZXlzKSB7XG4gICAgICAgICAgLy9UT0RPOiBDaGVjayBpZiB0aGlzIGlzIG5lZWRlZCBhbmQgaWYgaXQgaXMsIGhvdyBjYW4gdGhlIGtleSBiZSByZWNvdmVyZWQgKHRoZSBrZXlVUkwgaXMgc3RvcmVkIHdlcmU/KVxuICAgICAgICAgIC8vc2Vzc2lvbktleXMuc2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KEpTT04ucGFyc2UoJ1snICsgc2Vzc2lvbktleXMuc2Vzc2lvbktleSArICddJykpO1xuICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5cyA9IHNlc3Npb25LZXlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5cyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cblxuICBzZW5kUmVmcmVzaE1lc3NhZ2Uob2xkSWRlbnRpdHkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBkb21haW4gPSBfdGhpcy5fcmVzb2x2ZURvbWFpbihvbGRJZGVudGl0eS5pZHApO1xuICAgIGxldCBtZXNzYWdlO1xuICAgIGxldCBhc3NlcnRpb24gPSBfdGhpcy5nZXRJZGVudGl0eShvbGRJZGVudGl0eS51c2VyUHJvZmlsZS51c2VyVVJMKTtcblxuICAgIGxvZy5sb2coJ3NlbmRSZWZyZXNoTWVzc2FnZTpvbGRJZGVudGl0eScsIG9sZElkZW50aXR5KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgZG9tYWluID0gX3RoaXMuX3Jlc29sdmVEb21haW4ob2xkSWRlbnRpdHkuaWRwKTtcbiAgICAgIGxldCBtZXNzYWdlO1xuICAgICAgbGV0IGFzc2VydGlvbiA9IF90aGlzLmdldElkZW50aXR5KG9sZElkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkwpO1xuXG4gICAgICBjb25zb2xlLmluZm8oJ3NlbmRSZWZyZXNoTWVzc2FnZTpvbGRJZGVudGl0eScsIG9sZElkZW50aXR5KTtcblxuICAgICAgbWVzc2FnZSA9IHt0eXBlOiAnZXhlY3V0ZScsIHRvOiBkb21haW4sIGZyb206IF90aGlzLl9pZG1VUkwsIGJvZHk6IHtyZXNvdXJjZTogJ2lkZW50aXR5JywgbWV0aG9kOiAncmVmcmVzaEFzc2VydGlvbicsIHBhcmFtczoge2lkZW50aXR5OiBhc3NlcnRpb259fX07XG4gICAgICB0cnkge1xuICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVzKSA9PiB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IHJlcy5ib2R5LnZhbHVlO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KCdJbiBzZW5kUmVmcmVzaE1lc3NhZ2Ugb24gcG9zdE1lc3NhZ2UgZXJyb3I6ICcgKyBlcnIpO1xuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgfVxuXG4gIHNlbmRHZW5lcmF0ZU1lc3NhZ2UoY29udGVudHMsIG9yaWdpbiwgdXNlcm5hbWVIaW50LCBpZHBEb21haW4pIHtcbiAgICBsb2cubG9nKCdbc2VuZEdlbmVyYXRlTWVzc2FnZTpjb250ZW50c10nLCBjb250ZW50cyk7XG4gICAgbG9nLmxvZygnW3NlbmRHZW5lcmF0ZU1lc3NhZ2U6b3JpZ2luXScsIG9yaWdpbik7XG4gICAgbG9nLmxvZygnW3NlbmRHZW5lcmF0ZU1lc3NhZ2U6dXNlcm5hbWVIaW50XScsIHVzZXJuYW1lSGludCk7XG4gICAgbG9nLmxvZygnW3NlbmRHZW5lcmF0ZU1lc3NhZ2U6aWRwRG9tYWluXScsIGlkcERvbWFpbik7XG4gICAgbG9nLmxvZygnc2VuZEdlbmVyYXRlTWVzc2FnZV9oaW50Jyk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBkb21haW4gPSBfdGhpcy5fcmVzb2x2ZURvbWFpbihpZHBEb21haW4pO1xuICAgICAgbGV0IG1lc3NhZ2U7XG5cbiAgICAgIG1lc3NhZ2UgPSB7dHlwZTogJ2V4ZWN1dGUnLCB0bzogZG9tYWluLCBmcm9tOiBfdGhpcy5faWRtVVJMLCBib2R5OiB7cmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogJ2dlbmVyYXRlQXNzZXJ0aW9uJywgcGFyYW1zOiB7Y29udGVudHM6IGNvbnRlbnRzLCBvcmlnaW46IG9yaWdpbiwgdXNlcm5hbWVIaW50OiB1c2VybmFtZUhpbnR9fX07XG4gICAgICB0cnkge1xuICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVzKSA9PiB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IHJlcy5ib2R5LnZhbHVlO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KCdJbiBzZW5kUmVmcmVzaE1lc3NhZ2Ugb24gcG9zdE1lc3NhZ2UgZXJyb3I6ICcgKyBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogUmVxdWVzdHMgdGhlIElkcFByb3h5IGZyb20gYSBnaXZlbiBEb21haW4gZm9yIGFuIGlkZW50aXR5QXNzZXJ0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IGNvbnRlbnRzICAgICBjb250ZW50c1xuICAqIEBwYXJhbSAge0RPTVN0cmluZ30gb3JpZ2luICAgICAgIG9yaWdpblxuICAqIEBwYXJhbSAge0RPTVN0cmluZ30gdXNlcm5hbWVIaW50IHVzZXJuYW1lSGludFxuICAqIEBwYXJhbSAge0pTT059ICAgICAga2V5UGFpciAgICAgICB1c2VyIGtleVBhaXJcbiAgKiBAcmV0dXJuIHtJZEFzc2VydGlvbn0gICAgICAgICAgICAgIElkQXNzZXJ0aW9uXG4gICovXG4gIGdlbmVyYXRlQXNzZXJ0aW9uKGNvbnRlbnRzLCBvcmlnaW4sIHVzZXJuYW1lSGludCwga2V5UGFpciwgaWRwRG9tYWluKSB7XG4gICAgbG9nLmxvZygnW2dlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcbiAgICBsb2cubG9nKCdbZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgbG9nLmxvZygnW2dlbmVyYXRlQXNzZXJ0aW9uOnVzZXJuYW1lSGludF0nLCB1c2VybmFtZUhpbnQpO1xuICAgIGxvZy5sb2coJ1tnZW5lcmF0ZUFzc2VydGlvbjprZXlQYWlyXScsIGtleVBhaXIpO1xuICAgIGxvZy5sb2coJ1tnZW5lcmF0ZUFzc2VydGlvbjppZHBEb21haW5dJywgaWRwRG9tYWluKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbG9nLmxvZygnW0lkZW50aXR5TW9kdWxlOmdlbmVyYXRlU2VsZWN0ZWRJZGVudGl0eTpzZW5kR2VuZXJhdGVNZXNzYWdlXScsIHVzZXJuYW1lSGludCk7XG4gICAgICBfdGhpcy5zZW5kR2VuZXJhdGVNZXNzYWdlKGNvbnRlbnRzLCBvcmlnaW4sIHVzZXJuYW1lSGludCwgaWRwRG9tYWluKS50aGVuKChyZXN1bHQpID0+IHtcblxuICAgICAgICBpZiAocmVzdWx0LmxvZ2luVXJsKSB7XG5cbiAgICAgICAgICBfdGhpcy5jYWxsSWRlbnRpdHlNb2R1bGVGdW5jKCdvcGVuUG9wdXAnLCB7dXJscmVjZWl2ZWQ6IHJlc3VsdC5sb2dpblVybH0pLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBsb2cubG9nKCdbSWRlbnRpdHlNb2R1bGU6Z2VuZXJhdGVTZWxlY3RlZElkZW50aXR5Om9wZW5Qb3B1cF0nLCB1c2VybmFtZUhpbnQpO1xuXG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQpIHtcblxuICAgICAgICAgIF90aGlzLnN0b3JlSWRlbnRpdHkocmVzdWx0LCBrZXlQYWlyKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIG9idGFpbmluZyBpZGVudGl0eSBpbmZvcm1hdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7IHJlamVjdCgnT24gZ2VuZXJhdGVBc3NlcnRpb24gZnJvbSBtZXRob2Qgc2VuZEdlbmVyYXRlTWVzc2FnZSBlcnJvcjogJyArIGVycik7IH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogUmVxdWVzdHMgdGhlIElkcFByb3h5IGZyb20gYSBnaXZlbiBEb21haW4gdG8gdmFsaWRhdGUgYW4gSWRlbnRpdHlBc3NlcnRpb25cbiAgKiBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSByZXN1bHQgZnJvbSB0aGUgdmFsaWRhdGlvbi5cbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IGFzc2VydGlvblxuICAqIEBwYXJhbSAge0RPTVN0cmluZ30gb3JpZ2luICAgICAgIG9yaWdpblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgUHJvbWlzZSAgICAgICAgIHByb21pc2Ugd2l0aCB0aGUgcmVzdWx0IGZyb20gdGhlIHZhbGlkYXRpb25cbiAgKi9cbiAgdmFsaWRhdGVBc3NlcnRpb24oYXNzZXJ0aW9uLCBvcmlnaW4sIGlkcERvbWFpbikge1xuICAgIGxvZy5sb2coJ1t2YWxpZGF0ZUFzc2VydGlvbjphc3NlcnRpb25dJywgYXNzZXJ0aW9uKTtcbiAgICBsb2cubG9nKCdbdmFsaWRhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgbG9nLmxvZygnW3ZhbGlkYXRlQXNzZXJ0aW9uOmlkcERvbWFpbl0nLCBpZHBEb21haW4pO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZG9tYWluID0gX3RoaXMuX3Jlc29sdmVEb21haW4oaWRwRG9tYWluKTtcblxuICAgIGxldCBtZXNzYWdlID0ge3R5cGU6ICdleGVjdXRlJywgdG86IGRvbWFpbiwgZnJvbTogX3RoaXMuX2lkbVVSTCwgYm9keToge3Jlc291cmNlOiAnaWRlbnRpdHknLCBtZXRob2Q6ICd2YWxpZGF0ZUFzc2VydGlvbicsXG4gICAgICBwYXJhbXM6IHthc3NlcnRpb246IGFzc2VydGlvbiwgb3JpZ2luOiBvcmlnaW59fX07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3VsdC5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuYm9keS52YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnZXJyb3InLCByZXN1bHQuYm9keS5jb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdCgnT24gdmFsaWRhdGVBc3NlcnRpb24gZnJvbSBtZXRob2QgcG9zdE1lc3NhZ2UgZXJyb3I6ICcgKyBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYWRkR1VJTGlzdGVuZXJzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5faWRtVVJMLCAobXNnKSA9PiB7XG4gICAgICBsZXQgZnVuY05hbWUgPSBtc2cuYm9keS5tZXRob2Q7XG5cbiAgICAgIGxldCByZXR1cm5lZFZhbHVlO1xuICAgICAgaWYgKGZ1bmNOYW1lID09PSAnZGVwbG95R1VJJykge1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gX3RoaXMuZGVwbG95R1VJKCk7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAnZ2V0SWRlbnRpdGllc1RvQ2hvb3NlJykge1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gX3RoaXMuZ2V0SWRlbnRpdGllc1RvQ2hvb3NlKCk7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAndW5yZWdpc3RlcklkZW50aXR5Jykge1xuICAgICAgICBsZXQgZW1haWwgPSBtc2cuYm9keS5wYXJhbXMuZW1haWw7XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSBfdGhpcy51bnJlZ2lzdGVySWRlbnRpdHkoZW1haWwpO1xuICAgICAgfSBlbHNlIGlmIChmdW5jTmFtZSA9PT0gJ2dlbmVyYXRlUlNBS2V5UGFpcicpIHtcbiAgICAgICAgLy8gYmVjYXVzZSBnZW5lcmF0ZVJTQUtleVBhaXIgaXMgYSBwcm9taXNlXG4gICAgICAgIC8vIHdlIGhhdmUgdG8gc2VuZCB0aGUgbWVzc2FnZSBvbmx5IGFmdGVyIGdldHRpbmcgdGhlIGtleSBwYWlyXG4gICAgICAgIF90aGlzLmNyeXB0by5nZW5lcmF0ZVJTQUtleVBhaXIoKS50aGVuKChrZXlQYWlyKSA9PiB7XG4gICAgICAgICAgbGV0IHZhbHVlID0ge3R5cGU6ICdleGVjdXRlJywgdmFsdWU6IGtleVBhaXIsIGNvZGU6IDIwMH07XG4gICAgICAgICAgbGV0IHJlcGx5TXNnID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB2YWx1ZX07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdCgnT24gYWRkR1VJTGlzdGVuZXJzIGZyb20gaWYgZ2VuZXJhdGVSU0FLZXlQYWlyIG1ldGhvZCBwb3N0TWVzc2FnZSBlcnJvcjogJyArIGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChmdW5jTmFtZSA9PT0gJ3NlbmRHZW5lcmF0ZU1lc3NhZ2UnKSB7XG4gICAgICAgIGxldCBjb250ZW50cyA9IG1zZy5ib2R5LnBhcmFtcy5jb250ZW50cztcbiAgICAgICAgbGV0IG9yaWdpbiA9IG1zZy5ib2R5LnBhcmFtcy5vcmlnaW47XG4gICAgICAgIGxldCB1c2VybmFtZUhpbnQgPSBtc2cuYm9keS5wYXJhbXMudXNlcm5hbWVIaW50O1xuICAgICAgICBsZXQgaWRwRG9tYWluID0gbXNnLmJvZHkucGFyYW1zLmlkcERvbWFpbjtcbiAgICAgICAgX3RoaXMuc2VuZEdlbmVyYXRlTWVzc2FnZShjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGlkcERvbWFpbikudGhlbigocmV0dXJuZWRWYWx1ZSkgPT4ge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHt0eXBlOiAnZXhlY3V0ZScsIHZhbHVlOiByZXR1cm5lZFZhbHVlLCBjb2RlOiAyMDB9O1xuICAgICAgICAgIGxldCByZXBseU1zZyA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogdmFsdWV9O1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZWplY3QoJ09uIGFkZEdVSUxpc3RlbmVycyBmcm9tIGlmIHNlbmRHZW5lcmF0ZU1lc3NhZ2UgbWV0aG9kIHBvc3RNZXNzYWdlIGVycm9yOiAnICsgZXJyKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoZnVuY05hbWUgPT09ICdzdG9yZUlkZW50aXR5Jykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbXNnLmJvZHkucGFyYW1zLnJlc3VsdDtcbiAgICAgICAgbGV0IGtleVBhaXIgPSBtc2cuYm9keS5wYXJhbXMua2V5UGFpcjtcbiAgICAgICAgX3RoaXMuc3RvcmVJZGVudGl0eShyZXN1bHQsIGtleVBhaXIpLnRoZW4oKHJldHVybmVkVmFsdWUpID0+IHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSB7dHlwZTogJ2V4ZWN1dGUnLCB2YWx1ZTogcmV0dXJuZWRWYWx1ZSwgY29kZTogMjAwfTtcbiAgICAgICAgICBsZXQgcmVwbHlNc2cgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHZhbHVlfTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocmVwbHlNc2cpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KCdPbiBhZGRHVUlMaXN0ZW5lcnMgZnJvbSBpZiBzdG9yZUlkZW50aXR5IG1ldGhvZCBwb3N0TWVzc2FnZSBlcnJvcjogJyArIGVycik7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8qZWxzZSBpZiAoZnVuY05hbWUgPT09ICdzZWxlY3RJZGVudGl0eUZvckh5cGVydHknKSB7XG4gICAgICAgIGxldCBvcmlnaW4gPSBtc2cuYm9keS5wYXJhbXMub3JpZ2luO1xuICAgICAgICBsZXQgaWRwID0gbXNnLmJvZHkucGFyYW1zLmlkcDtcbiAgICAgICAgbGV0IGlkSGludCA9IG1zZy5ib2R5LnBhcmFtcy5pZEhpbnQ7XG4gICAgICAgIF90aGlzLnNlbGVjdElkZW50aXR5Rm9ySHlwZXJ0eShvcmlnaW4sIGlkcCwgaWRIaW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSovXG5cbiAgICAgIC8vIGlmIHRoZSBmdW5jdGlvbiByZXF1ZXN0ZWQgaXMgbm90IGEgcHJvbWlzZVxuICAgICAgbGV0IHZhbHVlID0ge3R5cGU6ICdleGVjdXRlJywgdmFsdWU6IHJldHVybmVkVmFsdWUsIGNvZGU6IDIwMH07XG4gICAgICBsZXQgcmVwbHlNc2cgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHZhbHVlfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZWplY3QoJ09uIGFkZEdVSUxpc3RlbmVycyBmcm9tIGlmIHN0b3JlSWRlbnRpdHkgbWV0aG9kIHBvc3RNZXNzYWdlIGVycm9yOiAnICsgZXJyKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgZGVwbG95R1VJKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuZ3VpRGVwbG95ZWQgPSB0cnVlO1xuICB9XG5cbiAgLy8qKioqKioqKioqKioqKioqKioqIFBSSVZBVEUgTUVUSE9EUyAqKioqKioqKioqKioqKioqKioqXG4gIC8qKlxuICAgKiBHZXRWYWxpZFRva2VuIGlzIGZvciBub24gbGVnYWN5IGh5cGVydGllcyBhbmQgdmVyaWZpZXMgaWYgdGhlIFRva2VuIGlzIHN0aWxsIHZhbGlkXG4gICAqIGlmIHRoZSB0b2tlbiBpcyBpbnZhbGlkIGl0IHJlcXVlc3RzIGEgbmV3IHRva2VuXG4gICAqIEBwYXJhbSAge1N0cmluZ30gaHlwZXJ0eVVSTCBoeXBlcnR5VVJMXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICBfZ2V0VmFsaWRUb2tlbihoeXBlcnR5VVJMKSB7XG4gIC8vICBjb25zb2xlLmluZm8oJ19nZXRWYWxpZFRva2VuOmh5cGVydHlVUkwnLCBoeXBlcnR5VVJMKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBfdGhpcy5nZXRJZFRva2VuKGh5cGVydHlVUkwpLnRoZW4oZnVuY3Rpb24oaWRlbnRpdHkpIHtcbiAgICAgICAgLy8gICAgICAgIGxvZy5sb2coJ1tJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRWYWxpZFRva2VuXSBUb2tlbicsIGlkZW50aXR5KTtcbiAgICAgICAgbGV0IHRpbWVOb3cgPSBfdGhpcy5fc2Vjb25kc1NpbmNlRXBvY2goKTtcbiAgICAgICAgbGV0IGNvbXBsZXRlSWQgPSBfdGhpcy5nZXRJZGVudGl0eShpZGVudGl0eS51c2VyUHJvZmlsZS51c2VyVVJMKTtcbiAgICAgICAgbGV0IGV4cGlyYXRpb25EYXRlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChjb21wbGV0ZUlkLmhhc093blByb3BlcnR5KCdpbmZvJykpIHtcbiAgICAgICAgICBpZiAoY29tcGxldGVJZC5pbmZvLmhhc093blByb3BlcnR5KCdleHBpcmVzJykpIHtcbiAgICAgICAgICAgIGV4cGlyYXRpb25EYXRlID0gY29tcGxldGVJZC5pbmZvLmV4cGlyZXM7XG4gICAgICAgICAgfSBlbHNlIGlmIChjb21wbGV0ZUlkLmluZm8uaGFzT3duUHJvcGVydHkoJ3Rva2VuSURKU09OJykpIHtcbiAgICAgICAgICAgIGV4cGlyYXRpb25EYXRlID0gY29tcGxldGVJZC5pbmZvLnRva2VuSURKU09OLmV4cDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdGhyb3cgJ1RoZSBJRCBUb2tlbiBkb2VzIG5vdCBoYXZlIGFuIGV4cGlyYXRpb24gdGltZSc7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ1RoZSBJRCBUb2tlbiBkb2VzIG5vdCBoYXZlIGFuIGV4cGlyYXRpb24gdGltZScpO1xuICAgICAgICAgICAgcmVzb2x2ZShpZGVudGl0eSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGNvbXBsZXRlSWQuaGFzT3duUHJvcGVydHkoJ2luZm9Ub2tlbicpICYmIGNvbXBsZXRlSWQuaW5mb1Rva2VuLmhhc093blByb3BlcnR5KCdleHAnKSkge1xuICAgICAgICAgIGV4cGlyYXRpb25EYXRlID0gY29tcGxldGVJZC5pbmZvVG9rZW4uZXhwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHRocm93ICdUaGUgSUQgVG9rZW4gZG9lcyBub3QgaGF2ZSBhbiBleHBpcmF0aW9uIHRpbWUnO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnVGhlIElEIFRva2VuIGRvZXMgbm90IGhhdmUgYW4gZXhwaXJhdGlvbiB0aW1lJyk7XG4gICAgICAgICAgcmVzb2x2ZShpZGVudGl0eSk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2cubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VmFsaWRUb2tlbl0gVG9rZW4gZXhwaXJlcyBpbicsIGV4cGlyYXRpb25EYXRlKTtcbiAgICAgICAgbG9nLmxvZygnW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFZhbGlkVG9rZW5dIHRpbWUgbm93OicsIHRpbWVOb3cpO1xuXG4gICAgICAgIGlmICh0aW1lTm93ID49IGV4cGlyYXRpb25EYXRlKSB7XG4gICAgICAgICAgaWYgKGlkZW50aXR5LmlkcCA9PT0gJ2dvb2dsZS5jb20nKSB7XG4gICAgICAgICAgICBfdGhpcy5zZW5kUmVmcmVzaE1lc3NhZ2UoaWRlbnRpdHkpLnRoZW4oKG5ld0lkZW50aXR5KSA9PiB7XG4gICAgICAgICAgICAgIF90aGlzLmRlbGV0ZUlkZW50aXR5KGNvbXBsZXRlSWQuaWRlbnRpdHkpO1xuICAgICAgICAgICAgICBfdGhpcy5zdG9yZUlkZW50aXR5KG5ld0lkZW50aXR5LmJvZHkucGFyYW1zLmlkZW50aXR5LCBuZXdJZGVudGl0eS5ib2R5LnBhcmFtcy5pZGVudGl0eS5rZXlQYWlyKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBlcnJvciBvbiBnZXRUb2tlbicsIGVycik7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHsgLy8gbWljcm9zb2Z0LmNvbVxuICAgICAgICAgICAgX3RoaXMuZGVsZXRlSWRlbnRpdHkoY29tcGxldGVJZC5pZGVudGl0eSk7XG5cbiAgICAgICAgICAgIC8vIGdlbmVyYXRlIG5ldyBpZFRva2VuXG4gICAgICAgICAgICBfdGhpcy5jYWxsR2VuZXJhdGVNZXRob2RzKGlkZW50aXR5LmlkcCkudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4geyByZWplY3QoJ09uIGFkZEdVSUxpc3RlbmVycyBmcm9tIGlmIHN0b3JlSWRlbnRpdHkgbWV0aG9kIHBvc3RNZXNzYWdlIGVycm9yOiAnICsgZXJyKTsgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoaWRlbnRpdHkpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIGVycm9yIG9uIGdldFRva2VuJywgZXJyb3IpO1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiByZXR1cm5zIHRoZSByZXBvcnRlciBhc3NvY2lhdGVkIHRvIHRoZSBkYXRhT2JqZWN0IFVSTFxuICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgZGF0YU9iamVjdFVSTCAgICAgICAgIGRhdGFPYmplY3QgdXJsXG4gICogQHJldHVybiAgIHtTdHJpbmd9ICByZXBvcnRlciAgICAgICAgICAgICAgZGF0YU9iamVjdCB1cmwgcmVwb3J0ZXJcbiAgKi9cbiAgX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdChkYXRhT2JqZWN0VVJMKSB7XG4gICAgY29uc29sZS5pbmZvKCdfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0OmRhdGFPYmplY3RVUkwnLCBkYXRhT2JqZWN0VVJMKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBsZXQgc3BsaXRlZFVSTCA9IGRpdmlkZVVSTChkYXRhT2JqZWN0VVJMKTtcbiAgICAgIGxldCBkb21haW4gPSBzcGxpdGVkVVJMLmRvbWFpbjtcbiAgICAgIGxldCBmaW5hbFVSTCA9IF90aGlzLl9wYXJzZU1lc3NhZ2VVUkwoZGF0YU9iamVjdFVSTCk7XG5cbiAgICAgIC8vIGNoZWNrIGlmIGlzIHRoZSBjcmVhdG9yIG9mIHRoZSBoeXBlcnR5XG4gICAgICBsZXQgcmVwb3J0ZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMoZmluYWxVUkwpO1xuICAgICAgY29uc29sZS5pbmZvKCdfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0OnJlcG9ydGVyVVJMJywgcmVwb3J0ZXJVUkwpO1xuXG4gICAgICBpZiAocmVwb3J0ZXJVUkwpIHtcbiAgICAgICAgcmVzb2x2ZShyZXBvcnRlclVSTCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhbHJlYWR5IGFuIGFzc29jaWF0aW9uIGZyb20gYW4gaHlwZXJ0eVVSTCB0byB0aGUgZGF0YU9iamVjdFxuICAgICAgICBsZXQgc3RvcmVkUmVwb3J0ZXJVUkwgPSBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5W2ZpbmFsVVJMXTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0OnN0b3JlZFJlcG9ydGVyVVJMJywgc3RvcmVkUmVwb3J0ZXJVUkwpO1xuXG4gICAgICAgIGlmIChzdG9yZWRSZXBvcnRlclVSTCkge1xuICAgICAgICAgIHJlc29sdmUoc3RvcmVkUmVwb3J0ZXJVUkwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFueSBoeXBlcnR5IHRoYXQgc3Vic2NyaWJlZCB0aGUgZGF0YU9iamVjdFVSTFxuICAgICAgICAgIGxldCBzdWJzY3JpYmVySHlwZXJ0eSA9IF90aGlzLnJlZ2lzdHJ5LmdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eShkYXRhT2JqZWN0VVJMKTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ19nZXRIeXBlcnR5RnJvbURhdGFPYmplY3Q6c3Vic2NyaWJlckh5cGVydHknLCBzdWJzY3JpYmVySHlwZXJ0eSk7XG5cbiAgICAgICAgICBpZiAoc3Vic2NyaWJlckh5cGVydHkpIHtcbiAgICAgICAgICAgIHJlc29sdmUoc3Vic2NyaWJlckh5cGVydHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBzZWFyY2ggaW4gZG9tYWluIHJlZ2lzdHJ5IGZvciB0aGUgaHlwZXJ0eSBhc3NvY2lhdGVkIHRvIHRoZSBkYXRhT2JqZWN0XG4gICAgICAgICAgICAvLyBzZWFyY2ggaW4gY2FzZSBpcyBhIHN1YnNjcmliZXIgd2hvIHdhbnRzIHRvIGtub3cgdGhlIHJlcG9ydGVyXG4gICAgICAgICAgICBfdGhpcy5fY29yZURpc2NvdmVyeS5kaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwoZmluYWxVUkwsIGRvbWFpbikudGhlbihkYXRhT2JqZWN0ID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0OmRhdGFPYmplY3QnLCBkYXRhT2JqZWN0KTtcbiAgICAgICAgICAgICAgX3RoaXMuZGF0YU9iamVjdHNJZGVudGl0eVtmaW5hbFVSTF0gPSBkYXRhT2JqZWN0LnJlcG9ydGVyO1xuICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ19nZXRIeXBlcnR5RnJvbURhdGFPYmplY3Q6ZGF0YU9iamVjdC5yZXBvcnRlcicsIGRhdGFPYmplY3QucmVwb3J0ZXIpO1xuICAgICAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QucmVwb3J0ZXIpO1xuICAgICAgICAgICAgfSwgZXJyID0+IHtcbiAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5KG1lc3NhZ2UsIGNoYXRLZXlzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgbGV0IHNlc3Npb25LZXlCdW5kbGUgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbY2hhdEtleXMuZGF0YU9iamVjdFVSTF07XG4gICAgICBsZXQgcmVwb3J0ZXJTZXNzaW9uS2V5TXNnO1xuICAgICAgbGV0IHZhbHVlVG9FbmNyeXB0O1xuICAgICAgbGV0IHNlc3Npb25LZXk7XG4gICAgICBsZXQgaXY7XG4gICAgICBsZXQgdmFsdWUgPSB7fTtcblxuICAgICAgLy9pZiB0aGVyZSBpcyBub3QgeWV0IGEgc2Vzc2lvbiBLZXksIGdlbmVyYXRlcyBhIG5ldyBvbmVcbiAgICAgIGlmICghc2Vzc2lvbktleUJ1bmRsZSkge1xuICAgICAgICBzZXNzaW9uS2V5ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7XG4gICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tjaGF0S2V5cy5kYXRhT2JqZWN0VVJMXSA9IHtzZXNzaW9uS2V5OiBzZXNzaW9uS2V5LCBpc1RvRW5jcnlwdDogdHJ1ZX07XG5cbiAgICAgICAgbGV0IGRhdGFPYmplY3RTZXNzaW9uS2V5c0Nsb25lID0gX2NoYXRrZXlzVG9TdHJpbmdDbG9uZXIoY2hhdEtleXMuZGF0YU9iamVjdFVSTCwgX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzKTtcblxuICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ2RhdGFPYmplY3RTZXNzaW9uS2V5cycsIDAsIGRhdGFPYmplY3RTZXNzaW9uS2V5c0Nsb25lKS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIHJlamVjdCgnT24gX3NlbmRSZXBvcnRlclNlc3Npb25LZXkgZnJvbSBtZXRob2Qgc3RvcmFnZU1hbmFnZXIuc2V0KGRhdGFPYmplY3RTZXNzaW9uS2V5cy4uLikgZXJyb3I6ICcgKyBlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2Vzc2lvbktleSA9IHNlc3Npb25LZXlCdW5kbGUuc2Vzc2lvbktleTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVUb0VuY3J5cHQgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKHt2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShzZXNzaW9uS2V5KSwgZGF0YU9iamVjdFVSTDogY2hhdEtleXMuZGF0YU9iamVjdFVSTH0pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoJ09uIF9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5IGZyb20gbWV0aG9kIHN0b3JhZ2VNYW5hZ2VyLnNldCBlcnJvciB2YWx1ZVRvRW5jcnlwdDogJyArIGVycik7XG4gICAgICB9XG5cbiAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcbiAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7XG4gICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgdmFsdWVUb0VuY3J5cHQsIGl2KS50aGVuKGVuY3J5cHRlZFZhbHVlID0+IHtcblxuICAgICAgICByZXBvcnRlclNlc3Npb25LZXlNc2cgPSB7XG4gICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXG4gICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVwb3J0ZXJTZXNzaW9uS2V5JyxcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVwb3J0ZXJTZXNzaW9uS2V5TXNnLCB2YWx1ZVRvRW5jcnlwdCArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XG5cbiAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKTtcbiAgICAgIH0pLnRoZW4oaGFzaGVkTWVzc2FnZSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZVdpdGhIYXNoID0gX3RoaXMuY3J5cHRvLmVuY29kZSh7dmFsdWU6IHJlcG9ydGVyU2Vzc2lvbktleU1zZy5ib2R5LnZhbHVlLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2hlZE1lc3NhZ2UpLCBpdjogdmFsdWUuaXZ9KTtcblxuICAgICAgICByZXBvcnRlclNlc3Npb25LZXlNc2cuYm9keS52YWx1ZSA9IHZhbHVlV2l0aEhhc2g7XG5cbiAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLCBjaGF0S2V5czogY2hhdEtleXN9KTtcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHJlamVjdCgnT24gX3NlbmRSZXBvcnRlclNlc3Npb25LZXkgZnJvbSBjaGFpbmVkIHByb21pc2VzIGVuY3J5cHRBRVMgZXJyb3I6ICcgKyBlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0aGF0IHJlc29sdmUgYW5kIGNyZWF0ZSB0aGUgZG9tYWluVVJMIGluIGNhc2UgaXQgaXMgcHJvdmlkZWQgb25lLiBJZiBub3QsIHJlc29sdmUgdGhlIGRlZmF1bHQgZG9tYWluVVJMXG4gICogQHBhcmFtIHtTdHJpbmd9ICAgICBpZHBEb21haW4gICAgIGlkcERvbWFpbiAoT3B0aW9uYWwpXG4gICovXG4gIF9yZXNvbHZlRG9tYWluKGlkcERvbWFpbikge1xuICAgIGlmICghaWRwRG9tYWluKSB7XG4gICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdkb21haW4taWRwOi8vJyArIGlkcERvbWFpbjtcbiAgICB9XG4gIH1cblxuICBfZG9IYW5kU2hha2VQaGFzZShtZXNzYWdlLCBjaGF0S2V5cykge1xuICAvLyBsb2coJ19kb0hhbmRTaGFrZVBoYXNlOmRhdGFPYmplY3QnLCBtZXNzYWdlKTtcbiAgLy9cdGxvZygnX2RvSGFuZFNoYWtlUGhhc2U6Y2hhdEtleXMnLCBjaGF0S2V5cyk7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBsZXQgaGFuZHNoYWtlVHlwZSA9IG1lc3NhZ2UuYm9keS5oYW5kc2hha2VQaGFzZTtcbiAgICAgIGxldCBpdjtcbiAgICAgIGxldCBoYXNoO1xuICAgICAgbGV0IHZhbHVlID0ge307XG4gICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlO1xuXG4gICAgICBjb25zb2xlLmluZm8oJ2hhbmRzaGFrZSBwaGFzZTogJywgaGFuZHNoYWtlVHlwZSk7XG5cbiAgICAgIHN3aXRjaCAoaGFuZHNoYWtlVHlwZSkge1xuXG4gICAgICAgIGNhc2UgJ3N0YXJ0SGFuZFNoYWtlJzoge1xuICAgICAgICAgIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpO1xuICAgICAgICAgIGxldCBzdGFydEhhbmRTaGFrZU1zZyA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxuICAgICAgICAgICAgdG86IG1lc3NhZ2UudG8sXG4gICAgICAgICAgICBmcm9tOiBtZXNzYWdlLmZyb20sXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVySGVsbG8nLFxuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2goc3RhcnRIYW5kU2hha2VNc2csIHVuZGVmaW5lZCwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xuXG4gICAgICAgICAgLy8gY2hlY2sgaWYgd2FzIHRoZSBlbmNyeXB0IGZ1bmN0aW9uIG9yIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb24gdGhhdCByZXF1ZXN0IHRoZVxuICAgICAgICAgIC8vIHN0YXJ0IG9mIHRoZSBoYW5kU2hha2VQaGFzZS5cblxuICAgICAgICAgIGlmIChjaGF0S2V5cy5pbml0aWFsTWVzc2FnZSkge1xuICAgICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogc3RhcnRIYW5kU2hha2VNc2csIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLmZyb20gKyAnPC0+JyArIG1lc3NhZ2UudG9dID0gY2hhdEtleXM7XG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShzdGFydEhhbmRTaGFrZU1zZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuICAgICAgICBjYXNlICdzZW5kZXJIZWxsbyc6IHtcblxuICAgICAgICAgIGxvZy5sb2coJ3NlbmRlckhlbGxvJyk7XG4gICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UpO1xuICAgICAgICAgIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSA9IF90aGlzLmNyeXB0by5kZWNvZGVUb1VpbnQ4QXJyYXkobWVzc2FnZS5ib2R5LnZhbHVlKTtcbiAgICAgICAgICBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7XG5cbiAgICAgICAgICBsZXQgc2VuZGVySGVsbG9Nc2cgPSB7XG4gICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXG4gICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3JlY2VpdmVySGVsbG8nLFxuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShjaGF0S2V5cy5rZXlzLnRvUmFuZG9tKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5yZWNlaXZlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2goc2VuZGVySGVsbG9Nc2csIHVuZGVmaW5lZCwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xuICAgICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IHNlbmRlckhlbGxvTXNnLCBjaGF0S2V5czogY2hhdEtleXN9KTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3JlY2VpdmVySGVsbG8nOiB7XG5cbiAgICAgICAgICBsb2cubG9nKCdyZWNlaXZlckhlbGxvJyk7XG4gICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5yZWNlaXZlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSk7XG5cbiAgICAgICAgICBfdGhpcy52YWxpZGF0ZUFzc2VydGlvbihtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uLCB1bmRlZmluZWQsIG1lc3NhZ2UuYm9keS5pZGVudGl0eS5pZHApLnRoZW4oKHZhbHVlKSA9PiB7XG5cbiAgICAgICAgICAgIC8vVE9ETyByZW1vdmUgbGF0ZXIgdGhpcyB2ZXJpZmljYXRpb24gYXMgc29vbiBhcyBhbGwgdGhlIElkUCBwcm94eSBhcmUgdXBkYXRlZCBpbiB0aGUgZXhhbXBsZVxuICAgICAgICAgICAgbGV0IGVuY29kZWRwdWJsaWNLZXkgPSAodHlwZW9mIHZhbHVlLmNvbnRlbnRzID09PSAnc3RyaW5nJykgPyB2YWx1ZS5jb250ZW50cyA6IHZhbHVlLmNvbnRlbnRzLm5vbmNlO1xuXG4gICAgICAgICAgICBsZXQgcmVjZWl2ZXJQdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KGVuY29kZWRwdWJsaWNLZXkpO1xuICAgICAgICAgICAgbGV0IHByZW1hc3RlclNlY3JldCA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVBNUygpO1xuICAgICAgICAgICAgbGV0IHRvUmFuZG9tID0gbWVzc2FnZS5ib2R5LnZhbHVlO1xuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLmFzc2VydGlvbiA9IG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb247XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5ID0gcmVjZWl2ZXJQdWJsaWNLZXk7XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8udXNlcklEICAgID0gdmFsdWUuY29udGVudHMuZW1haWw7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICA9IF90aGlzLmNyeXB0by5kZWNvZGVUb1VpbnQ4QXJyYXkodG9SYW5kb20pO1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkgPSBwcmVtYXN0ZXJTZWNyZXQ7XG5cbiAgICAgICAgICAgIGxldCBjb25jYXRLZXkgPSBfdGhpcy5jcnlwdG8uY29uY2F0UE1Td2l0aFJhbmRvbXMocHJlbWFzdGVyU2VjcmV0LCBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tLCBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlTWFzdGVyU2VjcmV0KGNvbmNhdEtleSwgJ21lc3NhZ2VIaXN0b3JpYycgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcblxuICAgICAgICAgICAgLy9nZW5lcmF0ZSB0aGUgbWFzdGVyIGtleVxuICAgICAgICAgIH0pLnRoZW4oKG1hc3RlcktleSkgPT4ge1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5tYXN0ZXJLZXkgPSBtYXN0ZXJLZXk7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVLZXlzKG1hc3RlcktleSwgJ2tleSBleHBhbnNpb24nICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XG5cbiAgICAgICAgICAgIC8vZ2VuZXJhdGUgdGhlIHN5bW1ldHJpYyBhbmQgaGFzaCBrZXlzXG4gICAgICAgICAgfSkudGhlbigoa2V5cykgPT4ge1xuXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzBdKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzJdKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1szXSk7XG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XG4gICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpO1xuXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVN0cnVjdHVyZSA9IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXG4gICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXG4gICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckNlcnRpZmljYXRlJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBoYXNoIHRoZSB2YWx1ZSBhbmQgdGhlIGl2XG4gICAgICAgICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlU3RydWN0dXJlLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSk7XG4gICAgICAgICAgfSkudGhlbigoaGFzaCkgPT4ge1xuICAgICAgICAgICAgdmFsdWUuaGFzaCA9IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCk7XG5cbiAgICAgICAgICAgIC8vZW5jcnlwdCB0aGUgZGF0YVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2snLCBpdik7XG4gICAgICAgICAgfSkudGhlbigoZW5jcnlwdGVkRGF0YSkgPT4ge1xuICAgICAgICAgICAgdmFsdWUuc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWREYXRhKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0UlNBKGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXksIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5KTtcblxuICAgICAgICAgIH0pLnRoZW4oKGVuY3J5cHRlZFZhbHVlKSA9PiB7XG5cbiAgICAgICAgICAgIHZhbHVlLmFzc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGxldCBtZXNzYWdlU3RydWN0dXJlID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZVN0cnVjdHVyZSwgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXksIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5zaWduUlNBKGNoYXRLZXlzLmh5cGVydHlGcm9tLnByaXZhdGVLZXksIF90aGlzLmNyeXB0by5lbmNvZGUoY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeSkgKyBfdGhpcy5jcnlwdG8uZW5jb2RlKG1lc3NhZ2VUb0hhc2gpKTtcblxuICAgICAgICAgIH0pLnRoZW4oc2lnbmF0dXJlID0+IHtcblxuICAgICAgICAgICAgdmFsdWUuc2lnbmF0dXJlID0gX3RoaXMuY3J5cHRvLmVuY29kZShzaWduYXR1cmUpO1xuXG4gICAgICAgICAgICBsZXQgcmVjZWl2ZXJIZWxsb01zZyA9IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXG4gICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXG4gICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckNlcnRpZmljYXRlJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZSh2YWx1ZSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVyQ2VydGlmaWNhdGUgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckhlbGxvTXNnLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogcmVjZWl2ZXJIZWxsb01zZywgY2hhdEtleXM6IGNoYXRLZXlzfSk7XG5cbiAgICAgICAgICB9LCBlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3NlbmRlckNlcnRpZmljYXRlJzoge1xuXG4gICAgICAgICAgbG9nLmxvZygnc2VuZGVyQ2VydGlmaWNhdGUnKTtcbiAgICAgICAgICBsZXQgcmVjZWl2ZWRWYWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUobWVzc2FnZS5ib2R5LnZhbHVlKTtcblxuICAgICAgICAgIF90aGlzLnZhbGlkYXRlQXNzZXJ0aW9uKG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb24sIHVuZGVmaW5lZCwgbWVzc2FnZS5ib2R5LmlkZW50aXR5LmlkcCkudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGxldCBlbmNyeXB0ZWRQTVMgPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHJlY2VpdmVkVmFsdWUuYXNzeW1ldHJpY0VuY3J5cHRpb24pO1xuXG4gICAgICAgICAgICAvL1RPRE8gcmVtb3ZlIGxhdGVyIHRoaXMgdmVyaWZpY2F0aW9uIGFzIHNvb24gYXMgYWxsIHRoZSBJZFAgcHJveHkgYXJlIHVwZGF0ZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgICAgICAgIGxldCBlbmNvZGVkcHVibGljS2V5ID0gKHR5cGVvZiB2YWx1ZS5jb250ZW50cyA9PT0gJ3N0cmluZycpID8gdmFsdWUuY29udGVudHMgOiB2YWx1ZS5jb250ZW50cy5ub25jZTtcblxuICAgICAgICAgICAgbGV0IHNlbmRlclB1YmxpY0tleSA9IF90aGlzLmNyeXB0by5kZWNvZGVUb1VpbnQ4QXJyYXkoZW5jb2RlZHB1YmxpY0tleSk7XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8uYXNzZXJ0aW9uID0gbWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbjtcbiAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXkgPSBzZW5kZXJQdWJsaWNLZXk7XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8udXNlcklEICAgID0gdmFsdWUuY29udGVudHMuZW1haWw7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZGVjcnlwdFJTQShjaGF0S2V5cy5oeXBlcnR5RnJvbS5wcml2YXRlS2V5LCBlbmNyeXB0ZWRQTVMpO1xuXG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAvLyBsb2cubG9nKGVycm9yKTtcbiAgICAgICAgICAgIHJlamVjdCgnRXJyb3IgZHVyaW5nIGF1dGhlbnRpY2F0aW9uIG9mIGlkZW50aXR5Jyk7XG5cbiAgICAgICAgICAgIC8vb2J0YWluIHRoZSBQcmVtYXN0ZXJLZXkgdXNpbmcgdGhlIHByaXZhdGUga2V5XG4gICAgICAgICAgfSkudGhlbihwbXMgPT4ge1xuXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSA9IG5ldyBVaW50OEFycmF5KHBtcyk7XG5cbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHJlY2VpdmVkVmFsdWUuc2lnbmF0dXJlKTtcblxuICAgICAgICAgICAgbGV0IHJlY2VpdmVkbXNnVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkpO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeVJTQShjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5LCBfdGhpcy5jcnlwdG8uZW5jb2RlKGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgX3RoaXMuY3J5cHRvLmVuY29kZShyZWNlaXZlZG1zZ1RvSGFzaCksIHNpZ25hdHVyZSk7XG5cbiAgICAgICAgICAgIC8vIHZhbGlkYXRlcyB0aGUgc2lnbmF0dXJlIHJlY2VpdmVkXG4gICAgICAgICAgfSkudGhlbihzaWduVmFsaWRhdGlvblJlc3VsdCA9PiB7XG5cbiAgICAgICAgICAgIC8vbG9nLmxvZygnU2VuZGVyQ2VydGlmaWNhdGUgLSBzaWduYXR1cmUgdmFsaWRhdGlvbiByZXN1bHQgJywgc2lnblZhbGlkYXRpb25SZXN1bHQpO1xuICAgICAgICAgICAgbGV0IGNvbmNhdEtleSA9IF90aGlzLmNyeXB0by5jb25jYXRQTVN3aXRoUmFuZG9tcyhjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSwgY2hhdEtleXMua2V5cy50b1JhbmRvbSwgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZU1hc3RlclNlY3JldChjb25jYXRLZXksICdtZXNzYWdlSGlzdG9yaWMnICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XG5cbiAgICAgICAgICAgIC8vIGdlbmVyYXRlcyB0aGUgbWFzdGVyIGtleXMgZnJvbSB0aGUgUHJlbWFzdGVyIGtleSBhbmQgdGhlIHJhbmRvbXNcbiAgICAgICAgICB9KS50aGVuKG1hc3RlcktleSA9PiB7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLm1hc3RlcktleSA9IG1hc3RlcktleTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZUtleXMobWFzdGVyS2V5LCAna2V5IGV4cGFuc2lvbicgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcblxuICAgICAgICAgICAgLy8gZ2VuZXJhdGVzIHRoZSBzeW1tZXRyaWMga2V5cyB0byBiZSB1c2VkIGluIHRoZSBzeW1tZXRyaWMgZW5jcnlwdGlvblxuICAgICAgICAgIH0pLnRoZW4oa2V5cyA9PiB7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMF0pO1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMl0pO1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1szXSk7XG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGVUb1VpbnQ4QXJyYXkocmVjZWl2ZWRWYWx1ZS5pdik7XG4gICAgICAgICAgICBsZXQgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGVUb1VpbnQ4QXJyYXkocmVjZWl2ZWRWYWx1ZS5zeW1ldHJpY0VuY3J5cHRpb24pO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBkYXRhLCBpdik7XG5cbiAgICAgICAgICB9KS50aGVuKGRlY3J5cHRlZERhdGEgPT4ge1xuICAgICAgICAgICAgLy8gbG9nLmxvZygnZGVjcnlwdGVkRGF0YScsIGRlY3J5cHRlZERhdGEpO1xuXG4gICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckNlcnRpZmljYXRlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcblxuICAgICAgICAgICAgbGV0IGhhc2hSZWNlaXZlZCA9IF90aGlzLmNyeXB0by5kZWNvZGVUb1VpbnQ4QXJyYXkocmVjZWl2ZWRWYWx1ZS5oYXNoKTtcblxuICAgICAgICAgICAgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoUmVjZWl2ZWQpO1xuXG4gICAgICAgICAgfSkudGhlbih2ZXJpZmllZEhhc2ggID0+IHtcblxuICAgICAgICAgICAgLy8gbG9nLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uICcsIHZlcmlmaWVkSGFzaCk7XG4gICAgICAgICAgICBsZXQgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxuICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxuICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcbiAgICAgICAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7XG5cbiAgICAgICAgICAgIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCAnb2shJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XG5cbiAgICAgICAgICAgIC8vbG9nLmxvZygnVElBR086IGRvSGFuZFNoYWtlUGhhc2UgdmVyaWZpZWRIYXNoJyk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UpO1xuICAgICAgICAgIH0pLnRoZW4oaGFzaCA9PiB7XG5cbiAgICAgICAgICAgIHZhbHVlLmhhc2ggPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2gpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2shJywgaXYpO1xuXG4gICAgICAgICAgfSkudGhlbihlbmNyeXB0ZWRWYWx1ZSA9PiB7XG4gICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpO1xuICAgICAgICAgICAgbGV0IHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKHZhbHVlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UsICdvayEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UsIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xuICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICByZWplY3QoJ09uIF9kb0hhbmRTaGFrZVBoYXNlIGZyb20gc2VuZGVyQ2VydGlmaWNhdGUgZXJyb3I6ICcgKyBlcnIpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnOiB7XG5cbiAgICAgICAgICBjaGF0S2V5cy5hdXRoZW50aWNhdGVkID0gdHJ1ZTtcblxuICAgICAgICAgIHZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZShtZXNzYWdlLmJvZHkudmFsdWUpO1xuXG4gICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHZhbHVlLml2KTtcbiAgICAgICAgICBsZXQgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGVUb1VpbnQ4QXJyYXkodmFsdWUudmFsdWUpO1xuICAgICAgICAgIGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHZhbHVlLmhhc2gpO1xuXG4gICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBkYXRhLCBpdikudGhlbihkZWNyeXB0ZWREYXRhID0+IHtcbiAgICAgICAgICAgIC8vIGxvZy5sb2coJ2RlY3J5cHRlZERhdGEnLCBkZWNyeXB0ZWREYXRhKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWREYXRhICsgaXYpO1xuXG4gICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcbiAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKHJlc3VsdCA9PiB7XG5cbiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgd2FzIGFuIGluaXRpYWwgbWVzc2FnZSB0aGF0IHdhcyBibG9ja2VkIGFuZCBzZW5kIGl0XG4gICAgICAgICAgICAgIGlmIChjaGF0S2V5cy5pbml0aWFsTWVzc2FnZSkge1xuXG4gICAgICAgICAgICAgICAgbGV0IGluaXRpYWxNZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgICAgdHlwZTogJ2NyZWF0ZScsXG4gICAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxuICAgICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlLmJvZHkudmFsdWVcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogaW5pdGlhbE1lc3NhZ2UsIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xuXG4gICAgICAgICAgICAgICAgLy9zZW5kcyB0aGUgc2Vzc2lvbktleSB0byB0aGUgc3Vic2NyaWJlciBoeXBlcnR5XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3NlbmRSZXBvcnRlclNlc3Npb25LZXkobWVzc2FnZSwgY2hhdEtleXMpLnRoZW4odmFsdWUgPT4ge1xuXG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgcmVqZWN0KCdPbiBfZG9IYW5kU2hha2VQaGFzZSBmcm9tIHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlIGVycm9yOiAnICsgZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ3JlcG9ydGVyU2Vzc2lvbktleSc6IHtcblxuICAgICAgICAgIGxvZy5sb2coJ3JlcG9ydGVyU2Vzc2lvbktleScpO1xuXG4gICAgICAgICAgbGV0IHZhbHVlSVZhbmRIYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZShtZXNzYWdlLmJvZHkudmFsdWUpO1xuICAgICAgICAgIGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHZhbHVlSVZhbmRIYXNoLmhhc2gpO1xuICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZVRvVWludDhBcnJheSh2YWx1ZUlWYW5kSGFzaC5pdik7XG4gICAgICAgICAgbGV0IGVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZVRvVWludDhBcnJheSh2YWx1ZUlWYW5kSGFzaC52YWx1ZSk7XG4gICAgICAgICAgbGV0IHBhcnNlZFZhbHVlO1xuICAgICAgICAgIGxldCBzZXNzaW9uS2V5O1xuICAgICAgICAgIGxldCBkYXRhT2JqZWN0VVJMO1xuICAgICAgICAgIGxldCByZWNlaXZlckFja25vd2xlZGdlTXNnO1xuXG4gICAgICAgICAgLy9sb2cubG9nKCdbSWRlbnRpdHlNb2R1bGUgcmVwb3J0ZXJTZXNzaW9uS2V5XSAtIGRlY3J5cHRBRVM6ICcsIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KTtcblxuICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGRlY3J5cHRlZFZhbHVlID0+IHtcblxuICAgICAgICAgICAgcGFyc2VkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKGRlY3J5cHRlZFZhbHVlKTtcbiAgICAgICAgICAgIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHBhcnNlZFZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgIGRhdGFPYmplY3RVUkwgPSBwYXJzZWRWYWx1ZS5kYXRhT2JqZWN0VVJMO1xuXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVRvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZFZhbHVlICsgaXYpO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBtZXNzYWdlVG9IYXNoLCBoYXNoKTtcblxuICAgICAgICAgIH0pLnRoZW4oaGFzaFJlc3VsdCA9PiB7XG5cblxuICAgICAgICAgICAgLy8gbG9nLmxvZygnaGFzaCBzdWNjZXNzZnVsbHkgdmFsaWRhdGVkICcsIGhhc2hSZXN1bHQpO1xuXG4gICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gPSAge3Nlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlfTtcbiAgICAgICAgICAgIGxldCBkYXRhT2JqZWN0U2Vzc2lvbktleXNDbG9uZSA9IF9jaGF0a2V5c1RvU3RyaW5nQ2xvbmVyKGRhdGFPYmplY3RVUkwsIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5cylcbiAgICAgICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgnZGF0YU9iamVjdFNlc3Npb25LZXlzJywgMCwgZGF0YU9iamVjdFNlc3Npb25LZXlzQ2xvbmUpLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgIHJlamVjdCgnT24gX3NlbmRSZXBvcnRlclNlc3Npb25LZXkgZnJvbSBtZXRob2QgcmVwb3J0ZXJTZXNzaW9uS2V5IGVycm9yOiAnICsgZXJyKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XG4gICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvayEhJywgaXYpO1xuICAgICAgICAgIH0pLnRoZW4oZW5jcnlwdGVkVmFsdWUgPT4ge1xuXG4gICAgICAgICAgICByZWNlaXZlckFja25vd2xlZGdlTXNnID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJBY2tub3dsZWRnZSdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFsdWUudmFsdWUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJBY2tub3dsZWRnZU1zZywgJ29rISEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgbWVzc2FnZVRvSGFzaCk7XG4gICAgICAgICAgfSkudGhlbihoYXNoZWRNZXNzYWdlID0+IHtcbiAgICAgICAgICAgIGxldCBmaW5hbFZhbHVlID0gX3RoaXMuY3J5cHRvLmVuY29kZSh7dmFsdWU6IHZhbHVlLnZhbHVlLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2hlZE1lc3NhZ2UpLCBpdjogdmFsdWUuaXZ9KTtcblxuICAgICAgICAgICAgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZy5ib2R5LnZhbHVlID0gZmluYWxWYWx1ZTtcbiAgICAgICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IHJlY2VpdmVyQWNrbm93bGVkZ2VNc2csIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xuICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICByZWplY3QoJ09uIF9kb0hhbmRTaGFrZVBoYXNlIGZyb20gcmVwb3J0ZXJTZXNzaW9uS2V5IGVycm9yOiAnICsgZXJyKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2FzZSAncmVjZWl2ZXJBY2tub3dsZWRnZSc6IHtcblxuICAgICAgICAgIGxvZy5sb2coJ3JlY2VpdmVyQWNrbm93bGVkZ2UnKTtcblxuICAgICAgICAgIGxldCByZWNlaXZlZHZhbHVlSVZhbmRIYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZShtZXNzYWdlLmJvZHkudmFsdWUpO1xuICAgICAgICAgIGxldCByZWNlaXZlZEhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHJlY2VpdmVkdmFsdWVJVmFuZEhhc2guaGFzaCk7XG4gICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlVG9VaW50OEFycmF5KHJlY2VpdmVkdmFsdWVJVmFuZEhhc2guaXYpO1xuICAgICAgICAgIGxldCByZWNlaXZlZEVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZVRvVWludDhBcnJheShyZWNlaXZlZHZhbHVlSVZhbmRIYXNoLnZhbHVlKTtcblxuICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgcmVjZWl2ZWRFbmNyeXB0ZWRWYWx1ZSwgaXYpLnRoZW4oZGVjcnlwdGVkVmFsdWUgPT4ge1xuXG4gICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUgKyBpdik7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIHJlY2VpdmVkSGFzaCk7XG4gICAgICAgICAgfSkudGhlbihoYXNoUmVzdWx0ID0+IHtcbiAgICAgICAgICAgIC8vIGxvZy5sb2coJ2hhc2hSZXN1bHQgJywgaGFzaFJlc3VsdCk7XG5cbiAgICAgICAgICAgIGxldCBjYWxsYmFjayA9IGNoYXRLZXlzLmNhbGxiYWNrO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2soJ2hhbmRTaGFrZUVuZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSgnaGFuZFNoYWtlRW5kJyk7XG4gICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIHJlamVjdCgnT24gX2RvSGFuZFNoYWtlUGhhc2UgZnJvbSByZWNlaXZlckFja25vd2xlZGdlIGVycm9yOiAnICsgZXJyKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWplY3QobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBmaWx0ZXIgdGhlIG1lc3NhZ2VzIHRvIGhhc2gsIGJ5IHJlbW92aW5nIHNvbWUgZmllbGRzIG5vdCBnZW5lcmF0ZWQgYnkgdGhlIHJ1bnRpbWUgY29yZVxuICAqIEBwYXJhbSB7TWVzc2FnZX0gIG1lc3NhZ2UgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlXG4gICogQHBhcmFtIHtTdHJpbmd9ICBkZWNyeXB0ZWRWYWx1ZSAoT3B0aW9uYWwpICAgIHZhbHVlIGZyb20gYm9keS52YWx1ZSBpbiBjYXNlIGl0IG9yaWdpbmFsbHkgY29tZXMgZW5jcnlwdGVkXG4gICogQHBhcmFtIHtKU09OfSAgaWRlbnRpdHkoT3B0aW9uYWwpICAgIGFkZCB0aGUgaHlwZXJ0eSBpZGVudGl0eSBhc3NvY2lhdGVkIGluIGNhc2UgaXMgbm90IGFkZGVkIHRvIHRoZSBpbml0aWFsIG1lc3NhZ2VcbiAgKiBAcmV0dXJuIHtNZXNzYWdlfSAgbmV3IG1lc3NhZ2UgZmlsdGVyZWRcbiAgKi9cbiAgX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUsIGlkZW50aXR5KSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogbWVzc2FnZS50eXBlLFxuICAgICAgZnJvbTogbWVzc2FnZS5mcm9tLFxuICAgICAgdG86IG1lc3NhZ2UudG8sXG4gICAgICBib2R5OiB7XG4gICAgICAgIGlkZW50aXR5OiBpZGVudGl0eSB8fCBtZXNzYWdlLmJvZHkuaWRlbnRpdHksXG4gICAgICAgIHZhbHVlOiBkZWNyeXB0ZWRWYWx1ZSB8fCBtZXNzYWdlLmJvZHkudmFsdWUsXG4gICAgICAgIGhhbmRzaGFrZVBoYXNlOiBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2VcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICogZ2VuZXJhdGVzIHRoZSBpbml0aWFsIHN0cnVjdHVyZSBmb3IgdGhlIGtleXMgYmV0d2VlbiB0d28gdXNlcnNcbiAgKiBAcGFyYW0ge0pTT059ICAgIG1lc3NhZ2UgICAgICAgICAgICAgIGluaXRpYWwgbWVzc2FnZSB0aGF0IHRyaWdnZXJzIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb25cbiAgKiBAcGFyYW0ge1N0cmluZ30gIHVzZXJVUkwgICAgICAgICAgICAgIHVzZXJVUkxcbiAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlY2VpdmVyKE9wdGlvbmFsKSAgaW5kaWNhdGVzIGlmIGlzIHRoZSBzZW5kZXIgb3IgdGhlIHJlY2VpdmVyIHRoYXQgY3JlYXRlcyBhIG5ldyBjaGF0IGNyeXB0b1xuICAqIEByZXR1cm4ge0pTT059IG5ld0NoYXRDcnlwdG8gIG5ldyBKU09OIHN0cnVjdHVyZSBmb3IgdGhlIGNoYXQgY3J5cHRvXG4gICovXG4gIF9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwsIHJlY2VpdmVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIC8vY2hlY2sgd2hldGhlciBpcyB0aGUgc2VuZGVyIG9yIHRoZSByZWNlaXZlciB0byBjcmVhdGUgYSBuZXcgY2hhdENyeXB0b1xuICAgIC8vdG8gbWFudGFpbiBjb25zaXN0ZW5jeSBvbiB0aGUga2V5cyBpZiB0aGUgcmVjZWl2ZXIgY3JlYXRlIGEgbmV3IGNoYXRDcnlwdG8sXG4gICAgLy90aGVuIGludmVydCB0aGUgZmllbGRzXG4gICAgbGV0IGZyb20gPSAocmVjZWl2ZXIpID8gbWVzc2FnZS50byA6IG1lc3NhZ2UuZnJvbTtcbiAgICBsZXQgdG8gPSAocmVjZWl2ZXIpID8gbWVzc2FnZS5mcm9tIDogbWVzc2FnZS50bztcblxuICAgIGxldCB1c2VySW5mbyA9IF90aGlzLmdldElkZW50aXR5KHVzZXJVUkwpO1xuXG4gICAgbGV0IG5ld0NoYXRDcnlwdG8gPVxuICAgICAge1xuICAgICAgICBoeXBlcnR5RnJvbTpcbiAgICAgICAge1xuICAgICAgICAgIGh5cGVydHk6IGZyb20sXG4gICAgICAgICAgdXNlcklEOiB1c2VySW5mby5tZXNzYWdlSW5mby51c2VyUHJvZmlsZS51c2VybmFtZSxcbiAgICAgICAgICBwcml2YXRlS2V5OiB1c2VySW5mby5rZXlQYWlyLnByaXZhdGUsXG4gICAgICAgICAgcHVibGljS2V5OiB1c2VySW5mby5rZXlQYWlyLnB1YmxpYyxcbiAgICAgICAgICBhc3NlcnRpb246IHVzZXJJbmZvLmFzc2VydGlvbixcbiAgICAgICAgICBtZXNzYWdlSW5mbzogdXNlckluZm8ubWVzc2FnZUluZm9cbiAgICAgICAgfSxcbiAgICAgICAgaHlwZXJ0eVRvOlxuICAgICAgICB7XG4gICAgICAgICAgaHlwZXJ0eTogdG8sXG4gICAgICAgICAgdXNlcklEOiB1bmRlZmluZWQsXG4gICAgICAgICAgcHVibGljS2V5OiB1bmRlZmluZWQsXG4gICAgICAgICAgYXNzZXJ0aW9uOiB1bmRlZmluZWRcbiAgICAgICAgfSxcbiAgICAgICAga2V5czpcbiAgICAgICAge1xuICAgICAgICAgIGh5cGVydHlUb1Nlc3Npb25LZXk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBoeXBlcnR5RnJvbVNlc3Npb25LZXk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBoeXBlcnR5VG9IYXNoS2V5OiB1bmRlZmluZWQsXG4gICAgICAgICAgaHlwZXJ0eUZyb21IYXNoS2V5OiB1bmRlZmluZWQsXG4gICAgICAgICAgdG9SYW5kb206IHVuZGVmaW5lZCxcbiAgICAgICAgICBmcm9tUmFuZG9tOiB1bmRlZmluZWQsXG4gICAgICAgICAgcHJlbWFzdGVyS2V5OiB1bmRlZmluZWQsXG4gICAgICAgICAgbWFzdGVyS2V5OiB1bmRlZmluZWRcbiAgICAgICAgfSxcbiAgICAgICAgaGFuZHNoYWtlSGlzdG9yeToge1xuICAgICAgICAgIHNlbmRlckhlbGxvOiB1bmRlZmluZWQsXG4gICAgICAgICAgcmVjZWl2ZXJIZWxsbzogdW5kZWZpbmVkLFxuICAgICAgICAgIHNlbmRlckNlcnRpZmljYXRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2U6IHVuZGVmaW5lZFxuICAgICAgICB9LFxuICAgICAgICBpbml0aWFsTWVzc2FnZTogKG1lc3NhZ2UuYm9keS5pZ25vcmUpID8gdW5kZWZpbmVkIDogbWVzc2FnZSxcbiAgICAgICAgY2FsbGJhY2s6IG1lc3NhZ2UuY2FsbGJhY2ssXG4gICAgICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxuICAgICAgICBkYXRhT2JqZWN0VVJMOiBtZXNzYWdlLmRhdGFPYmplY3RVUkxcbiAgICAgIH07XG5cbiAgICByZXR1cm4gbmV3Q2hhdENyeXB0bztcbiAgfVxuXG4gIF9zZWNvbmRzU2luY2VFcG9jaCgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gIH1cblxuICBfcGFyc2VNZXNzYWdlVVJMKFVSTCkge1xuICAgIGxldCBzcGxpdGVkVG9VUkwgPSBVUkwuc3BsaXQoJy8nKTtcbiAgICBpZiAoc3BsaXRlZFRvVVJMLmxlbmd0aCA8PSA2KSB7XG4gICAgICByZXR1cm4gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM10gKyAnLycgKyBzcGxpdGVkVG9VUkxbNF07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9jaGF0a2V5c1RvU3RyaW5nQ2xvbmVyKGNoYXRLZXlzVVJMLCBjaGF0S2V5cykge1xuICBsZXQgZGF0YU9iamVjdFNlc3Npb25LZXlzQ2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBjaGF0S2V5cyk7XG4gIGlmIChkYXRhT2JqZWN0U2Vzc2lvbktleXNDbG9uZVtjaGF0S2V5c1VSTF0uc2Vzc2lvbktleSkge1xuICAgIGxvZy5sb2coJ19jaGF0a2V5c1RvU3RyaW5nQ2xvbmVyOmtleXMnLCBkYXRhT2JqZWN0U2Vzc2lvbktleXNDbG9uZVtjaGF0S2V5c1VSTF0uc2Vzc2lvbktleSk7XG4gICAgdHJ5IHtcbiAgICAgIGRhdGFPYmplY3RTZXNzaW9uS2V5c0Nsb25lW2NoYXRLZXlzVVJMXS5zZXNzaW9uS2V5ID0gZGF0YU9iamVjdFNlc3Npb25LZXlzQ2xvbmVbY2hhdEtleXNVUkxdLnNlc3Npb25LZXkudG9TdHJpbmcoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5sb2coJ19jaGF0a2V5c1RvU3RyaW5nQ2xvbmVyOmVycicsIGVycik7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhT2JqZWN0U2Vzc2lvbktleXNDbG9uZTtcbn1cblxuZnVuY3Rpb24gX2NoYXRrZXlzVG9BcnJheUNsb25lcihjaGF0S2V5c1VSTCwgc2Vzc2lvbktleXMpIHtcbiAgbG9nLmxvZygnX2NoYXRrZXlzVG9BcnJheUNsb25lcicsIGNoYXRLZXlzVVJMLCBzZXNzaW9uS2V5cyk7XG4gIGlmIChzZXNzaW9uS2V5cykge1xuICAgIGxvZy5sb2coJ19jaGF0a2V5c1RvQXJyYXlDbG9uZXI6aW5zaWRlSWYnLCBzZXNzaW9uS2V5c1tjaGF0S2V5c1VSTF0uc2Vzc2lvbktleSk7XG4gICAgdHJ5IHtcbiAgICAgIHNlc3Npb25LZXlzW2NoYXRLZXlzVVJMXS5zZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoSlNPTi5wYXJzZSgnWycgKyBzZXNzaW9uS2V5c1tjaGF0S2V5c1VSTF0uc2Vzc2lvbktleSArICddJykpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmxvZygnX2NoYXRrZXlzVG9BcnJheUNsb25lcjplcnInLCBlcnIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2Vzc2lvbktleXM7XG59XG5cbi8vZnVuY3Rpb24gbG9nUyhmMSwgZjIpIHtcbi8vICBsb2cubG9nKGYxLCBKU09OLnN0cmluZ2lmeSh1dGlsLmluc3BlY3QoZjIpKSk7XG4vL31cblxuZXhwb3J0IGRlZmF1bHQgSWRlbnRpdHlNb2R1bGU7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2lkZW50aXR5L0lkZW50aXR5TW9kdWxlLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBUEE7QUFDQTtBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEJBO0FBQ0E7QUFDQTs7O0FBR0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQXVEQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFDQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSkE7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFKQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUpBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFKQTtBQUNBO0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUpBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFKQTtBQVNBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFKQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUpBO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUpBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBSkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXBaQTtBQXNaQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFKQTtBQVVBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFRQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBckNBO0FBQ0E7QUF1Q0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUE5dUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFpc0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///465\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* The Identity Data Model is used to model the reTHINK User entity. The Identity data model is handled by Identity Management functionality.\n*\n*/\nvar Identity = function () {\n  function Identity(guid, type) {\n    (0, _classCallCheck3.default)(this, Identity);\n\n    var _this = this;\n\n    _this.guid = guid;\n    _this.type = type;\n    _this.identifiersList = {};\n  }\n\n  (0, _createClass3.default)(Identity, [{\n    key: 'addIdentity',\n    value: function addIdentity(identifier) {\n      var _this = this;\n      var identityInformation = {\n        idAssertion: '',\n        serviceAddress: '',\n        authenticationData: '',\n        authorisationData: '',\n        userProfile: ''\n      };\n      _this.identifiersList[identifier] = identityInformation;\n    }\n  }, {\n    key: 'addIdAssertion',\n    value: function addIdAssertion(identifier, assertion, idp, scope) {\n      var _this = this;\n\n      var newIdAssertion = new IdAssertion(assertion, idp, scope);\n\n      _this.idAssertionList.push(newIdAssertion);\n    }\n  }]);\n  return Identity;\n}();\n\nvar IdAssertion = function IdAssertion(assertion, idp, scope) {\n  (0, _classCallCheck3.default)(this, IdAssertion);\n\n  var _this = this;\n\n  _this.assertion = assertion;\n  _this.idp = idp;\n  _this.scope = scope;\n};\n\nvar IdValidation = function () {\n  function IdValidation(identity, contents) {\n    (0, _classCallCheck3.default)(this, IdValidation);\n\n    var _this = this;\n    _this.identity = identity;\n    _this.contents = contents;\n  }\n\n  (0, _createClass3.default)(IdValidation, [{\n    key: 'validates',\n    value: function validates(identity, contents) {\n      //TODO implement the logic\n\n    }\n  }]);\n  return IdValidation;\n}();\n\nexports.default = Identity;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9pZGVudGl0eS9JZGVudGl0eS5qcz8zYWZkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBUaGUgSWRlbnRpdHkgRGF0YSBNb2RlbCBpcyB1c2VkIHRvIG1vZGVsIHRoZSByZVRISU5LIFVzZXIgZW50aXR5LiBUaGUgSWRlbnRpdHkgZGF0YSBtb2RlbCBpcyBoYW5kbGVkIGJ5IElkZW50aXR5IE1hbmFnZW1lbnQgZnVuY3Rpb25hbGl0eS5cbipcbiovXG5jbGFzcyBJZGVudGl0eSB7XG5cbiAgY29uc3RydWN0b3IoZ3VpZCwgdHlwZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5ndWlkID0gZ3VpZDtcbiAgICBfdGhpcy50eXBlID0gdHlwZTtcbiAgICBfdGhpcy5pZGVudGlmaWVyc0xpc3QgPSB7fTtcblxuICB9XG5cbiAgYWRkSWRlbnRpdHkoaWRlbnRpZmllcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGlkZW50aXR5SW5mb3JtYXRpb24gPSB7XG4gICAgICBpZEFzc2VydGlvbjogJycsXG4gICAgICBzZXJ2aWNlQWRkcmVzczogJycsXG4gICAgICBhdXRoZW50aWNhdGlvbkRhdGE6ICcnLFxuICAgICAgYXV0aG9yaXNhdGlvbkRhdGE6ICcnLFxuICAgICAgdXNlclByb2ZpbGU6ICcnXG4gICAgfTtcbiAgICBfdGhpcy5pZGVudGlmaWVyc0xpc3RbaWRlbnRpZmllcl0gPSBpZGVudGl0eUluZm9ybWF0aW9uO1xuICB9XG5cbiAgYWRkSWRBc3NlcnRpb24oaWRlbnRpZmllciwgYXNzZXJ0aW9uLCBpZHAsIHNjb3BlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBuZXdJZEFzc2VydGlvbiA9IG5ldyBJZEFzc2VydGlvbihhc3NlcnRpb24sIGlkcCwgc2NvcGUpO1xuXG4gICAgX3RoaXMuaWRBc3NlcnRpb25MaXN0LnB1c2gobmV3SWRBc3NlcnRpb24pO1xuICB9XG59XG5cbmNsYXNzIElkQXNzZXJ0aW9uIHtcblxuICBjb25zdHJ1Y3Rvcihhc3NlcnRpb24sIGlkcCwgc2NvcGUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuYXNzZXJ0aW9uID0gYXNzZXJ0aW9uO1xuICAgIF90aGlzLmlkcCA9IGlkcDtcbiAgICBfdGhpcy5zY29wZSA9IHNjb3BlO1xuICB9XG5cbn1cblxuY2xhc3MgSWRWYWxpZGF0aW9uIHtcblxuICBjb25zdHJ1Y3RvcihpZGVudGl0eSwgY29udGVudHMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgX3RoaXMuY29udGVudHMgPSBjb250ZW50cztcbiAgfVxuXG4gIHZhbGlkYXRlcyhpZGVudGl0eSwgY29udGVudHMpIHtcbiAgICAvL1RPRE8gaW1wbGVtZW50IHRoZSBsb2dpY1xuXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSWRlbnRpdHk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2lkZW50aXR5L0lkZW50aXR5LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFJQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFHQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBR0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///466\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _keys = __webpack_require__(46);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _stringify = __webpack_require__(40);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _utf = __webpack_require__(468);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Class with the cryptographic functions for the authentication protocol\n*\n*/\nvar Crypto = function () {\n  function Crypto(runtimeFactory) {\n    (0, _classCallCheck3.default)(this, Crypto);\n\n    var _this = this;\n    if (typeof runtimeFactory.createWebcrypto === 'function') {\n      _this._crypto = runtimeFactory.createWebcrypto();\n\n      //_this.cryptoUTF8Encoder = encodeUTF8;\n      //_this.cryptoUTF8Decoder = decodeUTF8;\n    } else {\n      _this._crypto = crypto;\n\n      //_this.cryptoUTF8Encoder = (data) => { return new TextDecoder('utf-8').encode(data); };\n      //_this.cryptoUTF8Decoder = (data) => { return new TextDecoder('utf-8').decode(data); };\n    }\n    _this.cryptoUTF8Encoder = _utf.encodeUTF8;\n    _this.cryptoUTF8Decoder = _utf.decodeUTF8;\n  }\n\n  /**\n  * encode a byteArray value in base 64 encode\n  * @param   {byteArray}    value    byteArray value\n  * @return  {string}   encoded value\n  */\n\n\n  (0, _createClass3.default)(Crypto, [{\n    key: 'encode',\n    value: function encode(value) {\n      return btoa((0, _stringify2.default)(value));\n    }\n\n    /**\n    * decode a base64 value in a new Uint8Array\n    * @param   {string}    value    value encoded in base 64\n    * @return  {byteArray} decodedValue\n    */\n\n  }, {\n    key: 'decode',\n    value: function decode(value) {\n      //    CLog('Before dec val', value);\n      try {\n        return JSON.parse(atob(value));\n      } catch (err) {\n        console.log('decode:' + err);\n        throw err;\n      }\n    }\n  }, {\n    key: 'decodeToUint8Array',\n    value: function decodeToUint8Array(value) {\n      try {\n\n        var receivedArray = undefined;\n\n        //TODO: The verification if the string contains the \\\" mutch be checked since it might fail\n        if (atob(value).indexOf('\"') > -1) {\n          var receivedArrayObject = JSON.parse(atob(value));\n          receivedArray = (0, _keys2.default)(receivedArrayObject).map(function (key) {\n            return receivedArrayObject[key];\n          });\n        } else {\n          receivedArray = JSON.parse('[' + atob(value) + ']');\n        }\n\n        var unsigned8Array = new Uint8Array(receivedArray);\n        return unsigned8Array;\n      } catch (err) {\n        console.log('decodeToUint8Array:err' + err);\n        throw err;\n      }\n    }\n  }, {\n    key: 'encryptRSA',\n    value: function encryptRSA(pubKey, data) {\n      CLog('encryptRSA:pubKey', pubKey);\n      CLog('encryptRSA:data', data);\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importRSAencryptKey(new Uint8Array(pubKey)).then(function (publicKey) {\n\n          _this._crypto.subtle.encrypt({\n            name: 'RSA-OAEP'\n          }, publicKey, //from generateKey or importKey above\n          data //ArrayBuffer of data you want to encrypt\n          ).then(function (encrypted) {\n            //returns an ArrayBuffer containing the encrypted data\n            // CLog('crypto-encryptRSA', new Uint8Array(encrypted));\n            resolve(new Uint8Array(encrypted));\n          }).catch(function (err) {\n            // CLog('crypto-encryptRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'decryptRSA',\n    value: function decryptRSA(privKey, data) {\n      CLog('decryptRSA:privKey', privKey);\n      CLog('decryptRSA:data', data);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importRSAdecryptKey(privKey).then(function (privateKey) {\n\n          _this._crypto.subtle.decrypt({\n            name: 'RSA-OAEP'\n          }, privateKey, //from generateKey or importKey above\n          data //ArrayBuffer of the data\n          ).then(function (decrypted) {\n\n            var decryptedData = new Uint8Array(decrypted);\n\n            // CLog('crypto-decryptRSA', decryptedData);\n            resolve(decryptedData);\n          }).catch(function (err) {\n            // CLog('crypto-decryptRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'signRSA',\n    value: function signRSA(privKey, data) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importRSAsignKey(privKey).then(function (privateKey) {\n\n          //CLog('TIAGO: signRSA data', data);\n          _this._crypto.subtle.sign({\n            name: 'RSASSA-PKCS1-v1_5'\n          }, privateKey, //from generateKey or importKey above\n          _this._utf8Encode(data) //ArrayBuffer of data you want to sign\n          ).then(function (signature) {\n            //returns an ArrayBuffer containing the signature\n            // CLog('crypto-signRSA', new Uint8Array(signature));\n            resolve(new Uint8Array(signature));\n          }).catch(function (err) {\n            // CLog('crypto-signRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'verifyRSA',\n    value: function verifyRSA(pubKey, data, signature) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importRSAverifyKey(pubKey).then(function (publicKey) {\n\n          //CLog('TIAGO: verifyRSA data', data);\n          _this._crypto.subtle.verify({\n            name: 'RSASSA-PKCS1-v1_5'\n          }, publicKey, //from generateKey or importKey above\n          signature, //ArrayBuffer of the signature\n          _this._utf8Encode(data) //ArrayBuffer of the data\n          ).then(function (isvalid) {\n            //returns a boolean on whether the signature is true or not\n            // CLog('crypto-verifyRSA', isvalid);\n            resolve(isvalid);\n          }).catch(function (err) {\n            // CLog('crypto-verifyRSA', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'encryptAES',\n    value: function encryptAES(key, data, iv) {\n      CLog('encryptAES:key', key);\n      CLog('encryptAES:data', data);\n      CLog('encryptAES:iv', iv);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importAESkey(key).then(function (aesKey) {\n\n          //CLog('TIAGO: encryptAES data', data);\n          _this._crypto.subtle.encrypt({\n            name: 'AES-CBC',\n\n            //Don't re-use initialization vectors!\n            //Always generate a new iv every time your encrypt!\n            iv: iv\n          }, aesKey, //from generateKey or importKey above\n          _this._utf8Encode(data) //ArrayBuffer of data you want to encrypt\n          ).then(function (encrypted) {\n            //returns an ArrayBuffer containing the encrypted data\n            // CLog('crypto-encryptAES', new Uint8Array(encrypted));\n            resolve(new Uint8Array(encrypted));\n          }).catch(function (err) {\n            // CLog('crypto-encryptAES', err);\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: 'decryptAES',\n    value: function decryptAES(key, data, iv) {\n      CLog('decryptAES:key', key);\n      CLog('decryptAES:data', data);\n      CLog('decryptAES:iv', iv);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._importAESkey(key).then(function (aesKey) {\n\n          _this._crypto.subtle.decrypt({\n            name: 'AES-CBC',\n            iv: iv\n          }, aesKey, //from generateKey or importKey above\n          data //ArrayBuffer of the data\n          ).then(function (decrypted) {\n\n            var decodedData = _this._utf8Decode(new Uint8Array(decrypted));\n            CLog('crypto-decryptAES', decodedData);\n            resolve(decodedData);\n          }).catch(function (err) {\n            // CLog('crypto-decryptAES', err);\n            reject(err);\n          });\n        });\n      });\n    }\n\n    /**\n    * creates a hash using the HMAC algorithm\n    * @param  {byteArray}    key       key to be used in the hmac\n    * @param  {string}      data       information to be hashed\n    * @return  {byteArray}   signature  resulting hash\n    */\n\n  }, {\n    key: 'hashHMAC',\n    value: function hashHMAC(key, data) {\n      CLog('hashHMAC:key', key);\n      CLog('hashHMAC:data', data);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        if (typeof data != 'string') {\n          data = (0, _stringify2.default)(data);\n          CLog('Converting hashHMAC inpured DATA');\n          CLog('HHashHMAC:', data);\n        }\n\n        _this._importHMACkey(key).then(function (hmacKey) {\n\n          _this._crypto.subtle.sign({\n            name: 'HMAC'\n          }, hmacKey, //from generateKey or importKey above\n          _this._utf8Encode(data) //ArrayBuffer of data you want to sign\n          ).then(function (signature) {\n            CLog('HashHMAC signature:', new Uint8Array(signature));\n\n            // CLog('crypto-hashHMAC', signature);\n            //returns an ArrayBuffer containing the signature\n            resolve(new Uint8Array(signature));\n          }).catch(function (err) {\n            // CLog('crypto-hashHMAC', err);\n            reject(err);\n          });\n        });\n      });\n    }\n\n    /**\n    * verifies an hash using the HMAC algorithm\n    * @param  {byteArray}    key       key to be used in the hmac\n    * @param  {string}      data       information to be hashed to compare\n    * @param  {byteArray}  signature   hash to compare with the received data\n    * @return  {boolean}   isvalid     boolean saying if the data corresponds to the hash received\n    */\n\n  }, {\n    key: 'verifyHMAC',\n    value: function verifyHMAC(key, data, signature) {\n      CLog('verifyHMAC:key', key);\n      CLog('verifyHMAC:data', data);\n      CLog('verifyHMAC:signature', signature);\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this._importHMACkey(key).then(function (hmacKey) {\n\n          if (typeof data != 'string') {\n            data = (0, _stringify2.default)(data);\n            CLog('Converting verifyHMAC inputed DATA:', data);\n          }\n\n          //CLog('TIAGO: verifyHMAC data', data);\n          _this._crypto.subtle.verify({\n            name: 'HMAC'\n          }, hmacKey, //from generateKey or importKey above\n          signature, //ArrayBuffer of the signature\n          _this._utf8Encode(data) //ArrayBuffer of the data\n          ).then(function (isvalid) {\n            //returns a boolean on whether the signature is true or not\n            // CLog('crypto-verifyHMAC', isvalid);\n            console.log('verifyHMAC result', isvalid);\n            isvalid ? resolve(isvalid) : reject(isvalid);\n          }).catch(function (err) {\n            console.error('crypto-verifyHMAC', err);\n            reject(err);\n          });\n        });\n      });\n    }\n\n    /**\n    * generates a RSA public/private key pair with a modulus length of 2048 bits\n    * @return  {JSON}   keyPair    json containing the public and private keys\n    */\n\n  }, {\n    key: 'generateRSAKeyPair',\n    value: function generateRSAKeyPair() {\n      var _this = this;\n      var keyPair = {};\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._crypto.subtle.generateKey({\n          name: 'RSA-PSS',\n          modulusLength: 2048, //can be 1024, 2048, or 4096\n          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n          hash: { name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n          } }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['sign', 'verify'] //can be any combination of 'sign' and 'verify'\n\n        ).then(function (key) {\n          //returns a keypair object\n          // CLog(key);\n\n          _this._crypto.subtle.exportKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n          key.publicKey //can be a publicKey or privateKey, as long as extractable was true\n          ).then(function (publicKey) {\n            //returns the exported key data\n            keyPair.public = new Uint8Array(publicKey);\n            return _this._crypto.subtle.exportKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n            key.privateKey //can be a publicKey or privateKey, as long as extractable was true\n            );\n          }).then(function (privateKey) {\n            keyPair.private = new Uint8Array(privateKey);\n\n            // CLog('crypto-generateRSAKeyPair', keyPair);\n            resolve(keyPair);\n          }).catch(function (err) {\n            console.error(err);\n            reject(err);\n          });\n        }).catch(function (err) {\n          console.error(err);\n          reject(err);\n        });\n      });\n    }\n\n    /**\n    * Generates a 128 bit random value.\n    * @return {byteArray}  array    random value\n    */\n\n  }, {\n    key: 'generateIV',\n    value: function generateIV() {\n      var _this = this;\n\n      var array = new Uint8Array(16);\n      _this._crypto.getRandomValues(array);\n\n      return array;\n    }\n\n    /**\n    * Generates a 256 bit random value. 32 bits are extrated from the machine time,\n    * the remaining are generated randomly\n    * @return {byteArray}  array    random value\n    */\n\n  }, {\n    key: 'generateRandom',\n    value: function generateRandom() {\n      var _this = this;\n\n      var array = new Uint8Array(32);\n      _this._crypto.getRandomValues(array);\n\n      var date = Date.now();\n\n      //CLog('TIAGO: generateRandom data', date.toString());\n      var dateEncoded = _this._utf8Encode(date.toString());\n\n      //extract the least significant 4 bytes in the date\n      var finalDate = dateEncoded.slice(dateEncoded.length - 4, dateEncoded.length);\n\n      // add in the first 4 bytes of the array the bytes extracted previously;\n      for (var i = 0; i < 4; i++) {\n        array[i] = finalDate[i];\n      }\n      return array;\n    }\n\n    /**\n    * generates a premaster secret (PMS) of 48 bytes (384 bits) randomly\n    * @return {byteArray}  array    premaster secret key\n    */\n\n  }, {\n    key: 'generatePMS',\n    value: function generatePMS() {\n      var _this = this;\n\n      var array = new Uint8Array(48);\n      _this._crypto.getRandomValues(array);\n      return array;\n    }\n\n    /**\n    * generates a masterKey secret (PMS) of 48 bytes (384 bits) using the premaster secret and\n    * two randoms\n    * @return {byteArray}  array    master secret key with 48 bytes\n    */\n\n  }, {\n    key: 'generateMasterSecret',\n    value: function generateMasterSecret(hmacKey, data) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var key = new Uint8Array(48);\n        var seed = data;\n\n        _this._digest(hmacKey).then(function (digestedKey) {\n\n          _this.hashHMAC(digestedKey, seed).then(function (keypart0) {\n\n            //copy the first 32 bytes into the key\n            for (var i = 0; i < 32; i++) {\n              key[i] = keypart0[i];\n            }\n            return _this.hashHMAC(digestedKey, seed + keypart0);\n          }).then(function (keypart1) {\n\n            //copy the first 16 bytes to the key remaining 16 bytes\n            for (var i = 0; i < 16; i++) {\n              key[i + 32] = keypart1[i];\n            }\n\n            // CLog('crypto-generateMasterSecret', key);\n            resolve(key);\n          }).catch(function (err) {\n            // CLog('crypto-generateMasterSecret', err);\n            reject(err);\n          });\n        });\n      });\n    }\n\n    /**\n    * generates both users MAC and encryption keys. generate as output an array\n    * with 4 byteArray each with 32 bytes\n    * @param  {byteArray}        secret       secret to be used in the HMAC function\n    * @param  {String}           data         information to be used as seed\n    * @return {Array<byteArray>} key          array with the information to generate keys\n    */\n\n  }, {\n    key: 'generateKeys',\n    value: function generateKeys(hmacKey, data) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var key = [];\n        var seed = data;\n\n        // iterate 4 times to obtain a 1024 key size\n        _this.hashHMAC(hmacKey, seed).then(function (keypart0) {\n          key.push(keypart0);\n          return _this.hashHMAC(hmacKey, seed + keypart0);\n        }).then(function (keypart1) {\n          key.push(keypart1);\n          return _this.hashHMAC(hmacKey, seed + keypart1);\n        }).then(function (keypart2) {\n          key.push(keypart2);\n          return _this.hashHMAC(hmacKey, seed + keypart2);\n        }).then(function (keypart3) {\n          key.push(keypart3);\n\n          // CLog('crypto-generateKeys', key);\n          resolve(key);\n        }).catch(function (err) {\n          // CLog('crypto-generateKeys', err);\n          reject(err);\n        });\n\n        // CLog(hmacKey, data);\n      });\n    }\n  }, {\n    key: '_importRSAsignKey',\n    value: function _importRSAsignKey(privKey) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        privKey, { //these are the algorithm options\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: { name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n          } }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['sign'] //'verify' for public key import, 'sign' for private key imports\n        ).then(function (privateKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          // CLog('crypto-_importRSAsignKey', privateKey);\n          resolve(privateKey);\n        }).catch(function (err) {\n          console.error('crypto-_importRSAsignKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_importRSAverifyKey',\n    value: function _importRSAverifyKey(pubKey) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        pubKey, { //these are the algorithm options\n          name: 'RSASSA-PKCS1-v1_5',\n          hash: { name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n          } }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['verify'] //'verify' for public key import, 'sign' for private key imports\n        ).then(function (publicKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          // CLog('crypto-_importRSAverifyKey', publicKey);\n          resolve(publicKey);\n        }).catch(function (err) {\n          console.error('crypto-_importRSAverifyKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_importRSAencryptKey',\n    value: function _importRSAencryptKey(pubKey) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        pubKey, { //these are the algorithm options\n          name: 'RSA-OAEP',\n          hash: { name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n          } }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['encrypt'] //'encrypt' or 'wrapKey' for public key import or\n        //'decrypt' or 'unwrapKey' for private key imports\n        ).then(function (publicKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          // CLog('crypto-_importRSAencryptKey', publicKey);\n          resolve(publicKey);\n        }).catch(function (err) {\n          console.error('crypto-_importRSAencryptKey', err.name);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_importRSAdecryptKey',\n    value: function _importRSAdecryptKey(privKey) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)\n        privKey, { //these are the algorithm options\n          name: 'RSA-OAEP',\n          hash: { name: 'SHA-256' //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n          } }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['decrypt'] //'encrypt' or 'wrapKey' for public key import or\n        //'decrypt' or 'unwrapKey' for private key imports\n        ).then(function (privateKey) {\n          //returns a publicKey (or privateKey if you are importing a private key)\n          // CLog('crypto-_importRSAdecryptKey', privateKey);\n          resolve(privateKey);\n        }).catch(function (err) {\n          console.error('crypto-_importRSAdecryptKey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: 'concatPMSwithRandoms',\n    value: function concatPMSwithRandoms(pms, toRandom, fromRandom) {\n\n      var finalKey = new Uint8Array(pms.length + toRandom.length + fromRandom.length);\n\n      // add PremasterKey\n      for (var i = 0; i < pms.length; i++) {\n        finalKey[i] = pms[i];\n      }\n\n      //add to random\n      for (var _i = 0; _i < toRandom.length; _i++) {\n        finalKey[_i + pms.length] = pms[_i];\n      }\n\n      //add from random\n      for (var _i2 = 0; _i2 < fromRandom.length; _i2++) {\n        finalKey[_i2 + pms.length + toRandom.length] = pms[_i2];\n      }\n\n      return finalKey;\n    }\n  }, {\n    key: '_generate256bitKey',\n    value: function _generate256bitKey() {\n      var _this = this;\n      var array = new Uint8Array(32);\n      _this._crypto.getRandomValues(array);\n\n      return array;\n    }\n\n    /**\n    * imports the secret to the HMAC function\n    * @param  {byteArray}   arrayBuffer     bytes to import as key\n    * @return {JSON}       key              key ready to be used in the HMAC cryptographic function\n    */\n\n  }, {\n    key: '_importHMACkey',\n    value: function _importHMACkey(arrayBuffer) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this._digest(arrayBuffer).then(function (key) {\n\n          _this._crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'\n          key, { //this is the algorithm options\n            name: 'HMAC',\n            hash: { name: 'SHA-256' }, //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'\n            length: 256 //optional, if you want your key length to differ from the hash function's block length\n          }, true, //whether the key is extractable (i.e. can be used in exportKey)\n          ['sign', 'verify'] //can be any combination of 'sign' and 'verify'\n          ).then(function (key) {\n            //returns the symmetric key\n            // CLog('crypto-_importHMACkey', key);\n            resolve(key);\n          }).catch(function (err) {\n            reject(err);\n          });\n        });\n      });\n    }\n  }, {\n    key: '_digest',\n    value: function _digest(value) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._crypto.subtle.digest({\n          name: 'SHA-256'\n        }, value //The data you want to hash as an ArrayBuffer\n        ).then(function (hash) {\n          //returns the hash as an ArrayBuffer\n          // CLog('crypto-digest', new Uint8Array(hash));\n          resolve(new Uint8Array(hash));\n        }).catch(function (err) {\n          console.error(err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_importAESkey',\n    value: function _importAESkey(arrayBuffer) {\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n        _this._crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'\n        arrayBuffer, { //this is the algorithm options\n          name: 'AES-CBC'\n        }, true, //whether the key is extractable (i.e. can be used in exportKey)\n        ['encrypt', 'decrypt'] //can be 'encrypt', 'decrypt', 'wrapKey', or 'unwrapKey'\n        ).then(function (key) {\n          //returns the symmetric key\n          // console.log('crypto-importAESkey', key);\n          resolve(key);\n        }).catch(function (err) {\n          console.error('crypto-importAESkey', err);\n          reject(err);\n        });\n      });\n    }\n  }, {\n    key: '_utf8Encode',\n    value: function _utf8Encode(s) {\n      return this.cryptoUTF8Encoder(s);\n\n      //return new TextEncoder('utf-8').encode(s);\n      //return encodeUTF8(s);\n    }\n  }, {\n    key: '_utf8Decode',\n    value: function _utf8Decode(s) {\n      return this.cryptoUTF8Decoder(s);\n\n      //return new TextDecoder('utf-8').decode(s);\n      //return decodeUTF8(s);\n    }\n  }]);\n  return Crypto;\n}();\n\nfunction CLog(a1, a2) {\n  console.log(a1, a2);\n}\n\nexports.default = Crypto;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9pZGVudGl0eS9DcnlwdG8uanM/MTNkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2VuY29kZVVURjgsIGRlY29kZVVURjh9IGZyb20gJy4vdXRmOC5qcyc7XG5cbi8qKlxuKiBDbGFzcyB3aXRoIHRoZSBjcnlwdG9ncmFwaGljIGZ1bmN0aW9ucyBmb3IgdGhlIGF1dGhlbnRpY2F0aW9uIHByb3RvY29sXG4qXG4qL1xuY2xhc3MgQ3J5cHRvIHtcblxuICBjb25zdHJ1Y3RvcihydW50aW1lRmFjdG9yeSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBydW50aW1lRmFjdG9yeS5jcmVhdGVXZWJjcnlwdG8gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIF90aGlzLl9jcnlwdG8gPSBydW50aW1lRmFjdG9yeS5jcmVhdGVXZWJjcnlwdG8oKTtcblxuICAgICAgLy9fdGhpcy5jcnlwdG9VVEY4RW5jb2RlciA9IGVuY29kZVVURjg7XG4gICAgICAvL190aGlzLmNyeXB0b1VURjhEZWNvZGVyID0gZGVjb2RlVVRGODtcblxuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5fY3J5cHRvID0gY3J5cHRvO1xuXG4gICAgICAvL190aGlzLmNyeXB0b1VURjhFbmNvZGVyID0gKGRhdGEpID0+IHsgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKS5lbmNvZGUoZGF0YSk7IH07XG4gICAgICAvL190aGlzLmNyeXB0b1VURjhEZWNvZGVyID0gKGRhdGEpID0+IHsgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKS5kZWNvZGUoZGF0YSk7IH07XG4gICAgfVxuICAgIF90aGlzLmNyeXB0b1VURjhFbmNvZGVyID0gZW5jb2RlVVRGODtcbiAgICBfdGhpcy5jcnlwdG9VVEY4RGVjb2RlciA9IGRlY29kZVVURjg7XG4gIH1cblxuICAvKipcbiAgKiBlbmNvZGUgYSBieXRlQXJyYXkgdmFsdWUgaW4gYmFzZSA2NCBlbmNvZGVcbiAgKiBAcGFyYW0gICB7Ynl0ZUFycmF5fSAgICB2YWx1ZSAgICBieXRlQXJyYXkgdmFsdWVcbiAgKiBAcmV0dXJuICB7c3RyaW5nfSAgIGVuY29kZWQgdmFsdWVcbiAgKi9cbiAgZW5jb2RlKHZhbHVlKSB7XG4gICAgcmV0dXJuIGJ0b2EoSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcbiAgfVxuXG4gIC8qKlxuICAqIGRlY29kZSBhIGJhc2U2NCB2YWx1ZSBpbiBhIG5ldyBVaW50OEFycmF5XG4gICogQHBhcmFtICAge3N0cmluZ30gICAgdmFsdWUgICAgdmFsdWUgZW5jb2RlZCBpbiBiYXNlIDY0XG4gICogQHJldHVybiAge2J5dGVBcnJheX0gZGVjb2RlZFZhbHVlXG4gICovXG4gIGRlY29kZSh2YWx1ZSkge1xuICAgIC8vICAgIENMb2coJ0JlZm9yZSBkZWMgdmFsJywgdmFsdWUpO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShhdG9iKHZhbHVlKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZygnZGVjb2RlOicgKyBlcnIpO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIGRlY29kZVRvVWludDhBcnJheSh2YWx1ZSkge1xuICAgIHRyeSB7XG5cbiAgICAgIGxldCByZWNlaXZlZEFycmF5ICA9IHVuZGVmaW5lZDtcblxuICAgICAgLy9UT0RPOiBUaGUgdmVyaWZpY2F0aW9uIGlmIHRoZSBzdHJpbmcgY29udGFpbnMgdGhlIFxcXCIgbXV0Y2ggYmUgY2hlY2tlZCBzaW5jZSBpdCBtaWdodCBmYWlsXG4gICAgICBpZiAoYXRvYih2YWx1ZSkuaW5kZXhPZignXCInKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IHJlY2VpdmVkQXJyYXlPYmplY3QgPSBKU09OLnBhcnNlKGF0b2IodmFsdWUpKTtcbiAgICAgICAgcmVjZWl2ZWRBcnJheSA9IE9iamVjdC5rZXlzKHJlY2VpdmVkQXJyYXlPYmplY3QpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlY2VpdmVkQXJyYXlPYmplY3Rba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWNlaXZlZEFycmF5ID0gSlNPTi5wYXJzZSgnWycgKyBhdG9iKHZhbHVlKSArICddJyk7XG4gICAgICB9XG5cblxuICAgICAgbGV0IHVuc2lnbmVkOEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkocmVjZWl2ZWRBcnJheSk7XG4gICAgICByZXR1cm4gdW5zaWduZWQ4QXJyYXk7XG5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdkZWNvZGVUb1VpbnQ4QXJyYXk6ZXJyJyArIGVycik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuXG4gIH1cblxuICBlbmNyeXB0UlNBKHB1YktleSwgZGF0YSkge1xuICAgIENMb2coJ2VuY3J5cHRSU0E6cHViS2V5JywgcHViS2V5KTtcbiAgICBDTG9nKCdlbmNyeXB0UlNBOmRhdGEnLCBkYXRhKTtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5faW1wb3J0UlNBZW5jcnlwdEtleShuZXcgVWludDhBcnJheShwdWJLZXkpKS50aGVuKGZ1bmN0aW9uKHB1YmxpY0tleSkge1xuXG4gICAgICAgIF90aGlzLl9jcnlwdG8uc3VidGxlLmVuY3J5cHQoXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVibGljS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXG4gICAgICAgICAgZGF0YSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gZW5jcnlwdFxuICAgICAgICApXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZW5jcnlwdGVkKSB7XG4gICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIGVuY3J5cHRlZCBkYXRhXG4gICAgICAgICAgLy8gQ0xvZygnY3J5cHRvLWVuY3J5cHRSU0EnLCBuZXcgVWludDhBcnJheShlbmNyeXB0ZWQpKTtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkKSk7XG5cbiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAvLyBDTG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIGVycik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZGVjcnlwdFJTQShwcml2S2V5LCBkYXRhKSB7XG4gICAgQ0xvZygnZGVjcnlwdFJTQTpwcml2S2V5JywgcHJpdktleSk7XG4gICAgQ0xvZygnZGVjcnlwdFJTQTpkYXRhJywgZGF0YSk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIF90aGlzLl9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xuXG4gICAgICAgIF90aGlzLl9jcnlwdG8uc3VidGxlLmRlY3J5cHQoXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJpdmF0ZUtleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxuICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YVxuICAgICAgICApXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGVjcnlwdGVkKSB7XG5cbiAgICAgICAgICAgIGxldCBkZWNyeXB0ZWREYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkKTtcblxuICAgICAgICAgICAgLy8gQ0xvZygnY3J5cHRvLWRlY3J5cHRSU0EnLCBkZWNyeXB0ZWREYXRhKTtcbiAgICAgICAgICAgIHJlc29sdmUoZGVjcnlwdGVkRGF0YSk7XG5cbiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAvLyBDTG9nKCdjcnlwdG8tZGVjcnlwdFJTQScsIGVycik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBzaWduUlNBKHByaXZLZXksIGRhdGEpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2ltcG9ydFJTQXNpZ25LZXkocHJpdktleSkudGhlbihmdW5jdGlvbihwcml2YXRlS2V5KSB7XG5cbiAgICAgICAgLy9DTG9nKCdUSUFHTzogc2lnblJTQSBkYXRhJywgZGF0YSk7XG4gICAgICAgIF90aGlzLl9jcnlwdG8uc3VidGxlLnNpZ24oXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJpdmF0ZUtleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxuICAgICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgZGF0YSB5b3Ugd2FudCB0byBzaWduXG4gICAgICAgIClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihzaWduYXR1cmUpIHtcbiAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgc2lnbmF0dXJlXG4gICAgICAgICAgLy8gQ0xvZygnY3J5cHRvLXNpZ25SU0EnLCBuZXcgVWludDhBcnJheShzaWduYXR1cmUpKTtcbiAgICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKSk7XG5cbiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAvLyBDTG9nKCdjcnlwdG8tc2lnblJTQScsIGVycik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIHZlcmlmeVJTQShwdWJLZXksIGRhdGEsIHNpZ25hdHVyZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5faW1wb3J0UlNBdmVyaWZ5S2V5KHB1YktleSkudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcblxuICAgICAgICAvL0NMb2coJ1RJQUdPOiB2ZXJpZnlSU0EgZGF0YScsIGRhdGEpO1xuICAgICAgICBfdGhpcy5fY3J5cHRvLnN1YnRsZS52ZXJpZnkoXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHVibGljS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXG4gICAgICAgICAgc2lnbmF0dXJlLCAvL0FycmF5QnVmZmVyIG9mIHRoZSBzaWduYXR1cmVcbiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhXG4gICAgICAgIClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihpc3ZhbGlkKSB7XG4gICAgICAgICAgLy9yZXR1cm5zIGEgYm9vbGVhbiBvbiB3aGV0aGVyIHRoZSBzaWduYXR1cmUgaXMgdHJ1ZSBvciBub3RcbiAgICAgICAgICAvLyBDTG9nKCdjcnlwdG8tdmVyaWZ5UlNBJywgaXN2YWxpZCk7XG4gICAgICAgICAgICByZXNvbHZlKGlzdmFsaWQpO1xuXG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgLy8gQ0xvZygnY3J5cHRvLXZlcmlmeVJTQScsIGVycik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIGVuY3J5cHRBRVMoa2V5LCBkYXRhLCBpdikge1xuICAgIENMb2coJ2VuY3J5cHRBRVM6a2V5Jywga2V5KTtcbiAgICBDTG9nKCdlbmNyeXB0QUVTOmRhdGEnLCBkYXRhKTtcbiAgICBDTG9nKCdlbmNyeXB0QUVTOml2JywgaXYpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5faW1wb3J0QUVTa2V5KGtleSkudGhlbihmdW5jdGlvbihhZXNLZXkpIHtcblxuICAgICAgICAvL0NMb2coJ1RJQUdPOiBlbmNyeXB0QUVTIGRhdGEnLCBkYXRhKTtcbiAgICAgICAgX3RoaXMuX2NyeXB0by5zdWJ0bGUuZW5jcnlwdChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsXG5cbiAgICAgICAgICAgIC8vRG9uJ3QgcmUtdXNlIGluaXRpYWxpemF0aW9uIHZlY3RvcnMhXG4gICAgICAgICAgICAvL0Fsd2F5cyBnZW5lcmF0ZSBhIG5ldyBpdiBldmVyeSB0aW1lIHlvdXIgZW5jcnlwdCFcbiAgICAgICAgICAgIGl2OiBpdlxuICAgICAgICAgIH0sXG4gICAgICAgICAgYWVzS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXG4gICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHRcbiAgICAgICAgKVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGVuY3J5cHRlZCkge1xuICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YVxuICAgICAgICAgIC8vIENMb2coJ2NyeXB0by1lbmNyeXB0QUVTJywgbmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkKSk7XG4gICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpO1xuXG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgLy8gQ0xvZygnY3J5cHRvLWVuY3J5cHRBRVMnLCBlcnIpO1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBkZWNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHtcbiAgICBDTG9nKCdkZWNyeXB0QUVTOmtleScsIGtleSk7XG4gICAgQ0xvZygnZGVjcnlwdEFFUzpkYXRhJywgZGF0YSk7XG4gICAgQ0xvZygnZGVjcnlwdEFFUzppdicsIGl2KTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2ltcG9ydEFFU2tleShrZXkpLnRoZW4oZnVuY3Rpb24oYWVzS2V5KSB7XG5cbiAgICAgICAgX3RoaXMuX2NyeXB0by5zdWJ0bGUuZGVjcnlwdChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsXG4gICAgICAgICAgICBpdjogaXZcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFlc0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxuICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YVxuICAgICAgICApXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGVjcnlwdGVkKSB7XG5cbiAgICAgICAgICAgIGxldCBkZWNvZGVkRGF0YSA9IF90aGlzLl91dGY4RGVjb2RlKG5ldyBVaW50OEFycmF5KGRlY3J5cHRlZCkpO1xuICAgICAgICAgICAgQ0xvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBkZWNvZGVkRGF0YSk7XG4gICAgICAgICAgICByZXNvbHZlKGRlY29kZWREYXRhKTtcblxuICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIC8vIENMb2coJ2NyeXB0by1kZWNyeXB0QUVTJywgZXJyKTtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogY3JlYXRlcyBhIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtXG4gICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgICBrZXkgICAgICAga2V5IHRvIGJlIHVzZWQgaW4gdGhlIGhtYWNcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgZGF0YSAgICAgICBpbmZvcm1hdGlvbiB0byBiZSBoYXNoZWRcbiAgKiBAcmV0dXJuICB7Ynl0ZUFycmF5fSAgIHNpZ25hdHVyZSAgcmVzdWx0aW5nIGhhc2hcbiAgKi9cbiAgaGFzaEhNQUMoa2V5LCBkYXRhKSB7XG4gICAgQ0xvZygnaGFzaEhNQUM6a2V5Jywga2V5KTtcbiAgICBDTG9nKCdoYXNoSE1BQzpkYXRhJywgZGF0YSk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgaWYgKHR5cGVvZiBkYXRhICE9ICdzdHJpbmcnKSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICAgICAgQ0xvZygnQ29udmVydGluZyBoYXNoSE1BQyBpbnB1cmVkIERBVEEnKTtcbiAgICAgICAgQ0xvZygnSEhhc2hITUFDOicsIGRhdGEpO1xuICAgICAgfVxuXG5cbiAgICAgIF90aGlzLl9pbXBvcnRITUFDa2V5KGtleSkudGhlbihmdW5jdGlvbihobWFjS2V5KSB7XG5cbiAgICAgICAgX3RoaXMuX2NyeXB0by5zdWJ0bGUuc2lnbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnSE1BQydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcbiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gc2lnblxuICAgICAgICApXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oc2lnbmF0dXJlKSB7XG4gICAgICAgICAgICBDTG9nKCdIYXNoSE1BQyBzaWduYXR1cmU6JywgbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKSk7XG5cbiAgICAgICAgICAgIC8vIENMb2coJ2NyeXB0by1oYXNoSE1BQycsIHNpZ25hdHVyZSk7XG4gICAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgc2lnbmF0dXJlXG4gICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpO1xuXG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAvLyBDTG9nKCdjcnlwdG8taGFzaEhNQUMnLCBlcnIpO1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIHZlcmlmaWVzIGFuIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtXG4gICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgICBrZXkgICAgICAga2V5IHRvIGJlIHVzZWQgaW4gdGhlIGhtYWNcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgZGF0YSAgICAgICBpbmZvcm1hdGlvbiB0byBiZSBoYXNoZWQgdG8gY29tcGFyZVxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gIHNpZ25hdHVyZSAgIGhhc2ggdG8gY29tcGFyZSB3aXRoIHRoZSByZWNlaXZlZCBkYXRhXG4gICogQHJldHVybiAge2Jvb2xlYW59ICAgaXN2YWxpZCAgICAgYm9vbGVhbiBzYXlpbmcgaWYgdGhlIGRhdGEgY29ycmVzcG9uZHMgdG8gdGhlIGhhc2ggcmVjZWl2ZWRcbiAgKi9cbiAgdmVyaWZ5SE1BQyhrZXksIGRhdGEsIHNpZ25hdHVyZSkge1xuICAgIENMb2coJ3ZlcmlmeUhNQUM6a2V5Jywga2V5KTtcbiAgICBDTG9nKCd2ZXJpZnlITUFDOmRhdGEnLCBkYXRhKTtcbiAgICBDTG9nKCd2ZXJpZnlITUFDOnNpZ25hdHVyZScsIHNpZ25hdHVyZSk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgX3RoaXMuX2ltcG9ydEhNQUNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uKGhtYWNLZXkpIHtcblxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgICAgICAgQ0xvZygnQ29udmVydGluZyB2ZXJpZnlITUFDIGlucHV0ZWQgREFUQTonLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vQ0xvZygnVElBR086IHZlcmlmeUhNQUMgZGF0YScsIGRhdGEpO1xuICAgICAgICBfdGhpcy5fY3J5cHRvLnN1YnRsZS52ZXJpZnkoXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ0hNQUMnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBobWFjS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXG4gICAgICAgICAgc2lnbmF0dXJlLCAvL0FycmF5QnVmZmVyIG9mIHRoZSBzaWduYXR1cmVcbiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhXG4gICAgICAgIClcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihpc3ZhbGlkKSB7XG4gICAgICAgICAgLy9yZXR1cm5zIGEgYm9vbGVhbiBvbiB3aGV0aGVyIHRoZSBzaWduYXR1cmUgaXMgdHJ1ZSBvciBub3RcbiAgICAgICAgICAvLyBDTG9nKCdjcnlwdG8tdmVyaWZ5SE1BQycsIGlzdmFsaWQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3ZlcmlmeUhNQUMgcmVzdWx0JywgaXN2YWxpZCk7XG4gICAgICAgICAgICAoaXN2YWxpZCkgPyByZXNvbHZlKGlzdmFsaWQpIDogcmVqZWN0KGlzdmFsaWQpO1xuXG4gICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tdmVyaWZ5SE1BQycsIGVycik7XG4gICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogZ2VuZXJhdGVzIGEgUlNBIHB1YmxpYy9wcml2YXRlIGtleSBwYWlyIHdpdGggYSBtb2R1bHVzIGxlbmd0aCBvZiAyMDQ4IGJpdHNcbiAgKiBAcmV0dXJuICB7SlNPTn0gICBrZXlQYWlyICAgIGpzb24gY29udGFpbmluZyB0aGUgcHVibGljIGFuZCBwcml2YXRlIGtleXNcbiAgKi9cbiAgZ2VuZXJhdGVSU0FLZXlQYWlyKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGtleVBhaXIgPSB7fTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIF90aGlzLl9jcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5KFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ1JTQS1QU1MnLFxuICAgICAgICAgIG1vZHVsdXNMZW5ndGg6IDIwNDgsIC8vY2FuIGJlIDEwMjQsIDIwNDgsIG9yIDQwOTZcbiAgICAgICAgICBwdWJsaWNFeHBvbmVudDogbmV3IFVpbnQ4QXJyYXkoWzB4MDEsIDB4MDAsIDB4MDFdKSxcbiAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXG4gICAgICAgIH0sXG4gICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcbiAgICAgICAgWydzaWduJywgJ3ZlcmlmeSddIC8vY2FuIGJlIGFueSBjb21iaW5hdGlvbiBvZiAnc2lnbicgYW5kICd2ZXJpZnknXG5cbiAgICAgICkudGhlbihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgLy9yZXR1cm5zIGEga2V5cGFpciBvYmplY3RcbiAgICAgICAgLy8gQ0xvZyhrZXkpO1xuXG4gICAgICAgIF90aGlzLl9jcnlwdG8uc3VidGxlLmV4cG9ydEtleShcbiAgICAgICAgICAnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXG4gICAgICAgICAga2V5LnB1YmxpY0tleSAvL2NhbiBiZSBhIHB1YmxpY0tleSBvciBwcml2YXRlS2V5LCBhcyBsb25nIGFzIGV4dHJhY3RhYmxlIHdhcyB0cnVlXG4gICAgICAgICkudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcbiAgICAgICAgICAvL3JldHVybnMgdGhlIGV4cG9ydGVkIGtleSBkYXRhXG4gICAgICAgICAga2V5UGFpci5wdWJsaWMgID0gbmV3IFVpbnQ4QXJyYXkocHVibGljS2V5KTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuX2NyeXB0by5zdWJ0bGUuZXhwb3J0S2V5KFxuICAgICAgICAgICAgJ3BrY3M4JywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcbiAgICAgICAgICAgIGtleS5wcml2YXRlS2V5IC8vY2FuIGJlIGEgcHVibGljS2V5IG9yIHByaXZhdGVLZXksIGFzIGxvbmcgYXMgZXh0cmFjdGFibGUgd2FzIHRydWVcbiAgICAgICAgICApO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHByaXZhdGVLZXkpIHtcbiAgICAgICAgICBrZXlQYWlyLnByaXZhdGUgID0gbmV3IFVpbnQ4QXJyYXkocHJpdmF0ZUtleSk7XG5cbiAgICAgICAgICAvLyBDTG9nKCdjcnlwdG8tZ2VuZXJhdGVSU0FLZXlQYWlyJywga2V5UGFpcik7XG4gICAgICAgICAgcmVzb2x2ZShrZXlQYWlyKTtcblxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogR2VuZXJhdGVzIGEgMTI4IGJpdCByYW5kb20gdmFsdWUuXG4gICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgcmFuZG9tIHZhbHVlXG4gICovXG4gIGdlbmVyYXRlSVYoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBhcnJheSA9IG5ldyAgVWludDhBcnJheSgxNik7XG4gICAgX3RoaXMuX2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICogR2VuZXJhdGVzIGEgMjU2IGJpdCByYW5kb20gdmFsdWUuIDMyIGJpdHMgYXJlIGV4dHJhdGVkIGZyb20gdGhlIG1hY2hpbmUgdGltZSxcbiAgKiB0aGUgcmVtYWluaW5nIGFyZSBnZW5lcmF0ZWQgcmFuZG9tbHlcbiAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICByYW5kb20gdmFsdWVcbiAgKi9cbiAgZ2VuZXJhdGVSYW5kb20oKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBhcnJheSA9IG5ldyAgVWludDhBcnJheSgzMik7XG4gICAgX3RoaXMuX2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuXG4gICAgbGV0IGRhdGUgPSBEYXRlLm5vdygpO1xuXG4gICAgLy9DTG9nKCdUSUFHTzogZ2VuZXJhdGVSYW5kb20gZGF0YScsIGRhdGUudG9TdHJpbmcoKSk7XG4gICAgbGV0IGRhdGVFbmNvZGVkID0gX3RoaXMuX3V0ZjhFbmNvZGUoZGF0ZS50b1N0cmluZygpKTtcblxuICAgIC8vZXh0cmFjdCB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgNCBieXRlcyBpbiB0aGUgZGF0ZVxuICAgIGxldCBmaW5hbERhdGUgPSBkYXRlRW5jb2RlZC5zbGljZShkYXRlRW5jb2RlZC5sZW5ndGggLSA0LCBkYXRlRW5jb2RlZC5sZW5ndGgpO1xuXG4gICAgLy8gYWRkIGluIHRoZSBmaXJzdCA0IGJ5dGVzIG9mIHRoZSBhcnJheSB0aGUgYnl0ZXMgZXh0cmFjdGVkIHByZXZpb3VzbHk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHsgYXJyYXlbaV0gPSBmaW5hbERhdGVbaV07IH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgKiBnZW5lcmF0ZXMgYSBwcmVtYXN0ZXIgc2VjcmV0IChQTVMpIG9mIDQ4IGJ5dGVzICgzODQgYml0cykgcmFuZG9tbHlcbiAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICBwcmVtYXN0ZXIgc2VjcmV0IGtleVxuICAqL1xuICBnZW5lcmF0ZVBNUygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoNDgpO1xuICAgIF90aGlzLl9jcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgKiBnZW5lcmF0ZXMgYSBtYXN0ZXJLZXkgc2VjcmV0IChQTVMpIG9mIDQ4IGJ5dGVzICgzODQgYml0cykgdXNpbmcgdGhlIHByZW1hc3RlciBzZWNyZXQgYW5kXG4gICogdHdvIHJhbmRvbXNcbiAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICBtYXN0ZXIgc2VjcmV0IGtleSB3aXRoIDQ4IGJ5dGVzXG4gICovXG4gIGdlbmVyYXRlTWFzdGVyU2VjcmV0KGhtYWNLZXksIGRhdGEpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbGV0IGtleSA9IG5ldyBVaW50OEFycmF5KDQ4KTtcbiAgICAgIGxldCBzZWVkID0gZGF0YTtcblxuICAgICAgX3RoaXMuX2RpZ2VzdChobWFjS2V5KS50aGVuKChkaWdlc3RlZEtleSkgPT4ge1xuXG4gICAgICAgIF90aGlzLmhhc2hITUFDKGRpZ2VzdGVkS2V5LCBzZWVkKS50aGVuKGZ1bmN0aW9uKGtleXBhcnQwKSB7XG5cbiAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDMyIGJ5dGVzIGludG8gdGhlIGtleVxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykgeyBrZXlbaV0gPSBrZXlwYXJ0MFtpXTsgfVxuICAgICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhkaWdlc3RlZEtleSwgc2VlZCArIGtleXBhcnQwKTtcblxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGtleXBhcnQxKSB7XG5cbiAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDE2IGJ5dGVzIHRvIHRoZSBrZXkgcmVtYWluaW5nIDE2IGJ5dGVzXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7IGtleVtpICsgMzJdID0ga2V5cGFydDFbaV07IH1cblxuICAgICAgICAgIC8vIENMb2coJ2NyeXB0by1nZW5lcmF0ZU1hc3RlclNlY3JldCcsIGtleSk7XG4gICAgICAgICAgcmVzb2x2ZShrZXkpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIC8vIENMb2coJ2NyeXB0by1nZW5lcmF0ZU1hc3RlclNlY3JldCcsIGVycik7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIGdlbmVyYXRlcyBib3RoIHVzZXJzIE1BQyBhbmQgZW5jcnlwdGlvbiBrZXlzLiBnZW5lcmF0ZSBhcyBvdXRwdXQgYW4gYXJyYXlcbiAgKiB3aXRoIDQgYnl0ZUFycmF5IGVhY2ggd2l0aCAzMiBieXRlc1xuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAgICAgIHNlY3JldCAgICAgICBzZWNyZXQgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBmdW5jdGlvblxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRhdGEgICAgICAgICBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGFzIHNlZWRcbiAgKiBAcmV0dXJuIHtBcnJheTxieXRlQXJyYXk+fSBrZXkgICAgICAgICAgYXJyYXkgd2l0aCB0aGUgaW5mb3JtYXRpb24gdG8gZ2VuZXJhdGUga2V5c1xuICAqL1xuICBnZW5lcmF0ZUtleXMoaG1hY0tleSwgZGF0YSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGxldCBrZXkgPSBbXTtcbiAgICAgIGxldCBzZWVkID0gZGF0YTtcblxuICAgICAgLy8gaXRlcmF0ZSA0IHRpbWVzIHRvIG9idGFpbiBhIDEwMjQga2V5IHNpemVcbiAgICAgIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQpLnRoZW4oZnVuY3Rpb24oa2V5cGFydDApIHtcbiAgICAgICAga2V5LnB1c2goa2V5cGFydDApO1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCArIGtleXBhcnQwKTtcblxuICAgICAgfSkudGhlbihmdW5jdGlvbihrZXlwYXJ0MSkge1xuICAgICAgICBrZXkucHVzaChrZXlwYXJ0MSk7XG4gICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkICsga2V5cGFydDEpO1xuXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKGtleXBhcnQyKSB7XG4gICAgICAgIGtleS5wdXNoKGtleXBhcnQyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQgKyBrZXlwYXJ0Mik7XG5cbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oa2V5cGFydDMpIHtcbiAgICAgICAga2V5LnB1c2goa2V5cGFydDMpO1xuXG4gICAgICAgIC8vIENMb2coJ2NyeXB0by1nZW5lcmF0ZUtleXMnLCBrZXkpO1xuICAgICAgICByZXNvbHZlKGtleSk7XG5cbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAvLyBDTG9nKCdjcnlwdG8tZ2VuZXJhdGVLZXlzJywgZXJyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcblxuICAgICAgLy8gQ0xvZyhobWFjS2V5LCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2NyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAncGtjczgnLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KVxuICAgICAgICBwcml2S2V5LFxuICAgICAgICB7ICAgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zXG4gICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JyxcbiAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXG4gICAgICAgIH0sXG4gICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcbiAgICAgICAgWydzaWduJ10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xuICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihwcml2YXRlS2V5KSB7XG4gICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KVxuICAgICAgICAvLyBDTG9nKCdjcnlwdG8tX2ltcG9ydFJTQXNpZ25LZXknLCBwcml2YXRlS2V5KTtcbiAgICAgICAgICByZXNvbHZlKHByaXZhdGVLZXkpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBc2lnbktleScsIGVycik7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2NyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXG4gICAgICAgIHB1YktleSxcbiAgICAgICAgeyAgIC8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xuICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsXG4gICAgICAgICAgaGFzaDoge25hbWU6ICdTSEEtMjU2J30gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xuICAgICAgICB9LFxuICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXG4gICAgICAgIFsndmVyaWZ5J10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xuICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcbiAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpXG4gICAgICAgIC8vIENMb2coJ2NyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5JywgcHVibGljS2V5KTtcbiAgICAgICAgICByZXNvbHZlKHB1YmxpY0tleSk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0F2ZXJpZnlLZXknLCBlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9pbXBvcnRSU0FlbmNyeXB0S2V5KHB1YktleSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5fY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICAgICdzcGtpJywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcbiAgICAgICAgcHViS2V5LFxuICAgICAgICB7ICAgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zXG4gICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJyxcbiAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXG4gICAgICAgIH0sXG4gICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcbiAgICAgICAgWydlbmNyeXB0J10gLy8nZW5jcnlwdCcgb3IgJ3dyYXBLZXknIGZvciBwdWJsaWMga2V5IGltcG9ydCBvclxuICAgICAgICAvLydkZWNyeXB0JyBvciAndW53cmFwS2V5JyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xuICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcbiAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpXG4gICAgICAgIC8vIENMb2coJ2NyeXB0by1faW1wb3J0UlNBZW5jcnlwdEtleScsIHB1YmxpY0tleSk7XG4gICAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBZW5jcnlwdEtleScsIGVyci5uYW1lKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBfaW1wb3J0UlNBZGVjcnlwdEtleShwcml2S2V5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIF90aGlzLl9jcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgJ3BrY3M4JywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcbiAgICAgICAgcHJpdktleSxcbiAgICAgICAgeyAgIC8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xuICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXG4gICAgICAgICAgaGFzaDoge25hbWU6ICdTSEEtMjU2J30gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xuICAgICAgICB9LFxuICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXG4gICAgICAgIFsnZGVjcnlwdCddIC8vJ2VuY3J5cHQnIG9yICd3cmFwS2V5JyBmb3IgcHVibGljIGtleSBpbXBvcnQgb3JcbiAgICAgICAgLy8nZGVjcnlwdCcgb3IgJ3Vud3JhcEtleScgZm9yIHByaXZhdGUga2V5IGltcG9ydHNcbiAgICAgIClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xuICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSlcbiAgICAgICAgLy8gQ0xvZygnY3J5cHRvLV9pbXBvcnRSU0FkZWNyeXB0S2V5JywgcHJpdmF0ZUtleSk7XG4gICAgICAgICAgcmVzb2x2ZShwcml2YXRlS2V5KTtcblxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQWRlY3J5cHRLZXknLCBlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbmNhdFBNU3dpdGhSYW5kb21zKHBtcywgdG9SYW5kb20sIGZyb21SYW5kb20pIHtcblxuICAgIGxldCBmaW5hbEtleSA9IG5ldyBVaW50OEFycmF5KHBtcy5sZW5ndGggKyB0b1JhbmRvbS5sZW5ndGggKyBmcm9tUmFuZG9tLmxlbmd0aCk7XG5cbiAgICAvLyBhZGQgUHJlbWFzdGVyS2V5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZpbmFsS2V5W2ldID0gcG1zW2ldO1xuICAgIH1cblxuICAgIC8vYWRkIHRvIHJhbmRvbVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9SYW5kb20ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZpbmFsS2V5W2kgKyBwbXMubGVuZ3RoXSA9IHBtc1tpXTtcbiAgICB9XG5cbiAgICAvL2FkZCBmcm9tIHJhbmRvbVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnJvbVJhbmRvbS5sZW5ndGg7IGkrKykge1xuICAgICAgZmluYWxLZXlbaSArIHBtcy5sZW5ndGggKyB0b1JhbmRvbS5sZW5ndGhdID0gcG1zW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBmaW5hbEtleTtcbiAgfVxuXG4gIF9nZW5lcmF0ZTI1NmJpdEtleSgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBhcnJheSA9IG5ldyAgVWludDhBcnJheSgzMik7XG4gICAgX3RoaXMuX2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICogaW1wb3J0cyB0aGUgc2VjcmV0IHRvIHRoZSBITUFDIGZ1bmN0aW9uXG4gICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgIGFycmF5QnVmZmVyICAgICBieXRlcyB0byBpbXBvcnQgYXMga2V5XG4gICogQHJldHVybiB7SlNPTn0gICAgICAga2V5ICAgICAgICAgICAgICBrZXkgcmVhZHkgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBjcnlwdG9ncmFwaGljIGZ1bmN0aW9uXG4gICovXG4gIF9pbXBvcnRITUFDa2V5KGFycmF5QnVmZmVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgX3RoaXMuX2RpZ2VzdChhcnJheUJ1ZmZlcikudGhlbigoa2V5KSA9PiB7XG5cbiAgICAgICAgX3RoaXMuX2NyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAgICdyYXcnLCAvL2NhbiBiZSAnandrJyBvciAncmF3J1xuICAgICAgICAgIGtleSxcbiAgICAgICAgICB7ICAgLy90aGlzIGlzIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xuICAgICAgICAgICAgbmFtZTogJ0hNQUMnLFxuICAgICAgICAgICAgaGFzaDoge25hbWU6ICdTSEEtMjU2J30sIC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMidcbiAgICAgICAgICAgIGxlbmd0aDogMjU2IC8vb3B0aW9uYWwsIGlmIHlvdSB3YW50IHlvdXIga2V5IGxlbmd0aCB0byBkaWZmZXIgZnJvbSB0aGUgaGFzaCBmdW5jdGlvbidzIGJsb2NrIGxlbmd0aFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KVxuICAgICAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5J1xuICAgICAgICApLnRoZW4oZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgLy9yZXR1cm5zIHRoZSBzeW1tZXRyaWMga2V5XG4gICAgICAgICAgLy8gQ0xvZygnY3J5cHRvLV9pbXBvcnRITUFDa2V5Jywga2V5KTtcbiAgICAgICAgICByZXNvbHZlKGtleSk7XG4gICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9kaWdlc3QodmFsdWUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2NyeXB0by5zdWJ0bGUuZGlnZXN0KFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ1NIQS0yNTYnXG4gICAgICAgIH0sXG4gICAgICAgIHZhbHVlIC8vVGhlIGRhdGEgeW91IHdhbnQgdG8gaGFzaCBhcyBhbiBBcnJheUJ1ZmZlclxuICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihoYXNoKSB7XG4gICAgICAgIC8vcmV0dXJucyB0aGUgaGFzaCBhcyBhbiBBcnJheUJ1ZmZlclxuICAgICAgICAvLyBDTG9nKCdjcnlwdG8tZGlnZXN0JywgbmV3IFVpbnQ4QXJyYXkoaGFzaCkpO1xuICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoaGFzaCkpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgX2ltcG9ydEFFU2tleShhcnJheUJ1ZmZlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2NyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdydcbiAgICAgICAgYXJyYXlCdWZmZXIsXG4gICAgICAgIHsgICAvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zXG4gICAgICAgICAgbmFtZTogJ0FFUy1DQkMnXG4gICAgICAgIH0sXG4gICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcbiAgICAgICAgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSAvL2NhbiBiZSAnZW5jcnlwdCcsICdkZWNyeXB0JywgJ3dyYXBLZXknLCBvciAndW53cmFwS2V5J1xuICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgLy9yZXR1cm5zIHRoZSBzeW1tZXRyaWMga2V5XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdjcnlwdG8taW1wb3J0QUVTa2V5Jywga2V5KTtcbiAgICAgICAgICByZXNvbHZlKGtleSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8taW1wb3J0QUVTa2V5JywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBfdXRmOEVuY29kZShzKSB7XG4gICAgcmV0dXJuIHRoaXMuY3J5cHRvVVRGOEVuY29kZXIocyk7XG5cbiAgICAvL3JldHVybiBuZXcgVGV4dEVuY29kZXIoJ3V0Zi04JykuZW5jb2RlKHMpO1xuICAgIC8vcmV0dXJuIGVuY29kZVVURjgocyk7XG4gIH1cblxuICBfdXRmOERlY29kZShzKSB7XG4gICAgcmV0dXJuIHRoaXMuY3J5cHRvVVRGOERlY29kZXIocyk7XG5cbiAgICAvL3JldHVybiBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JykuZGVjb2RlKHMpO1xuICAgIC8vcmV0dXJuIGRlY29kZVVURjgocyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gQ0xvZyhhMSwgYTIpIHtcbiAgY29uc29sZS5sb2coYTEsIGEyKTtcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBDcnlwdG87XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2lkZW50aXR5L0NyeXB0by5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBOzs7QUFDQTs7OztBQUlBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBREE7QUFJQTtBQUxBO0FBUUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBREE7QUFJQTtBQUxBO0FBQ0E7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFEQTtBQUlBO0FBTEE7QUFRQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBREE7QUFJQTtBQUNBO0FBTkE7QUFTQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQVFBO0FBVEE7QUFZQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRkE7QUFLQTtBQU5BO0FBQ0E7QUFTQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFEQTtBQUlBO0FBTEE7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBREE7QUFJQTtBQUNBO0FBTkE7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFHQTtBQUNBO0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUdBO0FBUkE7QUFXQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUdBO0FBUkE7QUFXQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFBQTtBQUdBO0FBQ0E7QUFUQTtBQVlBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBR0E7QUFDQTtBQVRBO0FBWUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBVEE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQURBO0FBREE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQURBO0FBSUE7QUFQQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///467\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.encodeUTF8 = encodeUTF8;\nexports.decodeUTF8 = decodeUTF8;\n// Marshals a string to Uint8Array.\nfunction encodeUTF8(s) {\n\tvar i = 0;\n\tvar bytes = new Uint8Array(s.length * 4);\n\tfor (var ci = 0; ci != s.length; ci++) {\n\t\ttry {\n\t\t\tvar xxx = s.charCodeAt(ci);\n\t\t} catch (err) {\n\t\t\tconsole.log(err.message);\n\t\t\treturn;\n\t\t}\n\t\tvar c = s.charCodeAt(ci);\n\t\tif (c < 128) {\n\t\t\tbytes[i++] = c;\n\t\t\tcontinue;\n\t\t}\n\t\tif (c < 2048) {\n\t\t\tbytes[i++] = c >> 6 | 192;\n\t\t} else {\n\t\t\tif (c > 0xd7ff && c < 0xdc00) {\n\t\t\t\tif (++ci == s.length) throw 'UTF-8 encode: incomplete surrogate pair';\n\t\t\t\tvar c2 = s.charCodeAt(ci);\n\t\t\t\tif (c2 < 0xdc00 || c2 > 0xdfff) throw 'UTF-8 encode: second char code 0x' + c2.toString(16) + ' at index ' + ci + ' in surrogate pair out of range';\n\t\t\t\tc = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n\t\t\t\tbytes[i++] = c >> 18 | 240;\n\t\t\t\tbytes[i++] = c >> 12 & 63 | 128;\n\t\t\t} else {\n\t\t\t\t// c <= 0xffff\n\t\t\t\tbytes[i++] = c >> 12 | 224;\n\t\t\t}\n\t\t\tbytes[i++] = c >> 6 & 63 | 128;\n\t\t}\n\t\tbytes[i++] = c & 63 | 128;\n\t}\n\treturn bytes.subarray(0, i);\n}\n\n// Unmarshals an Uint8Array to string.\nfunction decodeUTF8(bytes) {\n\tvar s = '';\n\tvar i = 0;\n\twhile (i < bytes.length) {\n\t\tvar c = bytes[i++];\n\t\tif (c > 127) {\n\t\t\tif (c > 191 && c < 224) {\n\t\t\t\tif (i >= bytes.length) throw 'UTF-8 decode: incomplete 2-byte sequence';\n\t\t\t\tc = (c & 31) << 6 | bytes[i] & 63;\n\t\t\t} else if (c > 223 && c < 240) {\n\t\t\t\tif (i + 1 >= bytes.length) throw 'UTF-8 decode: incomplete 3-byte sequence';\n\t\t\t\tc = (c & 15) << 12 | (bytes[i] & 63) << 6 | bytes[++i] & 63;\n\t\t\t} else if (c > 239 && c < 248) {\n\t\t\t\tif (i + 2 >= bytes.length) throw 'UTF-8 decode: incomplete 4-byte sequence';\n\t\t\t\tc = (c & 7) << 18 | (bytes[i] & 63) << 12 | (bytes[++i] & 63) << 6 | bytes[++i] & 63;\n\t\t\t} else throw 'UTF-8 decode: unknown multibyte start 0x' + c.toString(16) + ' at index ' + (i - 1);\n\t\t\t++i;\n\t\t}\n\n\t\tif (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {\n\t\t\tc -= 0x10000;\n\t\t\ts += String.fromCharCode(c >> 10 | 0xd800);\n\t\t\ts += String.fromCharCode(c & 0x3FF | 0xdc00);\n\t\t} else throw 'UTF-8 decode: code point 0x' + c.toString(16) + ' exceeds UTF-16 reach';\n\t}\n\treturn s;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9pZGVudGl0eS91dGY4LmpzPzkyY2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTWFyc2hhbHMgYSBzdHJpbmcgdG8gVWludDhBcnJheS5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVVVEY4KHMpIHtcblx0dmFyIGkgPSAwO1xuXHR2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShzLmxlbmd0aCAqIDQpO1xuXHRmb3IgKHZhciBjaSA9IDA7IGNpICE9IHMubGVuZ3RoOyBjaSsrKSB7XG4gICAgdHJ5e1xuICAgICAgdmFyIHh4eCA9IHMuY2hhckNvZGVBdChjaSk7XG4gICAgfSBjYXRjaCAoZXJyKXtcbiAgICAgIGNvbnNvbGUubG9nKGVyci5tZXNzYWdlKTtcbiAgICAgIHJldHVybjtcblxuICAgIH1cblx0XHR2YXIgYyA9IHMuY2hhckNvZGVBdChjaSk7XG5cdFx0aWYgKGMgPCAxMjgpIHtcblx0XHRcdGJ5dGVzW2krK10gPSBjO1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmIChjIDwgMjA0OCkge1xuXHRcdFx0Ynl0ZXNbaSsrXSA9IGMgPj4gNiB8IDE5Mjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKGMgPiAweGQ3ZmYgJiYgYyA8IDB4ZGMwMCkge1xuXHRcdFx0XHRpZiAoKytjaSA9PSBzLmxlbmd0aCkgdGhyb3cgJ1VURi04IGVuY29kZTogaW5jb21wbGV0ZSBzdXJyb2dhdGUgcGFpcic7XG5cdFx0XHRcdHZhciBjMiA9IHMuY2hhckNvZGVBdChjaSk7XG5cdFx0XHRcdGlmIChjMiA8IDB4ZGMwMCB8fCBjMiA+IDB4ZGZmZikgdGhyb3cgJ1VURi04IGVuY29kZTogc2Vjb25kIGNoYXIgY29kZSAweCcgKyBjMi50b1N0cmluZygxNikgKyAnIGF0IGluZGV4ICcgKyBjaSArICcgaW4gc3Vycm9nYXRlIHBhaXIgb3V0IG9mIHJhbmdlJztcblx0XHRcdFx0YyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChjMiAmIDB4MDNmZik7XG5cdFx0XHRcdGJ5dGVzW2krK10gPSBjID4+IDE4IHwgMjQwO1xuXHRcdFx0XHRieXRlc1tpKytdID0gYz4+IDEyICYgNjMgfCAxMjg7XG5cdFx0XHR9IGVsc2UgeyAvLyBjIDw9IDB4ZmZmZlxuXHRcdFx0XHRieXRlc1tpKytdID0gYyA+PiAxMiB8IDIyNDtcblx0XHRcdH1cblx0XHRcdGJ5dGVzW2krK10gPSBjID4+IDYgJiA2MyB8IDEyODtcblx0XHR9XG5cdFx0Ynl0ZXNbaSsrXSA9IGMgJiA2MyB8IDEyODtcblx0fVxuXHRyZXR1cm4gYnl0ZXMuc3ViYXJyYXkoMCwgaSk7XG59XG5cbi8vIFVubWFyc2hhbHMgYW4gVWludDhBcnJheSB0byBzdHJpbmcuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlVVRGOChieXRlcykge1xuXHR2YXIgcyA9ICcnO1xuXHR2YXIgaSA9IDA7XG5cdHdoaWxlIChpIDwgYnl0ZXMubGVuZ3RoKSB7XG5cdFx0dmFyIGMgPSBieXRlc1tpKytdO1xuXHRcdGlmIChjID4gMTI3KSB7XG5cdFx0XHRpZiAoYyA+IDE5MSAmJiBjIDwgMjI0KSB7XG5cdFx0XHRcdGlmIChpID49IGJ5dGVzLmxlbmd0aCkgdGhyb3cgJ1VURi04IGRlY29kZTogaW5jb21wbGV0ZSAyLWJ5dGUgc2VxdWVuY2UnO1xuXHRcdFx0XHRjID0gKGMgJiAzMSkgPDwgNiB8IGJ5dGVzW2ldICYgNjM7XG5cdFx0XHR9IGVsc2UgaWYgKGMgPiAyMjMgJiYgYyA8IDI0MCkge1xuXHRcdFx0XHRpZiAoaSArIDEgPj0gYnl0ZXMubGVuZ3RoKSB0aHJvdyAnVVRGLTggZGVjb2RlOiBpbmNvbXBsZXRlIDMtYnl0ZSBzZXF1ZW5jZSc7XG5cdFx0XHRcdGMgPSAoYyAmIDE1KSA8PCAxMiB8IChieXRlc1tpXSAmIDYzKSA8PCA2IHwgYnl0ZXNbKytpXSAmIDYzO1xuXHRcdFx0fSBlbHNlIGlmIChjID4gMjM5ICYmIGMgPCAyNDgpIHtcblx0XHRcdFx0aWYgKGkrMiA+PSBieXRlcy5sZW5ndGgpIHRocm93ICdVVEYtOCBkZWNvZGU6IGluY29tcGxldGUgNC1ieXRlIHNlcXVlbmNlJztcblx0XHRcdFx0YyA9IChjICYgNykgPDwgMTggfCAoYnl0ZXNbaV0gJiA2MykgPDwgMTIgfCAoYnl0ZXNbKytpXSAmIDYzKSA8PCA2IHwgYnl0ZXNbKytpXSAmIDYzO1xuXHRcdFx0fSBlbHNlIHRocm93ICdVVEYtOCBkZWNvZGU6IHVua25vd24gbXVsdGlieXRlIHN0YXJ0IDB4JyArIGMudG9TdHJpbmcoMTYpICsgJyBhdCBpbmRleCAnICsgKGkgLSAxKTtcblx0XHRcdCsraTtcblx0XHR9XG5cblx0XHRpZiAoYyA8PSAweGZmZmYpIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjKTtcblx0XHRlbHNlIGlmIChjIDw9IDB4MTBmZmZmKSB7XG5cdFx0XHRjIC09IDB4MTAwMDA7XG5cdFx0XHRzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYyA+PiAxMCB8IDB4ZDgwMClcblx0XHRcdHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjICYgMHgzRkYgfCAweGRjMDApXG5cdFx0fSBlbHNlIHRocm93ICdVVEYtOCBkZWNvZGU6IGNvZGUgcG9pbnQgMHgnICsgYy50b1N0cmluZygxNikgKyAnIGV4Y2VlZHMgVVRGLTE2IHJlYWNoJztcblx0fVxuXHRyZXR1cm4gcztcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvaWRlbnRpdHkvdXRmOC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQTtBQXFDQTtBQXRDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///468\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* fake class for the gui to select the identity,\n* TODO replace with the proper identity GUI\n*\n*/\nvar GuiFake = function GuiFake(url, messageBus) {\n  (0, _classCallCheck3.default)(this, GuiFake);\n\n  console.log('FakeGUI_deployed');\n  var _this = this;\n\n  _this._url = url;\n  _this._waitTime = 10000;\n  _this._messageBus = messageBus;\n\n  _this._messageBus.addListener(_this._url, function (msg) {\n\n    if (msg.hasOwnProperty('type') && msg.type === 'create' && msg.body.hasOwnProperty('value') && msg.body.value.hasOwnProperty('identities') && msg.body.value.hasOwnProperty('idps')) {\n\n      var identities = msg.body.value.identities;\n      var idps = msg.body.value.idps;\n\n      var value = void 0;\n\n      if (identities[0] !== undefined) {\n        value = { type: 'identity', value: identities[0], code: 200 };\n      } else {\n        value = { type: 'idp', value: idps[0].domain, code: 200 };\n      }\n\n      var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n\n      // to test on the identity side the listener without the timeout\n      // can represent the time the user takes to choose and identity\n      if (msg.body.value === 'wait') {\n\n        setTimeout(function () {\n          _this._messageBus.postMessage(replyMsg);\n        }, _this._waitTime);\n      } else {\n        _this._messageBus.postMessage(replyMsg);\n      }\n    } else {\n      console.log('Ignoring messages not intended to FakeGUI.', msg);\n    }\n  });\n};\n\nexports.default = GuiFake;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9pZGVudGl0eS9HdWlGYWtlLmpzP2Q4YTciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIGZha2UgY2xhc3MgZm9yIHRoZSBndWkgdG8gc2VsZWN0IHRoZSBpZGVudGl0eSxcbiogVE9ETyByZXBsYWNlIHdpdGggdGhlIHByb3BlciBpZGVudGl0eSBHVUlcbipcbiovXG5jbGFzcyBHdWlGYWtlIHtcblxuICBjb25zdHJ1Y3Rvcih1cmwsIG1lc3NhZ2VCdXMpIHtcbiAgICBjb25zb2xlLmxvZygnRmFrZUdVSV9kZXBsb3llZCcpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fdXJsID0gdXJsO1xuICAgIF90aGlzLl93YWl0VGltZSA9IDEwMDAwO1xuICAgIF90aGlzLl9tZXNzYWdlQnVzID0gbWVzc2FnZUJ1cztcblxuICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIG1zZyA9PiB7XG5cbiAgICAgIGlmIChtc2cuaGFzT3duUHJvcGVydHkoJ3R5cGUnKSAmJlxuICAgICAgICAgIG1zZy50eXBlID09PSAnY3JlYXRlJyAmJlxuICAgICAgICAgIG1zZy5ib2R5Lmhhc093blByb3BlcnR5KCd2YWx1ZScpICYmXG4gICAgICAgICAgbXNnLmJvZHkudmFsdWUuaGFzT3duUHJvcGVydHkoJ2lkZW50aXRpZXMnKSAmJlxuICAgICAgICAgIG1zZy5ib2R5LnZhbHVlLmhhc093blByb3BlcnR5KCdpZHBzJykpIHtcblxuICAgICAgICBsZXQgaWRlbnRpdGllcyA9IG1zZy5ib2R5LnZhbHVlLmlkZW50aXRpZXM7XG4gICAgICAgIGxldCBpZHBzID0gbXNnLmJvZHkudmFsdWUuaWRwcztcblxuICAgICAgICBsZXQgdmFsdWU7XG5cbiAgICAgICAgaWYgKGlkZW50aXRpZXNbMF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhbHVlID0ge3R5cGU6ICdpZGVudGl0eScsIHZhbHVlOiBpZGVudGl0aWVzWzBdLCBjb2RlOiAyMDB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0ge3R5cGU6ICdpZHAnLCB2YWx1ZTogaWRwc1swXS5kb21haW4sIGNvZGU6IDIwMH07XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVwbHlNc2cgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHZhbHVlfTtcblxuICAgICAgICAvLyB0byB0ZXN0IG9uIHRoZSBpZGVudGl0eSBzaWRlIHRoZSBsaXN0ZW5lciB3aXRob3V0IHRoZSB0aW1lb3V0XG4gICAgICAgIC8vIGNhbiByZXByZXNlbnQgdGhlIHRpbWUgdGhlIHVzZXIgdGFrZXMgdG8gY2hvb3NlIGFuZCBpZGVudGl0eVxuICAgICAgICBpZiAobXNnLmJvZHkudmFsdWUgPT09ICd3YWl0Jykge1xuXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gICAgICAgICAgfSwgX3RoaXMuX3dhaXRUaW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdJZ25vcmluZyBtZXNzYWdlcyBub3QgaW50ZW5kZWQgdG8gRmFrZUdVSS4nLCBtc2cpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgR3VpRmFrZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvaWRlbnRpdHkvR3VpRmFrZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7O0FBS0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///469\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _ActionsService = __webpack_require__(471);\n\nvar _ActionsService2 = _interopRequireDefault(_ActionsService);\n\nvar _PDP = __webpack_require__(472);\n\nvar _PDP2 = _interopRequireDefault(_PDP);\n\nvar _Policy = __webpack_require__(473);\n\nvar _Policy2 = _interopRequireDefault(_Policy);\n\nvar _utils = __webpack_require__(15);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('PEP'); // Log System\n\nvar PEP = function () {\n\n  /**\n  * Creates a Policy Enforcement Point (PEP) instance\n  * @param    {Object}    context\n  */\n  function PEP(context) {\n    (0, _classCallCheck3.default)(this, PEP);\n\n    var _this = this;\n\n    _this.pdp = new _PDP2.default(context);\n    _this.actionsService = new _ActionsService2.default(context);\n    _this.context = context;\n    context.pep = _this;\n\n    //TODO should be added a trigger to verify when the loadConfigurations is successfully completed\n    context.loadConfigurations();\n  }\n\n  /**\n  * return the messageBus in this Registry\n  * @param {MessageBus}           messageBus\n  */\n\n\n  (0, _createClass3.default)(PEP, [{\n    key: 'addGUIListeners',\n    value: function addGUIListeners() {\n      var _this = this;\n\n      _this.context.messageBus.addListener(_this.context.pepURL, function (msg) {\n        var funcName = msg.body.method;\n\n        var returnedValue = void 0;\n        if (funcName === 'addToGroup') {\n          var groupName = msg.body.params.groupName;\n          var userEmail = msg.body.params.userEmail;\n          returnedValue = _this.context.addToGroup(groupName, userEmail);\n        } else if (funcName === 'createGroup') {\n          var _groupName = msg.body.params.groupName;\n          returnedValue = _this.context.createGroup(_groupName);\n        } else if (funcName === 'addPolicy') {\n          var source = msg.body.params.source;\n          var key = msg.body.params.key;\n          var policy = msg.body.params.policy;\n          var combiningAlgorithm = msg.body.params.combiningAlgorithm;\n          returnedValue = _this.addPolicy(source, key, policy, combiningAlgorithm);\n        } else if (funcName === 'deleteGroup') {\n          var _groupName2 = msg.body.params.groupName;\n          returnedValue = _this.context.deleteGroup(_groupName2);\n        } else if (funcName === 'removePolicy') {\n          var _source = msg.body.params.source;\n          var _key = msg.body.params.key;\n          returnedValue = _this.removePolicy(_source, _key);\n        } else if (funcName === 'savePolicies') {\n          var _source2 = msg.body.params.source;\n          returnedValue = _this.context.savePolicies(_source2);\n        } else if (funcName === 'userPolicies') {\n          returnedValue = _this.context.userPolicies;\n        } else if (funcName === 'activeUserPolicy') {\n          var userPolicy = msg.body.params.userPolicy;\n          if (userPolicy) {\n            _this.context.activeUserPolicy = userPolicy;\n          }\n          returnedValue = _this.context.activeUserPolicy;\n        } else if (funcName === 'userPolicy') {\n          var _key2 = msg.body.params.key;\n          returnedValue = _this.context.userPolicies[_key2];\n        } else if (funcName === 'saveActivePolicy') {\n          returnedValue = _this.context.saveActivePolicy();\n        } else if (funcName === 'getMyEmails') {\n          returnedValue = _this.context.getMyEmails();\n        } else if (funcName === 'getMyHyperties') {\n          returnedValue = _this.context.getMyHyperties();\n        } else if (funcName === 'groups') {\n          returnedValue = _this.context.groups;\n        } else if (funcName === 'getGroupsNames') {\n          returnedValue = _this.context.getGroupsNames();\n        }if (funcName === 'removeFromGroup') {\n          var _groupName3 = msg.body.params.groupName;\n          var _userEmail = msg.body.params.userEmail;\n          returnedValue = _this.context.removeFromGroup(_groupName3, _userEmail);\n        }\n\n        var value = { type: 'execute', value: returnedValue, code: 200 };\n        var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };\n        _this.context.messageBus.postMessage(replyMsg);\n      });\n    }\n\n    /**\n    * Adds a policy to the Policy Enforcement Point (PEP). The policy can be created by the service\n    * provider or by the user.\n    * @param    {String}    source\n    * @param    {String}    key\n    * @param    {Object}    policy\n    */\n\n  }, {\n    key: 'addPolicy',\n    value: function addPolicy(source, key, policy, combiningAlgorithm) {\n      if (!source) throw new Error('source is not defined');\n      if (!key) throw new Error('key is not defined');\n\n      if (policy === undefined) {\n        policy = new _Policy2.default(key, [], [], combiningAlgorithm);\n      } else {\n        if (!(policy instanceof _Policy2.default)) {\n          policy = new _Policy2.default(policy.key, policy.rules, policy.actions, policy.combiningAlgorithm);\n        }\n      }\n\n      switch (source) {\n        case 'SERVICE_PROVIDER':\n          this.context.savePolicies(source, policy, key);\n          break;\n        case 'USER':\n          this.context.userPolicies[key] = policy;\n          this.context.savePolicies(source);\n          break;\n        default:\n          throw Error('Unknown policy source: ' + source);\n      }\n    }\n  }, {\n    key: 'authorise',\n    value: function authorise(message) {\n      var _this2 = this;\n\n      // log.log('[Policy.PEP Authorise] ', message);\n      // log.log(message);\n      if (!message) throw new Error('message is not defined');\n      if (!message.from) throw new Error('message.from is not defined');\n      if (!message.to) throw new Error('message.to is not defined');\n      if (!message.type) throw new Error('message.type is not defined');\n      message.body = message.body || {};\n\n      return new _promise2.default(function (resolve, reject) {\n\n        message.body = message.body || {};\n        var _this = _this2;\n        var result = void 0;\n        if (_this._isToVerify(message)) {\n          var isIncoming = _this._isIncomingMessage(message);\n          _this.context.prepareForEvaluation(message, isIncoming).then(function (message) {\n            result = _this.pdp.evaluatePolicies(message, isIncoming);\n            if (result === 'Not Applicable') {\n              result = _this.context.defaultBehaviour;\n              message.body.auth = false;\n            }\n            _this.actionsService.enforcePolicies(message, isIncoming).then(function (messages) {\n              for (var i in messages) {\n                message = messages[i];\n                _this.context.prepareToForward(message, isIncoming, result).then(function (message) {\n                  if (result) {\n                    /*  if (isIncoming && message.body.identity) {\n                        delete message.body.identity.assertion;\n                        delete message.body.identity.expires;\n                      } */\n                    message.body.auth = message.body.auth === undefined ? true : message.body.auth;\n                    resolve(message);\n                  } else {\n                    var errorMessage = { body: { code: 403, description: 'Blocked by policy' }, from: message.to, to: message.from, type: 'response' };\n                    reject(errorMessage);\n                  }\n                }, function (error) {\n                  reject(error);\n                });\n              }\n            }, function (error) {\n              reject(error);\n            });\n          }, function (error) {\n            reject(error);\n          });\n        } else {\n          result = _this.context.defaultBehaviour;\n          if (result) {\n            message.body.auth = false;\n            resolve(message);\n          } else {\n            var errorMessage = { body: { code: 403, description: 'Blocked by policy' }, from: message.to, to: message.from, type: 'response' };\n            reject(errorMessage);\n          }\n        }\n      });\n    }\n  }, {\n    key: 'authoriseSync',\n    value: function authoriseSync(message) {\n      var result = void 0;\n      message.body = message.body || {};\n      if (this._isToVerify(message)) {\n        var isIncoming = this._isIncomingMessage(message);\n        message = this.context.prepareForEvaluation(message, isIncoming);\n        result = this.pdp.evaluatePolicies(message, isIncoming);\n        if (result === 'Not Applicable') {\n          result = this.context.defaultBehaviour;\n          message.body.auth = false;\n        }\n        this.actionsService.enforcePolicies(message, isIncoming);\n        message = this.context.prepareToForward(message, isIncoming, result);\n        if (result) {\n          message.body.auth = message.body.auth === undefined ? true : message.body.auth;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        result = this.context.defaultBehaviour;\n        if (result) {\n          message.body.auth = false;\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n  }, {\n    key: '_isIncomingMessage',\n    value: function _isIncomingMessage(message) {\n      var from = void 0;\n\n      if (message.type === 'forward') {\n        log.info('[PEP - isIncomingMessage] - message.type: ', message.type);\n        from = message.body.from;\n      } else if (message.body.hasOwnProperty('source') && message.body.source) {\n        log.info('[PEP - isIncomingMessage] - message.body.source: ', message.body.source);\n        from = message.body.source;\n      } else if (message.body.hasOwnProperty('subscriber') && message.body.subscriber) {\n        //TODO: this subscriber validation should not exist, because is outdated\n        //TODO: the syncher and syncher manager not following the correct spec;\n        log.info('[PEP - isIncomingMessage] - message.body.subscriber: ', message.body.subscriber);\n        from = message.body.subscriber;\n      } else if (message.body.hasOwnProperty('reporter') && message.body.reporter) {\n        //TODO: this subscriber validation should not exist, because is outdated\n        //TODO: the syncher and syncher manager not following the correct spec;\n        log.info('[PEP - isIncomingMessage] - message.body.reporter: ', message.body.reporter);\n        from = message.body.reporter;\n      } else {\n        log.info('[PEP - isIncomingMessage] - message.from ', message.from);\n        from = message.from;\n      }\n\n      log.info('[PEP - isIncomingMessage] - check if isLocal: ', from);\n      return !this.context.isLocal(from);\n    }\n\n    /**\n    * Identifies the messages to be verified by the Policy Engine\n    * @param    {Message}   message\n    * @returns  {boolean}   returns true if the message requires encryption/decryption\n    *                       or if its type equals 'handshake'; false otherwise\n    */\n\n  }, {\n    key: '_isToVerify',\n    value: function _isToVerify(message) {\n      var schemasToIgnore = ['domain', 'domain-idp', 'global', 'hyperty-runtime', 'runtime'];\n      var splitFrom = message.from.split('://');\n      var fromSchema = splitFrom[0];\n      var splitTo = message.to.split('://');\n      var toSchema = splitTo[0];\n      var from = message.from;\n      var to = message.to;\n\n      // Signalling messages between P2P Stubs don't have to be verified. FFS\n\n      if (message.body && message.body.source) {\n        from = message.body.source;\n      }\n\n      if (message.body && message.body.subscriber) {\n        from = message.body.subscriber;\n      }\n\n      if (from.indexOf('/p2phandler/') !== -1 || from.indexOf('/p2prequester/') !== -1 || to.indexOf('/p2phandler/') !== -1 || to.indexOf('/p2prequester/') !== -1) {\n        return false;\n      }\n\n      // hack to disable Identity verification for messages coming from legacy domains while solution is not implemented\n\n      if (this.context.isInterworkingProtoStub(from)) {\n        return false;\n      }\n\n      if (message.from === fromSchema || message.to === toSchema || message.type === 'read' || message.type === 'response' || (0, _utils.isHypertyURL)(message.from) && message.type === 'delete') {\n        return false;\n      } else {\n        return schemasToIgnore.indexOf(fromSchema) === -1 || schemasToIgnore.indexOf(toSchema) === -1;\n      }\n    }\n  }, {\n    key: 'removePolicy',\n    value: function removePolicy(source, key) {\n      if (!source) throw new Error('source is not defined');\n      if (source !== '*' && !key) throw new Error('key is not defined');\n\n      switch (source) {\n        case '*':\n          this.context.serviceProviderPolicy = {};\n          this.context.userPolicies = {};\n          this.context.activeUserPolicy = undefined;\n          this.context.savePolicies('USER');\n          this.context.savePolicies('SERVICE_PROVIDER');\n          this.context.saveActivePolicy();\n          break;\n        case 'SERVICE_PROVIDER':\n          delete this.context.serviceProviderPolicy[key];\n          this.context.savePolicies();\n          break;\n        case 'USER':\n          delete this.context.userPolicies[key];\n          if (key === this.context.activeUserPolicy) {\n            this.context.activeUserPolicy = undefined;\n            this.context.saveActivePolicy();\n          }\n          this.context.savePolicies('USER');\n          break;\n        default:\n          throw Error('Unknown policy source: ' + source);\n      }\n    }\n  }, {\n    key: 'messageBus',\n    get: function get() {\n      var _this = this;\n      return _this.context.messageBus;\n    }\n\n    /**\n    * Set the messageBus in this Registry\n    * @param {MessageBus}           messageBus\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n      _this.context.messageBus = messageBus;\n      _this.addGUIListeners();\n    }\n  }]);\n  return PEP;\n}();\n\nexports.default = PEP;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvUEVQLmpzPzQ3ZjIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTG9nIFN5c3RlbVxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJ2xvZ2xldmVsJztcbmxldCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdQRVAnKTtcblxuaW1wb3J0IEFjdGlvbnNTZXJ2aWNlIGZyb20gJy4vQWN0aW9uc1NlcnZpY2UnO1xuaW1wb3J0IFBEUCBmcm9tICcuL1BEUCc7XG5pbXBvcnQgUG9saWN5IGZyb20gJy4vUG9saWN5JztcbmltcG9ydCB7aXNIeXBlcnR5VVJMfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmNsYXNzIFBFUCB7XG5cbiAgLyoqXG4gICogQ3JlYXRlcyBhIFBvbGljeSBFbmZvcmNlbWVudCBQb2ludCAoUEVQKSBpbnN0YW5jZVxuICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICBjb250ZXh0XG4gICovXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMucGRwID0gbmV3IFBEUChjb250ZXh0KTtcbiAgICBfdGhpcy5hY3Rpb25zU2VydmljZSA9IG5ldyBBY3Rpb25zU2VydmljZShjb250ZXh0KTtcbiAgICBfdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICBjb250ZXh0LnBlcCA9IF90aGlzO1xuXG4gICAgLy9UT0RPIHNob3VsZCBiZSBhZGRlZCBhIHRyaWdnZXIgdG8gdmVyaWZ5IHdoZW4gdGhlIGxvYWRDb25maWd1cmF0aW9ucyBpcyBzdWNjZXNzZnVsbHkgY29tcGxldGVkXG4gICAgY29udGV4dC5sb2FkQ29uZmlndXJhdGlvbnMoKTtcbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5jb250ZXh0Lm1lc3NhZ2VCdXM7XG4gIH1cblxuICAvKipcbiAgKiBTZXQgdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeVxuICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXNcbiAgKi9cbiAgc2V0IG1lc3NhZ2VCdXMobWVzc2FnZUJ1cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuY29udGV4dC5tZXNzYWdlQnVzID0gbWVzc2FnZUJ1cztcbiAgICBfdGhpcy5hZGRHVUlMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGFkZEdVSUxpc3RlbmVycygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuY29udGV4dC5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKF90aGlzLmNvbnRleHQucGVwVVJMLCAobXNnKSA9PiB7XG4gICAgICBsZXQgZnVuY05hbWUgPSBtc2cuYm9keS5tZXRob2Q7XG5cbiAgICAgIGxldCByZXR1cm5lZFZhbHVlO1xuICAgICAgaWYgKGZ1bmNOYW1lID09PSAnYWRkVG9Hcm91cCcpIHtcbiAgICAgICAgbGV0IGdyb3VwTmFtZSA9IG1zZy5ib2R5LnBhcmFtcy5ncm91cE5hbWU7XG4gICAgICAgIGxldCB1c2VyRW1haWwgPSBtc2cuYm9keS5wYXJhbXMudXNlckVtYWlsO1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gX3RoaXMuY29udGV4dC5hZGRUb0dyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKTtcbiAgICAgIH0gZWxzZSBpZiAoZnVuY05hbWUgPT09ICdjcmVhdGVHcm91cCcpIHtcbiAgICAgICAgbGV0IGdyb3VwTmFtZSA9IG1zZy5ib2R5LnBhcmFtcy5ncm91cE5hbWU7XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSBfdGhpcy5jb250ZXh0LmNyZWF0ZUdyb3VwKGdyb3VwTmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAnYWRkUG9saWN5Jykge1xuICAgICAgICBsZXQgc291cmNlID0gbXNnLmJvZHkucGFyYW1zLnNvdXJjZTtcbiAgICAgICAgbGV0IGtleSA9IG1zZy5ib2R5LnBhcmFtcy5rZXk7XG4gICAgICAgIGxldCBwb2xpY3kgPSBtc2cuYm9keS5wYXJhbXMucG9saWN5O1xuICAgICAgICBsZXQgY29tYmluaW5nQWxnb3JpdGhtID0gbXNnLmJvZHkucGFyYW1zLmNvbWJpbmluZ0FsZ29yaXRobTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IF90aGlzLmFkZFBvbGljeShzb3VyY2UsIGtleSwgcG9saWN5LCBjb21iaW5pbmdBbGdvcml0aG0pO1xuICAgICAgfSBlbHNlIGlmIChmdW5jTmFtZSA9PT0gJ2RlbGV0ZUdyb3VwJykge1xuICAgICAgICBsZXQgZ3JvdXBOYW1lID0gbXNnLmJvZHkucGFyYW1zLmdyb3VwTmFtZTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IF90aGlzLmNvbnRleHQuZGVsZXRlR3JvdXAoZ3JvdXBOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAoZnVuY05hbWUgPT09ICdyZW1vdmVQb2xpY3knKSB7XG4gICAgICAgIGxldCBzb3VyY2UgPSBtc2cuYm9keS5wYXJhbXMuc291cmNlO1xuICAgICAgICBsZXQga2V5ID0gbXNnLmJvZHkucGFyYW1zLmtleTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IF90aGlzLnJlbW92ZVBvbGljeShzb3VyY2UsIGtleSk7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAnc2F2ZVBvbGljaWVzJykge1xuICAgICAgICBsZXQgc291cmNlID0gbXNnLmJvZHkucGFyYW1zLnNvdXJjZTtcbiAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IF90aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKHNvdXJjZSk7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAndXNlclBvbGljaWVzJykge1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gX3RoaXMuY29udGV4dC51c2VyUG9saWNpZXM7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAnYWN0aXZlVXNlclBvbGljeScpIHtcbiAgICAgICAgbGV0IHVzZXJQb2xpY3kgPSBtc2cuYm9keS5wYXJhbXMudXNlclBvbGljeTtcbiAgICAgICAgaWYgKHVzZXJQb2xpY3kpIHsgX3RoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5ID0gdXNlclBvbGljeTsgfVxuICAgICAgICByZXR1cm5lZFZhbHVlID0gX3RoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5O1xuICAgICAgfSBlbHNlIGlmIChmdW5jTmFtZSA9PT0gJ3VzZXJQb2xpY3knKSB7XG4gICAgICAgIGxldCBrZXkgPSBtc2cuYm9keS5wYXJhbXMua2V5O1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gX3RoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XTtcbiAgICAgIH0gZWxzZSBpZiAoZnVuY05hbWUgPT09ICdzYXZlQWN0aXZlUG9saWN5Jykge1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gX3RoaXMuY29udGV4dC5zYXZlQWN0aXZlUG9saWN5KCk7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAnZ2V0TXlFbWFpbHMnKSB7XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSBfdGhpcy5jb250ZXh0LmdldE15RW1haWxzKCk7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAnZ2V0TXlIeXBlcnRpZXMnKSB7XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSBfdGhpcy5jb250ZXh0LmdldE15SHlwZXJ0aWVzKCk7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAnZ3JvdXBzJykge1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gX3RoaXMuY29udGV4dC5ncm91cHM7XG4gICAgICB9IGVsc2UgaWYgKGZ1bmNOYW1lID09PSAnZ2V0R3JvdXBzTmFtZXMnKSB7XG4gICAgICAgIHJldHVybmVkVmFsdWUgPSBfdGhpcy5jb250ZXh0LmdldEdyb3Vwc05hbWVzKCk7XG4gICAgICB9IGlmIChmdW5jTmFtZSA9PT0gJ3JlbW92ZUZyb21Hcm91cCcpIHtcbiAgICAgICAgbGV0IGdyb3VwTmFtZSA9IG1zZy5ib2R5LnBhcmFtcy5ncm91cE5hbWU7XG4gICAgICAgIGxldCB1c2VyRW1haWwgPSBtc2cuYm9keS5wYXJhbXMudXNlckVtYWlsO1xuICAgICAgICByZXR1cm5lZFZhbHVlID0gX3RoaXMuY29udGV4dC5yZW1vdmVGcm9tR3JvdXAoZ3JvdXBOYW1lLCB1c2VyRW1haWwpO1xuICAgICAgfVxuXG4gICAgICBsZXQgdmFsdWUgPSB7dHlwZTogJ2V4ZWN1dGUnLCB2YWx1ZTogcmV0dXJuZWRWYWx1ZSwgY29kZTogMjAwfTtcbiAgICAgIGxldCByZXBseU1zZyA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogdmFsdWV9O1xuICAgICAgX3RoaXMuY29udGV4dC5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEFkZHMgYSBwb2xpY3kgdG8gdGhlIFBvbGljeSBFbmZvcmNlbWVudCBQb2ludCAoUEVQKS4gVGhlIHBvbGljeSBjYW4gYmUgY3JlYXRlZCBieSB0aGUgc2VydmljZVxuICAqIHByb3ZpZGVyIG9yIGJ5IHRoZSB1c2VyLlxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBzb3VyY2VcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAga2V5XG4gICogQHBhcmFtICAgIHtPYmplY3R9ICAgIHBvbGljeVxuICAqL1xuICBhZGRQb2xpY3koc291cmNlLCBrZXksIHBvbGljeSwgY29tYmluaW5nQWxnb3JpdGhtKSB7XG4gICAgaWYgKCFzb3VyY2UpIHRocm93IG5ldyBFcnJvcignc291cmNlIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgaWYgKCFrZXkpIHRocm93IG5ldyBFcnJvcigna2V5IGlzIG5vdCBkZWZpbmVkJyk7XG5cbiAgICBpZiAocG9saWN5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBvbGljeSA9IG5ldyBQb2xpY3koa2V5LCBbXSwgW10sIGNvbWJpbmluZ0FsZ29yaXRobSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKHBvbGljeSBpbnN0YW5jZW9mIFBvbGljeSkpIHtcbiAgICAgICAgcG9saWN5ID0gbmV3IFBvbGljeShwb2xpY3kua2V5LCBwb2xpY3kucnVsZXMsIHBvbGljeS5hY3Rpb25zLCBwb2xpY3kuY29tYmluaW5nQWxnb3JpdGhtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgY2FzZSAnU0VSVklDRV9QUk9WSURFUic6XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoc291cmNlLCBwb2xpY3ksIGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnVVNFUic6XG4gICAgICAgIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XSA9IHBvbGljeTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcyhzb3VyY2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIHBvbGljeSBzb3VyY2U6ICcgKyBzb3VyY2UpO1xuICAgIH1cbiAgfVxuXG4gIGF1dGhvcmlzZShtZXNzYWdlKSB7XG4gICAgLy8gbG9nLmxvZygnW1BvbGljeS5QRVAgQXV0aG9yaXNlXSAnLCBtZXNzYWdlKTtcbiAgICAvLyBsb2cubG9nKG1lc3NhZ2UpO1xuICAgIGlmICghbWVzc2FnZSkgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgaWYgKCFtZXNzYWdlLmZyb20pIHRocm93IG5ldyBFcnJvcignbWVzc2FnZS5mcm9tIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgaWYgKCFtZXNzYWdlLnRvKSB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UudG8gaXMgbm90IGRlZmluZWQnKTtcbiAgICBpZiAoIW1lc3NhZ2UudHlwZSkgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlLnR5cGUgaXMgbm90IGRlZmluZWQnKTtcbiAgICBtZXNzYWdlLmJvZHkgPSBtZXNzYWdlLmJvZHkgfHwge307XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBtZXNzYWdlLmJvZHkgPSBtZXNzYWdlLmJvZHkgfHwge307XG4gICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIGlmIChfdGhpcy5faXNUb1ZlcmlmeShtZXNzYWdlKSkge1xuICAgICAgICBsZXQgaXNJbmNvbWluZyA9IF90aGlzLl9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgX3RoaXMuY29udGV4dC5wcmVwYXJlRm9yRXZhbHVhdGlvbihtZXNzYWdlLCBpc0luY29taW5nKS50aGVuKG1lc3NhZ2UgPT4ge1xuICAgICAgICAgIHJlc3VsdCA9IF90aGlzLnBkcC5ldmFsdWF0ZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmcpO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09ICdOb3QgQXBwbGljYWJsZScpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IF90aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91cjtcbiAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzLmFjdGlvbnNTZXJ2aWNlLmVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gbWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW2ldO1xuICAgICAgICAgICAgICBfdGhpcy5jb250ZXh0LnByZXBhcmVUb0ZvcndhcmQobWVzc2FnZSwgaXNJbmNvbWluZywgcmVzdWx0KS50aGVuKG1lc3NhZ2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAvKiAgaWYgKGlzSW5jb21pbmcgJiYgbWVzc2FnZS5ib2R5LmlkZW50aXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZS5ib2R5LmlkZW50aXR5LmV4cGlyZXM7XG4gICAgICAgICAgICAgICAgICB9ICovXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IChtZXNzYWdlLmJvZHkuYXV0aCA9PT0gdW5kZWZpbmVkKSA/IHRydWUgOiBtZXNzYWdlLmJvZHkuYXV0aDtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSB7IGJvZHk6IHsgY29kZTogNDAzLCBkZXNjcmlwdGlvbjogJ0Jsb2NrZWQgYnkgcG9saWN5JyB9LCBmcm9tOiBtZXNzYWdlLnRvLCB0bzogbWVzc2FnZS5mcm9tLCB0eXBlOiAncmVzcG9uc2UnIH07XG4gICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBfdGhpcy5jb250ZXh0LmRlZmF1bHRCZWhhdmlvdXI7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IGZhbHNlO1xuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IHsgYm9keTogeyBjb2RlOiA0MDMsIGRlc2NyaXB0aW9uOiAnQmxvY2tlZCBieSBwb2xpY3knIH0sIGZyb206IG1lc3NhZ2UudG8sIHRvOiBtZXNzYWdlLmZyb20sIHR5cGU6ICdyZXNwb25zZScgfTtcbiAgICAgICAgICByZWplY3QoZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXV0aG9yaXNlU3luYyhtZXNzYWdlKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBtZXNzYWdlLmJvZHkgPSBtZXNzYWdlLmJvZHkgfHwge307XG4gICAgaWYgKHRoaXMuX2lzVG9WZXJpZnkobWVzc2FnZSkpIHtcbiAgICAgIGxldCBpc0luY29taW5nID0gdGhpcy5faXNJbmNvbWluZ01lc3NhZ2UobWVzc2FnZSk7XG4gICAgICBtZXNzYWdlID0gdGhpcy5jb250ZXh0LnByZXBhcmVGb3JFdmFsdWF0aW9uKG1lc3NhZ2UsIGlzSW5jb21pbmcpO1xuICAgICAgcmVzdWx0ID0gdGhpcy5wZHAuZXZhbHVhdGVQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nKTtcbiAgICAgIGlmIChyZXN1bHQgPT09ICdOb3QgQXBwbGljYWJsZScpIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy5jb250ZXh0LmRlZmF1bHRCZWhhdmlvdXI7XG4gICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLmFjdGlvbnNTZXJ2aWNlLmVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nKTtcbiAgICAgIG1lc3NhZ2UgPSB0aGlzLmNvbnRleHQucHJlcGFyZVRvRm9yd2FyZChtZXNzYWdlLCBpc0luY29taW5nLCByZXN1bHQpO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IChtZXNzYWdlLmJvZHkuYXV0aCA9PT0gdW5kZWZpbmVkKSA/IHRydWUgOiBtZXNzYWdlLmJvZHkuYXV0aDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMuY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfaXNJbmNvbWluZ01lc3NhZ2UobWVzc2FnZSkge1xuICAgIGxldCBmcm9tO1xuXG4gICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ2ZvcndhcmQnKSB7XG4gICAgICBsb2cuaW5mbygnW1BFUCAtIGlzSW5jb21pbmdNZXNzYWdlXSAtIG1lc3NhZ2UudHlwZTogJywgbWVzc2FnZS50eXBlKTtcbiAgICAgIGZyb20gPSBtZXNzYWdlLmJvZHkuZnJvbTtcbiAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuYm9keS5oYXNPd25Qcm9wZXJ0eSgnc291cmNlJykgJiYgbWVzc2FnZS5ib2R5LnNvdXJjZSkge1xuICAgICAgbG9nLmluZm8oJ1tQRVAgLSBpc0luY29taW5nTWVzc2FnZV0gLSBtZXNzYWdlLmJvZHkuc291cmNlOiAnLCBtZXNzYWdlLmJvZHkuc291cmNlKTtcbiAgICAgIGZyb20gPSBtZXNzYWdlLmJvZHkuc291cmNlO1xuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5ib2R5Lmhhc093blByb3BlcnR5KCdzdWJzY3JpYmVyJykgJiYgbWVzc2FnZS5ib2R5LnN1YnNjcmliZXIpIHtcbiAgICAgIC8vVE9ETzogdGhpcyBzdWJzY3JpYmVyIHZhbGlkYXRpb24gc2hvdWxkIG5vdCBleGlzdCwgYmVjYXVzZSBpcyBvdXRkYXRlZFxuICAgICAgLy9UT0RPOiB0aGUgc3luY2hlciBhbmQgc3luY2hlciBtYW5hZ2VyIG5vdCBmb2xsb3dpbmcgdGhlIGNvcnJlY3Qgc3BlYztcbiAgICAgIGxvZy5pbmZvKCdbUEVQIC0gaXNJbmNvbWluZ01lc3NhZ2VdIC0gbWVzc2FnZS5ib2R5LnN1YnNjcmliZXI6ICcsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKTtcbiAgICAgIGZyb20gPSBtZXNzYWdlLmJvZHkuc3Vic2NyaWJlcjtcbiAgICB9ICBlbHNlIGlmIChtZXNzYWdlLmJvZHkuaGFzT3duUHJvcGVydHkoJ3JlcG9ydGVyJykgJiYgbWVzc2FnZS5ib2R5LnJlcG9ydGVyKSB7XG4gICAgICAvL1RPRE86IHRoaXMgc3Vic2NyaWJlciB2YWxpZGF0aW9uIHNob3VsZCBub3QgZXhpc3QsIGJlY2F1c2UgaXMgb3V0ZGF0ZWRcbiAgICAgIC8vVE9ETzogdGhlIHN5bmNoZXIgYW5kIHN5bmNoZXIgbWFuYWdlciBub3QgZm9sbG93aW5nIHRoZSBjb3JyZWN0IHNwZWM7XG4gICAgICBsb2cuaW5mbygnW1BFUCAtIGlzSW5jb21pbmdNZXNzYWdlXSAtIG1lc3NhZ2UuYm9keS5yZXBvcnRlcjogJywgbWVzc2FnZS5ib2R5LnJlcG9ydGVyKTtcbiAgICAgIGZyb20gPSBtZXNzYWdlLmJvZHkucmVwb3J0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5pbmZvKCdbUEVQIC0gaXNJbmNvbWluZ01lc3NhZ2VdIC0gbWVzc2FnZS5mcm9tICcsIG1lc3NhZ2UuZnJvbSk7XG4gICAgICBmcm9tID0gbWVzc2FnZS5mcm9tO1xuICAgIH1cblxuICAgIGxvZy5pbmZvKCdbUEVQIC0gaXNJbmNvbWluZ01lc3NhZ2VdIC0gY2hlY2sgaWYgaXNMb2NhbDogJywgZnJvbSk7XG4gICAgcmV0dXJuICF0aGlzLmNvbnRleHQuaXNMb2NhbChmcm9tKTtcbiAgfVxuXG4gIC8qKlxuICAqIElkZW50aWZpZXMgdGhlIG1lc3NhZ2VzIHRvIGJlIHZlcmlmaWVkIGJ5IHRoZSBQb2xpY3kgRW5naW5lXG4gICogQHBhcmFtICAgIHtNZXNzYWdlfSAgIG1lc3NhZ2VcbiAgKiBAcmV0dXJucyAge2Jvb2xlYW59ICAgcmV0dXJucyB0cnVlIGlmIHRoZSBtZXNzYWdlIHJlcXVpcmVzIGVuY3J5cHRpb24vZGVjcnlwdGlvblxuICAqICAgICAgICAgICAgICAgICAgICAgICBvciBpZiBpdHMgdHlwZSBlcXVhbHMgJ2hhbmRzaGFrZSc7IGZhbHNlIG90aGVyd2lzZVxuICAqL1xuICBfaXNUb1ZlcmlmeShtZXNzYWdlKSB7XG4gICAgbGV0IHNjaGVtYXNUb0lnbm9yZSA9IFsnZG9tYWluJywgJ2RvbWFpbi1pZHAnLCAnZ2xvYmFsJywgJ2h5cGVydHktcnVudGltZScsICdydW50aW1lJ107XG4gICAgbGV0IHNwbGl0RnJvbSA9IChtZXNzYWdlLmZyb20pLnNwbGl0KCc6Ly8nKTtcbiAgICBsZXQgZnJvbVNjaGVtYSA9IHNwbGl0RnJvbVswXTtcbiAgICBsZXQgc3BsaXRUbyA9IChtZXNzYWdlLnRvKS5zcGxpdCgnOi8vJyk7XG4gICAgbGV0IHRvU2NoZW1hID0gIHNwbGl0VG9bMF07XG4gICAgbGV0IGZyb20gPSBtZXNzYWdlLmZyb207XG4gICAgbGV0IHRvID0gbWVzc2FnZS50bztcblxuICAgIC8vIFNpZ25hbGxpbmcgbWVzc2FnZXMgYmV0d2VlbiBQMlAgU3R1YnMgZG9uJ3QgaGF2ZSB0byBiZSB2ZXJpZmllZC4gRkZTXG5cbiAgICBpZiAobWVzc2FnZS5ib2R5ICYmIG1lc3NhZ2UuYm9keS5zb3VyY2UpIHtcbiAgICAgIGZyb20gPSBtZXNzYWdlLmJvZHkuc291cmNlO1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlLmJvZHkgJiYgbWVzc2FnZS5ib2R5LnN1YnNjcmliZXIpIHtcbiAgICAgIGZyb20gPSBtZXNzYWdlLmJvZHkuc3Vic2NyaWJlcjtcbiAgICB9XG5cbiAgICBpZiAoZnJvbS5pbmRleE9mKCcvcDJwaGFuZGxlci8nKSAhPT0gLTEgfHwgZnJvbS5pbmRleE9mKCcvcDJwcmVxdWVzdGVyLycpICE9PSAtMSB8fCB0by5pbmRleE9mKCcvcDJwaGFuZGxlci8nKSAhPT0gLTEgfHwgdG8uaW5kZXhPZignL3AycHJlcXVlc3Rlci8nKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBoYWNrIHRvIGRpc2FibGUgSWRlbnRpdHkgdmVyaWZpY2F0aW9uIGZvciBtZXNzYWdlcyBjb21pbmcgZnJvbSBsZWdhY3kgZG9tYWlucyB3aGlsZSBzb2x1dGlvbiBpcyBub3QgaW1wbGVtZW50ZWRcblxuICAgIGlmICh0aGlzLmNvbnRleHQuaXNJbnRlcndvcmtpbmdQcm90b1N0dWIoZnJvbSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZS5mcm9tID09PSBmcm9tU2NoZW1hIHx8IG1lc3NhZ2UudG8gPT09IHRvU2NoZW1hIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3JlYWQnIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3Jlc3BvbnNlJyB8fCAoaXNIeXBlcnR5VVJMKG1lc3NhZ2UuZnJvbSkgJiYgbWVzc2FnZS50eXBlID09PSAnZGVsZXRlJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKGZyb21TY2hlbWEpID09PSAtMSB8fCBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZih0b1NjaGVtYSkgPT09IC0xO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVBvbGljeShzb3VyY2UsIGtleSkge1xuICAgIGlmICghc291cmNlKSB0aHJvdyBuZXcgRXJyb3IoJ3NvdXJjZSBpcyBub3QgZGVmaW5lZCcpO1xuICAgIGlmIChzb3VyY2UgIT09ICcqJyAmJiAha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpO1xuXG4gICAgc3dpdGNoIChzb3VyY2UpIHtcbiAgICAgIGNhc2UgJyonOlxuICAgICAgICB0aGlzLmNvbnRleHQuc2VydmljZVByb3ZpZGVyUG9saWN5ID0ge307XG4gICAgICAgIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5jb250ZXh0LmFjdGl2ZVVzZXJQb2xpY3kgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoJ1VTRVInKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnU0VSVklDRV9QUk9WSURFUicpO1xuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZUFjdGl2ZVBvbGljeSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1NFUlZJQ0VfUFJPVklERVInOlxuICAgICAgICBkZWxldGUgdGhpcy5jb250ZXh0LnNlcnZpY2VQcm92aWRlclBvbGljeVtrZXldO1xuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnVVNFUic6XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHQudXNlclBvbGljaWVzW2tleV07XG4gICAgICAgIGlmIChrZXkgPT09IHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5KSB7XG4gICAgICAgICAgdGhpcy5jb250ZXh0LmFjdGl2ZVVzZXJQb2xpY3kgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVBY3RpdmVQb2xpY3koKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKCdVU0VSJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gcG9saWN5IHNvdXJjZTogJyArIHNvdXJjZSk7XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUEVQO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9wb2xpY3kvUEVQLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUVBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7OztBQUFBO0FBQ0E7Ozs7O0FBTkE7QUFDQTtBQU1BO0FBQ0E7QUFDQTs7OztBQUlBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFtQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBO0FBV0E7OztBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF0QkE7QUF3QkE7OztBQXhTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUErUkE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///470\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ActionsService = function () {\n  function ActionsService(context) {\n    (0, _classCallCheck3.default)(this, ActionsService);\n\n    this.context = context;\n  }\n\n  (0, _createClass3.default)(ActionsService, [{\n    key: 'enforcePolicies',\n    value: function enforcePolicies(message, isIncomingMessage) {\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n\n        var policies = _this.context.getPolicies(message, isIncomingMessage);\n\n        if (policies !== undefined) {\n          if (policies.serviceProviderPolicy !== undefined) {\n            policies.serviceProviderPolicy.enforceActions(_this.context, message).then(function (messages) {\n              resolve(messages);\n            }, function (error) {\n              reject(error);\n            });\n          } else {\n            if (policies.userPolicy !== undefined) {\n              policies.userPolicy.enforceActions(_this.context, message).then(function (messages) {\n                resolve(messages);\n              }, function (error) {\n                reject(error);\n              });\n            } else {\n              resolve([message]);\n            }\n          }\n        } else {\n          resolve([message]);\n        }\n      });\n    }\n  }, {\n    key: 'forwardToID',\n    value: function forwardToID(message, email) {\n      var _this = this;\n      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');\n\n      return new _promise2.default(function (resolve, reject) {\n        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {\n          var splitTo = message.to.split('://');\n          if (splitTo[0] !== 'runtime') {\n            _this.context.runtimeRegistry.discoverHypertyPerUser(email).then(function (result) {\n              message.to = result.hypertyURL;\n              message.body.via = undefined;\n              resolve(message);\n              _this.context.runtimeRegistry._messageBus.postMessage(message);\n            }, function (error) {\n              reject(error);\n            });\n          } else {\n            resolve(message);\n          }\n        } else {\n          resolve(message);\n        }\n      });\n    }\n  }, {\n    key: 'forwardToHyperty',\n    value: function forwardToHyperty(message, hypertyURL) {\n      var _this = this;\n      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');\n\n      return new _promise2.default(function (resolve) {\n        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {\n          var splitTo = message.to.split('://');\n          if (splitTo[0] !== 'runtime') {\n            message.to = hypertyURL;\n            message.body.via = undefined;\n            resolve(message);\n            _this.context.runtimeRegistry._messageBus.postMessage(message);\n          } else {\n            resolve(message);\n          }\n        } else {\n          resolve(message);\n        }\n      });\n    }\n  }, {\n    key: 'sendAutomaticMessage',\n    value: function sendAutomaticMessage(message, text) {\n      var _this = this;\n      return new _promise2.default(function (resolve) {\n        var automaticMessage = {\n          from: message.to,\n          to: message.from,\n          body: {\n            value: text\n          },\n          type: message.type\n        };\n        resolve(message);\n        _this.context.runtimeRegistry._messageBus.postMessage(automaticMessage);\n      });\n    }\n  }]);\n  return ActionsService;\n}();\n\nexports.default = ActionsService;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvQWN0aW9uc1NlcnZpY2UuanM/MjliZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBY3Rpb25zU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBlbmZvcmNlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBwb2xpY2llcyA9IF90aGlzLmNvbnRleHQuZ2V0UG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpO1xuXG4gICAgICBpZiAocG9saWNpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAocG9saWNpZXMuc2VydmljZVByb3ZpZGVyUG9saWN5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwb2xpY2llcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kuZW5mb3JjZUFjdGlvbnMoX3RoaXMuY29udGV4dCwgbWVzc2FnZSkudGhlbihtZXNzYWdlcyA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2VzKTtcbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHBvbGljaWVzLnVzZXJQb2xpY3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcG9saWNpZXMudXNlclBvbGljeS5lbmZvcmNlQWN0aW9ucyhfdGhpcy5jb250ZXh0LCBtZXNzYWdlKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlcyk7XG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKFttZXNzYWdlXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKFttZXNzYWdlXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmb3J3YXJkVG9JRChtZXNzYWdlLCBlbWFpbCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKCFfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdmb3J3YXJkIG1lc3NhZ2UgdG8gZ2l2ZW4gSUQgaXMgdW5zdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5oeXBlcnRpZXNMaXN0WzBdLmh5cGVydHlVUkwgPT09IG1lc3NhZ2UudG8pIHtcbiAgICAgICAgbGV0IHNwbGl0VG8gPSAobWVzc2FnZS50bykuc3BsaXQoJzovLycpO1xuICAgICAgICBpZiAoc3BsaXRUb1swXSAhPT0gJ3J1bnRpbWUnKSB7XG4gICAgICAgICAgX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZGlzY292ZXJIeXBlcnR5UGVyVXNlcihlbWFpbCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgbWVzc2FnZS50byA9IHJlc3VsdC5oeXBlcnR5VVJMO1xuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZpYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICBfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZvcndhcmRUb0h5cGVydHkobWVzc2FnZSwgaHlwZXJ0eVVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKCFfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdmb3J3YXJkIG1lc3NhZ2UgdG8gZ2l2ZW4gSUQgaXMgdW5zdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBpZiAoX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuaHlwZXJ0aWVzTGlzdFswXS5oeXBlcnR5VVJMID09PSBtZXNzYWdlLnRvKSB7XG4gICAgICAgIGxldCBzcGxpdFRvID0gKG1lc3NhZ2UudG8pLnNwbGl0KCc6Ly8nKTtcbiAgICAgICAgaWYgKHNwbGl0VG9bMF0gIT09ICdydW50aW1lJykge1xuICAgICAgICAgIG1lc3NhZ2UudG8gPSBoeXBlcnR5VVJMO1xuICAgICAgICAgIG1lc3NhZ2UuYm9keS52aWEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICBfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2VuZEF1dG9tYXRpY01lc3NhZ2UobWVzc2FnZSwgdGV4dCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBsZXQgYXV0b21hdGljTWVzc2FnZSA9IHtcbiAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgYm9keToge1xuICAgICAgICAgIHZhbHVlOiB0ZXh0XG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IG1lc3NhZ2UudHlwZVxuICAgICAgfTtcbiAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICBfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShhdXRvbWF0aWNNZXNzYWdlKTtcbiAgICB9KTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFjdGlvbnNTZXJ2aWNlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9wb2xpY3kvQWN0aW9uc1NlcnZpY2UuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBR0E7QUFOQTtBQVFBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUlBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///471\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Operators = __webpack_require__(142);\n\nvar _Operators2 = _interopRequireDefault(_Operators);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* The Policy Decision Point (PDP) decides if a message is to be authorised by checking a set of\n* policies. The resource to be verified is specified in the first word of the 'condition' field of\n* a Policy object. The implementation that verifies if the message is compliant with a policy is\n* specified in a hashtable to allow dynamic definition of the implementation, providing\n* extensibility to the Policy Engine functionalities.\n*/\nvar PDP = function () {\n  function PDP(context) {\n    (0, _classCallCheck3.default)(this, PDP);\n\n    this.context = context;\n    this.operators = new _Operators2.default();\n  }\n\n  (0, _createClass3.default)(PDP, [{\n    key: 'evaluatePolicies',\n    value: function evaluatePolicies(message, isIncomingMessage) {\n      var policies = this.context.getPolicies(message, isIncomingMessage);\n      var result = 'Not Applicable';\n      if (policies !== undefined) {\n        result = this.evaluatePolicy(message, policies.serviceProviderPolicy, isIncomingMessage);\n        if (result || result === 'Not Applicable') {\n          var userResult = this.evaluatePolicy(message, policies.userPolicy, isIncomingMessage);\n          if (userResult !== 'Not Applicable') {\n            result = userResult;\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: 'evaluatePolicy',\n    value: function evaluatePolicy(message, policy, isIncoming) {\n      var result = 'Not Applicable';\n      if (policy) {\n        result = policy.evaluateRules(this.context, message, isIncoming);\n      }\n\n      return result;\n    }\n  }]);\n  return PDP;\n}();\n\nexports.default = PDP;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvUERQLmpzP2U5YmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9wZXJhdG9ycyBmcm9tICcuL09wZXJhdG9ycyc7XG5cbi8qKlxuKiBUaGUgUG9saWN5IERlY2lzaW9uIFBvaW50IChQRFApIGRlY2lkZXMgaWYgYSBtZXNzYWdlIGlzIHRvIGJlIGF1dGhvcmlzZWQgYnkgY2hlY2tpbmcgYSBzZXQgb2ZcbiogcG9saWNpZXMuIFRoZSByZXNvdXJjZSB0byBiZSB2ZXJpZmllZCBpcyBzcGVjaWZpZWQgaW4gdGhlIGZpcnN0IHdvcmQgb2YgdGhlICdjb25kaXRpb24nIGZpZWxkIG9mXG4qIGEgUG9saWN5IG9iamVjdC4gVGhlIGltcGxlbWVudGF0aW9uIHRoYXQgdmVyaWZpZXMgaWYgdGhlIG1lc3NhZ2UgaXMgY29tcGxpYW50IHdpdGggYSBwb2xpY3kgaXNcbiogc3BlY2lmaWVkIGluIGEgaGFzaHRhYmxlIHRvIGFsbG93IGR5bmFtaWMgZGVmaW5pdGlvbiBvZiB0aGUgaW1wbGVtZW50YXRpb24sIHByb3ZpZGluZ1xuKiBleHRlbnNpYmlsaXR5IHRvIHRoZSBQb2xpY3kgRW5naW5lIGZ1bmN0aW9uYWxpdGllcy5cbiovXG5jbGFzcyBQRFAge1xuXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIHRoaXMub3BlcmF0b3JzID0gbmV3IE9wZXJhdG9ycygpO1xuICB9XG5cbiAgZXZhbHVhdGVQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSkge1xuICAgIGxldCBwb2xpY2llcyA9IHRoaXMuY29udGV4dC5nZXRQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSk7XG4gICAgbGV0IHJlc3VsdCA9ICdOb3QgQXBwbGljYWJsZSc7XG4gICAgaWYgKHBvbGljaWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc3VsdCA9IHRoaXMuZXZhbHVhdGVQb2xpY3kobWVzc2FnZSwgcG9saWNpZXMuc2VydmljZVByb3ZpZGVyUG9saWN5LCBpc0luY29taW5nTWVzc2FnZSk7XG4gICAgICBpZiAocmVzdWx0IHx8IHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykge1xuICAgICAgICBsZXQgdXNlclJlc3VsdCA9IHRoaXMuZXZhbHVhdGVQb2xpY3kobWVzc2FnZSwgcG9saWNpZXMudXNlclBvbGljeSwgaXNJbmNvbWluZ01lc3NhZ2UpO1xuICAgICAgICBpZiAodXNlclJlc3VsdCAhPT0gJ05vdCBBcHBsaWNhYmxlJykge1xuICAgICAgICAgIHJlc3VsdCA9IHVzZXJSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZXZhbHVhdGVQb2xpY3kobWVzc2FnZSwgcG9saWN5LCBpc0luY29taW5nKSB7XG4gICAgbGV0IHJlc3VsdCA9ICdOb3QgQXBwbGljYWJsZSc7XG4gICAgaWYgKHBvbGljeSkge1xuICAgICAgcmVzdWx0ID0gcG9saWN5LmV2YWx1YXRlUnVsZXModGhpcy5jb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUERQO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9wb2xpY3kvUERQLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7Ozs7O0FBQ0E7Ozs7Ozs7QUFPQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///472\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _AllowOverrides = __webpack_require__(202);\n\nvar _AllowOverrides2 = _interopRequireDefault(_AllowOverrides);\n\nvar _BlockOverrides = __webpack_require__(203);\n\nvar _BlockOverrides2 = _interopRequireDefault(_BlockOverrides);\n\nvar _FirstApplicable = __webpack_require__(204);\n\nvar _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);\n\nvar _Rule = __webpack_require__(474);\n\nvar _Rule2 = _interopRequireDefault(_Rule);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Policy = function () {\n  function Policy(key, rules, actions, combiningAlgorithm) {\n    (0, _classCallCheck3.default)(this, Policy);\n\n    if (!key) throw new Error('key is not defined');\n    if (!actions) throw new Error('actions are not defined');\n\n    this.actions = actions;\n    this.key = key;\n    this._setRules(rules);\n    this._setCombiningAlgorithm(combiningAlgorithm);\n  }\n\n  (0, _createClass3.default)(Policy, [{\n    key: 'addAction',\n    value: function addAction(method, param) {\n      this.actions.push({ method: method, param: param });\n    }\n  }, {\n    key: 'createRule',\n    value: function createRule(decision, condition, scope, target, priority) {\n      if (priority === undefined) {\n        priority = this.getLastPriority() + 1;\n      }\n      var rule = new _Rule2.default(decision, condition, scope, target, priority);\n      this.rules.push(rule);\n    }\n  }, {\n    key: 'deleteRule',\n    value: function deleteRule(rule) {\n      var indexToRemove = this.rules.indexOf(rule);\n      this.rules.splice(indexToRemove, 1);\n    }\n  }, {\n    key: 'enforceActions',\n    value: function enforceActions(context, message) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        var results = [];\n        if (_this.actions.length !== 0) {\n          for (var i in _this.actions) {\n            var result = context.pep.actionsService[_this.actions[i].method](message, _this.actions[i].param);\n            results.push(result);\n          }\n          _promise2.default.all(results).then(function (messages) {\n            resolve(messages);\n          }, function (error) {\n            reject(error);\n          });\n        } else {\n          resolve([message]);\n        }\n      });\n    }\n  }, {\n    key: 'evaluateRules',\n    value: function evaluateRules(context, message, isIncoming) {\n      var results = [];\n      for (var i in this.rules) {\n        results.push(this.rules[i].evaluate(context, message, isIncoming));\n      }\n\n      return this.combiningAlgorithm.combine(results);\n    }\n  }, {\n    key: 'getLastPriority',\n    value: function getLastPriority() {\n      var priorities = [];\n\n      if (this.rules.length !== 0) {\n        for (var i in this.rules) {\n          priorities.push(this.rules[i].priority);\n        }\n        return Math.max.apply(Math, priorities);\n      } else {\n        return -1;\n      }\n    }\n  }, {\n    key: 'getRuleByPriority',\n    value: function getRuleByPriority(priority) {\n      for (var i in this.rules) {\n        if (String(this.rules[i].priority) === String(priority)) {\n          return this.rules[i];\n        }\n      }\n      throw Error('Rule with priority ' + priority + ' does not exist!');\n    }\n  }, {\n    key: '_setCombiningAlgorithm',\n    value: function _setCombiningAlgorithm(combiningAlgorithm) {\n      if (!combiningAlgorithm) {\n        combiningAlgorithm = 'blockOverrides';\n      }\n      switch (combiningAlgorithm) {\n        case 'blockOverrides':\n          this.combiningAlgorithm = new _BlockOverrides2.default();\n          break;\n        case 'allowOverrides':\n          this.combiningAlgorithm = new _AllowOverrides2.default();\n          break;\n        case 'firstApplicable':\n          this.combiningAlgorithm = new _FirstApplicable2.default();\n          break;\n        default:\n          throw Error('Unknown algorithm: ' + combiningAlgorithm);\n      }\n    }\n  }, {\n    key: '_setRules',\n    value: function _setRules(rules) {\n      this.rules = [];\n\n      for (var i in rules) {\n        var rule = rules[i];\n        if (rule.priority === undefined) {\n          rule.priority = this.getLastPriority() + 1;\n        }\n        if (!(rule instanceof _Rule2.default)) {\n          rule = new _Rule2.default(rule.decision, rule.condition, rule.scope, rule.target, rule.priority);\n        }\n        this.rules.push(rule);\n      }\n    }\n  }, {\n    key: 'sortRules',\n    value: function sortRules() {\n      return this.rules.sort(function (a, b) {\n        var x = a.priority;var y = b.priority;\n        return x < y ? -1 : x > y ? 1 : 0;\n      });\n    }\n  }]);\n  return Policy;\n}();\n\nexports.default = Policy;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvUG9saWN5LmpzPzk4NDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFsbG93T3ZlcnJpZGVzIGZyb20gJy4vY29tYmluaW5nQWxnb3JpdGhtcy9BbGxvd092ZXJyaWRlcyc7XG5pbXBvcnQgQmxvY2tPdmVycmlkZXMgZnJvbSAnLi9jb21iaW5pbmdBbGdvcml0aG1zL0Jsb2NrT3ZlcnJpZGVzJztcbmltcG9ydCBGaXJzdEFwcGxpY2FibGUgZnJvbSAnLi9jb21iaW5pbmdBbGdvcml0aG1zL0ZpcnN0QXBwbGljYWJsZSc7XG5pbXBvcnQgUnVsZSBmcm9tICcuL1J1bGUnO1xuXG5jbGFzcyBQb2xpY3kge1xuXG4gIGNvbnN0cnVjdG9yKGtleSwgcnVsZXMsIGFjdGlvbnMsIGNvbWJpbmluZ0FsZ29yaXRobSkge1xuICAgIGlmICgha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpO1xuICAgIGlmICghYWN0aW9ucykgdGhyb3cgbmV3IEVycm9yKCdhY3Rpb25zIGFyZSBub3QgZGVmaW5lZCcpO1xuXG4gICAgdGhpcy5hY3Rpb25zID0gYWN0aW9ucztcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLl9zZXRSdWxlcyhydWxlcyk7XG4gICAgdGhpcy5fc2V0Q29tYmluaW5nQWxnb3JpdGhtKGNvbWJpbmluZ0FsZ29yaXRobSk7XG4gIH1cblxuICBhZGRBY3Rpb24obWV0aG9kLCBwYXJhbSkge1xuICAgIHRoaXMuYWN0aW9ucy5wdXNoKHsgbWV0aG9kOiBtZXRob2QsIHBhcmFtOiBwYXJhbSB9KTtcbiAgfVxuXG4gIGNyZWF0ZVJ1bGUoZGVjaXNpb24sIGNvbmRpdGlvbiwgc2NvcGUsIHRhcmdldCwgcHJpb3JpdHkpIHtcbiAgICBpZiAocHJpb3JpdHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJpb3JpdHkgPSB0aGlzLmdldExhc3RQcmlvcml0eSgpICsgMTtcbiAgICB9XG4gICAgbGV0IHJ1bGUgPSBuZXcgUnVsZShkZWNpc2lvbiwgY29uZGl0aW9uLCBzY29wZSwgdGFyZ2V0LCBwcmlvcml0eSk7XG4gICAgdGhpcy5ydWxlcy5wdXNoKHJ1bGUpO1xuICB9XG5cbiAgZGVsZXRlUnVsZShydWxlKSB7XG4gICAgbGV0IGluZGV4VG9SZW1vdmUgPSB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gICAgdGhpcy5ydWxlcy5zcGxpY2UoaW5kZXhUb1JlbW92ZSwgMSk7XG4gIH1cblxuICBlbmZvcmNlQWN0aW9ucyhjb250ZXh0LCBtZXNzYWdlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCByZXN1bHRzID0gW107XG4gICAgICBpZiAodGhpcy5hY3Rpb25zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuYWN0aW9ucykge1xuICAgICAgICAgIGxldCByZXN1bHQgPSBjb250ZXh0LnBlcC5hY3Rpb25zU2VydmljZVt0aGlzLmFjdGlvbnNbaV0ubWV0aG9kXShtZXNzYWdlLCB0aGlzLmFjdGlvbnNbaV0ucGFyYW0pO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UuYWxsKHJlc3VsdHMpLnRoZW4oKG1lc3NhZ2VzKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlcyk7XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoW21lc3NhZ2VdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGV2YWx1YXRlUnVsZXMoY29udGV4dCwgbWVzc2FnZSwgaXNJbmNvbWluZykge1xuICAgIGxldCByZXN1bHRzID0gW107XG4gICAgZm9yIChsZXQgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICByZXN1bHRzLnB1c2godGhpcy5ydWxlc1tpXS5ldmFsdWF0ZShjb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtLmNvbWJpbmUocmVzdWx0cyk7XG4gIH1cblxuICBnZXRMYXN0UHJpb3JpdHkoKSB7XG4gICAgbGV0IHByaW9yaXRpZXMgPSBbXTtcblxuICAgIGlmICh0aGlzLnJ1bGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICAgIHByaW9yaXRpZXMucHVzaCh0aGlzLnJ1bGVzW2ldLnByaW9yaXR5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCBwcmlvcml0aWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfVxuXG4gIGdldFJ1bGVCeVByaW9yaXR5KHByaW9yaXR5KSB7XG4gICAgZm9yIChsZXQgaSBpbiB0aGlzLnJ1bGVzKSB7XG4gICAgICBpZiAoU3RyaW5nKHRoaXMucnVsZXNbaV0ucHJpb3JpdHkpID09PSBTdHJpbmcocHJpb3JpdHkpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJ1bGVzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBFcnJvcignUnVsZSB3aXRoIHByaW9yaXR5ICcgKyBwcmlvcml0eSArICcgZG9lcyBub3QgZXhpc3QhJyk7XG4gIH1cblxuICBfc2V0Q29tYmluaW5nQWxnb3JpdGhtKGNvbWJpbmluZ0FsZ29yaXRobSkge1xuICAgIGlmICghY29tYmluaW5nQWxnb3JpdGhtKSB7XG4gICAgICBjb21iaW5pbmdBbGdvcml0aG0gPSAnYmxvY2tPdmVycmlkZXMnO1xuICAgIH1cbiAgICBzd2l0Y2ggKGNvbWJpbmluZ0FsZ29yaXRobSkge1xuICAgICAgY2FzZSAnYmxvY2tPdmVycmlkZXMnOlxuICAgICAgICB0aGlzLmNvbWJpbmluZ0FsZ29yaXRobSA9IG5ldyBCbG9ja092ZXJyaWRlcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2FsbG93T3ZlcnJpZGVzJzpcbiAgICAgICAgdGhpcy5jb21iaW5pbmdBbGdvcml0aG0gPSBuZXcgQWxsb3dPdmVycmlkZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdmaXJzdEFwcGxpY2FibGUnOlxuICAgICAgICB0aGlzLmNvbWJpbmluZ0FsZ29yaXRobSA9IG5ldyBGaXJzdEFwcGxpY2FibGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBhbGdvcml0aG06ICcgKyBjb21iaW5pbmdBbGdvcml0aG0pO1xuICAgIH1cbiAgfVxuXG4gIF9zZXRSdWxlcyhydWxlcykge1xuICAgIHRoaXMucnVsZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgaW4gcnVsZXMpIHtcbiAgICAgIGxldCBydWxlID0gcnVsZXNbaV07XG4gICAgICBpZiAocnVsZS5wcmlvcml0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJ1bGUucHJpb3JpdHkgPSB0aGlzLmdldExhc3RQcmlvcml0eSgpICsgMTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJ1bGUgaW5zdGFuY2VvZiBSdWxlKSkge1xuICAgICAgICBydWxlID0gbmV3IFJ1bGUocnVsZS5kZWNpc2lvbiwgcnVsZS5jb25kaXRpb24sIHJ1bGUuc2NvcGUsIHJ1bGUudGFyZ2V0LCBydWxlLnByaW9yaXR5KTtcbiAgICAgIH1cbiAgICAgIHRoaXMucnVsZXMucHVzaChydWxlKTtcbiAgICB9XG4gIH1cblxuICBzb3J0UnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICBsZXQgeCA9IGEucHJpb3JpdHk7IGxldCB5ID0gYi5wcmlvcml0eTtcbiAgICAgIHJldHVybiAoKHggPCB5KSA/IC0xIDogKCh4ID4geSkgPyAxIDogMCkpO1xuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUG9saWN5O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9wb2xpY3kvUG9saWN5LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0FBYUE7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///473\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _AdvancedCondition = __webpack_require__(475);\n\nvar _AdvancedCondition2 = _interopRequireDefault(_AdvancedCondition);\n\nvar _Condition = __webpack_require__(143);\n\nvar _Condition2 = _interopRequireDefault(_Condition);\n\nvar _utils = __webpack_require__(15);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Rule = function () {\n  function Rule(decision, condition, scope, target, priority) {\n    (0, _classCallCheck3.default)(this, Rule);\n\n    this.decision = decision;\n    this.setCondition(condition);\n    this.priority = priority;\n    this.scope = scope;\n    this.target = target;\n  }\n\n  (0, _createClass3.default)(Rule, [{\n    key: 'setCondition',\n    value: function setCondition(condition) {\n      if (!(condition instanceof _Condition2.default || condition instanceof _AdvancedCondition2.default || condition instanceof _AdvancedCondition2.default)) {\n        var attribute = condition.attribute;\n        switch (attribute) {\n          case 'subscription':\n            this.condition = new _AdvancedCondition2.default(condition.attribute, condition.operator, condition.params);\n            break;\n          case undefined:\n            this.condition = new _AdvancedCondition2.default(condition);\n            break;\n          default:\n            this.condition = new _Condition2.default(condition.attribute, condition.operator, condition.params);\n        }\n      } else {\n        this.condition = condition;\n      }\n    }\n  }, {\n    key: 'evaluate',\n    value: function evaluate(context, message, isIncoming) {\n      var field = isIncoming ? message.to : message.from;\n      var hypertyName = void 0;\n      switch (this.scope) {\n        case 'global':\n          break;\n\n        case 'hyperty':\n          if ((0, _utils.isDataObjectURL)(field)) {\n            var reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(field));\n            if (reporter !== undefined) {\n              hypertyName = context.runtimeRegistry.getHypertyName(reporter);\n            }\n          } else {\n            if (field.split('://')[0] === 'hyperty') {\n              hypertyName = context.runtimeRegistry.getHypertyName((0, _utils.removePathFromURL)(field));\n            }\n          }\n          if (hypertyName === this.target) {\n            break;\n          }\n\n          return 'Not Applicable';\n\n        case 'identity':\n          var owner = void 0;\n\n          if ((0, _utils.isDataObjectURL)(field)) {\n            var _reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(field));\n            owner = context.runtimeRegistry.getHypertyOwner(_reporter);\n          } else {\n            if (field.split('://')[0] === 'hyperty') {\n              owner = context.runtimeRegistry.getHypertyOwner((0, _utils.removePathFromURL)(field));\n            }\n          }\n          if (owner !== undefined) {\n            owner = (0, _utils.getUserEmailFromURL)(owner);\n          }\n          if (owner === this.target) {\n            break;\n          }\n\n          return 'Not Applicable';\n      }\n\n      if (this.condition.isApplicable(context, message, this.scope, this.target)) {\n        return this.decision;\n      } else {\n        return 'Not Applicable';\n      }\n    }\n  }]);\n  return Rule;\n}();\n\nexports.default = Rule;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvUnVsZS5qcz9jOWU4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBZHZhbmNlZENvbmRpdGlvbiBmcm9tICcuL2NvbmRpdGlvbnMvQWR2YW5jZWRDb25kaXRpb24nO1xuaW1wb3J0IENvbmRpdGlvbiBmcm9tICcuL2NvbmRpdGlvbnMvQ29uZGl0aW9uJztcbmltcG9ydCB7Z2V0VXNlckVtYWlsRnJvbVVSTCwgaXNEYXRhT2JqZWN0VVJMLCByZW1vdmVQYXRoRnJvbVVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbkNvbmRpdGlvbiBmcm9tICcuL2NvbmRpdGlvbnMvQWR2YW5jZWRDb25kaXRpb24nO1xuXG5jbGFzcyBSdWxlIHtcblxuICBjb25zdHJ1Y3RvcihkZWNpc2lvbiwgY29uZGl0aW9uLCBzY29wZSwgdGFyZ2V0LCBwcmlvcml0eSkge1xuICAgIHRoaXMuZGVjaXNpb24gPSBkZWNpc2lvbjtcbiAgICB0aGlzLnNldENvbmRpdGlvbihjb25kaXRpb24pO1xuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIH1cblxuICBzZXRDb25kaXRpb24oY29uZGl0aW9uKSB7XG4gICAgaWYgKCEoY29uZGl0aW9uIGluc3RhbmNlb2YgQ29uZGl0aW9uIHx8IGNvbmRpdGlvbiBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbkNvbmRpdGlvbiB8fCBjb25kaXRpb24gaW5zdGFuY2VvZiBBZHZhbmNlZENvbmRpdGlvbikpIHtcbiAgICAgIGxldCBhdHRyaWJ1dGUgPSBjb25kaXRpb24uYXR0cmlidXRlO1xuICAgICAgc3dpdGNoIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgY2FzZSAnc3Vic2NyaXB0aW9uJzpcbiAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25Db25kaXRpb24oY29uZGl0aW9uLmF0dHJpYnV0ZSwgY29uZGl0aW9uLm9wZXJhdG9yLCBjb25kaXRpb24ucGFyYW1zKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBuZXcgQWR2YW5jZWRDb25kaXRpb24oY29uZGl0aW9uKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IG5ldyBDb25kaXRpb24oY29uZGl0aW9uLmF0dHJpYnV0ZSwgY29uZGl0aW9uLm9wZXJhdG9yLCBjb25kaXRpb24ucGFyYW1zKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgfVxuICB9XG5cbiAgZXZhbHVhdGUoY29udGV4dCwgbWVzc2FnZSwgaXNJbmNvbWluZykge1xuICAgIGxldCBmaWVsZCA9IChpc0luY29taW5nKSA/IG1lc3NhZ2UudG8gOiBtZXNzYWdlLmZyb207XG4gICAgbGV0IGh5cGVydHlOYW1lO1xuICAgIHN3aXRjaCAodGhpcy5zY29wZSkge1xuICAgICAgY2FzZSAnZ2xvYmFsJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2h5cGVydHknOlxuICAgICAgICBpZiAoaXNEYXRhT2JqZWN0VVJMKGZpZWxkKSkge1xuICAgICAgICAgIGxldCByZXBvcnRlciA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhyZW1vdmVQYXRoRnJvbVVSTChmaWVsZCkpO1xuICAgICAgICAgIGlmIChyZXBvcnRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBoeXBlcnR5TmFtZSA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKHJlcG9ydGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGZpZWxkLnNwbGl0KCc6Ly8nKVswXSA9PT0gJ2h5cGVydHknKSB7XG4gICAgICAgICAgICBoeXBlcnR5TmFtZSA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKHJlbW92ZVBhdGhGcm9tVVJMKGZpZWxkKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChoeXBlcnR5TmFtZSA9PT0gdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xuXG4gICAgICBjYXNlICdpZGVudGl0eSc6XG4gICAgICAgIGxldCBvd25lcjtcblxuICAgICAgICBpZiAoaXNEYXRhT2JqZWN0VVJMKGZpZWxkKSkge1xuICAgICAgICAgIGxldCByZXBvcnRlciA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhyZW1vdmVQYXRoRnJvbVVSTChmaWVsZCkpO1xuICAgICAgICAgIG93bmVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHJlcG9ydGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZmllbGQuc3BsaXQoJzovLycpWzBdID09PSAnaHlwZXJ0eScpIHtcbiAgICAgICAgICAgIG93bmVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHJlbW92ZVBhdGhGcm9tVVJMKGZpZWxkKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChvd25lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgb3duZXIgPSBnZXRVc2VyRW1haWxGcm9tVVJMKG93bmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3duZXIgPT09IHRoaXMudGFyZ2V0KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5jb25kaXRpb24uaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHRoaXMuc2NvcGUsIHRoaXMudGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGVjaXNpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSdWxlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9wb2xpY3kvUnVsZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFFQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQVVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXZDQTtBQUNBO0FBeUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFHQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///474\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Condition = __webpack_require__(143);\n\nvar _Condition2 = _interopRequireDefault(_Condition);\n\nvar _Operators = __webpack_require__(142);\n\nvar _Operators2 = _interopRequireDefault(_Operators);\n\nvar _SubscriptionCondition = __webpack_require__(476);\n\nvar _SubscriptionCondition2 = _interopRequireDefault(_SubscriptionCondition);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar AdvancedCondition = function () {\n  function AdvancedCondition(condition) {\n    (0, _classCallCheck3.default)(this, AdvancedCondition);\n\n    this.operators = new _Operators2.default();\n    if (condition.operators !== undefined) {\n      condition = condition.condition;\n    }\n    condition = this.buildCondition(condition);\n    this.condition = condition;\n  }\n\n  (0, _createClass3.default)(AdvancedCondition, [{\n    key: 'buildCondition',\n    value: function buildCondition(condition) {\n      if (Array.isArray(condition[1])) {\n        condition[1] = this.buildCondition(condition[1]);\n      } else {\n        if (condition[1].attribute === 'subscription') {\n          condition[1] = new _SubscriptionCondition2.default(condition[1].attribute, condition[1].operator, condition[1].params);\n        } else {\n          condition[1] = new _Condition2.default(condition[1].attribute, condition[1].operator, condition[1].params);\n        }\n      }\n\n      if (condition[2] !== undefined) {\n        if (Array.isArray(condition[2])) {\n          condition[2] = this.buildCondition(condition[2]);\n        } else {\n          if (condition[2].attribute === 'subscription') {\n            condition[2] = new _SubscriptionCondition2.default(condition[2].attribute, condition[2].operator, condition[2].params);\n          } else {\n            condition[2] = new _Condition2.default(condition[2].attribute, condition[2].operator, condition[2].params);\n          }\n        }\n      }\n      return condition;\n    }\n  }, {\n    key: 'isApplicable',\n    value: function isApplicable(context, message, scope, target, operator, left, right) {\n      if (!operator) {\n        operator = this.condition[0];\n        left = this.condition[1];\n        right = this.condition[2];\n      }\n\n      while (!(left instanceof _Condition2.default) & !(left instanceof _SubscriptionCondition2.default) & typeof left !== 'boolean') {\n        left = this.isApplicable(context, message, scope, target, left[0], left[1], left[2]);\n      }\n      if (right !== undefined) {\n        while (!(right instanceof _Condition2.default) & !(right instanceof _SubscriptionCondition2.default) & typeof right !== 'boolean') {\n          right = this.isApplicable(context, message, scope, target, right[0], right[1], right[2]);\n        }\n      }\n\n      var resultLeft = typeof left === 'boolean' ? left : left.isApplicable(context, message, scope, target);\n      var resultRight = void 0;\n      if (right !== undefined) {\n        resultRight = typeof right === 'boolean' ? right : right.isApplicable(context, message, scope, target);\n      }\n      return this.operators[operator]([resultLeft, resultRight]);\n    }\n  }]);\n  return AdvancedCondition;\n}();\n\nexports.default = AdvancedCondition;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvY29uZGl0aW9ucy9BZHZhbmNlZENvbmRpdGlvbi5qcz9iZDBmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25kaXRpb24gZnJvbSAnLi9Db25kaXRpb24nO1xuaW1wb3J0IE9wZXJhdG9ycyBmcm9tICcuLi9PcGVyYXRvcnMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbkNvbmRpdGlvbiBmcm9tICcuL1N1YnNjcmlwdGlvbkNvbmRpdGlvbic7XG5cbmNsYXNzIEFkdmFuY2VkQ29uZGl0aW9uIHtcblxuICBjb25zdHJ1Y3Rvcihjb25kaXRpb24pIHtcbiAgICB0aGlzLm9wZXJhdG9ycyA9IG5ldyBPcGVyYXRvcnMoKTtcbiAgICBpZiAoY29uZGl0aW9uLm9wZXJhdG9ycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25kaXRpb24gPSBjb25kaXRpb24uY29uZGl0aW9uO1xuICAgIH1cbiAgICBjb25kaXRpb24gPSB0aGlzLmJ1aWxkQ29uZGl0aW9uKGNvbmRpdGlvbik7XG4gICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XG4gIH1cblxuICBidWlsZENvbmRpdGlvbihjb25kaXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb25kaXRpb25bMV0pKSB7XG4gICAgICBjb25kaXRpb25bMV0gPSB0aGlzLmJ1aWxkQ29uZGl0aW9uKGNvbmRpdGlvblsxXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjb25kaXRpb25bMV0uYXR0cmlidXRlID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgICBjb25kaXRpb25bMV0gPSBuZXcgU3Vic2NyaXB0aW9uQ29uZGl0aW9uKGNvbmRpdGlvblsxXS5hdHRyaWJ1dGUsIGNvbmRpdGlvblsxXS5vcGVyYXRvciwgY29uZGl0aW9uWzFdLnBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25kaXRpb25bMV0gPSBuZXcgQ29uZGl0aW9uKGNvbmRpdGlvblsxXS5hdHRyaWJ1dGUsIGNvbmRpdGlvblsxXS5vcGVyYXRvciwgY29uZGl0aW9uWzFdLnBhcmFtcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvbmRpdGlvblsyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb25kaXRpb25bMl0pKSB7XG4gICAgICAgIGNvbmRpdGlvblsyXSA9IHRoaXMuYnVpbGRDb25kaXRpb24oY29uZGl0aW9uWzJdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb25kaXRpb25bMl0uYXR0cmlidXRlID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgICAgIGNvbmRpdGlvblsyXSA9IG5ldyBTdWJzY3JpcHRpb25Db25kaXRpb24oY29uZGl0aW9uWzJdLmF0dHJpYnV0ZSwgY29uZGl0aW9uWzJdLm9wZXJhdG9yLCBjb25kaXRpb25bMl0ucGFyYW1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25kaXRpb25bMl0gPSBuZXcgQ29uZGl0aW9uKGNvbmRpdGlvblsyXS5hdHRyaWJ1dGUsIGNvbmRpdGlvblsyXS5vcGVyYXRvciwgY29uZGl0aW9uWzJdLnBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbmRpdGlvbjtcbiAgfVxuXG4gIGlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCBzY29wZSwgdGFyZ2V0LCBvcGVyYXRvciwgbGVmdCwgcmlnaHQpIHtcbiAgICBpZiAoIW9wZXJhdG9yKSB7XG4gICAgICBvcGVyYXRvciA9IHRoaXMuY29uZGl0aW9uWzBdO1xuICAgICAgbGVmdCA9IHRoaXMuY29uZGl0aW9uWzFdO1xuICAgICAgcmlnaHQgPSB0aGlzLmNvbmRpdGlvblsyXTtcbiAgICB9XG5cbiAgICB3aGlsZSAoIShsZWZ0IGluc3RhbmNlb2YgQ29uZGl0aW9uKSAmICEobGVmdCBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbkNvbmRpdGlvbikgJiAodHlwZW9mIGxlZnQgIT09ICdib29sZWFuJykpIHtcbiAgICAgIGxlZnQgPSB0aGlzLmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCBzY29wZSwgdGFyZ2V0LCBsZWZ0WzBdLCBsZWZ0WzFdLCBsZWZ0WzJdKTtcbiAgICB9XG4gICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdoaWxlICghKHJpZ2h0IGluc3RhbmNlb2YgQ29uZGl0aW9uKSAmICEocmlnaHQgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb25Db25kaXRpb24pICYgKHR5cGVvZiByaWdodCAhPT0gJ2Jvb2xlYW4nKSkge1xuICAgICAgICByaWdodCA9IHRoaXMuaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHNjb3BlLCB0YXJnZXQsIHJpZ2h0WzBdLCByaWdodFsxXSwgcmlnaHRbMl0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZXN1bHRMZWZ0ID0gKHR5cGVvZiBsZWZ0ID09PSAnYm9vbGVhbicpID8gbGVmdCA6IGxlZnQuaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHNjb3BlLCB0YXJnZXQpO1xuICAgIGxldCByZXN1bHRSaWdodDtcbiAgICBpZiAocmlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0UmlnaHQgPSAodHlwZW9mIHJpZ2h0ID09PSAnYm9vbGVhbicpID8gcmlnaHQgOiByaWdodC5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9wZXJhdG9yc1tvcGVyYXRvcl0oW3Jlc3VsdExlZnQsIHJlc3VsdFJpZ2h0XSk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBBZHZhbmNlZENvbmRpdGlvbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcG9saWN5L2NvbmRpdGlvbnMvQWR2YW5jZWRDb25kaXRpb24uanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///475\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(60);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(68);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _get2 = __webpack_require__(477);\n\nvar _get3 = _interopRequireDefault(_get2);\n\nvar _inherits2 = __webpack_require__(69);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _Condition2 = __webpack_require__(143);\n\nvar _Condition3 = _interopRequireDefault(_Condition2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>\n* @classdesc Class to represent a subscription condition and evaluate its applicability.\n*/\nvar SubscriptionCondition = function (_Condition) {\n  (0, _inherits3.default)(SubscriptionCondition, _Condition);\n\n  /**\n  * Creates a new SubscriptionCondition.\n  * @class\n  * @param  {string}  attribute\n  * @param  {string}  operator\n  * @param  {*}       params\n  */\n  function SubscriptionCondition(attribute, operator, params) {\n    (0, _classCallCheck3.default)(this, SubscriptionCondition);\n    return (0, _possibleConstructorReturn3.default)(this, (SubscriptionCondition.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition)).call(this, attribute, operator, params));\n  }\n\n  /**\n  * Verifies if the subscription condition is applicable to the message. First, verifies if the message is of the subscription type; second, verifies if the message is from a remote runtime to guarantee that the subscription is being validated in the destination runtime; third, verifies if the subscription preference is met.\n  * @param  {Object}    context   environment where the Policy Engine is being used\n  * @param  {Object}    message\n  */\n\n\n  (0, _createClass3.default)(SubscriptionCondition, [{\n    key: 'isApplicable',\n    value: function isApplicable(context, message) {\n      var isSubscription = message.type === 'subscribe';\n      var isFromRemoteSM = context.isFromRemoteSM(message.from);\n      if (isSubscription & isFromRemoteSM) {\n        return (0, _get3.default)(SubscriptionCondition.prototype.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition.prototype), 'isApplicable', this).call(this, context, message);\n      } else {\n        return false;\n      }\n    }\n  }]);\n  return SubscriptionCondition;\n}(_Condition3.default); /**\n                        * Copyright 2016 PT Inovação e Sistemas SA\n                        * Copyright 2016 INESC-ID\n                        * Copyright 2016 QUOBIS NETWORKS SL\n                        * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                        * Copyright 2016 ORANGE SA\n                        * Copyright 2016 Deutsche Telekom AG\n                        * Copyright 2016 Apizee\n                        * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                        *\n                        * Licensed under the Apache License, Version 2.0 (the \"License\");\n                        * you may not use this file except in compliance with the License.\n                        * You may obtain a copy of the License at\n                        *\n                        *   http://www.apache.org/licenses/LICENSE-2.0\n                        *\n                        * Unless required by applicable law or agreed to in writing, software\n                        * distributed under the License is distributed on an \"AS IS\" BASIS,\n                        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                        * See the License for the specific language governing permissions and\n                        * limitations under the License.\n                        **/\n\nexports.default = SubscriptionCondition;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvY29uZGl0aW9ucy9TdWJzY3JpcHRpb25Db25kaXRpb24uanM/YTkwMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbmltcG9ydCBDb25kaXRpb24gZnJvbSAnLi9Db25kaXRpb24nO1xuXG4vKipcbiogQGF1dGhvciBBbmEgQ2FsZGVpcmEgPGFuYS5jYWxkZWlyYUB0ZWNuaWNvLnVsaXNib2EucHQ+XG4qIEBjbGFzc2Rlc2MgQ2xhc3MgdG8gcmVwcmVzZW50IGEgc3Vic2NyaXB0aW9uIGNvbmRpdGlvbiBhbmQgZXZhbHVhdGUgaXRzIGFwcGxpY2FiaWxpdHkuXG4qL1xuY2xhc3MgU3Vic2NyaXB0aW9uQ29uZGl0aW9uIGV4dGVuZHMgQ29uZGl0aW9uIHtcblxuICAvKipcbiAgKiBDcmVhdGVzIGEgbmV3IFN1YnNjcmlwdGlvbkNvbmRpdGlvbi5cbiAgKiBAY2xhc3NcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBhdHRyaWJ1dGVcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBvcGVyYXRvclxuICAqIEBwYXJhbSAgeyp9ICAgICAgIHBhcmFtc1xuICAqL1xuICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpIHtcbiAgICBzdXBlcihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpO1xuICB9XG5cbiAgLyoqXG4gICogVmVyaWZpZXMgaWYgdGhlIHN1YnNjcmlwdGlvbiBjb25kaXRpb24gaXMgYXBwbGljYWJsZSB0byB0aGUgbWVzc2FnZS4gRmlyc3QsIHZlcmlmaWVzIGlmIHRoZSBtZXNzYWdlIGlzIG9mIHRoZSBzdWJzY3JpcHRpb24gdHlwZTsgc2Vjb25kLCB2ZXJpZmllcyBpZiB0aGUgbWVzc2FnZSBpcyBmcm9tIGEgcmVtb3RlIHJ1bnRpbWUgdG8gZ3VhcmFudGVlIHRoYXQgdGhlIHN1YnNjcmlwdGlvbiBpcyBiZWluZyB2YWxpZGF0ZWQgaW4gdGhlIGRlc3RpbmF0aW9uIHJ1bnRpbWU7IHRoaXJkLCB2ZXJpZmllcyBpZiB0aGUgc3Vic2NyaXB0aW9uIHByZWZlcmVuY2UgaXMgbWV0LlxuICAqIEBwYXJhbSAge09iamVjdH0gICAgY29udGV4dCAgIGVudmlyb25tZW50IHdoZXJlIHRoZSBQb2xpY3kgRW5naW5lIGlzIGJlaW5nIHVzZWRcbiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIG1lc3NhZ2VcbiAgKi9cbiAgaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UpIHtcbiAgICBsZXQgaXNTdWJzY3JpcHRpb24gPSBtZXNzYWdlLnR5cGUgPT09ICdzdWJzY3JpYmUnO1xuICAgIGxldCBpc0Zyb21SZW1vdGVTTSA9IGNvbnRleHQuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTtcbiAgICBpZiAoaXNTdWJzY3JpcHRpb24gJiBpc0Zyb21SZW1vdGVTTSkge1xuICAgICAgcmV0dXJuIHN1cGVyLmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFN1YnNjcmlwdGlvbkNvbmRpdGlvbjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcG9saWN5L2NvbmRpdGlvbnMvU3Vic2NyaXB0aW9uQ29uZGl0aW9uLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7QUFDQTs7Ozs7QUFDQTs7OztBQUlBOzs7QUFFQTs7Ozs7OztBQU9BO0FBQUE7QUFBQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUF2REE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkRBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///476\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nexports.__esModule = true;\n\nvar _getPrototypeOf = __webpack_require__(60);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _getOwnPropertyDescriptor = __webpack_require__(478);\n\nvar _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);\n\n  if (desc === undefined) {\n    var parent = (0, _getPrototypeOf2.default)(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if ("value" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXQuanM/Yzg0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpO1xuXG52YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICB2YXIgZGVzYyA9ICgwLCBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMi5kZWZhdWx0KShvYmplY3QsIHByb3BlcnR5KTtcblxuICBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHBhcmVudCA9ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKG9iamVjdCk7XG5cbiAgICBpZiAocGFyZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcbiAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7XG5cbiAgICBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTtcbiAgfVxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0LmpzXG4vLyBtb2R1bGUgaWQgPSA0Nzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///477\n');
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(479), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzPzJiYTEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1xuLy8gbW9kdWxlIGlkID0gNDc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///478\n');
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(480);\nvar $Object = __webpack_require__(13).Object;\nmodule.exports = function getOwnPropertyDescriptor(it, key) {\n  return $Object.getOwnPropertyDescriptor(it, key);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzPzcyNzkiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICByZXR1cm4gJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQ3OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///479\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = __webpack_require__(45);\nvar $getOwnPropertyDescriptor = __webpack_require__(141).f;\n\n__webpack_require__(97)('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzPzg4ODkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQ4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///480\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __webpack_require__(40);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _getPrototypeOf = __webpack_require__(60);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(68);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(69);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _Bus2 = __webpack_require__(200);\n\nvar _Bus3 = _interopRequireDefault(_Bus2);\n\nvar _Pipeline = __webpack_require__(482);\n\nvar _Pipeline2 = _interopRequireDefault(_Pipeline);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('MessageBus'); /**\n                                          * Copyright 2016 PT Inovação e Sistemas SA\n                                          * Copyright 2016 INESC-ID\n                                          * Copyright 2016 QUOBIS NETWORKS SL\n                                          * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                                          * Copyright 2016 ORANGE SA\n                                          * Copyright 2016 Deutsche Telekom AG\n                                          * Copyright 2016 Apizee\n                                          * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                                          *\n                                          * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                          * you may not use this file except in compliance with the License.\n                                          * You may obtain a copy of the License at\n                                          *\n                                          *   http://www.apache.org/licenses/LICENSE-2.0\n                                          *\n                                          * Unless required by applicable law or agreed to in writing, software\n                                          * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                          * See the License for the specific language governing permissions and\n                                          * limitations under the License.\n                                          **/\n\n// Log system\n\n/**\n* @author micaelpedrosa@gmail.com\n* Message BUS Interface is an extension of the Bus\n* It doesn't support the default '*' listener, instead it uses the registry.resolve(..)\n*/\nvar MessageBus = function (_Bus) {\n  (0, _inherits3.default)(MessageBus, _Bus);\n\n  /* private\n  _registry: Registry\n  _forwards: { <from-url>: { fl: MsgListener, sandboxToUrls: Map(Sandbox, [to-url]), urlToSandbox: { to-url: Sandbox } } }\n   _pipeline: Pipeline\n  */\n\n  //TODO: future optimization\n  //1. message batch processing with setInterval\n  //2. resolve default gateway/protostub with register.resolve\n\n  function MessageBus(registry) {\n    (0, _classCallCheck3.default)(this, MessageBus);\n\n    var _this2 = (0, _possibleConstructorReturn3.default)(this, (MessageBus.__proto__ || (0, _getPrototypeOf2.default)(MessageBus)).call(this));\n\n    _this2._registry = registry;\n    _this2._forwards = {};\n\n    _this2._pipeline = new _Pipeline2.default(function (error) {\n      log.error('PIPELINE-ERROR: ', (0, _stringify2.default)(error));\n    });\n    return _this2;\n  }\n\n  (0, _createClass3.default)(MessageBus, [{\n    key: 'postMessage',\n\n\n    /**\n     * Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.\n     * External routing use the registry.resolve(..) method to decide the destination sandbox.\n     * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}\n     * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a \"Timeout\".\n     * @return {number}                  the Message id\n     */\n    value: function postMessage(inMsg, responseCallback) {\n      log.info('onPOSTMessage: ', inMsg);\n      var _this = this;\n\n      _this._genId(inMsg);\n\n      _this._pipeline.process(inMsg, function (msg) {\n\n        _this._responseCallback(inMsg, responseCallback);\n\n        if (!_this._onResponse(msg)) {\n          var itemList = _this._subscriptions[msg.to];\n          if (itemList) {\n            //do not publish on default address, because of loopback cycle\n            _this._publishOn(itemList, msg);\n          } else {\n            //if there is no listener, send to external interface\n            _this._onPostMessage(msg);\n          }\n        }\n      });\n\n      return inMsg.id;\n    }\n\n    /**\n     * Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.\n     * This means, even if there is a listener for the address, it will also send the message to the external routing.\n     * @param {URL} from Publish address.\n     */\n\n  }, {\n    key: 'addPublish',\n    value: function addPublish(from) {\n      var _this3 = this;\n\n      var _this = this;\n\n      //verify if forward exist\n      var refCount = _this._forwards[from];\n      if (!refCount) {\n        var forwardListener = _this.addListener(from, function (msg) {\n          log.info('MB-PUBLISH: ( ' + from + ' )');\n          _this._onPostMessage(msg);\n        });\n\n        refCount = {\n          counter: 0,\n          fl: forwardListener,\n          remove: function remove() {\n            _this3.counter--;\n            if (_this3.counter === 0) {\n              _this3.fl.remove();\n              delete _this._forwards[from];\n            }\n          }\n        };\n\n        _this._forwards[from] = refCount;\n      }\n\n      refCount.counter++;\n      return refCount;\n    }\n\n    /**\n     * Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.\n     * @param {URL} from Message destination, it's actually the field \"to\" of the message.\n     * @param {URL} to   Forward address.\n     */\n\n  }, {\n    key: 'addForward',\n    value: function addForward(from, to) {\n      var _this = this;\n\n      return _this.addListener(from, function (msg) {\n        log.info('MB-FORWARD: ( ' + from + ' to ' + to + ' )');\n        _this.forward(to, msg);\n      });\n    }\n\n    /**\n     * Just forward's a message to the forward address. Listeners should be available for the forward address.\n     * @param  {URL} url Forward address.\n     * @param  {Message} msg Message to forward\n     */\n\n  }, {\n    key: 'forward',\n    value: function forward(url, msg) {\n      var _this = this;\n\n      var itemList = _this._subscriptions[url];\n      if (itemList) {\n        _this._publishOn(itemList, msg);\n      }\n    }\n\n    //default route, if there are no listeners available for a message destination.\n\n  }, {\n    key: '_onPostMessage',\n    value: function _onPostMessage(msg) {\n      var _this = this;\n\n      //resolve external protostub...\n      _this._registry.resolve(msg).then(function (route, msg2route) {\n        if (msg2route) _this.forward(route, msg2route);else _this.forward(route, msg);\n      }).catch(function (e) {\n        log.error('RESOLVE-ERROR: ', e);\n      });\n    }\n  }, {\n    key: 'pipeline',\n    get: function get() {\n      return this._pipeline;\n    }\n  }]);\n  return MessageBus;\n}(_Bus3.default);\n\nexports.default = MessageBus;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9idXMvTWVzc2FnZUJ1cy5qcz8zYTNhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuLy8gTG9nIHN5c3RlbVxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJ2xvZ2xldmVsJztcbmxldCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdNZXNzYWdlQnVzJyk7XG5cbmltcG9ydCBCdXMgZnJvbSAnLi9CdXMnO1xuaW1wb3J0IFBpcGVsaW5lIGZyb20gJy4vUGlwZWxpbmUnO1xuXG4vKipcbiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxuKiBNZXNzYWdlIEJVUyBJbnRlcmZhY2UgaXMgYW4gZXh0ZW5zaW9uIG9mIHRoZSBCdXNcbiogSXQgZG9lc24ndCBzdXBwb3J0IHRoZSBkZWZhdWx0ICcqJyBsaXN0ZW5lciwgaW5zdGVhZCBpdCB1c2VzIHRoZSByZWdpc3RyeS5yZXNvbHZlKC4uKVxuKi9cbmNsYXNzIE1lc3NhZ2VCdXMgZXh0ZW5kcyBCdXMge1xuICAvKiBwcml2YXRlXG4gIF9yZWdpc3RyeTogUmVnaXN0cnlcbiAgX2ZvcndhcmRzOiB7IDxmcm9tLXVybD46IHsgZmw6IE1zZ0xpc3RlbmVyLCBzYW5kYm94VG9VcmxzOiBNYXAoU2FuZGJveCwgW3RvLXVybF0pLCB1cmxUb1NhbmRib3g6IHsgdG8tdXJsOiBTYW5kYm94IH0gfSB9XG5cbiAgX3BpcGVsaW5lOiBQaXBlbGluZVxuICAqL1xuXG4gIC8vVE9ETzogZnV0dXJlIG9wdGltaXphdGlvblxuICAvLzEuIG1lc3NhZ2UgYmF0Y2ggcHJvY2Vzc2luZyB3aXRoIHNldEludGVydmFsXG4gIC8vMi4gcmVzb2x2ZSBkZWZhdWx0IGdhdGV3YXkvcHJvdG9zdHViIHdpdGggcmVnaXN0ZXIucmVzb2x2ZVxuXG4gIGNvbnN0cnVjdG9yKHJlZ2lzdHJ5KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICAgIHRoaXMuX2ZvcndhcmRzID0ge307XG5cbiAgICB0aGlzLl9waXBlbGluZSA9IG5ldyBQaXBlbGluZSgoZXJyb3IpID0+IHtcbiAgICAgIGxvZy5lcnJvcignUElQRUxJTkUtRVJST1I6ICcsIEpTT04uc3RyaW5naWZ5KGVycm9yKSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXQgcGlwZWxpbmUoKSB7IHJldHVybiB0aGlzLl9waXBlbGluZTsgfVxuXG4gIC8qKlxuICAgKiBQb3N0IGEgbWVzc2FnZSBmb3Igcm91dGluZy4gSXQgd2lsbCBmaXJzdCBzZWFyY2ggZm9yIGEgbGlzdGVuZXIsIGlmIHRoZXJlIGlzIG5vIG9uZSwgaXQgc2VuZHMgdG8gYSBleHRlcm5hbCByb3V0aW5nIHVzaW5nIHRoZSBfb25Qb3N0TWVzc2FnZS5cbiAgICogRXh0ZXJuYWwgcm91dGluZyB1c2UgdGhlIHJlZ2lzdHJ5LnJlc29sdmUoLi4pIG1ldGhvZCB0byBkZWNpZGUgdGhlIGRlc3RpbmF0aW9uIHNhbmRib3guXG4gICAqIEBwYXJhbSAge01lc3NhZ2V9IGluTXNnICAgICAgICAgICAgSlNPTiB3aXRoIG1hbmRhdG9yeSBNZXNzYWdlIHN0cnVjdHVyZSB7aWQsIHR5cGUsIGZyb20sIHRvfVxuICAgKiBAcGFyYW0gIHtDYWxsYmFja30gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBjYWxsYmFjayBpZiBhIHJlc3BvbnNlIGlzIGV4cGVjdGVkIGZyb20gdGhlIHJlcXVlc3QuIEEgcmVzcG9uc2Ugd2lsbCBiZSBhbHdheXMgc2VudCwgZXZlbiBpZiBpdCBpcyBhIFwiVGltZW91dFwiLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgdGhlIE1lc3NhZ2UgaWRcbiAgICovXG4gIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7XG4gICAgbG9nLmluZm8oJ29uUE9TVE1lc3NhZ2U6ICcsIGluTXNnKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX2dlbklkKGluTXNnKTtcblxuICAgIF90aGlzLl9waXBlbGluZS5wcm9jZXNzKGluTXNnLCAobXNnKSA9PiB7XG5cbiAgICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKTtcblxuICAgICAgaWYgKCFfdGhpcy5fb25SZXNwb25zZShtc2cpKSB7XG4gICAgICAgIGxldCBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW21zZy50b107XG4gICAgICAgIGlmIChpdGVtTGlzdCkge1xuICAgICAgICAgIC8vZG8gbm90IHB1Ymxpc2ggb24gZGVmYXVsdCBhZGRyZXNzLCBiZWNhdXNlIG9mIGxvb3BiYWNrIGN5Y2xlXG4gICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2lmIHRoZXJlIGlzIG5vIGxpc3RlbmVyLCBzZW5kIHRvIGV4dGVybmFsIGludGVyZmFjZVxuICAgICAgICAgIF90aGlzLl9vblBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpbk1zZy5pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGV4dGVybmFsIHB1Ymxpc2ggYWRkcmVzcyBsaXN0ZW5lci4gRXZlcnkgbWVzc2FnZSBmb3IgdGhlIGFkZHJlc3Mgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIGV4dGVybmFsIHJvdXRpbmcgYnkgX29uUG9zdE1lc3NhZ2UuXG4gICAqIFRoaXMgbWVhbnMsIGV2ZW4gaWYgdGhlcmUgaXMgYSBsaXN0ZW5lciBmb3IgdGhlIGFkZHJlc3MsIGl0IHdpbGwgYWxzbyBzZW5kIHRoZSBtZXNzYWdlIHRvIHRoZSBleHRlcm5hbCByb3V0aW5nLlxuICAgKiBAcGFyYW0ge1VSTH0gZnJvbSBQdWJsaXNoIGFkZHJlc3MuXG4gICAqL1xuICBhZGRQdWJsaXNoKGZyb20pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy92ZXJpZnkgaWYgZm9yd2FyZCBleGlzdFxuICAgIGxldCByZWZDb3VudCA9IF90aGlzLl9mb3J3YXJkc1tmcm9tXTtcbiAgICBpZiAoIXJlZkNvdW50KSB7XG4gICAgICBsZXQgZm9yd2FyZExpc3RlbmVyID0gX3RoaXMuYWRkTGlzdGVuZXIoZnJvbSwgKG1zZykgPT4ge1xuICAgICAgICBsb2cuaW5mbygnTUItUFVCTElTSDogKCAnICsgZnJvbSArICcgKScpO1xuICAgICAgICBfdGhpcy5fb25Qb3N0TWVzc2FnZShtc2cpO1xuICAgICAgfSk7XG5cbiAgICAgIHJlZkNvdW50ID0ge1xuICAgICAgICBjb3VudGVyOiAwLFxuICAgICAgICBmbDogZm9yd2FyZExpc3RlbmVyLFxuICAgICAgICByZW1vdmU6ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmNvdW50ZXItLTtcbiAgICAgICAgICBpZiAodGhpcy5jb3VudGVyID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmZsLnJlbW92ZSgpO1xuICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9mb3J3YXJkc1tmcm9tXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgX3RoaXMuX2ZvcndhcmRzW2Zyb21dID0gcmVmQ291bnQ7XG4gICB9XG5cbiAgIHJlZkNvdW50LmNvdW50ZXIrKztcbiAgIHJldHVybiByZWZDb3VudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgZm9yd2FyZCBsaXN0ZW5lciBmb3IgYSBtZXNzYWdlIGRlc3RpbmF0aW9uLiBFdmVyeSBtZXNzYWdlIHJlYWNoaW5nIGFuIGFkZHJlc3Mgd2lsbCBiZSBhbHNvIHNlbnQgdG8gdGhlIGZvcndhcmQgYWRkcmVzcy5cbiAgICogQHBhcmFtIHtVUkx9IGZyb20gTWVzc2FnZSBkZXN0aW5hdGlvbiwgaXQncyBhY3R1YWxseSB0aGUgZmllbGQgXCJ0b1wiIG9mIHRoZSBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge1VSTH0gdG8gICBGb3J3YXJkIGFkZHJlc3MuXG4gICAqL1xuICAgYWRkRm9yd2FyZChmcm9tLCB0bykge1xuICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgIHJldHVybiBfdGhpcy5hZGRMaXN0ZW5lcihmcm9tLCAobXNnKSA9PiB7XG4gICAgICAgbG9nLmluZm8oJ01CLUZPUldBUkQ6ICggJyArIGZyb20gKyAnIHRvICcgKyB0byArICcgKScpO1xuICAgICAgIF90aGlzLmZvcndhcmQodG8sIG1zZyk7XG4gICAgIH0pO1xuICAgfVxuXG4gICAvKipcbiAgICAqIEp1c3QgZm9yd2FyZCdzIGEgbWVzc2FnZSB0byB0aGUgZm9yd2FyZCBhZGRyZXNzLiBMaXN0ZW5lcnMgc2hvdWxkIGJlIGF2YWlsYWJsZSBmb3IgdGhlIGZvcndhcmQgYWRkcmVzcy5cbiAgICAqIEBwYXJhbSAge1VSTH0gdXJsIEZvcndhcmQgYWRkcmVzcy5cbiAgICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBNZXNzYWdlIHRvIGZvcndhcmRcbiAgICAqL1xuICAgZm9yd2FyZCh1cmwsIG1zZykge1xuICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgIGxldCBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW3VybF07XG4gICAgIGlmIChpdGVtTGlzdCkge1xuICAgICAgIF90aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7XG4gICAgIH1cbiAgIH1cblxuICAgLy9kZWZhdWx0IHJvdXRlLCBpZiB0aGVyZSBhcmUgbm8gbGlzdGVuZXJzIGF2YWlsYWJsZSBmb3IgYSBtZXNzYWdlIGRlc3RpbmF0aW9uLlxuICAgX29uUG9zdE1lc3NhZ2UobXNnKSB7XG4gICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgLy9yZXNvbHZlIGV4dGVybmFsIHByb3Rvc3R1Yi4uLlxuICAgICBfdGhpcy5fcmVnaXN0cnkucmVzb2x2ZShtc2cpLnRoZW4oKHJvdXRlLCBtc2cycm91dGUpID0+IHtcbiAgICAgICBpZiAobXNnMnJvdXRlKSBfdGhpcy5mb3J3YXJkKHJvdXRlLCBtc2cycm91dGUpO1xuICAgICAgIGVsc2UgX3RoaXMuZm9yd2FyZChyb3V0ZSwgbXNnKTtcbiAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZSkge1xuICAgICAgIGxvZy5lcnJvcignUkVTT0xWRS1FUlJPUjogJywgZSk7XG4gICAgIH0pO1xuICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlQnVzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9idXMvTWVzc2FnZUJ1cy5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7OztBQUpBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUZBO0FBQ0E7QUFNQTs7Ozs7QUFLQTs7O0FBQ0E7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBUUE7QUFDQTs7Ozs7QUFHQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBS0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVRBO0FBQ0E7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUE1R0E7QUFBQTtBQUFBOzs7OztBQStHQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///481\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n* Copyright 2016 PT Inovação e Sistemas SA\n* Copyright 2016 INESC-ID\n* Copyright 2016 QUOBIS NETWORKS SL\n* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n* Copyright 2016 ORANGE SA\n* Copyright 2016 Deutsche Telekom AG\n* Copyright 2016 Apizee\n* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n*\n* Licensed under the Apache License, Version 2.0 (the "License");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an "AS IS" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n**/\n\n/**\n* @author micaelpedrosa@gmail.com\n* Sequencial processor of methods. Similar to how Sequential Promise\'s work, but better fit for message processing.\n* Normal use for this, is to intercept all messages with configured handlers, and act accordingly.\n*/\nvar Pipeline = function () {\n  /* public\n    handlers: ((PipeContext) => void)[]\n    onFail: (error) => void\n  */\n\n  function Pipeline(_onFail) {\n    (0, _classCallCheck3.default)(this, Pipeline);\n\n    var _this = this;\n\n    _this.handlers = [];\n    _this.onFail = _onFail;\n  }\n\n  /**\n   * Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.\n   * @param  {Message} msg       Message for the queue\n   * @param  {Callback} onDeliver When message is finished processing from all handlers, it will be delivered in this callback.\n   */\n\n\n  (0, _createClass3.default)(Pipeline, [{\n    key: "process",\n    value: function process(msg, onDeliver) {\n      var _this = this;\n\n      if (_this.handlers.length > 0) {\n        var iter = new Iterator(_this.handlers);\n        iter.next(new PipeContext(_this, iter, msg, onDeliver));\n      } else {\n        onDeliver(msg);\n      }\n    }\n  }]);\n  return Pipeline;\n}();\n\n/**\n* @author micaelpedrosa@gmail.com\n* Wrapper around a message that adds actions that can be fired by any interceptor handler.\n* The Pipeline is asynchronous, so an handler should always call an action, the default one is "next()"\n*/\n\n\nvar PipeContext = function () {\n  /* private\n    _inStop: boolean\n     _pipeline: Pipeline\n    _iter: Iterator\n    _msg: Message\n  */\n\n  function PipeContext(pipeline, iter, msg, onDeliver) {\n    (0, _classCallCheck3.default)(this, PipeContext);\n\n    var _this = this;\n\n    _this._inStop = false;\n\n    _this._pipeline = pipeline;\n    _this._iter = iter;\n    _this._msg = msg;\n    _this._onDeliver = onDeliver;\n  }\n\n  (0, _createClass3.default)(PipeContext, [{\n    key: "next",\n\n\n    /**\n     * Proceed to the next interceptor handler, unless there was an error. If it\'s the last one, proceed to onDeliver handler.\n     */\n    value: function next() {\n      var _this = this;\n\n      if (!_this._inStop) {\n        if (_this._iter.hasNext) {\n          _this._iter.next(_this);\n        } else {\n          _this._onDeliver(_this._msg);\n        }\n      }\n    }\n\n    /**\n     * Proceed directly to the onDeliver handler, unless there was an error.\n     */\n\n  }, {\n    key: "deliver",\n    value: function deliver() {\n      var _this = this;\n      if (!_this._inStop) {\n        _this._inStop = true;\n        _this._onDeliver(_this._msg);\n      }\n    }\n\n    /**\n     * Mark the context with an error and proceed to the onFail handler.\n     * @param  {[type]} error [description]\n     */\n\n  }, {\n    key: "fail",\n    value: function fail(error) {\n      var _this = this;\n\n      if (!_this._inStop) {\n        _this._inStop = true;\n        if (_this._pipeline.onFail) {\n          _this._pipeline.onFail(error);\n        }\n      }\n    }\n  }, {\n    key: "pipeline",\n    get: function get() {\n      return this._pipeline;\n    }\n  }, {\n    key: "msg",\n    get: function get() {\n      return this._msg;\n    },\n    set: function set(inMsg) {\n      this._msg = inMsg;\n    }\n  }]);\n  return PipeContext;\n}();\n\nvar Iterator = function () {\n  /* private\n    _index: number\n    _array: []\n  */\n\n  function Iterator(array) {\n    (0, _classCallCheck3.default)(this, Iterator);\n\n    this._index = -1;\n    this._array = array;\n  }\n\n  (0, _createClass3.default)(Iterator, [{\n    key: "hasNext",\n    get: function get() {\n      return this._index < this._array.length - 1;\n    }\n  }, {\n    key: "next",\n    get: function get() {\n      this._index++;\n      return this._array[this._index];\n    }\n  }]);\n  return Iterator;\n}();\n\nexports.default = Pipeline;\nmodule.exports = exports["default"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9idXMvUGlwZWxpbmUuanM/YTAzZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8qKlxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXG4qIFNlcXVlbmNpYWwgcHJvY2Vzc29yIG9mIG1ldGhvZHMuIFNpbWlsYXIgdG8gaG93IFNlcXVlbnRpYWwgUHJvbWlzZSdzIHdvcmssIGJ1dCBiZXR0ZXIgZml0IGZvciBtZXNzYWdlIHByb2Nlc3NpbmcuXG4qIE5vcm1hbCB1c2UgZm9yIHRoaXMsIGlzIHRvIGludGVyY2VwdCBhbGwgbWVzc2FnZXMgd2l0aCBjb25maWd1cmVkIGhhbmRsZXJzLCBhbmQgYWN0IGFjY29yZGluZ2x5LlxuKi9cbmNsYXNzIFBpcGVsaW5lIHtcbiAgLyogcHVibGljXG4gICAgaGFuZGxlcnM6ICgoUGlwZUNvbnRleHQpID0+IHZvaWQpW11cbiAgICBvbkZhaWw6IChlcnJvcikgPT4gdm9pZFxuICAqL1xuXG4gIGNvbnN0cnVjdG9yKF9vbkZhaWwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICBfdGhpcy5vbkZhaWwgPSBfb25GYWlsO1xuICB9XG5cbiAgLyoqXG4gICAqIEluc2VydCBhIG1lc3NhZ2UgaW4gdGhlIHBpcGVsaW5lIHF1ZXVlLiBBbGwgbWVzc2FnZXMgYXJlIHdyYXBwZWQgd2l0aCBhIFBpcGVDb250ZXh0LlxuICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgICAgICAgTWVzc2FnZSBmb3IgdGhlIHF1ZXVlXG4gICAqIEBwYXJhbSAge0NhbGxiYWNrfSBvbkRlbGl2ZXIgV2hlbiBtZXNzYWdlIGlzIGZpbmlzaGVkIHByb2Nlc3NpbmcgZnJvbSBhbGwgaGFuZGxlcnMsIGl0IHdpbGwgYmUgZGVsaXZlcmVkIGluIHRoaXMgY2FsbGJhY2suXG4gICAqL1xuICBwcm9jZXNzKG1zZywgb25EZWxpdmVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmIChfdGhpcy5oYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgaXRlciA9IG5ldyBJdGVyYXRvcihfdGhpcy5oYW5kbGVycyk7XG4gICAgICBpdGVyLm5leHQobmV3IFBpcGVDb250ZXh0KF90aGlzLCBpdGVyLCBtc2csIG9uRGVsaXZlcikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbkRlbGl2ZXIobXNnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4qIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb21cbiogV3JhcHBlciBhcm91bmQgYSBtZXNzYWdlIHRoYXQgYWRkcyBhY3Rpb25zIHRoYXQgY2FuIGJlIGZpcmVkIGJ5IGFueSBpbnRlcmNlcHRvciBoYW5kbGVyLlxuKiBUaGUgUGlwZWxpbmUgaXMgYXN5bmNocm9ub3VzLCBzbyBhbiBoYW5kbGVyIHNob3VsZCBhbHdheXMgY2FsbCBhbiBhY3Rpb24sIHRoZSBkZWZhdWx0IG9uZSBpcyBcIm5leHQoKVwiXG4qL1xuY2xhc3MgUGlwZUNvbnRleHQge1xuICAvKiBwcml2YXRlXG4gICAgX2luU3RvcDogYm9vbGVhblxuXG4gICAgX3BpcGVsaW5lOiBQaXBlbGluZVxuICAgIF9pdGVyOiBJdGVyYXRvclxuICAgIF9tc2c6IE1lc3NhZ2VcbiAgKi9cblxuICBjb25zdHJ1Y3RvcihwaXBlbGluZSwgaXRlciwgbXNnLCBvbkRlbGl2ZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX2luU3RvcCA9IGZhbHNlO1xuXG4gICAgX3RoaXMuX3BpcGVsaW5lID0gcGlwZWxpbmU7XG4gICAgX3RoaXMuX2l0ZXIgPSBpdGVyO1xuICAgIF90aGlzLl9tc2cgPSBtc2c7XG4gICAgX3RoaXMuX29uRGVsaXZlciA9IG9uRGVsaXZlcjtcbiAgfVxuXG4gIGdldCBwaXBlbGluZSgpIHsgcmV0dXJuIHRoaXMuX3BpcGVsaW5lOyB9XG5cbiAgZ2V0IG1zZygpIHsgcmV0dXJuIHRoaXMuX21zZzsgfVxuICBzZXQgbXNnKGluTXNnKSB7IHRoaXMuX21zZyA9IGluTXNnOyB9XG5cbiAgLyoqXG4gICAqIFByb2NlZWQgdG8gdGhlIG5leHQgaW50ZXJjZXB0b3IgaGFuZGxlciwgdW5sZXNzIHRoZXJlIHdhcyBhbiBlcnJvci4gSWYgaXQncyB0aGUgbGFzdCBvbmUsIHByb2NlZWQgdG8gb25EZWxpdmVyIGhhbmRsZXIuXG4gICAqL1xuICBuZXh0KCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIV90aGlzLl9pblN0b3ApIHtcbiAgICAgIGlmIChfdGhpcy5faXRlci5oYXNOZXh0KSB7XG4gICAgICAgIF90aGlzLl9pdGVyLm5leHQoX3RoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuX29uRGVsaXZlcihfdGhpcy5fbXNnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VlZCBkaXJlY3RseSB0byB0aGUgb25EZWxpdmVyIGhhbmRsZXIsIHVubGVzcyB0aGVyZSB3YXMgYW4gZXJyb3IuXG4gICAqL1xuICBkZWxpdmVyKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKCFfdGhpcy5faW5TdG9wKSB7XG4gICAgICBfdGhpcy5faW5TdG9wID0gdHJ1ZTtcbiAgICAgIF90aGlzLl9vbkRlbGl2ZXIoX3RoaXMuX21zZyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hcmsgdGhlIGNvbnRleHQgd2l0aCBhbiBlcnJvciBhbmQgcHJvY2VlZCB0byB0aGUgb25GYWlsIGhhbmRsZXIuXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gZXJyb3IgW2Rlc2NyaXB0aW9uXVxuICAgKi9cbiAgZmFpbChlcnJvcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIV90aGlzLl9pblN0b3ApIHtcbiAgICAgIF90aGlzLl9pblN0b3AgPSB0cnVlO1xuICAgICAgaWYgKF90aGlzLl9waXBlbGluZS5vbkZhaWwpIHtcbiAgICAgICAgX3RoaXMuX3BpcGVsaW5lLm9uRmFpbChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNsYXNzIEl0ZXJhdG9yIHtcbiAgLyogcHJpdmF0ZVxuICAgIF9pbmRleDogbnVtYmVyXG4gICAgX2FycmF5OiBbXVxuICAqL1xuXG4gIGNvbnN0cnVjdG9yKGFycmF5KSB7XG4gICAgdGhpcy5faW5kZXggPSAtMTtcbiAgICB0aGlzLl9hcnJheSA9IGFycmF5O1xuICB9XG5cbiAgZ2V0IGhhc05leHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2luZGV4IDwgdGhpcy5fYXJyYXkubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIGdldCBuZXh0KCkge1xuICAgIHRoaXMuX2luZGV4Kys7XG4gICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2luZGV4XTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQaXBlbGluZTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYnVzL1BpcGVsaW5lLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBOzs7OztBQUtBO0FBQ0E7Ozs7O0FBS0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUdBOzs7Ozs7O0FBS0E7QUFDQTs7Ozs7OztBQVFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQU1BOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQTVDQTtBQUFBO0FBQUE7OztBQUVBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTs7Ozs7QUE0Q0E7QUFDQTs7Ozs7QUFLQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFHQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///482\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = __webpack_require__(96);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nvar _AddressAllocation = __webpack_require__(99);\n\nvar _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('loader'); // Log System\n\nvar Loader = function () {\n  function Loader(runtimeURL, runtimeConfiguration, runtimeDescriptorsInstance) {\n    (0, _classCallCheck3.default)(this, Loader);\n\n    if (!runtimeConfiguration) throw Error('[Runtime.Loader] The descriptor need to know the runtime configuration');\n    if (!runtimeDescriptorsInstance) throw Error('[Runtime.Loader] The descriptor need to know the runtime Descriptor instance');\n\n    this.log = log;\n\n    this.runtimeConfiguration = runtimeConfiguration;\n    this.descriptors = runtimeDescriptorsInstance;\n  }\n\n  /**\n   * Set runtime url\n   * @param  {string} value runtimeURL\n   */\n\n\n  (0, _createClass3.default)(Loader, [{\n    key: 'loadHyperty',\n\n\n    /**\n     * Deploy Hyperty from Catalogue URL\n     *\n     * @see https://github.com/reTHINK-project/specs/tree/master/datamodel/core/address\n     *\n     * @param {URL.HypertyCatalogueURL} hypertyCatalogueURL - The Catalogue URL used to identify descriptors in the Catalogue.\n     * @param {boolean|URL.HypertyURL} [reuseURL=false] reuseURL - reuseURL is used to reuse the hypertyURL previously registred, by default the reuse is disabled;\n     * @param {URL} appURL - the app url origin address;\n     * @param {object} IdpConstraint - constraints to be used when selecting the identity to be associated with the Hyperty including origin, idp, and idHint.\n     * @returns {Promise<Boolean, Error>} this is Promise and returns true if all components are loaded with success or an error if someone fails.\n     *\n     * @memberOf Loader\n     */\n    value: function loadHyperty(hypertyCatalogueURL) {\n      var reuseURL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _this = this;\n\n      var IdpConstraint = arguments[2];\n      var appURL = arguments[3];\n\n\n      if (!this._readyToUse()) return false;\n      if (!hypertyCatalogueURL) throw new Error('[Runtime.Loader] Hyperty descriptor url parameter is needed');\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var _hypertyURL = void 0;\n        var _hypertySandbox = void 0;\n        var _hypertyDescriptor = void 0;\n        var _hypertySourcePackage = void 0;\n        var haveError = false;\n\n        var errorReason = function errorReason(reason) {\n          log.info('[Runtime.Loader] Something failed on the deploy hyperty: ', reason);\n          reject(reason);\n        };\n\n        var handleError = function handleError(reason) {\n          haveError = true;\n          reject(reason);\n        };\n\n        // Get Hyperty descriptor\n        // TODO: the request Module should be changed,\n        // because at this moment it is incompatible with nodejs;\n        // Probably we need to pass a factory like we do for sandboxes;\n        log.info('[Runtime.Loader] ------------------ Hyperty ------------------------');\n        log.info('[Runtime.Loader] Get hyperty descriptor for :', hypertyCatalogueURL);\n        return _this.descriptors.getHypertyDescriptor(hypertyCatalogueURL).then(function (hypertyDescriptor) {\n          // at this point, we have completed \"step 2 and 3\" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md\n          log.info('[Runtime.Loader] 1: return hyperty descriptor');\n\n          // hyperty contains the full path of the catalogue URL, e.g.\n          // catalogue.rethink.eu/.well-known/..........\n          _hypertyDescriptor = hypertyDescriptor;\n\n          var sourcePackageURL = hypertyDescriptor.sourcePackageURL;\n\n          if (sourcePackageURL === '/sourcePackage') {\n            return hypertyDescriptor.sourcePackage;\n          }\n\n          // Get the hyperty source code\n          return _this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n        }, handleError).then(function (sourcePackage) {\n          if (haveError) return false;\n\n          log.info('[Runtime.Loader] 2: return hyperty source code');\n\n          // at this point, we have completed \"step 4 and 5\" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md\n\n          _hypertySourcePackage = sourcePackage;\n\n          //\n          // steps 6 -- 9 are skipped.\n          // TODO: on release of core 0.2;\n          // TODO: Promise to check the policy engine\n\n          // mock-up code;\n          // temporary code, only\n          var policy = true;\n\n          return policy;\n        }, handleError).then(function (policyResult) {\n          if (haveError) return false;\n          log.info('[Runtime.Loader] 3: return policy engine result' + policyResult);\n\n          // we have completed step 6 to 9 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n          //\n          // Steps 6 -- 9\n          // As a result of the sipped steps, we know at this point if we execute\n          // inSameSandbox or not.\n          //\n\n          // For testing, just assume we execute in same Sandbox.\n          var inSameSandbox = true;\n          var sandbox = void 0;\n\n          if (inSameSandbox) {\n\n            // this don't need be a Promise;\n            sandbox = _this.registry.getAppSandbox();\n\n            // we have completed step 11 here.\n          } else {\n\n            var domain = (0, _utils.divideURL)(hypertyCatalogueURL).domain;\n\n            // getSandbox, this will return a promise;\n            sandbox = _this.registry.getSandbox(domain);\n          }\n\n          // this will return the sandbox or one promise to getSandbox;\n          return sandbox;\n        }, handleError).then(function (sandbox) {\n          if (haveError) return false;\n          log.info('[Runtime.Loader] 4: return the sandbox', sandbox);\n\n          // Return the sandbox indepentely if it running in the same sandbox or not\n          // we have completed step 14 here.\n          return sandbox;\n        }, function (reason) {\n          if (haveError) return false;\n          log.info('[Runtime.Loader] 4.1: Try to register a new sandbox');\n\n          // check if the sandbox is registed for this hyperty descriptor url;\n          // Make Steps xxx --- xxx\n          // Instantiate the Sandbox\n\n          var hypertyCapabilities = {};\n          if (_hypertyDescriptor && _hypertyDescriptor.hasOwnProperty('capabilities')) {\n            hypertyCapabilities = _hypertyDescriptor.stubCapabilities;\n          }\n\n          return _this._runtimeFactory.createSandbox(hypertyCapabilities).then(function (sandbox) {\n\n            sandbox.addListener('*', function (msg) {\n              _this.messageBus.postMessage(msg);\n            });\n\n            return sandbox;\n          });\n        }, handleError).then(function (sandbox) {\n          if (haveError) return false;\n          log.info('[Runtime.Loader] 5: return sandbox and register');\n\n          _hypertySandbox = sandbox;\n\n          var numberOfAddresses = 1;\n          return _this._addressAllocation.create(_this._registry._domain, numberOfAddresses, _hypertyDescriptor, 'hyperty', reuseURL);\n        }, handleError).then(function (addresses) {\n          if (haveError) return false;\n          log.info('[Runtime.Loader] 6: return the addresses for the hyperty', addresses);\n\n          // Register hyperty\n          return _this.registry.registerHyperty(_hypertySandbox, hypertyCatalogueURL, _hypertyDescriptor, addresses, IdpConstraint);\n        }, handleError).then(function (registrationResult) {\n          if (haveError) return false;\n          log.info('[Runtime.Loader] 7: registration result', registrationResult);\n\n          // we have completed step 16 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n          _hypertyURL = registrationResult.url;\n\n          // Extend original hyperty configuration;\n          var configuration = {};\n          if (!(0, _utils.emptyObject)(_hypertyDescriptor.configuration)) {\n            try {\n              configuration = (0, _assign2.default)({}, JSON.parse(_hypertyDescriptor.configuration));\n            } catch (e) {\n              configuration = _hypertyDescriptor.configuration;\n            }\n          }\n          configuration.runtimeURL = _this._runtimeURL;\n\n          if (registrationResult.p2pHandler) {\n            configuration.p2pHandler = registrationResult.p2pHandler;\n            configuration.p2pRequester = registrationResult.p2pRequester;\n          }\n\n          // We will deploy the component - step 17 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n\n          try {\n            return _hypertySandbox.deployComponent(_hypertySourcePackage.sourceCode, _hypertyURL, configuration);\n          } catch (e) {\n            log.info('[Runtime.Loader] Error on deploy component:', e);\n            reject(e);\n          }\n        }, handleError).then(function (deployComponentStatus) {\n          if (haveError) return false;\n          log.info('[Runtime.Loader] 8: Deploy component status for hyperty: ', deployComponentStatus);\n\n          // we have completed step 19 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n\n          // Add the message bus listener to the appSandbox or hypertSandbox;\n          _this.messageBus.addListener(_hypertyURL, function (msg) {\n            _hypertySandbox.postMessage(msg);\n          });\n\n          // we have completed step 20 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n          var hyperty = {\n            runtimeHypertyURL: _hypertyURL,\n            status: deployComponentStatus\n          };\n\n          log.info('[Runtime.Loader] Hyperty: ', hyperty);\n          resolve(hyperty);\n\n          // we have completed step 21 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.\n          log.info('[Runtime.Loader] ------------------ END ------------------------');\n        }, handleError).catch(errorReason);\n      });\n    }\n\n    /**\n    * Deploy Stub from Catalogue URL or domain url\n    * @param  {URL.URL}     protostubURL    Catalogue URL for the ProtoStub to be loaded or the domain to be target by the protostub\n    * @param  {Object}      p2pConfig       configuration of p2p\n    */\n\n  }, {\n    key: 'loadStub',\n    value: function loadStub(protostubURL, p2pConfig) {\n      var _this2 = this;\n\n      if (!this._readyToUse()) return false;\n      if (!protostubURL) throw new Error('[Runtime.Loader.loadStub]ProtoStub descriptor url parameter is needed');\n\n      return new _promise2.default(function (resolve, reject) {\n\n        // to analyse if domain for p2pHandlers should be something else and not the default domain itself\n\n        var domain = (0, _utils.divideURL)(protostubURL).domain;\n\n        if (!domain) {\n          domain = protostubURL;\n        }\n\n        var _stubSandbox = void 0;\n        var _stubDescriptor = void 0;\n        var _runtimeProtoStubURL = void 0;\n        var _stubSourcePackage = void 0;\n        var haveError = false;\n        var stubId = void 0;\n\n        var errorReason = function errorReason(reason) {\n          log.info('[Runtime.Loader.loadStub]Something failed on the deploy of protocolstub: ', reason);\n          reject(reason);\n        };\n\n        var handleError = function handleError(reason) {\n          haveError = true;\n          reject(reason);\n        };\n\n        // Discover Protocol Stub\n        var discoverStub = void 0;\n        var isP2PHandler = false;\n        var isP2PRequester = false;\n        var stubCapabilities = {};\n\n        log.info('[Runtime.Loader.loadStub] starting loading for ', protostubURL, ' with p2pconfig ', p2pConfig);\n        log.info('[Runtime.Loader.loadStub]Discover or Create a new ProtoStub for domain: ', domain);\n\n        // step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n        try {\n          if (p2pConfig) {\n\n            if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {\n              // step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n              isP2PHandler = true;\n              stubId = _this2.runtimeURL;\n              discoverStub = _this2.registry.discoverP2PStub();\n            } else {\n              isP2PRequester = true;\n              var p2pHandlerRuntimeURL = p2pConfig.remoteRuntimeURL;\n              stubId = p2pHandlerRuntimeURL;\n\n              // step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n              // step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n              discoverStub = _this2.registry.discoverP2PStub(p2pHandlerRuntimeURL);\n            }\n          } else {\n            // step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            stubId = domain;\n            discoverStub = _this2.registry.discoverProtostub(domain);\n          }\n\n          // Is registed?\n          log.info('[Runtime.Loader.loadStub]1. Proto Stub Discovered for ', protostubURL, ': ', discoverStub);\n\n          // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          resolve(discoverStub);\n          log.info(' [Runtime.Loader]------------------- END ---------------------------\\n');\n        } catch (reason) {\n\n          // is not registed?\n          log.info('[Runtime.Loader.loadStub]1. Proto Stub not found ' + reason);\n\n          // step 8 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          _this2.descriptors.getStubDescriptor(protostubURL).then(function (stubDescriptor) {\n\n            if (haveError) return false;\n            log.info('[Runtime.Loader.loadStub]2. return the ProtoStub descriptor');\n\n            // step 9 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            _stubDescriptor = stubDescriptor;\n\n            var sourcePackageURL = stubDescriptor.sourcePackageURL;\n\n            if (sourcePackageURL === '/sourcePackage') {\n              return stubDescriptor.sourcePackage;\n            }\n\n            // step 10 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this2.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n          }, handleError).catch(errorReason).then(function (stubSourcePackage) {\n            if (haveError) return false;\n\n            // According to debug, it seems RuntimeCatalogue does not support yet constraints. It appears empty!!!!\n\n            if (_stubDescriptor && _stubDescriptor.constraints) {\n              stubCapabilities = _stubDescriptor.constraints;\n            }\n\n            // step 11 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            log.info('[Runtime.Loader.loadStub]3. return the ProtoStub Source Code');\n            _stubSourcePackage = stubSourcePackage;\n\n            // this will return the sandbox or one promise to getSandbox;\n            // step 12 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this2.registry.getSandbox(domain, stubCapabilities);\n          }).then(function (stubSandbox) {\n            if (haveError) return false;\n\n            // step 15 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            log.info('[Runtime.Loader.loadStub]4. if the sandbox is registered then return the sandbox ', stubSandbox);\n\n            _stubSandbox = stubSandbox;\n            return stubSandbox;\n          }).catch(function (reason) {\n            if (haveError) return false;\n\n            // step 13 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            log.info('[Runtime.Loader.loadStub]5. Sandbox was not found, creating a new one ', reason);\n\n            // check if the sandbox is registed for this stub descriptor url;\n\n\n            // step 14 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this2._runtimeFactory.createSandbox(stubCapabilities).then(function (sandbox) {\n\n              sandbox.addListener('*', function (msg) {\n                _this2.messageBus.postMessage(msg);\n              });\n\n              return sandbox;\n            });\n          }).then(function (sandbox) {\n            if (haveError) return false;\n\n            // step 16 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            log.info('[Runtime.Loader.loadStub]6. return the sandbox instance and register', sandbox, 'to domain ', domain);\n\n            _stubSandbox = sandbox;\n\n            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this2.registry.registerStub(_stubSandbox, stubId, p2pConfig, protostubURL, _stubDescriptor);\n          }, handleError).then(function (runtimeProtoStub) {\n            if (haveError) return false;\n\n            // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            log.info('[Runtime.Loader.loadStub] 7. return the runtime protostub url: ', runtimeProtoStub);\n\n            _runtimeProtoStubURL = runtimeProtoStub.url;\n\n            // Extend original hyperty configuration;\n            var configuration = {};\n            if (!(0, _utils.emptyObject)(_stubDescriptor.configuration)) {\n              try {\n                configuration = (0, _assign2.default)({}, JSON.parse(_stubDescriptor.configuration));\n              } catch (e) {\n                configuration = _stubDescriptor.configuration;\n              }\n            }\n\n            if (p2pConfig) {\n              try {\n                configuration = (0, _assign2.default)(configuration, JSON.parse(p2pConfig));\n              } catch (e) {\n                configuration = (0, _assign2.default)(configuration, p2pConfig);\n              }\n            }\n\n            // required for protostub session\n\n            configuration.runtimeURL = _this2._runtimeURL;\n\n            // step 24 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            try {\n              // step 26 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n              log.info('[Runtime.Loader.loadStub] 8: adding sandbox listener to protostubURL : ', _runtimeProtoStubURL);\n\n              // step 27 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n              // Add the message bus listener\n              _this2.messageBus.addListener(_runtimeProtoStubURL, function (msg) {\n                _stubSandbox.postMessage(msg);\n              });\n\n              return _stubSandbox.deployComponent(_stubSourcePackage.sourceCode, _runtimeProtoStubURL, configuration);\n            } catch (e) {\n              log.error('[Runtime.Loader.loadStub] Error on deploy component:', e);\n              reject(e);\n            }\n          }, handleError).then(function () {\n            if (haveError) return false;\n\n            // step 28 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            var stub = void 0;\n            if (p2pConfig) {\n              log.log('[Runtime.Loader.loadStub] p2pConfig: ', p2pConfig);\n\n              if (p2pConfig.hasOwnProperty('isHandlerStub')) stub = _this2.registry.p2pHandlerStub[_this2._runtimeURL];\n              if (p2pConfig.hasOwnProperty('p2pRequesterStub')) stub = _this2.registry.p2pRequesterStub[p2pConfig.remoteRuntimeURL];\n            } else {\n              stub = _this2.registry.protostubsList[domain];\n            }\n\n            log.log('[Runtime.Loader.loadStub] Stub: ', stub);\n            resolve(stub);\n            log.info('[Runtime.Loader.loadStub]------------------- END ---------------------------\\n');\n          }, handleError).catch(errorReason);\n        }\n      });\n    }\n\n    /**\n    * Deploy idpProxy from Catalogue URL or domain url\n    * @param  {URL.URL}     domain          domain\n    */\n\n  }, {\n    key: 'loadIdpProxy',\n    value: function loadIdpProxy(idpProxyURL) {\n      var _this3 = this;\n\n      if (!this._readyToUse()) return false;\n      if (!idpProxyURL) throw new Error('[Runtime.Loader] IdpProxy descriptor url parameter is needed');\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var domain = (0, _utils.divideURL)(idpProxyURL).domain;\n\n        if (!domain) {\n          domain = idpProxyURL;\n        }\n\n        var _proxySandbox = void 0;\n        var _proxyDescriptor = void 0;\n        var _runtimeIdpProxyURL = void 0;\n        var _proxySourcePackage = void 0;\n        var haveError = false;\n\n        var errorReason = function errorReason(reason) {\n          log.info('[Runtime.Loader] Something failed on the deploy of IdpProxy: ', reason);\n          reject(reason);\n        };\n\n        var handleError = function handleError(reason) {\n          haveError = true;\n          reject(reason);\n        };\n\n        // Discover IDPProxy\n        log.info('[Runtime.Loader] ------------------- IDP Proxy Deploy ---------------------------\\n');\n        log.info('[Runtime.Loader] Discover or Create a new IdpProxy for domain/URL: ', domain);\n\n        try {\n          var runtimeIdpProxyURL = _this3.registry.discoverIdpProxy(domain);\n\n          // Is registed?\n          log.info('[Runtime.Loader] 1. IDPProxy Discovered: ', runtimeIdpProxyURL);\n\n          // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          var idpProxy = _this3.registry.idpProxyList[domain];\n          log.log('Deployed: ', idpProxy);\n\n          resolve(idpProxy);\n          log.info('[Runtime.Loader] ------------------- END ---------------------------\\n');\n        } catch (reason) {\n\n          // is not registed?\n          log.info('[Runtime.Loader] 1. IdpProxy not found:', reason);\n\n          // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n          _this3.descriptors.getIdpProxyDescriptor(idpProxyURL).then(function (proxyDescriptor) {\n\n            log.info('[Runtime.Loader] 2. Return the IDPProxy descriptor');\n\n            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            _proxyDescriptor = proxyDescriptor;\n\n            var sourcePackageURL = proxyDescriptor.sourcePackageURL;\n\n            if (sourcePackageURL === '/sourcePackage') {\n              return proxyDescriptor.sourcePackage;\n            }\n\n            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this3.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);\n          }, handleError).then(function (sourcePackage) {\n            if (haveError) return false;\n            log.info('[Runtime.Loader] 3. return the IDPProxy source package');\n\n            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _proxySourcePackage = sourcePackage;\n\n            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;\n            var policy = true;\n            return policy;\n          }, handleError).then(function (policy) {\n            if (haveError) return false;\n\n            // this will return the sandbox or one promise to getSandbox;\n            return _this3.registry.getSandbox(domain);\n          }).then(function (proxySandbox) {\n            if (haveError) return false;\n            log.info('[Runtime.Loader] 4. if the sandbox is registered then return the sandbox', proxySandbox);\n\n            _proxySandbox = proxySandbox;\n            return proxySandbox;\n          }).catch(function (reason) {\n            if (haveError) return false;\n            log.info('[Runtime.Loader] 5. Sandbox was not found, creating a new one', reason);\n\n            var proxyCapabilities = {};\n            if (_proxyDescriptor && _proxyDescriptor.hasOwnProperty('capabilities')) {\n              _proxyDescriptor = _proxyDescriptor.stubCapabilities;\n            }\n\n            return _this3._runtimeFactory.createSandbox(proxyCapabilities).then(function (sandbox) {\n\n              sandbox.addListener('*', function (msg) {\n                _this3.messageBus.postMessage(msg);\n              });\n\n              return sandbox;\n            });\n          }).then(function (sandbox) {\n            if (haveError) return false;\n            log.info('[Runtime.Loader] 6. return the sandbox instance and register', sandbox, 'to domain ', domain);\n\n            _proxySandbox = sandbox;\n\n            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n            return _this3.registry.registerIdpProxy(sandbox, domain);\n          }, handleError).then(function (runtimeIdpProxyURL) {\n            if (haveError) return false;\n            log.info('[Runtime.Loader] 7. Return the runtime Idp Proxy URL: ', runtimeIdpProxyURL);\n\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            _runtimeIdpProxyURL = runtimeIdpProxyURL;\n\n            // Extend original hyperty configuration;\n            var configuration = {};\n            if (!(0, _utils.emptyObject)(_proxyDescriptor.configuration)) {\n              try {\n                configuration = (0, _assign2.default)({}, JSON.parse(_proxyDescriptor.configuration));\n              } catch (e) {\n                configuration = _proxyDescriptor.configuration;\n              }\n            }\n            configuration.runtimeURL = _this3._runtimeURL;\n\n            // Deploy Component step xxx\n            try {\n              // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n              // Add the message bus listener\n              _this3.messageBus.addListener(_runtimeIdpProxyURL, function (msg) {\n                _proxySandbox.postMessage(msg);\n              });\n\n              return _proxySandbox.deployComponent(_proxySourcePackage.sourceCode, runtimeIdpProxyURL, configuration);\n            } catch (e) {\n              log.info('[Runtime.Loader] Error on deploy component:', e);\n              reject(e);\n            }\n          }, handleError).then(function () {\n            if (haveError) return false;\n\n            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md\n\n            // Load Stub function resolved with success;\n            // let idpProxy = {\n            //   runtimeIdpProxyURL: _runtimeIdpProxyURL,\n            //   status: deployComponentStatus\n            // };\n\n            //this.registry.idpProxyList[domain].status = 'deployed';\n            var idpProxy = _this3.registry.idpProxyList[domain];\n\n            log.log('[Runtime.Loader.loadIdpProxy] 8: loaded: ', idpProxy);\n\n            resolve(idpProxy);\n            log.info('[Runtime.Loader.loadIdpProxy] ------------------- END ---------------------------\\n');\n          }, handleError).catch(errorReason);\n        }\n      });\n    }\n\n    // Check if the loader is ready to load all components\n\n  }, {\n    key: '_readyToUse',\n    value: function _readyToUse() {\n\n      var status = false;\n\n      if (!this._runtimeURL) throw new Error('[Runtime.Loader] The loader need the runtime url address');\n      if (!this._messagesBus) throw new Error('[Runtime.Loader] The loader need the messageBus component');\n      if (!this._registry) throw new Error('[Runtime.Loader] The loader need the registry component');\n      if (!this._runtimeFactory) throw new Error('[Runtime.Loader] The loader need the runtime factory component');\n\n      status = true;\n      return status;\n    }\n  }, {\n    key: 'runtimeURL',\n    set: function set(value) {\n      this._runtimeURL = value;\n    }\n\n    /**\n     * Get runtime url\n     * @return {string} value runtimeURL\n     */\n    ,\n    get: function get() {\n      return this._runtimeURL;\n    }\n\n    /**\n     * Set Registry component\n     * @param  {Registry} value Registry Component\n     */\n\n  }, {\n    key: 'registry',\n    set: function set(value) {\n      this._registry = value;\n\n      // Install AddressAllocation\n      var addressAllocation = _AddressAllocation2.default.instance;\n      this._addressAllocation = addressAllocation;\n\n      log.log('[Loader - AddressAllocation] - ', addressAllocation);\n    }\n\n    /**\n     * Get Registry component\n     * @return {Registry} Registry component\n     */\n    ,\n    get: function get() {\n      return this._registry;\n    }\n\n    /**\n     * Set Message Bus component\n     * @param  {MessageBus} value Message bus component\n     */\n\n  }, {\n    key: 'messageBus',\n    set: function set(value) {\n      this._messagesBus = value;\n    }\n\n    /**\n     * Get Message Bus component\n     * @return {MessageBus} Message Bus component\n     */\n    ,\n    get: function get() {\n      return this._messagesBus;\n    }\n\n    /**\n     * Set Runtime Factory component\n     * @param  {runtimeFactory} value Factory includes the specific implementations for each environment\n     */\n\n  }, {\n    key: 'runtimeFactory',\n    set: function set(value) {\n      this._runtimeFactory = value;\n    }\n\n    /**\n     * Get Runtime Factory component\n     * @return {runtimeFactory} Runtime Factory component\n     */\n    ,\n    get: function get() {\n      return this._runtimeFactory;\n    }\n  }]);\n  return Loader;\n}();\n\nexports.default = Loader;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9ydW50aW1lL0xvYWRlci5qcz9jYzkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIExvZyBTeXN0ZW1cbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignbG9hZGVyJyk7XG5cbmltcG9ydCB7ZGl2aWRlVVJMLCBlbXB0eU9iamVjdH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IEFkZHJlc3NBbGxvY2F0aW9uIGZyb20gJy4uL2FsbG9jYXRpb24vQWRkcmVzc0FsbG9jYXRpb24nO1xuXG5jbGFzcyBMb2FkZXIge1xuXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIHJ1bnRpbWVDb25maWd1cmF0aW9uLCBydW50aW1lRGVzY3JpcHRvcnNJbnN0YW5jZSkge1xuICAgIGlmICghcnVudGltZUNvbmZpZ3VyYXRpb24pIHRocm93ICAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gVGhlIGRlc2NyaXB0b3IgbmVlZCB0byBrbm93IHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb24nKTtcbiAgICBpZiAoIXJ1bnRpbWVEZXNjcmlwdG9yc0luc3RhbmNlKSB0aHJvdyAgIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIFRoZSBkZXNjcmlwdG9yIG5lZWQgdG8ga25vdyB0aGUgcnVudGltZSBEZXNjcmlwdG9yIGluc3RhbmNlJyk7XG5cbiAgICB0aGlzLmxvZyA9IGxvZztcblxuICAgIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24gPSBydW50aW1lQ29uZmlndXJhdGlvbjtcbiAgICB0aGlzLmRlc2NyaXB0b3JzID0gcnVudGltZURlc2NyaXB0b3JzSW5zdGFuY2U7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHJ1bnRpbWUgdXJsXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdmFsdWUgcnVudGltZVVSTFxuICAgKi9cbiAgc2V0IHJ1bnRpbWVVUkwodmFsdWUpIHtcbiAgICB0aGlzLl9ydW50aW1lVVJMID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHJ1bnRpbWUgdXJsXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdmFsdWUgcnVudGltZVVSTFxuICAgKi9cbiAgZ2V0IHJ1bnRpbWVVUkwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3J1bnRpbWVVUkw7XG4gIH1cblxuICAvKipcbiAgICogU2V0IFJlZ2lzdHJ5IGNvbXBvbmVudFxuICAgKiBAcGFyYW0gIHtSZWdpc3RyeX0gdmFsdWUgUmVnaXN0cnkgQ29tcG9uZW50XG4gICAqL1xuICBzZXQgcmVnaXN0cnkodmFsdWUpIHtcbiAgICB0aGlzLl9yZWdpc3RyeSA9IHZhbHVlO1xuXG4gICAgLy8gSW5zdGFsbCBBZGRyZXNzQWxsb2NhdGlvblxuICAgIGxldCBhZGRyZXNzQWxsb2NhdGlvbiA9IEFkZHJlc3NBbGxvY2F0aW9uLmluc3RhbmNlO1xuICAgIHRoaXMuX2FkZHJlc3NBbGxvY2F0aW9uID0gYWRkcmVzc0FsbG9jYXRpb247XG5cbiAgICBsb2cubG9nKCdbTG9hZGVyIC0gQWRkcmVzc0FsbG9jYXRpb25dIC0gJywgYWRkcmVzc0FsbG9jYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBSZWdpc3RyeSBjb21wb25lbnRcbiAgICogQHJldHVybiB7UmVnaXN0cnl9IFJlZ2lzdHJ5IGNvbXBvbmVudFxuICAgKi9cbiAgZ2V0IHJlZ2lzdHJ5KCkge1xuICAgIHJldHVybiB0aGlzLl9yZWdpc3RyeTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgTWVzc2FnZSBCdXMgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9IHZhbHVlIE1lc3NhZ2UgYnVzIGNvbXBvbmVudFxuICAgKi9cbiAgc2V0IG1lc3NhZ2VCdXModmFsdWUpIHtcbiAgICB0aGlzLl9tZXNzYWdlc0J1cyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBNZXNzYWdlIEJ1cyBjb21wb25lbnRcbiAgICogQHJldHVybiB7TWVzc2FnZUJ1c30gTWVzc2FnZSBCdXMgY29tcG9uZW50XG4gICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZXNCdXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnRcbiAgICogQHBhcmFtICB7cnVudGltZUZhY3Rvcnl9IHZhbHVlIEZhY3RvcnkgaW5jbHVkZXMgdGhlIHNwZWNpZmljIGltcGxlbWVudGF0aW9ucyBmb3IgZWFjaCBlbnZpcm9ubWVudFxuICAgKi9cbiAgc2V0IHJ1bnRpbWVGYWN0b3J5KHZhbHVlKSB7XG4gICAgdGhpcy5fcnVudGltZUZhY3RvcnkgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgUnVudGltZSBGYWN0b3J5IGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtydW50aW1lRmFjdG9yeX0gUnVudGltZSBGYWN0b3J5IGNvbXBvbmVudFxuICAgKi9cbiAgZ2V0IHJ1bnRpbWVGYWN0b3J5KCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lRmFjdG9yeTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIERlcGxveSBIeXBlcnR5IGZyb20gQ2F0YWxvZ3VlIFVSTFxuICAgKlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3Qvc3BlY3MvdHJlZS9tYXN0ZXIvZGF0YW1vZGVsL2NvcmUvYWRkcmVzc1xuICAgKlxuICAgKiBAcGFyYW0ge1VSTC5IeXBlcnR5Q2F0YWxvZ3VlVVJMfSBoeXBlcnR5Q2F0YWxvZ3VlVVJMIC0gVGhlIENhdGFsb2d1ZSBVUkwgdXNlZCB0byBpZGVudGlmeSBkZXNjcmlwdG9ycyBpbiB0aGUgQ2F0YWxvZ3VlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW58VVJMLkh5cGVydHlVUkx9IFtyZXVzZVVSTD1mYWxzZV0gcmV1c2VVUkwgLSByZXVzZVVSTCBpcyB1c2VkIHRvIHJldXNlIHRoZSBoeXBlcnR5VVJMIHByZXZpb3VzbHkgcmVnaXN0cmVkLCBieSBkZWZhdWx0IHRoZSByZXVzZSBpcyBkaXNhYmxlZDtcbiAgICogQHBhcmFtIHtVUkx9IGFwcFVSTCAtIHRoZSBhcHAgdXJsIG9yaWdpbiBhZGRyZXNzO1xuICAgKiBAcGFyYW0ge29iamVjdH0gSWRwQ29uc3RyYWludCAtIGNvbnN0cmFpbnRzIHRvIGJlIHVzZWQgd2hlbiBzZWxlY3RpbmcgdGhlIGlkZW50aXR5IHRvIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGUgSHlwZXJ0eSBpbmNsdWRpbmcgb3JpZ2luLCBpZHAsIGFuZCBpZEhpbnQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEJvb2xlYW4sIEVycm9yPn0gdGhpcyBpcyBQcm9taXNlIGFuZCByZXR1cm5zIHRydWUgaWYgYWxsIGNvbXBvbmVudHMgYXJlIGxvYWRlZCB3aXRoIHN1Y2Nlc3Mgb3IgYW4gZXJyb3IgaWYgc29tZW9uZSBmYWlscy5cbiAgICpcbiAgICogQG1lbWJlck9mIExvYWRlclxuICAgKi9cbiAgbG9hZEh5cGVydHkoaHlwZXJ0eUNhdGFsb2d1ZVVSTCwgcmV1c2VVUkwgPSBmYWxzZSwgSWRwQ29uc3RyYWludCwgYXBwVVJMKSB7XG5cbiAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghaHlwZXJ0eUNhdGFsb2d1ZVVSTCkgdGhyb3cgbmV3ICAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gSHlwZXJ0eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgX2h5cGVydHlVUkw7XG4gICAgICBsZXQgX2h5cGVydHlTYW5kYm94O1xuICAgICAgbGV0IF9oeXBlcnR5RGVzY3JpcHRvcjtcbiAgICAgIGxldCBfaHlwZXJ0eVNvdXJjZVBhY2thZ2U7XG4gICAgICBsZXQgaGF2ZUVycm9yID0gZmFsc2U7XG5cbiAgICAgIGxldCBlcnJvclJlYXNvbiA9IChyZWFzb24pID0+IHtcbiAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IGh5cGVydHk6ICcsIHJlYXNvbik7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgbGV0IGhhbmRsZUVycm9yID0gKHJlYXNvbikgPT4ge1xuICAgICAgICBoYXZlRXJyb3IgPSB0cnVlO1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIEdldCBIeXBlcnR5IGRlc2NyaXB0b3JcbiAgICAgIC8vIFRPRE86IHRoZSByZXF1ZXN0IE1vZHVsZSBzaG91bGQgYmUgY2hhbmdlZCxcbiAgICAgIC8vIGJlY2F1c2UgYXQgdGhpcyBtb21lbnQgaXQgaXMgaW5jb21wYXRpYmxlIHdpdGggbm9kZWpzO1xuICAgICAgLy8gUHJvYmFibHkgd2UgbmVlZCB0byBwYXNzIGEgZmFjdG9yeSBsaWtlIHdlIGRvIGZvciBzYW5kYm94ZXM7XG4gICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAtLS0tLS0tLS0tLS0tLS0tLS0gSHlwZXJ0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIEdldCBoeXBlcnR5IGRlc2NyaXB0b3IgZm9yIDonLCBoeXBlcnR5Q2F0YWxvZ3VlVVJMKTtcbiAgICAgIHJldHVybiB0aGlzLmRlc2NyaXB0b3JzLmdldEh5cGVydHlEZXNjcmlwdG9yKGh5cGVydHlDYXRhbG9ndWVVUkwpXG4gICAgICAgIC50aGVuKChoeXBlcnR5RGVzY3JpcHRvcikgPT4ge1xuICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgY29tcGxldGVkIFwic3RlcCAyIGFuZCAzXCIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZFxuICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDE6IHJldHVybiBoeXBlcnR5IGRlc2NyaXB0b3InKTtcblxuICAgICAgICAgIC8vIGh5cGVydHkgY29udGFpbnMgdGhlIGZ1bGwgcGF0aCBvZiB0aGUgY2F0YWxvZ3VlIFVSTCwgZS5nLlxuICAgICAgICAgIC8vIGNhdGFsb2d1ZS5yZXRoaW5rLmV1Ly53ZWxsLWtub3duLy4uLi4uLi4uLi5cbiAgICAgICAgICBfaHlwZXJ0eURlc2NyaXB0b3IgPSBoeXBlcnR5RGVzY3JpcHRvcjtcblxuICAgICAgICAgIGxldCBzb3VyY2VQYWNrYWdlVVJMID0gaHlwZXJ0eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZVVSTDtcblxuICAgICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7XG4gICAgICAgICAgICByZXR1cm4gaHlwZXJ0eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBHZXQgdGhlIGh5cGVydHkgc291cmNlIGNvZGVcbiAgICAgICAgICByZXR1cm4gdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHNvdXJjZVBhY2thZ2UpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAyOiByZXR1cm4gaHlwZXJ0eSBzb3VyY2UgY29kZScpO1xuXG4gICAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb21wbGV0ZWQgXCJzdGVwIDQgYW5kIDVcIiBhcyBzaG93biBpbiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kXG5cbiAgICAgICAgICBfaHlwZXJ0eVNvdXJjZVBhY2thZ2UgPSBzb3VyY2VQYWNrYWdlO1xuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBzdGVwcyA2IC0tIDkgYXJlIHNraXBwZWQuXG4gICAgICAgICAgLy8gVE9ETzogb24gcmVsZWFzZSBvZiBjb3JlIDAuMjtcbiAgICAgICAgICAvLyBUT0RPOiBQcm9taXNlIHRvIGNoZWNrIHRoZSBwb2xpY3kgZW5naW5lXG5cbiAgICAgICAgICAvLyBtb2NrLXVwIGNvZGU7XG4gICAgICAgICAgLy8gdGVtcG9yYXJ5IGNvZGUsIG9ubHlcbiAgICAgICAgICBsZXQgcG9saWN5ID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBwb2xpY3k7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigocG9saWN5UmVzdWx0KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDM6IHJldHVybiBwb2xpY3kgZW5naW5lIHJlc3VsdCcgKyBwb2xpY3lSZXN1bHQpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA2IHRvIDkgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBTdGVwcyA2IC0tIDlcbiAgICAgICAgICAvLyBBcyBhIHJlc3VsdCBvZiB0aGUgc2lwcGVkIHN0ZXBzLCB3ZSBrbm93IGF0IHRoaXMgcG9pbnQgaWYgd2UgZXhlY3V0ZVxuICAgICAgICAgIC8vIGluU2FtZVNhbmRib3ggb3Igbm90LlxuICAgICAgICAgIC8vXG5cbiAgICAgICAgICAvLyBGb3IgdGVzdGluZywganVzdCBhc3N1bWUgd2UgZXhlY3V0ZSBpbiBzYW1lIFNhbmRib3guXG4gICAgICAgICAgbGV0IGluU2FtZVNhbmRib3ggPSB0cnVlO1xuICAgICAgICAgIGxldCBzYW5kYm94O1xuXG4gICAgICAgICAgaWYgKGluU2FtZVNhbmRib3gpIHtcblxuICAgICAgICAgICAgLy8gdGhpcyBkb24ndCBuZWVkIGJlIGEgUHJvbWlzZTtcbiAgICAgICAgICAgIHNhbmRib3ggPSB0aGlzLnJlZ2lzdHJ5LmdldEFwcFNhbmRib3goKTtcblxuICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxMSBoZXJlLlxuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwoaHlwZXJ0eUNhdGFsb2d1ZVVSTCkuZG9tYWluO1xuXG4gICAgICAgICAgICAvLyBnZXRTYW5kYm94LCB0aGlzIHdpbGwgcmV0dXJuIGEgcHJvbWlzZTtcbiAgICAgICAgICAgIHNhbmRib3ggPSB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB0aGlzIHdpbGwgcmV0dXJuIHRoZSBzYW5kYm94IG9yIG9uZSBwcm9taXNlIHRvIGdldFNhbmRib3g7XG4gICAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA0OiByZXR1cm4gdGhlIHNhbmRib3gnLCBzYW5kYm94KTtcblxuICAgICAgICAgIC8vIFJldHVybiB0aGUgc2FuZGJveCBpbmRlcGVudGVseSBpZiBpdCBydW5uaW5nIGluIHRoZSBzYW1lIHNhbmRib3ggb3Igbm90XG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxNCBoZXJlLlxuICAgICAgICAgIHJldHVybiBzYW5kYm94O1xuICAgICAgICB9LCAocmVhc29uKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDQuMTogVHJ5IHRvIHJlZ2lzdGVyIGEgbmV3IHNhbmRib3gnKTtcblxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVkIGZvciB0aGlzIGh5cGVydHkgZGVzY3JpcHRvciB1cmw7XG4gICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eFxuICAgICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBTYW5kYm94XG5cbiAgICAgICAgICBsZXQgaHlwZXJ0eUNhcGFiaWxpdGllcyA9IHt9O1xuICAgICAgICAgIGlmIChfaHlwZXJ0eURlc2NyaXB0b3IgJiYgX2h5cGVydHlEZXNjcmlwdG9yLmhhc093blByb3BlcnR5KCdjYXBhYmlsaXRpZXMnKSkge1xuICAgICAgICAgICAgaHlwZXJ0eUNhcGFiaWxpdGllcyA9IF9oeXBlcnR5RGVzY3JpcHRvci5zdHViQ2FwYWJpbGl0aWVzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB0aGlzLl9ydW50aW1lRmFjdG9yeS5jcmVhdGVTYW5kYm94KGh5cGVydHlDYXBhYmlsaXRpZXMpLnRoZW4oKHNhbmRib3gpID0+IHtcblxuICAgICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIChtc2cpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA1OiByZXR1cm4gc2FuZGJveCBhbmQgcmVnaXN0ZXInKTtcblxuICAgICAgICAgIF9oeXBlcnR5U2FuZGJveCA9IHNhbmRib3g7XG5cbiAgICAgICAgICBsZXQgbnVtYmVyT2ZBZGRyZXNzZXMgPSAxO1xuICAgICAgICAgIHJldHVybiB0aGlzLl9hZGRyZXNzQWxsb2NhdGlvbi5jcmVhdGUodGhpcy5fcmVnaXN0cnkuX2RvbWFpbiwgbnVtYmVyT2ZBZGRyZXNzZXMsIF9oeXBlcnR5RGVzY3JpcHRvciwgJ2h5cGVydHknLCByZXVzZVVSTCk7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigoYWRkcmVzc2VzKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDY6IHJldHVybiB0aGUgYWRkcmVzc2VzIGZvciB0aGUgaHlwZXJ0eScsIGFkZHJlc3Nlcyk7XG5cbiAgICAgICAgICAvLyBSZWdpc3RlciBoeXBlcnR5XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkucmVnaXN0ZXJIeXBlcnR5KF9oeXBlcnR5U2FuZGJveCwgaHlwZXJ0eUNhdGFsb2d1ZVVSTCwgX2h5cGVydHlEZXNjcmlwdG9yLCBhZGRyZXNzZXMsIElkcENvbnN0cmFpbnQpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHJlZ2lzdHJhdGlvblJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA3OiByZWdpc3RyYXRpb24gcmVzdWx0JywgcmVnaXN0cmF0aW9uUmVzdWx0KTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTYgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG4gICAgICAgICAgX2h5cGVydHlVUkwgPSByZWdpc3RyYXRpb25SZXN1bHQudXJsO1xuXG4gICAgICAgICAgLy8gRXh0ZW5kIG9yaWdpbmFsIGh5cGVydHkgY29uZmlndXJhdGlvbjtcbiAgICAgICAgICBsZXQgY29uZmlndXJhdGlvbiA9IHt9O1xuICAgICAgICAgIGlmICghZW1wdHlPYmplY3QoX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgSlNPTi5wYXJzZShfaHlwZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCA9IHRoaXMuX3J1bnRpbWVVUkw7XG5cbiAgICAgICAgICBpZiAocmVnaXN0cmF0aW9uUmVzdWx0LnAycEhhbmRsZXIpIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucDJwSGFuZGxlciA9IHJlZ2lzdHJhdGlvblJlc3VsdC5wMnBIYW5kbGVyO1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5wMnBSZXF1ZXN0ZXIgPSByZWdpc3RyYXRpb25SZXN1bHQucDJwUmVxdWVzdGVyO1xuICAgICAgICAgIH1cblxuXG4gICAgICAgICAgLy8gV2Ugd2lsbCBkZXBsb3kgdGhlIGNvbXBvbmVudCAtIHN0ZXAgMTcgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIF9oeXBlcnR5U2FuZGJveC5kZXBsb3lDb21wb25lbnQoX2h5cGVydHlTb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUsIF9oeXBlcnR5VVJMLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSBFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpO1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC50aGVuKChkZXBsb3lDb21wb25lbnRTdGF0dXMpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gODogRGVwbG95IGNvbXBvbmVudCBzdGF0dXMgZm9yIGh5cGVydHk6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDE5IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuXG4gICAgICAgICAgLy8gQWRkIHRoZSBtZXNzYWdlIGJ1cyBsaXN0ZW5lciB0byB0aGUgYXBwU2FuZGJveCBvciBoeXBlcnRTYW5kYm94O1xuICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfaHlwZXJ0eVVSTCwgKG1zZykgPT4ge1xuICAgICAgICAgICAgX2h5cGVydHlTYW5kYm94LnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIwIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuICAgICAgICAgIGxldCBoeXBlcnR5ID0ge1xuICAgICAgICAgICAgcnVudGltZUh5cGVydHlVUkw6IF9oeXBlcnR5VVJMLFxuICAgICAgICAgICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXNcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gSHlwZXJ0eTogJywgaHlwZXJ0eSk7XG4gICAgICAgICAgcmVzb2x2ZShoeXBlcnR5KTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMjEgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG4gICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC5jYXRjaChlcnJvclJlYXNvbik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBEZXBsb3kgU3R1YiBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybFxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICBwcm90b3N0dWJVUkwgICAgQ2F0YWxvZ3VlIFVSTCBmb3IgdGhlIFByb3RvU3R1YiB0byBiZSBsb2FkZWQgb3IgdGhlIGRvbWFpbiB0byBiZSB0YXJnZXQgYnkgdGhlIHByb3Rvc3R1YlxuICAqIEBwYXJhbSAge09iamVjdH0gICAgICBwMnBDb25maWcgICAgICAgY29uZmlndXJhdGlvbiBvZiBwMnBcbiAgKi9cbiAgbG9hZFN0dWIocHJvdG9zdHViVVJMLCBwMnBDb25maWcpIHtcblxuICAgIGlmICghdGhpcy5fcmVhZHlUb1VzZSgpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFwcm90b3N0dWJVUkwpIHRocm93IG5ldyAgIEVycm9yKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdUHJvdG9TdHViIGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIC8vIHRvIGFuYWx5c2UgaWYgZG9tYWluIGZvciBwMnBIYW5kbGVycyBzaG91bGQgYmUgc29tZXRoaW5nIGVsc2UgYW5kIG5vdCB0aGUgZGVmYXVsdCBkb21haW4gaXRzZWxmXG5cbiAgICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwocHJvdG9zdHViVVJMKS5kb21haW47XG5cbiAgICAgIGlmICghZG9tYWluKSB7XG4gICAgICAgIGRvbWFpbiA9IHByb3Rvc3R1YlVSTDtcbiAgICAgIH1cblxuICAgICAgbGV0IF9zdHViU2FuZGJveDtcbiAgICAgIGxldCBfc3R1YkRlc2NyaXB0b3I7XG4gICAgICBsZXQgX3J1bnRpbWVQcm90b1N0dWJVUkw7XG4gICAgICBsZXQgX3N0dWJTb3VyY2VQYWNrYWdlO1xuICAgICAgbGV0IGhhdmVFcnJvciA9IGZhbHNlO1xuICAgICAgbGV0IHN0dWJJZDtcblxuICAgICAgbGV0IGVycm9yUmVhc29uID0gKHJlYXNvbikgPT4ge1xuICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXVNvbWV0aGluZyBmYWlsZWQgb24gdGhlIGRlcGxveSBvZiBwcm90b2NvbHN0dWI6ICcsIHJlYXNvbik7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgbGV0IGhhbmRsZUVycm9yID0gKHJlYXNvbikgPT4ge1xuICAgICAgICBoYXZlRXJyb3IgPSB0cnVlO1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIERpc2NvdmVyIFByb3RvY29sIFN0dWJcbiAgICAgIGxldCBkaXNjb3ZlclN0dWI7XG4gICAgICBsZXQgaXNQMlBIYW5kbGVyID0gZmFsc2U7XG4gICAgICBsZXQgaXNQMlBSZXF1ZXN0ZXIgPSBmYWxzZTtcbiAgICAgIGxldCBzdHViQ2FwYWJpbGl0aWVzID0ge307XG5cbiAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdIHN0YXJ0aW5nIGxvYWRpbmcgZm9yICcsIHByb3Rvc3R1YlVSTCwgJyB3aXRoIHAycGNvbmZpZyAnLCBwMnBDb25maWcpO1xuICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl1EaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgUHJvdG9TdHViIGZvciBkb21haW46ICcsIGRvbWFpbik7XG5cbiAgICAgIC8vIHN0ZXAgMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChwMnBDb25maWcpIHtcblxuICAgICAgICAgIGlmIChwMnBDb25maWcuaGFzT3duUHJvcGVydHkoJ2lzSGFuZGxlclN0dWInKSAmJiBwMnBDb25maWcuaXNIYW5kbGVyU3R1Yikge1xuICAgICAgICAgICAgLy8gc3RlcCA2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgaXNQMlBIYW5kbGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0dWJJZCA9IHRoaXMucnVudGltZVVSTDtcbiAgICAgICAgICAgIGRpc2NvdmVyU3R1YiA9IHRoaXMucmVnaXN0cnkuZGlzY292ZXJQMlBTdHViKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzUDJQUmVxdWVzdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBwMnBIYW5kbGVyUnVudGltZVVSTCA9IHAycENvbmZpZy5yZW1vdGVSdW50aW1lVVJMO1xuICAgICAgICAgICAgc3R1YklkID0gcDJwSGFuZGxlclJ1bnRpbWVVUkw7XG5cbiAgICAgICAgICAgIC8vIHN0ZXAgNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgICAgLy8gc3RlcCA1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgZGlzY292ZXJTdHViID0gdGhpcy5yZWdpc3RyeS5kaXNjb3ZlclAyUFN0dWIocDJwSGFuZGxlclJ1bnRpbWVVUkwpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHN0ZXAgMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBzdHViSWQgPSBkb21haW47XG4gICAgICAgICAgZGlzY292ZXJTdHViID0gdGhpcy5yZWdpc3RyeS5kaXNjb3ZlclByb3Rvc3R1Yihkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXMgcmVnaXN0ZWQ/XG4gICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdMS4gUHJvdG8gU3R1YiBEaXNjb3ZlcmVkIGZvciAnLCBwcm90b3N0dWJVUkwsICc6ICcsIGRpc2NvdmVyU3R1Yik7XG5cbiAgICAgICAgLy8gc3RlcCAyMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgcmVzb2x2ZShkaXNjb3ZlclN0dWIpO1xuICAgICAgICBsb2cuaW5mbygnIFtSdW50aW1lLkxvYWRlcl0tLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nKTtcblxuICAgICAgfSBjYXRjaCAocmVhc29uKSB7XG5cbiAgICAgICAgLy8gaXMgbm90IHJlZ2lzdGVkP1xuICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTEuIFByb3RvIFN0dWIgbm90IGZvdW5kICcgKyByZWFzb24pO1xuXG4gICAgICAgIC8vIHN0ZXAgOCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgdGhpcy5kZXNjcmlwdG9ycy5nZXRTdHViRGVzY3JpcHRvcihwcm90b3N0dWJVUkwpXG4gICAgICAgICAgLnRoZW4oKHN0dWJEZXNjcmlwdG9yKSA9PiB7XG5cbiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdMi4gcmV0dXJuIHRoZSBQcm90b1N0dWIgZGVzY3JpcHRvcicpO1xuXG4gICAgICAgICAgICAvLyBzdGVwIDkgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgICBfc3R1YkRlc2NyaXB0b3IgPSBzdHViRGVzY3JpcHRvcjtcblxuICAgICAgICAgICAgbGV0IHNvdXJjZVBhY2thZ2VVUkwgPSBzdHViRGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMO1xuXG4gICAgICAgICAgICBpZiAoc291cmNlUGFja2FnZVVSTCA9PT0gJy9zb3VyY2VQYWNrYWdlJykge1xuICAgICAgICAgICAgICByZXR1cm4gc3R1YkRlc2NyaXB0b3Iuc291cmNlUGFja2FnZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc3RlcCAxMCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0U291cmNlUGFja2FnZUZyb21VUkwoc291cmNlUGFja2FnZVVSTCk7XG4gICAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgICAgLmNhdGNoKGVycm9yUmVhc29uKVxuICAgICAgICAgIC50aGVuKChzdHViU291cmNlUGFja2FnZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gZGVidWcsIGl0IHNlZW1zIFJ1bnRpbWVDYXRhbG9ndWUgZG9lcyBub3Qgc3VwcG9ydCB5ZXQgY29uc3RyYWludHMuIEl0IGFwcGVhcnMgZW1wdHkhISEhXG5cbiAgICAgICAgICAgIGlmIChfc3R1YkRlc2NyaXB0b3IgJiYgX3N0dWJEZXNjcmlwdG9yLmNvbnN0cmFpbnRzKSB7XG4gICAgICAgICAgICAgIHN0dWJDYXBhYmlsaXRpZXMgPSBfc3R1YkRlc2NyaXB0b3IuY29uc3RyYWludHM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHN0ZXAgMTEgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTMuIHJldHVybiB0aGUgUHJvdG9TdHViIFNvdXJjZSBDb2RlJyk7XG4gICAgICAgICAgICBfc3R1YlNvdXJjZVBhY2thZ2UgPSBzdHViU291cmNlUGFja2FnZTtcblxuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94O1xuICAgICAgICAgICAgLy8gc3RlcCAxMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluLCBzdHViQ2FwYWJpbGl0aWVzKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKChzdHViU2FuZGJveCkgPT4ge1xuICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBzdGVwIDE1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl00LiBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlcmVkIHRoZW4gcmV0dXJuIHRoZSBzYW5kYm94ICcsIHN0dWJTYW5kYm94KTtcblxuICAgICAgICAgICAgX3N0dWJTYW5kYm94ID0gc3R1YlNhbmRib3g7XG4gICAgICAgICAgICByZXR1cm4gc3R1YlNhbmRib3g7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBzdGVwIDEzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl01LiBTYW5kYm94IHdhcyBub3QgZm91bmQsIGNyZWF0aW5nIGEgbmV3IG9uZSAnLCByZWFzb24pO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBzdHViIGRlc2NyaXB0b3IgdXJsO1xuXG5cbiAgICAgICAgICAgIC8vIHN0ZXAgMTQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveChzdHViQ2FwYWJpbGl0aWVzKS50aGVuKChzYW5kYm94KSA9PiB7XG5cbiAgICAgICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIChtc2cpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oKHNhbmRib3gpID0+IHtcbiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgLy8gc3RlcCAxNiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTtcblxuICAgICAgICAgICAgX3N0dWJTYW5kYm94ID0gc2FuZGJveDtcblxuICAgICAgICAgICAgLy8gd2UgbmVlZCByZWdpc3RlciBzdHViIG9uIHJlZ2lzdHJ5IC0gc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5yZWdpc3RlclN0dWIoX3N0dWJTYW5kYm94LCBzdHViSWQsIHAycENvbmZpZywgcHJvdG9zdHViVVJMLCBfc3R1YkRlc2NyaXB0b3IpO1xuICAgICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAgIC50aGVuKChydW50aW1lUHJvdG9TdHViKSA9PiB7XG4gICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIHN0ZXAgMjMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSA3LiByZXR1cm4gdGhlIHJ1bnRpbWUgcHJvdG9zdHViIHVybDogJywgcnVudGltZVByb3RvU3R1Yik7XG5cbiAgICAgICAgICAgIF9ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1Yi51cmw7XG5cbiAgICAgICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICBsZXQgY29uZmlndXJhdGlvbiA9IHt9O1xuICAgICAgICAgICAgaWYgKCFlbXB0eU9iamVjdChfc3R1YkRlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgSlNPTi5wYXJzZShfc3R1YkRlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9zdHViRGVzY3JpcHRvci5jb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwMnBDb25maWcpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihjb25maWd1cmF0aW9uLCBKU09OLnBhcnNlKHAycENvbmZpZykpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oY29uZmlndXJhdGlvbiwgcDJwQ29uZmlnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyByZXF1aXJlZCBmb3IgcHJvdG9zdHViIHNlc3Npb25cblxuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5ydW50aW1lVVJMID0gdGhpcy5fcnVudGltZVVSTDtcblxuICAgICAgICAgICAgLy8gc3RlcCAyNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vIHN0ZXAgMjYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdIDg6IGFkZGluZyBzYW5kYm94IGxpc3RlbmVyIHRvIHByb3Rvc3R1YlVSTCA6ICcsIF9ydW50aW1lUHJvdG9TdHViVVJMKTtcblxuICAgICAgICAgICAgICAvLyBzdGVwIDI3IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgICAvLyBBZGQgdGhlIG1lc3NhZ2UgYnVzIGxpc3RlbmVyXG4gICAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfcnVudGltZVByb3RvU3R1YlVSTCwgKG1zZykgPT4ge1xuICAgICAgICAgICAgICAgIF9zdHViU2FuZGJveC5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICByZXR1cm4gX3N0dWJTYW5kYm94LmRlcGxveUNvbXBvbmVudChfc3R1YlNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgX3J1bnRpbWVQcm90b1N0dWJVUkwsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBsb2cuZXJyb3IoJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gRXJyb3Igb24gZGVwbG95IGNvbXBvbmVudDonLCBlKTtcbiAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcblxuXG4gICAgICAgICAgICAvLyBzdGVwIDI4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgbGV0IHN0dWI7XG4gICAgICAgICAgICBpZiAocDJwQ29uZmlnKSB7XG4gICAgICAgICAgICAgIGxvZy5sb2coJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gcDJwQ29uZmlnOiAnLCBwMnBDb25maWcpO1xuXG4gICAgICAgICAgICAgIGlmIChwMnBDb25maWcuaGFzT3duUHJvcGVydHkoJ2lzSGFuZGxlclN0dWInKSkgc3R1YiA9IHRoaXMucmVnaXN0cnkucDJwSGFuZGxlclN0dWJbdGhpcy5fcnVudGltZVVSTF07XG4gICAgICAgICAgICAgIGlmIChwMnBDb25maWcuaGFzT3duUHJvcGVydHkoJ3AycFJlcXVlc3RlclN0dWInKSkgc3R1YiA9IHRoaXMucmVnaXN0cnkucDJwUmVxdWVzdGVyU3R1YltwMnBDb25maWcucmVtb3RlUnVudGltZVVSTF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHViID0gdGhpcy5yZWdpc3RyeS5wcm90b3N0dWJzTGlzdFtkb21haW5dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsb2cubG9nKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdIFN0dWI6ICcsIHN0dWIpO1xuICAgICAgICAgICAgcmVzb2x2ZShzdHViKTtcbiAgICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJyk7XG4gICAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgICAgLmNhdGNoKGVycm9yUmVhc29uKTtcblxuICAgICAgfVxuXG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIERlcGxveSBpZHBQcm94eSBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybFxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICBkb21haW4gICAgICAgICAgZG9tYWluXG4gICovXG5cbiAgbG9hZElkcFByb3h5KGlkcFByb3h5VVJMKSB7XG5cbiAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghaWRwUHJveHlVUkwpIHRocm93IG5ldyAgIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIElkcFByb3h5IGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwoaWRwUHJveHlVUkwpLmRvbWFpbjtcblxuICAgICAgaWYgKCFkb21haW4pIHtcbiAgICAgICAgZG9tYWluID0gaWRwUHJveHlVUkw7XG4gICAgICB9XG5cbiAgICAgIGxldCBfcHJveHlTYW5kYm94O1xuICAgICAgbGV0IF9wcm94eURlc2NyaXB0b3I7XG4gICAgICBsZXQgX3J1bnRpbWVJZHBQcm94eVVSTDtcbiAgICAgIGxldCBfcHJveHlTb3VyY2VQYWNrYWdlO1xuICAgICAgbGV0IGhhdmVFcnJvciA9IGZhbHNlO1xuXG4gICAgICBsZXQgZXJyb3JSZWFzb24gPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIFNvbWV0aGluZyBmYWlsZWQgb24gdGhlIGRlcGxveSBvZiBJZHBQcm94eTogJywgcmVhc29uKTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICBsZXQgaGFuZGxlRXJyb3IgPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGhhdmVFcnJvciA9IHRydWU7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgLy8gRGlzY292ZXIgSURQUHJveHlcbiAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIC0tLS0tLS0tLS0tLS0tLS0tLS0gSURQIFByb3h5IERlcGxveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nKTtcbiAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIERpc2NvdmVyIG9yIENyZWF0ZSBhIG5ldyBJZHBQcm94eSBmb3IgZG9tYWluL1VSTDogJywgZG9tYWluKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHJ1bnRpbWVJZHBQcm94eVVSTCA9IHRoaXMucmVnaXN0cnkuZGlzY292ZXJJZHBQcm94eShkb21haW4pO1xuXG4gICAgICAgIC8vIElzIHJlZ2lzdGVkP1xuICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAxLiBJRFBQcm94eSBEaXNjb3ZlcmVkOiAnLCBydW50aW1lSWRwUHJveHlVUkwpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICBsZXQgaWRwUHJveHkgPSB0aGlzLnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtkb21haW5dO1xuICAgICAgICBsb2cubG9nKCdEZXBsb3llZDogJywgaWRwUHJveHkpO1xuXG4gICAgICAgIHJlc29sdmUoaWRwUHJveHkpO1xuICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAtLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nKTtcbiAgICAgIH0gY2F0Y2ggKHJlYXNvbikge1xuXG4gICAgICAgIC8vIGlzIG5vdCByZWdpc3RlZD9cbiAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gMS4gSWRwUHJveHkgbm90IGZvdW5kOicsIHJlYXNvbik7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBkZXNjcmlwdG9yIHN0ZXAgNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgdGhpcy5kZXNjcmlwdG9ycy5nZXRJZHBQcm94eURlc2NyaXB0b3IoaWRwUHJveHlVUkwpXG4gICAgICAgICAgLnRoZW4oKHByb3h5RGVzY3JpcHRvcikgPT4ge1xuXG4gICAgICAgICAgICBsb2cuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAyLiBSZXR1cm4gdGhlIElEUFByb3h5IGRlc2NyaXB0b3InKTtcblxuICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgX3Byb3h5RGVzY3JpcHRvciA9IHByb3h5RGVzY3JpcHRvcjtcblxuICAgICAgICAgICAgbGV0IHNvdXJjZVBhY2thZ2VVUkwgPSBwcm94eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZVVSTDtcblxuICAgICAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByb3h5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGdldCBQcm90b1N0dWIgU291cmNlIGNvZGUgZnJvbSBkZXNjcmlwdG9yIC0gc3RlcCA2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRTb3VyY2VQYWNrYWdlRnJvbVVSTChzb3VyY2VQYWNrYWdlVVJMKTtcbiAgICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgICAudGhlbigoc291cmNlUGFja2FnZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gMy4gcmV0dXJuIHRoZSBJRFBQcm94eSBzb3VyY2UgcGFja2FnZScpO1xuXG4gICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDcgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgICAgIF9wcm94eVNvdXJjZVBhY2thZ2UgPSBzb3VyY2VQYWNrYWdlO1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBDaGVjayBvbiBQRVAgKHBvbGljeSBFbmdpbmUpIGlmIHdlIG5lZWQgdGhlIHNhbmRib3ggYW5kIGNoZWNrIGlmIHRoZSBTYW5kYm94IEZhY3RvcnkgaGF2ZSB0aGUgY29udGV4dCBzYW5kYm94O1xuICAgICAgICAgICAgbGV0IHBvbGljeSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gcG9saWN5O1xuICAgICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAgIC50aGVuKChwb2xpY3kpID0+IHtcbiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkuZ2V0U2FuZGJveChkb21haW4pO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oKHByb3h5U2FuZGJveCkgPT4ge1xuICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gNC4gaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZXJlZCB0aGVuIHJldHVybiB0aGUgc2FuZGJveCcsIHByb3h5U2FuZGJveCk7XG5cbiAgICAgICAgICAgIF9wcm94eVNhbmRib3ggPSBwcm94eVNhbmRib3g7XG4gICAgICAgICAgICByZXR1cm4gcHJveHlTYW5kYm94O1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDUuIFNhbmRib3ggd2FzIG5vdCBmb3VuZCwgY3JlYXRpbmcgYSBuZXcgb25lJywgcmVhc29uKTtcblxuICAgICAgICAgICAgbGV0IHByb3h5Q2FwYWJpbGl0aWVzID0ge307XG4gICAgICAgICAgICBpZiAoX3Byb3h5RGVzY3JpcHRvciAmJiBfcHJveHlEZXNjcmlwdG9yLmhhc093blByb3BlcnR5KCdjYXBhYmlsaXRpZXMnKSkge1xuICAgICAgICAgICAgICBfcHJveHlEZXNjcmlwdG9yID0gX3Byb3h5RGVzY3JpcHRvci5zdHViQ2FwYWJpbGl0aWVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveChwcm94eUNhcGFiaWxpdGllcykudGhlbigoc2FuZGJveCkgPT4ge1xuXG4gICAgICAgICAgICAgIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCAobXNnKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHJldHVybiBzYW5kYm94O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTtcblxuICAgICAgICAgICAgX3Byb3h5U2FuZGJveCA9IHNhbmRib3g7XG5cbiAgICAgICAgICAgIC8vIHdlIG5lZWQgcmVnaXN0ZXIgc3R1YiBvbiByZWdpc3RyeSAtIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkucmVnaXN0ZXJJZHBQcm94eShzYW5kYm94LCBkb21haW4pO1xuICAgICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAgIC50aGVuKChydW50aW1lSWRwUHJveHlVUkwpID0+IHtcbiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDcuIFJldHVybiB0aGUgcnVudGltZSBJZHAgUHJveHkgVVJMOiAnLCBydW50aW1lSWRwUHJveHlVUkwpO1xuXG4gICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgICAgX3J1bnRpbWVJZHBQcm94eVVSTCA9IHJ1bnRpbWVJZHBQcm94eVVSTDtcblxuICAgICAgICAgICAgLy8gRXh0ZW5kIG9yaWdpbmFsIGh5cGVydHkgY29uZmlndXJhdGlvbjtcbiAgICAgICAgICAgIGxldCBjb25maWd1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoIWVtcHR5T2JqZWN0KF9wcm94eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgSlNPTi5wYXJzZShfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCA9IHRoaXMuX3J1bnRpbWVVUkw7XG5cbiAgICAgICAgICAgIC8vIERlcGxveSBDb21wb25lbnQgc3RlcCB4eHhcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXJcbiAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKF9ydW50aW1lSWRwUHJveHlVUkwsIChtc2cpID0+IHtcbiAgICAgICAgICAgICAgICBfcHJveHlTYW5kYm94LnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHJldHVybiBfcHJveHlTYW5kYm94LmRlcGxveUNvbXBvbmVudChfcHJveHlTb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUsIHJ1bnRpbWVJZHBQcm94eVVSTCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGxvZy5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIEVycm9yIG9uIGRlcGxveSBjb21wb25lbnQ6JywgZSk7XG4gICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cblxuICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgICAgIC8vIExvYWQgU3R1YiBmdW5jdGlvbiByZXNvbHZlZCB3aXRoIHN1Y2Nlc3M7XG4gICAgICAgICAgICAvLyBsZXQgaWRwUHJveHkgPSB7XG4gICAgICAgICAgICAvLyAgIHJ1bnRpbWVJZHBQcm94eVVSTDogX3J1bnRpbWVJZHBQcm94eVVSTCxcbiAgICAgICAgICAgIC8vICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXNcbiAgICAgICAgICAgIC8vIH07XG5cbiAgICAgICAgICAgIC8vdGhpcy5yZWdpc3RyeS5pZHBQcm94eUxpc3RbZG9tYWluXS5zdGF0dXMgPSAnZGVwbG95ZWQnO1xuICAgICAgICAgICAgbGV0IGlkcFByb3h5ID0gdGhpcy5yZWdpc3RyeS5pZHBQcm94eUxpc3RbZG9tYWluXTtcblxuICAgICAgICAgICAgbG9nLmxvZygnW1J1bnRpbWUuTG9hZGVyLmxvYWRJZHBQcm94eV0gODogbG9hZGVkOiAnLCBpZHBQcm94eSk7XG5cbiAgICAgICAgICAgIHJlc29sdmUoaWRwUHJveHkpO1xuICAgICAgICAgICAgbG9nLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkSWRwUHJveHldIC0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuXG4gICAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgICAgLmNhdGNoKGVycm9yUmVhc29uKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIGxvYWRlciBpcyByZWFkeSB0byBsb2FkIGFsbCBjb21wb25lbnRzXG4gIF9yZWFkeVRvVXNlKCkge1xuXG4gICAgbGV0IHN0YXR1cyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLl9ydW50aW1lVVJMKSB0aHJvdyBuZXcgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBUaGUgbG9hZGVyIG5lZWQgdGhlIHJ1bnRpbWUgdXJsIGFkZHJlc3MnKTtcbiAgICBpZiAoIXRoaXMuX21lc3NhZ2VzQnVzKSB0aHJvdyBuZXcgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBUaGUgbG9hZGVyIG5lZWQgdGhlIG1lc3NhZ2VCdXMgY29tcG9uZW50Jyk7XG4gICAgaWYgKCF0aGlzLl9yZWdpc3RyeSkgdGhyb3cgbmV3ICAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gVGhlIGxvYWRlciBuZWVkIHRoZSByZWdpc3RyeSBjb21wb25lbnQnKTtcbiAgICBpZiAoIXRoaXMuX3J1bnRpbWVGYWN0b3J5KSB0aHJvdyBuZXcgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBUaGUgbG9hZGVyIG5lZWQgdGhlIHJ1bnRpbWUgZmFjdG9yeSBjb21wb25lbnQnKTtcblxuICAgIHN0YXR1cyA9IHRydWU7XG4gICAgcmV0dXJuIHN0YXR1cztcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRlcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcnVudGltZS9Mb2FkZXIuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBOzs7Ozs7O0FBSkE7QUFDQTtBQUlBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUF1RUE7Ozs7Ozs7Ozs7Ozs7QUFhQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBREE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFLQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFodEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QUFDQTtBQUNBOzs7OztBQW9wQkE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///483\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _utils = __webpack_require__(15);\n\nvar _runtimeUtils = __webpack_require__(138);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('Descriptors');\n\nvar Descriptors = function () {\n  function Descriptors(runtimeURL, catalogue, runtimeConfiguration) {\n    (0, _classCallCheck3.default)(this, Descriptors);\n\n    if (!runtimeURL) throw Error('The descriptor need to know the runtime url to be used');\n    if (!catalogue) throw Error('The descriptor needs the catalogue instance');\n    if (!runtimeConfiguration) throw Error('The descriptor needs the runtime configuration');\n\n    this.log = log;\n\n    this.runtimeConfiguration = runtimeConfiguration;\n    this.runtimeURL = runtimeURL;\n    this.catalogue = catalogue;\n\n    this.constraints = _runtimeUtils.runtimeUtils.runtimeCapabilities;\n  }\n\n  (0, _createClass3.default)(Descriptors, [{\n    key: 'getHypertyDescriptor',\n    value: function getHypertyDescriptor(hypertyURL) {\n      return this.catalogue.getHypertyDescriptor(hypertyURL, true, this.constraints);\n    }\n  }, {\n    key: 'getStubDescriptor',\n    value: function getStubDescriptor(stubURL) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var domain = void 0;\n        var protostub = void 0;\n        var protoStubURL = void 0;\n\n        var originDividedURL = (0, _utils.divideURL)(_this.runtimeURL);\n        var originDomain = originDividedURL.domain;\n\n        if (stubURL.includes('://')) {\n          var dividedURL = (0, _utils.divideURL)(stubURL);\n          domain = dividedURL.domain;\n          var path = dividedURL.identity;\n\n          if (path) {\n            protostub = path.substring(path.lastIndexOf('/') + 1);\n          } else {\n            protostub = 'default';\n          }\n        } else {\n          protostub = 'default';\n          domain = stubURL;\n        }\n\n        protoStubURL = (0, _utils.buildURL)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub', protostub);\n        if (domain !== _this.runtimeConfiguration.domain) {\n          if (!stubURL.indexOf('https') || !stubURL.indexOf('hyperty-catalogue')) {\n            protoStubURL = stubURL;\n          } else {\n\n            // TODO: check how to load form different configuration domain\n            var resource = (0, _utils.getConfigurationResources)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');\n            protoStubURL = resource.prefix + domain + resource.suffix + protostub;\n          }\n        }\n\n        log.log('Load ProtocolStub for domain, ' + domain + ' : ', protoStubURL);\n        return _this.catalogue.getStubDescriptor(protoStubURL, true, _this.constraints).then(function (result) {\n\n          resolve(result);\n        }).catch(function (error) {\n\n          // log.log('Error: ', error);\n\n          protostub = domain;\n          domain = originDomain;\n\n          var resource = (0, _utils.getConfigurationResources)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');\n          protoStubURL = resource.prefix + domain + resource.suffix + protostub;\n\n          // log.log('Fallback -> Load Protocolstub for domain, ' + domain + ' : ', protostub);\n          return _this.catalogue.getStubDescriptor(protoStubURL, true, _this.constraints);\n        }).then(function (result) {\n          resolve(result);\n        }).catch(function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }, {\n    key: 'getIdpProxyDescriptor',\n    value: function getIdpProxyDescriptor(idpProxyURL) {\n      var _this2 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var domain = void 0;\n        var idpproxy = void 0;\n\n        var originDividedURL = (0, _utils.divideURL)(_this2.runtimeURL);\n        var originDomain = originDividedURL.domain;\n\n        if (idpProxyURL.includes('://')) {\n          var dividedURL = (0, _utils.divideURL)(idpProxyURL);\n          domain = dividedURL.domain;\n          var path = dividedURL.identity;\n          if (path) {\n            idpproxy = path.substring(path.lastIndexOf('/') + 1);\n          } else {\n            idpproxy = 'default';\n          }\n        } else {\n          idpproxy = 'default';\n          domain = idpProxyURL;\n        }\n\n        var resource = (0, _utils.getConfigurationResources)(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy');\n\n        idpProxyURL = resource.prefix + domain + resource.suffix + idpproxy;\n        // log.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);\n        return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL, true, _this2.constraints).then(function (result) {\n\n          resolve(result);\n        }).catch(function () {\n\n          idpproxy = domain;\n          domain = originDomain;\n\n          idpProxyURL = (0, _utils.buildURL)(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy', idpproxy);\n\n          // log.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);\n          return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL, true, _this2.constraints);\n        }).then(function (result) {\n          resolve(result);\n        }).catch(function (reason) {\n          reject(reason);\n        });\n      });\n    }\n  }]);\n  return Descriptors;\n}();\n\nexports.default = Descriptors;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9ydW50aW1lL0Rlc2NyaXB0b3JzLmpzP2ZjZDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtkaXZpZGVVUkwsIGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXMsIGJ1aWxkVVJMfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBydW50aW1lVXRpbHMgfSBmcm9tICcuL3J1bnRpbWVVdGlscyc7XG5cbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignRGVzY3JpcHRvcnMnKTtcblxuY2xhc3MgRGVzY3JpcHRvcnMge1xuXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIGNhdGFsb2d1ZSwgcnVudGltZUNvbmZpZ3VyYXRpb24pIHtcbiAgICBpZiAoIXJ1bnRpbWVVUkwpIHRocm93IEVycm9yKCdUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgdXJsIHRvIGJlIHVzZWQnKTtcbiAgICBpZiAoIWNhdGFsb2d1ZSkgdGhyb3cgRXJyb3IoJ1RoZSBkZXNjcmlwdG9yIG5lZWRzIHRoZSBjYXRhbG9ndWUgaW5zdGFuY2UnKTtcbiAgICBpZiAoIXJ1bnRpbWVDb25maWd1cmF0aW9uKSB0aHJvdyBFcnJvcignVGhlIGRlc2NyaXB0b3IgbmVlZHMgdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbicpO1xuXG4gICAgdGhpcy5sb2cgPSBsb2c7XG5cbiAgICB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uID0gcnVudGltZUNvbmZpZ3VyYXRpb247XG4gICAgdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDtcbiAgICB0aGlzLmNhdGFsb2d1ZSA9IGNhdGFsb2d1ZTtcblxuICAgIHRoaXMuY29uc3RyYWludHMgPSBydW50aW1lVXRpbHMucnVudGltZUNhcGFiaWxpdGllcztcbiAgfVxuXG4gIGdldEh5cGVydHlEZXNjcmlwdG9yKGh5cGVydHlVUkwpIHtcbiAgICByZXR1cm4gdGhpcy5jYXRhbG9ndWUuZ2V0SHlwZXJ0eURlc2NyaXB0b3IoaHlwZXJ0eVVSTCwgdHJ1ZSwgdGhpcy5jb25zdHJhaW50cyk7XG4gIH1cblxuICBnZXRTdHViRGVzY3JpcHRvcihzdHViVVJMKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgZG9tYWluO1xuICAgICAgbGV0IHByb3Rvc3R1YjtcbiAgICAgIGxldCBwcm90b1N0dWJVUkw7XG5cbiAgICAgIGxldCBvcmlnaW5EaXZpZGVkVVJMID0gZGl2aWRlVVJMKHRoaXMucnVudGltZVVSTCk7XG4gICAgICBsZXQgb3JpZ2luRG9tYWluID0gb3JpZ2luRGl2aWRlZFVSTC5kb21haW47XG5cbiAgICAgIGlmIChzdHViVVJMLmluY2x1ZGVzKCc6Ly8nKSkge1xuICAgICAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChzdHViVVJMKTtcbiAgICAgICAgZG9tYWluID0gZGl2aWRlZFVSTC5kb21haW47XG4gICAgICAgIGxldCBwYXRoID0gZGl2aWRlZFVSTC5pZGVudGl0eTtcblxuICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgIHByb3Rvc3R1YiA9IHBhdGguc3Vic3RyaW5nKHBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3Rvc3R1YiA9ICdkZWZhdWx0JztcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm90b3N0dWIgPSAnZGVmYXVsdCc7XG4gICAgICAgIGRvbWFpbiA9IHN0dWJVUkw7XG4gICAgICB9XG5cbiAgICAgIHByb3RvU3R1YlVSTCA9IGJ1aWxkVVJMKHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ3Byb3RvY29sc3R1YicsIHByb3Rvc3R1Yik7XG4gICAgICBpZiAoZG9tYWluICE9PSB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLmRvbWFpbikge1xuICAgICAgICBpZiAoIXN0dWJVUkwuaW5kZXhPZignaHR0cHMnKSB8fCAhc3R1YlVSTC5pbmRleE9mKCdoeXBlcnR5LWNhdGFsb2d1ZScpKSB7XG4gICAgICAgICAgcHJvdG9TdHViVVJMID0gc3R1YlVSTDtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIC8vIFRPRE86IGNoZWNrIGhvdyB0byBsb2FkIGZvcm0gZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24gZG9tYWluXG4gICAgICAgICAgbGV0IHJlc291cmNlID0gZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcyh0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLCAnY2F0YWxvZ3VlVVJMcycsICdwcm90b2NvbHN0dWInKTtcbiAgICAgICAgICBwcm90b1N0dWJVUkwgPSByZXNvdXJjZS5wcmVmaXggKyBkb21haW4gKyByZXNvdXJjZS5zdWZmaXggKyBwcm90b3N0dWI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbG9nLmxvZygnTG9hZCBQcm90b2NvbFN0dWIgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBwcm90b1N0dWJVUkwpO1xuICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldFN0dWJEZXNjcmlwdG9yKHByb3RvU3R1YlVSTCwgdHJ1ZSwgdGhpcy5jb25zdHJhaW50cykudGhlbigocmVzdWx0KSA9PiB7XG5cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuXG4gICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcblxuICAgICAgICAvLyBsb2cubG9nKCdFcnJvcjogJywgZXJyb3IpO1xuXG4gICAgICAgIHByb3Rvc3R1YiA9IGRvbWFpbjtcbiAgICAgICAgZG9tYWluID0gb3JpZ2luRG9tYWluO1xuXG4gICAgICAgIGxldCByZXNvdXJjZSA9IGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXModGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAncHJvdG9jb2xzdHViJyk7XG4gICAgICAgIHByb3RvU3R1YlVSTCA9IHJlc291cmNlLnByZWZpeCArIGRvbWFpbiArIHJlc291cmNlLnN1ZmZpeCArIHByb3Rvc3R1YjtcblxuICAgICAgICAvLyBsb2cubG9nKCdGYWxsYmFjayAtPiBMb2FkIFByb3RvY29sc3R1YiBmb3IgZG9tYWluLCAnICsgZG9tYWluICsgJyA6ICcsIHByb3Rvc3R1Yik7XG4gICAgICAgIHJldHVybiB0aGlzLmNhdGFsb2d1ZS5nZXRTdHViRGVzY3JpcHRvcihwcm90b1N0dWJVUkwsIHRydWUsIHRoaXMuY29uc3RyYWludHMpO1xuICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IGRvbWFpbjtcbiAgICAgIGxldCBpZHBwcm94eTtcblxuICAgICAgbGV0IG9yaWdpbkRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodGhpcy5ydW50aW1lVVJMKTtcbiAgICAgIGxldCBvcmlnaW5Eb21haW4gPSBvcmlnaW5EaXZpZGVkVVJMLmRvbWFpbjtcblxuICAgICAgaWYgKGlkcFByb3h5VVJMLmluY2x1ZGVzKCc6Ly8nKSkge1xuICAgICAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChpZHBQcm94eVVSTCk7XG4gICAgICAgIGRvbWFpbiA9IGRpdmlkZWRVUkwuZG9tYWluO1xuICAgICAgICBsZXQgcGF0aCA9IGRpdmlkZWRVUkwuaWRlbnRpdHk7XG4gICAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgICAgaWRwcHJveHkgPSBwYXRoLnN1YnN0cmluZyhwYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZHBwcm94eSA9ICdkZWZhdWx0JztcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZHBwcm94eSA9ICdkZWZhdWx0JztcbiAgICAgICAgZG9tYWluID0gaWRwUHJveHlVUkw7XG4gICAgICB9XG5cblxuICAgICAgbGV0IHJlc291cmNlID0gZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcyh0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLCAnY2F0YWxvZ3VlVVJMcycsICdpZHBQcm94eScpO1xuXG4gICAgICBpZHBQcm94eVVSTCA9IHJlc291cmNlLnByZWZpeCArIGRvbWFpbiArIHJlc291cmNlLnN1ZmZpeCArIGlkcHByb3h5O1xuICAgICAgLy8gbG9nLmxvZygnTG9hZCBJZHAgUHJveHkgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBpZHBQcm94eVVSTCk7XG4gICAgICByZXR1cm4gdGhpcy5jYXRhbG9ndWUuZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMLCB0cnVlLCB0aGlzLmNvbnN0cmFpbnRzKS50aGVuKChyZXN1bHQpID0+IHtcblxuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG5cbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcblxuICAgICAgICBpZHBwcm94eSA9IGRvbWFpbjtcbiAgICAgICAgZG9tYWluID0gb3JpZ2luRG9tYWluO1xuXG4gICAgICAgIGlkcFByb3h5VVJMID0gYnVpbGRVUkwodGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAnaWRwUHJveHknLCBpZHBwcm94eSk7XG5cbiAgICAgICAgLy8gbG9nLmxvZygnTG9hZCBJZHAgUHJveHkgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBpZHBQcm94eVVSTCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNhdGFsb2d1ZS5nZXRJZHBQcm94eURlc2NyaXB0b3IoaWRwUHJveHlVUkwsIHRydWUsIHRoaXMuY29uc3RyYWludHMpO1xuICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERlc2NyaXB0b3JzO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9ydW50aW1lL0Rlc2NyaXB0b3JzLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTs7Ozs7QUFHQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///484\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar runtimeConfiguration = exports.runtimeConfiguration = {\n\n  runtimeURLS: {\n    registry: {\n      prefix: 'hyperty-runtime://',\n      suffix: 'registry'\n    },\n    identityModule: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/idm'\n    },\n    runtimeUA: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/ua'\n    },\n    catalogue: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/catalogue'\n    },\n    graphConnector: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/graph'\n    },\n    syncManager: {\n      prefix: 'hyperty-runtime://',\n      suffix: '/sm'\n    }\n  },\n  catalogueURLs: {\n    protocolstub: {\n      prefix: 'hyperty-catalogue://catalogue.',\n      suffix: '/.well-known/protocolstub/',\n      fallback: 'hyperty-catalogue://catalogue.%domain%/.well-known/protocolstub/'\n    },\n    idpProxy: {\n      prefix: 'hyperty-catalogue://catalogue.',\n      suffix: '/.well-known/idp-proxy/',\n      fallback: 'hyperty-catalogue://catalogue.%domain%/.well-known/idp-proxy/'\n    }\n  },\n  msgNodeURL: {\n    prefix: 'domain://msg-node.',\n    suffix: '',\n    hypertyAddressAllocation: '/hyperty-address-allocation',\n    objectAddressAllocation: '/object-address-allocation',\n    subscriptionManagement: '/sm'\n  },\n  domainRegistryURL: {\n    prefix: 'domain://registry.',\n    suffix: ''\n  },\n  globalRegistryURL: 'global://registry.'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9ydW50aW1lL3J1bnRpbWVDb25maWd1cmF0aW9uLmpzPzZiMWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHJ1bnRpbWVDb25maWd1cmF0aW9uID0ge1xuXG4gIHJ1bnRpbWVVUkxTOiB7XG4gICAgcmVnaXN0cnk6IHtcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXG4gICAgICBzdWZmaXg6ICdyZWdpc3RyeSdcbiAgICB9LFxuICAgIGlkZW50aXR5TW9kdWxlOiB7XG4gICAgICBwcmVmaXg6ICdoeXBlcnR5LXJ1bnRpbWU6Ly8nLFxuICAgICAgc3VmZml4OiAnL2lkbSdcbiAgICB9LFxuICAgIHJ1bnRpbWVVQToge1xuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJyxcbiAgICAgIHN1ZmZpeDogJy91YSdcbiAgICB9LFxuICAgIGNhdGFsb2d1ZToge1xuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJyxcbiAgICAgIHN1ZmZpeDogJy9jYXRhbG9ndWUnXG4gICAgfSxcbiAgICBncmFwaENvbm5lY3Rvcjoge1xuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJyxcbiAgICAgIHN1ZmZpeDogJy9ncmFwaCdcbiAgICB9LFxuICAgIHN5bmNNYW5hZ2VyOiB7XG4gICAgICBwcmVmaXg6ICdoeXBlcnR5LXJ1bnRpbWU6Ly8nLFxuICAgICAgc3VmZml4OiAnL3NtJ1xuICAgIH1cbiAgfSxcbiAgY2F0YWxvZ3VlVVJMczoge1xuICAgIHByb3RvY29sc3R1Yjoge1xuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1jYXRhbG9ndWU6Ly9jYXRhbG9ndWUuJyxcbiAgICAgIHN1ZmZpeDogJy8ud2VsbC1rbm93bi9wcm90b2NvbHN0dWIvJyxcbiAgICAgIGZhbGxiYWNrOiAnaHlwZXJ0eS1jYXRhbG9ndWU6Ly9jYXRhbG9ndWUuJWRvbWFpbiUvLndlbGwta25vd24vcHJvdG9jb2xzdHViLydcbiAgICB9LFxuICAgIGlkcFByb3h5OiB7XG4gICAgICBwcmVmaXg6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4nLFxuICAgICAgc3VmZml4OiAnLy53ZWxsLWtub3duL2lkcC1wcm94eS8nLFxuICAgICAgZmFsbGJhY2s6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4lZG9tYWluJS8ud2VsbC1rbm93bi9pZHAtcHJveHkvJ1xuICAgIH1cbiAgfSxcbiAgbXNnTm9kZVVSTDoge1xuICAgIHByZWZpeDogJ2RvbWFpbjovL21zZy1ub2RlLicsXG4gICAgc3VmZml4OiAnJyxcbiAgICBoeXBlcnR5QWRkcmVzc0FsbG9jYXRpb246ICcvaHlwZXJ0eS1hZGRyZXNzLWFsbG9jYXRpb24nLFxuICAgIG9iamVjdEFkZHJlc3NBbGxvY2F0aW9uOiAnL29iamVjdC1hZGRyZXNzLWFsbG9jYXRpb24nLFxuICAgIHN1YnNjcmlwdGlvbk1hbmFnZW1lbnQ6ICcvc20nXG4gIH0sXG4gIGRvbWFpblJlZ2lzdHJ5VVJMOiB7XG4gICAgcHJlZml4OiAnZG9tYWluOi8vcmVnaXN0cnkuJyxcbiAgICBzdWZmaXg6ICcnXG4gIH0sXG4gIGdsb2JhbFJlZ2lzdHJ5VVJMOiAnZ2xvYmFsOi8vcmVnaXN0cnkuJ1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvcnVudGltZS9ydW50aW1lQ29uZmlndXJhdGlvbi5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFyQkE7QUEwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQU5BO0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBbkRBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///485\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _GraphConnectorLight = __webpack_require__(487);\n\nvar _GraphConnectorLight2 = _interopRequireDefault(_GraphConnectorLight);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _GraphConnectorLight2.default; // let GraphConnector;\n// if (process.env.MODE !== 'light') {\n//   GraphConnector = require('./GraphConnectorBase');\n//   if (GraphConnector && GraphConnector.hasOwnProperty('default')) GraphConnector = GraphConnector.default;\n// } else {\n//   GraphConnector = require('./GraphConnectorLight');\n//   if (GraphConnector &&  GraphConnector.hasOwnProperty('default')) GraphConnector = GraphConnector.default;\n// }\n\n/**\n * The GraphConnectorBase have some problems with the size;\n * @deprecated Due to some problems increase a lot the file size\n */\n// import GraphConnector from './GraphConnectorBase';\n\n/**\n *\n * @experimental used instead of GraphConnectorBase;\n */\n\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9ncmFwaGNvbm5lY3Rvci9HcmFwaENvbm5lY3Rvci5qcz84MGM4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxldCBHcmFwaENvbm5lY3Rvcjtcbi8vIGlmIChwcm9jZXNzLmVudi5NT0RFICE9PSAnbGlnaHQnKSB7XG4vLyAgIEdyYXBoQ29ubmVjdG9yID0gcmVxdWlyZSgnLi9HcmFwaENvbm5lY3RvckJhc2UnKTtcbi8vICAgaWYgKEdyYXBoQ29ubmVjdG9yICYmIEdyYXBoQ29ubmVjdG9yLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykpIEdyYXBoQ29ubmVjdG9yID0gR3JhcGhDb25uZWN0b3IuZGVmYXVsdDtcbi8vIH0gZWxzZSB7XG4vLyAgIEdyYXBoQ29ubmVjdG9yID0gcmVxdWlyZSgnLi9HcmFwaENvbm5lY3RvckxpZ2h0Jyk7XG4vLyAgIGlmIChHcmFwaENvbm5lY3RvciAmJiAgR3JhcGhDb25uZWN0b3IuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHQnKSkgR3JhcGhDb25uZWN0b3IgPSBHcmFwaENvbm5lY3Rvci5kZWZhdWx0O1xuLy8gfVxuXG4vKipcbiAqIFRoZSBHcmFwaENvbm5lY3RvckJhc2UgaGF2ZSBzb21lIHByb2JsZW1zIHdpdGggdGhlIHNpemU7XG4gKiBAZGVwcmVjYXRlZCBEdWUgdG8gc29tZSBwcm9ibGVtcyBpbmNyZWFzZSBhIGxvdCB0aGUgZmlsZSBzaXplXG4gKi9cbi8vIGltcG9ydCBHcmFwaENvbm5lY3RvciBmcm9tICcuL0dyYXBoQ29ubmVjdG9yQmFzZSc7XG5cbi8qKlxuICpcbiAqIEBleHBlcmltZW50YWwgdXNlZCBpbnN0ZWFkIG9mIEdyYXBoQ29ubmVjdG9yQmFzZTtcbiAqL1xuaW1wb3J0IEdyYXBoQ29ubmVjdG9yIGZyb20gJy4vR3JhcGhDb25uZWN0b3JMaWdodCc7XG5cbmV4cG9ydCBkZWZhdWx0IEdyYXBoQ29ubmVjdG9yO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9ncmFwaGNvbm5lY3Rvci9HcmFwaENvbm5lY3Rvci5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBbUJBO0FBQ0E7Ozs7O0FBcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBOzs7OztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///486\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval('\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright 2016 PT Inovação e Sistemas SA\n * Copyright 2016 INESC-ID\n * Copyright 2016 QUOBIS NETWORKS SL\n * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n * Copyright 2016 ORANGE SA\n * Copyright 2016 Deutsche Telekom AG\n * Copyright 2016 Apizee\n * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n **/\n\n/**\n * The Graph Connector contains the contact list/address book.\n * @abstract\n * @experimental\n * @author beierle@tu-berlin.de\n *\n *\n */\nvar GraphConnector = function GraphConnector(hypertyRuntimeURL, messageBus, storageManager) {\n  (0, _classCallCheck3.default)(this, GraphConnector);\n};\n\nexports.default = GraphConnector;\nmodule.exports = exports["default"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9ncmFwaGNvbm5lY3Rvci9HcmFwaENvbm5lY3RvckxpZ2h0LmpzP2ZmZGYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4gKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiAqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4gKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiAqIENvcHlyaWdodCAyMDE2IEFwaXplZVxuICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICoqL1xuXG4vKipcbiAqIFRoZSBHcmFwaCBDb25uZWN0b3IgY29udGFpbnMgdGhlIGNvbnRhY3QgbGlzdC9hZGRyZXNzIGJvb2suXG4gKiBAYWJzdHJhY3RcbiAqIEBleHBlcmltZW50YWxcbiAqIEBhdXRob3IgYmVpZXJsZUB0dS1iZXJsaW4uZGVcbiAqXG4gKlxuICovXG5jbGFzcyBHcmFwaENvbm5lY3RvciB7XG5cbiAgY29uc3RydWN0b3IoaHlwZXJ0eVJ1bnRpbWVVUkwsIG1lc3NhZ2VCdXMsIHN0b3JhZ2VNYW5hZ2VyKSB7XG5cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEdyYXBoQ29ubmVjdG9yO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9ncmFwaGNvbm5lY3Rvci9HcmFwaENvbm5lY3RvckxpZ2h0LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7Ozs7Ozs7O0FBUUE7QUFFQTtBQUVBO0FBQ0E7QUFHQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///487\n');
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('CoreDiscovery'); /**\n                                             * Copyright 2016 PT Inovação e Sistemas SA\n                                             * Copyright 2016 INESC-ID\n                                             * Copyright 2016 QUOBIS NETWORKS SL\n                                             * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                                             * Copyright 2016 ORANGE SA\n                                             * Copyright 2016 Deutsche Telekom AG\n                                             * Copyright 2016 Apizee\n                                             * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                                             *\n                                             * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                             * you may not use this file except in compliance with the License.\n                                             * You may obtain a copy of the License at\n                                             *\n                                             *   http://www.apache.org/licenses/LICENSE-2.0\n                                             *\n                                             * Unless required by applicable law or agreed to in writing, software\n                                             * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                             * See the License for the specific language governing permissions and\n                                             * limitations under the License.\n                                             **/\n\n// Log System\n\n/**\n* Core Discovery interface\n* Class to allow applications to search for hyperties and DataObjects using the message bus\n*/\nvar CoreDiscovery = function () {\n\n  /**\n  * To initialise the Discovery, which will provide the support for hyperties to\n  * query users registered in outside the internal core.\n  * @param  {MessageBus}          msgbus                msgbus\n  * @param  {RuntimeURL}          runtimeURL            runtimeURL\n  * @param  {graphConnector}    graphConnector\n  */\n  function CoreDiscovery(runtimeURL, msgBus, graphConnector, runtimeFactory, registry) {\n    (0, _classCallCheck3.default)(this, CoreDiscovery);\n\n    if (!runtimeFactory) throw Error('The catalogue needs the runtimeFactory');\n\n    var _this = this;\n    this._messageBus = msgBus;\n    _this.graphConnector = graphConnector;\n    _this.httpRequest = runtimeFactory.createHttpRequest();\n    _this.domain = (0, _utils.divideURL)(runtimeURL).domain;\n    _this.discoveryURL = runtimeURL + '/discovery/';\n    _this.registry = registry;\n\n    _this.messageBus.addListener(_this.discoveryURL, function (msg) {\n\n      _this.discoveryManager(msg).then(function (result) {\n\n        //FLOW-OUT: message response\n        _this.messageBus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: 200,\n            value: result\n          }\n        });\n      }).catch(function (err) {\n        var description = void 0;\n        var code = void 0;\n\n        if (err === 'GraphConnector') {\n          description = 'This search is not available at the moment. Try later.';\n          code = 500;\n        } else {\n          description = 'Not Found';\n          code = 404;\n        }\n\n        //FLOW-OUT: error message response\n        _this.messageBus.postMessage({\n          id: msg.id,\n          type: 'response',\n          from: msg.to,\n          to: msg.from,\n          body: {\n            code: code,\n            description: description\n          }\n        });\n      });\n    });\n  }\n\n  /**\n   * Returns the MessageBus.\n   */\n\n\n  (0, _createClass3.default)(CoreDiscovery, [{\n    key: 'discoveryManager',\n\n\n    /* function to decide what discovery method to call and later return the response msg  */\n    value: function discoveryManager(msg) {\n      var _this = this;\n      var domain = (0, _utils.divideURL)(msg.from).domain;\n      var atributes = msg.body.resource.split('/').filter(Boolean);\n      var resources = [];\n      var dataSchemes = [];\n\n      log.log('[CoreDiscovery.discoveryManager] received: ', msg);\n\n      if (msg.body.criteria) {\n        if (msg.body.criteria.resources) {\n          resources = msg.body.criteria.resources;\n        }\n        if (msg.body.criteria.dataSchemes) {\n          dataSchemes = msg.body.criteria.dataSchemes;\n        }\n      }\n\n      switch (atributes[1]) {\n        case 'user':\n          if (atributes[0] == 'hyperty') {\n            return _this.discoverHyperties(msg.body.resource.split('user/')[1], dataSchemes, resources, msg.body.criteria.domain);\n          } else {\n            return _this.discoverDataObjects(msg.body.resource.split('user/')[1], dataSchemes, resources, msg.body.criteria.domain);\n          }\n          break;\n\n        case 'url':\n          if (atributes[0] == 'hyperty') {\n            return _this.discoverHypertyPerURL(msg.body.resource.split('url/')[1], msg.body.criteria.domain);\n          } else {\n            return _this.discoverDataObjectPerURL(msg.body.resource.split('url/')[1], msg.body.criteria.domain);\n          }\n          break;\n        case 'name':\n          return _this.discoverDataObjectsPerName(msg.body.resource.split('name/')[1], dataSchemes, resources, msg.body.criteria.domain);\n          break;\n        case 'reporter':\n          return _this.discoverDataObjectsPerReporter(msg.body.resource.split('reporter/')[1], dataSchemes, resources, msg.body.criteria.domain);\n          break;\n        case 'guid':\n          if (typeof _this.graphConnector !== 'undefined' && _this.graphConnector !== null) {\n            if (atributes[0] == 'hyperty') {\n              return _this.discoverHypertiesPerGUID(msg.body.resource.split('user-guid://')[1], dataSchemes, resources);\n            } else {\n              return _this.discoverDataObjectsPerGUID(msg.body.resource.split('user-guid://')[1], dataSchemes, resources);\n            }\n            break;\n          } else {\n            return _promise2.default.reject('GraphConnector');\n            break;\n          }\n        case 'userprofile':\n          if (typeof _this.graphConnector !== 'undefined' && _this.graphConnector !== null) {\n            if (atributes[0] == 'hyperty') {\n              return _this.discoverHypertiesPerUserProfileData(msg.body.resource.split('userprofile/')[1], dataSchemes, resources);\n            } else {\n              return _this.discoverDataObjectsPerUserProfileData(msg.body.resource.split('userprofile/')[1], dataSchemes, resources);\n            }\n            break;\n          } else {\n            return _promise2.default.reject('GraphConnector');\n            break;\n          }\n      }\n    }\n\n    /**\n    * Advanced Search for Hyperties registered in domain registry associated with some user identifier (eg email, name ...)\n    * @param  {String}           userIdentifier\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\n    */\n\n  }, {\n    key: 'discoverHypertiesPerUserProfileData',\n    value: function discoverHypertiesPerUserProfileData(userIdentifier, dataSchemes, resources) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //translate user identifier (e.g. email, name...) into the associated GUIDs\n        _this.discoverGUIDPerUserIdentifier(userIdentifier).then(function (guids) {\n\n          var hypertiesPromises = guids.map(function (guid) {\n\n            return new _promise2.default(function (resolve, reject) {\n              _this.discoverHypertiesPerGUID(guid, dataSchemes, resources).then(function (hyperties) {\n                resolve(hyperties);\n              }).catch(function (err) {\n                resolve([]);\n              });\n            });\n          });\n\n          _promise2.default.all(hypertiesPromises).then(function (hypertiesResult) {\n\n            var hyperties = [].concat.apply([], hypertiesResult);\n\n            if (hyperties.length === 0) {\n              return reject('No hyperties were found');\n            }\n\n            resolve(hyperties);\n          });\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n\n    /**\n    * Advanced Search for DataObjects registered in domain registry associated with some user identifier (eg email, name ...)\n    * @param  {String}           userIdentifier\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\n    */\n\n  }, {\n    key: 'discoverDataObjectsPerUserProfileData',\n    value: function discoverDataObjectsPerUserProfileData(userIdentifier, dataSchemes, resources) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //translate user identifier (e.g. email, name...) into the associated GUIDs\n        _this.discoverGUIDPerUserIdentifier(userIdentifier).then(function (guids) {\n\n          var dataObjectsPromises = guids.map(function (guid) {\n\n            return new _promise2.default(function (resolve, reject) {\n              _this.discoverDataObjectsPerGUID(guid, dataSchemes, resources).then(function (dataObjects) {\n                resolve(dataObjects);\n              }).catch(function (err) {\n                resolve([]);\n              });\n            });\n          });\n\n          _promise2.default.all(dataObjectsPromises).then(function (dataObjectsResult) {\n\n            var dataObjects = [].concat.apply([], dataObjectsResult);\n\n            if (dataObjects.length === 0) {\n              return reject('No dataObjects were found');\n            }\n\n            resolve(dataObjects);\n          });\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n\n    /**\n    * Advanced Search for Hyperties registered in domain registry associated with some GUID\n    * @param  {String}             guid\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\n    */\n\n  }, {\n    key: 'discoverHypertiesPerGUID',\n    value: function discoverHypertiesPerGUID(guid, dataSchemes, resources) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //translate GUID into the user IDs to query the domain registry\n        _this.discoverUserIdsPerGUID(guid).then(function (uids) {\n\n          //translate user IDs into the associated hyperties registered in some domain\n          var hypertiesPromises = uids.map(function (uid) {\n            return new _promise2.default(function (resolve, reject) {\n              _this.discoverHyperties(uid.uID, dataSchemes, resources, uid.domain).then(function (hyperties) {\n                resolve(hyperties);\n              }).catch(function (err) {\n                resolve([]);\n              });\n            });\n          });\n\n          _promise2.default.all(hypertiesPromises).then(function (hypertiesResult) {\n\n            var hyperties = [].concat.apply([], hypertiesResult);\n\n            if (hyperties.length === 0) {\n              return reject('No hyperties were found');\n            }\n\n            // log.log('Hyperties : ', hyperties);\n            resolve(hyperties);\n          });\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n\n    /**\n    * Advanced Search for DataObjects registered in domain registry associated with some GUID\n    * @param  {String}             guid\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\n    */\n\n  }, {\n    key: 'discoverDataObjectsPerGUID',\n    value: function discoverDataObjectsPerGUID(guid, dataSchemes, resources) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //translate GUID into the user IDs to query the domain registry\n        _this.discoverUserIdsPerGUID(guid).then(function (uids) {\n\n          //translate user IDs into the associated dataObjects registered in some domain\n          var dataObjectPromises = uids.map(function (uid) {\n            return new _promise2.default(function (resolve, reject) {\n              _this.discoverDataObjects(uid.uID, dataSchemes, resources, uid.domain).then(function (dataObjects) {\n                resolve(dataObjects);\n              }).catch(function (err) {\n                resolve([]);\n              });\n            });\n          });\n\n          _promise2.default.all(dataObjectPromises).then(function (dataObjectsResult) {\n\n            var dataObjects = [].concat.apply([], dataObjectsResult);\n\n            if (dataObjects.length === 0) {\n              return reject('No dataObjects were found');\n            }\n\n            // log.log('DataObjects : ', dataObjects);\n            resolve(dataObjects);\n          });\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n\n    /** Advanced Search for Hyperties registered in domain registry and associated with some user ID\n    * @param  {String}           user                  user identifier, either in url or email format\n    * @param  {Array<string>}    dataSchemes (Optional)     types of hyperties schemas\n    * @param  {Array<string>}    resources (Optional)  types of hyperties resources\n    * @param  {String}           domain (Optional)     domain of the registry to search\n    */\n\n  }, {\n    key: 'discoverHyperties',\n    value: function discoverHyperties(user, dataSchemes, resources, domain) {\n      var _this = this;\n      var activeDomain = void 0;\n\n      activeDomain = !domain ? _this.domain : domain;\n\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {}\n      };\n\n      if (user.indexOf('user://') > -1) {\n        msg.body.resource = user;\n      } else {\n        msg.body.resource = '/hyperty/idp-identifier/' + user;\n      }\n\n      if (dataSchemes.length > 0) {\n        if (!msg.body.criteria) {\n          msg.body.criteria = {};\n        }\n        msg.body.criteria.dataSchemes = dataSchemes;\n      }\n\n      if (resources.length > 0) {\n        if (!msg.body.criteria) {\n          msg.body.criteria = {};\n        }\n        msg.body.criteria.resources = resources;\n      }\n\n      return new _promise2.default(function (resolve, reject) {\n        // log.log(\"[CoreDiscovery.discoverHyperties] sending msg \", msg);\n\n        _this.messageBus.postMessage(msg, function (reply) {\n\n          // log.log(\"[CoreDiscovery.discoverHyperties] rcved reply \", reply);\n\n          if (reply.body.code === 200 || reply.body.code === 500) {\n            var hyperties = reply.body.value;\n\n            var finalHyperties = [];\n            for (var key in hyperties) {\n              finalHyperties.push(hyperties[key]);\n            }if (finalHyperties.length > 0) {\n              // log.log(\"[CoreDiscovery.discoverHyperties] Hyperties Found: \", finalHyperties);\n              resolve(finalHyperties);\n            } else {\n              return reject('No Hyperty was found');\n            }\n          } else {\n            return reject('No Hyperty was found');\n          }\n\n          /*_this.registry.isLegacy(user).then((legacy) => {\n                if (legacy) resolve([{hypertyID: user }])\n                else return reject('No Hyperty was found');\n            });*/\n        });\n      });\n    }\n\n    /** Advanced Search for DataObjects registered in domain registry and associated with some user ID\n    * @param  {String}           user                  user identifier, either in url or email format\n    * @param  {Array<string>}    dataSchemes (Optional)     types of dataObjects schemas\n    * @param  {Array<string>}    resources (Optional)  types of dataObjects resources\n    * @param  {String}           domain (Optional)     domain of the registry to search\n    */\n\n  }, {\n    key: 'discoverDataObjects',\n    value: function discoverDataObjects(user, dataSchemes, resources, domain) {\n      var _this = this;\n      var activeDomain = void 0;\n      var dataObjectsArray = [];\n\n      activeDomain = !domain ? _this.domain : domain;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        //translate user identifier (e.g. email, name...) into the associated hyperties\n        _this.discoverHyperties(user, [], [], activeDomain).then(function (hyperties) {\n\n          var finalHyperties = [];\n          for (var key in hyperties) {\n            finalHyperties.push(hyperties[key]);\n          } //translate hyperties URLs into the associated dataObjects registered in some domain\n          var dataObjectsPromises = finalHyperties.map(function (hyperty) {\n            return new _promise2.default(function (resolve, reject) {\n              _this.discoverDataObjectsPerReporter(hyperty.hypertyID, dataSchemes, resources, activeDomain).then(function (dataObject) {\n                resolve(dataObject);\n              }).catch(function (err) {\n                resolve([]);\n              });\n            });\n          });\n\n          _promise2.default.all(dataObjectsPromises).then(function (dataObjectsResult) {\n\n            var dataObjects = [].concat.apply([], dataObjectsResult);\n\n            dataObjects.forEach(function (dataObject) {\n              dataObjectsArray.push(dataObject);\n            });\n\n            var finalDataObjects = [];\n            for (var key in dataObjectsArray) {\n              finalDataObjects.push(dataObjectsArray[key]);\n            }if (finalDataObjects.length === 0) {\n              return reject('No dataObjects were found');\n            }\n\n            // log.log('DataObjects Found: ', finalDataObjects);\n            resolve(finalDataObjects);\n          });\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n\n    /**\n    * function to request about hyperties registered in domain registry, and\n    * return the hyperty information, if found.\n    * @param  {String}              url  dataObject URL\n    * @param  {String}            domain (Optional)\n    * @return {Promise}          Promise\n    */\n\n  }, {\n    key: 'discoverHypertyPerURL',\n    value: function discoverHypertyPerURL(url, domain) {\n      var _this = this;\n      var activeDomain = void 0;\n\n      activeDomain = !domain ? _this.domain : domain;\n\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: url\n        }\n      };\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this.messageBus.postMessage(msg, function (reply) {\n\n          if (reply.body.code !== 200 && reply.body.code !== 500) {\n            return reject('No Hyperty was found');\n          }\n\n          var hyperty = reply.body.value;\n\n          if (hyperty) {\n            // log.log('Hyperty found: ', hyperty);\n            resolve(hyperty);\n          } else {\n            return reject('No Hyperty was found');\n          }\n        });\n      });\n    }\n\n    /**\n    * function to request about dataObject registered in domain registry, and\n    * return the dataObject information, if found.\n    * @param  {String}              url  dataObject URL\n    * @param  {String}            domain (Optional)\n    * @return {Promise}          Promise\n    */\n\n  }, {\n    key: 'discoverDataObjectPerURL',\n    value: function discoverDataObjectPerURL(url, domain) {\n      var _this = this;\n      var activeDomain = void 0;\n\n      activeDomain = !domain ? _this.domain : domain;\n\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: url\n        }\n      };\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this.messageBus.postMessage(msg, function (reply) {\n\n          var dataObject = reply.body.value;\n\n          if (dataObject) {\n            // log.log('DataObject found: ', dataObject);\n            resolve(dataObject);\n          } else {\n            return reject('DataObject not found');\n          }\n        });\n      });\n    }\n\n    /** Advanced Search for dataObjects registered in domain registry\n    * @param  {String}           name                  name of the dataObject\n    * @param  {Array<string>}    dataSchemes (Optional)     types of dataObject schemas\n    * @param  {Array<string>}    resources (Optional)  types of dataObject resources\n    * @param  {String}           domain (Optional)     domain of the registry to search\n    */\n\n  }, {\n    key: 'discoverDataObjectsPerName',\n    value: function discoverDataObjectsPerName(name, dataSchemes, resources, domain) {\n      var _this = this;\n      var activeDomain = void 0;\n\n      activeDomain = !domain ? _this.domain : domain;\n\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: name\n        }\n      };\n\n      if (dataSchemes.length > 0) {\n        if (!msg.body.criteria) {\n          msg.body.criteria = {};\n        }\n        msg.body.criteria.dataSchemes = dataSchemes;\n      }\n\n      if (resources.length > 0) {\n        if (!msg.body.criteria) {\n          msg.body.criteria = {};\n        }\n        msg.body.criteria.resources = resources;\n      }\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this.messageBus.postMessage(msg, function (reply) {\n\n          var dataObjects = reply.body.value;\n\n          var finalDataObjects = [];\n          for (var key in dataObjects) {\n            finalDataObjects.push(dataObjects[key]);\n          }if (finalDataObjects.length > 0) {\n            // log.log(\"DataObjects Found: \", finalDataObjects);\n            resolve(finalDataObjects);\n          } else {\n            return reject('No DataObject was found');\n          }\n        });\n      });\n    }\n\n    /**\n    * function to request about specific reporter dataObject registered in domain registry, and\n    * return the dataObjects from that reporter.\n    * @param  {String}           reporter                         dataObject reporter\n    * @param  {Array<string>}    scdataSchemeshema                (Optional)     types of dataObjects schemas\n    * @param  {Array<string>}    resources                        (Optional)  types of dataObjects resources\n    * @param  {String}           domain                           (Optional)\n    */\n\n  }, {\n    key: 'discoverDataObjectsPerReporter',\n    value: function discoverDataObjectsPerReporter(reporter, dataSchemes, resources, domain) {\n      var _this = this;\n      var activeDomain = void 0;\n\n      activeDomain = !domain ? _this.domain : domain;\n\n      var msg = {\n        type: 'read',\n        from: _this.discoveryURL,\n        to: 'domain://registry.' + activeDomain,\n        body: {\n          resource: '/comm',\n          criteria: {\n            reporter: reporter\n          }\n        }\n      };\n\n      if (dataSchemes.length > 0) {\n        msg.body.criteria.dataSchemes = dataSchemes;\n      }\n\n      if (resources.length > 0) {\n        msg.body.criteria.resources = resources;\n      }\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this.messageBus.postMessage(msg, function (reply) {\n\n          var dataObjects = reply.body.value;\n\n          var finalDataObjects = [];\n          for (var key in dataObjects) {\n            finalDataObjects.push(dataObjects[key]);\n          }if (finalDataObjects.length > 0) {\n            // log.log(\"DataObjects Found: \", finalDataObjects);\n            resolve(finalDataObjects);\n          } else {\n            return reject('No DataObject was found');\n          }\n        });\n      });\n    }\n\n    /**\n    * function to request global registry about the user IDs associated with some GUID\n    * @param  {String}              guid\n    * @return {Promise}          Promise\n    */\n\n  }, {\n    key: 'discoverUserIdsPerGUID',\n    value: function discoverUserIdsPerGUID(guid) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        // log.log(\"GO graphConnector:\", guid);\n\n        _this.graphConnector.queryGlobalRegistry(guid).then(function (graphConnectorContactData) {\n\n          // log.log('Information returned from Global Registry: ', graphConnectorContactData);\n\n          if (typeof graphConnectorContactData === 'string' || !graphConnectorContactData) {\n            return reject('Unsuccessful discover userIDs by GUID');\n          } else {\n\n            var userids = graphConnectorContactData.userIDs;\n\n            if (userids.length === 0) {\n              return reject('UserIDs not available');\n            }\n\n            resolve(userids);\n          }\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    }\n\n    /**\n    * function to request discovery service about the GUID associated with some user identifier (eg email, name ...)\n    * @param  {String}            userIdentifier\n    * @return {Promise}           Promise\n    */\n\n  }, {\n    key: 'discoverGUIDPerUserIdentifier',\n    value: function discoverGUIDPerUserIdentifier(userIdentifier) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var lookupURLDiscoveryService = 'https://rethink.tlabscloud.com/discovery/rest/discover/lookup?searchquery=';\n        _this.httpRequest.get(lookupURLDiscoveryService + userIdentifier).then(function (json) {\n          // log.log('discover GUID by user identifier', json);\n\n          var response = JSON.parse(json);\n          var filteredGuid = response.results.filter(function (x) {\n            return x.rethinkID != undefined;\n          });\n\n          if (filteredGuid.length === 0) {\n            return reject('Unsuccessful discover GUID by user identifier');\n          }\n\n          var guids = filteredGuid.map(function (x) {\n            return x.rethinkID;\n          });\n\n          return resolve(guids);\n        }).catch(function (err) {\n          // log.log(\"HTTP Request error: \", err);\n          return reject(err);\n        });\n      });\n    }\n  }, {\n    key: 'messageBus',\n    get: function get() {\n      return this._messageBus;\n    }\n\n    /**\n     * Sets the MessageBus.\n     * @param {MessageBus}           messageBus    The Message Bus.\n     */\n    ,\n    set: function set(messageBus) {\n      this._messageBus = messageBus;\n    }\n  }]);\n  return CoreDiscovery;\n}();\n\nexports.default = CoreDiscovery;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9kaXNjb3ZlcnkvQ29yZURpc2NvdmVyeS5qcz8yMzdkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuLy8gTG9nIFN5c3RlbVxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJ2xvZ2xldmVsJztcbmxldCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdDb3JlRGlzY292ZXJ5Jyk7XG5cblxuaW1wb3J0IHtkaXZpZGVVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuLyoqXG4qIENvcmUgRGlzY292ZXJ5IGludGVyZmFjZVxuKiBDbGFzcyB0byBhbGxvdyBhcHBsaWNhdGlvbnMgdG8gc2VhcmNoIGZvciBoeXBlcnRpZXMgYW5kIERhdGFPYmplY3RzIHVzaW5nIHRoZSBtZXNzYWdlIGJ1c1xuKi9cbmNsYXNzIENvcmVEaXNjb3Zlcnkge1xuXG4gIC8qKlxuICAqIFRvIGluaXRpYWxpc2UgdGhlIERpc2NvdmVyeSwgd2hpY2ggd2lsbCBwcm92aWRlIHRoZSBzdXBwb3J0IGZvciBoeXBlcnRpZXMgdG9cbiAgKiBxdWVyeSB1c2VycyByZWdpc3RlcmVkIGluIG91dHNpZGUgdGhlIGludGVybmFsIGNvcmUuXG4gICogQHBhcmFtICB7TWVzc2FnZUJ1c30gICAgICAgICAgbXNnYnVzICAgICAgICAgICAgICAgIG1zZ2J1c1xuICAqIEBwYXJhbSAge1J1bnRpbWVVUkx9ICAgICAgICAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMXG4gICogQHBhcmFtICB7Z3JhcGhDb25uZWN0b3J9ICAgIGdyYXBoQ29ubmVjdG9yXG4gICovXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIG1zZ0J1cywgZ3JhcGhDb25uZWN0b3IsIHJ1bnRpbWVGYWN0b3J5LCByZWdpc3RyeSkge1xuICAgIGlmICghcnVudGltZUZhY3RvcnkpIHRocm93IEVycm9yKCdUaGUgY2F0YWxvZ3VlIG5lZWRzIHRoZSBydW50aW1lRmFjdG9yeScpO1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICB0aGlzLl9tZXNzYWdlQnVzID0gbXNnQnVzO1xuICAgIF90aGlzLmdyYXBoQ29ubmVjdG9yID0gZ3JhcGhDb25uZWN0b3I7XG4gICAgX3RoaXMuaHR0cFJlcXVlc3QgPSBydW50aW1lRmFjdG9yeS5jcmVhdGVIdHRwUmVxdWVzdCgpO1xuICAgIF90aGlzLmRvbWFpbiA9IGRpdmlkZVVSTChydW50aW1lVVJMKS5kb21haW47XG4gICAgX3RoaXMuZGlzY292ZXJ5VVJMID0gcnVudGltZVVSTCArICcvZGlzY292ZXJ5Lyc7XG4gICAgX3RoaXMucmVnaXN0cnkgPSByZWdpc3RyeTtcblxuICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3RoaXMuZGlzY292ZXJ5VVJMLCAobXNnKSA9PiB7XG5cbiAgICAgIF90aGlzLmRpc2NvdmVyeU1hbmFnZXIobXNnKS50aGVuKHJlc3VsdCA9PntcblxuICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHJlc3BvbnNlXG4gICAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGlkOiBtc2cuaWQsXG4gICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlJyxcbiAgICAgICAgICBmcm9tOiBtc2cudG8sXG4gICAgICAgICAgdG86IG1zZy5mcm9tLFxuICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIGNvZGU6IDIwMCxcbiAgICAgICAgICAgIHZhbHVlOiByZXN1bHRcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGxldCBkZXNjcmlwdGlvbjtcbiAgICAgICAgICBsZXQgY29kZTtcblxuICAgICAgICAgIGlmIChlcnIgPT09ICdHcmFwaENvbm5lY3RvcicpIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gJ1RoaXMgc2VhcmNoIGlzIG5vdCBhdmFpbGFibGUgYXQgdGhlIG1vbWVudC4gVHJ5IGxhdGVyLic7XG4gICAgICAgICAgICBjb2RlID0gNTAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA9ICdOb3QgRm91bmQnO1xuICAgICAgICAgICAgY29kZSA9IDQwNDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvL0ZMT1ctT1VUOiBlcnJvciBtZXNzYWdlIHJlc3BvbnNlXG4gICAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBpZDogbXNnLmlkLFxuICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlJyxcbiAgICAgICAgICAgIGZyb206IG1zZy50byxcbiAgICAgICAgICAgIHRvOiBtc2cuZnJvbSxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgY29kZTogY29kZSxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIE1lc3NhZ2VCdXMuXG4gICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZUJ1cztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBNZXNzYWdlQnVzLlxuICAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzICAgIFRoZSBNZXNzYWdlIEJ1cy5cbiAgICovXG4gIHNldCBtZXNzYWdlQnVzKG1lc3NhZ2VCdXMpIHtcbiAgICB0aGlzLl9tZXNzYWdlQnVzID0gbWVzc2FnZUJ1cztcbiAgfVxuXG4gIC8qIGZ1bmN0aW9uIHRvIGRlY2lkZSB3aGF0IGRpc2NvdmVyeSBtZXRob2QgdG8gY2FsbCBhbmQgbGF0ZXIgcmV0dXJuIHRoZSByZXNwb25zZSBtc2cgICovXG4gIGRpc2NvdmVyeU1hbmFnZXIobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKG1zZy5mcm9tKS5kb21haW47XG4gICAgbGV0IGF0cmlidXRlcyA9IG1zZy5ib2R5LnJlc291cmNlLnNwbGl0KCcvJykuZmlsdGVyKEJvb2xlYW4pO1xuICAgIGxldCByZXNvdXJjZXMgPSBbXTtcbiAgICBsZXQgZGF0YVNjaGVtZXMgPSBbXTtcblxuICAgIGxvZy5sb2coJ1tDb3JlRGlzY292ZXJ5LmRpc2NvdmVyeU1hbmFnZXJdIHJlY2VpdmVkOiAnLCBtc2cpO1xuXG4gICAgaWYgKG1zZy5ib2R5LmNyaXRlcmlhKSB7XG4gICAgICBpZiAobXNnLmJvZHkuY3JpdGVyaWEucmVzb3VyY2VzKSB7IHJlc291cmNlcyA9IG1zZy5ib2R5LmNyaXRlcmlhLnJlc291cmNlczsgfVxuICAgICAgaWYgKG1zZy5ib2R5LmNyaXRlcmlhLmRhdGFTY2hlbWVzKSB7IGRhdGFTY2hlbWVzID0gbXNnLmJvZHkuY3JpdGVyaWEuZGF0YVNjaGVtZXM7IH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGF0cmlidXRlc1sxXSkge1xuICAgICAgY2FzZSAndXNlcic6XG4gICAgICAgIGlmIChhdHJpYnV0ZXNbMF0gPT0gJ2h5cGVydHknKSB7IHJldHVybiBfdGhpcy5kaXNjb3Zlckh5cGVydGllcyhtc2cuYm9keS5yZXNvdXJjZS5zcGxpdCgndXNlci8nKVsxXSwgZGF0YVNjaGVtZXMsIHJlc291cmNlcywgbXNnLmJvZHkuY3JpdGVyaWEuZG9tYWluKTsgfSBlbHNlIHsgcmV0dXJuIF90aGlzLmRpc2NvdmVyRGF0YU9iamVjdHMobXNnLmJvZHkucmVzb3VyY2Uuc3BsaXQoJ3VzZXIvJylbMV0sIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMsIG1zZy5ib2R5LmNyaXRlcmlhLmRvbWFpbik7IH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3VybCc6XG4gICAgICAgIGlmIChhdHJpYnV0ZXNbMF0gPT0gJ2h5cGVydHknKSB7IHJldHVybiBfdGhpcy5kaXNjb3Zlckh5cGVydHlQZXJVUkwobXNnLmJvZHkucmVzb3VyY2Uuc3BsaXQoJ3VybC8nKVsxXSwgbXNnLmJvZHkuY3JpdGVyaWEuZG9tYWluKTsgfSBlbHNlIHsgcmV0dXJuIF90aGlzLmRpc2NvdmVyRGF0YU9iamVjdFBlclVSTChtc2cuYm9keS5yZXNvdXJjZS5zcGxpdCgndXJsLycpWzFdLCBtc2cuYm9keS5jcml0ZXJpYS5kb21haW4pOyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgIHJldHVybiBfdGhpcy5kaXNjb3ZlckRhdGFPYmplY3RzUGVyTmFtZShtc2cuYm9keS5yZXNvdXJjZS5zcGxpdCgnbmFtZS8nKVsxXSwgZGF0YVNjaGVtZXMsIHJlc291cmNlcywgbXNnLmJvZHkuY3JpdGVyaWEuZG9tYWluKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZXBvcnRlcic6XG4gICAgICAgIHJldHVybiBfdGhpcy5kaXNjb3ZlckRhdGFPYmplY3RzUGVyUmVwb3J0ZXIobXNnLmJvZHkucmVzb3VyY2Uuc3BsaXQoJ3JlcG9ydGVyLycpWzFdLCBkYXRhU2NoZW1lcywgcmVzb3VyY2VzLCBtc2cuYm9keS5jcml0ZXJpYS5kb21haW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2d1aWQnOlxuICAgICAgICBpZiAodHlwZW9mIF90aGlzLmdyYXBoQ29ubmVjdG9yICE9PSAndW5kZWZpbmVkJyAmJiAgX3RoaXMuZ3JhcGhDb25uZWN0b3IgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoYXRyaWJ1dGVzWzBdID09ICdoeXBlcnR5JykgeyByZXR1cm4gX3RoaXMuZGlzY292ZXJIeXBlcnRpZXNQZXJHVUlEKG1zZy5ib2R5LnJlc291cmNlLnNwbGl0KCd1c2VyLWd1aWQ6Ly8nKVsxXSwgZGF0YVNjaGVtZXMsIHJlc291cmNlcyk7IH0gZWxzZSB7IHJldHVybiBfdGhpcy5kaXNjb3ZlckRhdGFPYmplY3RzUGVyR1VJRChtc2cuYm9keS5yZXNvdXJjZS5zcGxpdCgndXNlci1ndWlkOi8vJylbMV0sIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMpOyB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdHcmFwaENvbm5lY3RvcicpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlICd1c2VycHJvZmlsZSc6XG4gICAgICAgIGlmICh0eXBlb2YgX3RoaXMuZ3JhcGhDb25uZWN0b3IgIT09ICd1bmRlZmluZWQnICYmICBfdGhpcy5ncmFwaENvbm5lY3RvciAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChhdHJpYnV0ZXNbMF0gPT0gJ2h5cGVydHknKSB7IHJldHVybiBfdGhpcy5kaXNjb3Zlckh5cGVydGllc1BlclVzZXJQcm9maWxlRGF0YShtc2cuYm9keS5yZXNvdXJjZS5zcGxpdCgndXNlcnByb2ZpbGUvJylbMV0sIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMpOyB9IGVsc2UgeyByZXR1cm4gX3RoaXMuZGlzY292ZXJEYXRhT2JqZWN0c1BlclVzZXJQcm9maWxlRGF0YShtc2cuYm9keS5yZXNvdXJjZS5zcGxpdCgndXNlcnByb2ZpbGUvJylbMV0sIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMpOyB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdHcmFwaENvbm5lY3RvcicpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogQWR2YW5jZWQgU2VhcmNoIGZvciBIeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkgYXNzb2NpYXRlZCB3aXRoIHNvbWUgdXNlciBpZGVudGlmaWVyIChlZyBlbWFpbCwgbmFtZSAuLi4pXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgdXNlcklkZW50aWZpZXJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBkYXRhU2NoZW1lcyAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hc1xuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBoeXBlcnRpZXMgcmVzb3VyY2VzXG4gICovXG4gIGRpc2NvdmVySHlwZXJ0aWVzUGVyVXNlclByb2ZpbGVEYXRhKHVzZXJJZGVudGlmaWVyLCBkYXRhU2NoZW1lcywgcmVzb3VyY2VzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgLy90cmFuc2xhdGUgdXNlciBpZGVudGlmaWVyIChlLmcuIGVtYWlsLCBuYW1lLi4uKSBpbnRvIHRoZSBhc3NvY2lhdGVkIEdVSURzXG4gICAgICBfdGhpcy5kaXNjb3ZlckdVSURQZXJVc2VySWRlbnRpZmllcih1c2VySWRlbnRpZmllcilcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZ3VpZHMpIHtcblxuICAgICAgICAgIGxldCBoeXBlcnRpZXNQcm9taXNlcyA9IGd1aWRzLm1hcChmdW5jdGlvbihndWlkKSB7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgX3RoaXMuZGlzY292ZXJIeXBlcnRpZXNQZXJHVUlEKGd1aWQsIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oaHlwZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKGh5cGVydGllcyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgUHJvbWlzZS5hbGwoaHlwZXJ0aWVzUHJvbWlzZXMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihoeXBlcnRpZXNSZXN1bHQpIHtcblxuICAgICAgICAgICAgICBsZXQgaHlwZXJ0aWVzID0gW10uY29uY2F0LmFwcGx5KFtdLCBoeXBlcnRpZXNSZXN1bHQpO1xuXG4gICAgICAgICAgICAgIGlmIChoeXBlcnRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnTm8gaHlwZXJ0aWVzIHdlcmUgZm91bmQnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJlc29sdmUoaHlwZXJ0aWVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEFkdmFuY2VkIFNlYXJjaCBmb3IgRGF0YU9iamVjdHMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkgYXNzb2NpYXRlZCB3aXRoIHNvbWUgdXNlciBpZGVudGlmaWVyIChlZyBlbWFpbCwgbmFtZSAuLi4pXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgdXNlcklkZW50aWZpZXJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBkYXRhU2NoZW1lcyAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hc1xuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBoeXBlcnRpZXMgcmVzb3VyY2VzXG4gICovXG4gIGRpc2NvdmVyRGF0YU9iamVjdHNQZXJVc2VyUHJvZmlsZURhdGEodXNlcklkZW50aWZpZXIsIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAvL3RyYW5zbGF0ZSB1c2VyIGlkZW50aWZpZXIgKGUuZy4gZW1haWwsIG5hbWUuLi4pIGludG8gdGhlIGFzc29jaWF0ZWQgR1VJRHNcbiAgICAgIF90aGlzLmRpc2NvdmVyR1VJRFBlclVzZXJJZGVudGlmaWVyKHVzZXJJZGVudGlmaWVyKVxuICAgICAgICAudGhlbihmdW5jdGlvbihndWlkcykge1xuXG4gICAgICAgICAgbGV0IGRhdGFPYmplY3RzUHJvbWlzZXMgPSBndWlkcy5tYXAoZnVuY3Rpb24oZ3VpZCkge1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgIF90aGlzLmRpc2NvdmVyRGF0YU9iamVjdHNQZXJHVUlEKGd1aWQsIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YU9iamVjdHMpIHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdHMpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShbXSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIFByb21pc2UuYWxsKGRhdGFPYmplY3RzUHJvbWlzZXMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhT2JqZWN0c1Jlc3VsdCkge1xuXG4gICAgICAgICAgICAgIGxldCBkYXRhT2JqZWN0cyA9IFtdLmNvbmNhdC5hcHBseShbXSwgZGF0YU9iamVjdHNSZXN1bHQpO1xuXG4gICAgICAgICAgICAgIGlmIChkYXRhT2JqZWN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdObyBkYXRhT2JqZWN0cyB3ZXJlIGZvdW5kJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3RzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEFkdmFuY2VkIFNlYXJjaCBmb3IgSHlwZXJ0aWVzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5IGFzc29jaWF0ZWQgd2l0aCBzb21lIEdVSURcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgIGd1aWRcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBkYXRhU2NoZW1lcyAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hc1xuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBoeXBlcnRpZXMgcmVzb3VyY2VzXG4gICovXG4gIGRpc2NvdmVySHlwZXJ0aWVzUGVyR1VJRChndWlkLCBkYXRhU2NoZW1lcywgcmVzb3VyY2VzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgLy90cmFuc2xhdGUgR1VJRCBpbnRvIHRoZSB1c2VyIElEcyB0byBxdWVyeSB0aGUgZG9tYWluIHJlZ2lzdHJ5XG4gICAgICBfdGhpcy5kaXNjb3ZlclVzZXJJZHNQZXJHVUlEKGd1aWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHVpZHMpIHtcblxuICAgICAgICAvL3RyYW5zbGF0ZSB1c2VyIElEcyBpbnRvIHRoZSBhc3NvY2lhdGVkIGh5cGVydGllcyByZWdpc3RlcmVkIGluIHNvbWUgZG9tYWluXG4gICAgICAgICAgbGV0IGh5cGVydGllc1Byb21pc2VzID0gdWlkcy5tYXAoZnVuY3Rpb24odWlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgIF90aGlzLmRpc2NvdmVySHlwZXJ0aWVzKHVpZC51SUQsIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMsIHVpZC5kb21haW4pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oaHlwZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKGh5cGVydGllcyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgUHJvbWlzZS5hbGwoaHlwZXJ0aWVzUHJvbWlzZXMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihoeXBlcnRpZXNSZXN1bHQpIHtcblxuICAgICAgICAgICAgICBsZXQgaHlwZXJ0aWVzID0gW10uY29uY2F0LmFwcGx5KFtdLCBoeXBlcnRpZXNSZXN1bHQpO1xuXG4gICAgICAgICAgICAgIGlmIChoeXBlcnRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnTm8gaHlwZXJ0aWVzIHdlcmUgZm91bmQnKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIGxvZy5sb2coJ0h5cGVydGllcyA6ICcsIGh5cGVydGllcyk7XG4gICAgICAgICAgICAgIHJlc29sdmUoaHlwZXJ0aWVzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogQWR2YW5jZWQgU2VhcmNoIGZvciBEYXRhT2JqZWN0cyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSBhc3NvY2lhdGVkIHdpdGggc29tZSBHVUlEXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgICBndWlkXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgZGF0YVNjaGVtZXMgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgaHlwZXJ0aWVzIHNjaGVtYXNcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgaHlwZXJ0aWVzIHJlc291cmNlc1xuICAqL1xuICBkaXNjb3ZlckRhdGFPYmplY3RzUGVyR1VJRChndWlkLCBkYXRhU2NoZW1lcywgcmVzb3VyY2VzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgLy90cmFuc2xhdGUgR1VJRCBpbnRvIHRoZSB1c2VyIElEcyB0byBxdWVyeSB0aGUgZG9tYWluIHJlZ2lzdHJ5XG4gICAgICBfdGhpcy5kaXNjb3ZlclVzZXJJZHNQZXJHVUlEKGd1aWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHVpZHMpIHtcblxuICAgICAgICAvL3RyYW5zbGF0ZSB1c2VyIElEcyBpbnRvIHRoZSBhc3NvY2lhdGVkIGRhdGFPYmplY3RzIHJlZ2lzdGVyZWQgaW4gc29tZSBkb21haW5cbiAgICAgICAgICBsZXQgZGF0YU9iamVjdFByb21pc2VzID0gdWlkcy5tYXAoZnVuY3Rpb24odWlkKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgIF90aGlzLmRpc2NvdmVyRGF0YU9iamVjdHModWlkLnVJRCwgZGF0YVNjaGVtZXMsIHJlc291cmNlcywgdWlkLmRvbWFpbilcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhT2JqZWN0cykge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0cyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgUHJvbWlzZS5hbGwoZGF0YU9iamVjdFByb21pc2VzKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YU9iamVjdHNSZXN1bHQpIHtcblxuICAgICAgICAgICAgICBsZXQgZGF0YU9iamVjdHMgPSBbXS5jb25jYXQuYXBwbHkoW10sIGRhdGFPYmplY3RzUmVzdWx0KTtcblxuICAgICAgICAgICAgICBpZiAoZGF0YU9iamVjdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnTm8gZGF0YU9iamVjdHMgd2VyZSBmb3VuZCcpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gbG9nLmxvZygnRGF0YU9iamVjdHMgOiAnLCBkYXRhT2JqZWN0cyk7XG4gICAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdHMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKiogQWR2YW5jZWQgU2VhcmNoIGZvciBIeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkgYW5kIGFzc29jaWF0ZWQgd2l0aCBzb21lIHVzZXIgSURcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICB1c2VyICAgICAgICAgICAgICAgICAgdXNlciBpZGVudGlmaWVyLCBlaXRoZXIgaW4gdXJsIG9yIGVtYWlsIGZvcm1hdFxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIGRhdGFTY2hlbWVzIChPcHRpb25hbCkgICAgIHR5cGVzIG9mIGh5cGVydGllcyBzY2hlbWFzXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGh5cGVydGllcyByZXNvdXJjZXNcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKSAgICAgZG9tYWluIG9mIHRoZSByZWdpc3RyeSB0byBzZWFyY2hcbiAgKi9cbiAgZGlzY292ZXJIeXBlcnRpZXModXNlciwgZGF0YVNjaGVtZXMsIHJlc291cmNlcywgZG9tYWluKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xuXG4gICAgYWN0aXZlRG9tYWluID0gKCFkb21haW4pID8gX3RoaXMuZG9tYWluIDogZG9tYWluO1xuXG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHR5cGU6ICdyZWFkJyxcbiAgICAgIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCxcbiAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbixcbiAgICAgIGJvZHk6IHtcblxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodXNlci5pbmRleE9mKCd1c2VyOi8vJykgPiAtMSkgeyBtc2cuYm9keS5yZXNvdXJjZSA9IHVzZXI7IH0gZWxzZSB7IG1zZy5ib2R5LnJlc291cmNlID0gJy9oeXBlcnR5L2lkcC1pZGVudGlmaWVyLycgKyB1c2VyOyB9XG5cbiAgICBpZiAoZGF0YVNjaGVtZXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKCFtc2cuYm9keS5jcml0ZXJpYSkgeyBtc2cuYm9keS5jcml0ZXJpYSA9IHt9OyB9XG4gICAgICBtc2cuYm9keS5jcml0ZXJpYS5kYXRhU2NoZW1lcyA9IGRhdGFTY2hlbWVzO1xuICAgIH1cblxuICAgIGlmIChyZXNvdXJjZXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKCFtc2cuYm9keS5jcml0ZXJpYSkgeyBtc2cuYm9keS5jcml0ZXJpYSA9IHt9OyB9XG4gICAgICBtc2cuYm9keS5jcml0ZXJpYS5yZXNvdXJjZXMgPSByZXNvdXJjZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgLy8gbG9nLmxvZyhcIltDb3JlRGlzY292ZXJ5LmRpc2NvdmVySHlwZXJ0aWVzXSBzZW5kaW5nIG1zZyBcIiwgbXNnKTtcblxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xuXG4gICAgICAgIC8vIGxvZy5sb2coXCJbQ29yZURpc2NvdmVyeS5kaXNjb3Zlckh5cGVydGllc10gcmN2ZWQgcmVwbHkgXCIsIHJlcGx5KTtcblxuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDAgfHwgcmVwbHkuYm9keS5jb2RlID09PSA1MDApIHtcbiAgICAgICAgICBsZXQgaHlwZXJ0aWVzID0gcmVwbHkuYm9keS52YWx1ZTtcblxuICAgICAgICAgIGxldCBmaW5hbEh5cGVydGllcyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBoeXBlcnRpZXMpIGZpbmFsSHlwZXJ0aWVzLnB1c2goaHlwZXJ0aWVzW2tleV0pO1xuXG4gICAgICAgICAgaWYgKGZpbmFsSHlwZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIGxvZy5sb2coXCJbQ29yZURpc2NvdmVyeS5kaXNjb3Zlckh5cGVydGllc10gSHlwZXJ0aWVzIEZvdW5kOiBcIiwgZmluYWxIeXBlcnRpZXMpO1xuICAgICAgICAgICAgcmVzb2x2ZShmaW5hbEh5cGVydGllcyk7XG4gICAgICAgICAgfSBlbHNlIHsgcmV0dXJuIHJlamVjdCgnTm8gSHlwZXJ0eSB3YXMgZm91bmQnKTsgfVxuICAgICAgICB9IGVsc2UgeyByZXR1cm4gcmVqZWN0KCdObyBIeXBlcnR5IHdhcyBmb3VuZCcpOyB9XG5cbiAgICAgICAgLypfdGhpcy5yZWdpc3RyeS5pc0xlZ2FjeSh1c2VyKS50aGVuKChsZWdhY3kpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGxlZ2FjeSkgcmVzb2x2ZShbe2h5cGVydHlJRDogdXNlciB9XSlcbiAgICAgICAgICAgICAgZWxzZSByZXR1cm4gcmVqZWN0KCdObyBIeXBlcnR5IHdhcyBmb3VuZCcpO1xuICAgICAgICAgIH0pOyovXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBBZHZhbmNlZCBTZWFyY2ggZm9yIERhdGFPYmplY3RzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5IGFuZCBhc3NvY2lhdGVkIHdpdGggc29tZSB1c2VyIElEXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgdXNlciAgICAgICAgICAgICAgICAgIHVzZXIgaWRlbnRpZmllciwgZWl0aGVyIGluIHVybCBvciBlbWFpbCBmb3JtYXRcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBkYXRhU2NoZW1lcyAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBkYXRhT2JqZWN0cyBzY2hlbWFzXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGRhdGFPYmplY3RzIHJlc291cmNlc1xuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpICAgICBkb21haW4gb2YgdGhlIHJlZ2lzdHJ5IHRvIHNlYXJjaFxuICAqL1xuICBkaXNjb3ZlckRhdGFPYmplY3RzKHVzZXIsIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMsIGRvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcbiAgICBsZXQgZGF0YU9iamVjdHNBcnJheSA9IFtdO1xuXG4gICAgYWN0aXZlRG9tYWluID0gKCFkb21haW4pID8gX3RoaXMuZG9tYWluIDogZG9tYWluO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAvL3RyYW5zbGF0ZSB1c2VyIGlkZW50aWZpZXIgKGUuZy4gZW1haWwsIG5hbWUuLi4pIGludG8gdGhlIGFzc29jaWF0ZWQgaHlwZXJ0aWVzXG4gICAgICBfdGhpcy5kaXNjb3Zlckh5cGVydGllcyh1c2VyLCBbXSwgW10sIGFjdGl2ZURvbWFpbilcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oaHlwZXJ0aWVzKSB7XG5cbiAgICAgICAgICBsZXQgZmluYWxIeXBlcnRpZXMgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gaHlwZXJ0aWVzKSBmaW5hbEh5cGVydGllcy5wdXNoKGh5cGVydGllc1trZXldKTtcblxuICAgICAgICAgIC8vdHJhbnNsYXRlIGh5cGVydGllcyBVUkxzIGludG8gdGhlIGFzc29jaWF0ZWQgZGF0YU9iamVjdHMgcmVnaXN0ZXJlZCBpbiBzb21lIGRvbWFpblxuICAgICAgICAgIGxldCBkYXRhT2JqZWN0c1Byb21pc2VzID0gZmluYWxIeXBlcnRpZXMubWFwKGZ1bmN0aW9uKGh5cGVydHkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgX3RoaXMuZGlzY292ZXJEYXRhT2JqZWN0c1BlclJlcG9ydGVyKGh5cGVydHkuaHlwZXJ0eUlELCBkYXRhU2NoZW1lcywgcmVzb3VyY2VzLCBhY3RpdmVEb21haW4pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YU9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUoW10pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBQcm9taXNlLmFsbChkYXRhT2JqZWN0c1Byb21pc2VzKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YU9iamVjdHNSZXN1bHQpIHtcblxuICAgICAgICAgICAgICBsZXQgZGF0YU9iamVjdHMgPSBbXS5jb25jYXQuYXBwbHkoW10sIGRhdGFPYmplY3RzUmVzdWx0KTtcblxuICAgICAgICAgICAgICBkYXRhT2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKGRhdGFPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBkYXRhT2JqZWN0c0FycmF5LnB1c2goZGF0YU9iamVjdCk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGxldCBmaW5hbERhdGFPYmplY3RzID0gW107XG4gICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhT2JqZWN0c0FycmF5KSBmaW5hbERhdGFPYmplY3RzLnB1c2goZGF0YU9iamVjdHNBcnJheVtrZXldKTtcblxuICAgICAgICAgICAgICBpZiAoZmluYWxEYXRhT2JqZWN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdObyBkYXRhT2JqZWN0cyB3ZXJlIGZvdW5kJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBsb2cubG9nKCdEYXRhT2JqZWN0cyBGb3VuZDogJywgZmluYWxEYXRhT2JqZWN0cyk7XG4gICAgICAgICAgICAgIHJlc29sdmUoZmluYWxEYXRhT2JqZWN0cyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgaHlwZXJ0aWVzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcbiAgKiByZXR1cm4gdGhlIGh5cGVydHkgaW5mb3JtYXRpb24sIGlmIGZvdW5kLlxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIHVybCAgZGF0YU9iamVjdCBVUkxcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXG4gICovXG4gIGRpc2NvdmVySHlwZXJ0eVBlclVSTCh1cmwsIGRvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcblxuICAgIGFjdGl2ZURvbWFpbiA9ICghZG9tYWluKSA/IF90aGlzLmRvbWFpbiA6IGRvbWFpbjtcblxuICAgIGxldCBtc2cgPSB7XG4gICAgICB0eXBlOiAncmVhZCcsXG4gICAgICBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsXG4gICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHJlc291cmNlOiB1cmxcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XG5cbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSAhPT0gMjAwICYmIHJlcGx5LmJvZHkuY29kZSAhPT0gNTAwKSB7IHJldHVybiByZWplY3QoJ05vIEh5cGVydHkgd2FzIGZvdW5kJyk7IH1cblxuICAgICAgICBsZXQgaHlwZXJ0eSA9IHJlcGx5LmJvZHkudmFsdWU7XG5cbiAgICAgICAgaWYgKGh5cGVydHkpIHtcbiAgICAgICAgICAvLyBsb2cubG9nKCdIeXBlcnR5IGZvdW5kOiAnLCBoeXBlcnR5KTtcbiAgICAgICAgICByZXNvbHZlKGh5cGVydHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZWplY3QoJ05vIEh5cGVydHkgd2FzIGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcbiAgKiByZXR1cm4gdGhlIGRhdGFPYmplY3QgaW5mb3JtYXRpb24sIGlmIGZvdW5kLlxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIHVybCAgZGF0YU9iamVjdCBVUkxcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXG4gICovXG4gIGRpc2NvdmVyRGF0YU9iamVjdFBlclVSTCh1cmwsIGRvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcblxuICAgIGFjdGl2ZURvbWFpbiA9ICghZG9tYWluKSA/IF90aGlzLmRvbWFpbiA6IGRvbWFpbjtcblxuICAgIGxldCBtc2cgPSB7XG4gICAgICB0eXBlOiAncmVhZCcsXG4gICAgICBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsXG4gICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHJlc291cmNlOiB1cmxcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XG5cbiAgICAgICAgbGV0IGRhdGFPYmplY3QgPSByZXBseS5ib2R5LnZhbHVlO1xuXG4gICAgICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICAgICAgLy8gbG9nLmxvZygnRGF0YU9iamVjdCBmb3VuZDogJywgZGF0YU9iamVjdCk7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdEYXRhT2JqZWN0IG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBBZHZhbmNlZCBTZWFyY2ggZm9yIGRhdGFPYmplY3RzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5XG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgbmFtZSAgICAgICAgICAgICAgICAgIG5hbWUgb2YgdGhlIGRhdGFPYmplY3RcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBkYXRhU2NoZW1lcyAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBkYXRhT2JqZWN0IHNjaGVtYXNcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgZGF0YU9iamVjdCByZXNvdXJjZXNcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKSAgICAgZG9tYWluIG9mIHRoZSByZWdpc3RyeSB0byBzZWFyY2hcbiAgKi9cbiAgZGlzY292ZXJEYXRhT2JqZWN0c1Blck5hbWUobmFtZSwgZGF0YVNjaGVtZXMsIHJlc291cmNlcywgZG9tYWluKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xuXG4gICAgYWN0aXZlRG9tYWluID0gKCFkb21haW4pID8gX3RoaXMuZG9tYWluIDogZG9tYWluO1xuXG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHR5cGU6ICdyZWFkJyxcbiAgICAgIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCxcbiAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbixcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgcmVzb3VyY2U6IG5hbWVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKGRhdGFTY2hlbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICghbXNnLmJvZHkuY3JpdGVyaWEpIHsgbXNnLmJvZHkuY3JpdGVyaWEgPSB7fTsgfVxuICAgICAgbXNnLmJvZHkuY3JpdGVyaWEuZGF0YVNjaGVtZXMgPSBkYXRhU2NoZW1lcztcbiAgICB9XG5cbiAgICBpZiAocmVzb3VyY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICghbXNnLmJvZHkuY3JpdGVyaWEpIHsgbXNnLmJvZHkuY3JpdGVyaWEgPSB7fTsgfVxuICAgICAgbXNnLmJvZHkuY3JpdGVyaWEucmVzb3VyY2VzID0gcmVzb3VyY2VzO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xuXG4gICAgICAgIGxldCBkYXRhT2JqZWN0cyA9IHJlcGx5LmJvZHkudmFsdWU7XG5cbiAgICAgICAgbGV0IGZpbmFsRGF0YU9iamVjdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGFPYmplY3RzKSBmaW5hbERhdGFPYmplY3RzLnB1c2goZGF0YU9iamVjdHNba2V5XSk7XG5cbiAgICAgICAgaWYgKGZpbmFsRGF0YU9iamVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIGxvZy5sb2coXCJEYXRhT2JqZWN0cyBGb3VuZDogXCIsIGZpbmFsRGF0YU9iamVjdHMpO1xuICAgICAgICAgIHJlc29sdmUoZmluYWxEYXRhT2JqZWN0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnTm8gRGF0YU9iamVjdCB3YXMgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHNwZWNpZmljIHJlcG9ydGVyIGRhdGFPYmplY3QgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZFxuICAqIHJldHVybiB0aGUgZGF0YU9iamVjdHMgZnJvbSB0aGF0IHJlcG9ydGVyLlxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHJlcG9ydGVyICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFPYmplY3QgcmVwb3J0ZXJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2RhdGFTY2hlbWVzaGVtYSAgICAgICAgICAgICAgICAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBkYXRhT2JqZWN0cyBzY2hlbWFzXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzICAgICAgICAgICAgICAgICAgICAgICAgKE9wdGlvbmFsKSAgdHlwZXMgb2YgZGF0YU9iamVjdHMgcmVzb3VyY2VzXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZG9tYWluICAgICAgICAgICAgICAgICAgICAgICAgICAgKE9wdGlvbmFsKVxuICAqL1xuICBkaXNjb3ZlckRhdGFPYmplY3RzUGVyUmVwb3J0ZXIocmVwb3J0ZXIsIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMsIGRvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcblxuICAgIGFjdGl2ZURvbWFpbiA9ICghZG9tYWluKSA/IF90aGlzLmRvbWFpbiA6IGRvbWFpbjtcblxuICAgIGxldCBtc2cgPSB7XG4gICAgICB0eXBlOiAncmVhZCcsXG4gICAgICBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsXG4gICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4sXG4gICAgICBib2R5OiB7XG4gICAgICAgIHJlc291cmNlOiAnL2NvbW0nLFxuICAgICAgICBjcml0ZXJpYToge1xuICAgICAgICAgIHJlcG9ydGVyOiByZXBvcnRlclxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChkYXRhU2NoZW1lcy5sZW5ndGggPiAwKSB7IG1zZy5ib2R5LmNyaXRlcmlhLmRhdGFTY2hlbWVzID0gZGF0YVNjaGVtZXM7IH1cblxuICAgIGlmIChyZXNvdXJjZXMubGVuZ3RoID4gMCkgeyBtc2cuYm9keS5jcml0ZXJpYS5yZXNvdXJjZXMgPSByZXNvdXJjZXM7IH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xuXG4gICAgICAgIGxldCBkYXRhT2JqZWN0cyA9IHJlcGx5LmJvZHkudmFsdWU7XG5cbiAgICAgICAgbGV0IGZpbmFsRGF0YU9iamVjdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGFPYmplY3RzKSBmaW5hbERhdGFPYmplY3RzLnB1c2goZGF0YU9iamVjdHNba2V5XSk7XG5cbiAgICAgICAgaWYgKGZpbmFsRGF0YU9iamVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIGxvZy5sb2coXCJEYXRhT2JqZWN0cyBGb3VuZDogXCIsIGZpbmFsRGF0YU9iamVjdHMpO1xuICAgICAgICAgIHJlc29sdmUoZmluYWxEYXRhT2JqZWN0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnTm8gRGF0YU9iamVjdCB3YXMgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGdsb2JhbCByZWdpc3RyeSBhYm91dCB0aGUgdXNlciBJRHMgYXNzb2NpYXRlZCB3aXRoIHNvbWUgR1VJRFxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIGd1aWRcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXG4gICovXG4gIGRpc2NvdmVyVXNlcklkc1BlckdVSUQoZ3VpZCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIC8vIGxvZy5sb2coXCJHTyBncmFwaENvbm5lY3RvcjpcIiwgZ3VpZCk7XG5cbiAgICAgIF90aGlzLmdyYXBoQ29ubmVjdG9yLnF1ZXJ5R2xvYmFsUmVnaXN0cnkoZ3VpZClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZ3JhcGhDb25uZWN0b3JDb250YWN0RGF0YSkge1xuXG4gICAgICAgIC8vIGxvZy5sb2coJ0luZm9ybWF0aW9uIHJldHVybmVkIGZyb20gR2xvYmFsIFJlZ2lzdHJ5OiAnLCBncmFwaENvbm5lY3RvckNvbnRhY3REYXRhKTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZ3JhcGhDb25uZWN0b3JDb250YWN0RGF0YSA9PT0gJ3N0cmluZycgfHwgIWdyYXBoQ29ubmVjdG9yQ29udGFjdERhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoJ1Vuc3VjY2Vzc2Z1bCBkaXNjb3ZlciB1c2VySURzIGJ5IEdVSUQnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBsZXQgdXNlcmlkcyA9IGdyYXBoQ29ubmVjdG9yQ29udGFjdERhdGEudXNlcklEcztcblxuICAgICAgICAgICAgaWYgKHVzZXJpZHMubGVuZ3RoID09PSAwKSB7IHJldHVybiByZWplY3QoJ1VzZXJJRHMgbm90IGF2YWlsYWJsZScpOyB9XG5cbiAgICAgICAgICAgIHJlc29sdmUodXNlcmlkcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGRpc2NvdmVyeSBzZXJ2aWNlIGFib3V0IHRoZSBHVUlEIGFzc29jaWF0ZWQgd2l0aCBzb21lIHVzZXIgaWRlbnRpZmllciAoZWcgZW1haWwsIG5hbWUgLi4uKVxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICB1c2VySWRlbnRpZmllclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgICBQcm9taXNlXG4gICovXG4gIGRpc2NvdmVyR1VJRFBlclVzZXJJZGVudGlmaWVyKHVzZXJJZGVudGlmaWVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgbGV0IGxvb2t1cFVSTERpc2NvdmVyeVNlcnZpY2UgPSAnaHR0cHM6Ly9yZXRoaW5rLnRsYWJzY2xvdWQuY29tL2Rpc2NvdmVyeS9yZXN0L2Rpc2NvdmVyL2xvb2t1cD9zZWFyY2hxdWVyeT0nO1xuICAgICAgX3RoaXMuaHR0cFJlcXVlc3QuZ2V0KGxvb2t1cFVSTERpc2NvdmVyeVNlcnZpY2UgKyB1c2VySWRlbnRpZmllcilcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xuICAgICAgICAvLyBsb2cubG9nKCdkaXNjb3ZlciBHVUlEIGJ5IHVzZXIgaWRlbnRpZmllcicsIGpzb24pO1xuXG4gICAgICAgICAgbGV0IHJlc3BvbnNlID0gSlNPTi5wYXJzZShqc29uKTtcbiAgICAgICAgICBsZXQgZmlsdGVyZWRHdWlkID0gcmVzcG9uc2UucmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgICAgICAgICAgcmV0dXJuIHgucmV0aGlua0lEICE9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChmaWx0ZXJlZEd1aWQubGVuZ3RoID09PSAwKSB7IHJldHVybiByZWplY3QoJ1Vuc3VjY2Vzc2Z1bCBkaXNjb3ZlciBHVUlEIGJ5IHVzZXIgaWRlbnRpZmllcicpOyB9XG5cbiAgICAgICAgICBsZXQgZ3VpZHMgPSBmaWx0ZXJlZEd1aWQubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHgucmV0aGlua0lEOyB9KTtcblxuICAgICAgICAgIHJldHVybiByZXNvbHZlKGd1aWRzKTtcblxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIC8vIGxvZy5sb2coXCJIVFRQIFJlcXVlc3QgZXJyb3I6IFwiLCBlcnIpO1xuICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29yZURpc2NvdmVyeTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvZGlzY292ZXJ5L0NvcmVEaXNjb3ZlcnkuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7Ozs7O0FBSkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRkE7QUFDQTtBQU1BOzs7O0FBSUE7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBTEE7QUFVQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUxBO0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBZUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTdCQTtBQStCQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQUNBO0FBUUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBSkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBSkE7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQURBO0FBSkE7QUFDQTtBQVFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUZBO0FBSkE7QUFDQTtBQVdBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUF2bUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBSUE7QUFDQTtBQUNBOzs7OztBQWdtQkE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///488\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _from = __webpack_require__(490);\n\nvar _from2 = _interopRequireDefault(_from);\n\nvar _keys = __webpack_require__(46);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _typeof2 = __webpack_require__(98);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _assign = __webpack_require__(96);\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('DataObjectsStorage'); // Log System\n\nvar DataObjectsStorage = function () {\n  function DataObjectsStorage(storageManager, storedDataObjects) {\n    (0, _classCallCheck3.default)(this, DataObjectsStorage);\n\n    if (!storageManager) throw new Error('[Store Data Objects] - Needs the storageManager component');\n\n    this._storageManager = storageManager;\n    this._storeDataObject = storedDataObjects;\n\n    this._cache = {};\n  }\n\n  /**\n   * @description should set the initial state of the dataObjectURL to be resumed if necessary;\n   *\n   * @param {DataObjectURL} url - dataObjectURL to be saved;\n   * @param {Boolean} isReporter - the object to be saved is a reporter\n   * @param {SchemaURL} schema - the schema url\n   * @param {String} status - the status of current dataObject\n   * @param {HypertyURL} reporter - the Reporter hypertyURL\n   * @param {Array<HypertyURL>} subscription - list of subscriptions\n   * @param {Array<DataObjectChild>} children - list of childs of dataObjectURL\n   * @param {Array<String>} childrens - list of childrens, like, 'chatmessage';\n   * @param {Array<UserURL} subscriberUser - list of subscribed users;\n   */\n\n  (0, _createClass3.default)(DataObjectsStorage, [{\n    key: 'set',\n    value: function set(metadata) {\n\n      var storeDataObject = this._storeDataObject;\n      var type = this._getTypeOfObject(metadata.isReporter);\n      if (!storeDataObject.hasOwnProperty(type)) storeDataObject[type] = {};\n\n      if (!storeDataObject[type].hasOwnProperty(metadata.url)) {\n        storeDataObject[type][metadata.url] = {};\n        storeDataObject[type][metadata.url].subscriptions = []; // TODO:do we need this?\n        storeDataObject[type][metadata.url].subscriberUsers = []; // TODO:do we need this?\n        storeDataObject[type][metadata.url].childrenObjects = {};\n        storeDataObject[type][metadata.url].data = {};\n      }\n\n      (0, _assign2.default)(storeDataObject[type][metadata.url], metadata);\n      delete storeDataObject[type][metadata.url].subscriberUser;\n      delete storeDataObject[type][metadata.url].subscriberHyperty;\n\n      /*if (schema) storeDataObject[type][metadata.url].schema = schema;\n      if (status) storeDataObject[type][metadata.url].status = status;\n      if (childrenResources) storeDataObject[type][metadata.url].childrenResources = childrenResources;*/\n\n      if (metadata.subscriberHyperty && !metadata.isReporter) {\n        // TODO: do we need this?\n        this._updateToArray(storeDataObject[type], metadata.url, 'subscriptions', metadata.subscriberHyperty);\n      }\n\n      //storeDataObject[type][metadata.url].owner = owner;\n\n      if (metadata.subscriberUser) {\n        // TODO: do we need this?\n        if (storeDataObject[type][metadata.url].subscriberUsers.indexOf(metadata.subscriberUser)) {\n          this._updateToArray(storeDataObject[type], metadata.url, 'subscriberUsers', metadata.subscriberUser);\n        }\n      }\n\n      this._storeDataObject = storeDataObject;\n      this._storageManager.set('syncherManager:ObjectURLs', 1, storeDataObject);\n      return storeDataObject[type][metadata.url];\n    }\n\n    /**\n     * @description should save and update the current dataObject data information\n     *\n     * @param {Boolean} isReporter - the object to be saved is a reporter\n     * @param {DataObjectURL} resource - dataObjectURL to be saved or updated;\n     * @param {String} attribute - attribute inside the data which will be saved\n     * @param {any} data - value will be saved inside the attribute;\n     */\n\n  }, {\n    key: 'saveData',\n    value: function saveData(isReporter, resource, attribute, value) {\n\n      var storeDataObject = this._storeDataObject;\n      var type = this._getTypeOfObject(isReporter);\n\n      if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\n        log.log('[StoreDataObjects - save data] - not saved');\n        return;\n      }\n\n      log.log('[StoreDataObjects - saveData] - ', isReporter, type, resource, attribute, value);\n\n      if (!storeDataObject[type][resource].hasOwnProperty('data')) {\n        storeDataObject[type][resource].data = {};\n      }\n\n      if (attribute) {\n        var data = void 0;\n        if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') data = (0, _utils.deepClone)(value);else data = value;\n\n        (0, _utils.assign)(storeDataObject[type][resource].data, attribute, data);\n      } else {\n        storeDataObject[type][resource].data = (0, _utils.deepClone)(value) || {};\n      }\n\n      this._storeDataObject = storeDataObject;\n      this._storageManager.set('syncherManager:ObjectURLs', 1, storeDataObject);\n      return storeDataObject[type][resource];\n    }\n  }, {\n    key: 'saveChildrens',\n    value: function saveChildrens(isReporter, resource, attribute, value) {\n      var storeDataObject = this._storeDataObject;\n      var type = this._getTypeOfObject(isReporter);\n\n      if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\n        log.log('[StoreDataObjects - save childrens] - not saved');\n        return;\n      }\n\n      if (!storeDataObject[type][resource].hasOwnProperty('childrens')) {\n        storeDataObject[type][resource].childrenObjects = {};\n      }\n\n      if (attribute) {\n        (0, _utils.assign)(storeDataObject[type][resource].childrenObjects, attribute, (0, _utils.deepClone)(value));\n      } else {\n        storeDataObject[type][resource].childrenObjects = (0, _utils.deepClone)(value) || {};\n      }\n\n      this._storeDataObject = storeDataObject;\n      this._storageManager.set('syncherManager:ObjectURLs', 1, storeDataObject);\n      return storeDataObject[type][resource];\n    }\n\n    /**\n     * @description should save and update the current dataObject information\n     *\n     * @param {Boolean} isReporter - the object to be saved is a reporter\n     * @param {DataObjectURL} resource - dataObjectURL to be saved or updated;\n     * @param {String} attribute - attribute inside the data which will be saved\n     * @param {any} data - value will be saved inside the attribute;\n     */\n\n  }, {\n    key: 'update',\n    value: function update(isReporter, resource, attribute, value) {\n\n      var storeDataObject = this._storeDataObject;\n      var type = this._getTypeOfObject(isReporter);\n\n      if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\n        log.log('[StoreDataObjects - update] - not saved');\n        return;\n      }\n\n      log.log('[StoreDataObjects - update] - ', isReporter, type, resource, attribute, value);\n\n      if (storeDataObject[type] && storeDataObject[type][resource] && resource && attribute && value) {\n\n        if (attribute === 'subscriptions' || attribute === 'subscriberUsers') {\n          var update = true;\n\n          if (attribute === 'subscriptions') {\n            update = !this._isOwner(storeDataObject[type][resource], value);\n          }\n\n          if (update) this._updateToArray(storeDataObject[type], resource, attribute, value);\n        } else {\n          storeDataObject[type][resource][attribute] = value;\n        }\n\n        this._storeDataObject = storeDataObject;\n        this._storageManager.set('syncherManager:ObjectURLs', 1, storeDataObject);\n        return storeDataObject[type][resource];\n      }\n    }\n\n    /**\n     * @description should delete stored information from the dataObject\n     *\n     * @param {Boolean} isReporter - the object to be saved is a reporter\n     * @param {DataObjectURL} resource - dataObjectURL to be saved or updated;\n     * @param {String} attribute - attribute inside the data which will be saved\n     * @param {any} data - value will be saved inside the attribute;\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete(isReporter, resource, attribute, value) {\n\n      var storeDataObject = this._storeDataObject;\n      var type = this._getTypeOfObject(isReporter);\n\n      if (!storeDataObject || !storeDataObject[type] || !storeDataObject[type][resource]) {\n        log.log('[StoreDataObjects - delete] - not saved');\n        return;\n      }\n\n      if (storeDataObject[type] && storeDataObject[type][resource] && resource && attribute && value) {\n\n        if (attribute === 'subscriptions' || attribute === 'subscriberUsers') {\n          this._removeFromArray(storeDataObject[type], resource, attribute, value);\n        } else {\n          delete storeDataObject[type][resource][attribute];\n        }\n\n        this._storeDataObject = storeDataObject;\n        this._storageManager.set('syncherManager:ObjectURLs', 1, storeDataObject);\n\n        return storeDataObject[type][resource];\n      }\n    }\n\n    /**\n     * TODO: check if this process is viable because the storage manager ability to delete\n     * now the storageManager only can delete an specific key, but not the specific value inside that key;\n     */\n\n  }, {\n    key: 'deleteResource',\n    value: function deleteResource(resource) {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        if (resource) {\n\n          return _this.getAll().then(function (storedDataObjects) {\n            var tmp = (0, _assign2.default)(storedDataObjects, _this._storeDataObject || {});\n\n            if (tmp.hasOwnProperty('observers') && tmp.observers.hasOwnProperty(resource)) {\n              delete tmp.observers[resource];\n              _this._storageManager.set('syncherManager:ObjectURLs', 1, tmp);\n              _this._storeDataObject = tmp;\n              return resolve(tmp.observers[resource]);\n            }\n\n            if (tmp.hasOwnProperty('reporters') && tmp.reporters.hasOwnProperty(resource)) {\n              delete tmp.reporters[resource];\n              _this._storageManager.set('syncherManager:ObjectURLs', 1, tmp);\n              _this._storeDataObject = tmp;\n              return resolve(tmp.reporters[resource]);\n            }\n\n            resolve('The ' + resource + ' dosen\\t exists, nothing was deleted');\n          });\n        } else {\n          reject(new Error('[StoreDataObjects] - Can\\'t delete this ' + resource));\n        }\n      });\n    }\n  }, {\n    key: 'getAll',\n    value: function getAll() {\n      return this._storageManager.get('syncherManager:ObjectURLs');\n    }\n\n    /**\n     * @description should look for a specific dataObjectURL\n     *\n     * @param {DataObjectURL} resource - the dataObjectURL will be searched\n     *\n     * @returns Promise<Object> object with the dataObject information;\n     */\n\n  }, {\n    key: 'getDataObject',\n    value: function getDataObject(resource) {\n      var _this2 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this2._storageManager.get('syncherManager:ObjectURLs').then(function (storedDataObject) {\n\n          var observers = storedDataObject.hasOwnProperty('observers') ? storedDataObject.observers : {};\n          var reporters = storedDataObject.hasOwnProperty('reporters') ? storedDataObject.reporters : {};\n\n          var currentReporter = (0, _keys2.default)(reporters).find(function (value) {\n            return value === resource;\n          });\n          var currentObserver = (0, _keys2.default)(observers).find(function (value) {\n            return value === resource;\n          });\n          var dataObject = void 0;\n\n          if (currentObserver) {\n            dataObject = storedDataObject.observers[currentObserver];\n          }\n          if (currentReporter) {\n            dataObject = storedDataObject.reporters[currentReporter];\n          }\n\n          log.info('[StoreDataObjects - getDataObject] - for observer: ', currentObserver);\n          log.info('[StoreDataObjects - getDataObject] - for reporters: ', currentReporter);\n\n          log.info('[StoreDataObjects - getDataObject] - resolve: ', dataObject);\n          return dataObject ? resolve(dataObject) : reject('No dataObject was found');\n        });\n      });\n    }\n\n    /**\n     * @description should get the dataObject information by the message\n     *\n     * @param {Object} msg - message would be analised to get the current dataObject information\n     * @param {Boolean} isReporter - the object to be saved is a reporter\n     *\n     * @returns Promise<object> should retun an object with the dataObject or null\n     */\n\n  }, {\n    key: 'getResourcesByCriteria',\n    value: function getResourcesByCriteria(msg, isReporter) {\n      var _this3 = this;\n\n      return new _promise2.default(function (resolve) {\n\n        var type = _this3._getTypeOfObject(isReporter);\n\n        _this3.getAll().then(function (storedDataObjects) {\n\n          if (!storedDataObjects) {\n            log.log('[DataObjectsStorage.getResourcesByCriteria] don\\'t have stored data objects');\n            return resolve(null);\n          }\n\n          if (msg.body && msg.body.hasOwnProperty('resume') && !msg.body.resume) {\n            return resolve(null);\n          }\n\n          // check if the message have other criteria\n          // if not search for on the 'from' of the message.\n          var result = [];\n          var hasSubscription = _this3._hasSubscription(storedDataObjects[type], msg.from);\n          var isOwner = _this3._searchOwner(storedDataObjects[type], msg.from);\n\n          log.log('[StoredDataObjects - getResourcesByCriteria]:', storedDataObjects, msg, hasSubscription, isOwner);\n          if (msg.hasOwnProperty('from') && hasSubscription || isOwner) {\n            var resource = void 0;\n\n            if (isOwner) {\n              resource = _this3._getResourcesByOwner(storedDataObjects[type], msg.from);\n            } else {\n              resource = _this3._getResourcesBySubscription(storedDataObjects[type], msg.from);\n            }\n\n            var identityFoundData = [];\n            if (msg.body && msg.body.identity) identityFoundData = _this3._getResourcesByIdentity(storedDataObjects[type], msg.body.identity);\n\n            //TODO: remove schema since metadata already includes the schema?\n\n            var schemaFoundData = [];\n            if (msg.body && msg.body.schema) schemaFoundData = _this3._getResourcesBySchema(storedDataObjects[type], msg.body.schema);\n\n            var metadataFound = [];\n            if (msg.body && msg.body.value) {\n              var metadata = msg.body.value;\n              delete metadata.data;\n              metadataFound = _this3._getResourcesByMetadata(storedDataObjects[type], metadata);\n            }\n\n            var dataFound = [];\n            if (msg.body && msg.body.value && msg.body.value.data) dataFound = _this3._getResourcesByData(storedDataObjects[type], msg.body.value.data);\n\n            // you can pass as arrays as you want.. it will be merged in on place\n            // removed duplicates;\n            result = _this3._intersection(resource, identityFoundData, schemaFoundData, dataFound, metadataFound);\n          } else {\n            return resolve(null);\n          }\n\n          var init = {};\n          result.forEach(function (key) {\n            var currentIsReporter = storedDataObjects[type][key];\n            init[key] = currentIsReporter;\n            return init;\n          });\n\n          log.log('[Store Data Objects] - ', init);\n\n          resolve(init);\n        });\n      });\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_getResourcesByIdentity',\n    value: function _getResourcesByIdentity(storedData, userURL) {\n      if (!storedData) return [];\n\n      return (0, _keys2.default)(storedData).filter(function (objectURL) {\n        return storedData[objectURL].subscriberUsers.filter(function (current) {\n          return current === userURL;\n        }).length;\n      });\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_getResourcesByOwner',\n    value: function _getResourcesByOwner(storedData, owner) {\n      if (!storedData) return [];\n      return (0, _keys2.default)(storedData).filter(function (objectURL) {\n        return storedData[objectURL].reporter === owner;\n      });\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_getResourcesBySubscription',\n    value: function _getResourcesBySubscription(storedData, subscription) {\n      if (!storedData) return [];\n\n      return (0, _keys2.default)(storedData).filter(function (objectURL) {\n        return storedData[objectURL].subscriptions.filter(function (current) {\n          return current === subscription;\n        }).length;\n      });\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_getResourcesBySchema',\n    value: function _getResourcesBySchema(storedData, schema) {\n      return (0, _keys2.default)(storedData).filter(function (objectURL) {\n        var currentObject = storedData[objectURL];\n        return (0, _keys2.default)(currentObject).filter(function (key) {\n          return key === 'schema' && currentObject[key] === schema;\n        }).length;\n      });\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_getResourcesByMetadata',\n    value: function _getResourcesByMetadata(storedData, metadata) {\n      if (!metadata) return [];\n\n      return (0, _keys2.default)(storedData).filter(function (objectURL) {\n        var currentObject = storedData[objectURL];\n        return (0, _keys2.default)(currentObject).filter(function (key) {\n          // search on storeDataObjects for specific key provided from data;\n          return (0, _keys2.default)(metadata).filter(function (searchFor) {\n            return key === searchFor && currentObject[key] === metadata[searchFor];\n          }).length;\n        }).length;\n      });\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_getResourcesByData',\n    value: function _getResourcesByData(storedData, data) {\n      if (!data) return [];\n\n      return (0, _keys2.default)(storedData).filter(function (objectURL) {\n        var currentObject = storedData[objectURL].hasOwnProperty('data') ? storedData[objectURL].data : {};\n        return (0, _keys2.default)(currentObject).filter(function (key) {\n          // search on storeDataObjects for specific key provided from data;\n          return (0, _keys2.default)(data).filter(function (searchFor) {\n            return key === searchFor && currentObject[key] === data[searchFor];\n          }).length;\n        }).length;\n      });\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_hasSubscription',\n    value: function _hasSubscription(storedData, subscription) {\n      if (!storedData) return false;\n\n      return (0, _keys2.default)(storedData).filter(function (objectURL) {\n        return storedData[objectURL].subscriptions.filter(function (current) {\n          return current === subscription;\n        }).length;\n      }).length > 0 ? true : false;\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_searchOwner',\n    value: function _searchOwner(storedData, from) {\n      if (!storedData) return false;\n\n      return (0, _keys2.default)(storedData).filter(function (objectURL) {\n        return storedData[objectURL].reporter === from;\n      }).length > 0 ? true : false;\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_isOwner',\n    value: function _isOwner(value, url) {\n      if (!value) return false;\n      return value.reporter === url ? true : false;\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_intersection',\n    value: function _intersection() {\n      var args = (0, _from2.default)(arguments);\n\n      var result = args.reduce(function (first, second) {\n        return first.concat(second);\n      }).filter(function (value, index, self) {\n        return self.indexOf(value) === index;\n      });\n      log.log('DataObjectsStorage._intersection] Result an unique array of strings: ', result);\n      return result;\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_updateToArray',\n    value: function _updateToArray(storeDataObject, resource, key, value) {\n      log.log('[DataObjectsStorage] - _updateToArray: ', storeDataObject, resource, key, value);\n      if (storeDataObject[resource][key].indexOf(value) === -1) storeDataObject[resource][key].push(value);\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_removeFromArray',\n    value: function _removeFromArray(storeDataObject, resource, key, value) {\n      var indexOfValue = storeDataObject[resource][key].indexOf(value);\n      if (indexOfValue === -1) storeDataObject[resource][key].splice(indexOfValue, 1);\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_hasValue',\n    value: function _hasValue(obj, key, value) {\n      return obj.hasOwnProperty(key) && obj[key] === value;\n    }\n\n    /**\n     * @private\n     * @todo documentation\n     */\n\n  }, {\n    key: '_getTypeOfObject',\n    value: function _getTypeOfObject(isReporter) {\n      return isReporter ? 'reporters' : 'observers';\n    }\n  }]);\n  return DataObjectsStorage;\n}();\n\nexports.default = DataObjectsStorage;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9zdG9yZS1vYmplY3RzL0RhdGFPYmplY3RzU3RvcmFnZS5qcz9lOTU2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExvZyBTeXN0ZW1cbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignRGF0YU9iamVjdHNTdG9yYWdlJyk7XG5cbmltcG9ydCB7IGFzc2lnbiwgZGVlcENsb25lIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5jbGFzcyBEYXRhT2JqZWN0c1N0b3JhZ2Uge1xuXG4gIGNvbnN0cnVjdG9yKHN0b3JhZ2VNYW5hZ2VyLCBzdG9yZWREYXRhT2JqZWN0cykge1xuICAgIGlmICghc3RvcmFnZU1hbmFnZXIpIHRocm93IG5ldyBFcnJvcignW1N0b3JlIERhdGEgT2JqZWN0c10gLSBOZWVkcyB0aGUgc3RvcmFnZU1hbmFnZXIgY29tcG9uZW50Jyk7XG5cbiAgICB0aGlzLl9zdG9yYWdlTWFuYWdlciA9IHN0b3JhZ2VNYW5hZ2VyO1xuICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdCA9IHN0b3JlZERhdGFPYmplY3RzO1xuXG4gICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gc2hvdWxkIHNldCB0aGUgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgZGF0YU9iamVjdFVSTCB0byBiZSByZXN1bWVkIGlmIG5lY2Vzc2FyeTtcbiAgICpcbiAgICogQHBhcmFtIHtEYXRhT2JqZWN0VVJMfSB1cmwgLSBkYXRhT2JqZWN0VVJMIHRvIGJlIHNhdmVkO1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmVwb3J0ZXIgLSB0aGUgb2JqZWN0IHRvIGJlIHNhdmVkIGlzIGEgcmVwb3J0ZXJcbiAgICogQHBhcmFtIHtTY2hlbWFVUkx9IHNjaGVtYSAtIHRoZSBzY2hlbWEgdXJsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdGF0dXMgLSB0aGUgc3RhdHVzIG9mIGN1cnJlbnQgZGF0YU9iamVjdFxuICAgKiBAcGFyYW0ge0h5cGVydHlVUkx9IHJlcG9ydGVyIC0gdGhlIFJlcG9ydGVyIGh5cGVydHlVUkxcbiAgICogQHBhcmFtIHtBcnJheTxIeXBlcnR5VVJMPn0gc3Vic2NyaXB0aW9uIC0gbGlzdCBvZiBzdWJzY3JpcHRpb25zXG4gICAqIEBwYXJhbSB7QXJyYXk8RGF0YU9iamVjdENoaWxkPn0gY2hpbGRyZW4gLSBsaXN0IG9mIGNoaWxkcyBvZiBkYXRhT2JqZWN0VVJMXG4gICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nPn0gY2hpbGRyZW5zIC0gbGlzdCBvZiBjaGlsZHJlbnMsIGxpa2UsICdjaGF0bWVzc2FnZSc7XG4gICAqIEBwYXJhbSB7QXJyYXk8VXNlclVSTH0gc3Vic2NyaWJlclVzZXIgLSBsaXN0IG9mIHN1YnNjcmliZWQgdXNlcnM7XG4gICAqL1xuXG4gIHNldChtZXRhZGF0YSkge1xuXG4gICAgbGV0IHN0b3JlRGF0YU9iamVjdCA9IHRoaXMuX3N0b3JlRGF0YU9iamVjdDtcbiAgICBsZXQgdHlwZSA9IHRoaXMuX2dldFR5cGVPZk9iamVjdChtZXRhZGF0YS5pc1JlcG9ydGVyKTtcbiAgICBpZiAoIXN0b3JlRGF0YU9iamVjdC5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgc3RvcmVEYXRhT2JqZWN0W3R5cGVdID0ge307XG5cbiAgICBpZiAoIXN0b3JlRGF0YU9iamVjdFt0eXBlXS5oYXNPd25Qcm9wZXJ0eShtZXRhZGF0YS51cmwpKSB7XG4gICAgICBzdG9yZURhdGFPYmplY3RbdHlwZV1bbWV0YWRhdGEudXJsXSA9IHt9O1xuICAgICAgc3RvcmVEYXRhT2JqZWN0W3R5cGVdW21ldGFkYXRhLnVybF0uc3Vic2NyaXB0aW9ucyA9IFtdOy8vIFRPRE86ZG8gd2UgbmVlZCB0aGlzP1xuICAgICAgc3RvcmVEYXRhT2JqZWN0W3R5cGVdW21ldGFkYXRhLnVybF0uc3Vic2NyaWJlclVzZXJzID0gW107Ly8gVE9ETzpkbyB3ZSBuZWVkIHRoaXM/XG4gICAgICBzdG9yZURhdGFPYmplY3RbdHlwZV1bbWV0YWRhdGEudXJsXS5jaGlsZHJlbk9iamVjdHMgPSB7fTtcbiAgICAgIHN0b3JlRGF0YU9iamVjdFt0eXBlXVttZXRhZGF0YS51cmxdLmRhdGEgPSB7fTtcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKHN0b3JlRGF0YU9iamVjdFt0eXBlXVttZXRhZGF0YS51cmxdLCBtZXRhZGF0YSk7XG4gICAgZGVsZXRlIHN0b3JlRGF0YU9iamVjdFt0eXBlXVttZXRhZGF0YS51cmxdLnN1YnNjcmliZXJVc2VyO1xuICAgIGRlbGV0ZSBzdG9yZURhdGFPYmplY3RbdHlwZV1bbWV0YWRhdGEudXJsXS5zdWJzY3JpYmVySHlwZXJ0eTtcblxuICAgIC8qaWYgKHNjaGVtYSkgc3RvcmVEYXRhT2JqZWN0W3R5cGVdW21ldGFkYXRhLnVybF0uc2NoZW1hID0gc2NoZW1hO1xuICAgIGlmIChzdGF0dXMpIHN0b3JlRGF0YU9iamVjdFt0eXBlXVttZXRhZGF0YS51cmxdLnN0YXR1cyA9IHN0YXR1cztcbiAgICBpZiAoY2hpbGRyZW5SZXNvdXJjZXMpIHN0b3JlRGF0YU9iamVjdFt0eXBlXVttZXRhZGF0YS51cmxdLmNoaWxkcmVuUmVzb3VyY2VzID0gY2hpbGRyZW5SZXNvdXJjZXM7Ki9cblxuICAgIGlmIChtZXRhZGF0YS5zdWJzY3JpYmVySHlwZXJ0eSAmJiAhbWV0YWRhdGEuaXNSZXBvcnRlcikgeyAvLyBUT0RPOiBkbyB3ZSBuZWVkIHRoaXM/XG4gICAgICB0aGlzLl91cGRhdGVUb0FycmF5KHN0b3JlRGF0YU9iamVjdFt0eXBlXSwgbWV0YWRhdGEudXJsLCAnc3Vic2NyaXB0aW9ucycsIG1ldGFkYXRhLnN1YnNjcmliZXJIeXBlcnR5KTtcbiAgICB9XG5cbiAgICAvL3N0b3JlRGF0YU9iamVjdFt0eXBlXVttZXRhZGF0YS51cmxdLm93bmVyID0gb3duZXI7XG5cbiAgICBpZiAobWV0YWRhdGEuc3Vic2NyaWJlclVzZXIpIHsgLy8gVE9ETzogZG8gd2UgbmVlZCB0aGlzP1xuICAgICAgaWYgKHN0b3JlRGF0YU9iamVjdFt0eXBlXVttZXRhZGF0YS51cmxdLnN1YnNjcmliZXJVc2Vycy5pbmRleE9mKG1ldGFkYXRhLnN1YnNjcmliZXJVc2VyKSkge1xuICAgICAgICB0aGlzLl91cGRhdGVUb0FycmF5KHN0b3JlRGF0YU9iamVjdFt0eXBlXSwgbWV0YWRhdGEudXJsLCAnc3Vic2NyaWJlclVzZXJzJywgbWV0YWRhdGEuc3Vic2NyaWJlclVzZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdCA9IHN0b3JlRGF0YU9iamVjdDtcbiAgICB0aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMnLCAxLCBzdG9yZURhdGFPYmplY3QpO1xuICAgIHJldHVybiBzdG9yZURhdGFPYmplY3RbdHlwZV1bbWV0YWRhdGEudXJsXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gc2hvdWxkIHNhdmUgYW5kIHVwZGF0ZSB0aGUgY3VycmVudCBkYXRhT2JqZWN0IGRhdGEgaW5mb3JtYXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtCb29sZWFufSBpc1JlcG9ydGVyIC0gdGhlIG9iamVjdCB0byBiZSBzYXZlZCBpcyBhIHJlcG9ydGVyXG4gICAqIEBwYXJhbSB7RGF0YU9iamVjdFVSTH0gcmVzb3VyY2UgLSBkYXRhT2JqZWN0VVJMIHRvIGJlIHNhdmVkIG9yIHVwZGF0ZWQ7XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBhdHRyaWJ1dGUgLSBhdHRyaWJ1dGUgaW5zaWRlIHRoZSBkYXRhIHdoaWNoIHdpbGwgYmUgc2F2ZWRcbiAgICogQHBhcmFtIHthbnl9IGRhdGEgLSB2YWx1ZSB3aWxsIGJlIHNhdmVkIGluc2lkZSB0aGUgYXR0cmlidXRlO1xuICAgKi9cbiAgc2F2ZURhdGEoaXNSZXBvcnRlciwgcmVzb3VyY2UsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcblxuICAgIGxldCBzdG9yZURhdGFPYmplY3QgPSB0aGlzLl9zdG9yZURhdGFPYmplY3Q7XG4gICAgbGV0IHR5cGUgPSB0aGlzLl9nZXRUeXBlT2ZPYmplY3QoaXNSZXBvcnRlcik7XG5cbiAgICBpZiAoIXN0b3JlRGF0YU9iamVjdCB8fCAhc3RvcmVEYXRhT2JqZWN0W3R5cGVdIHx8ICFzdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdKSB7XG4gICAgICBsb2cubG9nKCdbU3RvcmVEYXRhT2JqZWN0cyAtIHNhdmUgZGF0YV0gLSBub3Qgc2F2ZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2cubG9nKCdbU3RvcmVEYXRhT2JqZWN0cyAtIHNhdmVEYXRhXSAtICcsIGlzUmVwb3J0ZXIsIHR5cGUsIHJlc291cmNlLCBhdHRyaWJ1dGUsIHZhbHVlKTtcblxuICAgIGlmICghc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXS5oYXNPd25Qcm9wZXJ0eSgnZGF0YScpKSB7XG4gICAgICBzdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdLmRhdGEgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAoYXR0cmlidXRlKSB7XG4gICAgICBsZXQgZGF0YTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSBkYXRhID0gZGVlcENsb25lKHZhbHVlKTtcbiAgICAgIGVsc2UgZGF0YSA9IHZhbHVlO1xuXG4gICAgICBhc3NpZ24oc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXS5kYXRhLCBhdHRyaWJ1dGUsIGRhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdLmRhdGEgPSBkZWVwQ2xvbmUodmFsdWUpIHx8IHt9O1xuICAgIH1cblxuICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdCA9IHN0b3JlRGF0YU9iamVjdDtcbiAgICB0aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMnLCAxLCBzdG9yZURhdGFPYmplY3QpO1xuICAgIHJldHVybiBzdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdO1xuICB9XG5cbiAgc2F2ZUNoaWxkcmVucyhpc1JlcG9ydGVyLCByZXNvdXJjZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGxldCBzdG9yZURhdGFPYmplY3QgPSB0aGlzLl9zdG9yZURhdGFPYmplY3Q7XG4gICAgbGV0IHR5cGUgPSB0aGlzLl9nZXRUeXBlT2ZPYmplY3QoaXNSZXBvcnRlcik7XG5cbiAgICBpZiAoIXN0b3JlRGF0YU9iamVjdCB8fCAhc3RvcmVEYXRhT2JqZWN0W3R5cGVdIHx8ICFzdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdKSB7XG4gICAgICBsb2cubG9nKCdbU3RvcmVEYXRhT2JqZWN0cyAtIHNhdmUgY2hpbGRyZW5zXSAtIG5vdCBzYXZlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXS5oYXNPd25Qcm9wZXJ0eSgnY2hpbGRyZW5zJykpIHtcbiAgICAgIHN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV0uY2hpbGRyZW5PYmplY3RzID0ge307XG4gICAgfVxuXG4gICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgYXNzaWduKHN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV0uY2hpbGRyZW5PYmplY3RzLCBhdHRyaWJ1dGUsIGRlZXBDbG9uZSh2YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdLmNoaWxkcmVuT2JqZWN0cyA9IGRlZXBDbG9uZSh2YWx1ZSkgfHwge307XG4gICAgfVxuXG4gICAgdGhpcy5fc3RvcmVEYXRhT2JqZWN0ID0gc3RvcmVEYXRhT2JqZWN0O1xuICAgIHRoaXMuX3N0b3JhZ2VNYW5hZ2VyLnNldCgnc3luY2hlck1hbmFnZXI6T2JqZWN0VVJMcycsIDEsIHN0b3JlRGF0YU9iamVjdCk7XG4gICAgcmV0dXJuIHN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV07XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIHNob3VsZCBzYXZlIGFuZCB1cGRhdGUgdGhlIGN1cnJlbnQgZGF0YU9iamVjdCBpbmZvcm1hdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmVwb3J0ZXIgLSB0aGUgb2JqZWN0IHRvIGJlIHNhdmVkIGlzIGEgcmVwb3J0ZXJcbiAgICogQHBhcmFtIHtEYXRhT2JqZWN0VVJMfSByZXNvdXJjZSAtIGRhdGFPYmplY3RVUkwgdG8gYmUgc2F2ZWQgb3IgdXBkYXRlZDtcbiAgICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZSAtIGF0dHJpYnV0ZSBpbnNpZGUgdGhlIGRhdGEgd2hpY2ggd2lsbCBiZSBzYXZlZFxuICAgKiBAcGFyYW0ge2FueX0gZGF0YSAtIHZhbHVlIHdpbGwgYmUgc2F2ZWQgaW5zaWRlIHRoZSBhdHRyaWJ1dGU7XG4gICAqL1xuICB1cGRhdGUoaXNSZXBvcnRlciwgcmVzb3VyY2UsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcblxuICAgIGxldCBzdG9yZURhdGFPYmplY3QgPSB0aGlzLl9zdG9yZURhdGFPYmplY3Q7XG4gICAgbGV0IHR5cGUgPSB0aGlzLl9nZXRUeXBlT2ZPYmplY3QoaXNSZXBvcnRlcik7XG5cbiAgICBpZiAoIXN0b3JlRGF0YU9iamVjdCB8fCAhc3RvcmVEYXRhT2JqZWN0W3R5cGVdIHx8ICFzdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdKSB7XG4gICAgICBsb2cubG9nKCdbU3RvcmVEYXRhT2JqZWN0cyAtIHVwZGF0ZV0gLSBub3Qgc2F2ZWQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsb2cubG9nKCdbU3RvcmVEYXRhT2JqZWN0cyAtIHVwZGF0ZV0gLSAnLCBpc1JlcG9ydGVyLCB0eXBlLCByZXNvdXJjZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG5cbiAgICBpZiAoc3RvcmVEYXRhT2JqZWN0W3R5cGVdICYmIHN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV0gJiYgcmVzb3VyY2UgJiYgYXR0cmlidXRlICYmIHZhbHVlKSB7XG5cbiAgICAgIGlmIChhdHRyaWJ1dGUgPT09ICdzdWJzY3JpcHRpb25zJyB8fCBhdHRyaWJ1dGUgPT09ICdzdWJzY3JpYmVyVXNlcnMnKSB7XG4gICAgICAgIGxldCB1cGRhdGUgPSB0cnVlO1xuXG4gICAgICAgIGlmIChhdHRyaWJ1dGUgPT09ICdzdWJzY3JpcHRpb25zJykge1xuICAgICAgICAgIHVwZGF0ZSA9ICF0aGlzLl9pc093bmVyKHN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV0sIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cGRhdGUpIHRoaXMuX3VwZGF0ZVRvQXJyYXkoc3RvcmVEYXRhT2JqZWN0W3R5cGVdLCByZXNvdXJjZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV1bYXR0cmlidXRlXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdG9yZURhdGFPYmplY3QgPSBzdG9yZURhdGFPYmplY3Q7XG4gICAgICB0aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMnLCAxLCBzdG9yZURhdGFPYmplY3QpO1xuICAgICAgcmV0dXJuIHN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBzaG91bGQgZGVsZXRlIHN0b3JlZCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBkYXRhT2JqZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNSZXBvcnRlciAtIHRoZSBvYmplY3QgdG8gYmUgc2F2ZWQgaXMgYSByZXBvcnRlclxuICAgKiBAcGFyYW0ge0RhdGFPYmplY3RVUkx9IHJlc291cmNlIC0gZGF0YU9iamVjdFVSTCB0byBiZSBzYXZlZCBvciB1cGRhdGVkO1xuICAgKiBAcGFyYW0ge1N0cmluZ30gYXR0cmlidXRlIC0gYXR0cmlidXRlIGluc2lkZSB0aGUgZGF0YSB3aGljaCB3aWxsIGJlIHNhdmVkXG4gICAqIEBwYXJhbSB7YW55fSBkYXRhIC0gdmFsdWUgd2lsbCBiZSBzYXZlZCBpbnNpZGUgdGhlIGF0dHJpYnV0ZTtcbiAgICovXG4gIGRlbGV0ZShpc1JlcG9ydGVyLCByZXNvdXJjZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuXG4gICAgbGV0IHN0b3JlRGF0YU9iamVjdCA9IHRoaXMuX3N0b3JlRGF0YU9iamVjdDtcbiAgICBsZXQgdHlwZSA9IHRoaXMuX2dldFR5cGVPZk9iamVjdChpc1JlcG9ydGVyKTtcblxuICAgIGlmICghc3RvcmVEYXRhT2JqZWN0IHx8ICFzdG9yZURhdGFPYmplY3RbdHlwZV0gfHwgIXN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV0pIHtcbiAgICAgIGxvZy5sb2coJ1tTdG9yZURhdGFPYmplY3RzIC0gZGVsZXRlXSAtIG5vdCBzYXZlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdG9yZURhdGFPYmplY3RbdHlwZV0gJiYgc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXSAmJiByZXNvdXJjZSAmJiBhdHRyaWJ1dGUgJiYgdmFsdWUpIHtcblxuICAgICAgaWYgKGF0dHJpYnV0ZSA9PT0gJ3N1YnNjcmlwdGlvbnMnIHx8IGF0dHJpYnV0ZSA9PT0gJ3N1YnNjcmliZXJVc2VycycpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlRnJvbUFycmF5KHN0b3JlRGF0YU9iamVjdFt0eXBlXSwgcmVzb3VyY2UsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV1bYXR0cmlidXRlXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fc3RvcmVEYXRhT2JqZWN0ID0gc3RvcmVEYXRhT2JqZWN0O1xuICAgICAgdGhpcy5fc3RvcmFnZU1hbmFnZXIuc2V0KCdzeW5jaGVyTWFuYWdlcjpPYmplY3RVUkxzJywgMSwgc3RvcmVEYXRhT2JqZWN0KTtcblxuICAgICAgcmV0dXJuIHN0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRPRE86IGNoZWNrIGlmIHRoaXMgcHJvY2VzcyBpcyB2aWFibGUgYmVjYXVzZSB0aGUgc3RvcmFnZSBtYW5hZ2VyIGFiaWxpdHkgdG8gZGVsZXRlXG4gICAqIG5vdyB0aGUgc3RvcmFnZU1hbmFnZXIgb25seSBjYW4gZGVsZXRlIGFuIHNwZWNpZmljIGtleSwgYnV0IG5vdCB0aGUgc3BlY2lmaWMgdmFsdWUgaW5zaWRlIHRoYXQga2V5O1xuICAgKi9cbiAgZGVsZXRlUmVzb3VyY2UocmVzb3VyY2UpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGlmIChyZXNvdXJjZSkge1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldEFsbCgpLnRoZW4oKHN0b3JlZERhdGFPYmplY3RzKSA9PiB7XG4gICAgICAgICAgbGV0IHRtcCA9IE9iamVjdC5hc3NpZ24oc3RvcmVkRGF0YU9iamVjdHMsIHRoaXMuX3N0b3JlRGF0YU9iamVjdCB8fCB7fSk7XG5cbiAgICAgICAgICBpZiAodG1wLmhhc093blByb3BlcnR5KCdvYnNlcnZlcnMnKSAmJiB0bXAub2JzZXJ2ZXJzLmhhc093blByb3BlcnR5KHJlc291cmNlKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRtcC5vYnNlcnZlcnNbcmVzb3VyY2VdO1xuICAgICAgICAgICAgdGhpcy5fc3RvcmFnZU1hbmFnZXIuc2V0KCdzeW5jaGVyTWFuYWdlcjpPYmplY3RVUkxzJywgMSwgdG1wKTtcbiAgICAgICAgICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdCA9IHRtcDtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRtcC5vYnNlcnZlcnNbcmVzb3VyY2VdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodG1wLmhhc093blByb3BlcnR5KCdyZXBvcnRlcnMnKSAmJiB0bXAucmVwb3J0ZXJzLmhhc093blByb3BlcnR5KHJlc291cmNlKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRtcC5yZXBvcnRlcnNbcmVzb3VyY2VdO1xuICAgICAgICAgICAgdGhpcy5fc3RvcmFnZU1hbmFnZXIuc2V0KCdzeW5jaGVyTWFuYWdlcjpPYmplY3RVUkxzJywgMSwgdG1wKTtcbiAgICAgICAgICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdCA9IHRtcDtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRtcC5yZXBvcnRlcnNbcmVzb3VyY2VdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXNvbHZlKCdUaGUgJyArIHJlc291cmNlICsgJyBkb3NlblxcdCBleGlzdHMsIG5vdGhpbmcgd2FzIGRlbGV0ZWQnKTtcblxuICAgICAgICB9KTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignW1N0b3JlRGF0YU9iamVjdHNdIC0gQ2FuXFwndCBkZWxldGUgdGhpcyAnICsgcmVzb3VyY2UpKTtcbiAgICAgIH1cblxuICAgIH0pO1xuXG4gIH1cblxuICBnZXRBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JhZ2VNYW5hZ2VyLmdldCgnc3luY2hlck1hbmFnZXI6T2JqZWN0VVJMcycpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBzaG91bGQgbG9vayBmb3IgYSBzcGVjaWZpYyBkYXRhT2JqZWN0VVJMXG4gICAqXG4gICAqIEBwYXJhbSB7RGF0YU9iamVjdFVSTH0gcmVzb3VyY2UgLSB0aGUgZGF0YU9iamVjdFVSTCB3aWxsIGJlIHNlYXJjaGVkXG4gICAqXG4gICAqIEByZXR1cm5zIFByb21pc2U8T2JqZWN0PiBvYmplY3Qgd2l0aCB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbjtcbiAgICovXG4gIGdldERhdGFPYmplY3QocmVzb3VyY2UpIHtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIHRoaXMuX3N0b3JhZ2VNYW5hZ2VyLmdldCgnc3luY2hlck1hbmFnZXI6T2JqZWN0VVJMcycpLnRoZW4oKHN0b3JlZERhdGFPYmplY3QpID0+IHtcblxuICAgICAgICBsZXQgb2JzZXJ2ZXJzID0gc3RvcmVkRGF0YU9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnb2JzZXJ2ZXJzJykgPyBzdG9yZWREYXRhT2JqZWN0Lm9ic2VydmVycyA6IHt9O1xuICAgICAgICBsZXQgcmVwb3J0ZXJzID0gc3RvcmVkRGF0YU9iamVjdC5oYXNPd25Qcm9wZXJ0eSgncmVwb3J0ZXJzJykgPyBzdG9yZWREYXRhT2JqZWN0LnJlcG9ydGVycyA6IHt9O1xuXG4gICAgICAgIGxldCBjdXJyZW50UmVwb3J0ZXIgPSBPYmplY3Qua2V5cyhyZXBvcnRlcnMpLmZpbmQoKHZhbHVlKSA9PiB7IHJldHVybiB2YWx1ZSA9PT0gcmVzb3VyY2U7IH0pO1xuICAgICAgICBsZXQgY3VycmVudE9ic2VydmVyID0gT2JqZWN0LmtleXMob2JzZXJ2ZXJzKS5maW5kKCh2YWx1ZSkgPT4geyByZXR1cm4gdmFsdWUgPT09IHJlc291cmNlOyB9KTtcbiAgICAgICAgbGV0IGRhdGFPYmplY3Q7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRPYnNlcnZlcikgeyBkYXRhT2JqZWN0ID0gc3RvcmVkRGF0YU9iamVjdC5vYnNlcnZlcnNbY3VycmVudE9ic2VydmVyXTsgfVxuICAgICAgICBpZiAoY3VycmVudFJlcG9ydGVyKSB7IGRhdGFPYmplY3QgPSBzdG9yZWREYXRhT2JqZWN0LnJlcG9ydGVyc1tjdXJyZW50UmVwb3J0ZXJdOyB9XG5cbiAgICAgICAgbG9nLmluZm8oJ1tTdG9yZURhdGFPYmplY3RzIC0gZ2V0RGF0YU9iamVjdF0gLSBmb3Igb2JzZXJ2ZXI6ICcsIGN1cnJlbnRPYnNlcnZlcik7XG4gICAgICAgIGxvZy5pbmZvKCdbU3RvcmVEYXRhT2JqZWN0cyAtIGdldERhdGFPYmplY3RdIC0gZm9yIHJlcG9ydGVyczogJywgY3VycmVudFJlcG9ydGVyKTtcblxuICAgICAgICBsb2cuaW5mbygnW1N0b3JlRGF0YU9iamVjdHMgLSBnZXREYXRhT2JqZWN0XSAtIHJlc29sdmU6ICcsIGRhdGFPYmplY3QpO1xuICAgICAgICByZXR1cm4gZGF0YU9iamVjdCA/IHJlc29sdmUoZGF0YU9iamVjdCkgOiByZWplY3QoJ05vIGRhdGFPYmplY3Qgd2FzIGZvdW5kJyk7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gc2hvdWxkIGdldCB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbiBieSB0aGUgbWVzc2FnZVxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gbXNnIC0gbWVzc2FnZSB3b3VsZCBiZSBhbmFsaXNlZCB0byBnZXQgdGhlIGN1cnJlbnQgZGF0YU9iamVjdCBpbmZvcm1hdGlvblxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGlzUmVwb3J0ZXIgLSB0aGUgb2JqZWN0IHRvIGJlIHNhdmVkIGlzIGEgcmVwb3J0ZXJcbiAgICpcbiAgICogQHJldHVybnMgUHJvbWlzZTxvYmplY3Q+IHNob3VsZCByZXR1biBhbiBvYmplY3Qgd2l0aCB0aGUgZGF0YU9iamVjdCBvciBudWxsXG4gICAqL1xuICBnZXRSZXNvdXJjZXNCeUNyaXRlcmlhKG1zZywgaXNSZXBvcnRlcikge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cbiAgICAgIGxldCB0eXBlID0gdGhpcy5fZ2V0VHlwZU9mT2JqZWN0KGlzUmVwb3J0ZXIpO1xuXG4gICAgICB0aGlzLmdldEFsbCgpLnRoZW4oKHN0b3JlZERhdGFPYmplY3RzKSA9PiB7XG5cbiAgICAgICAgaWYgKCFzdG9yZWREYXRhT2JqZWN0cykge1xuICAgICAgICAgIGxvZy5sb2coJ1tEYXRhT2JqZWN0c1N0b3JhZ2UuZ2V0UmVzb3VyY2VzQnlDcml0ZXJpYV0gZG9uXFwndCBoYXZlIHN0b3JlZCBkYXRhIG9iamVjdHMnKTtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtc2cuYm9keSAmJiBtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgncmVzdW1lJykgJiYgIW1zZy5ib2R5LnJlc3VtZSkge1xuICAgICAgICAgIHJldHVybiByZXNvbHZlKG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIG1lc3NhZ2UgaGF2ZSBvdGhlciBjcml0ZXJpYVxuICAgICAgICAvLyBpZiBub3Qgc2VhcmNoIGZvciBvbiB0aGUgJ2Zyb20nIG9mIHRoZSBtZXNzYWdlLlxuICAgICAgICBsZXQgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBoYXNTdWJzY3JpcHRpb24gPSB0aGlzLl9oYXNTdWJzY3JpcHRpb24oc3RvcmVkRGF0YU9iamVjdHNbdHlwZV0sIG1zZy5mcm9tKTtcbiAgICAgICAgbGV0IGlzT3duZXIgPSB0aGlzLl9zZWFyY2hPd25lcihzdG9yZWREYXRhT2JqZWN0c1t0eXBlXSwgbXNnLmZyb20pO1xuXG4gICAgICAgIGxvZy5sb2coJ1tTdG9yZWREYXRhT2JqZWN0cyAtIGdldFJlc291cmNlc0J5Q3JpdGVyaWFdOicsIHN0b3JlZERhdGFPYmplY3RzLCBtc2csIGhhc1N1YnNjcmlwdGlvbiwgaXNPd25lcik7XG4gICAgICAgIGlmIChtc2cuaGFzT3duUHJvcGVydHkoJ2Zyb20nKSAmJiBoYXNTdWJzY3JpcHRpb24gfHwgaXNPd25lcikge1xuICAgICAgICAgIGxldCByZXNvdXJjZTtcblxuICAgICAgICAgIGlmIChpc093bmVyKSB7XG4gICAgICAgICAgICByZXNvdXJjZSA9IHRoaXMuX2dldFJlc291cmNlc0J5T3duZXIoc3RvcmVkRGF0YU9iamVjdHNbdHlwZV0sIG1zZy5mcm9tKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb3VyY2UgPSB0aGlzLl9nZXRSZXNvdXJjZXNCeVN1YnNjcmlwdGlvbihzdG9yZWREYXRhT2JqZWN0c1t0eXBlXSwgbXNnLmZyb20pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBpZGVudGl0eUZvdW5kRGF0YSA9IFtdO1xuICAgICAgICAgIGlmIChtc2cuYm9keSAmJiBtc2cuYm9keS5pZGVudGl0eSkgaWRlbnRpdHlGb3VuZERhdGEgPSB0aGlzLl9nZXRSZXNvdXJjZXNCeUlkZW50aXR5KHN0b3JlZERhdGFPYmplY3RzW3R5cGVdLCBtc2cuYm9keS5pZGVudGl0eSk7XG5cbiAgICAgICAgICAvL1RPRE86IHJlbW92ZSBzY2hlbWEgc2luY2UgbWV0YWRhdGEgYWxyZWFkeSBpbmNsdWRlcyB0aGUgc2NoZW1hP1xuXG4gICAgICAgICAgbGV0IHNjaGVtYUZvdW5kRGF0YSA9IFtdO1xuICAgICAgICAgIGlmIChtc2cuYm9keSAmJiBtc2cuYm9keS5zY2hlbWEpIHNjaGVtYUZvdW5kRGF0YSA9IHRoaXMuX2dldFJlc291cmNlc0J5U2NoZW1hKHN0b3JlZERhdGFPYmplY3RzW3R5cGVdLCBtc2cuYm9keS5zY2hlbWEpO1xuXG4gICAgICAgICAgbGV0IG1ldGFkYXRhRm91bmQgPSBbXTtcbiAgICAgICAgICBpZiAobXNnLmJvZHkgJiYgbXNnLmJvZHkudmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBtZXRhZGF0YSA9IG1zZy5ib2R5LnZhbHVlO1xuICAgICAgICAgICAgZGVsZXRlIG1ldGFkYXRhLmRhdGE7XG4gICAgICAgICAgICBtZXRhZGF0YUZvdW5kID0gdGhpcy5fZ2V0UmVzb3VyY2VzQnlNZXRhZGF0YShzdG9yZWREYXRhT2JqZWN0c1t0eXBlXSwgbWV0YWRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCBkYXRhRm91bmQgPSBbXTtcbiAgICAgICAgICBpZiAobXNnLmJvZHkgJiYgbXNnLmJvZHkudmFsdWUgJiYgbXNnLmJvZHkudmFsdWUuZGF0YSkgZGF0YUZvdW5kID0gdGhpcy5fZ2V0UmVzb3VyY2VzQnlEYXRhKHN0b3JlZERhdGFPYmplY3RzW3R5cGVdLCBtc2cuYm9keS52YWx1ZS5kYXRhKTtcblxuICAgICAgICAgIC8vIHlvdSBjYW4gcGFzcyBhcyBhcnJheXMgYXMgeW91IHdhbnQuLiBpdCB3aWxsIGJlIG1lcmdlZCBpbiBvbiBwbGFjZVxuICAgICAgICAgIC8vIHJlbW92ZWQgZHVwbGljYXRlcztcbiAgICAgICAgICByZXN1bHQgPSB0aGlzLl9pbnRlcnNlY3Rpb24ocmVzb3VyY2UsIGlkZW50aXR5Rm91bmREYXRhLCBzY2hlbWFGb3VuZERhdGEsIGRhdGFGb3VuZCwgbWV0YWRhdGFGb3VuZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5pdCA9IHt9O1xuICAgICAgICByZXN1bHQuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgbGV0IGN1cnJlbnRJc1JlcG9ydGVyID0gc3RvcmVkRGF0YU9iamVjdHNbdHlwZV1ba2V5XTtcbiAgICAgICAgICBpbml0W2tleV0gPSBjdXJyZW50SXNSZXBvcnRlcjtcbiAgICAgICAgICByZXR1cm4gaW5pdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbG9nLmxvZygnW1N0b3JlIERhdGEgT2JqZWN0c10gLSAnLCBpbml0KTtcblxuICAgICAgICByZXNvbHZlKGluaXQpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0b2RvIGRvY3VtZW50YXRpb25cbiAgICovXG4gIF9nZXRSZXNvdXJjZXNCeUlkZW50aXR5KHN0b3JlZERhdGEsIHVzZXJVUkwpIHtcbiAgICBpZiAoIXN0b3JlZERhdGEpIHJldHVybiBbXTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzdG9yZWREYXRhKS5maWx0ZXIoKG9iamVjdFVSTCkgPT4ge1xuICAgICAgcmV0dXJuIHN0b3JlZERhdGFbb2JqZWN0VVJMXS5zdWJzY3JpYmVyVXNlcnMuZmlsdGVyKChjdXJyZW50KSA9PiB7XG4gICAgICAgIHJldHVybiBjdXJyZW50ID09PSB1c2VyVVJMO1xuICAgICAgfSkubGVuZ3RoO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0b2RvIGRvY3VtZW50YXRpb25cbiAgICovXG4gIF9nZXRSZXNvdXJjZXNCeU93bmVyKHN0b3JlZERhdGEsIG93bmVyKSB7XG4gICAgaWYgKCFzdG9yZWREYXRhKSByZXR1cm4gW107XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0b3JlZERhdGEpLmZpbHRlcigob2JqZWN0VVJMKSA9PiB7XG4gICAgICByZXR1cm4gc3RvcmVkRGF0YVtvYmplY3RVUkxdLnJlcG9ydGVyID09PSBvd25lcjtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdG9kbyBkb2N1bWVudGF0aW9uXG4gICAqL1xuICBfZ2V0UmVzb3VyY2VzQnlTdWJzY3JpcHRpb24oc3RvcmVkRGF0YSwgc3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKCFzdG9yZWREYXRhKSByZXR1cm4gW107XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RvcmVkRGF0YSkuZmlsdGVyKChvYmplY3RVUkwpID0+IHtcbiAgICAgIHJldHVybiBzdG9yZWREYXRhW29iamVjdFVSTF0uc3Vic2NyaXB0aW9ucy5maWx0ZXIoKGN1cnJlbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQgPT09IHN1YnNjcmlwdGlvbjtcbiAgICAgIH0pLmxlbmd0aDtcbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0b2RvIGRvY3VtZW50YXRpb25cbiAgICovXG4gIF9nZXRSZXNvdXJjZXNCeVNjaGVtYShzdG9yZWREYXRhLCBzY2hlbWEpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RvcmVkRGF0YSkuZmlsdGVyKChvYmplY3RVUkwpID0+IHtcbiAgICAgIGxldCBjdXJyZW50T2JqZWN0ID0gc3RvcmVkRGF0YVtvYmplY3RVUkxdO1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGN1cnJlbnRPYmplY3QpLmZpbHRlcigoa2V5KSA9PiB7XG4gICAgICAgIHJldHVybiBrZXkgPT09ICdzY2hlbWEnICYmIGN1cnJlbnRPYmplY3Rba2V5XSA9PT0gc2NoZW1hO1xuICAgICAgfSkubGVuZ3RoO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0b2RvIGRvY3VtZW50YXRpb25cbiAgICovXG4gIF9nZXRSZXNvdXJjZXNCeU1ldGFkYXRhKHN0b3JlZERhdGEsIG1ldGFkYXRhKSB7XG4gICAgaWYgKCFtZXRhZGF0YSkgcmV0dXJuIFtdO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0b3JlZERhdGEpLmZpbHRlcigob2JqZWN0VVJMKSA9PiB7XG4gICAgICBsZXQgY3VycmVudE9iamVjdCA9IHN0b3JlZERhdGFbb2JqZWN0VVJMXTtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhjdXJyZW50T2JqZWN0KS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICAvLyBzZWFyY2ggb24gc3RvcmVEYXRhT2JqZWN0cyBmb3Igc3BlY2lmaWMga2V5IHByb3ZpZGVkIGZyb20gZGF0YTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG1ldGFkYXRhKS5maWx0ZXIoc2VhcmNoRm9yID0+IHtcbiAgICAgICAgICByZXR1cm4ga2V5ID09PSBzZWFyY2hGb3IgJiYgY3VycmVudE9iamVjdFtrZXldID09PSBtZXRhZGF0YVtzZWFyY2hGb3JdO1xuICAgICAgICB9KS5sZW5ndGg7XG5cbiAgICAgIH0pLmxlbmd0aDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdG9kbyBkb2N1bWVudGF0aW9uXG4gICAqL1xuICBfZ2V0UmVzb3VyY2VzQnlEYXRhKHN0b3JlZERhdGEsIGRhdGEpIHtcbiAgICBpZiAoIWRhdGEpIHJldHVybiBbXTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzdG9yZWREYXRhKS5maWx0ZXIoKG9iamVjdFVSTCkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRPYmplY3QgPSBzdG9yZWREYXRhW29iamVjdFVSTF0uaGFzT3duUHJvcGVydHkoJ2RhdGEnKSA/IHN0b3JlZERhdGFbb2JqZWN0VVJMXS5kYXRhIDoge307XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoY3VycmVudE9iamVjdCkuZmlsdGVyKChrZXkpID0+IHtcbiAgICAgICAgLy8gc2VhcmNoIG9uIHN0b3JlRGF0YU9iamVjdHMgZm9yIHNwZWNpZmljIGtleSBwcm92aWRlZCBmcm9tIGRhdGE7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhkYXRhKS5maWx0ZXIoc2VhcmNoRm9yID0+IHtcbiAgICAgICAgICByZXR1cm4ga2V5ID09PSBzZWFyY2hGb3IgJiYgY3VycmVudE9iamVjdFtrZXldID09PSBkYXRhW3NlYXJjaEZvcl07XG4gICAgICAgIH0pLmxlbmd0aDtcblxuICAgICAgfSkubGVuZ3RoO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0b2RvIGRvY3VtZW50YXRpb25cbiAgICovXG4gIF9oYXNTdWJzY3JpcHRpb24oc3RvcmVkRGF0YSwgc3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKCFzdG9yZWREYXRhKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RvcmVkRGF0YSkuZmlsdGVyKChvYmplY3RVUkwpID0+IHtcbiAgICAgIHJldHVybiBzdG9yZWREYXRhW29iamVjdFVSTF0uc3Vic2NyaXB0aW9ucy5maWx0ZXIoKGN1cnJlbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQgPT09IHN1YnNjcmlwdGlvbjtcbiAgICAgIH0pLmxlbmd0aDtcbiAgICB9KS5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0b2RvIGRvY3VtZW50YXRpb25cbiAgICovXG4gIF9zZWFyY2hPd25lcihzdG9yZWREYXRhLCBmcm9tKSB7XG4gICAgaWYgKCFzdG9yZWREYXRhKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc3RvcmVkRGF0YSkuZmlsdGVyKChvYmplY3RVUkwpID0+IHtcbiAgICAgIHJldHVybiBzdG9yZWREYXRhW29iamVjdFVSTF0ucmVwb3J0ZXIgPT09IGZyb207XG4gICAgfSkubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdG9kbyBkb2N1bWVudGF0aW9uXG4gICAqL1xuICBfaXNPd25lcih2YWx1ZSwgdXJsKSB7XG4gICAgaWYgKCF2YWx1ZSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB2YWx1ZS5yZXBvcnRlciA9PT0gdXJsID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIEB0b2RvIGRvY3VtZW50YXRpb25cbiAgICovXG4gIF9pbnRlcnNlY3Rpb24oKSB7XG4gICAgbGV0IGFyZ3MgPSBBcnJheS5mcm9tKGFyZ3VtZW50cyk7XG5cbiAgICBsZXQgcmVzdWx0ID0gYXJncy5yZWR1Y2UoKGZpcnN0LCBzZWNvbmQpID0+IHtcbiAgICAgIHJldHVybiBmaXJzdC5jb25jYXQoc2Vjb25kKTtcbiAgICB9KS5maWx0ZXIoKHZhbHVlLCBpbmRleCwgc2VsZikgPT4ge1xuICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4O1xuICAgIH0pO1xuICAgIGxvZy5sb2coJ0RhdGFPYmplY3RzU3RvcmFnZS5faW50ZXJzZWN0aW9uXSBSZXN1bHQgYW4gdW5pcXVlIGFycmF5IG9mIHN0cmluZ3M6ICcsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdG9kbyBkb2N1bWVudGF0aW9uXG4gICAqL1xuICBfdXBkYXRlVG9BcnJheShzdG9yZURhdGFPYmplY3QsIHJlc291cmNlLCBrZXksIHZhbHVlKSB7XG4gICAgbG9nLmxvZygnW0RhdGFPYmplY3RzU3RvcmFnZV0gLSBfdXBkYXRlVG9BcnJheTogJywgc3RvcmVEYXRhT2JqZWN0LCByZXNvdXJjZSwga2V5LCB2YWx1ZSk7XG4gICAgaWYgKHN0b3JlRGF0YU9iamVjdFtyZXNvdXJjZV1ba2V5XS5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHN0b3JlRGF0YU9iamVjdFtyZXNvdXJjZV1ba2V5XS5wdXNoKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAdG9kbyBkb2N1bWVudGF0aW9uXG4gICAqL1xuICBfcmVtb3ZlRnJvbUFycmF5KHN0b3JlRGF0YU9iamVjdCwgcmVzb3VyY2UsIGtleSwgdmFsdWUpIHtcbiAgICBsZXQgaW5kZXhPZlZhbHVlID0gc3RvcmVEYXRhT2JqZWN0W3Jlc291cmNlXVtrZXldLmluZGV4T2YodmFsdWUpO1xuICAgIGlmIChpbmRleE9mVmFsdWUgPT09IC0xKSBzdG9yZURhdGFPYmplY3RbcmVzb3VyY2VdW2tleV0uc3BsaWNlKGluZGV4T2ZWYWx1ZSwgMSk7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHRvZG8gZG9jdW1lbnRhdGlvblxuICAgKi9cbiAgX2hhc1ZhbHVlKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBvYmouaGFzT3duUHJvcGVydHkoa2V5KSAmJiBvYmpba2V5XSA9PT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICogQHRvZG8gZG9jdW1lbnRhdGlvblxuICAgKi9cbiAgX2dldFR5cGVPZk9iamVjdChpc1JlcG9ydGVyKSB7XG4gICAgcmV0dXJuIGlzUmVwb3J0ZXIgPyAncmVwb3J0ZXJzJyA6ICdvYnNlcnZlcnMnO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0YU9iamVjdHNTdG9yYWdlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9zdG9yZS1vYmplY3RzL0RhdGFPYmplY3RzU3RvcmFnZS5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTs7Ozs7QUFIQTtBQUNBO0FBR0E7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFJQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFFQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQU9BO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FBUUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///489\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(491), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9hcnJheS9mcm9tLmpzPzczZjQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb21cIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbS5qc1xuLy8gbW9kdWxlIGlkID0gNDkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///490\n');
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(126);\n__webpack_require__(492);\nmodule.exports = __webpack_require__(13).Array.from;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mcm9tLmpzP2U3MzciXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5BcnJheS5mcm9tO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb20uanNcbi8vIG1vZHVsZSBpZCA9IDQ5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///491\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar ctx = __webpack_require__(65);\nvar $export = __webpack_require__(26);\nvar toObject = __webpack_require__(76);\nvar call = __webpack_require__(189);\nvar isArrayIter = __webpack_require__(190);\nvar toLength = __webpack_require__(132);\nvar createProperty = __webpack_require__(493);\nvar getIterFn = __webpack_require__(191);\n\n$export($export.S + $export.F * !__webpack_require__(196)(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzP2FiMjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzXG4vLyBtb2R1bGUgaWQgPSA0OTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///492\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\nvar $defineProperty = __webpack_require__(38);\nvar createDesc = __webpack_require__(73);\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanM/N2MxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSA0OTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///493\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('HypertyResourcesStorage'); // Log System\n\nvar HypertyResourcesStorage = function () {\n  function HypertyResourcesStorage(runtimeURL, bus, storageManager, hypertyResources) {\n    (0, _classCallCheck3.default)(this, HypertyResourcesStorage);\n\n\n    if (!storageManager) throw new Error('[HypertyResourcesStorage constructor] mandatory storageManager parameter missing');\n    if (!runtimeURL) throw new Error('[HypertyResourcesStorage constructor] mandatory runtimeURL parameter missing');\n    if (!bus) throw new Error('[HypertyResourcesStorage constructor] mandatory bus parameter missing');\n\n    var _this = this;\n\n    _this._bus = bus;\n\n    _this._url = runtimeURL + '/storage';\n\n    _this._storageManager = storageManager;\n\n    _this._hypertyResources = hypertyResources;\n\n    bus.addListener(_this._url, function (msg) {\n      log.info('[HypertyResourcesStorage] Message RCV: ', msg);\n      switch (msg.type) {\n        case 'create':\n          _this._onCreate(msg);break;\n        case 'read':\n          _this._onRead(msg);break;\n        case 'delete':\n          _this._onDelete(msg);break;\n      }\n    });\n  }\n\n  /**\n   * @description should save an HypertyResource contained in the body of a create message request;\n   *\n   * @param {string} message - message containing the hyperty resource to be stored\n   */\n\n  (0, _createClass3.default)(HypertyResourcesStorage, [{\n    key: '_onCreate',\n    value: function _onCreate(message) {\n\n      var _this = this;\n\n      if (!message.body || !message.body.value) throw new Error('[HypertyResourcesStorage._onCreate] mandatory message body value missing: ', message);\n\n      var content = message.body.value;\n      var contentURL = content.contentURL;\n      var resourceURL = '';\n\n      if (!contentURL) {\n\n        contentURL = [];\n        resourceURL = _this._url + '/' + (0, _utils.generateGUID)();\n      } else {\n        var currentURL = contentURL[0];\n        var resource = currentURL.substr(currentURL.lastIndexOf('/') + 1);\n        resourceURL = _this._url + '/' + resource;\n      }\n\n      if (!_this._hypertyResources.hasOwnProperty(resourceURL)) {\n\n        contentURL.push(resourceURL);\n        content.contentURL = contentURL;\n      }\n\n      _this._hypertyResources[resourceURL] = content;\n\n      _this._storageManager.set('hypertyResources', 1, _this._hypertyResources).then(function () {\n        var response = {\n          from: message.to,\n          to: message.from,\n          id: message.id,\n          type: 'response',\n          body: { value: resourceURL, code: 200 }\n        };\n\n        _this._bus.postMessage(response);\n      });\n    }\n\n    /**\n     * @description should return an HypertyResource stored in the Storage Manager identified by the content url contained in the body of a read message request;\n     *\n     * @param {string} message - message containing the hyperty resource to be stored\n     */\n\n  }, {\n    key: '_onRead',\n    value: function _onRead(message) {\n\n      var _this = this;\n\n      if (!message.body || !message.body.resource) throw new Error('[HypertyResourcesStorage._onRead] mandatory message body resource missing: ', message);\n\n      var contentUrl = message.body.resource;\n\n      var response = {\n        from: message.to,\n        to: message.from,\n        id: message.id,\n        type: 'response',\n        body: {}\n      };\n\n      var content = _this._hypertyResources[contentUrl];\n\n      if (content) {\n\n        if (content.resourceType === 'file') {\n          _this._onReadFile(response, content);\n        } else {\n          response.body.code = 200;\n          response.body.p2p = true;\n          response.body.value = content;\n          _this._bus.postMessage(response);\n        }\n      } else {\n        response.body.code = 404;\n        response.body.desc = 'Content Not Found for ' + contentUrl;\n        _this._bus.postMessage(response);\n      }\n\n      //response.body.code = 404;\n\n      //_this._hypertyResources[contentUrl] = message.body.value;\n\n    }\n  }, {\n    key: '_onReadFile',\n    value: function _onReadFile(response, resource) {\n      var _this = this;\n\n      var reader = new FileReader();\n\n      reader.onload = function (theFile) {\n\n        log.info('[FileHypertyResource.init] file loaded ', theFile);\n\n        response.body.code = 200;\n        response.body.p2p = true;\n        response.body.value = (0, _utils.deepClone)(resource);\n        response.body.value.content = theFile.target.result;\n        _this._bus.postMessage(response);\n      };\n\n      if (resource.mimetype.includes('text/')) {\n        reader.readAsText(resource.content);\n      } else {\n        var current = resource.content;\n\n        var blob = void 0;\n        if (Array.isArray(current)) {\n          blob = new Blob(current, { type: resource.mimetype });\n        } else {\n          blob = new Blob([current], { type: resource.mimetype });\n        }\n\n        reader.readAsArrayBuffer(blob);\n      }\n    }\n\n    /**\n     * @description should delete an HypertyResource from the storage;\n     *\n     * @param {string} message - message containing the content URL of the hyperty resource to be deleted\n     */\n\n  }, {\n    key: '_onDelete',\n    value: function _onDelete(message) {\n\n      var _this = this;\n\n      if (!message.body) throw new Error('[HypertyResourcesStorage._onDelete] mandatory message body missing: ', message);\n\n      if (message.body.resource) {\n        delete _this._hypertyResources[message.body.resource];\n      } else if (message.body.resources) {\n        message.body.resources.forEach(function (resource) {\n          delete _this._hypertyResources[resource];\n        });\n      } else {\n        throw new Error('[HypertyResourcesStorage._onDelete] mandatory resource missing: ', message);\n      }\n\n      _this._storageManager.set('hypertyResources', 1, _this._hypertyResources).then(function () {\n        var response = {\n          from: message.to,\n          to: message.from,\n          id: message.id,\n          type: 'response',\n          body: { code: 200 }\n        };\n\n        _this._bus.postMessage(response);\n      });\n    }\n  }]);\n  return HypertyResourcesStorage;\n}();\n\nexports.default = HypertyResourcesStorage;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9oeXBlcnR5LXJlc291cmNlcy1zdG9yYWdlL0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlLmpzP2Q0NjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTG9nIFN5c3RlbVxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJ2xvZ2xldmVsJztcbmxldCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZScpO1xuXG5cbmltcG9ydCB7IGdlbmVyYXRlR1VJRCwgZGVlcENsb25lIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5jbGFzcyBIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZSB7XG5cbiAgY29uc3RydWN0b3IocnVudGltZVVSTCwgYnVzLCBzdG9yYWdlTWFuYWdlciwgaHlwZXJ0eVJlc291cmNlcykge1xuXG4gICAgaWYgKCFzdG9yYWdlTWFuYWdlcikgdGhyb3cgbmV3IEVycm9yKCdbSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2UgY29uc3RydWN0b3JdIG1hbmRhdG9yeSBzdG9yYWdlTWFuYWdlciBwYXJhbWV0ZXIgbWlzc2luZycpO1xuICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdbSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2UgY29uc3RydWN0b3JdIG1hbmRhdG9yeSBydW50aW1lVVJMIHBhcmFtZXRlciBtaXNzaW5nJyk7XG4gICAgaWYgKCFidXMpIHRocm93IG5ldyBFcnJvcignW0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlIGNvbnN0cnVjdG9yXSBtYW5kYXRvcnkgYnVzIHBhcmFtZXRlciBtaXNzaW5nJyk7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX2J1cyA9IGJ1cztcblxuICAgIF90aGlzLl91cmwgPSBydW50aW1lVVJMICsgJy9zdG9yYWdlJztcblxuICAgIF90aGlzLl9zdG9yYWdlTWFuYWdlciA9IHN0b3JhZ2VNYW5hZ2VyO1xuXG4gICAgX3RoaXMuX2h5cGVydHlSZXNvdXJjZXMgPSBoeXBlcnR5UmVzb3VyY2VzO1xuXG4gICAgYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIChtc2cpID0+IHtcbiAgICAgIGxvZy5pbmZvKCdbSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2VdIE1lc3NhZ2UgUkNWOiAnLCBtc2cpO1xuICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgICBjYXNlICdjcmVhdGUnOiBfdGhpcy5fb25DcmVhdGUobXNnKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlYWQnOiBfdGhpcy5fb25SZWFkKG1zZyk7IGJyZWFrO1xuICAgICAgICBjYXNlICdkZWxldGUnOiBfdGhpcy5fb25EZWxldGUobXNnKTsgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG5cblxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBzaG91bGQgc2F2ZSBhbiBIeXBlcnR5UmVzb3VyY2UgY29udGFpbmVkIGluIHRoZSBib2R5IG9mIGEgY3JlYXRlIG1lc3NhZ2UgcmVxdWVzdDtcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgLSBtZXNzYWdlIGNvbnRhaW5pbmcgdGhlIGh5cGVydHkgcmVzb3VyY2UgdG8gYmUgc3RvcmVkXG4gICAqL1xuXG4gIF9vbkNyZWF0ZShtZXNzYWdlKSB7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCFtZXNzYWdlLmJvZHkgfHwgIW1lc3NhZ2UuYm9keS52YWx1ZSkgdGhyb3cgbmV3IEVycm9yKCdbSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2UuX29uQ3JlYXRlXSBtYW5kYXRvcnkgbWVzc2FnZSBib2R5IHZhbHVlIG1pc3Npbmc6ICcsIG1lc3NhZ2UpO1xuXG4gICAgbGV0IGNvbnRlbnQgPSBtZXNzYWdlLmJvZHkudmFsdWU7XG4gICAgbGV0IGNvbnRlbnRVUkwgPSBjb250ZW50LmNvbnRlbnRVUkw7XG4gICAgbGV0IHJlc291cmNlVVJMID0gJyc7XG5cbiAgICBpZiAoIWNvbnRlbnRVUkwpIHtcblxuICAgICAgY29udGVudFVSTCA9IFtdO1xuICAgICAgcmVzb3VyY2VVUkwgPSBfdGhpcy5fdXJsICsgJy8nICsgZ2VuZXJhdGVHVUlEKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY3VycmVudFVSTCA9IGNvbnRlbnRVUkxbMF07XG4gICAgICBjb25zdCByZXNvdXJjZSA9IGN1cnJlbnRVUkwuc3Vic3RyKGN1cnJlbnRVUkwubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICAgICAgcmVzb3VyY2VVUkwgPSBfdGhpcy5fdXJsICsgJy8nICsgcmVzb3VyY2U7XG4gICAgfVxuXG4gICAgaWYgKCFfdGhpcy5faHlwZXJ0eVJlc291cmNlcy5oYXNPd25Qcm9wZXJ0eShyZXNvdXJjZVVSTCkpIHtcblxuICAgICAgY29udGVudFVSTC5wdXNoKHJlc291cmNlVVJMKTtcbiAgICAgIGNvbnRlbnQuY29udGVudFVSTCA9IGNvbnRlbnRVUkw7XG5cbiAgICB9XG5cbiAgICBfdGhpcy5faHlwZXJ0eVJlc291cmNlc1tyZXNvdXJjZVVSTF0gPSBjb250ZW50O1xuXG4gICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyLnNldCgnaHlwZXJ0eVJlc291cmNlcycsIDEsIF90aGlzLl9oeXBlcnR5UmVzb3VyY2VzKS50aGVuKCgpID0+IHtcbiAgICAgIGxldCByZXNwb25zZSA9IHtcbiAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgaWQ6IG1lc3NhZ2UuaWQsXG4gICAgICAgIHR5cGU6ICdyZXNwb25zZScsXG4gICAgICAgIGJvZHk6IHsgdmFsdWU6IHJlc291cmNlVVJMLCBjb2RlOiAyMDAgfVxuICAgICAgfTtcblxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShyZXNwb25zZSk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gc2hvdWxkIHJldHVybiBhbiBIeXBlcnR5UmVzb3VyY2Ugc3RvcmVkIGluIHRoZSBTdG9yYWdlIE1hbmFnZXIgaWRlbnRpZmllZCBieSB0aGUgY29udGVudCB1cmwgY29udGFpbmVkIGluIHRoZSBib2R5IG9mIGEgcmVhZCBtZXNzYWdlIHJlcXVlc3Q7XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gbWVzc2FnZSBjb250YWluaW5nIHRoZSBoeXBlcnR5IHJlc291cmNlIHRvIGJlIHN0b3JlZFxuICAgKi9cblxuICBfb25SZWFkKG1lc3NhZ2UpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIW1lc3NhZ2UuYm9keSB8fCAhbWVzc2FnZS5ib2R5LnJlc291cmNlKSB0aHJvdyBuZXcgRXJyb3IoJ1tIeXBlcnR5UmVzb3VyY2VzU3RvcmFnZS5fb25SZWFkXSBtYW5kYXRvcnkgbWVzc2FnZSBib2R5IHJlc291cmNlIG1pc3Npbmc6ICcsIG1lc3NhZ2UpO1xuXG4gICAgbGV0IGNvbnRlbnRVcmwgPSBtZXNzYWdlLmJvZHkucmVzb3VyY2U7XG5cbiAgICBsZXQgcmVzcG9uc2UgPSB7XG4gICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgIGlkOiBtZXNzYWdlLmlkLFxuICAgICAgdHlwZTogJ3Jlc3BvbnNlJyxcbiAgICAgIGJvZHk6IHt9XG4gICAgfTtcblxuICAgIGxldCBjb250ZW50ID0gX3RoaXMuX2h5cGVydHlSZXNvdXJjZXNbY29udGVudFVybF07XG5cbiAgICBpZiAoY29udGVudCkge1xuXG4gICAgICBpZiAoY29udGVudC5yZXNvdXJjZVR5cGUgPT09ICdmaWxlJykge1xuICAgICAgICBfdGhpcy5fb25SZWFkRmlsZShyZXNwb25zZSwgY29udGVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNwb25zZS5ib2R5LmNvZGUgPSAyMDA7XG4gICAgICAgIHJlc3BvbnNlLmJvZHkucDJwID0gdHJ1ZTtcbiAgICAgICAgcmVzcG9uc2UuYm9keS52YWx1ZSA9IGNvbnRlbnQ7XG4gICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVzcG9uc2UpO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3BvbnNlLmJvZHkuY29kZSA9IDQwNDtcbiAgICAgIHJlc3BvbnNlLmJvZHkuZGVzYyA9ICdDb250ZW50IE5vdCBGb3VuZCBmb3IgJyArIGNvbnRlbnRVcmw7XG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlc3BvbnNlKTtcblxuICAgIH1cblxuICAgIC8vcmVzcG9uc2UuYm9keS5jb2RlID0gNDA0O1xuXG4gICAgLy9fdGhpcy5faHlwZXJ0eVJlc291cmNlc1tjb250ZW50VXJsXSA9IG1lc3NhZ2UuYm9keS52YWx1ZTtcblxuXG4gIH1cblxuICBfb25SZWFkRmlsZShyZXNwb25zZSwgcmVzb3VyY2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24odGhlRmlsZSkge1xuXG4gICAgICBsb2cuaW5mbygnW0ZpbGVIeXBlcnR5UmVzb3VyY2UuaW5pdF0gZmlsZSBsb2FkZWQgJywgdGhlRmlsZSk7XG5cbiAgICAgIHJlc3BvbnNlLmJvZHkuY29kZSA9IDIwMDtcbiAgICAgIHJlc3BvbnNlLmJvZHkucDJwID0gdHJ1ZTtcbiAgICAgIHJlc3BvbnNlLmJvZHkudmFsdWUgPSBkZWVwQ2xvbmUocmVzb3VyY2UpO1xuICAgICAgcmVzcG9uc2UuYm9keS52YWx1ZS5jb250ZW50ID0gdGhlRmlsZS50YXJnZXQucmVzdWx0O1xuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShyZXNwb25zZSk7XG4gICAgfTtcblxuICAgIGlmIChyZXNvdXJjZS5taW1ldHlwZS5pbmNsdWRlcygndGV4dC8nKSkge1xuICAgICAgcmVhZGVyLnJlYWRBc1RleHQocmVzb3VyY2UuY29udGVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSByZXNvdXJjZS5jb250ZW50O1xuXG4gICAgICBsZXQgYmxvYjtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgICAgIGJsb2IgPSBuZXcgQmxvYihjdXJyZW50LCB7IHR5cGU6IHJlc291cmNlLm1pbWV0eXBlfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBibG9iID0gbmV3IEJsb2IoW2N1cnJlbnRdLCB7IHR5cGU6IHJlc291cmNlLm1pbWV0eXBlfSk7XG4gICAgICB9XG5cbiAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIHNob3VsZCBkZWxldGUgYW4gSHlwZXJ0eVJlc291cmNlIGZyb20gdGhlIHN0b3JhZ2U7XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIC0gbWVzc2FnZSBjb250YWluaW5nIHRoZSBjb250ZW50IFVSTCBvZiB0aGUgaHlwZXJ0eSByZXNvdXJjZSB0byBiZSBkZWxldGVkXG4gICAqL1xuXG4gIF9vbkRlbGV0ZShtZXNzYWdlKSB7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCFtZXNzYWdlLmJvZHkpIHRocm93IG5ldyBFcnJvcignW0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlLl9vbkRlbGV0ZV0gbWFuZGF0b3J5IG1lc3NhZ2UgYm9keSBtaXNzaW5nOiAnLCBtZXNzYWdlKTtcblxuICAgIGlmIChtZXNzYWdlLmJvZHkucmVzb3VyY2UpIHtcbiAgICAgIGRlbGV0ZSBfdGhpcy5faHlwZXJ0eVJlc291cmNlc1ttZXNzYWdlLmJvZHkucmVzb3VyY2VdO1xuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5ib2R5LnJlc291cmNlcykge1xuICAgICAgbWVzc2FnZS5ib2R5LnJlc291cmNlcy5mb3JFYWNoKChyZXNvdXJjZSkgPT4ge1xuICAgICAgICBkZWxldGUgX3RoaXMuX2h5cGVydHlSZXNvdXJjZXNbcmVzb3VyY2VdO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW0h5cGVydHlSZXNvdXJjZXNTdG9yYWdlLl9vbkRlbGV0ZV0gbWFuZGF0b3J5IHJlc291cmNlIG1pc3Npbmc6ICcsIG1lc3NhZ2UpO1xuICAgIH1cblxuICAgIF90aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ2h5cGVydHlSZXNvdXJjZXMnLCAxLCBfdGhpcy5faHlwZXJ0eVJlc291cmNlcykudGhlbigoKSA9PiB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSB7XG4gICAgICAgIGZyb206IG1lc3NhZ2UudG8sXG4gICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXG4gICAgICAgIGlkOiBtZXNzYWdlLmlkLFxuICAgICAgICB0eXBlOiAncmVzcG9uc2UnLFxuICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlc3BvbnNlKTtcbiAgICB9KTtcblxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2U7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2h5cGVydHktcmVzb3VyY2VzLXN0b3JhZ2UvSHlwZXJ0eVJlc291cmNlc1N0b3JhZ2UuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBOzs7OztBQUpBO0FBQ0E7QUFJQTtBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUhBO0FBS0E7QUFHQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBQ0E7QUFPQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUVBOzs7OztBQUlBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///494\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _values = __webpack_require__(205);\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _keys = __webpack_require__(46);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nvar _schemaValidation = __webpack_require__(499);\n\nvar _AddressAllocation = __webpack_require__(99);\n\nvar _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);\n\nvar _ReporterObject = __webpack_require__(504);\n\nvar _ReporterObject2 = _interopRequireDefault(_ReporterObject);\n\nvar _ObserverObject = __webpack_require__(505);\n\nvar _ObserverObject2 = _interopRequireDefault(_ObserverObject);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('SyncherManager'); /**\n                                              * Copyright 2016 PT Inovação e Sistemas SA\n                                              * Copyright 2016 INESC-ID\n                                              * Copyright 2016 QUOBIS NETWORKS SL\n                                              * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                                              * Copyright 2016 ORANGE SA\n                                              * Copyright 2016 Deutsche Telekom AG\n                                              * Copyright 2016 Apizee\n                                              * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                                              *\n                                              * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                              * you may not use this file except in compliance with the License.\n                                              * You may obtain a copy of the License at\n                                              *\n                                              *   http://www.apache.org/licenses/LICENSE-2.0\n                                              *\n                                              * Unless required by applicable law or agreed to in writing, software\n                                              * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                              * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                              * See the License for the specific language governing permissions and\n                                              * limitations under the License.\n                                              **/\n\n// Log System\n\n/**\n * @author micaelpedrosa@gmail.com\n * Core Syncronization system.\n */\nvar SyncherManager = function () {\n  /* private\n  _url: URL\n  _bus: MiniBus\n  _registry: Registry\n  _allocator: AddressAllocation\n   _reporters: { ObjectURL: ReporterObject }\n  _observers: { ObjectURL: ObserverObject }\n  */\n\n  function SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator, storeDataObjects, identityModule) {\n    (0, _classCallCheck3.default)(this, SyncherManager);\n\n    if (!runtimeURL) throw new Error('[Syncher Manager] - needs the runtimeURL parameter');\n    if (!bus) throw new Error('[Syncher Manager] - needs the MessageBus instance');\n    if (!registry) throw new Error('[Syncher Manager] - needs the Registry instance');\n    if (!catalog) throw new Error('[Syncher Manager] - needs the RuntimeCatalogue instance');\n    if (!storageManager) throw new Error('[Syncher Manager] - need the storageManager instance');\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._registry = registry;\n    _this._catalog = catalog;\n    _this._storageManager = storageManager;\n    _this._identityModule = identityModule;\n\n    //TODO: these should be saved in persistence engine?\n    _this.runtimeURL = runtimeURL;\n    _this._url = runtimeURL + '/sm';\n    _this._objectURL = runtimeURL + '/object-allocation';\n\n    _this._reporters = {};\n    _this._observers = {};\n\n    _this._dataObjectsStorage = storeDataObjects;\n\n    //TODO: this should not be hardcoded!\n    _this._domain = (0, _utils.divideURL)(runtimeURL).domain;\n\n    if (allocator) {\n      _this._allocator = allocator;\n    } else {\n      _this._allocator = _AddressAllocation2.default.instance;\n    }\n\n    log.log('[SyncherManager - AddressAllocation] - ', _this._allocator);\n\n    bus.addListener(_this._url, function (msg) {\n      log.info('[SyncherManager] RCV: ', msg);\n      switch (msg.type) {\n        case 'create':\n          _this._onCreate(msg);break;\n        case 'delete':\n          _this._onDelete(msg);break;\n        case 'subscribe':\n          _this._onLocalSubscribe(msg);break;\n        case 'unsubscribe':\n          _this._onLocalUnSubscribe(msg);break;\n      }\n    });\n  }\n\n  (0, _createClass3.default)(SyncherManager, [{\n    key: '_onCreate',\n\n\n    //FLOW-IN: message received from Syncher -> create\n    value: function _onCreate(msg) {\n      var _this2 = this;\n\n      var from = msg.from;\n      var to = msg.to;\n\n      // check if message is to save new childrenObjects in the local storage\n      // TODO: check if message is to store new child in the local storage and call storeChild. How to distinguish from others?\n\n      if (msg.body.attribute) {\n        this._storeChildrens(msg);\n      } else {\n\n        if (!msg.body.hasOwnProperty('resume') || msg.body.hasOwnProperty('resume') && !msg.body.resume) {\n\n          // check if this is an invitation message\n          if (msg.body.authorise) {\n            this._authorise(msg);\n            log.info('[SyncherManager.onCreate - invite observers]', msg);\n          } else {\n            // this is to create a new data object\n            log.info('[SyncherManager.onCreate - Create New Object]', msg);\n            this._newCreate(msg);\n          }\n        } else {\n\n          // If from the hyperty side, call the resumeReporter we will have resume = true'\n          // so we will create an resumed object and will try to resume the object previously saved;\n          this._dataObjectsStorage.getResourcesByCriteria(msg, true).then(function (result) {\n\n            log.info('[SyncherManager - Create Resumed] - ResourcesByCriteria | Message: ', msg, ' result: ', result);\n\n            if (result && (0, _keys2.default)(result).length > 0) {\n\n              var listOfReporters = [];\n\n              (0, _keys2.default)(result).forEach(function (objURL) {\n                listOfReporters.push(_this2._resumeCreate(msg, result[objURL]));\n              });\n\n              _promise2.default.all(listOfReporters).then(function (resumedReporters) {\n                log.log('[SyncherManager - Create Resumed]', resumedReporters);\n\n                // TODO: shoud send the information if some object was fail;\n                var successfullyResumed = (0, _values2.default)(resumedReporters).filter(function (reporter) {\n                  return reporter !== false;\n                });\n\n                log.info('[SyncherManager.onCreate] returning resumed objects : ', successfullyResumed);\n\n                //FLOW-OUT: message response to Syncher -> create resume\n                _this2._bus.postMessage({\n                  id: msg.id, type: 'response', from: to, to: from,\n                  body: { code: 200, value: successfullyResumed }\n                });\n              });\n            } else {\n              //forward to hyperty:\n              var reply = {};\n              reply.id = msg.id;\n              reply.from = msg.to;\n              reply.to = msg.from;\n              reply.type = 'response';\n              reply.body = {\n                code: 404,\n                desc: 'No data objects reporters to be resumed'\n              };\n              _this2._bus.postMessage(reply);\n            }\n          });\n        }\n      }\n    }\n  }, {\n    key: '_storeChildrens',\n    value: function _storeChildrens(msg) {\n      var _this = this;\n\n      var resource = msg.body.resource;\n      var attribute = msg.body.attribute;\n\n      if (attribute === 'childrenObjects') {\n        _this._dataObjectsStorage.saveChildrens(false, resource, undefined, msg.body.value);\n      } else {\n        _this._dataObjectsStorage.saveChildrens(true, resource, attribute, msg.body.value);\n      }\n    }\n  }, {\n    key: '_newCreate',\n    value: function _newCreate(msg) {\n      var _this3 = this;\n\n      var _this = this;\n\n      var owner = msg.from;\n      var domain = (0, _utils.divideURL)(msg.from).domain;\n\n      // if reporter is in a Interworking Protostub the runtime domain backend services will be used\n      if (_this._registry.isInterworkingProtoStub(msg.from)) {\n        domain = (0, _utils.divideURL)(_this.runtimeURL).domain;\n      }\n\n      // Process invitation message to observers\n\n      /*if (msg.body.authorise) {\n        _this._authorise(msg);\n        return;\n      }*/\n\n      //get schema from catalogue and parse -> (scheme, children)\n      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {\n\n        var properties = descriptor.sourcePackage.sourceCode.properties;\n        var scheme = properties.scheme ? properties.scheme.constant : 'resource';\n        var childrens = properties.children ? properties.children.constant : [];\n\n        // Do schema validation\n        // TODO: check if is need to handle with the result of validation\n        (0, _schemaValidation.schemaValidation)(scheme, descriptor, msg.body.value);\n\n        var objectInfo = {\n          name: msg.body.value.name,\n          schema: msg.body.value.schema,\n          reporter: msg.body.value.reporter,\n          resources: msg.body.value.resources\n        };\n\n        // should resuse data object url if it passed\n        var reuseDataObject = msg.body.value.resource;\n        var numOfAddress = 1;\n\n        //request address allocation of a new object from the msg-node\n        _this._allocator.create(domain, numOfAddress, objectInfo, scheme, reuseDataObject).then(function (allocated) {\n          var objectRegistration = (0, _utils.deepClone)(msg.body.value);\n          objectRegistration.url = allocated.address[0];\n          objectRegistration.authorise = msg.body.authorise;\n          objectRegistration.childrens = childrens;\n\n          //objectRegistration.expires = 30;//TODO: get it from data object configuration description when present\n\n          delete objectRegistration.data;\n\n          log.log('[SyncherManager._newCreate] ALLOCATOR CREATE:', allocated);\n\n          var subscriptionURL = objectRegistration.url + '/subscription';\n\n          log.log('[SyncherManager._newCreate] Subscription URL', subscriptionURL);\n\n          //To register the dataObject in the runtimeRegistry\n          log.info('[SyncherManager._newCreate] Register Object: ', objectRegistration);\n\n          //_this._registry.registerDataObject(msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources, allocated, msg.body.authorise).then((resolve) => {\n          _this._registry.registerDataObject(objectRegistration).then(function (registeredObject) {\n            log.log('[SyncherManager._newCreate] DataObject successfully registered', registeredObject);\n\n            //all OK -> create reporter and register listeners\n            var reporter = void 0;\n\n            if (!_this3._reporters[objectRegistration.url]) {\n              reporter = new _ReporterObject2.default(_this, owner, objectRegistration.url);\n            } else {\n              reporter = _this3._reporters[objectRegistration.url];\n            }\n\n            log.log('[SyncherManager - new Create] - ', msg);\n\n            // Store for each reporter hyperty the dataObject\n            var userURL = void 0;\n            var interworking = false;\n\n            if (msg.body.hasOwnProperty('identity') && msg.body.identity.userProfile && msg.body.identity.userProfile.userURL) {\n              userURL = msg.body.identity.userProfile.userURL;\n              if (!userURL.includes('user://')) {\n                interworking = true;\n              }\n            } else {\n              interworking = true;\n            }\n\n            // should we use the msg.body.value instead?\n\n            var metadata = (0, _utils.deepClone)(objectRegistration);\n            metadata.subscriberUser = userURL;\n            metadata.isReporter = true;\n\n            // Store the dataObject information\n\n            if (!interworking) {\n              _this._dataObjectsStorage.set(metadata);\n\n              if (msg.body.hasOwnProperty('store') && msg.body.store) {\n                reporter.isToSaveData = true;\n                _this._dataObjectsStorage.update(true, objectRegistration.url, 'isToSaveData', true);\n\n                if (msg.body.value.data) {\n                  _this._dataObjectsStorage.saveData(true, objectRegistration.url, null, msg.body.value.data);\n                }\n              }\n            }\n\n            // adding listeners to forward to reporter\n\n            reporter.forwardSubscribe([objectRegistration.url, subscriptionURL]).then(function () {\n              reporter.addChildrens(childrens).then(function () {\n                _this._reporters[objectRegistration.url] = reporter;\n\n                var responseMsg = {\n                  id: msg.id, type: 'response', from: msg.to, to: owner,\n                  body: { code: 200, resource: objectRegistration.url, childrenResources: childrens }\n                };\n\n                //FLOW-OUT: message response to Syncher -> create\n                _this._bus.postMessage(responseMsg);\n              });\n            });\n          }, function (error) {\n            log.error(error);\n          });\n        });\n      }).catch(function (reason) {\n        //FLOW-OUT: error message response to Syncher -> create\n        var responseMsg = {\n          id: msg.id, type: 'response', from: msg.to, to: owner,\n          body: { code: 500, desc: reason }\n        };\n\n        _this._bus.postMessage(responseMsg);\n      });\n    }\n  }, {\n    key: '_resumeCreate',\n    value: function _resumeCreate(msg, storedObject) {\n      var _this4 = this;\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve) {\n\n        var owner = msg.from;\n        var schema = storedObject.schema;\n        var resource = storedObject.url;\n        var initialData = storedObject.data;\n\n        log.log('[SyncherManager] - resume create', msg, storedObject);\n\n        //get schema from catalogue and parse -> (scheme, children)\n        _this._catalog.getDataSchemaDescriptor(schema).then(function (descriptor) {\n\n          var properties = descriptor.sourcePackage.sourceCode.properties;\n          var scheme = properties.scheme ? properties.scheme.constant : 'resource';\n          var childrens = properties.children ? properties.children.constant : [];\n\n          log.log('[SyncherManager] - getDataSchemaDescriptor: ', descriptor, childrens);\n\n          // Do schema validation\n          // TODO: check if is need to handle with the result of validation\n          (0, _schemaValidation.schemaValidation)(scheme, descriptor, initialData);\n\n          var objectRegistration = (0, _utils.deepClone)(msg.body.value);\n          objectRegistration.url = storedObject.url;\n          objectRegistration.expires = storedObject.expires;\n\n          delete objectRegistration.data;\n\n          //all OK -> create reporter and register listeners\n          var reporter = void 0;\n\n          if (!_this4._reporters[resource]) {\n            reporter = new _ReporterObject2.default(_this, owner, resource);\n          } else {\n            reporter = _this4._reporters[resource];\n          }\n\n          reporter.isToSaveData = storedObject.isToSaveData;\n\n          reporter.forwardSubscribe([storedObject.url]).then(function () {\n            reporter.addChildrens(childrens).then(function () {\n\n              reporter.resumeSubscriptions(storedObject.subscriptions);\n\n              _this._reporters[resource] = reporter;\n\n              log.info('[SyncherManager - resume create] - resolved resumed: ', storedObject);\n\n              return _this._decryptChildrens(storedObject, childrens);\n            }).then(function (decryptedObject) {\n\n              // log.log('result of previous promise');\n              resolve(decryptedObject);\n            }).catch(function (reason) {\n              log.error('[SyncherManager - resume create] - fail on addChildrens: ', reason);\n              resolve(false);\n            });\n          });\n          log.info('[SyncherManager._resumeCreate] Register Object: ', objectRegistration);\n          _this._registry.registerDataObject(objectRegistration).then(function (resolve) {\n            log.log('[SyncherManager._resumeCreate] DataObject registration successfully updated', resolve);\n          });\n\n          //  resolve();\n        }).catch(function (reason) {\n          log.error('[SyncherManager - resume create] - fail on getDataSchemaDescriptor: ', reason);\n          resolve(false);\n        });\n      });\n    }\n\n    // to decrypt DataChildObjects if they are encrypted\n\n  }, {\n    key: '_decryptChildrens',\n    value: function _decryptChildrens(storedObject, childrens) {\n      var _this = this;\n      return new _promise2.default(function (resolve) {\n\n        if (!childrens) {\n          resolve(storedObject);\n        } else {\n          var childrensObj = (0, _keys2.default)(storedObject.childrenObjects);\n\n          if (childrensObj.length === 0) {\n            resolve(storedObject);\n          }\n\n          childrens.forEach(function (children) {\n\n            var childObjects = storedObject.childrenObjects[children];\n\n            log.log('[SyncherManager._decryptChildrens] dataObjectChilds to decrypt ', childObjects);\n\n            var listOfDecryptedObjects = [];\n\n            (0, _keys2.default)(childObjects).forEach(function (childId) {\n              var child = childObjects[childId];\n              var owner = childId.split('#')[0];\n\n              if (typeof child.value === 'string') {\n\n                log.log('[SyncherManager._decryptChildrens] createdBy ', owner, ' object: ', child.value);\n\n                var decrypted = _this._identityModule.decryptDataObject(JSON.parse(child.value), storedObject.url);\n\n                listOfDecryptedObjects.push(decrypted);\n              }\n            });\n\n            _promise2.default.all(listOfDecryptedObjects).then(function (decryptedObjects) {\n\n              log.log('[SyncherManager._decryptChildrens] returning decrypted ', decryptedObjects);\n\n              decryptedObjects.forEach(function (decryptedObject) {\n                var childId = decryptedObject.value.url;\n                storedObject.childrenObjects[children][childId].value = decryptedObject.value;\n              });\n\n              log.log('[SyncherManager._decryptChildrens] storedObject ', storedObject);\n\n              resolve(storedObject);\n            }).catch(function (reason) {\n              log.warn('[SyncherManager._decryptChildrens] failed : ', reason);\n            });\n          });\n        }\n      });\n    }\n\n    // Process invitations to observers\n\n  }, {\n    key: '_authorise',\n    value: function _authorise(msg) {\n      var _this = this;\n\n      if (!msg.body.resource) {\n        throw new Error('[SyncherManager._authorise] invitation request without data object url:', msg);\n      }\n\n      var objSubscriptorURL = msg.body.resource + '/subscription';\n      var p2p = msg.body.p2p ? msg.body.p2p : false;\n\n      log.log('[SyncherManager -  authorise] - ', msg);\n\n      if (msg.body.authorise) {\n        msg.body.authorise.forEach(function (hypertyURL) {\n          //FLOW-OUT: send invites to list of remote Syncher -> _onRemoteCreate -> onNotification\n\n          _this._bus.postMessage({\n            type: 'create', from: objSubscriptorURL, to: hypertyURL,\n            body: { p2p: p2p, identity: msg.body.identity, source: msg.from, value: msg.body.value, schema: msg.body.schema }\n          }, function (reply) {\n            // lets forward the invitation response\n            var response = {\n              from: msg.to,\n              to: msg.from,\n              id: msg.id,\n              type: reply.type,\n              body: reply.body\n            };\n\n            _this._bus.postMessage(response);\n          });\n        });\n      }\n    }\n\n    //FLOW-IN: message received from DataObjectReporter -> delete\n\n  }, {\n    key: '_onDelete',\n    value: function _onDelete(msg) {\n      var _this = this;\n\n      var objURL = msg.body.resource;\n\n      var object = _this._reporters[objURL];\n      if (object) {\n        //TODO: is there any policy verification before delete?\n\n        object.delete();\n\n        this._dataObjectsStorage.deleteResource(objURL).then(function (result) {\n\n          log.log('[SyncherManager - onDelete] - deleteResource: ', result);\n\n          _this._registry.unregisterDataObject(objURL);\n\n          //TODO: unregister object?\n          _this._bus.postMessage({\n            id: msg.id, type: 'response', from: msg.to, to: msg.from,\n            body: { code: 200 }\n          });\n        });\n      }\n    }\n\n    //FLOW-IN: message received from local Syncher -> subscribe\n\n  }, {\n    key: '_onLocalSubscribe',\n    value: function _onLocalSubscribe(msg) {\n      var _this5 = this;\n\n      this._dataObjectsStorage.getResourcesByCriteria(msg, false).then(function (result) {\n\n        log.info('[SyncherManager - Subscribe] - ResourcesByCriteria | Message: ', msg, ' result: ', result);\n\n        if (result && (0, _keys2.default)(result).length > 0) {\n\n          var listOfObservers = [];\n\n          // TODO: should reuse the storaged information\n          (0, _keys2.default)(result).forEach(function (objURL) {\n            log.log('[SyncherManager - resume Subscribe] - reuse current object url: ', result[objURL]);\n            listOfObservers.push(_this5._resumeSubscription(msg, result[objURL]));\n          });\n\n          _promise2.default.all(listOfObservers).then(function (resumedObservers) {\n            log.log('[SyncherManager - Observers Resumed]', resumedObservers);\n\n            // TODO: shoud send the information if some object was fail;\n            var successfullyResumed = (0, _values2.default)(resumedObservers).filter(function (observer) {\n              return observer !== false;\n            });\n\n            //FLOW-OUT: message response to Syncher -> create\n            _this5._bus.postMessage({\n              id: msg.id, type: 'response', from: msg.to, to: msg.from,\n              body: { code: 200, value: successfullyResumed }\n            });\n          });\n        } else if (msg.body.schema && msg.body.resource) {\n          log.log('[SyncherManager.onLocalSubscribe - new Subscribe] - ', msg.body.schema, msg.body.resource);\n          _this5._newSubscription(msg);\n        } else {\n          //forward to hyperty:\n          var reply = {};\n          reply.id = msg.id;\n          reply.from = msg.to;\n          reply.to = msg.from;\n          reply.type = 'response';\n          reply.body = {\n            code: 404,\n            desc: 'No data objects observers to be resumed'\n          };\n          _this5._bus.postMessage(reply);\n        }\n      });\n    }\n  }, {\n    key: '_newSubscription',\n    value: function _newSubscription(msg) {\n      var _this6 = this;\n\n      var _this = this;\n\n      var objURL = msg.body.resource;\n\n      var hypertyURL = msg.from;\n      var domain = (0, _utils.divideURL)(objURL).domain;\n      var objURLSubscription = objURL + '/subscription';\n\n      var childBaseURL = objURL + '/children/';\n\n      //get schema from catalogue and parse -> (children)\n      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {\n        var properties = descriptor.sourcePackage.sourceCode.properties;\n        var childrens = properties.children ? properties.children.constant : [];\n\n        var subscriptions = [];\n        subscriptions.push(objURL + '/changes');\n\n        childrens.forEach(function (child) {\n          return subscriptions.push(childBaseURL + child);\n        });\n\n        //children addresses\n\n        //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker\n        var nodeSubscribeMsg = {\n          type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',\n          body: { identity: msg.body.identity, resources: subscriptions, source: hypertyURL }\n        };\n\n        //subscribe in msg-node\n        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n          log.log('node-subscribe-response(observer): ', reply);\n          if (reply.body.code === 200) {\n\n            //FLOW-OUT: reply with provisional response\n            _this._bus.postMessage({\n              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n              body: { code: 100, childrenResources: childrens, schema: msg.body.schema, resource: msg.body.resource }\n            });\n\n            //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe\n            var objSubscribeMsg = {\n              type: 'subscribe', from: _this._url, to: objURLSubscription,\n              body: { identity: nodeSubscribeMsg.body.identity, subscriber: hypertyURL }\n            };\n\n            //TODO: For Further Study\n            if (msg.body.hasOwnProperty('mutual')) objSubscribeMsg.body.mutual = msg.body.mutual;\n            log.log('[SyncherManager._newSubscription]', objSubscribeMsg, msg);\n\n            //subscribe to reporter SM\n            _this._bus.postMessage(objSubscribeMsg, function (reply) {\n              log.log('reporter-subscribe-response-new: ', reply);\n              if (reply.body.code === 200) {\n\n                log.log('[SyncherManager._newSubscription] - observers: ', _this._observers, objURL, _this._observers[objURL]);\n\n                var observer = _this._observers[objURL];\n                if (!observer) {\n                  observer = new _ObserverObject2.default(_this, objURL, childrens);\n                  log.log('[SyncherManager._newSubscription] - observers: create new ObserverObject: ', observer);\n                  _this._observers[objURL] = observer;\n\n                  // register new hyperty subscription\n                  observer.addSubscription(hypertyURL);\n\n                  // add childrens and listeners to save data if necessary\n                  observer.addChildrens(childrens);\n                }\n\n                var interworking = false;\n\n                // Store for each reporter hyperty the dataObject\n                var userURL = void 0;\n                if (msg.body.hasOwnProperty('identity') && msg.body.identity.userProfile && msg.body.identity.userProfile.userURL) {\n                  userURL = msg.body.identity.userProfile.userURL;\n                  if (!userURL.includes('user://')) {\n                    interworking = true;\n                  }\n                } else {\n                  interworking = true;\n                }\n\n                var metadata = (0, _utils.deepClone)(reply.body.value);\n\n                // let childrenObjects = metadata.childrenObjects || {};\n\n                delete metadata.data;\n                delete metadata.childrenObjects;\n\n                metadata.childrens = childrens;\n                metadata.subscriberUser = userURL;\n                metadata.isReporter = false;\n                metadata.subscriberHyperty = hypertyURL;\n\n                if (!interworking) {\n                  //_this._dataObjectsStorage.set(objURL, false, msg.body.schema, 'on', reply.body.owner, hypertyURL, childrens, userURL);\n                  _this._dataObjectsStorage.set(metadata);\n                  if (metadata.hasOwnProperty('store') && metadata.store || metadata.hasOwnProperty('isToSaveData') && metadata.isToSaveData) {\n                    observer.isToSaveData = true;\n                    _this._dataObjectsStorage.update(false, objURL, 'isToSaveData', true);\n                    _this._dataObjectsStorage.saveData(false, objURL, null, reply.body.value.data);\n                  }\n                }\n\n                //forward to hyperty:\n                reply.id = msg.id;\n                reply.from = _this._url;\n                reply.to = hypertyURL;\n                reply.body.schema = msg.body.schema;\n                reply.body.resource = msg.body.resource;\n\n                //TODO: For Further Study\n                if (msg.body.hasOwnProperty('mutual')) reply.body.mutual = msg.body.mutual;\n                log.log('[subscribe] - new subscription: ', msg, reply, observer);\n\n                _this6._bus.postMessage(reply);\n              }\n            });\n          } else {\n            //listener rejected\n            _this._bus.postMessage({\n              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n              body: reply.body\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: '_resumeSubscription',\n    value: function _resumeSubscription(msg, storedObject) {\n      var _this7 = this;\n\n      return new _promise2.default(function (resolve) {\n\n        var objURL = storedObject.url;\n        var schema = storedObject.schema;\n\n        var hypertyURL = msg.from;\n\n        // let objURLSubscription = objURL + '/subscription';\n\n        var childBaseURL = objURL + '/children/';\n\n        log.log('[SyncherManager - ReuseSubscription] - objURL: ', objURL, ' - schema:', schema);\n\n        //get schema from catalogue and parse -> (children)\n        // TODO: remove this since children resources should be available in the DataObjectsStorage\n        _this7._catalog.getDataSchemaDescriptor(schema).then(function (descriptor) {\n          var properties = descriptor.sourcePackage.sourceCode.properties;\n          var childrens = properties.children ? properties.children.constant : [];\n\n          //children addresses\n          var subscriptions = [];\n          subscriptions.push(objURL + '/changes');\n          childrens.forEach(function (child) {\n            return subscriptions.push(childBaseURL + child);\n          });\n\n          //FLOW-OUT: reply with provisional response\n          _this7._bus.postMessage({\n            id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n            body: { code: 100, childrenResources: childrens, schema: schema, resource: objURL }\n          });\n\n          //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe\n          /*let objSubscribeMsg = {\n            type: 'subscribe', from: this._url, to: objURLSubscription,\n            body: { subscriber: hypertyURL, identity: msg.body.identity }\n          };\n           //subscribe to reporter SM\n          this._bus.postMessage(objSubscribeMsg, (reply) => {*/\n\n          var observer = _this7._observers[objURL];\n          if (!observer) {\n            observer = new _ObserverObject2.default(_this7, objURL, childrens);\n            observer.isToSaveData = storedObject.isToSaveData;\n            _this7._observers[objURL] = observer;\n          }\n\n          //register new hyperty subscription\n          observer.addSubscription(hypertyURL);\n          observer.addChildrens(childrens);\n\n          // Object.assign(storedObject.data, reply.body.value.data);\n          // Object.assign(storedObject.childrens, reply.body.value.childrens);\n\n          //log.log('[subscribe] - resume subscription: ', msg, reply, storedObject, observer);\n\n          return _this7._decryptChildrens(storedObject, childrens);\n        }).then(function (decryptedObject) {\n          // log.log('result of previous promise');\n          resolve(decryptedObject);\n        }).catch(function (reason) {\n          log.error('[SyncherManager - resume subscription] - fail on getDataSchemaDescriptor: ', reason);\n          resolve(false);\n        });\n      });\n    }\n\n    //FLOW-IN: message received from local DataObjectObserver -> unsubscribe\n\n  }, {\n    key: '_onLocalUnSubscribe',\n    value: function _onLocalUnSubscribe(msg) {\n      var _this = this;\n\n      var hypertyURL = msg.from;\n      var objURL = msg.body.resource;\n\n      var observer = _this._observers[objURL];\n      if (observer) {\n        //TODO: is there any policy verification before delete?\n        observer.removeSubscription(msg);\n\n        //TODO: destroy object in the registry?\n        _this._bus.postMessage({\n          id: msg.id, type: 'response', from: msg.to, to: msg.from,\n          body: { code: 200 }\n        });\n\n        this._dataObjectsStorage.deleteResource(objURL);\n\n        //TODO: remove Object if no more subscription?\n        delete _this._observers[objURL];\n      }\n    }\n  }, {\n    key: 'url',\n    get: function get() {\n      return this._url;\n    }\n  }]);\n  return SyncherManager;\n}();\n\nexports.default = SyncherManager;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9zeW5jaGVyL1N5bmNoZXJNYW5hZ2VyLmpzPzMzMzciXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG4vLyBMb2cgU3lzdGVtXG5pbXBvcnQgKiBhcyBsb2dnZXIgZnJvbSAnbG9nbGV2ZWwnO1xubGV0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ1N5bmNoZXJNYW5hZ2VyJyk7XG5cbmltcG9ydCB7IGRpdmlkZVVSTCwgZGVlcENsb25lIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgc2NoZW1hVmFsaWRhdGlvbiB9IGZyb20gJy4uL3V0aWxzL3NjaGVtYVZhbGlkYXRpb24nO1xuXG5pbXBvcnQgQWRkcmVzc0FsbG9jYXRpb24gZnJvbSAnLi4vYWxsb2NhdGlvbi9BZGRyZXNzQWxsb2NhdGlvbic7XG5pbXBvcnQgUmVwb3J0ZXJPYmplY3QgZnJvbSAnLi9SZXBvcnRlck9iamVjdCc7XG5pbXBvcnQgT2JzZXJ2ZXJPYmplY3QgZnJvbSAnLi9PYnNlcnZlck9iamVjdCc7XG5cbi8qKlxuICogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxuICogQ29yZSBTeW5jcm9uaXphdGlvbiBzeXN0ZW0uXG4gKi9cbmNsYXNzIFN5bmNoZXJNYW5hZ2VyIHtcbiAgLyogcHJpdmF0ZVxuICBfdXJsOiBVUkxcbiAgX2J1czogTWluaUJ1c1xuICBfcmVnaXN0cnk6IFJlZ2lzdHJ5XG4gIF9hbGxvY2F0b3I6IEFkZHJlc3NBbGxvY2F0aW9uXG5cbiAgX3JlcG9ydGVyczogeyBPYmplY3RVUkw6IFJlcG9ydGVyT2JqZWN0IH1cbiAgX29ic2VydmVyczogeyBPYmplY3RVUkw6IE9ic2VydmVyT2JqZWN0IH1cbiAgKi9cblxuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMLCBidXMsIHJlZ2lzdHJ5LCBjYXRhbG9nLCBzdG9yYWdlTWFuYWdlciwgYWxsb2NhdG9yLCBzdG9yZURhdGFPYmplY3RzLCBpZGVudGl0eU1vZHVsZSkge1xuICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWRzIHRoZSBydW50aW1lVVJMIHBhcmFtZXRlcicpO1xuICAgIGlmICghYnVzKSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIE1lc3NhZ2VCdXMgaW5zdGFuY2UnKTtcbiAgICBpZiAoIXJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIFJlZ2lzdHJ5IGluc3RhbmNlJyk7XG4gICAgaWYgKCFjYXRhbG9nKSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIFJ1bnRpbWVDYXRhbG9ndWUgaW5zdGFuY2UnKTtcbiAgICBpZiAoIXN0b3JhZ2VNYW5hZ2VyKSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZCB0aGUgc3RvcmFnZU1hbmFnZXIgaW5zdGFuY2UnKTtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fYnVzID0gYnVzO1xuICAgIF90aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICAgIF90aGlzLl9jYXRhbG9nID0gY2F0YWxvZztcbiAgICBfdGhpcy5fc3RvcmFnZU1hbmFnZXIgPSBzdG9yYWdlTWFuYWdlcjtcbiAgICBfdGhpcy5faWRlbnRpdHlNb2R1bGUgPSBpZGVudGl0eU1vZHVsZTtcblxuICAgIC8vVE9ETzogdGhlc2Ugc2hvdWxkIGJlIHNhdmVkIGluIHBlcnNpc3RlbmNlIGVuZ2luZT9cbiAgICBfdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDtcbiAgICBfdGhpcy5fdXJsID0gcnVudGltZVVSTCArICcvc20nO1xuICAgIF90aGlzLl9vYmplY3RVUkwgPSBydW50aW1lVVJMICsgJy9vYmplY3QtYWxsb2NhdGlvbic7XG5cbiAgICBfdGhpcy5fcmVwb3J0ZXJzID0ge307XG4gICAgX3RoaXMuX29ic2VydmVycyA9IHt9O1xuXG4gICAgX3RoaXMuX2RhdGFPYmplY3RzU3RvcmFnZSA9IHN0b3JlRGF0YU9iamVjdHM7XG5cbiAgICAvL1RPRE86IHRoaXMgc2hvdWxkIG5vdCBiZSBoYXJkY29kZWQhXG4gICAgX3RoaXMuX2RvbWFpbiA9IGRpdmlkZVVSTChydW50aW1lVVJMKS5kb21haW47XG5cbiAgICBpZiAoYWxsb2NhdG9yKSB7XG4gICAgICBfdGhpcy5fYWxsb2NhdG9yID0gYWxsb2NhdG9yO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5fYWxsb2NhdG9yID0gQWRkcmVzc0FsbG9jYXRpb24uaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyIC0gQWRkcmVzc0FsbG9jYXRpb25dIC0gJywgX3RoaXMuX2FsbG9jYXRvcik7XG5cbiAgICBidXMuYWRkTGlzdGVuZXIoX3RoaXMuX3VybCwgKG1zZykgPT4ge1xuICAgICAgbG9nLmluZm8oJ1tTeW5jaGVyTWFuYWdlcl0gUkNWOiAnLCBtc2cpO1xuICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgICBjYXNlICdjcmVhdGUnOiBfdGhpcy5fb25DcmVhdGUobXNnKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RlbGV0ZSc6IF90aGlzLl9vbkRlbGV0ZShtc2cpOyBicmVhaztcbiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzogX3RoaXMuX29uTG9jYWxTdWJzY3JpYmUobXNnKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Vuc3Vic2NyaWJlJzogX3RoaXMuX29uTG9jYWxVblN1YnNjcmliZShtc2cpOyBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgZ2V0IHVybCgpIHsgcmV0dXJuIHRoaXMuX3VybDsgfVxuXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIFN5bmNoZXIgLT4gY3JlYXRlXG4gIF9vbkNyZWF0ZShtc2cpIHtcblxuICAgIGxldCBmcm9tID0gbXNnLmZyb207XG4gICAgbGV0IHRvID0gbXNnLnRvO1xuXG4gICAgLy8gY2hlY2sgaWYgbWVzc2FnZSBpcyB0byBzYXZlIG5ldyBjaGlsZHJlbk9iamVjdHMgaW4gdGhlIGxvY2FsIHN0b3JhZ2VcbiAgICAvLyBUT0RPOiBjaGVjayBpZiBtZXNzYWdlIGlzIHRvIHN0b3JlIG5ldyBjaGlsZCBpbiB0aGUgbG9jYWwgc3RvcmFnZSBhbmQgY2FsbCBzdG9yZUNoaWxkLiBIb3cgdG8gZGlzdGluZ3Vpc2ggZnJvbSBvdGhlcnM/XG5cbiAgICBpZiAobXNnLmJvZHkuYXR0cmlidXRlKSB7IHRoaXMuX3N0b3JlQ2hpbGRyZW5zKG1zZyk7IH0gZWxzZSB7XG5cbiAgICAgIGlmICghbXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ3Jlc3VtZScpIHx8IChtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgncmVzdW1lJykgJiYgIW1zZy5ib2R5LnJlc3VtZSkpIHtcblxuICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIGFuIGludml0YXRpb24gbWVzc2FnZVxuICAgICAgICBpZiAobXNnLmJvZHkuYXV0aG9yaXNlKSB7XG4gICAgICAgICAgdGhpcy5fYXV0aG9yaXNlKG1zZyk7XG4gICAgICAgICAgbG9nLmluZm8oJ1tTeW5jaGVyTWFuYWdlci5vbkNyZWF0ZSAtIGludml0ZSBvYnNlcnZlcnNdJywgbXNnKTtcbiAgICAgICAgfSBlbHNlIHsgLy8gdGhpcyBpcyB0byBjcmVhdGUgYSBuZXcgZGF0YSBvYmplY3RcbiAgICAgICAgICBsb2cuaW5mbygnW1N5bmNoZXJNYW5hZ2VyLm9uQ3JlYXRlIC0gQ3JlYXRlIE5ldyBPYmplY3RdJywgbXNnKTtcbiAgICAgICAgICB0aGlzLl9uZXdDcmVhdGUobXNnKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vIElmIGZyb20gdGhlIGh5cGVydHkgc2lkZSwgY2FsbCB0aGUgcmVzdW1lUmVwb3J0ZXIgd2Ugd2lsbCBoYXZlIHJlc3VtZSA9IHRydWUnXG4gICAgICAgIC8vIHNvIHdlIHdpbGwgY3JlYXRlIGFuIHJlc3VtZWQgb2JqZWN0IGFuZCB3aWxsIHRyeSB0byByZXN1bWUgdGhlIG9iamVjdCBwcmV2aW91c2x5IHNhdmVkO1xuICAgICAgICB0aGlzLl9kYXRhT2JqZWN0c1N0b3JhZ2UuZ2V0UmVzb3VyY2VzQnlDcml0ZXJpYShtc2csIHRydWUpLnRoZW4oKHJlc3VsdCkgPT4ge1xuXG4gICAgICAgICAgbG9nLmluZm8oJ1tTeW5jaGVyTWFuYWdlciAtIENyZWF0ZSBSZXN1bWVkXSAtIFJlc291cmNlc0J5Q3JpdGVyaWEgfCBNZXNzYWdlOiAnLCBtc2csICcgcmVzdWx0OiAnLCByZXN1bHQpO1xuXG4gICAgICAgICAgaWYgKHJlc3VsdCAmJiBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA+IDApIHtcblxuICAgICAgICAgICAgbGV0IGxpc3RPZlJlcG9ydGVycyA9IFtdO1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goKG9ialVSTCkgPT4ge1xuICAgICAgICAgICAgICBsaXN0T2ZSZXBvcnRlcnMucHVzaCh0aGlzLl9yZXN1bWVDcmVhdGUobXNnLCByZXN1bHRbb2JqVVJMXSkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIFByb21pc2UuYWxsKGxpc3RPZlJlcG9ydGVycykudGhlbigocmVzdW1lZFJlcG9ydGVycykgPT4ge1xuICAgICAgICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIgLSBDcmVhdGUgUmVzdW1lZF0nLCByZXN1bWVkUmVwb3J0ZXJzKTtcblxuICAgICAgICAgICAgICAvLyBUT0RPOiBzaG91ZCBzZW5kIHRoZSBpbmZvcm1hdGlvbiBpZiBzb21lIG9iamVjdCB3YXMgZmFpbDtcbiAgICAgICAgICAgICAgbGV0IHN1Y2Nlc3NmdWxseVJlc3VtZWQgPSBPYmplY3QudmFsdWVzKHJlc3VtZWRSZXBvcnRlcnMpLmZpbHRlcigocmVwb3J0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwb3J0ZXIgIT09IGZhbHNlO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBsb2cuaW5mbygnW1N5bmNoZXJNYW5hZ2VyLm9uQ3JlYXRlXSByZXR1cm5pbmcgcmVzdW1lZCBvYmplY3RzIDogJywgc3VjY2Vzc2Z1bGx5UmVzdW1lZCk7XG5cbiAgICAgICAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSByZXNwb25zZSB0byBTeW5jaGVyIC0+IGNyZWF0ZSByZXN1bWVcbiAgICAgICAgICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiB0bywgdG86IGZyb20sXG4gICAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHZhbHVlOiBzdWNjZXNzZnVsbHlSZXN1bWVkIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vZm9yd2FyZCB0byBoeXBlcnR5OlxuICAgICAgICAgICAgbGV0IHJlcGx5ID0ge307XG4gICAgICAgICAgICByZXBseS5pZCA9IG1zZy5pZDtcbiAgICAgICAgICAgIHJlcGx5LmZyb20gPSBtc2cudG87XG4gICAgICAgICAgICByZXBseS50byA9IG1zZy5mcm9tO1xuICAgICAgICAgICAgcmVwbHkudHlwZSA9ICdyZXNwb25zZSc7XG4gICAgICAgICAgICByZXBseS5ib2R5ID0ge1xuICAgICAgICAgICAgICBjb2RlOiA0MDQsXG4gICAgICAgICAgICAgIGRlc2M6ICdObyBkYXRhIG9iamVjdHMgcmVwb3J0ZXJzIHRvIGJlIHJlc3VtZWQnXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlcGx5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gIH1cblxuICBfc3RvcmVDaGlsZHJlbnMobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCByZXNvdXJjZSA9IG1zZy5ib2R5LnJlc291cmNlO1xuICAgIGxldCBhdHRyaWJ1dGUgPSBtc2cuYm9keS5hdHRyaWJ1dGU7XG5cbiAgICBpZiAoYXR0cmlidXRlID09PSAnY2hpbGRyZW5PYmplY3RzJykgeyBfdGhpcy5fZGF0YU9iamVjdHNTdG9yYWdlLnNhdmVDaGlsZHJlbnMoZmFsc2UsIHJlc291cmNlLCB1bmRlZmluZWQsIG1zZy5ib2R5LnZhbHVlKTsgfSBlbHNlIHsgX3RoaXMuX2RhdGFPYmplY3RzU3RvcmFnZS5zYXZlQ2hpbGRyZW5zKHRydWUsIHJlc291cmNlLCBhdHRyaWJ1dGUsIG1zZy5ib2R5LnZhbHVlKTsgfVxuXG4gIH1cblxuICBfbmV3Q3JlYXRlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgb3duZXIgPSBtc2cuZnJvbTtcbiAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKG1zZy5mcm9tKS5kb21haW47XG5cbiAgICAvLyBpZiByZXBvcnRlciBpcyBpbiBhIEludGVyd29ya2luZyBQcm90b3N0dWIgdGhlIHJ1bnRpbWUgZG9tYWluIGJhY2tlbmQgc2VydmljZXMgd2lsbCBiZSB1c2VkXG4gICAgaWYgKF90aGlzLl9yZWdpc3RyeS5pc0ludGVyd29ya2luZ1Byb3RvU3R1Yihtc2cuZnJvbSkpIHtcbiAgICAgIGRvbWFpbiA9IGRpdmlkZVVSTChfdGhpcy5ydW50aW1lVVJMKS5kb21haW47XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBpbnZpdGF0aW9uIG1lc3NhZ2UgdG8gb2JzZXJ2ZXJzXG5cbiAgICAvKmlmIChtc2cuYm9keS5hdXRob3Jpc2UpIHtcbiAgICAgIF90aGlzLl9hdXRob3Jpc2UobXNnKTtcbiAgICAgIHJldHVybjtcbiAgICB9Ki9cblxuICAgIC8vZ2V0IHNjaGVtYSBmcm9tIGNhdGFsb2d1ZSBhbmQgcGFyc2UgLT4gKHNjaGVtZSwgY2hpbGRyZW4pXG4gICAgX3RoaXMuX2NhdGFsb2cuZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3IobXNnLmJvZHkuc2NoZW1hKS50aGVuKChkZXNjcmlwdG9yKSA9PiB7XG5cbiAgICAgIGxldCBwcm9wZXJ0aWVzID0gZGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllcztcbiAgICAgIGxldCBzY2hlbWUgPSBwcm9wZXJ0aWVzLnNjaGVtZSA/IHByb3BlcnRpZXMuc2NoZW1lLmNvbnN0YW50IDogJ3Jlc291cmNlJztcbiAgICAgIGxldCBjaGlsZHJlbnMgPSBwcm9wZXJ0aWVzLmNoaWxkcmVuID8gcHJvcGVydGllcy5jaGlsZHJlbi5jb25zdGFudCA6IFtdO1xuXG4gICAgICAvLyBEbyBzY2hlbWEgdmFsaWRhdGlvblxuICAgICAgLy8gVE9ETzogY2hlY2sgaWYgaXMgbmVlZCB0byBoYW5kbGUgd2l0aCB0aGUgcmVzdWx0IG9mIHZhbGlkYXRpb25cbiAgICAgIHNjaGVtYVZhbGlkYXRpb24oc2NoZW1lLCBkZXNjcmlwdG9yLCBtc2cuYm9keS52YWx1ZSk7XG5cbiAgICAgIGxldCBvYmplY3RJbmZvID0ge1xuICAgICAgICBuYW1lOiBtc2cuYm9keS52YWx1ZS5uYW1lLFxuICAgICAgICBzY2hlbWE6IG1zZy5ib2R5LnZhbHVlLnNjaGVtYSxcbiAgICAgICAgcmVwb3J0ZXI6IG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLFxuICAgICAgICByZXNvdXJjZXM6IG1zZy5ib2R5LnZhbHVlLnJlc291cmNlc1xuICAgICAgfTtcblxuICAgICAgLy8gc2hvdWxkIHJlc3VzZSBkYXRhIG9iamVjdCB1cmwgaWYgaXQgcGFzc2VkXG4gICAgICBsZXQgcmV1c2VEYXRhT2JqZWN0ID0gbXNnLmJvZHkudmFsdWUucmVzb3VyY2U7XG4gICAgICBsZXQgbnVtT2ZBZGRyZXNzID0gMTtcblxuICAgICAgLy9yZXF1ZXN0IGFkZHJlc3MgYWxsb2NhdGlvbiBvZiBhIG5ldyBvYmplY3QgZnJvbSB0aGUgbXNnLW5vZGVcbiAgICAgIF90aGlzLl9hbGxvY2F0b3IuY3JlYXRlKGRvbWFpbiwgbnVtT2ZBZGRyZXNzLCBvYmplY3RJbmZvLCBzY2hlbWUsIHJldXNlRGF0YU9iamVjdCkudGhlbigoYWxsb2NhdGVkKSA9PiB7XG4gICAgICAgIGxldCBvYmplY3RSZWdpc3RyYXRpb24gPSBkZWVwQ2xvbmUobXNnLmJvZHkudmFsdWUpO1xuICAgICAgICBvYmplY3RSZWdpc3RyYXRpb24udXJsID0gYWxsb2NhdGVkLmFkZHJlc3NbMF07XG4gICAgICAgIG9iamVjdFJlZ2lzdHJhdGlvbi5hdXRob3Jpc2UgPSBtc2cuYm9keS5hdXRob3Jpc2U7XG4gICAgICAgIG9iamVjdFJlZ2lzdHJhdGlvbi5jaGlsZHJlbnMgPSBjaGlsZHJlbnM7XG5cbiAgICAgICAgLy9vYmplY3RSZWdpc3RyYXRpb24uZXhwaXJlcyA9IDMwOy8vVE9ETzogZ2V0IGl0IGZyb20gZGF0YSBvYmplY3QgY29uZmlndXJhdGlvbiBkZXNjcmlwdGlvbiB3aGVuIHByZXNlbnRcblxuICAgICAgICBkZWxldGUgb2JqZWN0UmVnaXN0cmF0aW9uLmRhdGE7XG5cbiAgICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyLl9uZXdDcmVhdGVdIEFMTE9DQVRPUiBDUkVBVEU6JywgYWxsb2NhdGVkKTtcblxuICAgICAgICBsZXQgc3Vic2NyaXB0aW9uVVJMID0gb2JqZWN0UmVnaXN0cmF0aW9uLnVybCArICcvc3Vic2NyaXB0aW9uJztcblxuICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuX25ld0NyZWF0ZV0gU3Vic2NyaXB0aW9uIFVSTCcsIHN1YnNjcmlwdGlvblVSTCk7XG5cbiAgICAgICAgLy9UbyByZWdpc3RlciB0aGUgZGF0YU9iamVjdCBpbiB0aGUgcnVudGltZVJlZ2lzdHJ5XG4gICAgICAgIGxvZy5pbmZvKCdbU3luY2hlck1hbmFnZXIuX25ld0NyZWF0ZV0gUmVnaXN0ZXIgT2JqZWN0OiAnLCBvYmplY3RSZWdpc3RyYXRpb24pO1xuXG4gICAgICAgIC8vX3RoaXMuX3JlZ2lzdHJ5LnJlZ2lzdGVyRGF0YU9iamVjdChtc2cuYm9keS52YWx1ZS5uYW1lLCBtc2cuYm9keS52YWx1ZS5zY2hlbWEsIG9ialVSTCwgbXNnLmJvZHkudmFsdWUucmVwb3J0ZXIsIG1zZy5ib2R5LnZhbHVlLnJlc291cmNlcywgYWxsb2NhdGVkLCBtc2cuYm9keS5hdXRob3Jpc2UpLnRoZW4oKHJlc29sdmUpID0+IHtcbiAgICAgICAgX3RoaXMuX3JlZ2lzdHJ5LnJlZ2lzdGVyRGF0YU9iamVjdChvYmplY3RSZWdpc3RyYXRpb24pLnRoZW4oKHJlZ2lzdGVyZWRPYmplY3QpID0+IHtcbiAgICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuX25ld0NyZWF0ZV0gRGF0YU9iamVjdCBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCcsIHJlZ2lzdGVyZWRPYmplY3QpO1xuXG4gICAgICAgICAgLy9hbGwgT0sgLT4gY3JlYXRlIHJlcG9ydGVyIGFuZCByZWdpc3RlciBsaXN0ZW5lcnNcbiAgICAgICAgICBsZXQgcmVwb3J0ZXI7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX3JlcG9ydGVyc1tvYmplY3RSZWdpc3RyYXRpb24udXJsXSkge1xuICAgICAgICAgICAgcmVwb3J0ZXIgPSBuZXcgUmVwb3J0ZXJPYmplY3QoX3RoaXMsIG93bmVyLCBvYmplY3RSZWdpc3RyYXRpb24udXJsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVwb3J0ZXIgPSB0aGlzLl9yZXBvcnRlcnNbb2JqZWN0UmVnaXN0cmF0aW9uLnVybF07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyIC0gbmV3IENyZWF0ZV0gLSAnLCBtc2cpO1xuXG4gICAgICAgICAgLy8gU3RvcmUgZm9yIGVhY2ggcmVwb3J0ZXIgaHlwZXJ0eSB0aGUgZGF0YU9iamVjdFxuICAgICAgICAgIGxldCB1c2VyVVJMO1xuICAgICAgICAgIGxldCBpbnRlcndvcmtpbmcgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgnaWRlbnRpdHknKSAmJiBtc2cuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZSAmJiBtc2cuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VyVVJMKSB7XG4gICAgICAgICAgICB1c2VyVVJMID0gbXNnLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTDtcbiAgICAgICAgICAgIGlmICghdXNlclVSTC5pbmNsdWRlcygndXNlcjovLycpKSB7XG4gICAgICAgICAgICAgIGludGVyd29ya2luZyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGludGVyd29ya2luZyA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gc2hvdWxkIHdlIHVzZSB0aGUgbXNnLmJvZHkudmFsdWUgaW5zdGVhZD9cblxuICAgICAgICAgIGxldCBtZXRhZGF0YSA9IGRlZXBDbG9uZShvYmplY3RSZWdpc3RyYXRpb24pO1xuICAgICAgICAgIG1ldGFkYXRhLnN1YnNjcmliZXJVc2VyID0gdXNlclVSTDtcbiAgICAgICAgICBtZXRhZGF0YS5pc1JlcG9ydGVyID0gdHJ1ZTtcblxuICAgICAgICAgIC8vIFN0b3JlIHRoZSBkYXRhT2JqZWN0IGluZm9ybWF0aW9uXG5cbiAgICAgICAgICBpZiAoIWludGVyd29ya2luZykge1xuICAgICAgICAgICAgX3RoaXMuX2RhdGFPYmplY3RzU3RvcmFnZS5zZXQobWV0YWRhdGEpO1xuXG4gICAgICAgICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ3N0b3JlJykgJiYgbXNnLmJvZHkuc3RvcmUpIHtcbiAgICAgICAgICAgICAgcmVwb3J0ZXIuaXNUb1NhdmVEYXRhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgX3RoaXMuX2RhdGFPYmplY3RzU3RvcmFnZS51cGRhdGUodHJ1ZSwgb2JqZWN0UmVnaXN0cmF0aW9uLnVybCwgJ2lzVG9TYXZlRGF0YScsIHRydWUpO1xuXG4gICAgICAgICAgICAgIGlmIChtc2cuYm9keS52YWx1ZS5kYXRhKSB7IF90aGlzLl9kYXRhT2JqZWN0c1N0b3JhZ2Uuc2F2ZURhdGEodHJ1ZSwgb2JqZWN0UmVnaXN0cmF0aW9uLnVybCwgbnVsbCwgbXNnLmJvZHkudmFsdWUuZGF0YSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBhZGRpbmcgbGlzdGVuZXJzIHRvIGZvcndhcmQgdG8gcmVwb3J0ZXJcblxuICAgICAgICAgIHJlcG9ydGVyLmZvcndhcmRTdWJzY3JpYmUoW29iamVjdFJlZ2lzdHJhdGlvbi51cmwsIHN1YnNjcmlwdGlvblVSTF0pLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmVwb3J0ZXIuYWRkQ2hpbGRyZW5zKGNoaWxkcmVucykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIF90aGlzLl9yZXBvcnRlcnNbb2JqZWN0UmVnaXN0cmF0aW9uLnVybF0gPSByZXBvcnRlcjtcblxuICAgICAgICAgICAgICBsZXQgcmVzcG9uc2VNc2cgPSB7XG4gICAgICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogb3duZXIsXG4gICAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHJlc291cmNlOiBvYmplY3RSZWdpc3RyYXRpb24udXJsLCBjaGlsZHJlblJlc291cmNlczogY2hpbGRyZW5zIH1cbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlXG4gICAgICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVzcG9uc2VNc2cpO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcblxuICAgICAgfSk7XG4gICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgLy9GTE9XLU9VVDogZXJyb3IgbWVzc2FnZSByZXNwb25zZSB0byBTeW5jaGVyIC0+IGNyZWF0ZVxuICAgICAgbGV0IHJlc3BvbnNlTXNnID0ge1xuICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lcixcbiAgICAgICAgYm9keTogeyBjb2RlOiA1MDAsIGRlc2M6IHJlYXNvbiB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlc3BvbnNlTXNnKTtcbiAgICB9KTtcblxuICB9XG5cbiAgX3Jlc3VtZUNyZWF0ZShtc2csIHN0b3JlZE9iamVjdCkge1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXG4gICAgICBsZXQgb3duZXIgPSBtc2cuZnJvbTtcbiAgICAgIGxldCBzY2hlbWEgPSBzdG9yZWRPYmplY3Quc2NoZW1hO1xuICAgICAgbGV0IHJlc291cmNlID0gc3RvcmVkT2JqZWN0LnVybDtcbiAgICAgIGxldCBpbml0aWFsRGF0YSA9IHN0b3JlZE9iamVjdC5kYXRhO1xuXG4gICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXJdIC0gcmVzdW1lIGNyZWF0ZScsIG1zZywgc3RvcmVkT2JqZWN0KTtcblxuICAgICAgLy9nZXQgc2NoZW1hIGZyb20gY2F0YWxvZ3VlIGFuZCBwYXJzZSAtPiAoc2NoZW1lLCBjaGlsZHJlbilcbiAgICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKHNjaGVtYSkudGhlbigoZGVzY3JpcHRvcikgPT4ge1xuXG4gICAgICAgIGxldCBwcm9wZXJ0aWVzID0gZGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllcztcbiAgICAgICAgbGV0IHNjaGVtZSA9IHByb3BlcnRpZXMuc2NoZW1lID8gcHJvcGVydGllcy5zY2hlbWUuY29uc3RhbnQgOiAncmVzb3VyY2UnO1xuICAgICAgICBsZXQgY2hpbGRyZW5zID0gcHJvcGVydGllcy5jaGlsZHJlbiA/IHByb3BlcnRpZXMuY2hpbGRyZW4uY29uc3RhbnQgOiBbXTtcblxuICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXJdIC0gZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3I6ICcsIGRlc2NyaXB0b3IsIGNoaWxkcmVucyk7XG5cbiAgICAgICAgLy8gRG8gc2NoZW1hIHZhbGlkYXRpb25cbiAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgaXMgbmVlZCB0byBoYW5kbGUgd2l0aCB0aGUgcmVzdWx0IG9mIHZhbGlkYXRpb25cbiAgICAgICAgc2NoZW1hVmFsaWRhdGlvbihzY2hlbWUsIGRlc2NyaXB0b3IsIGluaXRpYWxEYXRhKTtcblxuICAgICAgICBsZXQgb2JqZWN0UmVnaXN0cmF0aW9uID0gZGVlcENsb25lKG1zZy5ib2R5LnZhbHVlKTtcbiAgICAgICAgb2JqZWN0UmVnaXN0cmF0aW9uLnVybCA9IHN0b3JlZE9iamVjdC51cmw7XG4gICAgICAgIG9iamVjdFJlZ2lzdHJhdGlvbi5leHBpcmVzID0gc3RvcmVkT2JqZWN0LmV4cGlyZXM7XG5cbiAgICAgICAgZGVsZXRlIG9iamVjdFJlZ2lzdHJhdGlvbi5kYXRhO1xuXG4gICAgICAgIC8vYWxsIE9LIC0+IGNyZWF0ZSByZXBvcnRlciBhbmQgcmVnaXN0ZXIgbGlzdGVuZXJzXG4gICAgICAgIGxldCByZXBvcnRlcjtcblxuICAgICAgICBpZiAoIXRoaXMuX3JlcG9ydGVyc1tyZXNvdXJjZV0pIHtcbiAgICAgICAgICByZXBvcnRlciA9IG5ldyBSZXBvcnRlck9iamVjdChfdGhpcywgb3duZXIsIHJlc291cmNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBvcnRlciA9IHRoaXMuX3JlcG9ydGVyc1tyZXNvdXJjZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXBvcnRlci5pc1RvU2F2ZURhdGEgPSBzdG9yZWRPYmplY3QuaXNUb1NhdmVEYXRhO1xuXG4gICAgICAgIHJlcG9ydGVyLmZvcndhcmRTdWJzY3JpYmUoW3N0b3JlZE9iamVjdC51cmxdKS50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXBvcnRlci5hZGRDaGlsZHJlbnMoY2hpbGRyZW5zKS50aGVuKCgpID0+IHtcblxuICAgICAgICAgICAgcmVwb3J0ZXIucmVzdW1lU3Vic2NyaXB0aW9ucyhzdG9yZWRPYmplY3Quc3Vic2NyaXB0aW9ucyk7XG5cbiAgICAgICAgICAgIF90aGlzLl9yZXBvcnRlcnNbcmVzb3VyY2VdID0gcmVwb3J0ZXI7XG5cbiAgICAgICAgICAgIGxvZy5pbmZvKCdbU3luY2hlck1hbmFnZXIgLSByZXN1bWUgY3JlYXRlXSAtIHJlc29sdmVkIHJlc3VtZWQ6ICcsIHN0b3JlZE9iamVjdCk7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fZGVjcnlwdENoaWxkcmVucyhzdG9yZWRPYmplY3QsIGNoaWxkcmVucyk7XG4gICAgICAgICAgfSkudGhlbigoZGVjcnlwdGVkT2JqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIC8vIGxvZy5sb2coJ3Jlc3VsdCBvZiBwcmV2aW91cyBwcm9taXNlJyk7XG4gICAgICAgICAgICByZXNvbHZlKGRlY3J5cHRlZE9iamVjdCk7XG4gICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgbG9nLmVycm9yKCdbU3luY2hlck1hbmFnZXIgLSByZXN1bWUgY3JlYXRlXSAtIGZhaWwgb24gYWRkQ2hpbGRyZW5zOiAnLCByZWFzb24pO1xuICAgICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBsb2cuaW5mbygnW1N5bmNoZXJNYW5hZ2VyLl9yZXN1bWVDcmVhdGVdIFJlZ2lzdGVyIE9iamVjdDogJywgb2JqZWN0UmVnaXN0cmF0aW9uKTtcbiAgICAgICAgX3RoaXMuX3JlZ2lzdHJ5LnJlZ2lzdGVyRGF0YU9iamVjdChvYmplY3RSZWdpc3RyYXRpb24pLnRoZW4oKHJlc29sdmUpID0+IHtcbiAgICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuX3Jlc3VtZUNyZWF0ZV0gRGF0YU9iamVjdCByZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bGx5IHVwZGF0ZWQnLCByZXNvbHZlKTtcblxuICAgICAgICB9KTtcblxuICAgICAgLy8gIHJlc29sdmUoKTtcbiAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgbG9nLmVycm9yKCdbU3luY2hlck1hbmFnZXIgLSByZXN1bWUgY3JlYXRlXSAtIGZhaWwgb24gZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3I6ICcsIHJlYXNvbik7XG4gICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvLyB0byBkZWNyeXB0IERhdGFDaGlsZE9iamVjdHMgaWYgdGhleSBhcmUgZW5jcnlwdGVkXG5cbiAgX2RlY3J5cHRDaGlsZHJlbnMoc3RvcmVkT2JqZWN0LCBjaGlsZHJlbnMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXG4gICAgICBpZiAoIWNoaWxkcmVucykgeyByZXNvbHZlKHN0b3JlZE9iamVjdCk7IH0gZWxzZSB7XG4gICAgICAgIGxldCBjaGlsZHJlbnNPYmogPSBPYmplY3Qua2V5cyhzdG9yZWRPYmplY3QuY2hpbGRyZW5PYmplY3RzKTtcblxuICAgICAgICBpZiAoY2hpbGRyZW5zT2JqLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJlc29sdmUoc3RvcmVkT2JqZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkcmVucy5mb3JFYWNoKChjaGlsZHJlbik9PntcblxuICAgICAgICAgIGxldCBjaGlsZE9iamVjdHMgPSBzdG9yZWRPYmplY3QuY2hpbGRyZW5PYmplY3RzW2NoaWxkcmVuXTtcblxuICAgICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5fZGVjcnlwdENoaWxkcmVuc10gZGF0YU9iamVjdENoaWxkcyB0byBkZWNyeXB0ICcsIGNoaWxkT2JqZWN0cyk7XG5cbiAgICAgICAgICBsZXQgbGlzdE9mRGVjcnlwdGVkT2JqZWN0cyA9IFtdO1xuXG4gICAgICAgICAgT2JqZWN0LmtleXMoY2hpbGRPYmplY3RzKS5mb3JFYWNoKChjaGlsZElkKT0+e1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRPYmplY3RzW2NoaWxkSWRdO1xuICAgICAgICAgICAgbGV0IG93bmVyID0gY2hpbGRJZC5zcGxpdCgnIycpWzBdO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkLnZhbHVlID09PSAnc3RyaW5nJykge1xuXG4gICAgICAgICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5fZGVjcnlwdENoaWxkcmVuc10gY3JlYXRlZEJ5ICcsICBvd25lciwgJyBvYmplY3Q6ICcsIGNoaWxkLnZhbHVlKTtcblxuICAgICAgICAgICAgICBsZXQgZGVjcnlwdGVkID0gX3RoaXMuX2lkZW50aXR5TW9kdWxlLmRlY3J5cHREYXRhT2JqZWN0KEpTT04ucGFyc2UoY2hpbGQudmFsdWUpLCBzdG9yZWRPYmplY3QudXJsKTtcblxuICAgICAgICAgICAgICBsaXN0T2ZEZWNyeXB0ZWRPYmplY3RzLnB1c2goZGVjcnlwdGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIFByb21pc2UuYWxsKGxpc3RPZkRlY3J5cHRlZE9iamVjdHMpLnRoZW4oKGRlY3J5cHRlZE9iamVjdHMpID0+IHtcblxuICAgICAgICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyLl9kZWNyeXB0Q2hpbGRyZW5zXSByZXR1cm5pbmcgZGVjcnlwdGVkICcsIGRlY3J5cHRlZE9iamVjdHMpO1xuXG4gICAgICAgICAgICBkZWNyeXB0ZWRPYmplY3RzLmZvckVhY2goKGRlY3J5cHRlZE9iamVjdCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBjaGlsZElkID0gZGVjcnlwdGVkT2JqZWN0LnZhbHVlLnVybDtcbiAgICAgICAgICAgICAgc3RvcmVkT2JqZWN0LmNoaWxkcmVuT2JqZWN0c1tjaGlsZHJlbl1bY2hpbGRJZF0udmFsdWUgPSBkZWNyeXB0ZWRPYmplY3QudmFsdWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyLl9kZWNyeXB0Q2hpbGRyZW5zXSBzdG9yZWRPYmplY3QgJywgc3RvcmVkT2JqZWN0KTtcblxuICAgICAgICAgICAgcmVzb2x2ZShzdG9yZWRPYmplY3QpO1xuXG4gICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgbG9nLndhcm4oJ1tTeW5jaGVyTWFuYWdlci5fZGVjcnlwdENoaWxkcmVuc10gZmFpbGVkIDogJywgcmVhc29uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBQcm9jZXNzIGludml0YXRpb25zIHRvIG9ic2VydmVyc1xuXG4gIF9hdXRob3Jpc2UobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmICghbXNnLmJvZHkucmVzb3VyY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignW1N5bmNoZXJNYW5hZ2VyLl9hdXRob3Jpc2VdIGludml0YXRpb24gcmVxdWVzdCB3aXRob3V0IGRhdGEgb2JqZWN0IHVybDonLCBtc2cpO1xuICAgIH1cblxuICAgIGxldCBvYmpTdWJzY3JpcHRvclVSTCA9IG1zZy5ib2R5LnJlc291cmNlICsgJy9zdWJzY3JpcHRpb24nO1xuICAgIGxldCBwMnAgPSBtc2cuYm9keS5wMnAgPyBtc2cuYm9keS5wMnAgOiBmYWxzZTtcblxuICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlciAtICBhdXRob3Jpc2VdIC0gJywgbXNnKTtcblxuICAgIGlmIChtc2cuYm9keS5hdXRob3Jpc2UpIHtcbiAgICAgIG1zZy5ib2R5LmF1dGhvcmlzZS5mb3JFYWNoKChoeXBlcnR5VVJMKSA9PiB7XG4gICAgICAgIC8vRkxPVy1PVVQ6IHNlbmQgaW52aXRlcyB0byBsaXN0IG9mIHJlbW90ZSBTeW5jaGVyIC0+IF9vblJlbW90ZUNyZWF0ZSAtPiBvbk5vdGlmaWNhdGlvblxuXG4gICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBvYmpTdWJzY3JpcHRvclVSTCwgdG86IGh5cGVydHlVUkwsXG4gICAgICAgICAgYm9keTogeyBwMnA6IHAycCwgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCBzb3VyY2U6IG1zZy5mcm9tLCB2YWx1ZTogbXNnLmJvZHkudmFsdWUsIHNjaGVtYTogbXNnLmJvZHkuc2NoZW1hIH1cbiAgICAgICAgfSwgKHJlcGx5KSA9PiB7IC8vIGxldHMgZm9yd2FyZCB0aGUgaW52aXRhdGlvbiByZXNwb25zZVxuICAgICAgICAgIGxldCByZXNwb25zZSA9IHtcbiAgICAgICAgICAgIGZyb206IG1zZy50byxcbiAgICAgICAgICAgIHRvOiBtc2cuZnJvbSxcbiAgICAgICAgICAgIGlkOiBtc2cuaWQsXG4gICAgICAgICAgICB0eXBlOiByZXBseS50eXBlLFxuICAgICAgICAgICAgYm9keTogcmVwbHkuYm9keVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBEYXRhT2JqZWN0UmVwb3J0ZXIgLT4gZGVsZXRlXG4gIF9vbkRlbGV0ZShtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlO1xuXG4gICAgbGV0IG9iamVjdCA9IF90aGlzLl9yZXBvcnRlcnNbb2JqVVJMXTtcbiAgICBpZiAob2JqZWN0KSB7XG4gICAgICAvL1RPRE86IGlzIHRoZXJlIGFueSBwb2xpY3kgdmVyaWZpY2F0aW9uIGJlZm9yZSBkZWxldGU/XG5cbiAgICAgIG9iamVjdC5kZWxldGUoKTtcblxuICAgICAgdGhpcy5fZGF0YU9iamVjdHNTdG9yYWdlLmRlbGV0ZVJlc291cmNlKG9ialVSTCkudGhlbigocmVzdWx0KSA9PiB7XG5cblxuICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIgLSBvbkRlbGV0ZV0gLSBkZWxldGVSZXNvdXJjZTogJywgcmVzdWx0KTtcblxuICAgICAgICBfdGhpcy5fcmVnaXN0cnkudW5yZWdpc3RlckRhdGFPYmplY3Qob2JqVVJMKTtcblxuICAgICAgICAvL1RPRE86IHVucmVnaXN0ZXIgb2JqZWN0P1xuICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSxcbiAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCB9XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcblxuICAgIH1cbiAgfVxuXG5cbiAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gbG9jYWwgU3luY2hlciAtPiBzdWJzY3JpYmVcbiAgX29uTG9jYWxTdWJzY3JpYmUobXNnKSB7XG5cbiAgICB0aGlzLl9kYXRhT2JqZWN0c1N0b3JhZ2UuZ2V0UmVzb3VyY2VzQnlDcml0ZXJpYShtc2csIGZhbHNlKS50aGVuKChyZXN1bHQpID0+IHtcblxuICAgICAgbG9nLmluZm8oJ1tTeW5jaGVyTWFuYWdlciAtIFN1YnNjcmliZV0gLSBSZXNvdXJjZXNCeUNyaXRlcmlhIHwgTWVzc2FnZTogJywgbXNnLCAnIHJlc3VsdDogJywgcmVzdWx0KTtcblxuICAgICAgaWYgKHJlc3VsdCAmJiBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA+IDApIHtcblxuICAgICAgICBsZXQgbGlzdE9mT2JzZXJ2ZXJzID0gW107XG5cbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIHJldXNlIHRoZSBzdG9yYWdlZCBpbmZvcm1hdGlvblxuICAgICAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goKG9ialVSTCkgPT4ge1xuICAgICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlciAtIHJlc3VtZSBTdWJzY3JpYmVdIC0gcmV1c2UgY3VycmVudCBvYmplY3QgdXJsOiAnLCByZXN1bHRbb2JqVVJMXSk7XG4gICAgICAgICAgbGlzdE9mT2JzZXJ2ZXJzLnB1c2godGhpcy5fcmVzdW1lU3Vic2NyaXB0aW9uKG1zZywgcmVzdWx0W29ialVSTF0pKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgUHJvbWlzZS5hbGwobGlzdE9mT2JzZXJ2ZXJzKS50aGVuKChyZXN1bWVkT2JzZXJ2ZXJzKSA9PiB7XG4gICAgICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyIC0gT2JzZXJ2ZXJzIFJlc3VtZWRdJywgcmVzdW1lZE9ic2VydmVycyk7XG5cbiAgICAgICAgICAvLyBUT0RPOiBzaG91ZCBzZW5kIHRoZSBpbmZvcm1hdGlvbiBpZiBzb21lIG9iamVjdCB3YXMgZmFpbDtcbiAgICAgICAgICBsZXQgc3VjY2Vzc2Z1bGx5UmVzdW1lZCA9IE9iamVjdC52YWx1ZXMocmVzdW1lZE9ic2VydmVycykuZmlsdGVyKChvYnNlcnZlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyICE9PSBmYWxzZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2UgcmVzcG9uc2UgdG8gU3luY2hlciAtPiBjcmVhdGVcbiAgICAgICAgICB0aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sXG4gICAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHN1Y2Nlc3NmdWxseVJlc3VtZWQgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICB9IGVsc2UgaWYgKG1zZy5ib2R5LnNjaGVtYSAmJiBtc2cuYm9keS5yZXNvdXJjZSkge1xuICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIub25Mb2NhbFN1YnNjcmliZSAtIG5ldyBTdWJzY3JpYmVdIC0gJywgbXNnLmJvZHkuc2NoZW1hLCBtc2cuYm9keS5yZXNvdXJjZSk7XG4gICAgICAgIHRoaXMuX25ld1N1YnNjcmlwdGlvbihtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9mb3J3YXJkIHRvIGh5cGVydHk6XG4gICAgICAgIGxldCByZXBseSA9IHt9O1xuICAgICAgICByZXBseS5pZCA9IG1zZy5pZDtcbiAgICAgICAgcmVwbHkuZnJvbSA9IG1zZy50bztcbiAgICAgICAgcmVwbHkudG8gPSBtc2cuZnJvbTtcbiAgICAgICAgcmVwbHkudHlwZSA9ICdyZXNwb25zZSc7XG4gICAgICAgIHJlcGx5LmJvZHkgPSB7XG4gICAgICAgICAgY29kZTogNDA0LFxuICAgICAgICAgIGRlc2M6ICdObyBkYXRhIG9iamVjdHMgb2JzZXJ2ZXJzIHRvIGJlIHJlc3VtZWQnXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2J1cy5wb3N0TWVzc2FnZShyZXBseSk7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICB9XG5cbiAgX25ld1N1YnNjcmlwdGlvbihtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlO1xuXG4gICAgbGV0IGh5cGVydHlVUkwgPSBtc2cuZnJvbTtcbiAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKG9ialVSTCkuZG9tYWluO1xuICAgIGxldCBvYmpVUkxTdWJzY3JpcHRpb24gPSBvYmpVUkwgKyAnL3N1YnNjcmlwdGlvbic7XG5cbiAgICBsZXQgY2hpbGRCYXNlVVJMID0gb2JqVVJMICsgJy9jaGlsZHJlbi8nO1xuXG4gICAgLy9nZXQgc2NoZW1hIGZyb20gY2F0YWxvZ3VlIGFuZCBwYXJzZSAtPiAoY2hpbGRyZW4pXG4gICAgX3RoaXMuX2NhdGFsb2cuZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3IobXNnLmJvZHkuc2NoZW1hKS50aGVuKChkZXNjcmlwdG9yKSA9PiB7XG4gICAgICBsZXQgcHJvcGVydGllcyA9IGRlc2NyaXB0b3Iuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXM7XG4gICAgICBsZXQgY2hpbGRyZW5zID0gcHJvcGVydGllcy5jaGlsZHJlbiA/IHByb3BlcnRpZXMuY2hpbGRyZW4uY29uc3RhbnQgOiBbXTtcblxuICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChvYmpVUkwgKyAnL2NoYW5nZXMnKTtcblxuICAgICAgY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiBzdWJzY3JpcHRpb25zLnB1c2goY2hpbGRCYXNlVVJMICsgY2hpbGQpKTtcblxuICAgICAgLy9jaGlsZHJlbiBhZGRyZXNzZXNcblxuICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gdGhlIG1zZy1ub2RlLCByZWdpc3RlcmluZyBsaXN0ZW5lcnMgb24gdGhlIGJyb2tlclxuICAgICAgbGV0IG5vZGVTdWJzY3JpYmVNc2cgPSB7XG4gICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL3NtJyxcbiAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHJlc291cmNlczogc3Vic2NyaXB0aW9ucywgc291cmNlOiBoeXBlcnR5VVJMIH1cbiAgICAgIH07XG5cbiAgICAgIC8vc3Vic2NyaWJlIGluIG1zZy1ub2RlXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIChyZXBseSkgPT4ge1xuICAgICAgICBsb2cubG9nKCdub2RlLXN1YnNjcmliZS1yZXNwb25zZShvYnNlcnZlcik6ICcsIHJlcGx5KTtcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG5cbiAgICAgICAgICAvL0ZMT1ctT1VUOiByZXBseSB3aXRoIHByb3Zpc2lvbmFsIHJlc3BvbnNlXG4gICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBoeXBlcnR5VVJMLFxuICAgICAgICAgICAgYm9keTogeyBjb2RlOiAxMDAsIGNoaWxkcmVuUmVzb3VyY2VzOiBjaGlsZHJlbnMsIHNjaGVtYTogbXNnLmJvZHkuc2NoZW1hLCByZXNvdXJjZTogbXNnLmJvZHkucmVzb3VyY2UgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gcmVtb3RlIFJlcG9ydGVyT2JqZWN0IC0+IF9vblJlbW90ZVN1YnNjcmliZVxuICAgICAgICAgIGxldCBvYmpTdWJzY3JpYmVNc2cgPSB7XG4gICAgICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbixcbiAgICAgICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG5vZGVTdWJzY3JpYmVNc2cuYm9keS5pZGVudGl0eSwgc3Vic2NyaWJlcjogaHlwZXJ0eVVSTCB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vVE9ETzogRm9yIEZ1cnRoZXIgU3R1ZHlcbiAgICAgICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ211dHVhbCcpKSBvYmpTdWJzY3JpYmVNc2cuYm9keS5tdXR1YWwgPSBtc2cuYm9keS5tdXR1YWw7XG4gICAgICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyLl9uZXdTdWJzY3JpcHRpb25dJywgb2JqU3Vic2NyaWJlTXNnLCBtc2cpO1xuXG4gICAgICAgICAgLy9zdWJzY3JpYmUgdG8gcmVwb3J0ZXIgU01cbiAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG9ialN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgICBsb2cubG9nKCdyZXBvcnRlci1zdWJzY3JpYmUtcmVzcG9uc2UtbmV3OiAnLCByZXBseSk7XG4gICAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcblxuICAgICAgICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuX25ld1N1YnNjcmlwdGlvbl0gLSBvYnNlcnZlcnM6ICcsIF90aGlzLl9vYnNlcnZlcnMsIG9ialVSTCwgX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdKTtcblxuICAgICAgICAgICAgICBsZXQgb2JzZXJ2ZXIgPSBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF07XG4gICAgICAgICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBPYnNlcnZlck9iamVjdChfdGhpcywgb2JqVVJMLCBjaGlsZHJlbnMpO1xuICAgICAgICAgICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5fbmV3U3Vic2NyaXB0aW9uXSAtIG9ic2VydmVyczogY3JlYXRlIG5ldyBPYnNlcnZlck9iamVjdDogJywgb2JzZXJ2ZXIpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXSA9IG9ic2VydmVyO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVnaXN0ZXIgbmV3IGh5cGVydHkgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuYWRkU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpO1xuXG4gICAgICAgICAgICAgICAgLy8gYWRkIGNoaWxkcmVucyBhbmQgbGlzdGVuZXJzIHRvIHNhdmUgZGF0YSBpZiBuZWNlc3NhcnlcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5hZGRDaGlsZHJlbnMoY2hpbGRyZW5zKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGxldCBpbnRlcndvcmtpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAvLyBTdG9yZSBmb3IgZWFjaCByZXBvcnRlciBoeXBlcnR5IHRoZSBkYXRhT2JqZWN0XG4gICAgICAgICAgICAgIGxldCB1c2VyVVJMO1xuICAgICAgICAgICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ2lkZW50aXR5JykgJiYgbXNnLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUgJiYgbXNnLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTCkge1xuICAgICAgICAgICAgICAgIHVzZXJVUkwgPSBtc2cuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VyVVJMO1xuICAgICAgICAgICAgICAgIGlmICghdXNlclVSTC5pbmNsdWRlcygndXNlcjovLycpKSB7XG4gICAgICAgICAgICAgICAgICBpbnRlcndvcmtpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnRlcndvcmtpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbGV0IG1ldGFkYXRhID0gZGVlcENsb25lKHJlcGx5LmJvZHkudmFsdWUpO1xuXG4gICAgICAgICAgICAgIC8vIGxldCBjaGlsZHJlbk9iamVjdHMgPSBtZXRhZGF0YS5jaGlsZHJlbk9iamVjdHMgfHwge307XG5cbiAgICAgICAgICAgICAgZGVsZXRlIG1ldGFkYXRhLmRhdGE7XG4gICAgICAgICAgICAgIGRlbGV0ZSBtZXRhZGF0YS5jaGlsZHJlbk9iamVjdHM7XG5cbiAgICAgICAgICAgICAgbWV0YWRhdGEuY2hpbGRyZW5zID0gY2hpbGRyZW5zO1xuICAgICAgICAgICAgICBtZXRhZGF0YS5zdWJzY3JpYmVyVXNlciA9IHVzZXJVUkw7XG4gICAgICAgICAgICAgIG1ldGFkYXRhLmlzUmVwb3J0ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgbWV0YWRhdGEuc3Vic2NyaWJlckh5cGVydHkgPSBoeXBlcnR5VVJMO1xuXG4gICAgICAgICAgICAgIGlmICghaW50ZXJ3b3JraW5nKSB7XG4gICAgICAgICAgICAgICAgLy9fdGhpcy5fZGF0YU9iamVjdHNTdG9yYWdlLnNldChvYmpVUkwsIGZhbHNlLCBtc2cuYm9keS5zY2hlbWEsICdvbicsIHJlcGx5LmJvZHkub3duZXIsIGh5cGVydHlVUkwsIGNoaWxkcmVucywgdXNlclVSTCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2RhdGFPYmplY3RzU3RvcmFnZS5zZXQobWV0YWRhdGEpO1xuICAgICAgICAgICAgICAgIGlmICgobWV0YWRhdGEuaGFzT3duUHJvcGVydHkoJ3N0b3JlJykgJiYgbWV0YWRhdGEuc3RvcmUpIHx8IChtZXRhZGF0YS5oYXNPd25Qcm9wZXJ0eSgnaXNUb1NhdmVEYXRhJykgJiYgbWV0YWRhdGEuaXNUb1NhdmVEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuaXNUb1NhdmVEYXRhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIF90aGlzLl9kYXRhT2JqZWN0c1N0b3JhZ2UudXBkYXRlKGZhbHNlLCBvYmpVUkwsICdpc1RvU2F2ZURhdGEnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgIF90aGlzLl9kYXRhT2JqZWN0c1N0b3JhZ2Uuc2F2ZURhdGEoZmFsc2UsIG9ialVSTCwgbnVsbCwgcmVwbHkuYm9keS52YWx1ZS5kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvL2ZvcndhcmQgdG8gaHlwZXJ0eTpcbiAgICAgICAgICAgICAgcmVwbHkuaWQgPSBtc2cuaWQ7XG4gICAgICAgICAgICAgIHJlcGx5LmZyb20gPSBfdGhpcy5fdXJsO1xuICAgICAgICAgICAgICByZXBseS50byA9IGh5cGVydHlVUkw7XG4gICAgICAgICAgICAgIHJlcGx5LmJvZHkuc2NoZW1hID0gbXNnLmJvZHkuc2NoZW1hO1xuICAgICAgICAgICAgICByZXBseS5ib2R5LnJlc291cmNlID0gbXNnLmJvZHkucmVzb3VyY2U7XG5cbiAgICAgICAgICAgICAgLy9UT0RPOiBGb3IgRnVydGhlciBTdHVkeVxuICAgICAgICAgICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ211dHVhbCcpKSByZXBseS5ib2R5Lm11dHVhbCA9IG1zZy5ib2R5Lm11dHVhbDtcbiAgICAgICAgICAgICAgbG9nLmxvZygnW3N1YnNjcmliZV0gLSBuZXcgc3Vic2NyaXB0aW9uOiAnLCBtc2csIHJlcGx5LCBvYnNlcnZlcik7XG5cbiAgICAgICAgICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlcGx5KTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9saXN0ZW5lciByZWplY3RlZFxuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCxcbiAgICAgICAgICAgIGJvZHk6IHJlcGx5LmJvZHlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgX3Jlc3VtZVN1YnNjcmlwdGlvbihtc2csIHN0b3JlZE9iamVjdCkge1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cbiAgICAgIGxldCBvYmpVUkwgPSBzdG9yZWRPYmplY3QudXJsO1xuICAgICAgbGV0IHNjaGVtYSA9IHN0b3JlZE9iamVjdC5zY2hlbWE7XG5cbiAgICAgIGxldCBoeXBlcnR5VVJMID0gbXNnLmZyb207XG5cbiAgICAgIC8vIGxldCBvYmpVUkxTdWJzY3JpcHRpb24gPSBvYmpVUkwgKyAnL3N1YnNjcmlwdGlvbic7XG5cbiAgICAgIGxldCBjaGlsZEJhc2VVUkwgPSBvYmpVUkwgKyAnL2NoaWxkcmVuLyc7XG5cbiAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlciAtIFJldXNlU3Vic2NyaXB0aW9uXSAtIG9ialVSTDogJywgb2JqVVJMLCAnIC0gc2NoZW1hOicsIHNjaGVtYSk7XG5cbiAgICAgIC8vZ2V0IHNjaGVtYSBmcm9tIGNhdGFsb2d1ZSBhbmQgcGFyc2UgLT4gKGNoaWxkcmVuKVxuICAgICAgLy8gVE9ETzogcmVtb3ZlIHRoaXMgc2luY2UgY2hpbGRyZW4gcmVzb3VyY2VzIHNob3VsZCBiZSBhdmFpbGFibGUgaW4gdGhlIERhdGFPYmplY3RzU3RvcmFnZVxuICAgICAgdGhpcy5fY2F0YWxvZy5nZXREYXRhU2NoZW1hRGVzY3JpcHRvcihzY2hlbWEpLnRoZW4oKGRlc2NyaXB0b3IpID0+IHtcbiAgICAgICAgbGV0IHByb3BlcnRpZXMgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzO1xuICAgICAgICBsZXQgY2hpbGRyZW5zID0gcHJvcGVydGllcy5jaGlsZHJlbiA/IHByb3BlcnRpZXMuY2hpbGRyZW4uY29uc3RhbnQgOiBbXTtcblxuICAgICAgICAvL2NoaWxkcmVuIGFkZHJlc3Nlc1xuICAgICAgICBsZXQgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2gob2JqVVJMICsgJy9jaGFuZ2VzJyk7XG4gICAgICAgIGNoaWxkcmVucy5mb3JFYWNoKChjaGlsZCkgPT4gc3Vic2NyaXB0aW9ucy5wdXNoKGNoaWxkQmFzZVVSTCArIGNoaWxkKSk7XG5cbiAgICAgICAgLy9GTE9XLU9VVDogcmVwbHkgd2l0aCBwcm92aXNpb25hbCByZXNwb25zZVxuICAgICAgICB0aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsXG4gICAgICAgICAgYm9keTogeyBjb2RlOiAxMDAsIGNoaWxkcmVuUmVzb3VyY2VzOiBjaGlsZHJlbnMsIHNjaGVtYTogc2NoZW1hLCByZXNvdXJjZTogb2JqVVJMIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gcmVtb3RlIFJlcG9ydGVyT2JqZWN0IC0+IF9vblJlbW90ZVN1YnNjcmliZVxuICAgICAgICAvKmxldCBvYmpTdWJzY3JpYmVNc2cgPSB7XG4gICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IHRoaXMuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbixcbiAgICAgICAgICBib2R5OiB7IHN1YnNjcmliZXI6IGh5cGVydHlVUkwsIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy9zdWJzY3JpYmUgdG8gcmVwb3J0ZXIgU01cbiAgICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG9ialN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7Ki9cblxuICAgICAgICBsZXQgb2JzZXJ2ZXIgPSB0aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTtcbiAgICAgICAgaWYgKCFvYnNlcnZlcikge1xuICAgICAgICAgIG9ic2VydmVyID0gbmV3IE9ic2VydmVyT2JqZWN0KHRoaXMsIG9ialVSTCwgY2hpbGRyZW5zKTtcbiAgICAgICAgICBvYnNlcnZlci5pc1RvU2F2ZURhdGEgPSBzdG9yZWRPYmplY3QuaXNUb1NhdmVEYXRhO1xuICAgICAgICAgIHRoaXMuX29ic2VydmVyc1tvYmpVUkxdID0gb2JzZXJ2ZXI7XG4gICAgICAgIH1cblxuICAgICAgICAvL3JlZ2lzdGVyIG5ldyBoeXBlcnR5IHN1YnNjcmlwdGlvblxuICAgICAgICBvYnNlcnZlci5hZGRTdWJzY3JpcHRpb24oaHlwZXJ0eVVSTCk7XG4gICAgICAgIG9ic2VydmVyLmFkZENoaWxkcmVucyhjaGlsZHJlbnMpO1xuXG4gICAgICAgIC8vIE9iamVjdC5hc3NpZ24oc3RvcmVkT2JqZWN0LmRhdGEsIHJlcGx5LmJvZHkudmFsdWUuZGF0YSk7XG4gICAgICAgIC8vIE9iamVjdC5hc3NpZ24oc3RvcmVkT2JqZWN0LmNoaWxkcmVucywgcmVwbHkuYm9keS52YWx1ZS5jaGlsZHJlbnMpO1xuXG4gICAgICAgIC8vbG9nLmxvZygnW3N1YnNjcmliZV0gLSByZXN1bWUgc3Vic2NyaXB0aW9uOiAnLCBtc2csIHJlcGx5LCBzdG9yZWRPYmplY3QsIG9ic2VydmVyKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZGVjcnlwdENoaWxkcmVucyhzdG9yZWRPYmplY3QsIGNoaWxkcmVucyk7XG4gICAgICB9KS50aGVuKChkZWNyeXB0ZWRPYmplY3QpID0+IHtcbiAgICAgICAgLy8gbG9nLmxvZygncmVzdWx0IG9mIHByZXZpb3VzIHByb21pc2UnKTtcbiAgICAgICAgcmVzb2x2ZShkZWNyeXB0ZWRPYmplY3QpO1xuICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICBsb2cuZXJyb3IoJ1tTeW5jaGVyTWFuYWdlciAtIHJlc3VtZSBzdWJzY3JpcHRpb25dIC0gZmFpbCBvbiBnZXREYXRhU2NoZW1hRGVzY3JpcHRvcjogJywgcmVhc29uKTtcbiAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGxvY2FsIERhdGFPYmplY3RPYnNlcnZlciAtPiB1bnN1YnNjcmliZVxuICBfb25Mb2NhbFVuU3Vic2NyaWJlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgaHlwZXJ0eVVSTCA9IG1zZy5mcm9tO1xuICAgIGxldCBvYmpVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTtcblxuICAgIGxldCBvYnNlcnZlciA9IF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTtcbiAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgIC8vVE9ETzogaXMgdGhlcmUgYW55IHBvbGljeSB2ZXJpZmljYXRpb24gYmVmb3JlIGRlbGV0ZT9cbiAgICAgIG9ic2VydmVyLnJlbW92ZVN1YnNjcmlwdGlvbihtc2cpO1xuXG4gICAgICAvL1RPRE86IGRlc3Ryb3kgb2JqZWN0IGluIHRoZSByZWdpc3RyeT9cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSxcbiAgICAgICAgYm9keTogeyBjb2RlOiAyMDAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2RhdGFPYmplY3RzU3RvcmFnZS5kZWxldGVSZXNvdXJjZShvYmpVUkwpO1xuXG4gICAgICAvL1RPRE86IHJlbW92ZSBPYmplY3QgaWYgbm8gbW9yZSBzdWJzY3JpcHRpb24/XG4gICAgICBkZWxldGUgX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdO1xuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFN5bmNoZXJNYW5hZ2VyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9zeW5jaGVyL1N5bmNoZXJNYW5hZ2VyLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQTtBQUNBO0FBREE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7OztBQVJBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUZBO0FBQ0E7QUFVQTs7OztBQUlBO0FBQ0E7Ozs7Ozs7OztBQVVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBSkE7QUFNQTtBQUVBO0FBQ0E7Ozs7O0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7OztBQUVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFFQTtBQUVBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBRUE7QUFFQTs7O0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFsc0JBO0FBQUE7QUFBQTs7Ozs7QUFzc0JBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///495\n");
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(497);\nmodule.exports = __webpack_require__(13).Object.values;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvdmFsdWVzLmpzPzRlNjUiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnZhbHVlcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvdmFsdWVzLmpzXG4vLyBtb2R1bGUgaWQgPSA0OTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///496\n");
    }, function(module, exports, __webpack_require__) {
        eval("// https://github.com/tc39/proposal-object-values-entries\nvar $export = __webpack_require__(26);\nvar $values = __webpack_require__(498)(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzLmpzPzdkOTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcy5qc1xuLy8gbW9kdWxlIGlkID0gNDk3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///497\n");
    }, function(module, exports, __webpack_require__) {
        eval("var getKeys = __webpack_require__(67);\nvar toIObject = __webpack_require__(45);\nvar isEnum = __webpack_require__(77).f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanM/OTliNyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGlzRW51bSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgTyA9IHRvSU9iamVjdChpdCk7XG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBrZXk7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKSB7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC10by1hcnJheS5qc1xuLy8gbW9kdWxlIGlkID0gNDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///498\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __webpack_require__(40);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nexports.schemaValidation = schemaValidation;\n\nvar _tv = __webpack_require__(500);\n\nvar _tv2 = _interopRequireDefault(_tv);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction schemaValidation(scheme, descriptor, value) {\n\n  console.log('Scheme: ', scheme);\n\n  // schema validation\n  console.log('Running object validation...');\n  try {\n    var obj = value;\n    var schema = descriptor.sourcePackage.sourceCode;\n\n    // add support for schema referencing itself\n    _tv2.default.addSchema(schema.id, schema);\n\n    // validate\n    var result = _tv2.default.validateMultiple(obj, schema);\n\n    // delete error stacks to improve logging\n    result.errors.forEach(function (error) {\n      delete error.stack;\n    });\n\n    // print more details about validation if it fails or schema contains $refs\n    if (!result.valid || result.missing.length > 0) {\n      console.warn('Object validation ' + (result.valid ? 'succeeded, but schema contained references:' : 'failed:'), (0, _stringify2.default)(result, null, 2));\n      console.debug('Object:', (0, _stringify2.default)(obj, null, 2), '\\r\\nSchema:', (0, _stringify2.default)(schema, null, 2));\n    } else {\n      console.log('Object validation succeeded');\n    }\n  } catch (e) {\n    console.warn('Error during object validation:', e);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDk5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy91dGlscy9zY2hlbWFWYWxpZGF0aW9uLmpzP2JkODkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR2NCBmcm9tICcuL3R2NCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2hlbWFWYWxpZGF0aW9uKHNjaGVtZSwgZGVzY3JpcHRvciwgdmFsdWUpIHtcblxuICBjb25zb2xlLmxvZygnU2NoZW1lOiAnLCBzY2hlbWUpO1xuXG4gIC8vIHNjaGVtYSB2YWxpZGF0aW9uXG4gIGNvbnNvbGUubG9nKCdSdW5uaW5nIG9iamVjdCB2YWxpZGF0aW9uLi4uJyk7XG4gIHRyeSB7XG4gICAgbGV0IG9iaiA9IHZhbHVlO1xuICAgIGxldCBzY2hlbWEgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZTtcblxuICAgIC8vIGFkZCBzdXBwb3J0IGZvciBzY2hlbWEgcmVmZXJlbmNpbmcgaXRzZWxmXG4gICAgdHY0LmFkZFNjaGVtYShzY2hlbWEuaWQsIHNjaGVtYSk7XG5cbiAgICAvLyB2YWxpZGF0ZVxuICAgIGxldCByZXN1bHQgPSB0djQudmFsaWRhdGVNdWx0aXBsZShvYmosIHNjaGVtYSk7XG5cbiAgICAvLyBkZWxldGUgZXJyb3Igc3RhY2tzIHRvIGltcHJvdmUgbG9nZ2luZ1xuICAgIHJlc3VsdC5lcnJvcnMuZm9yRWFjaCgoZXJyb3IpID0+IHtcbiAgICAgIGRlbGV0ZSBlcnJvci5zdGFjaztcbiAgICB9KTtcblxuICAgIC8vIHByaW50IG1vcmUgZGV0YWlscyBhYm91dCB2YWxpZGF0aW9uIGlmIGl0IGZhaWxzIG9yIHNjaGVtYSBjb250YWlucyAkcmVmc1xuICAgIGlmICghcmVzdWx0LnZhbGlkIHx8IChyZXN1bHQubWlzc2luZy5sZW5ndGggPiAwKSkge1xuICAgICAgY29uc29sZS53YXJuKCdPYmplY3QgdmFsaWRhdGlvbiAnICsgKHJlc3VsdC52YWxpZCA/ICdzdWNjZWVkZWQsIGJ1dCBzY2hlbWEgY29udGFpbmVkIHJlZmVyZW5jZXM6JyA6ICdmYWlsZWQ6JyksIEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgMikpO1xuICAgICAgY29uc29sZS5kZWJ1ZygnT2JqZWN0OicsIEpTT04uc3RyaW5naWZ5KG9iaiwgbnVsbCwgMiksICdcXHJcXG5TY2hlbWE6JywgSlNPTi5zdHJpbmdpZnkoc2NoZW1hLCBudWxsLCAyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdPYmplY3QgdmFsaWRhdGlvbiBzdWNjZWVkZWQnKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLndhcm4oJ0Vycm9yIGR1cmluZyBvYmplY3QgdmFsaWRhdGlvbjonLCBlKTtcbiAgfVxuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3V0aWxzL3NjaGVtYVZhbGlkYXRpb24uanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFQTtBQUNBO0FBSEE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///499\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _stringify = __webpack_require__(40);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _defineProperty = __webpack_require__(197);\n\nvar _defineProperty2 = _interopRequireDefault(_defineProperty);\n\nvar _isFrozen = __webpack_require__(501);\n\nvar _isFrozen2 = _interopRequireDefault(_isFrozen);\n\nvar _create = __webpack_require__(199);\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _typeof2 = __webpack_require__(98);\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nvar _keys = __webpack_require__(46);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n Author: Geraint Luff and others\n Year: 2013\n\n This code is released into the \"public domain\" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.\n\n If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.\n */\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys\nif (!_keys2.default) {\n    Object.keys = function () {\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n            hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),\n            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],\n            dontEnumsLength = dontEnums.length;\n\n        return function (obj) {\n            if ((typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) !== 'object' && typeof obj !== 'function' || obj === null) {\n                throw new TypeError('Object.keys called on non-object');\n            }\n\n            var result = [];\n\n            for (var prop in obj) {\n                if (hasOwnProperty.call(obj, prop)) {\n                    result.push(prop);\n                }\n            }\n\n            if (hasDontEnumBug) {\n                for (var i = 0; i < dontEnumsLength; i++) {\n                    if (hasOwnProperty.call(obj, dontEnums[i])) {\n                        result.push(dontEnums[i]);\n                    }\n                }\n            }\n            return result;\n        };\n    }();\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\nif (!_create2.default) {\n    Object.create = function () {\n        function F() {}\n\n        return function (o) {\n            if (arguments.length !== 1) {\n                throw new Error('Object.create implementation only accepts one parameter.');\n            }\n            F.prototype = o;\n            return new F();\n        };\n    }();\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray\nif (!Array.isArray) {\n    Array.isArray = function (vArg) {\n        return Object.prototype.toString.call(vArg) === \"[object Array]\";\n    };\n}\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (searchElement /*, fromIndex */) {\n        if (this === null) {\n            throw new TypeError();\n        }\n        var t = Object(this);\n        var len = t.length >>> 0;\n\n        if (len === 0) {\n            return -1;\n        }\n        var n = 0;\n        if (arguments.length > 1) {\n            n = Number(arguments[1]);\n            if (n !== n) {\n                // shortcut for verifying if it's NaN\n                n = 0;\n            } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n                n = (n > 0 || -1) * Math.floor(Math.abs(n));\n            }\n        }\n        if (n >= len) {\n            return -1;\n        }\n        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n        for (; k < len; k++) {\n            if (k in t && t[k] === searchElement) {\n                return k;\n            }\n        }\n        return -1;\n    };\n}\n\n// Grungey Object.isFrozen hack\nif (!_isFrozen2.default) {\n    Object.isFrozen = function (obj) {\n        var key = \"tv4_test_frozen_key\";\n        while (obj.hasOwnProperty(key)) {\n            key += Math.random();\n        }\n        try {\n            obj[key] = true;\n            delete obj[key];\n            return false;\n        } catch (e) {\n            return true;\n        }\n    };\n}\n// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed\n\nvar uriTemplateGlobalModifiers = {\n    \"+\": true,\n    \"#\": true,\n    \".\": true,\n    \"/\": true,\n    \";\": true,\n    \"?\": true,\n    \"&\": true\n};\nvar uriTemplateSuffices = {\n    \"*\": true\n};\n\nfunction notReallyPercentEncode(string) {\n    return encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {\n        return \"%\" + doubleEncoded.substring(3);\n    });\n}\n\nfunction uriTemplateSubstitution(spec) {\n    var modifier = \"\";\n    if (uriTemplateGlobalModifiers[spec.charAt(0)]) {\n        modifier = spec.charAt(0);\n        spec = spec.substring(1);\n    }\n    var separator = \"\";\n    var prefix = \"\";\n    var shouldEscape = true;\n    var showVariables = false;\n    var trimEmptyString = false;\n    if (modifier === '+') {\n        shouldEscape = false;\n    } else if (modifier === \".\") {\n        prefix = \".\";\n        separator = \".\";\n    } else if (modifier === \"/\") {\n        prefix = \"/\";\n        separator = \"/\";\n    } else if (modifier === '#') {\n        prefix = \"#\";\n        shouldEscape = false;\n    } else if (modifier === ';') {\n        prefix = \";\";\n        separator = \";\";\n        showVariables = true;\n        trimEmptyString = true;\n    } else if (modifier === '?') {\n        prefix = \"?\";\n        separator = \"&\";\n        showVariables = true;\n    } else if (modifier === '&') {\n        prefix = \"&\";\n        separator = \"&\";\n        showVariables = true;\n    }\n\n    var varNames = [];\n    var varList = spec.split(\",\");\n    var varSpecs = [];\n    var varSpecMap = {};\n    for (var i = 0; i < varList.length; i++) {\n        var varName = varList[i];\n        var truncate = null;\n        if (varName.indexOf(\":\") !== -1) {\n            var parts = varName.split(\":\");\n            varName = parts[0];\n            truncate = parseInt(parts[1], 10);\n        }\n        var suffices = {};\n        while (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {\n            suffices[varName.charAt(varName.length - 1)] = true;\n            varName = varName.substring(0, varName.length - 1);\n        }\n        var varSpec = {\n            truncate: truncate,\n            name: varName,\n            suffices: suffices\n        };\n        varSpecs.push(varSpec);\n        varSpecMap[varName] = varSpec;\n        varNames.push(varName);\n    }\n    var subFunction = function subFunction(valueFunction) {\n        var result = \"\";\n        var startIndex = 0;\n        for (var i = 0; i < varSpecs.length; i++) {\n            var varSpec = varSpecs[i];\n            var value = valueFunction(varSpec.name);\n            if (value === null || value === undefined || Array.isArray(value) && value.length === 0 || (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && (0, _keys2.default)(value).length === 0) {\n                startIndex++;\n                continue;\n            }\n            if (i === startIndex) {\n                result += prefix;\n            } else {\n                result += separator || \",\";\n            }\n            if (Array.isArray(value)) {\n                if (showVariables) {\n                    result += varSpec.name + \"=\";\n                }\n                for (var j = 0; j < value.length; j++) {\n                    if (j > 0) {\n                        result += varSpec.suffices['*'] ? separator || \",\" : \",\";\n                        if (varSpec.suffices['*'] && showVariables) {\n                            result += varSpec.name + \"=\";\n                        }\n                    }\n                    result += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[j]);\n                }\n            } else if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === \"object\") {\n                if (showVariables && !varSpec.suffices['*']) {\n                    result += varSpec.name + \"=\";\n                }\n                var first = true;\n                for (var key in value) {\n                    if (!first) {\n                        result += varSpec.suffices['*'] ? separator || \",\" : \",\";\n                    }\n                    first = false;\n                    result += shouldEscape ? encodeURIComponent(key).replace(/!/g, \"%21\") : notReallyPercentEncode(key);\n                    result += varSpec.suffices['*'] ? '=' : \",\";\n                    result += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, \"%21\") : notReallyPercentEncode(value[key]);\n                }\n            } else {\n                if (showVariables) {\n                    result += varSpec.name;\n                    if (!trimEmptyString || value !== \"\") {\n                        result += \"=\";\n                    }\n                }\n                if (varSpec.truncate != null) {\n                    value = value.substring(0, varSpec.truncate);\n                }\n                result += shouldEscape ? encodeURIComponent(value).replace(/!/g, \"%21\") : notReallyPercentEncode(value);\n            }\n        }\n        return result;\n    };\n    subFunction.varNames = varNames;\n    return {\n        prefix: prefix,\n        substitution: subFunction\n    };\n}\n\nfunction UriTemplate(template) {\n    if (!(this instanceof UriTemplate)) {\n        return new UriTemplate(template);\n    }\n    var parts = template.split(\"{\");\n    var textParts = [parts.shift()];\n    var prefixes = [];\n    var substitutions = [];\n    var varNames = [];\n    while (parts.length > 0) {\n        var part = parts.shift();\n        var spec = part.split(\"}\")[0];\n        var remainder = part.substring(spec.length + 1);\n        var funcs = uriTemplateSubstitution(spec);\n        substitutions.push(funcs.substitution);\n        prefixes.push(funcs.prefix);\n        textParts.push(remainder);\n        varNames = varNames.concat(funcs.substitution.varNames);\n    }\n    this.fill = function (valueFunction) {\n        var result = textParts[0];\n        for (var i = 0; i < substitutions.length; i++) {\n            var substitution = substitutions[i];\n            result += substitution(valueFunction);\n            result += textParts[i + 1];\n        }\n        return result;\n    };\n    this.varNames = varNames;\n    this.template = template;\n}\n\nUriTemplate.prototype = {\n    toString: function toString() {\n        return this.template;\n    },\n    fillFromObject: function fillFromObject(obj) {\n        return this.fill(function (varName) {\n            return obj[varName];\n        });\n    }\n};\nvar ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {\n    this.missing = [];\n    this.missingMap = {};\n    this.formatValidators = parent ? (0, _create2.default)(parent.formatValidators) : {};\n    this.schemas = parent ? (0, _create2.default)(parent.schemas) : {};\n    this.collectMultiple = collectMultiple;\n    this.errors = [];\n    this.handleError = collectMultiple ? this.collectError : this.returnError;\n    if (checkRecursive) {\n        this.checkRecursive = true;\n        this.scanned = [];\n        this.scannedFrozen = [];\n        this.scannedFrozenSchemas = [];\n        this.scannedFrozenValidationErrors = [];\n        this.validatedSchemasKey = 'tv4_validation_id';\n        this.validationErrorsKey = 'tv4_validation_errors_id';\n    }\n    if (trackUnknownProperties) {\n        this.trackUnknownProperties = true;\n        this.knownPropertyPaths = {};\n        this.unknownPropertyPaths = {};\n    }\n    this.errorReporter = errorReporter || defaultErrorReporter('en');\n    if (typeof this.errorReporter === 'string') {\n        throw new Error('debug');\n    }\n    this.definedKeywords = {};\n    if (parent) {\n        for (var key in parent.definedKeywords) {\n            this.definedKeywords[key] = parent.definedKeywords[key].slice(0);\n        }\n    }\n};\nValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {\n    this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];\n    this.definedKeywords[keyword].push(keywordFunction);\n};\nValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {\n    var error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);\n    error.message = this.errorReporter(error, data, schema);\n    return error;\n};\nValidatorContext.prototype.returnError = function (error) {\n    return error;\n};\nValidatorContext.prototype.collectError = function (error) {\n    if (error) {\n        this.errors.push(error);\n    }\n    return null;\n};\nValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {\n    for (var i = startIndex; i < this.errors.length; i++) {\n        this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);\n    }\n    return this;\n};\nValidatorContext.prototype.banUnknownProperties = function (data, schema) {\n    for (var unknownPath in this.unknownPropertyPaths) {\n        var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, { path: unknownPath }, unknownPath, \"\", null, data, schema);\n        var result = this.handleError(error);\n        if (result) {\n            return result;\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.addFormat = function (format, validator) {\n    if ((typeof format === 'undefined' ? 'undefined' : (0, _typeof3.default)(format)) === 'object') {\n        for (var key in format) {\n            this.addFormat(key, format[key]);\n        }\n        return this;\n    }\n    this.formatValidators[format] = validator;\n};\nValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {\n    if (schema['$ref'] !== undefined) {\n        urlHistory = urlHistory || {};\n        if (urlHistory[schema['$ref']]) {\n            return this.createError(ErrorCodes.CIRCULAR_REFERENCE, { urls: (0, _keys2.default)(urlHistory).join(', ') }, '', '', null, undefined, schema);\n        }\n        urlHistory[schema['$ref']] = true;\n        schema = this.getSchema(schema['$ref'], urlHistory);\n    }\n    return schema;\n};\nValidatorContext.prototype.getSchema = function (url, urlHistory) {\n    var schema;\n    if (this.schemas[url] !== undefined) {\n        schema = this.schemas[url];\n        return this.resolveRefs(schema, urlHistory);\n    }\n    var baseUrl = url;\n    var fragment = \"\";\n    if (url.indexOf('#') !== -1) {\n        fragment = url.substring(url.indexOf(\"#\") + 1);\n        baseUrl = url.substring(0, url.indexOf(\"#\"));\n    }\n    if ((0, _typeof3.default)(this.schemas[baseUrl]) === 'object') {\n        schema = this.schemas[baseUrl];\n        var pointerPath = decodeURIComponent(fragment);\n        if (pointerPath === \"\") {\n            return this.resolveRefs(schema, urlHistory);\n        } else if (pointerPath.charAt(0) !== \"/\") {\n            return undefined;\n        }\n        var parts = pointerPath.split(\"/\").slice(1);\n        for (var i = 0; i < parts.length; i++) {\n            var component = parts[i].replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n            if (schema[component] === undefined) {\n                schema = undefined;\n                break;\n            }\n            schema = schema[component];\n        }\n        if (schema !== undefined) {\n            return this.resolveRefs(schema, urlHistory);\n        }\n    }\n    if (this.missing[baseUrl] === undefined) {\n        this.missing.push(baseUrl);\n        this.missing[baseUrl] = baseUrl;\n        this.missingMap[baseUrl] = baseUrl;\n    }\n};\nValidatorContext.prototype.searchSchemas = function (schema, url) {\n    if (Array.isArray(schema)) {\n        for (var i = 0; i < schema.length; i++) {\n            this.searchSchemas(schema[i], url);\n        }\n    } else if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === \"object\") {\n        if (typeof schema.id === \"string\") {\n            if (isTrustedUrl(url, schema.id)) {\n                if (this.schemas[schema.id] === undefined) {\n                    this.schemas[schema.id] = schema;\n                }\n            }\n        }\n        for (var key in schema) {\n            if (key !== \"enum\") {\n                if ((0, _typeof3.default)(schema[key]) === \"object\") {\n                    this.searchSchemas(schema[key], url);\n                } else if (key === \"$ref\") {\n                    var uri = getDocumentUri(schema[key]);\n                    if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {\n                        this.missingMap[uri] = uri;\n                    }\n                }\n            }\n        }\n    }\n};\nValidatorContext.prototype.addSchema = function (url, schema) {\n    //overload\n    if (typeof url !== 'string' || typeof schema === 'undefined') {\n        if ((typeof url === 'undefined' ? 'undefined' : (0, _typeof3.default)(url)) === 'object' && typeof url.id === 'string') {\n            schema = url;\n            url = schema.id;\n        } else {\n            return;\n        }\n    }\n    if (url === getDocumentUri(url) + \"#\") {\n        // Remove empty fragment\n        url = getDocumentUri(url);\n    }\n    this.schemas[url] = schema;\n    delete this.missingMap[url];\n    normSchema(schema, url);\n    this.searchSchemas(schema, url);\n};\n\nValidatorContext.prototype.getSchemaMap = function () {\n    var map = {};\n    for (var key in this.schemas) {\n        map[key] = this.schemas[key];\n    }\n    return map;\n};\n\nValidatorContext.prototype.getSchemaUris = function (filterRegExp) {\n    var list = [];\n    for (var key in this.schemas) {\n        if (!filterRegExp || filterRegExp.test(key)) {\n            list.push(key);\n        }\n    }\n    return list;\n};\n\nValidatorContext.prototype.getMissingUris = function (filterRegExp) {\n    var list = [];\n    for (var key in this.missingMap) {\n        if (!filterRegExp || filterRegExp.test(key)) {\n            list.push(key);\n        }\n    }\n    return list;\n};\n\nValidatorContext.prototype.dropSchemas = function () {\n    this.schemas = {};\n    this.reset();\n};\nValidatorContext.prototype.reset = function () {\n    this.missing = [];\n    this.missingMap = {};\n    this.errors = [];\n};\n\nValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {\n    var topLevel;\n    schema = this.resolveRefs(schema);\n    if (!schema) {\n        return null;\n    } else if (schema instanceof ValidationError) {\n        this.errors.push(schema);\n        return schema;\n    }\n\n    var startErrorCount = this.errors.length;\n    var frozenIndex,\n        scannedFrozenSchemaIndex = null,\n        scannedSchemasIndex = null;\n    if (this.checkRecursive && data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object') {\n        topLevel = !this.scanned.length;\n        if (data[this.validatedSchemasKey]) {\n            var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);\n            if (schemaIndex !== -1) {\n                this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);\n                return null;\n            }\n        }\n        if ((0, _isFrozen2.default)(data)) {\n            frozenIndex = this.scannedFrozen.indexOf(data);\n            if (frozenIndex !== -1) {\n                var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);\n                if (frozenSchemaIndex !== -1) {\n                    this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);\n                    return null;\n                }\n            }\n        }\n        this.scanned.push(data);\n        if ((0, _isFrozen2.default)(data)) {\n            if (frozenIndex === -1) {\n                frozenIndex = this.scannedFrozen.length;\n                this.scannedFrozen.push(data);\n                this.scannedFrozenSchemas.push([]);\n            }\n            scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;\n            this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;\n            this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];\n        } else {\n            if (!data[this.validatedSchemasKey]) {\n                try {\n                    (0, _defineProperty2.default)(data, this.validatedSchemasKey, {\n                        value: [],\n                        configurable: true\n                    });\n                    (0, _defineProperty2.default)(data, this.validationErrorsKey, {\n                        value: [],\n                        configurable: true\n                    });\n                } catch (e) {\n                    //IE 7/8 workaround\n                    data[this.validatedSchemasKey] = [];\n                    data[this.validationErrorsKey] = [];\n                }\n            }\n            scannedSchemasIndex = data[this.validatedSchemasKey].length;\n            data[this.validatedSchemasKey][scannedSchemasIndex] = schema;\n            data[this.validationErrorsKey][scannedSchemasIndex] = [];\n        }\n    }\n\n    var errorCount = this.errors.length;\n    var error = this.validateBasic(data, schema, dataPointerPath) || this.validateNumeric(data, schema, dataPointerPath) || this.validateString(data, schema, dataPointerPath) || this.validateArray(data, schema, dataPointerPath) || this.validateObject(data, schema, dataPointerPath) || this.validateCombinations(data, schema, dataPointerPath) || this.validateHypermedia(data, schema, dataPointerPath) || this.validateFormat(data, schema, dataPointerPath) || this.validateDefinedKeywords(data, schema, dataPointerPath) || null;\n\n    if (topLevel) {\n        while (this.scanned.length) {\n            var item = this.scanned.pop();\n            delete item[this.validatedSchemasKey];\n        }\n        this.scannedFrozen = [];\n        this.scannedFrozenSchemas = [];\n    }\n\n    if (error || errorCount !== this.errors.length) {\n        while (dataPathParts && dataPathParts.length || schemaPathParts && schemaPathParts.length) {\n            var dataPart = dataPathParts && dataPathParts.length ? \"\" + dataPathParts.pop() : null;\n            var schemaPart = schemaPathParts && schemaPathParts.length ? \"\" + schemaPathParts.pop() : null;\n            if (error) {\n                error = error.prefixWith(dataPart, schemaPart);\n            }\n            this.prefixErrors(errorCount, dataPart, schemaPart);\n        }\n    }\n\n    if (scannedFrozenSchemaIndex !== null) {\n        this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);\n    } else if (scannedSchemasIndex !== null) {\n        data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);\n    }\n\n    return this.handleError(error);\n};\nValidatorContext.prototype.validateFormat = function (data, schema) {\n    if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {\n        return null;\n    }\n    var errorMessage = this.formatValidators[schema.format].call(null, data, schema);\n    if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {\n        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage }, '', '/format', null, data, schema);\n    } else if (errorMessage && (typeof errorMessage === 'undefined' ? 'undefined' : (0, _typeof3.default)(errorMessage)) === 'object') {\n        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage.message || \"?\" }, errorMessage.dataPath || '', errorMessage.schemaPath || \"/format\", null, data, schema);\n    }\n    return null;\n};\nValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {\n    for (var key in this.definedKeywords) {\n        if (typeof schema[key] === 'undefined') {\n            continue;\n        }\n        var validationFunctions = this.definedKeywords[key];\n        for (var i = 0; i < validationFunctions.length; i++) {\n            var func = validationFunctions[i];\n            var result = func(data, schema[key], schema, dataPointerPath);\n            if (typeof result === 'string' || typeof result === 'number') {\n                return this.createError(ErrorCodes.KEYWORD_CUSTOM, {\n                    key: key,\n                    message: result\n                }, '', '', null, data, schema).prefixWith(null, key);\n            } else if (result && (typeof result === 'undefined' ? 'undefined' : (0, _typeof3.default)(result)) === 'object') {\n                var code = result.code;\n                if (typeof code === 'string') {\n                    if (!ErrorCodes[code]) {\n                        throw new Error('Undefined error code (use defineError): ' + code);\n                    }\n                    code = ErrorCodes[code];\n                } else if (typeof code !== 'number') {\n                    code = ErrorCodes.KEYWORD_CUSTOM;\n                }\n                var messageParams = (0, _typeof3.default)(result.message) === 'object' ? result.message : {\n                    key: key,\n                    message: result.message || \"?\"\n                };\n                var schemaPath = result.schemaPath || \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1');\n                return this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);\n            }\n        }\n    }\n    return null;\n};\n\nfunction recursiveCompare(A, B) {\n    if (A === B) {\n        return true;\n    }\n    if (A && B && (typeof A === 'undefined' ? 'undefined' : (0, _typeof3.default)(A)) === \"object\" && (typeof B === 'undefined' ? 'undefined' : (0, _typeof3.default)(B)) === \"object\") {\n        if (Array.isArray(A) !== Array.isArray(B)) {\n            return false;\n        } else if (Array.isArray(A)) {\n            if (A.length !== B.length) {\n                return false;\n            }\n            for (var i = 0; i < A.length; i++) {\n                if (!recursiveCompare(A[i], B[i])) {\n                    return false;\n                }\n            }\n        } else {\n            var key;\n            for (key in A) {\n                if (B[key] === undefined && A[key] !== undefined) {\n                    return false;\n                }\n            }\n            for (key in B) {\n                if (A[key] === undefined && B[key] !== undefined) {\n                    return false;\n                }\n            }\n            for (key in A) {\n                if (!recursiveCompare(A[key], B[key])) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {\n    var error;\n    if (error = this.validateType(data, schema, dataPointerPath)) {\n        return error.prefixWith(null, \"type\");\n    }\n    if (error = this.validateEnum(data, schema, dataPointerPath)) {\n        return error.prefixWith(null, \"type\");\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateType = function validateType(data, schema) {\n    if (schema.type === undefined) {\n        return null;\n    }\n    var dataType = typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data);\n    if (data === null) {\n        dataType = \"null\";\n    } else if (Array.isArray(data)) {\n        dataType = \"array\";\n    }\n    var allowedTypes = schema.type;\n    if (!Array.isArray(allowedTypes)) {\n        allowedTypes = [allowedTypes];\n    }\n\n    for (var i = 0; i < allowedTypes.length; i++) {\n        var type = allowedTypes[i];\n        if (type === dataType || type === \"integer\" && dataType === \"number\" && data % 1 === 0) {\n            return null;\n        }\n    }\n    return this.createError(ErrorCodes.INVALID_TYPE, {\n        type: dataType,\n        expected: allowedTypes.join(\"/\")\n    }, '', '', null, data, schema);\n};\n\nValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {\n    if (schema[\"enum\"] === undefined) {\n        return null;\n    }\n    for (var i = 0; i < schema[\"enum\"].length; i++) {\n        var enumVal = schema[\"enum\"][i];\n        if (recursiveCompare(data, enumVal)) {\n            return null;\n        }\n    }\n    return this.createError(ErrorCodes.ENUM_MISMATCH, { value: typeof JSON !== 'undefined' ? (0, _stringify2.default)(data) : data }, '', '', null, data, schema);\n};\n\nValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {\n    return this.validateMultipleOf(data, schema, dataPointerPath) || this.validateMinMax(data, schema, dataPointerPath) || this.validateNaN(data, schema, dataPointerPath) || null;\n};\n\nvar CLOSE_ENOUGH_LOW = Math.pow(2, -51);\nvar CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;\nValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {\n    var multipleOf = schema.multipleOf || schema.divisibleBy;\n    if (multipleOf === undefined) {\n        return null;\n    }\n    if (typeof data === \"number\") {\n        var remainder = data / multipleOf % 1;\n        if (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {\n            return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {\n                value: data,\n                multipleOf: multipleOf\n            }, '', '', null, data, schema);\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {\n    if (typeof data !== \"number\") {\n        return null;\n    }\n    if (schema.minimum !== undefined) {\n        if (data < schema.minimum) {\n            return this.createError(ErrorCodes.NUMBER_MINIMUM, {\n                value: data,\n                minimum: schema.minimum\n            }, '', '/minimum', null, data, schema);\n        }\n        if (schema.exclusiveMinimum && data === schema.minimum) {\n            return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {\n                value: data,\n                minimum: schema.minimum\n            }, '', '/exclusiveMinimum', null, data, schema);\n        }\n    }\n    if (schema.maximum !== undefined) {\n        if (data > schema.maximum) {\n            return this.createError(ErrorCodes.NUMBER_MAXIMUM, {\n                value: data,\n                maximum: schema.maximum\n            }, '', '/maximum', null, data, schema);\n        }\n        if (schema.exclusiveMaximum && data === schema.maximum) {\n            return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {\n                value: data,\n                maximum: schema.maximum\n            }, '', '/exclusiveMaximum', null, data, schema);\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {\n    if (typeof data !== \"number\") {\n        return null;\n    }\n    if (isNaN(data) === true || data === Infinity || data === -Infinity) {\n        return this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, { value: data }, '', '/type', null, data, schema);\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {\n    return this.validateStringLength(data, schema, dataPointerPath) || this.validateStringPattern(data, schema, dataPointerPath) || null;\n};\n\nValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {\n    if (typeof data !== \"string\") {\n        return null;\n    }\n    if (schema.minLength !== undefined) {\n        if (data.length < schema.minLength) {\n            return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {\n                length: data.length,\n                minimum: schema.minLength\n            }, '', '/minLength', null, data, schema);\n        }\n    }\n    if (schema.maxLength !== undefined) {\n        if (data.length > schema.maxLength) {\n            return this.createError(ErrorCodes.STRING_LENGTH_LONG, {\n                length: data.length,\n                maximum: schema.maxLength\n            }, '', '/maxLength', null, data, schema);\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {\n    if (typeof data !== \"string\" || typeof schema.pattern !== \"string\" && !(schema.pattern instanceof RegExp)) {\n        return null;\n    }\n    var regexp;\n    if (schema.pattern instanceof RegExp) {\n        regexp = schema.pattern;\n    } else {\n        var body,\n            flags = '';\n        // Check for regular expression literals\n        // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5\n        var literal = schema.pattern.match(/^\\/(.+)\\/([img]*)$/);\n        if (literal) {\n            body = literal[1];\n            flags = literal[2];\n        } else {\n            body = schema.pattern;\n        }\n        regexp = new RegExp(body, flags);\n    }\n    if (!regexp.test(data)) {\n        return this.createError(ErrorCodes.STRING_PATTERN, { pattern: schema.pattern }, '', '/pattern', null, data, schema);\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {\n    if (!Array.isArray(data)) {\n        return null;\n    }\n    return this.validateArrayLength(data, schema, dataPointerPath) || this.validateArrayUniqueItems(data, schema, dataPointerPath) || this.validateArrayItems(data, schema, dataPointerPath) || null;\n};\n\nValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {\n    var error;\n    if (schema.minItems !== undefined) {\n        if (data.length < schema.minItems) {\n            error = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {\n                length: data.length,\n                minimum: schema.minItems\n            }, '', '/minItems', null, data, schema);\n            if (this.handleError(error)) {\n                return error;\n            }\n        }\n    }\n    if (schema.maxItems !== undefined) {\n        if (data.length > schema.maxItems) {\n            error = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {\n                length: data.length,\n                maximum: schema.maxItems\n            }, '', '/maxItems', null, data, schema);\n            if (this.handleError(error)) {\n                return error;\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {\n    if (schema.uniqueItems) {\n        for (var i = 0; i < data.length; i++) {\n            for (var j = i + 1; j < data.length; j++) {\n                if (recursiveCompare(data[i], data[j])) {\n                    var error = this.createError(ErrorCodes.ARRAY_UNIQUE, {\n                        match1: i,\n                        match2: j\n                    }, '', '/uniqueItems', null, data, schema);\n                    if (this.handleError(error)) {\n                        return error;\n                    }\n                }\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {\n    if (schema.items === undefined) {\n        return null;\n    }\n    var error, i;\n    if (Array.isArray(schema.items)) {\n        for (i = 0; i < data.length; i++) {\n            if (i < schema.items.length) {\n                if (error = this.validateAll(data[i], schema.items[i], [i], [\"items\", i], dataPointerPath + \"/\" + i)) {\n                    return error;\n                }\n            } else if (schema.additionalItems !== undefined) {\n                if (typeof schema.additionalItems === \"boolean\") {\n                    if (!schema.additionalItems) {\n                        error = this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, '/' + i, '/additionalItems', null, data, schema);\n                        if (this.handleError(error)) {\n                            return error;\n                        }\n                    }\n                } else if (error = this.validateAll(data[i], schema.additionalItems, [i], [\"additionalItems\"], dataPointerPath + \"/\" + i)) {\n                    return error;\n                }\n            }\n        }\n    } else {\n        for (i = 0; i < data.length; i++) {\n            if (error = this.validateAll(data[i], schema.items, [i], [\"items\"], dataPointerPath + \"/\" + i)) {\n                return error;\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {\n    if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) !== \"object\" || data === null || Array.isArray(data)) {\n        return null;\n    }\n    return this.validateObjectMinMaxProperties(data, schema, dataPointerPath) || this.validateObjectRequiredProperties(data, schema, dataPointerPath) || this.validateObjectProperties(data, schema, dataPointerPath) || this.validateObjectDependencies(data, schema, dataPointerPath) || null;\n};\n\nValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {\n    var keys = (0, _keys2.default)(data);\n    var error;\n    if (schema.minProperties !== undefined) {\n        if (keys.length < schema.minProperties) {\n            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {\n                propertyCount: keys.length,\n                minimum: schema.minProperties\n            }, '', '/minProperties', null, data, schema);\n            if (this.handleError(error)) {\n                return error;\n            }\n        }\n    }\n    if (schema.maxProperties !== undefined) {\n        if (keys.length > schema.maxProperties) {\n            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {\n                propertyCount: keys.length,\n                maximum: schema.maxProperties\n            }, '', '/maxProperties', null, data, schema);\n            if (this.handleError(error)) {\n                return error;\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {\n    if (schema.required !== undefined) {\n        for (var i = 0; i < schema.required.length; i++) {\n            var key = schema.required[i];\n            if (data[key] === undefined) {\n                var error = this.createError(ErrorCodes.OBJECT_REQUIRED, { key: key }, '', '/required/' + i, null, data, schema);\n                if (this.handleError(error)) {\n                    return error;\n                }\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {\n    var error;\n    for (var key in data) {\n        var keyPointerPath = dataPointerPath + \"/\" + key.replace(/~/g, '~0').replace(/\\//g, '~1');\n        var foundMatch = false;\n        if (schema.properties !== undefined && schema.properties[key] !== undefined) {\n            foundMatch = true;\n            if (error = this.validateAll(data[key], schema.properties[key], [key], [\"properties\", key], keyPointerPath)) {\n                return error;\n            }\n        }\n        if (schema.patternProperties !== undefined) {\n            for (var patternKey in schema.patternProperties) {\n                var regexp = new RegExp(patternKey);\n                if (regexp.test(key)) {\n                    foundMatch = true;\n                    if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], [\"patternProperties\", patternKey], keyPointerPath)) {\n                        return error;\n                    }\n                }\n            }\n        }\n        if (!foundMatch) {\n            if (schema.additionalProperties !== undefined) {\n                if (this.trackUnknownProperties) {\n                    this.knownPropertyPaths[keyPointerPath] = true;\n                    delete this.unknownPropertyPaths[keyPointerPath];\n                }\n                if (typeof schema.additionalProperties === \"boolean\") {\n                    if (!schema.additionalProperties) {\n                        error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, { key: key }, '', '/additionalProperties', null, data, schema).prefixWith(key, null);\n                        if (this.handleError(error)) {\n                            return error;\n                        }\n                    }\n                } else {\n                    if (error = this.validateAll(data[key], schema.additionalProperties, [key], [\"additionalProperties\"], keyPointerPath)) {\n                        return error;\n                    }\n                }\n            } else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {\n                this.unknownPropertyPaths[keyPointerPath] = true;\n            }\n        } else if (this.trackUnknownProperties) {\n            this.knownPropertyPaths[keyPointerPath] = true;\n            delete this.unknownPropertyPaths[keyPointerPath];\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {\n    var error;\n    if (schema.dependencies !== undefined) {\n        for (var depKey in schema.dependencies) {\n            if (data[depKey] !== undefined) {\n                var dep = schema.dependencies[depKey];\n                if (typeof dep === \"string\") {\n                    if (data[dep] === undefined) {\n                        error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {\n                            key: depKey,\n                            missing: dep\n                        }, '', '', null, data, schema).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\n                        if (this.handleError(error)) {\n                            return error;\n                        }\n                    }\n                } else if (Array.isArray(dep)) {\n                    for (var i = 0; i < dep.length; i++) {\n                        var requiredKey = dep[i];\n                        if (data[requiredKey] === undefined) {\n                            error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {\n                                key: depKey,\n                                missing: requiredKey\n                            }, '', '/' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, \"dependencies\");\n                            if (this.handleError(error)) {\n                                return error;\n                            }\n                        }\n                    }\n                } else {\n                    if (error = this.validateAll(data, dep, [], [\"dependencies\", depKey], dataPointerPath)) {\n                        return error;\n                    }\n                }\n            }\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {\n    return this.validateAllOf(data, schema, dataPointerPath) || this.validateAnyOf(data, schema, dataPointerPath) || this.validateOneOf(data, schema, dataPointerPath) || this.validateNot(data, schema, dataPointerPath) || null;\n};\n\nValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {\n    if (schema.allOf === undefined) {\n        return null;\n    }\n    var error;\n    for (var i = 0; i < schema.allOf.length; i++) {\n        var subSchema = schema.allOf[i];\n        if (error = this.validateAll(data, subSchema, [], [\"allOf\", i], dataPointerPath)) {\n            return error;\n        }\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {\n    if (schema.anyOf === undefined) {\n        return null;\n    }\n    var errors = [];\n    var startErrorCount = this.errors.length;\n    var oldUnknownPropertyPaths, oldKnownPropertyPaths;\n    if (this.trackUnknownProperties) {\n        oldUnknownPropertyPaths = this.unknownPropertyPaths;\n        oldKnownPropertyPaths = this.knownPropertyPaths;\n    }\n    var errorAtEnd = true;\n    for (var i = 0; i < schema.anyOf.length; i++) {\n        if (this.trackUnknownProperties) {\n            this.unknownPropertyPaths = {};\n            this.knownPropertyPaths = {};\n        }\n        var subSchema = schema.anyOf[i];\n\n        var errorCount = this.errors.length;\n        var error = this.validateAll(data, subSchema, [], [\"anyOf\", i], dataPointerPath);\n\n        if (error === null && errorCount === this.errors.length) {\n            this.errors = this.errors.slice(0, startErrorCount);\n\n            if (this.trackUnknownProperties) {\n                for (var knownKey in this.knownPropertyPaths) {\n                    oldKnownPropertyPaths[knownKey] = true;\n                    delete oldUnknownPropertyPaths[knownKey];\n                }\n                for (var unknownKey in this.unknownPropertyPaths) {\n                    if (!oldKnownPropertyPaths[unknownKey]) {\n                        oldUnknownPropertyPaths[unknownKey] = true;\n                    }\n                }\n                // We need to continue looping so we catch all the property definitions, but we don't want to return an error\n                errorAtEnd = false;\n                continue;\n            }\n\n            return null;\n        }\n        if (error) {\n            errors.push(error.prefixWith(null, \"\" + i).prefixWith(null, \"anyOf\"));\n        }\n    }\n    if (this.trackUnknownProperties) {\n        this.unknownPropertyPaths = oldUnknownPropertyPaths;\n        this.knownPropertyPaths = oldKnownPropertyPaths;\n    }\n    if (errorAtEnd) {\n        errors = errors.concat(this.errors.slice(startErrorCount));\n        this.errors = this.errors.slice(0, startErrorCount);\n        return this.createError(ErrorCodes.ANY_OF_MISSING, {}, \"\", \"/anyOf\", errors, data, schema);\n    }\n};\n\nValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {\n    if (schema.oneOf === undefined) {\n        return null;\n    }\n    var validIndex = null;\n    var errors = [];\n    var startErrorCount = this.errors.length;\n    var oldUnknownPropertyPaths, oldKnownPropertyPaths;\n    if (this.trackUnknownProperties) {\n        oldUnknownPropertyPaths = this.unknownPropertyPaths;\n        oldKnownPropertyPaths = this.knownPropertyPaths;\n    }\n    for (var i = 0; i < schema.oneOf.length; i++) {\n        if (this.trackUnknownProperties) {\n            this.unknownPropertyPaths = {};\n            this.knownPropertyPaths = {};\n        }\n        var subSchema = schema.oneOf[i];\n\n        var errorCount = this.errors.length;\n        var error = this.validateAll(data, subSchema, [], [\"oneOf\", i], dataPointerPath);\n\n        if (error === null && errorCount === this.errors.length) {\n            if (validIndex === null) {\n                validIndex = i;\n            } else {\n                this.errors = this.errors.slice(0, startErrorCount);\n                return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {\n                    index1: validIndex,\n                    index2: i\n                }, \"\", \"/oneOf\", null, data, schema);\n            }\n            if (this.trackUnknownProperties) {\n                for (var knownKey in this.knownPropertyPaths) {\n                    oldKnownPropertyPaths[knownKey] = true;\n                    delete oldUnknownPropertyPaths[knownKey];\n                }\n                for (var unknownKey in this.unknownPropertyPaths) {\n                    if (!oldKnownPropertyPaths[unknownKey]) {\n                        oldUnknownPropertyPaths[unknownKey] = true;\n                    }\n                }\n            }\n        } else if (error) {\n            errors.push(error);\n        }\n    }\n    if (this.trackUnknownProperties) {\n        this.unknownPropertyPaths = oldUnknownPropertyPaths;\n        this.knownPropertyPaths = oldKnownPropertyPaths;\n    }\n    if (validIndex === null) {\n        errors = errors.concat(this.errors.slice(startErrorCount));\n        this.errors = this.errors.slice(0, startErrorCount);\n        return this.createError(ErrorCodes.ONE_OF_MISSING, {}, \"\", \"/oneOf\", errors, data, schema);\n    } else {\n        this.errors = this.errors.slice(0, startErrorCount);\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {\n    if (schema.not === undefined) {\n        return null;\n    }\n    var oldErrorCount = this.errors.length;\n    var oldUnknownPropertyPaths, oldKnownPropertyPaths;\n    if (this.trackUnknownProperties) {\n        oldUnknownPropertyPaths = this.unknownPropertyPaths;\n        oldKnownPropertyPaths = this.knownPropertyPaths;\n        this.unknownPropertyPaths = {};\n        this.knownPropertyPaths = {};\n    }\n    var error = this.validateAll(data, schema.not, null, null, dataPointerPath);\n    var notErrors = this.errors.slice(oldErrorCount);\n    this.errors = this.errors.slice(0, oldErrorCount);\n    if (this.trackUnknownProperties) {\n        this.unknownPropertyPaths = oldUnknownPropertyPaths;\n        this.knownPropertyPaths = oldKnownPropertyPaths;\n    }\n    if (error === null && notErrors.length === 0) {\n        return this.createError(ErrorCodes.NOT_PASSED, {}, \"\", \"/not\", null, data, schema);\n    }\n    return null;\n};\n\nValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {\n    if (!schema.links) {\n        return null;\n    }\n    var error;\n    for (var i = 0; i < schema.links.length; i++) {\n        var ldo = schema.links[i];\n        if (ldo.rel === \"describedby\") {\n            var template = new UriTemplate(ldo.href);\n            var allPresent = true;\n            for (var j = 0; j < template.varNames.length; j++) {\n                if (!(template.varNames[j] in data)) {\n                    allPresent = false;\n                    break;\n                }\n            }\n            if (allPresent) {\n                var schemaUrl = template.fillFromObject(data);\n                var subSchema = { \"$ref\": schemaUrl };\n                if (error = this.validateAll(data, subSchema, [], [\"links\", i], dataPointerPath)) {\n                    return error;\n                }\n            }\n        }\n    }\n};\n\n// parseURI() and resolveUrl() are from https://gist.github.com/1088850\n//   -  released as public domain by author (\"Yaffle\") - see comments on gist\n\nfunction parseURI(url) {\n    var m = String(url).replace(/^\\s+|\\s+$/g, '').match(/^([^:\\/?#]+:)?(\\/\\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\\/?#]*)(?::(\\d*))?))?([^?#]*)(\\?[^#]*)?(#[\\s\\S]*)?/);\n    // authority = '//' + user + ':' + pass '@' + hostname + ':' port\n    return m ? {\n        href: m[0] || '',\n        protocol: m[1] || '',\n        authority: m[2] || '',\n        host: m[3] || '',\n        hostname: m[4] || '',\n        port: m[5] || '',\n        pathname: m[6] || '',\n        search: m[7] || '',\n        hash: m[8] || ''\n    } : null;\n}\n\nfunction resolveUrl(base, href) {\n    // RFC 3986\n\n    function removeDotSegments(input) {\n        var output = [];\n        input.replace(/^(\\.\\.?(\\/|$))+/, '').replace(/\\/(\\.(\\/|$))+/g, '/').replace(/\\/\\.\\.$/, '/../').replace(/\\/?[^\\/]*/g, function (p) {\n            if (p === '/..') {\n                output.pop();\n            } else {\n                output.push(p);\n            }\n        });\n        return output.join('').replace(/^\\//, input.charAt(0) === '/' ? '/' : '');\n    }\n\n    href = parseURI(href || '');\n    base = parseURI(base || '');\n\n    return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;\n}\n\nfunction getDocumentUri(uri) {\n    return uri.split('#')[0];\n}\n\nfunction normSchema(schema, baseUri) {\n    if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === \"object\") {\n        if (baseUri === undefined) {\n            baseUri = schema.id;\n        } else if (typeof schema.id === \"string\") {\n            baseUri = resolveUrl(baseUri, schema.id);\n            schema.id = baseUri;\n        }\n        if (Array.isArray(schema)) {\n            for (var i = 0; i < schema.length; i++) {\n                normSchema(schema[i], baseUri);\n            }\n        } else {\n            if (typeof schema['$ref'] === \"string\") {\n                schema['$ref'] = resolveUrl(baseUri, schema['$ref']);\n            }\n            for (var key in schema) {\n                if (key !== \"enum\") {\n                    normSchema(schema[key], baseUri);\n                }\n            }\n        }\n    }\n}\n\nfunction defaultErrorReporter(language) {\n    language = language || 'en';\n\n    var errorMessages = languages[language];\n\n    return function (error) {\n        var messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];\n        if (typeof messageTemplate !== 'string') {\n            return \"Unknown error code \" + error.code + \": \" + (0, _stringify2.default)(error.messageParams);\n        }\n        var messageParams = error.params;\n        // Adapted from Crockford's supplant()\n        return messageTemplate.replace(/\\{([^{}]*)\\}/g, function (whole, varName) {\n            var subValue = messageParams[varName];\n            return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;\n        });\n    };\n}\n\nvar ErrorCodes = {\n    INVALID_TYPE: 0,\n    ENUM_MISMATCH: 1,\n    ANY_OF_MISSING: 10,\n    ONE_OF_MISSING: 11,\n    ONE_OF_MULTIPLE: 12,\n    NOT_PASSED: 13,\n    // Numeric errors\n    NUMBER_MULTIPLE_OF: 100,\n    NUMBER_MINIMUM: 101,\n    NUMBER_MINIMUM_EXCLUSIVE: 102,\n    NUMBER_MAXIMUM: 103,\n    NUMBER_MAXIMUM_EXCLUSIVE: 104,\n    NUMBER_NOT_A_NUMBER: 105,\n    // String errors\n    STRING_LENGTH_SHORT: 200,\n    STRING_LENGTH_LONG: 201,\n    STRING_PATTERN: 202,\n    // Object errors\n    OBJECT_PROPERTIES_MINIMUM: 300,\n    OBJECT_PROPERTIES_MAXIMUM: 301,\n    OBJECT_REQUIRED: 302,\n    OBJECT_ADDITIONAL_PROPERTIES: 303,\n    OBJECT_DEPENDENCY_KEY: 304,\n    // Array errors\n    ARRAY_LENGTH_SHORT: 400,\n    ARRAY_LENGTH_LONG: 401,\n    ARRAY_UNIQUE: 402,\n    ARRAY_ADDITIONAL_ITEMS: 403,\n    // Custom/user-defined errors\n    FORMAT_CUSTOM: 500,\n    KEYWORD_CUSTOM: 501,\n    // Schema structure\n    CIRCULAR_REFERENCE: 600,\n    // Non-standard validation options\n    UNKNOWN_PROPERTY: 1000\n};\nvar ErrorCodeLookup = {};\nfor (var key in ErrorCodes) {\n    ErrorCodeLookup[ErrorCodes[key]] = key;\n}\nvar ErrorMessagesDefault = {\n    INVALID_TYPE: \"Invalid type: {type} (expected {expected})\",\n    ENUM_MISMATCH: \"No enum match for: {value}\",\n    ANY_OF_MISSING: \"Data does not match any schemas from \\\"anyOf\\\"\",\n    ONE_OF_MISSING: \"Data does not match any schemas from \\\"oneOf\\\"\",\n    ONE_OF_MULTIPLE: \"Data is valid against more than one schema from \\\"oneOf\\\": indices {index1} and {index2}\",\n    NOT_PASSED: \"Data matches schema from \\\"not\\\"\",\n    // Numeric errors\n    NUMBER_MULTIPLE_OF: \"Value {value} is not a multiple of {multipleOf}\",\n    NUMBER_MINIMUM: \"Value {value} is less than minimum {minimum}\",\n    NUMBER_MINIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive minimum {minimum}\",\n    NUMBER_MAXIMUM: \"Value {value} is greater than maximum {maximum}\",\n    NUMBER_MAXIMUM_EXCLUSIVE: \"Value {value} is equal to exclusive maximum {maximum}\",\n    NUMBER_NOT_A_NUMBER: \"Value {value} is not a valid number\",\n    // String errors\n    STRING_LENGTH_SHORT: \"String is too short ({length} chars), minimum {minimum}\",\n    STRING_LENGTH_LONG: \"String is too long ({length} chars), maximum {maximum}\",\n    STRING_PATTERN: \"String does not match pattern: {pattern}\",\n    // Object errors\n    OBJECT_PROPERTIES_MINIMUM: \"Too few properties defined ({propertyCount}), minimum {minimum}\",\n    OBJECT_PROPERTIES_MAXIMUM: \"Too many properties defined ({propertyCount}), maximum {maximum}\",\n    OBJECT_REQUIRED: \"Missing required property: {key}\",\n    OBJECT_ADDITIONAL_PROPERTIES: \"Additional properties not allowed\",\n    OBJECT_DEPENDENCY_KEY: \"Dependency failed - key must exist: {missing} (due to key: {key})\",\n    // Array errors\n    ARRAY_LENGTH_SHORT: \"Array is too short ({length}), minimum {minimum}\",\n    ARRAY_LENGTH_LONG: \"Array is too long ({length}), maximum {maximum}\",\n    ARRAY_UNIQUE: \"Array items are not unique (indices {match1} and {match2})\",\n    ARRAY_ADDITIONAL_ITEMS: \"Additional items not allowed\",\n    // Format errors\n    FORMAT_CUSTOM: \"Format validation failed ({message})\",\n    KEYWORD_CUSTOM: \"Keyword failed: {key} ({message})\",\n    // Schema structure\n    CIRCULAR_REFERENCE: \"Circular $refs: {urls}\",\n    // Non-standard validation options\n    UNKNOWN_PROPERTY: \"Unknown property (not in schema)\"\n};\n\nfunction ValidationError(code, params, dataPath, schemaPath, subErrors) {\n    Error.call(this);\n    if (code === undefined) {\n        throw new Error(\"No error code supplied: \" + schemaPath);\n    }\n    this.message = '';\n    this.params = params;\n    this.code = code;\n    this.dataPath = dataPath || \"\";\n    this.schemaPath = schemaPath || \"\";\n    this.subErrors = subErrors || null;\n\n    var err = new Error(this.message);\n    this.stack = err.stack || err.stacktrace;\n    if (!this.stack) {\n        try {\n            throw err;\n        } catch (err) {\n            this.stack = err.stack || err.stacktrace;\n        }\n    }\n}\n\nValidationError.prototype = (0, _create2.default)(Error.prototype);\nValidationError.prototype.constructor = ValidationError;\nValidationError.prototype.name = 'ValidationError';\n\nValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {\n    if (dataPrefix !== null) {\n        dataPrefix = dataPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n        this.dataPath = \"/\" + dataPrefix + this.dataPath;\n    }\n    if (schemaPrefix !== null) {\n        schemaPrefix = schemaPrefix.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n        this.schemaPath = \"/\" + schemaPrefix + this.schemaPath;\n    }\n    if (this.subErrors !== null) {\n        for (var i = 0; i < this.subErrors.length; i++) {\n            this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);\n        }\n    }\n    return this;\n};\n\nfunction isTrustedUrl(baseUrl, testUrl) {\n    if (testUrl.substring(0, baseUrl.length) === baseUrl) {\n        var remainder = testUrl.substring(baseUrl.length);\n        if (testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === \"/\" || remainder.charAt(0) === \"#\" || remainder.charAt(0) === \"?\") {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar languages = {};\n\nfunction createApi(language) {\n    var globalContext = new ValidatorContext();\n    var currentLanguage;\n    var customErrorReporter;\n    var api = {\n        setErrorReporter: function setErrorReporter(reporter) {\n            if (typeof reporter === 'string') {\n                return this.language(reporter);\n            }\n            customErrorReporter = reporter;\n            return true;\n        },\n        addFormat: function addFormat() {\n            globalContext.addFormat.apply(globalContext, arguments);\n        },\n        language: function language(code) {\n            if (!code) {\n                return currentLanguage;\n            }\n            if (!languages[code]) {\n                code = code.split('-')[0]; // fall back to base language\n            }\n            if (languages[code]) {\n                currentLanguage = code;\n                return code; // so you can tell if fall-back has happened\n            }\n            return false;\n        },\n        addLanguage: function addLanguage(code, messageMap) {\n            var key;\n            for (key in ErrorCodes) {\n                if (messageMap[key] && !messageMap[ErrorCodes[key]]) {\n                    messageMap[ErrorCodes[key]] = messageMap[key];\n                }\n            }\n            var rootCode = code.split('-')[0];\n            if (!languages[rootCode]) {\n                // use for base language if not yet defined\n                languages[code] = messageMap;\n                languages[rootCode] = messageMap;\n            } else {\n                languages[code] = (0, _create2.default)(languages[rootCode]);\n                for (key in messageMap) {\n                    if (typeof languages[rootCode][key] === 'undefined') {\n                        languages[rootCode][key] = messageMap[key];\n                    }\n                    languages[code][key] = messageMap[key];\n                }\n            }\n            return this;\n        },\n        freshApi: function freshApi(language) {\n            var result = createApi();\n            if (language) {\n                result.language(language);\n            }\n            return result;\n        },\n        validate: function validate(data, schema, checkRecursive, banUnknownProperties) {\n            var def = defaultErrorReporter(currentLanguage);\n            var errorReporter = customErrorReporter ? function (error, data, schema) {\n                return customErrorReporter(error, data, schema) || def(error, data, schema);\n            } : def;\n            var context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);\n            if (typeof schema === \"string\") {\n                schema = { \"$ref\": schema };\n            }\n            context.addSchema(\"\", schema);\n            var error = context.validateAll(data, schema, null, null, \"\");\n            if (!error && banUnknownProperties) {\n                error = context.banUnknownProperties(data, schema);\n            }\n            this.error = error;\n            this.missing = context.missing;\n            this.valid = error === null;\n            return this.valid;\n        },\n        validateResult: function validateResult() {\n            var result = {};\n            this.validate.apply(result, arguments);\n            return result;\n        },\n        validateMultiple: function validateMultiple(data, schema, checkRecursive, banUnknownProperties) {\n            var def = defaultErrorReporter(currentLanguage);\n            var errorReporter = customErrorReporter ? function (error, data, schema) {\n                return customErrorReporter(error, data, schema) || def(error, data, schema);\n            } : def;\n            var context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);\n            if (typeof schema === \"string\") {\n                schema = { \"$ref\": schema };\n            }\n            context.addSchema(\"\", schema);\n            context.validateAll(data, schema, null, null, \"\");\n            if (banUnknownProperties) {\n                context.banUnknownProperties(data, schema);\n            }\n            var result = {};\n            result.errors = context.errors;\n            result.missing = context.missing;\n            result.valid = result.errors.length === 0;\n            return result;\n        },\n        addSchema: function addSchema() {\n            return globalContext.addSchema.apply(globalContext, arguments);\n        },\n        getSchema: function getSchema() {\n            return globalContext.getSchema.apply(globalContext, arguments);\n        },\n        getSchemaMap: function getSchemaMap() {\n            return globalContext.getSchemaMap.apply(globalContext, arguments);\n        },\n        getSchemaUris: function getSchemaUris() {\n            return globalContext.getSchemaUris.apply(globalContext, arguments);\n        },\n        getMissingUris: function getMissingUris() {\n            return globalContext.getMissingUris.apply(globalContext, arguments);\n        },\n        dropSchemas: function dropSchemas() {\n            globalContext.dropSchemas.apply(globalContext, arguments);\n        },\n        defineKeyword: function defineKeyword() {\n            globalContext.defineKeyword.apply(globalContext, arguments);\n        },\n        defineError: function defineError(codeName, codeNumber, defaultMessage) {\n            if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {\n                throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');\n            }\n            if (typeof codeNumber !== 'number' || codeNumber % 1 !== 0 || codeNumber < 10000) {\n                throw new Error('Code number must be an integer > 10000');\n            }\n            if (typeof ErrorCodes[codeName] !== 'undefined') {\n                throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);\n            }\n            if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {\n                throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);\n            }\n            ErrorCodes[codeName] = codeNumber;\n            ErrorCodeLookup[codeNumber] = codeName;\n            ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;\n            for (var langCode in languages) {\n                var language = languages[langCode];\n                if (language[codeName]) {\n                    language[codeNumber] = language[codeNumber] || language[codeName];\n                }\n            }\n        },\n        reset: function reset() {\n            globalContext.reset();\n            this.error = null;\n            this.missing = [];\n            this.valid = true;\n        },\n        missing: [],\n        error: null,\n        valid: true,\n        normSchema: normSchema,\n        resolveUrl: resolveUrl,\n        getDocumentUri: getDocumentUri,\n        errorCodes: ErrorCodes\n    };\n    api.language(language || 'en');\n    return api;\n}\n\n//export function validator() {\nvar tv4 = createApi();\ntv4.addLanguage('en-gb', ErrorMessagesDefault);\n\n//legacy property\ntv4.tv4 = tv4;\n//return tv4;\nexports.default = tv4;\n//}\n\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy91dGlscy90djQuanM/NzkwOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuIEF1dGhvcjogR2VyYWludCBMdWZmIGFuZCBvdGhlcnNcbiBZZWFyOiAyMDEzXG5cbiBUaGlzIGNvZGUgaXMgcmVsZWFzZWQgaW50byB0aGUgXCJwdWJsaWMgZG9tYWluXCIgYnkgaXRzIGF1dGhvcihzKS4gIEFueWJvZHkgbWF5IHVzZSwgYWx0ZXIgYW5kIGRpc3RyaWJ1dGUgdGhlIGNvZGUgd2l0aG91dCByZXN0cmljdGlvbi4gIFRoZSBhdXRob3IgbWFrZXMgbm8gZ3VhcmFudGVlcywgYW5kIHRha2VzIG5vIGxpYWJpbGl0eSBvZiBhbnkga2luZCBmb3IgdXNlIG9mIHRoaXMgY29kZS5cblxuIElmIHlvdSBmaW5kIGEgYnVnIG9yIG1ha2UgYW4gaW1wcm92ZW1lbnQsIGl0IHdvdWxkIGJlIGNvdXJ0ZW91cyB0byBsZXQgdGhlIGF1dGhvciBrbm93LCBidXQgaXQgaXMgbm90IGNvbXB1bHNvcnkuXG4gKi9cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9rZXlzP3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZPYmplY3QlMkZrZXlzXG5pZiAoIU9iamVjdC5rZXlzKSB7XG4gICAgT2JqZWN0LmtleXMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICAgICAgICAgICAgaGFzRG9udEVudW1CdWcgPSAhKHt0b1N0cmluZzogbnVsbH0pLnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpLFxuICAgICAgICAgICAgZG9udEVudW1zID0gW1xuICAgICAgICAgICAgICAgICd0b1N0cmluZycsXG4gICAgICAgICAgICAgICAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgICAgICAgICAgICAgICAndmFsdWVPZicsXG4gICAgICAgICAgICAgICAgJ2hhc093blByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAnaXNQcm90b3R5cGVPZicsXG4gICAgICAgICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgICAgICAgICAgICAgICAnY29uc3RydWN0b3InXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZG9udEVudW1zTGVuZ3RoID0gZG9udEVudW1zLmxlbmd0aDtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicgfHwgb2JqID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIG5vbi1vYmplY3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzRG9udEVudW1CdWcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvbnRFbnVtc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgZG9udEVudW1zW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZG9udEVudW1zW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfSkoKTtcbn1cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9jcmVhdGVcbmlmICghT2JqZWN0LmNyZWF0ZSkge1xuICAgIE9iamVjdC5jcmVhdGUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBGKCkge1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT2JqZWN0LmNyZWF0ZSBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgb25lIHBhcmFtZXRlci4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEYucHJvdG90eXBlID0gbztcbiAgICAgICAgICAgIHJldHVybiBuZXcgRigpO1xuICAgICAgICB9O1xuICAgIH0pKCk7XG59XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pc0FycmF5P3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZBcnJheSUyRmlzQXJyYXlcbmlmICghQXJyYXkuaXNBcnJheSkge1xuICAgIEFycmF5LmlzQXJyYXkgPSBmdW5jdGlvbiAodkFyZykge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZBcmcpID09PSBcIltvYmplY3QgQXJyYXldXCI7XG4gICAgfTtcbn1cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2Y/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRkFycmF5JTJGaW5kZXhPZlxuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLykge1xuICAgICAgICBpZiAodGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gMDtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBuID0gTnVtYmVyKGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgICBpZiAobiAhPT0gbikgeyAvLyBzaG9ydGN1dCBmb3IgdmVyaWZ5aW5nIGlmIGl0J3MgTmFOXG4gICAgICAgICAgICAgICAgbiA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG4gIT09IDAgJiYgbiAhPT0gSW5maW5pdHkgJiYgbiAhPT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgbiA9IChuID4gMCB8fCAtMSkgKiBNYXRoLmZsb29yKE1hdGguYWJzKG4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobiA+PSBsZW4pIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgayA9IG4gPj0gMCA/IG4gOiBNYXRoLm1heChsZW4gLSBNYXRoLmFicyhuKSwgMCk7XG4gICAgICAgIGZvciAoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICAgIGlmIChrIGluIHQgJiYgdFtrXSA9PT0gc2VhcmNoRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xufVxuXG4vLyBHcnVuZ2V5IE9iamVjdC5pc0Zyb3plbiBoYWNrXG5pZiAoIU9iamVjdC5pc0Zyb3plbikge1xuICAgIE9iamVjdC5pc0Zyb3plbiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIGtleSA9IFwidHY0X3Rlc3RfZnJvemVuX2tleVwiO1xuICAgICAgICB3aGlsZSAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGtleSArPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8vIEJhc2VkIG9uOiBodHRwczovL2dpdGh1Yi5jb20vZ2VyYWludGx1ZmYvdXJpLXRlbXBsYXRlcywgYnV0IHdpdGggYWxsIHRoZSBkZS1zdWJzdGl0dXRpb24gc3R1ZmYgcmVtb3ZlZFxuXG52YXIgdXJpVGVtcGxhdGVHbG9iYWxNb2RpZmllcnMgPSB7XG4gICAgXCIrXCI6IHRydWUsXG4gICAgXCIjXCI6IHRydWUsXG4gICAgXCIuXCI6IHRydWUsXG4gICAgXCIvXCI6IHRydWUsXG4gICAgXCI7XCI6IHRydWUsXG4gICAgXCI/XCI6IHRydWUsXG4gICAgXCImXCI6IHRydWVcbn07XG52YXIgdXJpVGVtcGxhdGVTdWZmaWNlcyA9IHtcbiAgICBcIipcIjogdHJ1ZVxufTtcblxuZnVuY3Rpb24gbm90UmVhbGx5UGVyY2VudEVuY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJKHN0cmluZykucmVwbGFjZSgvJTI1WzAtOV1bMC05XS9nLCBmdW5jdGlvbiAoZG91YmxlRW5jb2RlZCkge1xuICAgICAgICByZXR1cm4gXCIlXCIgKyBkb3VibGVFbmNvZGVkLnN1YnN0cmluZygzKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXJpVGVtcGxhdGVTdWJzdGl0dXRpb24oc3BlYykge1xuICAgIHZhciBtb2RpZmllciA9IFwiXCI7XG4gICAgaWYgKHVyaVRlbXBsYXRlR2xvYmFsTW9kaWZpZXJzW3NwZWMuY2hhckF0KDApXSkge1xuICAgICAgICBtb2RpZmllciA9IHNwZWMuY2hhckF0KDApO1xuICAgICAgICBzcGVjID0gc3BlYy5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIHZhciBzZXBhcmF0b3IgPSBcIlwiO1xuICAgIHZhciBwcmVmaXggPSBcIlwiO1xuICAgIHZhciBzaG91bGRFc2NhcGUgPSB0cnVlO1xuICAgIHZhciBzaG93VmFyaWFibGVzID0gZmFsc2U7XG4gICAgdmFyIHRyaW1FbXB0eVN0cmluZyA9IGZhbHNlO1xuICAgIGlmIChtb2RpZmllciA9PT0gJysnKSB7XG4gICAgICAgIHNob3VsZEVzY2FwZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09IFwiLlwiKSB7XG4gICAgICAgIHByZWZpeCA9IFwiLlwiO1xuICAgICAgICBzZXBhcmF0b3IgPSBcIi5cIjtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSBcIi9cIikge1xuICAgICAgICBwcmVmaXggPSBcIi9cIjtcbiAgICAgICAgc2VwYXJhdG9yID0gXCIvXCI7XG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJyMnKSB7XG4gICAgICAgIHByZWZpeCA9IFwiI1wiO1xuICAgICAgICBzaG91bGRFc2NhcGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnOycpIHtcbiAgICAgICAgcHJlZml4ID0gXCI7XCI7XG4gICAgICAgIHNlcGFyYXRvciA9IFwiO1wiO1xuICAgICAgICBzaG93VmFyaWFibGVzID0gdHJ1ZTtcbiAgICAgICAgdHJpbUVtcHR5U3RyaW5nID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnPycpIHtcbiAgICAgICAgcHJlZml4ID0gXCI/XCI7XG4gICAgICAgIHNlcGFyYXRvciA9IFwiJlwiO1xuICAgICAgICBzaG93VmFyaWFibGVzID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnJicpIHtcbiAgICAgICAgcHJlZml4ID0gXCImXCI7XG4gICAgICAgIHNlcGFyYXRvciA9IFwiJlwiO1xuICAgICAgICBzaG93VmFyaWFibGVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgdmFyTmFtZXMgPSBbXTtcbiAgICB2YXIgdmFyTGlzdCA9IHNwZWMuc3BsaXQoXCIsXCIpO1xuICAgIHZhciB2YXJTcGVjcyA9IFtdO1xuICAgIHZhciB2YXJTcGVjTWFwID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB2YXJOYW1lID0gdmFyTGlzdFtpXTtcbiAgICAgICAgdmFyIHRydW5jYXRlID0gbnVsbDtcbiAgICAgICAgaWYgKHZhck5hbWUuaW5kZXhPZihcIjpcIikgIT09IC0xKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSB2YXJOYW1lLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgIHZhck5hbWUgPSBwYXJ0c1swXTtcbiAgICAgICAgICAgIHRydW5jYXRlID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3VmZmljZXMgPSB7fTtcbiAgICAgICAgd2hpbGUgKHVyaVRlbXBsYXRlU3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0pIHtcbiAgICAgICAgICAgIHN1ZmZpY2VzW3Zhck5hbWUuY2hhckF0KHZhck5hbWUubGVuZ3RoIC0gMSldID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhck5hbWUgPSB2YXJOYW1lLnN1YnN0cmluZygwLCB2YXJOYW1lLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YXJTcGVjID0ge1xuICAgICAgICAgICAgdHJ1bmNhdGU6IHRydW5jYXRlLFxuICAgICAgICAgICAgbmFtZTogdmFyTmFtZSxcbiAgICAgICAgICAgIHN1ZmZpY2VzOiBzdWZmaWNlc1xuICAgICAgICB9O1xuICAgICAgICB2YXJTcGVjcy5wdXNoKHZhclNwZWMpO1xuICAgICAgICB2YXJTcGVjTWFwW3Zhck5hbWVdID0gdmFyU3BlYztcbiAgICAgICAgdmFyTmFtZXMucHVzaCh2YXJOYW1lKTtcbiAgICB9XG4gICAgdmFyIHN1YkZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhbHVlRnVuY3Rpb24pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJTcGVjcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZhclNwZWMgPSB2YXJTcGVjc1tpXTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlRnVuY3Rpb24odmFyU3BlYy5uYW1lKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHx8ICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPT09IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gcHJlZml4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gKHNlcGFyYXRvciB8fCBcIixcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgXCI9XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5zdWZmaWNlc1snKiddID8gKHNlcGFyYXRvciB8fCBcIixcIikgOiBcIixcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJTcGVjLnN1ZmZpY2VzWycqJ10gJiYgc2hvd1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyBcIj1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2hvdWxkRXNjYXBlID8gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlW2pdKS5yZXBsYWNlKC8hL2csIFwiJTIxXCIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZVtqXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcyAmJiAhdmFyU3BlYy5zdWZmaWNlc1snKiddKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyBcIj1cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/IChzZXBhcmF0b3IgfHwgXCIsXCIpIDogXCIsXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudChrZXkpLnJlcGxhY2UoLyEvZywgXCIlMjFcIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyAnPScgOiBcIixcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZVtrZXldKS5yZXBsYWNlKC8hL2csIFwiJTIxXCIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZVtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzaG93VmFyaWFibGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJpbUVtcHR5U3RyaW5nIHx8IHZhbHVlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCI9XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhclNwZWMudHJ1bmNhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2YXJTcGVjLnRydW5jYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkucmVwbGFjZSgvIS9nLCBcIiUyMVwiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBzdWJGdW5jdGlvbi52YXJOYW1lcyA9IHZhck5hbWVzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICBzdWJzdGl0dXRpb246IHN1YkZ1bmN0aW9uXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gVXJpVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJpVGVtcGxhdGUpKSB7XG4gICAgICAgIHJldHVybiBuZXcgVXJpVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgIH1cbiAgICB2YXIgcGFydHMgPSB0ZW1wbGF0ZS5zcGxpdChcIntcIik7XG4gICAgdmFyIHRleHRQYXJ0cyA9IFtwYXJ0cy5zaGlmdCgpXTtcbiAgICB2YXIgcHJlZml4ZXMgPSBbXTtcbiAgICB2YXIgc3Vic3RpdHV0aW9ucyA9IFtdO1xuICAgIHZhciB2YXJOYW1lcyA9IFtdO1xuICAgIHdoaWxlIChwYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHMuc2hpZnQoKTtcbiAgICAgICAgdmFyIHNwZWMgPSBwYXJ0LnNwbGl0KFwifVwiKVswXTtcbiAgICAgICAgdmFyIHJlbWFpbmRlciA9IHBhcnQuc3Vic3RyaW5nKHNwZWMubGVuZ3RoICsgMSk7XG4gICAgICAgIHZhciBmdW5jcyA9IHVyaVRlbXBsYXRlU3Vic3RpdHV0aW9uKHNwZWMpO1xuICAgICAgICBzdWJzdGl0dXRpb25zLnB1c2goZnVuY3Muc3Vic3RpdHV0aW9uKTtcbiAgICAgICAgcHJlZml4ZXMucHVzaChmdW5jcy5wcmVmaXgpO1xuICAgICAgICB0ZXh0UGFydHMucHVzaChyZW1haW5kZXIpO1xuICAgICAgICB2YXJOYW1lcyA9IHZhck5hbWVzLmNvbmNhdChmdW5jcy5zdWJzdGl0dXRpb24udmFyTmFtZXMpO1xuICAgIH1cbiAgICB0aGlzLmZpbGwgPSBmdW5jdGlvbiAodmFsdWVGdW5jdGlvbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGV4dFBhcnRzWzBdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnN0aXR1dGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb25zW2ldO1xuICAgICAgICAgICAgcmVzdWx0ICs9IHN1YnN0aXR1dGlvbih2YWx1ZUZ1bmN0aW9uKTtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0UGFydHNbaSArIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICB0aGlzLnZhck5hbWVzID0gdmFyTmFtZXM7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xufVxuXG5VcmlUZW1wbGF0ZS5wcm90b3R5cGUgPSB7XG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGU7XG4gICAgfSxcbiAgICBmaWxsRnJvbU9iamVjdDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uICh2YXJOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqW3Zhck5hbWVdO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xudmFyIFZhbGlkYXRvckNvbnRleHQgPSBmdW5jdGlvbiBWYWxpZGF0b3JDb250ZXh0KHBhcmVudCwgY29sbGVjdE11bHRpcGxlLCBlcnJvclJlcG9ydGVyLCBjaGVja1JlY3Vyc2l2ZSwgdHJhY2tVbmtub3duUHJvcGVydGllcykge1xuICAgIHRoaXMubWlzc2luZyA9IFtdO1xuICAgIHRoaXMubWlzc2luZ01hcCA9IHt9O1xuICAgIHRoaXMuZm9ybWF0VmFsaWRhdG9ycyA9IHBhcmVudCA/IE9iamVjdC5jcmVhdGUocGFyZW50LmZvcm1hdFZhbGlkYXRvcnMpIDoge307XG4gICAgdGhpcy5zY2hlbWFzID0gcGFyZW50ID8gT2JqZWN0LmNyZWF0ZShwYXJlbnQuc2NoZW1hcykgOiB7fTtcbiAgICB0aGlzLmNvbGxlY3RNdWx0aXBsZSA9IGNvbGxlY3RNdWx0aXBsZTtcbiAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgIHRoaXMuaGFuZGxlRXJyb3IgPSBjb2xsZWN0TXVsdGlwbGUgPyB0aGlzLmNvbGxlY3RFcnJvciA6IHRoaXMucmV0dXJuRXJyb3I7XG4gICAgaWYgKGNoZWNrUmVjdXJzaXZlKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZWN1cnNpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjYW5uZWQgPSBbXTtcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuID0gW107XG4gICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMgPSBbXTtcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9ycyA9IFtdO1xuICAgICAgICB0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXkgPSAndHY0X3ZhbGlkYXRpb25faWQnO1xuICAgICAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXkgPSAndHY0X3ZhbGlkYXRpb25fZXJyb3JzX2lkJztcbiAgICB9XG4gICAgaWYgKHRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcbiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgIH1cbiAgICB0aGlzLmVycm9yUmVwb3J0ZXIgPSBlcnJvclJlcG9ydGVyIHx8IGRlZmF1bHRFcnJvclJlcG9ydGVyKCdlbicpO1xuICAgIGlmICh0eXBlb2YgdGhpcy5lcnJvclJlcG9ydGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlYnVnJyk7XG4gICAgfVxuICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzID0ge307XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyZW50LmRlZmluZWRLZXl3b3Jkcykge1xuICAgICAgICAgICAgdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5XSA9IHBhcmVudC5kZWZpbmVkS2V5d29yZHNba2V5XS5zbGljZSgwKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5kZWZpbmVLZXl3b3JkID0gZnVuY3Rpb24gKGtleXdvcmQsIGtleXdvcmRGdW5jdGlvbikge1xuICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdID0gdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0gfHwgW107XG4gICAgdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0ucHVzaChrZXl3b3JkRnVuY3Rpb24pO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmNyZWF0ZUVycm9yID0gZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMsIGRhdGEsIHNjaGVtYSkge1xuICAgIHZhciBlcnJvciA9IG5ldyBWYWxpZGF0aW9uRXJyb3IoY29kZSwgbWVzc2FnZVBhcmFtcywgZGF0YVBhdGgsIHNjaGVtYVBhdGgsIHN1YkVycm9ycyk7XG4gICAgZXJyb3IubWVzc2FnZSA9IHRoaXMuZXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKTtcbiAgICByZXR1cm4gZXJyb3I7XG59O1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucmV0dXJuRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3I7XG59O1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuY29sbGVjdEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5wcmVmaXhFcnJvcnMgPSBmdW5jdGlvbiAoc3RhcnRJbmRleCwgZGF0YVBhdGgsIHNjaGVtYVBhdGgpIHtcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRoaXMuZXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzW2ldID0gdGhpcy5lcnJvcnNbaV0ucHJlZml4V2l0aChkYXRhUGF0aCwgc2NoZW1hUGF0aCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmJhblVua25vd25Qcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSkge1xuICAgIGZvciAodmFyIHVua25vd25QYXRoIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpIHtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlVOS05PV05fUFJPUEVSVFksIHtwYXRoOiB1bmtub3duUGF0aH0sIHVua25vd25QYXRoLCBcIlwiLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5hZGRGb3JtYXQgPSBmdW5jdGlvbiAoZm9ybWF0LCB2YWxpZGF0b3IpIHtcbiAgICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGZvcm1hdCkge1xuICAgICAgICAgICAgdGhpcy5hZGRGb3JtYXQoa2V5LCBmb3JtYXRba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRoaXMuZm9ybWF0VmFsaWRhdG9yc1tmb3JtYXRdID0gdmFsaWRhdG9yO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJlc29sdmVSZWZzID0gZnVuY3Rpb24gKHNjaGVtYSwgdXJsSGlzdG9yeSkge1xuICAgIGlmIChzY2hlbWFbJyRyZWYnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVybEhpc3RvcnkgPSB1cmxIaXN0b3J5IHx8IHt9O1xuICAgICAgICBpZiAodXJsSGlzdG9yeVtzY2hlbWFbJyRyZWYnXV0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQ0lSQ1VMQVJfUkVGRVJFTkNFLCB7dXJsczogT2JqZWN0LmtleXModXJsSGlzdG9yeSkuam9pbignLCAnKX0sICcnLCAnJywgbnVsbCwgdW5kZWZpbmVkLCBzY2hlbWEpO1xuICAgICAgICB9XG4gICAgICAgIHVybEhpc3Rvcnlbc2NoZW1hWyckcmVmJ11dID0gdHJ1ZTtcbiAgICAgICAgc2NoZW1hID0gdGhpcy5nZXRTY2hlbWEoc2NoZW1hWyckcmVmJ10sIHVybEhpc3RvcnkpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHVybEhpc3RvcnkpIHtcbiAgICB2YXIgc2NoZW1hO1xuICAgIGlmICh0aGlzLnNjaGVtYXNbdXJsXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjaGVtYSA9IHRoaXMuc2NoZW1hc1t1cmxdO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEsIHVybEhpc3RvcnkpO1xuICAgIH1cbiAgICB2YXIgYmFzZVVybCA9IHVybDtcbiAgICB2YXIgZnJhZ21lbnQgPSBcIlwiO1xuICAgIGlmICh1cmwuaW5kZXhPZignIycpICE9PSAtMSkge1xuICAgICAgICBmcmFnbWVudCA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YoXCIjXCIpICsgMSk7XG4gICAgICAgIGJhc2VVcmwgPSB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKFwiI1wiKSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5zY2hlbWFzW2Jhc2VVcmxdID09PSAnb2JqZWN0Jykge1xuICAgICAgICBzY2hlbWEgPSB0aGlzLnNjaGVtYXNbYmFzZVVybF07XG4gICAgICAgIHZhciBwb2ludGVyUGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChmcmFnbWVudCk7XG4gICAgICAgIGlmIChwb2ludGVyUGF0aCA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyUGF0aC5jaGFyQXQoMCkgIT09IFwiL1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0cyA9IHBvaW50ZXJQYXRoLnNwbGl0KFwiL1wiKS5zbGljZSgxKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHBhcnRzW2ldLnJlcGxhY2UoL34xL2csIFwiL1wiKS5yZXBsYWNlKC9+MC9nLCBcIn5cIik7XG4gICAgICAgICAgICBpZiAoc2NoZW1hW2NvbXBvbmVudF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNjaGVtYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjaGVtYSA9IHNjaGVtYVtjb21wb25lbnRdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5taXNzaW5nW2Jhc2VVcmxdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5taXNzaW5nLnB1c2goYmFzZVVybCk7XG4gICAgICAgIHRoaXMubWlzc2luZ1tiYXNlVXJsXSA9IGJhc2VVcmw7XG4gICAgICAgIHRoaXMubWlzc2luZ01hcFtiYXNlVXJsXSA9IGJhc2VVcmw7XG4gICAgfVxufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnNlYXJjaFNjaGVtYXMgPSBmdW5jdGlvbiAoc2NoZW1hLCB1cmwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaFNjaGVtYXMoc2NoZW1hW2ldLCB1cmwpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5pZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKGlzVHJ1c3RlZFVybCh1cmwsIHNjaGVtYS5pZCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2hlbWFzW3NjaGVtYS5pZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYXNbc2NoZW1hLmlkXSA9IHNjaGVtYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gXCJlbnVtXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVtrZXldID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoU2NoZW1hcyhzY2hlbWFba2V5XSwgdXJsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCIkcmVmXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVyaSA9IGdldERvY3VtZW50VXJpKHNjaGVtYVtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVyaSAmJiB0aGlzLnNjaGVtYXNbdXJpXSA9PT0gdW5kZWZpbmVkICYmIHRoaXMubWlzc2luZ01hcFt1cmldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWlzc2luZ01hcFt1cmldID0gdXJpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmFkZFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHNjaGVtYSkge1xuICAgIC8vb3ZlcmxvYWRcbiAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIHNjaGVtYSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09ICdvYmplY3QnICYmIHR5cGVvZiB1cmwuaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzY2hlbWEgPSB1cmw7XG4gICAgICAgICAgICB1cmwgPSBzY2hlbWEuaWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHVybCA9PT0gZ2V0RG9jdW1lbnRVcmkodXJsKSArIFwiI1wiKSB7XG4gICAgICAgIC8vIFJlbW92ZSBlbXB0eSBmcmFnbWVudFxuICAgICAgICB1cmwgPSBnZXREb2N1bWVudFVyaSh1cmwpO1xuICAgIH1cbiAgICB0aGlzLnNjaGVtYXNbdXJsXSA9IHNjaGVtYTtcbiAgICBkZWxldGUgdGhpcy5taXNzaW5nTWFwW3VybF07XG4gICAgbm9ybVNjaGVtYShzY2hlbWEsIHVybCk7XG4gICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYSwgdXJsKTtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYU1hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWFwID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuc2NoZW1hcykge1xuICAgICAgICBtYXBba2V5XSA9IHRoaXMuc2NoZW1hc1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZ2V0U2NoZW1hVXJpcyA9IGZ1bmN0aW9uIChmaWx0ZXJSZWdFeHApIHtcbiAgICB2YXIgbGlzdCA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNjaGVtYXMpIHtcbiAgICAgICAgaWYgKCFmaWx0ZXJSZWdFeHAgfHwgZmlsdGVyUmVnRXhwLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgbGlzdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcyA9IGZ1bmN0aW9uIChmaWx0ZXJSZWdFeHApIHtcbiAgICB2YXIgbGlzdCA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLm1pc3NpbmdNYXApIHtcbiAgICAgICAgaWYgKCFmaWx0ZXJSZWdFeHAgfHwgZmlsdGVyUmVnRXhwLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgbGlzdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5kcm9wU2NoZW1hcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNjaGVtYXMgPSB7fTtcbiAgICB0aGlzLnJlc2V0KCk7XG59O1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5taXNzaW5nID0gW107XG4gICAgdGhpcy5taXNzaW5nTWFwID0ge307XG4gICAgdGhpcy5lcnJvcnMgPSBbXTtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQWxsID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSwgZGF0YVBhdGhQYXJ0cywgc2NoZW1hUGF0aFBhcnRzLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICB2YXIgdG9wTGV2ZWw7XG4gICAgc2NoZW1hID0gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEpO1xuICAgIGlmICghc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgVmFsaWRhdGlvbkVycm9yKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2goc2NoZW1hKTtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xuICAgIHZhciBmcm96ZW5JbmRleCwgc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ID0gbnVsbCwgc2Nhbm5lZFNjaGVtYXNJbmRleCA9IG51bGw7XG4gICAgaWYgKHRoaXMuY2hlY2tSZWN1cnNpdmUgJiYgZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdG9wTGV2ZWwgPSAhdGhpcy5zY2FubmVkLmxlbmd0aDtcbiAgICAgICAgaWYgKGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSkge1xuICAgICAgICAgICAgdmFyIHNjaGVtYUluZGV4ID0gZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmluZGV4T2Yoc2NoZW1hKTtcbiAgICAgICAgICAgIGlmIChzY2hlbWFJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmNvbmNhdChkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2NoZW1hSW5kZXhdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuKGRhdGEpKSB7XG4gICAgICAgICAgICBmcm96ZW5JbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plbi5pbmRleE9mKGRhdGEpO1xuICAgICAgICAgICAgaWYgKGZyb3plbkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciBmcm96ZW5TY2hlbWFJbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdLmluZGV4T2Yoc2NoZW1hKTtcbiAgICAgICAgICAgICAgICBpZiAoZnJvemVuU2NoZW1hSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuY29uY2F0KHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW2Zyb3plblNjaGVtYUluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjYW5uZWQucHVzaChkYXRhKTtcbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbihkYXRhKSkge1xuICAgICAgICAgICAgaWYgKGZyb3plbkluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGZyb3plbkluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4ucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzLnB1c2goW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1tmcm96ZW5JbmRleF0ubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHNjaGVtYTtcbiAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGEsIHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwgdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvL0lFIDcvOCB3b3JrYXJvdW5kXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY2FubmVkU2NoZW1hc0luZGV4ID0gZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmxlbmd0aDtcbiAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XVtzY2FubmVkU2NoZW1hc0luZGV4XSA9IHNjaGVtYTtcbiAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtzY2FubmVkU2NoZW1hc0luZGV4XSA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XG4gICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUJhc2ljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlTnVtZXJpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZUFycmF5KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlSHlwZXJtZWRpYShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZUZvcm1hdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcblxuICAgIGlmICh0b3BMZXZlbCkge1xuICAgICAgICB3aGlsZSAodGhpcy5zY2FubmVkLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLnNjYW5uZWQucG9wKCk7XG4gICAgICAgICAgICBkZWxldGUgaXRlbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plbiA9IFtdO1xuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107XG4gICAgfVxuXG4gICAgaWYgKGVycm9yIHx8IGVycm9yQ291bnQgIT09IHRoaXMuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3aGlsZSAoKGRhdGFQYXRoUGFydHMgJiYgZGF0YVBhdGhQYXJ0cy5sZW5ndGgpIHx8IChzY2hlbWFQYXRoUGFydHMgJiYgc2NoZW1hUGF0aFBhcnRzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHZhciBkYXRhUGFydCA9IChkYXRhUGF0aFBhcnRzICYmIGRhdGFQYXRoUGFydHMubGVuZ3RoKSA/IFwiXCIgKyBkYXRhUGF0aFBhcnRzLnBvcCgpIDogbnVsbDtcbiAgICAgICAgICAgIHZhciBzY2hlbWFQYXJ0ID0gKHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoKSA/IFwiXCIgKyBzY2hlbWFQYXRoUGFydHMucG9wKCkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBlcnJvci5wcmVmaXhXaXRoKGRhdGFQYXJ0LCBzY2hlbWFQYXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJlZml4RXJyb3JzKGVycm9yQ291bnQsIGRhdGFQYXJ0LCBzY2hlbWFQYXJ0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCk7XG4gICAgfSBlbHNlIGlmIChzY2FubmVkU2NoZW1hc0luZGV4ICE9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtzY2FubmVkU2NoZW1hc0luZGV4XSA9IHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2Ygc2NoZW1hLmZvcm1hdCAhPT0gJ3N0cmluZycgfHwgIXRoaXMuZm9ybWF0VmFsaWRhdG9yc1tzY2hlbWEuZm9ybWF0XSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVycm9yTWVzc2FnZSA9IHRoaXMuZm9ybWF0VmFsaWRhdG9yc1tzY2hlbWEuZm9ybWF0XS5jYWxsKG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgaWYgKHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuRk9STUFUX0NVU1RPTSwge21lc3NhZ2U6IGVycm9yTWVzc2FnZX0sICcnLCAnL2Zvcm1hdCcsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgfSBlbHNlIGlmIChlcnJvck1lc3NhZ2UgJiYgdHlwZW9mIGVycm9yTWVzc2FnZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7bWVzc2FnZTogZXJyb3JNZXNzYWdlLm1lc3NhZ2UgfHwgXCI/XCJ9LCBlcnJvck1lc3NhZ2UuZGF0YVBhdGggfHwgJycsIGVycm9yTWVzc2FnZS5zY2hlbWFQYXRoIHx8IFwiL2Zvcm1hdFwiLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmRlZmluZWRLZXl3b3Jkcykge1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbGlkYXRpb25GdW5jdGlvbnMgPSB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXldO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbGlkYXRpb25GdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBmdW5jID0gdmFsaWRhdGlvbkZ1bmN0aW9uc1tpXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jKGRhdGEsIHNjaGVtYVtrZXldLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHJlc3VsdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLktFWVdPUkRfQ1VTVE9NLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHRcbiAgICAgICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBrZXkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHJlc3VsdC5jb2RlO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFFcnJvckNvZGVzW2NvZGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZGVmaW5lZCBlcnJvciBjb2RlICh1c2UgZGVmaW5lRXJyb3IpOiAnICsgY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEVycm9yQ29kZXNbY29kZV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29kZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEVycm9yQ29kZXMuS0VZV09SRF9DVVNUT007XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlUGFyYW1zID0gKHR5cGVvZiByZXN1bHQubWVzc2FnZSA9PT0gJ29iamVjdCcpID8gcmVzdWx0Lm1lc3NhZ2UgOiB7XG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZSB8fCBcIj9cIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIHNjaGVtYVBhdGggPSByZXN1bHQuc2NoZW1hUGF0aCB8fCAoXCIvXCIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cXC8vZywgJ34xJykpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIHJlc3VsdC5kYXRhUGF0aCB8fCBudWxsLCBzY2hlbWFQYXRoLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuZnVuY3Rpb24gcmVjdXJzaXZlQ29tcGFyZShBLCBCKSB7XG4gICAgaWYgKEEgPT09IEIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChBICYmIEIgJiYgdHlwZW9mIEEgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIEIgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoQSkgIT09IEFycmF5LmlzQXJyYXkoQikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KEEpKSB7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggIT09IEIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWN1cnNpdmVDb21wYXJlKEFbaV0sIEJbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIga2V5O1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gQSkge1xuICAgICAgICAgICAgICAgIGlmIChCW2tleV0gPT09IHVuZGVmaW5lZCAmJiBBW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChrZXkgaW4gQikge1xuICAgICAgICAgICAgICAgIGlmIChBW2tleV0gPT09IHVuZGVmaW5lZCAmJiBCW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChrZXkgaW4gQSkge1xuICAgICAgICAgICAgICAgIGlmICghcmVjdXJzaXZlQ29tcGFyZShBW2tleV0sIEJba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUJhc2ljID0gZnVuY3Rpb24gdmFsaWRhdGVCYXNpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLnByZWZpeFdpdGgobnVsbCwgXCJ0eXBlXCIpO1xuICAgIH1cbiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlRW51bShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLnByZWZpeFdpdGgobnVsbCwgXCJ0eXBlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlVHlwZSA9IGZ1bmN0aW9uIHZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEpIHtcbiAgICBpZiAoc2NoZW1hLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGRhdGFUeXBlID0gdHlwZW9mIGRhdGE7XG4gICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgZGF0YVR5cGUgPSBcIm51bGxcIjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZGF0YVR5cGUgPSBcImFycmF5XCI7XG4gICAgfVxuICAgIHZhciBhbGxvd2VkVHlwZXMgPSBzY2hlbWEudHlwZTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYWxsb3dlZFR5cGVzKSkge1xuICAgICAgICBhbGxvd2VkVHlwZXMgPSBbYWxsb3dlZFR5cGVzXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbG93ZWRUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdHlwZSA9IGFsbG93ZWRUeXBlc1tpXTtcbiAgICAgICAgaWYgKHR5cGUgPT09IGRhdGFUeXBlIHx8ICh0eXBlID09PSBcImludGVnZXJcIiAmJiBkYXRhVHlwZSA9PT0gXCJudW1iZXJcIiAmJiAoZGF0YSAlIDEgPT09IDApKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5JTlZBTElEX1RZUEUsIHtcbiAgICAgICAgdHlwZTogZGF0YVR5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBhbGxvd2VkVHlwZXMuam9pbihcIi9cIilcbiAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUVudW0gPSBmdW5jdGlvbiB2YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYVtcImVudW1cIl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWFbXCJlbnVtXCJdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbnVtVmFsID0gc2NoZW1hW1wiZW51bVwiXVtpXTtcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZUNvbXBhcmUoZGF0YSwgZW51bVZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuRU5VTV9NSVNNQVRDSCwge3ZhbHVlOiAodHlwZW9mIEpTT04gIT09ICd1bmRlZmluZWQnKSA/IEpTT04uc3RyaW5naWZ5KGRhdGEpIDogZGF0YX0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTnVtZXJpYyA9IGZ1bmN0aW9uIHZhbGlkYXRlTnVtZXJpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlTXVsdGlwbGVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU1pbk1heChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU5hTihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cbnZhciBDTE9TRV9FTk9VR0hfTE9XID0gTWF0aC5wb3coMiwgLTUxKTtcbnZhciBDTE9TRV9FTk9VR0hfSElHSCA9IDEgLSBDTE9TRV9FTk9VR0hfTE9XO1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVNdWx0aXBsZU9mID0gZnVuY3Rpb24gdmFsaWRhdGVNdWx0aXBsZU9mKGRhdGEsIHNjaGVtYSkge1xuICAgIHZhciBtdWx0aXBsZU9mID0gc2NoZW1hLm11bHRpcGxlT2YgfHwgc2NoZW1hLmRpdmlzaWJsZUJ5O1xuICAgIGlmIChtdWx0aXBsZU9mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB2YXIgcmVtYWluZGVyID0gKGRhdGEgLyBtdWx0aXBsZU9mKSAlIDE7XG4gICAgICAgIGlmIChyZW1haW5kZXIgPj0gQ0xPU0VfRU5PVUdIX0xPVyAmJiByZW1haW5kZXIgPCBDTE9TRV9FTk9VR0hfSElHSCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTVVMVElQTEVfT0YsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcbiAgICAgICAgICAgICAgICBtdWx0aXBsZU9mOiBtdWx0aXBsZU9mXG4gICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heCA9IGZ1bmN0aW9uIHZhbGlkYXRlTWluTWF4KGRhdGEsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHNjaGVtYS5taW5pbXVtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGRhdGEgPCBzY2hlbWEubWluaW11bSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUlOSU1VTSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5pbXVtXG4gICAgICAgICAgICB9LCAnJywgJy9taW5pbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZW1hLmV4Y2x1c2l2ZU1pbmltdW0gJiYgZGF0YSA9PT0gc2NoZW1hLm1pbmltdW0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXG4gICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbmltdW1cbiAgICAgICAgICAgIH0sICcnLCAnL2V4Y2x1c2l2ZU1pbmltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzY2hlbWEubWF4aW11bSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkYXRhID4gc2NoZW1hLm1heGltdW0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01BWElNVU0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4aW11bVxuICAgICAgICAgICAgfSwgJycsICcvbWF4aW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVtYS5leGNsdXNpdmVNYXhpbXVtICYmIGRhdGEgPT09IHNjaGVtYS5tYXhpbXVtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhpbXVtXG4gICAgICAgICAgICB9LCAnJywgJy9leGNsdXNpdmVNYXhpbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTmFOID0gZnVuY3Rpb24gdmFsaWRhdGVOYU4oZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNOYU4oZGF0YSkgPT09IHRydWUgfHwgZGF0YSA9PT0gSW5maW5pdHkgfHwgZGF0YSA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX05PVF9BX05VTUJFUiwge3ZhbHVlOiBkYXRhfSwgJycsICcvdHlwZScsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmcgPSBmdW5jdGlvbiB2YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU3RyaW5nTGVuZ3RoKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlU3RyaW5nUGF0dGVybihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nTGVuZ3RoID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdMZW5ndGgoZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoc2NoZW1hLm1pbkxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IHNjaGVtYS5taW5MZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX0xFTkdUSF9TSE9SVCwge1xuICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbkxlbmd0aFxuICAgICAgICAgICAgfSwgJycsICcvbWluTGVuZ3RoJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2NoZW1hLm1heExlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNjaGVtYS5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX0xFTkdUSF9MT05HLCB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4TGVuZ3RoXG4gICAgICAgICAgICB9LCAnJywgJy9tYXhMZW5ndGgnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdQYXR0ZXJuID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdQYXR0ZXJuKGRhdGEsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiB8fCAodHlwZW9mIHNjaGVtYS5wYXR0ZXJuICE9PSBcInN0cmluZ1wiICYmICEoc2NoZW1hLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHJlZ2V4cDtcbiAgICBpZiAoc2NoZW1hLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmVnZXhwID0gc2NoZW1hLnBhdHRlcm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgYm9keSwgZmxhZ3MgPSAnJztcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFsc1xuICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy03LjguNVxuICAgICAgICB2YXIgbGl0ZXJhbCA9IHNjaGVtYS5wYXR0ZXJuLm1hdGNoKC9eXFwvKC4rKVxcLyhbaW1nXSopJC8pO1xuICAgICAgICBpZiAobGl0ZXJhbCkge1xuICAgICAgICAgICAgYm9keSA9IGxpdGVyYWxbMV07XG4gICAgICAgICAgICBmbGFncyA9IGxpdGVyYWxbMl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0gc2NoZW1hLnBhdHRlcm47XG4gICAgICAgIH1cbiAgICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChib2R5LCBmbGFncyk7XG4gICAgfVxuICAgIGlmICghcmVnZXhwLnRlc3QoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5TVFJJTkdfUEFUVEVSTiwge3BhdHRlcm46IHNjaGVtYS5wYXR0ZXJufSwgJycsICcvcGF0dGVybicsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheSA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXkoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlQXJyYXlMZW5ndGgoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlMZW5ndGggPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5TGVuZ3RoKGRhdGEsIHNjaGVtYSkge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoc2NoZW1hLm1pbkl0ZW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgc2NoZW1hLm1pbkl0ZW1zKSB7XG4gICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9MRU5HVEhfU0hPUlQsIHtcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5JdGVtc1xuICAgICAgICAgICAgfSwgJycsICcvbWluSXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzY2hlbWEubWF4SXRlbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBzY2hlbWEubWF4SXRlbXMpIHtcbiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0xFTkdUSF9MT05HLCB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4SXRlbXNcbiAgICAgICAgICAgIH0sICcnLCAnL21heEl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhkYXRhLCBzY2hlbWEpIHtcbiAgICBpZiAoc2NoZW1hLnVuaXF1ZUl0ZW1zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgZGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChyZWN1cnNpdmVDb21wYXJlKGRhdGFbaV0sIGRhdGFbal0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9VTklRVUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoMTogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoMjogalxuICAgICAgICAgICAgICAgICAgICB9LCAnJywgJy91bmlxdWVJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheUl0ZW1zID0gZnVuY3Rpb24gdmFsaWRhdGVBcnJheUl0ZW1zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKHNjaGVtYS5pdGVtcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZXJyb3IsIGk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLml0ZW1zKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCBzY2hlbWEuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuaXRlbXNbaV0sIFtpXSwgW1wiaXRlbXNcIiwgaV0sIGRhdGFQb2ludGVyUGF0aCArIFwiL1wiICsgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuYWRkaXRpb25hbEl0ZW1zID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gKHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9BRERJVElPTkFMX0lURU1TLCB7fSwgJy8nICsgaSwgJy9hZGRpdGlvbmFsSXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5hZGRpdGlvbmFsSXRlbXMsIFtpXSwgW1wiYWRkaXRpb25hbEl0ZW1zXCJdLCBkYXRhUG9pbnRlclBhdGggKyBcIi9cIiArIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuaXRlbXMsIFtpXSwgW1wiaXRlbXNcIl0sIGRhdGFQb2ludGVyUGF0aCArIFwiL1wiICsgaSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm9iamVjdFwiIHx8IGRhdGEgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyhkYXRhLCBzY2hlbWEpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoc2NoZW1hLm1pblByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoa2V5cy5sZW5ndGggPCBzY2hlbWEubWluUHJvcGVydGllcykge1xuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTSwge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5Q291bnQ6IGtleXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5Qcm9wZXJ0aWVzXG4gICAgICAgICAgICB9LCAnJywgJy9taW5Qcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2NoZW1hLm1heFByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiBzY2hlbWEubWF4UHJvcGVydGllcykge1xuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSwge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5Q291bnQ6IGtleXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhQcm9wZXJ0aWVzXG4gICAgICAgICAgICB9LCAnJywgJy9tYXhQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYS5yZXF1aXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLnJlcXVpcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gc2NoZW1hLnJlcXVpcmVkW2ldO1xuICAgICAgICAgICAgaWYgKGRhdGFba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9SRVFVSVJFRCwge2tleToga2V5fSwgJycsICcvcmVxdWlyZWQvJyArIGksIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgdmFyIGtleVBvaW50ZXJQYXRoID0gZGF0YVBvaW50ZXJQYXRoICsgXCIvXCIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cXC8vZywgJ34xJyk7XG4gICAgICAgIHZhciBmb3VuZE1hdGNoID0gZmFsc2U7XG4gICAgICAgIGlmIChzY2hlbWEucHJvcGVydGllcyAhPT0gdW5kZWZpbmVkICYmIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm91bmRNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLnByb3BlcnRpZXNba2V5XSwgW2tleV0sIFtcInByb3BlcnRpZXNcIiwga2V5XSwga2V5UG9pbnRlclBhdGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEucGF0dGVyblByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yICh2YXIgcGF0dGVybktleSBpbiBzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cChwYXR0ZXJuS2V5KTtcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhwLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2tleV0sIHNjaGVtYS5wYXR0ZXJuUHJvcGVydGllc1twYXR0ZXJuS2V5XSwgW2tleV0sIFtcInBhdHRlcm5Qcm9wZXJ0aWVzXCIsIHBhdHRlcm5LZXldLCBrZXlQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZvdW5kTWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVMsIHtrZXk6IGtleX0sICcnLCAnL2FkZGl0aW9uYWxQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKGtleSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzLCBba2V5XSwgW1wiYWRkaXRpb25hbFByb3BlcnRpZXNcIl0sIGtleVBvaW50ZXJQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMgJiYgIXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChzY2hlbWEuZGVwZW5kZW5jaWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZm9yICh2YXIgZGVwS2V5IGluIHNjaGVtYS5kZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICAgIGlmIChkYXRhW2RlcEtleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBkZXAgPSBzY2hlbWEuZGVwZW5kZW5jaWVzW2RlcEtleV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXAgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbZGVwXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfREVQRU5ERU5DWV9LRVksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nOiBkZXBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKG51bGwsIGRlcEtleSkucHJlZml4V2l0aChudWxsLCBcImRlcGVuZGVuY2llc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkZXApKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRLZXkgPSBkZXBbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtyZXF1aXJlZEtleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9ERVBFTkRFTkNZX0tFWSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZzogcmVxdWlyZWRLZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnJywgJy8nICsgaSwgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKG51bGwsIGRlcEtleSkucHJlZml4V2l0aChudWxsLCBcImRlcGVuZGVuY2llc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgZGVwLCBbXSwgW1wiZGVwZW5kZW5jaWVzXCIsIGRlcEtleV0sIGRhdGFQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQ29tYmluYXRpb25zID0gZnVuY3Rpb24gdmFsaWRhdGVDb21iaW5hdGlvbnMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUFsbE9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQW55T2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVPbmVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU5vdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQWxsT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZUFsbE9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKHNjaGVtYS5hbGxPZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZXJyb3I7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEuYWxsT2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5hbGxPZltpXTtcbiAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbXCJhbGxPZlwiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBbnlPZiA9IGZ1bmN0aW9uIHZhbGlkYXRlQW55T2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICBpZiAoc2NoZW1hLmFueU9mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xuICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRocztcbiAgICB9XG4gICAgdmFyIGVycm9yQXRFbmQgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmFueU9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5hbnlPZltpXTtcblxuICAgICAgICB2YXIgZXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbXCJhbnlPZlwiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKTtcblxuICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgZXJyb3JDb3VudCA9PT0gdGhpcy5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrbm93bktleSBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocykge1xuICAgICAgICAgICAgICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHNba25vd25LZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdW5rbm93bktleSBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjb250aW51ZSBsb29waW5nIHNvIHdlIGNhdGNoIGFsbCB0aGUgcHJvcGVydHkgZGVmaW5pdGlvbnMsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIHJldHVybiBhbiBlcnJvclxuICAgICAgICAgICAgICAgIGVycm9yQXRFbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvci5wcmVmaXhXaXRoKG51bGwsIFwiXCIgKyBpKS5wcmVmaXhXaXRoKG51bGwsIFwiYW55T2ZcIikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRocztcbiAgICB9XG4gICAgaWYgKGVycm9yQXRFbmQpIHtcbiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpKTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFOWV9PRl9NSVNTSU5HLCB7fSwgXCJcIiwgXCIvYW55T2ZcIiwgZXJyb3JzLCBkYXRhLCBzY2hlbWEpO1xuICAgIH1cbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT25lT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZU9uZU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKHNjaGVtYS5vbmVPZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgdmFsaWRJbmRleCA9IG51bGw7XG4gICAgdmFyIGVycm9ycyA9IFtdO1xuICAgIHZhciBzdGFydEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XG4gICAgdmFyIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzLCBvbGRLbm93blByb3BlcnR5UGF0aHM7XG4gICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xuICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7XG4gICAgICAgIG9sZEtub3duUHJvcGVydHlQYXRocyA9IHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5vbmVPZi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XG4gICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEub25lT2ZbaV07XG5cbiAgICAgICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgW1wib25lT2ZcIiwgaV0sIGRhdGFQb2ludGVyUGF0aCk7XG5cbiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGVycm9yQ291bnQgPT09IHRoaXMuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHZhbGlkSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YWxpZEluZGV4ID0gaTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT05FX09GX01VTFRJUExFLCB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4MTogdmFsaWRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgyOiBpXG4gICAgICAgICAgICAgICAgfSwgXCJcIiwgXCIvb25lT2ZcIiwgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrbm93bktleSBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocykge1xuICAgICAgICAgICAgICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHNba25vd25LZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdW5rbm93bktleSBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRocztcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7XG4gICAgfVxuICAgIGlmICh2YWxpZEluZGV4ID09PSBudWxsKSB7XG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KSk7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PTkVfT0ZfTUlTU0lORywge30sIFwiXCIsIFwiL29uZU9mXCIsIGVycm9ycywgZGF0YSwgc2NoZW1hKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOb3QgPSBmdW5jdGlvbiB2YWxpZGF0ZU5vdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGlmIChzY2hlbWEubm90ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBvbGRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xuICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRocztcbiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgIH1cbiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYS5ub3QsIG51bGwsIG51bGwsIGRhdGFQb2ludGVyUGF0aCk7XG4gICAgdmFyIG5vdEVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKG9sZEVycm9yQ291bnQpO1xuICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgb2xkRXJyb3JDb3VudCk7XG4gICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xuICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7XG4gICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkS25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIH1cbiAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgbm90RXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5PVF9QQVNTRUQsIHt9LCBcIlwiLCBcIi9ub3RcIiwgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUh5cGVybWVkaWEgPSBmdW5jdGlvbiB2YWxpZGF0ZUNvbWJpbmF0aW9ucyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGlmICghc2NoZW1hLmxpbmtzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZXJyb3I7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGlua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGxkbyA9IHNjaGVtYS5saW5rc1tpXTtcbiAgICAgICAgaWYgKGxkby5yZWwgPT09IFwiZGVzY3JpYmVkYnlcIikge1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gbmV3IFVyaVRlbXBsYXRlKGxkby5ocmVmKTtcbiAgICAgICAgICAgIHZhciBhbGxQcmVzZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGVtcGxhdGUudmFyTmFtZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoISh0ZW1wbGF0ZS52YXJOYW1lc1tqXSBpbiBkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBhbGxQcmVzZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbGxQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjaGVtYVVybCA9IHRlbXBsYXRlLmZpbGxGcm9tT2JqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgIHZhciBzdWJTY2hlbWEgPSB7XCIkcmVmXCI6IHNjaGVtYVVybH07XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbXCJsaW5rc1wiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuLy8gcGFyc2VVUkkoKSBhbmQgcmVzb2x2ZVVybCgpIGFyZSBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzEwODg4NTBcbi8vICAgLSAgcmVsZWFzZWQgYXMgcHVibGljIGRvbWFpbiBieSBhdXRob3IgKFwiWWFmZmxlXCIpIC0gc2VlIGNvbW1lbnRzIG9uIGdpc3RcblxuZnVuY3Rpb24gcGFyc2VVUkkodXJsKSB7XG4gICAgdmFyIG0gPSBTdHJpbmcodXJsKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJykubWF0Y2goL14oW146XFwvPyNdKzopPyhcXC9cXC8oPzpbXjpAXSooPzo6W146QF0qKT9AKT8oKFteOlxcLz8jXSopKD86OihcXGQqKSk/KSk/KFtePyNdKikoXFw/W14jXSopPygjW1xcc1xcU10qKT8vKTtcbiAgICAvLyBhdXRob3JpdHkgPSAnLy8nICsgdXNlciArICc6JyArIHBhc3MgJ0AnICsgaG9zdG5hbWUgKyAnOicgcG9ydFxuICAgIHJldHVybiAobSA/IHtcbiAgICAgICAgaHJlZjogbVswXSB8fCAnJyxcbiAgICAgICAgcHJvdG9jb2w6IG1bMV0gfHwgJycsXG4gICAgICAgIGF1dGhvcml0eTogbVsyXSB8fCAnJyxcbiAgICAgICAgaG9zdDogbVszXSB8fCAnJyxcbiAgICAgICAgaG9zdG5hbWU6IG1bNF0gfHwgJycsXG4gICAgICAgIHBvcnQ6IG1bNV0gfHwgJycsXG4gICAgICAgIHBhdGhuYW1lOiBtWzZdIHx8ICcnLFxuICAgICAgICBzZWFyY2g6IG1bN10gfHwgJycsXG4gICAgICAgIGhhc2g6IG1bOF0gfHwgJydcbiAgICB9IDogbnVsbCk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVVcmwoYmFzZSwgaHJlZikgey8vIFJGQyAzOTg2XG5cbiAgICBmdW5jdGlvbiByZW1vdmVEb3RTZWdtZW50cyhpbnB1dCkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICAgIGlucHV0LnJlcGxhY2UoL14oXFwuXFwuPyhcXC98JCkpKy8sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLyhcXC4oXFwvfCQpKSsvZywgJy8nKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcL1xcLlxcLiQvLCAnLy4uLycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvP1teXFwvXSovZywgZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgICBpZiAocCA9PT0gJy8uLicpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnBvcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpLnJlcGxhY2UoL15cXC8vLCBpbnB1dC5jaGFyQXQoMCkgPT09ICcvJyA/ICcvJyA6ICcnKTtcbiAgICB9XG5cbiAgICBocmVmID0gcGFyc2VVUkkoaHJlZiB8fCAnJyk7XG4gICAgYmFzZSA9IHBhcnNlVVJJKGJhc2UgfHwgJycpO1xuXG4gICAgcmV0dXJuICFocmVmIHx8ICFiYXNlID8gbnVsbCA6IChocmVmLnByb3RvY29sIHx8IGJhc2UucHJvdG9jb2wpICtcbiAgICAoaHJlZi5wcm90b2NvbCB8fCBocmVmLmF1dGhvcml0eSA/IGhyZWYuYXV0aG9yaXR5IDogYmFzZS5hdXRob3JpdHkpICtcbiAgICByZW1vdmVEb3RTZWdtZW50cyhocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5IHx8IGhyZWYucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgPyBocmVmLnBhdGhuYW1lIDogKGhyZWYucGF0aG5hbWUgPyAoKGJhc2UuYXV0aG9yaXR5ICYmICFiYXNlLnBhdGhuYW1lID8gJy8nIDogJycpICsgYmFzZS5wYXRobmFtZS5zbGljZSgwLCBiYXNlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKSArIGhyZWYucGF0aG5hbWUpIDogYmFzZS5wYXRobmFtZSkpICtcbiAgICAoaHJlZi5wcm90b2NvbCB8fCBocmVmLmF1dGhvcml0eSB8fCBocmVmLnBhdGhuYW1lID8gaHJlZi5zZWFyY2ggOiAoaHJlZi5zZWFyY2ggfHwgYmFzZS5zZWFyY2gpKSArXG4gICAgaHJlZi5oYXNoO1xufVxuXG5mdW5jdGlvbiBnZXREb2N1bWVudFVyaSh1cmkpIHtcbiAgICByZXR1cm4gdXJpLnNwbGl0KCcjJylbMF07XG59XG5cbmZ1bmN0aW9uIG5vcm1TY2hlbWEoc2NoZW1hLCBiYXNlVXJpKSB7XG4gICAgaWYgKHNjaGVtYSAmJiB0eXBlb2Ygc2NoZW1hID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChiYXNlVXJpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJhc2VVcmkgPSBzY2hlbWEuaWQ7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNjaGVtYS5pZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgYmFzZVVyaSA9IHJlc29sdmVVcmwoYmFzZVVyaSwgc2NoZW1hLmlkKTtcbiAgICAgICAgICAgIHNjaGVtYS5pZCA9IGJhc2VVcmk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBub3JtU2NoZW1hKHNjaGVtYVtpXSwgYmFzZVVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVsnJHJlZiddID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgc2NoZW1hWyckcmVmJ10gPSByZXNvbHZlVXJsKGJhc2VVcmksIHNjaGVtYVsnJHJlZiddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSBcImVudW1cIikge1xuICAgICAgICAgICAgICAgICAgICBub3JtU2NoZW1hKHNjaGVtYVtrZXldLCBiYXNlVXJpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvclJlcG9ydGVyKGxhbmd1YWdlKSB7XG4gICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZSB8fCAnZW4nO1xuXG4gICAgdmFyIGVycm9yTWVzc2FnZXMgPSBsYW5ndWFnZXNbbGFuZ3VhZ2VdO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB2YXIgbWVzc2FnZVRlbXBsYXRlID0gZXJyb3JNZXNzYWdlc1tlcnJvci5jb2RlXSB8fCBFcnJvck1lc3NhZ2VzRGVmYXVsdFtlcnJvci5jb2RlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlVGVtcGxhdGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJVbmtub3duIGVycm9yIGNvZGUgXCIgKyBlcnJvci5jb2RlICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IubWVzc2FnZVBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1lc3NhZ2VQYXJhbXMgPSBlcnJvci5wYXJhbXM7XG4gICAgICAgIC8vIEFkYXB0ZWQgZnJvbSBDcm9ja2ZvcmQncyBzdXBwbGFudCgpXG4gICAgICAgIHJldHVybiBtZXNzYWdlVGVtcGxhdGUucmVwbGFjZSgvXFx7KFtee31dKilcXH0vZywgZnVuY3Rpb24gKHdob2xlLCB2YXJOYW1lKSB7XG4gICAgICAgICAgICB2YXIgc3ViVmFsdWUgPSBtZXNzYWdlUGFyYW1zW3Zhck5hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzdWJWYWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHN1YlZhbHVlID09PSAnbnVtYmVyJyA/IHN1YlZhbHVlIDogd2hvbGU7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbnZhciBFcnJvckNvZGVzID0ge1xuICAgIElOVkFMSURfVFlQRTogMCxcbiAgICBFTlVNX01JU01BVENIOiAxLFxuICAgIEFOWV9PRl9NSVNTSU5HOiAxMCxcbiAgICBPTkVfT0ZfTUlTU0lORzogMTEsXG4gICAgT05FX09GX01VTFRJUExFOiAxMixcbiAgICBOT1RfUEFTU0VEOiAxMyxcbiAgICAvLyBOdW1lcmljIGVycm9yc1xuICAgIE5VTUJFUl9NVUxUSVBMRV9PRjogMTAwLFxuICAgIE5VTUJFUl9NSU5JTVVNOiAxMDEsXG4gICAgTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiAxMDIsXG4gICAgTlVNQkVSX01BWElNVU06IDEwMyxcbiAgICBOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6IDEwNCxcbiAgICBOVU1CRVJfTk9UX0FfTlVNQkVSOiAxMDUsXG4gICAgLy8gU3RyaW5nIGVycm9yc1xuICAgIFNUUklOR19MRU5HVEhfU0hPUlQ6IDIwMCxcbiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6IDIwMSxcbiAgICBTVFJJTkdfUEFUVEVSTjogMjAyLFxuICAgIC8vIE9iamVjdCBlcnJvcnNcbiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiAzMDAsXG4gICAgT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTogMzAxLFxuICAgIE9CSkVDVF9SRVFVSVJFRDogMzAyLFxuICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IDMwMyxcbiAgICBPQkpFQ1RfREVQRU5ERU5DWV9LRVk6IDMwNCxcbiAgICAvLyBBcnJheSBlcnJvcnNcbiAgICBBUlJBWV9MRU5HVEhfU0hPUlQ6IDQwMCxcbiAgICBBUlJBWV9MRU5HVEhfTE9ORzogNDAxLFxuICAgIEFSUkFZX1VOSVFVRTogNDAyLFxuICAgIEFSUkFZX0FERElUSU9OQUxfSVRFTVM6IDQwMyxcbiAgICAvLyBDdXN0b20vdXNlci1kZWZpbmVkIGVycm9yc1xuICAgIEZPUk1BVF9DVVNUT006IDUwMCxcbiAgICBLRVlXT1JEX0NVU1RPTTogNTAxLFxuICAgIC8vIFNjaGVtYSBzdHJ1Y3R1cmVcbiAgICBDSVJDVUxBUl9SRUZFUkVOQ0U6IDYwMCxcbiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zXG4gICAgVU5LTk9XTl9QUk9QRVJUWTogMTAwMFxufTtcbnZhciBFcnJvckNvZGVMb29rdXAgPSB7fTtcbmZvciAodmFyIGtleSBpbiBFcnJvckNvZGVzKSB7XG4gICAgRXJyb3JDb2RlTG9va3VwW0Vycm9yQ29kZXNba2V5XV0gPSBrZXk7XG59XG52YXIgRXJyb3JNZXNzYWdlc0RlZmF1bHQgPSB7XG4gICAgSU5WQUxJRF9UWVBFOiBcIkludmFsaWQgdHlwZToge3R5cGV9IChleHBlY3RlZCB7ZXhwZWN0ZWR9KVwiLFxuICAgIEVOVU1fTUlTTUFUQ0g6IFwiTm8gZW51bSBtYXRjaCBmb3I6IHt2YWx1ZX1cIixcbiAgICBBTllfT0ZfTUlTU0lORzogXCJEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXFxcImFueU9mXFxcIlwiLFxuICAgIE9ORV9PRl9NSVNTSU5HOiBcIkRhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSBcXFwib25lT2ZcXFwiXCIsXG4gICAgT05FX09GX01VTFRJUExFOiBcIkRhdGEgaXMgdmFsaWQgYWdhaW5zdCBtb3JlIHRoYW4gb25lIHNjaGVtYSBmcm9tIFxcXCJvbmVPZlxcXCI6IGluZGljZXMge2luZGV4MX0gYW5kIHtpbmRleDJ9XCIsXG4gICAgTk9UX1BBU1NFRDogXCJEYXRhIG1hdGNoZXMgc2NoZW1hIGZyb20gXFxcIm5vdFxcXCJcIixcbiAgICAvLyBOdW1lcmljIGVycm9yc1xuICAgIE5VTUJFUl9NVUxUSVBMRV9PRjogXCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIG11bHRpcGxlIG9mIHttdWx0aXBsZU9mfVwiLFxuICAgIE5VTUJFUl9NSU5JTVVNOiBcIlZhbHVlIHt2YWx1ZX0gaXMgbGVzcyB0aGFuIG1pbmltdW0ge21pbmltdW19XCIsXG4gICAgTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiBcIlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1pbmltdW0ge21pbmltdW19XCIsXG4gICAgTlVNQkVSX01BWElNVU06IFwiVmFsdWUge3ZhbHVlfSBpcyBncmVhdGVyIHRoYW4gbWF4aW11bSB7bWF4aW11bX1cIixcbiAgICBOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6IFwiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWF4aW11bSB7bWF4aW11bX1cIixcbiAgICBOVU1CRVJfTk9UX0FfTlVNQkVSOiBcIlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgdmFsaWQgbnVtYmVyXCIsXG4gICAgLy8gU3RyaW5nIGVycm9yc1xuICAgIFNUUklOR19MRU5HVEhfU0hPUlQ6IFwiU3RyaW5nIGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0gY2hhcnMpLCBtaW5pbXVtIHttaW5pbXVtfVwiLFxuICAgIFNUUklOR19MRU5HVEhfTE9ORzogXCJTdHJpbmcgaXMgdG9vIGxvbmcgKHtsZW5ndGh9IGNoYXJzKSwgbWF4aW11bSB7bWF4aW11bX1cIixcbiAgICBTVFJJTkdfUEFUVEVSTjogXCJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggcGF0dGVybjoge3BhdHRlcm59XCIsXG4gICAgLy8gT2JqZWN0IGVycm9yc1xuICAgIE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06IFwiVG9vIGZldyBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1pbmltdW0ge21pbmltdW19XCIsXG4gICAgT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTogXCJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19XCIsXG4gICAgT0JKRUNUX1JFUVVJUkVEOiBcIk1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHk6IHtrZXl9XCIsXG4gICAgT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzogXCJBZGRpdGlvbmFsIHByb3BlcnRpZXMgbm90IGFsbG93ZWRcIixcbiAgICBPQkpFQ1RfREVQRU5ERU5DWV9LRVk6IFwiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSlcIixcbiAgICAvLyBBcnJheSBlcnJvcnNcbiAgICBBUlJBWV9MRU5HVEhfU0hPUlQ6IFwiQXJyYXkgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSksIG1pbmltdW0ge21pbmltdW19XCIsXG4gICAgQVJSQVlfTEVOR1RIX0xPTkc6IFwiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX1cIixcbiAgICBBUlJBWV9VTklRVUU6IFwiQXJyYXkgaXRlbXMgYXJlIG5vdCB1bmlxdWUgKGluZGljZXMge21hdGNoMX0gYW5kIHttYXRjaDJ9KVwiLFxuICAgIEFSUkFZX0FERElUSU9OQUxfSVRFTVM6IFwiQWRkaXRpb25hbCBpdGVtcyBub3QgYWxsb3dlZFwiLFxuICAgIC8vIEZvcm1hdCBlcnJvcnNcbiAgICBGT1JNQVRfQ1VTVE9NOiBcIkZvcm1hdCB2YWxpZGF0aW9uIGZhaWxlZCAoe21lc3NhZ2V9KVwiLFxuICAgIEtFWVdPUkRfQ1VTVE9NOiBcIktleXdvcmQgZmFpbGVkOiB7a2V5fSAoe21lc3NhZ2V9KVwiLFxuICAgIC8vIFNjaGVtYSBzdHJ1Y3R1cmVcbiAgICBDSVJDVUxBUl9SRUZFUkVOQ0U6IFwiQ2lyY3VsYXIgJHJlZnM6IHt1cmxzfVwiLFxuICAgIC8vIE5vbi1zdGFuZGFyZCB2YWxpZGF0aW9uIG9wdGlvbnNcbiAgICBVTktOT1dOX1BST1BFUlRZOiBcIlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpXCJcbn07XG5cbmZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihjb2RlLCBwYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMpIHtcbiAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZXJyb3IgY29kZSBzdXBwbGllZDogXCIgKyBzY2hlbWFQYXRoKTtcbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlID0gJyc7XG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLmRhdGFQYXRoID0gZGF0YVBhdGggfHwgXCJcIjtcbiAgICB0aGlzLnNjaGVtYVBhdGggPSBzY2hlbWFQYXRoIHx8IFwiXCI7XG4gICAgdGhpcy5zdWJFcnJvcnMgPSBzdWJFcnJvcnMgfHwgbnVsbDtcblxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtcbiAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrIHx8IGVyci5zdGFja3RyYWNlO1xuICAgIGlmICghdGhpcy5zdGFjaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBlcnIuc3RhY2sgfHwgZXJyLnN0YWNrdHJhY2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5WYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVmFsaWRhdGlvbkVycm9yO1xuVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5uYW1lID0gJ1ZhbGlkYXRpb25FcnJvcic7XG5cblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUucHJlZml4V2l0aCA9IGZ1bmN0aW9uIChkYXRhUHJlZml4LCBzY2hlbWFQcmVmaXgpIHtcbiAgICBpZiAoZGF0YVByZWZpeCAhPT0gbnVsbCkge1xuICAgICAgICBkYXRhUHJlZml4ID0gZGF0YVByZWZpeC5yZXBsYWNlKC9+L2csIFwifjBcIikucmVwbGFjZSgvXFwvL2csIFwifjFcIik7XG4gICAgICAgIHRoaXMuZGF0YVBhdGggPSBcIi9cIiArIGRhdGFQcmVmaXggKyB0aGlzLmRhdGFQYXRoO1xuICAgIH1cbiAgICBpZiAoc2NoZW1hUHJlZml4ICE9PSBudWxsKSB7XG4gICAgICAgIHNjaGVtYVByZWZpeCA9IHNjaGVtYVByZWZpeC5yZXBsYWNlKC9+L2csIFwifjBcIikucmVwbGFjZSgvXFwvL2csIFwifjFcIik7XG4gICAgICAgIHRoaXMuc2NoZW1hUGF0aCA9IFwiL1wiICsgc2NoZW1hUHJlZml4ICsgdGhpcy5zY2hlbWFQYXRoO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdWJFcnJvcnMgIT09IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YkVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zdWJFcnJvcnNbaV0ucHJlZml4V2l0aChkYXRhUHJlZml4LCBzY2hlbWFQcmVmaXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gaXNUcnVzdGVkVXJsKGJhc2VVcmwsIHRlc3RVcmwpIHtcbiAgICBpZiAodGVzdFVybC5zdWJzdHJpbmcoMCwgYmFzZVVybC5sZW5ndGgpID09PSBiYXNlVXJsKSB7XG4gICAgICAgIHZhciByZW1haW5kZXIgPSB0ZXN0VXJsLnN1YnN0cmluZyhiYXNlVXJsLmxlbmd0aCk7XG4gICAgICAgIGlmICgodGVzdFVybC5sZW5ndGggPiAwICYmIHRlc3RVcmwuY2hhckF0KGJhc2VVcmwubGVuZ3RoIC0gMSkgPT09IFwiL1wiKVxuICAgICAgICAgICAgfHwgcmVtYWluZGVyLmNoYXJBdCgwKSA9PT0gXCIjXCJcbiAgICAgICAgICAgIHx8IHJlbWFpbmRlci5jaGFyQXQoMCkgPT09IFwiP1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBsYW5ndWFnZXMgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlQXBpKGxhbmd1YWdlKSB7XG4gICAgdmFyIGdsb2JhbENvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dCgpO1xuICAgIHZhciBjdXJyZW50TGFuZ3VhZ2U7XG4gICAgdmFyIGN1c3RvbUVycm9yUmVwb3J0ZXI7XG4gICAgdmFyIGFwaSA9IHtcbiAgICAgICAgc2V0RXJyb3JSZXBvcnRlcjogZnVuY3Rpb24gKHJlcG9ydGVyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcG9ydGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlKHJlcG9ydGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1c3RvbUVycm9yUmVwb3J0ZXIgPSByZXBvcnRlcjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBhZGRGb3JtYXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuYWRkRm9ybWF0LmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGxhbmd1YWdlOiBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICAgICAgaWYgKCFjb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRMYW5ndWFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VzW2NvZGVdKSB7XG4gICAgICAgICAgICAgICAgY29kZSA9IGNvZGUuc3BsaXQoJy0nKVswXTsgLy8gZmFsbCBiYWNrIHRvIGJhc2UgbGFuZ3VhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsYW5ndWFnZXNbY29kZV0pIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TGFuZ3VhZ2UgPSBjb2RlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlOyAvLyBzbyB5b3UgY2FuIHRlbGwgaWYgZmFsbC1iYWNrIGhhcyBoYXBwZW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBhZGRMYW5ndWFnZTogZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2VNYXApIHtcbiAgICAgICAgICAgIHZhciBrZXk7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBFcnJvckNvZGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VNYXBba2V5XSAmJiAhbWVzc2FnZU1hcFtFcnJvckNvZGVzW2tleV1dKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VNYXBbRXJyb3JDb2Rlc1trZXldXSA9IG1lc3NhZ2VNYXBba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcm9vdENvZGUgPSBjb2RlLnNwbGl0KCctJylbMF07XG4gICAgICAgICAgICBpZiAoIWxhbmd1YWdlc1tyb290Q29kZV0pIHsgLy8gdXNlIGZvciBiYXNlIGxhbmd1YWdlIGlmIG5vdCB5ZXQgZGVmaW5lZFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9IG1lc3NhZ2VNYXA7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW3Jvb3RDb2RlXSA9IG1lc3NhZ2VNYXA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9IE9iamVjdC5jcmVhdGUobGFuZ3VhZ2VzW3Jvb3RDb2RlXSk7XG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbWVzc2FnZU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxhbmd1YWdlc1tyb290Q29kZV1ba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tyb290Q29kZV1ba2V5XSA9IG1lc3NhZ2VNYXBba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZXNbY29kZV1ba2V5XSA9IG1lc3NhZ2VNYXBba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZnJlc2hBcGk6IGZ1bmN0aW9uIChsYW5ndWFnZSkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUFwaSgpO1xuICAgICAgICAgICAgaWYgKGxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lmxhbmd1YWdlKGxhbmd1YWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZhdWx0RXJyb3JSZXBvcnRlcihjdXJyZW50TGFuZ3VhZ2UpO1xuICAgICAgICAgICAgdmFyIGVycm9yUmVwb3J0ZXIgPSBjdXN0b21FcnJvclJlcG9ydGVyID8gZnVuY3Rpb24gKGVycm9yLCBkYXRhLCBzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tRXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKSB8fCBkZWYoZXJyb3IsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICB9IDogZGVmO1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dChnbG9iYWxDb250ZXh0LCBmYWxzZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgc2NoZW1hID0ge1wiJHJlZlwiOiBzY2hlbWF9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5hZGRTY2hlbWEoXCJcIiwgc2NoZW1hKTtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbnRleHQudmFsaWRhdGVBbGwoZGF0YSwgc2NoZW1hLCBudWxsLCBudWxsLCBcIlwiKTtcbiAgICAgICAgICAgIGlmICghZXJyb3IgJiYgYmFuVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IGNvbnRleHQuYmFuVW5rbm93blByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgIHRoaXMubWlzc2luZyA9IGNvbnRleHQubWlzc2luZztcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSAoZXJyb3IgPT09IG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlUmVzdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlLmFwcGx5KHJlc3VsdCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlTXVsdGlwbGU6IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcykge1xuICAgICAgICAgICAgdmFyIGRlZiA9IGRlZmF1bHRFcnJvclJlcG9ydGVyKGN1cnJlbnRMYW5ndWFnZSk7XG4gICAgICAgICAgICB2YXIgZXJyb3JSZXBvcnRlciA9IGN1c3RvbUVycm9yUmVwb3J0ZXIgPyBmdW5jdGlvbiAoZXJyb3IsIGRhdGEsIHNjaGVtYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21FcnJvclJlcG9ydGVyKGVycm9yLCBkYXRhLCBzY2hlbWEpIHx8IGRlZihlcnJvciwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIH0gOiBkZWY7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBWYWxpZGF0b3JDb250ZXh0KGdsb2JhbENvbnRleHQsIHRydWUsIGVycm9yUmVwb3J0ZXIsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHNjaGVtYSA9IHtcIiRyZWZcIjogc2NoZW1hfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuYWRkU2NoZW1hKFwiXCIsIHNjaGVtYSk7XG4gICAgICAgICAgICBjb250ZXh0LnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYSwgbnVsbCwgbnVsbCwgXCJcIik7XG4gICAgICAgICAgICBpZiAoYmFuVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJhblVua25vd25Qcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgICAgICByZXN1bHQuZXJyb3JzID0gY29udGV4dC5lcnJvcnM7XG4gICAgICAgICAgICByZXN1bHQubWlzc2luZyA9IGNvbnRleHQubWlzc2luZztcbiAgICAgICAgICAgIHJlc3VsdC52YWxpZCA9IChyZXN1bHQuZXJyb3JzLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBhZGRTY2hlbWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmFkZFNjaGVtYS5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTY2hlbWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmdldFNjaGVtYS5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTY2hlbWFNYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmdldFNjaGVtYU1hcC5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTY2hlbWFVcmlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWFVcmlzLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldE1pc3NpbmdVcmlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRNaXNzaW5nVXJpcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBkcm9wU2NoZW1hczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5kcm9wU2NoZW1hcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBkZWZpbmVLZXl3b3JkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWxDb250ZXh0LmRlZmluZUtleXdvcmQuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVmaW5lRXJyb3I6IGZ1bmN0aW9uIChjb2RlTmFtZSwgY29kZU51bWJlciwgZGVmYXVsdE1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZU5hbWUgIT09ICdzdHJpbmcnIHx8ICEvXltBLVpdKyhfW0EtWl0rKSokLy50ZXN0KGNvZGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgaW4gVVBQRVJfQ0FTRV9XSVRIX1VOREVSU0NPUkVTJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvZGVOdW1iZXIgIT09ICdudW1iZXInIHx8IGNvZGVOdW1iZXIgJSAxICE9PSAwIHx8IGNvZGVOdW1iZXIgPCAxMDAwMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBudW1iZXIgbXVzdCBiZSBhbiBpbnRlZ2VyID4gMTAwMDAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb2Rlc1tjb2RlTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBhbHJlYWR5IGRlZmluZWQ6ICcgKyBjb2RlTmFtZSArICcgYXMgJyArIEVycm9yQ29kZXNbY29kZU5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb2RlTG9va3VwW2NvZGVOdW1iZXJdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgY29kZSBhbHJlYWR5IHVzZWQ6ICcgKyBFcnJvckNvZGVMb29rdXBbY29kZU51bWJlcl0gKyAnIGFzICcgKyBjb2RlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEVycm9yQ29kZXNbY29kZU5hbWVdID0gY29kZU51bWJlcjtcbiAgICAgICAgICAgIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSA9IGNvZGVOYW1lO1xuICAgICAgICAgICAgRXJyb3JNZXNzYWdlc0RlZmF1bHRbY29kZU5hbWVdID0gRXJyb3JNZXNzYWdlc0RlZmF1bHRbY29kZU51bWJlcl0gPSBkZWZhdWx0TWVzc2FnZTtcbiAgICAgICAgICAgIGZvciAodmFyIGxhbmdDb2RlIGluIGxhbmd1YWdlcykge1xuICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlc1tsYW5nQ29kZV07XG4gICAgICAgICAgICAgICAgaWYgKGxhbmd1YWdlW2NvZGVOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZVtjb2RlTnVtYmVyXSA9IGxhbmd1YWdlW2NvZGVOdW1iZXJdIHx8IGxhbmd1YWdlW2NvZGVOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWxDb250ZXh0LnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubWlzc2luZyA9IFtdO1xuICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIG1pc3Npbmc6IFtdLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgIG5vcm1TY2hlbWE6IG5vcm1TY2hlbWEsXG4gICAgICAgIHJlc29sdmVVcmw6IHJlc29sdmVVcmwsXG4gICAgICAgIGdldERvY3VtZW50VXJpOiBnZXREb2N1bWVudFVyaSxcbiAgICAgICAgZXJyb3JDb2RlczogRXJyb3JDb2Rlc1xuICAgIH07XG4gICAgYXBpLmxhbmd1YWdlKGxhbmd1YWdlIHx8ICdlbicpO1xuICAgIHJldHVybiBhcGk7XG59XG5cbi8vZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRvcigpIHtcbnZhciB0djQgPSBjcmVhdGVBcGkoKTtcbnR2NC5hZGRMYW5ndWFnZSgnZW4tZ2InLCBFcnJvck1lc3NhZ2VzRGVmYXVsdCk7XG5cbi8vbGVnYWN5IHByb3BlcnR5XG50djQudHY0ID0gdHY0O1xuLy9yZXR1cm4gdHY0O1xuZXhwb3J0IGRlZmF1bHQgdHY0O1xuLy99XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy91dGlscy90djQuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFSQTtBQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFUQTtBQVdBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuQ0E7QUFxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFuQ0E7QUFDQTtBQXFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBekpBO0FBMkpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///500\n");
    }, function(module, exports, __webpack_require__) {
        eval('module.exports = { "default": __webpack_require__(502), __esModule: true };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvaXMtZnJvemVuLmpzP2Q5ZmEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9pcy1mcm96ZW5cIiksIF9fZXNNb2R1bGU6IHRydWUgfTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2lzLWZyb3plbi5qc1xuLy8gbW9kdWxlIGlkID0gNTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///501\n');
    }, function(module, exports, __webpack_require__) {
        eval("__webpack_require__(503);\nmodule.exports = __webpack_require__(13).Object.isFrozen;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuLmpzPzVmZDMiXSwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmlzRnJvemVuO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9pcy1mcm96ZW4uanNcbi8vIG1vZHVsZSBpZCA9IDUwMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///502\n");
    }, function(module, exports, __webpack_require__) {
        eval("// 19.1.2.12 Object.isFrozen(O)\nvar isObject = __webpack_require__(43);\n\n__webpack_require__(97)('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuLmpzP2M5MTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qc1xuLy8gbW9kdWxlIGlkID0gNTAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///503\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __webpack_require__(40);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _keys = __webpack_require__(46);\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nvar _Subscription = __webpack_require__(206);\n\nvar _Subscription2 = _interopRequireDefault(_Subscription);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('ReporterObject'); // Log System\n\nvar ReporterObject = function () {\n  function ReporterObject(parent, owner, url) {\n    (0, _classCallCheck3.default)(this, ReporterObject);\n\n    var _this = this;\n\n    _this._parent = parent;\n    _this._owner = owner;\n    _this._url = url;\n\n    _this._bus = parent._bus;\n\n    _this._domain = (0, _utils.divideURL)(url).domain;\n    _this._objSubscriptorURL = _this._url + '/subscription';\n\n    _this._subscriptions = {};\n    _this._childrens = [];\n    _this._childrenListeners = [];\n\n    _this._forwards = {};\n\n    _this._isToSaveData = false;\n\n    _this._allocateListeners();\n  }\n\n  (0, _createClass3.default)(ReporterObject, [{\n    key: '_allocateListeners',\n    value: function _allocateListeners() {\n      var _this2 = this;\n\n      var _this = this;\n\n      //add subscription listener...\n      _this._subscriptionListener = _this._bus.addListener(_this._objSubscriptorURL, function (msg) {\n        log.info('[SyncherManager.ReporterObject received ]', msg);\n        switch (msg.type) {\n          case 'subscribe':\n            _this._onRemoteSubscribe(msg);break;\n          case 'unsubscribe':\n            _this._onRemoteUnSubscribe(msg);break;\n          case 'response':\n            _this._onRemoteResponse(msg);break;\n        }\n      });\n\n      var changeURL = _this._url + '/changes';\n      _this._changeListener = _this._bus.addListener(changeURL, function (msg) {\n\n        log.info('[SyncherManager.ReporterObject ] SyncherManager-' + changeURL + '-RCV: ', msg);\n\n        //TODO: what todo here? Save changes?\n        if (_this2._isToSaveData && msg.body.attribute) {\n          log.log('[SyncherManager.ReporterObject ] SyncherManager - save data: ', msg);\n          _this._parent._dataObjectsStorage.update(true, _this._url, 'version', msg.body.version);\n          _this._parent._dataObjectsStorage.update(true, _this._url, 'lastModified', msg.body.lastModified);\n          _this._parent._dataObjectsStorage.saveData(true, _this._url, msg.body.attribute, msg.body.value);\n        }\n      });\n    }\n  }, {\n    key: '_releaseListeners',\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._subscriptionListener.remove();\n\n      _this._changeListener.remove();\n\n      _this._childrenListeners.forEach(function (cl) {\n        cl.remove();\n      });\n\n      (0, _keys2.default)(_this._forwards).forEach(function (key) {\n        _this.forwardUnSubscribe(key);\n      });\n\n      //remove all subscriptions\n      (0, _keys2.default)(_this._subscriptions).forEach(function (key) {\n        _this._subscriptions[key]._releaseListeners();\n      });\n    }\n  }, {\n    key: 'resumeSubscriptions',\n    value: function resumeSubscriptions(subscriptions) {\n      var _this = this;\n\n      if (!subscriptions) return;\n\n      (0, _keys2.default)(subscriptions).forEach(function (key) {\n        var hypertyURL = subscriptions[key];\n\n        log.log('[SyncherManager.ReporterObject] - resume subscriptions', _this, hypertyURL, _this._childrens);\n\n        if (!_this._subscriptions[hypertyURL]) {\n          _this._subscriptions[hypertyURL] = new _Subscription2.default(_this._bus, _this._owner, _this._url, _this._childrens, true);\n        }\n      });\n    }\n\n    /**\n     * Register a listener in the msg-node and in the local MessageBus, so that messages on this address are forwarded to the reporter object\n     * @param  {string} address - URL to register the listeners\n     * @return {Promise} Return Promise OK or error\n     */\n\n  }, {\n    key: 'forwardSubscribe',\n    value: function forwardSubscribe(addresses) {\n      var _this = this;\n\n      //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n      var nodeSubscribeMsg = {\n        type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\n        body: { resources: addresses, source: _this._owner }\n      };\n\n      return new _promise2.default(function (resolve, reject) {\n        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n          log.log('[SyncherManager.ReporterObject ]forward-subscribe-response(reporter): ', reply);\n          if (reply.body.code === 200) {\n            var newForward = _this._bus.addForward(_this._url, _this._owner);\n            _this._forwards[addresses[0]] = newForward;\n            resolve();\n          } else {\n            reject('Error on msg-node subscription: ' + reply.body.desc);\n          }\n        });\n      });\n    }\n\n    /**\n     * UnRegister a listener in the msg-node and in the local MessageBus, so that messages on this address are removed from forward\n     * @param  {string} address - URL to un-register the listeners\n     */\n\n  }, {\n    key: 'forwardUnSubscribe',\n    value: function forwardUnSubscribe(address) {\n      var _this = this;\n\n      _this._forwards[address].remove();\n      delete _this._forwards[address];\n\n      //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n      var nodeUnSubscribeMsg = {\n        type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\n        body: { resources: [address], source: _this._owner }\n      };\n\n      _this._bus.postMessage(nodeUnSubscribeMsg);\n    }\n\n    /**\n     * Register listeners for a list of childrens. Public channels used to transmit messages.\n     * @param  {string[]} childrens - channels to register\n     * @return {Promise} Return Promise OK or error\n     */\n\n  }, {\n    key: 'addChildrens',\n    value: function addChildrens(childrens) {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        if (childrens.length === 0) {\n          resolve();\n          return;\n        }\n\n        var childBaseURL = _this._url + '/children/';\n        log.log('[SyncherManager.ReporterObject - addChildrens] - childrens: ', childrens, childBaseURL);\n\n        childrens.forEach(function (child) {\n          _this._childrens.push(child);\n        });\n\n        /*\n        _this._childrens.forEach((child) => {\n          let childId = childBaseURL + child;\n           let selfForward = _this._bus.addForward(childId, owner);\n          _this._childrenListeners.push(selfForward);\n        });*/\n\n        var subscriptions = [];\n        childrens.forEach(function (child) {\n          return subscriptions.push(childBaseURL + child);\n        });\n\n        //_this._storageSubscriptions[_this._objSubscriptorURL] = {url: _this._url, owner: _this._owner, childrens: _this._childrens};\n\n        //FLOW-OUT: message sent to the msg-node SubscriptionManager component\n        var nodeSubscribeMsg = {\n          type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',\n          body: { resources: subscriptions, source: _this._owner }\n        };\n\n        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n          log.log('[SyncherManager.ReporterObject ]node-subscribe-response(reporter):', reply);\n          if (reply.body.code === 200) {\n\n            //add children listeners on local ...\n            subscriptions.forEach(function (childURL) {\n              var childListener = _this._bus.addListener(childURL, function (msg) {\n                //TODO: what todo here? Save childrens?\n                log.log('[SyncherManager.ReporterObject received]', msg);\n\n                if (msg.type === 'create' && msg.to.includes('children') && _this3._isToSaveData) {\n\n                  // if the value is not encrypted lets encrypt it\n                  // todo: should be subject to some policy\n                  var splitedReporterURL = (0, _utils.splitObjectURL)(msg.to);\n\n                  var url = splitedReporterURL.url;\n\n                  //remove false when mutualAuthentication is enabled\n                  if (!(typeof msg.body.value === 'string')) {\n\n                    log.log('[SyncherManager.ReporterObject] encrypting received data ', msg.body.value);\n\n                    _this._parent._identityModule.encryptDataObject(msg.body.value, url).then(function (encryptedValue) {\n                      log.log('[SyncherManager.ReporterObject] encrypted data ', encryptedValue);\n\n                      _this._storeChildObject(msg, (0, _stringify2.default)(encryptedValue));\n                    }).catch(function (reason) {\n                      log.warn('[SyncherManager._decryptChildrens] failed : ', reason, ' Storing unencrypted');\n                      _this._storeChildObject(msg, msg.body.value);\n                    });\n                  } else {\n                    _this._storeChildObject(msg, msg.body.value);\n                  }\n                }\n              });\n              _this._childrenListeners.push(childListener);\n\n              var selfForward = _this._bus.addForward(childURL, _this._owner);\n              _this._childrenListeners.push(selfForward);\n            });\n\n            resolve();\n          } else {\n            reject('Error on msg-node subscription: ' + reply.body.desc);\n          }\n        });\n      });\n    }\n\n    // store childObject\n\n  }, {\n    key: '_storeChildObject',\n    value: function _storeChildObject(msg, data) {\n      var _this = this;\n\n      var splitedReporterURL = (0, _utils.splitObjectURL)(msg.to);\n\n      var url = splitedReporterURL.url;\n\n      var resource = splitedReporterURL.resource;\n      var value = {\n        identity: msg.body.identity,\n        value: data\n      };\n\n      var objectURLResource = msg.body.resource;\n      var attribute = resource;\n\n      if (objectURLResource) attribute += '.' + objectURLResource;\n\n      // this identity data is not needed to be stored\n      delete value.identity.assertion;\n      delete value.identity.expires;\n\n      console.log('[SyncherManager.ReporterObject._storeChildObject] : ', url, attribute, value);\n\n      _this._parent._dataObjectsStorage.saveChildrens(true, url, attribute, value);\n    }\n  }, {\n    key: 'delete',\n    value: function _delete() {\n      var _this = this;\n      var domain = (0, _utils.divideURL)(_this._owner).domain;\n\n      //FLOW-OUT: message sent directly to all subscribers of the reporter\n      _this._bus.postMessage({\n        type: 'delete', from: _this._objSubscriptorURL, to: _this._url + '/changes'\n      });\n\n      //FLOW-OUT: message sent to the msg-node ObjectAllocationManager component\n      _this._bus.postMessage({\n        type: 'delete', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',\n        body: { resource: _this._url, childrenResources: _this._childrens }\n      });\n\n      _this._releaseListeners();\n      delete _this._parent._reporters[_this._url];\n    }\n  }, {\n    key: '_onRemoteResponse',\n    value: function _onRemoteResponse(msg) {\n      var _this = this;\n\n      _this._bus.postMessage({\n        id: msg.id, type: 'response', from: msg.to, to: _this._url,\n        body: { code: msg.body.code, identity: msg.body.identity, source: msg.from }\n      });\n    }\n\n    //FLOW-IN: message received from Syncher -> subscribe\n\n  }, {\n    key: '_onRemoteSubscribe',\n    value: function _onRemoteSubscribe(msg) {\n      var _this = this;\n      var hypertyURL = msg.body.subscriber;\n\n      //validate if subscription already exists?\n      if (_this._subscriptions[hypertyURL]) {\n        // let errorMsg = {\n        //   id: msg.id, type: 'response', from: msg.to, to: hypertyURL,\n        //   body: { code: 500, desc: 'Subscription for (' + _this._url + ' : ' +  hypertyURL + ') already exists!' }\n        // };\n        //\n        // _this._bus.postMessage(errorMsg);\n        // return;\n\n        // new version because of reusage\n        _this._subscriptions[hypertyURL]._releaseListeners();\n      }\n\n      //ask to subscribe to Syncher? (depends on the operation mode)\n      //TODO: get mode from object!\n      var mode = 'sub/pub';\n\n      if (mode === 'sub/pub') {\n        //FLOW-OUT: message sent to local hyperty address Syncher -> _onForward\n        var forwardMsg = {\n          type: 'forward', from: _this._url, to: _this._owner,\n          body: { type: msg.type, from: hypertyURL, to: _this._url, identity: msg.body.identity }\n        };\n\n        //TODO: For Further Study\n        if (msg.body.hasOwnProperty('mutual')) forwardMsg.body.mutual = msg.body.mutual;\n\n        _this._bus.postMessage(forwardMsg, function (reply) {\n          log.log('[SyncherManager.ReporterObject ]forward-reply: ', reply);\n          if (reply.body.code === 200) {\n            if (!_this._subscriptions[hypertyURL]) {\n              log.log('[SyncherManager.ReporterObject] - _onRemoteSubscribe:', _this._childrens);\n              _this._subscriptions[hypertyURL] = new _Subscription2.default(_this._bus, _this._owner, _this._url, _this._childrens, true);\n            }\n          }\n\n          //TODO: atualizar mutual no storage e tb na sessionKeys\n\n          // Store for each reporter hyperty the dataObject\n          var userURL = void 0;\n          if (msg.body.identity && msg.body.identity.userProfile.userURL) {\n            userURL = msg.body.identity.userProfile.userURL;\n            _this._parent._dataObjectsStorage.update(true, _this._url, 'subscriberUsers', userURL);\n          }\n\n          if (msg.body.hasOwnProperty('mutual')) {\n            //          _this._parent._identityModule.updateIsToEncryptForDataObjectSessionKey(_this._url, msg.body.mutual).then(()=>{\n            _this._parent._dataObjectsStorage.update(true, _this._url, 'mutual', msg.body.mutual);\n            //          });\n          }\n\n          _this._parent._dataObjectsStorage.update(true, _this._url, 'subscriptions', hypertyURL);\n\n          reply.body.owner = _this._owner;\n\n          //FLOW-OUT: subscription response sent (forward from internal Hyperty)\n          _this._bus.postMessage({\n            id: msg.id, type: 'response', from: msg.to, to: msg.from,\n            body: reply.body\n          });\n        });\n      }\n    }\n\n    //FLOW-IN: message received from remote ObserverObject -> removeSubscription\n\n  }, {\n    key: '_onRemoteUnSubscribe',\n    value: function _onRemoteUnSubscribe(msg) {\n      var _this = this;\n      var unsubscriber = msg.body.source;\n\n      var subscription = _this._subscriptions[unsubscriber];\n      if (subscription) {\n        subscription._releaseListeners();\n        delete _this._subscriptions[unsubscriber];\n\n        var forwardMsg = {\n          type: 'forward', from: _this._url, to: _this._owner,\n          body: { type: msg.type, from: unsubscriber, to: _this._url, identity: msg.body.identity }\n        };\n\n        _this._bus.postMessage(forwardMsg);\n      }\n    }\n  }, {\n    key: 'isToSaveData',\n    set: function set(value) {\n      this._isToSaveData = value;\n    }\n  }]);\n  return ReporterObject;\n}();\n\nexports.default = ReporterObject;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9zeW5jaGVyL1JlcG9ydGVyT2JqZWN0LmpzP2M3Y2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTG9nIFN5c3RlbVxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJ2xvZ2xldmVsJztcbmxldCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdSZXBvcnRlck9iamVjdCcpO1xuXG5pbXBvcnQgeyBkaXZpZGVVUkwsIHNwbGl0T2JqZWN0VVJMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5cbmNsYXNzIFJlcG9ydGVyT2JqZWN0IHtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQsIG93bmVyLCB1cmwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICBfdGhpcy5fb3duZXIgPSBvd25lcjtcbiAgICBfdGhpcy5fdXJsID0gdXJsO1xuXG4gICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzO1xuXG4gICAgX3RoaXMuX2RvbWFpbiA9IGRpdmlkZVVSTCh1cmwpLmRvbWFpbjtcbiAgICBfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwgPSBfdGhpcy5fdXJsICsgJy9zdWJzY3JpcHRpb24nO1xuXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICBfdGhpcy5fY2hpbGRyZW5zID0gW107XG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107XG5cbiAgICBfdGhpcy5fZm9yd2FyZHMgPSB7fTtcblxuICAgIF90aGlzLl9pc1RvU2F2ZURhdGEgPSBmYWxzZTtcblxuICAgIF90aGlzLl9hbGxvY2F0ZUxpc3RlbmVycygpO1xuICB9XG5cbiAgX2FsbG9jYXRlTGlzdGVuZXJzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvL2FkZCBzdWJzY3JpcHRpb24gbGlzdGVuZXIuLi5cbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9uTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCwgKG1zZykgPT4ge1xuICAgICAgbG9nLmluZm8oJ1tTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdCByZWNlaXZlZCBdJywgbXNnKTtcbiAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzogX3RoaXMuX29uUmVtb3RlU3Vic2NyaWJlKG1zZyk7IGJyZWFrO1xuICAgICAgICBjYXNlICd1bnN1YnNjcmliZSc6IF90aGlzLl9vblJlbW90ZVVuU3Vic2NyaWJlKG1zZyk7IGJyZWFrO1xuICAgICAgICBjYXNlICdyZXNwb25zZSc6IF90aGlzLl9vblJlbW90ZVJlc3BvbnNlKG1zZyk7IGJyZWFrO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGV0IGNoYW5nZVVSTCA9IF90aGlzLl91cmwgKyAnL2NoYW5nZXMnO1xuICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoY2hhbmdlVVJMLCAobXNnKSA9PiB7XG5cbiAgICAgIGxvZy5pbmZvKCdbU3luY2hlck1hbmFnZXIuUmVwb3J0ZXJPYmplY3QgXSBTeW5jaGVyTWFuYWdlci0nICsgY2hhbmdlVVJMICsgJy1SQ1Y6ICcsIG1zZyk7XG5cbiAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hhbmdlcz9cbiAgICAgIGlmICh0aGlzLl9pc1RvU2F2ZURhdGEgJiYgbXNnLmJvZHkuYXR0cmlidXRlKSB7XG4gICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdCBdIFN5bmNoZXJNYW5hZ2VyIC0gc2F2ZSBkYXRhOiAnLCBtc2cpO1xuICAgICAgICBfdGhpcy5fcGFyZW50Ll9kYXRhT2JqZWN0c1N0b3JhZ2UudXBkYXRlKHRydWUsIF90aGlzLl91cmwsICd2ZXJzaW9uJywgbXNnLmJvZHkudmVyc2lvbik7XG4gICAgICAgIF90aGlzLl9wYXJlbnQuX2RhdGFPYmplY3RzU3RvcmFnZS51cGRhdGUodHJ1ZSwgX3RoaXMuX3VybCwgJ2xhc3RNb2RpZmllZCcsIG1zZy5ib2R5Lmxhc3RNb2RpZmllZCk7XG4gICAgICAgIF90aGlzLl9wYXJlbnQuX2RhdGFPYmplY3RzU3RvcmFnZS5zYXZlRGF0YSh0cnVlLCBfdGhpcy5fdXJsLCBtc2cuYm9keS5hdHRyaWJ1dGUsIG1zZy5ib2R5LnZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldCBpc1RvU2F2ZURhdGEodmFsdWUpIHtcbiAgICB0aGlzLl9pc1RvU2F2ZURhdGEgPSB2YWx1ZTtcbiAgfVxuXG4gIF9yZWxlYXNlTGlzdGVuZXJzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9uTGlzdGVuZXIucmVtb3ZlKCk7XG5cbiAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCk7XG5cbiAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaCgoY2wpID0+IHtcbiAgICAgIGNsLnJlbW92ZSgpO1xuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXMoX3RoaXMuX2ZvcndhcmRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIF90aGlzLmZvcndhcmRVblN1YnNjcmliZShrZXkpO1xuICAgIH0pO1xuXG4gICAgLy9yZW1vdmUgYWxsIHN1YnNjcmlwdGlvbnNcbiAgICBPYmplY3Qua2V5cyhfdGhpcy5fc3Vic2NyaXB0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1trZXldLl9yZWxlYXNlTGlzdGVuZXJzKCk7XG4gICAgfSk7XG4gIH1cblxuICByZXN1bWVTdWJzY3JpcHRpb25zKHN1YnNjcmlwdGlvbnMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCFzdWJzY3JpcHRpb25zKVxuICAgICAgcmV0dXJuO1xuXG4gICAgT2JqZWN0LmtleXMoc3Vic2NyaXB0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBsZXQgaHlwZXJ0eVVSTCA9IHN1YnNjcmlwdGlvbnNba2V5XTtcblxuICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyLlJlcG9ydGVyT2JqZWN0XSAtIHJlc3VtZSBzdWJzY3JpcHRpb25zJywgX3RoaXMsIGh5cGVydHlVUkwsIF90aGlzLl9jaGlsZHJlbnMpO1xuXG4gICAgICBpZiAoIV90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdKSB7XG4gICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdID0gbmV3IFN1YnNjcmlwdGlvbihfdGhpcy5fYnVzLCBfdGhpcy5fb3duZXIsIF90aGlzLl91cmwsIF90aGlzLl9jaGlsZHJlbnMsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBsaXN0ZW5lciBpbiB0aGUgbXNnLW5vZGUgYW5kIGluIHRoZSBsb2NhbCBNZXNzYWdlQnVzLCBzbyB0aGF0IG1lc3NhZ2VzIG9uIHRoaXMgYWRkcmVzcyBhcmUgZm9yd2FyZGVkIHRvIHRoZSByZXBvcnRlciBvYmplY3RcbiAgICogQHBhcmFtICB7c3RyaW5nfSBhZGRyZXNzIC0gVVJMIHRvIHJlZ2lzdGVyIHRoZSBsaXN0ZW5lcnNcbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJuIFByb21pc2UgT0sgb3IgZXJyb3JcbiAgICovXG4gIGZvcndhcmRTdWJzY3JpYmUoYWRkcmVzc2VzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnRcbiAgICBsZXQgbm9kZVN1YnNjcmliZU1zZyA9IHtcbiAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJyxcbiAgICAgIGJvZHk6IHsgcmVzb3VyY2VzOiBhZGRyZXNzZXMsIHNvdXJjZTogX3RoaXMuX293bmVyIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdCBdZm9yd2FyZC1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOiAnLCByZXBseSk7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIGxldCBuZXdGb3J3YXJkID0gX3RoaXMuX2J1cy5hZGRGb3J3YXJkKF90aGlzLl91cmwsIF90aGlzLl9vd25lcik7XG4gICAgICAgICAgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3Nlc1swXV0gPSBuZXdGb3J3YXJkO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIG1zZy1ub2RlIHN1YnNjcmlwdGlvbjogJyArIHJlcGx5LmJvZHkuZGVzYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVuUmVnaXN0ZXIgYSBsaXN0ZW5lciBpbiB0aGUgbXNnLW5vZGUgYW5kIGluIHRoZSBsb2NhbCBNZXNzYWdlQnVzLCBzbyB0aGF0IG1lc3NhZ2VzIG9uIHRoaXMgYWRkcmVzcyBhcmUgcmVtb3ZlZCBmcm9tIGZvcndhcmRcbiAgICogQHBhcmFtICB7c3RyaW5nfSBhZGRyZXNzIC0gVVJMIHRvIHVuLXJlZ2lzdGVyIHRoZSBsaXN0ZW5lcnNcbiAgICovXG4gIGZvcndhcmRVblN1YnNjcmliZShhZGRyZXNzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9mb3J3YXJkc1thZGRyZXNzXS5yZW1vdmUoKTtcbiAgICBkZWxldGUgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3NdO1xuXG4gICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudFxuICAgIGxldCBub2RlVW5TdWJzY3JpYmVNc2cgPSB7XG4gICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJyxcbiAgICAgIGJvZHk6IHsgcmVzb3VyY2VzOiBbYWRkcmVzc10sIHNvdXJjZTogX3RoaXMuX293bmVyIH1cbiAgICB9O1xuXG4gICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShub2RlVW5TdWJzY3JpYmVNc2cpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGxpc3RlbmVycyBmb3IgYSBsaXN0IG9mIGNoaWxkcmVucy4gUHVibGljIGNoYW5uZWxzIHVzZWQgdG8gdHJhbnNtaXQgbWVzc2FnZXMuXG4gICAqIEBwYXJhbSAge3N0cmluZ1tdfSBjaGlsZHJlbnMgLSBjaGFubmVscyB0byByZWdpc3RlclxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm4gUHJvbWlzZSBPSyBvciBlcnJvclxuICAgKi9cbiAgYWRkQ2hpbGRyZW5zKGNoaWxkcmVucykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKGNoaWxkcmVucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBjaGlsZEJhc2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGlsZHJlbi8nO1xuICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyLlJlcG9ydGVyT2JqZWN0IC0gYWRkQ2hpbGRyZW5zXSAtIGNoaWxkcmVuczogJywgY2hpbGRyZW5zLCBjaGlsZEJhc2VVUkwpO1xuXG4gICAgICBjaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgX3RoaXMuX2NoaWxkcmVucy5wdXNoKGNoaWxkKTtcbiAgICAgIH0pO1xuXG4gICAgICAvKlxuICAgICAgX3RoaXMuX2NoaWxkcmVucy5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICBsZXQgY2hpbGRJZCA9IGNoaWxkQmFzZVVSTCArIGNoaWxkO1xuXG4gICAgICAgIGxldCBzZWxmRm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChjaGlsZElkLCBvd25lcik7XG4gICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKHNlbGZGb3J3YXJkKTtcbiAgICAgIH0pOyovXG5cbiAgICAgIGxldCBzdWJzY3JpcHRpb25zID0gW107XG4gICAgICBjaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHN1YnNjcmlwdGlvbnMucHVzaChjaGlsZEJhc2VVUkwgKyBjaGlsZCkpO1xuXG4gICAgICAvL190aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9uc1tfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkxdID0ge3VybDogX3RoaXMuX3VybCwgb3duZXI6IF90aGlzLl9vd25lciwgY2hpbGRyZW5zOiBfdGhpcy5fY2hpbGRyZW5zfTtcblxuICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudFxuICAgICAgbGV0IG5vZGVTdWJzY3JpYmVNc2cgPSB7XG4gICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJyxcbiAgICAgICAgYm9keTogeyByZXNvdXJjZXM6IHN1YnNjcmlwdGlvbnMsIHNvdXJjZTogX3RoaXMuX293bmVyIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdCBdbm9kZS1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOicsIHJlcGx5KTtcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG5cbiAgICAgICAgICAvL2FkZCBjaGlsZHJlbiBsaXN0ZW5lcnMgb24gbG9jYWwgLi4uXG4gICAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChjaGlsZFVSTCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNoaWxkTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoaWxkVVJMLCAobXNnKSA9PiB7XG4gICAgICAgICAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hpbGRyZW5zP1xuICAgICAgICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuUmVwb3J0ZXJPYmplY3QgcmVjZWl2ZWRdJywgbXNnKTtcblxuICAgICAgICAgICAgICBpZiAobXNnLnR5cGUgPT09ICdjcmVhdGUnICYmIG1zZy50by5pbmNsdWRlcygnY2hpbGRyZW4nKSAmJiB0aGlzLl9pc1RvU2F2ZURhdGEpIHtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBub3QgZW5jcnlwdGVkIGxldHMgZW5jcnlwdCBpdFxuICAgICAgICAgICAgICAgIC8vIHRvZG86IHNob3VsZCBiZSBzdWJqZWN0IHRvIHNvbWUgcG9saWN5XG4gICAgICAgICAgICAgICAgbGV0IHNwbGl0ZWRSZXBvcnRlclVSTCA9IHNwbGl0T2JqZWN0VVJMKG1zZy50byk7XG5cbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gc3BsaXRlZFJlcG9ydGVyVVJMLnVybDtcblxuICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGZhbHNlIHdoZW4gbXV0dWFsQXV0aGVudGljYXRpb24gaXMgZW5hYmxlZFxuICAgICAgICAgICAgICAgIGlmICghKHR5cGVvZiBtc2cuYm9keS52YWx1ZSA9PT0gJ3N0cmluZycpKSB7XG5cbiAgICAgICAgICAgICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdF0gZW5jcnlwdGluZyByZWNlaXZlZCBkYXRhICcsIG1zZy5ib2R5LnZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgX3RoaXMuX3BhcmVudC5faWRlbnRpdHlNb2R1bGUuZW5jcnlwdERhdGFPYmplY3QobXNnLmJvZHkudmFsdWUsIHVybCkudGhlbigoZW5jcnlwdGVkVmFsdWUpPT57XG4gICAgICAgICAgICAgICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdF0gZW5jcnlwdGVkIGRhdGEgJywgIGVuY3J5cHRlZFZhbHVlKTtcblxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmVDaGlsZE9iamVjdChtc2csIEpTT04uc3RyaW5naWZ5KGVuY3J5cHRlZFZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxvZy53YXJuKCdbU3luY2hlck1hbmFnZXIuX2RlY3J5cHRDaGlsZHJlbnNdIGZhaWxlZCA6ICcsIHJlYXNvbiwgJyBTdG9yaW5nIHVuZW5jcnlwdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdG9yZUNoaWxkT2JqZWN0KG1zZywgbXNnLmJvZHkudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLl9zdG9yZUNoaWxkT2JqZWN0KG1zZywgbXNnLmJvZHkudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGNoaWxkTGlzdGVuZXIpO1xuXG4gICAgICAgICAgICBsZXQgc2VsZkZvcndhcmQgPSBfdGhpcy5fYnVzLmFkZEZvcndhcmQoY2hpbGRVUkwsIF90aGlzLl9vd25lcik7XG4gICAgICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBtc2ctbm9kZSBzdWJzY3JpcHRpb246ICcgKyByZXBseS5ib2R5LmRlc2MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0b3JlIGNoaWxkT2JqZWN0XG5cbiAgX3N0b3JlQ2hpbGRPYmplY3QobXNnLCBkYXRhKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBzcGxpdGVkUmVwb3J0ZXJVUkwgPSBzcGxpdE9iamVjdFVSTChtc2cudG8pO1xuXG4gICAgbGV0IHVybCA9IHNwbGl0ZWRSZXBvcnRlclVSTC51cmw7XG5cbiAgICBsZXQgcmVzb3VyY2UgPSBzcGxpdGVkUmVwb3J0ZXJVUkwucmVzb3VyY2U7XG4gICAgbGV0IHZhbHVlID0ge1xuICAgICAgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LFxuICAgICAgdmFsdWU6IGRhdGFcbiAgICB9O1xuXG4gICAgbGV0IG9iamVjdFVSTFJlc291cmNlID0gbXNnLmJvZHkucmVzb3VyY2U7XG4gICAgbGV0IGF0dHJpYnV0ZSA9IHJlc291cmNlO1xuXG4gICAgaWYgKG9iamVjdFVSTFJlc291cmNlKSBhdHRyaWJ1dGUgKz0gJy4nICsgb2JqZWN0VVJMUmVzb3VyY2U7XG5cbiAgICAvLyB0aGlzIGlkZW50aXR5IGRhdGEgaXMgbm90IG5lZWRlZCB0byBiZSBzdG9yZWRcbiAgICBkZWxldGUgdmFsdWUuaWRlbnRpdHkuYXNzZXJ0aW9uO1xuICAgIGRlbGV0ZSB2YWx1ZS5pZGVudGl0eS5leHBpcmVzO1xuXG5cbiAgICBjb25zb2xlLmxvZygnW1N5bmNoZXJNYW5hZ2VyLlJlcG9ydGVyT2JqZWN0Ll9zdG9yZUNoaWxkT2JqZWN0XSA6ICcsIHVybCwgYXR0cmlidXRlLCB2YWx1ZSk7XG5cbiAgICBfdGhpcy5fcGFyZW50Ll9kYXRhT2JqZWN0c1N0b3JhZ2Uuc2F2ZUNoaWxkcmVucyh0cnVlLCB1cmwsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChfdGhpcy5fb3duZXIpLmRvbWFpbjtcblxuICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCBkaXJlY3RseSB0byBhbGwgc3Vic2NyaWJlcnMgb2YgdGhlIHJlcG9ydGVyXG4gICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMLCB0bzogX3RoaXMuX3VybCArICcvY2hhbmdlcydcbiAgICB9KTtcblxuICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgT2JqZWN0QWxsb2NhdGlvbk1hbmFnZXIgY29tcG9uZW50XG4gICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL29iamVjdC1hZGRyZXNzLWFsbG9jYXRpb24nLFxuICAgICAgYm9keTogeyByZXNvdXJjZTogX3RoaXMuX3VybCwgY2hpbGRyZW5SZXNvdXJjZXM6IF90aGlzLl9jaGlsZHJlbnMgfVxuICAgIH0pO1xuXG4gICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTtcbiAgICBkZWxldGUgX3RoaXMuX3BhcmVudC5fcmVwb3J0ZXJzW190aGlzLl91cmxdO1xuICB9XG5cbiAgX29uUmVtb3RlUmVzcG9uc2UobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogX3RoaXMuX3VybCxcbiAgICAgIGJvZHk6IHsgY29kZTogbXNnLmJvZHkuY29kZSwgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCBzb3VyY2U6IG1zZy5mcm9tIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIFN5bmNoZXIgLT4gc3Vic2NyaWJlXG4gIF9vblJlbW90ZVN1YnNjcmliZShtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBoeXBlcnR5VVJMID0gbXNnLmJvZHkuc3Vic2NyaWJlcjtcblxuICAgIC8vdmFsaWRhdGUgaWYgc3Vic2NyaXB0aW9uIGFscmVhZHkgZXhpc3RzP1xuICAgIGlmIChfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSkge1xuICAgICAgLy8gbGV0IGVycm9yTXNnID0ge1xuICAgICAgLy8gICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBoeXBlcnR5VVJMLFxuICAgICAgLy8gICBib2R5OiB7IGNvZGU6IDUwMCwgZGVzYzogJ1N1YnNjcmlwdGlvbiBmb3IgKCcgKyBfdGhpcy5fdXJsICsgJyA6ICcgKyAgaHlwZXJ0eVVSTCArICcpIGFscmVhZHkgZXhpc3RzIScgfVxuICAgICAgLy8gfTtcbiAgICAgIC8vXG4gICAgICAvLyBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKGVycm9yTXNnKTtcbiAgICAgIC8vIHJldHVybjtcblxuICAgICAgLy8gbmV3IHZlcnNpb24gYmVjYXVzZSBvZiByZXVzYWdlXG4gICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXS5fcmVsZWFzZUxpc3RlbmVycygpO1xuICAgIH1cblxuICAgIC8vYXNrIHRvIHN1YnNjcmliZSB0byBTeW5jaGVyPyAoZGVwZW5kcyBvbiB0aGUgb3BlcmF0aW9uIG1vZGUpXG4gICAgLy9UT0RPOiBnZXQgbW9kZSBmcm9tIG9iamVjdCFcbiAgICBsZXQgbW9kZSA9ICdzdWIvcHViJztcblxuICAgIGlmIChtb2RlID09PSAnc3ViL3B1YicpIHtcbiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBsb2NhbCBoeXBlcnR5IGFkZHJlc3MgU3luY2hlciAtPiBfb25Gb3J3YXJkXG4gICAgICBsZXQgZm9yd2FyZE1zZyA9IHtcbiAgICAgICAgdHlwZTogJ2ZvcndhcmQnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogX3RoaXMuX293bmVyLFxuICAgICAgICBib2R5OiB7IHR5cGU6IG1zZy50eXBlLCBmcm9tOiBoeXBlcnR5VVJMLCB0bzogX3RoaXMuX3VybCwgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5IH1cbiAgICAgIH07XG5cbiAgICAgIC8vVE9ETzogRm9yIEZ1cnRoZXIgU3R1ZHlcbiAgICAgIGlmIChtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgnbXV0dWFsJykpIGZvcndhcmRNc2cuYm9keS5tdXR1YWwgPSBtc2cuYm9keS5tdXR1YWw7XG5cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoZm9yd2FyZE1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5SZXBvcnRlck9iamVjdCBdZm9yd2FyZC1yZXBseTogJywgcmVwbHkpO1xuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICBpZiAoIV90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdKSB7XG4gICAgICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuUmVwb3J0ZXJPYmplY3RdIC0gX29uUmVtb3RlU3Vic2NyaWJlOicsIF90aGlzLl9jaGlsZHJlbnMpO1xuICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF0gPSBuZXcgU3Vic2NyaXB0aW9uKF90aGlzLl9idXMsIF90aGlzLl9vd25lciwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9UT0RPOiBhdHVhbGl6YXIgbXV0dWFsIG5vIHN0b3JhZ2UgZSB0YiBuYSBzZXNzaW9uS2V5c1xuXG4gICAgICAgIC8vIFN0b3JlIGZvciBlYWNoIHJlcG9ydGVyIGh5cGVydHkgdGhlIGRhdGFPYmplY3RcbiAgICAgICAgbGV0IHVzZXJVUkw7XG4gICAgICAgIGlmIChtc2cuYm9keS5pZGVudGl0eSAmJiBtc2cuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VyVVJMKSB7XG4gICAgICAgICAgdXNlclVSTCA9IG1zZy5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkw7XG4gICAgICAgICAgX3RoaXMuX3BhcmVudC5fZGF0YU9iamVjdHNTdG9yYWdlLnVwZGF0ZSh0cnVlLCBfdGhpcy5fdXJsLCAnc3Vic2NyaWJlclVzZXJzJywgdXNlclVSTCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ211dHVhbCcpKSB7XG4vLyAgICAgICAgICBfdGhpcy5fcGFyZW50Ll9pZGVudGl0eU1vZHVsZS51cGRhdGVJc1RvRW5jcnlwdEZvckRhdGFPYmplY3RTZXNzaW9uS2V5KF90aGlzLl91cmwsIG1zZy5ib2R5Lm11dHVhbCkudGhlbigoKT0+e1xuICAgICAgICAgICAgX3RoaXMuX3BhcmVudC5fZGF0YU9iamVjdHNTdG9yYWdlLnVwZGF0ZSh0cnVlLCBfdGhpcy5fdXJsLCAnbXV0dWFsJywgbXNnLmJvZHkubXV0dWFsKTtcbi8vICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuX3BhcmVudC5fZGF0YU9iamVjdHNTdG9yYWdlLnVwZGF0ZSh0cnVlLCBfdGhpcy5fdXJsLCAnc3Vic2NyaXB0aW9ucycsIGh5cGVydHlVUkwpO1xuXG4gICAgICAgIHJlcGx5LmJvZHkub3duZXIgPSBfdGhpcy5fb3duZXI7XG5cbiAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaXB0aW9uIHJlc3BvbnNlIHNlbnQgKGZvcndhcmQgZnJvbSBpbnRlcm5hbCBIeXBlcnR5KVxuICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSxcbiAgICAgICAgICBib2R5OiByZXBseS5ib2R5XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIHJlbW90ZSBPYnNlcnZlck9iamVjdCAtPiByZW1vdmVTdWJzY3JpcHRpb25cbiAgX29uUmVtb3RlVW5TdWJzY3JpYmUobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgdW5zdWJzY3JpYmVyID0gbXNnLmJvZHkuc291cmNlO1xuXG4gICAgbGV0IHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW3Vuc3Vic2NyaWJlcl07XG4gICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgc3Vic2NyaXB0aW9uLl9yZWxlYXNlTGlzdGVuZXJzKCk7XG4gICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbdW5zdWJzY3JpYmVyXTtcblxuICAgICAgbGV0IGZvcndhcmRNc2cgPSB7XG4gICAgICAgIHR5cGU6ICdmb3J3YXJkJywgZnJvbTogX3RoaXMuX3VybCwgdG86IF90aGlzLl9vd25lcixcbiAgICAgICAgYm9keTogeyB0eXBlOiBtc2cudHlwZSwgZnJvbTogdW5zdWJzY3JpYmVyLCB0bzogX3RoaXMuX3VybCwgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5IH1cbiAgICAgIH07XG5cblxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShmb3J3YXJkTXNnKTtcbiAgICB9XG5cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlcG9ydGVyT2JqZWN0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9zeW5jaGVyL1JlcG9ydGVyT2JqZWN0LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7Ozs7Ozs7QUFKQTtBQUNBO0FBSUE7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQVFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUtBO0FBQ0E7QUFFQTs7O0FBMVVBO0FBQ0E7QUFDQTs7Ozs7QUE0VUE7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///504\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __webpack_require__(40);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nvar _Subscription = __webpack_require__(206);\n\nvar _Subscription2 = _interopRequireDefault(_Subscription);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('ObserverObject'); // Log System\n\nvar ObserverObject = function () {\n  function ObserverObject(parent, url, childrens) {\n    var _this2 = this;\n\n    (0, _classCallCheck3.default)(this, ObserverObject);\n\n    var _this = this;\n\n    _this._parent = parent;\n    _this._url = url;\n    _this._childrens = childrens;\n\n    _this._bus = parent._bus;\n\n    _this._subscriptions = {};\n    _this._storageSubscriptions = {};\n    _this._childrenListeners = [];\n\n    this._isToSaveData = false;\n\n    var changeURL = _this._url + '/changes';\n    _this._changeListener = _this._bus.addListener(changeURL, function (msg) {\n\n      log.log('[SyncherManager.ObserverObject ] SyncherManager-' + changeURL + '-RCV: ', msg);\n\n      //TODO: what todo here? Save changes?\n      if (_this2._isToSaveData && msg.body.attribute) {\n        log.log('[SyncherManager.ObserverObject ] SyncherManager - save data: ', msg);\n        _this._parent._dataObjectsStorage.update(false, _this._url, 'version', msg.body.version);\n        _this._parent._dataObjectsStorage.update(false, _this._url, 'lastModified', msg.body.lastModified);\n        _this._parent._dataObjectsStorage.saveData(false, _this._url, msg.body.attribute, msg.body.value);\n      }\n    });\n  }\n\n  (0, _createClass3.default)(ObserverObject, [{\n    key: '_newSubscription',\n    value: function _newSubscription(hyperty) {\n      var _this = this;\n\n      var subscription = _this._subscriptions[hyperty];\n      log.log('[Observer Object - new subscription] - ', _this._subscriptions, hyperty, _this._subscriptions.hasOwnProperty(hyperty));\n      if (!subscription) {\n        _this._subscriptions[hyperty] = new _Subscription2.default(_this._bus, hyperty, _this._url, _this._childrens, false);\n      }\n    }\n  }, {\n    key: 'addSubscription',\n    value: function addSubscription(hyperty) {\n      var _this = this;\n\n      _this._newSubscription(hyperty);\n    }\n  }, {\n    key: 'addChildrens',\n    value: function addChildrens(childrens) {\n      var _this3 = this;\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve) {\n        if (childrens.length === 0) {\n          return resolve();\n        }\n\n        var childBaseURL = _this._url + '/children/';\n        log.log('[SyncherManager.ObserverObject - addChildrens] - childrens: ', childrens, childBaseURL);\n\n        childrens.forEach(function (child) {\n\n          var childListener = _this._bus.addListener(childBaseURL + child, function (msg) {\n            //TODO: what todo here? Save childrens?\n            log.log('[SyncherManager.ObserverObject received]', msg);\n\n            if (msg.type === 'create' && msg.to.includes('children') && _this3._isToSaveData) {\n              var splitedReporterURL = (0, _utils.splitObjectURL)(msg.to);\n\n              var url = splitedReporterURL.url;\n\n              //remove false when mutualAuthentication is enabled\n              if (!(typeof msg.body.value === 'string')) {\n\n                log.log('[SyncherManager.ObserverObject] encrypting received data ', msg.body.value);\n\n                _this._parent._identityModule.encryptDataObject(msg.body.value, url).then(function (encryptedValue) {\n                  log.log('[SyncherManager.ObserverObject] encrypted data ', encryptedValue);\n\n                  _this._storeChildObject(msg, (0, _stringify2.default)(encryptedValue));\n                }).catch(function (reason) {\n                  log.warn('[SyncherManager.ObserverObject._encryptChild] failed, storing unencrypted ', reason);\n                  _this._storeChildObject(msg, msg.body.value);\n                });\n              } else {\n                _this._storeChildObject(msg, msg.body.value);\n              }\n            }\n\n            log.log('[SyncherManager.ObserverObject children Listeners]', _this._childrenListeners, childListener);\n            if (_this._childrenListeners.indexOf(childListener) === -1) {\n              _this._childrenListeners.push(childListener);\n            }\n          });\n        });\n      });\n    }\n\n    // store childObject\n\n  }, {\n    key: '_storeChildObject',\n    value: function _storeChildObject(msg, data) {\n      var _this = this;\n\n      var splitedReporterURL = (0, _utils.splitObjectURL)(msg.to);\n\n      var url = splitedReporterURL.url;\n\n      var resource = splitedReporterURL.resource;\n      var value = {\n        identity: msg.body.identity,\n        value: data\n      };\n\n      // this identity data is not needed to be stored\n      delete value.identity.assertion;\n      delete value.identity.expires;\n\n      var objectURLResource = msg.body.resource;\n      var attribute = resource;\n\n      if (objectURLResource) attribute += '.' + objectURLResource;\n\n      log.log('[SyncherManager.ObserverObject._storeChildObject] : ', url, attribute, value);\n\n      _this._parent._dataObjectsStorage.saveChildrens(false, url, attribute, value);\n    }\n  }, {\n    key: 'removeSubscription',\n    value: function removeSubscription(msg) {\n      var _this = this;\n\n      var hyperty = msg.from;\n\n      var domain = (0, _utils.divideURL)(hyperty).domain;\n      var objURLSubscription = _this._url + '/subscription';\n\n      var subscription = _this._subscriptions[hyperty];\n      if (subscription) {\n        //FLOW-OUT: message sent to remote ReporterObject -> _onRemoteUnSubscribe\n        _this._bus.postMessage({\n          type: 'unsubscribe', from: _this._parent._url, to: objURLSubscription,\n          body: { source: hyperty, identity: msg.body.identity }\n        });\n\n        //TODO: should I wait for response before unsubscribe on msg-node\n        //FLOW-OUT: message sent to msg-node SubscriptionManager component\n        _this._bus.postMessage({\n          type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/sm',\n          body: { resource: _this._url, childrenResources: _this._childrens }\n        });\n\n        subscription._releaseListeners();\n        delete _this._subscriptions[hyperty];\n      }\n    }\n  }, {\n    key: 'isToSaveData',\n    set: function set(value) {\n      this._isToSaveData = value;\n    }\n  }]);\n  return ObserverObject;\n}();\n\nexports.default = ObserverObject;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9zeW5jaGVyL09ic2VydmVyT2JqZWN0LmpzPzFiNTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTG9nIFN5c3RlbVxuaW1wb3J0ICogYXMgbG9nZ2VyIGZyb20gJ2xvZ2xldmVsJztcbmxldCBsb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKCdPYnNlcnZlck9iamVjdCcpO1xuXG5pbXBvcnQgeyBkaXZpZGVVUkwsIHNwbGl0T2JqZWN0VVJMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5cbmNsYXNzIE9ic2VydmVyT2JqZWN0IHtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQsIHVybCwgY2hpbGRyZW5zKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgX3RoaXMuX3VybCA9IHVybDtcbiAgICBfdGhpcy5fY2hpbGRyZW5zID0gY2hpbGRyZW5zO1xuXG4gICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzO1xuXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMgPSBbXTtcblxuICAgIHRoaXMuX2lzVG9TYXZlRGF0YSA9IGZhbHNlO1xuXG4gICAgbGV0IGNoYW5nZVVSTCA9IF90aGlzLl91cmwgKyAnL2NoYW5nZXMnO1xuICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoY2hhbmdlVVJMLCAobXNnKSA9PiB7XG5cbiAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5PYnNlcnZlck9iamVjdCBdIFN5bmNoZXJNYW5hZ2VyLScgKyBjaGFuZ2VVUkwgKyAnLVJDVjogJywgbXNnKTtcblxuICAgICAgLy9UT0RPOiB3aGF0IHRvZG8gaGVyZT8gU2F2ZSBjaGFuZ2VzP1xuICAgICAgaWYgKHRoaXMuX2lzVG9TYXZlRGF0YSAmJiBtc2cuYm9keS5hdHRyaWJ1dGUpIHtcbiAgICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyLk9ic2VydmVyT2JqZWN0IF0gU3luY2hlck1hbmFnZXIgLSBzYXZlIGRhdGE6ICcsIG1zZyk7XG4gICAgICAgIF90aGlzLl9wYXJlbnQuX2RhdGFPYmplY3RzU3RvcmFnZS51cGRhdGUoZmFsc2UsIF90aGlzLl91cmwsICd2ZXJzaW9uJywgbXNnLmJvZHkudmVyc2lvbik7XG4gICAgICAgIF90aGlzLl9wYXJlbnQuX2RhdGFPYmplY3RzU3RvcmFnZS51cGRhdGUoZmFsc2UsIF90aGlzLl91cmwsICdsYXN0TW9kaWZpZWQnLCBtc2cuYm9keS5sYXN0TW9kaWZpZWQpO1xuICAgICAgICBfdGhpcy5fcGFyZW50Ll9kYXRhT2JqZWN0c1N0b3JhZ2Uuc2F2ZURhdGEoZmFsc2UsIF90aGlzLl91cmwsIG1zZy5ib2R5LmF0dHJpYnV0ZSwgbXNnLmJvZHkudmFsdWUpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICBzZXQgaXNUb1NhdmVEYXRhKHZhbHVlKSB7XG4gICAgdGhpcy5faXNUb1NhdmVEYXRhID0gdmFsdWU7XG4gIH1cblxuICBfbmV3U3Vic2NyaXB0aW9uKGh5cGVydHkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldO1xuICAgIGxvZy5sb2coJ1tPYnNlcnZlciBPYmplY3QgLSBuZXcgc3Vic2NyaXB0aW9uXSAtICcsICBfdGhpcy5fc3Vic2NyaXB0aW9ucywgaHlwZXJ0eSwgX3RoaXMuX3N1YnNjcmlwdGlvbnMuaGFzT3duUHJvcGVydHkoaHlwZXJ0eSkpO1xuICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XSA9IG5ldyBTdWJzY3JpcHRpb24oX3RoaXMuX2J1cywgaHlwZXJ0eSwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGFkZFN1YnNjcmlwdGlvbihoeXBlcnR5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9uZXdTdWJzY3JpcHRpb24oaHlwZXJ0eSk7XG4gIH1cblxuICBhZGRDaGlsZHJlbnMoY2hpbGRyZW5zKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgaWYgKGNoaWxkcmVucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGNoaWxkQmFzZVVSTCA9IF90aGlzLl91cmwgKyAnL2NoaWxkcmVuLyc7XG4gICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3QgLSBhZGRDaGlsZHJlbnNdIC0gY2hpbGRyZW5zOiAnLCBjaGlsZHJlbnMsIGNoaWxkQmFzZVVSTCk7XG5cbiAgICAgIGNoaWxkcmVucy5mb3JFYWNoKChjaGlsZCkgPT4ge1xuXG4gICAgICAgIGxldCBjaGlsZExpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihjaGlsZEJhc2VVUkwgKyBjaGlsZCwgKG1zZykgPT4ge1xuICAgICAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hpbGRyZW5zP1xuICAgICAgICAgIGxvZy5sb2coJ1tTeW5jaGVyTWFuYWdlci5PYnNlcnZlck9iamVjdCByZWNlaXZlZF0nLCBtc2cpO1xuXG4gICAgICAgICAgaWYgKG1zZy50eXBlID09PSAnY3JlYXRlJyAmJiBtc2cudG8uaW5jbHVkZXMoJ2NoaWxkcmVuJykgJiYgdGhpcy5faXNUb1NhdmVEYXRhKSB7XG4gICAgICAgICAgICBsZXQgc3BsaXRlZFJlcG9ydGVyVVJMID0gc3BsaXRPYmplY3RVUkwobXNnLnRvKTtcblxuICAgICAgICAgICAgbGV0IHVybCA9IHNwbGl0ZWRSZXBvcnRlclVSTC51cmw7XG5cbiAgICAgICAgICAgIC8vcmVtb3ZlIGZhbHNlIHdoZW4gbXV0dWFsQXV0aGVudGljYXRpb24gaXMgZW5hYmxlZFxuICAgICAgICAgICAgaWYgKCEodHlwZW9mIG1zZy5ib2R5LnZhbHVlID09PSAnc3RyaW5nJykpIHtcblxuICAgICAgICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3RdIGVuY3J5cHRpbmcgcmVjZWl2ZWQgZGF0YSAnLCBtc2cuYm9keS52YWx1ZSk7XG5cbiAgICAgICAgICAgICAgX3RoaXMuX3BhcmVudC5faWRlbnRpdHlNb2R1bGUuZW5jcnlwdERhdGFPYmplY3QobXNnLmJvZHkudmFsdWUsIHVybCkudGhlbigoZW5jcnlwdGVkVmFsdWUpPT57XG4gICAgICAgICAgICAgICAgbG9nLmxvZygnW1N5bmNoZXJNYW5hZ2VyLk9ic2VydmVyT2JqZWN0XSBlbmNyeXB0ZWQgZGF0YSAnLCAgZW5jcnlwdGVkVmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgX3RoaXMuX3N0b3JlQ2hpbGRPYmplY3QobXNnLCBKU09OLnN0cmluZ2lmeShlbmNyeXB0ZWRWYWx1ZSkpO1xuICAgICAgICAgICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oJ1tTeW5jaGVyTWFuYWdlci5PYnNlcnZlck9iamVjdC5fZW5jcnlwdENoaWxkXSBmYWlsZWQsIHN0b3JpbmcgdW5lbmNyeXB0ZWQgJywgcmVhc29uKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmVDaGlsZE9iamVjdChtc2csIG1zZy5ib2R5LnZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5fc3RvcmVDaGlsZE9iamVjdChtc2csIG1zZy5ib2R5LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3QgY2hpbGRyZW4gTGlzdGVuZXJzXScsIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycywgY2hpbGRMaXN0ZW5lcik7XG4gICAgICAgICAgaWYgKF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5pbmRleE9mKGNoaWxkTGlzdGVuZXIpID09PSAtMSkge1xuICAgICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goY2hpbGRMaXN0ZW5lcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RvcmUgY2hpbGRPYmplY3RcblxuICBfc3RvcmVDaGlsZE9iamVjdChtc2csIGRhdGEpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IHNwbGl0ZWRSZXBvcnRlclVSTCA9IHNwbGl0T2JqZWN0VVJMKG1zZy50byk7XG5cbiAgICBsZXQgdXJsID0gc3BsaXRlZFJlcG9ydGVyVVJMLnVybDtcblxuICAgIGxldCByZXNvdXJjZSA9IHNwbGl0ZWRSZXBvcnRlclVSTC5yZXNvdXJjZTtcbiAgICBsZXQgdmFsdWUgPSB7XG4gICAgICBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksXG4gICAgICB2YWx1ZTogZGF0YVxuICAgIH07XG5cbiAgICAvLyB0aGlzIGlkZW50aXR5IGRhdGEgaXMgbm90IG5lZWRlZCB0byBiZSBzdG9yZWRcbiAgICBkZWxldGUgdmFsdWUuaWRlbnRpdHkuYXNzZXJ0aW9uO1xuICAgIGRlbGV0ZSB2YWx1ZS5pZGVudGl0eS5leHBpcmVzO1xuXG4gICAgbGV0IG9iamVjdFVSTFJlc291cmNlID0gbXNnLmJvZHkucmVzb3VyY2U7XG4gICAgbGV0IGF0dHJpYnV0ZSA9IHJlc291cmNlO1xuXG4gICAgaWYgKG9iamVjdFVSTFJlc291cmNlKSBhdHRyaWJ1dGUgKz0gJy4nICsgb2JqZWN0VVJMUmVzb3VyY2U7XG5cbiAgICBsb2cubG9nKCdbU3luY2hlck1hbmFnZXIuT2JzZXJ2ZXJPYmplY3QuX3N0b3JlQ2hpbGRPYmplY3RdIDogJywgdXJsLCBhdHRyaWJ1dGUsIHZhbHVlKTtcblxuICAgIF90aGlzLl9wYXJlbnQuX2RhdGFPYmplY3RzU3RvcmFnZS5zYXZlQ2hpbGRyZW5zKGZhbHNlLCB1cmwsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICB9XG5cbiAgcmVtb3ZlU3Vic2NyaXB0aW9uKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgaHlwZXJ0eSA9IG1zZy5mcm9tO1xuXG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChoeXBlcnR5KS5kb21haW47XG4gICAgbGV0IG9ialVSTFN1YnNjcmlwdGlvbiA9IF90aGlzLl91cmwgKyAnL3N1YnNjcmlwdGlvbic7XG5cbiAgICBsZXQgc3Vic2NyaXB0aW9uID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eV07XG4gICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHJlbW90ZSBSZXBvcnRlck9iamVjdCAtPiBfb25SZW1vdGVVblN1YnNjcmliZVxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbixcbiAgICAgICAgYm9keTogeyBzb3VyY2U6IGh5cGVydHksIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSB9XG4gICAgICB9KTtcblxuICAgICAgLy9UT0RPOiBzaG91bGQgSSB3YWl0IGZvciByZXNwb25zZSBiZWZvcmUgdW5zdWJzY3JpYmUgb24gbXNnLW5vZGVcbiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudFxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9zbScsXG4gICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwsIGNoaWxkcmVuUmVzb3VyY2VzOiBfdGhpcy5fY2hpbGRyZW5zIH1cbiAgICAgIH0pO1xuXG4gICAgICBzdWJzY3JpcHRpb24uX3JlbGVhc2VMaXN0ZW5lcnMoKTtcbiAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XTtcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBPYnNlcnZlck9iamVjdDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvc3luY2hlci9PYnNlcnZlck9iamVjdC5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBQ0E7Ozs7Ozs7QUFKQTtBQUNBO0FBSUE7QUFFQTtBQUFBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7OztBQS9IQTtBQUNBO0FBQ0E7Ozs7O0FBaUlBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///505\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _values = __webpack_require__(205);\n\nvar _values2 = _interopRequireDefault(_values);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _utils = __webpack_require__(15);\n\nvar _Subscription = __webpack_require__(507);\n\nvar _Subscription2 = _interopRequireDefault(_Subscription);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('SubscriptionManager'); /**\n                                                   * Copyright 2016 PT Inovação e Sistemas SA\n                                                   * Copyright 2016 INESC-ID\n                                                   * Copyright 2016 QUOBIS NETWORKS SL\n                                                   * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V\n                                                   * Copyright 2016 ORANGE SA\n                                                   * Copyright 2016 Deutsche Telekom AG\n                                                   * Copyright 2016 Apizee\n                                                   * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN\n                                                   *\n                                                   * Licensed under the Apache License, Version 2.0 (the \"License\");\n                                                   * you may not use this file except in compliance with the License.\n                                                   * You may obtain a copy of the License at\n                                                   *\n                                                   *   http://www.apache.org/licenses/LICENSE-2.0\n                                                   *\n                                                   * Unless required by applicable law or agreed to in writing, software\n                                                   * distributed under the License is distributed on an \"AS IS\" BASIS,\n                                                   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                                                   * See the License for the specific language governing permissions and\n                                                   * limitations under the License.\n                                                   **/\n\n// Log System\n\n/**\n * @author paulo-g-chainho@alticelabs.com\n * Subscription Manager used to manage routing paths at the runtime.\n */\n\nvar SubscriptionManager = function () {\n  function SubscriptionManager(runtimeURL, bus, storage) {\n    (0, _classCallCheck3.default)(this, SubscriptionManager);\n\n    if (!runtimeURL) throw new Error('[SubscriptionManager] - needs the runtimeURL parameter');\n    if (!bus) throw new Error('[SubscriptionManager] - needs the MessageBus instance');\n\n    var _this = this;\n\n    _this._bus = bus;\n    _this._storage = storage;\n\n    _this._subscriptions = {};\n\n    _this._subscriptionsStorage = {};\n\n    //TODO: these should be saved in persistence engine?\n    _this.runtimeURL = runtimeURL;\n    _this._url = runtimeURL + '/subscriptions';\n\n    //TODO: this should not be hardcoded!\n    _this._domain = (0, _utils.divideURL)(runtimeURL).domain;\n\n    bus.addListener(_this._url, function (msg) {\n      log.info('[SubscriptionManager] RCV: ', msg);\n      switch (msg.type) {\n        case 'subscribe':\n          _this._onSubscribe(msg);break;\n        case 'unsubscribe':\n          _this._onUnSubscribe(msg);break;\n        case 'read':\n          _this._onRead(msg);break;\n      }\n    });\n  }\n\n  (0, _createClass3.default)(SubscriptionManager, [{\n    key: 'init',\n    value: function init() {\n      var _this = this;\n\n      return new _promise2.default(function (resolve) {\n\n        _this._storage.get('subscriptions').then(function (subscriptions) {\n          log.log('[SubscriptionManager.init] resume subscriptions: ', subscriptions);\n          if (subscriptions) {\n\n            _this._subscriptionsStorage = subscriptions;\n\n            (0, _values2.default)(subscriptions).forEach(function (subscription) {\n              _this._createSubscription(subscription.domain, subscription.resources, subscription.subscriber, subscription.identity);\n            });\n          }\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: '_onSubscribe',\n\n\n    //message received to set a routing path\n    value: function _onSubscribe(msg) {\n\n      var _this = this;\n\n      var resources = msg.body.resources;\n\n      var subscriber = msg.from;\n      var domain = (0, _utils.divideURL)(resources[0]).domain; //we are assuming resources are all from the same domain\n\n      var identity = msg.body.identity;\n\n      _this._createSubscription(domain, resources, subscriber, identity).then(function (reply) {\n        //forward to hyperty:\n        reply.id = msg.id;\n        reply.from = _this._url;\n        reply.to = subscriber;\n        reply.body = msg.body;\n        reply.body.code = 200;\n\n        log.log('[SubscriptionManager] - craeteSubscription: ', msg, reply, subscriber);\n\n        _this._bus.postMessage(reply);\n\n        if (!_this._subscriptionsStorage[subscriber]) {\n\n          _this._subscriptionsStorage[subscriber] = {\n            domain: domain,\n            resources: resources,\n            subscriber: subscriber,\n            identity: identity\n          };\n        } else {\n          resources.forEach(function (resource) {\n            if (!_this._subscriptionsStorage[subscriber].resources.includes(resource)) {\n              _this._subscriptionsStorage[subscriber].resources.push(resource);\n            }\n          });\n        }\n\n        _this._storage.set('subscriptions', 1, _this._subscriptionsStorage);\n      });\n    }\n  }, {\n    key: '_createSubscription',\n    value: function _createSubscription(domain, resources, subscriber, identity) {\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve) {\n        //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker\n\n        var nodeSubscribeMsg = {\n          type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',\n          body: { identity: identity, resources: resources, source: subscriber }\n        };\n\n        //subscribe in msg-node\n        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {\n          log.log('[SubscriptionManager] node-subscribe-response: ', reply);\n\n          //if (reply.body.code === 200) {//TODO: uncomment when  MN replies with correct response body code\n\n          //TODO: support multiple routes for multiple resources\n\n          var subscription = _this._subscriptions[subscriber];\n          log.log('[SubscriptionManager] - ', _this._subscriptions, resources, _this._subscriptions.hasOwnProperty(subscriber));\n          if (!subscription) {\n            _this._subscriptions[subscriber] = {};\n          }\n\n          resources.forEach(function (resource) {\n            _this._subscriptions[subscriber][resource] = new _Subscription2.default(_this._bus, subscriber, resource);\n          });\n\n          resolve(reply);\n        });\n      });\n    }\n\n    // message received to remove routing path\n\n  }, {\n    key: '_onUnSubscribe',\n    value: function _onUnSubscribe(msg) {\n      var _this = this;\n\n      var unsubscriber = msg.from;\n      var resource = msg.body.resource;\n\n      if (_this._subscriptions[unsubscriber] && _this._subscriptions[unsubscriber][resource]) {\n        var domain = (0, _utils.divideURL)(resource).domain;\n        var subscription = _this._subscriptions[unsubscriber][resource];\n\n        //FLOW-OUT: message sent to msg-node SubscriptionManager component\n        _this._bus.postMessage({\n          type: 'unsubscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',\n          body: { resources: [resource], source: unsubscriber }\n        });\n\n        subscription._releaseListeners();\n        delete _this._subscriptions[unsubscriber][resource];\n\n        if (_this._subscriptionsStorage[unsubscriber]) {\n          var i = _this._subscriptionsStorage[unsubscriber].resources.indexOf(resource);\n          if (i != -1) {\n            _this._subscriptionsStorage[unsubscriber].resources.splice(i, 1);\n          }\n          _this._storage.set('subscriptions', 1, _this._subscriptionsStorage);\n        }\n      }\n\n      _this._bus.postMessage({\n        id: msg.id, type: 'response', from: msg.to, to: msg.from,\n        body: { code: 200 }\n      });\n    }\n\n    //message received to read existing routing paths. At this point limited to read all existing routing paths set for one listener\n\n  }, {\n    key: '_onRead',\n    value: function _onRead(msg) {\n\n      var _this = this;\n\n      var listenerAddress = msg.body.resource;\n      var reply = void 0;\n\n      log.log('[SubscriptionManager] - request to read Subscriptions: ', msg);\n\n      _this._storage.get('subscriptions').then(function (subscriptions) {\n        if (subscriptions && subscriptions[listenerAddress]) {\n          var resources = subscriptions[listenerAddress].resources;\n\n          reply = {\n            id: msg.id, type: 'response', from: msg.to, to: msg.from,\n            body: { code: 200, value: resources }\n          };\n        } else {\n          reply = {\n            id: msg.id, type: 'response', from: msg.to, to: msg.from,\n            body: { code: 404, description: 'Not Found' }\n          };\n        }\n        _this._bus.postMessage(reply);\n      });\n    }\n  }, {\n    key: 'url',\n    get: function get() {\n      return this._url;\n    }\n  }]);\n  return SubscriptionManager;\n}();\n\nexports.default = SubscriptionManager;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9zdWJzY3JpcHRpb25NYW5hZ2VyL1N1YnNjcmlwdGlvbk1hbmFnZXIuanM/ZGE4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8vIExvZyBTeXN0ZW1cbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignU3Vic2NyaXB0aW9uTWFuYWdlcicpO1xuXG5pbXBvcnQgeyBkaXZpZGVVUkwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4vU3Vic2NyaXB0aW9uJztcblxuXG4vKipcbiAqIEBhdXRob3IgcGF1bG8tZy1jaGFpbmhvQGFsdGljZWxhYnMuY29tXG4gKiBTdWJzY3JpcHRpb24gTWFuYWdlciB1c2VkIHRvIG1hbmFnZSByb3V0aW5nIHBhdGhzIGF0IHRoZSBydW50aW1lLlxuICovXG5cbmNsYXNzIFN1YnNjcmlwdGlvbk1hbmFnZXIge1xuXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIGJ1cywgc3RvcmFnZSkge1xuICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdbU3Vic2NyaXB0aW9uTWFuYWdlcl0gLSBuZWVkcyB0aGUgcnVudGltZVVSTCBwYXJhbWV0ZXInKTtcbiAgICBpZiAoIWJ1cykgdGhyb3cgbmV3IEVycm9yKCdbU3Vic2NyaXB0aW9uTWFuYWdlcl0gLSBuZWVkcyB0aGUgTWVzc2FnZUJ1cyBpbnN0YW5jZScpO1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9idXMgPSBidXM7XG4gICAgX3RoaXMuX3N0b3JhZ2UgPSBzdG9yYWdlO1xuXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTtcblxuICAgIF90aGlzLl9zdWJzY3JpcHRpb25zU3RvcmFnZSA9IHt9O1xuXG4gICAgLy9UT0RPOiB0aGVzZSBzaG91bGQgYmUgc2F2ZWQgaW4gcGVyc2lzdGVuY2UgZW5naW5lP1xuICAgIF90aGlzLnJ1bnRpbWVVUkwgPSBydW50aW1lVVJMO1xuICAgIF90aGlzLl91cmwgPSBydW50aW1lVVJMICsgJy9zdWJzY3JpcHRpb25zJztcblxuICAgIC8vVE9ETzogdGhpcyBzaG91bGQgbm90IGJlIGhhcmRjb2RlZCFcbiAgICBfdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKHJ1bnRpbWVVUkwpLmRvbWFpbjtcblxuICAgIGJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5fdXJsLCAobXNnKSA9PiB7XG4gICAgICBsb2cuaW5mbygnW1N1YnNjcmlwdGlvbk1hbmFnZXJdIFJDVjogJywgbXNnKTtcbiAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzogX3RoaXMuX29uU3Vic2NyaWJlKG1zZyk7IGJyZWFrO1xuICAgICAgICBjYXNlICd1bnN1YnNjcmliZSc6IF90aGlzLl9vblVuU3Vic2NyaWJlKG1zZyk7IGJyZWFrO1xuICAgICAgICBjYXNlICdyZWFkJzogX3RoaXMuX29uUmVhZChtc2cpOyBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgaW5pdCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG5cbiAgICAgIF90aGlzLl9zdG9yYWdlLmdldCgnc3Vic2NyaXB0aW9ucycpLnRoZW4oKHN1YnNjcmlwdGlvbnMpID0+IHtcbiAgICAgICAgbG9nLmxvZygnW1N1YnNjcmlwdGlvbk1hbmFnZXIuaW5pdF0gcmVzdW1lIHN1YnNjcmlwdGlvbnM6ICcsIHN1YnNjcmlwdGlvbnMpO1xuICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuXG4gICAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNTdG9yYWdlID0gc3Vic2NyaXB0aW9ucztcblxuICAgICAgICAgIE9iamVjdC52YWx1ZXMoc3Vic2NyaXB0aW9ucykuZm9yRWFjaCgoc3Vic2NyaXB0aW9uKT0+e1xuICAgICAgICAgICAgX3RoaXMuX2NyZWF0ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24uZG9tYWluLCBzdWJzY3JpcHRpb24ucmVzb3VyY2VzLCBzdWJzY3JpcHRpb24uc3Vic2NyaWJlciwgc3Vic2NyaXB0aW9uLmlkZW50aXR5KTtcblxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcblxuXG4gIH1cblxuICBnZXQgdXJsKCkgeyByZXR1cm4gdGhpcy5fdXJsOyB9XG5cblxuICAvL21lc3NhZ2UgcmVjZWl2ZWQgdG8gc2V0IGEgcm91dGluZyBwYXRoXG4gIF9vblN1YnNjcmliZShtc2cpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgcmVzb3VyY2VzID0gbXNnLmJvZHkucmVzb3VyY2VzO1xuXG4gICAgbGV0IHN1YnNjcmliZXIgPSBtc2cuZnJvbTtcbiAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKHJlc291cmNlc1swXSkuZG9tYWluOyAvL3dlIGFyZSBhc3N1bWluZyByZXNvdXJjZXMgYXJlIGFsbCBmcm9tIHRoZSBzYW1lIGRvbWFpblxuXG4gICAgbGV0IGlkZW50aXR5ID0gbXNnLmJvZHkuaWRlbnRpdHk7XG5cbiAgICBfdGhpcy5fY3JlYXRlU3Vic2NyaXB0aW9uKGRvbWFpbiwgcmVzb3VyY2VzLCBzdWJzY3JpYmVyLCBpZGVudGl0eSkudGhlbigocmVwbHkpPT57XG4gICAgICAvL2ZvcndhcmQgdG8gaHlwZXJ0eTpcbiAgICAgIHJlcGx5LmlkID0gbXNnLmlkO1xuICAgICAgcmVwbHkuZnJvbSA9IF90aGlzLl91cmw7XG4gICAgICByZXBseS50byA9IHN1YnNjcmliZXI7XG4gICAgICByZXBseS5ib2R5ID0gbXNnLmJvZHk7XG4gICAgICByZXBseS5ib2R5LmNvZGUgPSAyMDA7XG5cbiAgICAgIGxvZy5sb2coJ1tTdWJzY3JpcHRpb25NYW5hZ2VyXSAtIGNyYWV0ZVN1YnNjcmlwdGlvbjogJywgbXNnLCByZXBseSwgc3Vic2NyaWJlcik7XG5cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVwbHkpO1xuXG5cbiAgICAgIGlmICghX3RoaXMuX3N1YnNjcmlwdGlvbnNTdG9yYWdlW3N1YnNjcmliZXJdKSB7XG5cblxuICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1N0b3JhZ2Vbc3Vic2NyaWJlcl0gPSB7XG4gICAgICAgICAgZG9tYWluOiBkb21haW4sXG4gICAgICAgICAgcmVzb3VyY2VzOiByZXNvdXJjZXMsXG4gICAgICAgICAgc3Vic2NyaWJlcjogc3Vic2NyaWJlcixcbiAgICAgICAgICBpZGVudGl0eTogaWRlbnRpdHlcbiAgICAgICAgfTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb3VyY2VzLmZvckVhY2goKHJlc291cmNlKSA9PiB7XG4gICAgICAgICAgaWYgKCEoX3RoaXMuX3N1YnNjcmlwdGlvbnNTdG9yYWdlW3N1YnNjcmliZXJdLnJlc291cmNlcy5pbmNsdWRlcyhyZXNvdXJjZSkpKSB7XG4gICAgICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1N0b3JhZ2Vbc3Vic2NyaWJlcl0ucmVzb3VyY2VzLnB1c2gocmVzb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzLl9zdG9yYWdlLnNldCgnc3Vic2NyaXB0aW9ucycsIDEsIF90aGlzLl9zdWJzY3JpcHRpb25zU3RvcmFnZSk7XG4gICAgfSk7XG4gIH1cblxuICBfY3JlYXRlU3Vic2NyaXB0aW9uKGRvbWFpbiwgcmVzb3VyY2VzLCBzdWJzY3JpYmVyLCBpZGVudGl0eSkge1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gdGhlIG1zZy1ub2RlLCByZWdpc3RlcmluZyBsaXN0ZW5lcnMgb24gdGhlIGJyb2tlclxuXG4gICAgICBsZXQgbm9kZVN1YnNjcmliZU1zZyA9IHtcbiAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvc20nLFxuICAgICAgICBib2R5OiB7IGlkZW50aXR5OiBpZGVudGl0eSwgcmVzb3VyY2VzOiByZXNvdXJjZXMsIHNvdXJjZTogc3Vic2NyaWJlciB9XG4gICAgICB9O1xuXG4gICAgICAvL3N1YnNjcmliZSBpbiBtc2ctbm9kZVxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShub2RlU3Vic2NyaWJlTXNnLCAocmVwbHkpID0+IHtcbiAgICAgICAgbG9nLmxvZygnW1N1YnNjcmlwdGlvbk1hbmFnZXJdIG5vZGUtc3Vic2NyaWJlLXJlc3BvbnNlOiAnLCByZXBseSk7XG5cbiAgICAgICAgLy9pZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsvL1RPRE86IHVuY29tbWVudCB3aGVuICBNTiByZXBsaWVzIHdpdGggY29ycmVjdCByZXNwb25zZSBib2R5IGNvZGVcblxuICAgICAgICAvL1RPRE86IHN1cHBvcnQgbXVsdGlwbGUgcm91dGVzIGZvciBtdWx0aXBsZSByZXNvdXJjZXNcblxuICAgICAgICBsZXQgc3Vic2NyaXB0aW9uID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbc3Vic2NyaWJlcl07XG4gICAgICAgIGxvZy5sb2coJ1tTdWJzY3JpcHRpb25NYW5hZ2VyXSAtICcsICBfdGhpcy5fc3Vic2NyaXB0aW9ucywgcmVzb3VyY2VzLCBfdGhpcy5fc3Vic2NyaXB0aW9ucy5oYXNPd25Qcm9wZXJ0eShzdWJzY3JpYmVyKSk7XG4gICAgICAgIGlmICghc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbc3Vic2NyaWJlcl0gPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlc291cmNlcy5mb3JFYWNoKChyZXNvdXJjZSk9PntcbiAgICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1tzdWJzY3JpYmVyXVtyZXNvdXJjZV0gPSBuZXcgU3Vic2NyaXB0aW9uKF90aGlzLl9idXMsIHN1YnNjcmliZXIsIHJlc291cmNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzb2x2ZShyZXBseSk7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuXG4gIC8vIG1lc3NhZ2UgcmVjZWl2ZWQgdG8gcmVtb3ZlIHJvdXRpbmcgcGF0aFxuICBfb25VblN1YnNjcmliZShtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IHVuc3Vic2NyaWJlciA9IG1zZy5mcm9tO1xuICAgIGxldCByZXNvdXJjZSA9IG1zZy5ib2R5LnJlc291cmNlO1xuXG4gICAgaWYgKF90aGlzLl9zdWJzY3JpcHRpb25zW3Vuc3Vic2NyaWJlcl0gJiYgX3RoaXMuX3N1YnNjcmlwdGlvbnNbdW5zdWJzY3JpYmVyXVtyZXNvdXJjZV0pIHtcbiAgICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwocmVzb3VyY2UpLmRvbWFpbjtcbiAgICAgIGxldCBzdWJzY3JpcHRpb24gPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1t1bnN1YnNjcmliZXJdW3Jlc291cmNlXTtcblxuICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50XG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9zbScsXG4gICAgICAgIGJvZHk6IHsgcmVzb3VyY2VzOiBbcmVzb3VyY2VdLCBzb3VyY2U6IHVuc3Vic2NyaWJlciB9XG4gICAgICB9KTtcblxuICAgICAgc3Vic2NyaXB0aW9uLl9yZWxlYXNlTGlzdGVuZXJzKCk7XG4gICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbdW5zdWJzY3JpYmVyXVtyZXNvdXJjZV07XG5cbiAgICAgIGlmIChfdGhpcy5fc3Vic2NyaXB0aW9uc1N0b3JhZ2VbdW5zdWJzY3JpYmVyXSkge1xuICAgICAgICBsZXQgaSA9IF90aGlzLl9zdWJzY3JpcHRpb25zU3RvcmFnZVt1bnN1YnNjcmliZXJdLnJlc291cmNlcy5pbmRleE9mKHJlc291cmNlKTtcbiAgICAgICAgaWYgKGkgIT0gLTEpIHtcbiAgICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1N0b3JhZ2VbdW5zdWJzY3JpYmVyXS5yZXNvdXJjZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9zdG9yYWdlLnNldCgnc3Vic2NyaXB0aW9ucycsIDEsIF90aGlzLl9zdWJzY3JpcHRpb25zU3RvcmFnZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSxcbiAgICAgIGJvZHk6IHsgY29kZTogMjAwIH1cbiAgICB9KTtcblxuICB9XG5cbiAgLy9tZXNzYWdlIHJlY2VpdmVkIHRvIHJlYWQgZXhpc3Rpbmcgcm91dGluZyBwYXRocy4gQXQgdGhpcyBwb2ludCBsaW1pdGVkIHRvIHJlYWQgYWxsIGV4aXN0aW5nIHJvdXRpbmcgcGF0aHMgc2V0IGZvciBvbmUgbGlzdGVuZXJcbiAgX29uUmVhZChtc2cpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbGlzdGVuZXJBZGRyZXNzID0gbXNnLmJvZHkucmVzb3VyY2U7XG4gICAgbGV0IHJlcGx5O1xuXG4gICAgbG9nLmxvZygnW1N1YnNjcmlwdGlvbk1hbmFnZXJdIC0gcmVxdWVzdCB0byByZWFkIFN1YnNjcmlwdGlvbnM6ICcsIG1zZyk7XG5cbiAgICBfdGhpcy5fc3RvcmFnZS5nZXQoJ3N1YnNjcmlwdGlvbnMnKS50aGVuKChzdWJzY3JpcHRpb25zKT0+e1xuICAgICAgaWYgKHN1YnNjcmlwdGlvbnMgJiYgc3Vic2NyaXB0aW9uc1tsaXN0ZW5lckFkZHJlc3NdKSB7XG4gICAgICAgIGxldCByZXNvdXJjZXMgPSBzdWJzY3JpcHRpb25zW2xpc3RlbmVyQWRkcmVzc10ucmVzb3VyY2VzO1xuXG4gICAgICAgIHJlcGx5ID0ge1xuICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxuICAgICAgICAgIGJvZHk6IHsgY29kZTogMjAwLCB2YWx1ZTogcmVzb3VyY2VzIH1cbiAgICAgICAgfTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVwbHkgPSB7XG4gICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sXG4gICAgICAgICAgYm9keTogeyBjb2RlOiA0MDQsIGRlc2NyaXB0aW9uOiAnTm90IEZvdW5kJyB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlcGx5KTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTdWJzY3JpcHRpb25NYW5hZ2VyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9zdWJzY3JpcHRpb25NYW5hZ2VyL1N1YnNjcmlwdGlvbk1hbmFnZXIuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkE7QUFDQTtBQURBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTs7Ozs7OztBQUpBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUZBO0FBQ0E7QUFPQTs7Ozs7QUFLQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBSEE7QUFLQTtBQUVBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUdBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFDQTtBQUNBOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7QUF2SkE7QUFBQTtBQUFBOzs7OztBQTBKQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///506\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('Subscription'); // Log System\n\nvar Subscription = function () {\n  function Subscription(bus, subscriber, resource) {\n    (0, _classCallCheck3.default)(this, Subscription);\n\n    var _this = this;\n    _this._subscriber = subscriber;\n    _this.resource = resource;\n\n    log.log('[SubscriptionManager.Subscription] new: ', subscriber, resource);\n\n    //add forward\n    _this._listener = bus.addForward(resource, subscriber);\n  }\n\n  (0, _createClass3.default)(Subscription, [{\n    key: '_releaseListeners',\n    value: function _releaseListeners() {\n      var _this = this;\n\n      _this._listener.remove();\n    }\n  }]);\n  return Subscription;\n}();\n\nexports.default = Subscription;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9zdWJzY3JpcHRpb25NYW5hZ2VyL1N1YnNjcmlwdGlvbi5qcz85NDk1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIExvZyBTeXN0ZW1cbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignU3Vic2NyaXB0aW9uJyk7XG5cbmNsYXNzIFN1YnNjcmlwdGlvbiB7XG5cbiAgY29uc3RydWN0b3IoYnVzLCBzdWJzY3JpYmVyLCByZXNvdXJjZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX3N1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xuICAgIF90aGlzLnJlc291cmNlID0gcmVzb3VyY2U7XG5cbiAgICBsb2cubG9nKCdbU3Vic2NyaXB0aW9uTWFuYWdlci5TdWJzY3JpcHRpb25dIG5ldzogJywgc3Vic2NyaWJlciwgcmVzb3VyY2UpXG5cbiAgICAvL2FkZCBmb3J3YXJkXG4gICAgX3RoaXMuX2xpc3RlbmVyID0gYnVzLmFkZEZvcndhcmQocmVzb3VyY2UsIHN1YnNjcmliZXIpO1xuXG4gIH1cblxuICBfcmVsZWFzZUxpc3RlbmVycygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX2xpc3RlbmVyLnJlbW92ZSgpO1xuXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTdWJzY3JpcHRpb247XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3N1YnNjcmlwdGlvbk1hbmFnZXIvU3Vic2NyaXB0aW9uLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0E7QUFEQTtBQUNBOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7OztBQUlBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///507\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _stringify = __webpack_require__(40);\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _promise = __webpack_require__(12);\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = __webpack_require__(60);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(68);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(69);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _loglevel = __webpack_require__(11);\n\nvar logger = _interopRequireWildcard(_loglevel);\n\nvar _AllowOverrides = __webpack_require__(202);\n\nvar _AllowOverrides2 = _interopRequireDefault(_AllowOverrides);\n\nvar _BlockOverrides = __webpack_require__(203);\n\nvar _BlockOverrides2 = _interopRequireDefault(_BlockOverrides);\n\nvar _utils = __webpack_require__(15);\n\nvar _FirstApplicable = __webpack_require__(204);\n\nvar _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);\n\nvar _ReThinkCtx2 = __webpack_require__(509);\n\nvar _ReThinkCtx3 = _interopRequireDefault(_ReThinkCtx2);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = logger.getLogger('PEP');\n\nvar RuntimeCoreCtx = function (_ReThinkCtx) {\n  (0, _inherits3.default)(RuntimeCoreCtx, _ReThinkCtx);\n\n  function RuntimeCoreCtx(runtimeURL, idModule, runtimeRegistry, storageManager, runtimeCapabilities) {\n    (0, _classCallCheck3.default)(this, RuntimeCoreCtx);\n\n    var _this2 = (0, _possibleConstructorReturn3.default)(this, (RuntimeCoreCtx.__proto__ || (0, _getPrototypeOf2.default)(RuntimeCoreCtx)).call(this));\n\n    _this2._runtimeURL = runtimeURL;\n    _this2._pepURL = _this2._runtimeURL + '/pep';\n    _this2._guiURL = _this2._runtimeURL + '/policy-gui';\n    _this2.idModule = idModule;\n    _this2.runtimeRegistry = runtimeRegistry;\n    _this2.activeUserPolicy = undefined;\n    _this2.serviceProviderPolicy = {};\n    _this2.userPolicies = {};\n    _this2.storageManager = storageManager;\n    _this2.runtimeCapabilities = runtimeCapabilities;\n    return _this2;\n  }\n\n  (0, _createClass3.default)(RuntimeCoreCtx, [{\n    key: 'loadConfigurations',\n    value: function loadConfigurations() {\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this.storageManager.get('rethink:activePolicy').then(function (value) {\n          _this.activeUserPolicy = value;\n\n          return _this.storageManager.get('rethink:groups');\n        }).then(function (groupInfo) {\n          var groups = groupInfo;\n          _this.groups = groups === undefined ? {} : groups;\n\n          return _this.storageManager.get('rethink:spPolicies');\n        }).then(function (policiesInfo) {\n          var spPolicies = policiesInfo;\n          _this.serviceProviderPolicy = spPolicies === undefined ? {} : spPolicies;\n\n          _this._loadUserPolicies().then(function () {\n            resolve();\n          });\n        });\n      });\n    }\n  }, {\n    key: 'prepareForEvaluation',\n    value: function prepareForEvaluation(message, isIncoming) {\n      var _this3 = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        var _this = _this3;\n        if (isIncoming) {\n          if (_this._isToCypherModule(message)) {\n            _this.idModule.decryptMessage(message).then(function (message) {\n              /*if (message.type === 'update') {\n                _this._isValidUpdate(message).then(message => {*/\n              resolve(message);\n            }, function (error) {\n              reject(error);\n\n              /*});\n              } else {\n                resolve(message);\n              }*/\n            });\n          } else {\n            resolve(message);\n          }\n        } else {\n          // log.log('[Policy.RuntimeCoreCtx prepareForEvaluation]', message);\n          if (_this._isToSetID(message)) {\n            _this._getIdentity(message).then(function (identity) {\n              message.body.identity = identity;\n              resolve(message);\n            }, function (error) {\n              reject(error);\n            });\n          } else {\n            resolve(message);\n          }\n        }\n      });\n    }\n  }, {\n    key: 'getPolicies',\n    value: function getPolicies(message, isIncomingMessage) {\n      var policies = {};\n\n      if (this.activeUserPolicy !== undefined) {\n        policies.userPolicy = this.userPolicies[this.activeUserPolicy];\n      }\n\n      policies.serviceProviderPolicy = this.getServiceProviderPolicy(message, isIncomingMessage);\n\n      return policies;\n    }\n  }, {\n    key: '_isValidUpdate',\n    value: function _isValidUpdate(message) {\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n        if (message.from.split('://').length > 1) {\n          _this.idModule._getHypertyFromDataObject(message.from).then(function (hypertyURL) {\n            if (hypertyURL === message.body.source) {\n              resolve(message);\n            } else {\n              reject('The source of the message is not valid.');\n            }\n          }, function (error) {\n            reject(error);\n          });\n        } else {\n          resolve(message);\n        }\n      });\n    }\n  }, {\n    key: 'prepareToForward',\n    value: function prepareToForward(message, isIncoming, result) {\n      var _this4 = this;\n\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n        // log.log('[Policy.RuntimeCoreCtx.prepareToForward]', message);\n\n        // comment this to enable mutual authentication\n        //return resolve(message);\n\n        // TODO remove this validation. When the Nodejs auth was completed this should work like browser;\n        _this4.runtimeCapabilities.isAvailable('node').then(function (result) {\n\n          console.log('[RuntimeCoreCtx - isAvailable - node] - ', result);\n          //  if (result) {\n          //    return resolve(message);\n          //  } else {\n          if (isIncoming) {\n            var isSubscription = message.type === 'subscribe';\n            var isFromRemoteSM = _this.isFromRemoteSM(message.from);\n\n            if (isSubscription & isFromRemoteSM) {\n\n              // TODO: should verify why the mutualAuthentication is not working\n              // TODO: this should uncommented\n              _this.doMutualAuthentication(message).then(function () {\n                resolve(message);\n              }, function (error) {\n                reject(error);\n              });\n            } else {\n              resolve(message);\n            }\n          } else {\n\n            // TODO: should verify why the mutualAuthentication is not working\n            // TODO: this should uncommented\n            if (_this._isToCypherModule(message)) {\n              _this.idModule.encryptMessage(message).then(function (message) {\n                resolve(message);\n              }, function (error) {\n                reject(error);\n              });\n            } else {\n              resolve(message);\n            }\n          }\n          //        }\n        });\n      });\n    }\n  }, {\n    key: 'doMutualAuthentication',\n    value: function doMutualAuthentication(message) {\n      var _this = this;\n      return new _promise2.default(function (resolve, reject) {\n        var to = message.to.split('/');\n        var subsIndex = to.indexOf('subscription');\n        var isDataObjectSubscription = subsIndex !== -1;\n        var isFromRemoteSM = _this.isFromRemoteSM(message.from);\n        if (isDataObjectSubscription & isFromRemoteSM) {\n          to.pop();\n          var dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];\n          _this.idModule.doMutualAuthentication(dataObjectURL, message.body.subscriber).then(function () {\n            _this.runtimeRegistry.registerSubscriber(dataObjectURL, message.body.subscriber);\n            resolve();\n          }, function (error) {\n            reject(error);\n          });\n        }\n      });\n    }\n  }, {\n    key: 'getMyEmails',\n    value: function getMyEmails() {\n      var identities = this.idModule.getIdentities();\n      var emails = [];\n\n      for (var i in identities) {\n        emails.push((0, _utils.getUserEmailFromURL)(identities[i].identity));\n      }\n\n      return emails;\n    }\n  }, {\n    key: 'getMyHyperties',\n    value: function getMyHyperties() {\n      var hyperties = this.runtimeRegistry.hypertiesList;\n      var hypertiesNames = [];\n\n      for (var i in hyperties) {\n        var hypertyName = hyperties[i].objectName;\n        if (hypertiesNames.indexOf(hypertyName) === -1) {\n          hypertiesNames.push(hypertyName);\n        }\n      }\n\n      return hypertiesNames;\n    }\n  }, {\n    key: 'getServiceProviderPolicy',\n    value: function getServiceProviderPolicy(message, isIncoming) {\n      var policy = void 0;\n\n      if (isIncoming) {\n        var toHyperty = this.runtimeRegistry.getHypertyName(message.to);\n        policy = this.serviceProviderPolicy[toHyperty];\n      } else {\n        var fromHyperty = this.runtimeRegistry.getHypertyName(message.from);\n        policy = this.serviceProviderPolicy[fromHyperty];\n      }\n      return policy;\n    }\n  }, {\n    key: 'isFromRemoteSM',\n    value: function isFromRemoteSM(from) {\n      var splitFrom = from.split('://');\n      return splitFrom[0] === 'runtime' && from !== this.runtimeRegistry.runtimeURL + '/sm';\n    }\n  }, {\n    key: 'isLocal',\n    value: function isLocal(url) {\n      return this.runtimeRegistry.isLocal(url);\n    }\n  }, {\n    key: 'isInterworkingProtoStub',\n    value: function isInterworkingProtoStub(url) {\n      return this.runtimeRegistry.isInterworkingProtoStub(url);\n    }\n  }, {\n    key: '_isToSetID',\n    value: function _isToSetID(message) {\n      var schemasToIgnore = ['domain-idp', 'runtime', 'domain'];\n      var splitFrom = message.from.split('://');\n      var fromSchema = splitFrom[0];\n      var isLocal = this.runtimeRegistry.isLocal(message.to);\n      var isToIgnore = schemasToIgnore.indexOf(fromSchema) === -1;\n\n      var _from = message.from;\n\n      if (message.body && message.body.hasOwnProperty('source')) {\n        _from = message.body.source;\n      }\n\n      // Signalling Messages between P2P Stubs don't have Identities. FFS\n      if (_from.includes('/p2prequester/') || _from.includes('/p2phandler/')) {\n        return false;\n      }\n\n      // if (isLocal) {\n      //   return false;\n      // }\n\n      return isToIgnore;\n    }\n  }, {\n    key: 'getURL',\n    value: function getURL(url) {\n      var splitURL = url.split('/');\n      return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];\n    }\n  }, {\n    key: '_getIdentity',\n    value: function _getIdentity(message) {\n\n      var from = message.from;\n\n      // log.log('[Policy.RuntimeCoreCtx.getIdentity] ', message);\n      var sourceURL = undefined;\n      if (message.body.source !== undefined) {\n        from = message.body.source;\n      }\n\n      if (message.type === 'forward') {\n        from = message.body.from;\n      }\n\n      return this.idModule.getToken(from, message.to);\n    }\n\n    /**\n    * Identifies the messages to be forwarded to the Identity Module for\n    * encryption/decryption and integrity validation.\n    * @param {Message}    message\n    * @returns {boolean}  returns true if the message requires encryption/decryption\n    *                     or if its type equals 'handshake'; false otherwise\n    */\n\n  }, {\n    key: '_isToCypherModule',\n    value: function _isToCypherModule(message) {\n      log.log('[Policy.RuntimeCoreCtx.istoChyperModule]', message);\n      var isCreate = message.type === 'create';\n      var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';\n      var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';\n      var isToDataObject = (0, _utils.isDataObjectURL)(message.to);\n\n      var doMutualAuthentication = message.body.hasOwnProperty('mutual') ? message.body.mutual : true;\n\n      return isCreate && isFromHyperty && isToHyperty || isCreate && isFromHyperty && isToDataObject && doMutualAuthentication || message.type === 'handshake' || message.type === 'update' && doMutualAuthentication;\n    }\n\n    /**\n    * Creates a group with the given name.\n    * @param  {String}  groupName\n    */\n\n  }, {\n    key: '_loadUserPolicies',\n    value: function _loadUserPolicies() {\n      var _this5 = this;\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n\n        _this.storageManager.get('rethink:userPolicies').then(function (value) {\n          var policies = value;\n          if (policies !== undefined) {\n            for (var i in policies) {\n              _this5.pep.addPolicy('USER', i, policies[i]);\n            }\n          }\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: '_getLastComponentOfURL',\n    value: function _getLastComponentOfURL(url) {\n      var split = url.split('/');\n      return split[split.length - 1];\n    }\n  }, {\n    key: '_getPoliciesJSON',\n    value: function _getPoliciesJSON(policies) {\n      for (var i in policies) {\n        var combiningAlgorithm = policies[i].combiningAlgorithm;\n        if (combiningAlgorithm instanceof _BlockOverrides2.default) {\n          policies[i].combiningAlgorithm = 'blockOverrides';\n        } else {\n          if (combiningAlgorithm instanceof _AllowOverrides2.default) {\n            policies[i].combiningAlgorithm = 'allowOverrides';\n          } else {\n            if (combiningAlgorithm instanceof _FirstApplicable2.default) {\n              policies[i].combiningAlgorithm = 'firstApplicable';\n            } else {\n              policies[i].combiningAlgorithm = undefined;\n            }\n          }\n        }\n      }\n\n      return policies;\n    }\n  }, {\n    key: 'saveActivePolicy',\n    value: function saveActivePolicy() {\n      var _this6 = this;\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this.storageManager.set('rethink:activePolicy', 0, _this6.activeUserPolicy).then(function () {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: 'saveGroups',\n    value: function saveGroups() {\n      var _this7 = this;\n\n      var _this = this;\n\n      return new _promise2.default(function (resolve, reject) {\n        _this.storageManager.set('rethink:groups', 0, _this7.groups).then(function () {\n          resolve();\n        });\n      });\n    }\n  }, {\n    key: 'savePolicies',\n    value: function savePolicies(source, policy, key) {\n      var policiesJson = void 0;\n\n      switch (source) {\n        case 'USER':\n          policiesJson = (0, _stringify2.default)(this.userPolicies);\n          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));\n          this.storageManager.set('rethink:userPolicies', 0, policiesJson);\n          break;\n        case 'SERVICE_PROVIDER':\n          if (policy !== undefined & key !== undefined) {\n            this.serviceProviderPolicy[key] = policy;\n          }\n          policiesJson = (0, _stringify2.default)(this.serviceProviderPolicy);\n          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));\n          this.storageManager.set('rethink:spPolicies', 0, policiesJson);\n          break;\n        default:\n          throw Error('Unknown policy source: ' + source);\n      }\n    }\n  }, {\n    key: 'getGroupsNames',\n    value: function getGroupsNames() {\n      var myGroups = this.groups;\n      var groupsNames = [];\n      if (myGroups !== undefined) {\n        for (var groupName in myGroups) {\n          groupsNames.push(groupName);\n        }\n      }\n      return groupsNames;\n    }\n  }, {\n    key: 'getGroup',\n    value: function getGroup(groupName, destination) {\n      var members = [];\n\n      if (groupName === 'preauthorised') {\n        var dataObjectURL = destination.split('/');\n        dataObjectURL.pop();\n        dataObjectURL = dataObjectURL[0] + '//' + dataObjectURL[2];\n        members = this.runtimeRegistry.getPreAuthSubscribers(dataObjectURL);\n      } else {\n        if (this.groups[groupName] !== undefined) {\n          members = this.groups[groupName];\n        }\n      }\n\n      return members;\n    }\n\n    /**\n    * Creates a group with the given name.\n    * @param  {String}  groupName\n    */\n\n  }, {\n    key: 'createGroup',\n    value: function createGroup(groupName) {\n      this.groups[groupName] = [];\n      this.saveGroups();\n    }\n  }, {\n    key: 'deleteGroup',\n    value: function deleteGroup(groupName) {\n      delete this.groups[groupName];\n      this.saveGroups();\n    }\n\n    /**\n    * Adds the given user email to the group with the given name.\n    * @param  {String}  userEmail\n    * @param  {String}  groupName\n    */\n\n  }, {\n    key: 'addToGroup',\n    value: function addToGroup(groupName, userEmail) {\n      var myGroups = this.groups;\n      if (myGroups[groupName] !== undefined) {\n        if (myGroups[groupName].indexOf(userEmail) === -1) {\n          myGroups[groupName].push(userEmail);\n          this.saveGroups();\n        }\n      } else {\n        throw Error('Group \"' + groupName + '\" does not exist!');\n      }\n    }\n  }, {\n    key: 'removeFromGroup',\n    value: function removeFromGroup(groupName, userEmail) {\n      var group = this.groups[groupName];\n\n      group.splice(group.indexOf(userEmail), 1);\n      this.saveGroups();\n    }\n  }, {\n    key: 'pepURL',\n    get: function get() {\n      var _this = this;\n      return _this._pepURL;\n    }\n  }, {\n    key: 'guiURL',\n    get: function get() {\n      var _this = this;\n      return _this._guiURL;\n    }\n  }, {\n    key: 'runtimeURL',\n    get: function get() {\n      var _this = this;\n      return _this._runtimeURL;\n    }\n\n    /**\n    * return the messageBus in this Registry\n    * @param {MessageBus}           messageBus\n    */\n\n  }, {\n    key: 'messageBus',\n    get: function get() {\n      var _this = this;\n      return _this._messageBus;\n    }\n\n    /**\n    * Set the messageBus in this Registry\n    * @param {MessageBus}           messageBus\n    */\n    ,\n    set: function set(messageBus) {\n      var _this = this;\n      _this._messageBus = messageBus;\n    }\n  }, {\n    key: 'subscription',\n    get: function get() {\n      return this._subscription;\n    },\n    set: function set(params) {\n      this._subscription = params.message.body.subscriber;\n    }\n  }]);\n  return RuntimeCoreCtx;\n}(_ReThinkCtx3.default);\n\nexports.default = RuntimeCoreCtx;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvY29udGV4dC9SdW50aW1lQ29yZUN0eC5qcz85NWRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGxvZ2dlciBmcm9tICdsb2dsZXZlbCc7XG5sZXQgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignUEVQJyk7XG5cbmltcG9ydCBBbGxvd092ZXJyaWRlcyBmcm9tICcuLi9jb21iaW5pbmdBbGdvcml0aG1zL0FsbG93T3ZlcnJpZGVzJztcbmltcG9ydCBCbG9ja092ZXJyaWRlcyBmcm9tICcuLi9jb21iaW5pbmdBbGdvcml0aG1zL0Jsb2NrT3ZlcnJpZGVzJztcbmltcG9ydCB7ZGl2aWRlVVJMLCBnZXRVc2VyRW1haWxGcm9tVVJMLCBpc0RhdGFPYmplY3RVUkx9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBGaXJzdEFwcGxpY2FibGUgZnJvbSAnLi4vY29tYmluaW5nQWxnb3JpdGhtcy9GaXJzdEFwcGxpY2FibGUnO1xuaW1wb3J0IFJlVGhpbmtDdHggZnJvbSAnLi4vUmVUaGlua0N0eCc7XG5cbmNsYXNzIFJ1bnRpbWVDb3JlQ3R4IGV4dGVuZHMgUmVUaGlua0N0eCB7XG5cbiAgY29uc3RydWN0b3IocnVudGltZVVSTCwgaWRNb2R1bGUsIHJ1bnRpbWVSZWdpc3RyeSwgc3RvcmFnZU1hbmFnZXIsIHJ1bnRpbWVDYXBhYmlsaXRpZXMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3J1bnRpbWVVUkwgPSBydW50aW1lVVJMO1xuICAgIHRoaXMuX3BlcFVSTCA9IHRoaXMuX3J1bnRpbWVVUkwgKyAnL3BlcCc7XG4gICAgdGhpcy5fZ3VpVVJMID0gdGhpcy5fcnVudGltZVVSTCArICcvcG9saWN5LWd1aSc7XG4gICAgdGhpcy5pZE1vZHVsZSA9IGlkTW9kdWxlO1xuICAgIHRoaXMucnVudGltZVJlZ2lzdHJ5ID0gcnVudGltZVJlZ2lzdHJ5O1xuICAgIHRoaXMuYWN0aXZlVXNlclBvbGljeSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeSA9IHt9O1xuICAgIHRoaXMudXNlclBvbGljaWVzID0ge307XG4gICAgdGhpcy5zdG9yYWdlTWFuYWdlciA9IHN0b3JhZ2VNYW5hZ2VyO1xuICAgIHRoaXMucnVudGltZUNhcGFiaWxpdGllcyA9IHJ1bnRpbWVDYXBhYmlsaXRpZXM7XG4gIH1cblxuICBnZXQgcGVwVVJMKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9wZXBVUkw7XG4gIH1cblxuICBnZXQgZ3VpVVJMKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9ndWlVUkw7XG4gIH1cblxuICBnZXQgcnVudGltZVVSTCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fcnVudGltZVVSTDtcbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1cztcbiAgfVxuXG4gIC8qKlxuICAqIFNldCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBzZXQgbWVzc2FnZUJ1cyhtZXNzYWdlQnVzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XG4gIH1cblxuICBnZXQgc3Vic2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb247XG4gIH1cblxuICBzZXQgc3Vic2NyaXB0aW9uKHBhcmFtcykge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IHBhcmFtcy5tZXNzYWdlLmJvZHkuc3Vic2NyaWJlcjtcbiAgfVxuXG4gIGxvYWRDb25maWd1cmF0aW9ucygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOmFjdGl2ZVBvbGljeScpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIF90aGlzLmFjdGl2ZVVzZXJQb2xpY3kgPSB2YWx1ZTtcblxuICAgICAgICByZXR1cm4gX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOmdyb3VwcycpO1xuICAgICAgfSkudGhlbigoZ3JvdXBJbmZvKSA9PiB7XG4gICAgICAgIGxldCBncm91cHMgPSBncm91cEluZm87XG4gICAgICAgIF90aGlzLmdyb3VwcyA9IChncm91cHMgPT09IHVuZGVmaW5lZCkgPyB7fSA6IGdyb3VwcztcblxuICAgICAgICByZXR1cm4gX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOnNwUG9saWNpZXMnKTtcbiAgICAgIH0pLnRoZW4oKHBvbGljaWVzSW5mbykgPT4ge1xuICAgICAgICBsZXQgc3BQb2xpY2llcyA9IHBvbGljaWVzSW5mbztcbiAgICAgICAgX3RoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5ID0gKHNwUG9saWNpZXMgPT09IHVuZGVmaW5lZCkgPyB7fSA6IHNwUG9saWNpZXM7XG5cbiAgICAgICAgX3RoaXMuX2xvYWRVc2VyUG9saWNpZXMoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwcmVwYXJlRm9yRXZhbHVhdGlvbihtZXNzYWdlLCBpc0luY29taW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgIGlmIChpc0luY29taW5nKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNUb0N5cGhlck1vZHVsZShtZXNzYWdlKSkge1xuICAgICAgICAgIF90aGlzLmlkTW9kdWxlLmRlY3J5cHRNZXNzYWdlKG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICAgICAgLyppZiAobWVzc2FnZS50eXBlID09PSAndXBkYXRlJykge1xuICAgICAgICAgICAgICBfdGhpcy5faXNWYWxpZFVwZGF0ZShtZXNzYWdlKS50aGVuKG1lc3NhZ2UgPT4geyovXG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcblxuICAgICAgICAgICAgLyp9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICB9Ki9cblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGxvZy5sb2coJ1tQb2xpY3kuUnVudGltZUNvcmVDdHggcHJlcGFyZUZvckV2YWx1YXRpb25dJywgbWVzc2FnZSk7XG4gICAgICAgIGlmIChfdGhpcy5faXNUb1NldElEKG1lc3NhZ2UpKSB7XG4gICAgICAgICAgX3RoaXMuX2dldElkZW50aXR5KG1lc3NhZ2UpLnRoZW4oaWRlbnRpdHkgPT4ge1xuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIGdldFBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKSB7XG4gICAgbGV0IHBvbGljaWVzID0ge307XG5cbiAgICBpZiAodGhpcy5hY3RpdmVVc2VyUG9saWN5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBvbGljaWVzLnVzZXJQb2xpY3kgPSB0aGlzLnVzZXJQb2xpY2llc1t0aGlzLmFjdGl2ZVVzZXJQb2xpY3ldO1xuICAgIH1cblxuICAgIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSA9IHRoaXMuZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5KG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKTtcblxuICAgIHJldHVybiBwb2xpY2llcztcbiAgfVxuXG4gIF9pc1ZhbGlkVXBkYXRlKG1lc3NhZ2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAobWVzc2FnZS5mcm9tLnNwbGl0KCc6Ly8nKS5sZW5ndGggPiAxKSB7XG4gICAgICAgIF90aGlzLmlkTW9kdWxlLl9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QobWVzc2FnZS5mcm9tKS50aGVuKGh5cGVydHlVUkwgPT4ge1xuICAgICAgICAgIGlmIChoeXBlcnR5VVJMID09PSBtZXNzYWdlLmJvZHkuc291cmNlKSB7XG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ1RoZSBzb3VyY2Ugb2YgdGhlIG1lc3NhZ2UgaXMgbm90IHZhbGlkLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJlcGFyZVRvRm9yd2FyZChtZXNzYWdlLCBpc0luY29taW5nLCByZXN1bHQpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAvLyBsb2cubG9nKCdbUG9saWN5LlJ1bnRpbWVDb3JlQ3R4LnByZXBhcmVUb0ZvcndhcmRdJywgbWVzc2FnZSk7XG5cbiAgICAgIC8vIGNvbW1lbnQgdGhpcyB0byBlbmFibGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uXG4gICAgICAvL3JldHVybiByZXNvbHZlKG1lc3NhZ2UpO1xuXG4gICAgICAvLyBUT0RPIHJlbW92ZSB0aGlzIHZhbGlkYXRpb24uIFdoZW4gdGhlIE5vZGVqcyBhdXRoIHdhcyBjb21wbGV0ZWQgdGhpcyBzaG91bGQgd29yayBsaWtlIGJyb3dzZXI7XG4gICAgICB0aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMuaXNBdmFpbGFibGUoJ25vZGUnKS50aGVuKChyZXN1bHQpID0+IHtcblxuICAgICAgY29uc29sZS5sb2coJ1tSdW50aW1lQ29yZUN0eCAtIGlzQXZhaWxhYmxlIC0gbm9kZV0gLSAnLCByZXN1bHQpO1xuICAgICAgLy8gIGlmIChyZXN1bHQpIHtcbiAgICAgIC8vICAgIHJldHVybiByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgLy8gIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzSW5jb21pbmcpIHtcbiAgICAgICAgICAgIGxldCBpc1N1YnNjcmlwdGlvbiA9IG1lc3NhZ2UudHlwZSA9PT0gJ3N1YnNjcmliZSc7XG4gICAgICAgICAgICBsZXQgaXNGcm9tUmVtb3RlU00gPSBfdGhpcy5pc0Zyb21SZW1vdGVTTShtZXNzYWdlLmZyb20pO1xuXG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24gJiBpc0Zyb21SZW1vdGVTTSkge1xuXG4gICAgICAgICAgICAgIC8vIFRPRE86IHNob3VsZCB2ZXJpZnkgd2h5IHRoZSBtdXR1YWxBdXRoZW50aWNhdGlvbiBpcyBub3Qgd29ya2luZ1xuICAgICAgICAgICAgICAvLyBUT0RPOiB0aGlzIHNob3VsZCB1bmNvbW1lbnRlZFxuICAgICAgICAgICAgICBfdGhpcy5kb011dHVhbEF1dGhlbnRpY2F0aW9uKG1lc3NhZ2UpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IHNob3VsZCB2ZXJpZnkgd2h5IHRoZSBtdXR1YWxBdXRoZW50aWNhdGlvbiBpcyBub3Qgd29ya2luZ1xuICAgICAgICAgICAgLy8gVE9ETzogdGhpcyBzaG91bGQgdW5jb21tZW50ZWRcbiAgICAgICAgICAgIGlmIChfdGhpcy5faXNUb0N5cGhlck1vZHVsZShtZXNzYWdlKSkge1xuICAgICAgICAgICAgICBfdGhpcy5pZE1vZHVsZS5lbmNyeXB0TWVzc2FnZShtZXNzYWdlKS50aGVuKChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbi8vICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgZG9NdXR1YWxBdXRoZW50aWNhdGlvbihtZXNzYWdlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBsZXQgdG8gPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7XG4gICAgICBsZXQgc3Vic0luZGV4ID0gdG8uaW5kZXhPZignc3Vic2NyaXB0aW9uJyk7XG4gICAgICBsZXQgaXNEYXRhT2JqZWN0U3Vic2NyaXB0aW9uID0gc3Vic0luZGV4ICE9PSAtMTtcbiAgICAgIGxldCBpc0Zyb21SZW1vdGVTTSA9IF90aGlzLmlzRnJvbVJlbW90ZVNNKG1lc3NhZ2UuZnJvbSk7XG4gICAgICBpZiAoaXNEYXRhT2JqZWN0U3Vic2NyaXB0aW9uICYgaXNGcm9tUmVtb3RlU00pIHtcbiAgICAgICAgdG8ucG9wKCk7XG4gICAgICAgIGxldCBkYXRhT2JqZWN0VVJMID0gdG9bMF0gKyAnLy8nICsgdG9bMl0gKyAnLycgKyB0b1szXTtcbiAgICAgICAgX3RoaXMuaWRNb2R1bGUuZG9NdXR1YWxBdXRoZW50aWNhdGlvbihkYXRhT2JqZWN0VVJMLCBtZXNzYWdlLmJvZHkuc3Vic2NyaWJlcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgX3RoaXMucnVudGltZVJlZ2lzdHJ5LnJlZ2lzdGVyU3Vic2NyaWJlcihkYXRhT2JqZWN0VVJMLCBtZXNzYWdlLmJvZHkuc3Vic2NyaWJlcik7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGdldE15RW1haWxzKCkge1xuICAgIGxldCBpZGVudGl0aWVzID0gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0aWVzKCk7XG4gICAgbGV0IGVtYWlscyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSBpbiBpZGVudGl0aWVzKSB7XG4gICAgICBlbWFpbHMucHVzaChnZXRVc2VyRW1haWxGcm9tVVJMKGlkZW50aXRpZXNbaV0uaWRlbnRpdHkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW1haWxzO1xuICB9XG5cbiAgZ2V0TXlIeXBlcnRpZXMoKSB7XG4gICAgbGV0IGh5cGVydGllcyA9IHRoaXMucnVudGltZVJlZ2lzdHJ5Lmh5cGVydGllc0xpc3Q7XG4gICAgbGV0IGh5cGVydGllc05hbWVzID0gW107XG5cbiAgICBmb3IgKGxldCBpIGluIGh5cGVydGllcykge1xuICAgICAgbGV0IGh5cGVydHlOYW1lID0gaHlwZXJ0aWVzW2ldLm9iamVjdE5hbWU7XG4gICAgICBpZiAoaHlwZXJ0aWVzTmFtZXMuaW5kZXhPZihoeXBlcnR5TmFtZSkgPT09IC0xKSB7XG4gICAgICAgIGh5cGVydGllc05hbWVzLnB1c2goaHlwZXJ0eU5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoeXBlcnRpZXNOYW1lcztcbiAgfVxuXG4gIGdldFNlcnZpY2VQcm92aWRlclBvbGljeShtZXNzYWdlLCBpc0luY29taW5nKSB7XG4gICAgbGV0IHBvbGljeTtcblxuICAgIGlmIChpc0luY29taW5nKSB7XG4gICAgICBsZXQgdG9IeXBlcnR5ID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUobWVzc2FnZS50byk7XG4gICAgICBwb2xpY3kgPSB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeVt0b0h5cGVydHldO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZnJvbUh5cGVydHkgPSB0aGlzLnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShtZXNzYWdlLmZyb20pO1xuICAgICAgcG9saWN5ID0gdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3lbZnJvbUh5cGVydHldO1xuICAgIH1cbiAgICByZXR1cm4gcG9saWN5O1xuICB9XG5cbiAgaXNGcm9tUmVtb3RlU00oZnJvbSkge1xuICAgIGxldCBzcGxpdEZyb20gPSBmcm9tLnNwbGl0KCc6Ly8nKTtcbiAgICByZXR1cm4gc3BsaXRGcm9tWzBdID09PSAncnVudGltZScgJiYgZnJvbSAhPT0gdGhpcy5ydW50aW1lUmVnaXN0cnkucnVudGltZVVSTCArICcvc20nO1xuICB9XG5cbiAgaXNMb2NhbCh1cmwpIHtcbiAgICByZXR1cm4gdGhpcy5ydW50aW1lUmVnaXN0cnkuaXNMb2NhbCh1cmwpO1xuICB9XG5cbiAgaXNJbnRlcndvcmtpbmdQcm90b1N0dWIodXJsKSB7XG4gICAgcmV0dXJuIHRoaXMucnVudGltZVJlZ2lzdHJ5LmlzSW50ZXJ3b3JraW5nUHJvdG9TdHViKHVybCk7XG4gIH1cblxuICBfaXNUb1NldElEKG1lc3NhZ2UpIHtcbiAgICBsZXQgc2NoZW1hc1RvSWdub3JlID0gWydkb21haW4taWRwJywgJ3J1bnRpbWUnLCAnZG9tYWluJ107XG4gICAgbGV0IHNwbGl0RnJvbSA9IChtZXNzYWdlLmZyb20pLnNwbGl0KCc6Ly8nKTtcbiAgICBsZXQgZnJvbVNjaGVtYSA9IHNwbGl0RnJvbVswXTtcbiAgICBsZXQgaXNMb2NhbCA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmlzTG9jYWwobWVzc2FnZS50byk7XG4gICAgbGV0IGlzVG9JZ25vcmUgPSBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZihmcm9tU2NoZW1hKSA9PT0gLTE7XG5cbiAgICBsZXQgX2Zyb20gPSBtZXNzYWdlLmZyb207XG5cbiAgICBpZiAobWVzc2FnZS5ib2R5ICYmIG1lc3NhZ2UuYm9keS5oYXNPd25Qcm9wZXJ0eSgnc291cmNlJykpIHtcbiAgICAgIF9mcm9tID0gbWVzc2FnZS5ib2R5LnNvdXJjZTtcbiAgICB9XG5cbiAgICAvLyBTaWduYWxsaW5nIE1lc3NhZ2VzIGJldHdlZW4gUDJQIFN0dWJzIGRvbid0IGhhdmUgSWRlbnRpdGllcy4gRkZTXG4gICAgaWYgKF9mcm9tLmluY2x1ZGVzKCcvcDJwcmVxdWVzdGVyLycpIHx8IF9mcm9tLmluY2x1ZGVzKCcvcDJwaGFuZGxlci8nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGlmIChpc0xvY2FsKSB7XG4gICAgLy8gICByZXR1cm4gZmFsc2U7XG4gICAgLy8gfVxuXG4gICAgcmV0dXJuIGlzVG9JZ25vcmU7XG4gIH1cblxuICBnZXRVUkwodXJsKSB7XG4gICAgbGV0IHNwbGl0VVJMID0gdXJsLnNwbGl0KCcvJyk7XG4gICAgcmV0dXJuIHNwbGl0VVJMWzBdICsgJy8vJyArIHNwbGl0VVJMWzJdICsgJy8nICsgc3BsaXRVUkxbM107XG4gIH1cblxuICBfZ2V0SWRlbnRpdHkobWVzc2FnZSkge1xuXG4gICAgbGV0IGZyb20gPSBtZXNzYWdlLmZyb207XG5cbiAgICAvLyBsb2cubG9nKCdbUG9saWN5LlJ1bnRpbWVDb3JlQ3R4LmdldElkZW50aXR5XSAnLCBtZXNzYWdlKTtcbiAgICBsZXQgc291cmNlVVJMID0gdW5kZWZpbmVkO1xuICAgIGlmIChtZXNzYWdlLmJvZHkuc291cmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZyb20gPSBtZXNzYWdlLmJvZHkuc291cmNlO1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICdmb3J3YXJkJykge1xuICAgICAgZnJvbSA9IG1lc3NhZ2UuYm9keS5mcm9tO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmlkTW9kdWxlLmdldFRva2VuKGZyb20sIG1lc3NhZ2UudG8pO1xuICB9XG5cbiAgLyoqXG4gICogSWRlbnRpZmllcyB0aGUgbWVzc2FnZXMgdG8gYmUgZm9yd2FyZGVkIHRvIHRoZSBJZGVudGl0eSBNb2R1bGUgZm9yXG4gICogZW5jcnlwdGlvbi9kZWNyeXB0aW9uIGFuZCBpbnRlZ3JpdHkgdmFsaWRhdGlvbi5cbiAgKiBAcGFyYW0ge01lc3NhZ2V9ICAgIG1lc3NhZ2VcbiAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gIHJldHVybnMgdHJ1ZSBpZiB0aGUgbWVzc2FnZSByZXF1aXJlcyBlbmNyeXB0aW9uL2RlY3J5cHRpb25cbiAgKiAgICAgICAgICAgICAgICAgICAgIG9yIGlmIGl0cyB0eXBlIGVxdWFscyAnaGFuZHNoYWtlJzsgZmFsc2Ugb3RoZXJ3aXNlXG4gICovXG4gIF9pc1RvQ3lwaGVyTW9kdWxlKG1lc3NhZ2UpIHtcbiAgICBsb2cubG9nKCdbUG9saWN5LlJ1bnRpbWVDb3JlQ3R4LmlzdG9DaHlwZXJNb2R1bGVdJywgbWVzc2FnZSk7XG4gICAgbGV0IGlzQ3JlYXRlID0gbWVzc2FnZS50eXBlID09PSAnY3JlYXRlJztcbiAgICBsZXQgaXNGcm9tSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JztcbiAgICBsZXQgaXNUb0h5cGVydHkgPSBkaXZpZGVVUkwobWVzc2FnZS50bykudHlwZSA9PT0gJ2h5cGVydHknO1xuICAgIGxldCBpc1RvRGF0YU9iamVjdCA9IGlzRGF0YU9iamVjdFVSTChtZXNzYWdlLnRvKTtcblxuICAgIGxldCBkb011dHVhbEF1dGhlbnRpY2F0aW9uID0gbWVzc2FnZS5ib2R5Lmhhc093blByb3BlcnR5KCdtdXR1YWwnKSA/IG1lc3NhZ2UuYm9keS5tdXR1YWwgOiB0cnVlO1xuXG5cbiAgICByZXR1cm4gKChpc0NyZWF0ZSAmJiBpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5KSB8fCAoaXNDcmVhdGUgJiYgaXNGcm9tSHlwZXJ0eSAmJiBpc1RvRGF0YU9iamVjdCAmJiBkb011dHVhbEF1dGhlbnRpY2F0aW9uKSB8fCBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnIHx8IChtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnICYmIGRvTXV0dWFsQXV0aGVudGljYXRpb24pKTtcbiAgfVxuXG4gIC8qKlxuICAqIENyZWF0ZXMgYSBncm91cCB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAqIEBwYXJhbSAge1N0cmluZ30gIGdyb3VwTmFtZVxuICAqL1xuICBfbG9hZFVzZXJQb2xpY2llcygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOnVzZXJQb2xpY2llcycpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIGxldCBwb2xpY2llcyA9IHZhbHVlO1xuICAgICAgICBpZiAocG9saWNpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGZvciAobGV0IGkgaW4gcG9saWNpZXMpIHtcbiAgICAgICAgICAgIHRoaXMucGVwLmFkZFBvbGljeSgnVVNFUicsIGksIHBvbGljaWVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIF9nZXRMYXN0Q29tcG9uZW50T2ZVUkwodXJsKSB7XG4gICAgbGV0IHNwbGl0ID0gdXJsLnNwbGl0KCcvJyk7XG4gICAgcmV0dXJuIHNwbGl0W3NwbGl0Lmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgX2dldFBvbGljaWVzSlNPTihwb2xpY2llcykge1xuICAgIGZvciAobGV0IGkgaW4gcG9saWNpZXMpIHtcbiAgICAgIGxldCBjb21iaW5pbmdBbGdvcml0aG0gPSBwb2xpY2llc1tpXS5jb21iaW5pbmdBbGdvcml0aG07XG4gICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgQmxvY2tPdmVycmlkZXMpIHtcbiAgICAgICAgcG9saWNpZXNbaV0uY29tYmluaW5nQWxnb3JpdGhtID0gJ2Jsb2NrT3ZlcnJpZGVzJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb21iaW5pbmdBbGdvcml0aG0gaW5zdGFuY2VvZiBBbGxvd092ZXJyaWRlcykge1xuICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdhbGxvd092ZXJyaWRlcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNvbWJpbmluZ0FsZ29yaXRobSBpbnN0YW5jZW9mIEZpcnN0QXBwbGljYWJsZSkge1xuICAgICAgICAgICAgcG9saWNpZXNbaV0uY29tYmluaW5nQWxnb3JpdGhtID0gJ2ZpcnN0QXBwbGljYWJsZSc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcG9saWNpZXM7XG4gIH1cblxuICBzYXZlQWN0aXZlUG9saWN5KCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZXRoaW5rOmFjdGl2ZVBvbGljeScsIDAsIHRoaXMuYWN0aXZlVXNlclBvbGljeSkudGhlbigoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc2F2ZUdyb3VwcygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazpncm91cHMnLCAwLCB0aGlzLmdyb3VwcykudGhlbigoKSA9PiB7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc2F2ZVBvbGljaWVzKHNvdXJjZSwgcG9saWN5LCBrZXkpIHtcbiAgICBsZXQgcG9saWNpZXNKc29uO1xuXG4gICAgc3dpdGNoIChzb3VyY2UpIHtcbiAgICAgIGNhc2UgJ1VTRVInOlxuICAgICAgICBwb2xpY2llc0pzb24gPSBKU09OLnN0cmluZ2lmeSh0aGlzLnVzZXJQb2xpY2llcyk7XG4gICAgICAgIHBvbGljaWVzSnNvbiA9IHRoaXMuX2dldFBvbGljaWVzSlNPTihKU09OLnBhcnNlKHBvbGljaWVzSnNvbikpO1xuICAgICAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazp1c2VyUG9saWNpZXMnLCAwLCBwb2xpY2llc0pzb24pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1NFUlZJQ0VfUFJPVklERVInOlxuICAgICAgICBpZiAocG9saWN5ICE9PSB1bmRlZmluZWQgJiBrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5W2tleV0gPSBwb2xpY3k7XG4gICAgICAgIH1cbiAgICAgICAgcG9saWNpZXNKc29uID0gSlNPTi5zdHJpbmdpZnkodGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kpO1xuICAgICAgICBwb2xpY2llc0pzb24gPSB0aGlzLl9nZXRQb2xpY2llc0pTT04oSlNPTi5wYXJzZShwb2xpY2llc0pzb24pKTtcbiAgICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ3JldGhpbms6c3BQb2xpY2llcycsIDAsIHBvbGljaWVzSnNvbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gcG9saWN5IHNvdXJjZTogJyArIHNvdXJjZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0R3JvdXBzTmFtZXMoKSB7XG4gICAgbGV0IG15R3JvdXBzID0gdGhpcy5ncm91cHM7XG4gICAgbGV0IGdyb3Vwc05hbWVzID0gW107XG4gICAgaWYgKG15R3JvdXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAobGV0IGdyb3VwTmFtZSBpbiBteUdyb3Vwcykge1xuICAgICAgICBncm91cHNOYW1lcy5wdXNoKGdyb3VwTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBncm91cHNOYW1lcztcbiAgfVxuXG4gIGdldEdyb3VwKGdyb3VwTmFtZSwgZGVzdGluYXRpb24pIHtcbiAgICBsZXQgbWVtYmVycyA9IFtdO1xuXG4gICAgaWYgKGdyb3VwTmFtZSA9PT0gJ3ByZWF1dGhvcmlzZWQnKSB7XG4gICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IGRlc3RpbmF0aW9uLnNwbGl0KCcvJyk7XG4gICAgICBkYXRhT2JqZWN0VVJMLnBvcCgpO1xuICAgICAgZGF0YU9iamVjdFVSTCA9IGRhdGFPYmplY3RVUkxbMF0gKyAnLy8nICsgZGF0YU9iamVjdFVSTFsyXTtcbiAgICAgIG1lbWJlcnMgPSB0aGlzLnJ1bnRpbWVSZWdpc3RyeS5nZXRQcmVBdXRoU3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmdyb3Vwc1tncm91cE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVtYmVycyA9IHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbWJlcnM7XG4gIH1cblxuICAvKipcbiAgKiBDcmVhdGVzIGEgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICBncm91cE5hbWVcbiAgKi9cbiAgY3JlYXRlR3JvdXAoZ3JvdXBOYW1lKSB7XG4gICAgdGhpcy5ncm91cHNbZ3JvdXBOYW1lXSA9IFtdO1xuICAgIHRoaXMuc2F2ZUdyb3VwcygpO1xuICB9XG5cbiAgZGVsZXRlR3JvdXAoZ3JvdXBOYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV07XG4gICAgdGhpcy5zYXZlR3JvdXBzKCk7XG4gIH1cblxuICAvKipcbiAgKiBBZGRzIHRoZSBnaXZlbiB1c2VyIGVtYWlsIHRvIHRoZSBncm91cCB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJFbWFpbFxuICAqIEBwYXJhbSAge1N0cmluZ30gIGdyb3VwTmFtZVxuICAqL1xuICBhZGRUb0dyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7XG4gICAgbGV0IG15R3JvdXBzID0gdGhpcy5ncm91cHM7XG4gICAgaWYgKG15R3JvdXBzW2dyb3VwTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG15R3JvdXBzW2dyb3VwTmFtZV0uaW5kZXhPZih1c2VyRW1haWwpID09PSAtMSkge1xuICAgICAgICBteUdyb3Vwc1tncm91cE5hbWVdLnB1c2godXNlckVtYWlsKTtcbiAgICAgICAgdGhpcy5zYXZlR3JvdXBzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKCdHcm91cCBcIicgKyBncm91cE5hbWUgKyAnXCIgZG9lcyBub3QgZXhpc3QhJyk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRnJvbUdyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7XG4gICAgbGV0IGdyb3VwID0gdGhpcy5ncm91cHNbZ3JvdXBOYW1lXTtcblxuICAgIGdyb3VwLnNwbGljZShncm91cC5pbmRleE9mKHVzZXJFbWFpbCksIDEpO1xuICAgIHRoaXMuc2F2ZUdyb3VwcygpO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUnVudGltZUNvcmVDdHg7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3BvbGljeS9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQURBO0FBQ0E7QUFFQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBO0FBQUE7QUFDQTs7O0FBQUE7QUFDQTs7Ozs7OztBQVBBO0FBQ0E7QUFPQTs7O0FBRUE7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFZQTtBQUNBOzs7QUEwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFJQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7OztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWZBO0FBaUJBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQWhlQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBOzs7OztBQTZiQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///508\n");
    }, function(module, exports, __webpack_require__) {
        "use strict";
        eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = __webpack_require__(1);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(2);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _utils = __webpack_require__(15);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ReThinkCtx = function () {\n  function ReThinkCtx() {\n    (0, _classCallCheck3.default)(this, ReThinkCtx);\n\n    this.defaultBehaviour = true;\n    this.groups = {};\n  }\n\n  (0, _createClass3.default)(ReThinkCtx, [{\n    key: 'scheme',\n    get: function get() {\n      return this._scheme;\n    },\n    set: function set(params) {\n      var from = params.message.from;\n      if ((0, _utils.isDataObjectURL)(from)) {\n        this._scheme = (0, _utils.divideURL)(from).type;\n      } else {\n        this._scheme = undefined;\n      }\n    }\n  }, {\n    key: 'date',\n    get: function get() {\n      return this._date;\n    },\n    set: function set(now) {\n      var date = new Date();\n      var day = String(date.getDate());\n      if (day.length === 1) {\n        day = '0' + day;\n      }\n      var month = String(date.getMonth() + 1);\n      if (month.length === 1) {\n        month = '0' + month;\n      }\n      this._date = day + '/' + month + '/' + date.getFullYear();\n    }\n  }, {\n    key: 'domain',\n    get: function get() {\n      return this._domain;\n    },\n    set: function set(params) {\n      if (params.message.body.identity !== undefined) {\n        this._domain = (0, _utils.divideEmail)(params.message.body.identity.userProfile.username).domain;\n      }\n    }\n  }, {\n    key: 'type',\n    get: function get() {\n      return this._type;\n    },\n    set: function set(params) {\n      var message = params.message;\n      if (message.body.value !== undefined) {\n        this._type = message.body.value.resourceType;\n      }\n    }\n  }, {\n    key: 'source',\n    get: function get() {\n      return this._source;\n    },\n    set: function set(params) {\n      if (params.message.body.identity !== undefined) {\n        this._source = params.message.body.identity.userProfile.username;\n      }\n    }\n  }, {\n    key: 'time',\n    get: function get() {\n      return this._time;\n    },\n    set: function set(now) {\n      now = new Date();\n      var minutes = String(now.getMinutes());\n      if (minutes.length === 1) {\n        minutes = '0' + minutes;\n      }\n      this._time = parseInt(String(now.getHours()) + minutes);\n    }\n  }, {\n    key: 'weekday',\n    get: function get() {\n      return this._weekday;\n    },\n    set: function set(now) {\n      this._weekday = String(new Date().getDay());\n    }\n  }]);\n  return ReThinkCtx;\n}();\n\nexports.default = ReThinkCtx;\nmodule.exports = exports['default'];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9wb2xpY3kvUmVUaGlua0N0eC5qcz82ZmRhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZGl2aWRlRW1haWwsIGRpdmlkZVVSTCwgaXNEYXRhT2JqZWN0VVJMfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmNsYXNzIFJlVGhpbmtDdHgge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGVmYXVsdEJlaGF2aW91ciA9IHRydWU7XG4gICAgdGhpcy5ncm91cHMgPSB7fTtcbiAgfVxuXG4gIGdldCBzY2hlbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NjaGVtZTtcbiAgfVxuXG4gIGdldCBkYXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRlO1xuICB9XG5cbiAgZ2V0IGRvbWFpbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZG9tYWluO1xuICB9XG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gIH1cblxuICBnZXQgc291cmNlKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2U7XG4gIH1cblxuICBnZXQgdGltZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGltZTtcbiAgfVxuXG4gIGdldCB3ZWVrZGF5KCkge1xuICAgIHJldHVybiB0aGlzLl93ZWVrZGF5O1xuICB9XG5cbiAgc2V0IHNjaGVtZShwYXJhbXMpIHtcbiAgICBsZXQgZnJvbSA9IHBhcmFtcy5tZXNzYWdlLmZyb207XG4gICAgaWYgKGlzRGF0YU9iamVjdFVSTChmcm9tKSkge1xuICAgICAgdGhpcy5fc2NoZW1lID0gZGl2aWRlVVJMKGZyb20pLnR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NjaGVtZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBzZXQgZGF0ZShub3cpIHtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IGRheSA9IFN0cmluZyhkYXRlLmdldERhdGUoKSk7XG4gICAgaWYgKGRheS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGRheSA9ICcwJyArIGRheTtcbiAgICB9XG4gICAgbGV0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpO1xuICAgIGlmIChtb250aC5sZW5ndGggPT09IDEpIHtcbiAgICAgIG1vbnRoID0gJzAnICsgbW9udGg7XG4gICAgfVxuICAgIHRoaXMuX2RhdGUgPSBkYXkgKyAnLycgKyBtb250aCArICcvJyArIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfVxuXG4gIHNldCBkb21haW4ocGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5tZXNzYWdlLmJvZHkuaWRlbnRpdHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fZG9tYWluID0gZGl2aWRlRW1haWwocGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VybmFtZSkuZG9tYWluO1xuICAgIH1cbiAgfVxuXG4gIHNldCB0eXBlKHBhcmFtcykge1xuICAgIGxldCBtZXNzYWdlID0gcGFyYW1zLm1lc3NhZ2U7XG4gICAgaWYgKG1lc3NhZ2UuYm9keS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl90eXBlID0gbWVzc2FnZS5ib2R5LnZhbHVlLnJlc291cmNlVHlwZTtcbiAgICB9XG4gIH1cblxuICBzZXQgc291cmNlKHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3NvdXJjZSA9IHBhcmFtcy5tZXNzYWdlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlcm5hbWU7XG4gICAgfVxuICB9XG5cbiAgc2V0IHRpbWUobm93KSB7XG4gICAgbm93ID0gbmV3IERhdGUoKTtcbiAgICBsZXQgbWludXRlcyA9IFN0cmluZyhub3cuZ2V0TWludXRlcygpKTtcbiAgICBpZiAobWludXRlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIG1pbnV0ZXMgPSAnMCcgKyBtaW51dGVzO1xuICAgIH1cbiAgICB0aGlzLl90aW1lID0gcGFyc2VJbnQoU3RyaW5nKG5vdy5nZXRIb3VycygpKSArIG1pbnV0ZXMpO1xuICB9XG5cbiAgc2V0IHdlZWtkYXkobm93KSB7XG4gICAgdGhpcy5fd2Vla2RheSA9IFN0cmluZyhuZXcgRGF0ZSgpLmdldERheSgpKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlVGhpbmtDdHg7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL3BvbGljeS9SZVRoaW5rQ3R4LmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7OztBQUNBO0FBRUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQTBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUEvQkE7QUFDQTtBQUNBO0FBK0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBeENBO0FBQ0E7QUFDQTtBQXdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUExQ0E7QUFDQTtBQUNBO0FBMENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBN0NBO0FBQ0E7QUFDQTtBQTZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUEvQ0E7QUFDQTtBQUNBO0FBK0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQXBEQTtBQUNBO0FBQ0E7QUFvREE7QUFDQTtBQUNBOzs7OztBQUlBO0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///509\n");
    } ]);
});",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": "3bc366f2d0ba3d681e7a3899917c5d3de",
    "type": "Runtimes",
    "version": "35.30",
    "description": "Description of Runtime",
    "objectName": "Runtime",
    "configuration": {},
    "runtimeType": "browser",
    "hypertyCapabilities": {
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true
    },
    "protocolCapabilities": {
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy",
    "p2pHandlerStub": "hyperty-catalogue://catalogue.localhost/.well-known/protocolstub/P2PHandlerProtoStub",
    "p2pRequesterStub": "hyperty-catalogue://catalogue.localhost/.well-known/protocolstub/P2PRequesterProtoStub",
    "constraints": {
      "browser": true,
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true,
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    }
  }
}