{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "LyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovLyBEaXN0cmlidXRpb24gZmlsZSBmb3IgUnVudGltZS5qcyAKLy8gdmVyc2lvbjogMC43LjEKLy8gTGFzdCBidWlsZDogVGh1IERlYyAyMiAyMDE2IDEwOjE5OjM3IEdNVCswMDAwIChXRVQpCgooZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT0ib2JqZWN0IiYmdHlwZW9mIG1vZHVsZSE9PSJ1bmRlZmluZWQiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09ImZ1bmN0aW9uIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PSJ1bmRlZmluZWQiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT0idW5kZWZpbmVkIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PSJ1bmRlZmluZWQiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9Zy5SdW50aW1lID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT0iZnVuY3Rpb24iJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrbysiJyIpO3Rocm93IGYuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT0iZnVuY3Rpb24iJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKInVzZSBzdHJpY3QiOwoKcmVxdWlyZSgiY29yZS1qcy9zaGltIik7CgpyZXF1aXJlKCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiKTsKCnJlcXVpcmUoImNvcmUtanMvZm4vcmVnZXhwL2VzY2FwZSIpOwoKaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCkgewogIHRocm93IG5ldyBFcnJvcigib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZCIpOwp9Cmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7Cgp2YXIgREVGSU5FX1BST1BFUlRZID0gImRlZmluZVByb3BlcnR5IjsKZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHsKICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7CiAgICB3cml0YWJsZTogdHJ1ZSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIHZhbHVlOiB2YWx1ZQogIH0pOwp9CgpkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgInBhZExlZnQiLCAiIi5wYWRTdGFydCk7CmRlZmluZShTdHJpbmcucHJvdG90eXBlLCAicGFkUmlnaHQiLCAiIi5wYWRFbmQpOwoKInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbCIuc3BsaXQoIiwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpOwp9KTsKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlIjoyMSwiY29yZS1qcy9zaGltIjo0MTcsInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI6NDE5fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mcm9tIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9hcnJheS9mcm9tIjoyMn1dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5IjoyM31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbiIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnbiI6MjR9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUiOjI1fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5IiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5IjoyNn1dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI6Mjd9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6Mjh9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9pcy1mcm96ZW4iKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9pcy1mcm96ZW4iOjI5fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiByZXF1aXJlKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXMiKSwgX19lc01vZHVsZTogdHJ1ZSB9Owp9LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIjozMH1dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiI6MzF9XSwxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IHJlcXVpcmUoImNvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlIiksIF9fZXNNb2R1bGU6IHRydWUgfTsKfSx7ImNvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlIjozMn1dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sIjozM31dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogcmVxdWlyZSgiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvciIpLCBfX2VzTW9kdWxlOiB0cnVlIH07Cn0seyJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yIjozNH1dLDE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9Owp9LHt9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Cgp2YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5Iik7Cgp2YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7CiAgICB9CiAgfQoKICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsKICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogICAgcmV0dXJuIENvbnN0cnVjdG9yOwogIH07Cn0oKTsKfSx7Ii4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eSI6Nn1dLDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKInVzZSBzdHJpY3QiOwoKZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCIuLi9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIik7Cgp2YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTsKCnZhciBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIik7Cgp2YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgewogIGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsKICB2YXIgZGVzYyA9ICgwLCBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMi5kZWZhdWx0KShvYmplY3QsIHByb3BlcnR5KTsKCiAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgewogICAgdmFyIHBhcmVudCA9ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKG9iamVjdCk7CgogICAgaWYgKHBhcmVudCA9PT0gbnVsbCkgewogICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7CiAgICB9CiAgfSBlbHNlIGlmICgidmFsdWUiIGluIGRlc2MpIHsKICAgIHJldHVybiBkZXNjLnZhbHVlOwogIH0gZWxzZSB7CiAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7CgogICAgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CgogICAgcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsKICB9Cn07Cn0seyIuLi9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjcsIi4uL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjh9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Cgp2YXIgX3NldFByb3RvdHlwZU9mID0gcmVxdWlyZSgiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiIpOwoKdmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7Cgp2YXIgX2NyZWF0ZSA9IHJlcXVpcmUoIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZSIpOwoKdmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTsKCnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoIi4uL2hlbHBlcnMvdHlwZW9mIik7Cgp2YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsKICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCAiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1cGVyQ2xhc3MpKSk7CiAgfQoKICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewogICAgY29uc3RydWN0b3I6IHsKICAgICAgdmFsdWU6IHN1YkNsYXNzLAogICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgd3JpdGFibGU6IHRydWUsCiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogICAgfQogIH0pOwogIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOwp9Owp9LHsiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlIjo1LCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mIjoxMSwiLi4vaGVscGVycy90eXBlb2YiOjIwfV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKdmFyIF90eXBlb2YyID0gcmVxdWlyZSgiLi4vaGVscGVycy90eXBlb2YiKTsKCnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7CiAgaWYgKCFzZWxmKSB7CiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwogIH0KCiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjYWxsKSkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSA/IGNhbGwgOiBzZWxmOwp9Owp9LHsiLi4vaGVscGVycy90eXBlb2YiOjIwfV0sMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKdmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIik7Cgp2YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTsKCnZhciBfc3ltYm9sID0gcmVxdWlyZSgiLi4vY29yZS1qcy9zeW1ib2wiKTsKCnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7Cgp2YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpleHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgewogIHJldHVybiB0eXBlb2Ygb2JqID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihvYmopOwp9IDogZnVuY3Rpb24gKG9iaikgewogIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmogPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKG9iaik7Cn07Cn0seyIuLi9jb3JlLWpzL3N5bWJvbCI6MTMsIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIjoxNH1dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjE0NSwiLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUiOjI0MX1dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuQXJyYXkuZnJvbTsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjQyLCIuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tIjoxMDgsIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvciI6MTIwfV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY29yZSAgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykKICAsICRKU09OID0gY29yZS5KU09OIHx8IChjb3JlLkpTT04gPSB7c3RyaW5naWZ5OiBKU09OLnN0cmluZ2lmeX0pOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICByZXR1cm4gJEpTT04uc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmd1bWVudHMpOwp9Owp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6NDJ9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjQyLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduIjoxMTB9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTsKdmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXsKICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7Cn07Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjo0MiwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZSI6MTExfV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7CnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKXsKICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTsKfTsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjQyLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5IjoxMTJ9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTsKdmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXsKICByZXR1cm4gJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7Cn07Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjo0MiwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvciI6MTEzfV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0UHJvdG90eXBlT2Y7Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjo0MiwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YiOjExNH1dLDI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuaXNGcm96ZW47Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjo0MiwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbiI6MTE1fV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Qua2V5czsKfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjQyLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cyI6MTE2fV0sMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7Cn0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjo0MiwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YiOjExN31dLDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpOwpyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTsKcmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7CnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuUHJvbWlzZTsKfSx7Ii4uL21vZHVsZXMvX2NvcmUiOjQyLCIuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nIjoxMTgsIi4uL21vZHVsZXMvZXM2LnByb21pc2UiOjExOSwiLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yIjoxMjAsIi4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZSI6MTI0fV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpOwpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sOwp9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6NDIsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmciOjExOCwiLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sIjoxMjEsIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvciI6MTIyLCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZSI6MTIzfV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTsKcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7Cn0seyIuLi8uLi9tb2R1bGVzL193a3MtZXh0IjoxMDUsIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvciI6MTIwLCIuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUiOjEyNH1dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTsKICByZXR1cm4gaXQ7Cn07Cn0se31dLDM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9Owp9LHt9XSwzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7CiAgaWYoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpewogICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTsKICB9IHJldHVybiBpdDsKfTsKfSx7fV0sMzg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgaWYoIWlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7CiAgcmV0dXJuIGl0Owp9Owp9LHsiLi9faXMtb2JqZWN0Ijo2Mn1dLDM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZgovLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlcwp2YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgdG9JbmRleCAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7CiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXsKICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpCiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpCiAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aCkKICAgICAgLCB2YWx1ZTsKICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG0KICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXsKICAgICAgdmFsdWUgPSBPW2luZGV4KytdOwogICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTsKICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3QKICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pewogICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7CiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7CiAgfTsKfTsKfSx7Ii4vX3RvLWluZGV4Ijo5NywiLi9fdG8taW9iamVjdCI6OTksIi4vX3RvLWxlbmd0aCI6MTAwfV0sNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKQp2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJykKICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpCiAgLy8gRVMzIHdyb25nIGhlcmUKICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnOwoKLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3IKdmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpewogIHRyeSB7CiAgICByZXR1cm4gaXRba2V5XTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9Cn07Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICB2YXIgTywgVCwgQjsKICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCcKICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZQogICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVAogICAgLy8gYnVpbHRpblRhZyBjYXNlCiAgICA6IEFSRyA/IGNvZihPKQogICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFjawogICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7Cn07Cn0seyIuL19jb2YiOjQxLCIuL193a3MiOjEwNn1dLDQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpOwp9Owp9LHt9XSw0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307CmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZgp9LHt9XSw0MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgLCBjcmVhdGVEZXNjICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgaW5kZXgsIHZhbHVlKXsKICBpZihpbmRleCBpbiBvYmplY3QpJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpOwogIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlOwp9Owp9LHsiLi9fb2JqZWN0LWRwIjo3NSwiLi9fcHJvcGVydHktZGVzYyI6ODZ9XSw0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZwp2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpewogIGFGdW5jdGlvbihmbik7CiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjsKICBzd2l0Y2gobGVuZ3RoKXsKICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpewogICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTsKICAgIH07CiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXsKICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7CiAgICB9OwogICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7CiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpOwogICAgfTsKICB9CiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pewogICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7CiAgfTsKfTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjM1fV0sNDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgIiArIGl0KTsKICByZXR1cm4gaXQ7Cn07Cn0se31dLDQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eQptb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNzsKfSk7Cn0seyIuL19mYWlscyI6NTF9XSw0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50CiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnCiAgLCBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTsKfTsKfSx7Ii4vX2dsb2JhbCI6NTMsIi4vX2lzLW9iamVjdCI6NjJ9XSw0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXMKbW9kdWxlLmV4cG9ydHMgPSAoCiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZicKKS5zcGxpdCgnLCcpOwp9LHt9XSw0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzCnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKQogICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykKICAsIHBJRSAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdCkKICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjsKICBpZihnZXRTeW1ib2xzKXsKICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCkKICAgICAgLCBpc0VudW0gID0gcElFLmYKICAgICAgLCBpICAgICAgID0gMAogICAgICAsIGtleTsKICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlyZXN1bHQucHVzaChrZXkpOwogIH0gcmV0dXJuIHJlc3VsdDsKfTsKfSx7Ii4vX29iamVjdC1nb3BzIjo4MCwiLi9fb2JqZWN0LWtleXMiOjgzLCIuL19vYmplY3QtcGllIjo4NH1dLDUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJykKICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpCiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnOwoKdmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2UpewogIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GCiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkcKICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUwogICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QCiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkIKICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuVwogICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KQogICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV0KICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXQogICAgLCBrZXksIG93biwgb3V0OwogIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lOwogIGZvcihrZXkgaW4gc291cmNlKXsKICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQogICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDsKICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTsKICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkCiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldOwogICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzCiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XQogICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHQKICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpCiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeQogICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXsKICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXsKICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7CiAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7CiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDOwogICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTsKICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7CiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTsKICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTsKICAgICAgcmV0dXJuIEY7CiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHMKICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDsKICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJQogICAgaWYoSVNfUFJPVE8pewogICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7CiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlCiAgICAgIGlmKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0paGlkZShleHBQcm90bywga2V5LCBvdXQpOwogICAgfQogIH0KfTsKLy8gdHlwZSBiaXRtYXAKJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWQKJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWwKJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWMKJGV4cG9ydC5QID0gODsgICAvLyBwcm90bwokZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmQKJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwCiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZQokZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgCm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsKfSx7Ii4vX2NvcmUiOjQyLCIuL19jdHgiOjQ0LCIuL19nbG9iYWwiOjUzLCIuL19oaWRlIjo1NX1dLDUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXsKICB0cnkgewogICAgcmV0dXJuICEhZXhlYygpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4gdHJ1ZTsKICB9Cn07Cn0se31dLDUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJykKICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpCiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJykKICAsIEJSRUFLICAgICAgID0ge30KICAsIFJFVFVSTiAgICAgID0ge307CnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXsKICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbigpeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpCiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKQogICAgLCBpbmRleCAgPSAwCiAgICAsIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDsKICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7CiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yCiAgaWYoaXNBcnJheUl0ZXIoaXRlckZuKSlmb3IobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspewogICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pOwogICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0OwogIH0gZWxzZSBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKXsKICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpOwogICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0OwogIH0KfTsKZXhwb3J0cy5CUkVBSyAgPSBCUkVBSzsKZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47Cn0seyIuL19hbi1vYmplY3QiOjM4LCIuL19jdHgiOjQ0LCIuL19pcy1hcnJheS1pdGVyIjo2MCwiLi9faXRlci1jYWxsIjo2MywiLi9fdG8tbGVuZ3RoIjoxMDAsIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kIjoxMDd9XSw1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4CnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aAogID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsKaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYKfSx7fV0sNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXsKICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTsKfTsKfSx7fV0sNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpCiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpOwptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpewogIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7Cn0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpewogIG9iamVjdFtrZXldID0gdmFsdWU7CiAgcmV0dXJuIG9iamVjdDsKfTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjo0NiwiLi9fb2JqZWN0LWRwIjo3NSwiLi9fcHJvcGVydHktZGVzYyI6ODZ9XSw1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Owp9LHsiLi9fZ2xvYmFsIjo1M31dLDU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNzsKfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6NDYsIi4vX2RvbS1jcmVhdGUiOjQ3LCIuL19mYWlscyI6NTF9XSw1ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGF0KXsKICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7CiAgc3dpdGNoKGFyZ3MubGVuZ3RoKXsKICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKQogICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpOwogICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKQogICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pOwogICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKQogICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pOwogICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKQogICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pOwogICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKQogICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pOwogIH0gcmV0dXJuICAgICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBhcmdzKTsKfTsKfSx7fV0sNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5ncwp2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7Cm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpOwp9Owp9LHsiLi9fY29mIjo0MX1dLDYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvcgp2YXIgSXRlcmF0b3JzICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpCiAgLCBJVEVSQVRPUiAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJykKICAsIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpOwp9Owp9LHsiLi9faXRlcmF0b3JzIjo2OCwiLi9fd2tzIjoxMDZ9XSw2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpCnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTsKbW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXsKICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5JzsKfTsKfSx7Ii4vX2NvZiI6NDF9XSw2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7Cn07Cn0se31dLDYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvcgp2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKXsKICB0cnkgewogICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTsKICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKQogIH0gY2F0Y2goZSl7CiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddOwogICAgaWYocmV0ICE9PSB1bmRlZmluZWQpYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTsKICAgIHRocm93IGU7CiAgfQp9Owp9LHsiLi9fYW4tb2JqZWN0IjozOH1dLDY0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykKICAsIGRlc2NyaXB0b3IgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpCiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykKICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307CgovLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKQpyZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXsKICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7CiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7Cn07Cn0seyIuL19oaWRlIjo1NSwiLi9fb2JqZWN0LWNyZWF0ZSI6NzQsIi4vX3Byb3BlcnR5LWRlc2MiOjg2LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6OTEsIi4vX3drcyI6MTA2fV0sNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKQogICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKQogICwgJGl0ZXJDcmVhdGUgICAgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpCiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykKICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBJVEVSQVRPUiAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpCiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgCiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJwogICwgS0VZUyAgICAgICAgICAgPSAna2V5cycKICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7Cgp2YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9OwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpewogICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTsKICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7CiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07CiAgICBzd2l0Y2goa2luZCl7CiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTsKICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTsKICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTsKICB9OwogIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InCiAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUwogICAgLCBWQUxVRVNfQlVHID0gZmFsc2UKICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlCiAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF0KICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpCiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkCiAgICAsICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlCiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7CiAgLy8gRml4IG5hdGl2ZQogIGlmKCRhbnlOYXRpdmUpewogICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTsKICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXsKICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9ycwogICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTsKICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzCiAgICAgIGlmKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7CiAgICB9CiAgfQogIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkYKICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpewogICAgVkFMVUVTX0JVRyA9IHRydWU7CiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9OwogIH0KICAvLyBEZWZpbmUgaXRlcmF0b3IKICBpZigoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSl7CiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpOwogIH0KICAvLyBQbHVnIGZvciBsaWJyYXJ5CiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7CiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpczsKICBpZihERUZBVUxUKXsKICAgIG1ldGhvZHMgPSB7CiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLAogICAgICBrZXlzOiAgICBJU19TRVQgICAgID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksCiAgICAgIGVudHJpZXM6ICRlbnRyaWVzCiAgICB9OwogICAgaWYoRk9SQ0VEKWZvcihrZXkgaW4gbWV0aG9kcyl7CiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pOwogICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTsKICB9CiAgcmV0dXJuIG1ldGhvZHM7Cn07Cn0seyIuL19leHBvcnQiOjUwLCIuL19oYXMiOjU0LCIuL19oaWRlIjo1NSwiLi9faXRlci1jcmVhdGUiOjY0LCIuL19pdGVyYXRvcnMiOjY4LCIuL19saWJyYXJ5Ijo3MCwiLi9fb2JqZWN0LWdwbyI6ODEsIi4vX3JlZGVmaW5lIjo4OCwiLi9fc2V0LXRvLXN0cmluZy10YWciOjkxLCIuL193a3MiOjEwNn1dLDY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpCiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTsKCnRyeSB7CiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpOwogIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCl7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07CiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7Cn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3NpbmcpewogIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTsKICB2YXIgc2FmZSA9IGZhbHNlOwogIHRyeSB7CiAgICB2YXIgYXJyICA9IFs3XQogICAgICAsIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7CiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTsKICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTsKICAgIGV4ZWMoYXJyKTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9CiAgcmV0dXJuIHNhZmU7Cn07Cn0seyIuL193a3MiOjEwNn1dLDY3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb25lLCB2YWx1ZSl7CiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07Cn07Cn0se31dLDY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSB7fTsKfSx7fV0sNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKQogICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpewogIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KQogICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pCiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCiAgICAsIGluZGV4ICA9IDAKICAgICwga2V5OwogIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7Cn07Cn0seyIuL19vYmplY3Qta2V5cyI6ODMsIi4vX3RvLWlvYmplY3QiOjk5fV0sNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHRydWU7Cn0se31dLDcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIE1FVEEgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKQogICwgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgaGFzICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgc2V0RGVzYyAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mCiAgLCBpZCAgICAgICA9IDA7CnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uKCl7CiAgcmV0dXJuIHRydWU7Cn07CnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpewogIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7Cn0pOwp2YXIgc2V0TWV0YSA9IGZ1bmN0aW9uKGl0KXsKICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHsKICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRAogICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHMKICB9fSk7Cn07CnZhciBmYXN0S2V5ID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7CiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeAogIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDsKICBpZighaGFzKGl0LCBNRVRBKSl7CiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdAogICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJzsKICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhCiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7CiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YQogICAgc2V0TWV0YShpdCk7CiAgLy8gcmV0dXJuIG9iamVjdCBJRAogIH0gcmV0dXJuIGl0W01FVEFdLmk7Cn07CnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7CiAgaWYoIWhhcyhpdCwgTUVUQSkpewogICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3QKICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlOwogICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGEKICAgIGlmKCFjcmVhdGUpcmV0dXJuIGZhbHNlOwogICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGEKICAgIHNldE1ldGEoaXQpOwogIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzCiAgfSByZXR1cm4gaXRbTUVUQV0udzsKfTsKLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nCnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXsKICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7CiAgcmV0dXJuIGl0Owp9Owp2YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0gewogIEtFWTogICAgICBNRVRBLAogIE5FRUQ6ICAgICBmYWxzZSwKICBmYXN0S2V5OiAgZmFzdEtleSwKICBnZXRXZWFrOiAgZ2V0V2VhaywKICBvbkZyZWV6ZTogb25GcmVlemUKfTsKfSx7Ii4vX2ZhaWxzIjo1MSwiLi9faGFzIjo1NCwiLi9faXMtb2JqZWN0Ijo2MiwiLi9fb2JqZWN0LWRwIjo3NSwiLi9fdWlkIjoxMDN9XSw3MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldAogICwgT2JzZXJ2ZXIgID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXIKICAsIHByb2Nlc3MgICA9IGdsb2JhbC5wcm9jZXNzCiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZQogICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpewogIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7CgogIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7CiAgICB2YXIgcGFyZW50LCBmbjsKICAgIGlmKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKXBhcmVudC5leGl0KCk7CiAgICB3aGlsZShoZWFkKXsKICAgICAgZm4gICA9IGhlYWQuZm47CiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7CiAgICAgIHRyeSB7CiAgICAgICAgZm4oKTsKICAgICAgfSBjYXRjaChlKXsKICAgICAgICBpZihoZWFkKW5vdGlmeSgpOwogICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDsKICAgICAgICB0aHJvdyBlOwogICAgICB9CiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7CiAgICBpZihwYXJlbnQpcGFyZW50LmVudGVyKCk7CiAgfTsKCiAgLy8gTm9kZS5qcwogIGlmKGlzTm9kZSl7CiAgICBub3RpZnkgPSBmdW5jdGlvbigpewogICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTsKICAgIH07CiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyCiAgfSBlbHNlIGlmKE9ic2VydmVyKXsKICAgIHZhciB0b2dnbGUgPSB0cnVlCiAgICAgICwgbm9kZSAgID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpOwogICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICBub3RpZnkgPSBmdW5jdGlvbigpewogICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlOwogICAgfTsKICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZQogIH0gZWxzZSBpZihQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSl7CiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpOwogICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTsKICAgIH07CiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjoKICAvLyAtIHNldEltbWVkaWF0ZQogIC8vIC0gTWVzc2FnZUNoYW5uZWwKICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnCiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2UKICAvLyAtIHNldFRpbWVvdXQKICB9IGVsc2UgewogICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKQogICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTsKICAgIH07CiAgfQoKICByZXR1cm4gZnVuY3Rpb24oZm4pewogICAgdmFyIHRhc2sgPSB7Zm46IGZuLCBuZXh0OiB1bmRlZmluZWR9OwogICAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrOwogICAgaWYoIWhlYWQpewogICAgICBoZWFkID0gdGFzazsKICAgICAgbm90aWZ5KCk7CiAgICB9IGxhc3QgPSB0YXNrOwogIH07Cn07Cn0seyIuL19jb2YiOjQxLCIuL19nbG9iYWwiOjUzLCIuL190YXNrIjo5Nn1dLDczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pCnZhciBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJykKICAsIGdPUFMgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKQogICwgcElFICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykKICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpCiAgLCAkYXNzaWduICA9IE9iamVjdC5hc3NpZ247CgovLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZykKbW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgdmFyIEEgPSB7fQogICAgLCBCID0ge30KICAgICwgUyA9IFN5bWJvbCgpCiAgICAsIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnOwogIEFbU10gPSA3OwogIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oayl7IEJba10gPSBrOyB9KTsKICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSzsKfSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgdmFyIFQgICAgID0gdG9PYmplY3QodGFyZ2V0KQogICAgLCBhTGVuICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICwgaW5kZXggPSAxCiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmYKICAgICwgaXNFbnVtICAgICA9IHBJRS5mOwogIHdoaWxlKGFMZW4gPiBpbmRleCl7CiAgICB2YXIgUyAgICAgID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pCiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKQogICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCiAgICAgICwgaiAgICAgID0gMAogICAgICAsIGtleTsKICAgIHdoaWxlKGxlbmd0aCA+IGopaWYoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSlUW2tleV0gPSBTW2tleV07CiAgfSByZXR1cm4gVDsKfSA6ICRhc3NpZ247Cn0seyIuL19mYWlscyI6NTEsIi4vX2lvYmplY3QiOjU5LCIuL19vYmplY3QtZ29wcyI6ODAsIi4vX29iamVjdC1rZXlzIjo4MywiLi9fb2JqZWN0LXBpZSI6ODQsIi4vX3RvLW9iamVjdCI6MTAxfV0sNzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSkKdmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGRQcyAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpCiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKQogICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJykKICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfQogICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJzsKCi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGUKdmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpewogIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnCiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJykKICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoCiAgICAsIGx0ICAgICA9ICc8JwogICAgLCBndCAgICAgPSAnPicKICAgICwgaWZyYW1lRG9jdW1lbnQ7CiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7CiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybAogIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7CiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpOwogIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7CiAgaWZyYW1lRG9jdW1lbnQub3BlbigpOwogIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTsKICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpOwogIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GOwogIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTsKICByZXR1cm4gY3JlYXRlRGljdCgpOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKXsKICB2YXIgcmVzdWx0OwogIGlmKE8gIT09IG51bGwpewogICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pOwogICAgcmVzdWx0ID0gbmV3IEVtcHR5OwogICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7CiAgICAvLyBhZGQgIl9fcHJvdG9fXyIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbAogICAgcmVzdWx0W0lFX1BST1RPXSA9IE87CiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTsKICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7Cn07Cgp9LHsiLi9fYW4tb2JqZWN0IjozOCwiLi9fZG9tLWNyZWF0ZSI6NDcsIi4vX2VudW0tYnVnLWtleXMiOjQ4LCIuL19odG1sIjo1NiwiLi9fb2JqZWN0LWRwcyI6NzYsIi4vX3NoYXJlZC1rZXkiOjkyfV0sNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpCiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKCmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXsKICBhbk9iamVjdChPKTsKICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7CiAgYW5PYmplY3QoQXR0cmlidXRlcyk7CiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHsKICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9CiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7CiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlOwogIHJldHVybiBPOwp9Owp9LHsiLi9fYW4tb2JqZWN0IjozOCwiLi9fZGVzY3JpcHRvcnMiOjQ2LCIuL19pZTgtZG9tLWRlZmluZSI6NTcsIi4vX3RvLXByaW1pdGl2ZSI6MTAyfV0sNzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZFAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpOwoKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpewogIGFuT2JqZWN0KE8pOwogIHZhciBrZXlzICAgPSBnZXRLZXlzKFByb3BlcnRpZXMpCiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCiAgICAsIGkgPSAwCiAgICAsIFA7CiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pOwogIHJldHVybiBPOwp9Owp9LHsiLi9fYW4tb2JqZWN0IjozOCwiLi9fZGVzY3JpcHRvcnMiOjQ2LCIuL19vYmplY3QtZHAiOjc1LCIuL19vYmplY3Qta2V5cyI6ODN9XSw3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKQogICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJykKICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJykKICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsKCmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApewogIE8gPSB0b0lPYmplY3QoTyk7CiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpOwogIGlmKElFOF9ET01fREVGSU5FKXRyeSB7CiAgICByZXR1cm4gZ09QRChPLCBQKTsKICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9CiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTsKfTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjo0NiwiLi9faGFzIjo1NCwiLi9faWU4LWRvbS1kZWZpbmUiOjU3LCIuL19vYmplY3QtcGllIjo4NCwiLi9fcHJvcGVydHktZGVzYyI6ODYsIi4vX3RvLWlvYmplY3QiOjk5LCIuL190by1wcmltaXRpdmUiOjEwMn1dLDc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvdwp2YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCBnT1BOICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYKICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nOwoKdmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMKICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTsKCnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uKGl0KXsKICB0cnkgewogICAgcmV0dXJuIGdPUE4oaXQpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7CiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTsKfTsKCn0seyIuL19vYmplY3QtZ29wbiI6NzksIi4vX3RvLWlvYmplY3QiOjk5fV0sNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pCnZhciAka2V5cyAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKQogICwgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTsKCmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7CiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpOwp9Owp9LHsiLi9fZW51bS1idWcta2V5cyI6NDgsIi4vX29iamVjdC1rZXlzLWludGVybmFsIjo4Mn1dLDgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczsKfSx7fV0sODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKQp2YXIgaGFzICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJykKICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTsKCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKE8pewogIE8gPSB0b09iamVjdChPKTsKICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTsKICBpZih0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKXsKICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTsKICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsOwp9Owp9LHsiLi9faGFzIjo1NCwiLi9fc2hhcmVkLWtleSI6OTIsIi4vX3RvLW9iamVjdCI6MTAxfV0sODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsIHRvSU9iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSkKICAsIElFX1BST1RPICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7CiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpCiAgICAsIGkgICAgICA9IDAKICAgICwgcmVzdWx0ID0gW10KICAgICwga2V5OwogIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTsKICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzCiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpewogICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTsKICB9CiAgcmV0dXJuIHJlc3VsdDsKfTsKfSx7Ii4vX2FycmF5LWluY2x1ZGVzIjozOSwiLi9faGFzIjo1NCwiLi9fc2hhcmVkLWtleSI6OTIsIi4vX3RvLWlvYmplY3QiOjk5fV0sODM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTykKdmFyICRrZXlzICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKQogICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7CiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTsKfTsKfSx7Ii4vX2VudW0tYnVnLWtleXMiOjQ4LCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6ODJ9XSw4NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlOwp9LHt9XSw4NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlcwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi9fY29yZScpCiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpewogIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV0KICAgICwgZXhwID0ge307CiAgZXhwW0tFWV0gPSBleGVjKGZuKTsKICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7Cn07Cn0seyIuL19jb3JlIjo0MiwiLi9fZXhwb3J0Ijo1MCwiLi9fZmFpbHMiOjUxfV0sODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpewogIHJldHVybiB7CiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksCiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksCiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksCiAgICB2YWx1ZSAgICAgICA6IHZhbHVlCiAgfTsKfTsKfSx7fV0sODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7CiAgZm9yKHZhciBrZXkgaW4gc3JjKXsKICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTsKICAgIGVsc2UgaGlkZSh0YXJnZXQsIGtleSwgc3JjW2tleV0pOwogIH0gcmV0dXJuIHRhcmdldDsKfTsKfSx7Ii4vX2hpZGUiOjU1fV0sODg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTsKfSx7Ii4vX2hpZGUiOjU1fV0sODk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy4KLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi8KdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7CnZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXsKICBhbk9iamVjdChPKTsKICBpZighaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKXRocm93IFR5cGVFcnJvcihwcm90byArICI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhIik7Cn07Cm1vZHVsZS5leHBvcnRzID0gewogIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgIGZ1bmN0aW9uKHRlc3QsIGJ1Z2d5LCBzZXQpewogICAgICB0cnkgewogICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTsKICAgICAgICBzZXQodGVzdCwgW10pOwogICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpOwogICAgICB9IGNhdGNoKGUpeyBidWdneSA9IHRydWU7IH0KICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXsKICAgICAgICBjaGVjayhPLCBwcm90byk7CiAgICAgICAgaWYoYnVnZ3kpTy5fX3Byb3RvX18gPSBwcm90bzsKICAgICAgICBlbHNlIHNldChPLCBwcm90byk7CiAgICAgICAgcmV0dXJuIE87CiAgICAgIH07CiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLAogIGNoZWNrOiBjaGVjawp9Owp9LHsiLi9fYW4tb2JqZWN0IjozOCwiLi9fY3R4Ijo0NCwiLi9faXMtb2JqZWN0Ijo2MiwiLi9fb2JqZWN0LWdvcGQiOjc3fV0sOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQogICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpCiAgLCBTUEVDSUVTICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7CiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTsKICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywgewogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfQogIH0pOwp9Owp9LHsiLi9fY29yZSI6NDIsIi4vX2Rlc2NyaXB0b3JzIjo0NiwiLi9fZ2xvYmFsIjo1MywiLi9fb2JqZWN0LWRwIjo3NSwiLi9fd2tzIjoxMDZ9XSw5MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mCiAgLCBoYXMgPSByZXF1aXJlKCcuL19oYXMnKQogICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpewogIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTsKfTsKfSx7Ii4vX2hhcyI6NTQsIi4vX29iamVjdC1kcCI6NzUsIi4vX3drcyI6MTA2fV0sOTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKQogICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXsKICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpOwp9Owp9LHsiLi9fc2hhcmVkIjo5MywiLi9fdWlkIjoxMDN9XSw5MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXycKICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpewogIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pOwp9Owp9LHsiLi9fZ2xvYmFsIjo1M31dLDk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpCnZhciBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCBTUEVDSUVTICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpewogIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3IsIFM7CiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpOwp9Owp9LHsiLi9fYS1mdW5jdGlvbiI6MzUsIi4vX2FuLW9iamVjdCI6MzgsIi4vX3drcyI6MTA2fV0sOTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpCiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7Ci8vIHRydWUgIC0+IFN0cmluZyNhdAovLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXQKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpewogIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3MpewogICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSkKICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcykKICAgICAgLCBsID0gcy5sZW5ndGgKICAgICAgLCBhLCBiOwogICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDsKICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7CiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZgogICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYQogICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDsKICB9Owp9Owp9LHsiLi9fZGVmaW5lZCI6NDUsIi4vX3RvLWludGVnZXIiOjk4fV0sOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY3R4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGludm9rZSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpCiAgLCBodG1sICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19odG1sJykKICAsIGNlbCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKQogICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzCiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlCiAgLCBjbGVhclRhc2sgICAgICAgICAgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGUKICAsIE1lc3NhZ2VDaGFubmVsICAgICA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbAogICwgY291bnRlciAgICAgICAgICAgID0gMAogICwgcXVldWUgICAgICAgICAgICAgID0ge30KICAsIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnCiAgLCBkZWZlciwgY2hhbm5lbCwgcG9ydDsKdmFyIHJ1biA9IGZ1bmN0aW9uKCl7CiAgdmFyIGlkID0gK3RoaXM7CiAgaWYocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKXsKICAgIHZhciBmbiA9IHF1ZXVlW2lkXTsKICAgIGRlbGV0ZSBxdWV1ZVtpZF07CiAgICBmbigpOwogIH0KfTsKdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpewogIHJ1bi5jYWxsKGV2ZW50LmRhdGEpOwp9OwovLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6CmlmKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spewogIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pewogICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7CiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pOwogICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uKCl7CiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTsKICAgIH07CiAgICBkZWZlcihjb3VudGVyKTsKICAgIHJldHVybiBjb3VudGVyOwogIH07CiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpewogICAgZGVsZXRlIHF1ZXVlW2lkXTsKICB9OwogIC8vIE5vZGUuanMgMC44LQogIGlmKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7CiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXsKICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpOwogICAgfTsKICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzCiAgfSBlbHNlIGlmKE1lc3NhZ2VDaGFubmVsKXsKICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7CiAgICBwb3J0ICAgID0gY2hhbm5lbC5wb3J0MjsKICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7CiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTsKICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnMKICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0JwogIH0gZWxzZSBpZihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpewogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7CiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpOwogICAgfTsKICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTsKICAvLyBJRTgtCiAgfSBlbHNlIGlmKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKXsKICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpewogICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbigpewogICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7CiAgICAgICAgcnVuLmNhbGwoaWQpOwogICAgICB9OwogICAgfTsKICAvLyBSZXN0IG9sZCBicm93c2VycwogIH0gZWxzZSB7CiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXsKICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApOwogICAgfTsKICB9Cn0KbW9kdWxlLmV4cG9ydHMgPSB7CiAgc2V0OiAgIHNldFRhc2ssCiAgY2xlYXI6IGNsZWFyVGFzawp9Owp9LHsiLi9fY29mIjo0MSwiLi9fY3R4Ijo0NCwiLi9fZG9tLWNyZWF0ZSI6NDcsIi4vX2dsb2JhbCI6NTMsIi4vX2h0bWwiOjU2LCIuL19pbnZva2UiOjU4fV0sOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpCiAgLCBtYXggICAgICAgPSBNYXRoLm1heAogICwgbWluICAgICAgID0gTWF0aC5taW47Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7CiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpOwogIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpOwp9Owp9LHsiLi9fdG8taW50ZWdlciI6OTh9XSw5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMS40IFRvSW50ZWdlcgp2YXIgY2VpbCAgPSBNYXRoLmNlaWwKICAsIGZsb29yID0gTWF0aC5mbG9vcjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7Cn07Cn0se31dLDk5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzCnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpCiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7Cn07Cn0seyIuL19kZWZpbmVkIjo0NSwiLi9faW9iamVjdCI6NTl9XSwxMDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjEuMTUgVG9MZW5ndGgKdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKQogICwgbWluICAgICAgID0gTWF0aC5taW47Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxCn07Cn0seyIuL190by1pbnRlZ2VyIjo5OH1dLDEwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudCkKdmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpOwp9Owp9LHsiLi9fZGVmaW5lZCI6NDV9XSwxMDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSkKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7Ci8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlCi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpewogIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0OwogIHZhciBmbiwgdmFsOwogIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDsKICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7CiAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDsKICB0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZSIpOwp9Owp9LHsiLi9faXMtb2JqZWN0Ijo2Mn1dLDEwMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBpZCA9IDAKICAsIHB4ID0gTWF0aC5yYW5kb20oKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpewogIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7Cn07Cn0se31dLDEwNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBjb3JlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKQogICwgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JykKICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpCiAgLCBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7CiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTsKICBpZihuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKWRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHt2YWx1ZTogd2tzRXh0LmYobmFtZSl9KTsKfTsKfSx7Ii4vX2NvcmUiOjQyLCIuL19nbG9iYWwiOjUzLCIuL19saWJyYXJ5Ijo3MCwiLi9fb2JqZWN0LWRwIjo3NSwiLi9fd2tzLWV4dCI6MTA1fV0sMTA1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7Cn0seyIuL193a3MiOjEwNn1dLDEwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBzdG9yZSAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpCiAgLCB1aWQgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJykKICAsIFN5bWJvbCAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2wKICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7Cgp2YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpewogIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPQogICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTsKfTsKCiRleHBvcnRzLnN0b3JlID0gc3RvcmU7Cn0seyIuL19nbG9iYWwiOjUzLCIuL19zaGFyZWQiOjkzLCIuL191aWQiOjEwM31dLDEwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsIElURVJBVE9SICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpCiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCl7CiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl0KICAgIHx8IGl0WydAQGl0ZXJhdG9yJ10KICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07Cn07Cn0seyIuL19jbGFzc29mIjo0MCwiLi9fY29yZSI6NDIsIi4vX2l0ZXJhdG9ycyI6NjgsIi4vX3drcyI6MTA2fV0sMTA4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgY3R4ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgY2FsbCAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKQogICwgaXNBcnJheUl0ZXIgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJykKICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5JykKICAsIGdldEl0ZXJGbiAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24oaXRlcil7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKQogIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlLyosIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKi8pewogICAgdmFyIE8gICAgICAgPSB0b09iamVjdChhcnJheUxpa2UpCiAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkKICAgICAgLCBhTGVuICAgID0gYXJndW1lbnRzLmxlbmd0aAogICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZAogICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkCiAgICAgICwgaW5kZXggICA9IDAKICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pCiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yOwogICAgaWYobWFwcGluZyltYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpOwogICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlCiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7CiAgICAgIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQzsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKXsKICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTsKICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXsKICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTsKICAgICAgfQogICAgfQogICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4OwogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwoKfSx7Ii4vX2NyZWF0ZS1wcm9wZXJ0eSI6NDMsIi4vX2N0eCI6NDQsIi4vX2V4cG9ydCI6NTAsIi4vX2lzLWFycmF5LWl0ZXIiOjYwLCIuL19pdGVyLWNhbGwiOjYzLCIuL19pdGVyLWRldGVjdCI6NjYsIi4vX3RvLWxlbmd0aCI6MTAwLCIuL190by1vYmplY3QiOjEwMSwiLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QiOjEwN31dLDEwOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKQogICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpCiAgLCBJdGVyYXRvcnMgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJykKICAsIHRvSU9iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7CgovLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpCi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpCi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKCkKLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpewogIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXQKICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleAogIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kCi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKQp9LCBmdW5jdGlvbigpewogIHZhciBPICAgICA9IHRoaXMuX3QKICAgICwga2luZCAgPSB0aGlzLl9rCiAgICAsIGluZGV4ID0gdGhpcy5faSsrOwogIGlmKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKXsKICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7CiAgICByZXR1cm4gc3RlcCgxKTsKICB9CiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7CiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7CiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pOwp9LCAndmFsdWVzJyk7CgovLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpCkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7CgphZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7CmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpOwphZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjM2LCIuL19pdGVyLWRlZmluZSI6NjUsIi4vX2l0ZXItc3RlcCI6NjcsIi4vX2l0ZXJhdG9ycyI6NjgsIi4vX3RvLWlvYmplY3QiOjk5fV0sMTEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0Jywge2Fzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpfSk7Cn0seyIuL19leHBvcnQiOjUwLCIuL19vYmplY3QtYXNzaWduIjo3M31dLDExMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pCiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2NyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpfSk7Cn0seyIuL19leHBvcnQiOjUwLCIuL19vYmplY3QtY3JlYXRlIjo3NH1dLDExMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7Ci8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZ9KTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjo0NiwiLi9fZXhwb3J0Ijo1MCwiLi9fb2JqZWN0LWRwIjo3NX1dLDExMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkKdmFyIHRvSU9iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXsKICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7CiAgfTsKfSk7Cn0seyIuL19vYmplY3QtZ29wZCI6NzcsIi4vX29iamVjdC1zYXAiOjg1LCIuL190by1pb2JqZWN0Ijo5OX1dLDExNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKQp2YXIgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpewogIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7CiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7CiAgfTsKfSk7Cn0seyIuL19vYmplY3QtZ3BvIjo4MSwiLi9fb2JqZWN0LXNhcCI6ODUsIi4vX3RvLW9iamVjdCI6MTAxfV0sMTE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbigkaXNGcm96ZW4pewogIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCl7CiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTsKICB9Owp9KTsKfSx7Ii4vX2lzLW9iamVjdCI6NjIsIi4vX29iamVjdC1zYXAiOjg1fV0sMTE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pCnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCAka2V5cyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigpewogIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXsKICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpOwogIH07Cn0pOwp9LHsiLi9fb2JqZWN0LWtleXMiOjgzLCIuL19vYmplY3Qtc2FwIjo4NSwiLi9fdG8tb2JqZWN0IjoxMDF9XSwxMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0fSk7Cn0seyIuL19leHBvcnQiOjUwLCIuL19zZXQtcHJvdG8iOjg5fV0sMTE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKCn0se31dLDExOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIExJQlJBUlkgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKQogICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpCiAgLCBjbGFzc29mICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBpc09iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgYUZ1bmN0aW9uICAgICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCBhbkluc3RhbmNlICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCBmb3JPZiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKQogICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpCiAgLCB0YXNrICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190YXNrJykuc2V0CiAgLCBtaWNyb3Rhc2sgICAgICAgICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpCiAgLCBQUk9NSVNFICAgICAgICAgICAgPSAnUHJvbWlzZScKICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3IKICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzCiAgLCAkUHJvbWlzZSAgICAgICAgICAgPSBnbG9iYWxbUFJPTUlTRV0KICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzCiAgLCBpc05vZGUgICAgICAgICAgICAgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJwogICwgZW1wdHkgICAgICAgICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfQogICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjsKCnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbigpewogIHRyeSB7CiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnQKICAgIHZhciBwcm9taXNlICAgICA9ICRQcm9taXNlLnJlc29sdmUoMSkKICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24oZXhlYyl7IGV4ZWMoZW1wdHksIGVtcHR5KTsgfTsKICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3QKICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlOwogIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0KfSgpOwoKLy8gaGVscGVycwp2YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYil7CiAgLy8gd2l0aCBsaWJyYXJ5IHdyYXBwZXIgc3BlY2lhbCBjYXNlCiAgcmV0dXJuIGEgPT09IGIgfHwgYSA9PT0gJFByb21pc2UgJiYgYiA9PT0gV3JhcHBlcjsKfTsKdmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbihpdCl7CiAgdmFyIHRoZW47CiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlOwp9Owp2YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXsKICByZXR1cm4gc2FtZUNvbnN0cnVjdG9yKCRQcm9taXNlLCBDKQogICAgPyBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQykKICAgIDogbmV3IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTsKfTsKdmFyIFByb21pc2VDYXBhYmlsaXR5ID0gR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7CiAgdmFyIHJlc29sdmUsIHJlamVjdDsKICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbigkJHJlc29sdmUsICQkcmVqZWN0KXsKICAgIGlmKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7CiAgICByZXNvbHZlID0gJCRyZXNvbHZlOwogICAgcmVqZWN0ICA9ICQkcmVqZWN0OwogIH0pOwogIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTsKICB0aGlzLnJlamVjdCAgPSBhRnVuY3Rpb24ocmVqZWN0KTsKfTsKdmFyIHBlcmZvcm0gPSBmdW5jdGlvbihleGVjKXsKICB0cnkgewogICAgZXhlYygpOwogIH0gY2F0Y2goZSl7CiAgICByZXR1cm4ge2Vycm9yOiBlfTsKICB9Cn07CnZhciBub3RpZnkgPSBmdW5jdGlvbihwcm9taXNlLCBpc1JlamVjdCl7CiAgaWYocHJvbWlzZS5fbilyZXR1cm47CiAgcHJvbWlzZS5fbiA9IHRydWU7CiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYzsKICBtaWNyb3Rhc2soZnVuY3Rpb24oKXsKICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3YKICAgICAgLCBvayAgICA9IHByb21pc2UuX3MgPT0gMQogICAgICAsIGkgICAgID0gMDsKICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbil7CiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWwKICAgICAgICAsIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlCiAgICAgICAgLCByZWplY3QgID0gcmVhY3Rpb24ucmVqZWN0CiAgICAgICAgLCBkb21haW4gID0gcmVhY3Rpb24uZG9tYWluCiAgICAgICAgLCByZXN1bHQsIHRoZW47CiAgICAgIHRyeSB7CiAgICAgICAgaWYoaGFuZGxlcil7CiAgICAgICAgICBpZighb2spewogICAgICAgICAgICBpZihwcm9taXNlLl9oID09IDIpb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7CiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxOwogICAgICAgICAgfQogICAgICAgICAgaWYoaGFuZGxlciA9PT0gdHJ1ZSlyZXN1bHQgPSB2YWx1ZTsKICAgICAgICAgIGVsc2UgewogICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmVudGVyKCk7CiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOwogICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmV4aXQoKTsKICAgICAgICAgIH0KICAgICAgICAgIGlmKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSl7CiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7CiAgICAgICAgICB9IGVsc2UgaWYodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSl7CiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpOwogICAgICB9IGNhdGNoKGUpewogICAgICAgIHJlamVjdChlKTsKICAgICAgfQogICAgfTsKICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaAogICAgcHJvbWlzZS5fYyA9IFtdOwogICAgcHJvbWlzZS5fbiA9IGZhbHNlOwogICAgaWYoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpb25VbmhhbmRsZWQocHJvbWlzZSk7CiAgfSk7Cn07CnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2UpewogIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7CiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92CiAgICAgICwgYWJydXB0LCBoYW5kbGVyLCBjb25zb2xlOwogICAgaWYoaXNVbmhhbmRsZWQocHJvbWlzZSkpewogICAgICBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7CiAgICAgICAgaWYoaXNOb2RlKXsKICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpOwogICAgICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKXsKICAgICAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWV9KTsKICAgICAgICB9IGVsc2UgaWYoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcil7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGQKICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxOwogICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkOwogICAgaWYoYWJydXB0KXRocm93IGFicnVwdC5lcnJvcjsKICB9KTsKfTsKdmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7CiAgaWYocHJvbWlzZS5faCA9PSAxKXJldHVybiBmYWxzZTsKICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2MKICAgICwgaSAgICAgPSAwCiAgICAsIHJlYWN0aW9uOwogIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpewogICAgcmVhY3Rpb24gPSBjaGFpbltpKytdOwogICAgaWYocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpcmV0dXJuIGZhbHNlOwogIH0gcmV0dXJuIHRydWU7Cn07CnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2UpewogIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7CiAgICB2YXIgaGFuZGxlcjsKICAgIGlmKGlzTm9kZSl7CiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpOwogICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKXsKICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92fSk7CiAgICB9CiAgfSk7Cn07CnZhciAkcmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpewogIHZhciBwcm9taXNlID0gdGhpczsKICBpZihwcm9taXNlLl9kKXJldHVybjsKICBwcm9taXNlLl9kID0gdHJ1ZTsKICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXAKICBwcm9taXNlLl92ID0gdmFsdWU7CiAgcHJvbWlzZS5fcyA9IDI7CiAgaWYoIXByb21pc2UuX2EpcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTsKICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7Cn07CnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKXsKICB2YXIgcHJvbWlzZSA9IHRoaXMKICAgICwgdGhlbjsKICBpZihwcm9taXNlLl9kKXJldHVybjsKICBwcm9taXNlLl9kID0gdHJ1ZTsKICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXAKICB0cnkgewogICAgaWYocHJvbWlzZSA9PT0gdmFsdWUpdGhyb3cgVHlwZUVycm9yKCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZiIpOwogICAgaWYodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKXsKICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIHdyYXBwZXIgPSB7X3c6IHByb21pc2UsIF9kOiBmYWxzZX07IC8vIHdyYXAKICAgICAgICB0cnkgewogICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpOwogICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTsKICAgICAgcHJvbWlzZS5fcyA9IDE7CiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7CiAgICB9CiAgfSBjYXRjaChlKXsKICAgICRyZWplY3QuY2FsbCh7X3c6IHByb21pc2UsIF9kOiBmYWxzZX0sIGUpOyAvLyB3cmFwCiAgfQp9OwoKLy8gY29uc3RydWN0b3IgcG9seWZpbGwKaWYoIVVTRV9OQVRJVkUpewogIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpCiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXsKICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpOwogICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTsKICAgIEludGVybmFsLmNhbGwodGhpcyk7CiAgICB0cnkgewogICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpOwogICAgfSBjYXRjaChlcnIpewogICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTsKICAgIH0KICB9OwogIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7CiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9ucwogICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9ucwogICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZQogICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lCiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlCiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkCiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeQogIH07CiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7CiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKQogICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCl7CiAgICAgIHZhciByZWFjdGlvbiAgICA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpOwogICAgICByZWFjdGlvbi5vayAgICAgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTsKICAgICAgcmVhY3Rpb24uZmFpbCAgID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkOwogICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDsKICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTsKICAgICAgaWYodGhpcy5fYSl0aGlzLl9hLnB1c2gocmVhY3Rpb24pOwogICAgICBpZih0aGlzLl9zKW5vdGlmeSh0aGlzLCBmYWxzZSk7CiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlOwogICAgfSwKICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpCiAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKXsKICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpOwogICAgfQogIH0pOwogIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oKXsKICAgIHZhciBwcm9taXNlICA9IG5ldyBJbnRlcm5hbDsKICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7CiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpOwogICAgdGhpcy5yZWplY3QgID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpOwogIH07Cn0KCiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtQcm9taXNlOiAkUHJvbWlzZX0pOwpyZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTsKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTsKV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTsKCi8vIHN0YXRpY3MKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwgewogIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpCiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocil7CiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpCiAgICAgICwgJCRyZWplY3QgICA9IGNhcGFiaWxpdHkucmVqZWN0OwogICAgJCRyZWplY3Qocik7CiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOwogIH0KfSk7CiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7CiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpCiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXsKICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmUKICAgIGlmKHggaW5zdGFuY2VvZiAkUHJvbWlzZSAmJiBzYW1lQ29uc3RydWN0b3IoeC5jb25zdHJ1Y3RvciwgdGhpcykpcmV0dXJuIHg7CiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpCiAgICAgICwgJCRyZXNvbHZlICA9IGNhcGFiaWxpdHkucmVzb2x2ZTsKICAgICQkcmVzb2x2ZSh4KTsKICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CiAgfQp9KTsKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsKICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpOwp9KSksIFBST01JU0UsIHsKICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSkKICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSl7CiAgICB2YXIgQyAgICAgICAgICA9IHRoaXMKICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQykKICAgICAgLCByZXNvbHZlICAgID0gY2FwYWJpbGl0eS5yZXNvbHZlCiAgICAgICwgcmVqZWN0ICAgICA9IGNhcGFiaWxpdHkucmVqZWN0OwogICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXsKICAgICAgdmFyIHZhbHVlcyAgICA9IFtdCiAgICAgICAgLCBpbmRleCAgICAgPSAwCiAgICAgICAgLCByZW1haW5pbmcgPSAxOwogICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2UpewogICAgICAgIHZhciAkaW5kZXggICAgICAgID0gaW5kZXgrKwogICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7CiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTsKICAgICAgICByZW1haW5pbmcrKzsKICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgICBpZihhbHJlYWR5Q2FsbGVkKXJldHVybjsKICAgICAgICAgIGFscmVhZHlDYWxsZWQgID0gdHJ1ZTsKICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7CiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7CiAgICAgICAgfSwgcmVqZWN0KTsKICAgICAgfSk7CiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTsKICAgIH0pOwogICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpOwogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKICB9LAogIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSkKICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKXsKICAgIHZhciBDICAgICAgICAgID0gdGhpcwogICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKQogICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDsKICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7CiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7CiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpOwogICAgICB9KTsKICAgIH0pOwogICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpOwogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKICB9Cn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MzUsIi4vX2FuLWluc3RhbmNlIjozNywiLi9fY2xhc3NvZiI6NDAsIi4vX2NvcmUiOjQyLCIuL19jdHgiOjQ0LCIuL19leHBvcnQiOjUwLCIuL19mb3Itb2YiOjUyLCIuL19nbG9iYWwiOjUzLCIuL19pcy1vYmplY3QiOjYyLCIuL19pdGVyLWRldGVjdCI6NjYsIi4vX2xpYnJhcnkiOjcwLCIuL19taWNyb3Rhc2siOjcyLCIuL19yZWRlZmluZS1hbGwiOjg3LCIuL19zZXQtc3BlY2llcyI6OTAsIi4vX3NldC10by1zdHJpbmctdGFnIjo5MSwiLi9fc3BlY2llcy1jb25zdHJ1Y3RvciI6OTQsIi4vX3Rhc2siOjk2LCIuL193a3MiOjEwNn1dLDEyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRhdCAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTsKCi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKCkKcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7CiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldAogIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4Ci8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KCkKfSwgZnVuY3Rpb24oKXsKICB2YXIgTyAgICAgPSB0aGlzLl90CiAgICAsIGluZGV4ID0gdGhpcy5faQogICAgLCBwb2ludDsKICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9OwogIHBvaW50ID0gJGF0KE8sIGluZGV4KTsKICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDsKICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9Owp9KTsKfSx7Ii4vX2l0ZXItZGVmaW5lIjo2NSwiLi9fc3RyaW5nLWF0Ijo5NX1dLDEyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbQp2YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpCiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJykKICAsIE1FVEEgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWQogICwgJGZhaWxzICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBzaGFyZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpCiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykKICAsIHVpZCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJykKICAsIHdrcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykKICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpCiAgLCB3a3NEZWZpbmUgICAgICA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKQogICwga2V5T2YgICAgICAgICAgPSByZXF1aXJlKCcuL19rZXlvZicpCiAgLCBlbnVtS2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpCiAgLCBpc0FycmF5ICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JykKICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKQogICwgX2NyZWF0ZSAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykKICAsIGdPUE5FeHQgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykKICAsICRHT1BEICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICwgJERQICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICwgJGtleXMgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpCiAgLCBnT1BEICAgICAgICAgICA9ICRHT1BELmYKICAsIGRQICAgICAgICAgICAgID0gJERQLmYKICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mCiAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2wKICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT04KICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5CiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnCiAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpCiAgLCBUT19QUklNSVRJVkUgICA9IHdrcygndG9QcmltaXRpdmUnKQogICwgaXNFbnVtICAgICAgICAgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZQogICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpCiAgLCBBbGxTeW1ib2xzICAgICA9IHNoYXJlZCgnc3ltYm9scycpCiAgLCBPUFN5bWJvbHMgICAgICA9IHNoYXJlZCgnb3Atc3ltYm9scycpCiAgLCBPYmplY3RQcm90byAgICA9IE9iamVjdFtQUk9UT1RZUEVdCiAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicKICAsIFFPYmplY3QgICAgICAgID0gZ2xvYmFsLlFPYmplY3Q7Ci8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3Mwp2YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDsKCi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4Nwp2YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpewogIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHsKICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIGRQKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfQogIH0pKS5hICE9IDc7Cn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7CiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7CiAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldOwogIGRQKGl0LCBrZXksIEQpOwogIGlmKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTsKfSA6IGRQOwoKdmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpewogIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7CiAgc3ltLl9rID0gdGFnOwogIHJldHVybiBzeW07Cn07Cgp2YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24oaXQpewogIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7Cn0gOiBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDsKfTsKCnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKXsKICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTsKICBhbk9iamVjdChpdCk7CiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTsKICBhbk9iamVjdChEKTsKICBpZihoYXMoQWxsU3ltYm9scywga2V5KSl7CiAgICBpZighRC5lbnVtZXJhYmxlKXsKICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7CiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7CiAgICB9IGVsc2UgewogICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlOwogICAgICBEID0gX2NyZWF0ZShELCB7ZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSl9KTsKICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7CiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7Cn07CnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApewogIGFuT2JqZWN0KGl0KTsKICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpCiAgICAsIGkgICAgPSAwCiAgICAsIGwgPSBrZXlzLmxlbmd0aAogICAgLCBrZXk7CiAgd2hpbGUobCA+IGkpJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7CiAgcmV0dXJuIGl0Owp9Owp2YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCl7CiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApOwp9Owp2YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KXsKICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpOwogIGlmKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybiBmYWxzZTsKICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpewogIGl0ICA9IHRvSU9iamVjdChpdCk7CiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTsKICBpZihpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuOwogIHZhciBEID0gZ09QRChpdCwga2V5KTsKICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTsKICByZXR1cm4gRDsKfTsKdmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7CiAgdmFyIG5hbWVzICA9IGdPUE4odG9JT2JqZWN0KGl0KSkKICAgICwgcmVzdWx0ID0gW10KICAgICwgaSAgICAgID0gMAogICAgLCBrZXk7CiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7CiAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTsKICB9IHJldHVybiByZXN1bHQ7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXsKICB2YXIgSVNfT1AgID0gaXQgPT09IE9iamVjdFByb3RvCiAgICAsIG5hbWVzICA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKQogICAgLCByZXN1bHQgPSBbXQogICAgLCBpICAgICAgPSAwCiAgICAsIGtleTsKICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXsKICAgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pOwogIH0gcmV0dXJuIHJlc3VsdDsKfTsKCi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKQppZighVVNFX05BVElWRSl7CiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpewogICAgaWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7CiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsKICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpewogICAgICBpZih0aGlzID09PSBPYmplY3RQcm90bykkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7CiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTsKICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTsKICAgIH07CiAgICBpZihERVNDUklQVE9SUyAmJiBzZXR0ZXIpc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXR9KTsKICAgIHJldHVybiB3cmFwKHRhZyk7CiAgfTsKICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICByZXR1cm4gdGhpcy5fazsKICB9KTsKCiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CiAgJERQLmYgICA9ICRkZWZpbmVQcm9wZXJ0eTsKICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lczsKICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiAgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7CiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9sczsKCiAgaWYoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSl7CiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTsKICB9CgogIHdrc0V4dC5mID0gZnVuY3Rpb24obmFtZSl7CiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpOwogIH0KfQoKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1N5bWJvbDogJFN5bWJvbH0pOwoKZm9yKHZhciBzeW1ib2xzID0gKAogIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0CiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJwopLnNwbGl0KCcsJyksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3Moc3ltYm9sc1tpKytdKTsKCmZvcih2YXIgc3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3NEZWZpbmUoc3ltYm9sc1tpKytdKTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7CiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpCiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7CiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpCiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XQogICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7CiAgfSwKICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSkKICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpewogICAgaWYoaXNTeW1ib2woa2V5KSlyZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7CiAgICB0aHJvdyBUeXBlRXJyb3Ioa2V5ICsgJyBpcyBub3QgYSBzeW1ib2whJyk7CiAgfSwKICB1c2VTZXR0ZXI6IGZ1bmN0aW9uKCl7IHNldHRlciA9IHRydWU7IH0sCiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfQp9KTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7CiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKQogIGNyZWF0ZTogJGNyZWF0ZSwKICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykKICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LAogIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpCiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsCiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKQogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvciwKICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQogIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLAogIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykKICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMKfSk7CgovLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSkKJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uKCl7CiAgdmFyIFMgPSAkU3ltYm9sKCk7CiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge30KICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGwKICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9scwogIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7YTogU30pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7Cn0pKSwgJ0pTT04nLCB7CiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpewogICAgaWYoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkCiAgICB2YXIgYXJncyA9IFtpdF0KICAgICAgLCBpICAgID0gMQogICAgICAsIHJlcGxhY2VyLCAkcmVwbGFjZXI7CiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pOwogICAgcmVwbGFjZXIgPSBhcmdzWzFdOwogICAgaWYodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpJHJlcGxhY2VyID0gcmVwbGFjZXI7CiAgICBpZigkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKXJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7CiAgICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpOwogICAgICBpZighaXNTeW1ib2wodmFsdWUpKXJldHVybiB2YWx1ZTsKICAgIH07CiAgICBhcmdzWzFdID0gcmVwbGFjZXI7CiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7CiAgfQp9KTsKCi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludCkKJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7Ci8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10Kc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpOwovLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddCnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7Ci8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddCnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpOwp9LHsiLi9fYW4tb2JqZWN0IjozOCwiLi9fZGVzY3JpcHRvcnMiOjQ2LCIuL19lbnVtLWtleXMiOjQ5LCIuL19leHBvcnQiOjUwLCIuL19mYWlscyI6NTEsIi4vX2dsb2JhbCI6NTMsIi4vX2hhcyI6NTQsIi4vX2hpZGUiOjU1LCIuL19pcy1hcnJheSI6NjEsIi4vX2tleW9mIjo2OSwiLi9fbGlicmFyeSI6NzAsIi4vX21ldGEiOjcxLCIuL19vYmplY3QtY3JlYXRlIjo3NCwiLi9fb2JqZWN0LWRwIjo3NSwiLi9fb2JqZWN0LWdvcGQiOjc3LCIuL19vYmplY3QtZ29wbiI6NzksIi4vX29iamVjdC1nb3BuLWV4dCI6NzgsIi4vX29iamVjdC1nb3BzIjo4MCwiLi9fb2JqZWN0LWtleXMiOjgzLCIuL19vYmplY3QtcGllIjo4NCwiLi9fcHJvcGVydHktZGVzYyI6ODYsIi4vX3JlZGVmaW5lIjo4OCwiLi9fc2V0LXRvLXN0cmluZy10YWciOjkxLCIuL19zaGFyZWQiOjkzLCIuL190by1pb2JqZWN0Ijo5OSwiLi9fdG8tcHJpbWl0aXZlIjoxMDIsIi4vX3VpZCI6MTAzLCIuL193a3MiOjEwNiwiLi9fd2tzLWRlZmluZSI6MTA0LCIuL193a3MtZXh0IjoxMDV9XSwxMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTsKfSx7Ii4vX3drcy1kZWZpbmUiOjEwNH1dLDEyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpOwp9LHsiLi9fd2tzLWRlZmluZSI6MTA0fV0sMTI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTsKdmFyIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgSXRlcmF0b3JzICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpCiAgLCBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7Cgpmb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXsKICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldCiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV0KICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7CiAgaWYocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpOwogIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTsKfQp9LHsiLi9fZ2xvYmFsIjo1MywiLi9faGlkZSI6NTUsIi4vX2l0ZXJhdG9ycyI6NjgsIi4vX3drcyI6MTA2LCIuL2VzNi5hcnJheS5pdGVyYXRvciI6MTA5fV0sMTI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzM1XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6MzV9XSwxMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIG1zZyl7CiAgaWYodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpdGhyb3cgVHlwZUVycm9yKG1zZyk7CiAgcmV0dXJuICtpdDsKfTsKfSx7Ii4vX2NvZiI6MTQwfV0sMTI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXQp2YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKQogICwgQXJyYXlQcm90byAgPSBBcnJheS5wcm90b3R5cGU7CmlmKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZClyZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpewogIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlOwp9Owp9LHsiLi9faGlkZSI6MTYyLCIuL193a3MiOjIzOX1dLDEyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszN11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjM3fV0sMTI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzM4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2lzLW9iamVjdCI6MTcxLCJkdXAiOjM4fV0sMTMwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpCid1c2Ugc3RyaWN0JzsKdmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvSW5kZXggID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldC8qPSAwKi8sIHN0YXJ0Lyo9IDAsIGVuZCA9IEBsZW5ndGgqLyl7CiAgdmFyIE8gICAgID0gdG9PYmplY3QodGhpcykKICAgICwgbGVuICAgPSB0b0xlbmd0aChPLmxlbmd0aCkKICAgICwgdG8gICAgPSB0b0luZGV4KHRhcmdldCwgbGVuKQogICAgLCBmcm9tICA9IHRvSW5kZXgoc3RhcnQsIGxlbikKICAgICwgZW5kICAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZAogICAgLCBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKQogICAgLCBpbmMgICA9IDE7CiAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXsKICAgIGluYyAgPSAtMTsKICAgIGZyb20gKz0gY291bnQgLSAxOwogICAgdG8gICArPSBjb3VudCAtIDE7CiAgfQogIHdoaWxlKGNvdW50LS0gPiAwKXsKICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07CiAgICBlbHNlIGRlbGV0ZSBPW3RvXTsKICAgIHRvICAgKz0gaW5jOwogICAgZnJvbSArPSBpbmM7CiAgfSByZXR1cm4gTzsKfTsKfSx7Ii4vX3RvLWluZGV4IjoyMjcsIi4vX3RvLWxlbmd0aCI6MjMwLCIuL190by1vYmplY3QiOjIzMX1dLDEzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKQondXNlIHN0cmljdCc7CnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JykKICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKXsKICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhpcykKICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpCiAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICwgaW5kZXggID0gdG9JbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKQogICAgLCBlbmQgICAgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZAogICAgLCBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpOwogIHdoaWxlKGVuZFBvcyA+IGluZGV4KU9baW5kZXgrK10gPSB2YWx1ZTsKICByZXR1cm4gTzsKfTsKfSx7Ii4vX3RvLWluZGV4IjoyMjcsIi4vX3RvLWxlbmd0aCI6MjMwLCIuL190by1vYmplY3QiOjIzMX1dLDEzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyLCBJVEVSQVRPUil7CiAgdmFyIHJlc3VsdCA9IFtdOwogIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7CiAgcmV0dXJuIHJlc3VsdDsKfTsKCn0seyIuL19mb3Itb2YiOjE1OX1dLDEzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVszOV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL190by1pbmRleCI6MjI3LCIuL190by1pb2JqZWN0IjoyMjksIi4vX3RvLWxlbmd0aCI6MjMwLCJkdXAiOjM5fV0sMTM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMCAtPiBBcnJheSNmb3JFYWNoCi8vIDEgLT4gQXJyYXkjbWFwCi8vIDIgLT4gQXJyYXkjZmlsdGVyCi8vIDMgLT4gQXJyYXkjc29tZQovLyA0IC0+IEFycmF5I2V2ZXJ5Ci8vIDUgLT4gQXJyYXkjZmluZAovLyA2IC0+IEFycmF5I2ZpbmRJbmRleAp2YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKQogICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JykKICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGFzYyAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXsKICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMQogICAgLCBJU19GSUxURVIgICAgID0gVFlQRSA9PSAyCiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDMKICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNAogICAgLCBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2CiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWAogICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7CiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KXsKICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcykKICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pCiAgICAgICwgZiAgICAgID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpCiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpCiAgICAgICwgaW5kZXggID0gMAogICAgICAsIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQKICAgICAgLCB2YWwsIHJlczsKICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7CiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdOwogICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pOwogICAgICBpZihUWVBFKXsKICAgICAgICBpZihJU19NQVApcmVzdWx0W2luZGV4XSA9IHJlczsgICAgICAgICAgICAvLyBtYXAKICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7CiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZQogICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQKICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXgKICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXIKICAgICAgICB9IGVsc2UgaWYoSVNfRVZFUlkpcmV0dXJuIGZhbHNlOyAgICAgICAgICAvLyBldmVyeQogICAgICB9CiAgICB9CiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0OwogIH07Cn07Cn0seyIuL19hcnJheS1zcGVjaWVzLWNyZWF0ZSI6MTM3LCIuL19jdHgiOjE0NywiLi9faW9iamVjdCI6MTY3LCIuL190by1sZW5ndGgiOjIzMCwiLi9fdG8tb2JqZWN0IjoyMzF9XSwxMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCB0b09iamVjdCAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgSU9iamVjdCAgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCl7CiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pOwogIHZhciBPICAgICAgPSB0b09iamVjdCh0aGF0KQogICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pCiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKQogICAgLCBpbmRleCAgPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDAKICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTsKICBpZihhTGVuIDwgMilmb3IoOzspewogICAgaWYoaW5kZXggaW4gc2VsZil7CiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTsKICAgICAgaW5kZXggKz0gaTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBpbmRleCArPSBpOwogICAgaWYoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCl7CiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpOwogICAgfQogIH0KICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gc2VsZil7CiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pOwogIH0KICByZXR1cm4gbWVtbzsKfTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjEyNSwiLi9faW9iamVjdCI6MTY3LCIuL190by1sZW5ndGgiOjIzMCwiLi9fdG8tb2JqZWN0IjoyMzF9XSwxMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgaXNBcnJheSAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpCiAgLCBTUEVDSUVTICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsKXsKICB2YXIgQzsKICBpZihpc0FycmF5KG9yaWdpbmFsKSl7CiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7CiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFjawogICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7CiAgICBpZihpc09iamVjdChDKSl7CiAgICAgIEMgPSBDW1NQRUNJRVNdOwogICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7CiAgICB9CiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDOwp9Owp9LHsiLi9faXMtYXJyYXkiOjE2OSwiLi9faXMtb2JqZWN0IjoxNzEsIi4vX3drcyI6MjM5fV0sMTM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKQp2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCwgbGVuZ3RoKXsKICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpOwp9Owp9LHsiLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvciI6MTM2fV0sMTM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBpbnZva2UgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJykKICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZQogICwgZmFjdG9yaWVzICA9IHt9OwoKdmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uKEYsIGxlbiwgYXJncyl7CiAgaWYoIShsZW4gaW4gZmFjdG9yaWVzKSl7CiAgICBmb3IodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKyluW2ldID0gJ2FbJyArIGkgKyAnXSc7CiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7CiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qLCBhcmdzLi4uICovKXsKICB2YXIgZm4gICAgICAgPSBhRnVuY3Rpb24odGhpcykKICAgICwgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKICB2YXIgYm91bmQgPSBmdW5jdGlvbigvKiBhcmdzLi4uICovKXsKICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTsKICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7CiAgfTsKICBpZihpc09iamVjdChmbi5wcm90b3R5cGUpKWJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTsKICByZXR1cm4gYm91bmQ7Cn07Cn0seyIuL19hLWZ1bmN0aW9uIjoxMjUsIi4vX2ludm9rZSI6MTY2LCIuL19pcy1vYmplY3QiOjE3MX1dLDEzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0MF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb2YiOjE0MCwiLi9fd2tzIjoyMzksImR1cCI6NDB9XSwxNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDFdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo0MX1dLDE0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgY3JlYXRlICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykKICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykKICAsIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JykKICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQogICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJykKICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJykKICAsICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKQogICwgc3RlcCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKQogICwgc2V0U3BlY2llcyAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpCiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIGZhc3RLZXkgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXkKICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnOwoKdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24odGhhdCwga2V5KXsKICAvLyBmYXN0IGNhc2UKICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5OwogIGlmKGluZGV4ICE9PSAnRicpcmV0dXJuIHRoYXQuX2lbaW5kZXhdOwogIC8vIGZyb3plbiBvYmplY3QgY2FzZQogIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pewogICAgaWYoZW50cnkuayA9PSBrZXkpcmV0dXJuIGVudHJ5OwogIH0KfTsKCm1vZHVsZS5leHBvcnRzID0gewogIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXsKICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7CiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7CiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4CiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5CiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnkKICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZQogICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgfSk7CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgewogICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKCkKICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpCiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpewogICAgICAgIGZvcih2YXIgdGhhdCA9IHRoaXMsIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pewogICAgICAgICAgZW50cnkuciA9IHRydWU7CiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7CiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTsKICAgICAgICB9CiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7CiAgICAgICAgdGhhdFtTSVpFXSA9IDA7CiAgICAgIH0sCiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSkKICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpCiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpewogICAgICAgIHZhciB0aGF0ICA9IHRoaXMKICAgICAgICAgICwgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpOwogICAgICAgIGlmKGVudHJ5KXsKICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubgogICAgICAgICAgICAsIHByZXYgPSBlbnRyeS5wOwogICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07CiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTsKICAgICAgICAgIGlmKHByZXYpcHJldi5uID0gbmV4dDsKICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjsKICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7CiAgICAgICAgICBpZih0aGF0Ll9sID09IGVudHJ5KXRoYXQuX2wgPSBwcmV2OwogICAgICAgICAgdGhhdFtTSVpFXS0tOwogICAgICAgIH0gcmV0dXJuICEhZW50cnk7CiAgICAgIH0sCiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKQogICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXsKICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7CiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpCiAgICAgICAgICAsIGVudHJ5OwogICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7CiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpOwogICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5CiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSkKICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpCiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7CiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTsKICAgICAgfQogICAgfSk7CiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7CiAgICAgIGdldDogZnVuY3Rpb24oKXsKICAgICAgICByZXR1cm4gZGVmaW5lZCh0aGlzW1NJWkVdKTsKICAgICAgfQogICAgfSk7CiAgICByZXR1cm4gQzsKICB9LAogIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7CiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpCiAgICAgICwgcHJldiwgaW5kZXg7CiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnkKICAgIGlmKGVudHJ5KXsKICAgICAgZW50cnkudiA9IHZhbHVlOwogICAgLy8gY3JlYXRlIG5ldyBlbnRyeQogICAgfSBlbHNlIHsKICAgICAgdGhhdC5fbCA9IGVudHJ5ID0gewogICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleAogICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXkKICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWUKICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnkKICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeQogICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkCiAgICAgIH07CiAgICAgIGlmKCF0aGF0Ll9mKXRoYXQuX2YgPSBlbnRyeTsKICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTsKICAgICAgdGhhdFtTSVpFXSsrOwogICAgICAvLyBhZGQgdG8gaW5kZXgKICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5OwogICAgfSByZXR1cm4gdGhhdDsKICB9LAogIGdldEVudHJ5OiBnZXRFbnRyeSwKICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7CiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl0KICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTEKICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXsKICAgICAgdGhpcy5fdCA9IGl0ZXJhdGVkOyAgLy8gdGFyZ2V0CiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmQKICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXMKICAgIH0sIGZ1bmN0aW9uKCl7CiAgICAgIHZhciB0aGF0ICA9IHRoaXMKICAgICAgICAsIGtpbmQgID0gdGhhdC5fawogICAgICAgICwgZW50cnkgPSB0aGF0Ll9sOwogICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnkKICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7CiAgICAgIC8vIGdldCBuZXh0IGVudHJ5CiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpewogICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uCiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDsKICAgICAgICByZXR1cm4gc3RlcCgxKTsKICAgICAgfQogICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kCiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7CiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7CiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7CiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpOwoKICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yCiAgICBzZXRTcGVjaWVzKE5BTUUpOwogIH0KfTsKfSx7Ii4vX2FuLWluc3RhbmNlIjoxMjgsIi4vX2N0eCI6MTQ3LCIuL19kZWZpbmVkIjoxNDksIi4vX2Rlc2NyaXB0b3JzIjoxNTAsIi4vX2Zvci1vZiI6MTU5LCIuL19pdGVyLWRlZmluZSI6MTc1LCIuL19pdGVyLXN0ZXAiOjE3NywiLi9fbWV0YSI6MTg0LCIuL19vYmplY3QtY3JlYXRlIjoxODgsIi4vX29iamVjdC1kcCI6MTg5LCIuL19yZWRlZmluZS1hbGwiOjIwOCwiLi9fc2V0LXNwZWNpZXMiOjIxM31dLDE0MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT04KdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsIGZyb20gICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSl7CiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpewogICAgaWYoY2xhc3NvZih0aGlzKSAhPSBOQU1FKXRocm93IFR5cGVFcnJvcihOQU1FICsgIiN0b0pTT04gaXNuJ3QgZ2VuZXJpYyIpOwogICAgcmV0dXJuIGZyb20odGhpcyk7CiAgfTsKfTsKfSx7Ii4vX2FycmF5LWZyb20taXRlcmFibGUiOjEzMiwiLi9fY2xhc3NvZiI6MTM5fV0sMTQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKQogICwgZ2V0V2VhayAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2VhawogICwgYW5PYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCBmb3JPZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpCiAgLCBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKQogICwgJGhhcyAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgYXJyYXlGaW5kICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KQogICwgYXJyYXlGaW5kSW5kZXggICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KQogICwgaWQgICAgICAgICAgICAgICAgPSAwOwoKLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzCnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24odGhhdCl7CiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSk7Cn07CnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24oKXsKICB0aGlzLmEgPSBbXTsKfTsKdmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uKHN0b3JlLCBrZXkpewogIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24oaXQpewogICAgcmV0dXJuIGl0WzBdID09PSBrZXk7CiAgfSk7Cn07ClVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0gewogIGdldDogZnVuY3Rpb24oa2V5KXsKICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpOwogICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdOwogIH0sCiAgaGFzOiBmdW5jdGlvbihrZXkpewogICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiAgfSwKICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpewogICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiAgICBpZihlbnRyeSllbnRyeVsxXSA9IHZhbHVlOwogICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pOwogIH0sCiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7CiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uKGl0KXsKICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7CiAgICB9KTsKICAgIGlmKH5pbmRleCl0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTsKICAgIHJldHVybiAhIX5pbmRleDsKICB9Cn07Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7CiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpewogICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpOwogICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkCiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzCiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7CiAgICB9KTsKICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7CiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpCiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSkKICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7CiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlOwogICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpOwogICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7CiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTsKICAgICAgfSwKICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSkKICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKQogICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpewogICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTsKICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTsKICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmhhcyhrZXkpOwogICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7CiAgICAgIH0KICAgIH0pOwogICAgcmV0dXJuIEM7CiAgfSwKICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpewogICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpOwogICAgaWYoZGF0YSA9PT0gdHJ1ZSl1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTsKICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlOwogICAgcmV0dXJuIHRoYXQ7CiAgfSwKICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlCn07Cn0seyIuL19hbi1pbnN0YW5jZSI6MTI4LCIuL19hbi1vYmplY3QiOjEyOSwiLi9fYXJyYXktbWV0aG9kcyI6MTM0LCIuL19mb3Itb2YiOjE1OSwiLi9faGFzIjoxNjEsIi4vX2lzLW9iamVjdCI6MTcxLCIuL19tZXRhIjoxODQsIi4vX3JlZGVmaW5lLWFsbCI6MjA4fV0sMTQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgJGV4cG9ydCAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgcmVkZWZpbmUgICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgLCBtZXRhICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKQogICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKQogICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsICRpdGVyRGV0ZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKQogICwgc2V0VG9TdHJpbmdUYWcgICAgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpCiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspewogIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXQogICAgLCBDICAgICA9IEJhc2UKICAgICwgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnCiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZQogICAgLCBPICAgICA9IHt9OwogIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbihLRVkpewogICAgdmFyIGZuID0gcHJvdG9bS0VZXTsKICAgIHJlZGVmaW5lKHByb3RvLCBLRVksCiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uKGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOwogICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOwogICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpewogICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsKICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfQogICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9CiAgICApOwogIH07CiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXsKICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTsKICB9KSkpewogICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3IKICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7CiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7CiAgICBtZXRhLk5FRUQgPSB0cnVlOwogIH0gZWxzZSB7CiAgICB2YXIgaW5zdGFuY2UgICAgICAgICAgICAgPSBuZXcgQwogICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nCiAgICAgICwgSEFTTlRfQ0hBSU5JTkcgICAgICAgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlCiAgICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZQogICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KQogICAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5CiAgICAgICwgQUNDRVBUX0lURVJBQkxFUyAgICAgPSAkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXsgbmV3IEMoaXRlcik7IH0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZQogICAgICAsIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbigpewogICAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50cwogICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpCiAgICAgICAgICAsIGluZGV4ICAgICA9IDU7CiAgICAgICAgd2hpbGUoaW5kZXgtLSkkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7CiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTsKICAgICAgfSk7CiAgICBpZighQUNDRVBUX0lURVJBQkxFUyl7IAogICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXsKICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7CiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSwgdGFyZ2V0LCBDKTsKICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpOwogICAgICAgIHJldHVybiB0aGF0OwogICAgICB9KTsKICAgICAgQy5wcm90b3R5cGUgPSBwcm90bzsKICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDOwogICAgfQogICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7CiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7CiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7CiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpOwogICAgfQogICAgaWYoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORylmaXhNZXRob2QoQURERVIpOwogICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2QKICAgIGlmKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpZGVsZXRlIHByb3RvLmNsZWFyOwogIH0KCiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7CgogIE9bTkFNRV0gPSBDOwogICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pOwoKICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7CgogIHJldHVybiBDOwp9Owp9LHsiLi9fYW4taW5zdGFuY2UiOjEyOCwiLi9fZXhwb3J0IjoxNTQsIi4vX2ZhaWxzIjoxNTYsIi4vX2Zvci1vZiI6MTU5LCIuL19nbG9iYWwiOjE2MCwiLi9faW5oZXJpdC1pZi1yZXF1aXJlZCI6MTY1LCIuL19pcy1vYmplY3QiOjE3MSwiLi9faXRlci1kZXRlY3QiOjE3NiwiLi9fbWV0YSI6MTg0LCIuL19yZWRlZmluZSI6MjA5LCIuL19yZWRlZmluZS1hbGwiOjIwOCwiLi9fc2V0LXRvLXN0cmluZy10YWciOjIxNH1dLDE0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjQyfV0sMTQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzQzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX29iamVjdC1kcCI6MTg5LCIuL19wcm9wZXJ0eS1kZXNjIjoyMDcsImR1cCI6NDN9XSwxNDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYS1mdW5jdGlvbiI6MTI1LCJkdXAiOjQ0fV0sMTQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKQogICwgTlVNQkVSICAgICAgPSAnbnVtYmVyJzsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaGludCl7CiAgaWYoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0Jyl0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7CiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7Cn07Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fdG8tcHJpbWl0aXZlIjoyMzJ9XSwxNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNDVdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo0NX1dLDE1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0Nl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19mYWlscyI6MTU2LCJkdXAiOjQ2fV0sMTUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzQ3XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2dsb2JhbCI6MTYwLCIuL19pcy1vYmplY3QiOjE3MSwiZHVwIjo0N31dLDE1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs0OF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjQ4fV0sMTUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzQ5XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX29iamVjdC1nb3BzIjoxOTUsIi4vX29iamVjdC1rZXlzIjoxOTgsIi4vX29iamVjdC1waWUiOjE5OSwiZHVwIjo0OX1dLDE1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpCiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIHJlZGVmaW5lICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJykKICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpCiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJzsKCnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXsKICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRgogICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HCiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlMKICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUAogICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CCiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXQogICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KQogICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KQogICAgLCBrZXksIG93biwgb3V0LCBleHA7CiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7CiAgZm9yKGtleSBpbiBzb3VyY2UpewogICAgLy8gY29udGFpbnMgaW4gbmF0aXZlCiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkOwogICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWQKICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07CiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dAogICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7CiAgICAvLyBleHRlbmQgZ2xvYmFsCiAgICBpZih0YXJnZXQpcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7CiAgICAvLyBleHBvcnQKICAgIGlmKGV4cG9ydHNba2V5XSAhPSBvdXQpaGlkZShleHBvcnRzLCBrZXksIGV4cCk7CiAgICBpZihJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dClleHBQcm90b1trZXldID0gb3V0OwogIH0KfTsKZ2xvYmFsLmNvcmUgPSBjb3JlOwovLyB0eXBlIGJpdG1hcAokZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZAokZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbAokZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpYwokZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvCiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZAokZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXAKJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlCiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCAKbW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0Owp9LHsiLi9fY29yZSI6MTQ1LCIuL19jdHgiOjE0NywiLi9fZ2xvYmFsIjoxNjAsIi4vX2hpZGUiOjE2MiwiLi9fcmVkZWZpbmUiOjIwOX1dLDE1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7CiAgdmFyIHJlID0gLy4vOwogIHRyeSB7CiAgICAnLy4vJ1tLRVldKHJlKTsKICB9IGNhdGNoKGUpewogICAgdHJ5IHsKICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7CiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7CiAgICB9IGNhdGNoKGYpeyAvKiBlbXB0eSAqLyB9CiAgfSByZXR1cm4gdHJ1ZTsKfTsKfSx7Ii4vX3drcyI6MjM5fV0sMTU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzUxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6NTF9XSwxNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBoaWRlICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBmYWlscyAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsIGRlZmluZWQgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpCiAgLCB3a3MgICAgICA9IHJlcXVpcmUoJy4vX3drcycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGxlbmd0aCwgZXhlYyl7CiAgdmFyIFNZTUJPTCAgID0gd2tzKEtFWSkKICAgICwgZm5zICAgICAgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSkKICAgICwgc3RyZm4gICAgPSBmbnNbMF0KICAgICwgcnhmbiAgICAgPSBmbnNbMV07CiAgaWYoZmFpbHMoZnVuY3Rpb24oKXsKICAgIHZhciBPID0ge307CiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbigpeyByZXR1cm4gNzsgfTsKICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7CiAgfSkpewogICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7CiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDIKICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKQogICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KQogICAgICA/IGZ1bmN0aW9uKHN0cmluZywgYXJnKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH0KICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpCiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZykKICAgICAgOiBmdW5jdGlvbihzdHJpbmcpeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH0KICAgICk7CiAgfQp9Owp9LHsiLi9fZGVmaW5lZCI6MTQ5LCIuL19mYWlscyI6MTU2LCIuL19oaWRlIjoxNjIsIi4vX3JlZGVmaW5lIjoyMDksIi4vX3drcyI6MjM5fV0sMTU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncwp2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpewogIHZhciB0aGF0ICAgPSBhbk9iamVjdCh0aGlzKQogICAgLCByZXN1bHQgPSAnJzsKICBpZih0aGF0Lmdsb2JhbCkgICAgIHJlc3VsdCArPSAnZyc7CiAgaWYodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knOwogIGlmKHRoYXQubXVsdGlsaW5lKSAgcmVzdWx0ICs9ICdtJzsKICBpZih0aGF0LnVuaWNvZGUpICAgIHJlc3VsdCArPSAndSc7CiAgaWYodGhhdC5zdGlja3kpICAgICByZXN1bHQgKz0gJ3knOwogIHJldHVybiByZXN1bHQ7Cn07Cn0seyIuL19hbi1vYmplY3QiOjEyOX1dLDE1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fY3R4IjoxNDcsIi4vX2lzLWFycmF5LWl0ZXIiOjE2OCwiLi9faXRlci1jYWxsIjoxNzMsIi4vX3RvLWxlbmd0aCI6MjMwLCIuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCI6MjQwLCJkdXAiOjUyfV0sMTYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzUzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6NTN9XSwxNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNTRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo1NH1dLDE2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1NV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZXNjcmlwdG9ycyI6MTUwLCIuL19vYmplY3QtZHAiOjE4OSwiLi9fcHJvcGVydHktZGVzYyI6MjA3LCJkdXAiOjU1fV0sMTYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzU2XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2dsb2JhbCI6MTYwLCJkdXAiOjU2fV0sMTY0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzU3XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2Rlc2NyaXB0b3JzIjoxNTAsIi4vX2RvbS1jcmVhdGUiOjE1MSwiLi9fZmFpbHMiOjE1NiwiZHVwIjo1N31dLDE2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCB0YXJnZXQsIEMpewogIHZhciBQLCBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yOwogIGlmKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpewogICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7CiAgfSByZXR1cm4gdGhhdDsKfTsKfSx7Ii4vX2lzLW9iamVjdCI6MTcxLCIuL19zZXQtcHJvdG8iOjIxMn1dLDE2NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs1OF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjU4fV0sMTY3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzU5XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2NvZiI6MTQwLCJkdXAiOjU5fV0sMTY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzYwXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2l0ZXJhdG9ycyI6MTc4LCIuL193a3MiOjIzOSwiZHVwIjo2MH1dLDE2OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2MV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb2YiOjE0MCwiZHVwIjo2MX1dLDE3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgZmxvb3IgICAgPSBNYXRoLmZsb29yOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCl7CiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7Cn07Cn0seyIuL19pcy1vYmplY3QiOjE3MX1dLDE3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjYyfV0sMTcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBjb2YgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpCiAgLCBNQVRDSCAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKICB2YXIgaXNSZWdFeHA7CiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpOwp9Owp9LHsiLi9fY29mIjoxNDAsIi4vX2lzLW9iamVjdCI6MTcxLCIuL193a3MiOjIzOX1dLDE3MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2M11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hbi1vYmplY3QiOjEyOSwiZHVwIjo2M31dLDE3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2NF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19oaWRlIjoxNjIsIi4vX29iamVjdC1jcmVhdGUiOjE4OCwiLi9fcHJvcGVydHktZGVzYyI6MjA3LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6MjE0LCIuL193a3MiOjIzOSwiZHVwIjo2NH1dLDE3NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2NV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19leHBvcnQiOjE1NCwiLi9faGFzIjoxNjEsIi4vX2hpZGUiOjE2MiwiLi9faXRlci1jcmVhdGUiOjE3NCwiLi9faXRlcmF0b3JzIjoxNzgsIi4vX2xpYnJhcnkiOjE4MCwiLi9fb2JqZWN0LWdwbyI6MTk2LCIuL19yZWRlZmluZSI6MjA5LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6MjE0LCIuL193a3MiOjIzOSwiZHVwIjo2NX1dLDE3NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2Nl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL193a3MiOjIzOSwiZHVwIjo2Nn1dLDE3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs2N11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjY3fV0sMTc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzY4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6Njh9XSwxNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNjldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fb2JqZWN0LWtleXMiOjE5OCwiLi9fdG8taW9iamVjdCI6MjI5LCJkdXAiOjY5fV0sMTgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTsKfSx7fV0sMTgxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeCkKdmFyICRleHBtMSA9IE1hdGguZXhwbTE7Cm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTEKICAvLyBPbGQgRkYgYnVnCiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OAogIC8vIFRvciBCcm93c2VyIGJ1ZwogIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xNwopID8gZnVuY3Rpb24gZXhwbTEoeCl7CiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTsKfSA6ICRleHBtMTsKfSx7fV0sMTgyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeCkKbW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpewogIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTsKfTsKfSx7fV0sMTgzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KQptb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpewogIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTsKfTsKfSx7fV0sMTg0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzcxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2ZhaWxzIjoxNTYsIi4vX2hhcyI6MTYxLCIuL19pcy1vYmplY3QiOjE3MSwiLi9fb2JqZWN0LWRwIjoxODksIi4vX3VpZCI6MjM2LCJkdXAiOjcxfV0sMTg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIE1hcCAgICAgPSByZXF1aXJlKCcuL2VzNi5tYXAnKQogICwgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBzaGFyZWQgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ21ldGFkYXRhJykKICAsIHN0b3JlICAgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAocmVxdWlyZSgnLi9lczYud2Vhay1tYXAnKSkpOwoKdmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKXsKICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTsKICBpZighdGFyZ2V0TWV0YWRhdGEpewogICAgaWYoIWNyZWF0ZSlyZXR1cm4gdW5kZWZpbmVkOwogICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKTsKICB9CiAgdmFyIGtleU1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KHRhcmdldEtleSk7CiAgaWYoIWtleU1ldGFkYXRhKXsKICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDsKICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCk7CiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7Cn07CnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApewogIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpOwogIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpOwp9Owp2YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXsKICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTsKICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7Cn07CnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApewogIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTsKfTsKdmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXkpewogIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKQogICAgLCBrZXlzICAgICAgICA9IFtdOwogIGlmKG1ldGFkYXRhTWFwKW1ldGFkYXRhTWFwLmZvckVhY2goZnVuY3Rpb24oXywga2V5KXsga2V5cy5wdXNoKGtleSk7IH0pOwogIHJldHVybiBrZXlzOwp9Owp2YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTsKfTsKdmFyIGV4cCA9IGZ1bmN0aW9uKE8pewogICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgc3RvcmU6IHN0b3JlLAogIG1hcDogZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCwKICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsCiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLAogIHNldDogb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSwKICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cywKICBrZXk6IHRvTWV0YUtleSwKICBleHA6IGV4cAp9Owp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX3NoYXJlZCI6MjE2LCIuL2VzNi5tYXAiOjI3MSwiLi9lczYud2Vhay1tYXAiOjM3N31dLDE4NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb2YiOjE0MCwiLi9fZ2xvYmFsIjoxNjAsIi4vX3Rhc2siOjIyNiwiZHVwIjo3Mn1dLDE4NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3M11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19mYWlscyI6MTU2LCIuL19pb2JqZWN0IjoxNjcsIi4vX29iamVjdC1nb3BzIjoxOTUsIi4vX29iamVjdC1rZXlzIjoxOTgsIi4vX29iamVjdC1waWUiOjE5OSwiLi9fdG8tb2JqZWN0IjoyMzEsImR1cCI6NzN9XSwxODg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYW4tb2JqZWN0IjoxMjksIi4vX2RvbS1jcmVhdGUiOjE1MSwiLi9fZW51bS1idWcta2V5cyI6MTUyLCIuL19odG1sIjoxNjMsIi4vX29iamVjdC1kcHMiOjE5MCwiLi9fc2hhcmVkLWtleSI6MjE1LCJkdXAiOjc0fV0sMTg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzc1XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2FuLW9iamVjdCI6MTI5LCIuL19kZXNjcmlwdG9ycyI6MTUwLCIuL19pZTgtZG9tLWRlZmluZSI6MTY0LCIuL190by1wcmltaXRpdmUiOjIzMiwiZHVwIjo3NX1dLDE5MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3Nl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fZGVzY3JpcHRvcnMiOjE1MCwiLi9fb2JqZWN0LWRwIjoxODksIi4vX29iamVjdC1rZXlzIjoxOTgsImR1cCI6NzZ9XSwxOTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzCm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7CiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHMKICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24oKXsgLyogZW1wdHkgKi99KTsKICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107Cn0pOwp9LHsiLi9fZmFpbHMiOjE1NiwiLi9fZ2xvYmFsIjoxNjAsIi4vX2xpYnJhcnkiOjE4MH1dLDE5MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs3N11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19kZXNjcmlwdG9ycyI6MTUwLCIuL19oYXMiOjE2MSwiLi9faWU4LWRvbS1kZWZpbmUiOjE2NCwiLi9fb2JqZWN0LXBpZSI6MTk5LCIuL19wcm9wZXJ0eS1kZXNjIjoyMDcsIi4vX3RvLWlvYmplY3QiOjIyOSwiLi9fdG8tcHJpbWl0aXZlIjoyMzIsImR1cCI6Nzd9XSwxOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bNzhdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fb2JqZWN0LWdvcG4iOjE5NCwiLi9fdG8taW9iamVjdCI6MjI5LCJkdXAiOjc4fV0sMTk0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzc5XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2VudW0tYnVnLWtleXMiOjE1MiwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwiOjE5NywiZHVwIjo3OX1dLDE5NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs4MF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyJkdXAiOjgwfV0sMTk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzgxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2hhcyI6MTYxLCIuL19zaGFyZWQta2V5IjoyMTUsIi4vX3RvLW9iamVjdCI6MjMxLCJkdXAiOjgxfV0sMTk3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzgyXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2FycmF5LWluY2x1ZGVzIjoxMzMsIi4vX2hhcyI6MTYxLCIuL19zaGFyZWQta2V5IjoyMTUsIi4vX3RvLWlvYmplY3QiOjIyOSwiZHVwIjo4Mn1dLDE5ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs4M11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19lbnVtLWJ1Zy1rZXlzIjoxNTIsIi4vX29iamVjdC1rZXlzLWludGVybmFsIjoxOTcsImR1cCI6ODN9XSwxOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bODRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo4NH1dLDIwMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs4NV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb3JlIjoxNDUsIi4vX2V4cG9ydCI6MTU0LCIuL19mYWlscyI6MTU2LCJkdXAiOjg1fV0sMjAxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdldEtleXMgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJykKICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgaXNFbnVtICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNFbnRyaWVzKXsKICByZXR1cm4gZnVuY3Rpb24oaXQpewogICAgdmFyIE8gICAgICA9IHRvSU9iamVjdChpdCkKICAgICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pCiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGgKICAgICAgLCBpICAgICAgPSAwCiAgICAgICwgcmVzdWx0ID0gW10KICAgICAgLCBrZXk7CiAgICB3aGlsZShsZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpewogICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTsKICAgIH0gcmV0dXJuIHJlc3VsdDsKICB9Owp9Owp9LHsiLi9fb2JqZWN0LWtleXMiOjE5OCwiLi9fb2JqZWN0LXBpZSI6MTk5LCIuL190by1pb2JqZWN0IjoyMjl9XSwyMDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzCnZhciBnT1BOICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykKICAsIGdPUFMgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgUmVmbGVjdCAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0Owptb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpewogIHZhciBrZXlzICAgICAgID0gZ09QTi5mKGFuT2JqZWN0KGl0KSkKICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjsKICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7Cn07Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fZ2xvYmFsIjoxNjAsIi4vX29iamVjdC1nb3BuIjoxOTQsIi4vX29iamVjdC1nb3BzIjoxOTV9XSwyMDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0CiAgLCAkdHJpbSAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTsKCm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKXsKICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpCiAgICAsIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7CiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0Owp9IDogJHBhcnNlRmxvYXQ7Cn0seyIuL19nbG9iYWwiOjE2MCwiLi9fc3RyaW5nLXRyaW0iOjIyNCwiLi9fc3RyaW5nLXdzIjoyMjV9XSwyMDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQKICAsICR0cmltICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbQogICwgd3MgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJykKICAsIGhleCAgICAgICA9IC9eW1wtK10/MFt4WF0vOwoKbW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpewogIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7CiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7Cn0gOiAkcGFyc2VJbnQ7Cn0seyIuL19nbG9iYWwiOjE2MCwiLi9fc3RyaW5nLXRyaW0iOjIyNCwiLi9fc3RyaW5nLXdzIjoyMjV9XSwyMDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBwYXRoICAgICAgPSByZXF1aXJlKCcuL19wYXRoJykKICAsIGludm9rZSAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpCiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oLyogLi4ucGFyZ3MgKi8pewogIHZhciBmbiAgICAgPSBhRnVuY3Rpb24odGhpcykKICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aAogICAgLCBwYXJncyAgPSBBcnJheShsZW5ndGgpCiAgICAsIGkgICAgICA9IDAKICAgICwgXyAgICAgID0gcGF0aC5fCiAgICAsIGhvbGRlciA9IGZhbHNlOwogIHdoaWxlKGxlbmd0aCA+IGkpaWYoKHBhcmdzW2ldID0gYXJndW1lbnRzW2krK10pID09PSBfKWhvbGRlciA9IHRydWU7CiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pewogICAgdmFyIHRoYXQgPSB0aGlzCiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCBqID0gMCwgayA9IDAsIGFyZ3M7CiAgICBpZighaG9sZGVyICYmICFhTGVuKXJldHVybiBpbnZva2UoZm4sIHBhcmdzLCB0aGF0KTsKICAgIGFyZ3MgPSBwYXJncy5zbGljZSgpOwogICAgaWYoaG9sZGVyKWZvcig7bGVuZ3RoID4gajsgaisrKWlmKGFyZ3Nbal0gPT09IF8pYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdOwogICAgd2hpbGUoYUxlbiA+IGspYXJncy5wdXNoKGFyZ3VtZW50c1trKytdKTsKICAgIHJldHVybiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpOwogIH07Cn07Cn0seyIuL19hLWZ1bmN0aW9uIjoxMjUsIi4vX2ludm9rZSI6MTY2LCIuL19wYXRoIjoyMDZ9XSwyMDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpOwp9LHsiLi9fZ2xvYmFsIjoxNjB9XSwyMDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bODZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiZHVwIjo4Nn1dLDIwODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpewogIGZvcih2YXIga2V5IGluIHNyYylyZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpOwogIHJldHVybiB0YXJnZXQ7Cn07Cn0seyIuL19yZWRlZmluZSI6MjA5fV0sMjA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIGhhcyAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBTUkMgICAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJykKICAsIFRPX1NUUklORyA9ICd0b1N0cmluZycKICAsICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR10KICAsIFRQTCAgICAgICA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTsKCnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24oaXQpewogIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7Cn07CgoobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihPLCBrZXksIHZhbCwgc2FmZSl7CiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7CiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7CiAgaWYoT1trZXldID09PSB2YWwpcmV0dXJuOwogIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7CiAgaWYoTyA9PT0gZ2xvYmFsKXsKICAgIE9ba2V5XSA9IHZhbDsKICB9IGVsc2UgewogICAgaWYoIXNhZmUpewogICAgICBkZWxldGUgT1trZXldOwogICAgICBoaWRlKE8sIGtleSwgdmFsKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmKE9ba2V5XSlPW2tleV0gPSB2YWw7CiAgICAgIGVsc2UgaGlkZShPLCBrZXksIHZhbCk7CiAgICB9CiAgfQovLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmUKfSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpOwp9KTsKfSx7Ii4vX2NvcmUiOjE0NSwiLi9fZ2xvYmFsIjoxNjAsIi4vX2hhcyI6MTYxLCIuL19oaWRlIjoxNjIsIi4vX3VpZCI6MjM2fV0sMjEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyZWdFeHAsIHJlcGxhY2UpewogIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uKHBhcnQpewogICAgcmV0dXJuIHJlcGxhY2VbcGFydF07CiAgfSA6IHJlcGxhY2U7CiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXsKICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7CiAgfTsKfTsKfSx7fV0sMjExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpewogIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5Owp9Owp9LHt9XSwyMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bODldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYW4tb2JqZWN0IjoxMjksIi4vX2N0eCI6MTQ3LCIuL19pcy1vYmplY3QiOjE3MSwiLi9fb2JqZWN0LWdvcGQiOjE5MiwiZHVwIjo4OX1dLDIxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGdsb2JhbCAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKQogICwgU1BFQ0lFUyAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpewogIHZhciBDID0gZ2xvYmFsW0tFWV07CiAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSlkUC5mKEMsIFNQRUNJRVMsIHsKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0KICB9KTsKfTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjoxNTAsIi4vX2dsb2JhbCI6MTYwLCIuL19vYmplY3QtZHAiOjE4OSwiLi9fd2tzIjoyMzl9XSwyMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOTFdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9faGFzIjoxNjEsIi4vX29iamVjdC1kcCI6MTg5LCIuL193a3MiOjIzOSwiZHVwIjo5MX1dLDIxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs5Ml1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19zaGFyZWQiOjIxNiwiLi9fdWlkIjoyMzYsImR1cCI6OTJ9XSwyMTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOTNdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZ2xvYmFsIjoxNjAsImR1cCI6OTN9XSwyMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOTRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYS1mdW5jdGlvbiI6MTI1LCIuL19hbi1vYmplY3QiOjEyOSwiLi9fd2tzIjoyMzksImR1cCI6OTR9XSwyMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtZXRob2QsIGFyZyl7CiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uKCl7CiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbigpe30sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7CiAgfSk7Cn07Cn0seyIuL19mYWlscyI6MTU2fV0sMjE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzk1XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2RlZmluZWQiOjE0OSwiLi9fdG8taW50ZWdlciI6MjI4LCJkdXAiOjk1fV0sMjIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc30KdmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJykKICAsIGRlZmluZWQgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpewogIGlmKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyAiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4ISIpOwogIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7Cn07Cn0seyIuL19kZWZpbmVkIjoxNDksIi4vX2lzLXJlZ2V4cCI6MTcyfV0sMjIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJykKICAsIHF1b3QgICAgPSAvIi9nOwovLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkKdmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbihzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkgewogIHZhciBTICA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpCiAgICAsIHAxID0gJzwnICsgdGFnOwogIGlmKGF0dHJpYnV0ZSAhPT0gJycpcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz0iJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnIic7CiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7Cn07Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgZXhlYyl7CiAgdmFyIE8gPSB7fTsKICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTsKICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7CiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCciJyk7CiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJyInKS5sZW5ndGggPiAzOwogIH0pLCAnU3RyaW5nJywgTyk7Cn07Cn0seyIuL19kZWZpbmVkIjoxNDksIi4vX2V4cG9ydCI6MTU0LCIuL19mYWlscyI6MTU2fV0sMjIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmQKdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIHJlcGVhdCAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpCiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KXsKICB2YXIgUyAgICAgICAgICAgID0gU3RyaW5nKGRlZmluZWQodGhhdCkpCiAgICAsIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoCiAgICAsIGZpbGxTdHIgICAgICA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKQogICAgLCBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpOwogIGlmKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJylyZXR1cm4gUzsKICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aAogICAgLCBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7CiAgaWYoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pOwogIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7Cn07Cgp9LHsiLi9fZGVmaW5lZCI6MTQ5LCIuL19zdHJpbmctcmVwZWF0IjoyMjMsIi4vX3RvLWxlbmd0aCI6MjMwfV0sMjIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpCiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCl7CiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKQogICAgLCByZXMgPSAnJwogICAgLCBuICAgPSB0b0ludGVnZXIoY291bnQpOwogIGlmKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpdGhyb3cgUmFuZ2VFcnJvcigiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmUiKTsKICBmb3IoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSlpZihuICYgMSlyZXMgKz0gc3RyOwogIHJldHVybiByZXM7Cn07Cn0seyIuL19kZWZpbmVkIjoxNDksIi4vX3RvLWludGVnZXIiOjIyOH1dLDIyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJykKICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBzcGFjZXMgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJykKICAsIHNwYWNlICAgPSAnWycgKyBzcGFjZXMgKyAnXScKICAsIG5vbiAgICAgPSAnXHUyMDBiXHUwMDg1JwogICwgbHRyaW0gICA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKQogICwgcnRyaW0gICA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7Cgp2YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbihLRVksIGV4ZWMsIEFMSUFTKXsKICB2YXIgZXhwICAgPSB7fTsKICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbigpewogICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjsKICB9KTsKICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldOwogIGlmKEFMSUFTKWV4cFtBTElBU10gPSBmbjsKICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTsKfTsKCi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0Ci8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodAovLyAzIC0+IFN0cmluZyN0cmltCnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uKHN0cmluZywgVFlQRSl7CiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7CiAgaWYoVFlQRSAmIDEpc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTsKICBpZihUWVBFICYgMilzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpOwogIHJldHVybiBzdHJpbmc7Cn07Cgptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyOwp9LHsiLi9fZGVmaW5lZCI6MTQ5LCIuL19leHBvcnQiOjE1NCwiLi9fZmFpbHMiOjE1NiwiLi9fc3RyaW5nLXdzIjoyMjV9XSwyMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewptb2R1bGUuZXhwb3J0cyA9ICdceDA5XHgwQVx4MEJceDBDXHgwRFx4MjBceEEwXHUxNjgwXHUxODBFXHUyMDAwXHUyMDAxXHUyMDAyXHUyMDAzJyArCiAgJ1x1MjAwNFx1MjAwNVx1MjAwNlx1MjAwN1x1MjAwOFx1MjAwOVx1MjAwQVx1MjAyRlx1MjA1Rlx1MzAwMFx1MjAyOFx1MjAyOVx1RkVGRic7Cn0se31dLDIyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVs5Nl1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb2YiOjE0MCwiLi9fY3R4IjoxNDcsIi4vX2RvbS1jcmVhdGUiOjE1MSwiLi9fZ2xvYmFsIjoxNjAsIi4vX2h0bWwiOjE2MywiLi9faW52b2tlIjoxNjYsImR1cCI6OTZ9XSwyMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOTddWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fdG8taW50ZWdlciI6MjI4LCJkdXAiOjk3fV0sMjI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzk4XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6OTh9XSwyMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bOTldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZGVmaW5lZCI6MTQ5LCIuL19pb2JqZWN0IjoxNjcsImR1cCI6OTl9XSwyMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTAwXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX3RvLWludGVnZXIiOjIyOCwiZHVwIjoxMDB9XSwyMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTAxXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2RlZmluZWQiOjE0OSwiZHVwIjoxMDF9XSwyMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTAyXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2lzLW9iamVjdCI6MTcxLCJkdXAiOjEwMn1dLDIzMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSl7CiAgdmFyIExJQlJBUlkgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JykKICAgICwgZ2xvYmFsICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgICAsIGZhaWxzICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgICAsICRleHBvcnQgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICAgLCAkdHlwZWQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKQogICAgLCAkYnVmZmVyICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykKICAgICwgY3R4ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpCiAgICAsIGFuSW5zdGFuY2UgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgICAsIHByb3BlcnR5RGVzYyAgICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJykKICAgICwgaGlkZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICAgLCByZWRlZmluZUFsbCAgICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykKICAgICwgdG9JbnRlZ2VyICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKQogICAgLCB0b0xlbmd0aCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAgICwgdG9JbmRleCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JykKICAgICwgdG9QcmltaXRpdmUgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgICAsIGhhcyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICAgLCBzYW1lICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpCiAgICAsIGNsYXNzb2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAgICwgaXNPYmplY3QgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgICAsIHRvT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICAgLCBpc0FycmF5SXRlciAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpCiAgICAsIGNyZWF0ZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykKICAgICwgZ2V0UHJvdG90eXBlT2YgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKQogICAgLCBnT1BOICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mCiAgICAsIGdldEl0ZXJGbiAgICAgICAgICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpCiAgICAsIHVpZCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKQogICAgLCB3a3MgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykKICAgICwgY3JlYXRlQXJyYXlNZXRob2QgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKQogICAgLCBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKQogICAgLCBzcGVjaWVzQ29uc3RydWN0b3IgID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpCiAgICAsIEFycmF5SXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpCiAgICAsIEl0ZXJhdG9ycyAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKQogICAgLCAkaXRlckRldGVjdCAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKQogICAgLCBzZXRTcGVjaWVzICAgICAgICAgID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKQogICAgLCBhcnJheUZpbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpCiAgICAsIGFycmF5Q29weVdpdGhpbiAgICAgPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpCiAgICAsICREUCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICAgLCAkR09QRCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICAgLCBkUCAgICAgICAgICAgICAgICAgID0gJERQLmYKICAgICwgZ09QRCAgICAgICAgICAgICAgICA9ICRHT1BELmYKICAgICwgUmFuZ2VFcnJvciAgICAgICAgICA9IGdsb2JhbC5SYW5nZUVycm9yCiAgICAsIFR5cGVFcnJvciAgICAgICAgICAgPSBnbG9iYWwuVHlwZUVycm9yCiAgICAsIFVpbnQ4QXJyYXkgICAgICAgICAgPSBnbG9iYWwuVWludDhBcnJheQogICAgLCBBUlJBWV9CVUZGRVIgICAgICAgID0gJ0FycmF5QnVmZmVyJwogICAgLCBTSEFSRURfQlVGRkVSICAgICAgID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVIKICAgICwgQllURVNfUEVSX0VMRU1FTlQgICA9ICdCWVRFU19QRVJfRUxFTUVOVCcKICAgICwgUFJPVE9UWVBFICAgICAgICAgICA9ICdwcm90b3R5cGUnCiAgICAsIEFycmF5UHJvdG8gICAgICAgICAgPSBBcnJheVtQUk9UT1RZUEVdCiAgICAsICRBcnJheUJ1ZmZlciAgICAgICAgPSAkYnVmZmVyLkFycmF5QnVmZmVyCiAgICAsICREYXRhVmlldyAgICAgICAgICAgPSAkYnVmZmVyLkRhdGFWaWV3CiAgICAsIGFycmF5Rm9yRWFjaCAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgwKQogICAgLCBhcnJheUZpbHRlciAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMikKICAgICwgYXJyYXlTb21lICAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpCiAgICAsIGFycmF5RXZlcnkgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg0KQogICAgLCBhcnJheUZpbmQgICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNSkKICAgICwgYXJyYXlGaW5kSW5kZXggICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpCiAgICAsIGFycmF5SW5jbHVkZXMgICAgICAgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpCiAgICAsIGFycmF5SW5kZXhPZiAgICAgICAgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKQogICAgLCBhcnJheVZhbHVlcyAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzCiAgICAsIGFycmF5S2V5cyAgICAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy5rZXlzCiAgICAsIGFycmF5RW50cmllcyAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzCiAgICAsIGFycmF5TGFzdEluZGV4T2YgICAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mCiAgICAsIGFycmF5UmVkdWNlICAgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZQogICAgLCBhcnJheVJlZHVjZVJpZ2h0ICAgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodAogICAgLCBhcnJheUpvaW4gICAgICAgICAgID0gQXJyYXlQcm90by5qb2luCiAgICAsIGFycmF5U29ydCAgICAgICAgICAgPSBBcnJheVByb3RvLnNvcnQKICAgICwgYXJyYXlTbGljZSAgICAgICAgICA9IEFycmF5UHJvdG8uc2xpY2UKICAgICwgYXJyYXlUb1N0cmluZyAgICAgICA9IEFycmF5UHJvdG8udG9TdHJpbmcKICAgICwgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmcKICAgICwgSVRFUkFUT1IgICAgICAgICAgICA9IHdrcygnaXRlcmF0b3InKQogICAgLCBUQUcgICAgICAgICAgICAgICAgID0gd2tzKCd0b1N0cmluZ1RhZycpCiAgICAsIFRZUEVEX0NPTlNUUlVDVE9SICAgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJykKICAgICwgREVGX0NPTlNUUlVDVE9SICAgICA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJykKICAgICwgQUxMX0NPTlNUUlVDVE9SUyAgICA9ICR0eXBlZC5DT05TVFIKICAgICwgVFlQRURfQVJSQVkgICAgICAgICA9ICR0eXBlZC5UWVBFRAogICAgLCBWSUVXICAgICAgICAgICAgICAgID0gJHR5cGVkLlZJRVcKICAgICwgV1JPTkdfTEVOR1RIICAgICAgICA9ICdXcm9uZyBsZW5ndGghJzsKCiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbihPLCBsZW5ndGgpewogICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpOwogIH0pOwoKICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTsKICB9KTsKCiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uKCl7CiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pOwogIH0pOwoKICB2YXIgc3RyaWN0VG9MZW5ndGggPSBmdW5jdGlvbihpdCwgU0FNRSl7CiAgICBpZihpdCA9PT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihXUk9OR19MRU5HVEgpOwogICAgdmFyIG51bWJlciA9ICtpdAogICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0KTsKICAgIGlmKFNBTUUgJiYgIXNhbWUobnVtYmVyLCBsZW5ndGgpKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgIHJldHVybiBsZW5ndGg7CiAgfTsKCiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24oaXQsIEJZVEVTKXsKICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpOwogICAgaWYob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7CiAgICByZXR1cm4gb2Zmc2V0OwogIH07CgogIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uKGl0KXsKICAgIGlmKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdClyZXR1cm4gaXQ7CiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpOwogIH07CgogIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uKEMsIGxlbmd0aCl7CiAgICBpZighKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKXsKICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTsKICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7CiAgfTsKCiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uKE8sIGxpc3QpewogICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTsKICB9OwoKICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbihDLCBsaXN0KXsKICAgIHZhciBpbmRleCAgPSAwCiAgICAgICwgbGVuZ3RoID0gbGlzdC5sZW5ndGgKICAgICAgLCByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpOwogICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107CiAgICByZXR1cm4gcmVzdWx0OwogIH07CgogIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihpdCwga2V5LCBpbnRlcm5hbCl7CiAgICBkUChpdCwga2V5LCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH19KTsKICB9OwoKICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiwgbWFwZm4sIHRoaXNBcmcgKi8pewogICAgdmFyIE8gICAgICAgPSB0b09iamVjdChzb3VyY2UpCiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQKICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZAogICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTykKICAgICAgLCBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjsKICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpewogICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKyl7CiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7CiAgICAgIH0gTyA9IHZhbHVlczsKICAgIH0KICAgIGlmKG1hcHBpbmcgJiYgYUxlbiA+IDIpbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7CiAgICBmb3IoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKXsKICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qLi4uaXRlbXMqLyl7CiAgICB2YXIgaW5kZXggID0gMAogICAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOwogICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZQogIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pOwoKICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKXsKICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7CiAgfTsKCiAgdmFyIHByb3RvID0gewogICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qLCBlbmQgKi8pewogICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQsIGVuZCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICAgIH0sCiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXsKICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwKICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpOwogICAgfSwKICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qLCB0aGlzQXJnICovKXsKICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qLCB0aGlzQXJnICovKXsKICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pewogICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7CiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXsKICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKICAgIH0sCiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICAgIH0sCiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwogICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTsKICAgIH0sCiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiwgdGhpc0FyZyAqLyl7CiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgfSwKICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyosIGluaXRpYWxWYWx1ZSAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwogICAgfSwKICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qLCBpbml0aWFsVmFsdWUgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpOwogICAgfSwKICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKXsKICAgICAgdmFyIHRoYXQgICA9IHRoaXMKICAgICAgICAsIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aAogICAgICAgICwgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKQogICAgICAgICwgaW5kZXggID0gMAogICAgICAgICwgdmFsdWU7CiAgICAgIHdoaWxlKGluZGV4IDwgbWlkZGxlKXsKICAgICAgICB2YWx1ZSAgICAgICAgID0gdGhhdFtpbmRleF07CiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdOwogICAgICAgIHRoYXRbbGVuZ3RoXSAgPSB2YWx1ZTsKICAgICAgfSByZXR1cm4gdGhhdDsKICAgIH0sCiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pewogICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgICB9LAogICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pewogICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7CiAgICB9LAogICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpewogICAgICB2YXIgTyAgICAgID0gdmFsaWRhdGUodGhpcykKICAgICAgICAsIGxlbmd0aCA9IE8ubGVuZ3RoCiAgICAgICAgLCAkYmVnaW4gPSB0b0luZGV4KGJlZ2luLCBsZW5ndGgpOwogICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoCiAgICAgICAgTy5idWZmZXIsCiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCwKICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0luZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pCiAgICAgICk7CiAgICB9CiAgfTsKCiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpewogICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTsKICB9OwoKICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyosIG9mZnNldCAqLyl7CiAgICB2YWxpZGF0ZSh0aGlzKTsKICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpCiAgICAgICwgbGVuZ3RoID0gdGhpcy5sZW5ndGgKICAgICAgLCBzcmMgICAgPSB0b09iamVjdChhcnJheUxpa2UpCiAgICAgICwgbGVuICAgID0gdG9MZW5ndGgoc3JjLmxlbmd0aCkKICAgICAgLCBpbmRleCAgPSAwOwogICAgaWYobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgIHdoaWxlKGluZGV4IDwgbGVuKXRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdOwogIH07CgogIHZhciAkaXRlcmF0b3JzID0gewogICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpewogICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpOwogICAgfSwKICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKXsKICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTsKICAgIH0sCiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpewogICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7CiAgICB9CiAgfTsKCiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uKHRhcmdldCwga2V5KXsKICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpCiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV0KICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJwogICAgICAmJiBrZXkgaW4gdGFyZ2V0CiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTsKICB9OwogIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSl7CiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSkKICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pCiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7CiAgfTsKICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYyl7CiAgICBpZihpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKQogICAgICAmJiBpc09iamVjdChkZXNjKQogICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJykKICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JykKICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JykKICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnMKICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlCiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpCiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKQogICAgKXsKICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlOwogICAgICByZXR1cm4gdGFyZ2V0OwogICAgfSBlbHNlIHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7CiAgfTsKCiAgaWYoIUFMTF9DT05TVFJVQ1RPUlMpewogICAgJEdPUEQuZiA9ICRnZXREZXNjOwogICAgJERQLmYgICA9ICRzZXREZXNjOwogIH0KCiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHsKICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsCiAgICBkZWZpbmVQcm9wZXJ0eTogICAgICAgICAgICRzZXREZXNjCiAgfSk7CgogIGlmKGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKXsKICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKXsKICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpOwogICAgfQogIH0KCiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7CiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTsKICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTsKICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHsKICAgIHNsaWNlOiAgICAgICAgICAkc2xpY2UsCiAgICBzZXQ6ICAgICAgICAgICAgJHNldCwKICAgIGNvbnN0cnVjdG9yOiAgICBmdW5jdGlvbigpeyAvKiBub29wICovIH0sCiAgICB0b1N0cmluZzogICAgICAgYXJyYXlUb1N0cmluZywKICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmcKICB9KTsKICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTsKICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7CiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpOwogIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpOwogIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7CiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfQogIH0pOwoKICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpewogICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDsKICAgIHZhciBOQU1FICAgICAgID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknCiAgICAgICwgSVNOVF9VSU5UOCA9IE5BTUUgIT0gJ1VpbnQ4QXJyYXknCiAgICAgICwgR0VUVEVSICAgICA9ICdnZXQnICsgS0VZCiAgICAgICwgU0VUVEVSICAgICA9ICdzZXQnICsgS0VZCiAgICAgICwgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXQogICAgICAsIEJhc2UgICAgICAgPSBUeXBlZEFycmF5IHx8IHt9CiAgICAgICwgVEFDICAgICAgICA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSkKICAgICAgLCBGT1JDRUQgICAgID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlYKICAgICAgLCBPICAgICAgICAgID0ge30KICAgICAgLCBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07CiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpewogICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7CiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTsKICAgIH07CiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24odGhhdCwgaW5kZXgsIHZhbHVlKXsKICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kOwogICAgICBpZihDTEFNUEVEKXZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmOwogICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7CiAgICB9OwogICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbih0aGF0LCBpbmRleCl7CiAgICAgIGRQKHRoYXQsIGluZGV4LCB7CiAgICAgICAgZ2V0OiBmdW5jdGlvbigpewogICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7CiAgICAgICAgfSwKICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTsKICAgICAgICB9LAogICAgICAgIGVudW1lcmFibGU6IHRydWUKICAgICAgfSk7CiAgICB9OwogICAgaWYoRk9SQ0VEKXsKICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7CiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTsKICAgICAgICB2YXIgaW5kZXggID0gMAogICAgICAgICAgLCBvZmZzZXQgPSAwCiAgICAgICAgICAsIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzczsKICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpewogICAgICAgICAgbGVuZ3RoICAgICA9IHN0cmljdFRvTGVuZ3RoKGRhdGEsIHRydWUpCiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7CiAgICAgICAgICBidWZmZXIgICAgID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTsKICAgICAgICB9IGVsc2UgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7CiAgICAgICAgICBidWZmZXIgPSBkYXRhOwogICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpOwogICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7CiAgICAgICAgICBpZigkbGVuZ3RoID09PSB1bmRlZmluZWQpewogICAgICAgICAgICBpZigkbGVuICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpOwogICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDsKICAgICAgICAgICAgaWYoYnl0ZUxlbmd0aCA8IDApdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7CiAgICAgICAgICAgIGlmKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTsKICAgICAgICAgIH0KICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUzsKICAgICAgICB9IGVsc2UgaWYoVFlQRURfQVJSQVkgaW4gZGF0YSl7CiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpOwogICAgICAgIH0KICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHsKICAgICAgICAgIGI6IGJ1ZmZlciwKICAgICAgICAgIG86IG9mZnNldCwKICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsCiAgICAgICAgICBlOiBsZW5ndGgsCiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcikKICAgICAgICB9KTsKICAgICAgICB3aGlsZShpbmRleCA8IGxlbmd0aClhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspOwogICAgICB9KTsKICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpOwogICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpOwogICAgfSBlbHNlIGlmKCEkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXsKICAgICAgLy8gVjggd29ya3Mgd2l0aCBpdGVyYXRvcnMsIGJ1dCBmYWlscyBpbiBtYW55IG90aGVyIGNhc2VzCiAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00NTUyCiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldwogICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKICAgIH0sIHRydWUpKXsKICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7CiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTsKICAgICAgICB2YXIga2xhc3M7CiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXkKICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NQogICAgICAgIGlmKCFpc09iamVjdChkYXRhKSlyZXR1cm4gbmV3IEJhc2Uoc3RyaWN0VG9MZW5ndGgoZGF0YSwgSVNOVF9VSU5UOCkpOwogICAgICAgIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpewogICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZAogICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aCkKICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWQKICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSkKICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpOwogICAgICAgIH0KICAgICAgICBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTsKICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTsKICAgICAgfSk7CiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbihrZXkpewogICAgICAgIGlmKCEoa2V5IGluIFR5cGVkQXJyYXkpKWhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pOwogICAgICB9KTsKICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTsKICAgICAgaWYoIUxJQlJBUlkpVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7CiAgICB9CiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yICAgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXQogICAgICAsIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3IgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCkKICAgICAgLCAkaXRlcmF0b3IgICAgICAgICA9ICRpdGVyYXRvcnMudmFsdWVzOwogICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7CiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTsKICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7CiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7CgogICAgaWYoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKXsKICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7CiAgICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gTkFNRTsgfQogICAgICB9KTsKICAgIH0KCiAgICBPW05BTUVdID0gVHlwZWRBcnJheTsKCiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwgewogICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVMsCiAgICAgIGZyb206ICRmcm9tLAogICAgICBvZjogJG9mCiAgICB9KTsKCiAgICBpZighKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTsKCiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pOwoKICAgIHNldFNwZWNpZXMoTkFNRSk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7c2V0OiAkc2V0fSk7CgogICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpOwoKICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZyksIE5BTUUsIHt0b1N0cmluZzogYXJyYXlUb1N0cmluZ30pOwoKICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsKICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTsKICAgIH0pLCBOQU1FLCB7c2xpY2U6ICRzbGljZX0pOwoKICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCkKICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpewogICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTsKICAgIH0pKSwgTkFNRSwge3RvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmd9KTsKCiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjsKICAgIGlmKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpOwogIH07Cn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07Cn0seyIuL19hbi1pbnN0YW5jZSI6MTI4LCIuL19hcnJheS1jb3B5LXdpdGhpbiI6MTMwLCIuL19hcnJheS1maWxsIjoxMzEsIi4vX2FycmF5LWluY2x1ZGVzIjoxMzMsIi4vX2FycmF5LW1ldGhvZHMiOjEzNCwiLi9fY2xhc3NvZiI6MTM5LCIuL19jdHgiOjE0NywiLi9fZGVzY3JpcHRvcnMiOjE1MCwiLi9fZXhwb3J0IjoxNTQsIi4vX2ZhaWxzIjoxNTYsIi4vX2dsb2JhbCI6MTYwLCIuL19oYXMiOjE2MSwiLi9faGlkZSI6MTYyLCIuL19pcy1hcnJheS1pdGVyIjoxNjgsIi4vX2lzLW9iamVjdCI6MTcxLCIuL19pdGVyLWRldGVjdCI6MTc2LCIuL19pdGVyYXRvcnMiOjE3OCwiLi9fbGlicmFyeSI6MTgwLCIuL19vYmplY3QtY3JlYXRlIjoxODgsIi4vX29iamVjdC1kcCI6MTg5LCIuL19vYmplY3QtZ29wZCI6MTkyLCIuL19vYmplY3QtZ29wbiI6MTk0LCIuL19vYmplY3QtZ3BvIjoxOTYsIi4vX3Byb3BlcnR5LWRlc2MiOjIwNywiLi9fcmVkZWZpbmUtYWxsIjoyMDgsIi4vX3NhbWUtdmFsdWUiOjIxMSwiLi9fc2V0LXNwZWNpZXMiOjIxMywiLi9fc3BlY2llcy1jb25zdHJ1Y3RvciI6MjE3LCIuL190by1pbmRleCI6MjI3LCIuL190by1pbnRlZ2VyIjoyMjgsIi4vX3RvLWxlbmd0aCI6MjMwLCIuL190by1vYmplY3QiOjIzMSwiLi9fdG8tcHJpbWl0aXZlIjoyMzIsIi4vX3R5cGVkIjoyMzUsIi4vX3R5cGVkLWJ1ZmZlciI6MjM0LCIuL191aWQiOjIzNiwiLi9fd2tzIjoyMzksIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kIjoyNDAsIi4vZXM2LmFycmF5Lml0ZXJhdG9yIjoyNTJ9XSwyMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpCiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpCiAgLCAkdHlwZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJykKICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpCiAgLCByZWRlZmluZUFsbCAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgLCBmYWlscyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsIGFuSW5zdGFuY2UgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKQogICwgdG9JbnRlZ2VyICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJykKICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGdPUE4gICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mCiAgLCBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYKICAsIGFycmF5RmlsbCAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpCiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykKICAsIEFSUkFZX0JVRkZFUiAgID0gJ0FycmF5QnVmZmVyJwogICwgREFUQV9WSUVXICAgICAgPSAnRGF0YVZpZXcnCiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnCiAgLCBXUk9OR19MRU5HVEggICA9ICdXcm9uZyBsZW5ndGghJwogICwgV1JPTkdfSU5ERVggICAgPSAnV3JvbmcgaW5kZXghJwogICwgJEFycmF5QnVmZmVyICAgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXQogICwgJERhdGFWaWV3ICAgICAgPSBnbG9iYWxbREFUQV9WSUVXXQogICwgTWF0aCAgICAgICAgICAgPSBnbG9iYWwuTWF0aAogICwgUmFuZ2VFcnJvciAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvcgogICwgSW5maW5pdHkgICAgICAgPSBnbG9iYWwuSW5maW5pdHkKICAsIEJhc2VCdWZmZXIgICAgID0gJEFycmF5QnVmZmVyCiAgLCBhYnMgICAgICAgICAgICA9IE1hdGguYWJzCiAgLCBwb3cgICAgICAgICAgICA9IE1hdGgucG93CiAgLCBmbG9vciAgICAgICAgICA9IE1hdGguZmxvb3IKICAsIGxvZyAgICAgICAgICAgID0gTWF0aC5sb2cKICAsIExOMiAgICAgICAgICAgID0gTWF0aC5MTjIKICAsIEJVRkZFUiAgICAgICAgID0gJ2J1ZmZlcicKICAsIEJZVEVfTEVOR1RIICAgID0gJ2J5dGVMZW5ndGgnCiAgLCBCWVRFX09GRlNFVCAgICA9ICdieXRlT2Zmc2V0JwogICwgJEJVRkZFUiAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVIKICAsICRMRU5HVEggICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEgKICAsICRPRkZTRVQgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7CgovLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NAp2YXIgcGFja0lFRUU3NTQgPSBmdW5jdGlvbih2YWx1ZSwgbUxlbiwgbkJ5dGVzKXsKICB2YXIgYnVmZmVyID0gQXJyYXkobkJ5dGVzKQogICAgLCBlTGVuICAgPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDEKICAgICwgZU1heCAgID0gKDEgPDwgZUxlbikgLSAxCiAgICAsIGVCaWFzICA9IGVNYXggPj4gMQogICAgLCBydCAgICAgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwCiAgICAsIGkgICAgICA9IDAKICAgICwgcyAgICAgID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMAogICAgLCBlLCBtLCBjOwogIHZhbHVlID0gYWJzKHZhbHVlKQogIGlmKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSl7CiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDsKICAgIGUgPSBlTWF4OwogIH0gZWxzZSB7CiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7CiAgICBpZih2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKXsKICAgICAgZS0tOwogICAgICBjICo9IDI7CiAgICB9CiAgICBpZihlICsgZUJpYXMgPj0gMSl7CiAgICAgIHZhbHVlICs9IHJ0IC8gYzsKICAgIH0gZWxzZSB7CiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7CiAgICB9CiAgICBpZih2YWx1ZSAqIGMgPj0gMil7CiAgICAgIGUrKzsKICAgICAgYyAvPSAyOwogICAgfQogICAgaWYoZSArIGVCaWFzID49IGVNYXgpewogICAgICBtID0gMDsKICAgICAgZSA9IGVNYXg7CiAgICB9IGVsc2UgaWYoZSArIGVCaWFzID49IDEpewogICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pOwogICAgICBlID0gZSArIGVCaWFzOwogICAgfSBlbHNlIHsKICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7CiAgICAgIGUgPSAwOwogICAgfQogIH0KICBmb3IoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7CiAgZSA9IGUgPDwgbUxlbiB8IG07CiAgZUxlbiArPSBtTGVuOwogIGZvcig7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpOwogIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7CiAgcmV0dXJuIGJ1ZmZlcjsKfTsKdmFyIHVucGFja0lFRUU3NTQgPSBmdW5jdGlvbihidWZmZXIsIG1MZW4sIG5CeXRlcyl7CiAgdmFyIGVMZW4gID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxCiAgICAsIGVNYXggID0gKDEgPDwgZUxlbikgLSAxCiAgICAsIGVCaWFzID0gZU1heCA+PiAxCiAgICAsIG5CaXRzID0gZUxlbiAtIDcKICAgICwgaSAgICAgPSBuQnl0ZXMgLSAxCiAgICAsIHMgICAgID0gYnVmZmVyW2ktLV0KICAgICwgZSAgICAgPSBzICYgMTI3CiAgICAsIG07CiAgcyA+Pj0gNzsKICBmb3IoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpOwogIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7CiAgZSA+Pj0gLW5CaXRzOwogIG5CaXRzICs9IG1MZW47CiAgZm9yKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTsKICBpZihlID09PSAwKXsKICAgIGUgPSAxIC0gZUJpYXM7CiAgfSBlbHNlIGlmKGUgPT09IGVNYXgpewogICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7CiAgfSBlbHNlIHsKICAgIG0gPSBtICsgcG93KDIsIG1MZW4pOwogICAgZSA9IGUgLSBlQmlhczsKICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTsKfTsKCnZhciB1bnBhY2tJMzIgPSBmdW5jdGlvbihieXRlcyl7CiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07Cn07CnZhciBwYWNrSTggPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIFtpdCAmIDB4ZmZdOwp9Owp2YXIgcGFja0kxNiA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdOwp9Owp2YXIgcGFja0kzMiA9IGZ1bmN0aW9uKGl0KXsKICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTsKfTsKdmFyIHBhY2tGNjQgPSBmdW5jdGlvbihpdCl7CiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7Cn07CnZhciBwYWNrRjMyID0gZnVuY3Rpb24oaXQpewogIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpOwp9OwoKdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uKEMsIGtleSwgaW50ZXJuYWwpewogIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH19KTsKfTsKCnZhciBnZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKXsKICB2YXIgbnVtSW5kZXggPSAraW5kZXgKICAgICwgaW50SW5kZXggPSB0b0ludGVnZXIobnVtSW5kZXgpOwogIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTsKICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iCiAgICAsIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdCiAgICAsIHBhY2sgID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpOwogIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTsKfTsKdmFyIHNldCA9IGZ1bmN0aW9uKHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKXsKICB2YXIgbnVtSW5kZXggPSAraW5kZXgKICAgICwgaW50SW5kZXggPSB0b0ludGVnZXIobnVtSW5kZXgpOwogIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTsKICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iCiAgICAsIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdCiAgICAsIHBhY2sgID0gY29udmVyc2lvbigrdmFsdWUpOwogIGZvcih2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKXN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdOwp9OwoKdmFyIHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHMgPSBmdW5jdGlvbih0aGF0LCBsZW5ndGgpewogIGFuSW5zdGFuY2UodGhhdCwgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpOwogIHZhciBudW1iZXJMZW5ndGggPSArbGVuZ3RoCiAgICAsIGJ5dGVMZW5ndGggICA9IHRvTGVuZ3RoKG51bWJlckxlbmd0aCk7CiAgaWYobnVtYmVyTGVuZ3RoICE9IGJ5dGVMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpOwogIHJldHVybiBieXRlTGVuZ3RoOwp9OwoKaWYoISR0eXBlZC5BQlYpewogICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCl7CiAgICB2YXIgYnl0ZUxlbmd0aCA9IHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKTsKICAgIHRoaXMuX2IgICAgICAgPSBhcnJheUZpbGwuY2FsbChBcnJheShieXRlTGVuZ3RoKSwgMCk7CiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDsKICB9OwoKICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpewogICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7CiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpOwogICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXQogICAgICAsIG9mZnNldCAgICAgICA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTsKICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTsKICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTsKICAgIGlmKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpOwogICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjsKICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7CiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDsKICB9OwoKICBpZihERVNDUklQVE9SUyl7CiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7CiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpOwogICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpOwogICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpOwogIH0KCiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHsKICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCl7CiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7CiAgICB9LAogICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpewogICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdOwogICAgfSwKICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTsKICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2OwogICAgfSwKICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7CiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pOwogICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdOwogICAgfSwKICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTsKICAgIH0sCiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDsKICAgIH0sCiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7CiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7CiAgICB9LAogICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpOwogICAgfSwKICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpewogICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7CiAgICB9LAogICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXsKICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpOwogICAgfSwKICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfSwKICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7CiAgICB9LAogICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7CiAgICB9LAogICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7CiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTsKICAgIH0sCiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pewogICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7CiAgICB9LAogICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXsKICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pOwogICAgfQogIH0pOwp9IGVsc2UgewogIGlmKCFmYWlscyhmdW5jdGlvbigpewogICAgbmV3ICRBcnJheUJ1ZmZlcjsgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3CiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7CiAgICBuZXcgJEFycmF5QnVmZmVyKC41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKICB9KSl7CiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpewogICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyh0aGlzLCBsZW5ndGgpKTsKICAgIH07CiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdOwogICAgZm9yKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyApewogICAgICBpZighKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTsKICAgIH07CiAgICBpZighTElCUkFSWSlBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyOwogIH0KICAvLyBpT1MgU2FmYXJpIDcueCBidWcKICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSkKICAgICwgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4OwogIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTsKICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7CiAgaWYodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHsKICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpewogICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTsKICAgIH0sCiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpewogICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTsKICAgIH0KICB9LCB0cnVlKTsKfQpzZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7CnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTsKaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpOwpleHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7CmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldzsKfSx7Ii4vX2FuLWluc3RhbmNlIjoxMjgsIi4vX2FycmF5LWZpbGwiOjEzMSwiLi9fZGVzY3JpcHRvcnMiOjE1MCwiLi9fZmFpbHMiOjE1NiwiLi9fZ2xvYmFsIjoxNjAsIi4vX2hpZGUiOjE2MiwiLi9fbGlicmFyeSI6MTgwLCIuL19vYmplY3QtZHAiOjE4OSwiLi9fb2JqZWN0LWdvcG4iOjE5NCwiLi9fcmVkZWZpbmUtYWxsIjoyMDgsIi4vX3NldC10by1zdHJpbmctdGFnIjoyMTQsIi4vX3RvLWludGVnZXIiOjIyOCwiLi9fdG8tbGVuZ3RoIjoyMzAsIi4vX3R5cGVkIjoyMzV9XSwyMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGhpZGUgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJykKICAsIFRZUEVEICA9IHVpZCgndHlwZWRfYXJyYXknKQogICwgVklFVyAgID0gdWlkKCd2aWV3JykKICAsIEFCViAgICA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpCiAgLCBDT05TVFIgPSBBQlYKICAsIGkgPSAwLCBsID0gOSwgVHlwZWQ7Cgp2YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9ICgKICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknCikuc3BsaXQoJywnKTsKCndoaWxlKGkgPCBsKXsKICBpZihUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKXsKICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7CiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7CiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlOwp9Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBBQlY6ICAgIEFCViwKICBDT05TVFI6IENPTlNUUiwKICBUWVBFRDogIFRZUEVELAogIFZJRVc6ICAgVklFVwp9Owp9LHsiLi9fZ2xvYmFsIjoxNjAsIi4vX2hpZGUiOjE2MiwiLi9fdWlkIjoyMzZ9XSwyMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTAzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7ImR1cCI6MTAzfV0sMjM3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwNF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jb3JlIjoxNDUsIi4vX2dsb2JhbCI6MTYwLCIuL19saWJyYXJ5IjoxODAsIi4vX29iamVjdC1kcCI6MTg5LCIuL193a3MtZXh0IjoyMzgsImR1cCI6MTA0fV0sMjM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwNV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL193a3MiOjIzOSwiZHVwIjoxMDV9XSwyMzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTA2XVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2dsb2JhbCI6MTYwLCIuL19zaGFyZWQiOjIxNiwiLi9fdWlkIjoyMzYsImR1cCI6MTA2fV0sMjQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwN11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jbGFzc29mIjoxMzksIi4vX2NvcmUiOjE0NSwiLi9faXRlcmF0b3JzIjoxNzgsIi4vX3drcyI6MjM5LCJkdXAiOjEwN31dLDI0MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGUKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHJlICAgICA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXF4kKis/LigpfFtcXXt9XS9nLCAnXFwkJicpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7ZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpeyByZXR1cm4gJHJlKGl0KTsgfX0pOwoKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19yZXBsYWNlciI6MjEwfV0sMjQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2NvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyl9KTsKCnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjEyNywiLi9fYXJyYXktY29weS13aXRoaW4iOjEzMCwiLi9fZXhwb3J0IjoxNTR9XSwyNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRldmVyeSAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pCiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXsKICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktbWV0aG9kcyI6MTM0LCIuL19leHBvcnQiOjE1NCwiLi9fc3RyaWN0LW1ldGhvZCI6MjE4fV0sMjQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2ZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKX0pOwoKcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTsKfSx7Ii4vX2FkZC10by11bnNjb3BhYmxlcyI6MTI3LCIuL19hcnJheS1maWxsIjoxMzEsIi4vX2V4cG9ydCI6MTU0fV0sMjQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pCiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pewogICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktbWV0aG9kcyI6MTM0LCIuL19leHBvcnQiOjE1NCwiLi9fc3RyaWN0LW1ldGhvZCI6MjE4fV0sMjQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGZpbmQgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KQogICwgS0VZICAgICA9ICdmaW5kSW5kZXgnCiAgLCBmb3JjZWQgID0gdHJ1ZTsKLy8gU2hvdWxkbid0IHNraXAgaG9sZXMKaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pOwokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5JywgewogIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7CiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogIH0KfSk7CnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7Cn0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjEyNywiLi9fYXJyYXktbWV0aG9kcyI6MTM0LCIuL19leHBvcnQiOjE1NH1dLDI0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZmluZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpCiAgLCBLRVkgICAgID0gJ2ZpbmQnCiAgLCBmb3JjZWQgID0gdHJ1ZTsKLy8gU2hvdWxkbid0IHNraXAgaG9sZXMKaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pOwokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5JywgewogIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbi8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXsKICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgfQp9KTsKcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTsKfSx7Ii4vX2FkZC10by11bnNjb3BhYmxlcyI6MTI3LCIuL19hcnJheS1tZXRob2RzIjoxMzQsIi4vX2V4cG9ydCI6MTU0fV0sMjQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCkKICAsIFNUUklDVCAgID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pCiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7CiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktbWV0aG9kcyI6MTM0LCIuL19leHBvcnQiOjE1NCwiLi9fc3RyaWN0LW1ldGhvZCI6MjE4fV0sMjQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEwOF1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19jcmVhdGUtcHJvcGVydHkiOjE0NiwiLi9fY3R4IjoxNDcsIi4vX2V4cG9ydCI6MTU0LCIuL19pcy1hcnJheS1pdGVyIjoxNjgsIi4vX2l0ZXItY2FsbCI6MTczLCIuL19pdGVyLWRldGVjdCI6MTc2LCIuL190by1sZW5ndGgiOjIzMCwiLi9fdG8tb2JqZWN0IjoyMzEsIi4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kIjoyNDAsImR1cCI6MTA4fV0sMjUwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkaW5kZXhPZiAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSkKICAsICRuYXRpdmUgICAgICAgPSBbXS5pbmRleE9mCiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pCiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggPSAwICovKXsKICAgIHJldHVybiBORUdBVElWRV9aRVJPCiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzAKICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMAogICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LWluY2x1ZGVzIjoxMzMsIi4vX2V4cG9ydCI6MTU0LCIuL19zdHJpY3QtbWV0aG9kIjoyMTh9XSwyNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHtpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9faXMtYXJyYXkiOjE2OX1dLDI1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMDldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoxMjcsIi4vX2l0ZXItZGVmaW5lIjoxNzUsIi4vX2l0ZXItc3RlcCI6MTc3LCIuL19pdGVyYXRvcnMiOjE3OCwiLi9fdG8taW9iamVjdCI6MjI5LCJkdXAiOjEwOX1dLDI1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcikKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JykKICAsIGFycmF5Sm9pbiA9IFtdLmpvaW47CgovLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5ncwokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHsKICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7CiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19pb2JqZWN0IjoxNjcsIi4vX3N0cmljdC1tZXRob2QiOjIxOCwiLi9fdG8taW9iamVjdCI6MjI5fV0sMjU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b0lPYmplY3QgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCB0b0ludGVnZXIgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpCiAgLCB0b0xlbmd0aCAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsICRuYXRpdmUgICAgICAgPSBbXS5sYXN0SW5kZXhPZgogICwgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pCiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IEBbKi0xXSAqLyl7CiAgICAvLyBjb252ZXJ0IC0wIHRvICswCiAgICBpZihORUdBVElWRV9aRVJPKXJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDsKICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QodGhpcykKICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCkKICAgICAgLCBpbmRleCAgPSBsZW5ndGggLSAxOwogICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+IDEpaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpOwogICAgaWYoaW5kZXggPCAwKWluZGV4ID0gbGVuZ3RoICsgaW5kZXg7CiAgICBmb3IoO2luZGV4ID49IDA7IGluZGV4LS0paWYoaW5kZXggaW4gTylpZihPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudClyZXR1cm4gaW5kZXggfHwgMDsKICAgIHJldHVybiAtMTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX3N0cmljdC1tZXRob2QiOjIxOCwiLi9fdG8taW50ZWdlciI6MjI4LCIuL190by1pb2JqZWN0IjoyMjksIi4vX3RvLWxlbmd0aCI6MjMwfV0sMjU1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkbWFwICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKQogIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXsKICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEzNCwiLi9fZXhwb3J0IjoxNTQsIi4vX3N0cmljdC1tZXRob2QiOjIxOH1dLDI1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7CgovLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpYwokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICBmdW5jdGlvbiBGKCl7fQogIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTsKfSksICdBcnJheScsIHsKICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpCiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pewogICAgdmFyIGluZGV4ICA9IDAKICAgICAgLCBhTGVuICAgPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTsKICAgIHdoaWxlKGFMZW4gPiBpbmRleCljcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pOwogICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47CiAgICByZXR1cm4gcmVzdWx0OwogIH0KfSk7Cn0seyIuL19jcmVhdGUtcHJvcGVydHkiOjE0NiwiLi9fZXhwb3J0IjoxNTQsIi4vX2ZhaWxzIjoxNTZ9XSwyNTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSkKICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7CiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpOwogIH0KfSk7Cn0seyIuL19hcnJheS1yZWR1Y2UiOjEzNSwiLi9fZXhwb3J0IjoxNTQsIi4vX3N0cmljdC1tZXRob2QiOjIxOH1dLDI1ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHsKICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pCiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7CiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTsKICB9Cn0pOwp9LHsiLi9fYXJyYXktcmVkdWNlIjoxMzUsIi4vX2V4cG9ydCI6MTU0LCIuL19zdHJpY3QtbWV0aG9kIjoyMTh9XSwyNTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGh0bWwgICAgICAgPSByZXF1aXJlKCcuL19odG1sJykKICAsIGNvZiAgICAgICAgPSByZXF1aXJlKCcuL19jb2YnKQogICwgdG9JbmRleCAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JykKICAsIHRvTGVuZ3RoICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlOwoKLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0cwokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICBpZihodG1sKWFycmF5U2xpY2UuY2FsbChodG1sKTsKfSksICdBcnJheScsIHsKICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCl7CiAgICB2YXIgbGVuICAgPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCkKICAgICAgLCBrbGFzcyA9IGNvZih0aGlzKTsKICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kOwogICAgaWYoa2xhc3MgPT0gJ0FycmF5JylyZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpOwogICAgdmFyIHN0YXJ0ICA9IHRvSW5kZXgoYmVnaW4sIGxlbikKICAgICAgLCB1cFRvICAgPSB0b0luZGV4KGVuZCwgbGVuKQogICAgICAsIHNpemUgICA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCkKICAgICAgLCBjbG9uZWQgPSBBcnJheShzaXplKQogICAgICAsIGkgICAgICA9IDA7CiAgICBmb3IoOyBpIDwgc2l6ZTsgaSsrKWNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnCiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKQogICAgICA6IHRoaXNbc3RhcnQgKyBpXTsKICAgIHJldHVybiBjbG9uZWQ7CiAgfQp9KTsKfSx7Ii4vX2NvZiI6MTQwLCIuL19leHBvcnQiOjE1NCwiLi9fZmFpbHMiOjE1NiwiLi9faHRtbCI6MTYzLCIuL190by1pbmRleCI6MjI3LCIuL190by1sZW5ndGgiOjIzMH1dLDI2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHNvbWUgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5JywgewogIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKQogIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pewogICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7CiAgfQp9KTsKfSx7Ii4vX2FycmF5LW1ldGhvZHMiOjEzNCwiLi9fZXhwb3J0IjoxNTQsIi4vX3N0cmljdC1tZXRob2QiOjIxOH1dLDI2MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJykKICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCBmYWlscyAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCAkc29ydCAgICAgPSBbXS5zb3J0CiAgLCB0ZXN0ICAgICAgPSBbMSwgMiwgM107CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpewogIC8vIElFOC0KICB0ZXN0LnNvcnQodW5kZWZpbmVkKTsKfSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7CiAgLy8gVjggYnVnCiAgdGVzdC5zb3J0KG51bGwpOwogIC8vIE9sZCBXZWJLaXQKfSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7CiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbikKICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7CiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWQKICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKQogICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTsKICB9Cn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MTI1LCIuL19leHBvcnQiOjE1NCwiLi9fZmFpbHMiOjE1NiwiLi9fc3RyaWN0LW1ldGhvZCI6MjE4LCIuL190by1vYmplY3QiOjIzMX1dLDI2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7Cn0seyIuL19zZXQtc3BlY2llcyI6MjEzfV0sMjYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7bm93OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH19KTsKfSx7Ii4vX2V4cG9ydCI6MTU0fV0sMjY0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICwgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7Cgp2YXIgbHogPSBmdW5jdGlvbihudW0pewogIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtOwp9OwoKLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIG5ldyBEYXRlKC01ZTEzIC0gMSkudG9JU09TdHJpbmcoKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJzsKfSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7CiAgbmV3IERhdGUoTmFOKS50b0lTT1N0cmluZygpOwp9KSksICdEYXRlJywgewogIHRvSVNPU3RyaW5nOiBmdW5jdGlvbiB0b0lTT1N0cmluZygpewogICAgaWYoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7CiAgICB2YXIgZCA9IHRoaXMKICAgICAgLCB5ID0gZC5nZXRVVENGdWxsWWVhcigpCiAgICAgICwgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCkKICAgICAgLCBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnOwogICAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgKwogICAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArCiAgICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgKwogICAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJzsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX2ZhaWxzIjoxNTZ9XSwyNjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpCiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGwgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoe3RvSVNPU3RyaW5nOiBmdW5jdGlvbigpeyByZXR1cm4gMTsgfX0pICE9PSAxOwp9KSwgJ0RhdGUnLCB7CiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KXsKICAgIHZhciBPICA9IHRvT2JqZWN0KHRoaXMpCiAgICAgICwgcHYgPSB0b1ByaW1pdGl2ZShPKTsKICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19mYWlscyI6MTU2LCIuL190by1vYmplY3QiOjIzMSwiLi9fdG8tcHJpbWl0aXZlIjoyMzJ9XSwyNjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJykKICAsIHByb3RvICAgICAgICA9IERhdGUucHJvdG90eXBlOwoKaWYoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKXJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTsKfSx7Ii4vX2RhdGUtdG8tcHJpbWl0aXZlIjoxNDgsIi4vX2hpZGUiOjE2MiwiLi9fd2tzIjoyMzl9XSwyNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgRGF0ZVByb3RvICAgID0gRGF0ZS5wcm90b3R5cGUKICAsIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnCiAgLCBUT19TVFJJTkcgICAgPSAndG9TdHJpbmcnCiAgLCAkdG9TdHJpbmcgICAgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXQogICwgZ2V0VGltZSAgICAgID0gRGF0ZVByb3RvLmdldFRpbWU7CmlmKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpewogIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7CiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7CiAgfSk7Cn0KfSx7Ii4vX3JlZGVmaW5lIjoyMDl9XSwyNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywge2JpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKX0pOwp9LHsiLi9fYmluZCI6MTM4LCIuL19leHBvcnQiOjE1NH1dLDI2OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBIQVNfSU5TVEFOQ0UgICA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpCiAgLCBGdW5jdGlvblByb3RvICA9IEZ1bmN0aW9uLnByb3RvdHlwZTsKLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpCmlmKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7dmFsdWU6IGZ1bmN0aW9uKE8pewogIGlmKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKXJldHVybiBmYWxzZTsKICBpZighaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKXJldHVybiBPIGluc3RhbmNlb2YgdGhpczsKICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOgogIHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSlpZih0aGlzLnByb3RvdHlwZSA9PT0gTylyZXR1cm4gdHJ1ZTsKICByZXR1cm4gZmFsc2U7Cn19KTsKfSx7Ii4vX2lzLW9iamVjdCI6MTcxLCIuL19vYmplY3QtZHAiOjE4OSwiLi9fb2JqZWN0LWdwbyI6MTk2LCIuL193a3MiOjIzOX1dLDI3MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZgogICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKQogICwgaGFzICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCBGUHJvdG8gICAgID0gRnVuY3Rpb24ucHJvdG90eXBlCiAgLCBuYW1lUkUgICAgID0gL15ccypmdW5jdGlvbiAoW14gKF0qKS8KICAsIE5BTUUgICAgICAgPSAnbmFtZSc7Cgp2YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpewogIHJldHVybiB0cnVlOwp9OwoKLy8gMTkuMi40LjIgbmFtZQpOQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwgewogIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uKCl7CiAgICB0cnkgewogICAgICB2YXIgdGhhdCA9IHRoaXMKICAgICAgICAsIG5hbWUgPSAoJycgKyB0aGF0KS5tYXRjaChuYW1lUkUpWzFdOwogICAgICBoYXModGhhdCwgTkFNRSkgfHwgIWlzRXh0ZW5zaWJsZSh0aGF0KSB8fCBkUCh0aGF0LCBOQU1FLCBjcmVhdGVEZXNjKDUsIG5hbWUpKTsKICAgICAgcmV0dXJuIG5hbWU7CiAgICB9IGNhdGNoKGUpewogICAgICByZXR1cm4gJyc7CiAgICB9CiAgfQp9KTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjoxNTAsIi4vX2hhcyI6MTYxLCIuL19vYmplY3QtZHAiOjE4OSwiLi9fcHJvcGVydHktZGVzYyI6MjA3fV0sMjcxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTsKCi8vIDIzLjEgTWFwIE9iamVjdHMKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ01hcCcsIGZ1bmN0aW9uKGdldCl7CiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTsKfSwgewogIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSkKICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpewogICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHRoaXMsIGtleSk7CiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjsKICB9LAogIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpCiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7CiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7CiAgfQp9LCBzdHJvbmcsIHRydWUpOwp9LHsiLi9fY29sbGVjdGlvbiI6MTQ0LCIuL19jb2xsZWN0aW9uLXN0cm9uZyI6MTQxfV0sMjcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBsb2cxcCAgID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpCiAgLCBzcXJ0ICAgID0gTWF0aC5zcXJ0CiAgLCAkYWNvc2ggID0gTWF0aC5hY29zaDsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2gKICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5CiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMAogIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOIAogICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHkKKSwgJ01hdGgnLCB7CiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpewogICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NgogICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjIKICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fbWF0aC1sb2cxcCI6MTgyfV0sMjczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkYXNpbmggID0gTWF0aC5hc2luaDsKCmZ1bmN0aW9uIGFzaW5oKHgpewogIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTsKfQoKLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wIAokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7YXNpbmg6IGFzaW5ofSk7Cn0seyIuL19leHBvcnQiOjE1NH1dLDI3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi43IE1hdGguYXRhbmgoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGF0YW5oICA9IE1hdGguYXRhbmg7CgovLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDAgCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7CiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpewogICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTR9XSwyNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuOSBNYXRoLmNicnQoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgc2lnbiAgICA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCl7CiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX21hdGgtc2lnbiI6MTgzfV0sMjc2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCl7CiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0fV0sMjc3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBleHAgICAgID0gTWF0aC5leHA7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgY29zaDogZnVuY3Rpb24gY29zaCh4KXsKICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0fV0sMjc4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGV4cG0xICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTsKCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7ZXhwbTE6ICRleHBtMX0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX21hdGgtZXhwbTEiOjE4MX1dLDI3OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KQp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHNpZ24gICAgICA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpCiAgLCBwb3cgICAgICAgPSBNYXRoLnBvdwogICwgRVBTSUxPTiAgID0gcG93KDIsIC01MikKICAsIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpCiAgLCBNQVgzMiAgICAgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKQogICwgTUlOMzIgICAgID0gcG93KDIsIC0xMjYpOwoKdmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uKG4pewogIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjsKfTsKCgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgZnJvdW5kOiBmdW5jdGlvbiBmcm91bmQoeCl7CiAgICB2YXIgJGFicyAgPSBNYXRoLmFicyh4KQogICAgICAsICRzaWduID0gc2lnbih4KQogICAgICAsIGEsIHJlc3VsdDsKICAgIGlmKCRhYnMgPCBNSU4zMilyZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyOwogICAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzOwogICAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7CiAgICBpZihyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KXJldHVybiAkc2lnbiAqIEluZmluaXR5OwogICAgcmV0dXJuICRzaWduICogcmVzdWx0OwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fbWF0aC1zaWduIjoxODN9XSwyODA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYWJzICAgICA9IE1hdGguYWJzOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKICAgIHZhciBzdW0gID0gMAogICAgICAsIGkgICAgPSAwCiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCBsYXJnID0gMAogICAgICAsIGFyZywgZGl2OwogICAgd2hpbGUoaSA8IGFMZW4pewogICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pOwogICAgICBpZihsYXJnIDwgYXJnKXsKICAgICAgICBkaXYgID0gbGFyZyAvIGFyZzsKICAgICAgICBzdW0gID0gc3VtICogZGl2ICogZGl2ICsgMTsKICAgICAgICBsYXJnID0gYXJnOwogICAgICB9IGVsc2UgaWYoYXJnID4gMCl7CiAgICAgICAgZGl2ICA9IGFyZyAvIGxhcmc7CiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjsKICAgICAgfSBlbHNlIHN1bSArPSBhcmc7CiAgICB9CiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTR9XSwyODE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRpbXVsICAgPSBNYXRoLmltdWw7CgovLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7Cn0pLCAnTWF0aCcsIHsKICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpewogICAgdmFyIFVJTlQxNiA9IDB4ZmZmZgogICAgICAsIHhuID0gK3gKICAgICAgLCB5biA9ICt5CiAgICAgICwgeGwgPSBVSU5UMTYgJiB4bgogICAgICAsIHlsID0gVUlOVDE2ICYgeW47CiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fZmFpbHMiOjE1Nn1dLDI4MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpewogICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NH1dLDI4MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7bG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKX0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX21hdGgtbG9nMXAiOjE4Mn1dLDI4NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpewogICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0fV0sMjg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge3NpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fbWF0aC1zaWduIjoxODN9XSwyODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJykKICAsIGV4cCAgICAgPSBNYXRoLmV4cDsKCi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVycwokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNzsKfSksICdNYXRoJywgewogIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCl7CiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDEKICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMgogICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fZmFpbHMiOjE1NiwiLi9fbWF0aC1leHBtMSI6MTgxfV0sMjg3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBleHBtMSAgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpCiAgLCBleHAgICAgID0gTWF0aC5leHA7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KXsKICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KQogICAgICAsIGIgPSBleHBtMSgteCk7CiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fbWF0aC1leHBtMSI6MTgxfV0sMjg4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeCkKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpewogICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0fV0sMjg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgaGFzICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKQogICwgY29mICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jb2YnKQogICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJykKICAsIHRvUHJpbWl0aXZlICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykKICAsIGZhaWxzICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKQogICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYKICAsIGdPUEQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mCiAgLCBkUCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYKICAsICR0cmltICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltCiAgLCBOVU1CRVIgICAgICAgICAgICA9ICdOdW1iZXInCiAgLCAkTnVtYmVyICAgICAgICAgICA9IGdsb2JhbFtOVU1CRVJdCiAgLCBCYXNlICAgICAgICAgICAgICA9ICROdW1iZXIKICAsIHByb3RvICAgICAgICAgICAgID0gJE51bWJlci5wcm90b3R5cGUKICAvLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmcKICAsIEJST0tFTl9DT0YgICAgICAgID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUgogICwgVFJJTSAgICAgICAgICAgICAgPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTsKCi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KQp2YXIgdG9OdW1iZXIgPSBmdW5jdGlvbihhcmd1bWVudCl7CiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTsKICBpZih0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMil7CiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7CiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApCiAgICAgICwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlOwogICAgaWYoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSl7CiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTsKICAgICAgaWYodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeAogICAgfSBlbHNlIGlmKGZpcnN0ID09PSA0OCl7CiAgICAgIHN3aXRjaChpdC5jaGFyQ29kZUF0KDEpKXsKICAgICAgICBjYXNlIDY2IDogY2FzZSA5OCAgOiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pCiAgICAgICAgY2FzZSA3OSA6IGNhc2UgMTExIDogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2kKICAgICAgICBkZWZhdWx0IDogcmV0dXJuICtpdDsKICAgICAgfQogICAgICBmb3IodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspewogICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTsKICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2wKICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9scwogICAgICAgIGlmKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSlyZXR1cm4gTmFOOwogICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTsKICAgIH0KICB9IHJldHVybiAraXQ7Cn07CgppZighJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpewogICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpewogICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWUKICAgICAgLCB0aGF0ID0gdGhpczsKICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlcgogICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2UKICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbigpeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUikKICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpOwogIH07CiAgZm9yKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoCiAgICAvLyBFUzM6CiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArCiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKToKICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArCiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcicKICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKXsKICAgIGlmKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpewogICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7CiAgICB9CiAgfQogICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87CiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyOwogIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpOwp9Cn0seyIuL19jb2YiOjE0MCwiLi9fZGVzY3JpcHRvcnMiOjE1MCwiLi9fZmFpbHMiOjE1NiwiLi9fZ2xvYmFsIjoxNjAsIi4vX2hhcyI6MTYxLCIuL19pbmhlcml0LWlmLXJlcXVpcmVkIjoxNjUsIi4vX29iamVjdC1jcmVhdGUiOjE4OCwiLi9fb2JqZWN0LWRwIjoxODksIi4vX29iamVjdC1nb3BkIjoxOTIsIi4vX29iamVjdC1nb3BuIjoxOTQsIi4vX3JlZGVmaW5lIjoyMDksIi4vX3N0cmluZy10cmltIjoyMjQsIi4vX3RvLXByaW1pdGl2ZSI6MjMyfV0sMjkwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT04KdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge0VQU0lMT046IE1hdGgucG93KDIsIC01Mil9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0fV0sMjkxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcikKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgewogIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCl7CiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19nbG9iYWwiOjE2MH1dLDI5MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7aXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyl9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19pcy1pbnRlZ2VyIjoxNzB9XSwyOTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKQp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7CiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcil7CiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTR9XSwyOTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpCiAgLCBhYnMgICAgICAgPSBNYXRoLmFiczsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgewogIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKXsKICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9faXMtaW50ZWdlciI6MTcwfV0sMjk1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmZ9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0fV0sMjk2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZn0pOwp9LHsiLi9fZXhwb3J0IjoxNTR9XSwyOTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpOwovLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19wYXJzZS1mbG9hdCI6MjAzfV0sMjk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTsKLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHtwYXJzZUludDogJHBhcnNlSW50fSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fcGFyc2UtaW50IjoyMDR9XSwyOTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9JbnRlZ2VyICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpCiAgLCBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpCiAgLCByZXBlYXQgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0JykKICAsICR0b0ZpeGVkICAgICA9IDEuLnRvRml4ZWQKICAsIGZsb29yICAgICAgICA9IE1hdGguZmxvb3IKICAsIGRhdGEgICAgICAgICA9IFswLCAwLCAwLCAwLCAwLCAwXQogICwgRVJST1IgICAgICAgID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnCiAgLCBaRVJPICAgICAgICAgPSAnMCc7Cgp2YXIgbXVsdGlwbHkgPSBmdW5jdGlvbihuLCBjKXsKICB2YXIgaSAgPSAtMQogICAgLCBjMiA9IGM7CiAgd2hpbGUoKytpIDwgNil7CiAgICBjMiArPSBuICogZGF0YVtpXTsKICAgIGRhdGFbaV0gPSBjMiAlIDFlNzsKICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpOwogIH0KfTsKdmFyIGRpdmlkZSA9IGZ1bmN0aW9uKG4pewogIHZhciBpID0gNgogICAgLCBjID0gMDsKICB3aGlsZSgtLWkgPj0gMCl7CiAgICBjICs9IGRhdGFbaV07CiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pOwogICAgYyA9IChjICUgbikgKiAxZTc7CiAgfQp9Owp2YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbigpewogIHZhciBpID0gNgogICAgLCBzID0gJyc7CiAgd2hpbGUoLS1pID49IDApewogICAgaWYocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKXsKICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7CiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7CiAgICB9CiAgfSByZXR1cm4gczsKfTsKdmFyIHBvdyA9IGZ1bmN0aW9uKHgsIG4sIGFjYyl7CiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpOwp9Owp2YXIgbG9nID0gZnVuY3Rpb24oeCl7CiAgdmFyIG4gID0gMAogICAgLCB4MiA9IHg7CiAgd2hpbGUoeDIgPj0gNDA5Nil7CiAgICBuICs9IDEyOwogICAgeDIgLz0gNDA5NjsKICB9CiAgd2hpbGUoeDIgPj0gMil7CiAgICBuICArPSAxOwogICAgeDIgLz0gMjsKICB9IHJldHVybiBuOwp9OwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoCiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8CiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fAogIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fAogIDEwMDAwMDAwMDAwMDAwMDAxMjguLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4JwopIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgLy8gVjggfiBBbmRyb2lkIDQuMy0KICAkdG9GaXhlZC5jYWxsKHt9KTsKfSkpLCAnTnVtYmVyJywgewogIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpewogICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpCiAgICAgICwgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cykKICAgICAgLCBzID0gJycKICAgICAgLCBtID0gWkVSTwogICAgICAsIGUsIHosIGosIGs7CiAgICBpZihmIDwgMCB8fCBmID4gMjApdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7CiAgICBpZih4ICE9IHgpcmV0dXJuICdOYU4nOwogICAgaWYoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpcmV0dXJuIFN0cmluZyh4KTsKICAgIGlmKHggPCAwKXsKICAgICAgcyA9ICctJzsKICAgICAgeCA9IC14OwogICAgfQogICAgaWYoeCA+IDFlLTIxKXsKICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTsKICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpOwogICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7CiAgICAgIGUgPSA1MiAtIGU7CiAgICAgIGlmKGUgPiAwKXsKICAgICAgICBtdWx0aXBseSgwLCB6KTsKICAgICAgICBqID0gZjsKICAgICAgICB3aGlsZShqID49IDcpewogICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTsKICAgICAgICAgIGogLT0gNzsKICAgICAgICB9CiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7CiAgICAgICAgaiA9IGUgLSAxOwogICAgICAgIHdoaWxlKGogPj0gMjMpewogICAgICAgICAgZGl2aWRlKDEgPDwgMjMpOwogICAgICAgICAgaiAtPSAyMzsKICAgICAgICB9CiAgICAgICAgZGl2aWRlKDEgPDwgaik7CiAgICAgICAgbXVsdGlwbHkoMSwgMSk7CiAgICAgICAgZGl2aWRlKDIpOwogICAgICAgIG0gPSBudW1Ub1N0cmluZygpOwogICAgICB9IGVsc2UgewogICAgICAgIG11bHRpcGx5KDAsIHopOwogICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApOwogICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7CiAgICAgIH0KICAgIH0KICAgIGlmKGYgPiAwKXsKICAgICAgayA9IG0ubGVuZ3RoOwogICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpOwogICAgfSBlbHNlIHsKICAgICAgbSA9IHMgKyBtOwogICAgfSByZXR1cm4gbTsKICB9Cn0pOwp9LHsiLi9fYS1udW1iZXItdmFsdWUiOjEyNiwiLi9fZXhwb3J0IjoxNTQsIi4vX2ZhaWxzIjoxNTYsIi4vX3N0cmluZy1yZXBlYXQiOjIyMywiLi9fdG8taW50ZWdlciI6MjI4fV0sMzAwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRmYWlscyAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJykKICAsIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJykKICAsICR0b1ByZWNpc2lvbiA9IDEuLnRvUHJlY2lzaW9uOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uKCl7CiAgLy8gSUU3LQogIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7Cn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24oKXsKICAvLyBWOCB+IEFuZHJvaWQgNC4zLQogICR0b1ByZWNpc2lvbi5jYWxsKHt9KTsKfSkpLCAnTnVtYmVyJywgewogIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pewogICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7CiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7IAogIH0KfSk7Cn0seyIuL19hLW51bWJlci12YWx1ZSI6MTI2LCIuL19leHBvcnQiOjE1NCwiLi9fZmFpbHMiOjE1Nn1dLDMwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMTBdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX29iamVjdC1hc3NpZ24iOjE4NywiZHVwIjoxMTB9XSwzMDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTExXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19vYmplY3QtY3JlYXRlIjoxODgsImR1cCI6MTExfV0sMzAzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKX0pOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjE1MCwiLi9fZXhwb3J0IjoxNTQsIi4vX29iamVjdC1kcHMiOjE5MH1dLDMwNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMTJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fZGVzY3JpcHRvcnMiOjE1MCwiLi9fZXhwb3J0IjoxNTQsIi4vX29iamVjdC1kcCI6MTg5LCJkdXAiOjExMn1dLDMwNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTykKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIG1ldGEgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplOwoKcmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbigkZnJlZXplKXsKICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KXsKICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjE3MSwiLi9fbWV0YSI6MTg0LCIuL19vYmplY3Qtc2FwIjoyMDB9XSwzMDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTEzXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX29iamVjdC1nb3BkIjoxOTIsIi4vX29iamVjdC1zYXAiOjIwMCwiLi9fdG8taW9iamVjdCI6MjI5LCJkdXAiOjExM31dLDMwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uKCl7CiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7Cn0pOwp9LHsiLi9fb2JqZWN0LWdvcG4tZXh0IjoxOTMsIi4vX29iamVjdC1zYXAiOjIwMH1dLDMwODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMTRdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fb2JqZWN0LWdwbyI6MTk2LCIuL19vYmplY3Qtc2FwIjoyMDAsIi4vX3RvLW9iamVjdCI6MjMxLCJkdXAiOjExNH1dLDMwOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpOwoKcmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbigkaXNFeHRlbnNpYmxlKXsKICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXsKICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjE3MSwiLi9fb2JqZWN0LXNhcCI6MjAwfV0sMzEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzExNV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19pcy1vYmplY3QiOjE3MSwiLi9fb2JqZWN0LXNhcCI6MjAwLCJkdXAiOjExNX1dLDMxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTykKdmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24oJGlzU2VhbGVkKXsKICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpewogICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7CiAgfTsKfSk7Cn0seyIuL19pcy1vYmplY3QiOjE3MSwiLi9fb2JqZWN0LXNhcCI6MjAwfV0sMzEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMikKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7aXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKX0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX3NhbWUtdmFsdWUiOjIxMX1dLDMxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMTZdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fb2JqZWN0LWtleXMiOjE5OCwiLi9fb2JqZWN0LXNhcCI6MjAwLCIuL190by1vYmplY3QiOjIzMSwiZHVwIjoxMTZ9XSwzMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pCnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTsKCnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbigkcHJldmVudEV4dGVuc2lvbnMpewogIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCl7CiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDsKICB9Owp9KTsKfSx7Ii4vX2lzLW9iamVjdCI6MTcxLCIuL19tZXRhIjoxODQsIi4vX29iamVjdC1zYXAiOjIwMH1dLDMxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKQp2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7CgpyZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbigkc2VhbCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpewogICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0OwogIH07Cn0pOwp9LHsiLi9faXMtb2JqZWN0IjoxNzEsIi4vX21ldGEiOjE4NCwiLi9fb2JqZWN0LXNhcCI6MjAwfV0sMzE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzExN11bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19leHBvcnQiOjE1NCwiLi9fc2V0LXByb3RvIjoyMTIsImR1cCI6MTE3fV0sMzE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKCkKdmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJykKICAsIHRlc3QgICAgPSB7fTsKdGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7CmlmKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpewogIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXsKICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJzsKICB9LCB0cnVlKTsKfQp9LHsiLi9fY2xhc3NvZiI6MTM5LCIuL19yZWRlZmluZSI6MjA5LCIuL193a3MiOjIzOX1dLDMxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7Ci8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZykKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX3BhcnNlLWZsb2F0IjoyMDN9XSwzMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpOwovLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeCkKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19wYXJzZS1pbnQiOjIwNH1dLDMyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMTldWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fYS1mdW5jdGlvbiI6MTI1LCIuL19hbi1pbnN0YW5jZSI6MTI4LCIuL19jbGFzc29mIjoxMzksIi4vX2NvcmUiOjE0NSwiLi9fY3R4IjoxNDcsIi4vX2V4cG9ydCI6MTU0LCIuL19mb3Itb2YiOjE1OSwiLi9fZ2xvYmFsIjoxNjAsIi4vX2lzLW9iamVjdCI6MTcxLCIuL19pdGVyLWRldGVjdCI6MTc2LCIuL19saWJyYXJ5IjoxODAsIi4vX21pY3JvdGFzayI6MTg2LCIuL19yZWRlZmluZS1hbGwiOjIwOCwiLi9fc2V0LXNwZWNpZXMiOjIxMywiLi9fc2V0LXRvLXN0cmluZy10YWciOjIxNCwiLi9fc3BlY2llcy1jb25zdHJ1Y3RvciI6MjE3LCIuL190YXNrIjoyMjYsIi4vX3drcyI6MjM5LCJkdXAiOjExOX1dLDMyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KQp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgYW5PYmplY3QgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHJBcHBseSAgICA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseQogICwgZkFwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHk7Ci8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbAokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgckFwcGx5KGZ1bmN0aW9uKCl7fSk7Cn0pLCAnUmVmbGVjdCcsIHsKICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpewogICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KQogICAgICAsIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTsKICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7CiAgfQp9KTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjEyNSwiLi9fYW4tb2JqZWN0IjoxMjksIi4vX2V4cG9ydCI6MTU0LCIuL19mYWlscyI6MTU2LCIuL19nbG9iYWwiOjE2MH1dLDMyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSkKdmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgY3JlYXRlICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKQogICwgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgYW5PYmplY3QgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBpc09iamVjdCAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JykKICAsIGZhaWxzICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpCiAgLCBiaW5kICAgICAgID0gcmVxdWlyZSgnLi9fYmluZCcpCiAgLCByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDsKCi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbAovLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0CnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uKCl7CiAgZnVuY3Rpb24gRigpe30KICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uKCl7fSwgW10sIEYpIGluc3RhbmNlb2YgRik7Cn0pOwp2YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24oKXsKICByQ29uc3RydWN0KGZ1bmN0aW9uKCl7fSk7Cn0pOwoKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHsKICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyosIG5ld1RhcmdldCovKXsKICAgIGFGdW5jdGlvbihUYXJnZXQpOwogICAgYW5PYmplY3QoYXJncyk7CiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTsKICAgIGlmKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRylyZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7CiAgICBpZihUYXJnZXQgPT0gbmV3VGFyZ2V0KXsKICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHMKICAgICAgc3dpdGNoKGFyZ3MubGVuZ3RoKXsKICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0OwogICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7CiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTsKICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pOwogICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7CiAgICAgIH0KICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2UKICAgICAgdmFyICRhcmdzID0gW251bGxdOwogICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTsKICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSk7CiAgICB9CiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnMKICAgIHZhciBwcm90byAgICA9IG5ld1RhcmdldC5wcm90b3R5cGUKICAgICAgLCBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpCiAgICAgICwgcmVzdWx0ICAgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpOwogICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTsKICB9Cn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MTI1LCIuL19hbi1vYmplY3QiOjEyOSwiLi9fYmluZCI6MTM4LCIuL19leHBvcnQiOjE1NCwiLi9fZmFpbHMiOjE1NiwiLi9fZ2xvYmFsIjoxNjAsIi4vX2lzLW9iamVjdCI6MTcxLCIuL19vYmplY3QtY3JlYXRlIjoxODh9XSwzMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKQp2YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKQogICwgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTsKCi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2UKJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7CiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7dmFsdWU6IDF9KSwgMSwge3ZhbHVlOiAyfSk7Cn0pLCAnUmVmbGVjdCcsIHsKICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyl7CiAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7CiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTsKICAgIHRyeSB7CiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7CiAgICAgIHJldHVybiB0cnVlOwogICAgfSBjYXRjaChlKXsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fZXhwb3J0IjoxNTQsIi4vX2ZhaWxzIjoxNTYsIi4vX29iamVjdC1kcCI6MTg5LCIuL190by1wcmltaXRpdmUiOjIzMn1dLDMyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBnT1BEICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZgogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSl7CiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpOwogICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTsKICB9Cn0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjksIi4vX2V4cG9ydCI6MTU0LCIuL19vYmplY3QtZ29wZCI6MTkyfV0sMzI1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KQp2YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKdmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uKGl0ZXJhdGVkKXsKICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXQKICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4CiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW10gICAgICAgLy8ga2V5cwogICAgLCBrZXk7CiAgZm9yKGtleSBpbiBpdGVyYXRlZClrZXlzLnB1c2goa2V5KTsKfTsKcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbigpewogIHZhciB0aGF0ID0gdGhpcwogICAgLCBrZXlzID0gdGhhdC5fawogICAgLCBrZXk7CiAgZG8gewogICAgaWYodGhhdC5faSA+PSBrZXlzLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9OwogIH0gd2hpbGUoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7CiAgcmV0dXJuIHt2YWx1ZToga2V5LCBkb25lOiBmYWxzZX07Cn0pOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCl7CiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fZXhwb3J0IjoxNTQsIi4vX2l0ZXItY3JlYXRlIjoxNzR9XSwzMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkKdmFyIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICwgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KXsKICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fZXhwb3J0IjoxNTQsIi4vX29iamVjdC1nb3BkIjoxOTJ9XSwzMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKQogICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsKICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KXsKICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTsKICB9Cn0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjksIi4vX2V4cG9ydCI6MTU0LCIuL19vYmplY3QtZ3BvIjoxOTZ9XSwzMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pCnZhciBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykKICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpCiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpOwoKZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkvKiwgcmVjZWl2ZXIqLyl7CiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl0KICAgICwgZGVzYywgcHJvdG87CiAgaWYoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07CiAgaWYoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSlyZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpCiAgICA/IGRlc2MudmFsdWUKICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZAogICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpCiAgICAgIDogdW5kZWZpbmVkOwogIGlmKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTsKfQoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge2dldDogZ2V0fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fZXhwb3J0IjoxNTQsIi4vX2hhcyI6MTYxLCIuL19pcy1vYmplY3QiOjE3MSwiLi9fb2JqZWN0LWdvcGQiOjE5MiwiLi9fb2JqZWN0LWdwbyI6MTk2fV0sMzI5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSl7CiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0OwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NH1dLDMzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KQp2YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBhbk9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCl7CiAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlOwogIH0KfSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fZXhwb3J0IjoxNTR9XSwzMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7b3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKX0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX293bi1rZXlzIjoyMDJ9XSwzMzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KQp2YXIgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGFuT2JqZWN0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7CgokZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7CiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCl7CiAgICBhbk9iamVjdCh0YXJnZXQpOwogICAgdHJ5IHsKICAgICAgaWYoJHByZXZlbnRFeHRlbnNpb25zKSRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjksIi4vX2V4cG9ydCI6MTU0fV0sMzMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpOwoKaWYoc2V0UHJvdG8pJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgewogIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKXsKICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pOwogICAgdHJ5IHsKICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX3NldC1wcm90byI6MjEyfV0sMzM0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSkKdmFyIGRQICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykKICAsIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKQogICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJykKICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpCiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpOwoKZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYvKiwgcmVjZWl2ZXIqLyl7CiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM10KICAgICwgb3duRGVzYyAgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpCiAgICAsIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87CiAgaWYoIW93bkRlc2MpewogICAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSl7CiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7CiAgICB9CiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTsKICB9CiAgaWYoaGFzKG93bkRlc2MsICd2YWx1ZScpKXsKICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlOwogICAgZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkgfHwgY3JlYXRlRGVzYygwKTsKICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7CiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTsKICAgIHJldHVybiB0cnVlOwogIH0KICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTsKfQoKJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge3NldDogc2V0fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fZXhwb3J0IjoxNTQsIi4vX2hhcyI6MTYxLCIuL19pcy1vYmplY3QiOjE3MSwiLi9fb2JqZWN0LWRwIjoxODksIi4vX29iamVjdC1nb3BkIjoxOTIsIi4vX29iamVjdC1ncG8iOjE5NiwiLi9fcHJvcGVydHktZGVzYyI6MjA3fV0sMzM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpCiAgLCBkUCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYKICAsIGdPUE4gICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mCiAgLCBpc1JlZ0V4cCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpCiAgLCAkZmxhZ3MgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJykKICAsICRSZWdFeHAgICAgICAgICAgID0gZ2xvYmFsLlJlZ0V4cAogICwgQmFzZSAgICAgICAgICAgICAgPSAkUmVnRXhwCiAgLCBwcm90byAgICAgICAgICAgICA9ICRSZWdFeHAucHJvdG90eXBlCiAgLCByZTEgICAgICAgICAgICAgICA9IC9hL2cKICAsIHJlMiAgICAgICAgICAgICAgID0gL2EvZwogIC8vICJuZXciIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmUKICAsIENPUlJFQ1RfTkVXICAgICAgID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxOwoKaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7CiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2gKICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJzsKfSkpKXsKICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpewogICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cAogICAgICAsIHBpUkUgPSBpc1JlZ0V4cChwKQogICAgICAsIGZpVSAgPSBmID09PSB1bmRlZmluZWQ7CiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHAKICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FVwogICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKQogICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpCiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7CiAgfTsKICB2YXIgcHJveHkgPSBmdW5jdGlvbihrZXkpewogICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7CiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gQmFzZVtrZXldOyB9LAogICAgICBzZXQ6IGZ1bmN0aW9uKGl0KXsgQmFzZVtrZXldID0gaXQ7IH0KICAgIH0pOwogIH07CiAgZm9yKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTsgKXByb3h5KGtleXNbaSsrXSk7CiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwOwogICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87CiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTsKfQoKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MTUwLCIuL19mYWlscyI6MTU2LCIuL19mbGFncyI6MTU4LCIuL19nbG9iYWwiOjE2MCwiLi9faW5oZXJpdC1pZi1yZXF1aXJlZCI6MTY1LCIuL19pcy1yZWdleHAiOjE3MiwiLi9fb2JqZWN0LWRwIjoxODksIi4vX29iamVjdC1nb3BuIjoxOTQsIi4vX3JlZGVmaW5lIjoyMDksIi4vX3NldC1zcGVjaWVzIjoyMTMsIi4vX3drcyI6MjM5fV0sMzM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKQppZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywgewogIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJykKfSk7Cn0seyIuL19kZXNjcmlwdG9ycyI6MTUwLCIuL19mbGFncyI6MTU4LCIuL19vYmplY3QtZHAiOjE4OX1dLDMzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIEBAbWF0Y2ggbG9naWMKcmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpewogIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cCkKICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCl7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpCiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTsKICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpOwogIH0sICRtYXRjaF07Cn0pOwp9LHsiLi9fZml4LXJlLXdrcyI6MTU3fV0sMzM4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQEByZXBsYWNlIGxvZ2ljCnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlKXsKICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpCiAgcmV0dXJuIFtmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpewogICAgJ3VzZSBzdHJpY3QnOwogICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKQogICAgICAsIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07CiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZAogICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSkKICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7CiAgfSwgJHJlcGxhY2VdOwp9KTsKfSx7Ii4vX2ZpeC1yZS13a3MiOjE1N31dLDMzOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIEBAc2VhcmNoIGxvZ2ljCnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24oZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKXsKICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2gocmVnZXhwKQogIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCl7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpCiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07CiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7CiAgfSwgJHNlYXJjaF07Cn0pOwp9LHsiLi9fZml4LXJlLXdrcyI6MTU3fV0sMzQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gQEBzcGxpdCBsb2dpYwpyZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgU1BMSVQsICRzcGxpdCl7CiAgJ3VzZSBzdHJpY3QnOwogIHZhciBpc1JlZ0V4cCAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJykKICAgICwgX3NwbGl0ICAgICA9ICRzcGxpdAogICAgLCAkcHVzaCAgICAgID0gW10ucHVzaAogICAgLCAkU1BMSVQgICAgID0gJ3NwbGl0JwogICAgLCBMRU5HVEggICAgID0gJ2xlbmd0aCcKICAgICwgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnOwogIGlmKAogICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHwKICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fAogICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8CiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHwKICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHwKICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXQogICl7CiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cAogICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0CiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXsKICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTsKICAgICAgaWYoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApcmV0dXJuIFtdOwogICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdAogICAgICBpZighaXNSZWdFeHAoc2VwYXJhdG9yKSlyZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTsKICAgICAgdmFyIG91dHB1dCA9IFtdOwogICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgKwogICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArCiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArCiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpOwogICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7CiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDsKICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHkKICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTsKICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7CiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydAogICAgICBpZighTlBDRylzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxzKScsIGZsYWdzKTsKICAgICAgd2hpbGUobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSl7CiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlcgogICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTsKICAgICAgICBpZihsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KXsKICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpOwogICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0cKICAgICAgICAgIGlmKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKW1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24oKXsKICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspaWYoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpbWF0Y2hbaV0gPSB1bmRlZmluZWQ7CiAgICAgICAgICB9KTsKICAgICAgICAgIGlmKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7CiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTsKICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7CiAgICAgICAgICBpZihvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KWJyZWFrOwogICAgICAgIH0KICAgICAgICBpZihzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleClzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AKICAgICAgfQogICAgICBpZihsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSl7CiAgICAgICAgaWYobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSlvdXRwdXQucHVzaCgnJyk7CiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpOwogICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0OwogICAgfTsKICAvLyBDaGFrcmEsIFY4CiAgfSBlbHNlIGlmKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSl7CiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXsKICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTsKICAgIH07CiAgfQogIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpCiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KXsKICAgIHZhciBPICA9IGRlZmluZWQodGhpcykKICAgICAgLCBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdOwogICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTsKICB9LCAkc3BsaXRdOwp9KTsKfSx7Ii4vX2ZpeC1yZS13a3MiOjE1NywiLi9faXMtcmVnZXhwIjoxNzJ9XSwzNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpOwp2YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgJGZsYWdzICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpCiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykKICAsIFRPX1NUUklORyAgID0gJ3RvU3RyaW5nJwogICwgJHRvU3RyaW5nICAgPSAvLi9bVE9fU1RSSU5HXTsKCnZhciBkZWZpbmUgPSBmdW5jdGlvbihmbil7CiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTsKfTsKCi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKCkKaWYocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoe3NvdXJjZTogJ2EnLCBmbGFnczogJ2InfSkgIT0gJy9hL2InOyB9KSl7CiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7CiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpOwogICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJywKICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpOwogIH0pOwovLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZQp9IGVsc2UgaWYoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKXsKICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXsKICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTsKICB9KTsKfQp9LHsiLi9fYW4tb2JqZWN0IjoxMjksIi4vX2Rlc2NyaXB0b3JzIjoxNTAsIi4vX2ZhaWxzIjoxNTYsIi4vX2ZsYWdzIjoxNTgsIi4vX3JlZGVmaW5lIjoyMDksIi4vZXM2LnJlZ2V4cC5mbGFncyI6MzM2fV0sMzQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTsKCi8vIDIzLjIgU2V0IE9iamVjdHMKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1NldCcsIGZ1bmN0aW9uKGdldCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTsKfSwgewogIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKQogIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXsKICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTsKICB9Cn0sIHN0cm9uZyk7Cn0seyIuL19jb2xsZWN0aW9uIjoxNDQsIi4vX2NvbGxlY3Rpb24tc3Ryb25nIjoxNDF9XSwzNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIyMX1dLDM0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBiaWcoKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6MjIxfV0sMzQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBibGluaygpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIyMX1dLDM0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIyMX1dLDM0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTsKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpCiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcyl7CiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19zdHJpbmctYXQiOjIxOX1dLDM0ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSkKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpCiAgLCBjb250ZXh0ICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpCiAgLCBFTkRTX1dJVEggPSAnZW5kc1dpdGgnCiAgLCAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywgewogIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyosIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLyl7CiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpCiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZAogICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKQogICAgICAsIGVuZCAgICA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbikKICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTsKICAgIHJldHVybiAkZW5kc1dpdGgKICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZCkKICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX2ZhaWxzLWlzLXJlZ2V4cCI6MTU1LCIuL19zdHJpbmctY29udGV4dCI6MjIwLCIuL190by1sZW5ndGgiOjIzMH1dLDM0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXsKICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMjF9XSwzNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMjF9XSwzNTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKQpyZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKXsKICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIyMX1dLDM1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b0luZGV4ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JykKICAsIGZyb21DaGFyQ29kZSAgID0gU3RyaW5nLmZyb21DaGFyQ29kZQogICwgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDsKCi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW0KJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7CiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cykKICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzCiAgICB2YXIgcmVzICA9IFtdCiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGgKICAgICAgLCBpICAgID0gMAogICAgICAsIGNvZGU7CiAgICB3aGlsZShhTGVuID4gaSl7CiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107CiAgICAgIGlmKHRvSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKXRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpOwogICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMAogICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpCiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKQogICAgICApOwogICAgfSByZXR1cm4gcmVzLmpvaW4oJycpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fdG8taW5kZXgiOjIyN31dLDM1MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApCid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsIGNvbnRleHQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKQogICwgSU5DTFVERVMgPSAnaW5jbHVkZXMnOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7CiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXsKICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpCiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fZmFpbHMtaXMtcmVnZXhwIjoxNTUsIi4vX3N0cmluZy1jb250ZXh0IjoyMjB9XSwzNTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMjF9XSwzNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewphcmd1bWVudHNbNF1bMTIwXVswXS5hcHBseShleHBvcnRzLGFyZ3VtZW50cykKfSx7Ii4vX2l0ZXItZGVmaW5lIjoxNzUsIi4vX3N0cmluZy1hdCI6MjE5LCJkdXAiOjEyMH1dLDM1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpewogIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTsKICB9Cn0pOwp9LHsiLi9fc3RyaW5nLWh0bWwiOjIyMX1dLDM1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpCiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywgewogIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpCiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpewogICAgdmFyIHRwbCAgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KQogICAgICAsIGxlbiAgPSB0b0xlbmd0aCh0cGwubGVuZ3RoKQogICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoCiAgICAgICwgcmVzICA9IFtdCiAgICAgICwgaSAgICA9IDA7CiAgICB3aGlsZShsZW4gPiBpKXsKICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7CiAgICAgIGlmKGkgPCBhTGVuKXJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTsKICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX3RvLWlvYmplY3QiOjIyOSwiLi9fdG8tbGVuZ3RoIjoyMzB9XSwzNTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KQogIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpCn0pOwp9LHsiLi9fZXhwb3J0IjoxNTQsIi4vX3N0cmluZy1yZXBlYXQiOjIyM31dLDM1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpCnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCl7CiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpOwogIH0KfSk7Cn0seyIuL19zdHJpbmctaHRtbCI6MjIxfV0sMzYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSkKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKQogICwgY29udGV4dCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpCiAgLCBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJwogICwgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHsKICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXsKICAgIHZhciB0aGF0ICAgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpCiAgICAgICwgaW5kZXggID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSkKICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTsKICAgIHJldHVybiAkc3RhcnRzV2l0aAogICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleCkKICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19mYWlscy1pcy1yZWdleHAiOjE1NSwiLi9fc3RyaW5nLWNvbnRleHQiOjIyMCwiLi9fdG8tbGVuZ3RoIjoyMzB9XSwzNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMjF9XSwzNjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHN1YigpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMjF9XSwzNjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKCkKcmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7CiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpewogICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7CiAgfQp9KTsKfSx7Ii4vX3N0cmluZy1odG1sIjoyMjF9XSwzNjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKQpyZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24oJHRyaW0pewogIHJldHVybiBmdW5jdGlvbiB0cmltKCl7CiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7CiAgfTsKfSk7Cn0seyIuL19zdHJpbmctdHJpbSI6MjI0fV0sMzY1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKYXJndW1lbnRzWzRdWzEyMV1bMF0uYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpCn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fZGVzY3JpcHRvcnMiOjE1MCwiLi9fZW51bS1rZXlzIjoxNTMsIi4vX2V4cG9ydCI6MTU0LCIuL19mYWlscyI6MTU2LCIuL19nbG9iYWwiOjE2MCwiLi9faGFzIjoxNjEsIi4vX2hpZGUiOjE2MiwiLi9faXMtYXJyYXkiOjE2OSwiLi9fa2V5b2YiOjE3OSwiLi9fbGlicmFyeSI6MTgwLCIuL19tZXRhIjoxODQsIi4vX29iamVjdC1jcmVhdGUiOjE4OCwiLi9fb2JqZWN0LWRwIjoxODksIi4vX29iamVjdC1nb3BkIjoxOTIsIi4vX29iamVjdC1nb3BuIjoxOTQsIi4vX29iamVjdC1nb3BuLWV4dCI6MTkzLCIuL19vYmplY3QtZ29wcyI6MTk1LCIuL19vYmplY3Qta2V5cyI6MTk4LCIuL19vYmplY3QtcGllIjoxOTksIi4vX3Byb3BlcnR5LWRlc2MiOjIwNywiLi9fcmVkZWZpbmUiOjIwOSwiLi9fc2V0LXRvLXN0cmluZy10YWciOjIxNCwiLi9fc2hhcmVkIjoyMTYsIi4vX3RvLWlvYmplY3QiOjIyOSwiLi9fdG8tcHJpbWl0aXZlIjoyMzIsIi4vX3VpZCI6MjM2LCIuL193a3MiOjIzOSwiLi9fd2tzLWRlZmluZSI6MjM3LCIuL193a3MtZXh0IjoyMzgsImR1cCI6MTIxfV0sMzY2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwp2YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICR0eXBlZCAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJykKICAsIGJ1ZmZlciAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpCiAgLCBhbk9iamVjdCAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9JbmRleCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKQogICwgdG9MZW5ndGggICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGlzT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpCiAgLCBBcnJheUJ1ZmZlciAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlcgogICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpCiAgLCAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXIKICAsICREYXRhVmlldyAgICA9IGJ1ZmZlci5EYXRhVmlldwogICwgJGlzVmlldyAgICAgID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcKICAsICRzbGljZSAgICAgICA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UKICAsIFZJRVcgICAgICAgICA9ICR0eXBlZC5WSUVXCiAgLCBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInOwoKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHtBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyfSk7CgokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHsKICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKQogIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KXsKICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0OwogIH0KfSk7CgokZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsKICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoOwp9KSwgQVJSQVlfQlVGRkVSLCB7CiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpCiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpewogICAgaWYoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeAogICAgdmFyIGxlbiAgICA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGgKICAgICAgLCBmaXJzdCAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pCiAgICAgICwgZmluYWwgID0gdG9JbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKQogICAgICAsIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbmFsIC0gZmlyc3QpKQogICAgICAsIHZpZXdTICA9IG5ldyAkRGF0YVZpZXcodGhpcykKICAgICAgLCB2aWV3VCAgPSBuZXcgJERhdGFWaWV3KHJlc3VsdCkKICAgICAgLCBpbmRleCAgPSAwOwogICAgd2hpbGUoZmlyc3QgPCBmaW5hbCl7CiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTsKICAgIH0gcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwoKcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjksIi4vX2V4cG9ydCI6MTU0LCIuL19mYWlscyI6MTU2LCIuL19nbG9iYWwiOjE2MCwiLi9faXMtb2JqZWN0IjoxNzEsIi4vX3NldC1zcGVjaWVzIjoyMTMsIi4vX3NwZWNpZXMtY29uc3RydWN0b3IiOjIxNywiLi9fdG8taW5kZXgiOjIyNywiLi9fdG8tbGVuZ3RoIjoyMzAsIi4vX3R5cGVkIjoyMzUsIi4vX3R5cGVkLWJ1ZmZlciI6MjM0fV0sMzY3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHsKICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXcKfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fdHlwZWQiOjIzNSwiLi9fdHlwZWQtYnVmZmVyIjoyMzR9XSwzNjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoyMzN9XSwzNjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoyMzN9XSwzNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIzM31dLDM3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cn0seyIuL190eXBlZC1hcnJheSI6MjMzfV0sMzcyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXsKICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7CiAgfTsKfSk7Cn0seyIuL190eXBlZC1hcnJheSI6MjMzfV0sMzczOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKcmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIzM31dLDM3NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpewogICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTsKICB9Owp9KTsKfSx7Ii4vX3R5cGVkLWFycmF5IjoyMzN9XSwzNzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewpyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpewogIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0pOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIzM31dLDM3NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7CiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpOwogIH07Cn0sIHRydWUpOwp9LHsiLi9fdHlwZWQtYXJyYXkiOjIzM31dLDM3NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIGVhY2ggICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKQogICwgcmVkZWZpbmUgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKQogICwgbWV0YSAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpCiAgLCBhc3NpZ24gICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJykKICAsIHdlYWsgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpCiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKQogICwgZ2V0V2VhayAgICAgID0gbWV0YS5nZXRXZWFrCiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlCiAgLCB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlCiAgLCB0bXAgICAgICAgICAgPSB7fQogICwgSW50ZXJuYWxNYXA7Cgp2YXIgd3JhcHBlciA9IGZ1bmN0aW9uKGdldCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKXsKICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOwogIH07Cn07Cgp2YXIgbWV0aG9kcyA9IHsKICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KQogIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7CiAgICBpZihpc09iamVjdChrZXkpKXsKICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7CiAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuZ2V0KGtleSk7CiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDsKICAgIH0KICB9LAogIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKQogIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpewogICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIGtleSwgdmFsdWUpOwogIH0KfTsKCi8vIDIzLjMgV2Vha01hcCBPYmplY3RzCnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdXZWFrTWFwJywgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7CgovLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4CmlmKG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDcpewogIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyKTsKICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTsKICBtZXRhLk5FRUQgPSB0cnVlOwogIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24oa2V5KXsKICAgIHZhciBwcm90byAgPSAkV2Vha01hcC5wcm90b3R5cGUKICAgICAgLCBtZXRob2QgPSBwcm90b1trZXldOwogICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24oYSwgYil7CiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbQogICAgICBpZihpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKXsKICAgICAgICBpZighdGhpcy5fZil0aGlzLl9mID0gbmV3IEludGVybmFsTWFwOwogICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7CiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7CiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcAogICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTsKICAgIH0pOwogIH0pOwp9Cn0seyIuL19hcnJheS1tZXRob2RzIjoxMzQsIi4vX2NvbGxlY3Rpb24iOjE0NCwiLi9fY29sbGVjdGlvbi13ZWFrIjoxNDMsIi4vX2lzLW9iamVjdCI6MTcxLCIuL19tZXRhIjoxODQsIi4vX29iamVjdC1hc3NpZ24iOjE4NywiLi9fcmVkZWZpbmUiOjIwOX1dLDM3ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTsKCi8vIDIzLjQgV2Vha1NldCBPYmplY3RzCnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnV2Vha1NldCcsIGZ1bmN0aW9uKGdldCl7CiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07Cn0sIHsKICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpCiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpewogICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIHZhbHVlLCB0cnVlKTsKICB9Cn0sIHdlYWssIGZhbHNlLCB0cnVlKTsKfSx7Ii4vX2NvbGxlY3Rpb24iOjE0NCwiLi9fY29sbGVjdGlvbi13ZWFrIjoxNDN9XSwzNzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlcwp2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgewogIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7CiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiAgfQp9KTsKCnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpOwp9LHsiLi9fYWRkLXRvLXVuc2NvcGFibGVzIjoxMjcsIi4vX2FycmF5LWluY2x1ZGVzIjoxMzMsIi4vX2V4cG9ydCI6MTU0fV0sMzgwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrCnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKQogICwgcHJvY2VzcyAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcwogICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnOwoKJGV4cG9ydCgkZXhwb3J0LkcsIHsKICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKXsKICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47CiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pOwogIH0KfSk7Cn0seyIuL19jb2YiOjE0MCwiLi9fZXhwb3J0IjoxNTQsIi4vX2dsb2JhbCI6MTYwLCIuL19taWNyb3Rhc2siOjE4Nn1dLDM4MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3IKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgY29mICAgICA9IHJlcXVpcmUoJy4vX2NvZicpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHsKICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KXsKICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InOwogIH0KfSk7Cn0seyIuL19jb2YiOjE0MCwiLi9fZXhwb3J0IjoxNTR9XSwzODI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJyl9KTsKfSx7Ii4vX2NvbGxlY3Rpb24tdG8tanNvbiI6MTQyLCIuL19leHBvcnQiOjE1NH1dLDM4MzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKXsKICAgIHZhciAkeDAgPSB4MCA+Pj4gMAogICAgICAsICR4MSA9IHgxID4+PiAwCiAgICAgICwgJHkwID0geTAgPj4+IDA7CiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NH1dLDM4NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7CiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpewogICAgdmFyIFVJTlQxNiA9IDB4ZmZmZgogICAgICAsICR1ID0gK3UKICAgICAgLCAkdiA9ICt2CiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNgogICAgICAsIHYwID0gJHYgJiBVSU5UMTYKICAgICAgLCB1MSA9ICR1ID4+IDE2CiAgICAgICwgdjEgPSAkdiA+PiAxNgogICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTsKICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0fV0sMzg1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDMKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsKICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpewogICAgdmFyICR4MCA9IHgwID4+PiAwCiAgICAgICwgJHgxID0geDEgPj4+IDAKICAgICAgLCAkeTAgPSB5MCA+Pj4gMDsKICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTR9XSwzODY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwMwp2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgewogIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KXsKICAgIHZhciBVSU5UMTYgPSAweGZmZmYKICAgICAgLCAkdSA9ICt1CiAgICAgICwgJHYgPSArdgogICAgICAsIHUwID0gJHUgJiBVSU5UMTYKICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2CiAgICAgICwgdTEgPSAkdSA+Pj4gMTYKICAgICAgLCB2MSA9ICR2ID4+PiAxNgogICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTsKICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTsKICB9Cn0pOwp9LHsiLi9fZXhwb3J0IjoxNTR9XSwzODc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIGFGdW5jdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7CgovLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpCnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0JywgewogIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKXsKICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7Z2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7CiAgfQp9KTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjEyNSwiLi9fZGVzY3JpcHRvcnMiOjE1MCwiLi9fZXhwb3J0IjoxNTQsIi4vX29iamVjdC1kcCI6MTg5LCIuL19vYmplY3QtZm9yY2VkLXBhbSI6MTkxLCIuL190by1vYmplY3QiOjIzMX1dLDM4ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTsKCi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikKcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7CiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpewogICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTsKICB9Cn0pOwp9LHsiLi9fYS1mdW5jdGlvbiI6MTI1LCIuL19kZXNjcmlwdG9ycyI6MTUwLCIuL19leHBvcnQiOjE1NCwiLi9fb2JqZWN0LWRwIjoxODksIi4vX29iamVjdC1mb3JjZWQtcGFtIjoxOTEsIi4vX3RvLW9iamVjdCI6MjMxfV0sMzg5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzCnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7CiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCl7CiAgICByZXR1cm4gJGVudHJpZXMoaXQpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fb2JqZWN0LXRvLWFycmF5IjoyMDF9XSwzOTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9ycwp2YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgb3duS2V5cyAgICAgICAgPSByZXF1aXJlKCcuL19vd24ta2V5cycpCiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKQogICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpCiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpOwoKJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3QpewogICAgdmFyIE8gICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KQogICAgICAsIGdldERlc2MgPSBnT1BELmYKICAgICAgLCBrZXlzICAgID0gb3duS2V5cyhPKQogICAgICAsIHJlc3VsdCAgPSB7fQogICAgICAsIGkgICAgICAgPSAwCiAgICAgICwga2V5OwogICAgd2hpbGUoa2V5cy5sZW5ndGggPiBpKWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5ID0ga2V5c1tpKytdLCBnZXREZXNjKE8sIGtleSkpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9Cn0pOwp9LHsiLi9fY3JlYXRlLXByb3BlcnR5IjoxNDYsIi4vX2V4cG9ydCI6MTU0LCIuL19vYmplY3QtZ29wZCI6MTkyLCIuL19vd24ta2V5cyI6MjAyLCIuL190by1pb2JqZWN0IjoyMjl9XSwzOTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CnZhciAkZXhwb3J0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JykKICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpCiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjsKCi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApCnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0JywgewogIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCl7CiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpCiAgICAgICwgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpCiAgICAgICwgRDsKICAgIGRvIHsKICAgICAgaWYoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSlyZXR1cm4gRC5nZXQ7CiAgICB9IHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7CiAgfQp9KTsKfSx7Ii4vX2Rlc2NyaXB0b3JzIjoxNTAsIi4vX2V4cG9ydCI6MTU0LCIuL19vYmplY3QtZm9yY2VkLXBhbSI6MTkxLCIuL19vYmplY3QtZ29wZCI6MTkyLCIuL19vYmplY3QtZ3BvIjoxOTYsIi4vX3RvLW9iamVjdCI6MjMxLCIuL190by1wcmltaXRpdmUiOjIzMn1dLDM5MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKdmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpCiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKQogICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKQogICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mOwoKLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUCkKcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7CiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKXsKICAgIHZhciBPID0gdG9PYmplY3QodGhpcykKICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSkKICAgICAgLCBEOwogICAgZG8gewogICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELnNldDsKICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTsKICB9Cn0pOwp9LHsiLi9fZGVzY3JpcHRvcnMiOjE1MCwiLi9fZXhwb3J0IjoxNTQsIi4vX29iamVjdC1mb3JjZWQtcGFtIjoxOTEsIi4vX29iamVjdC1nb3BkIjoxOTIsIi4vX29iamVjdC1ncG8iOjE5NiwiLi9fdG8tb2JqZWN0IjoyMzEsIi4vX3RvLXByaW1pdGl2ZSI6MjMyfV0sMzkzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7CgokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsKICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCl7CiAgICByZXR1cm4gJHZhbHVlcyhpdCk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19vYmplY3QtdG8tYXJyYXkiOjIwMX1dLDM5NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZQp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKQogICwgY29yZSAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJykKICAsIG1pY3JvdGFzayAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKQogICwgT0JTRVJWQUJMRSAgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpCiAgLCBhRnVuY3Rpb24gICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKQogICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpCiAgLCByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpCiAgLCBoaWRlICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKQogICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKQogICwgUkVUVVJOICAgICAgPSBmb3JPZi5SRVRVUk47Cgp2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oZm4pewogIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTsKfTsKCnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXsKICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYzsKICBpZihjbGVhbnVwKXsKICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDsKICAgIGNsZWFudXAoKTsKICB9Cn07Cgp2YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXsKICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7Cn07Cgp2YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pewogIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7CiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7CiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7CiAgfQp9OwoKdmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKG9ic2VydmVyLCBzdWJzY3JpYmVyKXsKICBhbk9iamVjdChvYnNlcnZlcik7CiAgdGhpcy5fYyA9IHVuZGVmaW5lZDsKICB0aGlzLl9vID0gb2JzZXJ2ZXI7CiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7CiAgdHJ5IHsKICAgIHZhciBjbGVhbnVwICAgICAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKQogICAgICAsIHN1YnNjcmlwdGlvbiA9IGNsZWFudXA7CiAgICBpZihjbGVhbnVwICE9IG51bGwpewogICAgICBpZih0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJyljbGVhbnVwID0gZnVuY3Rpb24oKXsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07CiAgICAgIGVsc2UgYUZ1bmN0aW9uKGNsZWFudXApOwogICAgICB0aGlzLl9jID0gY2xlYW51cDsKICAgIH0KICB9IGNhdGNoKGUpewogICAgb2JzZXJ2ZXIuZXJyb3IoZSk7CiAgICByZXR1cm47CiAgfSBpZihzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTsKfTsKClN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwgewogIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfQp9KTsKCnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7CiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjsKfTsKClN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7CiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSl7CiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fczsKICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7CiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbzsKICAgICAgdHJ5IHsKICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTsKICAgICAgICBpZihtKXJldHVybiBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTsKICAgICAgfSBjYXRjaChlKXsKICAgICAgICB0cnkgewogICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgdGhyb3cgZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LAogIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSl7CiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fczsKICAgIGlmKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXRocm93IHZhbHVlOwogICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vOwogICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkOwogICAgdHJ5IHsKICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpOwogICAgICBpZighbSl0aHJvdyB2YWx1ZTsKICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTsKICAgIH0gY2F0Y2goZSl7CiAgICAgIHRyeSB7CiAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRocm93IGU7CiAgICAgIH0KICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pOwogICAgcmV0dXJuIHZhbHVlOwogIH0sCiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKXsKICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zOwogICAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXsKICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vOwogICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7CiAgICAgIHRyeSB7CiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpOwogICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkOwogICAgICB9IGNhdGNoKGUpewogICAgICAgIHRyeSB7CiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIHRocm93IGU7CiAgICAgICAgfQogICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQogIH0KfSk7Cgp2YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpewogIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7Cn07CgpyZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHsKICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcil7CiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7CiAgfSwKICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKXsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXsKICAgICAgYUZ1bmN0aW9uKGZuKTsKICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHsKICAgICAgICBuZXh0IDogZnVuY3Rpb24odmFsdWUpewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTsKICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBlcnJvcjogcmVqZWN0LAogICAgICAgIGNvbXBsZXRlOiByZXNvbHZlCiAgICAgIH0pOwogICAgfSk7CiAgfQp9KTsKCnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7CiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KXsKICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7CiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTsKICAgIGlmKG1ldGhvZCl7CiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpOwogICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcil7CiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTsKICAgICAgfSk7CiAgICB9CiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpewogICAgICB2YXIgZG9uZSA9IGZhbHNlOwogICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXsKICAgICAgICBpZighZG9uZSl7CiAgICAgICAgICB0cnkgewogICAgICAgICAgICBpZihmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24oaXQpewogICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpOwogICAgICAgICAgICAgIGlmKGRvbmUpcmV0dXJuIFJFVFVSTjsKICAgICAgICAgICAgfSkgPT09IFJFVFVSTilyZXR1cm47CiAgICAgICAgICB9IGNhdGNoKGUpewogICAgICAgICAgICBpZihkb25lKXRocm93IGU7CiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7IGRvbmUgPSB0cnVlOyB9OwogICAgfSk7CiAgfSwKICBvZjogZnVuY3Rpb24gb2YoKXsKICAgIGZvcih2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IEFycmF5KGwpOyBpIDwgbDspaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTsKICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbihvYnNlcnZlcil7CiAgICAgIHZhciBkb25lID0gZmFsc2U7CiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpewogICAgICAgIGlmKCFkb25lKXsKICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSl7CiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbaV0pOwogICAgICAgICAgICBpZihkb25lKXJldHVybjsKICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gZnVuY3Rpb24oKXsgZG9uZSA9IHRydWU7IH07CiAgICB9KTsKICB9Cn0pOwoKaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTsKCiRleHBvcnQoJGV4cG9ydC5HLCB7T2JzZXJ2YWJsZTogJE9ic2VydmFibGV9KTsKCnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTsKfSx7Ii4vX2EtZnVuY3Rpb24iOjEyNSwiLi9fYW4taW5zdGFuY2UiOjEyOCwiLi9fYW4tb2JqZWN0IjoxMjksIi4vX2NvcmUiOjE0NSwiLi9fZXhwb3J0IjoxNTQsIi4vX2Zvci1vZiI6MTU5LCIuL19nbG9iYWwiOjE2MCwiLi9faGlkZSI6MTYyLCIuL19taWNyb3Rhc2siOjE4NiwiLi9fcmVkZWZpbmUtYWxsIjoyMDgsIi4vX3NldC1zcGVjaWVzIjoyMTMsIi4vX3drcyI6MjM5fV0sMzk1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXkKICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7CgptZXRhZGF0YS5leHAoe2RlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpewogIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjksIi4vX21ldGFkYXRhIjoxODV9XSwzOTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKQogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleQogICwgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcAogICwgc3RvcmUgICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLnN0b3JlOwoKbWV0YWRhdGEuZXhwKHtkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXsKICB2YXIgdGFyZ2V0S2V5ICAgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pCiAgICAsIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTsKICBpZihtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKXJldHVybiBmYWxzZTsKICBpZihtZXRhZGF0YU1hcC5zaXplKXJldHVybiB0cnVlOwogIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpOwogIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpOwogIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI5LCIuL19tZXRhZGF0YSI6MTg1fV0sMzk3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIFNldCAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9lczYuc2V0JykKICAsIGZyb20gICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpCiAgLCBtZXRhZGF0YSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXMKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5OwoKdmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24oTywgUCl7CiAgdmFyIG9LZXlzICA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApCiAgICAsIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pOwogIGlmKHBhcmVudCA9PT0gbnVsbClyZXR1cm4gb0tleXM7CiAgdmFyIHBLZXlzICA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7CiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzOwp9OwoKbWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7CiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fYXJyYXktZnJvbS1pdGVyYWJsZSI6MTMyLCIuL19tZXRhZGF0YSI6MTg1LCIuL19vYmplY3QtZ3BvIjoxOTYsIi4vZXM2LnNldCI6MzQyfV0sMzk4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJykKICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXMKICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7Cgp2YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXsKICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7CiAgaWYoaGFzT3duKXJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTsKICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7CiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7Cn07CgptZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTsKfX0pOwp9LHsiLi9fYW4tb2JqZWN0IjoxMjksIi4vX21ldGFkYXRhIjoxODUsIi4vX29iamVjdC1ncG8iOjE5Nn1dLDM5OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJykKICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cwogICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7CgptZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXsKICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7Cn19KTsKfSx7Ii4vX2FuLW9iamVjdCI6MTI5LCIuL19tZXRhZGF0YSI6MTg1fV0sNDAwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7CgptZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpCiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fbWV0YWRhdGEiOjE4NX1dLDQwMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpCiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzCiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5OwoKdmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7CiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApOwogIGlmKGhhc093bilyZXR1cm4gdHJ1ZTsKICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7CiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTsKfTsKCm1ldGFkYXRhLmV4cCh7aGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7CiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fbWV0YWRhdGEiOjE4NSwiLi9fb2JqZWN0LWdwbyI6MTk2fV0sNDAyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpCiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JykKICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXMKICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7CgptZXRhZGF0YS5leHAoe2hhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pewogIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpCiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpOwp9fSk7Cn0seyIuL19hbi1vYmplY3QiOjEyOSwiLi9fbWV0YWRhdGEiOjE4NX1dLDQwMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKQogICwgYW5PYmplY3QgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpCiAgLCBhRnVuY3Rpb24gICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpCiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5CiAgLCBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gbWV0YWRhdGEuc2V0OwoKbWV0YWRhdGEuZXhwKHttZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpewogIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpewogICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSgKICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsCiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLAogICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KQogICAgKTsKICB9Owp9fSk7Cn0seyIuL19hLWZ1bmN0aW9uIjoxMjUsIi4vX2FuLW9iamVjdCI6MTI5LCIuL19tZXRhZGF0YSI6MTg1fV0sNDA0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTgp2YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTsKCiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpfSk7Cn0seyIuL19jb2xsZWN0aW9uLXRvLWpzb24iOjE0MiwiLi9fZXhwb3J0IjoxNTR9XSw0MDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXQKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcyl7CiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19zdHJpbmctYXQiOjIxOX1dLDQwNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsLwp2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJykKICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJykKICAsIGlzUmVnRXhwICAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJykKICAsIGdldEZsYWdzICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKQogICwgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlOwoKdmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uKHJlZ2V4cCwgc3RyaW5nKXsKICB0aGlzLl9yID0gcmVnZXhwOwogIHRoaXMuX3MgPSBzdHJpbmc7Cn07CgpyZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCl7CiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpOwogIHJldHVybiB7dmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbH07Cn0pOwoKJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7CiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCl7CiAgICBkZWZpbmVkKHRoaXMpOwogICAgaWYoIWlzUmVnRXhwKHJlZ2V4cCkpdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpOwogICAgdmFyIFMgICAgID0gU3RyaW5nKHRoaXMpCiAgICAgICwgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cCkKICAgICAgLCByeCAgICA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpOwogICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7CiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7CiAgfQp9KTsKfSx7Ii4vX2RlZmluZWQiOjE0OSwiLi9fZXhwb3J0IjoxNTQsIi4vX2ZsYWdzIjoxNTgsIi4vX2lzLXJlZ2V4cCI6MTcyLCIuL19pdGVyLWNyZWF0ZSI6MTc0LCIuL190by1sZW5ndGgiOjIzMH1dLDQwNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmQKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHBhZCAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTsKCiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywgewogIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiwgZmlsbFN0cmluZyA9ICcgJyAqLyl7CiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7CiAgfQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19zdHJpbmctcGFkIjoyMjJ9XSw0MDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JykKICAsICRwYWQgICAgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7CgokZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHsKICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXsKICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpOwogIH0KfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fc3RyaW5nLXBhZCI6MjIyfV0sNDA5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwovLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltCnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24oJHRyaW0pewogIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpewogICAgcmV0dXJuICR0cmltKHRoaXMsIDEpOwogIH07Cn0sICd0cmltU3RhcnQnKTsKfSx7Ii4vX3N0cmluZy10cmltIjoyMjR9XSw0MTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW0KcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24oJHRyaW0pewogIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKXsKICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTsKICB9Owp9LCAndHJpbUVuZCcpOwp9LHsiLi9fc3RyaW5nLXRyaW0iOjIyNH1dLDQxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMjJdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fd2tzLWRlZmluZSI6MjM3LCJkdXAiOjEyMn1dLDQxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CmFyZ3VtZW50c1s0XVsxMjNdWzBdLmFwcGx5KGV4cG9ydHMsYXJndW1lbnRzKQp9LHsiLi9fd2tzLWRlZmluZSI6MjM3LCJkdXAiOjEyM31dLDQxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtZ2xvYmFsCnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7CgokZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHtnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpfSk7Cn0seyIuL19leHBvcnQiOjE1NCwiLi9fZ2xvYmFsIjoxNjB9XSw0MTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewp2YXIgJGl0ZXJhdG9ycyAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJykKICAsIHJlZGVmaW5lICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpCiAgLCBnbG9iYWwgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJykKICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKQogICwgd2tzICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpCiAgLCBJVEVSQVRPUiAgICAgID0gd2tzKCdpdGVyYXRvcicpCiAgLCBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpCiAgLCBBcnJheVZhbHVlcyAgID0gSXRlcmF0b3JzLkFycmF5OwoKZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7CiAgdmFyIE5BTUUgICAgICAgPSBjb2xsZWN0aW9uc1tpXQogICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdCiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlCiAgICAsIGtleTsKICBpZihwcm90byl7CiAgICBpZighcHJvdG9bSVRFUkFUT1JdKWhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7CiAgICBpZighcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7CiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlczsKICAgIGZvcihrZXkgaW4gJGl0ZXJhdG9ycylpZighcHJvdG9ba2V5XSlyZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpOwogIH0KfQp9LHsiLi9fZ2xvYmFsIjoxNjAsIi4vX2hpZGUiOjE2MiwiLi9faXRlcmF0b3JzIjoxNzgsIi4vX3JlZGVmaW5lIjoyMDksIi4vX3drcyI6MjM5LCIuL2VzNi5hcnJheS5pdGVyYXRvciI6MjUyfV0sNDE1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKdmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgJHRhc2sgICA9IHJlcXVpcmUoJy4vX3Rhc2snKTsKJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHsKICBzZXRJbW1lZGlhdGU6ICAgJHRhc2suc2V0LAogIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhcgp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL190YXNrIjoyMjZ9XSw0MTY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4CnZhciBnbG9iYWwgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykKICAsICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKQogICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpCiAgLCBwYXJ0aWFsICAgID0gcmVxdWlyZSgnLi9fcGFydGlhbCcpCiAgLCBuYXZpZ2F0b3IgID0gZ2xvYmFsLm5hdmlnYXRvcgogICwgTVNJRSAgICAgICA9ICEhbmF2aWdhdG9yICYmIC9NU0lFIC5cLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVjawp2YXIgd3JhcCA9IGZ1bmN0aW9uKHNldCl7CiAgcmV0dXJuIE1TSUUgPyBmdW5jdGlvbihmbiwgdGltZSAvKiwgLi4uYXJncyAqLyl7CiAgICByZXR1cm4gc2V0KGludm9rZSgKICAgICAgcGFydGlhbCwKICAgICAgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLAogICAgICB0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pCiAgICApLCB0aW1lKTsKICB9IDogc2V0Owp9OwokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHsKICBzZXRUaW1lb3V0OiAgd3JhcChnbG9iYWwuc2V0VGltZW91dCksCiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKQp9KTsKfSx7Ii4vX2V4cG9ydCI6MTU0LCIuL19nbG9iYWwiOjE2MCwiLi9faW52b2tlIjoxNjYsIi4vX3BhcnRpYWwiOjIwNX1dLDQxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7CnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpOwpyZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTsKcmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTsKbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTsKfSx7Ii4vbW9kdWxlcy9fY29yZSI6MTQ1LCIuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluIjoyNDIsIi4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnkiOjI0MywiLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsIjoyNDQsIi4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyIjoyNDUsIi4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCI6MjQ3LCIuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgiOjI0NiwiLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCI6MjQ4LCIuL21vZHVsZXMvZXM2LmFycmF5LmZyb20iOjI0OSwiLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZiI6MjUwLCIuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5IjoyNTEsIi4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IiOjI1MiwiLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luIjoyNTMsIi4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZiI6MjU0LCIuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCI6MjU1LCIuL21vZHVsZXMvZXM2LmFycmF5Lm9mIjoyNTYsIi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlIjoyNTgsIi4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0IjoyNTcsIi4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UiOjI1OSwiLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lIjoyNjAsIi4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCI6MjYxLCIuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMiOjI2MiwiLi9tb2R1bGVzL2VzNi5kYXRlLm5vdyI6MjYzLCIuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZyI6MjY0LCIuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbiI6MjY1LCIuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlIjoyNjYsIi4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmciOjI2NywiLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kIjoyNjgsIi4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlIjoyNjksIi4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZSI6MjcwLCIuL21vZHVsZXMvZXM2Lm1hcCI6MjcxLCIuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2giOjI3MiwiLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oIjoyNzMsIi4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCI6Mjc0LCIuL21vZHVsZXMvZXM2Lm1hdGguY2JydCI6Mjc1LCIuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIiOjI3NiwiLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2giOjI3NywiLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xIjoyNzgsIi4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQiOjI3OSwiLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90IjoyODAsIi4vbW9kdWxlcy9lczYubWF0aC5pbXVsIjoyODEsIi4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCI6MjgyLCIuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAiOjI4MywiLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzIiOjI4NCwiLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24iOjI4NSwiLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgiOjI4NiwiLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgiOjI4NywiLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jIjoyODgsIi4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yIjoyODksIi4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24iOjI5MCwiLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlIjoyOTEsIi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIiOjI5MiwiLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuIjoyOTMsIi4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlciI6Mjk0LCIuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyIjoyOTUsIi4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIiOjI5NiwiLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQiOjI5NywiLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50IjoyOTgsIi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkIjoyOTksIi4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbiI6MzAwLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24iOjMwMSwiLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlIjozMDIsIi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzIjozMDMsIi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eSI6MzA0LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUiOjMwNSwiLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yIjozMDYsIi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMiOjMwNywiLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZiI6MzA4LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcyI6MzEyLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlIjozMDksIi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbiI6MzEwLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQiOjMxMSwiLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cyI6MzEzLCIuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMiOjMxNCwiLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCI6MzE1LCIuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mIjozMTYsIi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZyI6MzE3LCIuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0IjozMTgsIi4vbW9kdWxlcy9lczYucGFyc2UtaW50IjozMTksIi4vbW9kdWxlcy9lczYucHJvbWlzZSI6MzIwLCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkiOjMyMSwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCI6MzIyLCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5IjozMjMsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkiOjMyNCwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZSI6MzI1LCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0IjozMjgsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IiOjMyNiwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YiOjMyNywiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcyI6MzI5LCIuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZSI6MzMwLCIuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMiOjMzMSwiLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucyI6MzMyLCIuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0IjozMzQsIi4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mIjozMzMsIi4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yIjozMzUsIi4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzIjozMzYsIi4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoIjozMzcsIi4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UiOjMzOCwiLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoIjozMzksIi4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0IjozNDAsIi4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZyI6MzQxLCIuL21vZHVsZXMvZXM2LnNldCI6MzQyLCIuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IiOjM0MywiLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnIjozNDQsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rIjozNDUsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQiOjM0NiwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCI6MzQ3LCIuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgiOjM0OCwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQiOjM0OSwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yIjozNTAsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplIjozNTEsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCI6MzUyLCIuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcyI6MzUzLCIuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzIjozNTQsIi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yIjozNTUsIi4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsiOjM1NiwiLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3IjozNTcsIi4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCI6MzU4LCIuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCI6MzU5LCIuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCI6MzYwLCIuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UiOjM2MSwiLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViIjozNjIsIi4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCI6MzYzLCIuL21vZHVsZXMvZXM2LnN0cmluZy50cmltIjozNjQsIi4vbW9kdWxlcy9lczYuc3ltYm9sIjozNjUsIi4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyIjozNjYsIi4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3IjozNjcsIi4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheSI6MzY4LCIuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkiOjM2OSwiLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheSI6MzcwLCIuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5IjozNzEsIi4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheSI6MzcyLCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheSI6MzczLCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheSI6Mzc0LCIuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5IjozNzUsIi4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheSI6Mzc2LCIuL21vZHVsZXMvZXM2LndlYWstbWFwIjozNzcsIi4vbW9kdWxlcy9lczYud2Vhay1zZXQiOjM3OCwiLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcyI6Mzc5LCIuL21vZHVsZXMvZXM3LmFzYXAiOjM4MCwiLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvciI6MzgxLCIuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uIjozODIsIi4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCI6MzgzLCIuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgiOjM4NCwiLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoIjozODUsIi4vbW9kdWxlcy9lczcubWF0aC51bXVsaCI6Mzg2LCIuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyIjozODcsIi4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIiOjM4OCwiLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcyI6Mzg5LCIuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjozOTAsIi4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIiOjM5MSwiLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlciI6MzkyLCIuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMiOjM5MywiLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlIjozOTQsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEiOjM5NSwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YSI6Mzk2LCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhIjozOTgsIi4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cyI6Mzk3LCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YSI6NDAwLCIuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzIjozOTksIi4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEiOjQwMSwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEiOjQwMiwiLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhIjo0MDMsIi4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24iOjQwNCwiLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQiOjQwNSwiLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsIjo0MDYsIi4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQiOjQwNywiLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Ijo0MDgsIi4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCI6NDA5LCIuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Ijo0MTAsIi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yIjo0MTEsIi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUiOjQxMiwiLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsIjo0MTMsIi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjo0MTQsIi4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlIjo0MTUsIi4vbW9kdWxlcy93ZWIudGltZXJzIjo0MTZ9XSw0MTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXIKdmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9OwoKLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0Ci8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpcwovLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhCi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuCgp2YXIgY2FjaGVkU2V0VGltZW91dDsKdmFyIGNhY2hlZENsZWFyVGltZW91dDsKCmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTsKfQpmdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHsKICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7Cn0KKGZ1bmN0aW9uICgpIHsKICAgIHRyeSB7CiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0OwogICAgICAgIH0KICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDsKICAgIH0KICAgIHRyeSB7CiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CiAgICAgICAgfQogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CiAgICB9Cn0gKCkpCmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7CiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkgewogICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9ucwogICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7CiAgICB9CiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZAogICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7CiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7CiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTsKICAgIH0KICAgIHRyeSB7CiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzcwogICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7CiAgICB9IGNhdGNoKGUpewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseQogICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7CiAgICAgICAgfSBjYXRjaChlKXsKICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IKICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApOwogICAgICAgIH0KICAgIH0KCgp9CmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHsKICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkgewogICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9ucwogICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTsKICAgIH0KICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWQKICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkgewogICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDsKICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICB9CiAgICB0cnkgewogICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3MKICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7CiAgICB9IGNhdGNoIChlKXsKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5CiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpOwogICAgICAgIH0gY2F0Y2ggKGUpewogICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci4KICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dAogICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTsKICAgICAgICB9CiAgICB9CgoKCn0KdmFyIHF1ZXVlID0gW107CnZhciBkcmFpbmluZyA9IGZhbHNlOwp2YXIgY3VycmVudFF1ZXVlOwp2YXIgcXVldWVJbmRleCA9IC0xOwoKZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkgewogICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgZHJhaW5pbmcgPSBmYWxzZTsKICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7CiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTsKICAgIH0gZWxzZSB7CiAgICAgICAgcXVldWVJbmRleCA9IC0xOwogICAgfQogICAgaWYgKHF1ZXVlLmxlbmd0aCkgewogICAgICAgIGRyYWluUXVldWUoKTsKICAgIH0KfQoKZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHsKICAgIGlmIChkcmFpbmluZykgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spOwogICAgZHJhaW5pbmcgPSB0cnVlOwoKICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgICB3aGlsZShsZW4pIHsKICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTsKICAgICAgICBxdWV1ZSA9IFtdOwogICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHsKICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkgewogICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHF1ZXVlSW5kZXggPSAtMTsKICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7CiAgICB9CiAgICBjdXJyZW50UXVldWUgPSBudWxsOwogICAgZHJhaW5pbmcgPSBmYWxzZTsKICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTsKfQoKcHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHsKICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTsKICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgewogICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldOwogICAgICAgIH0KICAgIH0KICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7CiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykgewogICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7CiAgICB9Cn07CgovLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzCmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkgewogICAgdGhpcy5mdW4gPSBmdW47CiAgICB0aGlzLmFycmF5ID0gYXJyYXk7Cn0KSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7Cn07CnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7CnByb2Nlc3MuYnJvd3NlciA9IHRydWU7CnByb2Nlc3MuZW52ID0ge307CnByb2Nlc3MuYXJndiA9IFtdOwpwcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXMKcHJvY2Vzcy52ZXJzaW9ucyA9IHt9OwoKZnVuY3Rpb24gbm9vcCgpIHt9Cgpwcm9jZXNzLm9uID0gbm9vcDsKcHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7CnByb2Nlc3Mub25jZSA9IG5vb3A7CnByb2Nlc3Mub2ZmID0gbm9vcDsKcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7CnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDsKcHJvY2Vzcy5lbWl0ID0gbm9vcDsKCnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7Cn07Cgpwcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9Owpwcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikgewogICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTsKfTsKcHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTsKCn0se31dLDQxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpewovKioKICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLgogKiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKgogKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGUKICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBbgogKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4KICogdGhlIHNhbWUgZGlyZWN0b3J5LgogKi8KCiEoZnVuY3Rpb24oZ2xvYmFsKSB7CiAgInVzZSBzdHJpY3QiOwoKICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlOwogIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTsKICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC4KICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgPyBTeW1ib2wgOiB7fTsKICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8ICJAQGl0ZXJhdG9yIjsKICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8ICJAQHRvU3RyaW5nVGFnIjsKCiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gIm9iamVjdCI7CiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lOwogIGlmIChydW50aW1lKSB7CiAgICBpZiAoaW5Nb2R1bGUpIHsKICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLAogICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLgogICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7CiAgICB9CiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzCiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuCiAgICByZXR1cm47CiAgfQoKICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXIKICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuCiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307CgogIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHsKICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLgogICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7CiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpOwogICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7CgogICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LAogICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLgogICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpOwoKICAgIHJldHVybiBnZW5lcmF0b3I7CiAgfQogIHJ1bnRpbWUud3JhcCA9IHdyYXA7CgogIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvbgogIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZAogIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZQogIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2UKICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkCiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZwogIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlCiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlCiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaAogIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS4KICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiB7IHR5cGU6ICJub3JtYWwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgcmV0dXJuIHsgdHlwZTogInRocm93IiwgYXJnOiBlcnIgfTsKICAgIH0KICB9CgogIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gInN1c3BlbmRlZFN0YXJ0IjsKICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9ICJzdXNwZW5kZWRZaWVsZCI7CiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gImV4ZWN1dGluZyI7CiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gImNvbXBsZXRlZCI7CgogIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXMKICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuCiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTsKCiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kCiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yCiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXIKICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLgogIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9CiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fQogIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge30KCiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdAogIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuCiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307CiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mOwogIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTsKICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiYKICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmCiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHsKICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkCiAgICAvLyBvZiB0aGUgcG9seWZpbGwuCiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlOwogIH0KCiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID0KICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTsKICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlOwogIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247CiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID0KICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gIkdlbmVyYXRvckZ1bmN0aW9uIjsKCiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGUKICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLgogIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHsKICAgIFsibmV4dCIsICJ0aHJvdyIsICJyZXR1cm4iXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkgewogICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykgewogICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpOwogICAgICB9OwogICAgfSk7CiAgfQoKICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHsKICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gImZ1bmN0aW9uIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7CiAgICByZXR1cm4gY3RvcgogICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8CiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhbgogICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS4KICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSAiR2VuZXJhdG9yRnVuY3Rpb24iCiAgICAgIDogZmFsc2U7CiAgfTsKCiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7CiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7CiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTsKICAgIH0gZWxzZSB7CiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTsKICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkgewogICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSAiR2VuZXJhdG9yRnVuY3Rpb24iOwogICAgICB9CiAgICB9CiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7CiAgICByZXR1cm4gZ2VuRnVuOwogIH07CgogIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0bwogIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0CiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCAiX19hd2FpdCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXMKICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLgogIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHsKICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9OwogIH07CgogIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7CiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTsKICAgICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnOwogICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTsKICAgICAgICBpZiAodmFsdWUgJiYKICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAib2JqZWN0IiAmJgogICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgIl9fYXdhaXQiKSkgewogICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICAgIGludm9rZSgibmV4dCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7CiAgICAgICAgICAgIGludm9rZSgidGhyb3ciLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7CiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lcwogICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlCiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZQogICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWUKICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90CiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlCiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluCiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXQKICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZAogICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2sKICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aAogICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZQogICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZQogICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kCiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi4KICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDsKICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICB9LCByZWplY3QpOwogICAgICB9CiAgICB9CgogICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAib2JqZWN0IiAmJiBwcm9jZXNzLmRvbWFpbikgewogICAgICBpbnZva2UgPSBwcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7CiAgICB9CgogICAgdmFyIHByZXZpb3VzUHJvbWlzZTsKCiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7CiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkgewogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9CiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbAogICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLAogICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWYKICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0bwogICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLAogICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvCiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eQogICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzCiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHkKICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZQogICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5CiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLgogICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKAogICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsCiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlcgogICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLgogICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcKICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTsKICAgIH0KCiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LAogICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuCiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlOwogIH0KCiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTsKICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yOwoKICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mCiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mCiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuCiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7CiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKAogICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KQogICAgKTsKCiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pCiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuCiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpOwogICAgICAgIH0pOwogIH07CgogIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgewogICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDsKCiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7CiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmciKTsKICAgICAgfQoKICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkgewogICAgICAgIGlmIChtZXRob2QgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgIHRocm93IGFyZzsKICAgICAgICB9CgogICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6CiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZQogICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7CiAgICAgIH0KCiAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTsKICAgICAgICBpZiAoZGVsZWdhdGUpIHsKICAgICAgICAgIGlmIChtZXRob2QgPT09ICJyZXR1cm4iIHx8CiAgICAgICAgICAgICAgKG1ldGhvZCA9PT0gInRocm93IiAmJiBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdID09PSB1bmRlZmluZWQpKSB7CiAgICAgICAgICAgIC8vIEEgcmV0dXJuIG9yIHRocm93ICh3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gdGhyb3cKICAgICAgICAgICAgLy8gbWV0aG9kKSBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuCiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsOwoKICAgICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYQogICAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuCiAgICAgICAgICAgIHZhciByZXR1cm5NZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvclsicmV0dXJuIl07CiAgICAgICAgICAgIGlmIChyZXR1cm5NZXRob2QpIHsKICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gocmV0dXJuTWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgYXJnKTsKICAgICAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXR1cm4gbWV0aG9kIHRocmV3IGFuIGV4Y2VwdGlvbiwgbGV0IHRoYXQKICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBwcmV2YWlsIG92ZXIgdGhlIG9yaWdpbmFsIHJldHVybiBvciB0aHJvdy4KICAgICAgICAgICAgICAgIG1ldGhvZCA9ICJ0aHJvdyI7CiAgICAgICAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAobWV0aG9kID09PSAicmV0dXJuIikgewogICAgICAgICAgICAgIC8vIENvbnRpbnVlIHdpdGggdGhlIG91dGVyIHJldHVybiwgbm93IHRoYXQgdGhlIGRlbGVnYXRlCiAgICAgICAgICAgICAgLy8gaXRlcmF0b3IgaGFzIGJlZW4gdGVybWluYXRlZC4KICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaCgKICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kXSwKICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3IsCiAgICAgICAgICAgIGFyZwogICAgICAgICAgKTsKCiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7CgogICAgICAgICAgICAvLyBMaWtlIHJldHVybmluZyBnZW5lcmF0b3IudGhyb3codW5jYXVnaHQpLCBidXQgd2l0aG91dCB0aGUKICAgICAgICAgICAgLy8gb3ZlcmhlYWQgb2YgYW4gZXh0cmEgZnVuY3Rpb24gY2FsbC4KICAgICAgICAgICAgbWV0aG9kID0gInRocm93IjsKICAgICAgICAgICAgYXJnID0gcmVjb3JkLmFyZzsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gRGVsZWdhdGUgZ2VuZXJhdG9yIHJhbiBhbmQgaGFuZGxlZCBpdHMgb3duIGV4Y2VwdGlvbnMgc28KICAgICAgICAgIC8vIHJlZ2FyZGxlc3Mgb2Ygd2hhdCB0aGUgbWV0aG9kIHdhcywgd2UgY29udGludWUgYXMgaWYgaXQgaXMKICAgICAgICAgIC8vICJuZXh0IiB3aXRoIGFuIHVuZGVmaW5lZCBhcmcuCiAgICAgICAgICBtZXRob2QgPSAibmV4dCI7CiAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7CgogICAgICAgICAgdmFyIGluZm8gPSByZWNvcmQuYXJnOwogICAgICAgICAgaWYgKGluZm8uZG9uZSkgewogICAgICAgICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTsKICAgICAgICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDsKICAgICAgICAgICAgcmV0dXJuIGluZm87CiAgICAgICAgICB9CgogICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICBpZiAobWV0aG9kID09PSAibmV4dCIpIHsKICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwncwogICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi4KICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBhcmc7CgogICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAidGhyb3ciKSB7CiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHsKICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDsKICAgICAgICAgICAgdGhyb3cgYXJnOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGFyZykpIHsKICAgICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jaywKICAgICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS4KICAgICAgICAgICAgbWV0aG9kID0gIm5leHQiOwogICAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7CiAgICAgICAgICB9CgogICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSAicmV0dXJuIikgewogICAgICAgICAgY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGFyZyk7CiAgICAgICAgfQoKICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nOwoKICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7CiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSAibm9ybWFsIikgewogICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PQogICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLgogICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmUKICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZAogICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7CgogICAgICAgICAgdmFyIGluZm8gPSB7CiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLAogICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmUKICAgICAgICAgIH07CgogICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHsKICAgICAgICAgICAgaWYgKGNvbnRleHQuZGVsZWdhdGUgJiYgbWV0aG9kID09PSAibmV4dCIpIHsKICAgICAgICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndAogICAgICAgICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS4KICAgICAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBpbmZvOwogICAgICAgICAgfQoKICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkOwogICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZQogICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpIGNhbGwgYWJvdmUuCiAgICAgICAgICBtZXRob2QgPSAidGhyb3ciOwogICAgICAgICAgYXJnID0gcmVjb3JkLmFyZzsKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgfQoKICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZQogIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC4KICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApOwoKICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSAiR2VuZXJhdG9yIjsKCiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgIHJldHVybiAiW29iamVjdCBHZW5lcmF0b3JdIjsKICB9OwoKICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykgewogICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTsKCiAgICBpZiAoMSBpbiBsb2NzKSB7CiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTsKICAgIH0KCiAgICBpZiAoMiBpbiBsb2NzKSB7CiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdOwogICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107CiAgICB9CgogICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpOwogIH0KCiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkgewogICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307CiAgICByZWNvcmQudHlwZSA9ICJub3JtYWwiOwogICAgZGVsZXRlIHJlY29yZC5hcmc7CiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkOwogIH0KCiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkgewogICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoCiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tCiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuCiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6ICJyb290IiB9XTsKICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTsKICAgIHRoaXMucmVzZXQodHJ1ZSk7CiAgfQoKICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHsKICAgIHZhciBrZXlzID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7CiAgICAgIGtleXMucHVzaChrZXkpOwogICAgfQogICAga2V5cy5yZXZlcnNlKCk7CgogICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXAKICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuCiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7CiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7CiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHsKICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7CiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTsKICAgICAgICAgIHJldHVybiBuZXh0OwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlCiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzCiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLgogICAgICBuZXh0LmRvbmUgPSB0cnVlOwogICAgICByZXR1cm4gbmV4dDsKICAgIH07CiAgfTsKCiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7CiAgICBpZiAoaXRlcmFibGUpIHsKICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdOwogICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHsKICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7CiAgICAgIH0KCiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgIHJldHVybiBpdGVyYWJsZTsKICAgICAgfQoKICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7CiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHsKICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07CiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7CiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkOwogICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTsKCiAgICAgICAgICByZXR1cm4gbmV4dDsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDsKICAgICAgfQogICAgfQoKICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy4KICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTsKICB9CiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7CgogIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7CiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07CiAgfQoKICBDb250ZXh0LnByb3RvdHlwZSA9IHsKICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LAoKICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7CiAgICAgIHRoaXMucHJldiA9IDA7CiAgICAgIHRoaXMubmV4dCA9IDA7CiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzCiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uCiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7CiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlOwogICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDsKCiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpOwoKICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7CiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7CiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOgogICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSAidCIgJiYKICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJgogICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHsKICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgc3RvcDogZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuZG9uZSA9IHRydWU7CgogICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdOwogICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uOwogICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLnJ2YWw7CiAgICB9LAoKICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHsKICAgICAgaWYgKHRoaXMuZG9uZSkgewogICAgICAgIHRocm93IGV4Y2VwdGlvbjsKICAgICAgfQoKICAgICAgdmFyIGNvbnRleHQgPSB0aGlzOwogICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHsKICAgICAgICByZWNvcmQudHlwZSA9ICJ0aHJvdyI7CiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjsKICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7CiAgICAgICAgcmV0dXJuICEhY2F1Z2h0OwogICAgICB9CgogICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldOwogICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uOwoKICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSAicm9vdCIpIHsKICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlCiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG8KICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uCiAgICAgICAgICByZXR1cm4gaGFuZGxlKCJlbmQiKTsKICAgICAgICB9CgogICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7CiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgImNhdGNoTG9jIik7CiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCAiZmluYWxseUxvYyIpOwoKICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7CiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHsKICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpOwogICAgICAgICAgICB9CgogICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkgewogICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHsKICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkgewogICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5Iik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAoKICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiYKICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIikgJiYKICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoZmluYWxseUVudHJ5ICYmCiAgICAgICAgICAodHlwZSA9PT0gImJyZWFrIiB8fAogICAgICAgICAgIHR5cGUgPT09ICJjb250aW51ZSIpICYmCiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJgogICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7CiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYQogICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay4KICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsOwogICAgICB9CgogICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTsKICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlOwogICAgICByZWNvcmQuYXJnID0gYXJnOwoKICAgICAgaWYgKGZpbmFsbHlFbnRyeSkgewogICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY29tcGxldGUocmVjb3JkKTsKICAgICAgfQoKICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICB9LAoKICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7CiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgIHRocm93IHJlY29yZC5hcmc7CiAgICAgIH0KCiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gImJyZWFrIiB8fAogICAgICAgICAgcmVjb3JkLnR5cGUgPT09ICJjb250aW51ZSIpIHsKICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnOwogICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSAicmV0dXJuIikgewogICAgICAgIHRoaXMucnZhbCA9IHJlY29yZC5hcmc7CiAgICAgICAgdGhpcy5uZXh0ID0gImVuZCI7CiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09ICJub3JtYWwiICYmIGFmdGVyTG9jKSB7CiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7CiAgICAgIH0KICAgIH0sCgogICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHsKICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpOwogICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7CiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgImNhdGNoIjogZnVuY3Rpb24odHJ5TG9jKSB7CiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07CiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7CiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjsKICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZzsKICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gdGhyb3duOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uCiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay4KICAgICAgdGhyb3cgbmV3IEVycm9yKCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHQiKTsKICAgIH0sCgogICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHsKICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHsKICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSwKICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLAogICAgICAgIG5leHRMb2M6IG5leHRMb2MKICAgICAgfTsKCiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgfQogIH07Cn0pKAogIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwKICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3QKICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLgogIHR5cGVvZiBnbG9iYWwgPT09ICJvYmplY3QiID8gZ2xvYmFsIDoKICB0eXBlb2Ygd2luZG93ID09PSAib2JqZWN0IiA/IHdpbmRvdyA6CiAgdHlwZW9mIHNlbGYgPT09ICJvYmplY3QiID8gc2VsZiA6IHRoaXMKKTsKCn0pLmNhbGwodGhpcyxyZXF1aXJlKCdfcHJvY2VzcycpLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHsiX3Byb2Nlc3MiOjQxOH1dLDQyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CihmdW5jdGlvbiAoZ2xvYmFsKXsKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovLyBEaXN0cmlidXRpb24gZmlsZSBmb3IgTWVzc2FnZUZhY3RvcnkuanMgCi8vIHZlcnNpb246IDAuNS4xCi8vIExhc3QgYnVpbGQ6IFRodSBEZWMgMjIgMjAxNiAxMDowODowOSBHTVQrMDAwMCAoV0VUKQoKIWZ1bmN0aW9uKGUpe2lmKCJvYmplY3QiPT10eXBlb2YgZXhwb3J0cyYmInVuZGVmaW5lZCIhPXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9ZSgpO2Vsc2UgaWYoImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXt2YXIgdDt0PSJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzoidW5kZWZpbmVkIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcyx0Lk1lc3NhZ2VGYWN0b3J5PWUoKX19KGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIGZ1bmN0aW9uIHQoZSxyLG4pe2Z1bmN0aW9uIG8oYSxzKXtpZighclthXSl7aWYoIWVbYV0pe3ZhciB1PSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFzJiZ1KXJldHVybiB1KGEsITApO2lmKGkpcmV0dXJuIGkoYSwhMCk7dmFyIGM9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrYSsiJyIpO3Rocm93IGMuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsY312YXIgbD1yW2FdPXtleHBvcnRzOnt9fTtlW2FdWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKHQpe3ZhciByPWVbYV1bMV1bdF07cmV0dXJuIG8ocj9yOnQpfSxsLGwuZXhwb3J0cyx0LGUscixuKX1yZXR1cm4gclthXS5leHBvcnRzfWZvcih2YXIgaT0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxhPTA7YTxuLmxlbmd0aDthKyspbyhuW2FdKTtyZXR1cm4gb30oezE6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkiOjE2fV0sMjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUiOjE3fV0sMzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5IiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkiOjE4fV0sNDpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZnJlZXplIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9mcmVlemUiOjE5fV0sNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLF9fZXNNb2R1bGU6ITB9fSx7ImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6MjB9XSw2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXsiZGVmYXVsdCI6ZSgiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzIjoyMX1dLDc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YiOjIyfV0sODpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17ImRlZmF1bHQiOmUoImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wiKSxfX2VzTW9kdWxlOiEwfX0seyJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sIjoyM31dLDk6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9eyJkZWZhdWx0IjplKCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yIiksX19lc01vZHVsZTohMH19LHsiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvciI6MjR9XSwxMDpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtyLl9fZXNNb2R1bGU9ITAsclsiZGVmYXVsdCJdPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9fSx7fV0sMTE6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5IiksaT1uKG8pO3JbImRlZmF1bHQiXT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbiYmKG4ud3JpdGFibGU9ITApLCgwLGlbImRlZmF1bHQiXSkoZSxuLmtleSxuKX19cmV0dXJuIGZ1bmN0aW9uKHQscixuKXtyZXR1cm4gciYmZSh0LnByb3RvdHlwZSxyKSxuJiZlKHQsbiksdH19KCl9LHsiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5IjozfV0sMTI6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiIpLGk9bihvKSxhPWUoIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZSIpLHM9bihhKSx1PWUoIi4uL2hlbHBlcnMvdHlwZW9mIiksYz1uKHUpO3JbImRlZmF1bHQiXT1mdW5jdGlvbihlLHQpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIrKCJ1bmRlZmluZWQiPT10eXBlb2YgdD8idW5kZWZpbmVkIjooMCxjWyJkZWZhdWx0Il0pKHQpKSk7ZS5wcm90b3R5cGU9KDAsc1siZGVmYXVsdCJdKSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKGlbImRlZmF1bHQiXT8oMCxpWyJkZWZhdWx0Il0pKGUsdCk6ZS5fX3Byb3RvX189dCl9fSx7Ii4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZSI6MiwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZiI6NywiLi4vaGVscGVycy90eXBlb2YiOjE0fV0sMTM6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZSgiLi4vaGVscGVycy90eXBlb2YiKSxpPW4obyk7clsiZGVmYXVsdCJdPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTtyZXR1cm4hdHx8Im9iamVjdCIhPT0oInVuZGVmaW5lZCI9PXR5cGVvZiB0PyJ1bmRlZmluZWQiOigwLGlbImRlZmF1bHQiXSkodCkpJiYiZnVuY3Rpb24iIT10eXBlb2YgdD9lOnR9fSx7Ii4uL2hlbHBlcnMvdHlwZW9mIjoxNH1dLDE0OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yIiksaT1uKG8pLGE9ZSgiLi4vY29yZS1qcy9zeW1ib2wiKSxzPW4oYSksdT0iZnVuY3Rpb24iPT10eXBlb2Ygc1siZGVmYXVsdCJdJiYic3ltYm9sIj09dHlwZW9mIGlbImRlZmF1bHQiXT9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2Ygc1siZGVmYXVsdCJdJiZlLmNvbnN0cnVjdG9yPT09c1siZGVmYXVsdCJdJiZlIT09c1siZGVmYXVsdCJdLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgZX07clsiZGVmYXVsdCJdPSJmdW5jdGlvbiI9PXR5cGVvZiBzWyJkZWZhdWx0Il0mJiJzeW1ib2wiPT09dShpWyJkZWZhdWx0Il0pP2Z1bmN0aW9uKGUpe3JldHVybiJ1bmRlZmluZWQiPT10eXBlb2YgZT8idW5kZWZpbmVkIjp1KGUpfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIHNbImRlZmF1bHQiXSYmZS5jb25zdHJ1Y3Rvcj09PXNbImRlZmF1bHQiXSYmZSE9PXNbImRlZmF1bHQiXS5wcm90b3R5cGU/InN5bWJvbCI6InVuZGVmaW5lZCI9PXR5cGVvZiBlPyJ1bmRlZmluZWQiOnUoZSl9fSx7Ii4uL2NvcmUtanMvc3ltYm9sIjo4LCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvciI6OX1dLDE1OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoInJlZ2VuZXJhdG9yLXJ1bnRpbWUiKX0seyJyZWdlbmVyYXRvci1ydW50aW1lIjo5N31dLDE2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLG89bi5KU09OfHwobi5KU09OPXtzdHJpbmdpZnk6SlNPTi5zdHJpbmdpZnl9KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uc3RyaW5naWZ5LmFwcGx5KG8sYXJndW1lbnRzKX19LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzB9XSwxNzpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUiKTt2YXIgbj1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuLmNyZWF0ZShlLHQpfX0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMCwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZSI6ODR9XSwxODpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkiKTt2YXIgbj1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZGVmaW5lUHJvcGVydHkoZSx0LHIpfX0seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMCwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eSI6ODV9XSwxOTpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fY29yZSIpLk9iamVjdC5mcmVlemV9LHsiLi4vLi4vbW9kdWxlcy9fY29yZSI6MzAsIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUiOjg2fV0sMjA6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZiIpLHQuZXhwb3J0cz1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0LmdldFByb3RvdHlwZU9mfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMwLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZiI6ODd9XSwyMTpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzIiksdC5leHBvcnRzPWUoIi4uLy4uL21vZHVsZXMvX2NvcmUiKS5PYmplY3Qua2V5c30seyIuLi8uLi9tb2R1bGVzL19jb3JlIjozMCwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMiOjg4fV0sMjI6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZiIpLHQuZXhwb3J0cz1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuT2JqZWN0LnNldFByb3RvdHlwZU9mfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMwLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZiI6ODl9XSwyMzpbZnVuY3Rpb24oZSx0LHIpe2UoIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCIpLGUoIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmciKSxlKCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3IiKSxlKCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZSIpLHQuZXhwb3J0cz1lKCIuLi8uLi9tb2R1bGVzL19jb3JlIikuU3ltYm9sfSx7Ii4uLy4uL21vZHVsZXMvX2NvcmUiOjMwLCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nIjo5MCwiLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sIjo5MiwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yIjo5MywiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUiOjk0fV0sMjQ6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IiKSxlKCIuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUiKSx0LmV4cG9ydHM9ZSgiLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCIpLmYoIml0ZXJhdG9yIil9LHsiLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCI6ODEsIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvciI6OTEsIi4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZSI6OTV9XSwyNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZigiZnVuY3Rpb24iIT10eXBlb2YgZSl0aHJvdyBUeXBlRXJyb3IoZSsiIGlzIG5vdCBhIGZ1bmN0aW9uISIpO3JldHVybiBlfX0se31dLDI2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKCl7fX0se31dLDI3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faXMtb2JqZWN0Iik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFuKGUpKXRocm93IFR5cGVFcnJvcihlKyIgaXMgbm90IGFuIG9iamVjdCEiKTtyZXR1cm4gZX19LHsiLi9faXMtb2JqZWN0Ijo0Nn1dLDI4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW9iamVjdCIpLG89ZSgiLi9fdG8tbGVuZ3RoIiksaT1lKCIuL190by1pbmRleCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyLGEpe3ZhciBzLHU9bih0KSxjPW8odS5sZW5ndGgpLGw9aShhLGMpO2lmKGUmJnIhPXIpe2Zvcig7Yz5sOylpZihzPXVbbCsrXSxzIT1zKXJldHVybiEwfWVsc2UgZm9yKDtjPmw7bCsrKWlmKChlfHxsIGluIHUpJiZ1W2xdPT09cilyZXR1cm4gZXx8bHx8MDtyZXR1cm4hZSYmLTF9fX0seyIuL190by1pbmRleCI6NzMsIi4vX3RvLWlvYmplY3QiOjc1LCIuL190by1sZW5ndGgiOjc2fV0sMjk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj17fS50b1N0cmluZzt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4uY2FsbChlKS5zbGljZSg4LC0xKX19LHt9XSwzMDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXQuZXhwb3J0cz17dmVyc2lvbjoiMi40LjAifTsibnVtYmVyIj09dHlwZW9mIF9fZSYmKF9fZT1uKX0se31dLDMxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fYS1mdW5jdGlvbiIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7aWYobihlKSx2b2lkIDA9PT10KXJldHVybiBlO3N3aXRjaChyKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBlLmNhbGwodCxyKX07Y2FzZSAyOnJldHVybiBmdW5jdGlvbihyLG4pe3JldHVybiBlLmNhbGwodCxyLG4pfTtjYXNlIDM6cmV0dXJuIGZ1bmN0aW9uKHIsbixvKXtyZXR1cm4gZS5jYWxsKHQscixuLG8pfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0LGFyZ3VtZW50cyl9fX0seyIuL19hLWZ1bmN0aW9uIjoyNX1dLDMyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09ZSl0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNhbGwgbWV0aG9kIG9uICAiK2UpO3JldHVybiBlfX0se31dLDMzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSFlKCIuL19mYWlscyIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0seyIuL19mYWlscyI6Mzh9XSwzNDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lzLW9iamVjdCIpLG89ZSgiLi9fZ2xvYmFsIikuZG9jdW1lbnQsaT1uKG8pJiZuKG8uY3JlYXRlRWxlbWVudCk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpP28uY3JlYXRlRWxlbWVudChlKTp7fX19LHsiLi9fZ2xvYmFsIjozOSwiLi9faXMtb2JqZWN0Ijo0Nn1dLDM1OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSJjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YiLnNwbGl0KCIsIil9LHt9XSwzNjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzIiksbz1lKCIuL19vYmplY3QtZ29wcyIpLGk9ZSgiLi9fb2JqZWN0LXBpZSIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1uKGUpLHI9by5mO2lmKHIpZm9yKHZhciBhLHM9cihlKSx1PWkuZixjPTA7cy5sZW5ndGg+YzspdS5jYWxsKGUsYT1zW2MrK10pJiZ0LnB1c2goYSk7cmV0dXJuIHR9fSx7Ii4vX29iamVjdC1nb3BzIjo2MCwiLi9fb2JqZWN0LWtleXMiOjYzLCIuL19vYmplY3QtcGllIjo2NH1dLDM3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz1lKCIuL19jb3JlIiksaT1lKCIuL19jdHgiKSxhPWUoIi4vX2hpZGUiKSxzPSJwcm90b3R5cGUiLHU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBjLGwsZixkPWUmdS5GLHA9ZSZ1LkcsaD1lJnUuUyx5PWUmdS5QLG09ZSZ1LkIsdj1lJnUuVyxfPXA/bzpvW3RdfHwob1t0XT17fSksYj1fW3NdLGc9cD9uOmg/blt0XTooblt0XXx8e30pW3NdO3AmJihyPXQpO2ZvcihjIGluIHIpbD0hZCYmZyYmdm9pZCAwIT09Z1tjXSxsJiZjIGluIF98fChmPWw/Z1tjXTpyW2NdLF9bY109cCYmImZ1bmN0aW9uIiE9dHlwZW9mIGdbY10/cltjXTptJiZsP2koZixuKTp2JiZnW2NdPT1mP2Z1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKHQscixuKXtpZih0aGlzIGluc3RhbmNlb2YgZSl7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbmV3IGU7Y2FzZSAxOnJldHVybiBuZXcgZSh0KTtjYXNlIDI6cmV0dXJuIG5ldyBlKHQscil9cmV0dXJuIG5ldyBlKHQscixuKX1yZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3JldHVybiB0W3NdPWVbc10sdH0oZik6eSYmImZ1bmN0aW9uIj09dHlwZW9mIGY/aShGdW5jdGlvbi5jYWxsLGYpOmYseSYmKChfLnZpcnR1YWx8fChfLnZpcnR1YWw9e30pKVtjXT1mLGUmdS5SJiZiJiYhYltjXSYmYShiLGMsZikpKX07dS5GPTEsdS5HPTIsdS5TPTQsdS5QPTgsdS5CPTE2LHUuVz0zMix1LlU9NjQsdS5SPTEyOCx0LmV4cG9ydHM9dX0seyIuL19jb3JlIjozMCwiLi9fY3R4IjozMSwiLi9fZ2xvYmFsIjozOSwiLi9faGlkZSI6NDF9XSwzODpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXt0cnl7cmV0dXJuISFlKCl9Y2F0Y2godCl7cmV0dXJuITB9fX0se31dLDM5OltmdW5jdGlvbihlLHQscil7dmFyIG49dC5leHBvcnRzPSJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuTWF0aD09TWF0aD93aW5kb3c6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbigicmV0dXJuIHRoaXMiKSgpOyJudW1iZXIiPT10eXBlb2YgX19nJiYoX19nPW4pfSx7fV0sNDA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj17fS5oYXNPd25Qcm9wZXJ0eTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jYWxsKGUsdCl9fSx7fV0sNDE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3QtZHAiKSxvPWUoIi4vX3Byb3BlcnR5LWRlc2MiKTt0LmV4cG9ydHM9ZSgiLi9fZGVzY3JpcHRvcnMiKT9mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZihlLHQsbygxLHIpKX06ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlW3RdPXIsZX19LHsiLi9fZGVzY3JpcHRvcnMiOjMzLCIuL19vYmplY3QtZHAiOjU1LCIuL19wcm9wZXJ0eS1kZXNjIjo2Nn1dLDQyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoIi4vX2dsb2JhbCIpLmRvY3VtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnR9LHsiLi9fZ2xvYmFsIjozOX1dLDQzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSFlKCIuL19kZXNjcmlwdG9ycyIpJiYhZSgiLi9fZmFpbHMiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSgiLi9fZG9tLWNyZWF0ZSIpKCJkaXYiKSwiYSIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0seyIuL19kZXNjcmlwdG9ycyI6MzMsIi4vX2RvbS1jcmVhdGUiOjM0LCIuL19mYWlscyI6Mzh9XSw0NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2NvZiIpO3QuZXhwb3J0cz1PYmplY3QoInoiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKT9PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIlN0cmluZyI9PW4oZSk/ZS5zcGxpdCgiIik6T2JqZWN0KGUpfX0seyIuL19jb2YiOjI5fV0sNDU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19jb2YiKTt0LmV4cG9ydHM9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuIkFycmF5Ij09bihlKX19LHsiLi9fY29mIjoyOX1dLDQ2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiJvYmplY3QiPT10eXBlb2YgZT9udWxsIT09ZToiZnVuY3Rpb24iPT10eXBlb2YgZX19LHt9XSw0NzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1lKCIuL19vYmplY3QtY3JlYXRlIiksbz1lKCIuL19wcm9wZXJ0eS1kZXNjIiksaT1lKCIuL19zZXQtdG8tc3RyaW5nLXRhZyIpLGE9e307ZSgiLi9faGlkZSIpKGEsZSgiLi9fd2tzIikoIml0ZXJhdG9yIiksZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLHQuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7ZS5wcm90b3R5cGU9bihhLHtuZXh0Om8oMSxyKX0pLGkoZSx0KyIgSXRlcmF0b3IiKX19LHsiLi9faGlkZSI6NDEsIi4vX29iamVjdC1jcmVhdGUiOjU0LCIuL19wcm9wZXJ0eS1kZXNjIjo2NiwiLi9fc2V0LXRvLXN0cmluZy10YWciOjY5LCIuL193a3MiOjgyfV0sNDg6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fbGlicmFyeSIpLG89ZSgiLi9fZXhwb3J0IiksaT1lKCIuL19yZWRlZmluZSIpLGE9ZSgiLi9faGlkZSIpLHM9ZSgiLi9faGFzIiksdT1lKCIuL19pdGVyYXRvcnMiKSxjPWUoIi4vX2l0ZXItY3JlYXRlIiksbD1lKCIuL19zZXQtdG8tc3RyaW5nLXRhZyIpLGY9ZSgiLi9fb2JqZWN0LWdwbyIpLGQ9ZSgiLi9fd2tzIikoIml0ZXJhdG9yIikscD0hKFtdLmtleXMmJiJuZXh0ImluW10ua2V5cygpKSxoPSJAQGl0ZXJhdG9yIix5PSJrZXlzIixtPSJ2YWx1ZXMiLHY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyLF8sYixnLEUpe2Mocix0LF8pO3ZhciBqLHcsTyxNPWZ1bmN0aW9uKGUpe2lmKCFwJiZlIGluIFIpcmV0dXJuIFJbZV07c3dpdGNoKGUpe2Nhc2UgeTpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX07Y2FzZSBtOnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX19LHg9dCsiIEl0ZXJhdG9yIixQPWI9PW0saz0hMSxSPWUucHJvdG90eXBlLFM9UltkXXx8UltoXXx8YiYmUltiXSxUPVN8fE0oYiksQT1iP1A/TSgiZW50cmllcyIpOlQ6dm9pZCAwLE49IkFycmF5Ij09dD9SLmVudHJpZXN8fFM6UztpZihOJiYoTz1mKE4uY2FsbChuZXcgZSkpLE8hPT1PYmplY3QucHJvdG90eXBlJiYobChPLHgsITApLG58fHMoTyxkKXx8YShPLGQsdikpKSxQJiZTJiZTLm5hbWUhPT1tJiYoaz0hMCxUPWZ1bmN0aW9uKCl7cmV0dXJuIFMuY2FsbCh0aGlzKX0pLG4mJiFFfHwhcCYmIWsmJlJbZF18fGEoUixkLFQpLHVbdF09VCx1W3hdPXYsYilpZihqPXt2YWx1ZXM6UD9UOk0obSksa2V5czpnP1Q6TSh5KSxlbnRyaWVzOkF9LEUpZm9yKHcgaW4gail3IGluIFJ8fGkoUix3LGpbd10pO2Vsc2UgbyhvLlArby5GKihwfHxrKSx0LGopO3JldHVybiBqfX0seyIuL19leHBvcnQiOjM3LCIuL19oYXMiOjQwLCIuL19oaWRlIjo0MSwiLi9faXRlci1jcmVhdGUiOjQ3LCIuL19pdGVyYXRvcnMiOjUwLCIuL19saWJyYXJ5Ijo1MiwiLi9fb2JqZWN0LWdwbyI6NjEsIi4vX3JlZGVmaW5lIjo2NywiLi9fc2V0LXRvLXN0cmluZy10YWciOjY5LCIuL193a3MiOjgyfV0sNDk6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57dmFsdWU6dCxkb25lOiEhZX19fSx7fV0sNTA6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e319LHt9XSw1MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzIiksbz1lKCIuL190by1pb2JqZWN0Iik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByLGk9byhlKSxhPW4oaSkscz1hLmxlbmd0aCx1PTA7cz51OylpZihpW3I9YVt1KytdXT09PXQpcmV0dXJuIHJ9fSx7Ii4vX29iamVjdC1rZXlzIjo2MywiLi9fdG8taW9iamVjdCI6NzV9XSw1MjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hMH0se31dLDUzOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdWlkIikoIm1ldGEiKSxvPWUoIi4vX2lzLW9iamVjdCIpLGk9ZSgiLi9faGFzIiksYT1lKCIuL19vYmplY3QtZHAiKS5mLHM9MCx1PU9iamVjdC5pc0V4dGVuc2libGV8fGZ1bmN0aW9uKCl7cmV0dXJuITB9LGM9IWUoIi4vX2ZhaWxzIikoZnVuY3Rpb24oKXtyZXR1cm4gdShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pLGw9ZnVuY3Rpb24oZSl7YShlLG4se3ZhbHVlOntpOiJPIisgKytzLHc6e319fSl9LGY9ZnVuY3Rpb24oZSx0KXtpZighbyhlKSlyZXR1cm4ic3ltYm9sIj09dHlwZW9mIGU/ZTooInN0cmluZyI9PXR5cGVvZiBlPyJTIjoiUCIpK2U7aWYoIWkoZSxuKSl7aWYoIXUoZSkpcmV0dXJuIkYiO2lmKCF0KXJldHVybiJFIjtsKGUpfXJldHVybiBlW25dLml9LGQ9ZnVuY3Rpb24oZSx0KXtpZighaShlLG4pKXtpZighdShlKSlyZXR1cm4hMDtpZighdClyZXR1cm4hMTtsKGUpfXJldHVybiBlW25dLnd9LHA9ZnVuY3Rpb24oZSl7cmV0dXJuIGMmJmguTkVFRCYmdShlKSYmIWkoZSxuKSYmbChlKSxlfSxoPXQuZXhwb3J0cz17S0VZOm4sTkVFRDohMSxmYXN0S2V5OmYsZ2V0V2VhazpkLG9uRnJlZXplOnB9fSx7Ii4vX2ZhaWxzIjozOCwiLi9faGFzIjo0MCwiLi9faXMtb2JqZWN0Ijo0NiwiLi9fb2JqZWN0LWRwIjo1NSwiLi9fdWlkIjo3OX1dLDU0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fYW4tb2JqZWN0Iiksbz1lKCIuL19vYmplY3QtZHBzIiksaT1lKCIuL19lbnVtLWJ1Zy1rZXlzIiksYT1lKCIuL19zaGFyZWQta2V5IikoIklFX1BST1RPIikscz1mdW5jdGlvbigpe30sdT0icHJvdG90eXBlIixjPWZ1bmN0aW9uKCl7dmFyIHQscj1lKCIuL19kb20tY3JlYXRlIikoImlmcmFtZSIpLG49aS5sZW5ndGgsbz0iPCIsYT0iPiI7Zm9yKHIuc3R5bGUuZGlzcGxheT0ibm9uZSIsZSgiLi9faHRtbCIpLmFwcGVuZENoaWxkKHIpLHIuc3JjPSJqYXZhc2NyaXB0OiIsdD1yLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQsdC5vcGVuKCksdC53cml0ZShvKyJzY3JpcHQiK2ErImRvY3VtZW50LkY9T2JqZWN0IitvKyIvc2NyaXB0IithKSx0LmNsb3NlKCksYz10LkY7bi0tOylkZWxldGUgY1t1XVtpW25dXTtyZXR1cm4gYygpfTt0LmV4cG9ydHM9T2JqZWN0LmNyZWF0ZXx8ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gbnVsbCE9PWU/KHNbdV09bihlKSxyPW5ldyBzLHNbdV09bnVsbCxyW2FdPWUpOnI9YygpLHZvaWQgMD09PXQ/cjpvKHIsdCl9fSx7Ii4vX2FuLW9iamVjdCI6MjcsIi4vX2RvbS1jcmVhdGUiOjM0LCIuL19lbnVtLWJ1Zy1rZXlzIjozNSwiLi9faHRtbCI6NDIsIi4vX29iamVjdC1kcHMiOjU2LCIuL19zaGFyZWQta2V5Ijo3MH1dLDU1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fYW4tb2JqZWN0Iiksbz1lKCIuL19pZTgtZG9tLWRlZmluZSIpLGk9ZSgiLi9fdG8tcHJpbWl0aXZlIiksYT1PYmplY3QuZGVmaW5lUHJvcGVydHk7ci5mPWUoIi4vX2Rlc2NyaXB0b3JzIik/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHQ9aSh0LCEwKSxuKHIpLG8pdHJ5e3JldHVybiBhKGUsdCxyKX1jYXRjaChzKXt9aWYoImdldCJpbiByfHwic2V0ImluIHIpdGhyb3cgVHlwZUVycm9yKCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEiKTtyZXR1cm4idmFsdWUiaW4gciYmKGVbdF09ci52YWx1ZSksZX19LHsiLi9fYW4tb2JqZWN0IjoyNywiLi9fZGVzY3JpcHRvcnMiOjMzLCIuL19pZTgtZG9tLWRlZmluZSI6NDMsIi4vX3RvLXByaW1pdGl2ZSI6Nzh9XSw1NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1kcCIpLG89ZSgiLi9fYW4tb2JqZWN0IiksaT1lKCIuL19vYmplY3Qta2V5cyIpO3QuZXhwb3J0cz1lKCIuL19kZXNjcmlwdG9ycyIpP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzOmZ1bmN0aW9uKGUsdCl7byhlKTtmb3IodmFyIHIsYT1pKHQpLHM9YS5sZW5ndGgsdT0wO3M+dTspbi5mKGUscj1hW3UrK10sdFtyXSk7cmV0dXJuIGV9fSx7Ii4vX2FuLW9iamVjdCI6MjcsIi4vX2Rlc2NyaXB0b3JzIjozMywiLi9fb2JqZWN0LWRwIjo1NSwiLi9fb2JqZWN0LWtleXMiOjYzfV0sNTc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19vYmplY3QtcGllIiksbz1lKCIuL19wcm9wZXJ0eS1kZXNjIiksaT1lKCIuL190by1pb2JqZWN0IiksYT1lKCIuL190by1wcmltaXRpdmUiKSxzPWUoIi4vX2hhcyIpLHU9ZSgiLi9faWU4LWRvbS1kZWZpbmUiKSxjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7ci5mPWUoIi4vX2Rlc2NyaXB0b3JzIik/YzpmdW5jdGlvbihlLHQpe2lmKGU9aShlKSx0PWEodCwhMCksdSl0cnl7cmV0dXJuIGMoZSx0KX1jYXRjaChyKXt9aWYocyhlLHQpKXJldHVybiBvKCFuLmYuY2FsbChlLHQpLGVbdF0pfX0seyIuL19kZXNjcmlwdG9ycyI6MzMsIi4vX2hhcyI6NDAsIi4vX2llOC1kb20tZGVmaW5lIjo0MywiLi9fb2JqZWN0LXBpZSI6NjQsIi4vX3Byb3BlcnR5LWRlc2MiOjY2LCIuL190by1pb2JqZWN0Ijo3NSwiLi9fdG8tcHJpbWl0aXZlIjo3OH1dLDU4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW9iamVjdCIpLG89ZSgiLi9fb2JqZWN0LWdvcG4iKS5mLGk9e30udG9TdHJpbmcsYT0ib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdLHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBvKGUpfWNhdGNoKHQpe3JldHVybiBhLnNsaWNlKCl9fTt0LmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gYSYmIltvYmplY3QgV2luZG93XSI9PWkuY2FsbChlKT9zKGUpOm8obihlKSl9fSx7Ii4vX29iamVjdC1nb3BuIjo1OSwiLi9fdG8taW9iamVjdCI6NzV9XSw1OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzLWludGVybmFsIiksbz1lKCIuL19lbnVtLWJ1Zy1rZXlzIikuY29uY2F0KCJsZW5ndGgiLCJwcm90b3R5cGUiKTtyLmY9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsbyl9fSx7Ii4vX2VudW0tYnVnLWtleXMiOjM1LCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbCI6NjJ9XSw2MDpbZnVuY3Rpb24oZSx0LHIpe3IuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSx7fV0sNjE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19oYXMiKSxvPWUoIi4vX3RvLW9iamVjdCIpLGk9ZSgiLi9fc2hhcmVkLWtleSIpKCJJRV9QUk9UTyIpLGE9T2JqZWN0LnByb3RvdHlwZTt0LmV4cG9ydHM9T2JqZWN0LmdldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlKXtyZXR1cm4gZT1vKGUpLG4oZSxpKT9lW2ldOiJmdW5jdGlvbiI9PXR5cGVvZiBlLmNvbnN0cnVjdG9yJiZlIGluc3RhbmNlb2YgZS5jb25zdHJ1Y3Rvcj9lLmNvbnN0cnVjdG9yLnByb3RvdHlwZTplIGluc3RhbmNlb2YgT2JqZWN0P2E6bnVsbH19LHsiLi9faGFzIjo0MCwiLi9fc2hhcmVkLWtleSI6NzAsIi4vX3RvLW9iamVjdCI6Nzd9XSw2MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2hhcyIpLG89ZSgiLi9fdG8taW9iamVjdCIpLGk9ZSgiLi9fYXJyYXktaW5jbHVkZXMiKSghMSksYT1lKCIuL19zaGFyZWQta2V5IikoIklFX1BST1RPIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHIscz1vKGUpLHU9MCxjPVtdO2ZvcihyIGluIHMpciE9YSYmbihzLHIpJiZjLnB1c2gocik7Zm9yKDt0Lmxlbmd0aD51OyluKHMscj10W3UrK10pJiYofmkoYyxyKXx8Yy5wdXNoKHIpKTtyZXR1cm4gY319LHsiLi9fYXJyYXktaW5jbHVkZXMiOjI4LCIuL19oYXMiOjQwLCIuL19zaGFyZWQta2V5Ijo3MCwiLi9fdG8taW9iamVjdCI6NzV9XSw2MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1rZXlzLWludGVybmFsIiksbz1lKCIuL19lbnVtLWJ1Zy1rZXlzIik7dC5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLG8pfX0seyIuL19lbnVtLWJ1Zy1rZXlzIjozNSwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwiOjYyfV0sNjQ6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LHt9XSw2NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2V4cG9ydCIpLG89ZSgiLi9fY29yZSIpLGk9ZSgiLi9fZmFpbHMiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj0oby5PYmplY3R8fHt9KVtlXXx8T2JqZWN0W2VdLGE9e307YVtlXT10KHIpLG4obi5TK24uRippKGZ1bmN0aW9uKCl7cigxKX0pLCJPYmplY3QiLGEpfX0seyIuL19jb3JlIjozMCwiLi9fZXhwb3J0IjozNywiLi9fZmFpbHMiOjM4fV0sNjY6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57ZW51bWVyYWJsZTohKDEmZSksY29uZmlndXJhYmxlOiEoMiZlKSx3cml0YWJsZTohKDQmZSksdmFsdWU6dH19fSx7fV0sNjc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZSgiLi9faGlkZSIpfSx7Ii4vX2hpZGUiOjQxfV0sNjg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19pcy1vYmplY3QiKSxvPWUoIi4vX2FuLW9iamVjdCIpLGk9ZnVuY3Rpb24oZSx0KXtpZihvKGUpLCFuKHQpJiZudWxsIT09dCl0aHJvdyBUeXBlRXJyb3IodCsiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlISIpfTt0LmV4cG9ydHM9e3NldDpPYmplY3Quc2V0UHJvdG90eXBlT2Z8fCgiX19wcm90b19fImlue30/ZnVuY3Rpb24odCxyLG4pe3RyeXtuPWUoIi4vX2N0eCIpKEZ1bmN0aW9uLmNhbGwsZSgiLi9fb2JqZWN0LWdvcGQiKS5mKE9iamVjdC5wcm90b3R5cGUsIl9fcHJvdG9fXyIpLnNldCwyKSxuKHQsW10pLHI9ISh0IGluc3RhbmNlb2YgQXJyYXkpfWNhdGNoKG8pe3I9ITB9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGkoZSx0KSxyP2UuX19wcm90b19fPXQ6bihlLHQpLGV9fSh7fSwhMSk6dm9pZCAwKSxjaGVjazppfX0seyIuL19hbi1vYmplY3QiOjI3LCIuL19jdHgiOjMxLCIuL19pcy1vYmplY3QiOjQ2LCIuL19vYmplY3QtZ29wZCI6NTd9XSw2OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX29iamVjdC1kcCIpLmYsbz1lKCIuL19oYXMiKSxpPWUoIi4vX3drcyIpKCJ0b1N0cmluZ1RhZyIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7ZSYmIW8oZT1yP2U6ZS5wcm90b3R5cGUsaSkmJm4oZSxpLHtjb25maWd1cmFibGU6ITAsdmFsdWU6dH0pfX0seyIuL19oYXMiOjQwLCIuL19vYmplY3QtZHAiOjU1LCIuL193a3MiOjgyfV0sNzA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19zaGFyZWQiKSgia2V5cyIpLG89ZSgiLi9fdWlkIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1vKGUpKX19LHsiLi9fc2hhcmVkIjo3MSwiLi9fdWlkIjo3OX1dLDcxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz0iX19jb3JlLWpzX3NoYXJlZF9fIixpPW5bb118fChuW29dPXt9KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlbZV18fChpW2VdPXt9KX19LHsiLi9fZ2xvYmFsIjozOX1dLDcyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8taW50ZWdlciIpLG89ZSgiLi9fZGVmaW5lZCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyKXt2YXIgaSxhLHM9U3RyaW5nKG8odCkpLHU9bihyKSxjPXMubGVuZ3RoO3JldHVybiB1PDB8fHU+PWM/ZT8iIjp2b2lkIDA6KGk9cy5jaGFyQ29kZUF0KHUpLGk8NTUyOTZ8fGk+NTYzMTl8fHUrMT09PWN8fChhPXMuY2hhckNvZGVBdCh1KzEpKTw1NjMyMHx8YT41NzM0Mz9lP3MuY2hhckF0KHUpOmk6ZT9zLnNsaWNlKHUsdSsyKTooaS01NTI5Njw8MTApKyhhLTU2MzIwKSs2NTUzNil9fX0seyIuL19kZWZpbmVkIjozMiwiLi9fdG8taW50ZWdlciI6NzR9XSw3MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3RvLWludGVnZXIiKSxvPU1hdGgubWF4LGk9TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bihlKSxlPDA/byhlK3QsMCk6aShlLHQpfX0seyIuL190by1pbnRlZ2VyIjo3NH1dLDc0OltmdW5jdGlvbihlLHQscil7dmFyIG49TWF0aC5jZWlsLG89TWF0aC5mbG9vcjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlzTmFOKGU9K2UpPzA6KGU+MD9vOm4pKGUpfX0se31dLDc1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9faW9iamVjdCIpLG89ZSgiLi9fZGVmaW5lZCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbihvKGUpKX19LHsiLi9fZGVmaW5lZCI6MzIsIi4vX2lvYmplY3QiOjQ0fV0sNzY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL190by1pbnRlZ2VyIiksbz1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGU+MD9vKG4oZSksOTAwNzE5OTI1NDc0MDk5MSk6MH19LHsiLi9fdG8taW50ZWdlciI6NzR9XSw3NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2RlZmluZWQiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdChuKGUpKX19LHsiLi9fZGVmaW5lZCI6MzJ9XSw3ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lzLW9iamVjdCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKCFuKGUpKXJldHVybiBlO3ZhciByLG87aWYodCYmImZ1bmN0aW9uIj09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbztpZigiZnVuY3Rpb24iPT10eXBlb2Yocj1lLnZhbHVlT2YpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87aWYoIXQmJiJmdW5jdGlvbiI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87dGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUiKX19LHsiLi9faXMtb2JqZWN0Ijo0Nn1dLDc5OltmdW5jdGlvbihlLHQscil7dmFyIG49MCxvPU1hdGgucmFuZG9tKCk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiJTeW1ib2woIi5jb25jYXQodm9pZCAwPT09ZT8iIjplLCIpXyIsKCsrbitvKS50b1N0cmluZygzNikpfX0se31dLDgwOltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fZ2xvYmFsIiksbz1lKCIuL19jb3JlIiksaT1lKCIuL19saWJyYXJ5IiksYT1lKCIuL193a3MtZXh0Iikscz1lKCIuL19vYmplY3QtZHAiKS5mO3QuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1vLlN5bWJvbHx8KG8uU3ltYm9sPWk/e306bi5TeW1ib2x8fHt9KTsiXyI9PWUuY2hhckF0KDApfHxlIGluIHR8fHModCxlLHt2YWx1ZTphLmYoZSl9KX19LHsiLi9fY29yZSI6MzAsIi4vX2dsb2JhbCI6MzksIi4vX2xpYnJhcnkiOjUyLCIuL19vYmplY3QtZHAiOjU1LCIuL193a3MtZXh0Ijo4MX1dLDgxOltmdW5jdGlvbihlLHQscil7ci5mPWUoIi4vX3drcyIpfSx7Ii4vX3drcyI6ODJ9XSw4MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX3NoYXJlZCIpKCJ3a3MiKSxvPWUoIi4vX3VpZCIpLGk9ZSgiLi9fZ2xvYmFsIikuU3ltYm9sLGE9ImZ1bmN0aW9uIj09dHlwZW9mIGkscz10LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5bZV18fChuW2VdPWEmJmlbZV18fChhP2k6bykoIlN5bWJvbC4iK2UpKX07cy5zdG9yZT1ufSx7Ii4vX2dsb2JhbCI6MzksIi4vX3NoYXJlZCI6NzEsIi4vX3VpZCI6Nzl9XSw4MzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1lKCIuL19hZGQtdG8tdW5zY29wYWJsZXMiKSxvPWUoIi4vX2l0ZXItc3RlcCIpLGk9ZSgiLi9faXRlcmF0b3JzIiksYT1lKCIuL190by1pb2JqZWN0Iik7dC5leHBvcnRzPWUoIi4vX2l0ZXItZGVmaW5lIikoQXJyYXksIkFycmF5IixmdW5jdGlvbihlLHQpe3RoaXMuX3Q9YShlKSx0aGlzLl9pPTAsdGhpcy5faz10fSxmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3QsdD10aGlzLl9rLHI9dGhpcy5faSsrO3JldHVybiFlfHxyPj1lLmxlbmd0aD8odGhpcy5fdD12b2lkIDAsbygxKSk6ImtleXMiPT10P28oMCxyKToidmFsdWVzIj09dD9vKDAsZVtyXSk6bygwLFtyLGVbcl1dKX0sInZhbHVlcyIpLGkuQXJndW1lbnRzPWkuQXJyYXksbigia2V5cyIpLG4oInZhbHVlcyIpLG4oImVudHJpZXMiKX0seyIuL19hZGQtdG8tdW5zY29wYWJsZXMiOjI2LCIuL19pdGVyLWRlZmluZSI6NDgsIi4vX2l0ZXItc3RlcCI6NDksIi4vX2l0ZXJhdG9ycyI6NTAsIi4vX3RvLWlvYmplY3QiOjc1fV0sODQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19leHBvcnQiKTtuKG4uUywiT2JqZWN0Iix7Y3JlYXRlOmUoIi4vX29iamVjdC1jcmVhdGUiKX0pfSx7Ii4vX2V4cG9ydCI6MzcsIi4vX29iamVjdC1jcmVhdGUiOjU0fV0sODU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19leHBvcnQiKTtuKG4uUytuLkYqIWUoIi4vX2Rlc2NyaXB0b3JzIiksIk9iamVjdCIse2RlZmluZVByb3BlcnR5OmUoIi4vX29iamVjdC1kcCIpLmZ9KX0seyIuL19kZXNjcmlwdG9ycyI6MzMsIi4vX2V4cG9ydCI6MzcsIi4vX29iamVjdC1kcCI6NTV9XSw4NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoIi4vX2lzLW9iamVjdCIpLG89ZSgiLi9fbWV0YSIpLm9uRnJlZXplO2UoIi4vX29iamVjdC1zYXAiKSgiZnJlZXplIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUmJm4odCk/ZShvKHQpKTp0fX0pfSx7Ii4vX2lzLW9iamVjdCI6NDYsIi4vX21ldGEiOjUzLCIuL19vYmplY3Qtc2FwIjo2NX1dLDg3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZSgiLi9fdG8tb2JqZWN0Iiksbz1lKCIuL19vYmplY3QtZ3BvIik7ZSgiLi9fb2JqZWN0LXNhcCIpKCJnZXRQcm90b3R5cGVPZiIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG8obihlKSl9fSl9LHsiLi9fb2JqZWN0LWdwbyI6NjEsIi4vX29iamVjdC1zYXAiOjY1LCIuL190by1vYmplY3QiOjc3fV0sODg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL190by1vYmplY3QiKSxvPWUoIi4vX29iamVjdC1rZXlzIik7ZSgiLi9fb2JqZWN0LXNhcCIpKCJrZXlzIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbyhuKGUpKX19KX0seyIuL19vYmplY3Qta2V5cyI6NjMsIi4vX29iamVjdC1zYXAiOjY1LCIuL190by1vYmplY3QiOjc3fV0sODk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKCIuL19leHBvcnQiKTtuKG4uUywiT2JqZWN0Iix7c2V0UHJvdG90eXBlT2Y6ZSgiLi9fc2V0LXByb3RvIikuc2V0fSl9LHsiLi9fZXhwb3J0IjozNywiLi9fc2V0LXByb3RvIjo2OH1dLDkwOltmdW5jdGlvbihlLHQscil7fSx7fV0sOTE6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7dmFyIG49ZSgiLi9fc3RyaW5nLWF0IikoITApO2UoIi4vX2l0ZXItZGVmaW5lIikoU3RyaW5nLCJTdHJpbmciLGZ1bmN0aW9uKGUpe3RoaXMuX3Q9U3RyaW5nKGUpLHRoaXMuX2k9MH0sZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuX3Qscj10aGlzLl9pO3JldHVybiByPj10Lmxlbmd0aD97dmFsdWU6dm9pZCAwLGRvbmU6ITB9OihlPW4odCxyKSx0aGlzLl9pKz1lLmxlbmd0aCx7dmFsdWU6ZSxkb25lOiExfSl9KX0seyIuL19pdGVyLWRlZmluZSI6NDgsIi4vX3N0cmluZy1hdCI6NzJ9XSw5MjpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0Ijt2YXIgbj1lKCIuL19nbG9iYWwiKSxvPWUoIi4vX2hhcyIpLGk9ZSgiLi9fZGVzY3JpcHRvcnMiKSxhPWUoIi4vX2V4cG9ydCIpLHM9ZSgiLi9fcmVkZWZpbmUiKSx1PWUoIi4vX21ldGEiKS5LRVksYz1lKCIuL19mYWlscyIpLGw9ZSgiLi9fc2hhcmVkIiksZj1lKCIuL19zZXQtdG8tc3RyaW5nLXRhZyIpLGQ9ZSgiLi9fdWlkIikscD1lKCIuL193a3MiKSxoPWUoIi4vX3drcy1leHQiKSx5PWUoIi4vX3drcy1kZWZpbmUiKSxtPWUoIi4vX2tleW9mIiksdj1lKCIuL19lbnVtLWtleXMiKSxfPWUoIi4vX2lzLWFycmF5IiksYj1lKCIuL19hbi1vYmplY3QiKSxnPWUoIi4vX3RvLWlvYmplY3QiKSxFPWUoIi4vX3RvLXByaW1pdGl2ZSIpLGo9ZSgiLi9fcHJvcGVydHktZGVzYyIpLHc9ZSgiLi9fb2JqZWN0LWNyZWF0ZSIpLE89ZSgiLi9fb2JqZWN0LWdvcG4tZXh0IiksTT1lKCIuL19vYmplY3QtZ29wZCIpLHg9ZSgiLi9fb2JqZWN0LWRwIiksUD1lKCIuL19vYmplY3Qta2V5cyIpLGs9TS5mLFI9eC5mLFM9Ty5mLFQ9bi5TeW1ib2wsQT1uLkpTT04sTj1BJiZBLnN0cmluZ2lmeSxJPSJwcm90b3R5cGUiLFU9cCgiX2hpZGRlbiIpLEM9cCgidG9QcmltaXRpdmUiKSxMPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLEY9bCgic3ltYm9sLXJlZ2lzdHJ5IiksQj1sKCJzeW1ib2xzIiksRD1sKCJvcC1zeW1ib2xzIiksRz1PYmplY3RbSV0sSz0iZnVuY3Rpb24iPT10eXBlb2YgVCxZPW4uUU9iamVjdCxxPSFZfHwhWVtJXXx8IVlbSV0uZmluZENoaWxkLHo9aSYmYyhmdW5jdGlvbigpe3JldHVybiA3IT13KFIoe30sImEiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUih0aGlzLCJhIix7dmFsdWU6N30pLmF9fSkpLmF9KT9mdW5jdGlvbihlLHQscil7dmFyIG49ayhHLHQpO24mJmRlbGV0ZSBHW3RdLFIoZSx0LHIpLG4mJmUhPT1HJiZSKEcsdCxuKX06UixIPWZ1bmN0aW9uKGUpe3ZhciB0PUJbZV09dyhUW0ldKTtyZXR1cm4gdC5faz1lLHR9LFc9SyYmInN5bWJvbCI9PXR5cGVvZiBULml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiJzeW1ib2wiPT10eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBUfSxKPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT09PUcmJkooRCx0LHIpLGIoZSksdD1FKHQsITApLGIociksbyhCLHQpPyhyLmVudW1lcmFibGU/KG8oZSxVKSYmZVtVXVt0XSYmKGVbVV1bdF09ITEpLHI9dyhyLHtlbnVtZXJhYmxlOmooMCwhMSl9KSk6KG8oZSxVKXx8UihlLFUsaigxLHt9KSksZVtVXVt0XT0hMCkseihlLHQscikpOlIoZSx0LHIpfSxWPWZ1bmN0aW9uKGUsdCl7YihlKTtmb3IodmFyIHIsbj12KHQ9Zyh0KSksbz0wLGk9bi5sZW5ndGg7aT5vOylKKGUscj1uW28rK10sdFtyXSk7cmV0dXJuIGV9LCQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dD93KGUpOlYodyhlKSx0KX0sWD1mdW5jdGlvbihlKXt2YXIgdD1MLmNhbGwodGhpcyxlPUUoZSwhMCkpO3JldHVybiEodGhpcz09PUcmJm8oQixlKSYmIW8oRCxlKSkmJighKHR8fCFvKHRoaXMsZSl8fCFvKEIsZSl8fG8odGhpcyxVKSYmdGhpc1tVXVtlXSl8fHQpfSxRPWZ1bmN0aW9uKGUsdCl7aWYoZT1nKGUpLHQ9RSh0LCEwKSxlIT09R3x8IW8oQix0KXx8byhELHQpKXt2YXIgcj1rKGUsdCk7cmV0dXJuIXJ8fCFvKEIsdCl8fG8oZSxVKSYmZVtVXVt0XXx8KHIuZW51bWVyYWJsZT0hMCkscn19LFo9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9UyhnKGUpKSxuPVtdLGk9MDtyLmxlbmd0aD5pOylvKEIsdD1yW2krK10pfHx0PT1VfHx0PT11fHxuLnB1c2godCk7cmV0dXJuIG59LGVlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPWU9PT1HLG49UyhyP0Q6ZyhlKSksaT1bXSxhPTA7bi5sZW5ndGg+YTspIW8oQix0PW5bYSsrXSl8fHImJiFvKEcsdCl8fGkucHVzaChCW3RdKTtyZXR1cm4gaX07S3x8KFQ9ZnVuY3Rpb24oKXtpZih0aGlzIGluc3RhbmNlb2YgVCl0aHJvdyBUeXBlRXJyb3IoIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEiKTt2YXIgZT1kKGFyZ3VtZW50cy5sZW5ndGg+MD9hcmd1bWVudHNbMF06dm9pZCAwKSx0PWZ1bmN0aW9uKHIpe3RoaXM9PT1HJiZ0LmNhbGwoRCxyKSxvKHRoaXMsVSkmJm8odGhpc1tVXSxlKSYmKHRoaXNbVV1bZV09ITEpLHoodGhpcyxlLGooMSxyKSl9O3JldHVybiBpJiZxJiZ6KEcsZSx7Y29uZmlndXJhYmxlOiEwLHNldDp0fSksSChlKX0scyhUW0ldLCJ0b1N0cmluZyIsZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fa30pLE0uZj1RLHguZj1KLGUoIi4vX29iamVjdC1nb3BuIikuZj1PLmY9WixlKCIuL19vYmplY3QtcGllIikuZj1YLGUoIi4vX29iamVjdC1nb3BzIikuZj1lZSxpJiYhZSgiLi9fbGlicmFyeSIpJiZzKEcsInByb3BlcnR5SXNFbnVtZXJhYmxlIixYLCEwKSxoLmY9ZnVuY3Rpb24oZSl7cmV0dXJuIEgocChlKSl9KSxhKGEuRythLlcrYS5GKiFLLHtTeW1ib2w6VH0pO2Zvcih2YXIgdGU9Imhhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzIi5zcGxpdCgiLCIpLHJlPTA7dGUubGVuZ3RoPnJlOylwKHRlW3JlKytdKTtmb3IodmFyIHRlPVAocC5zdG9yZSkscmU9MDt0ZS5sZW5ndGg+cmU7KXkodGVbcmUrK10pO2EoYS5TK2EuRiohSywiU3ltYm9sIix7ImZvciI6ZnVuY3Rpb24oZSl7cmV0dXJuIG8oRixlKz0iIik/RltlXTpGW2VdPVQoZSl9LGtleUZvcjpmdW5jdGlvbihlKXtpZihXKGUpKXJldHVybiBtKEYsZSk7dGhyb3cgVHlwZUVycm9yKGUrIiBpcyBub3QgYSBzeW1ib2whIil9LHVzZVNldHRlcjpmdW5jdGlvbigpe3E9ITB9LHVzZVNpbXBsZTpmdW5jdGlvbigpe3E9ITF9fSksYShhLlMrYS5GKiFLLCJPYmplY3QiLHtjcmVhdGU6JCxkZWZpbmVQcm9wZXJ0eTpKLGRlZmluZVByb3BlcnRpZXM6VixnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6USxnZXRPd25Qcm9wZXJ0eU5hbWVzOlosZ2V0T3duUHJvcGVydHlTeW1ib2xzOmVlfSksQSYmYShhLlMrYS5GKighS3x8YyhmdW5jdGlvbigpe3ZhciBlPVQoKTtyZXR1cm4iW251bGxdIiE9TihbZV0pfHwie30iIT1OKHthOmV9KXx8Int9IiE9TihPYmplY3QoZSkpfSkpLCJKU09OIix7c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe2lmKHZvaWQgMCE9PWUmJiFXKGUpKXtmb3IodmFyIHQscixuPVtlXSxvPTE7YXJndW1lbnRzLmxlbmd0aD5vOyluLnB1c2goYXJndW1lbnRzW28rK10pO3JldHVybiB0PW5bMV0sImZ1bmN0aW9uIj09dHlwZW9mIHQmJihyPXQpLCFyJiZfKHQpfHwodD1mdW5jdGlvbihlLHQpe2lmKHImJih0PXIuY2FsbCh0aGlzLGUsdCkpLCFXKHQpKXJldHVybiB0fSksblsxXT10LE4uYXBwbHkoQSxuKX19fSksVFtJXVtDXXx8ZSgiLi9faGlkZSIpKFRbSV0sQyxUW0ldLnZhbHVlT2YpLGYoVCwiU3ltYm9sIiksZihNYXRoLCJNYXRoIiwhMCksZihuLkpTT04sIkpTT04iLCEwKX0seyIuL19hbi1vYmplY3QiOjI3LCIuL19kZXNjcmlwdG9ycyI6MzMsIi4vX2VudW0ta2V5cyI6MzYsIi4vX2V4cG9ydCI6MzcsIi4vX2ZhaWxzIjozOCwiLi9fZ2xvYmFsIjozOSwiLi9faGFzIjo0MCwiLi9faGlkZSI6NDEsIi4vX2lzLWFycmF5Ijo0NSwiLi9fa2V5b2YiOjUxLCIuL19saWJyYXJ5Ijo1MiwiLi9fbWV0YSI6NTMsIi4vX29iamVjdC1jcmVhdGUiOjU0LCIuL19vYmplY3QtZHAiOjU1LCIuL19vYmplY3QtZ29wZCI6NTcsIi4vX29iamVjdC1nb3BuIjo1OSwiLi9fb2JqZWN0LWdvcG4tZXh0Ijo1OCwiLi9fb2JqZWN0LWdvcHMiOjYwLCIuL19vYmplY3Qta2V5cyI6NjMsIi4vX29iamVjdC1waWUiOjY0LCIuL19wcm9wZXJ0eS1kZXNjIjo2NiwiLi9fcmVkZWZpbmUiOjY3LCIuL19zZXQtdG8tc3RyaW5nLXRhZyI6NjksIi4vX3NoYXJlZCI6NzEsIi4vX3RvLWlvYmplY3QiOjc1LCIuL190by1wcmltaXRpdmUiOjc4LCIuL191aWQiOjc5LCIuL193a3MiOjgyLCIuL193a3MtZGVmaW5lIjo4MCwiLi9fd2tzLWV4dCI6ODF9XSw5MzpbZnVuY3Rpb24oZSx0LHIpe2UoIi4vX3drcy1kZWZpbmUiKSgiYXN5bmNJdGVyYXRvciIpfSx7Ii4vX3drcy1kZWZpbmUiOjgwfV0sOTQ6W2Z1bmN0aW9uKGUsdCxyKXtlKCIuL193a3MtZGVmaW5lIikoIm9ic2VydmFibGUiKX0seyIuL193a3MtZGVmaW5lIjo4MH1dLDk1OltmdW5jdGlvbihlLHQscil7ZSgiLi9lczYuYXJyYXkuaXRlcmF0b3IiKTtmb3IodmFyIG49ZSgiLi9fZ2xvYmFsIiksbz1lKCIuL19oaWRlIiksaT1lKCIuL19pdGVyYXRvcnMiKSxhPWUoIi4vX3drcyIpKCJ0b1N0cmluZ1RhZyIpLHM9WyJOb2RlTGlzdCIsIkRPTVRva2VuTGlzdCIsIk1lZGlhTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiQ1NTUnVsZUxpc3QiXSx1PTA7dTw1O3UrKyl7dmFyIGM9c1t1XSxsPW5bY10sZj1sJiZsLnByb3RvdHlwZTtmJiYhZlthXSYmbyhmLGEsYyksaVtjXT1pLkFycmF5fX0seyIuL19nbG9iYWwiOjM5LCIuL19oaWRlIjo0MSwiLi9faXRlcmF0b3JzIjo1MCwiLi9fd2tzIjo4MiwiLi9lczYuYXJyYXkuaXRlcmF0b3IiOjgzfV0sOTY6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKCl7dGhyb3cgbmV3IEVycm9yKCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gbygpe3Rocm93IG5ldyBFcnJvcigiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gaShlKXtpZihmPT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dChlLDApO2lmKChmPT09bnx8IWYpJiZzZXRUaW1lb3V0KXJldHVybiBmPXNldFRpbWVvdXQsc2V0VGltZW91dChlLDApO3RyeXtyZXR1cm4gZihlLDApfWNhdGNoKHQpe3RyeXtyZXR1cm4gZi5jYWxsKG51bGwsZSwwKX1jYXRjaCh0KXtyZXR1cm4gZi5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIGEoZSl7aWYoZD09PWNsZWFyVGltZW91dClyZXR1cm4gY2xlYXJUaW1lb3V0KGUpO2lmKChkPT09b3x8IWQpJiZjbGVhclRpbWVvdXQpcmV0dXJuIGQ9Y2xlYXJUaW1lb3V0LGNsZWFyVGltZW91dChlKTt0cnl7cmV0dXJuIGQoZSl9Y2F0Y2godCl7dHJ5e3JldHVybiBkLmNhbGwobnVsbCxlKX1jYXRjaCh0KXtyZXR1cm4gZC5jYWxsKHRoaXMsZSl9fX1mdW5jdGlvbiBzKCl7bSYmaCYmKG09ITEsaC5sZW5ndGg/eT1oLmNvbmNhdCh5KTp2PS0xLHkubGVuZ3RoJiZ1KCkpfWZ1bmN0aW9uIHUoKXtpZighbSl7dmFyIGU9aShzKTttPSEwO2Zvcih2YXIgdD15Lmxlbmd0aDt0Oyl7Zm9yKGg9eSx5PVtdOysrdjx0OyloJiZoW3ZdLnJ1bigpO3Y9LTEsdD15Lmxlbmd0aH1oPW51bGwsbT0hMSxhKGUpfX1mdW5jdGlvbiBjKGUsdCl7dGhpcy5mdW49ZSx0aGlzLmFycmF5PXR9ZnVuY3Rpb24gbCgpe312YXIgZixkLHA9dC5leHBvcnRzPXt9OyFmdW5jdGlvbigpe3RyeXtmPSJmdW5jdGlvbiI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bn1jYXRjaChlKXtmPW59dHJ5e2Q9ImZ1bmN0aW9uIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6b31jYXRjaChlKXtkPW99fSgpO3ZhciBoLHk9W10sbT0hMSx2PS0xO3AubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTt5LnB1c2gobmV3IGMoZSx0KSksMSE9PXkubGVuZ3RofHxtfHxpKHUpfSxjLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxwLnRpdGxlPSJicm93c2VyIixwLmJyb3dzZXI9ITAscC5lbnY9e30scC5hcmd2PVtdLHAudmVyc2lvbj0iIixwLnZlcnNpb25zPXt9LHAub249bCxwLmFkZExpc3RlbmVyPWwscC5vbmNlPWwscC5vZmY9bCxwLnJlbW92ZUxpc3RlbmVyPWwscC5yZW1vdmVBbGxMaXN0ZW5lcnM9bCxwLmVtaXQ9bCxwLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCIpfSxwLmN3ZD1mdW5jdGlvbigpe3JldHVybiIvIn0scC5jaGRpcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCIpfSxwLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSx7fV0sOTc6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24ocil7dmFyIG49Im9iamVjdCI9PXR5cGVvZiByP3I6Im9iamVjdCI9PXR5cGVvZiB3aW5kb3c/d2luZG93OiJvYmplY3QiPT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsbz1uLnJlZ2VuZXJhdG9yUnVudGltZSYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobikuaW5kZXhPZigicmVnZW5lcmF0b3JSdW50aW1lIik+PTAsaT1vJiZuLnJlZ2VuZXJhdG9yUnVudGltZTtpZihuLnJlZ2VuZXJhdG9yUnVudGltZT12b2lkIDAsdC5leHBvcnRzPWUoIi4vcnVudGltZSIpLG8pbi5yZWdlbmVyYXRvclJ1bnRpbWU9aTtlbHNlIHRyeXtkZWxldGUgbi5yZWdlbmVyYXRvclJ1bnRpbWV9Y2F0Y2goYSl7bi5yZWdlbmVyYXRvclJ1bnRpbWU9dm9pZCAwfX0pLmNhbGwodGhpcywidW5kZWZpbmVkIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6InVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmP3NlbGY6InVuZGVmaW5lZCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0seyIuL3J1bnRpbWUiOjk4fV0sOTg6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24oZSxyKXshZnVuY3Rpb24ocil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSx0LHIsbil7dmFyIG89T2JqZWN0LmNyZWF0ZSgodHx8aSkucHJvdG90eXBlKSxhPW5ldyBoKG58fFtdKTtyZXR1cm4gby5faW52b2tlPWYoZSxyLGEpLG99ZnVuY3Rpb24gbyhlLHQscil7dHJ5e3JldHVybnt0eXBlOiJub3JtYWwiLGFyZzplLmNhbGwodCxyKX19Y2F0Y2gobil7cmV0dXJue3R5cGU6InRocm93Iixhcmc6bn19fWZ1bmN0aW9uIGkoKXt9ZnVuY3Rpb24gYSgpe31mdW5jdGlvbiBzKCl7fWZ1bmN0aW9uIHUoZSl7WyJuZXh0IiwidGhyb3ciLCJyZXR1cm4iXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2ludm9rZSh0LGUpfX0pfWZ1bmN0aW9uIGMoZSl7dGhpcy5hcmc9ZX1mdW5jdGlvbiBsKHQpe2Z1bmN0aW9uIHIoZSxuLGksYSl7dmFyIHM9byh0W2VdLHQsbik7aWYoInRocm93IiE9PXMudHlwZSl7dmFyIHU9cy5hcmcsbD11LnZhbHVlO3JldHVybiBsIGluc3RhbmNlb2YgYz9Qcm9taXNlLnJlc29sdmUobC5hcmcpLnRoZW4oZnVuY3Rpb24oZSl7cigibmV4dCIsZSxpLGEpfSxmdW5jdGlvbihlKXtyKCJ0aHJvdyIsZSxpLGEpfSk6UHJvbWlzZS5yZXNvbHZlKGwpLnRoZW4oZnVuY3Rpb24oZSl7dS52YWx1ZT1lLGkodSl9LGEpfWEocy5hcmcpfWZ1bmN0aW9uIG4oZSx0KXtmdW5jdGlvbiBuKCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4sbyl7cihlLHQsbixvKX0pfXJldHVybiBpPWk/aS50aGVuKG4sbik6bigpfSJvYmplY3QiPT10eXBlb2YgZSYmZS5kb21haW4mJihyPWUuZG9tYWluLmJpbmQocikpO3ZhciBpO3RoaXMuX2ludm9rZT1ufWZ1bmN0aW9uIGYoZSx0LHIpe3ZhciBuPU87cmV0dXJuIGZ1bmN0aW9uKGksYSl7aWYobj09PXgpdGhyb3cgbmV3IEVycm9yKCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nIik7aWYobj09PVApe2lmKCJ0aHJvdyI9PT1pKXRocm93IGE7cmV0dXJuIG0oKX1mb3IoOzspe3ZhciBzPXIuZGVsZWdhdGU7aWYocyl7aWYoInJldHVybiI9PT1pfHwidGhyb3ciPT09aSYmcy5pdGVyYXRvcltpXT09PXYpe3IuZGVsZWdhdGU9bnVsbDt2YXIgdT1zLml0ZXJhdG9yWyJyZXR1cm4iXTtpZih1KXt2YXIgYz1vKHUscy5pdGVyYXRvcixhKTtpZigidGhyb3ciPT09Yy50eXBlKXtpPSJ0aHJvdyIsYT1jLmFyZztjb250aW51ZX19aWYoInJldHVybiI9PT1pKWNvbnRpbnVlfXZhciBjPW8ocy5pdGVyYXRvcltpXSxzLml0ZXJhdG9yLGEpO2lmKCJ0aHJvdyI9PT1jLnR5cGUpe3IuZGVsZWdhdGU9bnVsbCxpPSJ0aHJvdyIsYT1jLmFyZztjb250aW51ZX1pPSJuZXh0IixhPXY7dmFyIGw9Yy5hcmc7aWYoIWwuZG9uZSlyZXR1cm4gbj1NLGw7cltzLnJlc3VsdE5hbWVdPWwudmFsdWUsci5uZXh0PXMubmV4dExvYyxyLmRlbGVnYXRlPW51bGx9aWYoIm5leHQiPT09aSlyLnNlbnQ9ci5fc2VudD1hO2Vsc2UgaWYoInRocm93Ij09PWkpe2lmKG49PT1PKXRocm93IG49UCxhO3IuZGlzcGF0Y2hFeGNlcHRpb24oYSkmJihpPSJuZXh0IixhPXYpfWVsc2UicmV0dXJuIj09PWkmJnIuYWJydXB0KCJyZXR1cm4iLGEpO249eDt2YXIgYz1vKGUsdCxyKTtpZigibm9ybWFsIj09PWMudHlwZSl7bj1yLmRvbmU/UDpNO3ZhciBsPXt2YWx1ZTpjLmFyZyxkb25lOnIuZG9uZX07aWYoYy5hcmchPT1rKXJldHVybiBsO3IuZGVsZWdhdGUmJiJuZXh0Ij09PWkmJihhPXYpfWVsc2UidGhyb3ciPT09Yy50eXBlJiYobj1QLGk9InRocm93IixhPWMuYXJnKX19fWZ1bmN0aW9uIGQoZSl7dmFyIHQ9e3RyeUxvYzplWzBdfTsxIGluIGUmJih0LmNhdGNoTG9jPWVbMV0pLDIgaW4gZSYmKHQuZmluYWxseUxvYz1lWzJdLHQuYWZ0ZXJMb2M9ZVszXSksdGhpcy50cnlFbnRyaWVzLnB1c2godCl9ZnVuY3Rpb24gcChlKXt2YXIgdD1lLmNvbXBsZXRpb258fHt9O3QudHlwZT0ibm9ybWFsIixkZWxldGUgdC5hcmcsZS5jb21wbGV0aW9uPXR9ZnVuY3Rpb24gaChlKXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6InJvb3QifV0sZS5mb3JFYWNoKGQsdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24geShlKXtpZihlKXt2YXIgdD1lW2ddO2lmKHQpcmV0dXJuIHQuY2FsbChlKTtpZigiZnVuY3Rpb24iPT10eXBlb2YgZS5uZXh0KXJldHVybiBlO2lmKCFpc05hTihlLmxlbmd0aCkpe3ZhciByPS0xLG49ZnVuY3Rpb24gbygpe2Zvcig7KytyPGUubGVuZ3RoOylpZihfLmNhbGwoZSxyKSlyZXR1cm4gby52YWx1ZT1lW3JdLG8uZG9uZT0hMSxvO3JldHVybiBvLnZhbHVlPXYsby5kb25lPSEwLG99O3JldHVybiBuLm5leHQ9bn19cmV0dXJue25leHQ6bX19ZnVuY3Rpb24gbSgpe3JldHVybnt2YWx1ZTp2LGRvbmU6ITB9fXZhciB2LF89T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxiPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2w/U3ltYm9sOnt9LGc9Yi5pdGVyYXRvcnx8IkBAaXRlcmF0b3IiLEU9Yi50b1N0cmluZ1RhZ3x8IkBAdG9TdHJpbmdUYWciLGo9Im9iamVjdCI9PXR5cGVvZiB0LHc9ci5yZWdlbmVyYXRvclJ1bnRpbWU7aWYodylyZXR1cm4gdm9pZChqJiYodC5leHBvcnRzPXcpKTt3PXIucmVnZW5lcmF0b3JSdW50aW1lPWo/dC5leHBvcnRzOnt9LHcud3JhcD1uO3ZhciBPPSJzdXNwZW5kZWRTdGFydCIsTT0ic3VzcGVuZGVkWWllbGQiLHg9ImV4ZWN1dGluZyIsUD0iY29tcGxldGVkIixrPXt9LFI9cy5wcm90b3R5cGU9aS5wcm90b3R5cGU7YS5wcm90b3R5cGU9Ui5jb25zdHJ1Y3Rvcj1zLHMuY29uc3RydWN0b3I9YSxzW0VdPWEuZGlzcGxheU5hbWU9IkdlbmVyYXRvckZ1bmN0aW9uIix3LmlzR2VuZXJhdG9yRnVuY3Rpb249ZnVuY3Rpb24oZSl7dmFyIHQ9ImZ1bmN0aW9uIj09dHlwZW9mIGUmJmUuY29uc3RydWN0b3I7cmV0dXJuISF0JiYodD09PWF8fCJHZW5lcmF0b3JGdW5jdGlvbiI9PT0odC5kaXNwbGF5TmFtZXx8dC5uYW1lKSl9LHcubWFyaz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHMpOihlLl9fcHJvdG9fXz1zLEUgaW4gZXx8KGVbRV09IkdlbmVyYXRvckZ1bmN0aW9uIikpLAplLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFIpLGV9LHcuYXdyYXA9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBjKGUpfSx1KGwucHJvdG90eXBlKSx3LmFzeW5jPWZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBpPW5ldyBsKG4oZSx0LHIsbykpO3JldHVybiB3LmlzR2VuZXJhdG9yRnVuY3Rpb24odCk/aTppLm5leHQoKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlLmRvbmU/ZS52YWx1ZTppLm5leHQoKX0pfSx1KFIpLFJbZ109ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30sUltFXT0iR2VuZXJhdG9yIixSLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIltvYmplY3QgR2VuZXJhdG9yXSJ9LHcua2V5cz1mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gZSl0LnB1c2gocik7cmV0dXJuIHQucmV2ZXJzZSgpLGZ1bmN0aW9uIG4oKXtmb3IoO3QubGVuZ3RoOyl7dmFyIHI9dC5wb3AoKTtpZihyIGluIGUpcmV0dXJuIG4udmFsdWU9cixuLmRvbmU9ITEsbn1yZXR1cm4gbi5kb25lPSEwLG59fSx3LnZhbHVlcz15LGgucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpoLHJlc2V0OmZ1bmN0aW9uKGUpe2lmKHRoaXMucHJldj0wLHRoaXMubmV4dD0wLHRoaXMuc2VudD10aGlzLl9zZW50PXYsdGhpcy5kb25lPSExLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChwKSwhZSlmb3IodmFyIHQgaW4gdGhpcykidCI9PT10LmNoYXJBdCgwKSYmXy5jYWxsKHRoaXMsdCkmJiFpc05hTigrdC5zbGljZSgxKSkmJih0aGlzW3RdPXYpfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciBlPXRoaXMudHJ5RW50cmllc1swXSx0PWUuY29tcGxldGlvbjtpZigidGhyb3ciPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuKXtyZXR1cm4gaS50eXBlPSJ0aHJvdyIsaS5hcmc9ZSxyLm5leHQ9dCwhIW59aWYodGhpcy5kb25lKXRocm93IGU7Zm9yKHZhciByPXRoaXMsbj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7bj49MDstLW4pe3ZhciBvPXRoaXMudHJ5RW50cmllc1tuXSxpPW8uY29tcGxldGlvbjtpZigicm9vdCI9PT1vLnRyeUxvYylyZXR1cm4gdCgiZW5kIik7aWYoby50cnlMb2M8PXRoaXMucHJldil7dmFyIGE9Xy5jYWxsKG8sImNhdGNoTG9jIikscz1fLmNhbGwobywiZmluYWxseUxvYyIpO2lmKGEmJnMpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiB0KG8uY2F0Y2hMb2MsITApO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIHQoby5maW5hbGx5TG9jKX1lbHNlIGlmKGEpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiB0KG8uY2F0Y2hMb2MsITApfWVsc2V7aWYoIXMpdGhyb3cgbmV3IEVycm9yKCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseSIpO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIHQoby5maW5hbGx5TG9jKX19fX0sYWJydXB0OmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtyPj0wOy0tcil7dmFyIG49dGhpcy50cnlFbnRyaWVzW3JdO2lmKG4udHJ5TG9jPD10aGlzLnByZXYmJl8uY2FsbChuLCJmaW5hbGx5TG9jIikmJnRoaXMucHJldjxuLmZpbmFsbHlMb2Mpe3ZhciBvPW47YnJlYWt9fW8mJigiYnJlYWsiPT09ZXx8ImNvbnRpbnVlIj09PWUpJiZvLnRyeUxvYzw9dCYmdDw9by5maW5hbGx5TG9jJiYobz1udWxsKTt2YXIgaT1vP28uY29tcGxldGlvbjp7fTtyZXR1cm4gaS50eXBlPWUsaS5hcmc9dCxvP3RoaXMubmV4dD1vLmZpbmFsbHlMb2M6dGhpcy5jb21wbGV0ZShpKSxrfSxjb21wbGV0ZTpmdW5jdGlvbihlLHQpe2lmKCJ0aHJvdyI9PT1lLnR5cGUpdGhyb3cgZS5hcmc7ImJyZWFrIj09PWUudHlwZXx8ImNvbnRpbnVlIj09PWUudHlwZT90aGlzLm5leHQ9ZS5hcmc6InJldHVybiI9PT1lLnR5cGU/KHRoaXMucnZhbD1lLmFyZyx0aGlzLm5leHQ9ImVuZCIpOiJub3JtYWwiPT09ZS50eXBlJiZ0JiYodGhpcy5uZXh0PXQpfSxmaW5pc2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIuZmluYWxseUxvYz09PWUpcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLHIuYWZ0ZXJMb2MpLHAociksa319LCJjYXRjaCI6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIudHJ5TG9jPT09ZSl7dmFyIG49ci5jb21wbGV0aW9uO2lmKCJ0aHJvdyI9PT1uLnR5cGUpe3ZhciBvPW4uYXJnO3Aocil9cmV0dXJuIG99fXRocm93IG5ldyBFcnJvcigiaWxsZWdhbCBjYXRjaCBhdHRlbXB0Iil9LGRlbGVnYXRlWWllbGQ6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLmRlbGVnYXRlPXtpdGVyYXRvcjp5KGUpLHJlc3VsdE5hbWU6dCxuZXh0TG9jOnJ9LGt9fX0oIm9iamVjdCI9PXR5cGVvZiByP3I6Im9iamVjdCI9PXR5cGVvZiB3aW5kb3c/d2luZG93OiJvYmplY3QiPT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMpfSkuY2FsbCh0aGlzLGUoIl9wcm9jZXNzIiksInVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOiJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOiJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtfcHJvY2Vzczo5Nn1dLDk5OltmdW5jdGlvbih0LHIsbil7IWZ1bmN0aW9uKHQsbil7ImZ1bmN0aW9uIj09dHlwZW9mIGUmJmUuYW1kP2UoW10sbik6InVuZGVmaW5lZCIhPXR5cGVvZiByJiZyLmV4cG9ydHM/ci5leHBvcnRzPW4oKTp0LnR2ND1uKCl9KHRoaXMsZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3JldHVybiBlbmNvZGVVUkkoZSkucmVwbGFjZSgvJTI1WzAtOV1bMC05XS9nLGZ1bmN0aW9uKGUpe3JldHVybiIlIitlLnN1YnN0cmluZygzKX0pfWZ1bmN0aW9uIHQodCl7dmFyIHI9IiI7ZFt0LmNoYXJBdCgwKV0mJihyPXQuY2hhckF0KDApLHQ9dC5zdWJzdHJpbmcoMSkpO3ZhciBuPSIiLG89IiIsaT0hMCxhPSExLHM9ITE7IisiPT09cj9pPSExOiIuIj09PXI/KG89Ii4iLG49Ii4iKToiLyI9PT1yPyhvPSIvIixuPSIvIik6IiMiPT09cj8obz0iIyIsaT0hMSk6IjsiPT09cj8obz0iOyIsbj0iOyIsYT0hMCxzPSEwKToiPyI9PT1yPyhvPSI/IixuPSImIixhPSEwKToiJiI9PT1yJiYobz0iJiIsbj0iJiIsYT0hMCk7Zm9yKHZhciB1PVtdLGM9dC5zcGxpdCgiLCIpLGw9W10sZj17fSxoPTA7aDxjLmxlbmd0aDtoKyspe3ZhciB5PWNbaF0sbT1udWxsO2lmKHkuaW5kZXhPZigiOiIpIT09LTEpe3ZhciB2PXkuc3BsaXQoIjoiKTt5PXZbMF0sbT1wYXJzZUludCh2WzFdLDEwKX1mb3IodmFyIF89e307cFt5LmNoYXJBdCh5Lmxlbmd0aC0xKV07KV9beS5jaGFyQXQoeS5sZW5ndGgtMSldPSEwLHk9eS5zdWJzdHJpbmcoMCx5Lmxlbmd0aC0xKTt2YXIgYj17dHJ1bmNhdGU6bSxuYW1lOnksc3VmZmljZXM6X307bC5wdXNoKGIpLGZbeV09Yix1LnB1c2goeSl9dmFyIGc9ZnVuY3Rpb24odCl7Zm9yKHZhciByPSIiLHU9MCxjPTA7YzxsLmxlbmd0aDtjKyspe3ZhciBmPWxbY10sZD10KGYubmFtZSk7aWYobnVsbD09PWR8fHZvaWQgMD09PWR8fEFycmF5LmlzQXJyYXkoZCkmJjA9PT1kLmxlbmd0aHx8Im9iamVjdCI9PXR5cGVvZiBkJiYwPT09T2JqZWN0LmtleXMoZCkubGVuZ3RoKXUrKztlbHNlIGlmKHIrPWM9PT11P286bnx8IiwiLEFycmF5LmlzQXJyYXkoZCkpe2EmJihyKz1mLm5hbWUrIj0iKTtmb3IodmFyIHA9MDtwPGQubGVuZ3RoO3ArKylwPjAmJihyKz1mLnN1ZmZpY2VzWyIqIl0/bnx8IiwiOiIsIixmLnN1ZmZpY2VzWyIqIl0mJmEmJihyKz1mLm5hbWUrIj0iKSkscis9aT9lbmNvZGVVUklDb21wb25lbnQoZFtwXSkucmVwbGFjZSgvIS9nLCIlMjEiKTplKGRbcF0pfWVsc2UgaWYoIm9iamVjdCI9PXR5cGVvZiBkKXthJiYhZi5zdWZmaWNlc1siKiJdJiYocis9Zi5uYW1lKyI9Iik7dmFyIGg9ITA7Zm9yKHZhciB5IGluIGQpaHx8KHIrPWYuc3VmZmljZXNbIioiXT9ufHwiLCI6IiwiKSxoPSExLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KHkpLnJlcGxhY2UoLyEvZywiJTIxIik6ZSh5KSxyKz1mLnN1ZmZpY2VzWyIqIl0/Ij0iOiIsIixyKz1pP2VuY29kZVVSSUNvbXBvbmVudChkW3ldKS5yZXBsYWNlKC8hL2csIiUyMSIpOmUoZFt5XSl9ZWxzZSBhJiYocis9Zi5uYW1lLHMmJiIiPT09ZHx8KHIrPSI9IikpLG51bGwhPWYudHJ1bmNhdGUmJihkPWQuc3Vic3RyaW5nKDAsZi50cnVuY2F0ZSkpLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KGQpLnJlcGxhY2UoLyEvZywiJTIxIik6ZShkKX1yZXR1cm4gcn07cmV0dXJuIGcudmFyTmFtZXM9dSx7cHJlZml4Om8sc3Vic3RpdHV0aW9uOmd9fWZ1bmN0aW9uIHIoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcikpcmV0dXJuIG5ldyByKGUpO2Zvcih2YXIgbj1lLnNwbGl0KCJ7Iiksbz1bbi5zaGlmdCgpXSxpPVtdLGE9W10scz1bXTtuLmxlbmd0aD4wOyl7dmFyIHU9bi5zaGlmdCgpLGM9dS5zcGxpdCgifSIpWzBdLGw9dS5zdWJzdHJpbmcoYy5sZW5ndGgrMSksZj10KGMpO2EucHVzaChmLnN1YnN0aXR1dGlvbiksaS5wdXNoKGYucHJlZml4KSxvLnB1c2gobCkscz1zLmNvbmNhdChmLnN1YnN0aXR1dGlvbi52YXJOYW1lcyl9dGhpcy5maWxsPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1vWzBdLHI9MDtyPGEubGVuZ3RoO3IrKyl7dmFyIG49YVtyXTt0Kz1uKGUpLHQrPW9bcisxXX1yZXR1cm4gdH0sdGhpcy52YXJOYW1lcz1zLHRoaXMudGVtcGxhdGU9ZX1mdW5jdGlvbiBuKGUsdCl7aWYoZT09PXQpcmV0dXJuITA7aWYoZSYmdCYmIm9iamVjdCI9PXR5cGVvZiBlJiYib2JqZWN0Ij09dHlwZW9mIHQpe2lmKEFycmF5LmlzQXJyYXkoZSkhPT1BcnJheS5pc0FycmF5KHQpKXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkoZSkpe2lmKGUubGVuZ3RoIT09dC5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspaWYoIW4oZVtyXSx0W3JdKSlyZXR1cm4hMX1lbHNle3ZhciBvO2ZvcihvIGluIGUpaWYodm9pZCAwPT09dFtvXSYmdm9pZCAwIT09ZVtvXSlyZXR1cm4hMTtmb3IobyBpbiB0KWlmKHZvaWQgMD09PWVbb10mJnZvaWQgMCE9PXRbb10pcmV0dXJuITE7Zm9yKG8gaW4gZSlpZighbihlW29dLHRbb10pKXJldHVybiExfXJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIG8oZSl7dmFyIHQ9U3RyaW5nKGUpLnJlcGxhY2UoL15ccyt8XHMrJC9nLCIiKS5tYXRjaCgvXihbXjpcLz8jXSs6KT8oXC9cLyg/OlteOkBdKig/OjpbXjpAXSopP0ApPygoW146XC8/I10qKSg/OjooXGQqKSk/KSk/KFtePyNdKikoXD9bXiNdKik/KCNbXHNcU10qKT8vKTtyZXR1cm4gdD97aHJlZjp0WzBdfHwiIixwcm90b2NvbDp0WzFdfHwiIixhdXRob3JpdHk6dFsyXXx8IiIsaG9zdDp0WzNdfHwiIixob3N0bmFtZTp0WzRdfHwiIixwb3J0OnRbNV18fCIiLHBhdGhuYW1lOnRbNl18fCIiLHNlYXJjaDp0WzddfHwiIixoYXNoOnRbOF18fCIifTpudWxsfWZ1bmN0aW9uIGkoZSx0KXtmdW5jdGlvbiByKGUpe3ZhciB0PVtdO3JldHVybiBlLnJlcGxhY2UoL14oXC5cLj8oXC98JCkpKy8sIiIpLnJlcGxhY2UoL1wvKFwuKFwvfCQpKSsvZywiLyIpLnJlcGxhY2UoL1wvXC5cLiQvLCIvLi4vIikucmVwbGFjZSgvXC8/W15cL10qL2csZnVuY3Rpb24oZSl7Ii8uLiI9PT1lP3QucG9wKCk6dC5wdXNoKGUpfSksdC5qb2luKCIiKS5yZXBsYWNlKC9eXC8vLCIvIj09PWUuY2hhckF0KDApPyIvIjoiIil9cmV0dXJuIHQ9byh0fHwiIiksZT1vKGV8fCIiKSx0JiZlPyh0LnByb3RvY29sfHxlLnByb3RvY29sKSsodC5wcm90b2NvbHx8dC5hdXRob3JpdHk/dC5hdXRob3JpdHk6ZS5hdXRob3JpdHkpK3IodC5wcm90b2NvbHx8dC5hdXRob3JpdHl8fCIvIj09PXQucGF0aG5hbWUuY2hhckF0KDApP3QucGF0aG5hbWU6dC5wYXRobmFtZT8oZS5hdXRob3JpdHkmJiFlLnBhdGhuYW1lPyIvIjoiIikrZS5wYXRobmFtZS5zbGljZSgwLGUucGF0aG5hbWUubGFzdEluZGV4T2YoIi8iKSsxKSt0LnBhdGhuYW1lOmUucGF0aG5hbWUpKyh0LnByb3RvY29sfHx0LmF1dGhvcml0eXx8dC5wYXRobmFtZT90LnNlYXJjaDp0LnNlYXJjaHx8ZS5zZWFyY2gpK3QuaGFzaDpudWxsfWZ1bmN0aW9uIGEoZSl7cmV0dXJuIGUuc3BsaXQoIiMiKVswXX1mdW5jdGlvbiBzKGUsdCl7aWYoZSYmIm9iamVjdCI9PXR5cGVvZiBlKWlmKHZvaWQgMD09PXQ/dD1lLmlkOiJzdHJpbmciPT10eXBlb2YgZS5pZCYmKHQ9aSh0LGUuaWQpLGUuaWQ9dCksQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKylzKGVbcl0sdCk7ZWxzZXsic3RyaW5nIj09dHlwZW9mIGUuJHJlZiYmKGUuJHJlZj1pKHQsZS4kcmVmKSk7Zm9yKHZhciBuIGluIGUpImVudW0iIT09biYmcyhlW25dLHQpfX1mdW5jdGlvbiB1KGUpe2U9ZXx8ImVuIjt2YXIgdD1FW2VdO3JldHVybiBmdW5jdGlvbihlKXt2YXIgcj10W2UuY29kZV18fGdbZS5jb2RlXTtpZigic3RyaW5nIiE9dHlwZW9mIHIpcmV0dXJuIlVua25vd24gZXJyb3IgY29kZSAiK2UuY29kZSsiOiAiK0pTT04uc3RyaW5naWZ5KGUubWVzc2FnZVBhcmFtcyk7dmFyIG49ZS5wYXJhbXM7cmV0dXJuIHIucmVwbGFjZSgvXHsoW157fV0qKVx9L2csZnVuY3Rpb24oZSx0KXt2YXIgcj1uW3RdO3JldHVybiJzdHJpbmciPT10eXBlb2Ygcnx8Im51bWJlciI9PXR5cGVvZiByP3I6ZX0pfX1mdW5jdGlvbiBjKGUsdCxyLG4sbyl7aWYoRXJyb3IuY2FsbCh0aGlzKSx2b2lkIDA9PT1lKXRocm93IG5ldyBFcnJvcigiTm8gZXJyb3IgY29kZSBzdXBwbGllZDogIituKTt0aGlzLm1lc3NhZ2U9IiIsdGhpcy5wYXJhbXM9dCx0aGlzLmNvZGU9ZSx0aGlzLmRhdGFQYXRoPXJ8fCIiLHRoaXMuc2NoZW1hUGF0aD1ufHwiIix0aGlzLnN1YkVycm9ycz1vfHxudWxsO3ZhciBpPW5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpO2lmKHRoaXMuc3RhY2s9aS5zdGFja3x8aS5zdGFja3RyYWNlLCF0aGlzLnN0YWNrKXRyeXt0aHJvdyBpfWNhdGNoKGkpe3RoaXMuc3RhY2s9aS5zdGFja3x8aS5zdGFja3RyYWNlfX1mdW5jdGlvbiBsKGUsdCl7aWYodC5zdWJzdHJpbmcoMCxlLmxlbmd0aCk9PT1lKXt2YXIgcj10LnN1YnN0cmluZyhlLmxlbmd0aCk7aWYodC5sZW5ndGg+MCYmIi8iPT09dC5jaGFyQXQoZS5sZW5ndGgtMSl8fCIjIj09PXIuY2hhckF0KDApfHwiPyI9PT1yLmNoYXJBdCgwKSlyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBmKGUpe3ZhciB0LHIsbj1uZXcgaCxvPXtzZXRFcnJvclJlcG9ydGVyOmZ1bmN0aW9uKGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgZT90aGlzLmxhbmd1YWdlKGUpOihyPWUsITApfSxhZGRGb3JtYXQ6ZnVuY3Rpb24oKXtuLmFkZEZvcm1hdC5hcHBseShuLGFyZ3VtZW50cyl9LGxhbmd1YWdlOmZ1bmN0aW9uKGUpe3JldHVybiBlPyhFW2VdfHwoZT1lLnNwbGl0KCItIilbMF0pLCEhRVtlXSYmKHQ9ZSxlKSk6dH0sYWRkTGFuZ3VhZ2U6ZnVuY3Rpb24oZSx0KXt2YXIgcjtmb3IociBpbiB2KXRbcl0mJiF0W3Zbcl1dJiYodFt2W3JdXT10W3JdKTt2YXIgbj1lLnNwbGl0KCItIilbMF07aWYoRVtuXSl7RVtlXT1PYmplY3QuY3JlYXRlKEVbbl0pO2ZvcihyIGluIHQpInVuZGVmaW5lZCI9PXR5cGVvZiBFW25dW3JdJiYoRVtuXVtyXT10W3JdKSxFW2VdW3JdPXRbcl19ZWxzZSBFW2VdPXQsRVtuXT10O3JldHVybiB0aGlzfSxmcmVzaEFwaTpmdW5jdGlvbihlKXt2YXIgdD1mKCk7cmV0dXJuIGUmJnQubGFuZ3VhZ2UoZSksdH0sdmFsaWRhdGU6ZnVuY3Rpb24oZSxvLGksYSl7dmFyIHM9dSh0KSxjPXI/ZnVuY3Rpb24oZSx0LG4pe3JldHVybiByKGUsdCxuKXx8cyhlLHQsbil9OnMsbD1uZXcgaChuLCghMSksYyxpLGEpOyJzdHJpbmciPT10eXBlb2YgbyYmKG89eyRyZWY6b30pLGwuYWRkU2NoZW1hKCIiLG8pO3ZhciBmPWwudmFsaWRhdGVBbGwoZSxvLG51bGwsbnVsbCwiIik7cmV0dXJuIWYmJmEmJihmPWwuYmFuVW5rbm93blByb3BlcnRpZXMoZSxvKSksdGhpcy5lcnJvcj1mLHRoaXMubWlzc2luZz1sLm1pc3NpbmcsdGhpcy52YWxpZD1udWxsPT09Zix0aGlzLnZhbGlkfSx2YWxpZGF0ZVJlc3VsdDpmdW5jdGlvbigpe3ZhciBlPXt9O3JldHVybiB0aGlzLnZhbGlkYXRlLmFwcGx5KGUsYXJndW1lbnRzKSxlfSx2YWxpZGF0ZU11bHRpcGxlOmZ1bmN0aW9uKGUsbyxpLGEpe3ZhciBzPXUodCksYz1yP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcihlLHQsbil8fHMoZSx0LG4pfTpzLGw9bmV3IGgobiwoITApLGMsaSxhKTsic3RyaW5nIj09dHlwZW9mIG8mJihvPXskcmVmOm99KSxsLmFkZFNjaGVtYSgiIixvKSxsLnZhbGlkYXRlQWxsKGUsbyxudWxsLG51bGwsIiIpLGEmJmwuYmFuVW5rbm93blByb3BlcnRpZXMoZSxvKTt2YXIgZj17fTtyZXR1cm4gZi5lcnJvcnM9bC5lcnJvcnMsZi5taXNzaW5nPWwubWlzc2luZyxmLnZhbGlkPTA9PT1mLmVycm9ycy5sZW5ndGgsZn0sYWRkU2NoZW1hOmZ1bmN0aW9uKCl7cmV0dXJuIG4uYWRkU2NoZW1hLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0U2NoZW1hOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZ2V0U2NoZW1hLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0U2NoZW1hTWFwOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZ2V0U2NoZW1hTWFwLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0U2NoZW1hVXJpczpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYVVyaXMuYXBwbHkobixhcmd1bWVudHMpfSxnZXRNaXNzaW5nVXJpczpmdW5jdGlvbigpe3JldHVybiBuLmdldE1pc3NpbmdVcmlzLmFwcGx5KG4sYXJndW1lbnRzKX0sZHJvcFNjaGVtYXM6ZnVuY3Rpb24oKXtuLmRyb3BTY2hlbWFzLmFwcGx5KG4sYXJndW1lbnRzKX0sZGVmaW5lS2V5d29yZDpmdW5jdGlvbigpe24uZGVmaW5lS2V5d29yZC5hcHBseShuLGFyZ3VtZW50cyl9LGRlZmluZUVycm9yOmZ1bmN0aW9uKGUsdCxyKXtpZigic3RyaW5nIiE9dHlwZW9mIGV8fCEvXltBLVpdKyhfW0EtWl0rKSokLy50ZXN0KGUpKXRocm93IG5ldyBFcnJvcigiQ29kZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgaW4gVVBQRVJfQ0FTRV9XSVRIX1VOREVSU0NPUkVTIik7aWYoIm51bWJlciIhPXR5cGVvZiB0fHx0JTEhPT0wfHx0PDFlNCl0aHJvdyBuZXcgRXJyb3IoIkNvZGUgbnVtYmVyIG11c3QgYmUgYW4gaW50ZWdlciA+IDEwMDAwIik7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiB2W2VdKXRocm93IG5ldyBFcnJvcigiRXJyb3IgYWxyZWFkeSBkZWZpbmVkOiAiK2UrIiBhcyAiK3ZbZV0pO2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgX1t0XSl0aHJvdyBuZXcgRXJyb3IoIkVycm9yIGNvZGUgYWxyZWFkeSB1c2VkOiAiK19bdF0rIiBhcyAiK3QpO3ZbZV09dCxfW3RdPWUsZ1tlXT1nW3RdPXI7Zm9yKHZhciBuIGluIEUpe3ZhciBvPUVbbl07b1tlXSYmKG9bdF09b1t0XXx8b1tlXSl9fSxyZXNldDpmdW5jdGlvbigpe24ucmVzZXQoKSx0aGlzLmVycm9yPW51bGwsdGhpcy5taXNzaW5nPVtdLHRoaXMudmFsaWQ9ITB9LG1pc3Npbmc6W10sZXJyb3I6bnVsbCx2YWxpZDohMCxub3JtU2NoZW1hOnMscmVzb2x2ZVVybDppLGdldERvY3VtZW50VXJpOmEsZXJyb3JDb2Rlczp2fTtyZXR1cm4gby5sYW5ndWFnZShlfHwiZW4iKSxvfU9iamVjdC5rZXlzfHwoT2JqZWN0LmtleXM9ZnVuY3Rpb24oKXt2YXIgZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHQ9IXt0b1N0cmluZzpudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgidG9TdHJpbmciKSxyPVsidG9TdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsInZhbHVlT2YiLCJoYXNPd25Qcm9wZXJ0eSIsImlzUHJvdG90eXBlT2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImNvbnN0cnVjdG9yIl0sbj1yLmxlbmd0aDtyZXR1cm4gZnVuY3Rpb24obyl7aWYoIm9iamVjdCIhPXR5cGVvZiBvJiYiZnVuY3Rpb24iIT10eXBlb2Ygb3x8bnVsbD09PW8pdGhyb3cgbmV3IFR5cGVFcnJvcigiT2JqZWN0LmtleXMgY2FsbGVkIG9uIG5vbi1vYmplY3QiKTt2YXIgaT1bXTtmb3IodmFyIGEgaW4gbyllLmNhbGwobyxhKSYmaS5wdXNoKGEpO2lmKHQpZm9yKHZhciBzPTA7czxuO3MrKyllLmNhbGwobyxyW3NdKSYmaS5wdXNoKHJbc10pO3JldHVybiBpfX0oKSksT2JqZWN0LmNyZWF0ZXx8KE9iamVjdC5jcmVhdGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7fXJldHVybiBmdW5jdGlvbih0KXtpZigxIT09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoIk9iamVjdC5jcmVhdGUgaW1wbGVtZW50YXRpb24gb25seSBhY2NlcHRzIG9uZSBwYXJhbWV0ZXIuIik7cmV0dXJuIGUucHJvdG90eXBlPXQsbmV3IGV9fSgpKSxBcnJheS5pc0FycmF5fHwoQXJyYXkuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm4iW29iamVjdCBBcnJheV0iPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSksQXJyYXkucHJvdG90eXBlLmluZGV4T2Z8fChBcnJheS5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbihlKXtpZihudWxsPT09dGhpcyl0aHJvdyBuZXcgVHlwZUVycm9yO3ZhciB0PU9iamVjdCh0aGlzKSxyPXQubGVuZ3RoPj4+MDtpZigwPT09cilyZXR1cm4tMTt2YXIgbj0wO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSYmKG49TnVtYmVyKGFyZ3VtZW50c1sxXSksbiE9PW4/bj0wOjAhPT1uJiZuIT09MS8wJiZuIT09LSgxLzApJiYobj0obj4wfHwtMSkqTWF0aC5mbG9vcihNYXRoLmFicyhuKSkpKSxuPj1yKXJldHVybi0xO2Zvcih2YXIgbz1uPj0wP246TWF0aC5tYXgoci1NYXRoLmFicyhuKSwwKTtvPHI7bysrKWlmKG8gaW4gdCYmdFtvXT09PWUpcmV0dXJuIG87cmV0dXJuLTF9KSxPYmplY3QuaXNGcm96ZW58fChPYmplY3QuaXNGcm96ZW49ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PSJ0djRfdGVzdF9mcm96ZW5fa2V5IjtlLmhhc093blByb3BlcnR5KHQpOyl0Kz1NYXRoLnJhbmRvbSgpO3RyeXtyZXR1cm4gZVt0XT0hMCxkZWxldGUgZVt0XSwhMX1jYXRjaChyKXtyZXR1cm4hMH19KTt2YXIgZD17IisiOiEwLCIjIjohMCwiLiI6ITAsIi8iOiEwLCI7IjohMCwiPyI6ITAsIiYiOiEwfSxwPXsiKiI6ITB9O3IucHJvdG90eXBlPXt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRlbXBsYXRlfSxmaWxsRnJvbU9iamVjdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfSl9fTt2YXIgaD1mdW5jdGlvbihlLHQscixuLG8pe2lmKHRoaXMubWlzc2luZz1bXSx0aGlzLm1pc3NpbmdNYXA9e30sdGhpcy5mb3JtYXRWYWxpZGF0b3JzPWU/T2JqZWN0LmNyZWF0ZShlLmZvcm1hdFZhbGlkYXRvcnMpOnt9LHRoaXMuc2NoZW1hcz1lP09iamVjdC5jcmVhdGUoZS5zY2hlbWFzKTp7fSx0aGlzLmNvbGxlY3RNdWx0aXBsZT10LHRoaXMuZXJyb3JzPVtdLHRoaXMuaGFuZGxlRXJyb3I9dD90aGlzLmNvbGxlY3RFcnJvcjp0aGlzLnJldHVybkVycm9yLG4mJih0aGlzLmNoZWNrUmVjdXJzaXZlPSEwLHRoaXMuc2Nhbm5lZD1bXSx0aGlzLnNjYW5uZWRGcm96ZW49W10sdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcz1bXSx0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzPVtdLHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleT0idHY0X3ZhbGlkYXRpb25faWQiLHRoaXMudmFsaWRhdGlvbkVycm9yc0tleT0idHY0X3ZhbGlkYXRpb25fZXJyb3JzX2lkIiksbyYmKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcz0hMCx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9KSx0aGlzLmVycm9yUmVwb3J0ZXI9cnx8dSgiZW4iKSwic3RyaW5nIj09dHlwZW9mIHRoaXMuZXJyb3JSZXBvcnRlcil0aHJvdyBuZXcgRXJyb3IoImRlYnVnIik7aWYodGhpcy5kZWZpbmVkS2V5d29yZHM9e30sZSlmb3IodmFyIGkgaW4gZS5kZWZpbmVkS2V5d29yZHMpdGhpcy5kZWZpbmVkS2V5d29yZHNbaV09ZS5kZWZpbmVkS2V5d29yZHNbaV0uc2xpY2UoMCl9O2gucHJvdG90eXBlLmRlZmluZUtleXdvcmQ9ZnVuY3Rpb24oZSx0KXt0aGlzLmRlZmluZWRLZXl3b3Jkc1tlXT10aGlzLmRlZmluZWRLZXl3b3Jkc1tlXXx8W10sdGhpcy5kZWZpbmVkS2V5d29yZHNbZV0ucHVzaCh0KX0saC5wcm90b3R5cGUuY3JlYXRlRXJyb3I9ZnVuY3Rpb24oZSx0LHIsbixvLGksYSl7dmFyIHM9bmV3IGMoZSx0LHIsbixvKTtyZXR1cm4gcy5tZXNzYWdlPXRoaXMuZXJyb3JSZXBvcnRlcihzLGksYSksc30saC5wcm90b3R5cGUucmV0dXJuRXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGgucHJvdG90eXBlLmNvbGxlY3RFcnJvcj1mdW5jdGlvbihlKXtyZXR1cm4gZSYmdGhpcy5lcnJvcnMucHVzaChlKSxudWxsfSxoLnByb3RvdHlwZS5wcmVmaXhFcnJvcnM9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbj1lO248dGhpcy5lcnJvcnMubGVuZ3RoO24rKyl0aGlzLmVycm9yc1tuXT10aGlzLmVycm9yc1tuXS5wcmVmaXhXaXRoKHQscik7cmV0dXJuIHRoaXN9LGgucHJvdG90eXBlLmJhblVua25vd25Qcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpe3ZhciBuPXRoaXMuY3JlYXRlRXJyb3Iodi5VTktOT1dOX1BST1BFUlRZLHtwYXRoOnJ9LHIsIiIsbnVsbCxlLHQpLG89dGhpcy5oYW5kbGVFcnJvcihuKTtpZihvKXJldHVybiBvfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS5hZGRGb3JtYXQ9ZnVuY3Rpb24oZSx0KXtpZigib2JqZWN0Ij09dHlwZW9mIGUpe2Zvcih2YXIgciBpbiBlKXRoaXMuYWRkRm9ybWF0KHIsZVtyXSk7cmV0dXJuIHRoaXN9dGhpcy5mb3JtYXRWYWxpZGF0b3JzW2VdPXR9LGgucHJvdG90eXBlLnJlc29sdmVSZWZzPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwIT09ZS4kcmVmKXtpZih0PXR8fHt9LHRbZS4kcmVmXSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2LkNJUkNVTEFSX1JFRkVSRU5DRSx7dXJsczpPYmplY3Qua2V5cyh0KS5qb2luKCIsICIpfSwiIiwiIixudWxsLHZvaWQgMCxlKTt0W2UuJHJlZl09ITAsZT10aGlzLmdldFNjaGVtYShlLiRyZWYsdCl9cmV0dXJuIGV9LGgucHJvdG90eXBlLmdldFNjaGVtYT1mdW5jdGlvbihlLHQpe3ZhciByO2lmKHZvaWQgMCE9PXRoaXMuc2NoZW1hc1tlXSlyZXR1cm4gcj10aGlzLnNjaGVtYXNbZV0sdGhpcy5yZXNvbHZlUmVmcyhyLHQpO3ZhciBuPWUsbz0iIjtpZihlLmluZGV4T2YoIiMiKSE9PS0xJiYobz1lLnN1YnN0cmluZyhlLmluZGV4T2YoIiMiKSsxKSxuPWUuc3Vic3RyaW5nKDAsZS5pbmRleE9mKCIjIikpKSwib2JqZWN0Ij09dHlwZW9mIHRoaXMuc2NoZW1hc1tuXSl7cj10aGlzLnNjaGVtYXNbbl07dmFyIGk9ZGVjb2RlVVJJQ29tcG9uZW50KG8pO2lmKCIiPT09aSlyZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhyLHQpO2lmKCIvIiE9PWkuY2hhckF0KDApKXJldHVybjtmb3IodmFyIGE9aS5zcGxpdCgiLyIpLnNsaWNlKDEpLHM9MDtzPGEubGVuZ3RoO3MrKyl7dmFyIHU9YVtzXS5yZXBsYWNlKC9+MS9nLCIvIikucmVwbGFjZSgvfjAvZywifiIpO2lmKHZvaWQgMD09PXJbdV0pe3I9dm9pZCAwO2JyZWFrfXI9clt1XX1pZih2b2lkIDAhPT1yKXJldHVybiB0aGlzLnJlc29sdmVSZWZzKHIsdCl9dm9pZCAwPT09dGhpcy5taXNzaW5nW25dJiYodGhpcy5taXNzaW5nLnB1c2gobiksdGhpcy5taXNzaW5nW25dPW4sdGhpcy5taXNzaW5nTWFwW25dPW4pfSxoLnByb3RvdHlwZS5zZWFyY2hTY2hlbWFzPWZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl0aGlzLnNlYXJjaFNjaGVtYXMoZVtyXSx0KTtlbHNlIGlmKGUmJiJvYmplY3QiPT10eXBlb2YgZSl7InN0cmluZyI9PXR5cGVvZiBlLmlkJiZsKHQsZS5pZCkmJnZvaWQgMD09PXRoaXMuc2NoZW1hc1tlLmlkXSYmKHRoaXMuc2NoZW1hc1tlLmlkXT1lKTtmb3IodmFyIG4gaW4gZSlpZigiZW51bSIhPT1uKWlmKCJvYmplY3QiPT10eXBlb2YgZVtuXSl0aGlzLnNlYXJjaFNjaGVtYXMoZVtuXSx0KTtlbHNlIGlmKCIkcmVmIj09PW4pe3ZhciBvPWEoZVtuXSk7byYmdm9pZCAwPT09dGhpcy5zY2hlbWFzW29dJiZ2b2lkIDA9PT10aGlzLm1pc3NpbmdNYXBbb10mJih0aGlzLm1pc3NpbmdNYXBbb109byl9fX0saC5wcm90b3R5cGUuYWRkU2NoZW1hPWZ1bmN0aW9uKGUsdCl7aWYoInN0cmluZyIhPXR5cGVvZiBlfHwidW5kZWZpbmVkIj09dHlwZW9mIHQpe2lmKCJvYmplY3QiIT10eXBlb2YgZXx8InN0cmluZyIhPXR5cGVvZiBlLmlkKXJldHVybjt0PWUsZT10LmlkfWU9PT1hKGUpKyIjIiYmKGU9YShlKSksdGhpcy5zY2hlbWFzW2VdPXQsZGVsZXRlIHRoaXMubWlzc2luZ01hcFtlXSxzKHQsZSksdGhpcy5zZWFyY2hTY2hlbWFzKHQsZSl9LGgucHJvdG90eXBlLmdldFNjaGVtYU1hcD1mdW5jdGlvbigpe3ZhciBlPXt9O2Zvcih2YXIgdCBpbiB0aGlzLnNjaGVtYXMpZVt0XT10aGlzLnNjaGVtYXNbdF07cmV0dXJuIGV9LGgucHJvdG90eXBlLmdldFNjaGVtYVVyaXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIHRoaXMuc2NoZW1hcyllJiYhZS50ZXN0KHIpfHx0LnB1c2gocik7cmV0dXJuIHR9LGgucHJvdG90eXBlLmdldE1pc3NpbmdVcmlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiB0aGlzLm1pc3NpbmdNYXApZSYmIWUudGVzdChyKXx8dC5wdXNoKHIpO3JldHVybiB0fSxoLnByb3RvdHlwZS5kcm9wU2NoZW1hcz1mdW5jdGlvbigpe3RoaXMuc2NoZW1hcz17fSx0aGlzLnJlc2V0KCl9LGgucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5taXNzaW5nPVtdLHRoaXMubWlzc2luZ01hcD17fSx0aGlzLmVycm9ycz1bXX0saC5wcm90b3R5cGUudmFsaWRhdGVBbGw9ZnVuY3Rpb24oZSx0LHIsbixvKXt2YXIgaTtpZih0PXRoaXMucmVzb2x2ZVJlZnModCksIXQpcmV0dXJuIG51bGw7aWYodCBpbnN0YW5jZW9mIGMpcmV0dXJuIHRoaXMuZXJyb3JzLnB1c2godCksdDt2YXIgYSxzPXRoaXMuZXJyb3JzLmxlbmd0aCx1PW51bGwsbD1udWxsO2lmKHRoaXMuY2hlY2tSZWN1cnNpdmUmJmUmJiJvYmplY3QiPT10eXBlb2YgZSl7aWYoaT0hdGhpcy5zY2FubmVkLmxlbmd0aCxlW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0pe3ZhciBmPWVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5pbmRleE9mKHQpO2lmKGYhPT0tMSlyZXR1cm4gdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuY29uY2F0KGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtmXSksbnVsbH1pZihPYmplY3QuaXNGcm96ZW4oZSkmJihhPXRoaXMuc2Nhbm5lZEZyb3plbi5pbmRleE9mKGUpLGEhPT0tMSkpe3ZhciBkPXRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbYV0uaW5kZXhPZih0KTtpZihkIT09LTEpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLmNvbmNhdCh0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2FdW2RdKSxudWxsfWlmKHRoaXMuc2Nhbm5lZC5wdXNoKGUpLE9iamVjdC5pc0Zyb3plbihlKSlhPT09LTEmJihhPXRoaXMuc2Nhbm5lZEZyb3plbi5sZW5ndGgsdGhpcy5zY2FubmVkRnJvemVuLnB1c2goZSksdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcy5wdXNoKFtdKSksdT10aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2FdLmxlbmd0aCx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2FdW3VdPXQsdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVt1XT1bXTtlbHNle2lmKCFlW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0pdHJ5e09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleSx7dmFsdWU6W10sY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5LHt2YWx1ZTpbXSxjb25maWd1cmFibGU6ITB9KX1jYXRjaChwKXtlW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV09W10sZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldPVtdfWw9ZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmxlbmd0aCxlW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV1bbF09dCxlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bbF09W119fXZhciBoPXRoaXMuZXJyb3JzLmxlbmd0aCx5PXRoaXMudmFsaWRhdGVCYXNpYyhlLHQsbyl8fHRoaXMudmFsaWRhdGVOdW1lcmljKGUsdCxvKXx8dGhpcy52YWxpZGF0ZVN0cmluZyhlLHQsbyl8fHRoaXMudmFsaWRhdGVBcnJheShlLHQsbyl8fHRoaXMudmFsaWRhdGVPYmplY3QoZSx0LG8pfHx0aGlzLnZhbGlkYXRlQ29tYmluYXRpb25zKGUsdCxvKXx8dGhpcy52YWxpZGF0ZUh5cGVybWVkaWEoZSx0LG8pfHx0aGlzLnZhbGlkYXRlRm9ybWF0KGUsdCxvKXx8dGhpcy52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyhlLHQsbyl8fG51bGw7aWYoaSl7Zm9yKDt0aGlzLnNjYW5uZWQubGVuZ3RoOyl7dmFyIG09dGhpcy5zY2FubmVkLnBvcCgpO2RlbGV0ZSBtW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV19dGhpcy5zY2FubmVkRnJvemVuPVtdLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXM9W119aWYoeXx8aCE9PXRoaXMuZXJyb3JzLmxlbmd0aClmb3IoO3ImJnIubGVuZ3RofHxuJiZuLmxlbmd0aDspe3ZhciB2PXImJnIubGVuZ3RoPyIiK3IucG9wKCk6bnVsbCxfPW4mJm4ubGVuZ3RoPyIiK24ucG9wKCk6bnVsbDt5JiYoeT15LnByZWZpeFdpdGgodixfKSksdGhpcy5wcmVmaXhFcnJvcnMoaCx2LF8pfXJldHVybiBudWxsIT09dT90aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2FdW3VdPXRoaXMuZXJyb3JzLnNsaWNlKHMpOm51bGwhPT1sJiYoZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW2xdPXRoaXMuZXJyb3JzLnNsaWNlKHMpKSx0aGlzLmhhbmRsZUVycm9yKHkpfSxoLnByb3RvdHlwZS52YWxpZGF0ZUZvcm1hdD1mdW5jdGlvbihlLHQpe2lmKCJzdHJpbmciIT10eXBlb2YgdC5mb3JtYXR8fCF0aGlzLmZvcm1hdFZhbGlkYXRvcnNbdC5mb3JtYXRdKXJldHVybiBudWxsO3ZhciByPXRoaXMuZm9ybWF0VmFsaWRhdG9yc1t0LmZvcm1hdF0uY2FsbChudWxsLGUsdCk7cmV0dXJuInN0cmluZyI9PXR5cGVvZiByfHwibnVtYmVyIj09dHlwZW9mIHI/dGhpcy5jcmVhdGVFcnJvcih2LkZPUk1BVF9DVVNUT00se21lc3NhZ2U6cn0sIiIsIi9mb3JtYXQiLG51bGwsZSx0KTpyJiYib2JqZWN0Ij09dHlwZW9mIHI/dGhpcy5jcmVhdGVFcnJvcih2LkZPUk1BVF9DVVNUT00se21lc3NhZ2U6ci5tZXNzYWdlfHwiPyJ9LHIuZGF0YVBhdGh8fCIiLHIuc2NoZW1hUGF0aHx8Ii9mb3JtYXQiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZURlZmluZWRLZXl3b3Jkcz1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBuIGluIHRoaXMuZGVmaW5lZEtleXdvcmRzKWlmKCJ1bmRlZmluZWQiIT10eXBlb2YgdFtuXSlmb3IodmFyIG89dGhpcy5kZWZpbmVkS2V5d29yZHNbbl0saT0wO2k8by5sZW5ndGg7aSsrKXt2YXIgYT1vW2ldLHM9YShlLHRbbl0sdCxyKTtpZigic3RyaW5nIj09dHlwZW9mIHN8fCJudW1iZXIiPT10eXBlb2YgcylyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2LktFWVdPUkRfQ1VTVE9NLHtrZXk6bixtZXNzYWdlOnN9LCIiLCIiLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbik7aWYocyYmIm9iamVjdCI9PXR5cGVvZiBzKXt2YXIgdT1zLmNvZGU7aWYoInN0cmluZyI9PXR5cGVvZiB1KXtpZighdlt1XSl0aHJvdyBuZXcgRXJyb3IoIlVuZGVmaW5lZCBlcnJvciBjb2RlICh1c2UgZGVmaW5lRXJyb3IpOiAiK3UpO3U9dlt1XX1lbHNlIm51bWJlciIhPXR5cGVvZiB1JiYodT12LktFWVdPUkRfQ1VTVE9NKTt2YXIgYz0ib2JqZWN0Ij09dHlwZW9mIHMubWVzc2FnZT9zLm1lc3NhZ2U6e2tleTpuLG1lc3NhZ2U6cy5tZXNzYWdlfHwiPyJ9LGw9cy5zY2hlbWFQYXRofHwiLyIrbi5yZXBsYWNlKC9+L2csIn4wIikucmVwbGFjZSgvXC8vZywifjEiKTtyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih1LGMscy5kYXRhUGF0aHx8bnVsbCxsLG51bGwsZSx0KX19cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQmFzaWM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO3JldHVybihuPXRoaXMudmFsaWRhdGVUeXBlKGUsdCxyKSk/bi5wcmVmaXhXaXRoKG51bGwsInR5cGUiKToobj10aGlzLnZhbGlkYXRlRW51bShlLHQscikpP24ucHJlZml4V2l0aChudWxsLCJ0eXBlIik6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVUeXBlPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dC50eXBlKXJldHVybiBudWxsO3ZhciByPXR5cGVvZiBlO251bGw9PT1lP3I9Im51bGwiOkFycmF5LmlzQXJyYXkoZSkmJihyPSJhcnJheSIpO3ZhciBuPXQudHlwZTtBcnJheS5pc0FycmF5KG4pfHwobj1bbl0pO2Zvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKXt2YXIgaT1uW29dO2lmKGk9PT1yfHwiaW50ZWdlciI9PT1pJiYibnVtYmVyIj09PXImJmUlMT09PTApcmV0dXJuIG51bGx9cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5JTlZBTElEX1RZUEUse3R5cGU6cixleHBlY3RlZDpuLmpvaW4oIi8iKX0sIiIsIiIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZUVudW09ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDA9PT10WyJlbnVtIl0pcmV0dXJuIG51bGw7Zm9yKHZhciByPTA7cjx0WyJlbnVtIl0ubGVuZ3RoO3IrKyl7dmFyIG89dFsiZW51bSJdW3JdO2lmKG4oZSxvKSlyZXR1cm4gbnVsbH1yZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2LkVOVU1fTUlTTUFUQ0gse3ZhbHVlOiJ1bmRlZmluZWQiIT10eXBlb2YgSlNPTj9KU09OLnN0cmluZ2lmeShlKTplfSwiIiwiIixudWxsLGUsdCl9LGgucHJvdG90eXBlLnZhbGlkYXRlTnVtZXJpYz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMudmFsaWRhdGVNdWx0aXBsZU9mKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU1pbk1heChlLHQscil8fHRoaXMudmFsaWRhdGVOYU4oZSx0LHIpfHxudWxsfTt2YXIgeT1NYXRoLnBvdygyLC01MSksbT0xLXk7aC5wcm90b3R5cGUudmFsaWRhdGVNdWx0aXBsZU9mPWZ1bmN0aW9uKGUsdCl7dmFyIHI9dC5tdWx0aXBsZU9mfHx0LmRpdmlzaWJsZUJ5O2lmKHZvaWQgMD09PXIpcmV0dXJuIG51bGw7aWYoIm51bWJlciI9PXR5cGVvZiBlKXt2YXIgbj1lL3IlMTtpZihuPj15JiZuPG0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTVVMVElQTEVfT0Yse3ZhbHVlOmUsbXVsdGlwbGVPZjpyfSwiIiwiIixudWxsLGUsdCl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlTWluTWF4PWZ1bmN0aW9uKGUsdCl7aWYoIm51bWJlciIhPXR5cGVvZiBlKXJldHVybiBudWxsO2lmKHZvaWQgMCE9PXQubWluaW11bSl7aWYoZTx0Lm1pbmltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUlOSU1VTSx7dmFsdWU6ZSxtaW5pbXVtOnQubWluaW11bX0sIiIsIi9taW5pbXVtIixudWxsLGUsdCk7aWYodC5leGNsdXNpdmVNaW5pbXVtJiZlPT09dC5taW5pbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFLHt2YWx1ZTplLG1pbmltdW06dC5taW5pbXVtfSwiIiwiL2V4Y2x1c2l2ZU1pbmltdW0iLG51bGwsZSx0KX1pZih2b2lkIDAhPT10Lm1heGltdW0pe2lmKGU+dC5tYXhpbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01BWElNVU0se3ZhbHVlOmUsbWF4aW11bTp0Lm1heGltdW19LCIiLCIvbWF4aW11bSIsbnVsbCxlLHQpO2lmKHQuZXhjbHVzaXZlTWF4aW11bSYmZT09PXQubWF4aW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRSx7dmFsdWU6ZSxtYXhpbXVtOnQubWF4aW11bX0sIiIsIi9leGNsdXNpdmVNYXhpbXVtIixudWxsLGUsdCl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlTmFOPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIm51bWJlciIhPXR5cGVvZiBlP251bGw6aXNOYU4oZSk9PT0hMHx8ZT09PTEvMHx8ZT09PS0oMS8wKT90aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX05PVF9BX05VTUJFUix7dmFsdWU6ZX0sIiIsIi90eXBlIixudWxsLGUsdCk6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmc9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlU3RyaW5nTGVuZ3RoKGUsdCxyKXx8dGhpcy52YWxpZGF0ZVN0cmluZ1BhdHRlcm4oZSx0LHIpfHxudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZ0xlbmd0aD1mdW5jdGlvbihlLHQpe3JldHVybiJzdHJpbmciIT10eXBlb2YgZT9udWxsOnZvaWQgMCE9PXQubWluTGVuZ3RoJiZlLmxlbmd0aDx0Lm1pbkxlbmd0aD90aGlzLmNyZWF0ZUVycm9yKHYuU1RSSU5HX0xFTkdUSF9TSE9SVCx7bGVuZ3RoOmUubGVuZ3RoLG1pbmltdW06dC5taW5MZW5ndGh9LCIiLCIvbWluTGVuZ3RoIixudWxsLGUsdCk6dm9pZCAwIT09dC5tYXhMZW5ndGgmJmUubGVuZ3RoPnQubWF4TGVuZ3RoP3RoaXMuY3JlYXRlRXJyb3Iodi5TVFJJTkdfTEVOR1RIX0xPTkcse2xlbmd0aDplLmxlbmd0aCxtYXhpbXVtOnQubWF4TGVuZ3RofSwiIiwiL21heExlbmd0aCIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nUGF0dGVybj1mdW5jdGlvbihlLHQpe2lmKCJzdHJpbmciIT10eXBlb2YgZXx8InN0cmluZyIhPXR5cGVvZiB0LnBhdHRlcm4mJiEodC5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSlyZXR1cm4gbnVsbDt2YXIgcjtpZih0LnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApcj10LnBhdHRlcm47ZWxzZXt2YXIgbixvPSIiLGk9dC5wYXR0ZXJuLm1hdGNoKC9eXC8oLispXC8oW2ltZ10qKSQvKTtpPyhuPWlbMV0sbz1pWzJdKTpuPXQucGF0dGVybixyPW5ldyBSZWdFeHAobixvKX1yZXR1cm4gci50ZXN0KGUpP251bGw6dGhpcy5jcmVhdGVFcnJvcih2LlNUUklOR19QQVRURVJOLHtwYXR0ZXJuOnQucGF0dGVybn0sIiIsIi9wYXR0ZXJuIixudWxsLGUsdCl9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXk9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP3RoaXMudmFsaWRhdGVBcnJheUxlbmd0aChlLHQscil8fHRoaXMudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGUsdCxyKXx8dGhpcy52YWxpZGF0ZUFycmF5SXRlbXMoZSx0LHIpfHxudWxsOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlMZW5ndGg9ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gdm9pZCAwIT09dC5taW5JdGVtcyYmZS5sZW5ndGg8dC5taW5JdGVtcyYmKHI9dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX0xFTkdUSF9TSE9SVCx7bGVuZ3RoOmUubGVuZ3RoLG1pbmltdW06dC5taW5JdGVtc30sIiIsIi9taW5JdGVtcyIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6dm9pZCAwIT09dC5tYXhJdGVtcyYmZS5sZW5ndGg+dC5tYXhJdGVtcyYmKHI9dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX0xFTkdUSF9MT05HLHtsZW5ndGg6ZS5sZW5ndGgsbWF4aW11bTp0Lm1heEl0ZW1zfSwiIiwiL21heEl0ZW1zIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFycmF5VW5pcXVlSXRlbXM9ZnVuY3Rpb24oZSx0KXtpZih0LnVuaXF1ZUl0ZW1zKWZvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWZvcih2YXIgbz1yKzE7bzxlLmxlbmd0aDtvKyspaWYobihlW3JdLGVbb10pKXt2YXIgaT10aGlzLmNyZWF0ZUVycm9yKHYuQVJSQVlfVU5JUVVFLHttYXRjaDE6cixtYXRjaDI6b30sIiIsIi91bmlxdWVJdGVtcyIsbnVsbCxlLHQpO2lmKHRoaXMuaGFuZGxlRXJyb3IoaSkpcmV0dXJuIGl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlJdGVtcz1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5pdGVtcylyZXR1cm4gbnVsbDt2YXIgbixvO2lmKEFycmF5LmlzQXJyYXkodC5pdGVtcykpe2ZvcihvPTA7bzxlLmxlbmd0aDtvKyspaWYobzx0Lml0ZW1zLmxlbmd0aCl7aWYobj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5pdGVtc1tvXSxbb10sWyJpdGVtcyIsb10scisiLyIrbykpcmV0dXJuIG59ZWxzZSBpZih2b2lkIDAhPT10LmFkZGl0aW9uYWxJdGVtcylpZigiYm9vbGVhbiI9PXR5cGVvZiB0LmFkZGl0aW9uYWxJdGVtcyl7aWYoIXQuYWRkaXRpb25hbEl0ZW1zJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuQVJSQVlfQURESVRJT05BTF9JVEVNUyx7fSwiLyIrbywiL2FkZGl0aW9uYWxJdGVtcyIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IobikpKXJldHVybiBufWVsc2UgaWYobj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5hZGRpdGlvbmFsSXRlbXMsW29dLFsiYWRkaXRpb25hbEl0ZW1zIl0scisiLyIrbykpcmV0dXJuIG59ZWxzZSBmb3Iobz0wO288ZS5sZW5ndGg7bysrKWlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuaXRlbXMsW29dLFsiaXRlbXMiXSxyKyIvIitvKSlyZXR1cm4gbjtyZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3Q9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiJvYmplY3QiIT10eXBlb2YgZXx8bnVsbD09PWV8fEFycmF5LmlzQXJyYXkoZSk/bnVsbDp0aGlzLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyhlLHQscil8fHRoaXMudmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhlLHQscil8fHRoaXMudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXMoZSx0LHIpfHxudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXM9ZnVuY3Rpb24oZSx0KXt2YXIgcixuPU9iamVjdC5rZXlzKGUpO3JldHVybiB2b2lkIDAhPT10Lm1pblByb3BlcnRpZXMmJm4ubGVuZ3RoPHQubWluUHJvcGVydGllcyYmKHI9dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU0se3Byb3BlcnR5Q291bnQ6bi5sZW5ndGgsbWluaW11bTp0Lm1pblByb3BlcnRpZXN9LCIiLCIvbWluUHJvcGVydGllcyIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6dm9pZCAwIT09dC5tYXhQcm9wZXJ0aWVzJiZuLmxlbmd0aD50Lm1heFByb3BlcnRpZXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNLHtwcm9wZXJ0eUNvdW50Om4ubGVuZ3RoLG1heGltdW06dC5tYXhQcm9wZXJ0aWVzfSwiIiwiL21heFByb3BlcnRpZXMiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwIT09dC5yZXF1aXJlZClmb3IodmFyIHI9MDtyPHQucmVxdWlyZWQubGVuZ3RoO3IrKyl7dmFyIG49dC5yZXF1aXJlZFtyXTtpZih2b2lkIDA9PT1lW25dKXt2YXIgbz10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX1JFUVVJUkVELHtrZXk6bn0sIiIsIi9yZXF1aXJlZC8iK3IsbnVsbCxlLHQpO2lmKHRoaXMuaGFuZGxlRXJyb3IobykpcmV0dXJuIG99fXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2Zvcih2YXIgbyBpbiBlKXt2YXIgaT1yKyIvIitvLnJlcGxhY2UoL34vZywifjAiKS5yZXBsYWNlKC9cLy9nLCJ+MSIpLGE9ITE7aWYodm9pZCAwIT09dC5wcm9wZXJ0aWVzJiZ2b2lkIDAhPT10LnByb3BlcnRpZXNbb10mJihhPSEwLG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQucHJvcGVydGllc1tvXSxbb10sWyJwcm9wZXJ0aWVzIixvXSxpKSkpcmV0dXJuIG47aWYodm9pZCAwIT09dC5wYXR0ZXJuUHJvcGVydGllcylmb3IodmFyIHMgaW4gdC5wYXR0ZXJuUHJvcGVydGllcyl7dmFyIHU9bmV3IFJlZ0V4cChzKTtpZih1LnRlc3QobykmJihhPSEwLG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQucGF0dGVyblByb3BlcnRpZXNbc10sW29dLFsicGF0dGVyblByb3BlcnRpZXMiLHNdLGkpKSlyZXR1cm4gbn1pZihhKXRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2ldPSEwLGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2ldKTtlbHNlIGlmKHZvaWQgMCE9PXQuYWRkaXRpb25hbFByb3BlcnRpZXMpe2lmKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2ldPSEwLGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2ldKSwiYm9vbGVhbiI9PXR5cGVvZiB0LmFkZGl0aW9uYWxQcm9wZXJ0aWVzKXtpZighdC5hZGRpdGlvbmFsUHJvcGVydGllcyYmKG49dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVMse2tleTpvfSwiIiwiL2FkZGl0aW9uYWxQcm9wZXJ0aWVzIixudWxsLGUsdCkucHJlZml4V2l0aChvLG51bGwpLHRoaXMuaGFuZGxlRXJyb3IobikpKXJldHVybiBufWVsc2UgaWYobj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5hZGRpdGlvbmFsUHJvcGVydGllcyxbb10sWyJhZGRpdGlvbmFsUHJvcGVydGllcyJdLGkpKXJldHVybiBufWVsc2UgdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYhdGhpcy5rbm93blByb3BlcnR5UGF0aHNbaV0mJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2ldPSEwKX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2lmKHZvaWQgMCE9PXQuZGVwZW5kZW5jaWVzKWZvcih2YXIgbyBpbiB0LmRlcGVuZGVuY2llcylpZih2b2lkIDAhPT1lW29dKXt2YXIgaT10LmRlcGVuZGVuY2llc1tvXTtpZigic3RyaW5nIj09dHlwZW9mIGkpe2lmKHZvaWQgMD09PWVbaV0mJihuPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfREVQRU5ERU5DWV9LRVkse2tleTpvLG1pc3Npbmc6aX0sIiIsIiIsbnVsbCxlLHQpLnByZWZpeFdpdGgobnVsbCxvKS5wcmVmaXhXaXRoKG51bGwsImRlcGVuZGVuY2llcyIpLHRoaXMuaGFuZGxlRXJyb3IobikpKXJldHVybiBufWVsc2UgaWYoQXJyYXkuaXNBcnJheShpKSlmb3IodmFyIGE9MDthPGkubGVuZ3RoO2ErKyl7dmFyIHM9aVthXTtpZih2b2lkIDA9PT1lW3NdJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLHtrZXk6byxtaXNzaW5nOnN9LCIiLCIvIithLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbykucHJlZml4V2l0aChudWxsLCJkZXBlbmRlbmNpZXMiKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlLGksW10sWyJkZXBlbmRlbmNpZXMiLG9dLHIpKXJldHVybiBufXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUNvbWJpbmF0aW9ucz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMudmFsaWRhdGVBbGxPZihlLHQscil8fHRoaXMudmFsaWRhdGVBbnlPZihlLHQscil8fHRoaXMudmFsaWRhdGVPbmVPZihlLHQscil8fHRoaXMudmFsaWRhdGVOb3QoZSx0LHIpfHxudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFsbE9mPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10LmFsbE9mKXJldHVybiBudWxsO2Zvcih2YXIgbixvPTA7bzx0LmFsbE9mLmxlbmd0aDtvKyspe3ZhciBpPXQuYWxsT2Zbb107aWYobj10aGlzLnZhbGlkYXRlQWxsKGUsaSxbXSxbImFsbE9mIixvXSxyKSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBbnlPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5hbnlPZilyZXR1cm4gbnVsbDt2YXIgbixvLGk9W10sYT10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMpO2Zvcih2YXIgcz0hMCx1PTA7dTx0LmFueU9mLmxlbmd0aDt1Kyspe3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30pO3ZhciBjPXQuYW55T2ZbdV0sbD10aGlzLmVycm9ycy5sZW5ndGgsZj10aGlzLnZhbGlkYXRlQWxsKGUsYyxbXSxbImFueU9mIix1XSxyKTtpZihudWxsPT09ZiYmbD09PXRoaXMuZXJyb3JzLmxlbmd0aCl7aWYodGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxhKSx0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpe2Zvcih2YXIgZCBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocylvW2RdPSEwLGRlbGV0ZSBuW2RdO2Zvcih2YXIgcCBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKW9bcF18fChuW3BdPSEwKTtzPSExO2NvbnRpbnVlfXJldHVybiBudWxsfWYmJmkucHVzaChmLnByZWZpeFdpdGgobnVsbCwiIit1KS5wcmVmaXhXaXRoKG51bGwsImFueU9mIikpfXJldHVybiB0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPW4sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9bykscz8oaT1pLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShhKSksdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxhKSx0aGlzLmNyZWF0ZUVycm9yKHYuQU5ZX09GX01JU1NJTkcse30sIiIsIi9hbnlPZiIsaSxlLHQpKTp2b2lkIDB9LGgucHJvdG90eXBlLnZhbGlkYXRlT25lT2Y9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQub25lT2YpcmV0dXJuIG51bGw7dmFyIG4sbyxpPW51bGwsYT1bXSxzPXRoaXMuZXJyb3JzLmxlbmd0aDt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJihuPXRoaXMudW5rbm93blByb3BlcnR5UGF0aHMsbz10aGlzLmtub3duUHJvcGVydHlQYXRocyk7Zm9yKHZhciB1PTA7dTx0Lm9uZU9mLmxlbmd0aDt1Kyspe3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30pO3ZhciBjPXQub25lT2ZbdV0sbD10aGlzLmVycm9ycy5sZW5ndGgsZj10aGlzLnZhbGlkYXRlQWxsKGUsYyxbXSxbIm9uZU9mIix1XSxyKTtpZihudWxsPT09ZiYmbD09PXRoaXMuZXJyb3JzLmxlbmd0aCl7aWYobnVsbCE9PWkpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAscyksdGhpcy5jcmVhdGVFcnJvcih2Lk9ORV9PRl9NVUxUSVBMRSx7aW5kZXgxOmksaW5kZXgyOnV9LCIiLCIvb25lT2YiLG51bGwsZSx0KTtpZihpPXUsdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKXtmb3IodmFyIGQgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpb1tkXT0hMCxkZWxldGUgbltkXTtmb3IodmFyIHAgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocylvW3BdfHwobltwXT0hMCl9fWVsc2UgZiYmYS5wdXNoKGYpfXJldHVybiB0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPW4sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9byksbnVsbD09PWk/KGE9YS5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2UocykpLHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAscyksdGhpcy5jcmVhdGVFcnJvcih2Lk9ORV9PRl9NSVNTSU5HLHt9LCIiLCIvb25lT2YiLGEsZSx0KSk6KHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAscyksbnVsbCl9LGgucHJvdG90eXBlLnZhbGlkYXRlTm90PWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10Lm5vdClyZXR1cm4gbnVsbDt2YXIgbixvLGk9dGhpcy5lcnJvcnMubGVuZ3RoO3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKG49dGhpcy51bmtub3duUHJvcGVydHlQYXRocyxvPXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzLHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30pO3ZhciBhPXRoaXMudmFsaWRhdGVBbGwoZSx0Lm5vdCxudWxsLG51bGwscikscz10aGlzLmVycm9ycy5zbGljZShpKTtyZXR1cm4gdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxpKSx0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPW4sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9byksbnVsbD09PWEmJjA9PT1zLmxlbmd0aD90aGlzLmNyZWF0ZUVycm9yKHYuTk9UX1BBU1NFRCx7fSwiIiwiL25vdCIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlSHlwZXJtZWRpYT1mdW5jdGlvbihlLHQsbil7aWYoIXQubGlua3MpcmV0dXJuIG51bGw7Zm9yKHZhciBvLGk9MDtpPHQubGlua3MubGVuZ3RoO2krKyl7dmFyIGE9dC5saW5rc1tpXTtpZigiZGVzY3JpYmVkYnkiPT09YS5yZWwpe2Zvcih2YXIgcz1uZXcgcihhLmhyZWYpLHU9ITAsYz0wO2M8cy52YXJOYW1lcy5sZW5ndGg7YysrKWlmKCEocy52YXJOYW1lc1tjXWluIGUpKXt1PSExO2JyZWFrfWlmKHUpe3ZhciBsPXMuZmlsbEZyb21PYmplY3QoZSksZj17JHJlZjpsfTtpZihvPXRoaXMudmFsaWRhdGVBbGwoZSxmLFtdLFsibGlua3MiLGldLG4pKXJldHVybiBvfX19fTt2YXIgdj17SU5WQUxJRF9UWVBFOjAsRU5VTV9NSVNNQVRDSDoxLEFOWV9PRl9NSVNTSU5HOjEwLE9ORV9PRl9NSVNTSU5HOjExLE9ORV9PRl9NVUxUSVBMRToxMixOT1RfUEFTU0VEOjEzLE5VTUJFUl9NVUxUSVBMRV9PRjoxMDAsTlVNQkVSX01JTklNVU06MTAxLE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRToxMDIsTlVNQkVSX01BWElNVU06MTAzLE5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRToxMDQsTlVNQkVSX05PVF9BX05VTUJFUjoxMDUsU1RSSU5HX0xFTkdUSF9TSE9SVDoyMDAsU1RSSU5HX0xFTkdUSF9MT05HOjIwMSxTVFJJTkdfUEFUVEVSTjoyMDIsT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTTozMDAsT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTozMDEsT0JKRUNUX1JFUVVJUkVEOjMwMixPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOjMwMyxPQkpFQ1RfREVQRU5ERU5DWV9LRVk6MzA0LEFSUkFZX0xFTkdUSF9TSE9SVDo0MDAsQVJSQVlfTEVOR1RIX0xPTkc6NDAxLEFSUkFZX1VOSVFVRTo0MDIsQVJSQVlfQURESVRJT05BTF9JVEVNUzo0MDMsRk9STUFUX0NVU1RPTTo1MDAsS0VZV09SRF9DVVNUT006NTAxLENJUkNVTEFSX1JFRkVSRU5DRTo2MDAsVU5LTk9XTl9QUk9QRVJUWToxZTN9LF89e307Zm9yKHZhciBiIGluIHYpX1t2W2JdXT1iO3ZhciBnPXtJTlZBTElEX1RZUEU6IkludmFsaWQgdHlwZToge3R5cGV9IChleHBlY3RlZCB7ZXhwZWN0ZWR9KSIsRU5VTV9NSVNNQVRDSDoiTm8gZW51bSBtYXRjaCBmb3I6IHt2YWx1ZX0iLEFOWV9PRl9NSVNTSU5HOidEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gImFueU9mIicsT05FX09GX01JU1NJTkc6J0RhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSAib25lT2YiJyxPTkVfT0ZfTVVMVElQTEU6J0RhdGEgaXMgdmFsaWQgYWdhaW5zdCBtb3JlIHRoYW4gb25lIHNjaGVtYSBmcm9tICJvbmVPZiI6IGluZGljZXMge2luZGV4MX0gYW5kIHtpbmRleDJ9JyxOT1RfUEFTU0VEOidEYXRhIG1hdGNoZXMgc2NoZW1hIGZyb20gIm5vdCInLE5VTUJFUl9NVUxUSVBMRV9PRjoiVmFsdWUge3ZhbHVlfSBpcyBub3QgYSBtdWx0aXBsZSBvZiB7bXVsdGlwbGVPZn0iLE5VTUJFUl9NSU5JTVVNOiJWYWx1ZSB7dmFsdWV9IGlzIGxlc3MgdGhhbiBtaW5pbXVtIHttaW5pbXVtfSIsTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtaW5pbXVtIHttaW5pbXVtfSIsTlVNQkVSX01BWElNVU06IlZhbHVlIHt2YWx1ZX0gaXMgZ3JlYXRlciB0aGFuIG1heGltdW0ge21heGltdW19IixOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6IlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1heGltdW0ge21heGltdW19IixOVU1CRVJfTk9UX0FfTlVNQkVSOiJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIHZhbGlkIG51bWJlciIsU1RSSU5HX0xFTkdUSF9TSE9SVDoiU3RyaW5nIGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0gY2hhcnMpLCBtaW5pbXVtIHttaW5pbXVtfSIsU1RSSU5HX0xFTkdUSF9MT05HOiJTdHJpbmcgaXMgdG9vIGxvbmcgKHtsZW5ndGh9IGNoYXJzKSwgbWF4aW11bSB7bWF4aW11bX0iLFNUUklOR19QQVRURVJOOiJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggcGF0dGVybjoge3BhdHRlcm59IixPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiJUb28gZmV3IHByb3BlcnRpZXMgZGVmaW5lZCAoe3Byb3BlcnR5Q291bnR9KSwgbWluaW11bSB7bWluaW11bX0iLE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06IlRvbyBtYW55IHByb3BlcnRpZXMgZGVmaW5lZCAoe3Byb3BlcnR5Q291bnR9KSwgbWF4aW11bSB7bWF4aW11bX0iLE9CSkVDVF9SRVFVSVJFRDoiTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eToge2tleX0iLE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IkFkZGl0aW9uYWwgcHJvcGVydGllcyBub3QgYWxsb3dlZCIsT0JKRUNUX0RFUEVOREVOQ1lfS0VZOiJEZXBlbmRlbmN5IGZhaWxlZCAtIGtleSBtdXN0IGV4aXN0OiB7bWlzc2luZ30gKGR1ZSB0byBrZXk6IHtrZXl9KSIsQVJSQVlfTEVOR1RIX1NIT1JUOiJBcnJheSBpcyB0b28gc2hvcnQgKHtsZW5ndGh9KSwgbWluaW11bSB7bWluaW11bX0iLEFSUkFZX0xFTkdUSF9MT05HOiJBcnJheSBpcyB0b28gbG9uZyAoe2xlbmd0aH0pLCBtYXhpbXVtIHttYXhpbXVtfSIsQVJSQVlfVU5JUVVFOiJBcnJheSBpdGVtcyBhcmUgbm90IHVuaXF1ZSAoaW5kaWNlcyB7bWF0Y2gxfSBhbmQge21hdGNoMn0pIixBUlJBWV9BRERJVElPTkFMX0lURU1TOiJBZGRpdGlvbmFsIGl0ZW1zIG5vdCBhbGxvd2VkIixGT1JNQVRfQ1VTVE9NOiJGb3JtYXQgdmFsaWRhdGlvbiBmYWlsZWQgKHttZXNzYWdlfSkiLEtFWVdPUkRfQ1VTVE9NOiJLZXl3b3JkIGZhaWxlZDoge2tleX0gKHttZXNzYWdlfSkiLENJUkNVTEFSX1JFRkVSRU5DRToiQ2lyY3VsYXIgJHJlZnM6IHt1cmxzfSIsVU5LTk9XTl9QUk9QRVJUWToiVW5rbm93biBwcm9wZXJ0eSAobm90IGluIHNjaGVtYSkifTtjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSksYy5wcm90b3R5cGUuY29uc3RydWN0b3I9YyxjLnByb3RvdHlwZS5uYW1lPSJWYWxpZGF0aW9uRXJyb3IiLGMucHJvdG90eXBlLnByZWZpeFdpdGg9ZnVuY3Rpb24oZSx0KXtpZihudWxsIT09ZSYmKGU9ZS5yZXBsYWNlKC9+L2csIn4wIikucmVwbGFjZSgvXC8vZywifjEiKSx0aGlzLmRhdGFQYXRoPSIvIitlK3RoaXMuZGF0YVBhdGgpLG51bGwhPT10JiYodD10LnJlcGxhY2UoL34vZywifjAiKS5yZXBsYWNlKC9cLy9nLCJ+MSIpLHRoaXMuc2NoZW1hUGF0aD0iLyIrdCt0aGlzLnNjaGVtYVBhdGgpLG51bGwhPT10aGlzLnN1YkVycm9ycylmb3IodmFyIHI9MDtyPHRoaXMuc3ViRXJyb3JzLmxlbmd0aDtyKyspdGhpcy5zdWJFcnJvcnNbcl0ucHJlZml4V2l0aChlLHQpO3JldHVybiB0aGlzfTt2YXIgRT17fSxqPWYoKTtyZXR1cm4gai5hZGRMYW5ndWFnZSgiZW4tZ2IiLGcpLGoudHY0PWosan0pfSx7fV0sMTAwOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHIuTWVzc2FnZUZhY3Rvcnk9dm9pZCAwO3ZhciBvPWUoIi4vbWVzc2FnZS1mYWN0b3J5L01lc3NhZ2VGYWN0b3J5IiksaT1uKG8pO3IuTWVzc2FnZUZhY3Rvcnk9aVsiZGVmYXVsdCJdfSx7Ii4vbWVzc2FnZS1mYWN0b3J5L01lc3NhZ2VGYWN0b3J5IjoxMDN9XSwxMDE6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6eyJkZWZhdWx0IjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSksci5NZXNzYWdlVHlwZT1yLk1lc3NhZ2U9dm9pZCAwO3ZhciBvPWUoImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLGk9bihvKSxhPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpLHM9bihhKSx1PWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpLGM9bih1KSxsPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiksZj1uKGwpLGQ9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIikscD1uKGQpLGg9ZSgiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzIikseT1uKGgpLG09ci5NZXNzYWdlPWZ1bmN0aW9uKGUpewpmdW5jdGlvbiB0KGUscixuLG8sYSl7KDAsc1siZGVmYXVsdCJdKSh0aGlzLHQpO3ZhciB1PSgwLGZbImRlZmF1bHQiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGlbImRlZmF1bHQiXSkodCkpLmNhbGwodGhpcykpO3JldHVybiB1LmlkPWUsdS5mcm9tPXIsdS50bz1uLHUudHlwZT1vLHUuYm9keT1hLHV9cmV0dXJuKDAscFsiZGVmYXVsdCJdKSh0LGUpLCgwLGNbImRlZmF1bHQiXSkodCxbe2tleToiYXNzZXJ0SWRlbnRpdHkiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoIWV8fCF0KXRocm93IG5ldyBFcnJvcigibWVzc2FnZSwgdG9rZW4gdG8gYmUgcmVtb3ZlZCwgYW5kIGFzc2VydGVkSWRlbnRpdHkgbXVzdCBiZSBwcm92aWRlZCIpO3ZhciByPXRoaXMuYm9keTtyZXR1cm4gci5pZFRva2VuPW51bGwsci5hc3NlcnRlZElkZW50aXR5PXQsdGhpcy5ib2R5PXIsdGhpc319LHtrZXk6ImFkZElkVG9rZW4iLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcigibWVzc2FnZSwgdG9rZW4gdG8gYmUgYWRkZWQsIG11c3QgYmUgcHJvdmlkZWQiKTt2YXIgdD10aGlzLmJvZHk7cmV0dXJuIHQuaWRUb2tlbj1lLHRoaXMuYm9keT10LHRoaXN9fSx7a2V5OiJhZGRBY2Nlc3NUb2tlbiIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKCJtZXNzYWdlLCB0b2tlbiB0byBiZSBhZGRlZCwgbXVzdCBiZSBwcm92aWRlZCIpO3ZhciB0PXRoaXMuYm9keTtyZXR1cm4gdC5hY2Nlc3NUb2tlbj1lLHRoaXMuYm9keT10LHRoaXN9fV0pLHR9KHlbImRlZmF1bHQiXSk7ci5NZXNzYWdlVHlwZT17Q1JFQVRFOiJjcmVhdGUiLFJFQUQ6InJlYWQiLFVQREFURToidXBkYXRlIixERUxFVEU6ImRlbGV0ZSIsU1VCU0NSSUJFOiJzdWJzY3JpYmUiLFVOU1VCU0NSSUJFOiJ1bnN1YnNjcmliZSIsUkVTUE9OU0U6InJlc3BvbnNlIixGT1JXQVJEOiJmb3J3YXJkIixFWEVDVVRFOiJleGVjdXRlIn07clsiZGVmYXVsdCJdPW19LHsiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzIjoxMDQsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6NSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxMSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjoxMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjEzfV0sMTAyOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19ZnVuY3Rpb24gbyhlKXt2YXIgdD0oMCx1WyJkZWZhdWx0Il0pKGUpLnJlZHVjZShmdW5jdGlvbih0LHIpe3JldHVybiB0W2Vbcl1dPXIsdH0se30pO3JldHVybigwLGFbImRlZmF1bHQiXSkoKDAsdVsiZGVmYXVsdCJdKShlKS5yZWR1Y2UoZnVuY3Rpb24odCxyKXtyZXR1cm4gdFtyXT1lW3JdLHR9LGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfSkpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxyLlVQREFURV9PUEVSQVRJT049ci5BVFRSSUJVVEVfVFlQRT1yLlJFQVNPTl9QSFJBU0U9ci5SRVNQT05TRV9DT0RFPXIuRXhlY3V0ZU1lc3NhZ2VCb2R5PXIuUmVzcG9uc2VNZXNzYWdlQm9keT1yLkZvcndhcmRNZXNzYWdlQm9keT1yLlVwZGF0ZU1lc3NhZ2VCb2R5PXIuRGVsZXRlTWVzc2FnZUJvZHk9ci5SZWFkTWVzc2FnZUJvZHk9ci5DcmVhdGVNZXNzYWdlQm9keT1yLk1lc3NhZ2VCb2R5PXZvaWQgMDt2YXIgaT1lKCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2ZyZWV6ZSIpLGE9bihpKSxzPWUoImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cyIpLHU9bihzKSxjPWUoImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiIpLGw9bihjKSxmPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpLGQ9bihmKSxwPWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpLGg9bihwKSx5PWUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiksbT1uKHkpLHY9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIiksXz1uKHYpO3IuRW51bT1vO3ZhciBiPWUoIi4uL3JlVEhJTktPYmplY3QvUmV0aGlua09iamVjdC5qcyIpLGc9bihiKSxFPXIuTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGkpeygwLGRbImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgYT0oMCxtWyJkZWZhdWx0Il0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsWyJkZWZhdWx0Il0pKHQpKS5jYWxsKHRoaXMpKTtyZXR1cm4gYS5pZFRva2VuPWUsYS5hY2Nlc3NUb2tlbj1yLGEucmVzb3VyY2U9bixhLnNjaGVtYT1vLGEuYXNzZXJ0ZWRJZGVudGl0eT1pLGF9cmV0dXJuKDAsX1siZGVmYXVsdCJdKSh0LGUpLCgwLGhbImRlZmF1bHQiXSkodCxbe2tleToiYWRkVmlhIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoInZpYSBVUkwgdG8gYmUgYWRkZWQsIG11c3QgYmUgcHJvdmlkZWQiKTtyZXR1cm4gdGhpcy52aWE9ZSx0aGlzfX1dKSx0fShnWyJkZWZhdWx0Il0pLGo9KHIuQ3JlYXRlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzKXtpZigoMCxkWyJkZWZhdWx0Il0pKHRoaXMsdCksIWUpdGhyb3cgbmV3IEVycm9yKCJUaGUgdmFsdWUgcGFyYW1ldGVyIGlzIG51bGwiKTt2YXIgdT0oMCxtWyJkZWZhdWx0Il0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsWyJkZWZhdWx0Il0pKHQpKS5jYWxsKHRoaXMsbixvLGksYSxzLGEscykpO3JldHVybiB1LnZhbHVlPWUsciYmKHUucG9saWN5PXIpLHV9cmV0dXJuKDAsX1siZGVmYXVsdCJdKSh0LGUpLHR9KEUpLHIuUmVhZE1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEscyx1KXsoMCxkWyJkZWZhdWx0Il0pKHRoaXMsdCk7dmFyIGM9KDAsbVsiZGVmYXVsdCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFsiZGVmYXVsdCJdKSh0KSkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiBhJiYoYy5hdHRyaWJ1dGU9YSkscyYmKGMuY3JpdGVyaWFTeW50YXg9cyksdSYmKGMuY3JpdGVyaWE9dSksY31yZXR1cm4oMCxfWyJkZWZhdWx0Il0pKHQsZSksdH0oRSksci5EZWxldGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhKXtpZigoMCxkWyJkZWZhdWx0Il0pKHRoaXMsdCksbiBpbnN0YW5jZW9mIEFycmF5KXt2YXIgcz0oMCxtWyJkZWZhdWx0Il0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsWyJkZWZhdWx0Il0pKHQpKS5jYWxsKHRoaXMsZSxyLG51bGwsbyxpKSk7cy5jaGlsZHJlblJlc291cmNlcz1ufWVsc2UgdmFyIHM9KDAsbVsiZGVmYXVsdCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFsiZGVmYXVsdCJdKSh0KSkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiBhJiYocy5hdHRyaWJ1dGU9YSksKDAsbVsiZGVmYXVsdCJdKShzKX1yZXR1cm4oMCxfWyJkZWZhdWx0Il0pKHQsZSksdH0oRSksci5VcGRhdGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpeygwLGRbImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgdT0oMCxtWyJkZWZhdWx0Il0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsWyJkZWZhdWx0Il0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHUuYXR0cmlidXRlPWEsdS52YWx1ZT1zLHV9cmV0dXJuKDAsX1siZGVmYXVsdCJdKSh0LGUpLCgwLGhbImRlZmF1bHQiXSkodCxbe2tleToiYWRkQXR0cmlidXRlVHlwZSIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSYmKHRoaXMuYXR0cmlidXRlVHlwZT1lKX19LHtrZXk6ImFkZE9wZXJhdGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSYmKHRoaXMub3BlcmF0aW9uPWUpfX1dKSx0fShFKSxyLkZvcndhcmRNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhKXsoMCxkWyJkZWZhdWx0Il0pKHRoaXMsdCk7dmFyIHM9KDAsbVsiZGVmYXVsdCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFsiZGVmYXVsdCJdKSh0KSkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiBzLm1lc3NhZ2U9YSxzfXJldHVybigwLF9bImRlZmF1bHQiXSkodCxlKSx0fShFKSxyLlJlc3BvbnNlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGkpeygwLGRbImRlZmF1bHQiXSkodGhpcyx0KTt2YXIgYT0oMCxtWyJkZWZhdWx0Il0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsWyJkZWZhdWx0Il0pKHQpKS5jYWxsKHRoaXMsZSxyLG4pKTtyZXR1cm4gbyYmKGEuY29kZT1vLGEuZGVzY3JpcHRpb249altvXSksaSYmKGEudmFsdWU9aSksYX1yZXR1cm4oMCxfWyJkZWZhdWx0Il0pKHQsZSksdH0oRSksci5FeGVjdXRlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzKXsoMCxkWyJkZWZhdWx0Il0pKHRoaXMsdCk7dmFyIHU9KDAsbVsiZGVmYXVsdCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFsiZGVmYXVsdCJdKSh0KSkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiB1Lm1ldGhvZD1hLHMmJihzIGluc3RhbmNlb2YgQXJyYXk/dS5wYXJhbXM9czp1LnBhcmFtcz1bc10pLHV9cmV0dXJuKDAsX1siZGVmYXVsdCJdKSh0LGUpLHR9KEUpLHIuUkVTUE9OU0VfQ09ERT1vKHsxMDA6IjEwMCIsMTAxOiIxMDEiLDIwMDoiMjAwIiwyMDE6IjIwMSIsMjAyOiIyMDIiLDIwMzoiMjAzIiwyMDQ6IjIwNCIsMjA1OiIyMDUiLDIwNjoiMjA2IiwzMDA6IjMwMCIsMzAxOiIzMDEiLDMwMjoiMzAyIiwzMDM6IjMwMyIsMzA0OiIzMDQiLDMwNToiMzA1IiwzMDc6IjMwNyIsNDAwOiI0MDAiLDQwMToiNDAxIiw0MDI6IjQwMiIsNDAzOiI0MDMiLDQwNDoiNDA0Iiw0MDU6IjQwNSIsNDA2OiI0MDYiLDQwNzoiNDA3Iiw0MDg6IjQwOCIsNDA5OiI0MDkiLDQxMDoiNDEwIiw0MTE6IjQxMSIsNDEyOiI0MTIiLDQxMzoiNDEzIiw0MTQ6IjQxNCIsNDE1OiI0MTUiLDQxNjoiNDE2Iiw0MTc6IjQxNyIsNDI2OiI0MjYiLDUwMDoiNTAwIiw1MDE6IjUwMSIsNTAyOiI1MDIiLDUwMzoiNTAzIiw1MDQ6IjUwNCIsNTA1OiI1MDUifSksci5SRUFTT05fUEhSQVNFPW8oezEwMDoiQ29udGludWUiLDEwMToiU3dpdGNoaW5nIFByb3RvY29scyIsMjAwOiJPSyIsMjAxOiJDcmVhdGVkIiwyMDI6IkFjY2VwdGVkIiwyMDM6Ik5vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uIiwyMDQ6Ik5vIENvbnRlbnQiLDIwNToiUmVzZXQgQ29udGVudCIsMjA2OiJQYXJ0aWFsIENvbnRlbnQiLDMwMDoiTXVsdGlwbGUgQ2hvaWNlcyIsMzAxOiJNb3ZlZCBQZXJtYW5lbnRseSIsMzAyOiJGb3VuZCIsMzAzOiJTZWUgT3RoZXIiLDMwNDoiTm90IE1vZGlmaWVkIiwzMDU6IlVzZSBQcm94eSIsMzA3OiJUZW1wb3JhcnkgUmVkaXJlY3QiLDQwMDoiQmFkIFJlcXVlc3QiLDQwMToiVW5hdXRob3JpemVkIiw0MDI6IlBheW1lbnQgUmVxdWlyZWQiLDQwMzoiRm9yYmlkZGVuIiw0MDQ6Ik5vdCBGb3VuZCIsNDA1OiJNZXRob2QgTm90IEFsbG93ZWQiLDQwNjoiTm90IEFjY2VwdGFibGUiLDQwNzoiUHJveHkgQXV0aGVudGljYXRpb24gUmVxdWlyZWQiLDQwODoiUmVxdWVzdCBUaW1lb3V0Iiw0MDk6IkNvbmZsaWN0Iiw0MTA6IkdvbmUiLDQxMToiTGVuZ3RoIFJlcXVpcmVkIiw0MTI6IlByZWNvbmRpdGlvbiBGYWlsZWQiLDQxMzoiUGF5bG9hZCBUb28gTGFyZ2UiLDQxNDoiUmVxdWVzdC1VUkkgVG9vIExvbmciLDQxNToiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZSIsNDE2OiJSYW5nZSBOb3QgU2F0aXNmaWFibGUiLDQxNzoiRXhwZWN0YXRpb24gRmFpbGVkIiw0MjY6IlVwZ3JhZGUgUmVxdWlyZWQiLDUwMDoiSW50ZXJuYWwgU2VydmVyIEVycm9yIiw1MDE6Ik5vdCBJbXBsZW1lbnRlZCIsNTAyOiJCYWQgR2F0ZXdheSIsNTAzOiJTZXJ2aWNlIFVuYXZhaWxhYmxlIiw1MDQ6IkdhdGV3YXkgVGltZS1vdXQiLDUwNToiSFRUUCBWZXJzaW9uIE5vdCBTdXBwb3J0ZWQifSkpO3IuQVRUUklCVVRFX1RZUEU9byh7T0JKRUNUOiJPQkpFQ1QiLEFSUkFZOiJBUlJBWSJ9KSxyLlVQREFURV9PUEVSQVRJT049byh7QUREOiJBREQiLFJFTU9WRToiUkVNT1ZFIn0pO3JbImRlZmF1bHQiXT1FfSx7Ii4uL3JlVEhJTktPYmplY3QvUmV0aGlua09iamVjdC5qcyI6MTA0LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2ZyZWV6ZSI6NCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo1LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMiOjYsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIjoxM31dLDEwMzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ImRlZmF1bHQiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxyLklkR2VuZXJhdG9yPXZvaWQgMDt2YXIgbz1lKCJiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yIiksaT1uKG8pLGE9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIikscz1uKGEpLHU9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIiksYz1uKHUpLGw9ZSgiLi9NZXNzYWdlLmpzIiksZj1uKGwpLGQ9ZSgiLi9NZXNzYWdlQm9keS5qcyIpLHA9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7KDAsc1siZGVmYXVsdCJdKSh0aGlzLGUpLHRoaXMubXlHZW5lcmF0b3I9KG5ldyBoKS5pZE1ha2VyKCl9cmV0dXJuKDAsY1siZGVmYXVsdCJdKShlLFt7a2V5OiJjcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIHRvLCBhbmQgdmFsdWUgb2Ygb2JqZWN0IHRvIGJlIGNyZWF0ZWQgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLkNyZWF0ZU1lc3NhZ2VCb2R5KHIsbiwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSksYT1uZXcgZlsiZGVmYXVsdCJdKG8sZSx0LGwuTWVzc2FnZVR5cGUuQ1JFQVRFLGkpO3JldHVybiBhfX0se2tleToiY3JlYXRlRm9yd2FyZE1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoImZyb20sIHRvLCBhbmQgbWVzc2FnZSB0byBmb3J3YXJkIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIG49dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsbz1uZXcgZC5Gb3J3YXJkTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksciksaT1uZXcgZlsiZGVmYXVsdCJdKG4sZSx0LGwuTWVzc2FnZVR5cGUuRk9SV0FSRCxvKTtyZXR1cm4gaX19LHtrZXk6ImNyZWF0ZURlbGV0ZU1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXQpdGhyb3cgbmV3IEVycm9yKCJmcm9tIGFuZCB0byBwYXJhbWV0ZXJzIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIG89dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgZC5EZWxldGVNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLG4sKHZvaWQgMCksKHZvaWQgMCkpLGE9bmV3IGZbImRlZmF1bHQiXShvLGUsdCxsLk1lc3NhZ2VUeXBlLkRFTEVURSxpKTtyZXR1cm4gYX19LHtrZXk6ImNyZWF0ZVVwZGF0ZU1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscixuLG8pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKCJmcm9tLCBhbmQgdG8gYW5kIHZhbHVlIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIGk9dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsYT1uZXcgZC5VcGRhdGVNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxuLCh2b2lkIDApLCh2b2lkIDApLG8scikscz1uZXcgZlsiZGVmYXVsdCJdKGksZSx0LGwuTWVzc2FnZVR5cGUuVVBEQVRFLGEpO3JldHVybiBzfX0se2tleToiY3JlYXRlUmVhZE1lc3NhZ2VSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcigiZnJvbSwgdG8gYW5kIHRoZSByZXNvdXJjZSB0byByZWFkIGZyb20gTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLlJlYWRNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLCh2b2lkIDApLCh2b2lkIDApLG4sKHZvaWQgMCksKHZvaWQgMCkpLGE9bmV3IGZbImRlZmF1bHQiXShvLGUsdCxsLk1lc3NhZ2VUeXBlLlJFQUQsaSk7cmV0dXJuIGF9fSx7a2V5OiJjcmVhdGVTdWJzY3JpYmVNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKCJmcm9tLCB0byBhbmQgdGhlIHJlc291cmNlIHRvIHN1YnNjcmliZSB0byBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBuPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLG89bmV3IGQuTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksciwodm9pZCAwKSwodm9pZCAwKSksaT1uZXcgZlsiZGVmYXVsdCJdKG4sZSx0LGwuTWVzc2FnZVR5cGUuU1VCU0NSSUJFLG8pO3JldHVybiBpfX0se2tleToiY3JlYXRlVW5zdWJzY3JpYmVNZXNzYWdlUmVxdWVzdCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKCJmcm9tLCB0byBhbmQgdGhlIHJlc291cmNlIHRvIHN1YnNjcmliZSB0byBNVVNUIGJlIHNwZWNpZmllZCIpO3ZhciBuPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLG89bmV3IGQuTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksciwodm9pZCAwKSwodm9pZCAwKSksaT1uZXcgZlsiZGVmYXVsdCJdKG4sZSx0LGwuTWVzc2FnZVR5cGUuVU5TVUJTQ1JJQkUsbyk7cmV0dXJuIGl9fSx7a2V5OiJjcmVhdGVFeGVjdXRlTWVzc2FnZVJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKCJmcm9tLCB0byBhbmQgdGhlIG1ldGhvZCB0byBleGVjdXRlIE1VU1QgYmUgc3BlY2lmaWVkIik7dmFyIG89dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgZC5FeGVjdXRlTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCkscixuKSxhPW5ldyBmWyJkZWZhdWx0Il0obyxlLHQsbC5NZXNzYWdlVHlwZS5FWEVDVVRFLGkpO3JldHVybiBhfX0se2tleToiY3JlYXRlTWVzc2FnZVJlc3BvbnNlIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighdCl0aHJvdyBuZXcgRXJyb3IoInJlc3BvbnNlIENvZGUgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbz1uZXcgZC5SZXNwb25zZU1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLHQscixuKTtyZXR1cm4gbmV3IGZbImRlZmF1bHQiXShlLmlkLGUudG8sZS5mcm9tLGwuTWVzc2FnZVR5cGUuUkVTUE9OU0Usbyl9fSx7a2V5OiJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdCl0aHJvdyBuZXcgRXJyb3IoIm1lc3NhZ2UgYW5kIHJlc3BvbnNlIGNvZGUgTVVTVCBiZSBzcGVjaWZpZWQiKTt2YXIgbj1lLmJvZHksbz1uLmlkVG9rZW4saT1uLmFjY2Vzc1Rva2VuLGE9bi5yZXNvdXJjZSxzPW5ldyBkLlJlc3BvbnNlTWVzc2FnZUJvZHkobyxpLGEsdCxyKSx1PXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlO3JldHVybiBuZXcgZlsiZGVmYXVsdCJdKHUsZS50byxlLmZyb20sbC5NZXNzYWdlVHlwZS5SRVNQT05TRSxzKX19XSksZX0oKSxoPXIuSWRHZW5lcmF0b3I9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7KDAsc1siZGVmYXVsdCJdKSh0aGlzLGUpfXJldHVybigwLGNbImRlZmF1bHQiXSkoZSxbe2tleToiaWRNYWtlciIsdmFsdWU6aVsiZGVmYXVsdCJdLm1hcmsoZnVuY3Rpb24gdCgpe3ZhciBlO3JldHVybiBpWyJkZWZhdWx0Il0ud3JhcChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDplPTE7Y2FzZSAxOmlmKCEoZTwxZTYpKXt0Lm5leHQ9NjticmVha31yZXR1cm4gdC5uZXh0PTQsZSsrO2Nhc2UgNDp0Lm5leHQ9MTticmVhaztjYXNlIDY6Y2FzZSJlbmQiOnJldHVybiB0LnN0b3AoKX19LHQsdGhpcyl9KX1dKSxlfSgpO3JbImRlZmF1bHQiXT1wfSx7Ii4vTWVzc2FnZS5qcyI6MTAxLCIuL01lc3NhZ2VCb2R5LmpzIjoxMDIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTEsImJhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3IiOjE1fV0sMTA0OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOnsiZGVmYXVsdCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHIuUmV0aGlua09iamVjdD12b2lkIDA7dmFyIG89ZSgiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5IiksaT1uKG8pLGE9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIikscz1uKGEpLHU9ZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIiksYz1uKHUpLGw9ZSgidHY0IiksZj1uKGwpLGQ9ci5SZXRoaW5rT2JqZWN0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeygwLHNbImRlZmF1bHQiXSkodGhpcyxlKX1yZXR1cm4oMCxjWyJkZWZhdWx0Il0pKGUsW3trZXk6InZhbGlkYXRlIix2YWx1ZTpmdW5jdGlvbihlKXtmWyJkZWZhdWx0Il0uYWRkU2NoZW1hKGUuaWQsZSk7dmFyIHQ9ZlsiZGVmYXVsdCJdLnZhbGlkYXRlTXVsdGlwbGUoSlNPTi5wYXJzZSgoMCxpWyJkZWZhdWx0Il0pKHRoaXMpKSxlKTtyZXR1cm4gdC5lcnJvcnMuZm9yRWFjaChmdW5jdGlvbihlKXtkZWxldGUgZS5zdGFja30pLCghdC52YWxpZHx8dC5taXNzaW5nLmxlbmd0aD4wKSYmKGNvbnNvbGUud2FybigiT2JqZWN0IHZhbGlkYXRpb24gIisodC52YWxpZD8ic3VjY2VlZGVkLCBidXQgc2NoZW1hIGNvbnRhaW5lZCByZWZlcmVuY2VzOiI6ImZhaWxlZDoiKSwoMCxpWyJkZWZhdWx0Il0pKHQsbnVsbCwyKSksY29uc29sZS5sb2coIk9iamVjdDoiLCgwLGlbImRlZmF1bHQiXSkodGhpcyxudWxsLDIpKSksdC52YWxpZH19XSksZX0oKTtyWyJkZWZhdWx0Il09ZH0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnkiOjEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTAsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTEsdHY0Ojk5fV19LHt9LFsxMDBdKSgxMDApfSk7CgoKfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pCgp9LHt9XSw0MjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCi8vIGltcG9ydCBNZXNzYWdlRmFjdG9yeSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvTWVzc2FnZUZhY3RvcnknOwoKLyoqCiAqIENsYXNzIHdpbGwgYXNrIHRvIHRoZSBtZXNzYWdlIG5vZGUgZm9yIGFkZHJlc3NlcwogKi8KdmFyIEFkZHJlc3NBbGxvY2F0aW9uID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICBfdXJsOiBVUkwKICBfYnVzOiBNaW5pQnVzCiAgKi8KCiAgLyoqCiAgICogQ3JlYXRlIGFuIEFkZHJlc3MgQWxsb2NhdGlvbgogICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICAgdXJsIC0gdXJsIGZyb20gd2hvIGlzIHNlbmRpbmcgdGhlIG1lc3NhZ2UKICAgKiBAcGFyYW0gIHtNaW5pQnVzfSAgICAgIGJ1cyAtIE1pbmlCdXMgdXNlZCBmb3IgYWRkcmVzcyBhbGxvY2F0aW9uCiAgICovCiAgZnVuY3Rpb24gQWRkcmVzc0FsbG9jYXRpb24odXJsLCBidXMsIHJlZ2lzdHJ5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBBZGRyZXNzQWxsb2NhdGlvbik7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAvLyBsZXQgbWVzc2FnZUZhY3RvcnkgPSBuZXcgTWVzc2FnZUZhY3RvcnkoKTsKICAgIC8vCiAgICAvLyBfdGhpcy5fbWVzc2FnZUZhY3RvcnkgPSBtZXNzYWdlRmFjdG9yeTsKICAgIF90aGlzLl91cmwgPSB1cmw7CiAgICBfdGhpcy5fYnVzID0gYnVzOwogICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7CiAgfQoKICAvKioKICAgKiBnZXQgdGhlIFVSTCB2YWx1ZQogICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIHVybCB2YWx1ZTsKICAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEFkZHJlc3NBbGxvY2F0aW9uLCBbewogICAga2V5OiAnY3JlYXRlJywKCgogICAgLyoqCiAgICAgKiBBc2sgZm9yIGNyZWF0aW9uIG9mIGEgbnVtYmVyIG9mIEh5cGVydHkgYWRkcmVzc2VzLCB0byB0aGUgZG9tYWluIG1lc3NhZ2Ugbm9kZS4KICAgICAqIEBwYXJhbSAge0RvbWFpbn0gZG9tYWluIC0gRG9tYWluIG9mIHRoZSBtZXNzYWdlIG5vZGUuCiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IG51bWJlciAtIE51bWJlciBvZiBhZGRyZXNzZXMgdG8gcmVxdWVzdAogICAgICogQHJldHVybnMge1Byb21pc2U8SHlwZXJ0eVVSTD59ICBBIGxpc3Qgb2YgSHlwZXJ0eVVSTCdzCiAgICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoZG9tYWluLCBudW1iZXIsIGluZm8sIHNjaGVtZSwgcmV1c2VVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBpZiAocmV1c2VVUkwpIHsKCiAgICAgICAgICBfdGhpcy5fcmVnaXN0cnkuY2hlY2tSZWdpc3RlcmVkVVJMcyhpbmZvKS50aGVuKGZ1bmN0aW9uICh1cmxzKSB7CgogICAgICAgICAgICBpZiAodXJscykgewogICAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gJyArIHNjaGVtZSArICddIC0gUmV1c2UgVVJMJyk7CiAgICAgICAgICAgICAgdmFyIHZhbHVlID0geyBuZXdBZGRyZXNzOiBmYWxzZSwgYWRkcmVzczogdXJscyB9OwogICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gcmV1c2VVUkxdIC0gT2JqZWN0ICcgKyByZXVzZVVSTCArICcgbm90IGZvdW5kJyk7CiAgICAgICAgICAgICAgcmVqZWN0KCdVUkwgTm90IEZvdW5kJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgIF90aGlzLl9yZWdpc3RyeS5jaGVja1JlZ2lzdGVyZWRVUkxzKGluZm8pLnRoZW4oZnVuY3Rpb24gKHVybHMpIHsKCiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBVUkwsIHRoZW4gcmV0dXJucyB0aGF0IFVSTCwgb3RoZXJ3aXNlIHJlcXVlc3QgYSBuZXcgVVJMCiAgICAgICAgICAgIGlmICh1cmxzKSB7CgogICAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gJyArIHNjaGVtZSArICddIC0gUmV1c2UgVVJMJyk7CiAgICAgICAgICAgICAgdmFyIHZhbHVlID0geyBuZXdBZGRyZXNzOiBmYWxzZSwgYWRkcmVzczogdXJscyB9OwogICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBVUkwgc2F2ZWQgcmVxdWVzdCBhIG5ldyBVUkwKICAgICAgICAgICAgICBfdGhpcy5fYWxsb2NhdGVOZXdBZGRyZXNzKGRvbWFpbiwgc2NoZW1lLCBudW1iZXIpLnRoZW4oZnVuY3Rpb24gKGFsbG9jYXRlZCkgewogICAgICAgICAgICAgICAgcmVzb2x2ZShhbGxvY2F0ZWQpOwogICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfYWxsb2NhdGVOZXdBZGRyZXNzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVOZXdBZGRyZXNzKGRvbWFpbiwgc2NoZW1lLCBudW1iZXIpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIG1zZyA9IHsKICAgICAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBfdGhpczIuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9hZGRyZXNzLWFsbG9jYXRpb24nLAogICAgICAgICAgYm9keTogeyB2YWx1ZTogeyBudW1iZXI6IG51bWJlciB9IH0KICAgICAgICB9OwoKICAgICAgICBpZiAoc2NoZW1lICE9PSAnaHlwZXJ0JykgbXNnLmJvZHkuc2NoZW1lID0gc2NoZW1lOwoKICAgICAgICBjb25zb2xlLmluZm8oJ1tBZGRyZXNzQWxsb2NhdGlvbiAtICcgKyBzY2hlbWUgKyAnXSAtIFJlcXVlc3QgbmV3IFVSTCcpOwoKICAgICAgICAvLyBUT0RPOiBjaGFuZ2UgdGhpcyByZXNwb25zZSBNZXNzYWdlIHVzaW5nIHRoZSBNZXNzYWdlRmFjdG9yeQogICAgICAgIF90aGlzMi5fYnVzLnBvc3RNZXNzYWdlKG1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHsgbmV3QWRkcmVzczogdHJ1ZSwgYWRkcmVzczogcmVwbHkuYm9keS52YWx1ZS5hbGxvY2F0ZWQgfTsKICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBTZW5kIGEgcmVxdWVzdCB0byB0aGUgZG9tYWluIG1lc3NhZ2Ugbm9kZSwgdG8gZGVhbGxvY2F0ZSBvbmUgb3IgbW9yZSBhZGRyZXNzZXMKICAgICogQHBhcmFtICB7RG9tYWlufSBkb21haW4gLSBEb21haW4gb2YgdGhlIG1lc3NhZ2Ugbm9kZS4KICAgICogQHBhcmFtICB7YWRkcmVzc2VzfSBhZGRyZXNzZXMgdG8gcmVxdWVzdCB0aGUgZGVhbGxvY2F0aW9uCiAgICAqIEByZXR1cm5zIHtQcm9taXNlfSAgdGhlIHJlc3BvbnNlIGJ5IHRoZSBtZXNzYWdlIG5vZGUKICAgICovCgogIH0sIHsKICAgIGtleTogJ2RlbGV0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZShkb21haW4sIGFkZHJlc3NlcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7CiAgICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvYWRkcmVzcy1hbGxvY2F0aW9uJywKICAgICAgICBib2R5OiB7IGNoaWxkcmVuUmVzb3VyY2VzOiBhZGRyZXNzZXMgfQogICAgICB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygncmVwbHknLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LmNvZGUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3VybCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3VybDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEFkZHJlc3NBbGxvY2F0aW9uOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBBZGRyZXNzQWxsb2NhdGlvbjsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjEyLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2fV0sNDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovKioKKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tCiogTWluaW1hbCBpbnRlcmZhY2UgYW5kIGltcGxlbWVudGF0aW9uIHRvIHNlbmQgYW5kIHJlY2VpdmUgbWVzc2FnZXMuIEl0IGNhbiBiZSByZXVzZWQgaW4gbWFueSB0eXBlIG9mIGNvbXBvbmVudHMuCiogQ29tcG9uZW50cyB0aGF0IG5lZWQgYSBtZXNzYWdlIHN5c3RlbSBzaG91bGQgcmVjZWl2ZSB0aGlzIGNsYXNzIGFzIGEgZGVwZW5kZW5jeSBvciBleHRlbmQgaXQuCiogRXh0ZW5zaW9ucyBzaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgcHJpdmF0ZSBtZXRob2RzOiBfb25Qb3N0TWVzc2FnZSBhbmQgX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lcgoqLwp2YXIgQnVzID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICBfbXNnSWQ6IG51bWJlcjsKICBfc3Vic2NyaXB0aW9uczogPHVybDogTXNnTGlzdGVuZXJbXT4KICAgX3Jlc3BvbnNlVGltZU91dDogbnVtYmVyCiAgX3Jlc3BvbnNlQ2FsbGJhY2tzOiA8dXJsK2lkOiAobXNnKSA9PiB2b2lkPgogICAqLwoKICBmdW5jdGlvbiBCdXMoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBCdXMpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICBfdGhpcy5fbXNnSWQgPSAwOwogICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTsKCiAgICBfdGhpcy5fcmVzcG9uc2VUaW1lT3V0ID0gNTAwMDsgLy9kZWZhdWx0IHRvIDNzCiAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3MgPSB7fTsKCiAgICBfdGhpcy5fcmVnaXN0ZXJFeHRlcm5hbExpc3RlbmVyKCk7CiAgfQoKICAvKioKICAqIFJlZ2lzdGVyIGxpc3RlbmVyIHRvIHJlY2VpdmUgbWVzc2FnZSB3aGVuICJtc2cudG8gPT09IHVybCIuCiAgKiBTcGVjaWFsIHVybCAiKiIgZm9yIGRlZmF1bHQgbGlzdGVuZXIgaXMgYWNjZXB0ZWQgdG8gaW50ZXJjZXB0IGFsbCBtZXNzYWdlcy4KICAqIEBwYXJhbSB7VVJMfSB1cmwgQWRkcmVzcyB0byBpbnRlcmNlcHQsIHRoYSBpcyBpbiB0aGUgbWVzc2FnZSAidG8iCiAgKiBAcGFyYW0ge0xpc3RlbmVyfSBsaXN0ZW5lciBsaXN0ZW5lcgogICogQHJldHVybiB7TXNnTGlzdGVuZXJ9IGluc3RhbmNlIG9mIE1zZ0xpc3RlbmVyCiAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEJ1cywgW3sKICAgIGtleTogJ2FkZExpc3RlbmVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRMaXN0ZW5lcih1cmwsIGxpc3RlbmVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaXRlbSA9IG5ldyBNc2dMaXN0ZW5lcihfdGhpcy5fc3Vic2NyaXB0aW9ucywgdXJsLCBsaXN0ZW5lcik7CiAgICAgIHZhciBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW3VybF07CiAgICAgIGlmICghaXRlbUxpc3QpIHsKICAgICAgICBpdGVtTGlzdCA9IFtdOwogICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW3VybF0gPSBpdGVtTGlzdDsKICAgICAgfQoKICAgICAgaXRlbUxpc3QucHVzaChpdGVtKTsKICAgICAgcmV0dXJuIGl0ZW07CiAgICB9CgogICAgLyoqCiAgICAgKiBNYW51YWxseSBhZGQgYSByZXNwb25zZSBsaXN0ZW5lci4gT25seSBvbmUgbGlzdGVuZXIgcGVyIG1lc3NhZ2UgSUQgc2hvdWxkIGV4aXN0LgogICAgICogQVRFTlRJT04sIHRoZXJlIGlzIG5vIHRpbWVvdXQgZm9yIHRoaXMgbGlzdGVuZXIuCiAgICAgKiBUaGUgbGlzdGVuZXIgc2hvdWxkIGJlIHJlbW92ZWQgd2l0aCBhIHJlbW92ZVJlc3BvbnNlTGlzdGVuZXIsIGZhaWxpbmcgdG8gZG8gdGhpcyB3aWxsIHJlc3VsdCBpbiBhIHVucmVsZWFzZWQgbWVtb3J5IHByb2JsZW0uCiAgICAgKiBAcGFyYW0ge1VSTH0gdXJsIE9yaWdpbiBhZGRyZXNzIG9mIHRoZSBtZXNzYWdlIHNlbnQsICJtc2cuZnJvbSIuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXNnSWQgTWVzc2FnZSBJRCB0aGF0IGlzIHJldHVybmVkIGZyb20gdGhlIHBvc3RNZXNzYWdlLgogICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzcG9uc2VMaXN0ZW5lciBDYWxsYmFjayBmdW5jdGlvbiBmb3IgdGhlIHJlc3BvbnNlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnYWRkUmVzcG9uc2VMaXN0ZW5lcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUmVzcG9uc2VMaXN0ZW5lcih1cmwsIG1zZ0lkLCByZXNwb25zZUxpc3RlbmVyKSB7CiAgICAgIHRoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3VybCArIG1zZ0lkXSA9IHJlc3BvbnNlTGlzdGVuZXI7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZW1vdmUgdGhlIHJlc3BvbnNlIGxpc3RlbmVyLgogICAgICogQHBhcmFtIHtVUkx9IHVybCBPcmlnaW4gYWRkcmVzcyBvZiB0aGUgbWVzc2FnZSBzZW50LCAibXNnLmZyb20iLgogICAgICogQHBhcmFtIHtudW1iZXJ9IG1zZ0lkICBNZXNzYWdlIElEIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB0aGUgcG9zdE1lc3NhZ2UKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZW1vdmVSZXNwb25zZUxpc3RlbmVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVSZXNwb25zZUxpc3RlbmVyKHVybCwgbXNnSWQpIHsKICAgICAgZGVsZXRlIHRoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3VybCArIG1zZ0lkXTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlbW92ZSBhbGwgZXhpc3RlbnQgbGlzdGVuZXJzIGZvciB0aGUgVVJMCiAgICAgKiBAcGFyYW0gIHtVUkx9IHVybCBBZGRyZXNzIHJlZ2lzdGVyZWQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZW1vdmVBbGxMaXN0ZW5lcnNPZicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzT2YodXJsKSB7CiAgICAgIGRlbGV0ZSB0aGlzLl9zdWJzY3JpcHRpb25zW3VybF07CiAgICB9CgogICAgLyoqCiAgICAgKiBIZWxwZXIgbWV0aG9kIHRvIGJpbmQgbGlzdGVuZXJzIChpbiBib3RoIGRpcmVjdGlvbnMpIGludG8gb3RoZXIgTWluaUJ1cyB0YXJnZXQuCiAgICAgKiBAcGFyYW0gIHtVUkx9IG91dFVybCBPdXRib3VuZCBVUkwsIHJlZ2lzdGVyIGxpc3RlbmVyIGZvciB1cmwgaW4gZGlyZWN0aW9uICJ0aGlzIC0+IHRhcmdldCIKICAgICAqIEBwYXJhbSAge1VSTH0gaW5VcmwgSW5ib3VuZCBVUkwsIHJlZ2lzdGVyIGxpc3RlbmVyIGZvciB1cmwgaW4gZGlyZWN0aW9uICJ0YXJnZXQgLT4gdGhpcyIKICAgICAqIEBwYXJhbSAge01pbmlCdXN9IHRhcmdldCBUaGUgb3RoZXIgdGFyZ2V0IE1pbmlCdXMKICAgICAqIEByZXR1cm4ge0JvdW5kfSBhbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgcHJvcGVydGllcyBbdGhpc0xpc3RlbmVyLCB0YXJnZXRMaXN0ZW5lcl0gYW5kIHRoZSB1bmJpbmQgbWV0aG9kLgogICAgICovCgogIH0sIHsKICAgIGtleTogJ2JpbmQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmQob3V0VXJsLCBpblVybCwgdGFyZ2V0KSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciB0aGlzTGlzdG4gPSBfdGhpcy5hZGRMaXN0ZW5lcihvdXRVcmwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICB0YXJnZXQucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgfSk7CgogICAgICB2YXIgdGFyZ2V0TGlzdG4gPSB0YXJnZXQuYWRkTGlzdGVuZXIoaW5VcmwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICBfdGhpcy5wb3N0TWVzc2FnZShtc2cpOwogICAgICB9KTsKCiAgICAgIHJldHVybiB7CiAgICAgICAgdGhpc0xpc3RlbmVyOiB0aGlzTGlzdG4sCiAgICAgICAgdGFyZ2V0TGlzdGVuZXI6IHRhcmdldExpc3RuLAogICAgICAgIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kKCkgewogICAgICAgICAgX3RoaXMyLnRoaXNMaXN0ZW5lci5yZW1vdmUoKTsKICAgICAgICAgIF90aGlzMi50YXJnZXRMaXN0ZW5lci5yZW1vdmUoKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CgogICAgLy9wdWJsaXNoIG9uIGRlZmF1bHQgbGlzdGVuZXJzCgogIH0sIHsKICAgIGtleTogJ19wdWJsaXNoT25EZWZhdWx0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfcHVibGlzaE9uRGVmYXVsdChtc2cpIHsKICAgICAgLy9pcyB0aGVyZSBhbnkgIioiIChkZWZhdWx0KSBsaXN0ZW5lcnM/CiAgICAgIHZhciBpdGVtTGlzdCA9IHRoaXMuX3N1YnNjcmlwdGlvbnNbJyonXTsKICAgICAgaWYgKGl0ZW1MaXN0KSB7CiAgICAgICAgdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpOwogICAgICB9CiAgICB9CgogICAgLy9wdWJsaXNoIG9uIGEgc3Vic2NyaXB0aW9uIGxpc3QuCgogIH0sIHsKICAgIGtleTogJ19wdWJsaXNoT24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZykgewogICAgICBpdGVtTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChzdWIpIHsKICAgICAgICBzdWIuX2NhbGxiYWNrKG1zZyk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19yZXNwb25zZUNhbGxiYWNrJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzcG9uc2VDYWxsYmFjayhpbk1zZywgcmVzcG9uc2VDYWxsYmFjaykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy9hdXRvbWF0aWMgbWFuYWdlbWVudCBvZiByZXNwb25zZSBoYW5kbGVycwogICAgICBpZiAocmVzcG9uc2VDYWxsYmFjaykgewogICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgcmVzcG9uc2VJZCA9IGluTXNnLmZyb20gKyBpbk1zZy5pZDsKICAgICAgICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXSA9IHJlc3BvbnNlQ2FsbGJhY2s7CgogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciByZXNwb25zZUZ1biA9IF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXTsKICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXTsKCiAgICAgICAgICAgIGlmIChyZXNwb25zZUZ1bikgewogICAgICAgICAgICAgIHZhciBlcnJvck1zZyA9IHsKICAgICAgICAgICAgICAgIGlkOiBpbk1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywKICAgICAgICAgICAgICAgIGJvZHk6IHsgY29kZTogNDA4LCBkZXNjOiAnUmVzcG9uc2UgdGltZW91dCEnLCB2YWx1ZTogaW5Nc2cgfQogICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgIHJlc3BvbnNlRnVuKGVycm9yTXNnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgX3RoaXMuX3Jlc3BvbnNlVGltZU91dCk7CiAgICAgICAgfSkoKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ19vblJlc3BvbnNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZXNwb25zZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmIChtc2cudHlwZSA9PT0gJ3Jlc3BvbnNlJykgewogICAgICAgIHZhciByZXNwb25zZUlkID0gbXNnLnRvICsgbXNnLmlkOwogICAgICAgIHZhciByZXNwb25zZUZ1biA9IF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXTsKCiAgICAgICAgLy9pZiBpdCdzIGEgcHJvdmlzaW9uYWwgcmVzcG9uc2UsIGRvbid0IGRlbGV0ZSByZXNwb25zZSBsaXN0ZW5lcgogICAgICAgIGlmIChtc2cuYm9keS5jb2RlID49IDIwMCkgewogICAgICAgICAgZGVsZXRlIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXTsKICAgICAgICB9CgogICAgICAgIGlmIChyZXNwb25zZUZ1bikgewogICAgICAgICAgcmVzcG9uc2VGdW4obXNnKTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vcmVjZWl2ZSBtZXNzYWdlcyBmcm9tIGV4dGVybmFsIGludGVyZmFjZQoKICB9LCB7CiAgICBrZXk6ICdfb25NZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25NZXNzYWdlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKCFfdGhpcy5fb25SZXNwb25zZShtc2cpKSB7CiAgICAgICAgdmFyIGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbbXNnLnRvXTsKICAgICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICAgIF90aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzLl9wdWJsaXNoT25EZWZhdWx0KG1zZyk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dlbklkJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2VuSWQoaW5Nc2cpIHsKICAgICAgLy9UT0RPOiBob3cgZG8gd2UgbWFuYWdlIG1lc3NhZ2UgSUQncz8gU2hvdWxkIGl0IGJlIGEgZ2xvYmFsIHJ1bnRpbWUgY291bnRlciwgb3IgcGVyIFVSTCBhZGRyZXNzPwogICAgICAvL0dsb2JhbCBjb3VudGVyIHdpbGwgbm90IHdvcmssIGJlY2F1c2UgdGhlcmUgd2lsbCBiZSBtdWx0aXBsZSBNaW5pQnVzIGluc3RhbmNlcyEKICAgICAgLy9QZXIgVVJMLCBjYW4gYmUgYSBsb3Qgb2YgZGF0YSB0byBtYWludGFpbiEKICAgICAgLy9NYXliZSBhIGNvdW50ZXIgcGVyIE1pbmlCdXMgaW5zdGFuY2UuIFRoaXMgaXMgdGhlIGFzc3VtZWQgc29sdXRpb24gZm9yIG5vdy4KICAgICAgaWYgKCFpbk1zZy5pZCB8fCBpbk1zZy5pZCA9PT0gMCkgewogICAgICAgIHRoaXMuX21zZ0lkKys7CiAgICAgICAgaW5Nc2cuaWQgPSB0aGlzLl9tc2dJZDsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgKiBTZW5kIG1lc3NhZ2VzIHRvIGxvY2FsIGxpc3RlbmVycywgb3IgaWYgbm90IGV4aXN0cyB0byBleHRlcm5hbCBsaXN0ZW5lcnMuCiAgICAqIEl0J3MgaGFzIGFuIG9wdGlvbmFsIG1lY2hhbmlzbSBmb3IgYXV0b21hdGljIG1hbmFnZW1lbnQgb2YgcmVzcG9uc2UgaGFuZGxlcnMuCiAgICAqIFRoZSByZXNwb25zZSBoYW5kbGVyIHdpbGwgYmUgdW5yZWdpc3RlcmVkIGFmdGVyIHJlY2VpdmluZyB0aGUgcmVzcG9uc2UsIG9yIGFmdGVyIHJlc3BvbnNlIHRpbWVvdXQgKGRlZmF1bHQgdG8gM3MpLgogICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgTWVzc2FnZSB0byBzZW5kLiBNZXNzYWdlIElEIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gdGhlIG1lc3NhZ2UuCiAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSByZXNwb25zZUNhbGxiYWNrIE9wdGlvbmFsIHBhcmFtZXRlciwgaWYgdGhlIGRldmVsb3BlciB3aGF0J3MgYXV0b21hdGljIHJlc3BvbnNlIG1hbmFnZW1lbnQuCiAgICAqIEByZXR1cm4ge251bWJlcn0gUmV0dXJucyB0aGUgbWVzc2FnZSBJRCwgaW4gY2FzZSBpdCBzaG91bGQgYmUgbmVlZGVkIGZvciBtYW51YWwgbWFuYWdlbWVudCBvZiB0aGUgcmVzcG9uc2UgaGFuZGxlci4KICAgICovCgogIH0sIHsKICAgIGtleTogJ3Bvc3RNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZShpbk1zZywgcmVzcG9uc2VDYWxsYmFjaykge30KCiAgICAvKioKICAgICAqIE5vdCBwdWJsaWMgYXZhaWxhYmxlLCB1c2VkIGJ5IHRoZSBjbGFzcyBleHRlbnNpb24gaW1wbGVtZW50YXRpb24sIHRvIHByb2Nlc3MgbWVzc2FnZXMgZnJvbSB0aGUgcHVibGljICJwb3N0TWVzc2FnZSIgd2l0aG91dCBhIHJlZ2lzdGVyZWQgbGlzdGVuZXIuCiAgICAgKiBVc2VkIHRvIHNlbmQgdGhlIG1lc3NhZ2UgdG8gYW4gZXh0ZXJuYWwgaW50ZXJmYWNlLCBsaWtlIGEgV2ViV29ya2VyLCBJRnJhbWUsIGV0Yy4KICAgICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gbXNnIE1lc3NhZ2UKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfb25Qb3N0TWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUG9zdE1lc3NhZ2UobXNnKSB7fSAvKmltcGxlbWVudGF0aW9uIHdpbGwgc2VuZCBtZXNzYWdlIHRvIGV4dGVybmFsIHN5c3RlbSovCgogICAgLyoqCiAgICAgKiBOb3QgcHVibGljIGF2YWlsYWJsZSwgdXNlZCBieSB0aGUgY2xhc3MgZXh0ZW5zaW9uIGltcGxlbWVudGF0aW9uLCB0byBwcm9jZXNzIGFsbCBtZXNzYWdlcyB0aGF0IGVudGVyIHRoZSBNaW5pQnVzIGZyb20gYW4gZXh0ZXJuYWwgaW50ZXJmYWNlLCBsaWtlIGEgV2ViV29ya2VyLCBJRnJhbWUsIGV0Yy4KICAgICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbmUgdGltZSBpbiB0aGUgY29uc3RydWN0b3IgdG8gcmVnaXN0ZXIgZXh0ZXJuYWwgbGlzdGVuZXJzLgogICAgICogVGhlIGltcGxlbWVudGF0aW9uIHdpbGwgcHJvYmFibHkgY2FsbCB0aGUgIl9vbk1lc3NhZ2UiIG1ldGhvZCB0byBwdWJsaXNoIGluIHRoZSBsb2NhbCBsaXN0ZW5lcnMuCiAgICAgKiBETyBOT1QgY2FsbCAicG9zdE1lc3NhZ2UiLCB0aGVyZSBpcyBhIGRhbmdlciB0aGF0IHRoZSBtZXNzYWdlIGVudGVycyBpbiBhIGN5Y2xlIQogICAgICovCgogIH0sIHsKICAgIGtleTogJ19yZWdpc3RlckV4dGVybmFsTGlzdGVuZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIoKSB7LyppbXBsZW1lbnRhdGlvbiB3aWxsIHJlZ2lzdGVyIGV4dGVybmFsIGxpc3RlbmVyIGFuZCBjYWxsICJ0aGlzLl9vbk1lc3NhZ2UobXNnKSIgKi99CiAgfV0pOwogIHJldHVybiBCdXM7Cn0oKTsKCnZhciBNc2dMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHsKICAvKiBwcml2YXRlCiAgX3N1YnNjcmlwdGlvbnM6IDxzdHJpbmc6IE1zZ0xpc3RlbmVyW10+OwogIF91cmw6IHN0cmluZzsKICBfY2FsbGJhY2s6IChtc2cpID0+IHZvaWQ7CiAgKi8KCiAgZnVuY3Rpb24gTXNnTGlzdGVuZXIoc3Vic2NyaXB0aW9ucywgdXJsLCBjYWxsYmFjaykgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTXNnTGlzdGVuZXIpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zOwogICAgX3RoaXMuX3VybCA9IHVybDsKICAgIF90aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoTXNnTGlzdGVuZXIsIFt7CiAgICBrZXk6ICdyZW1vdmUnLAoKCiAgICAvKioKICAgICAqIFJlbW92ZSB0aGlzIGxpc3RlbmVyIGZyb20gdGhlIEJ1cwogICAgICovCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHN1YnMgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXTsKICAgICAgaWYgKHN1YnMpIHsKICAgICAgICB2YXIgaW5kZXggPSBzdWJzLmluZGV4T2YoX3RoaXMpOwogICAgICAgIHN1YnMuc3BsaWNlKGluZGV4LCAxKTsKCiAgICAgICAgLy9pZiB0aGVyZSBhcmUgbm8gbGlzdGVuZXJzLCByZW1vdmUgdGhlIHN1YnNjcmlwdGlvbiBlbnRpcmVseS4KICAgICAgICBpZiAoc3Vicy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICd1cmwnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl91cmw7CiAgICB9CiAgfV0pOwogIHJldHVybiBNc2dMaXN0ZW5lcjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gQnVzOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2fV0sNDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnknKTsKCnZhciBfc3RyaW5naWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ2lmeSk7Cgp2YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7Cgp2YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpOwoKdmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTsKCnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTsKCnZhciBfQnVzMiA9IHJlcXVpcmUoJy4vQnVzJyk7Cgp2YXIgX0J1czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9CdXMyKTsKCnZhciBfUGlwZWxpbmUgPSByZXF1aXJlKCcuL1BpcGVsaW5lJyk7Cgp2YXIgX1BpcGVsaW5lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BpcGVsaW5lKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tCiogTWVzc2FnZSBCVVMgSW50ZXJmYWNlIGlzIGFuIGV4dGVuc2lvbiBvZiB0aGUgQnVzCiogSXQgZG9lc24ndCBzdXBwb3J0IHRoZSBkZWZhdWx0ICcqJyBsaXN0ZW5lciwgaW5zdGVhZCBpdCB1c2VzIHRoZSByZWdpc3RyeS5yZXNvbHZlKC4uKQoqLwovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KdmFyIE1lc3NhZ2VCdXMgPSBmdW5jdGlvbiAoX0J1cykgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKE1lc3NhZ2VCdXMsIF9CdXMpOwoKICAvKiBwcml2YXRlCiAgX3JlZ2lzdHJ5OiBSZWdpc3RyeQogIF9mb3J3YXJkczogeyA8ZnJvbS11cmw+OiB7IGZsOiBNc2dMaXN0ZW5lciwgc2FuZGJveFRvVXJsczogTWFwKFNhbmRib3gsIFt0by11cmxdKSwgdXJsVG9TYW5kYm94OiB7IHRvLXVybDogU2FuZGJveCB9IH0gfQogICBfcGlwZWxpbmU6IFBpcGVsaW5lCiAgKi8KCiAgLy9UT0RPOiBmdXR1cmUgb3B0aW1pemF0aW9uCiAgLy8xLiBtZXNzYWdlIGJhdGNoIHByb2Nlc3Npbmcgd2l0aCBzZXRJbnRlcnZhbAogIC8vMi4gcmVzb2x2ZSBkZWZhdWx0IGdhdGV3YXkvcHJvdG9zdHViIHdpdGggcmVnaXN0ZXIucmVzb2x2ZQoKICBmdW5jdGlvbiBNZXNzYWdlQnVzKHJlZ2lzdHJ5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBNZXNzYWdlQnVzKTsKCiAgICB2YXIgX3RoaXMyID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoTWVzc2FnZUJ1cy5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTWVzc2FnZUJ1cykpLmNhbGwodGhpcykpOwoKICAgIF90aGlzMi5fcmVnaXN0cnkgPSByZWdpc3RyeTsKICAgIF90aGlzMi5fZm9yd2FyZHMgPSB7fTsKCiAgICBfdGhpczIuX3BpcGVsaW5lID0gbmV3IF9QaXBlbGluZTIuZGVmYXVsdChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgY29uc29sZS5sb2coJ1BJUEVMSU5FLUVSUk9SOiAnLCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoZXJyb3IpKTsKICAgIH0pOwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE1lc3NhZ2VCdXMsIFt7CiAgICBrZXk6ICdwb3N0TWVzc2FnZScsCgoKICAgIC8qKgogICAgICogUG9zdCBhIG1lc3NhZ2UgZm9yIHJvdXRpbmcuIEl0IHdpbGwgZmlyc3Qgc2VhcmNoIGZvciBhIGxpc3RlbmVyLCBpZiB0aGVyZSBpcyBubyBvbmUsIGl0IHNlbmRzIHRvIGEgZXh0ZXJuYWwgcm91dGluZyB1c2luZyB0aGUgX29uUG9zdE1lc3NhZ2UuCiAgICAgKiBFeHRlcm5hbCByb3V0aW5nIHVzZSB0aGUgcmVnaXN0cnkucmVzb2x2ZSguLikgbWV0aG9kIHRvIGRlY2lkZSB0aGUgZGVzdGluYXRpb24gc2FuZGJveC4KICAgICAqIEBwYXJhbSAge01lc3NhZ2V9IGluTXNnICAgICAgICAgICAgSlNPTiB3aXRoIG1hbmRhdG9yeSBNZXNzYWdlIHN0cnVjdHVyZSB7aWQsIHR5cGUsIGZyb20sIHRvfQogICAgICogQHBhcmFtICB7Q2FsbGJhY2t9IHJlc3BvbnNlQ2FsbGJhY2sgT3B0aW9uYWwgY2FsbGJhY2sgaWYgYSByZXNwb25zZSBpcyBleHBlY3RlZCBmcm9tIHRoZSByZXF1ZXN0LiBBIHJlc3BvbnNlIHdpbGwgYmUgYWx3YXlzIHNlbnQsIGV2ZW4gaWYgaXQgaXMgYSAiVGltZW91dCIuCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgdGhlIE1lc3NhZ2UgaWQKICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fZ2VuSWQoaW5Nc2cpOwoKICAgICAgX3RoaXMuX3BpcGVsaW5lLnByb2Nlc3MoaW5Nc2csIGZ1bmN0aW9uIChtc2cpIHsKCiAgICAgICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2soaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spOwoKICAgICAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHsKICAgICAgICAgIHZhciBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW21zZy50b107CiAgICAgICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICAgICAgLy9kbyBub3QgcHVibGlzaCBvbiBkZWZhdWx0IGFkZHJlc3MsIGJlY2F1c2Ugb2YgbG9vcGJhY2sgY3ljbGUKICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vaWYgdGhlcmUgaXMgbm8gbGlzdGVuZXIsIHNlbmQgdG8gZXh0ZXJuYWwgaW50ZXJmYWNlCiAgICAgICAgICAgIF90aGlzLl9vblBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHJldHVybiBpbk1zZy5pZDsKICAgIH0KCiAgICAvKioKICAgICAqIEFkZHMgYW4gZXh0ZXJuYWwgcHVibGlzaCBhZGRyZXNzIGxpc3RlbmVyLiBFdmVyeSBtZXNzYWdlIGZvciB0aGUgYWRkcmVzcyB3aWxsIGJlIGZvcndhcmRlZCB0byB0aGUgZXh0ZXJuYWwgcm91dGluZyBieSBfb25Qb3N0TWVzc2FnZS4KICAgICAqIFRoaXMgbWVhbnMsIGV2ZW4gaWYgdGhlcmUgaXMgYSBsaXN0ZW5lciBmb3IgdGhlIGFkZHJlc3MsIGl0IHdpbGwgYWxzbyBzZW5kIHRoZSBtZXNzYWdlIHRvIHRoZSBleHRlcm5hbCByb3V0aW5nLgogICAgICogQHBhcmFtIHtVUkx9IGZyb20gUHVibGlzaCBhZGRyZXNzLgogICAgICovCgogIH0sIHsKICAgIGtleTogJ2FkZFB1Ymxpc2gnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFB1Ymxpc2goZnJvbSkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL3ZlcmlmeSBpZiBmb3J3YXJkIGV4aXN0CiAgICAgIHZhciByZWZDb3VudCA9IF90aGlzLl9mb3J3YXJkc1tmcm9tXTsKICAgICAgaWYgKCFyZWZDb3VudCkgewogICAgICAgIHZhciBmb3J3YXJkTGlzdGVuZXIgPSBfdGhpcy5hZGRMaXN0ZW5lcihmcm9tLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnTUItUFVCTElTSDogKCAnICsgZnJvbSArICcgKScpOwogICAgICAgICAgX3RoaXMuX29uUG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICB9KTsKCiAgICAgICAgcmVmQ291bnQgPSB7CiAgICAgICAgICBjb3VudGVyOiAwLAogICAgICAgICAgZmw6IGZvcndhcmRMaXN0ZW5lciwKICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkgewogICAgICAgICAgICBfdGhpczMuY291bnRlci0tOwogICAgICAgICAgICBpZiAoX3RoaXMzLmNvdW50ZXIgPT09IDApIHsKICAgICAgICAgICAgICBfdGhpczMuZmwucmVtb3ZlKCk7CiAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9mb3J3YXJkc1tmcm9tXTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIF90aGlzLl9mb3J3YXJkc1tmcm9tXSA9IHJlZkNvdW50OwogICAgICB9CgogICAgICByZWZDb3VudC5jb3VudGVyKys7CiAgICAgIHJldHVybiByZWZDb3VudDsKICAgIH0KCiAgICAvKioKICAgICAqIEFkZHMgYSBmb3J3YXJkIGxpc3RlbmVyIGZvciBhIG1lc3NhZ2UgZGVzdGluYXRpb24uIEV2ZXJ5IG1lc3NhZ2UgcmVhY2hpbmcgYW4gYWRkcmVzcyB3aWxsIGJlIGFsc28gc2VudCB0byB0aGUgZm9yd2FyZCBhZGRyZXNzLgogICAgICogQHBhcmFtIHtVUkx9IGZyb20gTWVzc2FnZSBkZXN0aW5hdGlvbiwgaXQncyBhY3R1YWxseSB0aGUgZmllbGQgInRvIiBvZiB0aGUgbWVzc2FnZS4KICAgICAqIEBwYXJhbSB7VVJMfSB0byAgIEZvcndhcmQgYWRkcmVzcy4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdhZGRGb3J3YXJkJywKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRGb3J3YXJkKGZyb20sIHRvKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX3RoaXMuYWRkTGlzdGVuZXIoZnJvbSwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIGNvbnNvbGUubG9nKCdNQi1GT1JXQVJEOiAoICcgKyBmcm9tICsgJyB0byAnICsgdG8gKyAnICknKTsKICAgICAgICBfdGhpcy5mb3J3YXJkKHRvLCBtc2cpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIEp1c3QgZm9yd2FyZCdzIGEgbWVzc2FnZSB0byB0aGUgZm9yd2FyZCBhZGRyZXNzLiBMaXN0ZW5lcnMgc2hvdWxkIGJlIGF2YWlsYWJsZSBmb3IgdGhlIGZvcndhcmQgYWRkcmVzcy4KICAgICAqIEBwYXJhbSAge1VSTH0gdXJsIEZvcndhcmQgYWRkcmVzcy4KICAgICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBNZXNzYWdlIHRvIGZvcndhcmQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdmb3J3YXJkJywKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3J3YXJkKHVybCwgbXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1t1cmxdOwogICAgICBpZiAoaXRlbUxpc3QpIHsKICAgICAgICBfdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpOwogICAgICB9CiAgICB9CgogICAgLy9kZWZhdWx0IHJvdXRlLCBpZiB0aGVyZSBhcmUgbm8gbGlzdGVuZXJzIGF2YWlsYWJsZSBmb3IgYSBtZXNzYWdlIGRlc3RpbmF0aW9uLgoKICB9LCB7CiAgICBrZXk6ICdfb25Qb3N0TWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUG9zdE1lc3NhZ2UobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL3Jlc29sdmUgZXh0ZXJuYWwgcHJvdG9zdHViLi4uCiAgICAgIF90aGlzLl9yZWdpc3RyeS5yZXNvbHZlKG1zZy50bykudGhlbihmdW5jdGlvbiAocm91dGUpIHsKICAgICAgICBfdGhpcy5mb3J3YXJkKHJvdXRlLCBtc2cpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZSkgewogICAgICAgIGNvbnNvbGUubG9nKCdSRVNPTFZFLUVSUk9SOiAnLCBlKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAncGlwZWxpbmUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9waXBlbGluZTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIE1lc3NhZ2VCdXM7Cn0oX0J1czMuZGVmYXVsdCk7CgpleHBvcnRzLmRlZmF1bHQgPSBNZXNzYWdlQnVzOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuL0J1cyI6NDIyLCIuL1BpcGVsaW5lIjo0MjQsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6MywiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mIjo4LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiOjE4LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI6MTl9XSw0MjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewoidXNlIHN0cmljdCI7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayIpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KCi8qKgoqIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb20KKiBTZXF1ZW5jaWFsIHByb2Nlc3NvciBvZiBtZXRob2RzLiBTaW1pbGFyIHRvIGhvdyBTZXF1ZW50aWFsIFByb21pc2UncyB3b3JrLCBidXQgYmV0dGVyIGZpdCBmb3IgbWVzc2FnZSBwcm9jZXNzaW5nLgoqIE5vcm1hbCB1c2UgZm9yIHRoaXMsIGlzIHRvIGludGVyY2VwdCBhbGwgbWVzc2FnZXMgd2l0aCBjb25maWd1cmVkIGhhbmRsZXJzLCBhbmQgYWN0IGFjY29yZGluZ2x5LgoqLwp2YXIgUGlwZWxpbmUgPSBmdW5jdGlvbiAoKSB7CiAgLyogcHVibGljCiAgICBoYW5kbGVyczogKChQaXBlQ29udGV4dCkgPT4gdm9pZClbXQogICAgb25GYWlsOiAoZXJyb3IpID0+IHZvaWQKICAqLwoKICBmdW5jdGlvbiBQaXBlbGluZShfb25GYWlsKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQaXBlbGluZSk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5oYW5kbGVycyA9IFtdOwogICAgX3RoaXMub25GYWlsID0gX29uRmFpbDsKICB9CgogIC8qKgogICAqIEluc2VydCBhIG1lc3NhZ2UgaW4gdGhlIHBpcGVsaW5lIHF1ZXVlLiBBbGwgbWVzc2FnZXMgYXJlIHdyYXBwZWQgd2l0aCBhIFBpcGVDb250ZXh0LgogICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyAgICAgICBNZXNzYWdlIGZvciB0aGUgcXVldWUKICAgKiBAcGFyYW0gIHtDYWxsYmFja30gb25EZWxpdmVyIFdoZW4gbWVzc2FnZSBpcyBmaW5pc2hlZCBwcm9jZXNzaW5nIGZyb20gYWxsIGhhbmRsZXJzLCBpdCB3aWxsIGJlIGRlbGl2ZXJlZCBpbiB0aGlzIGNhbGxiYWNrLgogICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUGlwZWxpbmUsIFt7CiAgICBrZXk6ICJwcm9jZXNzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9jZXNzKG1zZywgb25EZWxpdmVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoX3RoaXMuaGFuZGxlcnMubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBpdGVyID0gbmV3IEl0ZXJhdG9yKF90aGlzLmhhbmRsZXJzKTsKICAgICAgICBpdGVyLm5leHQobmV3IFBpcGVDb250ZXh0KF90aGlzLCBpdGVyLCBtc2csIG9uRGVsaXZlcikpOwogICAgICB9IGVsc2UgewogICAgICAgIG9uRGVsaXZlcihtc2cpOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBQaXBlbGluZTsKfSgpOwoKLyoqCiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbQoqIFdyYXBwZXIgYXJvdW5kIGEgbWVzc2FnZSB0aGF0IGFkZHMgYWN0aW9ucyB0aGF0IGNhbiBiZSBmaXJlZCBieSBhbnkgaW50ZXJjZXB0b3IgaGFuZGxlci4KKiBUaGUgUGlwZWxpbmUgaXMgYXN5bmNocm9ub3VzLCBzbyBhbiBoYW5kbGVyIHNob3VsZCBhbHdheXMgY2FsbCBhbiBhY3Rpb24sIHRoZSBkZWZhdWx0IG9uZSBpcyAibmV4dCgpIgoqLwoKCnZhciBQaXBlQ29udGV4dCA9IGZ1bmN0aW9uICgpIHsKICAvKiBwcml2YXRlCiAgICBfaW5TdG9wOiBib29sZWFuCiAgICAgX3BpcGVsaW5lOiBQaXBlbGluZQogICAgX2l0ZXI6IEl0ZXJhdG9yCiAgICBfbXNnOiBNZXNzYWdlCiAgKi8KCiAgZnVuY3Rpb24gUGlwZUNvbnRleHQocGlwZWxpbmUsIGl0ZXIsIG1zZywgb25EZWxpdmVyKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQaXBlQ29udGV4dCk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5faW5TdG9wID0gZmFsc2U7CgogICAgX3RoaXMuX3BpcGVsaW5lID0gcGlwZWxpbmU7CiAgICBfdGhpcy5faXRlciA9IGl0ZXI7CiAgICBfdGhpcy5fbXNnID0gbXNnOwogICAgX3RoaXMuX29uRGVsaXZlciA9IG9uRGVsaXZlcjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBpcGVDb250ZXh0LCBbewogICAga2V5OiAibmV4dCIsCgoKICAgIC8qKgogICAgICogUHJvY2VlZCB0byB0aGUgbmV4dCBpbnRlcmNlcHRvciBoYW5kbGVyLCB1bmxlc3MgdGhlcmUgd2FzIGFuIGVycm9yLiBJZiBpdCdzIHRoZSBsYXN0IG9uZSwgcHJvY2VlZCB0byBvbkRlbGl2ZXIgaGFuZGxlci4KICAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIV90aGlzLl9pblN0b3ApIHsKICAgICAgICBpZiAoX3RoaXMuX2l0ZXIuaGFzTmV4dCkgewogICAgICAgICAgX3RoaXMuX2l0ZXIubmV4dChfdGhpcyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzLl9vbkRlbGl2ZXIoX3RoaXMuX21zZyk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBQcm9jZWVkIGRpcmVjdGx5IHRvIHRoZSBvbkRlbGl2ZXIgaGFuZGxlciwgdW5sZXNzIHRoZXJlIHdhcyBhbiBlcnJvci4KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJkZWxpdmVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxpdmVyKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBpZiAoIV90aGlzLl9pblN0b3ApIHsKICAgICAgICBfdGhpcy5faW5TdG9wID0gdHJ1ZTsKICAgICAgICBfdGhpcy5fb25EZWxpdmVyKF90aGlzLl9tc2cpOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBNYXJrIHRoZSBjb250ZXh0IHdpdGggYW4gZXJyb3IgYW5kIHByb2NlZWQgdG8gdGhlIG9uRmFpbCBoYW5kbGVyLgogICAgICogQHBhcmFtICB7W3R5cGVdfSBlcnJvciBbZGVzY3JpcHRpb25dCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZmFpbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZmFpbChlcnJvcikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKCFfdGhpcy5faW5TdG9wKSB7CiAgICAgICAgX3RoaXMuX2luU3RvcCA9IHRydWU7CiAgICAgICAgaWYgKF90aGlzLl9waXBlbGluZS5vbkZhaWwpIHsKICAgICAgICAgIF90aGlzLl9waXBlbGluZS5vbkZhaWwoZXJyb3IpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInBpcGVsaW5lIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcGlwZWxpbmU7CiAgICB9CiAgfSwgewogICAga2V5OiAibXNnIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fbXNnOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KGluTXNnKSB7CiAgICAgIHRoaXMuX21zZyA9IGluTXNnOwogICAgfQogIH1dKTsKICByZXR1cm4gUGlwZUNvbnRleHQ7Cn0oKTsKCnZhciBJdGVyYXRvciA9IGZ1bmN0aW9uICgpIHsKICAvKiBwcml2YXRlCiAgICBfaW5kZXg6IG51bWJlcgogICAgX2FycmF5OiBbXQogICovCgogIGZ1bmN0aW9uIEl0ZXJhdG9yKGFycmF5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBJdGVyYXRvcik7CgogICAgdGhpcy5faW5kZXggPSAtMTsKICAgIHRoaXMuX2FycmF5ID0gYXJyYXk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShJdGVyYXRvciwgW3sKICAgIGtleTogImhhc05leHQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9pbmRleCA8IHRoaXMuX2FycmF5Lmxlbmd0aCAtIDE7CiAgICB9CiAgfSwgewogICAga2V5OiAibmV4dCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdGhpcy5faW5kZXgrKzsKICAgICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2luZGV4XTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEl0ZXJhdG9yOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBQaXBlbGluZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWyJkZWZhdWx0Il07Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNn1dLDQyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDbGFzcyB3aXRoIHRoZSBjcnlwdG9ncmFwaGljIGZ1bmN0aW9ucyBmb3IgdGhlIGF1dGhlbnRpY2F0aW9uIHByb3RvY29sCioKKi8KdmFyIENyeXB0byA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBDcnlwdG8oKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDcnlwdG8pOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgfQoKICAvKioKICAqIGVuY29kZSBhIGJ5dGVBcnJheSB2YWx1ZSBpbiBiYXNlIDY0IGVuY29kZQogICogQHBhcmFtICAge2J5dGVBcnJheX0gICAgdmFsdWUgICAgYnl0ZUFycmF5IHZhbHVlCiAgKiBAcmV0dXJuICB7c3RyaW5nfSAgIGVuY29kZWQgdmFsdWUKICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQ3J5cHRvLCBbewogICAga2V5OiAnZW5jb2RlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNvZGUodmFsdWUpIHsKICAgICAgcmV0dXJuIGJ0b2EodmFsdWUpOwogICAgfQoKICAgIC8qKgogICAgKiBkZWNvZGUgYSBiYXNlNjQgdmFsdWUgaW4gYSBuZXcgVWludDhBcnJheQogICAgKiBAcGFyYW0gICB7c3RyaW5nfSAgICB2YWx1ZSAgICB2YWx1ZSBlbmNvZGVkIGluIGJhc2UgNjQKICAgICogQHJldHVybiAge2J5dGVBcnJheX0gZGVjb2RlZFZhbHVlCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkZWNvZGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlY29kZSh2YWx1ZSkgewogICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoSlNPTi5wYXJzZSgnWycgKyBhdG9iKHZhbHVlKSArICddJykpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuY3J5cHRSU0EnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuY3J5cHRSU0EocHViS2V5LCBkYXRhKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBfdGhpcy5faW1wb3J0UlNBZW5jcnlwdEtleShuZXcgVWludDhBcnJheShwdWJLZXkpKS50aGVuKGZ1bmN0aW9uIChwdWJsaWNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnCiAgICAgICAgICB9LCBwdWJsaWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHQKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0UlNBJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0UlNBKHByaXZLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24gKHByaXZhdGVLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnCiAgICAgICAgICB9LCBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGEKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkKSB7CgogICAgICAgICAgICB2YXIgZGVjcnlwdGVkRGF0YSA9IG5ldyBVaW50OEFycmF5KGRlY3J5cHRlZCk7CgogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZGVjcnlwdFJTQScsIGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgICByZXNvbHZlKGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzaWduUlNBJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzaWduUlNBKHByaXZLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24gKHByaXZhdGVLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oewogICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnCiAgICAgICAgICB9LCBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gc2lnbgogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChzaWduYXR1cmUpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tc2lnblJTQScsIG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLXNpZ25SU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICd2ZXJpZnlSU0EnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZlcmlmeVJTQShwdWJLZXksIGRhdGEsIHNpZ25hdHVyZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgX3RoaXMuX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpLnRoZW4oZnVuY3Rpb24gKHB1YmxpY0tleSkgewoKICAgICAgICAgIGNyeXB0by5zdWJ0bGUudmVyaWZ5KHsKICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JwogICAgICAgICAgfSwgcHVibGljS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBzaWduYXR1cmUsIC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZQogICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YQogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChpc3ZhbGlkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhIGJvb2xlYW4gb24gd2hldGhlciB0aGUgc2lnbmF0dXJlIGlzIHRydWUgb3Igbm90CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBpc3ZhbGlkKTsKICAgICAgICAgICAgcmVzb2x2ZShpc3ZhbGlkKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdlbmNyeXB0QUVTJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChhZXNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsCiAgICAgICAgICAgIC8vRG9uJ3QgcmUtdXNlIGluaXRpYWxpemF0aW9uIHZlY3RvcnMhCiAgICAgICAgICAgIC8vQWx3YXlzIGdlbmVyYXRlIGEgbmV3IGl2IGV2ZXJ5IHRpbWUgeW91ciBlbmNyeXB0IQogICAgICAgICAgICBpdjogaXYKICAgICAgICAgIH0sIGFlc0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZQogICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHQKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkKSB7CiAgICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdEFFUycsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRBRVMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0QUVTJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChhZXNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoewogICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsCiAgICAgICAgICAgIGl2OiBpdgogICAgICAgICAgfSwgYWVzS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlCiAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGEKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkKSB7CgogICAgICAgICAgICB2YXIgZGVjb2RlZERhdGEgPSBfdGhpcy5fdXRmOERlY29kZShuZXcgVWludDhBcnJheShkZWNyeXB0ZWQpKTsKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBkZWNvZGVkRGF0YSk7CiAgICAgICAgICAgIHJlc29sdmUoZGVjb2RlZERhdGEpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogY3JlYXRlcyBhIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjCiAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICBkYXRhICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIGhhc2hlZAogICAgKiBAcmV0dXJuICB7Ynl0ZUFycmF5fSAgIHNpZ25hdHVyZSAgcmVzdWx0aW5nIGhhc2gKICAgICovCgogIH0sIHsKICAgIGtleTogJ2hhc2hITUFDJywKICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNoSE1BQyhrZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5faW1wb3J0SE1BQ2tleShrZXkpLnRoZW4oZnVuY3Rpb24gKGhtYWNLZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oewogICAgICAgICAgICBuYW1lOiAnSE1BQycKICAgICAgICAgIH0sIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgZGF0YSB5b3Ugd2FudCB0byBzaWduCiAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKHNpZ25hdHVyZSkgewogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8taGFzaEhNQUMnLCBzaWduYXR1cmUpOwoKICAgICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIHNpZ25hdHVyZQogICAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWhhc2hITUFDJywgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIHZlcmlmaWVzIGFuIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjCiAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICBkYXRhICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIGhhc2hlZCB0byBjb21wYXJlCiAgICAqIEBwYXJhbSAge2J5dGVBcnJheX0gIHNpZ25hdHVyZSAgIGhhc2ggdG8gY29tcGFyZSB3aXRoIHRoZSByZWNlaXZlZCBkYXRhCiAgICAqIEByZXR1cm4gIHtib29sZWFufSAgIGlzdmFsaWQgICAgIGJvb2xlYW4gc2F5aW5nIGlmIHRoZSBkYXRhIGNvcnJlc3BvbmRzIHRvIHRoZSBoYXNoIHJlY2VpdmVkCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd2ZXJpZnlITUFDJywKICAgIHZhbHVlOiBmdW5jdGlvbiB2ZXJpZnlITUFDKGtleSwgZGF0YSwgc2lnbmF0dXJlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMuX2ltcG9ydEhNQUNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uIChobWFjS2V5KSB7CgogICAgICAgICAgY3J5cHRvLnN1YnRsZS52ZXJpZnkoewogICAgICAgICAgICBuYW1lOiAnSE1BQycKICAgICAgICAgIH0sIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmUKICAgICAgICAgIHNpZ25hdHVyZSwgLy9BcnJheUJ1ZmZlciBvZiB0aGUgc2lnbmF0dXJlCiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhCiAgICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGlzdmFsaWQpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIGEgYm9vbGVhbiBvbiB3aGV0aGVyIHRoZSBzaWduYXR1cmUgaXMgdHJ1ZSBvciBub3QKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLXZlcmlmeUhNQUMnLCBpc3ZhbGlkKTsKICAgICAgICAgICAgaXN2YWxpZCA/IHJlc29sdmUoaXN2YWxpZCkgOiByZWplY3QoaXN2YWxpZCk7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by12ZXJpZnlITUFDJywgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIGdlbmVyYXRlcyBhIFJTQSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFpciB3aXRoIGEgbW9kdWx1cyBsZW5ndGggb2YgMjA0OCBiaXRzCiAgICAqIEByZXR1cm4gIHtKU09OfSAgIGtleVBhaXIgICAganNvbiBjb250YWluaW5nIHRoZSBwdWJsaWMgYW5kIHByaXZhdGUga2V5cwogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2VuZXJhdGVSU0FLZXlQYWlyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVJTQUtleVBhaXIoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBrZXlQYWlyID0ge307CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmdlbmVyYXRlS2V5KHsKICAgICAgICAgIG5hbWU6ICdSU0EtUFNTJywKICAgICAgICAgIG1vZHVsdXNMZW5ndGg6IDIwNDgsIC8vY2FuIGJlIDEwMjQsIDIwNDgsIG9yIDQwOTYKICAgICAgICAgIHB1YmxpY0V4cG9uZW50OiBuZXcgVWludDhBcnJheShbMHgwMSwgMHgwMCwgMHgwMV0pLAogICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInCiAgICAgICAgfSwgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KQogICAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5JwoKICAgICAgICApLnRoZW4oZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEga2V5cGFpciBvYmplY3QKICAgICAgICAgIC8vY29uc29sZS5sb2coa2V5KTsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmV4cG9ydEtleSgnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgICBrZXkucHVibGljS2V5IC8vY2FuIGJlIGEgcHVibGljS2V5IG9yIHByaXZhdGVLZXksIGFzIGxvbmcgYXMgZXh0cmFjdGFibGUgd2FzIHRydWUKICAgICAgICAgICkudGhlbihmdW5jdGlvbiAocHVibGljS2V5KSB7CiAgICAgICAgICAgIC8vcmV0dXJucyB0aGUgZXhwb3J0ZWQga2V5IGRhdGEKICAgICAgICAgICAga2V5UGFpci5wdWJsaWMgPSBuZXcgVWludDhBcnJheShwdWJsaWNLZXkpOwogICAgICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoJ3BrY3M4JywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSkKICAgICAgICAgICAga2V5LnByaXZhdGVLZXkgLy9jYW4gYmUgYSBwdWJsaWNLZXkgb3IgcHJpdmF0ZUtleSwgYXMgbG9uZyBhcyBleHRyYWN0YWJsZSB3YXMgdHJ1ZQogICAgICAgICAgICApOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocHJpdmF0ZUtleSkgewogICAgICAgICAgICBrZXlQYWlyLnByaXZhdGUgPSBuZXcgVWludDhBcnJheShwcml2YXRlS2V5KTsKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlUlNBS2V5UGFpcicsIGtleVBhaXIpOwoKICAgICAgICAgICAgcmVzb2x2ZShrZXlQYWlyKTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpOwogICAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogR2VuZXJhdGVzIGEgMTI4IGJpdCByYW5kb20gdmFsdWUuCiAgICAqIEByZXR1cm4ge2J5dGVBcnJheX0gIGFycmF5ICAgIHJhbmRvbSB2YWx1ZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2VuZXJhdGVJVicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVJVigpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDE2KTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICByZXR1cm4gYXJyYXk7CiAgICB9CgogICAgLyoqCiAgICAqIEdlbmVyYXRlcyBhIDI1NiBiaXQgcmFuZG9tIHZhbHVlLiAzMiBiaXRzIGFyZSBleHRyYXRlZCBmcm9tIHRoZSBtYWNoaW5lIHRpbWUsCiAgICAqIHRoZSByZW1haW5pbmcgYXJlIGdlbmVyYXRlZCByYW5kb21seQogICAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICByYW5kb20gdmFsdWUKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlUmFuZG9tJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICB2YXIgZGF0ZSA9IERhdGUubm93KCk7CiAgICAgIHZhciBkYXRlRW5jb2RlZCA9IF90aGlzLl91dGY4RW5jb2RlKGRhdGUpOwoKICAgICAgLy9leHRyYWN0IHRoZSBsZWFzdCBzaWduaWZpY2FudCA0IGJ5dGVzIGluIHRoZSBkYXRlCiAgICAgIHZhciBmaW5hbERhdGUgPSBkYXRlRW5jb2RlZC5zbGljZShkYXRlRW5jb2RlZC5sZW5ndGggLSA0LCBkYXRlRW5jb2RlZC5sZW5ndGgpOwoKICAgICAgLy8gYWRkIGluIHRoZSBmaXJzdCA0IGJ5dGVzIG9mIHRoZSBhcnJheSB0aGUgYnl0ZXMgZXh0cmFjdGVkIHByZXZpb3VzbHk7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgYXJyYXlbaV0gPSBmaW5hbERhdGVbaV07CiAgICAgIH0KICAgICAgcmV0dXJuIGFycmF5OwogICAgfQoKICAgIC8qKgogICAgKiBnZW5lcmF0ZXMgYSBwcmVtYXN0ZXIgc2VjcmV0IChQTVMpIG9mIDQ4IGJ5dGVzICgzODQgYml0cykgcmFuZG9tbHkKICAgICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgcHJlbWFzdGVyIHNlY3JldCBrZXkKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlUE1TJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZVBNUygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDQ4KTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CiAgICAgIHJldHVybiBhcnJheTsKICAgIH0KCiAgICAvKioKICAgICogZ2VuZXJhdGVzIGEgbWFzdGVyS2V5IHNlY3JldCAoUE1TKSBvZiA0OCBieXRlcyAoMzg0IGJpdHMpIHVzaW5nIHRoZSBwcmVtYXN0ZXIgc2VjcmV0IGFuZAogICAgKiB0d28gcmFuZG9tcwogICAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICBtYXN0ZXIgc2VjcmV0IGtleSB3aXRoIDQ4IGJ5dGVzCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZW5lcmF0ZU1hc3RlclNlY3JldCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVNYXN0ZXJTZWNyZXQoaG1hY0tleSwgZGF0YSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGtleSA9IG5ldyBVaW50OEFycmF5KDQ4KTsKICAgICAgICB2YXIgc2VlZCA9IGRhdGE7CgogICAgICAgIF90aGlzLl9kaWdlc3QoaG1hY0tleSkudGhlbihmdW5jdGlvbiAoZGlnZXN0ZWRLZXkpIHsKCiAgICAgICAgICBfdGhpcy5oYXNoSE1BQyhkaWdlc3RlZEtleSwgc2VlZCkudGhlbihmdW5jdGlvbiAoa2V5cGFydDApIHsKCiAgICAgICAgICAgIC8vY29weSB0aGUgZmlyc3QgMzIgYnl0ZXMgaW50byB0aGUga2V5CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKykgewogICAgICAgICAgICAgIGtleVtpXSA9IGtleXBhcnQwW2ldOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhkaWdlc3RlZEtleSwgc2VlZCArIGtleXBhcnQwKTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQxKSB7CgogICAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDE2IGJ5dGVzIHRvIHRoZSBrZXkgcmVtYWluaW5nIDE2IGJ5dGVzCiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykgewogICAgICAgICAgICAgIGtleVtpICsgMzJdID0ga2V5cGFydDFbaV07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0Jywga2V5KTsKICAgICAgICAgICAgcmVzb2x2ZShrZXkpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0JywgZXJyKTsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIGdlbmVyYXRlcyBib3RoIHVzZXJzIE1BQyBhbmQgZW5jcnlwdGlvbiBrZXlzLiBnZW5lcmF0ZSBhcyBvdXRwdXQgYW4gYXJyYXkKICAgICogd2l0aCA0IGJ5dGVBcnJheSBlYWNoIHdpdGggMzIgYnl0ZXMKICAgICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgICAgICAgc2VjcmV0ICAgICAgIHNlY3JldCB0byBiZSB1c2VkIGluIHRoZSBITUFDIGZ1bmN0aW9uCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRhdGEgICAgICAgICBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGFzIHNlZWQKICAgICogQHJldHVybiB7QXJyYXk8Ynl0ZUFycmF5Pn0ga2V5ICAgICAgICAgIGFycmF5IHdpdGggdGhlIGluZm9ybWF0aW9uIHRvIGdlbmVyYXRlIGtleXMKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlS2V5cycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVLZXlzKGhtYWNLZXksIGRhdGEpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIga2V5ID0gW107CiAgICAgICAgdmFyIHNlZWQgPSBkYXRhOwoKICAgICAgICAvLyBpdGVyYXRlIDQgdGltZXMgdG8gb2J0YWluIGEgMTAyNCBrZXkgc2l6ZQogICAgICAgIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQpLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQwKSB7CiAgICAgICAgICBrZXkucHVzaChrZXlwYXJ0MCk7CiAgICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCArIGtleXBhcnQwKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChrZXlwYXJ0MSkgewogICAgICAgICAga2V5LnB1c2goa2V5cGFydDEpOwogICAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQgKyBrZXlwYXJ0MSk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoa2V5cGFydDIpIHsKICAgICAgICAgIGtleS5wdXNoKGtleXBhcnQyKTsKICAgICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkICsga2V5cGFydDIpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGtleXBhcnQzKSB7CiAgICAgICAgICBrZXkucHVzaChrZXlwYXJ0Myk7CgogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlS2V5cycsIGtleSk7CiAgICAgICAgICByZXNvbHZlKGtleSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlS2V5cycsIGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKCiAgICAgICAgLy9jb25zb2xlLmxvZyhobWFjS2V5LCBkYXRhKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydFJTQXNpZ25LZXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgcHJpdktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydzaWduJ10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0cwogICAgICAgICkudGhlbihmdW5jdGlvbiAocHJpdmF0ZUtleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQXNpZ25LZXknLCBwcml2YXRlS2V5KTsKICAgICAgICAgIHJlc29sdmUocHJpdmF0ZUtleSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogICAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0FzaWduS2V5JywgZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0UlNBdmVyaWZ5S2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaW1wb3J0UlNBdmVyaWZ5S2V5KHB1YktleSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoJ3Nwa2knLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KQogICAgICAgIHB1YktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWyd2ZXJpZnknXSAvLyd2ZXJpZnknIGZvciBwdWJsaWMga2V5IGltcG9ydCwgJ3NpZ24nIGZvciBwcml2YXRlIGtleSBpbXBvcnRzCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChwdWJsaWNLZXkpIHsKICAgICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KQogICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0F2ZXJpZnlLZXknLCBwdWJsaWNLZXkpOwogICAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5JywgZXJyKTsKICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0UlNBZW5jcnlwdEtleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydFJTQWVuY3J5cHRLZXkocHViS2V5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgcHViS2V5LCB7IC8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9ucwogICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJywKICAgICAgICAgIGhhc2g6IHsgbmFtZTogJ1NIQS0yNTYnIH0gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJwogICAgICAgIH0sIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSkKICAgICAgICBbJ2VuY3J5cHQnXSAvLydlbmNyeXB0JyBvciAnd3JhcEtleScgZm9yIHB1YmxpYyBrZXkgaW1wb3J0IG9yCiAgICAgICAgLy8nZGVjcnlwdCcgb3IgJ3Vud3JhcEtleScgZm9yIHByaXZhdGUga2V5IGltcG9ydHMKICAgICAgICApLnRoZW4oZnVuY3Rpb24gKHB1YmxpY0tleSkgewogICAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpCiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQWVuY3J5cHRLZXknLCBwdWJsaWNLZXkpOwogICAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBZW5jcnlwdEtleScsIGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydFJTQWRlY3J5cHRLZXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpCiAgICAgICAgcHJpdktleSwgeyAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnMKICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsCiAgICAgICAgICBoYXNoOiB7IG5hbWU6ICdTSEEtMjU2JyB9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMicKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydkZWNyeXB0J10gLy8nZW5jcnlwdCcgb3IgJ3dyYXBLZXknIGZvciBwdWJsaWMga2V5IGltcG9ydCBvcgogICAgICAgIC8vJ2RlY3J5cHQnIG9yICd1bndyYXBLZXknIGZvciBwcml2YXRlIGtleSBpbXBvcnRzCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChwcml2YXRlS2V5KSB7CiAgICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSkKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0UlNBZGVjcnlwdEtleScsIHByaXZhdGVLZXkpOwogICAgICAgICAgcmVzb2x2ZShwcml2YXRlS2V5KTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQWRlY3J5cHRLZXknLCBlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2NvbmNhdFBNU3dpdGhSYW5kb21zJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjb25jYXRQTVN3aXRoUmFuZG9tcyhwbXMsIHRvUmFuZG9tLCBmcm9tUmFuZG9tKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgZmluYWxLZXkgPSBuZXcgVWludDhBcnJheShwbXMubGVuZ3RoICsgdG9SYW5kb20ubGVuZ3RoICsgZnJvbVJhbmRvbS5sZW5ndGgpOwoKICAgICAgLy8gYWRkIFByZW1hc3RlcktleQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBtcy5sZW5ndGg7IGkrKykgewogICAgICAgIGZpbmFsS2V5W2ldID0gcG1zW2ldOwogICAgICB9CgogICAgICAvL2FkZCB0byByYW5kb20KICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRvUmFuZG9tLmxlbmd0aDsgX2krKykgewogICAgICAgIGZpbmFsS2V5W19pICsgcG1zLmxlbmd0aF0gPSBwbXNbX2ldOwogICAgICB9CgogICAgICAvL2FkZCBmcm9tIHJhbmRvbQogICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBmcm9tUmFuZG9tLmxlbmd0aDsgX2kyKyspIHsKICAgICAgICBmaW5hbEtleVtfaTIgKyBwbXMubGVuZ3RoICsgdG9SYW5kb20ubGVuZ3RoXSA9IHBtc1tfaTJdOwogICAgICB9CgogICAgICByZXR1cm4gZmluYWxLZXk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dlbmVyYXRlMjU2Yml0S2V5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2VuZXJhdGUyNTZiaXRLZXkoKSB7CiAgICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KDMyKTsKICAgICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7CgogICAgICByZXR1cm4gYXJyYXk7CiAgICB9CgogICAgLyoqCiAgICAqIGltcG9ydHMgdGhlIHNlY3JldCB0byB0aGUgSE1BQyBmdW5jdGlvbgogICAgKiBAcGFyYW0gIHtieXRlQXJyYXl9ICAgYXJyYXlCdWZmZXIgICAgIGJ5dGVzIHRvIGltcG9ydCBhcyBrZXkKICAgICogQHJldHVybiB7SlNPTn0gICAgICAga2V5ICAgICAgICAgICAgICBrZXkgcmVhZHkgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBjcnlwdG9ncmFwaGljIGZ1bmN0aW9uCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfaW1wb3J0SE1BQ2tleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydEhNQUNrZXkoYXJyYXlCdWZmZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5fZGlnZXN0KGFycmF5QnVmZmVyKS50aGVuKGZ1bmN0aW9uIChrZXkpIHsKCiAgICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdycKICAgICAgICAgIGtleSwgeyAvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zCiAgICAgICAgICAgIG5hbWU6ICdITUFDJywKICAgICAgICAgICAgaGFzaDogeyBuYW1lOiAnU0hBLTI1NicgfSwgLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJwogICAgICAgICAgICBsZW5ndGg6IDI1NiAvL29wdGlvbmFsLCBpZiB5b3Ugd2FudCB5b3VyIGtleSBsZW5ndGggdG8gZGlmZmVyIGZyb20gdGhlIGhhc2ggZnVuY3Rpb24ncyBibG9jayBsZW5ndGgKICAgICAgICAgIH0sIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSkKICAgICAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5JwogICAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgLy9yZXR1cm5zIHRoZSBzeW1tZXRyaWMga2V5CiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0SE1BQ2tleScsIGtleSk7CiAgICAgICAgICAgIHJlc29sdmUoa2V5KTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2RpZ2VzdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2RpZ2VzdCh2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgY3J5cHRvLnN1YnRsZS5kaWdlc3QoewogICAgICAgICAgbmFtZTogJ1NIQS0yNTYnCiAgICAgICAgfSwgdmFsdWUgLy9UaGUgZGF0YSB5b3Ugd2FudCB0byBoYXNoIGFzIGFuIEFycmF5QnVmZmVyCiAgICAgICAgKS50aGVuKGZ1bmN0aW9uIChoYXNoKSB7CiAgICAgICAgICAvL3JldHVybnMgdGhlIGhhc2ggYXMgYW4gQXJyYXlCdWZmZXIKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1kaWdlc3QnLCBuZXcgVWludDhBcnJheShoYXNoKSk7CiAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGhhc2gpKTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7CiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ltcG9ydEFFU2tleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ltcG9ydEFFU2tleShhcnJheUJ1ZmZlcikgewogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleSgncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdycKICAgICAgICBhcnJheUJ1ZmZlciwgeyAvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zCiAgICAgICAgICBuYW1lOiAnQUVTLUNCQycKICAgICAgICB9LCB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpCiAgICAgICAgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSAvL2NhbiBiZSAnZW5jcnlwdCcsICdkZWNyeXB0JywgJ3dyYXBLZXknLCBvciAndW53cmFwS2V5JwogICAgICAgICkudGhlbihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAvL3JldHVybnMgdGhlIHN5bW1ldHJpYyBrZXkKICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1pbXBvcnRBRVNrZXknLCBrZXkpOwogICAgICAgICAgcmVzb2x2ZShrZXkpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1pbXBvcnRBRVNrZXknLCBlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ191dGY4RW5jb2RlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfdXRmOEVuY29kZShzKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoJ3V0Zi04JykuZW5jb2RlKHMpOwogICAgfQogIH0sIHsKICAgIGtleTogJ191dGY4RGVjb2RlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfdXRmOERlY29kZShzKSB7CiAgICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JykuZGVjb2RlKHMpOwogICAgfQogIH1dKTsKICByZXR1cm4gQ3J5cHRvOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBDcnlwdG87Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjoxMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNn1dLDQyNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogZmFrZSBjbGFzcyBmb3IgdGhlIGd1aSB0byBzZWxlY3QgdGhlIGlkZW50aXR5LAoqIFRPRE8gcmVwbGFjZSB3aXRoIHRoZSBwcm9wZXIgaWRlbnRpdHkgR1VJCioKKi8KdmFyIEd1aUZha2UgPSBmdW5jdGlvbiBHdWlGYWtlKHVybCwgbWVzc2FnZUJ1cykgewogICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEd1aUZha2UpOwoKICB2YXIgX3RoaXMgPSB0aGlzOwoKICBfdGhpcy5fdXJsID0gdXJsOwogIF90aGlzLl93YWl0VGltZSA9IDEwMDAwOwogIF90aGlzLl9tZXNzYWdlQnVzID0gbWVzc2FnZUJ1czsKCiAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3RoaXMuX3VybCwgZnVuY3Rpb24gKG1zZykgewoKICAgIHZhciBpZGVudGl0aWVzID0gbXNnLmJvZHkudmFsdWUuaWRlbnRpdGllczsKICAgIHZhciBpZHBzID0gbXNnLmJvZHkudmFsdWUuaWRwczsKCiAgICB2YXIgdmFsdWUgPSB2b2lkIDA7CgogICAgaWYgKGlkZW50aXRpZXNbMF0gIT09IHVuZGVmaW5lZCkgewogICAgICB2YWx1ZSA9IHsgdHlwZTogJ2lkZW50aXR5JywgdmFsdWU6IGlkZW50aXRpZXNbMF0sIGNvZGU6IDIwMCB9OwogICAgfSBlbHNlIHsKICAgICAgdmFsdWUgPSB7IHR5cGU6ICdpZHAnLCB2YWx1ZTogaWRwc1swXSwgY29kZTogMjAwIH07CiAgICB9CgogICAgdmFyIHJlcGx5TXNnID0geyBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogdmFsdWUgfTsKCiAgICAvLyB0byB0ZXN0IG9uIHRoZSBpZGVudGl0eSBzaWRlIHRoZSBsaXN0ZW5lciB3aXRob3V0IHRoZSB0aW1lb3V0CiAgICAvLyBjYW4gcmVwcmVzZW50IHRoZSB0aW1lIHRoZSB1c2VyIHRha2VzIHRvIGNob29zZSBhbmQgaWRlbnRpdHkKICAgIGlmIChtc2cuYm9keS52YWx1ZSA9PT0gJ3dhaXQnKSB7CgogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7CiAgICAgIH0sIF90aGlzLl93YWl0VGltZSk7CiAgICB9IGVsc2UgewogICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7CiAgICB9CiAgfSk7Cn07CgpleHBvcnRzLmRlZmF1bHQgPSBHdWlGYWtlOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1fV0sNDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogVGhlIElkZW50aXR5IERhdGEgTW9kZWwgaXMgdXNlZCB0byBtb2RlbCB0aGUgcmVUSElOSyBVc2VyIGVudGl0eS4gVGhlIElkZW50aXR5IGRhdGEgbW9kZWwgaXMgaGFuZGxlZCBieSBJZGVudGl0eSBNYW5hZ2VtZW50IGZ1bmN0aW9uYWxpdHkuCioKKi8KdmFyIElkZW50aXR5ID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIElkZW50aXR5KGd1aWQsIHR5cGUpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIElkZW50aXR5KTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLmd1aWQgPSBndWlkOwogICAgX3RoaXMudHlwZSA9IHR5cGU7CiAgICBfdGhpcy5pZGVudGlmaWVyc0xpc3QgPSB7fTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKElkZW50aXR5LCBbewogICAga2V5OiAnYWRkSWRlbnRpdHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZElkZW50aXR5KGlkZW50aWZpZXIpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGlkZW50aXR5SW5mb3JtYXRpb24gPSB7CiAgICAgICAgaWRBc3NlcnRpb246ICcnLAogICAgICAgIHNlcnZpY2VBZGRyZXNzOiAnJywKICAgICAgICBhdXRoZW50aWNhdGlvbkRhdGE6ICcnLAogICAgICAgIGF1dGhvcmlzYXRpb25EYXRhOiAnJywKICAgICAgICB1c2VyUHJvZmlsZTogJycKICAgICAgfTsKICAgICAgX3RoaXMuaWRlbnRpZmllcnNMaXN0W2lkZW50aWZpZXJdID0gaWRlbnRpdHlJbmZvcm1hdGlvbjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdhZGRJZEFzc2VydGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkSWRBc3NlcnRpb24oaWRlbnRpZmllciwgYXNzZXJ0aW9uLCBpZHAsIHNjb3BlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgbmV3SWRBc3NlcnRpb24gPSBuZXcgSWRBc3NlcnRpb24oYXNzZXJ0aW9uLCBpZHAsIHNjb3BlKTsKCiAgICAgIF90aGlzLmlkQXNzZXJ0aW9uTGlzdC5wdXNoKG5ld0lkQXNzZXJ0aW9uKTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIElkZW50aXR5Owp9KCk7Cgp2YXIgSWRBc3NlcnRpb24gPSBmdW5jdGlvbiBJZEFzc2VydGlvbihhc3NlcnRpb24sIGlkcCwgc2NvcGUpIHsKICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBJZEFzc2VydGlvbik7CgogIHZhciBfdGhpcyA9IHRoaXM7CgogIF90aGlzLmFzc2VydGlvbiA9IGFzc2VydGlvbjsKICBfdGhpcy5pZHAgPSBpZHA7CiAgX3RoaXMuc2NvcGUgPSBzY29wZTsKfTsKCnZhciBJZFZhbGlkYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gSWRWYWxpZGF0aW9uKGlkZW50aXR5LCBjb250ZW50cykgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSWRWYWxpZGF0aW9uKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgX3RoaXMuaWRlbnRpdHkgPSBpZGVudGl0eTsKICAgIF90aGlzLmNvbnRlbnRzID0gY29udGVudHM7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShJZFZhbGlkYXRpb24sIFt7CiAgICBrZXk6ICd2YWxpZGF0ZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlcyhpZGVudGl0eSwgY29udGVudHMpIHsKICAgICAgLy9UT0RPIGltcGxlbWVudCB0aGUgbG9naWMKCiAgICB9CiAgfV0pOwogIHJldHVybiBJZFZhbGlkYXRpb247Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IElkZW50aXR5Owptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2fV0sNDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnknKTsKCnZhciBfc3RyaW5naWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ2lmeSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMuanMnKTsKCnZhciBfSWRlbnRpdHkgPSByZXF1aXJlKCcuL0lkZW50aXR5Jyk7Cgp2YXIgX0lkZW50aXR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0lkZW50aXR5KTsKCnZhciBfQ3J5cHRvID0gcmVxdWlyZSgnLi9DcnlwdG8nKTsKCnZhciBfQ3J5cHRvMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NyeXB0byk7Cgp2YXIgX0d1aUZha2UgPSByZXF1aXJlKCcuL0d1aUZha2UnKTsKCnZhciBfR3VpRmFrZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9HdWlGYWtlKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKgoqIFRoZSBJZGVudGl0eSBNb2R1bGUgKElkIE1vZHVsZSkgaXMgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlCiogdXNlciBpZGVudGl0eSBhbmQgdGhlIGFzc29jaWF0aW9uIG9mIHRoaXMgaWRlbnRpdHkgd2l0aCB0aGUgSHlwZXJ0eSBpbnN0YW5jZXMsCiogaW4gb3JkZXIgdG8gbWFrZSBIeXBlcnR5IGluc3RhbmNlcyBpZGVudGlmaWFibGUuIFRoZSBpZGVudGl0eSBpbiB0aGUgcmVUSElOSyBwcm9qZWN0CiogaXMgbm90IGZpeGVkIHRvIGEgdW5pcXVlIElkZW50aXR5IFNlcnZpY2UgUHJvdmlkZXIsIGJ1dCBvYnRhaW5lZCB0aHJvdWdoIHNldmVyYWwKKiBkaWZmZXJlbnQgSWRlbnRpdHkgc291cmNlcy4gV2l0aCB0aGlzIGFwcHJvYWNoLCB0aGUgSWQgTW9kdWxlIHByb3ZpZGVzIHRvIHRoZSB1c2VyIHRoZQoqIG9wdGlvbiB0byBjaG9vc2UgdGhlIHByZWZlcnJlZCBtZXRob2QgZm9yIGF1dGhlbnRpY2F0aW9uLgoqIFRoaXMgbW9kdWxlIHdpbGwgdGh1cyBhYmxlIHRvIHN1cHBvcnQgbXVsdGlwbGUgSWRlbnRpdHkgYWNxdWlzaXRpb24gbWV0aG9kcywKKiBzdWNoIGFzIE9wZW5JRCBjb25uZWN0IDEuMCwgS2VyYmVyb3MgU3lzdGVtLCBvciBhdXRoZW50aWNhdGlvbiB0aHJvdWdoIHNtYXJ0IGNhcmRzLgoqIEZvciBleGFtcGxlLCBhIHVzZXIgd2l0aCBhIEdvb2dsZSBhY2NvdW50IGNhbiB1c2UgdGhlIEdvb2dsZSBhcyBhbiBJZGVudGl0eSBQcm92aWRlciB0byBwcm92aWRlIElkZW50aXR5IFRva2VucywKKiAgd2hpY2ggY2FuIGJlIHVzZWQgYnkgdGhlIElkZW50aXR5IE1vZHVsZSB0byBhc3NvY2lhdGUgaXQgd2l0aCBhIEh5cGVydHkgaW5zdGFuY2UuCioKKiBUaGUgSWRlbnRpdHkgTW9kdWxlIHVzZXMgYSBub2RlIHBhY2thZ2UsIHRoZSBIZWxsb0pTLCB3aGljaCBpcyBhIGNsaWVudC1zaWRlIEphdmFTY3JpcHQgQVBJIGZvciBhdXRoZW50aWNhdGlvbgoqIHRoYXQgZmFjaWxpdGF0ZXMgdGhlIHJlcXVlc3RzIGZvciB0aGUgT3BlbklEIGNvbm5lY3QgcHJvdG9jb2wuIFRoaXMgbWV0aG9kIGFsbG93cyBmb3Igc29tZSBhYnN0cmFjdGlvbgoqIHdoZW4gbWFraW5nIHJlcXVlc3RzIGZvciBkaWZmZXJlbnQgSWRlbnRpdHkgUHJvdmlkZXJzLCBzdWNoIGFzIE9wZW5JRCBjb25uZWN0IHVzZWQgYnkgR29vZ2xlLCBGYWNlYm9vaywgTWljcm9zb2Z0LCBmb3IgZXhhbXBsZS4KKgoqIFdoZW4gYSByZXF1ZXN0IGZvciBhIHVzZXIgaWRlbnRpdHkgaXMgbWFkZSB1c2luZyB0aGUgbWV0aG9kIGxvZ2luV2l0aFJQKGlkZW50aWZpZXIsIHNjb3BlKSwKKiB0aGlzIG1ldGhvZCB3aWxsIGFuYWx5c2UgdGhlIElkZW50aXR5IFByb3ZpZGVyIGNob3NlbiB0byBvYnRhaW4gYW4gaWRlbnRpdHkgYW5kIHdpbGwgdXNlIHRoZSBIZWxsb0pTIG5vZGUgcGFja2FnZQoqIHdpdGggdGhlIHNlbGVjdGVkIElkZW50aXR5IFByb3ZpZGVyIGFuZCBpZGVudGl0eSBzY29wZS4gQWZ0ZXIgdGhlIEhlbGxvSlMgcmVxdWVzdCBmb3IgYW4gQWNjZXNzIFRva2VuCiogdG8gdGhlIElkZW50aXR5IFByb3ZpZGVycywgdGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCB0byBhdXRoZW50aWNhdGUgdG93YXJkcyB0aGUgSWRlbnRpdHkgUHJvdmlkZXIuCiogVXBvbiByZWNlaXZpbmcgdGhlIEFjY2VzcyBUb2tlbiwgdGhpcyB0b2tlbiBpcyB2YWxpZGF0ZWQgd2l0aCBhIFJFU1RmdWwgd2ViIHNlcnZpY2UgcmVxdWVzdCB0byBhbiBlbmRwb2ludAoqIG9uIHRoZSBJZGVudGl0eSBQcm92aWRlciBBdXRob3JpemF0aW9uIFNlcnZlciwgYW5kIGFmdGVyIHRoZSB2YWxpZGF0aW9uIGlzIGRvbmUsCiogYW4gSUQgdG9rZW4gaXMgb2J0YWluZWQgd2l0aCB0aGUgaW5mb3JtYXRpb24gYWNjb3JkaW5nIHRvIHRoZSBzY29wZSByZXF1aXJlZC4KKiBUaGlzIElEIHRva2VuIGlzIHRoZW4gcHJlc2VydmVkIGluIHRoaXMgbW9kdWxlIHRoYXQgY2FuIG9idGFpbmVkIHRocm91Z2ggdGhlIGdldElkZW50aXRpZXMoKQoqIGFuZCBpcyBwYXNzZWQgYXMgcmV0dXJuIHZhbHVlIG9mIHRoZSBsb2dpbldpdGhSUCBmdW5jdGlvbi4gVGhlIG1ldGhvZHMgZ2VuZXJhdGVBc3NlcnRpb24gYW5kIHZhbGlkYXRlQXNzZXJ0aW9uIGhhdmUgbm90IHlldCBiZWVuIGRldmVsb3BlZC4KKgoqLwp2YXIgSWRlbnRpdHlNb2R1bGUgPSBmdW5jdGlvbiAoKSB7CgogIC8qKgogICogVGhpcyBpcyB0aGUgY29uc3RydWN0b3IgdG8gaW5pdGlhbGlzZSB0aGUgSWRlbnRpdHkgTW9kdWxlIGl0IGRvZXMgbm90IHJlcXVpcmUgYW55IGlucHV0LgogICovCiAgZnVuY3Rpb24gSWRlbnRpdHlNb2R1bGUocnVudGltZVVSTCwgcnVudGltZUNhcGFiaWxpdGllcywgc3RvcmFnZU1hbmFnZXIpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIElkZW50aXR5TW9kdWxlKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7CiAgICBpZiAoIXN0b3JhZ2VNYW5hZ2VyKSB0aHJvdyBuZXcgRXJyb3IoJ3N0b3JhZ2VNYW5hZ2VyIGlzIG1pc3NpbmcnKTsKCiAgICBfdGhpcy5fcnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7CiAgICBfdGhpcy5zdG9yYWdlTWFuYWdlciA9IHN0b3JhZ2VNYW5hZ2VyOwogICAgX3RoaXMuX2lkbVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZG0nOwogICAgX3RoaXMuX2d1aVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZGVudGl0eS1ndWknOwogICAgX3RoaXMucnVudGltZUNhcGFiaWxpdGllcyA9IHJ1bnRpbWVDYXBhYmlsaXRpZXM7CgogICAgX3RoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShfdGhpcy5fcnVudGltZVVSTCkuZG9tYWluOwoKICAgIC8vdG8gc3RvcmUgaXRlbXMgd2l0aCB0aGlzIGZvcm1hdDoge2lkZW50aXR5OiBpZGVudGl0eVVSTCwgdG9rZW46IHRva2VuSUR9CiAgICBfdGhpcy5pZGVudGl0aWVzID0gW107CiAgICBfdGhpcy5lbWFpbHNMaXN0ID0gW107CiAgICB2YXIgbmV3SWRlbnRpdHkgPSBuZXcgX0lkZW50aXR5Mi5kZWZhdWx0KCdndWlkJywgJ0hVTUFOJyk7CiAgICBfdGhpcy5pZGVudGl0eSA9IG5ld0lkZW50aXR5OwogICAgX3RoaXMuY3J5cHRvID0gbmV3IF9DcnlwdG8yLmRlZmF1bHQoKTsKCiAgICAvL3N0b3JlcyB0aGUgYXNzb2NpYXRpb24gb2YgdGhlIGRhdGFPYmplY3QgYW5kIHRoZSBIeXBlcnR5IHJlZ2lzdGVyZWQgd2l0aGluCiAgICBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5ID0ge307CgogICAgLy8gaGFzaFRhYmxlIHRvIHN0b3JlIGFsbCB0aGUgY3J5cHRvIGluZm9ybWF0aW9uIGJldHdlZW4gdHdvIGh5cGVydGllcwogICAgX3RoaXMuY2hhdEtleXMgPSB7fTsKCiAgICAvLyBoYXNoVGFibGUgdG8gc3RvcmUgdGhlIHN5bW1ldHJpYyBrZXlzIHRvIGJlIHVzZWQgaW4gdGhlIGNoYXQgZ3JvdXAKICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5cyA9IHt9OwoKICAgIC8vZmFpbHNhZmUgdG8gZW5hYmxlL2Rpc2FibGUgYWxsIHRoZSBjcmlwdG9ncmFwaGljIGZ1bmN0aW9ucwogICAgX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSB0cnVlOwoKICAgIC8vIHZhcmlhYmxlIHRvIGtub3cgaWYgdGhlIEdVSSBpcyBkZXBsb3llZCB0byBjaG9vc2UgdGhlIGlkZW50aXR5LiBpZiB0aGUgcmVhbCBHVUkgaXMgbm90IGRlcGxveWVkLCBhIGZha2UgZ3VpIGlzIGRlcGxveWVkIGluc3RlYWQuCiAgICBfdGhpcy5ndWlEZXBsb3llZCA9IGZhbHNlOwoKICAgIC8vIHZlcmlmaWNhdGlvbiBvZiBub2RlSlMsIGFuZCBpbiBjYXNlIGl0IGlzIG5vZGVKUyB0aGVuIGRpc2FibGUgZW5jcnlwdGlvbgogICAgLy8gVE9ETyBpbXByb3ZlIGxhdGVyLCB0aGlzIGV4aXN0cyBiZWNhdXNlIHRoZSBjcnlwdG8gbGliIHVzZXMgYnJvd3NlciBjcnlwdG9ncmFwaGljIG1ldGhvZHMKICAgIC8vX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSAod2luZG93KSA/IHRydWUgOiBmYWxzZTsKCiAgICBfdGhpcy5fbG9hZElkZW50aXRpZXMoKTsKICB9CgogIC8qKgogICogcmV0dXJuIHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnkKICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXMKICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoSWRlbnRpdHlNb2R1bGUsIFt7CiAgICBrZXk6ICdnZXRJZGVudGl0aWVzJywKCgogICAgLyoqCiAgICAqIEZ1bmN0aW9uIHRvIHJldHVybiBhbGwgdGhlIGlkZW50aXRpZXMgcmVnaXN0ZXJlZCB3aXRoaW4gYSBzZXNzaW9uIGJ5IGEgdXNlci4KICAgICogVGhlc2UgaWRlbnRpdGllcyBhcmUgcmV0dXJuZWQgaW4gYW4gYXJyYXkgY29udGFpbmluZyBhIEpTT04gcGFja2FnZSBmb3IgZWFjaCB1c2VyIGlkZW50aXR5LgogICAgKiBAcmV0dXJuIHtBcnJheTxJZGVudGl0aWVzPn0gICAgICAgICBJZGVudGl0aWVzCiAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkZW50aXRpZXMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5pZGVudGl0aWVzOwogICAgfQoKICAgIC8qKgogICAgKiBnZXRzIGFsbCB0aGUgaW5mb3JtYXRpb24gZnJvbSBhIGdpdmVuIHVzZXJVUkwKICAgICogQHBhcmFtICB7U3RyaW5nfSAgdXNlclVSTCAgICAgdXNlciB1cmwKICAgICogQHJldHVybiB7SlNPTn0gICAgaWRlbnRpdHkgICAgaWRlbnRpdHkgYnVuZGxlIGZyb20gdGhlIHVzZXJVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldElkZW50aXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZGVudGl0eSh1c2VyVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CgogICAgICAgIHZhciBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdOwogICAgICAgIGlmIChpZGVudGl0eS5pZGVudGl0eSA9PT0gdXNlclVSTCkgewogICAgICAgICAgcmV0dXJuIGlkZW50aXR5OwogICAgICAgIH0KICAgICAgfQoKICAgICAgdGhyb3cgJ2lkZW50aXR5IG5vdCBmb3VuZCc7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2xvYWRJZGVudGl0aWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfbG9hZElkZW50aXRpZXMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUpIHsKCiAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdpZE1vZHVsZTppZGVudGl0aWVzJykudGhlbihmdW5jdGlvbiAoaWRlbnRpdGllcykgewoKICAgICAgICAgIGlmIChpZGVudGl0aWVzKSB7CiAgICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMgPSBpZGVudGl0aWVzOwogICAgICAgICAgfQogICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZXBsb3lHVUknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlcGxveUdVSSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMuZ3VpRGVwbG95ZWQgPSB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldElkZW50aXR5T2ZIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZGVudGl0eU9mSHlwZXJ0eShoeXBlcnR5VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgc3BsaXRVUkwgPSBoeXBlcnR5VVJMLnNwbGl0KCc6Ly8nKTsKICAgICAgICBpZiAoc3BsaXRVUkxbMF0gIT09ICdoeXBlcnR5JykgewogICAgICAgICAgX3RoaXMuX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdChoeXBlcnR5VVJMKS50aGVuKGZ1bmN0aW9uIChyZXR1cm5lZEh5cGVydHlVUkwpIHsKICAgICAgICAgICAgdmFyIHVzZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIocmV0dXJuZWRIeXBlcnR5VVJMKTsKICAgICAgICAgICAgaWYgKHVzZXJVUkwpIHsKCiAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gX3RoaXMuaWRlbnRpdGllcykgewogICAgICAgICAgICAgICAgdmFyIGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07CiAgICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaWRlbnRpdHkubWVzc2FnZUluZm8pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBpZGVudGl0eSB3YXMgZm91bmQgJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgdXNlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKTsKICAgICAgICAgIGlmICh1c2VyVVJMKSB7CgogICAgICAgICAgICBmb3IgKHZhciBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7CiAgICAgICAgICAgICAgdmFyIGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07CiAgICAgICAgICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBpZGVudGl0eSB3YXMgZm91bmQuJyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdnZXRJZGVudGl0aWVzVG9DaG9vc2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldElkZW50aXRpZXNUb0Nob29zZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGlkZW50aXRpZXMgPSBfdGhpcy5lbWFpbHNMaXN0OwogICAgICB2YXIgaWRwcyA9IFsnZ29vZ2xlLmNvbScsICdtaWNyb3NvZnQuY29tJywgJ29yYW5nZS5mciddOwoKICAgICAgcmV0dXJuIHsgaWRlbnRpdGllczogaWRlbnRpdGllcywgaWRwczogaWRwcyB9OwogICAgfQoKICAgIC8qKgogICAgKiBGdW5jdGlvbiB0byByZXR1cm4gYWxsIHRoZSB1c2VycyBVUkxzIHJlZ2lzdGVyZWQgd2l0aGluIGEgc2Vzc2lvbgogICAgKiBUaGVzZSB1c2VycyBVUkxzIGFyZSByZXR1cm5lZCBpbiBhbiBhcnJheSBvZiBzdHJpbmdzLgogICAgKiBAcGFyYW0gIHtCb29sZWFufSAgZW1haWxGb3JtYXQgKE9wdGlvbmFsKSAgIGJvb2xlYW4gdG8gaW5kaWNhdGUgdG8gcmV0dXJuIGluIGVtYWlsIGZvcm1hdAogICAgKiBAcmV0dXJuIHtBcnJheTxTdHJpbmc+fSAgICAgICAgIHVzZXJzCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRVc2Vyc0lEcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlcnNJRHMoZW1haWxGb3JtYXQpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHVzZXJzID0gW107CgogICAgICAvL2lmIHJlcXVlc3QgY29tZXMgd2l0aCB0aGUgZW1haWxGb3JtYXQgb3B0aW9uLCB0aGVuIGNvbnZlcnQgdXJsIHRvIGVtYWlsIGZvcm1hdAogICAgICB2YXIgY29udmVydGVyID0gZW1haWxGb3JtYXQgPyBfdXRpbHMuZ2V0VXNlckVtYWlsRnJvbVVSTCA6IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfTsKCiAgICAgIGZvciAodmFyIGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICB2YXIgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTsKICAgICAgICB1c2Vycy5wdXNoKGNvbnZlcnRlcihpZGVudGl0eS5pZGVudGl0eSkpOwogICAgICB9CiAgICAgIHJldHVybiB1c2VyczsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBJZGVudGl0eSB3aXRoaW4gYSBzZXNzaW9uCiAgICAqIEByZXR1cm4ge0lkZW50aXR5fSAgICAgICAgaWRlbnRpdHkgICAgICAgICBpZGVudGl0eQogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0Q3VycmVudElkZW50aXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50SWRlbnRpdHkoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5jdXJyZW50SWRlbnRpdHk7CiAgICB9CgogICAgLyoqCiAgICAqIEZ1bmN0aW9uIHRvIHNldCB0aGUgY3VycmVudCBJZGVudGl0eSB3aXRoIGEgZ2l2ZW4gSWRlbnRpdHkKICAgICogQHBhcmFtIHtJZGVudGl0eX0gICAgICAgIGlkZW50aXR5ICAgICAgICAgaWRlbnRpdHkKICAgICovCgogIH0sIHsKICAgIGtleTogJ3NldEN1cnJlbnRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q3VycmVudElkZW50aXR5KGlkZW50aXR5KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IGlkZW50aXR5OwogICAgfQoKICAgIC8qKgogICAgKiBGdW5jdGlvbiB0byByZW1vdmUgYW4gaWRlbnRpdHkgZnJvbSB0aGUgSWRlbnRpdGllcyBhcnJheQogICAgKiBAcGFyYW0ge1N0cmluZ30gICAgdXNlcklEICAgICAgdXNlcklECiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkZWxldGVJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlSWRlbnRpdHkodXNlcklEKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgdXNlclVSTCA9ICgwLCBfdXRpbHMuY29udmVydFRvVXNlclVSTCkodXNlcklEKTsKCiAgICAgIGZvciAodmFyIGlkZW50aXR5IGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0uaWRlbnRpdHkgPT09IHVzZXJVUkwpIHsKICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMuc3BsaWNlKGlkZW50aXR5LCAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gdW5yZWdpc3RlciBhbiBpZGVudGl0eSBmcm9tIHRoZSBlbWFpbHNMaXN0IGFycmF5IGFuZCBub3Qgc2hvdyBpbiB0byB0aGUgR1VJCiAgICAqIEBwYXJhbSB7U3RyaW5nfSAgICBlbWFpbCAgICAgIGVtYWlsCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd1bnJlZ2lzdGVySWRlbnRpdHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJJZGVudGl0eShlbWFpbCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgZm9yICh2YXIgZSBpbiBfdGhpcy5lbWFpbHNMaXN0KSB7CiAgICAgICAgaWYgKF90aGlzLmVtYWlsc0xpc3RbZV0gPT09IGVtYWlsKSB7CiAgICAgICAgICBfdGhpcy5lbWFpbHNMaXN0LnNwbGljZShlLCAxKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdGhhdCByZXNvbHZlIGFuZCBjcmVhdGUgdGhlIGRvbWFpblVSTCBpbiBjYXNlIGl0IGlzIHByb3ZpZGVkIG9uZS4gSWYgbm90LCByZXNvbHZlIHRoZSBkZWZhdWx0IGRvbWFpblVSTAogICAgKiBAcGFyYW0ge1N0cmluZ30gICAgIGlkcERvbWFpbiAgICAgaWRwRG9tYWluIChPcHRpb25hbCkKICAgICovCgogIH0sIHsKICAgIGtleTogJ19yZXNvbHZlRG9tYWluJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzb2x2ZURvbWFpbihpZHBEb21haW4pIHsKICAgICAgaWYgKCFpZHBEb21haW4pIHsKICAgICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJzsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly8nICsgaWRwRG9tYWluOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIEZ1bmN0aW9uIHRoYXQgc2VuZHMgYSByZXF1ZXN0IHRvIHRoZSBHVUkgdXNpbmcgbWVzc2FnZXMuIFNlbmRzIGFsbCBpZGVudGl0aWVzIHJlZ2lzdGVyZWQgYW5kCiAgICAqIHRoZSBJZHBzIHN1cHBvcnRlZCwgYW5kIHJldHVybiB0aGUgaWRlbnRpdHkvaWRwIHJlY2VpdmVkIGJ5IHRoZSBHVUkKICAgICogQHBhcmFtIHtBcnJheTxpZGVudGl0eT59ICBpZGVudGl0aWVzICAgICAgbGlzdCBvZiBpZGVudGl0aWllcwogICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZz59ICAgIGlkcHMgICAgICAgICAgICBsaXN0IG9mIGlkcHMgdG8gYXV0aGVudGljYXRlCiAgICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgcmV0dXJucyBhIGNob3NlbiBpZGVudGl0eSBvciBpZHAKICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlcXVlc3RJZGVudGl0eVRvR1VJJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0SWRlbnRpdHlUb0dVSShpZGVudGl0aWVzLCBpZHBzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgLy9jb25kaXRpb24gdG8gY2hlY2sgaWYgdGhlIHJlYWwgR1VJIGlzIGRlcGxveWVkLiBJZiBub3QsIGRlcGxveXMgYSBmYWtlIGd1aQogICAgICAgIGlmIChfdGhpcy5ndWlEZXBsb3llZCA9PT0gZmFsc2UpIHsKCiAgICAgICAgICB2YXIgZ3VpRmFrZSA9IG5ldyBfR3VpRmFrZTIuZGVmYXVsdChfdGhpcy5fZ3VpVVJMLCBfdGhpcy5fbWVzc2FnZUJ1cyk7CiAgICAgICAgICBfdGhpcy5ndWlGYWtlID0gZ3VpRmFrZTsKICAgICAgICAgIF90aGlzLmd1aURlcGxveWVkID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnY3JlYXRlJywgdG86IF90aGlzLl9ndWlVUkwsIGZyb206IF90aGlzLl9pZG1VUkwsCiAgICAgICAgICBib2R5OiB7IHZhbHVlOiB7IGlkZW50aXRpZXM6IGlkZW50aXRpZXMsIGlkcHM6IGlkcHMgfSB9IH07CgogICAgICAgIHZhciBpZCA9IF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpOwoKICAgICAgICAvL2FkZCBsaXN0ZW5lciB3aXRob3V0IHRpbW91dAogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZFJlc3BvbnNlTGlzdGVuZXIoX3RoaXMuX2lkbVVSTCwgaWQsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnJlbW92ZVJlc3BvbnNlTGlzdGVuZXIoX3RoaXMuX2lkbVVSTCwgaWQpOwoKICAgICAgICAgIGlmIChtc2cuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgdmFyIHNlbGVjdGVkSWRlbnRpdHkgPSBtc2cuYm9keTsKCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZWxlY3RlZElkZW50aXR5OiAnLCBzZWxlY3RlZElkZW50aXR5LnZhbHVlKTsKICAgICAgICAgICAgcmVzb2x2ZShzZWxlY3RlZElkZW50aXR5KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gcmVxdWVzdGluZyBhbiBpZGVudGl0eSB0byB0aGUgR1VJJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ29wZW5Qb3B1cCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlblBvcHVwKHVybHJlY2VpdmVkKSB7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIHdpbiA9IHdpbmRvdy5vcGVuKHVybHJlY2VpdmVkLCAnb3BlbklEcmVxdWVzdCcsICd3aWR0aD04MDAsIGhlaWdodD02MDAnKTsKICAgICAgICBpZiAod2luZG93LmNvcmRvdmEpIHsKICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB2YXIgdXJsID0gZS51cmw7CiAgICAgICAgICAgIHZhciBjb2RlID0gL1wmY29kZT0oLispJC8uZXhlYyh1cmwpOwogICAgICAgICAgICB2YXIgZXJyb3IgPSAvXCZlcnJvcj0oLispJC8uZXhlYyh1cmwpOwoKICAgICAgICAgICAgaWYgKGNvZGUgfHwgZXJyb3IpIHsKICAgICAgICAgICAgICB3aW4uY2xvc2UoKTsKICAgICAgICAgICAgICByZXNvbHZlKHVybCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgcG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBpZiAod2luLmNsb3NlZCkgewogICAgICAgICAgICAgICAgICByZWplY3QoJ1NvbWUgZXJyb3Igb2NjdXJlZCB3aGVuIHRyeWluZyB0byBnZXQgaWRlbnRpdHkuJyk7CiAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAod2luLmRvY3VtZW50LlVSTC5pbmRleE9mKCdpZF90b2tlbicpICE9PSAtMSB8fCB3aW4uZG9jdW1lbnQuVVJMLmluZGV4T2YobG9jYXRpb24ub3JpZ2luKSAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTsKICAgICAgICAgICAgICAgICAgdmFyIHVybCA9IHdpbi5kb2N1bWVudC5VUkw7CgogICAgICAgICAgICAgICAgICB3aW4uY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh1cmwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCA1MDApOwogICAgICAgICAgfSkoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBGdW5jdGlvbiB0aGF0IGZldGNoIGFuIGlkZW50aXR5QXNzZXJ0aW9uIGZyb20gYSB1c2VyLgogICAgKgogICAgKiBAcmV0dXJuIHtJZEFzc2VydGlvbn0gICAgICAgICAgICAgIElkQXNzZXJ0aW9uCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRJZGVudGl0eUFzc2VydGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SWRlbnRpdHlBc3NlcnRpb24oaWRlbnRpZmllciwgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGlkcERvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vQ0hFQ0sgd2hldGhlciBpcyBicm93c2VyIGVudmlyb25tZW50IG9yIG5vZGVqcwogICAgICAgIC8vaWYgaXQgaXMgYnJvd3NlciwgdGhlbiBjcmVhdGUgYSBmYWtlIGlkZW50aXR5CgogICAgICAgIF90aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMuaXNBdmFpbGFibGUoJ2Jyb3dzZXInKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdydW50aW1lIGJyb3dzZXIgaWRlbnRpdHkgYWNxdWlzaXRpb24gJywgcmVzdWx0KTsKCiAgICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuOwoKICAgICAgICAgIHZhciBpZGVudGl0aWVzSW5mbyA9IF90aGlzLmdldElkZW50aXRpZXNUb0Nob29zZSgpOwoKICAgICAgICAgIF90aGlzLnJlcXVlc3RJZGVudGl0eVRvR1VJKGlkZW50aXRpZXNJbmZvLmlkZW50aXRpZXMsIGlkZW50aXRpZXNJbmZvLmlkcHMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CgogICAgICAgICAgICBpZiAodmFsdWUudHlwZSA9PT0gJ2lkZW50aXR5JykgewoKICAgICAgICAgICAgICB2YXIgY2hvc2VuSUQgPSAoMCwgX3V0aWxzLmdldFVzZXJVUkxGcm9tRW1haWwpKHZhbHVlLnZhbHVlKTsKCiAgICAgICAgICAgICAgLy8gcmV0dXJucyB0aGUgaWRlbnRpdHkgaW5mbyBmcm9tIHRoZSBjaG9zZW4gaWQKICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIF90aGlzLmlkZW50aXRpZXMpIHsKICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pZGVudGl0aWVzW2ldLmlkZW50aXR5ID09PSBjaG9zZW5JRCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5pZGVudGl0aWVzW2ldLm1lc3NhZ2VJbmZvKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmVqZWN0KCdubyBpZGVudGl0eSB3YXMgZm91bmQgLicpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnR5cGUgPT09ICdpZHAnKSB7CgogICAgICAgICAgICAgIF90aGlzLmNhbGxHZW5lcmF0ZU1ldGhvZHModmFsdWUudmFsdWUsIG9yaWdpbikudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gR1VJIHJlY2VpdmVkIG1lc3NhZ2UuJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIG9uIGlkZW50aXR5IGFjcXVpc2l0aW9uICcsIGVycm9yKTsKICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMuaXNBdmFpbGFibGUoJ25vZGUnKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdub2RlIGlkZW50aXR5IGFjcXVpc2l0aW9uICcsIHJlc3VsdCk7CgogICAgICAgICAgaWYgKCFyZXN1bHQpIHJldHVybjsKCiAgICAgICAgICBpZiAoX3RoaXMuY3VycmVudElkZW50aXR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgLy9UT0RPIHZlcmlmeSB3aGV0aGVyIHRoZSB0b2tlbiBpcyBzdGlsbCB2YWxpZCBvciBub3QuCiAgICAgICAgICAgIC8vIHNob3VsZCBiZSBuZWVkZWQgdG8gbWFrZSBmdXJ0aGVyIHJlcXVlc3RzLCB0byBvYnRhaW4gYSB2YWxpZCB0b2tlbgogICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5jdXJyZW50SWRlbnRpdHkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0SWRlbnRpdHlBc3NlcnRpb24gZm9yIG5vZGVqcycpOwogICAgICAgICAgICAgIHZhciByYW5kb21OdW1iZXIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCArIDEpOwogICAgICAgICAgICAgIHZhciBpZGVudGl0eUJ1bmRsZSA9IHsKICAgICAgICAgICAgICAgIGFzc2VydGlvbjogJ2Fzc2VydGlvbicsCiAgICAgICAgICAgICAgICBpZHA6ICdub2RlanMnLAogICAgICAgICAgICAgICAgdXNlclByb2ZpbGU6IHsKICAgICAgICAgICAgICAgICAgYXZhdGFyOiAnaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1XYUNyalZNTVYtUS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBcy84T2xWcUNwU0I5Yy9waG90by5qcGcnLAogICAgICAgICAgICAgICAgICBjbjogJ3Rlc3Qgbm9kZWpzJywKICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdub2RlanMtJyArIHJhbmRvbU51bWJlciArICdAbm9kZWpzLmNvbScsCiAgICAgICAgICAgICAgICAgIHVzZXJVUkw6ICd1c2VyOi8vbm9kZWpzLmNvbS9ub2RlanMtJyArIHJhbmRvbU51bWJlcgogICAgICAgICAgICAgICAgfSB9OwogICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IGlkZW50aXR5QnVuZGxlOwogICAgICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMucHVzaChpZGVudGl0eUJ1bmRsZSk7CiAgICAgICAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdpZE1vZHVsZTppZGVudGl0aWVzJywgMCwgX3RoaXMuaWRlbnRpdGllcykudGhlbihmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaWRlbnRpdHlCdW5kbGUpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KSgpOwogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIG9uIGlkZW50aXR5IGFjcXVpc2l0aW9uICcsIGVycm9yKTsKICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2NhbGxHZW5lcmF0ZU1ldGhvZHMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhbGxHZW5lcmF0ZU1ldGhvZHMoaWRwLCBvcmlnaW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgcHVibGljS2V5ID0gdm9pZCAwOwogICAgICAgIHZhciB1c2Vya2V5UGFpciA9IHZvaWQgMDsKCiAgICAgICAgLy9nZW5lcmF0ZXMgdGhlIFJTQSBrZXkgcGFpcgogICAgICAgIF90aGlzLmNyeXB0by5nZW5lcmF0ZVJTQUtleVBhaXIoKS50aGVuKGZ1bmN0aW9uIChrZXlQYWlyKSB7CgogICAgICAgICAgcHVibGljS2V5ID0gYnRvYShrZXlQYWlyLnB1YmxpYyk7CiAgICAgICAgICB1c2Vya2V5UGFpciA9IGtleVBhaXI7CiAgICAgICAgICByZXR1cm4gX3RoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocHVibGljS2V5LCBvcmlnaW4sICcnLCB1c2Vya2V5UGFpciwgaWRwKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgdXJsLCB1c2Vya2V5UGFpciwgaWRwKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgaWYgKHZhbHVlKSB7CiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBvYnRhaW5pbmcgSWRlbnRpdHknKTsKICAgICAgICAgIH0KICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3NlbmRHZW5lcmF0ZU1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmRHZW5lcmF0ZU1lc3NhZ2UoY29udGVudHMsIG9yaWdpbiwgdXNlcm5hbWVIaW50LCBpZHBEb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGRvbWFpbiA9IF90aGlzLl9yZXNvbHZlRG9tYWluKGlkcERvbWFpbik7CiAgICAgIHZhciBtZXNzYWdlID0gdm9pZCAwOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgbWVzc2FnZSA9IHsgdHlwZTogJ2V4ZWN1dGUnLCB0bzogZG9tYWluLCBmcm9tOiBfdGhpcy5faWRtVVJMLCBib2R5OiB7IHJlc291cmNlOiAnaWRlbnRpdHknLCBtZXRob2Q6ICdnZW5lcmF0ZUFzc2VydGlvbicsIHBhcmFtczogeyBjb250ZW50czogY29udGVudHMsIG9yaWdpbjogb3JpZ2luLCB1c2VybmFtZUhpbnQ6IHVzZXJuYW1lSGludCB9IH0gfTsKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVzLmJvZHkudmFsdWU7CgogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdzdG9yZUlkZW50aXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9yZUlkZW50aXR5KHJlc3VsdCwga2V5UGFpcikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBzcGxpdGVkQXNzZXJ0aW9uID0gcmVzdWx0LmFzc2VydGlvbi5zcGxpdCgnLicpOwogICAgICAgIHZhciBhc3NlcnRpb25QYXJzZWQgPSB2b2lkIDA7CgogICAgICAgIC8vdmVyaWZ5IGlmIHRoZSB0b2tlbiBjb250YWlucyB0aGUgMyBjb21wb25lbnRzLCBvciBqdXN0IHRoZSBhc3NlcnRpb24KICAgICAgICBpZiAoc3BsaXRlZEFzc2VydGlvblsxXSkgewogICAgICAgICAgYXNzZXJ0aW9uUGFyc2VkID0gSlNPTi5wYXJzZShhdG9iKHNwbGl0ZWRBc3NlcnRpb25bMV0pKTsKICAgICAgICB9IGVsc2UgewoKICAgICAgICAgIGFzc2VydGlvblBhcnNlZCA9IEpTT04ucGFyc2UoYXRvYihyZXN1bHQuYXNzZXJ0aW9uKSk7CiAgICAgICAgfQogICAgICAgIHZhciBpZFRva2VuID0gdm9pZCAwOwoKICAgICAgICAvL1RPRE8gcmVtb3ZlIHRoZSB2ZXJpZmljYXRpb24gYW5kIHJlbW92ZSB0aGUgdG9rZW5JREpTT04gZnJvbSB0aGUgZ29vZ2xlIGlkcFByb3h5OwogICAgICAgIGlmIChhc3NlcnRpb25QYXJzZWQudG9rZW5JREpTT04pIHsKICAgICAgICAgIGlkVG9rZW4gPSBhc3NlcnRpb25QYXJzZWQudG9rZW5JREpTT047CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlkVG9rZW4gPSBhc3NlcnRpb25QYXJzZWQ7CiAgICAgICAgfQoKICAgICAgICB2YXIgZW1haWwgPSBpZFRva2VuLmVtYWlsIHx8IGlkVG9rZW4uc3ViOwoKICAgICAgICB2YXIgaWRlbnRpZmllciA9ICgwLCBfdXRpbHMuZ2V0VXNlclVSTEZyb21FbWFpbCkoZW1haWwpOwoKICAgICAgICByZXN1bHQuaWRlbnRpdHkgPSBpZGVudGlmaWVyOwoKICAgICAgICBfdGhpcy5pZGVudGl0eS5hZGRJZGVudGl0eShyZXN1bHQpOwoKICAgICAgICAvLyBjaGVjayBpZiBleGlzdHMgYW55IGluZm9Ub2tlbiBpbiB0aGUgcmVzdWx0IHJlY2VpdmVkCiAgICAgICAgdmFyIGluZm9Ub2tlbiA9IHJlc3VsdC5pbmZvVG9rZW4gPyByZXN1bHQuaW5mb1Rva2VuIDoge307CgogICAgICAgIHZhciBjb21tb25OYW1lID0gaWRUb2tlbi5uYW1lIHx8IGVtYWlsLnN1YnN0cmluZygwLCBlbWFpbC5pbmRleE9mKCdAJykpOwogICAgICAgIHZhciB1c2VyUHJvZmlsZUJ1bmRsZSA9IHsgdXNlcm5hbWU6IGVtYWlsLCBjbjogY29tbW9uTmFtZSwgYXZhdGFyOiBpbmZvVG9rZW4ucGljdHVyZSwgbG9jYWxlOiBpbmZvVG9rZW4ubG9jYWxlLCB1c2VyVVJMOiBpZGVudGlmaWVyIH07CgogICAgICAgIC8vY3JlYXRpb24gb2YgYSBuZXcgSlNPTiB3aXRoIHRoZSBpZGVudGl0eSB0byBzZW5kIHZpYSBtZXNzYWdlcwogICAgICAgIHZhciBuZXdJZGVudGl0eSA9IHsgdXNlclByb2ZpbGU6IHVzZXJQcm9maWxlQnVuZGxlLCBpZHA6IHJlc3VsdC5pZHAuZG9tYWluLCBhc3NlcnRpb246IHJlc3VsdC5hc3NlcnRpb24gfTsKICAgICAgICByZXN1bHQubWVzc2FnZUluZm8gPSBuZXdJZGVudGl0eTsKICAgICAgICByZXN1bHQua2V5UGFpciA9IGtleVBhaXI7CgogICAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IG5ld0lkZW50aXR5OwoKICAgICAgICAvL3ZlcmlmeSBpZiB0aGUgaWQgYWxyZWFkeSBleGlzdHMuIElmIGFscmVhZHkgZXhpc3RzIHRoZW4gZG8gbm90IGFkZCB0byB0aGUgaWRlbnRpdGllcyBsaXN0OwogICAgICAgIHZhciBpZEFscmVhZHlFeGlzdHMgPSBmYWxzZTsKICAgICAgICB2YXIgb2xkSWQgPSB2b2lkIDA7CiAgICAgICAgZm9yICh2YXIgaWRlbnRpdHkgaW4gX3RoaXMuaWRlbnRpdGllcykgewogICAgICAgICAgaWYgKF90aGlzLmlkZW50aXRpZXNbaWRlbnRpdHldLmlkZW50aXR5ID09PSByZXN1bHQuaWRlbnRpdHkpIHsKICAgICAgICAgICAgaWRBbHJlYWR5RXhpc3RzID0gdHJ1ZTsKICAgICAgICAgICAgb2xkSWQgPSBfdGhpcy5pZGVudGl0aWVzW2lkZW50aXR5XS5tZXNzYWdlSW5mbzsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChpZEFscmVhZHlFeGlzdHMpIHsKICAgICAgICAgIHJlc29sdmUob2xkSWQpOwogICAgICAgICAgdmFyIGV4aXN0cyA9IGZhbHNlOwoKICAgICAgICAgIC8vY2hlY2sgaWYgdGhlIGlkZW50aXR5IGV4aXN0cyBpbiBlbWFpbExpc3QsIGlmIG5vdCBhZGQgaXQKICAgICAgICAgIC8vVGhpcyBpcyB1c2VmdWwgaWYgYW4gaWRlbnRpdHkgd2FzIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBidXQgd2FzIGxhdGVyIHVucmVnaXN0ZXJlZAogICAgICAgICAgZm9yICh2YXIgaSBpbiBfdGhpcy5lbWFpbHNMaXN0KSB7CiAgICAgICAgICAgIGlmIChfdGhpcy5lbWFpbHNMaXN0W2ldID09PSBlbWFpbCkgewogICAgICAgICAgICAgIGV4aXN0cyA9IHRydWU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmICghZXhpc3RzKSB7CiAgICAgICAgICAgIF90aGlzLmVtYWlsc0xpc3QucHVzaChlbWFpbCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzLmVtYWlsc0xpc3QucHVzaChlbWFpbCk7CiAgICAgICAgICBfdGhpcy5pZGVudGl0aWVzLnB1c2gocmVzdWx0KTsKICAgICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgnaWRNb2R1bGU6aWRlbnRpdGllcycsIDAsIF90aGlzLmlkZW50aXRpZXMpLnRoZW4oZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgcmVzb2x2ZShuZXdJZGVudGl0eSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBSZXF1ZXN0cyB0aGUgSWRwUHJveHkgZnJvbSBhIGdpdmVuIERvbWFpbiBmb3IgYW4gaWRlbnRpdHlBc3NlcnRpb24KICAgICoKICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBjb250ZW50cyAgICAgY29udGVudHMKICAgICogQHBhcmFtICB7RE9NU3RyaW5nfSBvcmlnaW4gICAgICAgb3JpZ2luCiAgICAqIEBwYXJhbSAge0RPTVN0cmluZ30gdXNlcm5hbWVIaW50IHVzZXJuYW1lSGludAogICAgKiBAcGFyYW0gIHtKU09OfSAgICAgIGtleVBhaXIgICAgICAgdXNlciBrZXlQYWlyCiAgICAqIEByZXR1cm4ge0lkQXNzZXJ0aW9ufSAgICAgICAgICAgICAgSWRBc3NlcnRpb24KICAgICovCgogIH0sIHsKICAgIGtleTogJ2dlbmVyYXRlQXNzZXJ0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZUFzc2VydGlvbihjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGtleVBhaXIsIGlkcERvbWFpbikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgY29uc29sZS5sb2coJ2dlbmVyYXRlQXNzZXJ0aW9uJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMuc2VuZEdlbmVyYXRlTWVzc2FnZShjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGlkcERvbWFpbikudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CgogICAgICAgICAgaWYgKHJlc3VsdC5sb2dpblVybCkgewoKICAgICAgICAgICAgX3RoaXMub3BlblBvcHVwKHJlc3VsdC5sb2dpblVybCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0KSB7CgogICAgICAgICAgICBfdGhpcy5zdG9yZUlkZW50aXR5KHJlc3VsdCwga2V5UGFpcikudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gb2J0YWluaW5nIGlkZW50aXR5IGluZm9ybWF0aW9uJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBPVEhFUiBVU0VSJ1MgSURFTlRJVFkKICAgICovCgogICAgLyoqCiAgICAqIFJlcXVlc3RzIHRoZSBJZHBQcm94eSBmcm9tIGEgZ2l2ZW4gRG9tYWluIHRvIHZhbGlkYXRlIGFuIElkZW50aXR5QXNzZXJ0aW9uCiAgICAqIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIHJlc3VsdCBmcm9tIHRoZSB2YWxpZGF0aW9uLgogICAgKiBAcGFyYW0gIHtET01TdHJpbmd9IGFzc2VydGlvbgogICAgKiBAcGFyYW0gIHtET01TdHJpbmd9IG9yaWdpbiAgICAgICBvcmlnaW4KICAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICBQcm9taXNlICAgICAgICAgcHJvbWlzZSB3aXRoIHRoZSByZXN1bHQgZnJvbSB0aGUgdmFsaWRhdGlvbgogICAgKi8KCiAgfSwgewogICAga2V5OiAndmFsaWRhdGVBc3NlcnRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlQXNzZXJ0aW9uKGFzc2VydGlvbiwgb3JpZ2luLCBpZHBEb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBkb21haW4gPSBfdGhpcy5fcmVzb2x2ZURvbWFpbihpZHBEb21haW4pOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7IHR5cGU6ICdleGVjdXRlJywgdG86IGRvbWFpbiwgZnJvbTogX3RoaXMuX2lkbVVSTCwgYm9keTogeyByZXNvdXJjZTogJ2lkZW50aXR5JywgbWV0aG9kOiAndmFsaWRhdGVBc3NlcnRpb24nLAogICAgICAgICAgcGFyYW1zOiB7IGFzc2VydGlvbjogYXNzZXJ0aW9uLCBvcmlnaW46IG9yaWdpbiB9IH0gfTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIGlmIChyZXN1bHQuYm9keS5jb2RlID09PSAyMDApIHsKICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQuYm9keS52YWx1ZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ2Vycm9yJywgcmVzdWx0LmJvZHkuY29kZSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuY3J5cHRNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmNyeXB0TWVzc2FnZShtZXNzYWdlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjb25zb2xlLmxvZygnZW5jcnlwdCBtZXNzYWdlICcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgdmFyIGlzSGFuZFNoYWtlVHlwZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2hhbmRzaGFrZSc7CgogICAgICAgIC8vaWYgaXMgbm90IHRvIGFwcGx5IGVuY3J5cHRpb24sIHRoZW4gcmV0dXJucyByZXNvbHZlCiAgICAgICAgaWYgKCFfdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiAmJiAhaXNIYW5kU2hha2VUeXBlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnZW5jcnlwdGlvbiBkaXNhYmxlZCcpOwogICAgICAgICAgcmV0dXJuIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgfQoKICAgICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgbG9naWMgYW5kIG1vdmUgaXQgdG8gYSB1dGlsIGZ1bmN0aW9uCiAgICAgICAgdmFyIHNwbGl0ZWRUb1VSTCA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTsKICAgICAgICB2YXIgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM107CiAgICAgICAgaWYgKHNwbGl0ZWRUb1VSTC5sZW5ndGggPiA2KSB7CiAgICAgICAgICBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXSArICcvJyArIHNwbGl0ZWRUb1VSTFs0XTsKICAgICAgICB9CgogICAgICAgIHZhciBpc1RvRGF0YU9iamVjdCA9ICgwLCBfdXRpbHMuaXNEYXRhT2JqZWN0VVJMKShkYXRhT2JqZWN0VVJMKTsKICAgICAgICB2YXIgaXNGcm9tSHlwZXJ0eSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JzsKICAgICAgICB2YXIgaXNUb0h5cGVydHkgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobWVzc2FnZS50bykudHlwZSA9PT0gJ2h5cGVydHknOwoKICAgICAgICBpZiAobWVzc2FnZS50eXBlID09PSAndXBkYXRlJykgewogICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICB9CgogICAgICAgIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5KSB7CiAgICAgICAgICB2YXIgdXNlclVSTCA9IF90aGlzLl9yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIobWVzc2FnZS5mcm9tKTsKICAgICAgICAgIGlmICh1c2VyVVJMKSB7CiAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGV4aXN0cyBhbnkga2V5cyBiZXR3ZWVuIHR3byB1c2VycwogICAgICAgICAgICAgIHZhciBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b107CiAgICAgICAgICAgICAgaWYgKCFjaGF0S2V5cykgewogICAgICAgICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtZXNzYWdlLCB1c2VyVVJMKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjcmVhdGVDaGF0S2V5IGVuY3J5cHQnLCBtZXNzYWdlLmZyb20gKyBtZXNzYWdlLnRvKTsKICAgICAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b10gPSBjaGF0S2V5czsKICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5oYW5kc2hha2VQaGFzZSA9ICdzdGFydEhhbmRTaGFrZSc7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoY2hhdEtleXMuYXV0aGVudGljYXRlZCAmJiAhaXNIYW5kU2hha2VUeXBlKSB7CiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgICAgdmFyIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTsKICAgICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksIG1lc3NhZ2UuYm9keS52YWx1ZSwgaXYpLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBtZXNzYWdlLmJvZHkudmFsdWUgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pOwoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSkudGhlbihmdW5jdGlvbiAoaGFzaCkgewogICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzdWx0IG9mIGhhc2ggJywgaGFzaCk7CiAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB7IGl2OiBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KSwgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2gpIH07CiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkudmFsdWUgPSAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkodmFsdWUpOwoKICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgLy8gaWYgaXMgYSBoYW5kc2hha2UgbWVzc2FnZSwganVzdCByZXNvbHZlIGl0CiAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNIYW5kU2hha2VUeXBlKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwoKICAgICAgICAgICAgICAgIC8vIGVsc2UsIHN0YXJ0cyBhIG5ldyBoYW5kc2hha2UgcHJvdG9jb2wKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3RoaXMuX2RvSGFuZFNoYWtlUGhhc2UobWVzc2FnZSwgY2hhdEtleXMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b10gPSB2YWx1ZS5jaGF0S2V5czsKCiAgICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICByZWplY3QoJ2VuY3J5cHQgaGFuZHNoYWtlIHByb3RvY29sIHBoYXNlICcpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSgpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vaWYgZnJvbSBoeXBlcnR5IHRvIGEgZGF0YU9iamVjdFVSTAogICAgICAgIH0gZWxzZSBpZiAoaXNGcm9tSHlwZXJ0eSAmJiBpc1RvRGF0YU9iamVjdCkgewogICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2RhdGFPYmplY3QgdmFsdWUgdG8gZW5jcnlwdDogJywgbWVzc2FnZS5ib2R5LnZhbHVlKTsKCiAgICAgICAgICAgIHZhciBkYXRhT2JqZWN0S2V5ID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdOwoKICAgICAgICAgICAgLy9pZiBubyBrZXkgZXhpc3RzLCBjcmVhdGUgYSBuZXcgb25lIGlmIGlzIHRoZSByZXBvcnRlciBvZiBkYXRhT2JqZWN0CiAgICAgICAgICAgIGlmICghZGF0YU9iamVjdEtleSkgewogICAgICAgICAgICAgIHZhciBpc0h5cGVydHlSZXBvcnRlciA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhkYXRhT2JqZWN0VVJMKTsKCiAgICAgICAgICAgICAgLy8gaWYgdGhlIGh5cGVydHkgaXMgdGhlIHJlcG9ydGVyIG9mIHRoZSBkYXRhT2JqZWN0IHRoZW4gZ2VuZXJhdGVzIGEgc2Vzc2lvbiBrZXkKICAgICAgICAgICAgICBpZiAoaXNIeXBlcnR5UmVwb3J0ZXIgJiYgaXNIeXBlcnR5UmVwb3J0ZXIgPT09IG1lc3NhZ2UuZnJvbSkgewoKICAgICAgICAgICAgICAgIHZhciBzZXNzaW9uS2V5ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7CiAgICAgICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gPSB7IHNlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlIH07CgogICAgICAgICAgICAgICAgZGF0YU9iamVjdEtleSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhIHNlc3Npb24ga2V5IGZvciB0aGUgY2hhdCByb29tCiAgICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5KSB7CgogICAgICAgICAgICAgIC8vIGFuZCBpZiBpcyB0byBhcHBseSBlbmNyeXB0aW9uLCBlbmNyeXB0IHRoZSBtZXNzYWdlcwogICAgICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5LmlzVG9FbmNyeXB0KSB7CiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpOwoKICAgICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBfdGhpcy5jcnlwdG8uZW5jb2RlKCgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShtZXNzYWdlLmJvZHkudmFsdWUpKSwgaXYpLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBtZXNzYWdlLmJvZHkudmFsdWUgKyBpdiwgZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5KTsKCiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmhhc2hITUFDKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZmlsdGVyZWRNZXNzYWdlKS50aGVuKGZ1bmN0aW9uIChoYXNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdoYXNoICcsIGhhc2gpOwoKICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IHsgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpLCBpdjogX3RoaXMuY3J5cHRvLmVuY29kZShpdiksIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCkgfTsKCiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkudmFsdWUgPSAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkobmV3VmFsdWUpOwogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAvLyBpZiBub3QsIGp1c3Qgc2VuZCB0aGUgbWVzc2FnZQogICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIC8vIHN0YXJ0IHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IHNlc3Npb24gS2V5CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVqZWN0KCdmYWlsZWQgdG8gZGVjcnlwdCBtZXNzYWdlJyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWNyeXB0TWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVjcnlwdE1lc3NhZ2UobWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHQgbWVzc2FnZSAnKTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciBpc0hhbmRTaGFrZVR5cGUgPSBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnOwoKICAgICAgICAvL2lmIGlzIG5vdCB0byBhcHBseSBlbmNyeXB0aW9uLCB0aGVuIHJldHVybnMgcmVzb2x2ZQogICAgICAgIGlmICghX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gJiYgIWlzSGFuZFNoYWtlVHlwZSkgewogICAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRpb24gZGlzYWJsZWQnKTsKICAgICAgICAgIHJldHVybiByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgIH0KCiAgICAgICAgLy9UT0RPIHJlbW92ZSB0aGlzIGxvZ2ljIGFuZCBtb3ZlIGl0IHRvIGEgdXRpbCBmdW5jdGlvbgoKICAgICAgICB2YXIgc3BsaXRlZFRvVVJMID0gbWVzc2FnZS50by5zcGxpdCgnLycpOwogICAgICAgIHZhciBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXTsKICAgICAgICBpZiAoc3BsaXRlZFRvVVJMLmxlbmd0aCA+IDYpIHsKICAgICAgICAgIGRhdGFPYmplY3RVUkwgPSBzcGxpdGVkVG9VUkxbMF0gKyAnLy8nICsgc3BsaXRlZFRvVVJMWzJdICsgJy8nICsgc3BsaXRlZFRvVVJMWzNdICsgJy8nICsgc3BsaXRlZFRvVVJMWzRdOwogICAgICAgIH0KCiAgICAgICAgdmFyIGlzVG9EYXRhT2JqZWN0ID0gKDAsIF91dGlscy5pc0RhdGFPYmplY3RVUkwpKGRhdGFPYmplY3RVUkwpOwogICAgICAgIHZhciBpc0Zyb21IeXBlcnR5ID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknOwogICAgICAgIHZhciBpc1RvSHlwZXJ0eSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLnRvKS50eXBlID09PSAnaHlwZXJ0eSc7CgogICAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnKSB7CiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgIH0KCiAgICAgICAgLy9pcyBpcyBoeXBlcnR5IHRvIGh5cGVydHkgY29tbXVuaWNhdGlvbgogICAgICAgIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5KSB7CiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdkZWNyeXB0IGh5cGVydHkgdG8gaHlwZXJ0eScpOwogICAgICAgICAgdmFyIHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKG1lc3NhZ2UudG8pOwogICAgICAgICAgaWYgKHVzZXJVUkwpIHsKICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgdmFyIGNoYXRLZXlzID0gX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXTsKICAgICAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7CiAgICAgICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwsICdkZWNyeXB0Jyk7CiAgICAgICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLnRvICsgJzwtPicgKyBtZXNzYWdlLmZyb21dID0gY2hhdEtleXM7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBpZiAoY2hhdEtleXMuYXV0aGVudGljYXRlZCAmJiAhaXNIYW5kU2hha2VUeXBlKSB7CiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBKU09OLnBhcnNlKG1lc3NhZ2UuYm9keS52YWx1ZSk7CiAgICAgICAgICAgICAgICAgIHZhciBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaXYpOwogICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUudmFsdWUpOwogICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaGFzaCk7CiAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZERhdGEpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGVkIHZhbHVlICcsIGRlY3J5cHRlZERhdGEpOwogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IGRlY3J5cHRlZERhdGE7CgogICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWREYXRhICsgaXYpOwoKICAgICAgICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXN1bHQgb2YgaGFzaCB2ZXJpZmljYXRpb24hICcsIHJlc3VsdCk7CiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0hhbmRTaGFrZVR5cGUpIHsKICAgICAgICAgICAgICAgIF90aGlzLl9kb0hhbmRTaGFrZVBoYXNlKG1lc3NhZ2UsIGNoYXRLZXlzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewoKICAgICAgICAgICAgICAgICAgLy9pZiBpdCB3YXMgc3RhcnRlZCBieSBkb011dHVhbEF1dGhlbnRpY2F0aW9uIHRoZW4gZW5kcyB0aGUgcHJvdG9jb2wKICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnaGFuZFNoYWtlRW5kJykgewogICAgICAgICAgICAgICAgICAgIHJlamVjdCgnZGVjcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7CgogICAgICAgICAgICAgICAgICAgIC8vIGlmIHdhcyBzdGFydGVkIGJ5IGEgbWVzc2FnZSwgdGhlbiByZXNlbmQgdGhhdCBtZXNzYWdlCiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXSA9IHZhbHVlLmNoYXRLZXlzOwogICAgICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIHJlamVjdCgnZGVjcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZWplY3QoJ3dyb25nIG1lc3NhZ2UgZG8gZGVjcnlwdCcpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gZGVjcnlwdCBtZXNzYWdlJyk7CiAgICAgICAgICB9CgogICAgICAgICAgLy9pZiBmcm9tIGh5cGVydHkgdG8gYSBkYXRhT2JqZWN0VVJMCiAgICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB7CiAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YU9iamVjdCB2YWx1ZSB0byBkZWNyeXB0OiAnLCBtZXNzYWdlLmJvZHkpOwoKICAgICAgICAgICAgdmFyIGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07CgogICAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleSkgewoKICAgICAgICAgICAgICAvL2NoZWNrIGlmIGlzIHRvIGFwcGx5IGVuY3J5cHRpb24KICAgICAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleS5pc1RvRW5jcnlwdCkgewogICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgdmFyIHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShtZXNzYWdlLmJvZHkudmFsdWUpOwogICAgICAgICAgICAgICAgICB2YXIgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLml2KTsKICAgICAgICAgICAgICAgICAgdmFyIGVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS52YWx1ZSk7CiAgICAgICAgICAgICAgICAgIHZhciBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS5oYXNoKTsKCiAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGZ1bmN0aW9uIChkZWNyeXB0ZWRWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZWRWYWx1ZSA9IEpTT04ucGFyc2UoYXRvYihkZWNyeXB0ZWRWYWx1ZSkpOwogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWQgVmFsdWUsJywgcGFyc2VkVmFsdWUpOwogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IHBhcnNlZFZhbHVlOwoKICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgcGFyc2VkVmFsdWUgKyBpdik7CgogICAgICAgICAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoIHZlcmlmaWNhdGlvbiEgJywgcmVzdWx0KTsKCiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgIC8vaWYgbm90LCBqdXN0IHJldHVybiB0aGUgbWVzc2FnZQogICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmFzc2VydGVkSWRlbnRpdHkgPSB0cnVlOwogICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmFzc2VydGVkSWRlbnRpdHkgPSB0cnVlOwogICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CgogICAgICAgICAgICAgIC8vcmVqZWN0KCdubyBzZXNzaW9uS2V5IGZvciBjaGF0IHJvb20gZm91bmQnKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSkoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVqZWN0KCd3cm9uZyBtZXNzYWdlIHRvIGRlY3J5cHQnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RvTXV0dWFsQXV0aGVudGljYXRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRvTXV0dWFsQXV0aGVudGljYXRpb24oc2VuZGVyLCByZWNlaXZlcikgewogICAgICBjb25zb2xlLmxvZygnZG9NdXR1YWxBdXRoZW50aWNhdGlvbjogJywgc2VuZGVyLCByZWNlaXZlcik7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkYXRhT2JqZWN0VVJMID0gdm9pZCAwOwoKICAgICAgLy8gY2hlY2sgaWYgdGhlIHNlbmRlciBpcyBhIGRhdGFPYmplY3QgYW5kIGlmIHNvIHN0b3JlcyB0aGF0IHZhbHVlCiAgICAgIHZhciByZXBvcnRlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhzZW5kZXIpOwogICAgICBpZiAocmVwb3J0ZXJVUkwpIHsKICAgICAgICBkYXRhT2JqZWN0VVJMID0gc2VuZGVyOwogICAgICAgIHNlbmRlciA9IHJlcG9ydGVyVVJMOwogICAgICB9CgogICAgICB2YXIgbXNnID0gewogICAgICAgIHRvOiByZWNlaXZlciwKICAgICAgICBmcm9tOiBzZW5kZXIsCiAgICAgICAgY2FsbGJhY2s6IHVuZGVmaW5lZCwKICAgICAgICBib2R5OiB7IGhhbmRzaGFrZVBoYXNlOiAnc3RhcnRIYW5kU2hha2UnLCBpZ25vcmU6ICdpZ25vcmVNZXNzYWdlJyB9CiAgICAgIH07CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgaWYgKCFzZW5kZXIgfHwgIXJlY2VpdmVyKSB7CiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdzZW5kZXIgb3IgcmVjZWl2ZXIgbWlzc2luZyBvbiBkb011dHVhbEF1dGhlbnRpY2F0aW9uJyk7CiAgICAgICAgfQoKICAgICAgICB2YXIgY2hhdEtleXMgPSBfdGhpcy5jaGF0S2V5c1tzZW5kZXIgKyAnPC0+JyArIHJlY2VpdmVyXTsKICAgICAgICB2YXIgdXNlclVSTCA9IF90aGlzLl9yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIoc2VuZGVyKTsKCiAgICAgICAgaWYgKHVzZXJVUkwpIHsKCiAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7CiAgICAgICAgICAgIC8vIGNhbGxiYWNrIHRvIHJlc29sdmUgd2hlbiBmaW5pc2ggdGhlIG11dHVhbCBhdXRoZW50aWNhdGlvbgogICAgICAgICAgICB2YXIgcmVzb2x2ZWQgPSBmdW5jdGlvbiByZXNvbHZlZCh2YWx1ZSkgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYWxsYmFjayB2YWx1ZTonLCB2YWx1ZSk7CiAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIG1zZy5jYWxsYmFjayA9IHJlc29sdmVkOwogICAgICAgICAgICBtc2cuZGF0YU9iamVjdFVSTCA9IGRhdGFPYmplY3RVUkw7CgogICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1zZywgdXNlclVSTCk7CiAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW3NlbmRlciArICc8LT4nICsgcmVjZWl2ZXJdID0gY2hhdEtleXM7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQpIHsKCiAgICAgICAgICAgIHZhciBzdGFydFNlc3Npb25LZXlFeGNoYW5nZSA9IHsKICAgICAgICAgICAgICB0bzogc2VuZGVyLAogICAgICAgICAgICAgIGZyb206IHJlY2VpdmVyCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNoYXRLZXlzLmRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMOwogICAgICAgICAgICBfdGhpcy5fc2VuZFJlcG9ydGVyU2Vzc2lvbktleShzdGFydFNlc3Npb25LZXlFeGNoYW5nZSwgY2hhdEtleXMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CgogICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpOwogICAgICAgICAgICAgIHJlc29sdmUoJ2V4Y2hhbmdlIG9mIGNoYXQgc2Vzc2lvbktleSBpbml0aWF0ZWQnKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgX3RoaXMuX2RvSGFuZFNoYWtlUGhhc2UobXNnLCBjaGF0S2V5cyk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbicpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2RvSGFuZFNoYWtlUGhhc2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kb0hhbmRTaGFrZVBoYXNlKG1lc3NhZ2UsIGNoYXRLZXlzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2NvbnNvbGUubG9nKCdoYW5kc2hha2VUeXBlJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGhhbmRzaGFrZVR5cGUgPSBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2U7CiAgICAgICAgdmFyIGl2ID0gdm9pZCAwOwogICAgICAgIHZhciBoYXNoID0gdm9pZCAwOwogICAgICAgIHZhciB2YWx1ZSA9IHt9OwogICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSB2b2lkIDA7CgogICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICBzd2l0Y2ggKGhhbmRzaGFrZVR5cGUpIHsKCiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0SGFuZFNoYWtlJzoKICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20gPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTsKCiAgICAgICAgICAgICAgdmFyIHN0YXJ0SGFuZFNoYWtlTXNnID0gewogICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdzZW5kZXJIZWxsbycsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChzdGFydEhhbmRTaGFrZU1zZywgdW5kZWZpbmVkLCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdhcyB0aGUgZW5jcnlwdCBmdW5jdGlvbiBvciB0aGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uIHRoYXQgcmVxdWVzdCB0aGUKICAgICAgICAgICAgICAvLyBzdGFydCBvZiB0aGUgaGFuZFNoYWtlUGhhc2UuCiAgICAgICAgICAgICAgaWYgKGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogc3RhcnRIYW5kU2hha2VNc2csIGNoYXRLZXlzOiBjaGF0S2V5cyB9KTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IGNoYXRLZXlzOwogICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2Uoc3RhcnRIYW5kU2hha2VNc2cpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3NlbmRlckhlbGxvJzoKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NlbmRlckhlbGxvJyk7CiAgICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UpOwogICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSA9IF90aGlzLmNyeXB0by5kZWNvZGUobWVzc2FnZS5ib2R5LnZhbHVlKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7CgogICAgICAgICAgICAgIHZhciBzZW5kZXJIZWxsb01zZyA9IHsKICAgICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJIZWxsbycsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGNoYXRLZXlzLmtleXMudG9SYW5kb20pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChzZW5kZXJIZWxsb01zZywgdW5kZWZpbmVkLCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IHNlbmRlckhlbGxvTXNnLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICdyZWNlaXZlckhlbGxvJzoKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlY2VpdmVySGVsbG8nKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlKTsKCiAgICAgICAgICAgICAgX3RoaXMudmFsaWRhdGVBc3NlcnRpb24obWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbiwgdW5kZWZpbmVkLCBtZXNzYWdlLmJvZHkuaWRlbnRpdHkuaWRwKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewoKICAgICAgICAgICAgICAgIC8vVE9ETyByZW1vdmUgbGF0ZXIgdGhpcyB2ZXJpZmljYXRpb24gYXMgc29vbiBhcyBhbGwgdGhlIElkUCBwcm94eSBhcmUgdXBkYXRlZCBpbiB0aGUgZXhhbXBsZQogICAgICAgICAgICAgICAgdmFyIGVuY29kZWRwdWJsaWNLZXkgPSB0eXBlb2YgdmFsdWUuY29udGVudHMgPT09ICdzdHJpbmcnID8gdmFsdWUuY29udGVudHMgOiB2YWx1ZS5jb250ZW50cy5ub25jZTsKCiAgICAgICAgICAgICAgICB2YXIgcmVjZWl2ZXJQdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKGVuY29kZWRwdWJsaWNLZXkpOwogICAgICAgICAgICAgICAgdmFyIHByZW1hc3RlclNlY3JldCA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVBNUygpOwogICAgICAgICAgICAgICAgdmFyIHRvUmFuZG9tID0gbWVzc2FnZS5ib2R5LnZhbHVlOwogICAgICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLmFzc2VydGlvbiA9IG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb247CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5ID0gcmVjZWl2ZXJQdWJsaWNLZXk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8udXNlcklEID0gdmFsdWUuY29udGVudHMuZW1haWw7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tID0gX3RoaXMuY3J5cHRvLmRlY29kZSh0b1JhbmRvbSk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSA9IHByZW1hc3RlclNlY3JldDsKCiAgICAgICAgICAgICAgICB2YXIgY29uY2F0S2V5ID0gX3RoaXMuY3J5cHRvLmNvbmNhdFBNU3dpdGhSYW5kb21zKHByZW1hc3RlclNlY3JldCwgY2hhdEtleXMua2V5cy50b1JhbmRvbSwgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlTWFzdGVyU2VjcmV0KGNvbmNhdEtleSwgJ21lc3NhZ2VIaXN0b3JpYycgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTsKCiAgICAgICAgICAgICAgICAvL2dlbmVyYXRlIHRoZSBtYXN0ZXIga2V5CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAobWFzdGVyS2V5KSB7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLm1hc3RlcktleSA9IG1hc3RlcktleTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlS2V5cyhtYXN0ZXJLZXksICdrZXkgZXhwYW5zaW9uJyArIGNoYXRLZXlzLmtleXMudG9SYW5kb20gKyBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pOwoKICAgICAgICAgICAgICAgIC8vZ2VuZXJhdGUgdGhlIHN5bW1ldHJpYyBhbmQgaGFzaCBrZXlzCiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoa2V5cykgewoKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMF0pOwogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzFdKTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMl0pOwogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzNdKTsKICAgICAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTsKICAgICAgICAgICAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7CgogICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VTdHJ1Y3R1cmUgPSB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdzZW5kZXJDZXJ0aWZpY2F0ZScKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvLyBoYXNoIHRoZSB2YWx1ZSBhbmQgdGhlIGl2CiAgICAgICAgICAgICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlU3RydWN0dXJlLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSk7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaGFzaCkgewogICAgICAgICAgICAgICAgdmFsdWUuaGFzaCA9IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCk7CgogICAgICAgICAgICAgICAgLy9lbmNyeXB0IHRoZSBkYXRhCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvaycsIGl2KTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlbmNyeXB0ZWREYXRhKSB7CiAgICAgICAgICAgICAgICB2YWx1ZS5zeW1ldHJpY0VuY3J5cHRpb24gPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZERhdGEpOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZW5jcnlwdFJTQShjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5LCBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSk7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZW5jcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgICB2YWx1ZS5hc3N5bWV0cmljRW5jcnlwdGlvbiA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpOwoKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlU3RydWN0dXJlID0gewogICAgICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlU3RydWN0dXJlLCBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pOwoKICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uc2lnblJTQShjaGF0S2V5cy5oeXBlcnR5RnJvbS5wcml2YXRlS2V5LCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeSkgKyAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkobWVzc2FnZVRvSGFzaCkpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHNpZ25hdHVyZSkgewoKICAgICAgICAgICAgICAgIHZhbHVlLnNpZ25hdHVyZSA9IF90aGlzLmNyeXB0by5lbmNvZGUoc2lnbmF0dXJlKTsKCiAgICAgICAgICAgICAgICB2YXIgcmVjZWl2ZXJIZWxsb01zZyA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckNlcnRpZmljYXRlJywKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYnRvYSgoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkodmFsdWUpKQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJDZXJ0aWZpY2F0ZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVySGVsbG9Nc2csICdvaycgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pOwoKICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiByZWNlaXZlckhlbGxvTXNnLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ3NlbmRlckNlcnRpZmljYXRlJzoKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3NlbmRlckNlcnRpZmljYXRlJyk7CiAgICAgICAgICAgICAgdmFyIHJlY2VpdmVkVmFsdWUgPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7CgogICAgICAgICAgICAgIF90aGlzLnZhbGlkYXRlQXNzZXJ0aW9uKG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb24sIHVuZGVmaW5lZCwgbWVzc2FnZS5ib2R5LmlkZW50aXR5LmlkcCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgIHZhciBlbmNyeXB0ZWRQTVMgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuYXNzeW1ldHJpY0VuY3J5cHRpb24pOwoKICAgICAgICAgICAgICAgIC8vVE9ETyByZW1vdmUgbGF0ZXIgdGhpcyB2ZXJpZmljYXRpb24gYXMgc29vbiBhcyBhbGwgdGhlIElkUCBwcm94eSBhcmUgdXBkYXRlZCBpbiB0aGUgZXhhbXBsZQogICAgICAgICAgICAgICAgdmFyIGVuY29kZWRwdWJsaWNLZXkgPSB0eXBlb2YgdmFsdWUuY29udGVudHMgPT09ICdzdHJpbmcnID8gdmFsdWUuY29udGVudHMgOiB2YWx1ZS5jb250ZW50cy5ub25jZTsKCiAgICAgICAgICAgICAgICB2YXIgc2VuZGVyUHVibGljS2V5ID0gX3RoaXMuY3J5cHRvLmRlY29kZShlbmNvZGVkcHVibGljS2V5KTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby5hc3NlcnRpb24gPSBtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uOwogICAgICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSA9IHNlbmRlclB1YmxpY0tleTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby51c2VySUQgPSB2YWx1ZS5jb250ZW50cy5lbWFpbDsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmRlY3J5cHRSU0EoY2hhdEtleXMuaHlwZXJ0eUZyb20ucHJpdmF0ZUtleSwgZW5jcnlwdGVkUE1TKTsKICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgICAgICAgICAgIHJlamVjdCgnRXJyb3IgZHVyaW5nIGF1dGhlbnRpY2F0aW9uIG9mIGlkZW50aXR5Jyk7CgogICAgICAgICAgICAgICAgLy9vYnRhaW4gdGhlIFByZW1hc3RlcktleSB1c2luZyB0aGUgcHJpdmF0ZSBrZXkKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChwbXMpIHsKCiAgICAgICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSA9IG5ldyBVaW50OEFycmF5KHBtcyk7CgogICAgICAgICAgICAgICAgdmFyIHNpZ25hdHVyZSA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5zaWduYXR1cmUpOwoKICAgICAgICAgICAgICAgIHZhciByZWNlaXZlZG1zZ1RvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeVJTQShjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5LCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkoY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeSkgKyAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkocmVjZWl2ZWRtc2dUb0hhc2gpLCBzaWduYXR1cmUpOwoKICAgICAgICAgICAgICAgIC8vIHZhbGlkYXRlcyB0aGUgc2lnbmF0dXJlIHJlY2VpdmVkCiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoc2lnblZhbGlkYXRpb25SZXN1bHQpIHsKCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2lnbmF0dXJlIHZhbGlkYXRpb24gcmVzdWx0ICcsIHNpZ25WYWxpZGF0aW9uUmVzdWx0KTsKICAgICAgICAgICAgICAgIHZhciBjb25jYXRLZXkgPSBfdGhpcy5jcnlwdG8uY29uY2F0UE1Td2l0aFJhbmRvbXMoY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXksIGNoYXRLZXlzLmtleXMudG9SYW5kb20sIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZU1hc3RlclNlY3JldChjb25jYXRLZXksICdtZXNzYWdlSGlzdG9yaWMnICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7CgogICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGVzIHRoZSBtYXN0ZXIga2V5cyBmcm9tIHRoZSBQcmVtYXN0ZXIga2V5IGFuZCB0aGUgcmFuZG9tcwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKG1hc3RlcktleSkgewogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5tYXN0ZXJLZXkgPSBtYXN0ZXJLZXk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZUtleXMobWFzdGVyS2V5LCAna2V5IGV4cGFuc2lvbicgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTsKCiAgICAgICAgICAgICAgICAvLyBnZW5lcmF0ZXMgdGhlIHN5bW1ldHJpYyBrZXlzIHRvIGJlIHVzZWQgaW4gdGhlIHN5bW1ldHJpYyBlbmNyeXB0aW9uCiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoa2V5cykgewogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzBdKTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMV0pOwogICAgICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzJdKTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbM10pOwogICAgICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuaXYpOwogICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuc3ltZXRyaWNFbmNyeXB0aW9uKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBkYXRhLCBpdik7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkRGF0YSkgewogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZGVjcnlwdGVkRGF0YScsIGRlY3J5cHRlZERhdGEpOwoKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVyQ2VydGlmaWNhdGUgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWREYXRhICsgaXYpOwoKICAgICAgICAgICAgICAgIHZhciBoYXNoUmVjZWl2ZWQgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuaGFzaCk7CgogICAgICAgICAgICAgICAgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIGhhc2hSZWNlaXZlZCk7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAodmVyaWZpZWRIYXNoKSB7CgogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uICcsIHZlcmlmaWVkSGFzaCk7CiAgICAgICAgICAgICAgICB2YXIgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLAogICAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLAogICAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZScKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTsKICAgICAgICAgICAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7CgogICAgICAgICAgICAgICAgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UsICdvayEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSk7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaGFzaCkgewoKICAgICAgICAgICAgICAgIHZhbHVlLmhhc2ggPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2gpOwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2shJywgaXYpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZFZhbHVlKSB7CiAgICAgICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpOwogICAgICAgICAgICAgICAgdmFyIHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gewogICAgICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBidG9hKCgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh2YWx1ZSkpCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5yZWNlaXZlckZpbmlzaGVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCAnb2shJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CiAgICAgICAgICAgICAgICBjaGF0S2V5cy5hdXRoZW50aWNhdGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHJlc29sdmUoeyBtZXNzYWdlOiByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSwgY2hhdEtleXM6IGNoYXRLZXlzIH0pOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnOgoKICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnKTsKICAgICAgICAgICAgICBjaGF0S2V5cy5hdXRoZW50aWNhdGVkID0gdHJ1ZTsKCiAgICAgICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7CgogICAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5pdik7CiAgICAgICAgICAgICAgdmFyIGRhdGEgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLnZhbHVlKTsKICAgICAgICAgICAgICBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5oYXNoKTsKCiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBkYXRhLCBpdikudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkRGF0YSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRlZERhdGEnLCBkZWNyeXB0ZWREYXRhKTsKICAgICAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWREYXRhICsgaXYpOwoKICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkYXRhICsgaXYpOwogICAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIGhhc2gpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaGFzaCByZXN1bHQnLCByZXN1bHQpOwoKICAgICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgd2FzIGFuIGluaXRpYWwgbWVzc2FnZSB0aGF0IHdhcyBibG9ja2VkIGFuZCBzZW5kIGl0CiAgICAgICAgICAgICAgICAgIGlmIChjaGF0S2V5cy5pbml0aWFsTWVzc2FnZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBpbml0aWFsTWVzc2FnZSA9IHsKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjcmVhdGUnLAogICAgICAgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjaGF0S2V5cy5pbml0aWFsTWVzc2FnZS5ib2R5LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7IG1lc3NhZ2U6IGluaXRpYWxNZXNzYWdlLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CgogICAgICAgICAgICAgICAgICAgIC8vc2VuZHMgdGhlIHNlc3Npb25LZXkgdG8gdGhlIHN1YnNjcmliZXIgaHlwZXJ0eQogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIF90aGlzLl9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5KG1lc3NhZ2UsIGNoYXRLZXlzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAncmVwb3J0ZXJTZXNzaW9uS2V5JzoKCiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcG9ydGVyU2Vzc2lvbktleScpOwoKICAgICAgICAgICAgICB2YXIgdmFsdWVJVmFuZEhhc2ggPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7CiAgICAgICAgICAgICAgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWVJVmFuZEhhc2guaGFzaCk7CiAgICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlSVZhbmRIYXNoLml2KTsKICAgICAgICAgICAgICB2YXIgZW5jcnlwdGVkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlSVZhbmRIYXNoLnZhbHVlKTsKICAgICAgICAgICAgICB2YXIgcGFyc2VkVmFsdWUgPSB2b2lkIDA7CiAgICAgICAgICAgICAgdmFyIHNlc3Npb25LZXkgPSB2b2lkIDA7CiAgICAgICAgICAgICAgdmFyIGRhdGFPYmplY3RVUkwgPSB2b2lkIDA7CiAgICAgICAgICAgICAgdmFyIHJlY2VpdmVyQWNrbm93bGVkZ2VNc2cgPSB2b2lkIDA7CgogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbcmVwb3J0ZXJTZXNzaW9uS2V5XSAtIGRlY3J5cHRBRVM6ICcsIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KTsKCiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBlbmNyeXB0ZWRWYWx1ZSwgaXYpLnRoZW4oZnVuY3Rpb24gKGRlY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgICAgICAgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKGRlY3J5cHRlZFZhbHVlKTsKICAgICAgICAgICAgICAgIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLnZhbHVlKTsKICAgICAgICAgICAgICAgIGRhdGFPYmplY3RVUkwgPSBwYXJzZWRWYWx1ZS5kYXRhT2JqZWN0VVJMOwoKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUgKyBpdik7CgogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgbWVzc2FnZVRvSGFzaCwgaGFzaCk7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaGFzaFJlc3VsdCkgewoKICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hhc2ggc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCAnLCBoYXNoUmVzdWx0KTsKCiAgICAgICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gPSB7IHNlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlIH07CgogICAgICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpOwogICAgICAgICAgICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvayEhJywgaXYpOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgICAgICAgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZyA9IHsKICAgICAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsCiAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sCiAgICAgICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICAgICAgICAgIGJvZHk6IHsKICAgICAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3JlY2VpdmVyQWNrbm93bGVkZ2UnCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgdmFsdWUudmFsdWUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKTsKICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJBY2tub3dsZWRnZU1zZywgJ29rISEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBtZXNzYWdlVG9IYXNoKTsKICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoZWRNZXNzYWdlKSB7CiAgICAgICAgICAgICAgICB2YXIgZmluYWxWYWx1ZSA9IGJ0b2EoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHsgdmFsdWU6IHZhbHVlLnZhbHVlLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2hlZE1lc3NhZ2UpLCBpdjogdmFsdWUuaXYgfSkpOwoKICAgICAgICAgICAgICAgIHJlY2VpdmVyQWNrbm93bGVkZ2VNc2cuYm9keS52YWx1ZSA9IGZpbmFsVmFsdWU7CiAgICAgICAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogcmVjZWl2ZXJBY2tub3dsZWRnZU1zZywgY2hhdEtleXM6IGNoYXRLZXlzIH0pOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAncmVjZWl2ZXJBY2tub3dsZWRnZSc6CgogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckFja25vd2xlZGdlJyk7CgogICAgICAgICAgICAgIHZhciByZWNlaXZlZHZhbHVlSVZhbmRIYXNoID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpOwogICAgICAgICAgICAgIHZhciByZWNlaXZlZEhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkdmFsdWVJVmFuZEhhc2guaGFzaCk7CiAgICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkdmFsdWVJVmFuZEhhc2guaXYpOwogICAgICAgICAgICAgIHZhciByZWNlaXZlZEVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZHZhbHVlSVZhbmRIYXNoLnZhbHVlKTsKCiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCByZWNlaXZlZEVuY3J5cHRlZFZhbHVlLCBpdikudGhlbihmdW5jdGlvbiAoZGVjcnlwdGVkVmFsdWUpIHsKCiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUgKyBpdik7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIHJlY2VpdmVkSGFzaCk7CiAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoaGFzaFJlc3VsdCkgewogICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnaGFzaFJlc3VsdCAnLCBoYXNoUmVzdWx0KTsKCiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBjaGF0S2V5cy5jYWxsYmFjazsKCiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgY2FsbGJhY2soJ2hhbmRTaGFrZUVuZCcpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmVzb2x2ZSgnaGFuZFNoYWtlRW5kJyk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHJlamVjdChtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICB9KSgpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfc2VuZFJlcG9ydGVyU2Vzc2lvbktleScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NlbmRSZXBvcnRlclNlc3Npb25LZXkobWVzc2FnZSwgY2hhdEtleXMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHNlc3Npb25LZXlCdW5kbGUgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbY2hhdEtleXMuZGF0YU9iamVjdFVSTF07CiAgICAgIHZhciByZXBvcnRlclNlc3Npb25LZXlNc2cgPSB2b2lkIDA7CiAgICAgIHZhciB2YWx1ZVRvRW5jcnlwdCA9IHZvaWQgMDsKICAgICAgdmFyIHNlc3Npb25LZXkgPSB2b2lkIDA7CiAgICAgIHZhciBpdiA9IHZvaWQgMDsKICAgICAgdmFyIHZhbHVlID0ge307CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgLy9pZiB0aGVyZSBpcyBub3QgeWV0IGEgc2Vzc2lvbiBLZXksIGdlbmVyYXRlcyBhIG5ldyBvbmUKICAgICAgICBpZiAoIXNlc3Npb25LZXlCdW5kbGUpIHsKICAgICAgICAgIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTsKICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tjaGF0S2V5cy5kYXRhT2JqZWN0VVJMXSA9IHsgc2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWUgfTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2Vzc2lvbktleSA9IHNlc3Npb25LZXlCdW5kbGUuc2Vzc2lvbktleTsKICAgICAgICB9CgogICAgICAgIHZhbHVlVG9FbmNyeXB0ID0gKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHsgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoc2Vzc2lvbktleSksIGRhdGFPYmplY3RVUkw6IGNoYXRLZXlzLmRhdGFPYmplY3RVUkwgfSk7CgogICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTsKICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpOwogICAgICAgIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCB2YWx1ZVRvRW5jcnlwdCwgaXYpLnRoZW4oZnVuY3Rpb24gKGVuY3J5cHRlZFZhbHVlKSB7CgogICAgICAgICAgcmVwb3J0ZXJTZXNzaW9uS2V5TXNnID0gewogICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJywKICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSwKICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50bywKICAgICAgICAgICAgYm9keTogewogICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVwb3J0ZXJTZXNzaW9uS2V5JywKICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSkKICAgICAgICAgICAgfQogICAgICAgICAgfTsKCiAgICAgICAgICB2YXIgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVwb3J0ZXJTZXNzaW9uS2V5TXNnLCB2YWx1ZVRvRW5jcnlwdCArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7CgogICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChoYXNoZWRNZXNzYWdlKSB7CgogICAgICAgICAgdmFyIHZhbHVlV2l0aEhhc2ggPSBidG9hKCgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh7IHZhbHVlOiByZXBvcnRlclNlc3Npb25LZXlNc2cuYm9keS52YWx1ZSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoZWRNZXNzYWdlKSwgaXY6IHZhbHVlLml2IH0pKTsKCiAgICAgICAgICByZXBvcnRlclNlc3Npb25LZXlNc2cuYm9keS52YWx1ZSA9IHZhbHVlV2l0aEhhc2g7CiAgICAgICAgICByZXNvbHZlKHsgbWVzc2FnZTogcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLCBjaGF0S2V5czogY2hhdEtleXMgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiByZXR1cm5zIHRoZSByZXBvcnRlciBhc3NvY2lhdGVkIHRvIHRoZSBkYXRhT2JqZWN0IFVSTAogICAgKiBAcGFyYW0gICB7U3RyaW5nfSAgIGRhdGFPYmplY3RVUkwgICAgICAgICBkYXRhT2JqZWN0IHVybAogICAgKiBAcmV0dXJuICAge1N0cmluZ30gIHJlcG9ydGVyICAgICAgICAgICAgICBkYXRhT2JqZWN0IHVybCByZXBvcnRlcgogICAgKi8KCiAgfSwgewogICAga2V5OiAnX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdChkYXRhT2JqZWN0VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgLy9UT0RPIHJlbW92ZSB0aGlzIGxvZ2ljIGFuZCBtb3ZlIGl0IHRvIGEgdXRpbCBmdW5jdGlvbgoKICAgICAgICB2YXIgc3BsaXRlZFVSTCA9IGRhdGFPYmplY3RVUkwuc3BsaXQoJy8nKTsKICAgICAgICB2YXIgZmluYWxVUkwgPSBzcGxpdGVkVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRVUkxbMl0gKyAnLycgKyBzcGxpdGVkVVJMWzNdOwogICAgICAgIGlmIChzcGxpdGVkVVJMLmxlbmd0aCA+IDYpIHsKICAgICAgICAgIGZpbmFsVVJMID0gc3BsaXRlZFVSTFswXSArICcvLycgKyBzcGxpdGVkVVJMWzJdICsgJy8nICsgc3BsaXRlZFVSTFszXSArICcvJyArIHNwbGl0ZWRVUkxbNF07CiAgICAgICAgfQoKICAgICAgICAvLyBjaGVjayBpZiBpcyB0aGUgY3JlYXRvciBvZiB0aGUgaHlwZXJ0eQogICAgICAgIHZhciByZXBvcnRlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhmaW5hbFVSTCk7CgogICAgICAgIGlmIChyZXBvcnRlclVSTCkgewogICAgICAgICAgcmVzb2x2ZShyZXBvcnRlclVSTCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYW4gYXNzb2NpYXRpb24gZnJvbSBhbiBoeXBlcnR5VVJMIHRvIHRoZSBkYXRhT2JqZWN0CiAgICAgICAgICB2YXIgc3RvcmVkUmVwb3J0ZXJVUkwgPSBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5W2ZpbmFsVVJMXTsKCiAgICAgICAgICBpZiAoc3RvcmVkUmVwb3J0ZXJVUkwpIHsKICAgICAgICAgICAgcmVzb2x2ZShzdG9yZWRSZXBvcnRlclVSTCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhbnkgaHlwZXJ0eSB0aGF0IHN1YnNjcmliZWQgdGhlIGRhdGFPYmplY3RVUkwKICAgICAgICAgICAgdmFyIHN1YnNjcmliZXJIeXBlcnR5ID0gX3RoaXMucmVnaXN0cnkuZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJIeXBlcnR5KGRhdGFPYmplY3RVUkwpOwoKICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJIeXBlcnR5KSB7CiAgICAgICAgICAgICAgcmVzb2x2ZShzdWJzY3JpYmVySHlwZXJ0eSk7CiAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgIC8vIHNlYXJjaCBpbiBkb21haW4gcmVnaXN0cnkgZm9yIHRoZSBoeXBlcnR5IGFzc29jaWF0ZWQgdG8gdGhlIGRhdGFPYmplY3QKICAgICAgICAgICAgICAvLyBzZWFyY2ggaW4gY2FzZSBpcyBhIHN1YnNjcmliZXIgd2hvIHdhbnRzIHRvIGtub3cgdGhlIHJlcG9ydGVyCiAgICAgICAgICAgICAgX3RoaXMucmVnaXN0cnkuZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKGZpbmFsVVJMLCBzcGxpdGVkVVJMWzJdKS50aGVuKGZ1bmN0aW9uIChkYXRhT2JqZWN0KSB7CiAgICAgICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5W2ZpbmFsVVJMXSA9IGRhdGFPYmplY3QucmVwb3J0ZXI7CiAgICAgICAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QucmVwb3J0ZXIpOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogZmlsdGVyIHRoZSBtZXNzYWdlcyB0byBoYXNoLCBieSByZW1vdmluZyBzb21lIGZpZWxkcyBub3QgZ2VuZXJhdGVkIGJ5IHRoZSBydW50aW1lIGNvcmUKICAgICogQHBhcmFtIHtNZXNzYWdlfSAgbWVzc2FnZSAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UKICAgICogQHBhcmFtIHtTdHJpbmd9ICBkZWNyeXB0ZWRWYWx1ZSAoT3B0aW9uYWwpICAgIHZhbHVlIGZyb20gYm9keS52YWx1ZSBpbiBjYXNlIGl0IG9yaWdpbmFsbHkgY29tZXMgZW5jcnlwdGVkCiAgICAqIEBwYXJhbSB7SlNPTn0gIGlkZW50aXR5KE9wdGlvbmFsKSAgICBhZGQgdGhlIGh5cGVydHkgaWRlbnRpdHkgYXNzb2NpYXRlZCBpbiBjYXNlIGlzIG5vdCBhZGRlZCB0byB0aGUgaW5pdGlhbCBtZXNzYWdlCiAgICAqIEByZXR1cm4ge01lc3NhZ2V9ICBuZXcgbWVzc2FnZSBmaWx0ZXJlZAogICAgKi8KCiAgfSwgewogICAga2V5OiAnX2ZpbHRlck1lc3NhZ2VUb0hhc2gnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZFZhbHVlLCBpZGVudGl0eSkgewoKICAgICAgcmV0dXJuIHsKICAgICAgICB0eXBlOiBtZXNzYWdlLnR5cGUsCiAgICAgICAgZnJvbTogbWVzc2FnZS5mcm9tLAogICAgICAgIHRvOiBtZXNzYWdlLnRvLAogICAgICAgIGJvZHk6IHsKICAgICAgICAgIGlkZW50aXR5OiBpZGVudGl0eSB8fCBtZXNzYWdlLmJvZHkuaWRlbnRpdHksCiAgICAgICAgICB2YWx1ZTogZGVjcnlwdGVkVmFsdWUgfHwgbWVzc2FnZS5ib2R5LnZhbHVlLAogICAgICAgICAgaGFuZHNoYWtlUGhhc2U6IG1lc3NhZ2UuYm9keS5oYW5kc2hha2VQaGFzZQogICAgICAgIH0KICAgICAgfTsKICAgIH0KCiAgICAvKioKICAgICogZ2VuZXJhdGVzIHRoZSBpbml0aWFsIHN0cnVjdHVyZSBmb3IgdGhlIGtleXMgYmV0d2VlbiB0d28gdXNlcnMKICAgICogQHBhcmFtIHtKU09OfSAgICBtZXNzYWdlICAgICAgICAgICAgICBpbml0aWFsIG1lc3NhZ2UgdGhhdCB0cmlnZ2VycyB0aGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uCiAgICAqIEBwYXJhbSB7U3RyaW5nfSAgdXNlclVSTCAgICAgICAgICAgICAgdXNlclVSTAogICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlY2VpdmVyKE9wdGlvbmFsKSAgaW5kaWNhdGVzIGlmIGlzIHRoZSBzZW5kZXIgb3IgdGhlIHJlY2VpdmVyIHRoYXQgY3JlYXRlcyBhIG5ldyBjaGF0IGNyeXB0bwogICAgKiBAcmV0dXJuIHtKU09OfSBuZXdDaGF0Q3J5cHRvICBuZXcgSlNPTiBzdHJ1Y3R1cmUgZm9yIHRoZSBjaGF0IGNyeXB0bwogICAgKi8KCiAgfSwgewogICAga2V5OiAnX25ld0NoYXRDcnlwdG8nLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwsIHJlY2VpdmVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2NoZWNrIHdoZXRoZXIgaXMgdGhlIHNlbmRlciBvciB0aGUgcmVjZWl2ZXIgdG8gY3JlYXRlIGEgbmV3IGNoYXRDcnlwdG8KICAgICAgLy90byBtYW50YWluIGNvbnNpc3RlbmN5IG9uIHRoZSBrZXlzIGlmIHRoZSByZWNlaXZlciBjcmVhdGUgYSBuZXcgY2hhdENyeXB0bywKICAgICAgLy90aGVuIGludmVydCB0aGUgZmllbGRzCiAgICAgIHZhciBmcm9tID0gcmVjZWl2ZXIgPyBtZXNzYWdlLnRvIDogbWVzc2FnZS5mcm9tOwogICAgICB2YXIgdG8gPSByZWNlaXZlciA/IG1lc3NhZ2UuZnJvbSA6IG1lc3NhZ2UudG87CgogICAgICB2YXIgdXNlckluZm8gPSBfdGhpcy5nZXRJZGVudGl0eSh1c2VyVVJMKTsKCiAgICAgIHZhciBuZXdDaGF0Q3J5cHRvID0gewogICAgICAgIGh5cGVydHlGcm9tOiB7CiAgICAgICAgICBoeXBlcnR5OiBmcm9tLAogICAgICAgICAgdXNlcklEOiB1c2VySW5mby5tZXNzYWdlSW5mby51c2VyUHJvZmlsZS51c2VybmFtZSwKICAgICAgICAgIHByaXZhdGVLZXk6IHVzZXJJbmZvLmtleVBhaXIucHJpdmF0ZSwKICAgICAgICAgIHB1YmxpY0tleTogdXNlckluZm8ua2V5UGFpci5wdWJsaWMsCiAgICAgICAgICBhc3NlcnRpb246IHVzZXJJbmZvLmFzc2VydGlvbiwKICAgICAgICAgIG1lc3NhZ2VJbmZvOiB1c2VySW5mby5tZXNzYWdlSW5mbwogICAgICAgIH0sCiAgICAgICAgaHlwZXJ0eVRvOiB7CiAgICAgICAgICBoeXBlcnR5OiB0bywKICAgICAgICAgIHVzZXJJRDogdW5kZWZpbmVkLAogICAgICAgICAgcHVibGljS2V5OiB1bmRlZmluZWQsCiAgICAgICAgICBhc3NlcnRpb246IHVuZGVmaW5lZAogICAgICAgIH0sCiAgICAgICAga2V5czogewogICAgICAgICAgaHlwZXJ0eVRvU2Vzc2lvbktleTogdW5kZWZpbmVkLAogICAgICAgICAgaHlwZXJ0eUZyb21TZXNzaW9uS2V5OiB1bmRlZmluZWQsCiAgICAgICAgICBoeXBlcnR5VG9IYXNoS2V5OiB1bmRlZmluZWQsCiAgICAgICAgICBoeXBlcnR5RnJvbUhhc2hLZXk6IHVuZGVmaW5lZCwKICAgICAgICAgIHRvUmFuZG9tOiB1bmRlZmluZWQsCiAgICAgICAgICBmcm9tUmFuZG9tOiB1bmRlZmluZWQsCiAgICAgICAgICBwcmVtYXN0ZXJLZXk6IHVuZGVmaW5lZCwKICAgICAgICAgIG1hc3RlcktleTogdW5kZWZpbmVkCiAgICAgICAgfSwKICAgICAgICBoYW5kc2hha2VIaXN0b3J5OiB7CiAgICAgICAgICBzZW5kZXJIZWxsbzogdW5kZWZpbmVkLAogICAgICAgICAgcmVjZWl2ZXJIZWxsbzogdW5kZWZpbmVkLAogICAgICAgICAgc2VuZGVyQ2VydGlmaWNhdGU6IHVuZGVmaW5lZCwKICAgICAgICAgIHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlOiB1bmRlZmluZWQKICAgICAgICB9LAogICAgICAgIGluaXRpYWxNZXNzYWdlOiBtZXNzYWdlLmJvZHkuaWdub3JlID8gdW5kZWZpbmVkIDogbWVzc2FnZSwKICAgICAgICBjYWxsYmFjazogbWVzc2FnZS5jYWxsYmFjaywKICAgICAgICBhdXRoZW50aWNhdGVkOiBmYWxzZSwKICAgICAgICBkYXRhT2JqZWN0VVJMOiBtZXNzYWdlLmRhdGFPYmplY3RVUkwKICAgICAgfTsKCiAgICAgIHJldHVybiBuZXdDaGF0Q3J5cHRvOwogICAgfQogIH0sIHsKICAgIGtleTogJ21lc3NhZ2VCdXMnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1czsKICAgIH0KCiAgICAvKioKICAgICogU2V0IHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnkKICAgICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1cwogICAgKi8KICAgICwKICAgIHNldDogZnVuY3Rpb24gc2V0KG1lc3NhZ2VCdXMpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMuX21lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzOwogICAgfQoKICAgIC8qKgogICAgKiByZXR1cm4gdGhlIHJlZ2lzdHJ5IGluIHRoaXMgaWRNb2R1bGUKICAgICogQHBhcmFtIHtyZWdpc3RyeX0gICAgICAgICAgIHJlZ2lzdHJ5CiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RyeScsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9yZWdpc3RyeTsKICAgIH0KCiAgICAvKioKICAgICogU2V0IHRoZSByZWdpc3RyeSBpbiB0aGlzIGlkTW9kdWxlCiAgICAqIEBwYXJhbSB7cmVnaXN0cnl9ICAgICByZWcKICAgICovCiAgICAsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChyZWdpc3RyeSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBfdGhpcy5fcmVnaXN0cnkgPSByZWdpc3RyeTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIElkZW50aXR5TW9kdWxlOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBJZGVudGl0eU1vZHVsZTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMuanMiOjQ1NywiLi9DcnlwdG8iOjQyNSwiLi9HdWlGYWtlIjo0MjYsIi4vSWRlbnRpdHkiOjQyNywiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5IjozLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTZ9XSw0Mjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIEFjdGlvbnNTZXJ2aWNlID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFjdGlvbnNTZXJ2aWNlKGNvbnRleHQpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEFjdGlvbnNTZXJ2aWNlKTsKCiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0OwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQWN0aW9uc1NlcnZpY2UsIFt7CiAgICBrZXk6ICdlbmZvcmNlUG9saWNpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIHBvbGljaWVzID0gX3RoaXMuY29udGV4dC5nZXRQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSk7CgogICAgICAgIGlmIChwb2xpY2llcyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBpZiAocG9saWNpZXMuc2VydmljZVByb3ZpZGVyUG9saWN5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcG9saWNpZXMuc2VydmljZVByb3ZpZGVyUG9saWN5LmVuZm9yY2VBY3Rpb25zKF90aGlzLmNvbnRleHQsIG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2VzKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlcyk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHBvbGljaWVzLnVzZXJQb2xpY3kgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIHBvbGljaWVzLnVzZXJQb2xpY3kuZW5mb3JjZUFjdGlvbnMoX3RoaXMuY29udGV4dCwgbWVzc2FnZSkudGhlbihmdW5jdGlvbiAobWVzc2FnZXMpIHsKICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXNvbHZlKFttZXNzYWdlXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShbbWVzc2FnZV0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZm9yd2FyZFRvSUQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcndhcmRUb0lEKG1lc3NhZ2UsIGVtYWlsKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIGlmICghX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkpIHRocm93IG5ldyBFcnJvcignZm9yd2FyZCBtZXNzYWdlIHRvIGdpdmVuIElEIGlzIHVuc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQnKTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGlmIChfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5oeXBlcnRpZXNMaXN0WzBdLmh5cGVydHlVUkwgPT09IG1lc3NhZ2UudG8pIHsKICAgICAgICAgIHZhciBzcGxpdFRvID0gbWVzc2FnZS50by5zcGxpdCgnOi8vJyk7CiAgICAgICAgICBpZiAoc3BsaXRUb1swXSAhPT0gJ3J1bnRpbWUnKSB7CiAgICAgICAgICAgIF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmRpc2NvdmVySHlwZXJ0eVBlclVzZXIoZW1haWwpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgIG1lc3NhZ2UudG8gPSByZXN1bHQuaHlwZXJ0eVVSTDsKICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkudmlhID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2ZvcndhcmRUb0h5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGZvcndhcmRUb0h5cGVydHkobWVzc2FnZSwgaHlwZXJ0eVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICBpZiAoIV90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ2ZvcndhcmQgbWVzc2FnZSB0byBnaXZlbiBJRCBpcyB1bnN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Jyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgaWYgKF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Lmh5cGVydGllc0xpc3RbMF0uaHlwZXJ0eVVSTCA9PT0gbWVzc2FnZS50bykgewogICAgICAgICAgdmFyIHNwbGl0VG8gPSBtZXNzYWdlLnRvLnNwbGl0KCc6Ly8nKTsKICAgICAgICAgIGlmIChzcGxpdFRvWzBdICE9PSAncnVudGltZScpIHsKICAgICAgICAgICAgbWVzc2FnZS50byA9IGh5cGVydHlVUkw7CiAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52aWEgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgIF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3NlbmRBdXRvbWF0aWNNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kQXV0b21hdGljTWVzc2FnZShtZXNzYWdlLCB0ZXh0KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICB2YXIgYXV0b21hdGljTWVzc2FnZSA9IHsKICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sCiAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLAogICAgICAgICAgYm9keTogewogICAgICAgICAgICB2YWx1ZTogdGV4dAogICAgICAgICAgfSwKICAgICAgICAgIHR5cGU6IG1lc3NhZ2UudHlwZQogICAgICAgIH07CiAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICBfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShhdXRvbWF0aWNNZXNzYWdlKTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBBY3Rpb25zU2VydmljZTsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gQWN0aW9uc1NlcnZpY2U7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjoxMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNn1dLDQzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBPcGVyYXRvcnMgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gT3BlcmF0b3JzKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgT3BlcmF0b3JzKTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE9wZXJhdG9ycywgW3sKICAgIGtleTogJ2FuZCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gYW5kKHBhcmFtcykgewogICAgICByZXR1cm4gcGFyYW1zWzBdICYmIHBhcmFtc1sxXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdiZXR3ZWVuJywKICAgIHZhbHVlOiBmdW5jdGlvbiBiZXR3ZWVuKHBhcmFtcykgewogICAgICB2YXIgc3RhcnQgPSBwYXJzZUludChwYXJhbXNbMF1bMF0pOwogICAgICB2YXIgZW5kID0gcGFyc2VJbnQocGFyYW1zWzBdWzFdKTsKICAgICAgdmFyIG5vdyA9IHBhcmFtc1sxXTsKCiAgICAgIGlmIChlbmQgPCBzdGFydCkgewogICAgICAgIG5vdyA9IG5vdyA8IHN0YXJ0ID8gbm93ICs9IDI0MDAgOiBub3c7CiAgICAgICAgZW5kICs9IDI0MDA7CiAgICAgIH0KCiAgICAgIHJldHVybiBub3cgPiBzdGFydCAmJiBub3cgPCBlbmQ7CiAgICB9CiAgfSwgewogICAga2V5OiAnZXF1YWxzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlcXVhbHMocGFyYW1zKSB7CiAgICAgIHJldHVybiBTdHJpbmcocGFyYW1zWzBdKSA9PT0gJyonIHx8IFN0cmluZyhwYXJhbXNbMF0pID09PSBTdHJpbmcocGFyYW1zWzFdKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdncmVhdGVyVGhhbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JlYXRlclRoYW4ocGFyYW1zKSB7CiAgICAgIHJldHVybiBwYXJhbXNbMV0gPiBwYXJhbXNbMF07CiAgICB9CiAgfSwgewogICAga2V5OiAnaW4nLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pbihwYXJhbXMpIHsKICAgICAgcmV0dXJuIHBhcmFtc1swXS5pbmRleE9mKHBhcmFtc1sxXSkgPiAtMTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdsZXNzVGhhbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gbGVzc1RoYW4ocGFyYW1zKSB7CiAgICAgIHJldHVybiBwYXJhbXNbMV0gPCBwYXJhbXNbMF07CiAgICB9CiAgfSwgewogICAga2V5OiAnbm90JywKICAgIHZhbHVlOiBmdW5jdGlvbiBub3QocGFyYW1zKSB7CiAgICAgIHJldHVybiAhcGFyYW1zWzBdOwogICAgfQogIH0sIHsKICAgIGtleTogJ29yJywKICAgIHZhbHVlOiBmdW5jdGlvbiBvcihwYXJhbXMpIHsKICAgICAgcmV0dXJuIHBhcmFtc1swXSB8fCBwYXJhbXNbMV07CiAgICB9CiAgfV0pOwogIHJldHVybiBPcGVyYXRvcnM7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IE9wZXJhdG9yczsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNn1dLDQzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9PcGVyYXRvcnMgPSByZXF1aXJlKCcuL09wZXJhdG9ycycpOwoKdmFyIF9PcGVyYXRvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT3BlcmF0b3JzKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBUaGUgUG9saWN5IERlY2lzaW9uIFBvaW50IChQRFApIGRlY2lkZXMgaWYgYSBtZXNzYWdlIGlzIHRvIGJlIGF1dGhvcmlzZWQgYnkgY2hlY2tpbmcgYSBzZXQgb2YKKiBwb2xpY2llcy4gVGhlIHJlc291cmNlIHRvIGJlIHZlcmlmaWVkIGlzIHNwZWNpZmllZCBpbiB0aGUgZmlyc3Qgd29yZCBvZiB0aGUgJ2NvbmRpdGlvbicgZmllbGQgb2YKKiBhIFBvbGljeSBvYmplY3QuIFRoZSBpbXBsZW1lbnRhdGlvbiB0aGF0IHZlcmlmaWVzIGlmIHRoZSBtZXNzYWdlIGlzIGNvbXBsaWFudCB3aXRoIGEgcG9saWN5IGlzCiogc3BlY2lmaWVkIGluIGEgaGFzaHRhYmxlIHRvIGFsbG93IGR5bmFtaWMgZGVmaW5pdGlvbiBvZiB0aGUgaW1wbGVtZW50YXRpb24sIHByb3ZpZGluZwoqIGV4dGVuc2liaWxpdHkgdG8gdGhlIFBvbGljeSBFbmdpbmUgZnVuY3Rpb25hbGl0aWVzLgoqLwp2YXIgUERQID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBEUChjb250ZXh0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQRFApOwoKICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7CiAgICB0aGlzLm9wZXJhdG9ycyA9IG5ldyBfT3BlcmF0b3JzMi5kZWZhdWx0KCk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQRFAsIFt7CiAgICBrZXk6ICdldmFsdWF0ZVBvbGljaWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBldmFsdWF0ZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKSB7CiAgICAgIHZhciBwb2xpY2llcyA9IHRoaXMuY29udGV4dC5nZXRQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSk7CiAgICAgIHZhciByZXN1bHQgPSAnTm90IEFwcGxpY2FibGUnOwoKICAgICAgaWYgKHBvbGljaWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICByZXN1bHQgPSB0aGlzLmV2YWx1YXRlUG9saWN5KG1lc3NhZ2UsIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSwgaXNJbmNvbWluZ01lc3NhZ2UpOwogICAgICAgIGlmIChyZXN1bHQgfHwgcmVzdWx0ID09PSAnTm90IEFwcGxpY2FibGUnKSB7CiAgICAgICAgICB2YXIgdXNlclJlc3VsdCA9IHRoaXMuZXZhbHVhdGVQb2xpY3kobWVzc2FnZSwgcG9saWNpZXMudXNlclBvbGljeSwgaXNJbmNvbWluZ01lc3NhZ2UpOwogICAgICAgICAgaWYgKHVzZXJSZXN1bHQgIT09ICdOb3QgQXBwbGljYWJsZScpIHsKICAgICAgICAgICAgcmVzdWx0ID0gdXNlclJlc3VsdDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAnZXZhbHVhdGVQb2xpY3knLAogICAgdmFsdWU6IGZ1bmN0aW9uIGV2YWx1YXRlUG9saWN5KG1lc3NhZ2UsIHBvbGljeSwgaXNJbmNvbWluZykgewogICAgICB2YXIgcmVzdWx0ID0gJ05vdCBBcHBsaWNhYmxlJzsKICAgICAgaWYgKHBvbGljeSkgewogICAgICAgIHJlc3VsdCA9IHBvbGljeS5ldmFsdWF0ZVJ1bGVzKHRoaXMuY29udGV4dCwgbWVzc2FnZSwgaXNJbmNvbWluZyk7CiAgICAgIH0KCiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgfV0pOwogIHJldHVybiBQRFA7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBEUDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9PcGVyYXRvcnMiOjQzMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNn1dLDQzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfQWN0aW9uc1NlcnZpY2UgPSByZXF1aXJlKCcuL0FjdGlvbnNTZXJ2aWNlJyk7Cgp2YXIgX0FjdGlvbnNTZXJ2aWNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FjdGlvbnNTZXJ2aWNlKTsKCnZhciBfUERQID0gcmVxdWlyZSgnLi9QRFAnKTsKCnZhciBfUERQMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BEUCk7Cgp2YXIgX1BvbGljeSA9IHJlcXVpcmUoJy4vUG9saWN5Jyk7Cgp2YXIgX1BvbGljeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qb2xpY3kpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBQRVAgPSBmdW5jdGlvbiAoKSB7CgogIC8qKgogICogQ3JlYXRlcyBhIFBvbGljeSBFbmZvcmNlbWVudCBQb2ludCAoUEVQKSBpbnN0YW5jZQogICogQHBhcmFtICAgIHtPYmplY3R9ICAgIGNvbnRleHQKICAqLwogIGZ1bmN0aW9uIFBFUChjb250ZXh0KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQRVApOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMucGRwID0gbmV3IF9QRFAyLmRlZmF1bHQoY29udGV4dCk7CiAgICBfdGhpcy5hY3Rpb25zU2VydmljZSA9IG5ldyBfQWN0aW9uc1NlcnZpY2UyLmRlZmF1bHQoY29udGV4dCk7CiAgICBfdGhpcy5jb250ZXh0ID0gY29udGV4dDsKICAgIGNvbnRleHQucGVwID0gX3RoaXM7CgogICAgLy9UT0RPIHNob3VsZCBiZSBhZGRlZCBhIHRyaWdnZXIgdG8gdmVyaWZ5IHdoZW4gdGhlIGxvYWRDb25maWd1cmF0aW9ucyBpcyBzdWNjZXNzZnVsbHkgY29tcGxldGVkCiAgICBjb250ZXh0LmxvYWRDb25maWd1cmF0aW9ucygpOwogIH0KCiAgLyoqCiAgKiBBZGRzIGEgcG9saWN5IHRvIHRoZSBQb2xpY3kgRW5mb3JjZW1lbnQgUG9pbnQgKFBFUCkuIFRoZSBwb2xpY3kgY2FuIGJlIGNyZWF0ZWQgYnkgdGhlIHNlcnZpY2UKICAqIHByb3ZpZGVyIG9yIGJ5IHRoZSB1c2VyLgogICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIHNvdXJjZQogICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGtleQogICogQHBhcmFtICAgIHtPYmplY3R9ICAgIHBvbGljeQogICovCgoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQRVAsIFt7CiAgICBrZXk6ICdhZGRQb2xpY3knLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFBvbGljeShzb3VyY2UsIGtleSwgcG9saWN5LCBjb21iaW5pbmdBbGdvcml0aG0pIHsKICAgICAgaWYgKCFzb3VyY2UpIHRocm93IG5ldyBFcnJvcignc291cmNlIGlzIG5vdCBkZWZpbmVkJyk7CiAgICAgIGlmICgha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpOwoKICAgICAgaWYgKHBvbGljeSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcG9saWN5ID0gbmV3IF9Qb2xpY3kyLmRlZmF1bHQoa2V5LCBbXSwgW10sIGNvbWJpbmluZ0FsZ29yaXRobSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKCEocG9saWN5IGluc3RhbmNlb2YgX1BvbGljeTIuZGVmYXVsdCkpIHsKICAgICAgICAgIHBvbGljeSA9IG5ldyBfUG9saWN5Mi5kZWZhdWx0KHBvbGljeS5rZXksIHBvbGljeS5ydWxlcywgcG9saWN5LmFjdGlvbnMsIHBvbGljeS5jb21iaW5pbmdBbGdvcml0aG0pOwogICAgICAgIH0KICAgICAgfQoKICAgICAgc3dpdGNoIChzb3VyY2UpIHsKICAgICAgICBjYXNlICdTRVJWSUNFX1BST1ZJREVSJzoKICAgICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoc291cmNlLCBwb2xpY3ksIGtleSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdVU0VSJzoKICAgICAgICAgIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XSA9IHBvbGljeTsKICAgICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoc291cmNlKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2F1dGhvcmlzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0aG9yaXNlKG1lc3NhZ2UpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBjb25zb2xlLmxvZygnLS0tIFBvbGljeSBFbmdpbmUgLS0tJyk7CiAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpOwogICAgICBpZiAoIW1lc3NhZ2UpIHRocm93IG5ldyBFcnJvcignbWVzc2FnZSBpcyBub3QgZGVmaW5lZCcpOwogICAgICBpZiAoIW1lc3NhZ2UuZnJvbSkgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlLmZyb20gaXMgbm90IGRlZmluZWQnKTsKICAgICAgaWYgKCFtZXNzYWdlLnRvKSB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UudG8gaXMgbm90IGRlZmluZWQnKTsKICAgICAgaWYgKCFtZXNzYWdlLnR5cGUpIHRocm93IG5ldyBFcnJvcignbWVzc2FnZS50eXBlIGlzIG5vdCBkZWZpbmVkJyk7CiAgICAgIG1lc3NhZ2UuYm9keSA9IG1lc3NhZ2UuYm9keSB8fCB7fTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBtZXNzYWdlLmJvZHkgPSBtZXNzYWdlLmJvZHkgfHwge307CiAgICAgICAgdmFyIF90aGlzID0gX3RoaXMyOwogICAgICAgIHZhciByZXN1bHQgPSB2b2lkIDA7CiAgICAgICAgaWYgKF90aGlzLl9pc1RvVmVyaWZ5KG1lc3NhZ2UpKSB7CiAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgaXNJbmNvbWluZyA9IF90aGlzLl9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKTsKICAgICAgICAgICAgX3RoaXMuY29udGV4dC5wcmVwYXJlRm9yRXZhbHVhdGlvbihtZXNzYWdlLCBpc0luY29taW5nKS50aGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7CiAgICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMucGRwLmV2YWx1YXRlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZyk7CiAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykgewogICAgICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMuY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyOwogICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgX3RoaXMuYWN0aW9uc1NlcnZpY2UuZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmcpLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2VzKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIG1lc3NhZ2VzKSB7CiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc1tpXTsKICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGV4dC5wcmVwYXJlVG9Gb3J3YXJkKG1lc3NhZ2UsIGlzSW5jb21pbmcsIHJlc3VsdCkudGhlbihmdW5jdGlvbiAobWVzc2FnZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gbWVzc2FnZS5ib2R5LmF1dGggPT09IHVuZGVmaW5lZCA/IHRydWUgOiBtZXNzYWdlLmJvZHkuYXV0aDsKICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSB7IGJvZHk6IHsgY29kZTogNDAzLCBkZXNjcmlwdGlvbjogJ0Jsb2NrZWQgYnkgcG9saWN5JyB9LCBmcm9tOiBtZXNzYWdlLnRvLCB0bzogbWVzc2FnZS5mcm9tLCB0eXBlOiAncmVzcG9uc2UnIH07CiAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3JNZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSBfdGhpcy5jb250ZXh0LmRlZmF1bHRCZWhhdmlvdXI7CiAgICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7CiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0geyBib2R5OiB7IGNvZGU6IDQwMywgZGVzY3JpcHRpb246ICdCbG9ja2VkIGJ5IHBvbGljeScgfSwgZnJvbTogbWVzc2FnZS50bywgdG86IG1lc3NhZ2UuZnJvbSwgdHlwZTogJ3Jlc3BvbnNlJyB9OwogICAgICAgICAgICByZWplY3QoZXJyb3JNZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2F1dGhvcmlzZVN5bmMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGF1dGhvcmlzZVN5bmMobWVzc2FnZSkgewogICAgICB2YXIgcmVzdWx0ID0gdm9pZCAwOwogICAgICBtZXNzYWdlLmJvZHkgPSBtZXNzYWdlLmJvZHkgfHwge307CiAgICAgIGlmICh0aGlzLl9pc1RvVmVyaWZ5KG1lc3NhZ2UpKSB7CiAgICAgICAgdmFyIGlzSW5jb21pbmcgPSB0aGlzLl9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKTsKICAgICAgICBtZXNzYWdlID0gdGhpcy5jb250ZXh0LnByZXBhcmVGb3JFdmFsdWF0aW9uKG1lc3NhZ2UsIGlzSW5jb21pbmcpOwogICAgICAgIHJlc3VsdCA9IHRoaXMucGRwLmV2YWx1YXRlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZyk7CiAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykgewogICAgICAgICAgcmVzdWx0ID0gdGhpcy5jb250ZXh0LmRlZmF1bHRCZWhhdmlvdXI7CiAgICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICB0aGlzLmFjdGlvbnNTZXJ2aWNlLmVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nKTsKICAgICAgICBtZXNzYWdlID0gdGhpcy5jb250ZXh0LnByZXBhcmVUb0ZvcndhcmQobWVzc2FnZSwgaXNJbmNvbWluZywgcmVzdWx0KTsKICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IG1lc3NhZ2UuYm9keS5hdXRoID09PSB1bmRlZmluZWQgPyB0cnVlIDogbWVzc2FnZS5ib2R5LmF1dGg7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHQgPSB0aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91cjsKICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaXNJbmNvbWluZ01lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKSB7CiAgICAgIHJldHVybiBtZXNzYWdlLmJvZHkgIT09IHVuZGVmaW5lZCAmJiBtZXNzYWdlLmJvZHkuaWRlbnRpdHkgIT09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTsKICAgIH0KCiAgICAvKioKICAgICogSWRlbnRpZmllcyB0aGUgbWVzc2FnZXMgdG8gYmUgdmVyaWZpZWQgYnkgdGhlIFBvbGljeSBFbmdpbmUKICAgICogQHBhcmFtICAgIHtNZXNzYWdlfSAgIG1lc3NhZ2UKICAgICogQHJldHVybnMgIHtib29sZWFufSAgIHJldHVybnMgdHJ1ZSBpZiB0aGUgbWVzc2FnZSByZXF1aXJlcyBlbmNyeXB0aW9uL2RlY3J5cHRpb24KICAgICogICAgICAgICAgICAgICAgICAgICAgIG9yIGlmIGl0cyB0eXBlIGVxdWFscyAnaGFuZHNoYWtlJzsgZmFsc2Ugb3RoZXJ3aXNlCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfaXNUb1ZlcmlmeScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzVG9WZXJpZnkobWVzc2FnZSkgewogICAgICB2YXIgc2NoZW1hc1RvSWdub3JlID0gWydkb21haW4nLCAnZG9tYWluLWlkcCcsICdnbG9iYWwnLCAnaHlwZXJ0eS1ydW50aW1lJywgJ3J1bnRpbWUnXTsKICAgICAgdmFyIHNwbGl0RnJvbSA9IG1lc3NhZ2UuZnJvbS5zcGxpdCgnOi8vJyk7CiAgICAgIHZhciBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdOwogICAgICB2YXIgc3BsaXRUbyA9IG1lc3NhZ2UudG8uc3BsaXQoJzovLycpOwogICAgICB2YXIgdG9TY2hlbWEgPSBzcGxpdFRvWzBdOwoKICAgICAgaWYgKG1lc3NhZ2UuZnJvbSA9PT0gZnJvbVNjaGVtYSB8fCBtZXNzYWdlLnRvID09PSB0b1NjaGVtYSB8fCBtZXNzYWdlLnR5cGUgPT09ICdyZWFkJyB8fCBtZXNzYWdlLnR5cGUgPT09ICdyZXNwb25zZScpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKGZyb21TY2hlbWEpID09PSAtMSB8fCBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZih0b1NjaGVtYSkgPT09IC0xOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAncmVtb3ZlUG9saWN5JywKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVQb2xpY3koc291cmNlLCBrZXkpIHsKICAgICAgaWYgKCFzb3VyY2UpIHRocm93IG5ldyBFcnJvcignc291cmNlIGlzIG5vdCBkZWZpbmVkJyk7CiAgICAgIGlmIChzb3VyY2UgIT09ICcqJyAmJiAha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpOwoKICAgICAgc3dpdGNoIChzb3VyY2UpIHsKICAgICAgICBjYXNlICcqJzoKICAgICAgICAgIHRoaXMuY29udGV4dC5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kgPSB7fTsKICAgICAgICAgIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXMgPSB7fTsKICAgICAgICAgIHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkOwogICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnVVNFUicpOwogICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnU0VSVklDRV9QUk9WSURFUicpOwogICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVBY3RpdmVQb2xpY3koKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ1NFUlZJQ0VfUFJPVklERVInOgogICAgICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC5zZXJ2aWNlUHJvdmlkZXJQb2xpY3lba2V5XTsKICAgICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ1VTRVInOgogICAgICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XTsKICAgICAgICAgIGlmIChrZXkgPT09IHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5KSB7CiAgICAgICAgICAgIHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkOwogICAgICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZUFjdGl2ZVBvbGljeSgpOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnVVNFUicpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIHBvbGljeSBzb3VyY2U6ICcgKyBzb3VyY2UpOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBQRVA7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBFUDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9BY3Rpb25zU2VydmljZSI6NDI5LCIuL1BEUCI6NDMxLCIuL1BvbGljeSI6NDMzLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTZ9XSw0MzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7Cgp2YXIgX0FsbG93T3ZlcnJpZGVzID0gcmVxdWlyZSgnLi9jb21iaW5pbmdBbGdvcml0aG1zL0FsbG93T3ZlcnJpZGVzJyk7Cgp2YXIgX0FsbG93T3ZlcnJpZGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FsbG93T3ZlcnJpZGVzKTsKCnZhciBfQmxvY2tPdmVycmlkZXMgPSByZXF1aXJlKCcuL2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMnKTsKCnZhciBfQmxvY2tPdmVycmlkZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQmxvY2tPdmVycmlkZXMpOwoKdmFyIF9GaXJzdEFwcGxpY2FibGUgPSByZXF1aXJlKCcuL2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlJyk7Cgp2YXIgX0ZpcnN0QXBwbGljYWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9GaXJzdEFwcGxpY2FibGUpOwoKdmFyIF9SdWxlID0gcmVxdWlyZSgnLi9SdWxlJyk7Cgp2YXIgX1J1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVsZSk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIFBvbGljeSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQb2xpY3koa2V5LCBydWxlcywgYWN0aW9ucywgY29tYmluaW5nQWxnb3JpdGhtKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQb2xpY3kpOwoKICAgIGlmICgha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpOwogICAgaWYgKCFhY3Rpb25zKSB0aHJvdyBuZXcgRXJyb3IoJ2FjdGlvbnMgYXJlIG5vdCBkZWZpbmVkJyk7CgogICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uczsKICAgIHRoaXMua2V5ID0ga2V5OwogICAgdGhpcy5fc2V0UnVsZXMocnVsZXMpOwogICAgdGhpcy5fc2V0Q29tYmluaW5nQWxnb3JpdGhtKGNvbWJpbmluZ0FsZ29yaXRobSk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQb2xpY3ksIFt7CiAgICBrZXk6ICdhZGRBY3Rpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEFjdGlvbihtZXRob2QsIHBhcmFtKSB7CiAgICAgIHRoaXMuYWN0aW9ucy5wdXNoKHsgbWV0aG9kOiBtZXRob2QsIHBhcmFtOiBwYXJhbSB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdjcmVhdGVSdWxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVSdWxlKGRlY2lzaW9uLCBjb25kaXRpb24sIHNjb3BlLCB0YXJnZXQsIHByaW9yaXR5KSB7CiAgICAgIGlmIChwcmlvcml0eSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcHJpb3JpdHkgPSB0aGlzLmdldExhc3RQcmlvcml0eSgpICsgMTsKICAgICAgfQogICAgICB2YXIgcnVsZSA9IG5ldyBfUnVsZTIuZGVmYXVsdChkZWNpc2lvbiwgY29uZGl0aW9uLCBzY29wZSwgdGFyZ2V0LCBwcmlvcml0eSk7CiAgICAgIHRoaXMucnVsZXMucHVzaChydWxlKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWxldGVSdWxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWxldGVSdWxlKHJ1bGUpIHsKICAgICAgdmFyIGluZGV4VG9SZW1vdmUgPSB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7CiAgICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4VG9SZW1vdmUsIDEpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2VuZm9yY2VBY3Rpb25zJywKICAgIHZhbHVlOiBmdW5jdGlvbiBlbmZvcmNlQWN0aW9ucyhjb250ZXh0LCBtZXNzYWdlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgcmVzdWx0cyA9IFtdOwogICAgICAgIGlmIChfdGhpcy5hY3Rpb25zLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgZm9yICh2YXIgaSBpbiBfdGhpcy5hY3Rpb25zKSB7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjb250ZXh0LnBlcC5hY3Rpb25zU2VydmljZVtfdGhpcy5hY3Rpb25zW2ldLm1ldGhvZF0obWVzc2FnZSwgX3RoaXMuYWN0aW9uc1tpXS5wYXJhbSk7CiAgICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpOwogICAgICAgICAgfQogICAgICAgICAgX3Byb21pc2UyLmRlZmF1bHQuYWxsKHJlc3VsdHMpLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2VzKSB7CiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpOwogICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShbbWVzc2FnZV0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZXZhbHVhdGVSdWxlcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXZhbHVhdGVSdWxlcyhjb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKSB7CiAgICAgIHZhciByZXN1bHRzID0gW107CiAgICAgIGZvciAodmFyIGkgaW4gdGhpcy5ydWxlcykgewogICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnJ1bGVzW2ldLmV2YWx1YXRlKGNvbnRleHQsIG1lc3NhZ2UsIGlzSW5jb21pbmcpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtLmNvbWJpbmUocmVzdWx0cyk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0TGFzdFByaW9yaXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0UHJpb3JpdHkoKSB7CiAgICAgIHZhciBwcmlvcml0aWVzID0gW107CgogICAgICBpZiAodGhpcy5ydWxlcy5sZW5ndGggIT09IDApIHsKICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMucnVsZXMpIHsKICAgICAgICAgIHByaW9yaXRpZXMucHVzaCh0aGlzLnJ1bGVzW2ldLnByaW9yaXR5KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIHByaW9yaXRpZXMpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAtMTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2dldFJ1bGVCeVByaW9yaXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSdWxlQnlQcmlvcml0eShwcmlvcml0eSkgewogICAgICBmb3IgKHZhciBpIGluIHRoaXMucnVsZXMpIHsKICAgICAgICBpZiAoU3RyaW5nKHRoaXMucnVsZXNbaV0ucHJpb3JpdHkpID09PSBTdHJpbmcocHJpb3JpdHkpKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5ydWxlc1tpXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgdGhyb3cgRXJyb3IoJ1J1bGUgd2l0aCBwcmlvcml0eSAnICsgcHJpb3JpdHkgKyAnIGRvZXMgbm90IGV4aXN0IScpOwogICAgfQogIH0sIHsKICAgIGtleTogJ19zZXRDb21iaW5pbmdBbGdvcml0aG0nLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRDb21iaW5pbmdBbGdvcml0aG0oY29tYmluaW5nQWxnb3JpdGhtKSB7CiAgICAgIGlmICghY29tYmluaW5nQWxnb3JpdGhtKSB7CiAgICAgICAgY29tYmluaW5nQWxnb3JpdGhtID0gJ2Jsb2NrT3ZlcnJpZGVzJzsKICAgICAgfQogICAgICBzd2l0Y2ggKGNvbWJpbmluZ0FsZ29yaXRobSkgewogICAgICAgIGNhc2UgJ2Jsb2NrT3ZlcnJpZGVzJzoKICAgICAgICAgIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtID0gbmV3IF9CbG9ja092ZXJyaWRlczIuZGVmYXVsdCgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnYWxsb3dPdmVycmlkZXMnOgogICAgICAgICAgdGhpcy5jb21iaW5pbmdBbGdvcml0aG0gPSBuZXcgX0FsbG93T3ZlcnJpZGVzMi5kZWZhdWx0KCk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdmaXJzdEFwcGxpY2FibGUnOgogICAgICAgICAgdGhpcy5jb21iaW5pbmdBbGdvcml0aG0gPSBuZXcgX0ZpcnN0QXBwbGljYWJsZTIuZGVmYXVsdCgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIGFsZ29yaXRobTogJyArIGNvbWJpbmluZ0FsZ29yaXRobSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdfc2V0UnVsZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRSdWxlcyhydWxlcykgewogICAgICB0aGlzLnJ1bGVzID0gW107CgogICAgICBmb3IgKHZhciBpIGluIHJ1bGVzKSB7CiAgICAgICAgdmFyIHJ1bGUgPSBydWxlc1tpXTsKICAgICAgICBpZiAocnVsZS5wcmlvcml0eSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBydWxlLnByaW9yaXR5ID0gdGhpcy5nZXRMYXN0UHJpb3JpdHkoKSArIDE7CiAgICAgICAgfQogICAgICAgIGlmICghKHJ1bGUgaW5zdGFuY2VvZiBfUnVsZTIuZGVmYXVsdCkpIHsKICAgICAgICAgIHJ1bGUgPSBuZXcgX1J1bGUyLmRlZmF1bHQocnVsZS5kZWNpc2lvbiwgcnVsZS5jb25kaXRpb24sIHJ1bGUuc2NvcGUsIHJ1bGUudGFyZ2V0LCBydWxlLnByaW9yaXR5KTsKICAgICAgICB9CiAgICAgICAgdGhpcy5ydWxlcy5wdXNoKHJ1bGUpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnc29ydFJ1bGVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzb3J0UnVsZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLnJ1bGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICB2YXIgeCA9IGEucHJpb3JpdHk7dmFyIHkgPSBiLnByaW9yaXR5OwogICAgICAgIHJldHVybiB4IDwgeSA/IC0xIDogeCA+IHkgPyAxIDogMDsKICAgICAgfSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBQb2xpY3k7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFBvbGljeTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi9SdWxlIjo0MzUsIi4vY29tYmluaW5nQWxnb3JpdGhtcy9BbGxvd092ZXJyaWRlcyI6NDM2LCIuL2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMiOjQzNywiLi9jb21iaW5pbmdBbGdvcml0aG1zL0ZpcnN0QXBwbGljYWJsZSI6NDM4LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTZ9XSw0MzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBSZVRoaW5rQ3R4ID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFJlVGhpbmtDdHgoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSZVRoaW5rQ3R4KTsKCiAgICB0aGlzLmRlZmF1bHRCZWhhdmlvdXIgPSB0cnVlOwogICAgdGhpcy5ncm91cHMgPSB7fTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFJlVGhpbmtDdHgsIFt7CiAgICBrZXk6ICdzY2hlbWUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zY2hlbWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIHZhciBmcm9tID0gcGFyYW1zLm1lc3NhZ2UuZnJvbTsKICAgICAgaWYgKCgwLCBfdXRpbHMuaXNEYXRhT2JqZWN0VVJMKShmcm9tKSkgewogICAgICAgIHRoaXMuX3NjaGVtZSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShmcm9tKS50eXBlOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX3NjaGVtZSA9IHVuZGVmaW5lZDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2RhdGUnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9kYXRlOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5vdykgewogICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciBkYXkgPSBTdHJpbmcoZGF0ZS5nZXREYXRlKCkpOwogICAgICBpZiAoZGF5Lmxlbmd0aCA9PT0gMSkgewogICAgICAgIGRheSA9ICcwJyArIGRheTsKICAgICAgfQogICAgICB2YXIgbW9udGggPSBTdHJpbmcoZGF0ZS5nZXRNb250aCgpICsgMSk7CiAgICAgIGlmIChtb250aC5sZW5ndGggPT09IDEpIHsKICAgICAgICBtb250aCA9ICcwJyArIG1vbnRoOwogICAgICB9CiAgICAgIHRoaXMuX2RhdGUgPSBkYXkgKyAnLycgKyBtb250aCArICcvJyArIGRhdGUuZ2V0RnVsbFllYXIoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkb21haW4nLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9kb21haW47CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLl9kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZUVtYWlsKShwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lKS5kb21haW47CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICd0eXBlJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fdHlwZTsKICAgIH0sCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChwYXJhbXMpIHsKICAgICAgdmFyIG1lc3NhZ2UgPSBwYXJhbXMubWVzc2FnZTsKICAgICAgaWYgKG1lc3NhZ2UuYm9keS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5fdHlwZSA9IG1lc3NhZ2UuYm9keS52YWx1ZS5yZXNvdXJjZVR5cGU7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdzb3VyY2UnLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9zb3VyY2U7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQocGFyYW1zKSB7CiAgICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB0aGlzLl9zb3VyY2UgPSBwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAndGltZScsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3RpbWU7CiAgICB9LAogICAgc2V0OiBmdW5jdGlvbiBzZXQobm93KSB7CiAgICAgIG5vdyA9IG5ldyBEYXRlKCk7CiAgICAgIHZhciBtaW51dGVzID0gU3RyaW5nKG5vdy5nZXRNaW51dGVzKCkpOwogICAgICBpZiAobWludXRlcy5sZW5ndGggPT09IDEpIHsKICAgICAgICBtaW51dGVzID0gJzAnICsgbWludXRlczsKICAgICAgfQogICAgICB0aGlzLl90aW1lID0gcGFyc2VJbnQoU3RyaW5nKG5vdy5nZXRIb3VycygpKSArIG1pbnV0ZXMpOwogICAgfQogIH0sIHsKICAgIGtleTogJ3dlZWtkYXknLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5OwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KG5vdykgewogICAgICB0aGlzLl93ZWVrZGF5ID0gU3RyaW5nKG5ldyBEYXRlKCkuZ2V0RGF5KCkpOwogICAgfQogIH1dKTsKICByZXR1cm4gUmVUaGlua0N0eDsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gUmVUaGlua0N0eDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQ1NywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNn1dLDQzNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9BZHZhbmNlZENvbmRpdGlvbiA9IHJlcXVpcmUoJy4vY29uZGl0aW9ucy9BZHZhbmNlZENvbmRpdGlvbicpOwoKdmFyIF9BZHZhbmNlZENvbmRpdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BZHZhbmNlZENvbmRpdGlvbik7Cgp2YXIgX0NvbmRpdGlvbiA9IHJlcXVpcmUoJy4vY29uZGl0aW9ucy9Db25kaXRpb24nKTsKCnZhciBfQ29uZGl0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbmRpdGlvbik7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMnKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9Cgp2YXIgUnVsZSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSdWxlKGRlY2lzaW9uLCBjb25kaXRpb24sIHNjb3BlLCB0YXJnZXQsIHByaW9yaXR5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSdWxlKTsKCiAgICB0aGlzLmRlY2lzaW9uID0gZGVjaXNpb247CiAgICB0aGlzLnNldENvbmRpdGlvbihjb25kaXRpb24pOwogICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5OwogICAgdGhpcy5zY29wZSA9IHNjb3BlOwogICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSdWxlLCBbewogICAga2V5OiAnc2V0Q29uZGl0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDb25kaXRpb24oY29uZGl0aW9uKSB7CiAgICAgIGlmICghKGNvbmRpdGlvbiBpbnN0YW5jZW9mIF9Db25kaXRpb24yLmRlZmF1bHQgfHwgY29uZGl0aW9uIGluc3RhbmNlb2YgX0FkdmFuY2VkQ29uZGl0aW9uMi5kZWZhdWx0IHx8IGNvbmRpdGlvbiBpbnN0YW5jZW9mIF9BZHZhbmNlZENvbmRpdGlvbjIuZGVmYXVsdCkpIHsKICAgICAgICB2YXIgYXR0cmlidXRlID0gY29uZGl0aW9uLmF0dHJpYnV0ZTsKICAgICAgICBzd2l0Y2ggKGF0dHJpYnV0ZSkgewogICAgICAgICAgY2FzZSAnc3Vic2NyaXB0aW9uJzoKICAgICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBuZXcgX0FkdmFuY2VkQ29uZGl0aW9uMi5kZWZhdWx0KGNvbmRpdGlvbi5hdHRyaWJ1dGUsIGNvbmRpdGlvbi5vcGVyYXRvciwgY29uZGl0aW9uLnBhcmFtcyk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSB1bmRlZmluZWQ6CiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gbmV3IF9BZHZhbmNlZENvbmRpdGlvbjIuZGVmYXVsdChjb25kaXRpb24pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gbmV3IF9Db25kaXRpb24yLmRlZmF1bHQoY29uZGl0aW9uLmF0dHJpYnV0ZSwgY29uZGl0aW9uLm9wZXJhdG9yLCBjb25kaXRpb24ucGFyYW1zKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdldmFsdWF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZXZhbHVhdGUoY29udGV4dCwgbWVzc2FnZSwgaXNJbmNvbWluZykgewogICAgICB2YXIgZmllbGQgPSBpc0luY29taW5nID8gbWVzc2FnZS50byA6IG1lc3NhZ2UuZnJvbTsKICAgICAgdmFyIGh5cGVydHlOYW1lID0gdm9pZCAwOwogICAgICBzd2l0Y2ggKHRoaXMuc2NvcGUpIHsKICAgICAgICBjYXNlICdnbG9iYWwnOgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgJ2h5cGVydHknOgogICAgICAgICAgaWYgKCgwLCBfdXRpbHMuaXNEYXRhT2JqZWN0VVJMKShmaWVsZCkpIHsKICAgICAgICAgICAgdmFyIHJlcG9ydGVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKCgwLCBfdXRpbHMucmVtb3ZlUGF0aEZyb21VUkwpKGZpZWxkKSk7CiAgICAgICAgICAgIGlmIChyZXBvcnRlciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgaHlwZXJ0eU5hbWUgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShyZXBvcnRlcik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChmaWVsZC5zcGxpdCgnOi8vJylbMF0gPT09ICdoeXBlcnR5JykgewogICAgICAgICAgICAgIGh5cGVydHlOYW1lID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUoKDAsIF91dGlscy5yZW1vdmVQYXRoRnJvbVVSTCkoZmllbGQpKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKGh5cGVydHlOYW1lID09PSB0aGlzLnRhcmdldCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJzsKCiAgICAgICAgY2FzZSAnaWRlbnRpdHknOgogICAgICAgICAgdmFyIG93bmVyID0gdm9pZCAwOwoKICAgICAgICAgIGlmICgoMCwgX3V0aWxzLmlzRGF0YU9iamVjdFVSTCkoZmllbGQpKSB7CiAgICAgICAgICAgIHZhciBfcmVwb3J0ZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMoKDAsIF91dGlscy5yZW1vdmVQYXRoRnJvbVVSTCkoZmllbGQpKTsKICAgICAgICAgICAgb3duZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIoX3JlcG9ydGVyKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChmaWVsZC5zcGxpdCgnOi8vJylbMF0gPT09ICdoeXBlcnR5JykgewogICAgICAgICAgICAgIG93bmVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKCgwLCBfdXRpbHMucmVtb3ZlUGF0aEZyb21VUkwpKGZpZWxkKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIGlmIChvd25lciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIG93bmVyID0gKDAsIF91dGlscy5nZXRVc2VyRW1haWxGcm9tVVJMKShvd25lcik7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAob3duZXIgPT09IHRoaXMudGFyZ2V0KSB7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnOwogICAgICB9CgogICAgICBpZiAodGhpcy5jb25kaXRpb24uaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHRoaXMuc2NvcGUsIHRoaXMudGFyZ2V0KSkgewogICAgICAgIHJldHVybiB0aGlzLmRlY2lzaW9uOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBSdWxlOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBSdWxlOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi91dGlscy91dGlscyI6NDU3LCIuL2NvbmRpdGlvbnMvQWR2YW5jZWRDb25kaXRpb24iOjQzOSwiLi9jb25kaXRpb25zL0NvbmRpdGlvbiI6NDQwLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2fV0sNDM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgovKioKKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD4KKiBAY2xhc3NkZXNjIENsYXNzIHRvIGNvbWJpbmUgdGhlIGF1dGhvcml6YXRpb24gZGVjaXNpb25zIHRoYXQgcmVzdWx0IGZyb20gcnVsZXMgZXZhbHVhdGlvbi4KKi8KdmFyIEFsbG93T3ZlcnJpZGVzID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFsbG93T3ZlcnJpZGVzKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQWxsb3dPdmVycmlkZXMpOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQWxsb3dPdmVycmlkZXMsIFt7CiAgICBrZXk6ICdjb21iaW5lJywKCgogICAgLyoqCiAgICAqIEdpdmVuIGFuIGFycmF5IG9mIGluZGl2aWR1YWwgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMsIHByaW9yaXRpemVzIGEgcG9zaXRpdmUgb25lLgogICAgKiBAcGFyYW0gICAge2Jvb2xlYW5bXX0gICBkZWNpc2lvbnMKICAgICogQHJldHVybnMgIHtib29sZWFufQogICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBjb21iaW5lKGRlY2lzaW9ucykgewogICAgICBpZiAoZGVjaXNpb25zLmluZGV4T2YodHJ1ZSkgIT09IC0xKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKGZhbHNlKSAhPT0gLTEpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBBbGxvd092ZXJyaWRlczsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gQWxsb3dPdmVycmlkZXM7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTZ9XSw0Mzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KCi8qKgoqIEBhdXRob3IgQW5hIENhbGRlaXJhIDxhbmEuY2FsZGVpcmFAdGVjbmljby51bGlzYm9hLnB0PgoqIEBjbGFzc2Rlc2MgQ2xhc3MgdG8gY29tYmluZSB0aGUgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMgdGhhdCByZXN1bHQgZnJvbSBydWxlcyBldmFsdWF0aW9uLgoqLwp2YXIgQmxvY2tPdmVycmlkZXMgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQmxvY2tPdmVycmlkZXMoKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBCbG9ja092ZXJyaWRlcyk7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShCbG9ja092ZXJyaWRlcywgW3sKICAgIGtleTogJ2NvbWJpbmUnLAoKCiAgICAvKioKICAgICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3Jpc2F0aW9uIGRlY2lzaW9ucywgcHJpb3JpdGlzZXMgYSBuZWdhdGl2ZSBvbmUuCiAgICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgIGRlY2lzaW9ucwogICAgKiBAcmV0dXJucyAge2Jvb2xlYW59CiAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbWJpbmUoZGVjaXNpb25zKSB7CiAgICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZihmYWxzZSkgIT09IC0xKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9IGVsc2UgewogICAgICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZih0cnVlKSAhPT0gLTEpIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJzsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIEJsb2NrT3ZlcnJpZGVzOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBCbG9ja092ZXJyaWRlczsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNn1dLDQzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwoKLyoqCiogQGF1dGhvciBBbmEgQ2FsZGVpcmEgPGFuYS5jYWxkZWlyYUB0ZWNuaWNvLnVsaXNib2EucHQ+CiogQGNsYXNzZGVzYyBDbGFzcyB0byBjb21iaW5lIHRoZSBhdXRob3JpemF0aW9uIGRlY2lzaW9ucyB0aGF0IHJlc3VsdCBmcm9tIHJ1bGVzIGV2YWx1YXRpb24uCiovCnZhciBGaXJzdEFwcGxpY2FibGUgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRmlyc3RBcHBsaWNhYmxlKCkgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRmlyc3RBcHBsaWNhYmxlKTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEZpcnN0QXBwbGljYWJsZSwgW3sKICAgIGtleTogJ2NvbWJpbmUnLAoKCiAgICAvKioKICAgICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3Jpc2F0aW9uIGRlY2lzaW9ucywgcmV0dXJucyB0aGUgZmlyc3Qgb25lIGRpZmZlcmVudCBmcm9tICdOb3QgQXBwbGljYWJsZScsIGVpdGhlciBwb3NpdGl2ZSBvciBuZWdhdGl2ZS4KICAgICogQHBhcmFtICAgIHtib29sZWFuW119ICAgICBkZWNpc2lvbnMKICAgICogQHJldHVybnMgIHtib29sZWFufQogICAgKi8KICAgIHZhbHVlOiBmdW5jdGlvbiBjb21iaW5lKGRlY2lzaW9ucykgewogICAgICBmb3IgKHZhciBpIGluIGRlY2lzaW9ucykgewogICAgICAgIGlmIChkZWNpc2lvbnNbaV0gIT09ICdOb3QgQXBwbGljYWJsZScpIHsKICAgICAgICAgIHJldHVybiBkZWNpc2lvbnNbaV07CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnOwogICAgfQogIH1dKTsKICByZXR1cm4gRmlyc3RBcHBsaWNhYmxlOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBGaXJzdEFwcGxpY2FibGU7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTZ9XSw0Mzk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfQ29uZGl0aW9uID0gcmVxdWlyZSgnLi9Db25kaXRpb24nKTsKCnZhciBfQ29uZGl0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NvbmRpdGlvbik7Cgp2YXIgX09wZXJhdG9ycyA9IHJlcXVpcmUoJy4uL09wZXJhdG9ycycpOwoKdmFyIF9PcGVyYXRvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT3BlcmF0b3JzKTsKCnZhciBfU3Vic2NyaXB0aW9uQ29uZGl0aW9uID0gcmVxdWlyZSgnLi9TdWJzY3JpcHRpb25Db25kaXRpb24nKTsKCnZhciBfU3Vic2NyaXB0aW9uQ29uZGl0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YnNjcmlwdGlvbkNvbmRpdGlvbik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIEFkdmFuY2VkQ29uZGl0aW9uID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFkdmFuY2VkQ29uZGl0aW9uKGNvbmRpdGlvbikgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQWR2YW5jZWRDb25kaXRpb24pOwoKICAgIHRoaXMub3BlcmF0b3JzID0gbmV3IF9PcGVyYXRvcnMyLmRlZmF1bHQoKTsKICAgIGlmIChjb25kaXRpb24ub3BlcmF0b3JzICE9PSB1bmRlZmluZWQpIHsKICAgICAgY29uZGl0aW9uID0gY29uZGl0aW9uLmNvbmRpdGlvbjsKICAgIH0KICAgIGNvbmRpdGlvbiA9IHRoaXMuYnVpbGRDb25kaXRpb24oY29uZGl0aW9uKTsKICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQWR2YW5jZWRDb25kaXRpb24sIFt7CiAgICBrZXk6ICdidWlsZENvbmRpdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRDb25kaXRpb24oY29uZGl0aW9uKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmRpdGlvblsxXSkpIHsKICAgICAgICBjb25kaXRpb25bMV0gPSB0aGlzLmJ1aWxkQ29uZGl0aW9uKGNvbmRpdGlvblsxXSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKGNvbmRpdGlvblsxXS5hdHRyaWJ1dGUgPT09ICdzdWJzY3JpcHRpb24nKSB7CiAgICAgICAgICBjb25kaXRpb25bMV0gPSBuZXcgX1N1YnNjcmlwdGlvbkNvbmRpdGlvbjIuZGVmYXVsdChjb25kaXRpb25bMV0uYXR0cmlidXRlLCBjb25kaXRpb25bMV0ub3BlcmF0b3IsIGNvbmRpdGlvblsxXS5wYXJhbXMpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25kaXRpb25bMV0gPSBuZXcgX0NvbmRpdGlvbjIuZGVmYXVsdChjb25kaXRpb25bMV0uYXR0cmlidXRlLCBjb25kaXRpb25bMV0ub3BlcmF0b3IsIGNvbmRpdGlvblsxXS5wYXJhbXMpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgaWYgKGNvbmRpdGlvblsyXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZGl0aW9uWzJdKSkgewogICAgICAgICAgY29uZGl0aW9uWzJdID0gdGhpcy5idWlsZENvbmRpdGlvbihjb25kaXRpb25bMl0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoY29uZGl0aW9uWzJdLmF0dHJpYnV0ZSA9PT0gJ3N1YnNjcmlwdGlvbicpIHsKICAgICAgICAgICAgY29uZGl0aW9uWzJdID0gbmV3IF9TdWJzY3JpcHRpb25Db25kaXRpb24yLmRlZmF1bHQoY29uZGl0aW9uWzJdLmF0dHJpYnV0ZSwgY29uZGl0aW9uWzJdLm9wZXJhdG9yLCBjb25kaXRpb25bMl0ucGFyYW1zKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbmRpdGlvblsyXSA9IG5ldyBfQ29uZGl0aW9uMi5kZWZhdWx0KGNvbmRpdGlvblsyXS5hdHRyaWJ1dGUsIGNvbmRpdGlvblsyXS5vcGVyYXRvciwgY29uZGl0aW9uWzJdLnBhcmFtcyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBjb25kaXRpb247CiAgICB9CiAgfSwgewogICAga2V5OiAnaXNBcHBsaWNhYmxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgb3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7CiAgICAgIGlmICghb3BlcmF0b3IpIHsKICAgICAgICBvcGVyYXRvciA9IHRoaXMuY29uZGl0aW9uWzBdOwogICAgICAgIGxlZnQgPSB0aGlzLmNvbmRpdGlvblsxXTsKICAgICAgICByaWdodCA9IHRoaXMuY29uZGl0aW9uWzJdOwogICAgICB9CgogICAgICB3aGlsZSAoIShsZWZ0IGluc3RhbmNlb2YgX0NvbmRpdGlvbjIuZGVmYXVsdCkgJiAhKGxlZnQgaW5zdGFuY2VvZiBfU3Vic2NyaXB0aW9uQ29uZGl0aW9uMi5kZWZhdWx0KSAmIHR5cGVvZiBsZWZ0ICE9PSAnYm9vbGVhbicpIHsKICAgICAgICBsZWZ0ID0gdGhpcy5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgbGVmdFswXSwgbGVmdFsxXSwgbGVmdFsyXSk7CiAgICAgIH0KICAgICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB3aGlsZSAoIShyaWdodCBpbnN0YW5jZW9mIF9Db25kaXRpb24yLmRlZmF1bHQpICYgIShyaWdodCBpbnN0YW5jZW9mIF9TdWJzY3JpcHRpb25Db25kaXRpb24yLmRlZmF1bHQpICYgdHlwZW9mIHJpZ2h0ICE9PSAnYm9vbGVhbicpIHsKICAgICAgICAgIHJpZ2h0ID0gdGhpcy5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgcmlnaHRbMF0sIHJpZ2h0WzFdLCByaWdodFsyXSk7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgcmVzdWx0TGVmdCA9IHR5cGVvZiBsZWZ0ID09PSAnYm9vbGVhbicgPyBsZWZ0IDogbGVmdC5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCk7CiAgICAgIHZhciByZXN1bHRSaWdodCA9IHZvaWQgMDsKICAgICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICByZXN1bHRSaWdodCA9IHR5cGVvZiByaWdodCA9PT0gJ2Jvb2xlYW4nID8gcmlnaHQgOiByaWdodC5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3JzW29wZXJhdG9yXShbcmVzdWx0TGVmdCwgcmVzdWx0UmlnaHRdKTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIEFkdmFuY2VkQ29uZGl0aW9uOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBBZHZhbmNlZENvbmRpdGlvbjsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vT3BlcmF0b3JzIjo0MzAsIi4vQ29uZGl0aW9uIjo0NDAsIi4vU3Vic2NyaXB0aW9uQ29uZGl0aW9uIjo0NDEsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTZ9XSw0NDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfT3BlcmF0b3JzID0gcmVxdWlyZSgnLi4vT3BlcmF0b3JzJyk7Cgp2YXIgX09wZXJhdG9yczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PcGVyYXRvcnMpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIEBhdXRob3IgQW5hIENhbGRlaXJhIDxhbmEuY2FsZGVpcmFAdGVjbmljby51bGlzYm9hLnB0PgoqIEBjbGFzc2Rlc2MgQ2xhc3MgdG8gcmVwcmVzZW50IGEgY29uZGl0aW9uIGFuZCBldmFsdWF0ZSBpdHMgYXBwbGljYWJpbGl0eS4KKi8KdmFyIENvbmRpdGlvbiA9IGZ1bmN0aW9uICgpIHsKCiAgLyoqCiAgKiBDcmVhdGVzIGEgbmV3IENvbmRpdGlvbi4KICAqIEBjbGFzcwogICogQHBhcmFtICB7c3RyaW5nfSAgYXR0cmlidXRlCiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBvcGVyYXRvcgogICogQHBhcmFtICB7Kn0gICAgICAgcGFyYW1zCiAgKi8KICBmdW5jdGlvbiBDb25kaXRpb24oYXR0cmlidXRlLCBvcGVyYXRvciwgcGFyYW1zKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDb25kaXRpb24pOwoKICAgIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlOwogICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yOwogICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7CiAgICB0aGlzLm9wZXJhdG9ycyA9IG5ldyBfT3BlcmF0b3JzMi5kZWZhdWx0KCk7CiAgfQoKICAvKioKICAqIFZlcmlmaWVzIGlmIHRoZSBjb25kaXRpb24gaXMgYXBwbGljYWJsZSB0byB0aGUgbWVzc2FnZS4gRmlyc3QsIHRoZSBzeXN0ZW0gdmFsdWUgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgYXR0cmlidXRlIGlzIHJldHJpZXZlZDsgdGhlbiwgdGhhdCB2YWx1ZSBpcyBjb21wYXJlZCB3aXRoIHRoZSBwYXJhbWV0ZXIgc3BlY2lmaWVkIGluIHRoZSBjb25kaXRpb24gYnkgZXhlY3V0aW5nIHRoZSBvcGVyYXRvciBpbXBsZW1lbnRhdGlvbi4gSWYgdGhlIG9wZXJhdG9yIGlzICdpbicgYW5kIHRoZSBuYW1lIG9mIGEgZ3JvdXAgaXMgZ2l2ZW4sIHRoZW4gdGhlIGFycmF5IGhvbGRpbmcgdGhlIG1lbWJlcnMgb2YgdGhlIGdyb3VwIGlzIHJldHJpZXZlZCBiZWZvcmUgdGhlIGNvbXBhcmlzb24uCiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIGNvbnRleHQgICBlbnZpcm9ubWVudCB3aGVyZSB0aGUgUG9saWN5IEVuZ2luZSBpcyBiZWluZyB1c2VkCiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIG1lc3NhZ2UKICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQ29uZGl0aW9uLCBbewogICAga2V5OiAnaXNBcHBsaWNhYmxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSkgewogICAgICBjb250ZXh0W3RoaXMuYXR0cmlidXRlXSA9IHsgbWVzc2FnZTogbWVzc2FnZSB9OwogICAgICB2YXIgdmFsdWUgPSBjb250ZXh0W3RoaXMuYXR0cmlidXRlXTsKICAgICAgdmFyIHRlbXBQYXJhbSA9IHZvaWQgMDsKCiAgICAgIGlmICh0aGlzLm9wZXJhdG9yID09PSAnaW4nKSB7CiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMucGFyYW1zKSkgewogICAgICAgICAgdGVtcFBhcmFtID0gY29udGV4dC5nZXRHcm91cCh0aGlzLnBhcmFtcywgbWVzc2FnZS50byk7CiAgICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbdGhpcy5vcGVyYXRvcl0oW3RlbXBQYXJhbSwgdmFsdWVdKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLm9wZXJhdG9yc1t0aGlzLm9wZXJhdG9yXShbdGhpcy5wYXJhbXMsIHZhbHVlXSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBDb25kaXRpb247Cn0oKTsgLyoqCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKICAgICAqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKICAgICAqIENvcHlyaWdodCAyMDE2IEFwaXplZQogICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KICAgICAqCiAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogICAgICoKICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAgICAgKgogICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAgICAgKiovCgpleHBvcnRzLmRlZmF1bHQgPSBDb25kaXRpb247Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4uL09wZXJhdG9ycyI6NDMwLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2fV0sNDQxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpOwoKdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsKCnZhciBfZ2V0MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXQnKTsKCnZhciBfZ2V0MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldDIpOwoKdmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTsKCnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTsKCnZhciBfQ29uZGl0aW9uMiA9IHJlcXVpcmUoJy4vQ29uZGl0aW9uJyk7Cgp2YXIgX0NvbmRpdGlvbjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db25kaXRpb24yKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD4KKiBAY2xhc3NkZXNjIENsYXNzIHRvIHJlcHJlc2VudCBhIHN1YnNjcmlwdGlvbiBjb25kaXRpb24gYW5kIGV2YWx1YXRlIGl0cyBhcHBsaWNhYmlsaXR5LgoqLwp2YXIgU3Vic2NyaXB0aW9uQ29uZGl0aW9uID0gZnVuY3Rpb24gKF9Db25kaXRpb24pIHsKICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24sIF9Db25kaXRpb24pOwoKICAvKioKICAqIENyZWF0ZXMgYSBuZXcgU3Vic2NyaXB0aW9uQ29uZGl0aW9uLgogICogQGNsYXNzCiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBhdHRyaWJ1dGUKICAqIEBwYXJhbSAge3N0cmluZ30gIG9wZXJhdG9yCiAgKiBAcGFyYW0gIHsqfSAgICAgICBwYXJhbXMKICAqLwogIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbkNvbmRpdGlvbihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFN1YnNjcmlwdGlvbkNvbmRpdGlvbik7CiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoU3Vic2NyaXB0aW9uQ29uZGl0aW9uLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24pKS5jYWxsKHRoaXMsIGF0dHJpYnV0ZSwgb3BlcmF0b3IsIHBhcmFtcykpOwogIH0KCiAgLyoqCiAgKiBWZXJpZmllcyBpZiB0aGUgc3Vic2NyaXB0aW9uIGNvbmRpdGlvbiBpcyBhcHBsaWNhYmxlIHRvIHRoZSBtZXNzYWdlLiBGaXJzdCwgdmVyaWZpZXMgaWYgdGhlIG1lc3NhZ2UgaXMgb2YgdGhlIHN1YnNjcmlwdGlvbiB0eXBlOyBzZWNvbmQsIHZlcmlmaWVzIGlmIHRoZSBtZXNzYWdlIGlzIGZyb20gYSByZW1vdGUgcnVudGltZSB0byBndWFyYW50ZWUgdGhhdCB0aGUgc3Vic2NyaXB0aW9uIGlzIGJlaW5nIHZhbGlkYXRlZCBpbiB0aGUgZGVzdGluYXRpb24gcnVudGltZTsgdGhpcmQsIHZlcmlmaWVzIGlmIHRoZSBzdWJzY3JpcHRpb24gcHJlZmVyZW5jZSBpcyBtZXQuCiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIGNvbnRleHQgICBlbnZpcm9ubWVudCB3aGVyZSB0aGUgUG9saWN5IEVuZ2luZSBpcyBiZWluZyB1c2VkCiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIG1lc3NhZ2UKICAqLwoKCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3Vic2NyaXB0aW9uQ29uZGl0aW9uLCBbewogICAga2V5OiAnaXNBcHBsaWNhYmxlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBpc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSkgewogICAgICB2YXIgaXNTdWJzY3JpcHRpb24gPSBtZXNzYWdlLnR5cGUgPT09ICdzdWJzY3JpYmUnOwogICAgICB2YXIgaXNGcm9tUmVtb3RlU00gPSBjb250ZXh0LmlzRnJvbVJlbW90ZVNNKG1lc3NhZ2UuZnJvbSk7CiAgICAgIGlmIChpc1N1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7CiAgICAgICAgcmV0dXJuICgwLCBfZ2V0My5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24ucHJvdG90eXBlLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShTdWJzY3JpcHRpb25Db25kaXRpb24ucHJvdG90eXBlKSwgJ2lzQXBwbGljYWJsZScsIHRoaXMpLmNhbGwodGhpcywgY29udGV4dCwgbWVzc2FnZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9CiAgfV0pOwogIHJldHVybiBTdWJzY3JpcHRpb25Db25kaXRpb247Cn0oX0NvbmRpdGlvbjMuZGVmYXVsdCk7IC8qKgogICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQogICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogICAgICAgICAgICAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICAgICAgICAgICAgICAgICAgICAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAgICAgICAgICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAgICAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAgICAgICAgICAgICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICAgICAgICAgICAgICAgICAgICAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAgICAgICAgICAgICAgICAgICAgICAgICoqLwoKZXhwb3J0cy5kZWZhdWx0ID0gU3Vic2NyaXB0aW9uQ29uZGl0aW9uOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuL0NvbmRpdGlvbiI6NDQwLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjgsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTYsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9nZXQiOjE3LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMiOjE4LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI6MTl9XSw0NDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeScpOwoKdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7Cgp2YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7Cgp2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpOwoKdmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTsKCnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTsKCnZhciBfQWxsb3dPdmVycmlkZXMgPSByZXF1aXJlKCcuLi9jb21iaW5pbmdBbGdvcml0aG1zL0FsbG93T3ZlcnJpZGVzJyk7Cgp2YXIgX0FsbG93T3ZlcnJpZGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FsbG93T3ZlcnJpZGVzKTsKCnZhciBfQmxvY2tPdmVycmlkZXMgPSByZXF1aXJlKCcuLi9jb21iaW5pbmdBbGdvcml0aG1zL0Jsb2NrT3ZlcnJpZGVzJyk7Cgp2YXIgX0Jsb2NrT3ZlcnJpZGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jsb2NrT3ZlcnJpZGVzKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91dGlscycpOwoKdmFyIF9GaXJzdEFwcGxpY2FibGUgPSByZXF1aXJlKCcuLi9jb21iaW5pbmdBbGdvcml0aG1zL0ZpcnN0QXBwbGljYWJsZScpOwoKdmFyIF9GaXJzdEFwcGxpY2FibGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRmlyc3RBcHBsaWNhYmxlKTsKCnZhciBfUmVUaGlua0N0eDIgPSByZXF1aXJlKCcuLi9SZVRoaW5rQ3R4Jyk7Cgp2YXIgX1JlVGhpbmtDdHgzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVUaGlua0N0eDIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBSdW50aW1lQ29yZUN0eCA9IGZ1bmN0aW9uIChfUmVUaGlua0N0eCkgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFJ1bnRpbWVDb3JlQ3R4LCBfUmVUaGlua0N0eCk7CgogIGZ1bmN0aW9uIFJ1bnRpbWVDb3JlQ3R4KGlkTW9kdWxlLCBydW50aW1lUmVnaXN0cnksIHN0b3JhZ2VNYW5hZ2VyKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSdW50aW1lQ29yZUN0eCk7CgogICAgdmFyIF90aGlzMiA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFJ1bnRpbWVDb3JlQ3R4Ll9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShSdW50aW1lQ29yZUN0eCkpLmNhbGwodGhpcykpOwoKICAgIF90aGlzMi5pZE1vZHVsZSA9IGlkTW9kdWxlOwogICAgX3RoaXMyLnJ1bnRpbWVSZWdpc3RyeSA9IHJ1bnRpbWVSZWdpc3RyeTsKICAgIF90aGlzMi5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkOwogICAgX3RoaXMyLnNlcnZpY2VQcm92aWRlclBvbGljeSA9IHt9OwogICAgX3RoaXMyLnVzZXJQb2xpY2llcyA9IHt9OwogICAgX3RoaXMyLnN0b3JhZ2VNYW5hZ2VyID0gc3RvcmFnZU1hbmFnZXI7CiAgICByZXR1cm4gX3RoaXMyOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUnVudGltZUNvcmVDdHgsIFt7CiAgICBrZXk6ICdsb2FkQ29uZmlndXJhdGlvbnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRDb25maWd1cmF0aW9ucygpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JldGhpbms6YWN0aXZlUG9saWN5JykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIF90aGlzLmFjdGl2ZVVzZXJQb2xpY3kgPSB2YWx1ZTsKCiAgICAgICAgICByZXR1cm4gX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOmdyb3VwcycpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGdyb3VwSW5mbykgewogICAgICAgICAgdmFyIGdyb3VwcyA9IGdyb3VwSW5mbzsKICAgICAgICAgIF90aGlzLmdyb3VwcyA9IGdyb3VwcyA9PT0gdW5kZWZpbmVkID8ge30gOiBncm91cHM7CgogICAgICAgICAgcmV0dXJuIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgncmV0aGluazpzcFBvbGljaWVzJyk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocG9saWNpZXNJbmZvKSB7CiAgICAgICAgICB2YXIgc3BQb2xpY2llcyA9IHBvbGljaWVzSW5mbzsKICAgICAgICAgIF90aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeSA9IHNwUG9saWNpZXMgPT09IHVuZGVmaW5lZCA/IHt9IDogc3BQb2xpY2llczsKCiAgICAgICAgICBfdGhpcy5fbG9hZFVzZXJQb2xpY2llcygpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAncHJlcGFyZUZvckV2YWx1YXRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVGb3JFdmFsdWF0aW9uKG1lc3NhZ2UsIGlzSW5jb21pbmcpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIF90aGlzID0gX3RoaXMzOwogICAgICAgIGlmIChpc0luY29taW5nKSB7CiAgICAgICAgICBpZiAoX3RoaXMuX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkpIHsKICAgICAgICAgICAgX3RoaXMuaWRNb2R1bGUuZGVjcnlwdE1lc3NhZ2UobWVzc2FnZSkudGhlbihmdW5jdGlvbiAobWVzc2FnZSkgewogICAgICAgICAgICAgIC8qaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHsKICAgICAgICAgICAgICAgIF90aGlzLl9pc1ZhbGlkVXBkYXRlKG1lc3NhZ2UpLnRoZW4obWVzc2FnZSA9PiB7Ki8KICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgICByZWplY3QoZXJyb3IpOwogICAgICAgICAgICAgIC8qfSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgICAgfSovCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgaWYgKF90aGlzLl9pc1RvU2V0SUQobWVzc2FnZSkpIHsKICAgICAgICAgICAgX3RoaXMuX2dldElkZW50aXR5KG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24gKGlkZW50aXR5KSB7CiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmlkZW50aXR5ID0gaWRlbnRpdHk7CiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0UG9saWNpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKSB7CiAgICAgIHZhciBwb2xpY2llcyA9IHt9OwoKICAgICAgaWYgKHRoaXMuYWN0aXZlVXNlclBvbGljeSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcG9saWNpZXMudXNlclBvbGljeSA9IHRoaXMudXNlclBvbGljaWVzW3RoaXMuYWN0aXZlVXNlclBvbGljeV07CiAgICAgIH0KCiAgICAgIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSA9IHRoaXMuZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5KG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKTsKCiAgICAgIHJldHVybiBwb2xpY2llczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfaXNWYWxpZFVwZGF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzVmFsaWRVcGRhdGUobWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICBpZiAobWVzc2FnZS5mcm9tLnNwbGl0KCc6Ly8nKS5sZW5ndGggPiAxKSB7CiAgICAgICAgICBfdGhpcy5pZE1vZHVsZS5fZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0KG1lc3NhZ2UuZnJvbSkudGhlbihmdW5jdGlvbiAoaHlwZXJ0eVVSTCkgewogICAgICAgICAgICBpZiAoaHlwZXJ0eVVSTCA9PT0gbWVzc2FnZS5ib2R5LnNvdXJjZSkgewogICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgcmVqZWN0KCdUaGUgc291cmNlIG9mIHRoZSBtZXNzYWdlIGlzIG5vdCB2YWxpZC4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3ByZXBhcmVUb0ZvcndhcmQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBhcmVUb0ZvcndhcmQobWVzc2FnZSwgaXNJbmNvbWluZywgcmVzdWx0KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGlmIChpc0luY29taW5nICYgcmVzdWx0KSB7CiAgICAgICAgICB2YXIgaXNTdWJzY3JpcHRpb24gPSBtZXNzYWdlLnR5cGUgPT09ICdzdWJzY3JpYmUnOwogICAgICAgICAgdmFyIGlzRnJvbVJlbW90ZVNNID0gX3RoaXMuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTsKICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7CiAgICAgICAgICAgIF90aGlzLmRvTXV0dWFsQXV0aGVudGljYXRpb24obWVzc2FnZSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoX3RoaXMuX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkpIHsKICAgICAgICAgICAgX3RoaXMuaWRNb2R1bGUuZW5jcnlwdE1lc3NhZ2UobWVzc2FnZSkudGhlbihmdW5jdGlvbiAobWVzc2FnZSkgewogICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2RvTXV0dWFsQXV0aGVudGljYXRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRvTXV0dWFsQXV0aGVudGljYXRpb24obWVzc2FnZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgdG8gPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7CiAgICAgICAgdmFyIHN1YnNJbmRleCA9IHRvLmluZGV4T2YoJ3N1YnNjcmlwdGlvbicpOwogICAgICAgIHZhciBpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24gPSBzdWJzSW5kZXggIT09IC0xOwogICAgICAgIHZhciBpc0Zyb21SZW1vdGVTTSA9IF90aGlzLmlzRnJvbVJlbW90ZVNNKG1lc3NhZ2UuZnJvbSk7CiAgICAgICAgaWYgKGlzRGF0YU9iamVjdFN1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7CiAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB0by5wb3AoKTsKICAgICAgICAgICAgdmFyIGRhdGFPYmplY3RVUkwgPSB0b1swXSArICcvLycgKyB0b1syXSArICcvJyArIHRvWzNdOwogICAgICAgICAgICBfdGhpcy5pZE1vZHVsZS5kb011dHVhbEF1dGhlbnRpY2F0aW9uKGRhdGFPYmplY3RVUkwsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBfdGhpcy5ydW50aW1lUmVnaXN0cnkucmVnaXN0ZXJTdWJzY3JpYmVyKGRhdGFPYmplY3RVUkwsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKTsKICAgICAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSkoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldE15RW1haWxzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNeUVtYWlscygpIHsKICAgICAgdmFyIGlkZW50aXRpZXMgPSB0aGlzLmlkTW9kdWxlLmdldElkZW50aXRpZXMoKTsKICAgICAgdmFyIGVtYWlscyA9IFtdOwoKICAgICAgZm9yICh2YXIgaSBpbiBpZGVudGl0aWVzKSB7CiAgICAgICAgZW1haWxzLnB1c2goKDAsIF91dGlscy5nZXRVc2VyRW1haWxGcm9tVVJMKShpZGVudGl0aWVzW2ldLmlkZW50aXR5KSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBlbWFpbHM7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0TXlIeXBlcnRpZXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE15SHlwZXJ0aWVzKCkgewogICAgICB2YXIgaHlwZXJ0aWVzID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuaHlwZXJ0aWVzTGlzdDsKICAgICAgdmFyIGh5cGVydGllc05hbWVzID0gW107CgogICAgICBmb3IgKHZhciBpIGluIGh5cGVydGllcykgewogICAgICAgIHZhciBoeXBlcnR5TmFtZSA9IGh5cGVydGllc1tpXS5vYmplY3ROYW1lOwogICAgICAgIGlmIChoeXBlcnRpZXNOYW1lcy5pbmRleE9mKGh5cGVydHlOYW1lKSA9PT0gLTEpIHsKICAgICAgICAgIGh5cGVydGllc05hbWVzLnB1c2goaHlwZXJ0eU5hbWUpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGh5cGVydGllc05hbWVzOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldFNlcnZpY2VQcm92aWRlclBvbGljeScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5KG1lc3NhZ2UsIGlzSW5jb21pbmcpIHsKICAgICAgdmFyIHBvbGljeSA9IHZvaWQgMDsKCiAgICAgIGlmIChpc0luY29taW5nKSB7CiAgICAgICAgdmFyIHRvSHlwZXJ0eSA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKG1lc3NhZ2UudG8pOwogICAgICAgIHBvbGljeSA9IHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5W3RvSHlwZXJ0eV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGZyb21IeXBlcnR5ID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUobWVzc2FnZS5mcm9tKTsKICAgICAgICBwb2xpY3kgPSB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeVtmcm9tSHlwZXJ0eV07CiAgICAgIH0KICAgICAgcmV0dXJuIHBvbGljeTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdpc0Zyb21SZW1vdGVTTScsCiAgICB2YWx1ZTogZnVuY3Rpb24gaXNGcm9tUmVtb3RlU00oZnJvbSkgewogICAgICB2YXIgc3BsaXRGcm9tID0gZnJvbS5zcGxpdCgnOi8vJyk7CiAgICAgIHJldHVybiBzcGxpdEZyb21bMF0gPT09ICdydW50aW1lJyAmJiBmcm9tICE9PSB0aGlzLnJ1bnRpbWVSZWdpc3RyeS5ydW50aW1lVVJMICsgJy9zbSc7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2lzVG9TZXRJRCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzVG9TZXRJRChtZXNzYWdlKSB7CiAgICAgIHZhciBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nXTsKICAgICAgdmFyIHNwbGl0RnJvbSA9IG1lc3NhZ2UuZnJvbS5zcGxpdCgnOi8vJyk7CiAgICAgIHZhciBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdOwoKICAgICAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKGZyb21TY2hlbWEpID09PSAtMTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdnZXRVUkwnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVSTCh1cmwpIHsKICAgICAgdmFyIHNwbGl0VVJMID0gdXJsLnNwbGl0KCcvJyk7CiAgICAgIHJldHVybiBzcGxpdFVSTFswXSArICcvLycgKyBzcGxpdFVSTFsyXSArICcvJyArIHNwbGl0VVJMWzNdOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRJZGVudGl0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldElkZW50aXR5KG1lc3NhZ2UpIHsKICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHsKICAgICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eU9mSHlwZXJ0eShtZXNzYWdlLmJvZHkuc291cmNlKTsKICAgICAgfQoKICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3Jlc3BvbnNlJyAmJiBtZXNzYWdlLmJvZHkuc291cmNlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eU9mSHlwZXJ0eShtZXNzYWdlLmJvZHkuc291cmNlKTsKICAgICAgfQoKICAgICAgaWYgKCgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JykgewogICAgICAgIHJldHVybiB0aGlzLmlkTW9kdWxlLmdldElkZW50aXR5T2ZIeXBlcnR5KG1lc3NhZ2UuZnJvbSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdHlPZkh5cGVydHkodGhpcy5nZXRVUkwobWVzc2FnZS5mcm9tKSk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogSWRlbnRpZmllcyB0aGUgbWVzc2FnZXMgdG8gYmUgZm9yd2FyZGVkIHRvIHRoZSBJZGVudGl0eSBNb2R1bGUgZm9yCiAgICAqIGVuY3J5cHRpb24vZGVjcnlwdGlvbiBhbmQgaW50ZWdyaXR5IHZhbGlkYXRpb24uCiAgICAqIEBwYXJhbSB7TWVzc2FnZX0gICAgbWVzc2FnZQogICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gIHJldHVybnMgdHJ1ZSBpZiB0aGUgbWVzc2FnZSByZXF1aXJlcyBlbmNyeXB0aW9uL2RlY3J5cHRpb24KICAgICogICAgICAgICAgICAgICAgICAgICBvciBpZiBpdHMgdHlwZSBlcXVhbHMgJ2hhbmRzaGFrZSc7IGZhbHNlIG90aGVyd2lzZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnX2lzVG9DeXBoZXJNb2R1bGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1RvQ3lwaGVyTW9kdWxlKG1lc3NhZ2UpIHsKICAgICAgdmFyIGlzQ3JlYXRlID0gbWVzc2FnZS50eXBlID09PSAnY3JlYXRlJzsKICAgICAgdmFyIGlzRnJvbUh5cGVydHkgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eSc7CiAgICAgIHZhciBpc1RvSHlwZXJ0eSA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShtZXNzYWdlLnRvKS50eXBlID09PSAnaHlwZXJ0eSc7CiAgICAgIHZhciBpc1RvRGF0YU9iamVjdCA9ICgwLCBfdXRpbHMuaXNEYXRhT2JqZWN0VVJMKShtZXNzYWdlLnRvKTsKCiAgICAgIHJldHVybiBpc0NyZWF0ZSAmJiBpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5IHx8IGlzQ3JlYXRlICYmIGlzRnJvbUh5cGVydHkgJiYgaXNUb0RhdGFPYmplY3QgfHwgbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJyB8fCBtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnOwogICAgfQoKICAgIC8qKgogICAgKiBDcmVhdGVzIGEgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS4KICAgICogQHBhcmFtICB7U3RyaW5nfSAgZ3JvdXBOYW1lCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdfbG9hZFVzZXJQb2xpY2llcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2xvYWRVc2VyUG9saWNpZXMoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JldGhpbms6dXNlclBvbGljaWVzJykudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIHZhciBwb2xpY2llcyA9IHZhbHVlOwogICAgICAgICAgaWYgKHBvbGljaWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBwb2xpY2llcykgewogICAgICAgICAgICAgIF90aGlzNC5wZXAuYWRkUG9saWN5KCdVU0VSJywgaSwgcG9saWNpZXNbaV0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRMYXN0Q29tcG9uZW50T2ZVUkwnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRMYXN0Q29tcG9uZW50T2ZVUkwodXJsKSB7CiAgICAgIHZhciBzcGxpdCA9IHVybC5zcGxpdCgnLycpOwogICAgICByZXR1cm4gc3BsaXRbc3BsaXQubGVuZ3RoIC0gMV07CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dldFBvbGljaWVzSlNPTicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFBvbGljaWVzSlNPTihwb2xpY2llcykgewogICAgICBmb3IgKHZhciBpIGluIHBvbGljaWVzKSB7CiAgICAgICAgdmFyIGNvbWJpbmluZ0FsZ29yaXRobSA9IHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobTsKICAgICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgX0Jsb2NrT3ZlcnJpZGVzMi5kZWZhdWx0KSB7CiAgICAgICAgICBwb2xpY2llc1tpXS5jb21iaW5pbmdBbGdvcml0aG0gPSAnYmxvY2tPdmVycmlkZXMnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgX0FsbG93T3ZlcnJpZGVzMi5kZWZhdWx0KSB7CiAgICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdhbGxvd092ZXJyaWRlcyc7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgX0ZpcnN0QXBwbGljYWJsZTIuZGVmYXVsdCkgewogICAgICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdmaXJzdEFwcGxpY2FibGUnOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9IHVuZGVmaW5lZDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHBvbGljaWVzOwogICAgfQogIH0sIHsKICAgIGtleTogJ3NhdmVBY3RpdmVQb2xpY3knLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVBY3RpdmVQb2xpY3koKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazphY3RpdmVQb2xpY3knLCAwLCBfdGhpczUuYWN0aXZlVXNlclBvbGljeSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ3NhdmVHcm91cHMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVHcm91cHMoKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazpncm91cHMnLCAwLCBfdGhpczYuZ3JvdXBzKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnc2F2ZVBvbGljaWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlUG9saWNpZXMoc291cmNlLCBwb2xpY3ksIGtleSkgewogICAgICB2YXIgcG9saWNpZXNKc29uID0gdm9pZCAwOwoKICAgICAgc3dpdGNoIChzb3VyY2UpIHsKICAgICAgICBjYXNlICdVU0VSJzoKICAgICAgICAgIHBvbGljaWVzSnNvbiA9ICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KSh0aGlzLnVzZXJQb2xpY2llcyk7CiAgICAgICAgICBwb2xpY2llc0pzb24gPSB0aGlzLl9nZXRQb2xpY2llc0pTT04oSlNPTi5wYXJzZShwb2xpY2llc0pzb24pKTsKICAgICAgICAgIHRoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZXRoaW5rOnVzZXJQb2xpY2llcycsIDAsIHBvbGljaWVzSnNvbik7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdTRVJWSUNFX1BST1ZJREVSJzoKICAgICAgICAgIGlmIChwb2xpY3kgIT09IHVuZGVmaW5lZCAmIGtleSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5W2tleV0gPSBwb2xpY3k7CiAgICAgICAgICB9CiAgICAgICAgICBwb2xpY2llc0pzb24gPSAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkodGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kpOwogICAgICAgICAgcG9saWNpZXNKc29uID0gdGhpcy5fZ2V0UG9saWNpZXNKU09OKEpTT04ucGFyc2UocG9saWNpZXNKc29uKSk7CiAgICAgICAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazpzcFBvbGljaWVzJywgMCwgcG9saWNpZXNKc29uKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2dldEdyb3Vwc05hbWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRHcm91cHNOYW1lcygpIHsKICAgICAgdmFyIG15R3JvdXBzID0gdGhpcy5ncm91cHM7CiAgICAgIHZhciBncm91cHNOYW1lcyA9IFtdOwogICAgICBpZiAobXlHcm91cHMgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGZvciAodmFyIGdyb3VwTmFtZSBpbiBteUdyb3VwcykgewogICAgICAgICAgZ3JvdXBzTmFtZXMucHVzaChncm91cE5hbWUpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gZ3JvdXBzTmFtZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAnZ2V0R3JvdXAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEdyb3VwKGdyb3VwTmFtZSwgZGVzdGluYXRpb24pIHsKICAgICAgdmFyIG1lbWJlcnMgPSBbXTsKCiAgICAgIGlmIChncm91cE5hbWUgPT09ICdwcmVhdXRob3Jpc2VkJykgewogICAgICAgIHZhciBkYXRhT2JqZWN0VVJMID0gZGVzdGluYXRpb24uc3BsaXQoJy8nKTsKICAgICAgICBkYXRhT2JqZWN0VVJMLnBvcCgpOwogICAgICAgIGRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMWzBdICsgJy8vJyArIGRhdGFPYmplY3RVUkxbMl07CiAgICAgICAgbWVtYmVycyA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmdldFByZUF1dGhTdWJzY3JpYmVycyhkYXRhT2JqZWN0VVJMKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGhpcy5ncm91cHNbZ3JvdXBOYW1lXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBtZW1iZXJzID0gdGhpcy5ncm91cHNbZ3JvdXBOYW1lXTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBtZW1iZXJzOwogICAgfQoKICAgIC8qKgogICAgKiBDcmVhdGVzIGEgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS4KICAgICogQHBhcmFtICB7U3RyaW5nfSAgZ3JvdXBOYW1lCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdjcmVhdGVHcm91cCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlR3JvdXAoZ3JvdXBOYW1lKSB7CiAgICAgIHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV0gPSBbXTsKICAgICAgdGhpcy5zYXZlR3JvdXBzKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAnZGVsZXRlR3JvdXAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUdyb3VwKGdyb3VwTmFtZSkgewogICAgICBkZWxldGUgdGhpcy5ncm91cHNbZ3JvdXBOYW1lXTsKICAgICAgdGhpcy5zYXZlR3JvdXBzKCk7CiAgICB9CgogICAgLyoqCiAgICAqIEFkZHMgdGhlIGdpdmVuIHVzZXIgZW1haWwgdG8gdGhlIGdyb3VwIHdpdGggdGhlIGdpdmVuIG5hbWUuCiAgICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJFbWFpbAogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBncm91cE5hbWUKICAgICovCgogIH0sIHsKICAgIGtleTogJ2FkZFRvR3JvdXAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFRvR3JvdXAoZ3JvdXBOYW1lLCB1c2VyRW1haWwpIHsKICAgICAgdmFyIG15R3JvdXBzID0gdGhpcy5ncm91cHM7CiAgICAgIGlmIChteUdyb3Vwc1tncm91cE5hbWVdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAobXlHcm91cHNbZ3JvdXBOYW1lXS5pbmRleE9mKHVzZXJFbWFpbCkgPT09IC0xKSB7CiAgICAgICAgICBteUdyb3Vwc1tncm91cE5hbWVdLnB1c2godXNlckVtYWlsKTsKICAgICAgICAgIHRoaXMuc2F2ZUdyb3VwcygpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBFcnJvcignR3JvdXAgIicgKyBncm91cE5hbWUgKyAnIiBkb2VzIG5vdCBleGlzdCEnKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ3JlbW92ZUZyb21Hcm91cCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlRnJvbUdyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7CiAgICAgIHZhciBncm91cCA9IHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV07CgogICAgICBncm91cC5zcGxpY2UoZ3JvdXAuaW5kZXhPZih1c2VyRW1haWwpLCAxKTsKICAgICAgdGhpcy5zYXZlR3JvdXBzKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAnc3Vic2NyaXB0aW9uJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uOwogICAgfSwKICAgIHNldDogZnVuY3Rpb24gc2V0KHBhcmFtcykgewogICAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSBwYXJhbXMubWVzc2FnZS5ib2R5LnN1YnNjcmliZXI7CiAgICB9CiAgfV0pOwogIHJldHVybiBSdW50aW1lQ29yZUN0eDsKfShfUmVUaGlua0N0eDMuZGVmYXVsdCk7CgpleHBvcnRzLmRlZmF1bHQgPSBSdW50aW1lQ29yZUN0eDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vLi4vdXRpbHMvdXRpbHMiOjQ1NywiLi4vUmVUaGlua0N0eCI6NDM0LCIuLi9jb21iaW5pbmdBbGdvcml0aG1zL0FsbG93T3ZlcnJpZGVzIjo0MzYsIi4uL2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMiOjQzNywiLi4vY29tYmluaW5nQWxnb3JpdGhtcy9GaXJzdEFwcGxpY2FibGUiOjQzOCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5IjozLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YiOjgsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjoxMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjoxOCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjE5fV0sNDQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpOwoKdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpOwoKdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsKCnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7Cgp2YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7Cgp2YXIgX1JlZ2lzdHJ5RGF0YU1vZGVsMiA9IHJlcXVpcmUoJy4vUmVnaXN0cnlEYXRhTW9kZWwnKTsKCnZhciBfUmVnaXN0cnlEYXRhTW9kZWwzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVnaXN0cnlEYXRhTW9kZWwyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiAgIEBhdXRob3I6IEdpbCBEaWFzIChnaWwuZGlhc0B0ZWNuaWNvLnVsaXNib2EucHQpCiogICBIeXBlcnR5SW5zdGFuY2UgRGF0YSBNb2RlbCB1c2VkIHRvIG1vZGVsIGluc3RhbmNlcyBvZiBIeXBlcnRpZXMgcnVubmluZyBpbiBkZXZpY2VzIGFuZCBzZXJ2ZXJzLgoqLwp2YXIgSHlwZXJ0eUluc3RhbmNlID0gZnVuY3Rpb24gKF9SZWdpc3RyeURhdGFNb2RlbCkgewogICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEh5cGVydHlJbnN0YW5jZSwgX1JlZ2lzdHJ5RGF0YU1vZGVsKTsKCiAgZnVuY3Rpb24gSHlwZXJ0eUluc3RhbmNlKGlkLCB1cmwsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGh5cGVydHlVUkwsIHVzZXIsIGd1aWQsIHJ1bnRpbWUsIGNvbnRleHQpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEh5cGVydHlJbnN0YW5jZSk7CgogICAgdmFyIF90aGlzMiA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKEh5cGVydHlJbnN0YW5jZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoSHlwZXJ0eUluc3RhbmNlKSkuY2FsbCh0aGlzLCBpZCwgdXJsLCBkZXNjcmlwdG9yVVJMKSk7CgogICAgdmFyIF90aGlzID0gX3RoaXMyOwogICAgX3RoaXMuX2Rlc2NyaXB0b3IgPSBkZXNjcmlwdG9yOwogICAgX3RoaXMuX2h5cGVydHlVUkwgPSBoeXBlcnR5VVJMOwogICAgX3RoaXMuX3VzZXIgPSB1c2VyOwogICAgX3RoaXMuX2d1aWQgPSBndWlkOwogICAgX3RoaXMuX3J1bnRpbWUgPSBydW50aW1lOwogICAgX3RoaXMuX2NvbnRleHQgPSBjb250ZXh0OwogICAgcmV0dXJuIF90aGlzMjsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEh5cGVydHlJbnN0YW5jZSwgW3sKICAgIGtleTogJ3VzZXInLAogICAgc2V0OiBmdW5jdGlvbiBzZXQoaWRlbnRpdHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgX3RoaXMudXNlciA9IGlkZW50aXR5OwogICAgfSwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX3VzZXI7CiAgICB9CiAgfSwgewogICAga2V5OiAnaHlwZXJ0eVVSTCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9oeXBlcnR5VVJMOwogICAgfQogIH0sIHsKICAgIGtleTogJ2Rlc2NyaXB0b3InLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fZGVzY3JpcHRvcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdvYmplY3ROYW1lJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2Rlc2NyaXB0b3IuX29iamVjdE5hbWU7CiAgICB9CiAgfV0pOwogIHJldHVybiBIeXBlcnR5SW5zdGFuY2U7Cn0oX1JlZ2lzdHJ5RGF0YU1vZGVsMy5kZWZhdWx0KTsgLyoqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IEFwaXplZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiovCgoKZXhwb3J0cy5kZWZhdWx0ID0gSHlwZXJ0eUluc3RhbmNlOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuL1JlZ2lzdHJ5RGF0YU1vZGVsIjo0NDUsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZiI6OCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzIjoxOCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOjE5fV0sNDQ0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF9BZGRyZXNzQWxsb2NhdGlvbiA9IHJlcXVpcmUoJy4uL2FsbG9jYXRpb24vQWRkcmVzc0FsbG9jYXRpb24nKTsKCnZhciBfQWRkcmVzc0FsbG9jYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWRkcmVzc0FsbG9jYXRpb24pOwoKdmFyIF9IeXBlcnR5SW5zdGFuY2UgPSByZXF1aXJlKCcuL0h5cGVydHlJbnN0YW5jZScpOwoKdmFyIF9IeXBlcnR5SW5zdGFuY2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSHlwZXJ0eUluc3RhbmNlKTsKCnZhciBfTWVzc2FnZUZhY3RvcnkgPSByZXF1aXJlKCdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5Jyk7Cgp2YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvdXRpbHMuanMnKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KdmFyIFNUQVRVUyA9IHsgREVQTE9ZRUQ6ICdkZXBsb3llZCcsIFBST0dSRVNTOiAnaW4tcHJvZ3Jlc3MnIH07CgovKmltcG9ydCBJZGVudGl0eU1hbmFnZXIgZnJvbSAnLi9JZGVudGl0eU1hbmFnZXInOwppbXBvcnQgRGlzY292ZXJ5IGZyb20gJy4vRGlzY292ZXJ5JzsqLwoKLyoqCiogUnVudGltZSBSZWdpc3RyeSBJbnRlcmZhY2UKKi8KCnZhciBSZWdpc3RyeSA9IGZ1bmN0aW9uICgpIHsKCiAgLyoqCiAgKiBUbyBpbml0aWFsaXNlIHRoZSBSdW50aW1lIFJlZ2lzdHJ5IHdpdGggdGhlIFJ1bnRpbWVVUkwgdGhhdCB3aWxsIGJlIHRoZSBiYXNpcyB0byBkZXJpdmUgdGhlIGludGVybmFsIHJ1bnRpbWUgYWRkcmVzc2VzIHdoZW4gYWxsb2NhdGluZyBhZGRyZXNzZXMgdG8gaW50ZXJuYWwgcnVudGltZSBjb21wb25lbnQuIEluIGFkZGl0aW9uLCB0aGUgUmVnaXN0cnkgZG9tYWluIGJhY2stZW5kIHRvIGJlIHVzZWQgdG8gcmVtb3RlbHkgcmVnaXN0ZXIgUnVudGltZSBjb21wb25lbnRzLCBpcyBhbHNvIHBhc3NlZCBhcyBpbnB1dCBwYXJhbWV0ZXIuCiAgKiBAcGFyYW0gIHtNZXNzYWdlQnVzfSAgICAgICAgICBtc2didXMgICAgICAgICAgICAgICAgbXNnYnVzCiAgKiBAcGFyYW0gIHtIeXBlcnR5UnVudGltZVVSTH0gICBydW50aW1lVVJMICAgICAgICAgICAgcnVudGltZVVSTAogICogQHBhcmFtICB7QXBwU2FuZGJveH0gICAgICAgICAgYXBwU2FuZGJveCAgICAgICAgICAgIGFwcFNhbmRib3gKICAqIEBwYXJhbSAge3J1bnRpbWVDYXRhbG9ndWV9ICAgIHJ1bnRpbWVDYXRhbG9ndWUgICAgICBydW50aW1lQ2F0YWxvZ3VlCiAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICAgICAgICByZW1vdGVSZWdpc3RyeSAgICAgICAgcmVtb3RlUmVnaXN0cnkKICAqIEBwYXJhbSAge3N0b3JhZ2VNYW5hZ2VyfSAgICAgIHN0b3JhZ2VNYW5hZ2VyCiAgKi8KICBmdW5jdGlvbiBSZWdpc3RyeShydW50aW1lVVJMLCBhcHBTYW5kYm94LCBpZGVudGl0eU1vZHVsZSwgcnVudGltZUNhdGFsb2d1ZSwgcnVudGltZUNhcGFiaWxpdGllcywgc3RvcmFnZU1hbmFnZXIsIHJlbW90ZVJlZ2lzdHJ5KSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSZWdpc3RyeSk7CgoKICAgIC8vIGhvdyBzb21lIGZ1bmN0aW9ucyByZWNlaXZlIHRoZSBwYXJhbWV0ZXJzIGZvciBleGFtcGxlOgogICAgLy8gbmV3IFJlZ2lzdHJ5KCdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJywgYXBwU2FuZGJveCwgaWRNb2R1bGUsIHJlbW90ZVJlZ2lzdHJ5KTsKICAgIC8vIHJlZ2lzdHJ5LnJlZ2lzdGVyU3R1YihzYW5kYm94LCAnc3AxJyk7CiAgICAvLyByZWdpc3RyeS5yZWdpc3Rlckh5cGVydHkoc2FuZEJveCwgJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnKTsKICAgIC8vIHJlZ2lzdHJ5LnJlc29sdmUoJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnKTsKCiAgICBpZiAoIXJ1bnRpbWVVUkwpIHRocm93IG5ldyBFcnJvcigncnVudGltZVVSTCBpcyBtaXNzaW5nLicpOwogICAgaWYgKCFzdG9yYWdlTWFuYWdlcikgdGhyb3cgbmV3IEVycm9yKCdzdG9yYWdlTWFuYWdlciBpcyBtaXNzaW5nLicpOwogICAgLyppZiAoIXJlbW90ZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ3JlbW90ZVJlZ2lzdHJ5IGlzIG1pc3NpbmcnKTsqLwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX3RoaXMucmVnaXN0cnlVUkwgPSBydW50aW1lVVJMICsgJy9yZWdpc3RyeS8nOwogICAgX3RoaXMuYXBwU2FuZGJveCA9IGFwcFNhbmRib3g7CiAgICBfdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDsKICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUgPSBydW50aW1lQ2F0YWxvZ3VlOwogICAgX3RoaXMucmVtb3RlUmVnaXN0cnkgPSByZW1vdGVSZWdpc3RyeTsKICAgIF90aGlzLmlkTW9kdWxlID0gaWRlbnRpdHlNb2R1bGU7CiAgICBfdGhpcy5zdG9yYWdlTWFuYWdlciA9IHN0b3JhZ2VNYW5hZ2VyOwogICAgX3RoaXMucnVudGltZUNhcGFiaWxpdGllcyA9IHJ1bnRpbWVDYXBhYmlsaXRpZXM7CiAgICBfdGhpcy5pZGVudGlmaWVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAgKyAxKTsKCiAgICAvLyB0aGUgZXhwaXJlcyBpbiAzNjAwLCByZXByZXNlbnRzIDEgaG91cgogICAgLy90aGUgZXhwaXJlcyBpcyBpbiBzZWNvbmRzLCB1bml0IG9mIG1lYXN1cmUgcmVjZWl2ZWQgYnkgdGhlIGRvbWFpbiByZWdpc3RyeQogICAgX3RoaXMuZXhwaXJlc1RpbWUgPSAzNjAwOwoKICAgIF90aGlzLmh5cGVydGllc0xpc3RUb1JlbW92ZSA9IHt9OwogICAgX3RoaXMuaHlwZXJ0aWVzTGlzdCA9IFtdOwogICAgX3RoaXMucHJvdG9zdHVic0xpc3QgPSB7fTsKICAgIF90aGlzLmlkcFByb3h5TGlzdCA9IHt9OwogICAgX3RoaXMuZGF0YU9iamVjdExpc3QgPSB7fTsKICAgIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdCA9IHt9OwogICAgX3RoaXMuc2FuZGJveGVzTGlzdCA9IHsgc2FuZGJveDoge30sIGFwcFNhbmRib3g6IHt9IH07CiAgICBfdGhpcy5wZXBMaXN0ID0ge307CgogICAgX3RoaXMuX2RvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShfdGhpcy5yZWdpc3RyeVVSTCkuZG9tYWluOwogICAgX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W3J1bnRpbWVVUkxdID0gYXBwU2FuZGJveDsKICAgIHZhciBtc2dGYWN0b3J5ID0gbmV3IF9NZXNzYWdlRmFjdG9yeS5NZXNzYWdlRmFjdG9yeSgnZmFsc2UnLCAne30nKTsKICAgIF90aGlzLm1lc3NhZ2VGYWN0b3J5ID0gbXNnRmFjdG9yeTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFJlZ2lzdHJ5LCBbewogICAga2V5OiAnZGlzY292ZXJIeXBlcnR5UGVyVXNlcicsCgoKICAgIC8qKgogICAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmQKICAgICogcmV0dXJuIHRoZSBsYXN0IGh5cGVydHkgaW5zdGFuY2UgcmVnaXN0ZXJlZCBieSB0aGUgdXNlci4KICAgICogQHBhcmFtICB7ZW1haWx9ICAgICAgICAgICAgICBlbWFpbAogICAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbCkKICAgICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgUHJvbWlzZQogICAgKi8KCiAgICAvLyBUT0RPOiBpbXBsZW1lbnQgYSBjYWNoZSBzeXN0ZW0KICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb3Zlckh5cGVydHlQZXJVc2VyKGVtYWlsLCBkb21haW4pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGFjdGl2ZURvbWFpbiA9IHZvaWQgMDsKCiAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuX2RvbWFpbjsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47CiAgICAgIH0KCiAgICAgIHZhciBpZGVudGl0eVVSTCA9ICd1c2VyOi8vJyArIGVtYWlsLnN1YnN0cmluZyhlbWFpbC5pbmRleE9mKCdAJykgKyAxLCBlbWFpbC5sZW5ndGgpICsgJy8nICsgZW1haWwuc3Vic3RyaW5nKDAsIGVtYWlsLmluZGV4T2YoJ0AnKSk7CgogICAgICAvLyBtZXNzYWdlIHRvIHF1ZXJ5IGRvbWFpbiByZWdpc3RyeSwgYXNraW5nIGZvciBhIHVzZXIgaHlwZXJ0eS4KICAgICAgdmFyIG1lc3NhZ2UgPSB7CiAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiBpZGVudGl0eVVSTCB9CiAgICAgIH07CgogICAgICBjb25zb2xlLmxvZygnTWVzc2FnZTogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7CgogICAgICAvL2NvbnNvbGUubG9nKCdtZXNzYWdlIFJFQUQnLCBtZXNzYWdlKTsKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ21lc3NhZ2UgcmVwbHknLCByZXBseSk7CgogICAgICAgICAgdmFyIGh5cGVydHkgPSB2b2lkIDA7CiAgICAgICAgICB2YXIgbW9zdFJlY2VudCA9IHZvaWQgMDsKICAgICAgICAgIHZhciBsYXN0SHlwZXJ0eSA9IHZvaWQgMDsKICAgICAgICAgIHZhciB2YWx1ZSA9IHJlcGx5LmJvZHkudmFsdWU7CgogICAgICAgICAgZm9yIChoeXBlcnR5IGluIHZhbHVlKSB7CiAgICAgICAgICAgIGlmICh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgIGlmIChtb3N0UmVjZW50ID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpOwogICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5OwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgaHlwZXJ0eURhdGUgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpOwogICAgICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnQuZ2V0VGltZSgpIDwgaHlwZXJ0eURhdGUuZ2V0VGltZSgpKSB7CiAgICAgICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBoeXBlcnR5RGF0ZTsKICAgICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIGNvbnNvbGUubG9nKCdMYXN0IEh5cGVydHk6ICcsIGxhc3RIeXBlcnR5LCBtb3N0UmVjZW50KTsKCiAgICAgICAgICB2YXIgaHlwZXJ0eVVSTCA9IGxhc3RIeXBlcnR5OwoKICAgICAgICAgIGlmIChoeXBlcnR5VVJMID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnVXNlciBIeXBlcnR5IG5vdCBmb3VuZCcpOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBpZFBhY2thZ2UgPSB7CiAgICAgICAgICAgIGlkOiBlbWFpbCwKICAgICAgICAgICAgZGVzY3JpcHRvcjogdmFsdWVbaHlwZXJ0eVVSTF0uZGVzY3JpcHRvciwKICAgICAgICAgICAgaHlwZXJ0eVVSTDogaHlwZXJ0eVVSTAogICAgICAgICAgfTsKCiAgICAgICAgICBjb25zb2xlLmxvZygnPT09PiBoeXBlcnR5RGlzY292ZXJ5IG1lc3NhZ2VCdW5kbGU6ICcsIGlkUGFja2FnZSk7CiAgICAgICAgICByZXNvbHZlKGlkUGFja2FnZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRJZGVudGl0eUFzc29jaWF0ZWQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRJZGVudGl0eUFzc29jaWF0ZWQodHlwZSwgaHlwZXJ0eVVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgZm9yICh2YXIgaHlwZXJ0eSBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7CiAgICAgICAgdmFyIHZhbHVlID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtoeXBlcnR5XTsKICAgICAgICBpZiAodmFsdWUuX2h5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHsKICAgICAgICAgIHN3aXRjaCAodHlwZSkgewogICAgICAgICAgICBjYXNlICd1c2VybmFtZSc6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLnVzZXJuYW1lOwogICAgICAgICAgICBjYXNlICdjbic6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmNuOwogICAgICAgICAgICBjYXNlICdsb2NhbGUnOgogICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci5sb2NhbGU7CiAgICAgICAgICAgIGNhc2UgJ2F2YXRhcic6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmF2YXRhcjsKICAgICAgICAgICAgY2FzZSAndXNlclVSTCc6CiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLnVzZXJVUkw7CiAgICAgICAgICAgIGNhc2UgJy4nOgogICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlcjsKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiAnJzsKICAgIH0KCiAgICAvKioKICAgICogcXVlcnkgdGhlIGRvbWFpbiByZWdpc3RyeSBmb3IgaW5mb3JtYXRpb24gZnJvbSBhIGRhdGFPYmplY3QgVVJMCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICB1cmwgICAgICAgICAgICBkYXRhT2JqZWN0IFVSTAogICAgKiBAcmV0dXJuIHtKU09OfSAgICAgZGF0YU9iamVjdCAgICAgZGF0YSBvYmplY3QKICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVyRGF0YU9iamVjdFBlclVSTCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKHVybCwgZG9tYWluKSB7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBhY3RpdmVEb21haW4gPSB2b2lkIDA7CgogICAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5fZG9tYWluOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47CiAgICAgICAgfQoKICAgICAgICB2YXIgbXNnID0gewogICAgICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiB1cmwgfQogICAgICAgIH07CgogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CgogICAgICAgICAgdmFyIGRhdGFPYmplY3QgPSByZXBseS5ib2R5LnZhbHVlOwoKICAgICAgICAgIGlmIChkYXRhT2JqZWN0KSB7CiAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3Qgbm90IGZvdW5kJyk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIHdoZXJlIHRoZSBBcHBsaWNhdGlvbiBpcyBleGVjdXRpbmcuIEl0IGlzIGFzc3VtZWQgdGhlcmUgaXMganVzdCBvbmUgQXBwIHBlciBSdW50aW1lIGluc3RhbmNlLgogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0QXBwU2FuZGJveCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXBwU2FuZGJveCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLmFwcFNhbmRib3g7CiAgICB9CgogICAgLyoqCiAgICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdXNlciBhc3NvY2lhdGVkIHRvIHRoZSBoeXBlcnR5IFVSTAogICAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgaHlwZXJ0eVVSTCAgICAgIGh5cGVydHkgVVJMCiAgICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICB1c2VyVVJMICAgICAgICAgdXNlciBVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldEh5cGVydHlPd25lcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SHlwZXJ0eU93bmVyKGh5cGVydHlVUkwpIHsKCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciB1c2VyVVJMID0gdm9pZCAwOwoKICAgICAgZm9yICh2YXIgaW5kZXggaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkgewogICAgICAgIHZhciBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07CiAgICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCkgewogICAgICAgICAgdXNlclVSTCA9IGh5cGVydHkudXNlci51c2VyVVJMOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdXNlclVSTDsKICAgIH0KCiAgICAvKioKICAgICogcmV0dXJucyB0aGUgaHlwZXJ0eSBOYW1lIGZyb20gYSBnaXZlbiB1cmwuIFRoaXMgdXJsIGNvdWxkIGJlIGZyb20gYSBkYXRhT2JqZWN0IG9yIGh5cGVydHkKICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIHVybCAgICAgIGh5cGVydHkgb3IgZGF0YU9iamVjdCBVUkwKICAgICogQHJldHVybiAgIHtTdHJpbmd9ICAgIGh5cGVydHlOYW1lICAgICBoeXBlcnR5IE5hbWUKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldEh5cGVydHlOYW1lJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRIeXBlcnR5TmFtZSh1cmwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBpc0h5cGVydHlVUkwgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkodXJsKS50eXBlID09PSAnaHlwZXJ0eSc7CgogICAgICAvL3ZhbHVlIHRvIGJlIHJldHVybmVkIGluIHRoZSBlbmQKICAgICAgdmFyIGh5cGVydHlOYW1lID0gdm9pZCAwOwoKICAgICAgLy9pZiBpcyBub3QgYW4gaHlwZXJ0eSwgY2hlY2sgaWYgaXMgYSBkYXRhT2JqZWN0IGFuZCBvYnRhaW4gaGlzIHJlcG9ydGVyCiAgICAgIHZhciBoeXBlcnR5VVJMID0gaXNIeXBlcnR5VVJMID8gaHlwZXJ0eVVSTCA9IHVybCA6IF90aGlzLmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyh1cmwpOwoKICAgICAgZm9yICh2YXIgaW5kZXggaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkgewogICAgICAgIHZhciBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07CiAgICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCkgewogICAgICAgICAgaHlwZXJ0eU5hbWUgPSBoeXBlcnR5Lm9iamVjdE5hbWU7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIGh5cGVydHlOYW1lOwogICAgfQoKICAgIC8qKgogICAgKiBmdW5jdGlvbiB0byByZXR1cm4gdGhlIHJlcG9ydGVyVVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YW9iamVjdCBVUkwKICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkwKICAgICogQHJldHVybiAgIHtTdHJpbmd9ICAgICByZXBvcnRlclVSTCAgICAgIHJlcG9ydGVyVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRSZXBvcnRlclVSTCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVwb3J0ZXJVUkwoZGF0YU9iamVjdFVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGlmIChkYXRhT2JqZWN0KSB7CiAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QucmVwb3J0ZXIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZWplY3QoJ05vIHJlcG9ydGVyIHdhcyBmb3VuZCcpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIGZ1bmN0aW9uIHRvIHJldHVybiB0aGUgcmVwb3J0ZXJVUkwgYXNzb2NpYXRlZCB3aXRoIHRoZSBkYXRhb2JqZWN0IFVSTC4gbm8gcHJvbWlzZSByZXR1cm5lZAogICAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdFVSTAogICAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgIHJlcG9ydGVyVVJMICAgICAgcmVwb3J0ZXJVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldFJlcG9ydGVyVVJMU3luY2hvbm91cycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGRhdGFPYmplY3RVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07CgogICAgICByZXR1cm4gZGF0YU9iamVjdCA/IGRhdGFPYmplY3QucmVwb3J0ZXIgOiB1bmRlZmluZWQ7CiAgICB9CgogICAgLyoqCiAgICAqIHJldHVybnMgdGhlIGh5cGVydHkgVVJMIHRoYXQgc3Vic2NyaWJlZCB0aGUgZGF0YU9iamVjdAogICAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIHVybCAgICAgICAgICAgIHVybCBmb3JtYXQKICAgICogQHJldHVybiAgIHtTdHJpbmd9ICAgIEh5cGVydHkgVVJMIHN1YnNjcmliZWQgdG8gdGhlIFVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRhT2JqZWN0U3Vic2NyaWJlckh5cGVydHkodXJsKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W3VybF07CiAgICB9CgogICAgLyoqCiAgICAqIHJlZ2lzdGVyIGEgZGVzaXJlZCBkYXRhT2JqZWN0IHRvIHN1YnNjcmliZQogICAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgZGF0YU9iamVjdFVSTCAgICAgIGRhdGFPYmplY3QgVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RlclN1YnNjcmliZWREYXRhT2JqZWN0JywKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclN1YnNjcmliZWREYXRhT2JqZWN0KGRhdGFPYmplY3RVUkwsIGh5cGVydHlVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgaWYgKF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID0gaHlwZXJ0eVVSTDsKICAgICAgfQogICAgfQoKICAgIC8qKgogICAgKiBGdW5jdGlvbiB0byByZXR1cm4gdGhlIGxpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgdXNlcnMgcmVjZWl2ZWQgaW4gdGhlIGNyZWF0aW9uIG9mIGEgZGF0YSBvYmplY3QKICAgICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICAgICAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0VVJMCiAgICAqIEByZXR1cm4gICB7QXJyYXk8U3RyaW5nPn0gICAgIHByZUF1dGggICAgICAgICBMaXN0IG9mIHByZSBhdXRob3Jpc2VkIHVzZXJzCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdnZXRQcmVBdXRoU3Vic2NyaWJlcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFByZUF1dGhTdWJzY3JpYmVycyhkYXRhT2JqZWN0VVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07CiAgICAgIHZhciBwcmVBdXRoID0gW107CgogICAgICBpZiAoZGF0YU9iamVjdCkgewogICAgICAgIHByZUF1dGggPSBkYXRhT2JqZWN0LnByZUF1dGg7CiAgICAgIH0KICAgICAgcmV0dXJuIHByZUF1dGg7CiAgICB9CgogICAgLyoqCiAgICAqIHNlbmQgcmVxdWVzdHMgdG8gdW5yZWdpc3RlciBhbGwgaHlwZXJ0aWVzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5CiAgICAqIEByZXR1cm4gICB7UHJvbWlzZX0gICAgIHJldHVybiBhIHByb21pc2UgaWYgdGhlIHJlc3VsdCBvZiB1bnJlZ2lzdHJhdGlvbiBhbGwgaHlwZXJ0aWVzCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICd1bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHVucmVnaXN0ZXJSZXN1bHRzID0gW107CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkgewogICAgICAgICAgdmFyIGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTsKICAgICAgICAgIHZhciByZXN1bHQgPSBfdGhpcy51bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKGh5cGVydHkudXNlci51c2VyVVJMLCBoeXBlcnR5Lmh5cGVydHlVUkwpOwogICAgICAgICAgdW5yZWdpc3RlclJlc3VsdHMucHVzaChyZXN1bHQpOwogICAgICAgIH0KCiAgICAgICAgX3Byb21pc2UyLmRlZmF1bHQuYWxsKHVucmVnaXN0ZXJSZXN1bHRzKS50aGVuKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICByZXNvbHZlKCdzdWNjZXNzZnVsbHkgdW5yZWdpc3RlcmVkIGFsbCBoeXBlcnRpZXMnKTsKICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiAgZnVuY3Rpb24gdG8gdW5yZWdpc3RlciBhbiBoeXBlcnR5SW5zdGFuY2UgaW4gdGhlIERvbWFpbiBSZWdpc3RyeQogICAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICB1c2VyICAgICAgICB1c2VyIHVybAogICAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICBoeXBlcnR5SW5zdGFuY2UgICBIeXBlcnR5SW5zbnRhbmNlIHVybAogICAgKgogICAgKi8KCiAgfSwgewogICAga2V5OiAndW5yZWdpc3Rlckh5cGVydHlJbnN0YW5jZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gdW5yZWdpc3Rlckh5cGVydHlJbnN0YW5jZSh1c2VyLCBoeXBlcnR5SW5zdGFuY2UpIHsKICAgICAgLy9UT0RPIHdvcmtpbmcgYnV0IHRoZSB1c2VyCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgbWVzc2FnZSA9IHsgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLAogICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4gKyAnLycsCiAgICAgICAgYm9keTogeyB2YWx1ZTogeyB1c2VyOiB1c2VyLCB1cmw6IGh5cGVydHlJbnN0YW5jZSB9IH0gfTsKCiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgIGNvbnNvbGUubG9nKCd1bnJlZ2lzdGVyIGh5cGVydHkgUmVwbHknLCByZXBseSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIGRhdGFPYmplY3RJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5CiAgICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICBuYW1lICAgICAgRGF0YU9iamVjdE5hbWUKICAgICovCgogIH0sIHsKICAgIGtleTogJ2RlbGV0ZURhdGFPYmplY3RJbnN0YW5jZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVsZXRlRGF0YU9iamVjdEluc3RhbmNlKG5hbWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBtZXNzYWdlID0geyB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsCiAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbiArICcvJywKICAgICAgICBib2R5OiB7IHZhbHVlOiB7IG5hbWU6IG5hbWUgfSB9IH07CgogICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICBjb25zb2xlLmxvZygndW5yZWdpc3RlciBkYXRhT2JqZWN0IFJlcGx5JywgcmVwbHkpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRnVuY3Rpb24gdG8gdXBkYXRlIGFuIEh5cGVydHkKICAgICovCgogIH0sIHsKICAgIGtleTogJ3VwZGF0ZUh5cGVydHlJbnN0YW5jZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlSHlwZXJ0eUluc3RhbmNlKHJlc291cmNlLCB2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7IHR5cGU6ICdVUERBVEUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwKICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLAogICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IHJlc291cmNlLCB2YWx1ZTogdmFsdWUgfSB9OwoKICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdC5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICBjb25zb2xlLmxvZygnVXBkYXRlZCBoeXBlcnR5IHJlcGx5JywgcmVwbHkpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogcmVnaXN0ZXIgYSBuZXcgc3Vic2NyaWJlciBpbiB0aGUgZGF0YU9iamVjdCByZWdpc3RlcmVkCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3QgVVJMCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICBzdWJzY3JpYmVyVVJMICAgIHN1YnNjcmliZXIgVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RlclN1YnNjcmliZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyU3Vic2NyaWJlcihkYXRhT2JqZWN0VVJMLCBzdWJzY3JpYmVyVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07CgogICAgICBpZiAoZGF0YU9iamVjdCkgewogICAgICAgIGRhdGFPYmplY3Quc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyVVJMKTsKICAgICAgICBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXSA9IGRhdGFPYmplY3Q7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogZ2V0IHRoZSBzdWJzY3JpYmVycyByZWdpc3RlcmVkIHdpdGhpbiBhIGRhdGFPYmplY3QKICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3QgVVJMCiAgICAqIEBwYXJhbSAge0FycmF5PFN0cmluZz59ICAgU3Vic3RyaWJlcnMgTGlzdAogICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREYXRhT2JqZWN0U3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdOwoKICAgICAgaWYgKGRhdGFPYmplY3QpIHsKICAgICAgICByZXR1cm4gZGF0YU9iamVjdC5zdWJzY3JpYmVyczsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyAnTm8gZGF0YU9iamVjdCB3YXMgZm91bmQnOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IERhdGEgT2JqZWN0IGluIHRoZSBydW50aW1lIHdoaWNoIHJldHVybnMgdGhlIGRhdGFPYmplY3RVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgRGF0YSBPYmplY3QuCiAgICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBpZGVudGlmaWVyICAgICAgICAgICAgICAgICAgaWRlbnRpZmllcgogICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdHNjaGVtYSAgICAgICAgICAgIGRhdGFPYmplY3RzY2hlbWEKICAgICogQHBhcmFtICB7U3RyaW5nfSAgICAgIGRhdGFPYmplY3RVcmwgICAgICAgICAgICAgICBkYXRhT2JqZWN0VXJsCiAgICAqIEBwYXJhbSB7U3RyaW5nfSAgICAgIGRhdGFPYmplY3RSZXBvcnRlciAgICAgICAgICAgZGF0YU9iamVjdFJlcG9ydGVyCiAgICAqIEBwYXJhbSAge0FycmF5fSAgICAgcmVzb3VyY2VzICAgICAgICAgICAgICAgICAgICAgZGF0YU9iamVjdCByZXNvdXJjZXMKICAgICogQHBhcmFtICB7QXJyYXl9ICAgICBhdXRob3Jpc2UgICAgICAgICAgICAgICAgICAgICBsaXN0IG9mIHByZSBhdXRob3Jpc2VkIGF1dGhvcmlzZWQgSURzCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZWdpc3RlckRhdGFPYmplY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyRGF0YU9iamVjdChpZGVudGlmaWVyLCBkYXRhT2JqZWN0c2NoZW1hLCBkYXRhT2JqZWN0VXJsLCBkYXRhT2JqZWN0UmVwb3J0ZXIsIHJlc291cmNlcywgYWRkcmVzc1VSTCwgYXV0aG9yaXNlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGRhdGFTY2hlbWUgPSBbXTsKICAgICAgICB2YXIgZmlsdGVyZWREYXRhU2NoZW1lID0gZGF0YU9iamVjdFVybC5zcGxpdCgnOicpOwogICAgICAgIGRhdGFTY2hlbWUucHVzaChmaWx0ZXJlZERhdGFTY2hlbWVbMF0pOwoKICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JlZ2lzdHJ5OkRhdGFPYmplY3RVUkxzJykudGhlbihmdW5jdGlvbiAodXJsc0xpc3QpIHsKCiAgICAgICAgICBpZiAoIXVybHNMaXN0KSB7CiAgICAgICAgICAgIHVybHNMaXN0ID0ge307CiAgICAgICAgICB9CgogICAgICAgICAgLy91cGRhdGUgdGhlIGxpc3Qgd2l0aCB0aGUgbmV3IGVsZW1lbnRzCiAgICAgICAgICB1cmxzTGlzdFtpZGVudGlmaWVyICsgZGF0YU9iamVjdHNjaGVtYSArIHJlc291cmNlcyArIGRhdGFPYmplY3RSZXBvcnRlcl0gPSBhZGRyZXNzVVJMLmFkZHJlc3M7CgogICAgICAgICAgLy9tZXNzYWdlIHRvIHJlZ2lzdGVyIHRoZSBuZXcgaHlwZXJ0eSwgd2l0aGluIHRoZSBkb21haW4gcmVnaXN0cnkKICAgICAgICAgIHZhciBtZXNzYWdlVmFsdWUgPSB7IG5hbWU6IGlkZW50aWZpZXIsIHJlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogZGF0YVNjaGVtZSwgc2NoZW1hOiBkYXRhT2JqZWN0c2NoZW1hLCB1cmw6IGRhdGFPYmplY3RVcmwsIGV4cGlyZXM6IF90aGlzLmV4cGlyZXNUaW1lLCByZXBvcnRlcjogZGF0YU9iamVjdFJlcG9ydGVyLCBwcmVBdXRoOiBhdXRob3Jpc2UsIHN1YnNjcmliZXJzOiBbXSB9OwoKICAgICAgICAgIHZhciBtZXNzYWdlID0gdm9pZCAwOwoKICAgICAgICAgIGlmIChhZGRyZXNzVVJMLm5ld0FkZHJlc3MpIHsKCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWdpc3RlcmluZyBuZXcgZGF0YSBvYmplY3QgVVJMJywgZGF0YU9iamVjdFVybCk7CgogICAgICAgICAgICBtZXNzYWdlID0geyB0eXBlOiAnY3JlYXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLCBib2R5OiB7IHZhbHVlOiBtZXNzYWdlVmFsdWUsIHBvbGljeTogJ3BvbGljeScgfSB9OwogICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWdpc3RlcmluZyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZGF0YSBvYmplY3QgVVJMJywgZGF0YU9iamVjdFVybCk7CgogICAgICAgICAgICAvKm1lc3NhZ2VWYWx1ZSA9IHtuYW1lOiBpZGVudGlmaWVyLCByZXNvdXJjZXM6IHJlc291cmNlcywgZGF0YVNjaGVtZXM6IGRhdGFTY2hlbWUsIHNjaGVtYTogZGF0YU9iamVjdHNjaGVtYSwgdXJsOiBkYXRhT2JqZWN0VXJsLCBleHBpcmVzOiBfdGhpcy5leHBpcmVzVGltZSwgcmVwb3J0ZXI6IGRhdGFPYmplY3RSZXBvcnRlciwgcHJlQXV0aDogYXV0aG9yaXNlLCBzdWJzY3JpYmVyczogW119OwogICAgICAgICAgICAgbWVzc2FnZSA9IHt0eXBlOidjcmVhdGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsIGJvZHk6IHt2YWx1ZTogbWVzc2FnZVZhbHVlLCBwb2xpY3k6ICdwb2xpY3knfX07Ki8KCiAgICAgICAgICAgIG1lc3NhZ2UgPSB7CiAgICAgICAgICAgICAgdHlwZTogJ3VwZGF0ZScsCiAgICAgICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsCiAgICAgICAgICAgICAgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsCiAgICAgICAgICAgICAgYm9keTogeyByZXNvdXJjZTogZGF0YU9iamVjdFVybCwgdmFsdWU6ICdsaXZlJywgYXR0cmlidXRlOiAnc3RhdHVzJyB9CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVybF0gPSBtZXNzYWdlVmFsdWU7CgogICAgICAgICAgLy8gc3RlcCB0byBvYnRhaW4gdGhlIGxpc3Qgb2YgYWxsIFVSTCByZWdpc3RlcmVkIHRvIHVwZGF0ZWQgd2l0aCB0aGUgbmV3IG9uZS4KICAgICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmVnaXN0cnk6RGF0YU9iamVjdFVSTHMnLCAwLCB1cmxzTGlzdCkudGhlbihmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAvKmxldCBtZXNzYWdlID0gX3RoaXMubWVzc2FnZUZhY3RvcnkuY3JlYXRlQ3JlYXRlTWVzc2FnZVJlcXVlc3QoCiAgICAgICAgICAgICAgX3RoaXMucmVnaXN0cnlVUkwsCiAgICAgICAgICAgICAgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywKICAgICAgICAgICAgICBtZXNzYWdlVmFsdWUsCiAgICAgICAgICAgICAgJ3BvbGljeScKICAgICAgICAgICAgKTsqLwoKICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT4gcmVnaXN0ZXJEYXRhT2JqZWN0IFJlcGx5OiAnLCByZXBseSk7CiAgICAgICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgICByZXNvbHZlKCdvaycpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIHJlZ2lzdGVyIERhdGFPYmplY3QnKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRSZXNvdXJjZXNBbmRTY2hlbWVzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyhkZXNjcmlwdG9yKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIHJlc291cmNlcyA9IHZvaWQgMDsKCiAgICAgICAgLy8gY2hlY2sgaWYgdGhlIGh5cGVydHkgcmVzb3VyY2VzIGlzIGEgdmVjdG9yIG9yIGEgc3RyaW5nCiAgICAgICAgLy8gVE9ETyBkZWxldGUgbGF0ZXIgd2hlbiBjYXRhbG9ndWUgaXMgZml4ZWQKICAgICAgICBpZiAodHlwZW9mIGRlc2NyaXB0b3IuaHlwZXJ0eVR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICByZXNvdXJjZXMgPSBbXTsKICAgICAgICAgIHJlc291cmNlcy5wdXNoKGRlc2NyaXB0b3IuaHlwZXJ0eVR5cGUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNvdXJjZXMgPSBkZXNjcmlwdG9yLmh5cGVydHlUeXBlOwogICAgICAgIH0KCiAgICAgICAgdmFyIGRlc2NyaXB0b3JEYXRhU2NoZW1hID0gZGVzY3JpcHRvci5kYXRhT2JqZWN0czsKICAgICAgICB2YXIgZGF0YVNjaGVtYXNBcnJheSA9IFtdOwoKICAgICAgICAvL3RoaXMgd2lsbCBjcmVhdGUgYSBhcnJheSB3aXRoIGEgUHJvbWlzZSBpbiBlYWNoIHBvc2l0aW9uCiAgICAgICAgZm9yICh2YXIgaW5kZXggaW4gZGVzY3JpcHRvckRhdGFTY2hlbWEpIHsKICAgICAgICAgIGRhdGFTY2hlbWFzQXJyYXkucHVzaChfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKGRlc2NyaXB0b3JEYXRhU2NoZW1hW2luZGV4XSkpOwogICAgICAgIH0KCiAgICAgICAgLy8gYXMgc29vbiBhcyB0aGUgcHJldmlvdXMgYXJyYXkgaXMgY29tcGxldGVkLCB0aGlzIHdpbGwgd2FpdCBmb3IgdGhlIHJlc29sdmUgb2YgYWxsIHByb21pc2VzIGluIHRoZSBhcnJheQogICAgICAgIF9wcm9taXNlMi5kZWZhdWx0LmFsbChkYXRhU2NoZW1hc0FycmF5KS50aGVuKGZ1bmN0aW9uIChkYXRhU2NoZW1hcykgewoKICAgICAgICAgIHZhciBmaWx0ZXJlZERhdGFTY2hlbWFzID0gW107CiAgICAgICAgICBmb3IgKHZhciBfaW5kZXggaW4gZGF0YVNjaGVtYXMpIHsKICAgICAgICAgICAgdmFyIGRhdGFTY2hlbWEgPSBkYXRhU2NoZW1hc1tfaW5kZXhdOwogICAgICAgICAgICBmaWx0ZXJlZERhdGFTY2hlbWFzLnB1c2goZGF0YVNjaGVtYS5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllcy5zY2hlbWUuY29uc3RhbnQpOwogICAgICAgICAgfQoKICAgICAgICAgIGNvbnNvbGUubG9nKCdIeXBlcnR5IFNjaGVtYXMnLCBmaWx0ZXJlZERhdGFTY2hlbWFzKTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdIeXBlcnR5IHJlc291cmNlcycsIHJlc291cmNlcyk7CgogICAgICAgICAgcmVzb2x2ZSh7IHJlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1hOiBmaWx0ZXJlZERhdGFTY2hlbWFzIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogbWV0aG9kIHRoYXQgcmV0dXJucyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgSHlwZXJ0eSBvciBEYXRhT2JqZWN0cyBVUkxTLCBmb3IgZ2l2ZW4gY2hhcmFjdGVyaXN0aWNzCiAgICAqIEBwYXJhbSAge0pTT059ICAgICAgICBpbmZvICAgICAgICAgICBvYmplY3Qgb3IgaHlwZXJ0eSBjaGFyYXRlcmlzdGljcyBpbmZvCiAgICAqIEByZXR1cm4ge2FkZHJlc3NVUkx9ICBhZGRyZXNzVVJMICAgICByZXR1cm4gdGhlIFVSTCBpZiB0aGVyZSBpcyBhbnkgcHJldmlvdXN5IHJlZ2lzdGVyZWQgVVJMLCByZXR1cm4gdW5kZWZpbmVkIG90aGVyd2lzZQogICAgKi8KCiAgfSwgewogICAga2V5OiAnY2hlY2tSZWdpc3RlcmVkVVJMcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2hlY2tSZWdpc3RlcmVkVVJMcyhpbmZvKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIG9iamVjdFR5cGUgPSBpbmZvLnJlcG9ydGVyID8gJ3JlZ2lzdHJ5OkRhdGFPYmplY3RVUkxzJyA6ICdyZWdpc3RyeTpIeXBlcnR5VVJMcyc7CgogICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldChvYmplY3RUeXBlKS50aGVuKGZ1bmN0aW9uICh1cmxzTGlzdCkgewoKICAgICAgICAgIGlmICghdXJsc0xpc3QpIHsKICAgICAgICAgICAgdXJsc0xpc3QgPSB7fTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAob2JqZWN0VHlwZSA9PT0gJ3JlZ2lzdHJ5Okh5cGVydHlVUkxzJykgewogICAgICAgICAgICBfdGhpcy5fZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyhpbmZvKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgIGlmICh1cmxzTGlzdFt2YWx1ZS5yZXNvdXJjZXMgKyB2YWx1ZS5kYXRhU2NoZW1hXSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JldXNhZ2Ugb2YgaHlwZXJ0eSBVUkwnKTsKICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVybHNMaXN0W3ZhbHVlLnJlc291cmNlcyArIHZhbHVlLmRhdGFTY2hlbWFdKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ25vIGh5cGVydHkgVVJMIHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh1bmRlZmluZWQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgdmFyIGNoYXJhY3RlcmlzdGljcyA9IGluZm8ubmFtZSArIGluZm8uc2NoZW1hICsgaW5mby5yZXNvdXJjZXMgKyBpbmZvLnJlcG9ydGVyOwoKICAgICAgICAgICAgaWYgKHVybHNMaXN0W2NoYXJhY3RlcmlzdGljc10pIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmV1c2FnZSBvZiBkYXRhT2JqZWN0IFVSTCcpOwogICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVybHNMaXN0W2NoYXJhY3RlcmlzdGljc10pOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdubyBkYXRhT2JqZWN0IFVSTCB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkJyk7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodW5kZWZpbmVkKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gcmVnaXN0ZXIgYSBuZXcgSHlwZXJ0eSBpbiB0aGUgcnVudGltZSB3aGljaCByZXR1cm5zIHRoZSBIeXBlcnR5VVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IEh5cGVydHkuCiAgICAqIEBwYXJhbSAge1NhbmRib3h9ICAgICAgICAgICAgIHNhbmRib3ggICAgICAgICAgICAgICBzYW5kYm94CiAgICAqIEBwYXJhbSAge0h5cGVydHlDYXRhbG9ndWVVUkx9IEh5cGVydHlDYXRhbG9ndWVVUkwgICBkZXNjcmlwdG9yCiAgICAqIEByZXR1cm4ge0h5cGVydHlVUkx9ICAgICAgICAgIEh5cGVydHlVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVySHlwZXJ0eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJIeXBlcnR5KHNhbmRib3gsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGFkZHJlc3NVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBoeXBlcnR5Q2FwYWJpbGl0aWVzID0gdm9pZCAwOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vYXNzdW1pbmcgZGVzY3JpcHRvciBjb21lIGluIHRoaXMgZm9ybWF0LCB0aGUgc2VydmljZS1wcm92aWRlci1kb21haW4gdXJsIGlzIHJldHJpZXZlZCBieSBhIHNwbGl0IGluc3RydWN0aW9uCiAgICAgICAgLy9oeXBlcnR5LWNhdGFsb2d1ZTovLzxzZXJ2aWNlLXByb3ZpZGVyLWRvbWFpbj4vPGNhdGFsb2d1ZS1vYmplY3QtaWRlbnRpZmllcj4KICAgICAgICB2YXIgZG9tYWluVXJsID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKGRlc2NyaXB0b3JVUkwpLmRvbWFpbjsKCiAgICAgICAgaWYgKGRvbWFpblVybC5pbmNsdWRlcygnY2F0YWxvZ3VlJykpIHsKICAgICAgICAgIGRvbWFpblVybCA9IGRvbWFpblVybC5yZXBsYWNlKCdjYXRhbG9ndWUuJywgJycpOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdHlBc3NlcnRpb24oKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICAgIHZhciB1c2VyUHJvZmlsZSA9IHJlc3VsdC51c2VyUHJvZmlsZTsKICAgICAgICAgIHZhciBpZGVudGl0eVVSTCA9IHVzZXJQcm9maWxlLnVzZXJVUkw7CgogICAgICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgcmVqZWN0KCdNZXNzYWdlQnVzIG5vdCBmb3VuZCBvbiByZWdpc3RlclN0dWInKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vY2FsbCBjaGVjayBpZiB0aGUgcHJvdG9zdHViIGV4aXN0CiAgICAgICAgICAgIF90aGlzLnJlc29sdmUoJ2h5cGVydHktcnVudGltZTovLycgKyBkb21haW5VcmwpLnRoZW4oZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZWdpc3RyeTpIeXBlcnR5VVJMcycpOwogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh1cmxzTGlzdCkgewoKICAgICAgICAgICAgICBfdGhpcy5fZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyhkZXNjcmlwdG9yKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewoKICAgICAgICAgICAgICAgIGh5cGVydHlDYXBhYmlsaXRpZXMgPSB2YWx1ZTsKCiAgICAgICAgICAgICAgICBpZiAoIXVybHNMaXN0KSB7CiAgICAgICAgICAgICAgICAgIHVybHNMaXN0ID0ge307CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdXJsc0xpc3RbaHlwZXJ0eUNhcGFiaWxpdGllcy5yZXNvdXJjZXMgKyBoeXBlcnR5Q2FwYWJpbGl0aWVzLmRhdGFTY2hlbWFdID0gYWRkcmVzc1VSTC5hZGRyZXNzOwogICAgICAgICAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZWdpc3RyeTpIeXBlcnR5VVJMcycsIDAsIHVybHNMaXN0KS50aGVuKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5RG9tYWluID0gZG9tYWluVXJsOwoKICAgICAgICAgICAgICAgICAgLy9jaGVjayB3aGV0aGVyIHRoZSByZWNlaXZlZCBzYW5ib3ggZSBBcHBsaWNhdGlvblNhbmRib3ggb3IgYSBub3JtYWwgc2FuZGJveAogICAgICAgICAgICAgICAgICBpZiAoc2FuZGJveC50eXBlID09PSAnYXBwJykgewogICAgICAgICAgICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3QuYXBwU2FuZGJveFthZGRyZXNzVVJMLmFkZHJlc3NbMF1dID0gc2FuZGJveDsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzYW5kYm94LnR5cGUgPT09ICdub3JtYWwnKSB7CiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W2FkZHJlc3NVUkwuYWRkcmVzc1swXV0gPSBzYW5kYm94OwogICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJlamVjdCgnV3JvbmcgU2FuZGJveFR5cGUnKTsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgdmFyIGh5cGVydHkgPSBuZXcgX0h5cGVydHlJbnN0YW5jZTIuZGVmYXVsdChfdGhpcy5pZGVudGlmaWVyLCBfdGhpcy5yZWdpc3RyeVVSTCwgZGVzY3JpcHRvclVSTCwgZGVzY3JpcHRvciwgYWRkcmVzc1VSTC5hZGRyZXNzWzBdLCB1c2VyUHJvZmlsZSk7CgogICAgICAgICAgICAgICAgICBoeXBlcnR5Ll9yZXNvdXJjZXMgPSBoeXBlcnR5Q2FwYWJpbGl0aWVzLnJlc291cmNlczsKICAgICAgICAgICAgICAgICAgaHlwZXJ0eS5fZGF0YVNjaGVtZXMgPSBoeXBlcnR5Q2FwYWJpbGl0aWVzLmRhdGFTY2hlbWE7CiAgICAgICAgICAgICAgICAgIF90aGlzLmh5cGVydGllc0xpc3QucHVzaChoeXBlcnR5KTsKCiAgICAgICAgICAgICAgICAgIC8vbWVzc2FnZSB0byByZWdpc3RlciB0aGUgbmV3IGh5cGVydHksIHdpdGhpbiB0aGUgZG9tYWluIHJlZ2lzdHJ5CiAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlVmFsdWUgPSB2b2lkIDA7CiAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gdm9pZCAwOwoKICAgICAgICAgICAgICAgICAgaWYgKGFkZHJlc3NVUkwubmV3QWRkcmVzcykgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWdpc3RlcmluZyBuZXcgSHlwZXJ0eSBVUkwnLCBhZGRyZXNzVVJMLmFkZHJlc3NbMF0pOwoKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVmFsdWUgPSB7IHVzZXI6IGlkZW50aXR5VVJMLCBkZXNjcmlwdG9yOiBkZXNjcmlwdG9yVVJMLCB1cmw6IGFkZHJlc3NVUkwuYWRkcmVzc1swXSwgZXhwaXJlczogX3RoaXMuZXhwaXJlc1RpbWUsIHJlc291cmNlczogaHlwZXJ0eUNhcGFiaWxpdGllcy5yZXNvdXJjZXMsIGRhdGFTY2hlbWVzOiBoeXBlcnR5Q2FwYWJpbGl0aWVzLmRhdGFTY2hlbWEgfTsKCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHsgdHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywgYm9keTogeyB2YWx1ZTogbWVzc2FnZVZhbHVlLCBwb2xpY3k6ICdwb2xpY3knIH0gfTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVnaXN0ZXJpbmcgcHJldmlvdXNseSByZWdpc3RlcmVkIEh5cGVydHkgVVJMJywgYWRkcmVzc1VSTC5hZGRyZXNzWzBdKTsKCiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHsgdHlwZTogJ3VwZGF0ZScsCiAgICAgICAgICAgICAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywKICAgICAgICAgICAgICAgICAgICAgIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLAogICAgICAgICAgICAgICAgICAgICAgYm9keTogeyByZXNvdXJjZTogYWRkcmVzc1VSTC5hZGRyZXNzWzBdIC8qLCB2YWx1ZTogJ2xpdmUnLCBhdHRyaWJ1dGU6ICdzdGF0dXMnKi8gfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIC8qbGV0IG1lc3NhZ2UgPSBfdGhpcy5tZXNzYWdlRmFjdG9yeS5jcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdCgKICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyeVVSTCwKICAgICAgICAgICAgICAgICAgICAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLAogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VWYWx1ZSwKICAgICAgICAgICAgICAgICAgICAncG9saWN5JwogICAgICAgICAgICAgICAgICApOyovCgogICAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnPT09PiBSZWdpc3Rlckh5cGVydHkgUmVwbHk6ICcsIHJlcGx5KTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFkZHJlc3NVUkwuYWRkcmVzc1swXSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgnRmFpbGVkIHRvIHJlZ2lzdGVyIGFuIEh5cGVydHknKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgLy90aW1lciB0byBrZWVwIHRoZSByZWdpc3RyYXRpb24gYWxpdmUKICAgICAgICAgICAgICAgICAgLy8gdGhlIHRpbWUgaXMgZGVmaW5lZCBieSBhIGxpdHRsZSBsZXNzIHRoYW4gaGFsZiBvZiB0aGUgZXhwaXJlcyB0aW1lIGRlZmluZWQKICAgICAgICAgICAgICAgICAgdmFyIGtlZXBBbGl2ZVRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgICAgICAvKmxldCBtZXNzYWdlID0gX3RoaXMubWVzc2FnZUZhY3RvcnkuY3JlYXRlQ3JlYXRlTWVzc2FnZVJlcXVlc3QoCiAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyeVVSTCwKICAgICAgICAgICAgICAgICAgICAgICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsCiAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAncG9saWN5JwogICAgICAgICAgICAgICAgICAgICk7Ki8KCiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB7IHR5cGU6ICd1cGRhdGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IGFkZHJlc3NVUkwuYWRkcmVzc1swXSB9IH07CgogICAgICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT4gS2VlcEFsaXZlIFJlcGx5OiAnLCByZXBseSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0sIF90aGlzLmV4cGlyZXNUaW1lIC8gMS4xIC8gMiAqIDEwMDApOwogICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQWRkcmVzcyBSZWFzb246ICcsIHJlYXNvbik7CiAgICAgICAgICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgIHJlamVjdCgnRmFpbGVkIHRvIG9idGFpbiBhbiBpZGVudGl0eScsIGVycik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBUbyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIEh5cGVydHkKICAgICogQHBhcmFtICB7SHlwZXJ0eVVSTH0gICAgICAgICAgSHlwZXJ0eVVSTCB1cmwgICAgICAgIHVybAogICAgKi8KCiAgfSwgewogICAga2V5OiAndW5yZWdpc3Rlckh5cGVydHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJIeXBlcnR5KHVybCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBmb3VuZCA9IGZhbHNlOwogICAgICAgIHZhciBpbmRleCA9IDA7CgogICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IF90aGlzLmh5cGVydGllc0xpc3QubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgICAgICB2YXIgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdOwogICAgICAgICAgaWYgKGh5cGVydHkgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSB1cmwpIHsKICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChmb3VuZCA9PT0gZmFsc2UpIHsKICAgICAgICAgIHJlamVjdCgnSHlwZXJ0eSBub3QgZm91bmQnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsZXRlIF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdOwogICAgICAgICAgcmVzb2x2ZSgnSHlwZXJ0eSBzdWNjZXNzZnVsbHkgZGVsZXRlZCcpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIGRpc2NvdmVyIHByb3RvY29sIHN0dWJzIGF2YWlsYWJsZSBpbiB0aGUgcnVudGltZSBmb3IgYSBjZXJ0YWluIGRvbWFpbi4gSWYgYXZhaWxhYmxlLCBpdCByZXR1cm5zIHRoZSBydW50aW1lIHVybCBmb3IgdGhlIHByb3RvY29sIHN0dWIgdGhhdCBjb25uZWN0cyB0byB0aGUgcmVxdWVzdGVkIGRvbWFpbi4gUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgQlVTIHRvIHJvdXRlIG1lc3NhZ2VzIHRvIHJlbW90ZSBzZXJ2ZXJzIG9yIHBlZXJzIChkbyB3ZSBuZWVkIHNvbWV0aGluZyBzaW1pbGFyIGZvciBIeXBlcnRpZXM/KS4KICAgICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgRG9tYWluVVJMICAgICAgICAgICAgdXJsCiAgICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdkaXNjb3ZlclByb3Rvc3R1YicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY292ZXJQcm90b3N0dWIodXJsKSB7CiAgICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciB1cmwgbmVlZGVkJyk7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGRpdmlkZWRVUkwgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkodXJsKTsKICAgICAgICB2YXIgZG9tYWluVVJMID0gZGl2aWRlZFVSTC5kb21haW47CgogICAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShkb21haW5VUkwpICYmIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0uc3RhdHVzID09PSBTVEFUVVMuREVQTE9ZRUQpIHsKICAgICAgICAgIHJlc29sdmUoX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVVJMXSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0gPSB7CiAgICAgICAgICAgIHN0YXR1czogU1RBVFVTLlBST0dSRVNTCiAgICAgICAgICB9OwoKICAgICAgICAgIHJlamVjdCgncmVxdWVzdFVwZGF0ZSBjb3VsZG5cJ3QgZ2V0IHRoZSBQcm90b3N0dWJVUkwnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgICogVG8gcmVnaXN0ZXIgYSBuZXcgUHJvdG9jb2wgU3R1YiBpbiB0aGUgcnVudGltZSBpbmNsdWRpbmcgYXMgaW5wdXQgcGFyYW1ldGVycyB0aGUgZnVuY3Rpb24gdG8gcG9zdE1lc3NhZ2UsIHRoZSBEb21haW5VUkwgdGhhdCBpcyBjb25uZWN0ZWQgd2l0aCB0aGUgc3R1Yiwgd2hpY2ggcmV0dXJucyB0aGUgUnVudGltZVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBQcm90b2NvbFN0dWIuCiAgICAgKiBAcGFyYW0ge1NhbmRib3h9ICAgICAgICBTYW5kYm94CiAgICAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICBEb21haW5VUkwgc2VydmljZSBwcm92aWRlciBkb21haW4KICAgICAqIEByZXR1cm4ge1J1bnRpbWVQcm90b1N0dWJVUkx9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAncmVnaXN0ZXJTdHViJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclN0dWIoc2FuZGJveCwgZG9tYWluVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIHJ1bnRpbWVQcm90b1N0dWJVUkwgPSB2b2lkIDA7CgogICAgICAgIC8vY2hlY2sgaWYgbWVzc2FnZUJ1cyBpcyByZWdpc3RlcmVkIGluIHJlZ2lzdHJ5IG9yIG5vdAogICAgICAgIGlmIChfdGhpcy5fbWVzc2FnZUJ1cyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpOwogICAgICAgIH0KCiAgICAgICAgLy9UT0RPIGltcGxlbWVudCBhIHVuaXF1ZSBudW1iZXIgZm9yIHRoZSBwcm90b3N0dWJVUkwKICAgICAgICBpZiAoIWRvbWFpblVSTC5pbmRleE9mKCdtc2ctbm9kZS4nKSkgewogICAgICAgICAgZG9tYWluVVJMID0gZG9tYWluVVJMLnN1YnN0cmluZyhkb21haW5VUkwuaW5kZXhPZignLicpICsgMSk7CiAgICAgICAgfQoKICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMID0gJ21zZy1ub2RlLicgKyBkb21haW5VUkwgKyAnL3Byb3Rvc3R1Yi8nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAgKyAxKTsKCiAgICAgICAgLy8gVE9ETzogT3B0aW1pemUgdGhpcwogICAgICAgIC8vIFByb3h5OwogICAgICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0gPSB7CiAgICAgICAgICB1cmw6IHJ1bnRpbWVQcm90b1N0dWJVUkwsCiAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5ERVBMT1lFRAogICAgICAgIH07CgogICAgICAgIC8vIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0gPSBydW50aW1lUHJvdG9TdHViVVJMOwogICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtydW50aW1lUHJvdG9TdHViVVJMXSA9IHNhbmRib3g7CgogICAgICAgIC8vIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHsKICAgICAgICAvLyAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgLy8gfSk7CgogICAgICAgIHJlc29sdmUocnVudGltZVByb3RvU3R1YlVSTCk7CgogICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKHJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgIGlmIChtc2cucmVzb3VyY2UgPT09IG1zZy50byArICcvc3RhdHVzJykgewogICAgICAgICAgICBjb25zb2xlLmxvZygnUnVudGltZVByb3Rvc3R1YlVSTC9zdGF0dXMgbWVzc2FnZTogJywgbXNnLmJvZHkudmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gdW5yZWdpc3RlciBhIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBwcm90b2NvbCBzdHViCiAgICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMICAgICBoeXBlcnR5UnVudGltZVVSTAogICAgKi8KCiAgfSwgewogICAga2V5OiAndW5yZWdpc3RlclN0dWInLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJTdHViKGh5cGVydHlSdW50aW1lVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgaWYgKF90aGlzLnByb3Rvc3R1YnNMaXN0Lmhhc093blByb3BlcnR5KGh5cGVydHlSdW50aW1lVVJMKSkgewogICAgICAgICAgZGVsZXRlIF90aGlzLnByb3Rvc3R1YnNMaXN0W2h5cGVydHlSdW50aW1lVVJMXTsKICAgICAgICAgIHJlc29sdmUoJ1Byb3Rvc3R1YlVSTCByZW1vdmVkJyk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gdW5yZWdpc3RlclN0dWI6IEh5cGVydHkgbm90IGZvdW5kJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IElkZW50aXR5IFByb3ZpZGVyIHByb3h5IGluIHRoZSBydW50aW1lIGluY2x1ZGluZyBhcyBpbnB1dCBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbiB0byBwb3N0TWVzc2FnZSwgdGhlIERvbWFpblVSTCB0aGF0IGlzIGNvbm5lY3RlZCB3aXRoIHRoZSBzdHViLCB3aGljaCByZXR1cm5zIHRoZSBSdW50aW1lVVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IFByb3RvY29sU3R1Yi4KICAgICAqIEBwYXJhbSB7U2FuZGJveH0gICAgICAgIFNhbmRib3gKICAgICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgIERvbWFpblVSTCBzZXJ2aWNlIHByb3ZpZGVyIGRvbWFpbgogICAgICogQHJldHVybiB7UnVudGltZUlkcFByb3h5VVJMfQogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVySWRwUHJveHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVySWRwUHJveHkoc2FuZGJveCwgZG9tYWluVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGlkcFByb3h5U3R1YlVSTCA9IHZvaWQgMDsKCiAgICAgICAgLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90CiAgICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJlamVjdCgnTWVzc2FnZUJ1cyBub3QgZm91bmQgb24gcmVnaXN0ZXJTdHViJyk7CiAgICAgICAgfQoKICAgICAgICBpZHBQcm94eVN0dWJVUkwgPSAnZG9tYWluLWlkcDovLycgKyBkb21haW5VUkwgKyAnL3N0dWIvJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwICsgMSk7CgogICAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXMKICAgICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXSA9IHsKICAgICAgICAgIHVybDogaWRwUHJveHlTdHViVVJMLAogICAgICAgICAgc3RhdHVzOiBTVEFUVVMuUFJPR1JFU1MKICAgICAgICB9OwoKICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbaWRwUHJveHlTdHViVVJMXSA9IHNhbmRib3g7CgogICAgICAgIC8vIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHsKICAgICAgICAvLyAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgLy8gfSk7CgogICAgICAgIHJlc29sdmUoaWRwUHJveHlTdHViVVJMKTsKCiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoaWRwUHJveHlTdHViVVJMICsgJy9zdGF0dXMnLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICBpZiAobXNnLnJlc291cmNlID09PSBtc2cudG8gKyAnL3N0YXR1cycpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2lkcFByb3h5U3R1YlVSTC9zdGF0dXMgbWVzc2FnZTogJywgbXNnLmJvZHkudmFsdWUpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gZGlzY292ZXIgaWRwUHJveHkgc3R1YnMgYXZhaWxhYmxlIGluIHRoZSBydW50aW1lIGZvciBhIGNlcnRhaW4gZG9tYWluLiBJZiBhdmFpbGFibGUsIGl0IHJldHVybnMgdGhlIHJ1bnRpbWUgdXJsIGZvciB0aGUgaWRwUHJveHkgc3R1YiB0aGF0IGNvbm5lY3RzIHRvIHRoZSByZXF1ZXN0ZWQgZG9tYWluLiBSZXF1aXJlZCBieSB0aGUgcnVudGltZSBCVVMgdG8gcm91dGUgbWVzc2FnZXMgdG8gcmVtb3RlIHNlcnZlcnMgb3IgcGVlcnMKICAgICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgRG9tYWluVVJMICAgICAgICAgICAgdXJsCiAgICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMICAgICAgICAgaWRwUHJveHlVcmwKICAgICovCgogIH0sIHsKICAgIGtleTogJ2Rpc2NvdmVySWRwUHJveHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2NvdmVySWRwUHJveHkodXJsKSB7CiAgICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciB1cmwgbmVlZGVkJyk7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGRpdmlkZWRVUkwgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkodXJsKTsKICAgICAgICB2YXIgZG9tYWluVVJMID0gZGl2aWRlZFVSTC5kb21haW47CgogICAgICAgIGlmIChfdGhpcy5pZHBQcm94eUxpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVVJMKSAmJiBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5ERVBMT1lFRCkgewogICAgICAgICAgcmVzb2x2ZShfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXMKICAgICAgICAgIF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VUkxdID0gewogICAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5QUk9HUkVTUwogICAgICAgICAgfTsKICAgICAgICAgIHJlamVjdCgncmVxdWVzdFVwZGF0ZSBjb3VsZG5cJ3QgZ2V0IHRoZSBpZHBQcm94eVVSTCcpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHJlZ2lzdGVyIGEgbmV3IFBvbGljeSBFbmZvcmNlciBpbiB0aGUgcnVudGltZSBpbmNsdWRpbmcgYXMgaW5wdXQgcGFyYW1ldGVycyB0aGUgZnVuY3Rpb24gdG8gcG9zdE1lc3NhZ2UsIHRoZSBIeXBlcnR5VVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgUEVQLCB3aGljaCByZXR1cm5zIHRoZSBSdW50aW1lVVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IFBvbGljeSBFbmZvcmNlciBjb21wb25lbnQuCiAgICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gcG9zdE1lc3NhZ2UgcG9zdE1lc3NhZ2UKICAgICogQHBhcmFtICB7SHlwZXJ0eVVSTH0gICAgICAgICAgSHlwZXJ0eVVSTCAgICAgICAgICAgIGh5cGVydHkKICAgICogQHJldHVybiB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgSHlwZXJ0eVJ1bnRpbWVVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdGVyUEVQJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlclBFUChwb3N0TWVzc2FnZSwgaHlwZXJ0eSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgLy9UT0RPIGNoZWNrIHdoYXQgcGFyYW1ldGVyIGluIHRoZSBwb3N0TWVzc2FnZSB0aGUgcGVwIGlzLgogICAgICAgIF90aGlzLnBlcExpc3RbaHlwZXJ0eV0gPSBwb3N0TWVzc2FnZTsKICAgICAgICByZXNvbHZlKCdQRVAgcmVnaXN0ZXJlZCB3aXRoIHN1Y2Nlc3MnKTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1YgogICAgKiBAcGFyYW0gIHtIeXBlcnR5UnVudGltZVVSTH0gICBIeXBlcnR5UnVudGltZVVSTCAgICAgSHlwZXJ0eVJ1bnRpbWVVUkwKICAgICovCgogIH0sIHsKICAgIGtleTogJ3VucmVnaXN0ZXJQRVAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVnaXN0ZXJQRVAoSHlwZXJ0eVJ1bnRpbWVVUkwpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICB2YXIgcmVzdWx0ID0gX3RoaXMucGVwTGlzdFtIeXBlcnR5UnVudGltZVVSTF07CgogICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgcmVqZWN0KCdQZXAgTm90IGZvdW5kLicpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNvbHZlKCdQRVAgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQuJyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogVG8gcmVjZWl2ZSBzdGF0dXMgZXZlbnRzIGZyb20gY29tcG9uZW50cyByZWdpc3RlcmVkIGluIHRoZSBSZWdpc3RyeS4KICAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgTWVzc2FnZS5NZXNzYWdlICAgICAgIGV2ZW50CiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdvbkV2ZW50JywKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkV2ZW50KGV2ZW50KSB7CiAgICAgIC8vIFRPRE8gYm9keS4uLgogICAgICBjb25zb2xlLmxvZygnb25FdmVudCcpOwogICAgfQoKICAgIC8qKgogICAgKiBUbyBkaXNjb3ZlciBzYW5kYm94ZXMgYXZhaWxhYmxlIGluIHRoZSBydW50aW1lIGZvciBhIGNlcnRhaW4gZG9tYWluLiBSZXF1aXJlZCBieSB0aGUgcnVudGltZSBVQSB0byBhdm9pZCBtb3JlIHRoYW4gb25lIHNhbmRib3ggZm9yIHRoZSBzYW1lIGRvbWFpbi4KICAgICogQHBhcmFtICB7RG9tYWluVVJMfSBEb21haW5VUkwgdXJsCiAgICAqIEByZXR1cm4ge1J1bnRpbWVTYW5kYm94fSAgICAgICAgICAgUnVudGltZVNhbmRib3gKICAgICovCgogIH0sIHsKICAgIGtleTogJ2dldFNhbmRib3gnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNhbmRib3godXJsKSB7CiAgICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciB1cmwgbmVlZGVkJyk7CiAgICAgIGNvbnNvbGUubG9nKCdnZXRTYW5kYm94OiAnLCB1cmwpOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciByZXF1ZXN0ID0gdm9pZCAwOwoKICAgICAgICAvL2ZpcnN0IHRyeSB0byBmaW5kIHRoZSB1cmwgaW4gdGhlIGFwcFNhbmRib3ggbGlzdAogICAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LmFwcFNhbmRib3hbdXJsXTsKCiAgICAgICAgLy9pZiBubyBhcHBTYW5kYm94IHdhcyBmb3VuZCwgdHJ5IHRvIHNlYXJjaCBpbiB0aGUgbm9ybWFsIHNhbmRib3hlcyBsaXN0CiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7CiAgICAgICAgICByZXF1ZXN0ID0gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3VybF07CgogICAgICAgICAgaWYgKCFyZXF1ZXN0KSB7CgogICAgICAgICAgICB2YXIgZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKHVybCkuZG9tYWluOwoKICAgICAgICAgICAgLy8gc2VhcmNoIGluIHRoZSBzYW5kYm94ZXMgbGlzdCBmb3IgYSBlbnRyeSBjb250YWluaW5nIHRoZSBkb21haW4gZ2l2ZW4KICAgICAgICAgICAgZm9yICh2YXIgc2FuZGJveCBpbiBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3gpIHsKICAgICAgICAgICAgICBpZiAoc2FuZGJveC5pbmNsdWRlcyhkb21haW4pKSB7CiAgICAgICAgICAgICAgICByZXF1ZXN0ID0gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3NhbmRib3hdOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoIXJlcXVlc3QpIHsKICAgICAgICAgIHJlamVjdCgnbm8gc2FuZGJveCBmb3VuZCBmb3I6ICcgKyB1cmwpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXNvbHZlKHJlcXVlc3QpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAqIFRvIHZlcmlmeSBpZiBzb3VyY2UgaXMgdmFsaWQgYW5kIHRvIHJlc29sdmUgdGFyZ2V0IHJ1bnRpbWUgdXJsIGFkZHJlc3MgaWYgbmVlZGVkIChlZyBwcm90b3N0dWIgcnVudGltZSB1cmwgaW4gY2FzZSB0aGUgbWVzc2FnZSBpcyB0byBiZSBkaXNwYXRjaGVkIHRvIGEgcmVtb3RlIGVuZHBvaW50KS4KICAgICogQHBhcmFtICB7VVJMLlVSTH0gIHVybCAgICAgICB1cmwKICAgICogQHJldHVybiB7UHJvbWlzZTxVUkwuVVJMPn0gICAgICAgICAgICAgICAgIFByb21pc2UgPFVSTC5VUkw+CiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdyZXNvbHZlJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXNvbHZlKHVybCkgewogICAgICBjb25zb2xlLmxvZygncmVzb2x2ZSAnICsgdXJsKTsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICAvL3NwbGl0IHRoZSB1cmwgdG8gZmluZCB0aGUgZG9tYWluVVJMLiBkZWFscyB3aXRoIHRoZSB1cmwgZm9yIGV4YW1wbGUgYXM6CiAgICAgICAgLy8iaHlwZXJ0eS1ydW50aW1lOi8vc3AxL3Byb3Rvc3R1Yi8xMjMiLAogICAgICAgIHZhciBkaXZpZGVkVVJMID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKHVybCk7CiAgICAgICAgdmFyIGRvbWFpblVybCA9IGRpdmlkZWRVUkwuZG9tYWluOwogICAgICAgIHZhciB0eXBlID0gZGl2aWRlZFVSTC50eXBlOwoKICAgICAgICAvLyByZXNvbHZlIHRoZSBkb21haW4gcHJvdG9zdHViIGluIGNhc2Ugb2YgYSBtZXNzYWdlIHRvIGdsb2JhbCByZWdpc3RyeQogICAgICAgIGlmICh1cmwuaW5jbHVkZXMoJ2dsb2JhbDovL3JlZ2lzdHJ5JykpIHsKICAgICAgICAgIGRvbWFpblVybCA9IF90aGlzLl9kb21haW47CiAgICAgICAgfQoKICAgICAgICBpZiAoIWRvbWFpblVybC5pbmRleE9mKCdtc2ctbm9kZS4nKSB8fCAhZG9tYWluVXJsLmluZGV4T2YoJ3JlZ2lzdHJ5LicpKSB7CiAgICAgICAgICBkb21haW5VcmwgPSBkb21haW5Vcmwuc3Vic3RyaW5nKGRvbWFpblVybC5pbmRleE9mKCcuJykgKyAxKTsKICAgICAgICB9CgogICAgICAgIHZhciByZWdpc3RyZWRDb21wb25lbnQgPSB2b2lkIDA7CiAgICAgICAgaWYgKHR5cGUgPT09ICdkb21haW4taWRwJykgewogICAgICAgICAgcmVnaXN0cmVkQ29tcG9uZW50ID0gX3RoaXMuaWRwUHJveHlMaXN0Lmhhc093blByb3BlcnR5KGRvbWFpblVybCkgPyBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXSA6IGZhbHNlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZWdpc3RyZWRDb21wb25lbnQgPSBfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShkb21haW5VcmwpID8gX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVXJsXSA6IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgaWYgKHJlZ2lzdHJlZENvbXBvbmVudCAmJiByZWdpc3RyZWRDb21wb25lbnQuaGFzT3duUHJvcGVydHkoJ3N0YXR1cycpICYmIHJlZ2lzdHJlZENvbXBvbmVudC5zdGF0dXMgPT09IFNUQVRVUy5ERVBMT1lFRCkgewogICAgICAgICAgY29uc29sZS5pbmZvKCdSZXNvbHZlZDogJywgcmVnaXN0cmVkQ29tcG9uZW50LnVybCk7CiAgICAgICAgICByZXNvbHZlKHJlZ2lzdHJlZENvbXBvbmVudC51cmwpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RvbWFpbi1pZHAnKSB7CiAgICAgICAgICAgIC8vIF90aGlzLnRyaWdnZXIoJ3J1bnRpbWU6bG9hZElkcFByb3h5JywgZG9tYWluVXJsKTsKCiAgICAgICAgICAgIF90aGlzLl9sb2FkZXIubG9hZElkcFByb3h5KGRvbWFpblVybCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgcmVnaXN0cmVkQ29tcG9uZW50ID0gX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVybF07CiAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdSZXNvbHZlZCBJRFBQcm94eTogJywgcmVnaXN0cmVkQ29tcG9uZW50LCByZXN1bHQpOwogICAgICAgICAgICAgIF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdLnN0YXR1cyA9IFNUQVRVUy5ERVBMT1lFRDsKICAgICAgICAgICAgICByZXNvbHZlKHJlZ2lzdHJlZENvbXBvbmVudC51cmwpOwogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzb2x2aW5nIElEUFByb3h5OiAnLCByZWFzb24pOwogICAgICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIF90aGlzLnRyaWdnZXIoJ3J1bnRpbWU6bG9hZFN0dWInLCBkb21haW5VcmwpOwoKICAgICAgICAgICAgX3RoaXMuX2xvYWRlci5sb2FkU3R1Yihkb21haW5VcmwpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgICAgIHJlZ2lzdHJlZENvbXBvbmVudCA9IF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVybF07CiAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCdSZXNvbHZlZCBQcm90b3N0dWI6ICcsIHJlZ2lzdHJlZENvbXBvbmVudCwgcmVzdWx0KTsKICAgICAgICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdLnN0YXR1cyA9IFNUQVRVUy5ERVBMT1lFRDsKICAgICAgICAgICAgICByZXNvbHZlKHJlZ2lzdHJlZENvbXBvbmVudC51cmwpOwogICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzb2x2aW5nIFByb3Rvc3R1YjogJywgcmVhc29uKTsKICAgICAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdsb2FkZXInLAogICAgc2V0OiBmdW5jdGlvbiBzZXQobG9hZGVyKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLl9sb2FkZXIgPSBsb2FkZXI7CiAgICB9LAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHJldHVybiBfdGhpcy5fbG9hZGVyOwogICAgfQoKICAgIC8qKgogICAgKiByZXR1cm4gdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeQogICAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdtZXNzYWdlQnVzJywKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX21lc3NhZ2VCdXM7CiAgICB9CgogICAgLyoqCiAgICAqIFNldCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5CiAgICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXMKICAgICovCiAgICAsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldChtZXNzYWdlQnVzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIF90aGlzLl9tZXNzYWdlQnVzID0gbWVzc2FnZUJ1czsKCiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKF90aGlzLnJlZ2lzdHJ5VVJMLCBmdW5jdGlvbiAobXNnKSB7CgogICAgICAgIHZhciB1c2VyVXJsID0gX3RoaXMuX2dldElkZW50aXR5QXNzb2NpYXRlZChtc2cuYm9keS5yZXNvdXJjZSwgbXNnLmJvZHkuY3JpdGVyaWEpOwoKICAgICAgICB2YXIgcmVwbHkgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB7IHJlc291cmNlOiB1c2VyVXJsIH0gfTsKICAgICAgICByZXBseS5ib2R5LmNvZGUgPSB1c2VyVXJsID8gMjAwIDogNDA0OwoKICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseSk7CiAgICAgIH0pOwoKICAgICAgLy8gYWxzbyBzZXQgdXAgbWVzc2FnZUJ1cyBpbiB0aGUgSWRlbnRpdHlNb2R1bGUgY29tcG9uZW50CiAgICAgIC8vIFRPRE8gcmVkZWZpbmUgYSBiZXR0ZXIgd2F5IHRvIGFkZCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGUgSWRNb2R1bGUKICAgICAgX3RoaXMuaWRNb2R1bGUubWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7CgogICAgICAvLyBJbnN0YWxsIEFkZHJlc3NBbGxvY2F0aW9uCiAgICAgIHZhciBhZGRyZXNzQWxsb2NhdGlvbiA9IG5ldyBfQWRkcmVzc0FsbG9jYXRpb24yLmRlZmF1bHQoX3RoaXMucmVnaXN0cnlVUkwsIG1lc3NhZ2VCdXMsIF90aGlzKTsKICAgICAgX3RoaXMuYWRkcmVzc0FsbG9jYXRpb24gPSBhZGRyZXNzQWxsb2NhdGlvbjsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFJlZ2lzdHJ5Owp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBSZWdpc3RyeTsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vYWxsb2NhdGlvbi9BZGRyZXNzQWxsb2NhdGlvbiI6NDIxLCIuLi91dGlscy91dGlscy5qcyI6NDU3LCIuL0h5cGVydHlJbnN0YW5jZSI6NDQzLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTYsInNlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvTWVzc2FnZUZhY3RvcnkiOjQyMH1dLDQ0NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7CiJ1c2Ugc3RyaWN0IjsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIik7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyIpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoqIENvcHlyaWdodCAyMDE2IElORVNDLUlECiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlCiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KKgoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKKgoqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCioKKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCioqLwovKioKKiAgIEBhdXRob3I6IEdpbCBEaWFzIChnaWwuZGlhc0B0ZWNuaWNvLnVsaXNib2EucHQpCiogICBSZWdpc3RyeSBEYXRhIE1vZGVsIGluY2x1ZGVzIGFsbCBPYmplY3RzIHRvIGJlIGhhbmRsZWQgYnkgdGhlIFJlZ2lzdHJ5IGZ1bmN0aW9uYWxpdHkgaW5jbHVkaW5nCiovCnZhciBSZWdpc3RyeURhdGFNb2RlbCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSZWdpc3RyeURhdGFNb2RlbChpZCwgdXJsLCBkZXNjcmlwdG9yVVJMLCBzdGFydGluZ1RpbWUsIGxhc3RNb2RpZmllZCwgc3RhdHVzLCBzdHVicywgc3R1YnNDb25maWd1cmF0aW9uKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBSZWdpc3RyeURhdGFNb2RlbCk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5faWQgPSBpZDsKICAgIF90aGlzLl91cmwgPSB1cmw7CiAgICBfdGhpcy5fZGVzY3JpcHRvclVSTCA9IGRlc2NyaXB0b3JVUkw7CiAgICBfdGhpcy5fc3RhcnRpbmdUaW1lID0gc3RhcnRpbmdUaW1lOwogICAgX3RoaXMuX2xhc3RNb2RpZmllZCA9IGxhc3RNb2RpZmllZDsKICAgIF90aGlzLl9zdGF0dXMgPSBzdGF0dXM7CiAgICBfdGhpcy5fc3R1YnMgPSBzdHViczsKICAgIF90aGlzLl9zdHVic0NvbmZpZ3VyYXRpb24gPSBzdHVic0NvbmZpZ3VyYXRpb247CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSZWdpc3RyeURhdGFNb2RlbCwgW3sKICAgIGtleTogImlkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gX3RoaXMuX2lkOwogICAgfQogIH0sIHsKICAgIGtleTogInVybCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl91cmw7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVzY3JpcHRvciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yVVJMOwogICAgfQogIH1dKTsKICByZXR1cm4gUmVnaXN0cnlEYXRhTW9kZWw7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IFJlZ2lzdHJ5RGF0YU1vZGVsOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbImRlZmF1bHQiXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2fV0sNDQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIERlc2NyaXB0b3JzID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIERlc2NyaXB0b3JzKHJ1bnRpbWVVUkwsIGNhdGFsb2d1ZSwgcnVudGltZUNvbmZpZ3VyYXRpb24pIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERlc2NyaXB0b3JzKTsKCiAgICBpZiAoIXJ1bnRpbWVVUkwpIHRocm93IEVycm9yKCdUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgdXJsIHRvIGJlIHVzZWQnKTsKICAgIGlmICghY2F0YWxvZ3VlKSB0aHJvdyBFcnJvcignVGhlIGRlc2NyaXB0b3IgbmVlZHMgdGhlIGNhdGFsb2d1ZSBpbnN0YW5jZScpOwogICAgaWYgKCFydW50aW1lQ29uZmlndXJhdGlvbikgdGhyb3cgRXJyb3IoJ1RoZSBkZXNjcmlwdG9yIG5lZWRzIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb24nKTsKCiAgICB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uID0gcnVudGltZUNvbmZpZ3VyYXRpb247CiAgICB0aGlzLnJ1bnRpbWVVUkwgPSBydW50aW1lVVJMOwogICAgdGhpcy5jYXRhbG9ndWUgPSBjYXRhbG9ndWU7CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShEZXNjcmlwdG9ycywgW3sKICAgIGtleTogJ2dldEh5cGVydHlEZXNjcmlwdG9yJywKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRIeXBlcnR5RGVzY3JpcHRvcihoeXBlcnR5VVJMKSB7CiAgICAgIHJldHVybiB0aGlzLmNhdGFsb2d1ZS5nZXRIeXBlcnR5RGVzY3JpcHRvcihoeXBlcnR5VVJMKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdnZXRTdHViRGVzY3JpcHRvcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U3R1YkRlc2NyaXB0b3Ioc3R1YlVSTCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBkaXZpZGVkVVJMID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKHN0dWJVUkwpOwogICAgICAgIHZhciBkb21haW4gPSBkaXZpZGVkVVJMLmRvbWFpbjsKICAgICAgICB2YXIgcHJvdG9zdHViID0gZGl2aWRlZFVSTC5pZGVudGl0eTsKICAgICAgICB2YXIgcHJvdG9TdHViVVJMID0gdm9pZCAwOwoKICAgICAgICB2YXIgb3JpZ2luRGl2aWRlZFVSTCA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShfdGhpcy5ydW50aW1lVVJMKTsKICAgICAgICB2YXIgb3JpZ2luRG9tYWluID0gb3JpZ2luRGl2aWRlZFVSTC5kb21haW47CgogICAgICAgIGlmICghZG9tYWluKSB7CiAgICAgICAgICBkb21haW4gPSBpZHBQcm94eVVSTDsKICAgICAgICB9CgogICAgICAgIGlmICghcHJvdG9zdHViKSB7CiAgICAgICAgICBwcm90b3N0dWIgPSAnZGVmYXVsdCc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHByb3Rvc3R1YiA9IHByb3Rvc3R1Yi5zdWJzdHJpbmcocHJvdG9zdHViLmxhc3RJbmRleE9mKCcvJykgKyAxKTsKICAgICAgICB9CgogICAgICAgIHByb3RvU3R1YlVSTCA9ICgwLCBfdXRpbHMuYnVpbGRVUkwpKF90aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLCAnY2F0YWxvZ3VlVVJMcycsICdwcm90b2NvbHN0dWInLCBwcm90b3N0dWIpOwogICAgICAgIGlmIChkb21haW4gIT09IF90aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLmRvbWFpbikgewogICAgICAgICAgaWYgKCFzdHViVVJMLmluZGV4T2YoJ2h0dHBzJykgfHwgIXN0dWJVUkwuaW5kZXhPZignaHlwZXJ0eS1jYXRhbG9ndWUnKSkgewogICAgICAgICAgICBwcm90b1N0dWJVUkwgPSBzdHViVVJMOwogICAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICAgIC8vIFRPRE86IGNoZWNrIGhvdyB0byBsb2FkIGZvcm0gZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24gZG9tYWluCiAgICAgICAgICAgIHZhciByZXNvdXJjZSA9ICgwLCBfdXRpbHMuZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcykoX3RoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ3Byb3RvY29sc3R1YicpOwogICAgICAgICAgICBwcm90b1N0dWJVUkwgPSByZXNvdXJjZS5wcmVmaXggKyBkb21haW4gKyByZXNvdXJjZS5zdWZmaXggKyBwcm90b3N0dWI7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjb25zb2xlLmxvZygnTG9hZCBQcm90b2NvbFN0dWIgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBwcm90b1N0dWJVUkwpOwogICAgICAgIHJldHVybiBfdGhpcy5jYXRhbG9ndWUuZ2V0U3R1YkRlc2NyaXB0b3IocHJvdG9TdHViVVJMKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKCiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CgogICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yOiAnLCBlcnJvcik7CgogICAgICAgICAgcHJvdG9zdHViID0gZG9tYWluOwogICAgICAgICAgZG9tYWluID0gb3JpZ2luRG9tYWluOwoKICAgICAgICAgIHZhciByZXNvdXJjZSA9ICgwLCBfdXRpbHMuZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcykoX3RoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ3Byb3RvY29sc3R1YicpOwogICAgICAgICAgcHJvdG9TdHViVVJMID0gcmVzb3VyY2UucHJlZml4ICsgZG9tYWluICsgcmVzb3VyY2Uuc3VmZml4ICsgcHJvdG9zdHViOwoKICAgICAgICAgIGNvbnNvbGUubG9nKCdGYWxsYmFjayAtPiBMb2FkIFByb3RvY29sc3R1YiBmb3IgZG9tYWluLCAnICsgZG9tYWluICsgJyA6ICcsIHByb3Rvc3R1Yik7CiAgICAgICAgICByZXR1cm4gX3RoaXMuY2F0YWxvZ3VlLmdldFN0dWJEZXNjcmlwdG9yKHByb3RvU3R1YlVSTCk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldElkcFByb3h5RGVzY3JpcHRvcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBkaXZpZGVkVVJMID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKGlkcFByb3h5VVJMKTsKICAgICAgICB2YXIgZG9tYWluID0gZGl2aWRlZFVSTC5kb21haW47CiAgICAgICAgdmFyIGlkcHByb3h5ID0gZGl2aWRlZFVSTC5pZGVudGl0eTsKCiAgICAgICAgdmFyIG9yaWdpbkRpdmlkZWRVUkwgPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoX3RoaXMyLnJ1bnRpbWVVUkwpOwogICAgICAgIHZhciBvcmlnaW5Eb21haW4gPSBvcmlnaW5EaXZpZGVkVVJMLmRvbWFpbjsKCiAgICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICAgIGRvbWFpbiA9IGlkcFByb3h5VVJMOwogICAgICAgIH0KCiAgICAgICAgaWYgKGRvbWFpbiA9PT0gb3JpZ2luRG9tYWluIHx8ICFpZHBwcm94eSkgewogICAgICAgICAgaWRwcHJveHkgPSAnZGVmYXVsdCc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlkcHByb3h5ID0gaWRwcHJveHkuc3Vic3RyaW5nKGlkcHByb3h5Lmxhc3RJbmRleE9mKCcvJykgKyAxKTsKICAgICAgICB9CgogICAgICAgIHZhciByZXNvdXJjZSA9ICgwLCBfdXRpbHMuZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcykoX3RoaXMyLnJ1bnRpbWVDb25maWd1cmF0aW9uLCAnY2F0YWxvZ3VlVVJMcycsICdpZHBQcm94eScpOwoKICAgICAgICBpZHBQcm94eVVSTCA9IHJlc291cmNlLnByZWZpeCArIGRvbWFpbiArIHJlc291cmNlLnN1ZmZpeCArIGlkcHByb3h5OwogICAgICAgIGNvbnNvbGUubG9nKCdMb2FkIElkcCBQcm94eSBmb3IgZG9tYWluLCAnICsgZG9tYWluICsgJyA6ICcsIGlkcFByb3h5VVJMKTsKICAgICAgICByZXR1cm4gX3RoaXMyLmNhdGFsb2d1ZS5nZXRJZHBQcm94eURlc2NyaXB0b3IoaWRwUHJveHlVUkwpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewoKICAgICAgICAgIHJlc29sdmUocmVzdWx0KTsKICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7CgogICAgICAgICAgaWRwcHJveHkgPSBkb21haW47CiAgICAgICAgICBkb21haW4gPSBvcmlnaW5Eb21haW47CgogICAgICAgICAgaWRwUHJveHlVUkwgPSAoMCwgX3V0aWxzLmJ1aWxkVVJMKShfdGhpczIucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ2lkcFByb3h5JywgaWRwcHJveHkpOwoKICAgICAgICAgIGNvbnNvbGUubG9nKCdMb2FkIElkcCBQcm94eSBmb3IgZG9tYWluLCAnICsgZG9tYWluICsgJyA6ICcsIGlkcFByb3h5VVJMKTsKICAgICAgICAgIHJldHVybiBfdGhpczIuY2F0YWxvZ3VlLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH1dKTsKICByZXR1cm4gRGVzY3JpcHRvcnM7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IERlc2NyaXB0b3JzOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi91dGlscy91dGlscyI6NDU3LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTZ9XSw0NDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduJyk7Cgp2YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7Cgp2YXIgX0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnLi9EZXNjcmlwdG9ycycpOwoKdmFyIF9EZXNjcmlwdG9yczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EZXNjcmlwdG9ycyk7Cgp2YXIgX0FkZHJlc3NBbGxvY2F0aW9uID0gcmVxdWlyZSgnLi4vYWxsb2NhdGlvbi9BZGRyZXNzQWxsb2NhdGlvbicpOwoKdmFyIF9BZGRyZXNzQWxsb2NhdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BZGRyZXNzQWxsb2NhdGlvbik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIExvYWRlciA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBMb2FkZXIocnVudGltZUNvbmZpZ3VyYXRpb24pIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIExvYWRlcik7CgogICAgaWYgKCFydW50aW1lQ29uZmlndXJhdGlvbikgdGhyb3cgRXJyb3IoJ1RoZSBkZXNjcmlwdG9yIG5lZWQgdG8ga25vdyB0aGUgcnVudGltZSBjb25maWd1cmF0aW9uJyk7CiAgICB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uID0gcnVudGltZUNvbmZpZ3VyYXRpb247CiAgfQoKICAvKioKICAgKiBTZXQgcnVudGltZSB1cmwKICAgKiBAcGFyYW0gIHtzdHJpbmd9IHZhbHVlIHJ1bnRpbWVVUkwKICAgKi8KCgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKExvYWRlciwgW3sKICAgIGtleTogJ2xvYWRIeXBlcnR5JywKCgogICAgLyoqCiAgICAqIERlcGxveSBIeXBlcnR5IGZyb20gQ2F0YWxvZ3VlIFVSTAogICAgKiBAcGFyYW0gIHtVUkwuSHlwZXJ0eUNhdGFsb2d1ZVVSTH0gICAgaHlwZXJ0eSBoeXBlcnR5RGVzY3JpcHRvciB1cmw7CiAgICAqLwogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRIeXBlcnR5KGh5cGVydHlEZXNjcmlwdG9yVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlOwogICAgICBpZiAoIWh5cGVydHlEZXNjcmlwdG9yVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ0h5cGVydHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIHZhciBfaHlwZXJ0eVVSTCA9IHZvaWQgMDsKICAgICAgICB2YXIgX2h5cGVydHlTYW5kYm94ID0gdm9pZCAwOwogICAgICAgIHZhciBfaHlwZXJ0eURlc2NyaXB0b3IgPSB2b2lkIDA7CiAgICAgICAgdmFyIF9oeXBlcnR5U291cmNlUGFja2FnZSA9IHZvaWQgMDsKICAgICAgICB2YXIgaGF2ZUVycm9yID0gZmFsc2U7CgogICAgICAgIHZhciBlcnJvclJlYXNvbiA9IGZ1bmN0aW9uIGVycm9yUmVhc29uKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IGh5cGVydHk6ICcsIHJlYXNvbik7CiAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICB9OwoKICAgICAgICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcihyZWFzb24pIHsKICAgICAgICAgIGhhdmVFcnJvciA9IHRydWU7CiAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICB9OwoKICAgICAgICAvLyBHZXQgSHlwZXJ0eSBkZXNjcmlwdG9yCiAgICAgICAgLy8gVE9ETzogdGhlIHJlcXVlc3QgTW9kdWxlIHNob3VsZCBiZSBjaGFuZ2VkLAogICAgICAgIC8vIGJlY2F1c2UgYXQgdGhpcyBtb21lbnQgaXQgaXMgaW5jb21wYXRpYmxlIHdpdGggbm9kZWpzOwogICAgICAgIC8vIFByb2JhYmx5IHdlIG5lZWQgdG8gcGFzcyBhIGZhY3RvcnkgbGlrZSB3ZSBkbyBmb3Igc2FuZGJveGVzOwogICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tIEh5cGVydHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7CiAgICAgICAgY29uc29sZS5pbmZvKCdHZXQgaHlwZXJ0eSBkZXNjcmlwdG9yIGZvciA6JywgaHlwZXJ0eURlc2NyaXB0b3JVUkwpOwogICAgICAgIHJldHVybiBfdGhpcy5kZXNjcmlwdG9ycy5nZXRIeXBlcnR5RGVzY3JpcHRvcihoeXBlcnR5RGVzY3JpcHRvclVSTCkudGhlbihmdW5jdGlvbiAoaHlwZXJ0eURlc2NyaXB0b3IpIHsKICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgY29tcGxldGVkICJzdGVwIDIgYW5kIDMiIGFzIHNob3duIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQKICAgICAgICAgIGNvbnNvbGUuaW5mbygnMTogcmV0dXJuIGh5cGVydHkgZGVzY3JpcHRvcicpOwoKICAgICAgICAgIC8vIGh5cGVydHkgY29udGFpbnMgdGhlIGZ1bGwgcGF0aCBvZiB0aGUgY2F0YWxvZ3VlIFVSTCwgZS5nLgogICAgICAgICAgLy8gY2F0YWxvZ3VlLnJldGhpbmsuZXUvLndlbGwta25vd24vLi4uLi4uLi4uLgogICAgICAgICAgX2h5cGVydHlEZXNjcmlwdG9yID0gaHlwZXJ0eURlc2NyaXB0b3I7CgogICAgICAgICAgdmFyIHNvdXJjZVBhY2thZ2VVUkwgPSBoeXBlcnR5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMOwoKICAgICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7CiAgICAgICAgICAgIHJldHVybiBoeXBlcnR5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIEdldCB0aGUgaHlwZXJ0eSBzb3VyY2UgY29kZQogICAgICAgICAgcmV0dXJuIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0U291cmNlUGFja2FnZUZyb21VUkwoc291cmNlUGFja2FnZVVSTCk7CiAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKHNvdXJjZVBhY2thZ2UpIHsKICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKCiAgICAgICAgICBjb25zb2xlLmluZm8oJzI6IHJldHVybiBoeXBlcnR5IHNvdXJjZSBjb2RlJyk7CgogICAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb21wbGV0ZWQgInN0ZXAgNCBhbmQgNSIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZAoKICAgICAgICAgIF9oeXBlcnR5U291cmNlUGFja2FnZSA9IHNvdXJjZVBhY2thZ2U7CgogICAgICAgICAgLy8KICAgICAgICAgIC8vIHN0ZXBzIDYgLS0gOSBhcmUgc2tpcHBlZC4KICAgICAgICAgIC8vIFRPRE86IG9uIHJlbGVhc2Ugb2YgY29yZSAwLjI7CiAgICAgICAgICAvLyBUT0RPOiBQcm9taXNlIHRvIGNoZWNrIHRoZSBwb2xpY3kgZW5naW5lCgogICAgICAgICAgLy8gbW9jay11cCBjb2RlOwogICAgICAgICAgLy8gdGVtcG9yYXJ5IGNvZGUsIG9ubHkKICAgICAgICAgIHZhciBwb2xpY3kgPSB0cnVlOwoKICAgICAgICAgIHJldHVybiBwb2xpY3k7CiAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKHBvbGljeVJlc3VsdCkgewogICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgY29uc29sZS5pbmZvKCczOiByZXR1cm4gcG9saWN5IGVuZ2luZSByZXN1bHQnICsgcG9saWN5UmVzdWx0KTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDYgdG8gOSBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy4KICAgICAgICAgIC8vCiAgICAgICAgICAvLyBTdGVwcyA2IC0tIDkKICAgICAgICAgIC8vIEFzIGEgcmVzdWx0IG9mIHRoZSBzaXBwZWQgc3RlcHMsIHdlIGtub3cgYXQgdGhpcyBwb2ludCBpZiB3ZSBleGVjdXRlCiAgICAgICAgICAvLyBpblNhbWVTYW5kYm94IG9yIG5vdC4KICAgICAgICAgIC8vCgogICAgICAgICAgLy8gRm9yIHRlc3RpbmcsIGp1c3QgYXNzdW1lIHdlIGV4ZWN1dGUgaW4gc2FtZSBTYW5kYm94LgogICAgICAgICAgdmFyIGluU2FtZVNhbmRib3ggPSB0cnVlOwogICAgICAgICAgdmFyIHNhbmRib3ggPSB2b2lkIDA7CgogICAgICAgICAgaWYgKGluU2FtZVNhbmRib3gpIHsKCiAgICAgICAgICAgIC8vIHRoaXMgZG9uJ3QgbmVlZCBiZSBhIFByb21pc2U7CiAgICAgICAgICAgIHNhbmRib3ggPSBfdGhpcy5yZWdpc3RyeS5nZXRBcHBTYW5kYm94KCk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDExIGhlcmUuCiAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgdmFyIGRvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShoeXBlcnR5RGVzY3JpcHRvclVSTCkuZG9tYWluOwoKICAgICAgICAgICAgLy8gZ2V0U2FuZGJveCwgdGhpcyB3aWxsIHJldHVybiBhIHByb21pc2U7CiAgICAgICAgICAgIHNhbmRib3ggPSBfdGhpcy5yZWdpc3RyeS5nZXRTYW5kYm94KGRvbWFpbik7CiAgICAgICAgICB9CgogICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94OwogICAgICAgICAgcmV0dXJuIHNhbmRib3g7CiAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKHNhbmRib3gpIHsKICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnNDogcmV0dXJuIHRoZSBzYW5kYm94Jywgc2FuZGJveCk7CgogICAgICAgICAgLy8gUmV0dXJuIHRoZSBzYW5kYm94IGluZGVwZW50ZWx5IGlmIGl0IHJ1bm5pbmcgaW4gdGhlIHNhbWUgc2FuZGJveCBvciBub3QKICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTQgaGVyZS4KICAgICAgICAgIHJldHVybiBzYW5kYm94OwogICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJzQuMTogVHJ5IHRvIHJlZ2lzdGVyIGEgbmV3IHNhbmRib3gnKTsKCiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBoeXBlcnR5IGRlc2NyaXB0b3IgdXJsOwogICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eAogICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFNhbmRib3gKICAgICAgICAgIHZhciBzYW5kYm94ID0gX3RoaXMuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goKTsKCiAgICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICByZXR1cm4gc2FuZGJveDsKICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAoc2FuZGJveCkgewogICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgY29uc29sZS5pbmZvKCc1OiByZXR1cm4gc2FuZGJveCBhbmQgcmVnaXN0ZXInKTsKCiAgICAgICAgICBfaHlwZXJ0eVNhbmRib3ggPSBzYW5kYm94OwoKICAgICAgICAgIHZhciBudW1iZXJPZkFkZHJlc3NlcyA9IDE7CiAgICAgICAgICByZXR1cm4gX3RoaXMuX2FkZHJlc3NBbGxvY2F0aW9uLmNyZWF0ZShfdGhpcy5fcmVnaXN0cnkuX2RvbWFpbiwgbnVtYmVyT2ZBZGRyZXNzZXMsIF9oeXBlcnR5RGVzY3JpcHRvciwgJ2h5cGVydHknKTsKICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAoYWRkcmVzc2VzKSB7CiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICBjb25zb2xlLmluZm8oJzY6IHJldHVybiB0aGUgYWRkcmVzc2VzIGZvciB0aGUgaHlwZXJ0eScpOwoKICAgICAgICAgIC8vIFJlZ2lzdGVyIGh5cGVydHkKICAgICAgICAgIHJldHVybiBfdGhpcy5yZWdpc3RyeS5yZWdpc3Rlckh5cGVydHkoX2h5cGVydHlTYW5kYm94LCBoeXBlcnR5RGVzY3JpcHRvclVSTCwgX2h5cGVydHlEZXNjcmlwdG9yLCBhZGRyZXNzZXMpOwogICAgICAgIH0sIGhhbmRsZUVycm9yKS50aGVuKGZ1bmN0aW9uIChoeXBlcnR5VVJMKSB7CiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICBjb25zb2xlLmluZm8oJzc6IEh5cGVydHkgdXJsLCBhZnRlciByZWdpc3RlciBoeXBlcnR5JywgaHlwZXJ0eVVSTCk7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxNiBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy4KICAgICAgICAgIF9oeXBlcnR5VVJMID0gaHlwZXJ0eVVSTDsKCiAgICAgICAgICAvLyBFeHRlbmQgb3JpZ2luYWwgaHlwZXJ0eSBjb25maWd1cmF0aW9uOwogICAgICAgICAgdmFyIGNvbmZpZ3VyYXRpb24gPSB7fTsKICAgICAgICAgIGlmICghKDAsIF91dGlscy5lbXB0eU9iamVjdCkoX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9ICgwLCBfYXNzaWduMi5kZWZhdWx0KSh7fSwgSlNPTi5wYXJzZShfaHlwZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9oeXBlcnR5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSBfdGhpcy5fcnVudGltZVVSTDsKCiAgICAgICAgICAvLyBXZSB3aWxsIGRlcGxveSB0aGUgY29tcG9uZW50IC0gc3RlcCAxNyBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy4KCiAgICAgICAgICB0cnkgewogICAgICAgICAgICByZXR1cm4gX2h5cGVydHlTYW5kYm94LmRlcGxveUNvbXBvbmVudChfaHlwZXJ0eVNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgX2h5cGVydHlVUkwsIGNvbmZpZ3VyYXRpb24pOwogICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpOwogICAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgICB9CiAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKGRlcGxveUNvbXBvbmVudFN0YXR1cykgewogICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgY29uc29sZS5pbmZvKCc4OiBEZXBsb3kgY29tcG9uZW50IHN0YXR1cyBmb3IgaHlwZXJ0eTogJywgZGVwbG95Q29tcG9uZW50U3RhdHVzKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDE5IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgoKICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXIgdG8gdGhlIGFwcFNhbmRib3ggb3IgaHlwZXJ0U2FuZGJveDsKICAgICAgICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX2h5cGVydHlVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgX2h5cGVydHlTYW5kYm94LnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICB9KTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIwIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgdmFyIGh5cGVydHkgPSB7CiAgICAgICAgICAgIHJ1bnRpbWVIeXBlcnR5VVJMOiBfaHlwZXJ0eVVSTCwKICAgICAgICAgICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXMKICAgICAgICAgIH07CgogICAgICAgICAgcmVzb2x2ZShoeXBlcnR5KTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIxIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LgogICAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpOwogICAgICAgIH0sIGhhbmRsZUVycm9yKS5jYXRjaChlcnJvclJlYXNvbik7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBEZXBsb3kgU3R1YiBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybAogICAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpbgogICAgKi8KCiAgfSwgewogICAga2V5OiAnbG9hZFN0dWInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRTdHViKHByb3Rvc3R1YlVSTCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5fcmVhZHlUb1VzZSgpKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmICghcHJvdG9zdHViVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1Byb3RvU3R1YiBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGRvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShwcm90b3N0dWJVUkwpLmRvbWFpbjsKCiAgICAgICAgaWYgKCFkb21haW4pIHsKICAgICAgICAgIGRvbWFpbiA9IHByb3Rvc3R1YlVSTDsKICAgICAgICB9CgogICAgICAgIHZhciBfc3R1YlNhbmRib3ggPSB2b2lkIDA7CiAgICAgICAgdmFyIF9zdHViRGVzY3JpcHRvciA9IHZvaWQgMDsKICAgICAgICB2YXIgX3J1bnRpbWVQcm90b1N0dWJVUkwgPSB2b2lkIDA7CiAgICAgICAgdmFyIF9zdHViU291cmNlUGFja2FnZSA9IHZvaWQgMDsKICAgICAgICB2YXIgaGF2ZUVycm9yID0gZmFsc2U7CgogICAgICAgIHZhciBlcnJvclJlYXNvbiA9IGZ1bmN0aW9uIGVycm9yUmVhc29uKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIHByb3RvY29sc3R1YjogJywgcmVhc29uKTsKICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgIH07CgogICAgICAgIHZhciBoYW5kbGVFcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKHJlYXNvbikgewogICAgICAgICAgaGF2ZUVycm9yID0gdHJ1ZTsKICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgIH07CgogICAgICAgIC8vIERpc2NvdmVyIFByb3RvY29sIFN0dWIKICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gUHJvdG9TdHViIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgY29uc29sZS5pbmZvKCdEaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgUHJvdG9TdHViIGZvciBkb21haW46ICcsIGRvbWFpbik7CiAgICAgICAgX3RoaXMyLnJlZ2lzdHJ5LmRpc2NvdmVyUHJvdG9zdHViKGRvbWFpbikudGhlbihmdW5jdGlvbiAocnVudGltZVByb3RvU3R1YlVSTCkgewogICAgICAgICAgLy8gSXMgcmVnaXN0ZWQ/CiAgICAgICAgICBjb25zb2xlLmluZm8oJzEuIFByb3RvIFN0dWIgRGlzY292ZXJlZCBmb3IgJywgZG9tYWluLCAnOiAnLCBydW50aW1lUHJvdG9TdHViVVJMKTsKCiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlIHN0YXR1cyBpcyBzYXZlZCBpbiB0aGUgc3RhdHVzIG9mIHNhbmRib3g7CiAgICAgICAgICAvLyBsZXQgc3R1YiA9IHsKICAgICAgICAgIC8vICAgcnVudGltZVByb3RvU3R1YlVSTDogcnVudGltZVByb3RvU3R1YlVSTCwKICAgICAgICAgIC8vICAgc3RhdHVzOiAnZGVwbG95ZWQnCiAgICAgICAgICAvLyB9OwogICAgICAgICAgdmFyIHN0dWIgPSBfdGhpczIucmVnaXN0cnkucHJvdG9zdHVic0xpc3RbZG9tYWluXTsKICAgICAgICAgIHJlc29sdmUoc3R1Yik7CiAgICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuJyk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewoKICAgICAgICAgIC8vIGlzIG5vdCByZWdpc3RlZD8KICAgICAgICAgIGNvbnNvbGUuaW5mbygnMS4gUHJvdG8gU3R1YiBub3QgZm91bmQgJyArIHJlYXNvbik7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBkZXNjcmlwdG9yIHN0ZXAgNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgIF90aGlzMi5kZXNjcmlwdG9ycy5nZXRTdHViRGVzY3JpcHRvcihwcm90b3N0dWJVUkwpLnRoZW4oZnVuY3Rpb24gKHN0dWJEZXNjcmlwdG9yKSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCcyLiByZXR1cm4gdGhlIFByb3RvU3R1YiBkZXNjcmlwdG9yJyk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIF9zdHViRGVzY3JpcHRvciA9IHN0dWJEZXNjcmlwdG9yOwoKICAgICAgICAgICAgdmFyIHNvdXJjZVBhY2thZ2VVUkwgPSBzdHViRGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMOwoKICAgICAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHsKICAgICAgICAgICAgICByZXR1cm4gc3R1YkRlc2NyaXB0b3Iuc291cmNlUGFja2FnZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIFNvdXJjZSBjb2RlIGZyb20gZGVzY3JpcHRvciAtIHN0ZXAgNiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5ydW50aW1lQ2F0YWxvZ3VlLmdldFNvdXJjZVBhY2thZ2VGcm9tVVJMKHNvdXJjZVBhY2thZ2VVUkwpOwogICAgICAgICAgfSwgaGFuZGxlRXJyb3IpLmNhdGNoKGVycm9yUmVhc29uKS50aGVuKGZ1bmN0aW9uIChzdHViU291cmNlUGFja2FnZSkgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnMy4gcmV0dXJuIHRoZSBQcm90b1N0dWIgU291cmNlIENvZGUnKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9zdHViU291cmNlUGFja2FnZSA9IHN0dWJTb3VyY2VQYWNrYWdlOwoKICAgICAgICAgICAgLy8gVE9ETzogQ2hlY2sgb24gUEVQIChwb2xpY3kgRW5naW5lKSBpZiB3ZSBuZWVkIHRoZSBzYW5kYm94IGFuZCBjaGVjayBpZiB0aGUgU2FuZGJveCBGYWN0b3J5IGhhdmUgdGhlIGNvbnRleHQgc2FuZGJveDsKICAgICAgICAgICAgdmFyIHBvbGljeSA9IHRydWU7CiAgICAgICAgICAgIHJldHVybiBwb2xpY3k7CiAgICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAocG9saWN5KSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKCiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNhbmRib3ggb3Igb25lIHByb21pc2UgdG8gZ2V0U2FuZGJveDsKICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5yZWdpc3RyeS5nZXRTYW5kYm94KGRvbWFpbik7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzdHViU2FuZGJveCkgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNC4gaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZXJlZCB0aGVuIHJldHVybiB0aGUgc2FuZGJveCAnLCBzdHViU2FuZGJveCk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIF9zdHViU2FuZGJveCA9IHN0dWJTYW5kYm94OwogICAgICAgICAgICByZXR1cm4gc3R1YlNhbmRib3g7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc1LiBTYW5kYm94IHdhcyBub3QgZm91bmQsIGNyZWF0aW5nIGEgbmV3IG9uZSAnLCByZWFzb24pOwoKICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZWQgZm9yIHRoaXMgc3R1YiBkZXNjcmlwdG9yIHVybDsKICAgICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eAogICAgICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgU2FuZGJveAogICAgICAgICAgICB2YXIgc2FuZGJveCA9IF90aGlzMi5fcnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveCgpOwogICAgICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgIF90aGlzMi5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIHNhbmRib3g7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzYW5kYm94KSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc2LiByZXR1cm4gdGhlIHNhbmRib3ggaW5zdGFuY2UgYW5kIHJlZ2lzdGVyJywgc2FuZGJveCwgJ3RvIGRvbWFpbiAnLCBkb21haW4pOwoKICAgICAgICAgICAgX3N0dWJTYW5kYm94ID0gc2FuZGJveDsKCiAgICAgICAgICAgIC8vIHdlIG5lZWQgcmVnaXN0ZXIgc3R1YiBvbiByZWdpc3RyeSAtIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAogICAgICAgICAgICByZXR1cm4gX3RoaXMyLnJlZ2lzdHJ5LnJlZ2lzdGVyU3R1Yihfc3R1YlNhbmRib3gsIGRvbWFpbik7CiAgICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAocnVudGltZVByb3RvU3R1YlVSTCkgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnNy4gcmV0dXJuIHRoZSBydW50aW1lIHByb3Rvc3R1YiB1cmw6ICcsIHJ1bnRpbWVQcm90b1N0dWJVUkwpOwoKICAgICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgICBfcnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7CgogICAgICAgICAgICAvLyBFeHRlbmQgb3JpZ2luYWwgaHlwZXJ0eSBjb25maWd1cmF0aW9uOwogICAgICAgICAgICB2YXIgY29uZmlndXJhdGlvbiA9IHt9OwogICAgICAgICAgICBpZiAoISgwLCBfdXRpbHMuZW1wdHlPYmplY3QpKF9zdHViRGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSkgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCBKU09OLnBhcnNlKF9zdHViRGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9zdHViRGVzY3JpcHRvci5jb25maWd1cmF0aW9uOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uZmlndXJhdGlvbi5ydW50aW1lVVJMID0gX3RoaXMyLl9ydW50aW1lVVJMOwoKICAgICAgICAgICAgLy8gRGVwbG95IENvbXBvbmVudCBzdGVwIHh4eAogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgIHJldHVybiBfc3R1YlNhbmRib3guZGVwbG95Q29tcG9uZW50KF9zdHViU291cmNlUGFja2FnZS5zb3VyY2VDb2RlLCBydW50aW1lUHJvdG9TdHViVVJMLCBjb25maWd1cmF0aW9uKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG9uIGRlcGxveSBjb21wb25lbnQ6JywgZSk7CiAgICAgICAgICAgICAgcmVqZWN0KGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAoZGVwbG95Q29tcG9uZW50U3RhdHVzKSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc4OiByZXR1cm4gZGVwbG95IGNvbXBvbmVudCBmb3Igc2FuZGJveCBzdGF0dXM6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXIKICAgICAgICAgICAgX3RoaXMyLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3J1bnRpbWVQcm90b1N0dWJVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICBfc3R1YlNhbmRib3gucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgdmFyIHN0dWIgPSBfdGhpczIucmVnaXN0cnkucHJvdG9zdHVic0xpc3RbZG9tYWluXTsKCiAgICAgICAgICAgIC8vIC8vIExvYWQgU3R1YiBmdW5jdGlvbiByZXNvbHZlZCB3aXRoIHN1Y2Nlc3M7CiAgICAgICAgICAgIC8vIGxldCBzdHViID0gewogICAgICAgICAgICAvLyAgIHJ1bnRpbWVQcm90b1N0dWJVUkw6IF9ydW50aW1lUHJvdG9TdHViVVJMLAogICAgICAgICAgICAvLyAgIHN0YXR1czogZGVwbG95Q29tcG9uZW50U3RhdHVzCiAgICAgICAgICAgIC8vIH07CgogICAgICAgICAgICBjb25zb2xlLmxvZygnRGVwbG95ZWQ6ICcsIHN0dWIsIGRvbWFpbiwgX3RoaXMyLnJlZ2lzdHJ5LnByb3Rvc3R1YnNMaXN0KTsKCiAgICAgICAgICAgIHJlc29sdmUoc3R1Yik7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4nKTsKICAgICAgICAgIH0sIGhhbmRsZUVycm9yKS5jYXRjaChlcnJvclJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBEZXBsb3kgaWRwUHJveHkgZnJvbSBDYXRhbG9ndWUgVVJMIG9yIGRvbWFpbiB1cmwKICAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW4KICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvYWRJZHBQcm94eScsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZElkcFByb3h5KGlkcFByb3h5VVJMKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLl9yZWFkeVRvVXNlKCkpIHJldHVybiBmYWxzZTsKICAgICAgaWYgKCFpZHBQcm94eVVSTCkgdGhyb3cgbmV3IEVycm9yKCdJZHBQcm94eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdmFyIGRvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShpZHBQcm94eVVSTCkuZG9tYWluOwoKICAgICAgICBpZiAoIWRvbWFpbikgewogICAgICAgICAgZG9tYWluID0gaWRwUHJveHlVUkw7CiAgICAgICAgfQoKICAgICAgICB2YXIgX3Byb3h5U2FuZGJveCA9IHZvaWQgMDsKICAgICAgICB2YXIgX3Byb3h5RGVzY3JpcHRvciA9IHZvaWQgMDsKICAgICAgICB2YXIgX3J1bnRpbWVJZHBQcm94eVVSTCA9IHZvaWQgMDsKICAgICAgICB2YXIgX3Byb3h5U291cmNlUGFja2FnZSA9IHZvaWQgMDsKICAgICAgICB2YXIgaGF2ZUVycm9yID0gZmFsc2U7CgogICAgICAgIHZhciBlcnJvclJlYXNvbiA9IGZ1bmN0aW9uIGVycm9yUmVhc29uKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5lcnJvcignU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIElkcFByb3h5OiAnLCByZWFzb24pOwogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfTsKCiAgICAgICAgdmFyIGhhbmRsZUVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IocmVhc29uKSB7CiAgICAgICAgICBoYXZlRXJyb3IgPSB0cnVlOwogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfTsKCiAgICAgICAgLy8gRGlzY292ZXIgSURQUHJveHkKICAgICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gSURQIFByb3h5IERlcGxveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbicpOwogICAgICAgIGNvbnNvbGUuaW5mbygnRGlzY292ZXIgb3IgQ3JlYXRlIGEgbmV3IElkcFByb3h5IGZvciBkb21haW4vVVJMOiAnLCBkb21haW4pOwogICAgICAgIHJldHVybiBfdGhpczMucmVnaXN0cnkuZGlzY292ZXJJZHBQcm94eShkb21haW4pLnRoZW4oZnVuY3Rpb24gKHJ1bnRpbWVJZHBQcm94eVVSTCkgewogICAgICAgICAgLy8gSXMgcmVnaXN0ZWQ/CiAgICAgICAgICBjb25zb2xlLmluZm8oJzEuIElEUFByb3h5IERpc2NvdmVyZWQ6ICcsIHJ1bnRpbWVJZHBQcm94eVVSTCk7CgogICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAyIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgIHZhciBpZHBQcm94eSA9IF90aGlzMy5yZWdpc3RyeS5pZHBQcm94eUxpc3RbZG9tYWluXTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdEZXBsb3llZDogJywgaWRwUHJveHkpOwoKICAgICAgICAgIHJlc29sdmUoaWRwUHJveHkpOwogICAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbicpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKCiAgICAgICAgICAvLyBpcyBub3QgcmVnaXN0ZWQ/CiAgICAgICAgICBjb25zb2xlLmluZm8oJzEuIElkcFByb3h5IG5vdCBmb3VuZDonLCByZWFzb24pOwoKICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKCiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGdldCBQcm90b1N0dWIgZGVzY3JpcHRvciBzdGVwIDQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICBfdGhpczMuZGVzY3JpcHRvcnMuZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKS50aGVuKGZ1bmN0aW9uIChwcm94eURlc2NyaXB0b3IpIHsKCiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnMi4gUmV0dXJuIHRoZSBJRFBQcm94eSBkZXNjcmlwdG9yJyk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIF9wcm94eURlc2NyaXB0b3IgPSBwcm94eURlc2NyaXB0b3I7CgogICAgICAgICAgICB2YXIgc291cmNlUGFja2FnZVVSTCA9IHByb3h5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMOwoKICAgICAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHsKICAgICAgICAgICAgICByZXR1cm4gcHJveHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBTb3VyY2UgY29kZSBmcm9tIGRlc2NyaXB0b3IgLSBzdGVwIDYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCiAgICAgICAgICAgIHJldHVybiBfdGhpczMucnVudGltZUNhdGFsb2d1ZS5nZXRTb3VyY2VQYWNrYWdlRnJvbVVSTChzb3VyY2VQYWNrYWdlVVJMKTsKICAgICAgICAgIH0sIGhhbmRsZUVycm9yKS50aGVuKGZ1bmN0aW9uIChzb3VyY2VQYWNrYWdlKSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCczLiByZXR1cm4gdGhlIElEUFByb3h5IHNvdXJjZSBwYWNrYWdlJyk7CgogICAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDcgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kCgogICAgICAgICAgICBfcHJveHlTb3VyY2VQYWNrYWdlID0gc291cmNlUGFja2FnZTsKCiAgICAgICAgICAgIC8vIFRPRE86IENoZWNrIG9uIFBFUCAocG9saWN5IEVuZ2luZSkgaWYgd2UgbmVlZCB0aGUgc2FuZGJveCBhbmQgY2hlY2sgaWYgdGhlIFNhbmRib3ggRmFjdG9yeSBoYXZlIHRoZSBjb250ZXh0IHNhbmRib3g7CiAgICAgICAgICAgIHZhciBwb2xpY3kgPSB0cnVlOwogICAgICAgICAgICByZXR1cm4gcG9saWN5OwogICAgICAgICAgfSwgaGFuZGxlRXJyb3IpLnRoZW4oZnVuY3Rpb24gKHBvbGljeSkgewogICAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7CgogICAgICAgICAgICAvLyB0aGlzIHdpbGwgcmV0dXJuIHRoZSBzYW5kYm94IG9yIG9uZSBwcm9taXNlIHRvIGdldFNhbmRib3g7CiAgICAgICAgICAgIHJldHVybiBfdGhpczMucmVnaXN0cnkuZ2V0U2FuZGJveChkb21haW4pOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocHJveHlTYW5kYm94KSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc0LiBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlcmVkIHRoZW4gcmV0dXJuIHRoZSBzYW5kYm94JywgcHJveHlTYW5kYm94KTsKCiAgICAgICAgICAgIF9wcm94eVNhbmRib3ggPSBwcm94eVNhbmRib3g7CiAgICAgICAgICAgIHJldHVybiBwcm94eVNhbmRib3g7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc1LiBTYW5kYm94IHdhcyBub3QgZm91bmQsIGNyZWF0aW5nIGEgbmV3IG9uZScsIHJlYXNvbik7CgogICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBwcm94eSBkZXNjcmlwdG9yIHVybDsKICAgICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eAogICAgICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgU2FuZGJveAogICAgICAgICAgICB2YXIgc2FuZGJveCA9IF90aGlzMy5fcnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveCgpOwogICAgICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgIF90aGlzMy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmV0dXJuIHNhbmRib3g7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzYW5kYm94KSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc2LiByZXR1cm4gdGhlIHNhbmRib3ggaW5zdGFuY2UgYW5kIHJlZ2lzdGVyJywgc2FuZGJveCwgJ3RvIGRvbWFpbiAnLCBkb21haW4pOwoKICAgICAgICAgICAgX3Byb3h5U2FuZGJveCA9IHNhbmRib3g7CgogICAgICAgICAgICAvLyB3ZSBuZWVkIHJlZ2lzdGVyIHN0dWIgb24gcmVnaXN0cnkgLSBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWQKICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5yZWdpc3RyeS5yZWdpc3RlcklkcFByb3h5KHNhbmRib3gsIGRvbWFpbik7CiAgICAgICAgICB9LCBoYW5kbGVFcnJvcikudGhlbihmdW5jdGlvbiAocnVudGltZUlkcFByb3h5VVJMKSB7CiAgICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgY29uc29sZS5pbmZvKCc3LiBSZXR1cm4gdGhlIHJ1bnRpbWUgSWRwIFByb3h5IFVSTDogJywgcnVudGltZUlkcFByb3h5VVJMKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgICAgX3J1bnRpbWVJZHBQcm94eVVSTCA9IHJ1bnRpbWVJZHBQcm94eVVSTDsKCiAgICAgICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgIHZhciBjb25maWd1cmF0aW9uID0ge307CiAgICAgICAgICAgIGlmICghKDAsIF91dGlscy5lbXB0eU9iamVjdCkoX3Byb3h5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSkgewogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gKDAsIF9hc3NpZ24yLmRlZmF1bHQpKHt9LCBKU09OLnBhcnNlKF9wcm94eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpOwogICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCA9IF90aGlzMy5fcnVudGltZVVSTDsKCiAgICAgICAgICAgIC8vIERlcGxveSBDb21wb25lbnQgc3RlcCB4eHgKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICByZXR1cm4gX3Byb3h5U2FuZGJveC5kZXBsb3lDb21wb25lbnQoX3Byb3h5U291cmNlUGFja2FnZS5zb3VyY2VDb2RlLCBydW50aW1lSWRwUHJveHlVUkwsIGNvbmZpZ3VyYXRpb24pOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb24gZGVwbG95IGNvbXBvbmVudDonLCBlKTsKICAgICAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIGhhbmRsZUVycm9yKS50aGVuKGZ1bmN0aW9uIChkZXBsb3lDb21wb25lbnRTdGF0dXMpIHsKICAgICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBjb25zb2xlLmluZm8oJzg6IHJldHVybiBkZXBsb3kgY29tcG9uZW50IGZvciBzYW5kYm94IHN0YXR1czogJywgZGVwbG95Q29tcG9uZW50U3RhdHVzKTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgICAgLy8gQWRkIHRoZSBtZXNzYWdlIGJ1cyBsaXN0ZW5lcgogICAgICAgICAgICBfdGhpczMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfcnVudGltZUlkcFByb3h5VVJMLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgICAgX3Byb3h5U2FuZGJveC5wb3N0TWVzc2FnZShtc2cpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZAoKICAgICAgICAgICAgLy8gTG9hZCBTdHViIGZ1bmN0aW9uIHJlc29sdmVkIHdpdGggc3VjY2VzczsKICAgICAgICAgICAgLy8gbGV0IGlkcFByb3h5ID0gewogICAgICAgICAgICAvLyAgIHJ1bnRpbWVJZHBQcm94eVVSTDogX3J1bnRpbWVJZHBQcm94eVVSTCwKICAgICAgICAgICAgLy8gICBzdGF0dXM6IGRlcGxveUNvbXBvbmVudFN0YXR1cwogICAgICAgICAgICAvLyB9OwoKICAgICAgICAgICAgX3RoaXMzLnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtkb21haW5dLnN0YXR1cyA9ICdkZXBsb3llZCc7CiAgICAgICAgICAgIHZhciBpZHBQcm94eSA9IF90aGlzMy5yZWdpc3RyeS5pZHBQcm94eUxpc3RbZG9tYWluXTsKCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEZXBsb3llZDogJywgaWRwUHJveHkpOwoKICAgICAgICAgICAgcmVzb2x2ZShpZHBQcm94eSk7CiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4nKTsKICAgICAgICAgIH0sIGhhbmRsZUVycm9yKS5jYXRjaChlcnJvclJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8vIENoZWNrIGlmIHRoZSBsb2FkZXIgaXMgcmVhZHkgdG8gbG9hZCBhbGwgY29tcG9uZW50cwoKICB9LCB7CiAgICBrZXk6ICdfcmVhZHlUb1VzZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlYWR5VG9Vc2UoKSB7CgogICAgICB2YXIgc3RhdHVzID0gZmFsc2U7CgogICAgICBpZiAoIXRoaXMuX3J1bnRpbWVVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIGxvYWRlciBuZWVkIHRoZSBydW50aW1lIHVybCBhZGRyZXNzJyk7CiAgICAgIGlmICghdGhpcy5fbWVzc2FnZXNCdXMpIHRocm93IG5ldyBFcnJvcignVGhlIGxvYWRlciBuZWVkIHRoZSBtZXNzYWdlQnVzIGNvbXBvbmVudCcpOwogICAgICBpZiAoIXRoaXMuX3J1bnRpbWVDYXRhbG9ndWUpIHRocm93IG5ldyBFcnJvcignVGhlIGxvYWRlciBuZWVkIHRoZSBydW50aW1lQ2F0YWxvZ3VlIGNvbXBvbmVudCcpOwogICAgICBpZiAoIXRoaXMuX3JlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBsb2FkZXIgbmVlZCB0aGUgcmVnaXN0cnkgY29tcG9uZW50Jyk7CiAgICAgIGlmICghdGhpcy5fcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIGxvYWRlciBuZWVkIHRoZSBydW50aW1lIGZhY3RvcnkgY29tcG9uZW50Jyk7CgogICAgICBzdGF0dXMgPSB0cnVlOwogICAgICByZXR1cm4gc3RhdHVzOwogICAgfQogIH0sIHsKICAgIGtleTogJ3J1bnRpbWVVUkwnLAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fcnVudGltZVVSTCA9IHZhbHVlOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IHJ1bnRpbWUgdXJsCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHZhbHVlIHJ1bnRpbWVVUkwKICAgICAqLwogICAgLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9ydW50aW1lVVJMOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IFJlZ2lzdHJ5IGNvbXBvbmVudAogICAgICogQHBhcmFtICB7UmVnaXN0cnl9IHZhbHVlIFJlZ2lzdHJ5IENvbXBvbmVudAogICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlZ2lzdHJ5JywKICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7CiAgICAgIHRoaXMuX3JlZ2lzdHJ5ID0gdmFsdWU7CgogICAgICAvLyBJbnN0YWxsIEFkZHJlc3NBbGxvY2F0aW9uCiAgICAgIHZhciBhZGRyZXNzQWxsb2NhdGlvbiA9IG5ldyBfQWRkcmVzc0FsbG9jYXRpb24yLmRlZmF1bHQodGhpcy5fcnVudGltZVVSTCwgdGhpcy5fbWVzc2FnZXNCdXMsIHRoaXMuX3JlZ2lzdHJ5KTsKICAgICAgdGhpcy5fYWRkcmVzc0FsbG9jYXRpb24gPSBhZGRyZXNzQWxsb2NhdGlvbjsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBSZWdpc3RyeSBjb21wb25lbnQKICAgICAqIEByZXR1cm4ge1JlZ2lzdHJ5fSBSZWdpc3RyeSBjb21wb25lbnQKICAgICAqLwogICAgLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9yZWdpc3RyeTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBSdW50aW1lIENhdGFsb2d1ZSBDb21wb25lbnQKICAgICAqIEBwYXJhbSAge1J1bnRpbWVDYXRhbG9ndWV9IHZhbHVlIHJ1bnRpbWUgY2F0YWxvZ3VlIGNvbXBvbmVudAogICAgICovCgogIH0sIHsKICAgIGtleTogJ3J1bnRpbWVDYXRhbG9ndWUnLAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fcnVudGltZUNhdGFsb2d1ZSA9IHZhbHVlOwoKICAgICAgdGhpcy5kZXNjcmlwdG9ycyA9IG5ldyBfRGVzY3JpcHRvcnMyLmRlZmF1bHQodGhpcy5fcnVudGltZVVSTCwgdmFsdWUsIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24pOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IFJ1bnRpbWUgQ2F0YWxvZ3VlIGNvbXBvbmVudAogICAgICogQHJldHVybiB7UnVudGltZUNhdGFsb2d1ZX0gUnVudGltZSBDYXRhbG9ndWUgY29tcG9uZW50CiAgICAgKi8KICAgICwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcnVudGltZUNhdGFsb2d1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIFNldCBNZXNzYWdlIEJ1cyBjb21wb25lbnQKICAgICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9IHZhbHVlIE1lc3NhZ2UgYnVzIGNvbXBvbmVudAogICAgICovCgogIH0sIHsKICAgIGtleTogJ21lc3NhZ2VCdXMnLAogICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHsKICAgICAgdGhpcy5fbWVzc2FnZXNCdXMgPSB2YWx1ZTsKICAgIH0KCiAgICAvKioKICAgICAqIEdldCBNZXNzYWdlIEJ1cyBjb21wb25lbnQKICAgICAqIEByZXR1cm4ge01lc3NhZ2VCdXN9IE1lc3NhZ2UgQnVzIGNvbXBvbmVudAogICAgICovCiAgICAsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VzQnVzOwogICAgfQoKICAgIC8qKgogICAgICogU2V0IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnQKICAgICAqIEBwYXJhbSAge3J1bnRpbWVGYWN0b3J5fSB2YWx1ZSBGYWN0b3J5IGluY2x1ZGVzIHRoZSBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbnMgZm9yIGVhY2ggZW52aXJvbm1lbnQKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdydW50aW1lRmFjdG9yeScsCiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkgewogICAgICB0aGlzLl9ydW50aW1lRmFjdG9yeSA9IHZhbHVlOwogICAgfQoKICAgIC8qKgogICAgICogR2V0IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnQKICAgICAqIEByZXR1cm4ge3J1bnRpbWVGYWN0b3J5fSBSdW50aW1lIEZhY3RvcnkgY29tcG9uZW50CiAgICAgKi8KICAgICwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcnVudGltZUZhY3Rvcnk7CiAgICB9CiAgfV0pOwogIHJldHVybiBMb2FkZXI7Cn0oKTsKCmV4cG9ydHMuZGVmYXVsdCA9IExvYWRlcjsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vYWxsb2NhdGlvbi9BZGRyZXNzQWxsb2NhdGlvbiI6NDIxLCIuLi91dGlscy91dGlscyI6NDU3LCIuL0Rlc2NyaXB0b3JzIjo0NDYsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvYXNzaWduIjo0LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZSI6MTIsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayI6MTUsImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyI6MTZ9XSw0NDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3Byb21pc2UgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZScpOwoKdmFyIF9wcm9taXNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb21pc2UpOwoKdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbicpOwoKdmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKcmVxdWlyZSgnYmFiZWwtcG9seWZpbGwnKTsKCnZhciBfUmVnaXN0cnkgPSByZXF1aXJlKCcuLi9yZWdpc3RyeS9SZWdpc3RyeScpOwoKdmFyIF9SZWdpc3RyeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZWdpc3RyeSk7Cgp2YXIgX0lkZW50aXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaWRlbnRpdHkvSWRlbnRpdHlNb2R1bGUnKTsKCnZhciBfSWRlbnRpdHlNb2R1bGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSWRlbnRpdHlNb2R1bGUpOwoKdmFyIF9QRVAgPSByZXF1aXJlKCcuLi9wb2xpY3kvUEVQJyk7Cgp2YXIgX1BFUDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QRVApOwoKdmFyIF9NZXNzYWdlQnVzID0gcmVxdWlyZSgnLi4vYnVzL01lc3NhZ2VCdXMnKTsKCnZhciBfTWVzc2FnZUJ1czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZXNzYWdlQnVzKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKdmFyIF9Mb2FkZXIgPSByZXF1aXJlKCcuL0xvYWRlcicpOwoKdmFyIF9Mb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTG9hZGVyKTsKCnZhciBfcnVudGltZUNvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuL3J1bnRpbWVDb25maWd1cmF0aW9uJyk7Cgp2YXIgX1N5bmNoZXJNYW5hZ2VyID0gcmVxdWlyZSgnLi4vc3luY2hlci9TeW5jaGVyTWFuYWdlcicpOwoKdmFyIF9TeW5jaGVyTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TeW5jaGVyTWFuYWdlcik7Cgp2YXIgX1J1bnRpbWVDb3JlQ3R4ID0gcmVxdWlyZSgnLi4vcG9saWN5L2NvbnRleHQvUnVudGltZUNvcmVDdHgnKTsKCnZhciBfUnVudGltZUNvcmVDdHgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUnVudGltZUNvcmVDdHgpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgogKiBSdW50aW1lIFVzZXIgQWdlbnQgSW50ZXJmYWNlIHdpbGwgcHJvY2VzcyBhbGwgdGhlIGRlcGVuZGVjaWVzIG9mIHRoZSBjb3JlIHJ1bnRpbWU7CiAqIEBhdXRob3IgVml0b3IgU2lsdmEgW3ZpdG9yLXQtc2lsdmFAdGVsZWNvbS5wdF0KICogQHZlcnNpb24gMC40LjAKICoKICogQHByb3BlcnR5IHtydW50aW1lRmFjdG9yeX0gcnVudGltZUZhY3RvcnkgLSBTcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBmb3IgYWxsIGVudmlyb25tZW50czsKICogQHByb3BlcnR5IHtSdW50aW1lQ2F0YWxvZ3VlfSBydW50aW1lQ2F0YWxvZ3VlIC0gQ2F0YWxvZ3VlIG9mIGNvbXBvbmVudHMgY2FuIGJlIGluc3RhbGxlZDsKICogQHByb3BlcnR5IHtydW50aW1lVVJMfSBydW50aW1lVVJMIC0gVGhpcyBpZGVudGlmeSB0aGUgY29yZSBydW50aW1lLCBzaG91bGQgYmUgdW5pcXVlOwogKiBAcHJvcGVydHkge0lkZW50aXR5TW9kdWxlfSBpZGVudGl0eU1vZHVsZSAtIElkZW50aXR5IE1vZHVsZTsKICogQHByb3BlcnR5IHtQRVB9IHBvbGljeUVuZ2luZSAtIFBvbGljeSBFbmdpbmUgTW9kdWxlOwogKiBAcHJvcGVydHkge1JlZ2lzdHJ5fSByZWdpc3RyeSAtIFJlZ2lzdHJ5IE1vZHVsZTsKICogQHByb3BlcnR5IHtNZXNzYWdlQnVzfSBtZXNzYWdlQnVzIC0gTWVzc2FnZSBCdXMgaXMgdXNlZCBsaWtlIGEgcm91dGVyIHRvIHJlZGlyZWN0IHRoZSBtZXNzYWdlcyBmcm9tIG9uZSBjb21wb25lbnQgdG8gb3RoZXIocykKICogQHByb3BlcnR5IHtHcmFwaENvbm5lY3Rvcn0gZ3JhcGhDb25uZWN0b3IgLSBHcmFwaCBDb25uZWN0b3IgaGFuZGxpbmcgR1VJRCBhbmQgY29udGFjdHMKICovCgovLyBpbXBvcnQgR3JhcGhDb25uZWN0b3IgZnJvbSAnLi4vZ3JhcGhjb25uZWN0b3IvR3JhcGhDb25uZWN0b3InOwoKLyoqCiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoqCiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoqCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKKgoqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KKiovCgp2YXIgUnVudGltZVVBID0gZnVuY3Rpb24gKCkgewoKICAvKioKICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgUnVudGltZSBVc2VyIEFnZW50CiAgICogQHBhcmFtIHtydW50aW1lRmFjdG9yeX0gcnVudGltZUZhY3RvcnkgLSBTcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIGVudmlyb25tZW50IHdoZXJlIHRoZSBjb3JlIHJ1bnRpbWUgd2lsbCBydW47CiAgICogQHBhcmFtIHtkb21haW59IGRvbWFpblVSTCAtIHNwZWNpZnkgdGhlIGRvbWFpbiBiYXNlIGZvciB0aGUgcnVudGltZTsKICAgKi8KICBmdW5jdGlvbiBSdW50aW1lVUEocnVudGltZUZhY3RvcnksIGRvbWFpbikgewogICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUnVudGltZVVBKTsKCgogICAgaWYgKCFydW50aW1lRmFjdG9yeSkgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2FuZGJveCBmYWN0b3J5IGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOwogICAgaWYgKCFkb21haW4pIHRocm93IG5ldyBFcnJvcignWW91IG5lZWQgdGhlIGRvbWFpbiBvZiBydW50aW1lJyk7CgogICAgLy8gQ29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBpbmZvcm1hdGlvbiByZWxhdGVkIHdpdGggc2VydmVycwogICAgdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiA9ICgwLCBfYXNzaWduMi5kZWZhdWx0KSh7IGRvbWFpbjogZG9tYWluIH0sIF9ydW50aW1lQ29uZmlndXJhdGlvbi5ydW50aW1lQ29uZmlndXJhdGlvbik7CgogICAgdGhpcy5ydW50aW1lRmFjdG9yeSA9IHJ1bnRpbWVGYWN0b3J5OwogICAgdGhpcy5ydW50aW1lQ2F0YWxvZ3VlID0gcnVudGltZUZhY3RvcnkuY3JlYXRlUnVudGltZUNhdGFsb2d1ZSgpOwoKICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3RvcnkuY3JlYXRlUnVudGltZUNhdGFsb2d1ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignQ2hlY2sgeW91ciBSdW50aW1lIEZhY3RvcnkgYmVjYXVzZSBpdCBuZWVkIHRoZSBSdW50aW1lIENhdGFsb2d1ZSBpbXBsZW1lbnRhdGlvbicpOwogICAgfQoKICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3RvcnkucGVyc2lzdGVuY2VNYW5hZ2VyID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyID0gcnVudGltZUZhY3RvcnkucGVyc2lzdGVuY2VNYW5hZ2VyKCk7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZCB0aGUgUGVyc2lzdGVuY2UgTWFuYWdlciBpbXBsZW1lbnRhdGlvbicpOwogICAgfQoKICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3Rvcnkuc3RvcmFnZU1hbmFnZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LnN0b3JhZ2VNYW5hZ2VyKCk7CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZCB0aGUgU3RvcmFnZSBNYW5hZ2VyIGltcGxlbWVudGF0aW9uJyk7CiAgICB9CiAgICBpZiAodHlwZW9mIHJ1bnRpbWVGYWN0b3J5LnJ1bnRpbWVDYXBhYmlsaXRpZXMgPT09ICdmdW5jdGlvbicpIHsKICAgICAgdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzID0gcnVudGltZUZhY3RvcnkucnVudGltZUNhcGFiaWxpdGllcyh0aGlzLnN0b3JhZ2VNYW5hZ2VyKTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUuaW5mbygnQ2hlY2sgeW91ciBSdW50aW1lRmFjdG9yeSBiZWNhdXNlIGl0IG5lZWQgdGhlIFJ1bnRpbWUgQ2FwYWJpbGl0aWVzIGltcGxlbWVudGF0aW9uJyk7CiAgICB9CiAgfQoKICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSdW50aW1lVUEsIFt7CiAgICBrZXk6ICdpbml0JywKICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpczIuZG9tYWluID0gX3RoaXMyLnJ1bnRpbWVDb25maWd1cmF0aW9uLmRvbWFpbjsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhciBnZXRDYXBhYmlsaXRpZXMgPSBfdGhpczIucnVudGltZUNhcGFiaWxpdGllcy5nZXRSdW50aW1lQ2FwYWJpbGl0aWVzKCk7CiAgICAgICAgICB2YXIgZ2V0UnVudGltZVVSTCA9IF90aGlzMi5zdG9yYWdlTWFuYWdlci5nZXQoJ3J1bnRpbWU6VVJMJyk7CgogICAgICAgICAgX3Byb21pc2UyLmRlZmF1bHQuYWxsKFtnZXRSdW50aW1lVVJMLCBnZXRDYXBhYmlsaXRpZXNdKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CgogICAgICAgICAgICBfdGhpczIucnVudGltZVVSTCA9IHJlc3VsdHNbMF0gPyByZXN1bHRzWzBdLnJ1bnRpbWVVUkwgOiByZXN1bHRzWzBdOwogICAgICAgICAgICBpZiAoIV90aGlzMi5ydW50aW1lVVJMKSB7CiAgICAgICAgICAgICAgX3RoaXMyLnJ1bnRpbWVVUkwgPSAncnVudGltZTovLycgKyBfdGhpczIuZG9tYWluICsgJy8nICsgKDAsIF91dGlscy5nZW5lcmF0ZUdVSUQpKCk7CiAgICAgICAgICAgICAgX3RoaXMyLnN0b3JhZ2VNYW5hZ2VyLnNldCgncnVudGltZTpVUkwnLCAxLCB7IHJ1bnRpbWVVUkw6IF90aGlzMi5ydW50aW1lVVJMIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfdGhpczIuY2FwYWJpbGl0aWVzID0gcmVzdWx0c1sxXTsKCiAgICAgICAgICAgIHJldHVybiBfdGhpczIuX2xvYWRDb21wb25lbnRzKCk7CiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHsKICAgICAgICAgICAgcmVzb2x2ZShzdGF0dXMpOwogICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VSUk9SOiAnLCBlcnJvcik7CiAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfbG9hZENvbXBvbmVudHMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9sb2FkQ29tcG9uZW50cygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgdHJ5IHsKCiAgICAgICAgICAvLyBQcmVwYXJlIHRoZSBsb2FkZXIgdG8gbG9hZCB0aGUgaHlwZXJ0aWVzLCBwcm90b3N0dWJzIGFuZCBpZHBwcm94eTsKICAgICAgICAgIF90aGlzMy5sb2FkZXIgPSBuZXcgX0xvYWRlcjIuZGVmYXVsdChfdGhpczMucnVudGltZUNvbmZpZ3VyYXRpb24pOwoKICAgICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBpZGVudGl0eSBNb2R1bGUKICAgICAgICAgIF90aGlzMy5pZGVudGl0eU1vZHVsZSA9IG5ldyBfSWRlbnRpdHlNb2R1bGUyLmRlZmF1bHQoX3RoaXMzLnJ1bnRpbWVVUkwsIF90aGlzMy5ydW50aW1lQ2FwYWJpbGl0aWVzLCBfdGhpczMuc3RvcmFnZU1hbmFnZXIpOwoKICAgICAgICAgIC8vIFVzZSB0aGUgc2FuZGJveCBmYWN0b3J5IHRvIGNyZWF0ZSBhbiBBcHBTYW5kYm94OwogICAgICAgICAgLy8gSW4gdGhlIGZ1dHVyZSBjYW4gYmUgZGVjaWRlZCBieSBwb2xpY3lFbmdpbmUgaWYgd2UgbmVlZAogICAgICAgICAgLy8gY3JlYXRlIGEgQXBwU2FuZGJveCBvciBub3Q7CiAgICAgICAgICB2YXIgYXBwU2FuZGJveCA9IF90aGlzMy5ydW50aW1lRmFjdG9yeS5jcmVhdGVBcHBTYW5kYm94KCk7CgogICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFJlZ2lzdHJ5IE1vZHVsZQogICAgICAgICAgX3RoaXMzLnJlZ2lzdHJ5ID0gbmV3IF9SZWdpc3RyeTIuZGVmYXVsdChfdGhpczMucnVudGltZVVSTCwgYXBwU2FuZGJveCwgX3RoaXMzLmlkZW50aXR5TW9kdWxlLCBfdGhpczMucnVudGltZUNhdGFsb2d1ZSwgX3RoaXMzLnJ1bnRpbWVDYXBhYmlsaXRpZXMsIF90aGlzMy5zdG9yYWdlTWFuYWdlcik7CgogICAgICAgICAgLy8gU2V0IHRoZSBsb2FkZXIgdG8gbG9hZCBIeXBlcnRpZXMsIFN0dWJzIGFuZCBJZHBQcm94aWVzCiAgICAgICAgICBfdGhpczMucmVnaXN0cnkubG9hZGVyID0gX3RoaXMzLmxvYWRlcjsKCiAgICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgTWVzc2FnZSBCdXMKICAgICAgICAgIF90aGlzMy5tZXNzYWdlQnVzID0gbmV3IF9NZXNzYWdlQnVzMi5kZWZhdWx0KF90aGlzMy5yZWdpc3RyeSk7CgogICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFBvbGljeSBFbmdpbmUKICAgICAgICAgIF90aGlzMy5wb2xpY3lFbmdpbmUgPSBuZXcgX1BFUDIuZGVmYXVsdChuZXcgX1J1bnRpbWVDb3JlQ3R4Mi5kZWZhdWx0KF90aGlzMy5pZGVudGl0eU1vZHVsZSwgX3RoaXMzLnJlZ2lzdHJ5LCBfdGhpczMuc3RvcmFnZU1hbmFnZXIpKTsKCiAgICAgICAgICBfdGhpczMubWVzc2FnZUJ1cy5waXBlbGluZS5oYW5kbGVycyA9IFsKCiAgICAgICAgICAvLyBQb2xpY3kgbWVzc2FnZSBhdXRob3Jpc2UKICAgICAgICAgIGZ1bmN0aW9uIChjdHgpIHsKICAgICAgICAgICAgX3RoaXMzLnBvbGljeUVuZ2luZS5hdXRob3Jpc2UoY3R4Lm1zZykudGhlbihmdW5jdGlvbiAoY2hhbmdlZE1ncykgewogICAgICAgICAgICAgIGN0eC5tc2cgPSBjaGFuZ2VkTWdzOwogICAgICAgICAgICAgIGN0eC5uZXh0KCk7CiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHJlYXNvbik7CiAgICAgICAgICAgICAgY3R4LmZhaWwocmVhc29uKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9XTsKCiAgICAgICAgICAvLyBBZGQgdG8gQXBwIFNhbmRib3ggdGhlIGxpc3RlbmVyOwogICAgICAgICAgYXBwU2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgX3RoaXMzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIC8vIFJlZ2lzdGVyIG1lc3NhZ2VCdXMgb24gUmVnaXN0cnkKICAgICAgICAgIF90aGlzMy5yZWdpc3RyeS5tZXNzYWdlQnVzID0gX3RoaXMzLm1lc3NhZ2VCdXM7CgogICAgICAgICAgLy8gUmVnaXN0ZXIgcmVnaXN0cnkgb24gSWRlbnRpdHlNb2R1bGUKICAgICAgICAgIF90aGlzMy5pZGVudGl0eU1vZHVsZS5yZWdpc3RyeSA9IF90aGlzMy5yZWdpc3RyeTsKCiAgICAgICAgICAvLyBVc2Ugc2FuZGJveCBmYWN0b3J5IHRvIHVzZSBzcGVjaWZpYyBtZXRob2RzCiAgICAgICAgICAvLyBhbmQgc2V0IHRoZSBtZXNzYWdlIGJ1cyB0byB0aGUgZmFjdG9yeQogICAgICAgICAgX3RoaXMzLnJ1bnRpbWVGYWN0b3J5Lm1lc3NhZ2VCdXMgPSBfdGhpczMubWVzc2FnZUJ1czsKCiAgICAgICAgICAvLyBJbnN0YW5jaWF0ZSB0aGUgU3luY2hlck1hbmFnZXI7CiAgICAgICAgICBfdGhpczMuc3luY2hlck1hbmFnZXIgPSBuZXcgX1N5bmNoZXJNYW5hZ2VyMi5kZWZhdWx0KF90aGlzMy5ydW50aW1lVVJMLCBfdGhpczMubWVzc2FnZUJ1cywgX3RoaXMzLnJlZ2lzdHJ5LCBfdGhpczMucnVudGltZUNhdGFsb2d1ZSwgX3RoaXMzLnN0b3JhZ2VNYW5hZ2VyKTsKCiAgICAgICAgICAvLyBTZXQgaW50byBsb2FkZXIgdGhlIG5lZWRlZCBjb21wb25lbnRzOwogICAgICAgICAgX3RoaXMzLmxvYWRlci5ydW50aW1lVVJMID0gX3RoaXMzLnJ1bnRpbWVVUkw7CiAgICAgICAgICBfdGhpczMubG9hZGVyLm1lc3NhZ2VCdXMgPSBfdGhpczMubWVzc2FnZUJ1czsKICAgICAgICAgIF90aGlzMy5sb2FkZXIucmVnaXN0cnkgPSBfdGhpczMucmVnaXN0cnk7CiAgICAgICAgICBfdGhpczMubG9hZGVyLnJ1bnRpbWVDYXRhbG9ndWUgPSBfdGhpczMucnVudGltZUNhdGFsb2d1ZTsKICAgICAgICAgIF90aGlzMy5sb2FkZXIucnVudGltZUZhY3RvcnkgPSBfdGhpczMucnVudGltZUZhY3Rvcnk7CgogICAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIEdyYXBoIENvbm5lY3RvcgogICAgICAgICAgLy8gX3RoaXMuZ3JhcGhDb25uZWN0b3IgPSBuZXcgR3JhcGhDb25uZWN0b3IoX3RoaXMucnVudGltZVVSTCwgX3RoaXMubWVzc2FnZUJ1cyk7CgogICAgICAgICAgcmVzb2x2ZSh0cnVlKTsKICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICByZWplY3QoZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRGVwbG95IEh5cGVydHkgZnJvbSBDYXRhbG9ndWUgVVJMCiAgICAqIEBwYXJhbSAge1VSTC5IeXBlcnR5Q2F0YWxvZ3VlVVJMfSAgICBoeXBlcnR5IGh5cGVydHlEZXNjcmlwdG9yIHVybDsKICAgICovCgogIH0sIHsKICAgIGtleTogJ2xvYWRIeXBlcnR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBsb2FkSHlwZXJ0eShoeXBlcnR5RGVzY3JpcHRvclVSTCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIGlmICghaHlwZXJ0eURlc2NyaXB0b3JVUkwpIHRocm93IG5ldyBFcnJvcignSHlwZXJ0eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXM0LmxvYWRlci5sb2FkSHlwZXJ0eShoeXBlcnR5RGVzY3JpcHRvclVSTCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgcmVqZWN0KHJlYXNvbik7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKgogICAgKiBEZXBsb3kgU3R1YiBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybAogICAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpbgogICAgKi8KCiAgfSwgewogICAga2V5OiAnbG9hZFN0dWInLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRTdHViKHByb3Rvc3R1YlVSTCkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIGlmICghcHJvdG9zdHViVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1Byb3RvU3R1YiBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXM1LmxvYWRlci5sb2FkU3R1Yihwcm90b3N0dWJVUkwpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICogRGVwbG95IGlkcFByb3h5IGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsCiAgICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICBkb21haW4gICAgICAgICAgZG9tYWluCiAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdsb2FkSWRwUHJveHknLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWRJZHBQcm94eShpZHBQcm94eVVSTCkgewogICAgICB2YXIgX3RoaXM2ID0gdGhpczsKCiAgICAgIGlmICghaWRwUHJveHlVUkwpIHRocm93IG5ldyBFcnJvcignVGhlIElEUCBQcm94eSBVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyLCBjb3VsZCBiZSBhIERPTUFJTiBvciBhIFVSTCcpOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgX3RoaXM2LmxvYWRlci5sb2FkSWRwUHJveHkoaWRwUHJveHlVUkwpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIHJlamVjdChyZWFzb24pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFVzZWQgdG8gY2xvc2UgYWxsIHRoZSBydW50aW1lOyBVbnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXM7CiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEJvb2xlYW4+fSByZXN1bHQgb2YgdGhlIGNsb3NlIG1ldGhvZCwgd2l0aCB0cnVlIG9yIGZhbHNlIHRvIHRoZSBvcGVyYXRpb24gc3VjY2VzczsKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdjbG9zZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBjb25zb2xlLmluZm8oJ1VucmVnaXN0ZXIgYWxsIGh5cGVydGllcycpOwogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgICAgX3RoaXMucmVnaXN0cnkudW5yZWdpc3RlckFsbEh5cGVydGllcygpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgICAgY29uc29sZS5pbmZvKCdBbGwgdGhlIGh5cGVydGllcyBhcmUgdW5yZWdpc3RlZCB3aXRoIFN1Y2Nlc3M6JywgcmVzdWx0KTsKICAgICAgICAgIHJlc29sdmUodHJ1ZSk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHVucmVnaXN0ZXIgdGhlIGh5cGVydGllcycsIHJlYXNvbik7CiAgICAgICAgICByZWplY3QoZmFsc2UpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFJ1bnRpbWVVQTsKfSgpOwoKLy9NYWluIGRlcGVuZGVjaWVzCgoKZXhwb3J0cy5kZWZhdWx0ID0gUnVudGltZVVBOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9idXMvTWVzc2FnZUJ1cyI6NDIzLCIuLi9pZGVudGl0eS9JZGVudGl0eU1vZHVsZSI6NDI4LCIuLi9wb2xpY3kvUEVQIjo0MzIsIi4uL3BvbGljeS9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4Ijo0NDIsIi4uL3JlZ2lzdHJ5L1JlZ2lzdHJ5Ijo0NDQsIi4uL3N5bmNoZXIvU3luY2hlck1hbmFnZXIiOjQ1NCwiLi4vdXRpbHMvdXRpbHMiOjQ1NywiLi9Mb2FkZXIiOjQ0NywiLi9ydW50aW1lQ29uZmlndXJhdGlvbiI6NDQ5LCJiYWJlbC1wb2x5ZmlsbCI6MSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9hc3NpZ24iOjQsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlIjoxMiwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNn1dLDQ0OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKdmFyIHJ1bnRpbWVDb25maWd1cmF0aW9uID0gZXhwb3J0cy5ydW50aW1lQ29uZmlndXJhdGlvbiA9IHsKCiAgcnVudGltZVVSTFM6IHsKICAgIHJlZ2lzdHJ5OiB7CiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsCiAgICAgIHN1ZmZpeDogJ3JlZ2lzdHJ5JwogICAgfSwKICAgIGlkZW50aXR5TW9kdWxlOiB7CiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsCiAgICAgIHN1ZmZpeDogJy9pZG0nCiAgICB9LAogICAgcnVudGltZVVBOiB7CiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsCiAgICAgIHN1ZmZpeDogJy91YScKICAgIH0sCiAgICBjYXRhbG9ndWU6IHsKICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJywKICAgICAgc3VmZml4OiAnL2NhdGFsb2d1ZScKICAgIH0sCiAgICBncmFwaENvbm5lY3RvcjogewogICAgICBwcmVmaXg6ICdoeXBlcnR5LXJ1bnRpbWU6Ly8nLAogICAgICBzdWZmaXg6ICcvZ3JhcGgnCiAgICB9LAogICAgc3luY01hbmFnZXI6IHsKICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJywKICAgICAgc3VmZml4OiAnL3NtJwogICAgfQogIH0sCiAgY2F0YWxvZ3VlVVJMczogewogICAgcHJvdG9jb2xzdHViOiB7CiAgICAgIHByZWZpeDogJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicsCiAgICAgIHN1ZmZpeDogJy8ud2VsbC1rbm93bi9wcm90b2NvbHN0dWIvJywKICAgICAgZmFsbGJhY2s6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4lZG9tYWluJS8ud2VsbC1rbm93bi9wcm90b2NvbHN0dWIvJwogICAgfSwKICAgIGlkcFByb3h5OiB7CiAgICAgIHByZWZpeDogJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicsCiAgICAgIHN1ZmZpeDogJy8ud2VsbC1rbm93bi9pZHAtcHJveHkvJywKICAgICAgZmFsbGJhY2s6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4lZG9tYWluJS8ud2VsbC1rbm93bi9pZHAtcHJveHkvJwogICAgfQogIH0sCiAgbXNnTm9kZVVSTDogewogICAgcHJlZml4OiAnZG9tYWluOi8vbXNnLW5vZGUuJywKICAgIHN1ZmZpeDogJycsCiAgICBoeXBlcnR5QWRkcmVzc0FsbG9jYXRpb246ICcvaHlwZXJ0eS1hZGRyZXNzLWFsbG9jYXRpb24nLAogICAgb2JqZWN0QWRkcmVzc0FsbG9jYXRpb246ICcvb2JqZWN0LWFkZHJlc3MtYWxsb2NhdGlvbicsCiAgICBzdWJzY3JpcHRpb25NYW5hZ2VtZW50OiAnL3NtJwogIH0sCiAgZG9tYWluUmVnaXN0cnlVUkw6IHsKICAgIHByZWZpeDogJ2RvbWFpbjovL3JlZ2lzdHJ5LicsCiAgICBzdWZmaXg6ICcnCiAgfSwKICBnbG9iYWxSZWdpc3RyeVVSTDogJ2dsb2JhbDovL3JlZ2lzdHJ5LicKfTsKCn0se31dLDQ1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbiA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdWJzY3JpcHRpb24pOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBPYnNlcnZlck9iamVjdCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBPYnNlcnZlck9iamVjdChwYXJlbnQsIHVybCwgY2hpbGRyZW5zKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBPYnNlcnZlck9iamVjdCk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5fcGFyZW50ID0gcGFyZW50OwogICAgX3RoaXMuX3VybCA9IHVybDsKICAgIF90aGlzLl9jaGlsZHJlbnMgPSBjaGlsZHJlbnM7CgogICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyID0gcGFyZW50Ll9zdG9yYWdlTWFuYWdlcjsKCiAgICBfdGhpcy5fYnVzID0gcGFyZW50Ll9idXM7CgogICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTsKICAgIF90aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9ucyA9IHt9OwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoT2JzZXJ2ZXJPYmplY3QsIFt7CiAgICBrZXk6ICdfbmV3U3Vic2NyaXB0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfbmV3U3Vic2NyaXB0aW9uKGh5cGVydHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldID0gbmV3IF9TdWJzY3JpcHRpb24yLmRlZmF1bHQoX3RoaXMuX2J1cywgaHlwZXJ0eSwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgZmFsc2UpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2FkZFN1YnNjcmlwdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkU3Vic2NyaXB0aW9uKGh5cGVydHkpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9uZXdTdWJzY3JpcHRpb24oaHlwZXJ0eSk7CiAgICB9CiAgfSwgewogICAga2V5OiAncmVtb3ZlU3Vic2NyaXB0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVTdWJzY3JpcHRpb24oaHlwZXJ0eSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGRvbWFpbiA9ICgwLCBfdXRpbHMuZGl2aWRlVVJMKShoeXBlcnR5KS5kb21haW47CiAgICAgIHZhciBvYmpVUkxTdWJzY3JpcHRpb24gPSBfdGhpcy5fdXJsICsgJy9zdWJzY3JpcHRpb24nOwoKICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldOwogICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7CiAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHJlbW90ZSBSZXBvcnRlck9iamVjdCAtPiBfb25SZW1vdGVVblN1YnNjcmliZQogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogb2JqVVJMU3Vic2NyaXB0aW9uLAogICAgICAgICAgYm9keTogeyByZXNvdXJjZTogX3RoaXMuX3VybCB9CiAgICAgICAgfSk7CgogICAgICAgIC8vVE9ETzogc2hvdWxkIEkgd2FpdCBmb3IgcmVzcG9uc2UgYmVmb3JlIHVuc3Vic2NyaWJlIG9uIG1zZy1ub2RlCiAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50CiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvc20nLAogICAgICAgICAgYm9keTogeyByZXNvdXJjZTogX3RoaXMuX3VybCwgY2hpbGRyZW5SZXNvdXJjZXM6IF90aGlzLl9jaGlsZHJlbnMgfQogICAgICAgIH0pOwoKICAgICAgICBzdWJzY3JpcHRpb24uX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eV07CiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIE9ic2VydmVyT2JqZWN0Owp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBPYnNlcnZlck9iamVjdDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQ1NywiLi9TdWJzY3JpcHRpb24iOjQ1MywiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrIjoxNSwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzIjoxNn1dLDQ1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfcHJvbWlzZSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9wcm9taXNlJyk7Cgp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7Cgp2YXIgX2tleXMgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMnKTsKCnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKdmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzL3V0aWxzJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbiA9IHJlcXVpcmUoJy4vU3Vic2NyaXB0aW9uJyk7Cgp2YXIgX1N1YnNjcmlwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdWJzY3JpcHRpb24pOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBSZXBvcnRlck9iamVjdCA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSZXBvcnRlck9iamVjdChwYXJlbnQsIG93bmVyLCB1cmwpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFJlcG9ydGVyT2JqZWN0KTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7CiAgICBfdGhpcy5fb3duZXIgPSBvd25lcjsKICAgIF90aGlzLl91cmwgPSB1cmw7CgogICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzOwogICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyID0gcGFyZW50Ll9zdG9yYWdlTWFuYWdlcjsKCiAgICBfdGhpcy5fZG9tYWluID0gKDAsIF91dGlscy5kaXZpZGVVUkwpKG93bmVyKS5kb21haW47CiAgICBfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwgPSBfdGhpcy5fdXJsICsgJy9zdWJzY3JpcHRpb24nOwoKICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307CiAgICBfdGhpcy5fY2hpbGRyZW5zID0gW107CiAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMgPSBbXTsKCiAgICBfdGhpcy5fZm9yd2FyZHMgPSB7fTsKCiAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFJlcG9ydGVyT2JqZWN0LCBbewogICAga2V5OiAnX2FsbG9jYXRlTGlzdGVuZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvL2FkZCBzdWJzY3JpcHRpb24gbGlzdGVuZXIuLi4KICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbkxpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICBjb25zb2xlLmxvZyhfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwgKyAnLVJDVjogJywgbXNnKTsKICAgICAgICBzd2l0Y2ggKG1zZy50eXBlKSB7CiAgICAgICAgICBjYXNlICdzdWJzY3JpYmUnOgogICAgICAgICAgICBfdGhpcy5fb25SZW1vdGVTdWJzY3JpYmUobXNnKTticmVhazsKICAgICAgICAgIGNhc2UgJ3Vuc3Vic2NyaWJlJzoKICAgICAgICAgICAgX3RoaXMuX29uUmVtb3RlVW5TdWJzY3JpYmUobXNnKTticmVhazsKICAgICAgICAgIGNhc2UgJ3Jlc3BvbnNlJzoKICAgICAgICAgICAgX3RoaXMuX29uUmVtb3RlUmVzcG9uc2UobXNnKTticmVhazsKICAgICAgICB9CiAgICAgIH0pOwoKICAgICAgdmFyIGNoYW5nZVVSTCA9IF90aGlzLl91cmwgKyAnL2NoYW5nZXMnOwogICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoYW5nZVVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hhbmdlcz8KICAgICAgICBpZiAobXNnLmJvZHkuYXR0cmlidXRlKSB7CiAgICAgICAgICBfdGhpcy5fcGFyZW50Ll9zdG9yZURhdGFPYmplY3RzLnVwZGF0ZURhdGEoX3RoaXMuX3VybCwgJ2RhdGEnLCBtc2cuYm9keS5hdHRyaWJ1dGUsIG1zZy5ib2R5LnZhbHVlLCB0cnVlKTsKICAgICAgICB9CiAgICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLScgKyBjaGFuZ2VVUkwgKyAnLVJDVjogJywgbXNnKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAncmVzdW1lU3Vic2NyaXB0aW9ucycsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lU3Vic2NyaXB0aW9ucyhzdWJzY3JpcHRpb25zKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKHN1YnNjcmlwdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgIHZhciBoeXBlcnR5VVJMID0gc3Vic2NyaXB0aW9uc1trZXldOwoKICAgICAgICBpZiAoIV90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdKSB7CiAgICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSA9IG5ldyBfU3Vic2NyaXB0aW9uMi5kZWZhdWx0KF90aGlzLl9idXMsIF90aGlzLl9vd25lciwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgdHJ1ZSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbGVhc2VMaXN0ZW5lcnMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uTGlzdGVuZXIucmVtb3ZlKCk7CgogICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCk7CgogICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoY2wpIHsKICAgICAgICBjbC5yZW1vdmUoKTsKICAgICAgfSk7CgogICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKF90aGlzLl9mb3J3YXJkcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX3RoaXMuZm9yd2FyZFVuU3Vic2NyaWJlKGtleSk7CiAgICAgIH0pOwoKICAgICAgLy9yZW1vdmUgYWxsIHN1YnNjcmlwdGlvbnMKICAgICAgKDAsIF9rZXlzMi5kZWZhdWx0KShfdGhpcy5fc3Vic2NyaXB0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNba2V5XS5fcmVsZWFzZUxpc3RlbmVycygpOwogICAgICB9KTsKICAgIH0KCiAgICAvKioKICAgICAqIFJlZ2lzdGVyIGEgbGlzdGVuZXIgaW4gdGhlIG1zZy1ub2RlIGFuZCBpbiB0aGUgbG9jYWwgTWVzc2FnZUJ1cywgc28gdGhhdCBtZXNzYWdlcyBvbiB0aGlzIGFkZHJlc3MgYXJlIGZvcndhcmRlZCB0byB0aGUgcmVwb3J0ZXIgb2JqZWN0CiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGFkZHJlc3MgLSBVUkwgdG8gcmVnaXN0ZXIgdGhlIGxpc3RlbmVycwogICAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJuIFByb21pc2UgT0sgb3IgZXJyb3IKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICdmb3J3YXJkU3Vic2NyaWJlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBmb3J3YXJkU3Vic2NyaWJlKGFkZHJlc3NlcykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudAogICAgICB2YXIgbm9kZVN1YnNjcmliZU1zZyA9IHsKICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsCiAgICAgICAgYm9keTogeyBzdWJzY3JpYmU6IGFkZHJlc3Nlcywgc291cmNlOiBfdGhpcy5fb3duZXIgfQogICAgICB9OwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShub2RlU3Vic2NyaWJlTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdmb3J3YXJkLXN1YnNjcmliZS1yZXNwb25zZShyZXBvcnRlcik6ICcsIHJlcGx5KTsKICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewogICAgICAgICAgICB2YXIgbmV3Rm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChfdGhpcy5fdXJsLCBfdGhpcy5fb3duZXIpOwogICAgICAgICAgICBfdGhpcy5fZm9yd2FyZHNbYWRkcmVzc2VzWzBdXSA9IG5ld0ZvcndhcmQ7CiAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gbXNnLW5vZGUgc3Vic2NyaXB0aW9uOiAnICsgcmVwbHkuYm9keS5kZXNjKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLyoqCiAgICAgKiBVblJlZ2lzdGVyIGEgbGlzdGVuZXIgaW4gdGhlIG1zZy1ub2RlIGFuZCBpbiB0aGUgbG9jYWwgTWVzc2FnZUJ1cywgc28gdGhhdCBtZXNzYWdlcyBvbiB0aGlzIGFkZHJlc3MgYXJlIHJlbW92ZWQgZnJvbSBmb3J3YXJkCiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGFkZHJlc3MgLSBVUkwgdG8gdW4tcmVnaXN0ZXIgdGhlIGxpc3RlbmVycwogICAgICovCgogIH0sIHsKICAgIGtleTogJ2ZvcndhcmRVblN1YnNjcmliZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZm9yd2FyZFVuU3Vic2NyaWJlKGFkZHJlc3MpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9mb3J3YXJkc1thZGRyZXNzXS5yZW1vdmUoKTsKICAgICAgZGVsZXRlIF90aGlzLl9mb3J3YXJkc1thZGRyZXNzXTsKCiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnQKICAgICAgdmFyIG5vZGVVblN1YnNjcmliZU1zZyA9IHsKICAgICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJywKICAgICAgICBib2R5OiB7IHN1YnNjcmliZTogW2FkZHJlc3NdLCBzb3VyY2U6IF90aGlzLl9vd25lciB9CiAgICAgIH07CgogICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVVblN1YnNjcmliZU1zZyk7CiAgICB9CgogICAgLyoqCiAgICAgKiBSZWdpc3RlciBsaXN0ZW5lcnMgZm9yIGEgbGlzdCBvZiBjaGlsZHJlbnMuIFB1YmxpYyBjaGFubmVscyB1c2VkIHRvIHRyYW5zbWl0IG1lc3NhZ2VzLgogICAgICogQHBhcmFtICB7c3RyaW5nW119IGNoaWxkcmVucyAtIGNoYW5uZWxzIHRvIHJlZ2lzdGVyCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm4gUHJvbWlzZSBPSyBvciBlcnJvcgogICAgICovCgogIH0sIHsKICAgIGtleTogJ2FkZENoaWxkcmVucycsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ2hpbGRyZW5zKGNoaWxkcmVucykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgaWYgKGNoaWxkcmVucy5sZW5ndGggPT09IDApIHsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBjaGlsZEJhc2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGlsZHJlbi8nOwogICAgICAgIF90aGlzLl9jaGlsZHJlbnMucHVzaChjaGlsZHJlbnMpOwoKICAgICAgICAvKgogICAgICAgIF90aGlzLl9jaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHsKICAgICAgICAgIGxldCBjaGlsZElkID0gY2hpbGRCYXNlVVJMICsgY2hpbGQ7CiAgICAgICAgICAgbGV0IHNlbGZGb3J3YXJkID0gX3RoaXMuX2J1cy5hZGRGb3J3YXJkKGNoaWxkSWQsIG93bmVyKTsKICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKHNlbGZGb3J3YXJkKTsKICAgICAgICB9KTsqLwoKICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IFtdOwogICAgICAgIGNoaWxkcmVucy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgewogICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbnMucHVzaChjaGlsZEJhc2VVUkwgKyBjaGlsZCk7CiAgICAgICAgfSk7CgogICAgICAgIC8vX3RoaXMuX3N0b3JhZ2VTdWJzY3JpcHRpb25zW190aGlzLl9vYmpTdWJzY3JpcHRvclVSTF0gPSB7dXJsOiBfdGhpcy5fdXJsLCBvd25lcjogX3RoaXMuX293bmVyLCBjaGlsZHJlbnM6IF90aGlzLl9jaGlsZHJlbnN9OwoKICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50CiAgICAgICAgdmFyIG5vZGVTdWJzY3JpYmVNc2cgPSB7CiAgICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsCiAgICAgICAgICBib2R5OiB7IHN1YnNjcmliZTogc3Vic2NyaXB0aW9ucywgc291cmNlOiBfdGhpcy5fb3duZXIgfQogICAgICAgIH07CgogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbm9kZS1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOiAnLCByZXBseSk7CiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKCiAgICAgICAgICAgIC8vYWRkIGNoaWxkcmVuIGxpc3RlbmVycyBvbiBsb2NhbCAuLi4KICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZFVSTCkgewogICAgICAgICAgICAgIHZhciBjaGlsZExpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihjaGlsZFVSTCwgZnVuY3Rpb24gKG1zZykgewogICAgICAgICAgICAgICAgLy9UT0RPOiB3aGF0IHRvZG8gaGVyZT8gU2F2ZSBjaGlsZHJlbnM/CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3luY2hlck1hbmFnZXItJyArIGNoaWxkVVJMICsgJy1SQ1Y6ICcsIG1zZyk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goY2hpbGRMaXN0ZW5lcik7CgogICAgICAgICAgICAgIHZhciBzZWxmRm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChjaGlsZFVSTCwgX3RoaXMuX293bmVyKTsKICAgICAgICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBtc2ctbm9kZSBzdWJzY3JpcHRpb246ICcgKyByZXBseS5ib2R5LmRlc2MpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdkZWxldGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkoX3RoaXMuX293bmVyKS5kb21haW47CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgZGlyZWN0bHkgdG8gYWxsIHN1YnNjcmliZXJzIG9mIHRoZSByZXBvcnRlcgogICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMLCB0bzogX3RoaXMuX3VybCArICcvY2hhbmdlcycKICAgICAgfSk7CgogICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIE9iamVjdEFsbG9jYXRpb25NYW5hZ2VyIGNvbXBvbmVudAogICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL29iamVjdC1hZGRyZXNzLWFsbG9jYXRpb24nLAogICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwsIGNoaWxkcmVuUmVzb3VyY2VzOiBfdGhpcy5fY2hpbGRyZW5zIH0KICAgICAgfSk7CgogICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpOwogICAgICBkZWxldGUgX3RoaXMuX3BhcmVudC5fcmVwb3J0ZXJzW190aGlzLl91cmxdOwogICAgfQogIH0sIHsKICAgIGtleTogJ19vblJlbW90ZVJlc3BvbnNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZW1vdGVSZXNwb25zZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IF90aGlzLl91cmwsCiAgICAgICAgYm9keTogeyBjb2RlOiBtc2cuYm9keS5jb2RlLCBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHNvdXJjZTogbXNnLmZyb20gfQogICAgICB9KTsKICAgIH0KCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBTeW5jaGVyIC0+IHN1YnNjcmliZQoKICB9LCB7CiAgICBrZXk6ICdfb25SZW1vdGVTdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlbW90ZVN1YnNjcmliZShtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIGh5cGVydHlVUkwgPSBtc2cuYm9keS5zdWJzY3JpYmVyOwoKICAgICAgLy92YWxpZGF0ZSBpZiBzdWJzY3JpcHRpb24gYWxyZWFkeSBleGlzdHM/CiAgICAgIGlmIChfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSkgewogICAgICAgIC8vIGxldCBlcnJvck1zZyA9IHsKICAgICAgICAvLyAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsCiAgICAgICAgLy8gICBib2R5OiB7IGNvZGU6IDUwMCwgZGVzYzogJ1N1YnNjcmlwdGlvbiBmb3IgKCcgKyBfdGhpcy5fdXJsICsgJyA6ICcgKyAgaHlwZXJ0eVVSTCArICcpIGFscmVhZHkgZXhpc3RzIScgfQogICAgICAgIC8vIH07CiAgICAgICAgLy8KICAgICAgICAvLyBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKGVycm9yTXNnKTsKICAgICAgICAvLyByZXR1cm47CgogICAgICAgIC8vIG5ldyB2ZXJzaW9uIGJlY2F1c2Ugb2YgcmV1c2FnZQogICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdLl9yZWxlYXNlTGlzdGVuZXJzKCk7CiAgICAgIH0KCiAgICAgIC8vYXNrIHRvIHN1YnNjcmliZSB0byBTeW5jaGVyPyAoZGVwZW5kcyBvbiB0aGUgb3BlcmF0aW9uIG1vZGUpCiAgICAgIC8vVE9ETzogZ2V0IG1vZGUgZnJvbSBvYmplY3QhCiAgICAgIHZhciBtb2RlID0gJ3N1Yi9wdWInOwoKICAgICAgaWYgKG1vZGUgPT09ICdzdWIvcHViJykgewogICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBsb2NhbCBoeXBlcnR5IGFkZHJlc3MgU3luY2hlciAtPiBfb25Gb3J3YXJkCiAgICAgICAgdmFyIGZvcndhcmRNc2cgPSB7CiAgICAgICAgICB0eXBlOiAnZm9yd2FyZCcsIGZyb206IF90aGlzLl91cmwsIHRvOiBfdGhpcy5fb3duZXIsCiAgICAgICAgICBib2R5OiB7IHR5cGU6IG1zZy50eXBlLCBmcm9tOiBoeXBlcnR5VVJMLCB0bzogX3RoaXMuX3VybCwgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5IH0KICAgICAgICB9OwoKICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKGZvcndhcmRNc2csIGZ1bmN0aW9uIChyZXBseSkgewogICAgICAgICAgY29uc29sZS5sb2coJ2ZvcndhcmQtcmVwbHk6ICcsIHJlcGx5KTsKICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewogICAgICAgICAgICBpZiAoIV90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdKSB7CiAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF0gPSBuZXcgX1N1YnNjcmlwdGlvbjIuZGVmYXVsdChfdGhpcy5fYnVzLCBfdGhpcy5fb3duZXIsIF90aGlzLl91cmwsIF90aGlzLl9jaGlsZHJlbnMsIHRydWUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLy8gU3RvcmUgZm9yIGVhY2ggcmVwb3J0ZXIgaHlwZXJ0eSB0aGUgZGF0YU9iamVjdAogICAgICAgICAgdmFyIHVzZXJVUkwgPSB2b2lkIDA7CiAgICAgICAgICBpZiAobXNnLmJvZHkuaWRlbnRpdHkgJiYgbXNnLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTCkgewogICAgICAgICAgICB1c2VyVVJMID0gbXNnLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTDsKICAgICAgICAgICAgX3RoaXMuX3BhcmVudC5fc3RvcmVEYXRhT2JqZWN0cy51cGRhdGUoX3RoaXMuX3VybCwgJ3N1YnNjcmliZXJVc2VycycsIHVzZXJVUkwpOwogICAgICAgICAgfQoKICAgICAgICAgIF90aGlzLl9wYXJlbnQuX3N0b3JlRGF0YU9iamVjdHMudXBkYXRlKF90aGlzLl91cmwsICdzdWJzY3JpcHRpb25zJywgaHlwZXJ0eVVSTCk7CgogICAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaXB0aW9uIHJlc3BvbnNlIHNlbnQgKGZvcndhcmQgZnJvbSBpbnRlcm5hbCBIeXBlcnR5KQogICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAogICAgICAgICAgICBib2R5OiByZXBseS5ib2R5CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfQogICAgfQoKICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIHJlbW90ZSBPYnNlcnZlck9iamVjdCAtPiByZW1vdmVTdWJzY3JpcHRpb24KCiAgfSwgewogICAga2V5OiAnX29uUmVtb3RlVW5TdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlbW90ZVVuU3Vic2NyaWJlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgICB2YXIgaHlwZXJ0eVVSTCA9IG1zZy5ib2R5LnN1YnNjcmliZXI7CgogICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF07CiAgICAgIGlmIChzdWJzY3JpcHRpb24pIHsKICAgICAgICBzdWJzY3JpcHRpb24uX3JlbGVhc2VMaXN0ZW5lcnMoKTsKICAgICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF07CgogICAgICAgIC8vVE9ETzogc2VuZCB1bi1zdWJzY3JpYmUgbWVzc2FnZSB0byBTeW5jaGVyPyAoZGVwZW5kcyBvbiB0aGUgb3BlcmF0aW9uIG1vZGUpCiAgICAgIH0KICAgIH0KICB9XSk7CiAgcmV0dXJuIFJlcG9ydGVyT2JqZWN0Owp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBSZXBvcnRlck9iamVjdDsKbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107Cgp9LHsiLi4vdXRpbHMvdXRpbHMiOjQ1NywiLi9TdWJzY3JpcHRpb24iOjQ1MywiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjoxMCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjEyLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2fV0sNDUyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9mcm9tID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL2FycmF5L2Zyb20nKTsKCnZhciBfZnJvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mcm9tKTsKCnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpOwoKdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKdmFyIF9wcm9taXNlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UnKTsKCnZhciBfcHJvbWlzZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7Cgp2YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpOwoKdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCnZhciBTdG9yZURhdGFPYmplY3RzID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFN0b3JlRGF0YU9iamVjdHMoc3RvcmFnZU1hbmFnZXIpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFN0b3JlRGF0YU9iamVjdHMpOwoKICAgIGlmICghc3RvcmFnZU1hbmFnZXIpIHRocm93IG5ldyBFcnJvcignW1N0b3JlIERhdGEgT2JqZWN0c10gLSBOZWVkcyB0aGUgc3RvcmFnZU1hbmFnZXIgY29tcG9uZW50Jyk7CgogICAgdGhpcy5fc3RvcmFnZU1hbmFnZXIgPSBzdG9yYWdlTWFuYWdlcjsKICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdCA9IHt9OwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3RvcmVEYXRhT2JqZWN0cywgW3sKICAgIGtleTogJ3NldCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KHJlc291cmNlLCBpc1JlcG9ydGVyLCBzY2hlbWEsIHN0YXR1cywgZGF0YSwgc3Vic2NyaXB0aW9uLCBjaGlsZHJlbiwgY2hpbGRyZW5SZXNvdXJjZXMsIHN1YnNjcmliZXJVc2VyKSB7CgogICAgICB2YXIgdHlwZSA9IHRoaXMuX2dldFR5cGVPZk9iamVjdChpc1JlcG9ydGVyKTsKICAgICAgaWYgKCF0aGlzLl9zdG9yZURhdGFPYmplY3QuaGFzT3duUHJvcGVydHkodHlwZSkpIHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXSA9IHt9OwoKICAgICAgaWYgKCF0aGlzLl9zdG9yZURhdGFPYmplY3RbdHlwZV0uaGFzT3duUHJvcGVydHkocmVzb3VyY2UpKSB7CiAgICAgICAgdGhpcy5fc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXSA9IHsKICAgICAgICAgIHJlc291cmNlOiByZXNvdXJjZSwKICAgICAgICAgIGlzUmVwb3J0ZXI6IGlzUmVwb3J0ZXIsCiAgICAgICAgICBzdWJzY3JpcHRpb25zOiBbXSwKICAgICAgICAgIHN1YnNjcmliZXJVc2VyczogW10KICAgICAgICB9OwogICAgICB9CgogICAgICBpZiAoZGF0YSkgdGhpcy5fc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXS5kYXRhID0gZGF0YTsKICAgICAgaWYgKHNjaGVtYSkgdGhpcy5fc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXS5zY2hlbWEgPSBzY2hlbWE7CiAgICAgIGlmIChzdGF0dXMpIHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV0uc3RhdHVzID0gc3RhdHVzOwogICAgICBpZiAoY2hpbGRyZW4pIHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV0uY2hpbGRyZW4gPSBjaGlsZHJlbjsKICAgICAgaWYgKGNoaWxkcmVuUmVzb3VyY2VzKSB0aGlzLl9zdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdLmNoaWxkcmVuUmVzb3VyY2VzID0gY2hpbGRyZW5SZXNvdXJjZXM7CgogICAgICBpZiAoc3Vic2NyaXB0aW9uICYmICFpc1JlcG9ydGVyKSB7CiAgICAgICAgdGhpcy5fdXBkYXRlVG9BcnJheShyZXNvdXJjZSwgJ3N1YnNjcmlwdGlvbnMnLCBzdWJzY3JpcHRpb24sIHR5cGUpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV0ub3duZXIgPSBzdWJzY3JpcHRpb247CiAgICAgIH0KCiAgICAgIGlmIChzdWJzY3JpYmVyVXNlcikgewogICAgICAgIGlmICh0aGlzLl9zdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdLnN1YnNjcmliZXJVc2Vycy5pbmRleE9mKHN1YnNjcmliZXJVc2VyKSkgewogICAgICAgICAgdGhpcy5fdXBkYXRlVG9BcnJheShyZXNvdXJjZSwgJ3N1YnNjcmliZXJVc2VycycsIHN1YnNjcmliZXJVc2VyLCB0eXBlKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMnLCAxLCB0aGlzLl9zdG9yZURhdGFPYmplY3QpOwogICAgfQogIH0sIHsKICAgIGtleTogJ3VwZGF0ZURhdGEnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZURhdGEocmVzb3VyY2UsIGtleSwgYXR0cmlidXRlLCB2YWx1ZSkgewogICAgICB2YXIgaXNSZXBvcnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogdHJ1ZTsKCiAgICAgIHZhciB0eXBlID0gdGhpcy5fZ2V0VHlwZU9mT2JqZWN0KGlzUmVwb3J0ZXIpOwoKICAgICAgaWYgKHRoaXMuX3N0b3JlRGF0YU9iamVjdC5oYXNPd25Qcm9wZXJ0eSh0eXBlKSAmJiB0aGlzLl9zdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdICYmIHJlc291cmNlICYmIGtleSAmJiB2YWx1ZSkgewoKICAgICAgICBpZiAoa2V5ID09PSAnc3Vic2NyaXB0aW9ucycgfHwga2V5ID09PSAnc3Vic2NyaWJlclVzZXJzJykgewogICAgICAgICAgdGhpcy5fdXBkYXRlVG9BcnJheShyZXNvdXJjZSwga2V5LCB2YWx1ZSwgdHlwZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV1ba2V5XVthdHRyaWJ1dGVdID0gdmFsdWU7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpcy5fc3RvcmFnZU1hbmFnZXIuc2V0KCdzeW5jaGVyTWFuYWdlcjpPYmplY3RVUkxzJywgMSwgdGhpcy5fc3RvcmVEYXRhT2JqZWN0KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ3VwZGF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKHJlc291cmNlLCBrZXksIHZhbHVlKSB7CiAgICAgIHZhciBpc1JlcG9ydGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB0cnVlOwoKICAgICAgdmFyIHR5cGUgPSB0aGlzLl9nZXRUeXBlT2ZPYmplY3QoaXNSZXBvcnRlcik7CgogICAgICBpZiAodGhpcy5fc3RvcmVEYXRhT2JqZWN0W3R5cGVdICYmIHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV0gJiYgcmVzb3VyY2UgJiYga2V5ICYmIHZhbHVlKSB7CgogICAgICAgIGlmIChrZXkgPT09ICdzdWJzY3JpcHRpb25zJyB8fCBrZXkgPT09ICdzdWJzY3JpYmVyVXNlcnMnKSB7CiAgICAgICAgICB2YXIgdXBkYXRlID0gdHJ1ZTsKCiAgICAgICAgICBpZiAoa2V5ID09PSAnc3Vic2NyaXB0aW9ucycpIHsKICAgICAgICAgICAgdXBkYXRlID0gIXRoaXMuX2lzT3duZXIodGhpcy5fc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXSwgdmFsdWUpOwogICAgICAgICAgfQoKICAgICAgICAgIGlmICh1cGRhdGUpIHRoaXMuX3VwZGF0ZVRvQXJyYXkocmVzb3VyY2UsIGtleSwgdmFsdWUsIHR5cGUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLl9zdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdW2tleV0gPSB2YWx1ZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMnLCAxLCB0aGlzLl9zdG9yZURhdGFPYmplY3QpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnZGVsZXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKHJlc291cmNlLCBrZXksIHZhbHVlKSB7CiAgICAgIHZhciBpc1JlcG9ydGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB0cnVlOwoKCiAgICAgIHZhciB0eXBlID0gdGhpcy5fZ2V0VHlwZU9mT2JqZWN0KGlzUmVwb3J0ZXIpOwoKICAgICAgaWYgKHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXSAmJiB0aGlzLl9zdG9yZURhdGFPYmplY3RbdHlwZV1bcmVzb3VyY2VdICYmIHJlc291cmNlICYmIGtleSAmJiB2YWx1ZSkgewoKICAgICAgICBpZiAoa2V5ID09PSAnc3Vic2NyaXB0aW9ucycgfHwga2V5ID09PSAnc3Vic2NyaWJlclVzZXJzJykgewogICAgICAgICAgdGhpcy5fcmVtb3ZlRnJvbUFycmF5KHJlc291cmNlLCBrZXksIHZhbHVlLCB0eXBlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGVsZXRlIHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV1ba2V5XTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMnLCAxLCB0aGlzLl9zdG9yZURhdGFPYmplY3QpOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiBUT0RPOiBjaGVjayBpZiB0aGlzIHByb2Nlc3MgaXMgdmlhYmxlIGJlY2F1c2UgdGhlIHN0b3JhZ2UgbWFuYWdlciBhYmlsaXR5IHRvIGRlbGV0ZQogICAgICogbm93IHRoZSBzdG9yYWdlTWFuYWdlciBvbmx5IGNhbiBkZWxldGUgYW4gc3BlY2lmaWMga2V5LCBidXQgbm90IHRoZSBzcGVjaWZpYyB2YWx1ZSBpbnNpZGUgdGhhdCBrZXk7CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnZGVsZXRlUmVzb3VyY2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZVJlc291cmNlKHJlc291cmNlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAocmVzb3VyY2UpIHsKCiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QWxsKCkudGhlbihmdW5jdGlvbiAoc3RvcmVkRGF0YU9iamVjdHMpIHsKICAgICAgICAgIHZhciB0bXAgPSBzdG9yZWREYXRhT2JqZWN0czsKCiAgICAgICAgICBpZiAodG1wLmhhc093blByb3BlcnR5KHJlc291cmNlKSkgewogICAgICAgICAgICBkZWxldGUgdG1wLm9ic2VydmVyc1tyZXNvdXJjZV07CiAgICAgICAgICAgIGRlbGV0ZSB0bXAucmVwb3J0ZXJzW3Jlc291cmNlXTsKICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOk9iamVjdFVSTHMnLCAxLCB0bXApOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcignW1N0b3JlRGF0YU9iamVjdHNdIC0gQ2FuXCd0IGRlbGV0ZSB0aGlzICcgKyByZXNvdXJjZSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdnZXRBbGwnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFsbCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3N0b3JhZ2VNYW5hZ2VyLmdldCgnc3luY2hlck1hbmFnZXI6T2JqZWN0VVJMcycpOwogICAgfQogIH0sIHsKICAgIGtleTogJ2dldCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KHJlc291cmNlKSB7CiAgICAgIGlmICh0aGlzLl9zdG9yZURhdGFPYmplY3RbcmVzb3VyY2VdKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3N0b3JlRGF0YU9iamVjdFtyZXNvdXJjZV07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbU3RvcmVEYXRhT2JqZWN0c10gLSBDYW5cJ3QgZmluZCB0aGlzICcgKyByZXNvdXJjZSk7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnZ2V0UmVzb3VyY2VzQnlDcml0ZXJpYScsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVzb3VyY2VzQnlDcml0ZXJpYShtc2csIGlzUmVwb3J0ZXIpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlKSB7CgogICAgICAgIHZhciB0eXBlID0gX3RoaXMyLl9nZXRUeXBlT2ZPYmplY3QoaXNSZXBvcnRlcik7CgogICAgICAgIF90aGlzMi5nZXRBbGwoKS50aGVuKGZ1bmN0aW9uIChzdG9yZWREYXRhT2JqZWN0cykgewoKICAgICAgICAgIGlmICghc3RvcmVkRGF0YU9iamVjdHMpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2RvblwndCBoYXZlIHN0b3JlZCBkYXRhIG9iamVjdHMnKTsKICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUobnVsbCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKG1zZy5ib2R5ICYmIG1zZy5ib2R5Lmhhc093blByb3BlcnR5KCdyZXN1bWUnKSAmJiAhbXNnLmJvZHkucmVzdW1lKSB7CiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKG51bGwpOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBtZXNzYWdlIGhhdmUgb3RoZXIgY3JpdGVyaWEKICAgICAgICAgIC8vIGlmIG5vdCBzZWFyY2ggZm9yIG9uIHRoZSAnZnJvbScgb2YgdGhlIG1lc3NhZ2UuCiAgICAgICAgICB2YXIgcmVzdWx0ID0gW107CiAgICAgICAgICB2YXIgaGFzU3Vic2NyaXB0aW9uID0gX3RoaXMyLl9oYXNTdWJzY3JpcHRpb24oc3RvcmVkRGF0YU9iamVjdHNbdHlwZV0sIG1zZy5mcm9tKTsKICAgICAgICAgIHZhciBpc093bmVyID0gX3RoaXMyLl9zZWFyY2hPd25lcihzdG9yZWREYXRhT2JqZWN0c1t0eXBlXSwgbXNnLmZyb20pOwoKICAgICAgICAgIGlmIChtc2cuaGFzT3duUHJvcGVydHkoJ2Zyb20nKSAmJiBoYXNTdWJzY3JpcHRpb24gfHwgaXNPd25lcikgewogICAgICAgICAgICB2YXIgcmVzb3VyY2UgPSBfdGhpczIuX2dldFJlc291cmNlc0J5U3Vic2NyaXB0aW9uKHN0b3JlZERhdGFPYmplY3RzW3R5cGVdLCBtc2cuZnJvbSk7CgogICAgICAgICAgICB2YXIgaWRlbnRpdHlGb3VuZERhdGEgPSBbXTsKICAgICAgICAgICAgaWYgKG1zZy5ib2R5ICYmIG1zZy5ib2R5LmlkZW50aXR5KSBpZGVudGl0eUZvdW5kRGF0YSA9IF90aGlzMi5fZ2V0UmVzb3VyY2VzQnlJZGVudGl0eShzdG9yZWREYXRhT2JqZWN0c1t0eXBlXSwgbXNnLmJvZHkuaWRlbnRpdHkpOwoKICAgICAgICAgICAgdmFyIHNjaGVtYUZvdW5kRGF0YSA9IFtdOwogICAgICAgICAgICBpZiAobXNnLmJvZHkgJiYgbXNnLmJvZHkuc2NoZW1hKSBzY2hlbWFGb3VuZERhdGEgPSBfdGhpczIuX2dldFJlc291cmNlc0J5U2NoZW1hKHN0b3JlZERhdGFPYmplY3RzW3R5cGVdLCBtc2cuYm9keS5zY2hlbWEpOwoKICAgICAgICAgICAgdmFyIGRhdGFGb3VuZCA9IFtdOwogICAgICAgICAgICBpZiAobXNnLmJvZHkgJiYgbXNnLmJvZHkudmFsdWUpIGRhdGFGb3VuZCA9IF90aGlzMi5fZ2V0UmVzb3VyY2VzQnlEYXRhKHN0b3JlZERhdGFPYmplY3RzW3R5cGVdLCBtc2cuYm9keS52YWx1ZSk7CgogICAgICAgICAgICAvLyB5b3UgY2FuIHBhc3MgYXMgYXJyYXlzIGFzIHlvdSB3YW50Li4gaXQgd2lsbCBiZSBtZXJnZWQgaW4gb24gcGxhY2UKICAgICAgICAgICAgLy8gcmVtb3ZlZCBkdXBsaWNhdGVzOwogICAgICAgICAgICByZXN1bHQgPSBfdGhpczIuX2ludGVyc2VjdGlvbihyZXNvdXJjZSwgaWRlbnRpdHlGb3VuZERhdGEsIHNjaGVtYUZvdW5kRGF0YSwgZGF0YUZvdW5kKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKG51bGwpOwogICAgICAgICAgfQoKICAgICAgICAgIHZhciBpbml0ID0ge307CiAgICAgICAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAgIHZhciBjdXJyZW50SXNSZXBvcnRlciA9IHN0b3JlZERhdGFPYmplY3RzW3R5cGVdW2tleV07CiAgICAgICAgICAgIGluaXRba2V5XSA9IGN1cnJlbnRJc1JlcG9ydGVyOwogICAgICAgICAgICByZXR1cm4gaW5pdDsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGNvbnNvbGUubG9nKCdbU3RvcmUgRGF0YSBPYmplY3RzXSAtICcsIGluaXQpOwoKICAgICAgICAgIHJlc29sdmUoaW5pdCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRSZXNvdXJjZXNCeUlkZW50aXR5JywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UmVzb3VyY2VzQnlJZGVudGl0eShzdG9yZWREYXRhLCB1c2VyVVJMKSB7CiAgICAgIGlmICghc3RvcmVkRGF0YSkgcmV0dXJuIFtdOwoKICAgICAgcmV0dXJuICgwLCBfa2V5czIuZGVmYXVsdCkoc3RvcmVkRGF0YSkuZmlsdGVyKGZ1bmN0aW9uIChvYmplY3RVUkwpIHsKICAgICAgICByZXR1cm4gc3RvcmVkRGF0YVtvYmplY3RVUkxdLnN1YnNjcmliZXJVc2Vycy5maWx0ZXIoZnVuY3Rpb24gKGN1cnJlbnQpIHsKICAgICAgICAgIHJldHVybiBjdXJyZW50ID09PSB1c2VyVVJMOwogICAgICAgIH0pLmxlbmd0aDsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dldFJlc291cmNlc0J5U3Vic2NyaXB0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UmVzb3VyY2VzQnlTdWJzY3JpcHRpb24oc3RvcmVkRGF0YSwgc3Vic2NyaXB0aW9uKSB7CiAgICAgIGlmICghc3RvcmVkRGF0YSkgcmV0dXJuIFtdOwoKICAgICAgcmV0dXJuICgwLCBfa2V5czIuZGVmYXVsdCkoc3RvcmVkRGF0YSkuZmlsdGVyKGZ1bmN0aW9uIChvYmplY3RVUkwpIHsKICAgICAgICByZXR1cm4gc3RvcmVkRGF0YVtvYmplY3RVUkxdLnN1YnNjcmlwdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChjdXJyZW50KSB7CiAgICAgICAgICByZXR1cm4gY3VycmVudCA9PT0gc3Vic2NyaXB0aW9uOwogICAgICAgIH0pLmxlbmd0aDsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dldFJlc291cmNlc0J5U2NoZW1hJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0UmVzb3VyY2VzQnlTY2hlbWEoc3RvcmVkRGF0YSwgc2NoZW1hKSB7CiAgICAgIHJldHVybiAoMCwgX2tleXMyLmRlZmF1bHQpKHN0b3JlZERhdGEpLmZpbHRlcihmdW5jdGlvbiAob2JqZWN0VVJMKSB7CiAgICAgICAgdmFyIGN1cnJlbnRPYmplY3QgPSBzdG9yZWREYXRhW29iamVjdFVSTF07CiAgICAgICAgcmV0dXJuICgwLCBfa2V5czIuZGVmYXVsdCkoY3VycmVudE9iamVjdCkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgIHJldHVybiBrZXkgPT09ICdzY2hlbWEnICYmIGN1cnJlbnRPYmplY3Rba2V5XSA9PT0gc2NoZW1hOwogICAgICAgIH0pLmxlbmd0aDsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2dldFJlc291cmNlc0J5RGF0YScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2dldFJlc291cmNlc0J5RGF0YShzdG9yZWREYXRhLCBkYXRhKSB7CiAgICAgIGlmICghZGF0YSkgcmV0dXJuIFtdOwoKICAgICAgcmV0dXJuICgwLCBfa2V5czIuZGVmYXVsdCkoc3RvcmVkRGF0YSkuZmlsdGVyKGZ1bmN0aW9uIChvYmplY3RVUkwpIHsKICAgICAgICB2YXIgY3VycmVudE9iamVjdCA9IHN0b3JlZERhdGFbb2JqZWN0VVJMXS5kYXRhOwogICAgICAgIHJldHVybiAoMCwgX2tleXMyLmRlZmF1bHQpKGN1cnJlbnRPYmplY3QpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgICAvLyBzZWFyY2ggb24gc3RvcmVEYXRhT2JqZWN0cyBmb3Igc3BlY2lmaWMga2V5IHByb3ZpZGVkIGZyb20gZGF0YTsKICAgICAgICAgIHJldHVybiAoMCwgX2tleXMyLmRlZmF1bHQpKGRhdGEpLmZpbHRlcihmdW5jdGlvbiAoc2VhcmNoRm9yKSB7CiAgICAgICAgICAgIHJldHVybiBrZXkgPT09IHNlYXJjaEZvciAmJiBjdXJyZW50T2JqZWN0W2tleV0gPT09IGRhdGFbc2VhcmNoRm9yXTsKICAgICAgICAgIH0pLmxlbmd0aDsKICAgICAgICB9KS5sZW5ndGg7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19oYXNTdWJzY3JpcHRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9oYXNTdWJzY3JpcHRpb24oc3RvcmVkRGF0YSwgc3Vic2NyaXB0aW9uKSB7CiAgICAgIGlmICghc3RvcmVkRGF0YSkgcmV0dXJuIGZhbHNlOwoKICAgICAgcmV0dXJuICgwLCBfa2V5czIuZGVmYXVsdCkoc3RvcmVkRGF0YSkuZmlsdGVyKGZ1bmN0aW9uIChvYmplY3RVUkwpIHsKICAgICAgICByZXR1cm4gc3RvcmVkRGF0YVtvYmplY3RVUkxdLnN1YnNjcmlwdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChjdXJyZW50KSB7CiAgICAgICAgICByZXR1cm4gY3VycmVudCA9PT0gc3Vic2NyaXB0aW9uOwogICAgICAgIH0pLmxlbmd0aDsKICAgICAgfSkubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfc2VhcmNoT3duZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZWFyY2hPd25lcihzdG9yZWREYXRhLCBmcm9tKSB7CiAgICAgIGlmICghc3RvcmVkRGF0YSkgcmV0dXJuIGZhbHNlOwoKICAgICAgcmV0dXJuICgwLCBfa2V5czIuZGVmYXVsdCkoc3RvcmVkRGF0YSkuZmlsdGVyKGZ1bmN0aW9uIChvYmplY3RVUkwpIHsKICAgICAgICByZXR1cm4gc3RvcmVkRGF0YVtvYmplY3RVUkxdLm93bmVyID09PSBmcm9tOwogICAgICB9KS5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogJ19pc093bmVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNPd25lcih2YWx1ZSwgdXJsKSB7CiAgICAgIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTsKICAgICAgcmV0dXJuIHZhbHVlLm93bmVyID09PSB1cmwgPyB0cnVlIDogZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2ludGVyc2VjdGlvbicsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2ludGVyc2VjdGlvbigpIHsKICAgICAgdmFyIGFyZ3MgPSAoMCwgX2Zyb20yLmRlZmF1bHQpKGFyZ3VtZW50cyk7CgogICAgICB2YXIgcmVzdWx0ID0gYXJncy5yZWR1Y2UoZnVuY3Rpb24gKGZpcnN0LCBzZWNvbmQpIHsKICAgICAgICByZXR1cm4gZmlyc3QuY29uY2F0KHNlY29uZCk7CiAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBzZWxmKSB7CiAgICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4OwogICAgICB9KTsKICAgICAgY29uc29sZS5sb2coJ1Jlc3VsdCBhbiB1bmlxdWUgYXJyYXkgb2Ygc3RyaW5nczogJywgcmVzdWx0KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfdXBkYXRlVG9BcnJheScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3VwZGF0ZVRvQXJyYXkocmVzb3VyY2UsIGtleSwgdmFsdWUsIHR5cGUpIHsKICAgICAgaWYgKHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV1ba2V5XS5pbmRleE9mKHZhbHVlKSkgdGhpcy5fc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXVtrZXldLnB1c2godmFsdWUpOwogICAgfQogIH0sIHsKICAgIGtleTogJ19yZW1vdmVGcm9tQXJyYXknLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW1vdmVGcm9tQXJyYXkocmVzb3VyY2UsIGtleSwgdmFsdWUsIHR5cGUpIHsKICAgICAgdmFyIGluZGV4T2ZWYWx1ZSA9IHRoaXMuX3N0b3JlRGF0YU9iamVjdFt0eXBlXVtyZXNvdXJjZV1ba2V5XS5pbmRleE9mKHZhbHVlKTsKICAgICAgaWYgKGluZGV4T2ZWYWx1ZSkgdGhpcy5fc3RvcmVEYXRhT2JqZWN0W3R5cGVdW3Jlc291cmNlXVtrZXldLnNwbGljZShpbmRleE9mVmFsdWUsIDEpOwogICAgfQogIH0sIHsKICAgIGtleTogJ19oYXNWYWx1ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhc1ZhbHVlKG9iaiwga2V5LCB2YWx1ZSkgewogICAgICByZXR1cm4gb2JqLmhhc093blByb3BlcnR5KGtleSkgJiYgb2JqW2tleV0gPT09IHZhbHVlOwogICAgfQogIH0sIHsKICAgIGtleTogJ19nZXRUeXBlT2ZPYmplY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRUeXBlT2ZPYmplY3QoaXNSZXBvcnRlcikgewogICAgICByZXR1cm4gaXNSZXBvcnRlciA/ICdyZXBvcnRlcnMnIDogJ29ic2VydmVycyc7CiAgICB9CiAgfV0pOwogIHJldHVybiBTdG9yZURhdGFPYmplY3RzOwp9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBTdG9yZURhdGFPYmplY3RzOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2NvcmUtanMvYXJyYXkvZnJvbSI6MiwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjoxMCwiYmFiZWwtcnVudGltZS9jb3JlLWpzL3Byb21pc2UiOjEyLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2fV0sNDUzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTsKCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7Cgp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKdmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oYnVzLCBvd25lciwgdXJsLCBjaGlsZHJlbnMsIGlzUmVwb3J0ZXIpIHsKICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFN1YnNjcmlwdGlvbik7CgogICAgdmFyIF90aGlzID0gdGhpczsKICAgIHZhciBjaGlsZEJhc2VVUkwgPSB1cmwgKyAnL2NoaWxkcmVuLyc7CiAgICB2YXIgY2hhbmdlVVJMID0gdXJsICsgJy9jaGFuZ2VzJzsKCiAgICAvL3Byb2Nlc3MgZGVsZXRlIG1lc3NhZ2UKICAgIF90aGlzLl9kZWxldGVMaXN0ZW5lciA9IGJ1cy5hZGRMaXN0ZW5lcihjaGFuZ2VVUkwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgaWYgKG1zZy50eXBlID09PSAnZGVsZXRlJykgewogICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24tREVMRVRFOiAnLCBtc2cpOwoKICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gYWxsIHN1YnNjcmliZXJzCiAgICAgICAgdmFyIGRlbGV0ZU1lc3NhZ2VUb0h5cGVydHkgPSB7CiAgICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogbXNnLmZyb20sIHRvOiBvd25lciwKICAgICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCByZXNvdXJjZTogdXJsIH0KICAgICAgICB9OwoKICAgICAgICAvL3NlbmQgZGVsZXRlIHRvIGh5cGVydHkKICAgICAgICBidXMucG9zdE1lc3NhZ2UoZGVsZXRlTWVzc2FnZVRvSHlwZXJ0eSwgZnVuY3Rpb24gKHJlcGx5KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnU3Vic2NyaXB0aW9uLURFTEVURS1SRVBMWTogJywgcmVwbHkpOwogICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CiAgICAgICAgICAgIF90aGlzLl9yZWxlYXNlTGlzdGVuZXJzKCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwoKICAgIC8vYWRkIGNoYW5nZSBwdWJsaXNoIGFkZHJlc3Mgb3IgZm9yd2FyZAogICAgaWYgKGlzUmVwb3J0ZXIpIHsKICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZFB1Ymxpc2goY2hhbmdlVVJMKTsKICAgIH0gZWxzZSB7CiAgICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lciA9IGJ1cy5hZGRGb3J3YXJkKGNoYW5nZVVSTCwgb3duZXIpOwogICAgfQoKICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycyA9IFtdOwogICAgY2hpbGRyZW5zLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7CiAgICAgIHZhciBjaGlsZElkID0gY2hpbGRCYXNlVVJMICsgY2hpbGQ7CgogICAgICAvL2FkZCBjaGlsZHJlbiBwdWJsaXNoIGFkZHJlc3MKICAgICAgdmFyIGNoaWxkcmVuRm9yd2FyZCA9IGJ1cy5hZGRQdWJsaXNoKGNoaWxkSWQpOwogICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChjaGlsZHJlbkZvcndhcmQpOwoKICAgICAgLy9hZGQgc2VsZiBmb3J3YXJkIGlmIGFuIG9ic2VydmVyCiAgICAgIGlmICghaXNSZXBvcnRlcikgewogICAgICAgIHZhciBzZWxmRm9yd2FyZCA9IGJ1cy5hZGRGb3J3YXJkKGNoaWxkSWQsIG93bmVyKTsKICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3Vic2NyaXB0aW9uLCBbewogICAga2V5OiAnX3JlbGVhc2VMaXN0ZW5lcnMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgX3RoaXMuX2RlbGV0ZUxpc3RlbmVyLnJlbW92ZSgpOwoKICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyLnJlbW92ZSgpOwoKICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGZvcndhcmQpIHsKICAgICAgICBmb3J3YXJkLnJlbW92ZSgpOwogICAgICB9KTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFN1YnNjcmlwdGlvbjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gU3Vic2NyaXB0aW9uOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2fV0sNDU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9rZXlzID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzJyk7Cgp2YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7Cgp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpOwoKdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKdmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTsKCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91dGlscycpOwoKdmFyIF9zY2hlbWFWYWxpZGF0aW9uID0gcmVxdWlyZSgnLi4vdXRpbHMvc2NoZW1hVmFsaWRhdGlvbicpOwoKdmFyIF9BZGRyZXNzQWxsb2NhdGlvbiA9IHJlcXVpcmUoJy4uL2FsbG9jYXRpb24vQWRkcmVzc0FsbG9jYXRpb24nKTsKCnZhciBfQWRkcmVzc0FsbG9jYXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQWRkcmVzc0FsbG9jYXRpb24pOwoKdmFyIF9SZXBvcnRlck9iamVjdCA9IHJlcXVpcmUoJy4vUmVwb3J0ZXJPYmplY3QnKTsKCnZhciBfUmVwb3J0ZXJPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVwb3J0ZXJPYmplY3QpOwoKdmFyIF9PYnNlcnZlck9iamVjdCA9IHJlcXVpcmUoJy4vT2JzZXJ2ZXJPYmplY3QnKTsKCnZhciBfT2JzZXJ2ZXJPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfT2JzZXJ2ZXJPYmplY3QpOwoKdmFyIF9NZXNzYWdlRmFjdG9yeSA9IHJlcXVpcmUoJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvTWVzc2FnZUZhY3RvcnknKTsKCnZhciBfU3RvcmVEYXRhT2JqZWN0cyA9IHJlcXVpcmUoJy4vU3RvcmVEYXRhT2JqZWN0cycpOwoKdmFyIF9TdG9yZURhdGFPYmplY3RzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N0b3JlRGF0YU9iamVjdHMpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qKgogKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tCiAqIENvcmUgU3luY3Jvbml6YXRpb24gc3lzdGVtLgogKi8KdmFyIFN5bmNoZXJNYW5hZ2VyID0gZnVuY3Rpb24gKCkgewogIC8qIHByaXZhdGUKICBfdXJsOiBVUkwKICBfYnVzOiBNaW5pQnVzCiAgX3JlZ2lzdHJ5OiBSZWdpc3RyeQogIF9hbGxvY2F0b3I6IEFkZHJlc3NBbGxvY2F0aW9uCiAgIF9yZXBvcnRlcnM6IHsgT2JqZWN0VVJMOiBSZXBvcnRlck9iamVjdCB9CiAgX29ic2VydmVyczogeyBPYmplY3RVUkw6IE9ic2VydmVyT2JqZWN0IH0KICAqLwoKICBmdW5jdGlvbiBTeW5jaGVyTWFuYWdlcihydW50aW1lVVJMLCBidXMsIHJlZ2lzdHJ5LCBjYXRhbG9nLCBzdG9yYWdlTWFuYWdlciwgYWxsb2NhdG9yKSB7CiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTeW5jaGVyTWFuYWdlcik7CgogICAgaWYgKCFydW50aW1lVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIHJ1bnRpbWVVUkwgcGFyYW1ldGVyJyk7CiAgICBpZiAoIWJ1cykgdGhyb3cgbmV3IEVycm9yKCdbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWRzIHRoZSBNZXNzYWdlQnVzIGluc3RhbmNlJyk7CiAgICBpZiAoIXJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIFJlZ2lzdHJ5IGluc3RhbmNlJyk7CiAgICBpZiAoIWNhdGFsb2cpIHRocm93IG5ldyBFcnJvcignW1N5bmNoZXIgTWFuYWdlcl0gLSBuZWVkcyB0aGUgUnVudGltZUNhdGFsb2d1ZSBpbnN0YW5jZScpOwogICAgaWYgKCFzdG9yYWdlTWFuYWdlcikgdGhyb3cgbmV3IEVycm9yKCdbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWQgdGhlIHN0b3JhZ2VNYW5hZ2VyIGluc3RhbmNlJyk7CgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICBfdGhpcy5fYnVzID0gYnVzOwogICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7CiAgICBfdGhpcy5fY2F0YWxvZyA9IGNhdGFsb2c7CiAgICBfdGhpcy5fc3RvcmFnZU1hbmFnZXIgPSBzdG9yYWdlTWFuYWdlcjsKCiAgICAvL1RPRE86IHRoZXNlIHNob3VsZCBiZSBzYXZlZCBpbiBwZXJzaXN0ZW5jZSBlbmdpbmU/CiAgICBfdGhpcy5fdXJsID0gcnVudGltZVVSTCArICcvc20nOwogICAgX3RoaXMuX29iamVjdFVSTCA9IHJ1bnRpbWVVUkwgKyAnL29iamVjdC1hbGxvY2F0aW9uJzsKCiAgICBfdGhpcy5fcmVwb3J0ZXJzID0ge307CiAgICBfdGhpcy5fb2JzZXJ2ZXJzID0ge307CgogICAgX3RoaXMuX3N0b3JlRGF0YU9iamVjdHMgPSBuZXcgX1N0b3JlRGF0YU9iamVjdHMyLmRlZmF1bHQoc3RvcmFnZU1hbmFnZXIpOwoKICAgIC8vVE9ETzogdGhpcyBzaG91bGQgbm90IGJlIGhhcmRjb2RlZCEKICAgIF90aGlzLl9kb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkocnVudGltZVVSTCkuZG9tYWluOwoKICAgIF90aGlzLl9tZiA9IG5ldyBfTWVzc2FnZUZhY3RvcnkuTWVzc2FnZUZhY3RvcnkoZmFsc2UsIHt9KTsKCiAgICBpZiAoYWxsb2NhdG9yKSB7CiAgICAgIF90aGlzLl9hbGxvY2F0b3IgPSBhbGxvY2F0b3I7CiAgICB9IGVsc2UgewogICAgICBfdGhpcy5fYWxsb2NhdG9yID0gbmV3IF9BZGRyZXNzQWxsb2NhdGlvbjIuZGVmYXVsdChfdGhpcy5fb2JqZWN0VVJMLCBidXMsIF90aGlzLl9yZWdpc3RyeSk7CiAgICB9CgogICAgYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLVJDVjogJywgbXNnKTsKICAgICAgc3dpdGNoIChtc2cudHlwZSkgewogICAgICAgIGNhc2UgJ2NyZWF0ZSc6CiAgICAgICAgICBfdGhpcy5fb25DcmVhdGUobXNnKTticmVhazsKICAgICAgICBjYXNlICdkZWxldGUnOgogICAgICAgICAgX3RoaXMuX29uRGVsZXRlKG1zZyk7YnJlYWs7CiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzoKICAgICAgICAgIF90aGlzLl9vbkxvY2FsU3Vic2NyaWJlKG1zZyk7YnJlYWs7CiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOgogICAgICAgICAgX3RoaXMuX29uTG9jYWxVblN1YnNjcmliZShtc2cpO2JyZWFrOwogICAgICB9CiAgICB9KTsKICB9CgogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFN5bmNoZXJNYW5hZ2VyLCBbewogICAga2V5OiAnX29uQ3JlYXRlJywKCgogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gU3luY2hlciAtPiBjcmVhdGUKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DcmVhdGUobXNnKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgaWYgKG1zZy5ib2R5Lmhhc093blByb3BlcnR5KCdyZXN1bWUnKSAmJiAhbXNnLmJvZHkucmVzdW1lKSB7CiAgICAgICAgY29uc29sZS5pbmZvKCdbU3luY2hlck1hbmFnZXIgLSBDcmVhdGUgTmV3IE9iamVjdF0nLCBtc2cpOwogICAgICAgIHRoaXMuX25ld0NyZWF0ZShtc2cpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdHMuZ2V0UmVzb3VyY2VzQnlDcml0ZXJpYShtc2csIHRydWUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewoKICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1N5bmNoZXJNYW5hZ2VyIC0gQ3JlYXRlIFJlc3VtZWQgT2JqZWN0XScsIG1zZyk7CgogICAgICAgICAgaWYgKHJlc3VsdCAmJiAoMCwgX2tleXMyLmRlZmF1bHQpKHJlc3VsdCkubGVuZ3RoID4gMCkgewoKICAgICAgICAgICAgLy8gVE9ETzogc2hvdWxkIHJldXNlIHRoZSBzdG9yYWdlZCBpbmZvcm1hdGlvbgogICAgICAgICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAob2JqVVJMKSB7CiAgICAgICAgICAgICAgX3RoaXMyLl9yZXN1bWVDcmVhdGUobXNnLCByZXN1bHRbb2JqVVJMXSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy9mb3J3YXJkIHRvIGh5cGVydHk6CiAgICAgICAgICAgIHZhciByZXBseSA9IHt9OwogICAgICAgICAgICByZXBseS5pZCA9IG1zZy5pZDsKICAgICAgICAgICAgcmVwbHkuZnJvbSA9IG1zZy50bzsKICAgICAgICAgICAgcmVwbHkudG8gPSBtc2cuZnJvbTsKICAgICAgICAgICAgcmVwbHkudHlwZSA9ICdyZXNwb25zZSc7CiAgICAgICAgICAgIHJlcGx5LmJvZHkgPSB7CiAgICAgICAgICAgICAgY29kZTogNDA0LAogICAgICAgICAgICAgIGRlc2M6ICdObyBkYXRhIG9iamVjdHMgdG8gYmUgcmVzdW1lZCcKICAgICAgICAgICAgfTsKICAgICAgICAgICAgX3RoaXMyLl9idXMucG9zdE1lc3NhZ2UocmVwbHkpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX25ld0NyZWF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX25ld0NyZWF0ZShtc2cpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG93bmVyID0gbXNnLmZyb207CiAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkobXNnLmZyb20pLmRvbWFpbjsKCiAgICAgIGlmIChtc2cuYm9keS5yZXNvdXJjZSkgewogICAgICAgIF90aGlzLl9hdXRob3Jpc2UobXNnLCBtc2cuYm9keS5yZXNvdXJjZSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICAvL2dldCBzY2hlbWEgZnJvbSBjYXRhbG9ndWUgYW5kIHBhcnNlIC0+IChzY2hlbWUsIGNoaWxkcmVuKQogICAgICBfdGhpcy5fY2F0YWxvZy5nZXREYXRhU2NoZW1hRGVzY3JpcHRvcihtc2cuYm9keS5zY2hlbWEpLnRoZW4oZnVuY3Rpb24gKGRlc2NyaXB0b3IpIHsKCiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzOwogICAgICAgIHZhciBzY2hlbWUgPSBwcm9wZXJ0aWVzLnNjaGVtZSA/IHByb3BlcnRpZXMuc2NoZW1lLmNvbnN0YW50IDogJ3Jlc291cmNlJzsKICAgICAgICB2YXIgY2hpbGRyZW5zID0gcHJvcGVydGllcy5jaGlsZHJlbiA/IHByb3BlcnRpZXMuY2hpbGRyZW4uY29uc3RhbnQgOiBbXTsKCiAgICAgICAgLy8gRG8gc2NoZW1hIHZhbGlkYXRpb24KICAgICAgICAvLyBUT0RPOiBjaGVjayBpZiBpcyBuZWVkIHRvIGhhbmRsZSB3aXRoIHRoZSByZXN1bHQgb2YgdmFsaWRhdGlvbgogICAgICAgICgwLCBfc2NoZW1hVmFsaWRhdGlvbi5zY2hlbWFWYWxpZGF0aW9uKShzY2hlbWUsIGRlc2NyaXB0b3IsIG1zZy5ib2R5LnZhbHVlKTsKCiAgICAgICAgdmFyIG9iamVjdEluZm8gPSB7CiAgICAgICAgICBuYW1lOiBtc2cuYm9keS52YWx1ZS5uYW1lLAogICAgICAgICAgc2NoZW1hOiBtc2cuYm9keS52YWx1ZS5zY2hlbWEsCiAgICAgICAgICByZXBvcnRlcjogbXNnLmJvZHkudmFsdWUucmVwb3J0ZXIsCiAgICAgICAgICByZXNvdXJjZXM6IG1zZy5ib2R5LnZhbHVlLnJlc291cmNlcwogICAgICAgIH07CgogICAgICAgIC8vIHNob3VsZCByZXN1c2UgZGF0YSBvYmplY3QgdXJsIGlmIGl0IHBhc3NlZAogICAgICAgIHZhciByZXVzZURhdGFPYmplY3QgPSBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZTsKCiAgICAgICAgLy9yZXF1ZXN0IGFkZHJlc3MgYWxsb2NhdGlvbiBvZiBhIG5ldyBvYmplY3QgZnJvbSB0aGUgbXNnLW5vZGUKICAgICAgICBfdGhpcy5fYWxsb2NhdG9yLmNyZWF0ZShkb21haW4sIDEsIG9iamVjdEluZm8sIHNjaGVtZSwgcmV1c2VEYXRhT2JqZWN0KS50aGVuKGZ1bmN0aW9uIChhbGxvY2F0ZWQpIHsKICAgICAgICAgIHZhciBvYmpVUkwgPSBhbGxvY2F0ZWQuYWRkcmVzc1swXTsKCiAgICAgICAgICBjb25zb2xlLmxvZygnQUxMT0NBVE9SIENSRUFURTonLCBhbGxvY2F0ZWQpOwoKICAgICAgICAgIHZhciBzdWJzY3JpcHRpb25VUkwgPSBvYmpVUkwgKyAnL3N1YnNjcmlwdGlvbic7CgogICAgICAgICAgY29uc29sZS5sb2coJ1N1YnNjcmlwdGlvbiBVUkwnLCBzdWJzY3JpcHRpb25VUkwpOwoKICAgICAgICAgIC8vVG8gcmVnaXN0ZXIgdGhlIGRhdGFPYmplY3QgaW4gdGhlIHJ1bnRpbWVSZWdpc3RyeQogICAgICAgICAgY29uc29sZS5pbmZvKCdSZWdpc3RlciBPYmplY3Q6ICcsIG1zZy5ib2R5LnZhbHVlLm5hbWUsIG1zZy5ib2R5LnZhbHVlLnNjaGVtYSwgb2JqVVJMLCBtc2cuYm9keS52YWx1ZS5yZXBvcnRlciwgbXNnLmJvZHkudmFsdWUucmVzb3VyY2VzKTsKICAgICAgICAgIF90aGlzLl9yZWdpc3RyeS5yZWdpc3RlckRhdGFPYmplY3QobXNnLmJvZHkudmFsdWUubmFtZSwgbXNnLmJvZHkudmFsdWUuc2NoZW1hLCBvYmpVUkwsIG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLCBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZXMsIGFsbG9jYXRlZCwgbXNnLmJvZHkuYXV0aG9yaXNlKS50aGVuKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdEYXRhT2JqZWN0IHN1Y2Nlc3NmdWxseSByZWdpc3RlcmVkJywgcmVzb2x2ZSk7CgogICAgICAgICAgICAvL2FsbCBPSyAtPiBjcmVhdGUgcmVwb3J0ZXIgYW5kIHJlZ2lzdGVyIGxpc3RlbmVycwogICAgICAgICAgICB2YXIgcmVwb3J0ZXIgPSB2b2lkIDA7CgogICAgICAgICAgICBpZiAoIV90aGlzMy5fcmVwb3J0ZXJzW29ialVSTF0pIHsKICAgICAgICAgICAgICByZXBvcnRlciA9IG5ldyBfUmVwb3J0ZXJPYmplY3QyLmRlZmF1bHQoX3RoaXMsIG93bmVyLCBvYmpVUkwpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHJlcG9ydGVyID0gX3RoaXMzLl9yZXBvcnRlcnNbb2JqVVJMXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTeW5jaGVyTWFuYWdlciAtIG5ldyBDcmVhdGVdIC0gJywgbXNnKTsKCiAgICAgICAgICAgIGlmIChtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgnc3RvcmUnKSAmJiBtc2cuYm9keS5zdG9yZSkgewogICAgICAgICAgICAgIC8vIFN0b3JlIGZvciBlYWNoIHJlcG9ydGVyIGh5cGVydHkgdGhlIGRhdGFPYmplY3QKICAgICAgICAgICAgICB2YXIgdXNlclVSTCA9IHZvaWQgMDsKICAgICAgICAgICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ2lkZW50aXR5JykgJiYgbXNnLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTCkgewogICAgICAgICAgICAgICAgdXNlclVSTCA9IG1zZy5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJVUkw7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfdGhpcy5fc3RvcmVEYXRhT2JqZWN0cy5zZXQob2JqVVJMLCB0cnVlLCBtc2cuYm9keS5zY2hlbWEsICdvbicsIG1zZy5ib2R5LnZhbHVlLCBvd25lciwgbnVsbCwgY2hpbGRyZW5zLCB1c2VyVVJMKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmVwb3J0ZXIuZm9yd2FyZFN1YnNjcmliZShbb2JqVVJMLCBzdWJzY3JpcHRpb25VUkxdKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICByZXBvcnRlci5hZGRDaGlsZHJlbnMoY2hpbGRyZW5zKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIF90aGlzLl9yZXBvcnRlcnNbb2JqVVJMXSA9IHJlcG9ydGVyOwoKICAgICAgICAgICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2UgcmVzcG9uc2UgdG8gU3luY2hlciAtPiBjcmVhdGUKICAgICAgICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lciwKICAgICAgICAgICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHJlc291cmNlOiBvYmpVUkwsIGNoaWxkcmVuUmVzb3VyY2VzOiBjaGlsZHJlbnMgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgLy9zZW5kIGNyZWF0ZSB0byBhbGwgb2JzZXJ2ZXJzLCByZXNwb25zZXMgd2lsbCBiZSBkZWxpdmVyIHRvIHRoZSBIeXBlcnR5IG93bmVyPwogICAgICAgICAgICAgICAgLy9zY2hlZHVsZSBmb3IgbmV4dCBjeWNsZSBuZWVkZWQsIGJlY2F1c2UgdGhlIFJlcG9ydGVyIHNob3VsZCBiZSBhdmFpbGFibGUuCiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgLy93aWxsIGludml0ZSBvdGhlciBoeXBlcnRpZXMKICAgICAgICAgICAgICAgICAgX3RoaXMuX2F1dGhvcmlzZShtc2csIG9ialVSTCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgIC8vRkxPVy1PVVQ6IGVycm9yIG1lc3NhZ2UgcmVzcG9uc2UgdG8gU3luY2hlciAtPiBjcmVhdGUKICAgICAgICB2YXIgcmVzcG9uc2VNc2cgPSB7CiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lciwKICAgICAgICAgIGJvZHk6IHsgY29kZTogNTAwLCBkZXNjOiByZWFzb24gfQogICAgICAgIH07CgogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVzcG9uc2VNc2cpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfcmVzdW1lQ3JlYXRlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzdW1lQ3JlYXRlKG1zZywgc3RvcmVkT2JqZWN0KSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBvd25lciA9IG1zZy5mcm9tOwogICAgICB2YXIgc2NoZW1hID0gc3RvcmVkT2JqZWN0LnNjaGVtYTsKICAgICAgdmFyIHJlc291cmNlID0gc3RvcmVkT2JqZWN0LnJlc291cmNlOwogICAgICB2YXIgaW5pdGlhbERhdGEgPSBzdG9yZWRPYmplY3QuZGF0YTsKCiAgICAgIGNvbnNvbGUubG9nKCdbU3luY2hlck1hbmFnZXJdIC0gcmVzdW1lQ3JlYXRlJywgbXNnKTsKCiAgICAgIHZhciBhdXRoTXNnID0gbXNnOwogICAgICBhdXRoTXNnLmJvZHkuYXV0aG9yaXNlID0gc3RvcmVkT2JqZWN0LnN1YnNjcmlwdGlvbnM7CgogICAgICAvLyAvLyBUT0RPOiBDaGVjayB3aHkgdGhlIF9hdXRob3Jpc2UgaXMgY2FsbGVkOwogICAgICAvLyBpZiAocmVzb3VyY2UpIHsKICAgICAgLy8gICBfdGhpcy5fYXV0aG9yaXNlKGF1dGhNc2csIHJlc291cmNlKTsKICAgICAgLy8gICByZXR1cm47CiAgICAgIC8vIH0KCiAgICAgIC8vZ2V0IHNjaGVtYSBmcm9tIGNhdGFsb2d1ZSBhbmQgcGFyc2UgLT4gKHNjaGVtZSwgY2hpbGRyZW4pCiAgICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKHNjaGVtYSkudGhlbihmdW5jdGlvbiAoZGVzY3JpcHRvcikgewoKICAgICAgICB2YXIgcHJvcGVydGllcyA9IGRlc2NyaXB0b3Iuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXM7CiAgICAgICAgdmFyIHNjaGVtZSA9IHByb3BlcnRpZXMuc2NoZW1lID8gcHJvcGVydGllcy5zY2hlbWUuY29uc3RhbnQgOiAncmVzb3VyY2UnOwogICAgICAgIHZhciBjaGlsZHJlbnMgPSBwcm9wZXJ0aWVzLmNoaWxkcmVuID8gcHJvcGVydGllcy5jaGlsZHJlbi5jb25zdGFudCA6IFtdOwoKICAgICAgICAvLyBEbyBzY2hlbWEgdmFsaWRhdGlvbgogICAgICAgIC8vIFRPRE86IGNoZWNrIGlmIGlzIG5lZWQgdG8gaGFuZGxlIHdpdGggdGhlIHJlc3VsdCBvZiB2YWxpZGF0aW9uCiAgICAgICAgKDAsIF9zY2hlbWFWYWxpZGF0aW9uLnNjaGVtYVZhbGlkYXRpb24pKHNjaGVtZSwgZGVzY3JpcHRvciwgaW5pdGlhbERhdGEpOwoKICAgICAgICAvL2FsbCBPSyAtPiBjcmVhdGUgcmVwb3J0ZXIgYW5kIHJlZ2lzdGVyIGxpc3RlbmVycwogICAgICAgIHZhciByZXBvcnRlciA9IHZvaWQgMDsKCiAgICAgICAgaWYgKCFfdGhpczQuX3JlcG9ydGVyc1tyZXNvdXJjZV0pIHsKICAgICAgICAgIHJlcG9ydGVyID0gbmV3IF9SZXBvcnRlck9iamVjdDIuZGVmYXVsdChfdGhpcywgb3duZXIsIHJlc291cmNlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVwb3J0ZXIgPSBfdGhpczQuX3JlcG9ydGVyc1tyZXNvdXJjZV07CiAgICAgICAgfQoKICAgICAgICBfdGhpcy5fcmVwb3J0ZXJzW3Jlc291cmNlXSA9IHJlcG9ydGVyOwoKICAgICAgICByZXBvcnRlci5yZXN1bWVTdWJzY3JpcHRpb25zKHN0b3JlZE9iamVjdC5zdWJzY3JpcHRpb25zKTsKCiAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSByZXNwb25zZSB0byBTeW5jaGVyIC0+IGNyZWF0ZQogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogb3duZXIsCiAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgcmVzb3VyY2U6IHJlc291cmNlLCBjaGlsZHJlblJlc291cmNlczogY2hpbGRyZW5zLCBzY2hlbWE6IHNjaGVtYSwgdmFsdWU6IHN0b3JlZE9iamVjdC5kYXRhIH0KICAgICAgICB9KTsKCiAgICAgICAgLy8gLy9zZW5kIGNyZWF0ZSB0byBhbGwgb2JzZXJ2ZXJzLCByZXNwb25zZXMgd2lsbCBiZSBkZWxpdmVyIHRvIHRoZSBIeXBlcnR5IG93bmVyPwogICAgICAgIC8vIC8vc2NoZWR1bGUgZm9yIG5leHQgY3ljbGUgbmVlZGVkLCBiZWNhdXNlIHRoZSBSZXBvcnRlciBzaG91bGQgYmUgYXZhaWxhYmxlLgogICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgIC8vICAgLy93aWxsIGludml0ZSBvdGhlciBoeXBlcnRpZXMKICAgICAgICAvLyAgIF90aGlzLl9hdXRob3Jpc2UoYXV0aE1zZywgcmVzb3VyY2UpOwogICAgICAgIC8vIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfYXV0aG9yaXNlJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfYXV0aG9yaXNlKG1zZywgb2JqVVJMKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBvYmpTdWJzY3JpcHRvclVSTCA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJzsKCiAgICAgIG1zZy5ib2R5LmF1dGhvcmlzZS5mb3JFYWNoKGZ1bmN0aW9uIChoeXBlcnR5VVJMKSB7CiAgICAgICAgLy9GTE9XLU9VVDogc2VuZCBpbnZpdGVzIHRvIGxpc3Qgb2YgcmVtb3RlIFN5bmNoZXIgLT4gX29uUmVtb3RlQ3JlYXRlIC0+IG9uTm90aWZpY2F0aW9uCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogb2JqU3Vic2NyaXB0b3JVUkwsIHRvOiBoeXBlcnR5VVJMLAogICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHNvdXJjZTogbXNnLmZyb20sIHZhbHVlOiBtc2cuYm9keS52YWx1ZSwgc2NoZW1hOiBtc2cuYm9keS5zY2hlbWEgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBEYXRhT2JqZWN0UmVwb3J0ZXIgLT4gZGVsZXRlCgogIH0sIHsKICAgIGtleTogJ19vbkRlbGV0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uRGVsZXRlKG1zZykgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlOwoKICAgICAgdmFyIG9iamVjdCA9IF90aGlzLl9yZXBvcnRlcnNbb2JqVVJMXTsKICAgICAgaWYgKG9iamVjdCkgewogICAgICAgIC8vVE9ETzogaXMgdGhlcmUgYW55IHBvbGljeSB2ZXJpZmljYXRpb24gYmVmb3JlIGRlbGV0ZT8KICAgICAgICBvYmplY3QuZGVsZXRlKCk7CgogICAgICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdHMuZGVsZXRlUmVzb3VyY2Uob2JqVVJMKTsKCiAgICAgICAgLy9UT0RPOiB1bnJlZ2lzdGVyIG9iamVjdD8KICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAogICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CgogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gbG9jYWwgU3luY2hlciAtPiBzdWJzY3JpYmUKCiAgfSwgewogICAga2V5OiAnX29uTG9jYWxTdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkxvY2FsU3Vic2NyaWJlKG1zZykgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdHMuZ2V0UmVzb3VyY2VzQnlDcml0ZXJpYShtc2csIGZhbHNlKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKCiAgICAgICAgY29uc29sZS5sb2coJ1tTeW5jaGVyTWFuYWdlciAtIFN1YnNjcmliZV0gLSBmaWx0ZXIgcmVzdWx0JywgcmVzdWx0KTsKCiAgICAgICAgaWYgKHJlc3VsdCAmJiAoMCwgX2tleXMyLmRlZmF1bHQpKHJlc3VsdCkubGVuZ3RoID4gMCkgewoKICAgICAgICAgIC8vIFRPRE86IHNob3VsZCByZXVzZSB0aGUgc3RvcmFnZWQgaW5mb3JtYXRpb24KICAgICAgICAgICgwLCBfa2V5czIuZGVmYXVsdCkocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChvYmpVUkwpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTeW5jaGVyTWFuYWdlciAtIHJlc3VtZSBTdWJzY3JpYmVdIC0gcmV1c2UgY3VycmVudCBvYmplY3QgdXJsOiAnLCByZXN1bHRbb2JqVVJMXSk7CiAgICAgICAgICAgIF90aGlzNS5fcmVzdW1lU3Vic2NyaXB0aW9uKG1zZywgcmVzdWx0W29ialVSTF0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIGlmIChtc2cuYm9keS5zY2hlbWEgJiYgbXNnLmJvZHkucmVzb3VyY2UpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdbU3luY2hlck1hbmFnZXIgLSBuZXcgU3Vic2NyaWJlXSAtICcsIG1zZy5ib2R5LnNjaGVtYSwgbXNnLmJvZHkucmVzb3VyY2UpOwogICAgICAgICAgX3RoaXM1Ll9uZXdTdWJzY3JpcHRpb24obXNnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy9mb3J3YXJkIHRvIGh5cGVydHk6CiAgICAgICAgICB2YXIgcmVwbHkgPSB7fTsKICAgICAgICAgIHJlcGx5LmlkID0gbXNnLmlkOwogICAgICAgICAgcmVwbHkuZnJvbSA9IG1zZy50bzsKICAgICAgICAgIHJlcGx5LnRvID0gbXNnLmZyb207CiAgICAgICAgICByZXBseS50eXBlID0gJ3Jlc3BvbnNlJzsKICAgICAgICAgIHJlcGx5LmJvZHkgPSB7CiAgICAgICAgICAgIGNvZGU6IDQwNCwKICAgICAgICAgICAgZGVzYzogJ05vIGRhdGEgb2JqZWN0cyB0byBiZSByZXN1bWVkJwogICAgICAgICAgfTsKICAgICAgICAgIF90aGlzNS5fYnVzLnBvc3RNZXNzYWdlKHJlcGx5KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogJ19uZXdTdWJzY3JpcHRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9uZXdTdWJzY3JpcHRpb24obXNnKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBvYmpVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTsKCiAgICAgIHZhciBoeXBlcnR5VVJMID0gbXNnLmZyb207CiAgICAgIHZhciBkb21haW4gPSAoMCwgX3V0aWxzLmRpdmlkZVVSTCkob2JqVVJMKS5kb21haW47CiAgICAgIHZhciBvYmpVUkxTdWJzY3JpcHRpb24gPSBvYmpVUkwgKyAnL3N1YnNjcmlwdGlvbic7CgogICAgICB2YXIgY2hpbGRCYXNlVVJMID0gb2JqVVJMICsgJy9jaGlsZHJlbi8nOwoKICAgICAgLy9nZXQgc2NoZW1hIGZyb20gY2F0YWxvZ3VlIGFuZCBwYXJzZSAtPiAoY2hpbGRyZW4pCiAgICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKG1zZy5ib2R5LnNjaGVtYSkudGhlbihmdW5jdGlvbiAoZGVzY3JpcHRvcikgewogICAgICAgIHZhciBwcm9wZXJ0aWVzID0gZGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllczsKICAgICAgICB2YXIgY2hpbGRyZW5zID0gcHJvcGVydGllcy5jaGlsZHJlbiA/IHByb3BlcnRpZXMuY2hpbGRyZW4uY29uc3RhbnQgOiBbXTsKCiAgICAgICAgLy9jaGlsZHJlbiBhZGRyZXNzZXMKICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IFtdOwogICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChvYmpVUkwgKyAnL2NoYW5nZXMnKTsKICAgICAgICBjaGlsZHJlbnMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25zLnB1c2goY2hpbGRCYXNlVVJMICsgY2hpbGQpOwogICAgICAgIH0pOwoKICAgICAgICAvL0ZMT1ctT1VUOiBzdWJzY3JpYmUgbWVzc2FnZSB0byB0aGUgbXNnLW5vZGUsIHJlZ2lzdGVyaW5nIGxpc3RlbmVycyBvbiB0aGUgYnJva2VyCiAgICAgICAgdmFyIG5vZGVTdWJzY3JpYmVNc2cgPSB7CiAgICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9zbScsCiAgICAgICAgICBib2R5OiB7IGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSwgc3Vic2NyaWJlOiBzdWJzY3JpcHRpb25zLCBzb3VyY2U6IGh5cGVydHlVUkwgfQogICAgICAgIH07CgogICAgICAgIC8vc3Vic2NyaWJlIGluIG1zZy1ub2RlCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShub2RlU3Vic2NyaWJlTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCdub2RlLXN1YnNjcmliZS1yZXNwb25zZShvYnNlcnZlcik6ICcsIHJlcGx5KTsKICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewoKICAgICAgICAgICAgLy9GTE9XLU9VVDogcmVwbHkgd2l0aCBwcm92aXNpb25hbCByZXNwb25zZQogICAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBoeXBlcnR5VVJMLAogICAgICAgICAgICAgIGJvZHk6IHsgY29kZTogMTAwLCBjaGlsZHJlblJlc291cmNlczogY2hpbGRyZW5zLCBzY2hlbWE6IG1zZy5ib2R5LnNjaGVtYSwgcmVzb3VyY2U6IG1zZy5ib2R5LnJlc291cmNlIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvL0ZMT1ctT1VUOiBzdWJzY3JpYmUgbWVzc2FnZSB0byByZW1vdGUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlU3Vic2NyaWJlCiAgICAgICAgICAgIHZhciBvYmpTdWJzY3JpYmVNc2cgPSB7CiAgICAgICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl91cmwsIHRvOiBvYmpVUkxTdWJzY3JpcHRpb24sCiAgICAgICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbm9kZVN1YnNjcmliZU1zZy5ib2R5LmlkZW50aXR5LCBzdWJzY3JpYmVyOiBoeXBlcnR5VVJMIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIC8vc3Vic2NyaWJlIHRvIHJlcG9ydGVyIFNNCiAgICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uob2JqU3Vic2NyaWJlTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmVwb3J0ZXItc3Vic2NyaWJlLXJlc3BvbnNlLW5ldzogJywgcmVwbHkpOwogICAgICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewoKICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTsKICAgICAgICAgICAgICAgIGlmICghb2JzZXJ2ZXIpIHsKICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgX09ic2VydmVyT2JqZWN0Mi5kZWZhdWx0KF90aGlzLCBvYmpVUkwsIGNoaWxkcmVucyk7CiAgICAgICAgICAgICAgICAgIF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXSA9IG9ic2VydmVyOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgnc3RvcmUnKSAmJiBtc2cuYm9keS5zdG9yZSkgewogICAgICAgICAgICAgICAgICAvLyBTdG9yZSBmb3IgZWFjaCByZXBvcnRlciBoeXBlcnR5IHRoZSBkYXRhT2JqZWN0CiAgICAgICAgICAgICAgICAgIHZhciB1c2VyVVJMID0gdm9pZCAwOwogICAgICAgICAgICAgICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ2lkZW50aXR5JykgJiYgbXNnLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlclVSTCkgewogICAgICAgICAgICAgICAgICAgIHVzZXJVUkwgPSBtc2cuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VyVVJMOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICBfdGhpcy5fc3RvcmVEYXRhT2JqZWN0cy5zZXQob2JqVVJMLCBmYWxzZSwgbXNnLmJvZHkuc2NoZW1hLCAnb24nLCB7fSwgaHlwZXJ0eVVSTCwgbnVsbCwgY2hpbGRyZW5zLCB1c2VyVVJMKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvL3JlZ2lzdGVyIG5ldyBoeXBlcnR5IHN1YnNjcmlwdGlvbgogICAgICAgICAgICAgICAgb2JzZXJ2ZXIuYWRkU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpOwoKICAgICAgICAgICAgICAgIC8vZm9yd2FyZCB0byBoeXBlcnR5OgogICAgICAgICAgICAgICAgcmVwbHkuaWQgPSBtc2cuaWQ7CiAgICAgICAgICAgICAgICByZXBseS5mcm9tID0gX3RoaXMuX3VybDsKICAgICAgICAgICAgICAgIHJlcGx5LnRvID0gaHlwZXJ0eVVSTDsKICAgICAgICAgICAgICAgIHJlcGx5LmJvZHkuc2NoZW1hID0gbXNnLmJvZHkuc2NoZW1hOwogICAgICAgICAgICAgICAgcmVwbHkuYm9keS5yZXNvdXJjZSA9IG1zZy5ib2R5LnJlc291cmNlOwoKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3Vic2NyaWJlXSAtIG5ldyBzdWJzY3JpcHRpb246ICcsIG1zZywgcmVwbHksIG9ic2VydmVyKTsKCiAgICAgICAgICAgICAgICBfdGhpczYuX2J1cy5wb3N0TWVzc2FnZShyZXBseSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vbGlzdGVuZXIgcmVqZWN0ZWQKICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCwKICAgICAgICAgICAgICBib2R5OiByZXBseS5ib2R5CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdfcmVzdW1lU3Vic2NyaXB0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVzdW1lU3Vic2NyaXB0aW9uKG1zZywgc3RvcmVkT2JqZWN0KSB7CiAgICAgIHZhciBfdGhpczcgPSB0aGlzOwoKICAgICAgdmFyIG9ialVSTCA9IHN0b3JlZE9iamVjdC5yZXNvdXJjZTsKICAgICAgdmFyIHNjaGVtYSA9IHN0b3JlZE9iamVjdC5zY2hlbWE7CgogICAgICB2YXIgaHlwZXJ0eVVSTCA9IG1zZy5mcm9tOwogICAgICB2YXIgb2JqVVJMU3Vic2NyaXB0aW9uID0gb2JqVVJMICsgJy9zdWJzY3JpcHRpb24nOwoKICAgICAgdmFyIGNoaWxkQmFzZVVSTCA9IG9ialVSTCArICcvY2hpbGRyZW4vJzsKCiAgICAgIGNvbnNvbGUubG9nKCdbU3luY2hlck1hbmFnZXIgUmV1c2VTdWJzY3JpcHRpb25dIC0gb2JqVVJMOiAnLCBvYmpVUkwsICcgLSBzY2hlbWE6Jywgc2NoZW1hKTsKCiAgICAgIC8vZ2V0IHNjaGVtYSBmcm9tIGNhdGFsb2d1ZSBhbmQgcGFyc2UgLT4gKGNoaWxkcmVuKQogICAgICB0aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKHNjaGVtYSkudGhlbihmdW5jdGlvbiAoZGVzY3JpcHRvcikgewogICAgICAgIHZhciBwcm9wZXJ0aWVzID0gZGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllczsKICAgICAgICB2YXIgY2hpbGRyZW5zID0gcHJvcGVydGllcy5jaGlsZHJlbiA/IHByb3BlcnRpZXMuY2hpbGRyZW4uY29uc3RhbnQgOiBbXTsKCiAgICAgICAgLy9jaGlsZHJlbiBhZGRyZXNzZXMKICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IFtdOwogICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChvYmpVUkwgKyAnL2NoYW5nZXMnKTsKICAgICAgICBjaGlsZHJlbnMuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb25zLnB1c2goY2hpbGRCYXNlVVJMICsgY2hpbGQpOwogICAgICAgIH0pOwoKICAgICAgICAvL0ZMT1ctT1VUOiByZXBseSB3aXRoIHByb3Zpc2lvbmFsIHJlc3BvbnNlCiAgICAgICAgX3RoaXM3Ll9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCwKICAgICAgICAgIGJvZHk6IHsgY29kZTogMTAwLCBjaGlsZHJlblJlc291cmNlczogY2hpbGRyZW5zLCBzY2hlbWE6IHNjaGVtYSwgcmVzb3VyY2U6IG9ialVSTCB9CiAgICAgICAgfSk7CgogICAgICAgIC8vRkxPVy1PVVQ6IHN1YnNjcmliZSBtZXNzYWdlIHRvIHJlbW90ZSBSZXBvcnRlck9iamVjdCAtPiBfb25SZW1vdGVTdWJzY3JpYmUKICAgICAgICB2YXIgb2JqU3Vic2NyaWJlTXNnID0gewogICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzNy5fdXJsLCB0bzogb2JqVVJMU3Vic2NyaXB0aW9uLAogICAgICAgICAgYm9keTogeyBzdWJzY3JpYmVyOiBoeXBlcnR5VVJMIH0KICAgICAgICB9OwoKICAgICAgICAvL3N1YnNjcmliZSB0byByZXBvcnRlciBTTQogICAgICAgIF90aGlzNy5fYnVzLnBvc3RNZXNzYWdlKG9ialN1YnNjcmliZU1zZywgZnVuY3Rpb24gKHJlcGx5KSB7CgogICAgICAgICAgdmFyIG9ic2VydmVyID0gX3RoaXM3Ll9vYnNlcnZlcnNbb2JqVVJMXTsKICAgICAgICAgIGlmICghb2JzZXJ2ZXIpIHsKICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgX09ic2VydmVyT2JqZWN0Mi5kZWZhdWx0KF90aGlzNywgb2JqVVJMLCBjaGlsZHJlbnMpOwogICAgICAgICAgICBfdGhpczcuX29ic2VydmVyc1tvYmpVUkxdID0gb2JzZXJ2ZXI7CiAgICAgICAgICB9CgogICAgICAgICAgLy9yZWdpc3RlciBuZXcgaHlwZXJ0eSBzdWJzY3JpcHRpb24KICAgICAgICAgIG9ic2VydmVyLmFkZFN1YnNjcmlwdGlvbihoeXBlcnR5VVJMKTsKCiAgICAgICAgICAvL2ZvcndhcmQgdG8gaHlwZXJ0eToKICAgICAgICAgIHZhciByZXNwb25zZSA9IHsKICAgICAgICAgICAgaWQ6IG1zZy5pZCwgZnJvbTogX3RoaXM3Ll91cmwsIHRvOiBoeXBlcnR5VVJMLCB0eXBlOiAncmVzcG9uc2UnLAogICAgICAgICAgICBib2R5OiByZXBseS5ib2R5CiAgICAgICAgICB9OwoKICAgICAgICAgIHJlc3BvbnNlLmJvZHkuc2NoZW1hID0gc2NoZW1hOwogICAgICAgICAgcmVzcG9uc2UuYm9keS5yZXNvdXJjZSA9IG9ialVSTDsKCiAgICAgICAgICBjb25zb2xlLmxvZygnW3N1YnNjcmliZV0gLSByZXN1bWUgc3Vic2NyaXB0aW9uOiAnLCBtc2csIHJlcGx5LCByZXNwb25zZSwgb2JzZXJ2ZXIpOwoKICAgICAgICAgIF90aGlzNy5fYnVzLnBvc3RNZXNzYWdlKHJlc3BvbnNlKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CgogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gbG9jYWwgRGF0YU9iamVjdE9ic2VydmVyIC0+IHVuc3Vic2NyaWJlCgogIH0sIHsKICAgIGtleTogJ19vbkxvY2FsVW5TdWJzY3JpYmUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkxvY2FsVW5TdWJzY3JpYmUobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgaHlwZXJ0eVVSTCA9IG1zZy5mcm9tOwogICAgICB2YXIgb2JqVVJMID0gbXNnLmJvZHkucmVzb3VyY2U7CgogICAgICB2YXIgb2JzZXJ2ZXIgPSBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF07CiAgICAgIGlmIChvYnNlcnZlcikgewogICAgICAgIC8vVE9ETzogaXMgdGhlcmUgYW55IHBvbGljeSB2ZXJpZmljYXRpb24gYmVmb3JlIGRlbGV0ZT8KICAgICAgICBvYnNlcnZlci5yZW1vdmVTdWJzY3JpcHRpb24oaHlwZXJ0eVVSTCk7CgogICAgICAgIC8vVE9ETzogZGVzdHJveSBvYmplY3QgaW4gdGhlIHJlZ2lzdHJ5PwogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sCiAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCB9CiAgICAgICAgfSk7CgogICAgICAgIHRoaXMuX3N0b3JlRGF0YU9iamVjdHMuZGVsZXRlKG9ialVSTCwgJ3N1YnNjcmlwdGlvbnMnLCBoeXBlcnR5VVJMLCB0cnVlKTsKCiAgICAgICAgLy9UT0RPOiByZW1vdmUgT2JqZWN0IGlmIG5vIG1vcmUgc3Vic2NyaXB0aW9uPwogICAgICAgIC8vZGVsZXRlIF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ3VybCcsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3VybDsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFN5bmNoZXJNYW5hZ2VyOwp9KCk7IC8qKgogICAgICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAogICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgogICAgICogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKICAgICAqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCiAgICAgKgogICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICAgICAqCiAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogICAgICoKICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogICAgICoqLwoKCmV4cG9ydHMuZGVmYXVsdCA9IFN5bmNoZXJNYW5hZ2VyOwptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCn0seyIuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uIjo0MjEsIi4uL3V0aWxzL3NjaGVtYVZhbGlkYXRpb24iOjQ1NSwiLi4vdXRpbHMvdXRpbHMiOjQ1NywiLi9PYnNlcnZlck9iamVjdCI6NDUwLCIuL1JlcG9ydGVyT2JqZWN0Ijo0NTEsIi4vU3RvcmVEYXRhT2JqZWN0cyI6NDUyLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMiOjEwLCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2siOjE1LCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MiOjE2LCJzZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5Ijo0MjB9XSw0NTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeScpOwoKdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCmV4cG9ydHMuc2NoZW1hVmFsaWRhdGlvbiA9IHNjaGVtYVZhbGlkYXRpb247Cgp2YXIgX3R2ID0gcmVxdWlyZSgnLi90djQnKTsKCnZhciBfdHYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHYpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIHNjaGVtYVZhbGlkYXRpb24oc2NoZW1lLCBkZXNjcmlwdG9yLCB2YWx1ZSkgewoKICBjb25zb2xlLmxvZygnU2NoZW1lOiAnLCBzY2hlbWUpOwoKICAvLyBzY2hlbWEgdmFsaWRhdGlvbgogIGNvbnNvbGUubG9nKCdSdW5uaW5nIG9iamVjdCB2YWxpZGF0aW9uLi4uJyk7CiAgdHJ5IHsKICAgIHZhciBvYmogPSB2YWx1ZTsKICAgIHZhciBzY2hlbWEgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZTsKCiAgICAvLyBhZGQgc3VwcG9ydCBmb3Igc2NoZW1hIHJlZmVyZW5jaW5nIGl0c2VsZgogICAgX3R2Mi5kZWZhdWx0LmFkZFNjaGVtYShzY2hlbWEuaWQsIHNjaGVtYSk7CgogICAgLy8gdmFsaWRhdGUKICAgIHZhciByZXN1bHQgPSBfdHYyLmRlZmF1bHQudmFsaWRhdGVNdWx0aXBsZShvYmosIHNjaGVtYSk7CgogICAgLy8gZGVsZXRlIGVycm9yIHN0YWNrcyB0byBpbXByb3ZlIGxvZ2dpbmcKICAgIHJlc3VsdC5lcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgZGVsZXRlIGVycm9yLnN0YWNrOwogICAgfSk7CgogICAgLy8gcHJpbnQgbW9yZSBkZXRhaWxzIGFib3V0IHZhbGlkYXRpb24gaWYgaXQgZmFpbHMgb3Igc2NoZW1hIGNvbnRhaW5zICRyZWZzCiAgICBpZiAoIXJlc3VsdC52YWxpZCB8fCByZXN1bHQubWlzc2luZy5sZW5ndGggPiAwKSB7CiAgICAgIGNvbnNvbGUud2FybignT2JqZWN0IHZhbGlkYXRpb24gJyArIChyZXN1bHQudmFsaWQgPyAnc3VjY2VlZGVkLCBidXQgc2NoZW1hIGNvbnRhaW5lZCByZWZlcmVuY2VzOicgOiAnZmFpbGVkOicpLCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkocmVzdWx0LCBudWxsLCAyKSk7CiAgICAgIGNvbnNvbGUuZGVidWcoJ09iamVjdDonLCAoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkob2JqLCBudWxsLCAyKSwgJ1xyXG5TY2hlbWE6JywgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKHNjaGVtYSwgbnVsbCwgMikpOwogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5sb2coJ09iamVjdCB2YWxpZGF0aW9uIHN1Y2NlZWRlZCcpOwogICAgfQogIH0gY2F0Y2ggKGUpIHsKICAgIGNvbnNvbGUud2FybignRXJyb3IgZHVyaW5nIG9iamVjdCB2YWxpZGF0aW9uOicsIGUpOwogIH0KfQoKfSx7Ii4vdHY0Ijo0NTYsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6M31dLDQ1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Cid1c2Ugc3RyaWN0JzsKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICAgIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9zdHJpbmdpZnkgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnknKTsKCnZhciBfc3RyaW5naWZ5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ2lmeSk7Cgp2YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHknKTsKCnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpOwoKdmFyIF9pc0Zyb3plbiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvaXMtZnJvemVuJyk7Cgp2YXIgX2lzRnJvemVuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzRnJvemVuKTsKCnZhciBfY3JlYXRlID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUnKTsKCnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7Cgp2YXIgX3R5cGVvZjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mJyk7Cgp2YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTsKCnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpOwoKdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCi8qCiBBdXRob3I6IEdlcmFpbnQgTHVmZiBhbmQgb3RoZXJzCiBZZWFyOiAyMDEzCgogVGhpcyBjb2RlIGlzIHJlbGVhc2VkIGludG8gdGhlICJwdWJsaWMgZG9tYWluIiBieSBpdHMgYXV0aG9yKHMpLiAgQW55Ym9keSBtYXkgdXNlLCBhbHRlciBhbmQgZGlzdHJpYnV0ZSB0aGUgY29kZSB3aXRob3V0IHJlc3RyaWN0aW9uLiAgVGhlIGF1dGhvciBtYWtlcyBubyBndWFyYW50ZWVzLCBhbmQgdGFrZXMgbm8gbGlhYmlsaXR5IG9mIGFueSBraW5kIGZvciB1c2Ugb2YgdGhpcyBjb2RlLgoKIElmIHlvdSBmaW5kIGEgYnVnIG9yIG1ha2UgYW4gaW1wcm92ZW1lbnQsIGl0IHdvdWxkIGJlIGNvdXJ0ZW91cyB0byBsZXQgdGhlIGF1dGhvciBrbm93LCBidXQgaXQgaXMgbm90IGNvbXB1bHNvcnkuCiAqLwovLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qva2V5cz9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGT2JqZWN0JTJGa2V5cwppZiAoIV9rZXlzMi5kZWZhdWx0KSB7CiAgICBPYmplY3Qua2V5cyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LAogICAgICAgICAgICBoYXNEb250RW51bUJ1ZyA9ICF7IHRvU3RyaW5nOiBudWxsIH0ucHJvcGVydHlJc0VudW1lcmFibGUoJ3RvU3RyaW5nJyksCiAgICAgICAgICAgIGRvbnRFbnVtcyA9IFsndG9TdHJpbmcnLCAndG9Mb2NhbGVTdHJpbmcnLCAndmFsdWVPZicsICdoYXNPd25Qcm9wZXJ0eScsICdpc1Byb3RvdHlwZU9mJywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJ2NvbnN0cnVjdG9yJ10sCiAgICAgICAgICAgIGRvbnRFbnVtc0xlbmd0aCA9IGRvbnRFbnVtcy5sZW5ndGg7CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAob2JqKSB7CiAgICAgICAgICAgIGlmICgodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShvYmopKSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iaiAhPT0gJ2Z1bmN0aW9uJyB8fCBvYmogPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBub24tb2JqZWN0Jyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTsKCiAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gb2JqKSB7CiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocHJvcCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChoYXNEb250RW51bUJ1ZykgewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb250RW51bXNMZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgZG9udEVudW1zW2ldKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChkb250RW51bXNbaV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH07CiAgICB9KCk7Cn0KLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2NyZWF0ZQppZiAoIV9jcmVhdGUyLmRlZmF1bHQpIHsKICAgIE9iamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgZnVuY3Rpb24gRigpIHt9CgogICAgICAgIHJldHVybiBmdW5jdGlvbiAobykgewogICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLicpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIEYucHJvdG90eXBlID0gbzsKICAgICAgICAgICAgcmV0dXJuIG5ldyBGKCk7CiAgICAgICAgfTsKICAgIH0oKTsKfQovLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pc0FycmF5P3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZBcnJheSUyRmlzQXJyYXkKaWYgKCFBcnJheS5pc0FycmF5KSB7CiAgICBBcnJheS5pc0FycmF5ID0gZnVuY3Rpb24gKHZBcmcpIHsKICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZBcmcpID09PSAiW29iamVjdCBBcnJheV0iOwogICAgfTsKfQovLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mP3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZBcnJheSUyRmluZGV4T2YKaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikgewogICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiAoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKSB7CiAgICAgICAgaWYgKHRoaXMgPT09IG51bGwpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpOwogICAgICAgIH0KICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTsKICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7CgogICAgICAgIGlmIChsZW4gPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuIC0xOwogICAgICAgIH0KICAgICAgICB2YXIgbiA9IDA7CiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgIG4gPSBOdW1iZXIoYXJndW1lbnRzWzFdKTsKICAgICAgICAgICAgaWYgKG4gIT09IG4pIHsKICAgICAgICAgICAgICAgIC8vIHNob3J0Y3V0IGZvciB2ZXJpZnlpbmcgaWYgaXQncyBOYU4KICAgICAgICAgICAgICAgIG4gPSAwOwogICAgICAgICAgICB9IGVsc2UgaWYgKG4gIT09IDAgJiYgbiAhPT0gSW5maW5pdHkgJiYgbiAhPT0gLUluZmluaXR5KSB7CiAgICAgICAgICAgICAgICBuID0gKG4gPiAwIHx8IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobikpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChuID49IGxlbikgewogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgICAgIHZhciBrID0gbiA+PSAwID8gbiA6IE1hdGgubWF4KGxlbiAtIE1hdGguYWJzKG4pLCAwKTsKICAgICAgICBmb3IgKDsgayA8IGxlbjsgaysrKSB7CiAgICAgICAgICAgIGlmIChrIGluIHQgJiYgdFtrXSA9PT0gc2VhcmNoRWxlbWVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIC0xOwogICAgfTsKfQoKLy8gR3J1bmdleSBPYmplY3QuaXNGcm96ZW4gaGFjawppZiAoIV9pc0Zyb3plbjIuZGVmYXVsdCkgewogICAgT2JqZWN0LmlzRnJvemVuID0gZnVuY3Rpb24gKG9iaikgewogICAgICAgIHZhciBrZXkgPSAidHY0X3Rlc3RfZnJvemVuX2tleSI7CiAgICAgICAgd2hpbGUgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7CiAgICAgICAgICAgIGtleSArPSBNYXRoLnJhbmRvbSgpOwogICAgICAgIH0KICAgICAgICB0cnkgewogICAgICAgICAgICBvYmpba2V5XSA9IHRydWU7CiAgICAgICAgICAgIGRlbGV0ZSBvYmpba2V5XTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfTsKfQovLyBCYXNlZCBvbjogaHR0cHM6Ly9naXRodWIuY29tL2dlcmFpbnRsdWZmL3VyaS10ZW1wbGF0ZXMsIGJ1dCB3aXRoIGFsbCB0aGUgZGUtc3Vic3RpdHV0aW9uIHN0dWZmIHJlbW92ZWQKCnZhciB1cmlUZW1wbGF0ZUdsb2JhbE1vZGlmaWVycyA9IHsKICAgICIrIjogdHJ1ZSwKICAgICIjIjogdHJ1ZSwKICAgICIuIjogdHJ1ZSwKICAgICIvIjogdHJ1ZSwKICAgICI7IjogdHJ1ZSwKICAgICI/IjogdHJ1ZSwKICAgICImIjogdHJ1ZQp9Owp2YXIgdXJpVGVtcGxhdGVTdWZmaWNlcyA9IHsKICAgICIqIjogdHJ1ZQp9OwoKZnVuY3Rpb24gbm90UmVhbGx5UGVyY2VudEVuY29kZShzdHJpbmcpIHsKICAgIHJldHVybiBlbmNvZGVVUkkoc3RyaW5nKS5yZXBsYWNlKC8lMjVbMC05XVswLTldL2csIGZ1bmN0aW9uIChkb3VibGVFbmNvZGVkKSB7CiAgICAgICAgcmV0dXJuICIlIiArIGRvdWJsZUVuY29kZWQuc3Vic3RyaW5nKDMpOwogICAgfSk7Cn0KCmZ1bmN0aW9uIHVyaVRlbXBsYXRlU3Vic3RpdHV0aW9uKHNwZWMpIHsKICAgIHZhciBtb2RpZmllciA9ICIiOwogICAgaWYgKHVyaVRlbXBsYXRlR2xvYmFsTW9kaWZpZXJzW3NwZWMuY2hhckF0KDApXSkgewogICAgICAgIG1vZGlmaWVyID0gc3BlYy5jaGFyQXQoMCk7CiAgICAgICAgc3BlYyA9IHNwZWMuc3Vic3RyaW5nKDEpOwogICAgfQogICAgdmFyIHNlcGFyYXRvciA9ICIiOwogICAgdmFyIHByZWZpeCA9ICIiOwogICAgdmFyIHNob3VsZEVzY2FwZSA9IHRydWU7CiAgICB2YXIgc2hvd1ZhcmlhYmxlcyA9IGZhbHNlOwogICAgdmFyIHRyaW1FbXB0eVN0cmluZyA9IGZhbHNlOwogICAgaWYgKG1vZGlmaWVyID09PSAnKycpIHsKICAgICAgICBzaG91bGRFc2NhcGUgPSBmYWxzZTsKICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICIuIikgewogICAgICAgIHByZWZpeCA9ICIuIjsKICAgICAgICBzZXBhcmF0b3IgPSAiLiI7CiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAiLyIpIHsKICAgICAgICBwcmVmaXggPSAiLyI7CiAgICAgICAgc2VwYXJhdG9yID0gIi8iOwogICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJyMnKSB7CiAgICAgICAgcHJlZml4ID0gIiMiOwogICAgICAgIHNob3VsZEVzY2FwZSA9IGZhbHNlOwogICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJzsnKSB7CiAgICAgICAgcHJlZml4ID0gIjsiOwogICAgICAgIHNlcGFyYXRvciA9ICI7IjsKICAgICAgICBzaG93VmFyaWFibGVzID0gdHJ1ZTsKICAgICAgICB0cmltRW1wdHlTdHJpbmcgPSB0cnVlOwogICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJz8nKSB7CiAgICAgICAgcHJlZml4ID0gIj8iOwogICAgICAgIHNlcGFyYXRvciA9ICImIjsKICAgICAgICBzaG93VmFyaWFibGVzID0gdHJ1ZTsKICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICcmJykgewogICAgICAgIHByZWZpeCA9ICImIjsKICAgICAgICBzZXBhcmF0b3IgPSAiJiI7CiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7CiAgICB9CgogICAgdmFyIHZhck5hbWVzID0gW107CiAgICB2YXIgdmFyTGlzdCA9IHNwZWMuc3BsaXQoIiwiKTsKICAgIHZhciB2YXJTcGVjcyA9IFtdOwogICAgdmFyIHZhclNwZWNNYXAgPSB7fTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFyTGlzdC5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciB2YXJOYW1lID0gdmFyTGlzdFtpXTsKICAgICAgICB2YXIgdHJ1bmNhdGUgPSBudWxsOwogICAgICAgIGlmICh2YXJOYW1lLmluZGV4T2YoIjoiKSAhPT0gLTEpIHsKICAgICAgICAgICAgdmFyIHBhcnRzID0gdmFyTmFtZS5zcGxpdCgiOiIpOwogICAgICAgICAgICB2YXJOYW1lID0gcGFydHNbMF07CiAgICAgICAgICAgIHRydW5jYXRlID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTsKICAgICAgICB9CiAgICAgICAgdmFyIHN1ZmZpY2VzID0ge307CiAgICAgICAgd2hpbGUgKHVyaVRlbXBsYXRlU3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0pIHsKICAgICAgICAgICAgc3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0gPSB0cnVlOwogICAgICAgICAgICB2YXJOYW1lID0gdmFyTmFtZS5zdWJzdHJpbmcoMCwgdmFyTmFtZS5sZW5ndGggLSAxKTsKICAgICAgICB9CiAgICAgICAgdmFyIHZhclNwZWMgPSB7CiAgICAgICAgICAgIHRydW5jYXRlOiB0cnVuY2F0ZSwKICAgICAgICAgICAgbmFtZTogdmFyTmFtZSwKICAgICAgICAgICAgc3VmZmljZXM6IHN1ZmZpY2VzCiAgICAgICAgfTsKICAgICAgICB2YXJTcGVjcy5wdXNoKHZhclNwZWMpOwogICAgICAgIHZhclNwZWNNYXBbdmFyTmFtZV0gPSB2YXJTcGVjOwogICAgICAgIHZhck5hbWVzLnB1c2godmFyTmFtZSk7CiAgICB9CiAgICB2YXIgc3ViRnVuY3Rpb24gPSBmdW5jdGlvbiBzdWJGdW5jdGlvbih2YWx1ZUZ1bmN0aW9uKSB7CiAgICAgICAgdmFyIHJlc3VsdCA9ICIiOwogICAgICAgIHZhciBzdGFydEluZGV4ID0gMDsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhclNwZWNzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciB2YXJTcGVjID0gdmFyU3BlY3NbaV07CiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlRnVuY3Rpb24odmFyU3BlYy5uYW1lKTsKICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAwIHx8ICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkodmFsdWUpKSA9PT0gJ29iamVjdCcgJiYgKDAsIF9rZXlzMi5kZWZhdWx0KSh2YWx1ZSkubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICBzdGFydEluZGV4Kys7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoaSA9PT0gc3RhcnRJbmRleCkgewogICAgICAgICAgICAgICAgcmVzdWx0ICs9IHByZWZpeDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzZXBhcmF0b3IgfHwgIiwiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgewogICAgICAgICAgICAgICAgaWYgKHNob3dWYXJpYWJsZXMpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgIj0iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICAgIGlmIChqID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5zdWZmaWNlc1snKiddID8gc2VwYXJhdG9yIHx8ICIsIiA6ICIsIjsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhclNwZWMuc3VmZmljZXNbJyonXSAmJiBzaG93VmFyaWFibGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgIj0iOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWVbal0pLnJlcGxhY2UoLyEvZywgIiUyMSIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZVtqXSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSBpZiAoKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KSh2YWx1ZSkpID09PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgaWYgKHNob3dWYXJpYWJsZXMgJiYgIXZhclNwZWMuc3VmZmljZXNbJyonXSkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyAiPSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgZmlyc3QgPSB0cnVlOwogICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5zdWZmaWNlc1snKiddID8gc2VwYXJhdG9yIHx8ICIsIiA6ICIsIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2hvdWxkRXNjYXBlID8gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkucmVwbGFjZSgvIS9nLCAiJTIxIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKGtleSk7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/ICc9JyA6ICIsIjsKICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2hvdWxkRXNjYXBlID8gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlW2tleV0pLnJlcGxhY2UoLyEvZywgIiUyMSIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZVtrZXldKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChzaG93VmFyaWFibGVzKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMubmFtZTsKICAgICAgICAgICAgICAgICAgICBpZiAoIXRyaW1FbXB0eVN0cmluZyB8fCB2YWx1ZSAhPT0gIiIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICI9IjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAodmFyU3BlYy50cnVuY2F0ZSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgdmFyU3BlYy50cnVuY2F0ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2hvdWxkRXNjYXBlID8gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKS5yZXBsYWNlKC8hL2csICIlMjEiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogICAgc3ViRnVuY3Rpb24udmFyTmFtZXMgPSB2YXJOYW1lczsKICAgIHJldHVybiB7CiAgICAgICAgcHJlZml4OiBwcmVmaXgsCiAgICAgICAgc3Vic3RpdHV0aW9uOiBzdWJGdW5jdGlvbgogICAgfTsKfQoKZnVuY3Rpb24gVXJpVGVtcGxhdGUodGVtcGxhdGUpIHsKICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBVcmlUZW1wbGF0ZSkpIHsKICAgICAgICByZXR1cm4gbmV3IFVyaVRlbXBsYXRlKHRlbXBsYXRlKTsKICAgIH0KICAgIHZhciBwYXJ0cyA9IHRlbXBsYXRlLnNwbGl0KCJ7Iik7CiAgICB2YXIgdGV4dFBhcnRzID0gW3BhcnRzLnNoaWZ0KCldOwogICAgdmFyIHByZWZpeGVzID0gW107CiAgICB2YXIgc3Vic3RpdHV0aW9ucyA9IFtdOwogICAgdmFyIHZhck5hbWVzID0gW107CiAgICB3aGlsZSAocGFydHMubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBwYXJ0ID0gcGFydHMuc2hpZnQoKTsKICAgICAgICB2YXIgc3BlYyA9IHBhcnQuc3BsaXQoIn0iKVswXTsKICAgICAgICB2YXIgcmVtYWluZGVyID0gcGFydC5zdWJzdHJpbmcoc3BlYy5sZW5ndGggKyAxKTsKICAgICAgICB2YXIgZnVuY3MgPSB1cmlUZW1wbGF0ZVN1YnN0aXR1dGlvbihzcGVjKTsKICAgICAgICBzdWJzdGl0dXRpb25zLnB1c2goZnVuY3Muc3Vic3RpdHV0aW9uKTsKICAgICAgICBwcmVmaXhlcy5wdXNoKGZ1bmNzLnByZWZpeCk7CiAgICAgICAgdGV4dFBhcnRzLnB1c2gocmVtYWluZGVyKTsKICAgICAgICB2YXJOYW1lcyA9IHZhck5hbWVzLmNvbmNhdChmdW5jcy5zdWJzdGl0dXRpb24udmFyTmFtZXMpOwogICAgfQogICAgdGhpcy5maWxsID0gZnVuY3Rpb24gKHZhbHVlRnVuY3Rpb24pIHsKICAgICAgICB2YXIgcmVzdWx0ID0gdGV4dFBhcnRzWzBdOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3Vic3RpdHV0aW9ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgc3Vic3RpdHV0aW9uID0gc3Vic3RpdHV0aW9uc1tpXTsKICAgICAgICAgICAgcmVzdWx0ICs9IHN1YnN0aXR1dGlvbih2YWx1ZUZ1bmN0aW9uKTsKICAgICAgICAgICAgcmVzdWx0ICs9IHRleHRQYXJ0c1tpICsgMV07CiAgICAgICAgfQogICAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwogICAgdGhpcy52YXJOYW1lcyA9IHZhck5hbWVzOwogICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlOwp9CgpVcmlUZW1wbGF0ZS5wcm90b3R5cGUgPSB7CiAgICB0b1N0cmluZzogZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGU7CiAgICB9LAogICAgZmlsbEZyb21PYmplY3Q6IGZ1bmN0aW9uIGZpbGxGcm9tT2JqZWN0KG9iaikgewogICAgICAgIHJldHVybiB0aGlzLmZpbGwoZnVuY3Rpb24gKHZhck5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIG9ialt2YXJOYW1lXTsKICAgICAgICB9KTsKICAgIH0KfTsKdmFyIFZhbGlkYXRvckNvbnRleHQgPSBmdW5jdGlvbiBWYWxpZGF0b3JDb250ZXh0KHBhcmVudCwgY29sbGVjdE11bHRpcGxlLCBlcnJvclJlcG9ydGVyLCBjaGVja1JlY3Vyc2l2ZSwgdHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgdGhpcy5taXNzaW5nID0gW107CiAgICB0aGlzLm1pc3NpbmdNYXAgPSB7fTsKICAgIHRoaXMuZm9ybWF0VmFsaWRhdG9ycyA9IHBhcmVudCA/ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShwYXJlbnQuZm9ybWF0VmFsaWRhdG9ycykgOiB7fTsKICAgIHRoaXMuc2NoZW1hcyA9IHBhcmVudCA/ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShwYXJlbnQuc2NoZW1hcykgOiB7fTsKICAgIHRoaXMuY29sbGVjdE11bHRpcGxlID0gY29sbGVjdE11bHRpcGxlOwogICAgdGhpcy5lcnJvcnMgPSBbXTsKICAgIHRoaXMuaGFuZGxlRXJyb3IgPSBjb2xsZWN0TXVsdGlwbGUgPyB0aGlzLmNvbGxlY3RFcnJvciA6IHRoaXMucmV0dXJuRXJyb3I7CiAgICBpZiAoY2hlY2tSZWN1cnNpdmUpIHsKICAgICAgICB0aGlzLmNoZWNrUmVjdXJzaXZlID0gdHJ1ZTsKICAgICAgICB0aGlzLnNjYW5uZWQgPSBbXTsKICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4gPSBbXTsKICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107CiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9ycyA9IFtdOwogICAgICAgIHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleSA9ICd0djRfdmFsaWRhdGlvbl9pZCc7CiAgICAgICAgdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5ID0gJ3R2NF92YWxpZGF0aW9uX2Vycm9yc19pZCc7CiAgICB9CiAgICBpZiAodHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyA9IHRydWU7CiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTsKICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICB9CiAgICB0aGlzLmVycm9yUmVwb3J0ZXIgPSBlcnJvclJlcG9ydGVyIHx8IGRlZmF1bHRFcnJvclJlcG9ydGVyKCdlbicpOwogICAgaWYgKHR5cGVvZiB0aGlzLmVycm9yUmVwb3J0ZXIgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZWJ1ZycpOwogICAgfQogICAgdGhpcy5kZWZpbmVkS2V5d29yZHMgPSB7fTsKICAgIGlmIChwYXJlbnQpIHsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyZW50LmRlZmluZWRLZXl3b3JkcykgewogICAgICAgICAgICB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXldID0gcGFyZW50LmRlZmluZWRLZXl3b3Jkc1trZXldLnNsaWNlKDApOwogICAgICAgIH0KICAgIH0KfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZGVmaW5lS2V5d29yZCA9IGZ1bmN0aW9uIChrZXl3b3JkLCBrZXl3b3JkRnVuY3Rpb24pIHsKICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdID0gdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0gfHwgW107CiAgICB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXl3b3JkXS5wdXNoKGtleXdvcmRGdW5jdGlvbik7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmNyZWF0ZUVycm9yID0gZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMsIGRhdGEsIHNjaGVtYSkgewogICAgdmFyIGVycm9yID0gbmV3IFZhbGlkYXRpb25FcnJvcihjb2RlLCBtZXNzYWdlUGFyYW1zLCBkYXRhUGF0aCwgc2NoZW1hUGF0aCwgc3ViRXJyb3JzKTsKICAgIGVycm9yLm1lc3NhZ2UgPSB0aGlzLmVycm9yUmVwb3J0ZXIoZXJyb3IsIGRhdGEsIHNjaGVtYSk7CiAgICByZXR1cm4gZXJyb3I7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJldHVybkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7CiAgICByZXR1cm4gZXJyb3I7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmNvbGxlY3RFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikgewogICAgaWYgKGVycm9yKSB7CiAgICAgICAgdGhpcy5lcnJvcnMucHVzaChlcnJvcik7CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucHJlZml4RXJyb3JzID0gZnVuY3Rpb24gKHN0YXJ0SW5kZXgsIGRhdGFQYXRoLCBzY2hlbWFQYXRoKSB7CiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRoaXMuZXJyb3JzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpcy5lcnJvcnNbaV0gPSB0aGlzLmVycm9yc1tpXS5wcmVmaXhXaXRoKGRhdGFQYXRoLCBzY2hlbWFQYXRoKTsKICAgIH0KICAgIHJldHVybiB0aGlzOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5iYW5Vbmtub3duUHJvcGVydGllcyA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEpIHsKICAgIGZvciAodmFyIHVua25vd25QYXRoIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpIHsKICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuVU5LTk9XTl9QUk9QRVJUWSwgeyBwYXRoOiB1bmtub3duUGF0aCB9LCB1bmtub3duUGF0aCwgIiIsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpOwogICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmFkZEZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQsIHZhbGlkYXRvcikgewogICAgaWYgKCh0eXBlb2YgZm9ybWF0ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGZvcm1hdCkpID09PSAnb2JqZWN0JykgewogICAgICAgIGZvciAodmFyIGtleSBpbiBmb3JtYXQpIHsKICAgICAgICAgICAgdGhpcy5hZGRGb3JtYXQoa2V5LCBmb3JtYXRba2V5XSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0aGlzOwogICAgfQogICAgdGhpcy5mb3JtYXRWYWxpZGF0b3JzW2Zvcm1hdF0gPSB2YWxpZGF0b3I7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJlc29sdmVSZWZzID0gZnVuY3Rpb24gKHNjaGVtYSwgdXJsSGlzdG9yeSkgewogICAgaWYgKHNjaGVtYVsnJHJlZiddICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB1cmxIaXN0b3J5ID0gdXJsSGlzdG9yeSB8fCB7fTsKICAgICAgICBpZiAodXJsSGlzdG9yeVtzY2hlbWFbJyRyZWYnXV0pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5DSVJDVUxBUl9SRUZFUkVOQ0UsIHsgdXJsczogKDAsIF9rZXlzMi5kZWZhdWx0KSh1cmxIaXN0b3J5KS5qb2luKCcsICcpIH0sICcnLCAnJywgbnVsbCwgdW5kZWZpbmVkLCBzY2hlbWEpOwogICAgICAgIH0KICAgICAgICB1cmxIaXN0b3J5W3NjaGVtYVsnJHJlZiddXSA9IHRydWU7CiAgICAgICAgc2NoZW1hID0gdGhpcy5nZXRTY2hlbWEoc2NoZW1hWyckcmVmJ10sIHVybEhpc3RvcnkpOwogICAgfQogICAgcmV0dXJuIHNjaGVtYTsKfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZ2V0U2NoZW1hID0gZnVuY3Rpb24gKHVybCwgdXJsSGlzdG9yeSkgewogICAgdmFyIHNjaGVtYTsKICAgIGlmICh0aGlzLnNjaGVtYXNbdXJsXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgc2NoZW1hID0gdGhpcy5zY2hlbWFzW3VybF07CiAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTsKICAgIH0KICAgIHZhciBiYXNlVXJsID0gdXJsOwogICAgdmFyIGZyYWdtZW50ID0gIiI7CiAgICBpZiAodXJsLmluZGV4T2YoJyMnKSAhPT0gLTEpIHsKICAgICAgICBmcmFnbWVudCA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YoIiMiKSArIDEpOwogICAgICAgIGJhc2VVcmwgPSB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKCIjIikpOwogICAgfQogICAgaWYgKCgwLCBfdHlwZW9mMy5kZWZhdWx0KSh0aGlzLnNjaGVtYXNbYmFzZVVybF0pID09PSAnb2JqZWN0JykgewogICAgICAgIHNjaGVtYSA9IHRoaXMuc2NoZW1hc1tiYXNlVXJsXTsKICAgICAgICB2YXIgcG9pbnRlclBhdGggPSBkZWNvZGVVUklDb21wb25lbnQoZnJhZ21lbnQpOwogICAgICAgIGlmIChwb2ludGVyUGF0aCA9PT0gIiIpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTsKICAgICAgICB9IGVsc2UgaWYgKHBvaW50ZXJQYXRoLmNoYXJBdCgwKSAhPT0gIi8iKSB7CiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgfQogICAgICAgIHZhciBwYXJ0cyA9IHBvaW50ZXJQYXRoLnNwbGl0KCIvIikuc2xpY2UoMSk7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gcGFydHNbaV0ucmVwbGFjZSgvfjEvZywgIi8iKS5yZXBsYWNlKC9+MC9nLCAifiIpOwogICAgICAgICAgICBpZiAoc2NoZW1hW2NvbXBvbmVudF0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgc2NoZW1hID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2NoZW1hID0gc2NoZW1hW2NvbXBvbmVudF07CiAgICAgICAgfQogICAgICAgIGlmIChzY2hlbWEgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEsIHVybEhpc3RvcnkpOwogICAgICAgIH0KICAgIH0KICAgIGlmICh0aGlzLm1pc3NpbmdbYmFzZVVybF0gPT09IHVuZGVmaW5lZCkgewogICAgICAgIHRoaXMubWlzc2luZy5wdXNoKGJhc2VVcmwpOwogICAgICAgIHRoaXMubWlzc2luZ1tiYXNlVXJsXSA9IGJhc2VVcmw7CiAgICAgICAgdGhpcy5taXNzaW5nTWFwW2Jhc2VVcmxdID0gYmFzZVVybDsKICAgIH0KfTsKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuc2VhcmNoU2NoZW1hcyA9IGZ1bmN0aW9uIChzY2hlbWEsIHVybCkgewogICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hKSkgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHRoaXMuc2VhcmNoU2NoZW1hcyhzY2hlbWFbaV0sIHVybCk7CiAgICAgICAgfQogICAgfSBlbHNlIGlmIChzY2hlbWEgJiYgKHR5cGVvZiBzY2hlbWEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc2NoZW1hKSkgPT09ICJvYmplY3QiKSB7CiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuaWQgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgIGlmIChpc1RydXN0ZWRVcmwodXJsLCBzY2hlbWEuaWQpKSB7CiAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2hlbWFzW3NjaGVtYS5pZF0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hc1tzY2hlbWEuaWRdID0gc2NoZW1hOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHsKICAgICAgICAgICAgaWYgKGtleSAhPT0gImVudW0iKSB7CiAgICAgICAgICAgICAgICBpZiAoKDAsIF90eXBlb2YzLmRlZmF1bHQpKHNjaGVtYVtrZXldKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaFNjaGVtYXMoc2NoZW1hW2tleV0sIHVybCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gIiRyZWYiKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHVyaSA9IGdldERvY3VtZW50VXJpKHNjaGVtYVtrZXldKTsKICAgICAgICAgICAgICAgICAgICBpZiAodXJpICYmIHRoaXMuc2NoZW1hc1t1cmldID09PSB1bmRlZmluZWQgJiYgdGhpcy5taXNzaW5nTWFwW3VyaV0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pc3NpbmdNYXBbdXJpXSA9IHVyaTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmFkZFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHNjaGVtYSkgewogICAgLy9vdmVybG9hZAogICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzY2hlbWEgPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgaWYgKCh0eXBlb2YgdXJsID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHVybCkpID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdXJsLmlkID09PSAnc3RyaW5nJykgewogICAgICAgICAgICBzY2hlbWEgPSB1cmw7CiAgICAgICAgICAgIHVybCA9IHNjaGVtYS5pZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgfQogICAgaWYgKHVybCA9PT0gZ2V0RG9jdW1lbnRVcmkodXJsKSArICIjIikgewogICAgICAgIC8vIFJlbW92ZSBlbXB0eSBmcmFnbWVudAogICAgICAgIHVybCA9IGdldERvY3VtZW50VXJpKHVybCk7CiAgICB9CiAgICB0aGlzLnNjaGVtYXNbdXJsXSA9IHNjaGVtYTsKICAgIGRlbGV0ZSB0aGlzLm1pc3NpbmdNYXBbdXJsXTsKICAgIG5vcm1TY2hlbWEoc2NoZW1hLCB1cmwpOwogICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYSwgdXJsKTsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYU1hcCA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBtYXAgPSB7fTsKICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNjaGVtYXMpIHsKICAgICAgICBtYXBba2V5XSA9IHRoaXMuc2NoZW1hc1trZXldOwogICAgfQogICAgcmV0dXJuIG1hcDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYVVyaXMgPSBmdW5jdGlvbiAoZmlsdGVyUmVnRXhwKSB7CiAgICB2YXIgbGlzdCA9IFtdOwogICAgZm9yICh2YXIga2V5IGluIHRoaXMuc2NoZW1hcykgewogICAgICAgIGlmICghZmlsdGVyUmVnRXhwIHx8IGZpbHRlclJlZ0V4cC50ZXN0KGtleSkpIHsKICAgICAgICAgICAgbGlzdC5wdXNoKGtleSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGxpc3Q7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcyA9IGZ1bmN0aW9uIChmaWx0ZXJSZWdFeHApIHsKICAgIHZhciBsaXN0ID0gW107CiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5taXNzaW5nTWFwKSB7CiAgICAgICAgaWYgKCFmaWx0ZXJSZWdFeHAgfHwgZmlsdGVyUmVnRXhwLnRlc3Qoa2V5KSkgewogICAgICAgICAgICBsaXN0LnB1c2goa2V5KTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbGlzdDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmRyb3BTY2hlbWFzID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5zY2hlbWFzID0ge307CiAgICB0aGlzLnJlc2V0KCk7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy5taXNzaW5nID0gW107CiAgICB0aGlzLm1pc3NpbmdNYXAgPSB7fTsKICAgIHRoaXMuZXJyb3JzID0gW107Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFsbCA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGRhdGFQYXRoUGFydHMsIHNjaGVtYVBhdGhQYXJ0cywgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICB2YXIgdG9wTGV2ZWw7CiAgICBzY2hlbWEgPSB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSk7CiAgICBpZiAoIXNjaGVtYSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfSBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBWYWxpZGF0aW9uRXJyb3IpIHsKICAgICAgICB0aGlzLmVycm9ycy5wdXNoKHNjaGVtYSk7CiAgICAgICAgcmV0dXJuIHNjaGVtYTsKICAgIH0KCiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoOwogICAgdmFyIGZyb3plbkluZGV4LAogICAgICAgIHNjYW5uZWRGcm96ZW5TY2hlbWFJbmRleCA9IG51bGwsCiAgICAgICAgc2Nhbm5lZFNjaGVtYXNJbmRleCA9IG51bGw7CiAgICBpZiAodGhpcy5jaGVja1JlY3Vyc2l2ZSAmJiBkYXRhICYmICh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShkYXRhKSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgdG9wTGV2ZWwgPSAhdGhpcy5zY2FubmVkLmxlbmd0aDsKICAgICAgICBpZiAoZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKSB7CiAgICAgICAgICAgIHZhciBzY2hlbWFJbmRleCA9IGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5pbmRleE9mKHNjaGVtYSk7CiAgICAgICAgICAgIGlmIChzY2hlbWFJbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuY29uY2F0KGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtzY2hlbWFJbmRleF0pOwogICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaWYgKCgwLCBfaXNGcm96ZW4yLmRlZmF1bHQpKGRhdGEpKSB7CiAgICAgICAgICAgIGZyb3plbkluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuLmluZGV4T2YoZGF0YSk7CiAgICAgICAgICAgIGlmIChmcm96ZW5JbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgIHZhciBmcm96ZW5TY2hlbWFJbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdLmluZGV4T2Yoc2NoZW1hKTsKICAgICAgICAgICAgICAgIGlmIChmcm96ZW5TY2hlbWFJbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmNvbmNhdCh0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2Zyb3plbkluZGV4XVtmcm96ZW5TY2hlbWFJbmRleF0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHRoaXMuc2Nhbm5lZC5wdXNoKGRhdGEpOwogICAgICAgIGlmICgoMCwgX2lzRnJvemVuMi5kZWZhdWx0KShkYXRhKSkgewogICAgICAgICAgICBpZiAoZnJvemVuSW5kZXggPT09IC0xKSB7CiAgICAgICAgICAgICAgICBmcm96ZW5JbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plbi5sZW5ndGg7CiAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4ucHVzaChkYXRhKTsKICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMucHVzaChbXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1tmcm96ZW5JbmRleF0ubGVuZ3RoOwogICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2Zyb3plbkluZGV4XVtzY2FubmVkRnJvemVuU2NoZW1hSW5kZXhdID0gc2NoZW1hOwogICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2Zyb3plbkluZGV4XVtzY2FubmVkRnJvemVuU2NoZW1hSW5kZXhdID0gW107CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKCFkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0pIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoZGF0YSwgdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkoZGF0YSwgdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgLy9JRSA3Lzggd29ya2Fyb3VuZAogICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSA9IFtdOwogICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XSA9IFtdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHNjYW5uZWRTY2hlbWFzSW5kZXggPSBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0ubGVuZ3RoOwogICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSBzY2hlbWE7CiAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtzY2FubmVkU2NoZW1hc0luZGV4XSA9IFtdOwogICAgICAgIH0KICAgIH0KCiAgICB2YXIgZXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVCYXNpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZU51bWVyaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVTdHJpbmcoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVBcnJheShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZU9iamVjdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZUNvbWJpbmF0aW9ucyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZUh5cGVybWVkaWEoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVGb3JtYXQoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVEZWZpbmVkS2V5d29yZHMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IG51bGw7CgogICAgaWYgKHRvcExldmVsKSB7CiAgICAgICAgd2hpbGUgKHRoaXMuc2Nhbm5lZC5sZW5ndGgpIHsKICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLnNjYW5uZWQucG9wKCk7CiAgICAgICAgICAgIGRlbGV0ZSBpdGVtW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV07CiAgICAgICAgfQogICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plbiA9IFtdOwogICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMgPSBbXTsKICAgIH0KCiAgICBpZiAoZXJyb3IgfHwgZXJyb3JDb3VudCAhPT0gdGhpcy5lcnJvcnMubGVuZ3RoKSB7CiAgICAgICAgd2hpbGUgKGRhdGFQYXRoUGFydHMgJiYgZGF0YVBhdGhQYXJ0cy5sZW5ndGggfHwgc2NoZW1hUGF0aFBhcnRzICYmIHNjaGVtYVBhdGhQYXJ0cy5sZW5ndGgpIHsKICAgICAgICAgICAgdmFyIGRhdGFQYXJ0ID0gZGF0YVBhdGhQYXJ0cyAmJiBkYXRhUGF0aFBhcnRzLmxlbmd0aCA/ICIiICsgZGF0YVBhdGhQYXJ0cy5wb3AoKSA6IG51bGw7CiAgICAgICAgICAgIHZhciBzY2hlbWFQYXJ0ID0gc2NoZW1hUGF0aFBhcnRzICYmIHNjaGVtYVBhdGhQYXJ0cy5sZW5ndGggPyAiIiArIHNjaGVtYVBhdGhQYXJ0cy5wb3AoKSA6IG51bGw7CiAgICAgICAgICAgIGlmIChlcnJvcikgewogICAgICAgICAgICAgICAgZXJyb3IgPSBlcnJvci5wcmVmaXhXaXRoKGRhdGFQYXJ0LCBzY2hlbWFQYXJ0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB0aGlzLnByZWZpeEVycm9ycyhlcnJvckNvdW50LCBkYXRhUGFydCwgc2NoZW1hUGFydCk7CiAgICAgICAgfQogICAgfQoKICAgIGlmIChzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggIT09IG51bGwpIHsKICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2Zyb3plbkluZGV4XVtzY2FubmVkRnJvemVuU2NoZW1hSW5kZXhdID0gdGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KTsKICAgIH0gZWxzZSBpZiAoc2Nhbm5lZFNjaGVtYXNJbmRleCAhPT0gbnVsbCkgewogICAgICAgIGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtzY2FubmVkU2NoZW1hc0luZGV4XSA9IHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCk7CiAgICB9CgogICAgcmV0dXJuIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpOwp9OwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEpIHsKICAgIGlmICh0eXBlb2Ygc2NoZW1hLmZvcm1hdCAhPT0gJ3N0cmluZycgfHwgIXRoaXMuZm9ybWF0VmFsaWRhdG9yc1tzY2hlbWEuZm9ybWF0XSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIGVycm9yTWVzc2FnZSA9IHRoaXMuZm9ybWF0VmFsaWRhdG9yc1tzY2hlbWEuZm9ybWF0XS5jYWxsKG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICBpZiAodHlwZW9mIGVycm9yTWVzc2FnZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGVycm9yTWVzc2FnZSA9PT0gJ251bWJlcicpIHsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkZPUk1BVF9DVVNUT00sIHsgbWVzc2FnZTogZXJyb3JNZXNzYWdlIH0sICcnLCAnL2Zvcm1hdCcsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICB9IGVsc2UgaWYgKGVycm9yTWVzc2FnZSAmJiAodHlwZW9mIGVycm9yTWVzc2FnZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShlcnJvck1lc3NhZ2UpKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkZPUk1BVF9DVVNUT00sIHsgbWVzc2FnZTogZXJyb3JNZXNzYWdlLm1lc3NhZ2UgfHwgIj8iIH0sIGVycm9yTWVzc2FnZS5kYXRhUGF0aCB8fCAnJywgZXJyb3JNZXNzYWdlLnNjaGVtYVBhdGggfHwgIi9mb3JtYXQiLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgfQogICAgcmV0dXJuIG51bGw7Cn07ClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlRGVmaW5lZEtleXdvcmRzID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5kZWZpbmVkS2V5d29yZHMpIHsKICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVtrZXldID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgdmFyIHZhbGlkYXRpb25GdW5jdGlvbnMgPSB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXldOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsaWRhdGlvbkZ1bmN0aW9ucy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgZnVuYyA9IHZhbGlkYXRpb25GdW5jdGlvbnNbaV07CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jKGRhdGEsIHNjaGVtYVtrZXldLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCk7CiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcmVzdWx0ID09PSAnbnVtYmVyJykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5LRVlXT1JEX0NVU1RPTSwgewogICAgICAgICAgICAgICAgICAgIGtleToga2V5LAogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3VsdAogICAgICAgICAgICAgICAgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpLnByZWZpeFdpdGgobnVsbCwga2V5KTsKICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgJiYgKHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkocmVzdWx0KSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHJlc3VsdC5jb2RlOwogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2RlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgIGlmICghRXJyb3JDb2Rlc1tjb2RlXSkgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZGVmaW5lZCBlcnJvciBjb2RlICh1c2UgZGVmaW5lRXJyb3IpOiAnICsgY29kZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNvZGUgPSBFcnJvckNvZGVzW2NvZGVdOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29kZSAhPT0gJ251bWJlcicpIHsKICAgICAgICAgICAgICAgICAgICBjb2RlID0gRXJyb3JDb2Rlcy5LRVlXT1JEX0NVU1RPTTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlUGFyYW1zID0gKDAsIF90eXBlb2YzLmRlZmF1bHQpKHJlc3VsdC5tZXNzYWdlKSA9PT0gJ29iamVjdCcgPyByZXN1bHQubWVzc2FnZSA6IHsKICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSwKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZSB8fCAiPyIKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgc2NoZW1hUGF0aCA9IHJlc3VsdC5zY2hlbWFQYXRoIHx8ICIvIiArIGtleS5yZXBsYWNlKC9+L2csICd+MCcpLnJlcGxhY2UoL1wvL2csICd+MScpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoY29kZSwgbWVzc2FnZVBhcmFtcywgcmVzdWx0LmRhdGFQYXRoIHx8IG51bGwsIHNjaGVtYVBhdGgsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKCmZ1bmN0aW9uIHJlY3Vyc2l2ZUNvbXBhcmUoQSwgQikgewogICAgaWYgKEEgPT09IEIpIHsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGlmIChBICYmIEIgJiYgKHR5cGVvZiBBID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKEEpKSA9PT0gIm9iamVjdCIgJiYgKHR5cGVvZiBCID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKEIpKSA9PT0gIm9iamVjdCIpIHsKICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShBKSAhPT0gQXJyYXkuaXNBcnJheShCKSkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KEEpKSB7CiAgICAgICAgICAgIGlmIChBLmxlbmd0aCAhPT0gQi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IEEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgIGlmICghcmVjdXJzaXZlQ29tcGFyZShBW2ldLCBCW2ldKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHZhciBrZXk7CiAgICAgICAgICAgIGZvciAoa2V5IGluIEEpIHsKICAgICAgICAgICAgICAgIGlmIChCW2tleV0gPT09IHVuZGVmaW5lZCAmJiBBW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKGtleSBpbiBCKSB7CiAgICAgICAgICAgICAgICBpZiAoQVtrZXldID09PSB1bmRlZmluZWQgJiYgQltrZXldICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChrZXkgaW4gQSkgewogICAgICAgICAgICAgICAgaWYgKCFyZWN1cnNpdmVDb21wYXJlKEFba2V5XSwgQltrZXldKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKfQoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVCYXNpYyA9IGZ1bmN0aW9uIHZhbGlkYXRlQmFzaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIHZhciBlcnJvcjsKICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVUeXBlKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSkgewogICAgICAgIHJldHVybiBlcnJvci5wcmVmaXhXaXRoKG51bGwsICJ0eXBlIik7CiAgICB9CiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlRW51bShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHsKICAgICAgICByZXR1cm4gZXJyb3IucHJlZml4V2l0aChudWxsLCAidHlwZSIpOwogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZVR5cGUgPSBmdW5jdGlvbiB2YWxpZGF0ZVR5cGUoZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAoc2NoZW1hLnR5cGUgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIGRhdGFUeXBlID0gdHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoZGF0YSk7CiAgICBpZiAoZGF0YSA9PT0gbnVsbCkgewogICAgICAgIGRhdGFUeXBlID0gIm51bGwiOwogICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7CiAgICAgICAgZGF0YVR5cGUgPSAiYXJyYXkiOwogICAgfQogICAgdmFyIGFsbG93ZWRUeXBlcyA9IHNjaGVtYS50eXBlOwogICAgaWYgKCFBcnJheS5pc0FycmF5KGFsbG93ZWRUeXBlcykpIHsKICAgICAgICBhbGxvd2VkVHlwZXMgPSBbYWxsb3dlZFR5cGVzXTsKICAgIH0KCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbG93ZWRUeXBlcy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciB0eXBlID0gYWxsb3dlZFR5cGVzW2ldOwogICAgICAgIGlmICh0eXBlID09PSBkYXRhVHlwZSB8fCB0eXBlID09PSAiaW50ZWdlciIgJiYgZGF0YVR5cGUgPT09ICJudW1iZXIiICYmIGRhdGEgJSAxID09PSAwKSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuSU5WQUxJRF9UWVBFLCB7CiAgICAgICAgdHlwZTogZGF0YVR5cGUsCiAgICAgICAgZXhwZWN0ZWQ6IGFsbG93ZWRUeXBlcy5qb2luKCIvIikKICAgIH0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlRW51bSA9IGZ1bmN0aW9uIHZhbGlkYXRlRW51bShkYXRhLCBzY2hlbWEpIHsKICAgIGlmIChzY2hlbWFbImVudW0iXSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYVsiZW51bSJdLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGVudW1WYWwgPSBzY2hlbWFbImVudW0iXVtpXTsKICAgICAgICBpZiAocmVjdXJzaXZlQ29tcGFyZShkYXRhLCBlbnVtVmFsKSkgewogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkVOVU1fTUlTTUFUQ0gsIHsgdmFsdWU6IHR5cGVvZiBKU09OICE9PSAndW5kZWZpbmVkJyA/ICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShkYXRhKSA6IGRhdGEgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOdW1lcmljID0gZnVuY3Rpb24gdmFsaWRhdGVOdW1lcmljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU11bHRpcGxlT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVNaW5NYXgoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVOYU4oZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IG51bGw7Cn07Cgp2YXIgQ0xPU0VfRU5PVUdIX0xPVyA9IE1hdGgucG93KDIsIC01MSk7CnZhciBDTE9TRV9FTk9VR0hfSElHSCA9IDEgLSBDTE9TRV9FTk9VR0hfTE9XOwpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU11bHRpcGxlT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZU11bHRpcGxlT2YoZGF0YSwgc2NoZW1hKSB7CiAgICB2YXIgbXVsdGlwbGVPZiA9IHNjaGVtYS5tdWx0aXBsZU9mIHx8IHNjaGVtYS5kaXZpc2libGVCeTsKICAgIGlmIChtdWx0aXBsZU9mID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gIm51bWJlciIpIHsKICAgICAgICB2YXIgcmVtYWluZGVyID0gZGF0YSAvIG11bHRpcGxlT2YgJSAxOwogICAgICAgIGlmIChyZW1haW5kZXIgPj0gQ0xPU0VfRU5PVUdIX0xPVyAmJiByZW1haW5kZXIgPCBDTE9TRV9FTk9VR0hfSElHSCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NVUxUSVBMRV9PRiwgewogICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsCiAgICAgICAgICAgICAgICBtdWx0aXBsZU9mOiBtdWx0aXBsZU9mCiAgICAgICAgICAgIH0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTWluTWF4ID0gZnVuY3Rpb24gdmFsaWRhdGVNaW5NYXgoZGF0YSwgc2NoZW1hKSB7CiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICJudW1iZXIiKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICBpZiAoc2NoZW1hLm1pbmltdW0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChkYXRhIDwgc2NoZW1hLm1pbmltdW0pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUlOSU1VTSwgewogICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsCiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluaW11bQogICAgICAgICAgICB9LCAnJywgJy9taW5pbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB9CiAgICAgICAgaWYgKHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtICYmIGRhdGEgPT09IHNjaGVtYS5taW5pbXVtKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFLCB7CiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSwKICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5pbXVtCiAgICAgICAgICAgIH0sICcnLCAnL2V4Y2x1c2l2ZU1pbmltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIH0KICAgIH0KICAgIGlmIChzY2hlbWEubWF4aW11bSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGRhdGEgPiBzY2hlbWEubWF4aW11bSkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NQVhJTVVNLCB7CiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSwKICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhpbXVtCiAgICAgICAgICAgIH0sICcnLCAnL21heGltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgIH0KICAgICAgICBpZiAoc2NoZW1hLmV4Y2x1c2l2ZU1heGltdW0gJiYgZGF0YSA9PT0gc2NoZW1hLm1heGltdW0pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUsIHsKICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLAogICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heGltdW0KICAgICAgICAgICAgfSwgJycsICcvZXhjbHVzaXZlTWF4aW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU5hTiA9IGZ1bmN0aW9uIHZhbGlkYXRlTmFOKGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHR5cGVvZiBkYXRhICE9PSAibnVtYmVyIikgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgaWYgKGlzTmFOKGRhdGEpID09PSB0cnVlIHx8IGRhdGEgPT09IEluZmluaXR5IHx8IGRhdGEgPT09IC1JbmZpbml0eSkgewogICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX05PVF9BX05VTUJFUiwgeyB2YWx1ZTogZGF0YSB9LCAnJywgJy90eXBlJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmcgPSBmdW5jdGlvbiB2YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTdHJpbmdMZW5ndGgoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVTdHJpbmdQYXR0ZXJuKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdMZW5ndGggPSBmdW5jdGlvbiB2YWxpZGF0ZVN0cmluZ0xlbmd0aChkYXRhLCBzY2hlbWEpIHsKICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gInN0cmluZyIpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIGlmIChzY2hlbWEubWluTGVuZ3RoICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBzY2hlbWEubWluTGVuZ3RoKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX0xFTkdUSF9TSE9SVCwgewogICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCwKICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5MZW5ndGgKICAgICAgICAgICAgfSwgJycsICcvbWluTGVuZ3RoJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB9CiAgICB9CiAgICBpZiAoc2NoZW1hLm1heExlbmd0aCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gc2NoZW1hLm1heExlbmd0aCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19MRU5HVEhfTE9ORywgewogICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCwKICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhMZW5ndGgKICAgICAgICAgICAgfSwgJycsICcvbWF4TGVuZ3RoJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nUGF0dGVybiA9IGZ1bmN0aW9uIHZhbGlkYXRlU3RyaW5nUGF0dGVybihkYXRhLCBzY2hlbWEpIHsKICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gInN0cmluZyIgfHwgdHlwZW9mIHNjaGVtYS5wYXR0ZXJuICE9PSAic3RyaW5nIiAmJiAhKHNjaGVtYS5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgdmFyIHJlZ2V4cDsKICAgIGlmIChzY2hlbWEucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkgewogICAgICAgIHJlZ2V4cCA9IHNjaGVtYS5wYXR0ZXJuOwogICAgfSBlbHNlIHsKICAgICAgICB2YXIgYm9keSwKICAgICAgICAgICAgZmxhZ3MgPSAnJzsKICAgICAgICAvLyBDaGVjayBmb3IgcmVndWxhciBleHByZXNzaW9uIGxpdGVyYWxzCiAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtNy44LjUKICAgICAgICB2YXIgbGl0ZXJhbCA9IHNjaGVtYS5wYXR0ZXJuLm1hdGNoKC9eXC8oLispXC8oW2ltZ10qKSQvKTsKICAgICAgICBpZiAobGl0ZXJhbCkgewogICAgICAgICAgICBib2R5ID0gbGl0ZXJhbFsxXTsKICAgICAgICAgICAgZmxhZ3MgPSBsaXRlcmFsWzJdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJvZHkgPSBzY2hlbWEucGF0dGVybjsKICAgICAgICB9CiAgICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChib2R5LCBmbGFncyk7CiAgICB9CiAgICBpZiAoIXJlZ2V4cC50ZXN0KGRhdGEpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5TVFJJTkdfUEFUVEVSTiwgeyBwYXR0ZXJuOiBzY2hlbWEucGF0dGVybiB9LCAnJywgJy9wYXR0ZXJuJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheSA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXkoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIHRoaXMudmFsaWRhdGVBcnJheUxlbmd0aChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZUFycmF5VW5pcXVlSXRlbXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVBcnJheUl0ZW1zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheUxlbmd0aCA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlMZW5ndGgoZGF0YSwgc2NoZW1hKSB7CiAgICB2YXIgZXJyb3I7CiAgICBpZiAoc2NoZW1hLm1pbkl0ZW1zICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBzY2hlbWEubWluSXRlbXMpIHsKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfTEVOR1RIX1NIT1JULCB7CiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLAogICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbkl0ZW1zCiAgICAgICAgICAgIH0sICcnLCAnL21pbkl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBpZiAoc2NoZW1hLm1heEl0ZW1zICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBzY2hlbWEubWF4SXRlbXMpIHsKICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfTEVOR1RIX0xPTkcsIHsKICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsCiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4SXRlbXMKICAgICAgICAgICAgfSwgJycsICcvbWF4SXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zID0gZnVuY3Rpb24gdmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGRhdGEsIHNjaGVtYSkgewogICAgaWYgKHNjaGVtYS51bmlxdWVJdGVtcykgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCBkYXRhLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlQ29tcGFyZShkYXRhW2ldLCBkYXRhW2pdKSkgewogICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9VTklRVUUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gxOiBpLAogICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDI6IGoKICAgICAgICAgICAgICAgICAgICB9LCAnJywgJy91bmlxdWVJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlJdGVtcyA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKHNjaGVtYS5pdGVtcyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgZXJyb3IsIGk7CiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEuaXRlbXMpKSB7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKGkgPCBzY2hlbWEuaXRlbXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5pdGVtc1tpXSwgW2ldLCBbIml0ZW1zIiwgaV0sIGRhdGFQb2ludGVyUGF0aCArICIvIiArIGkpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgaWYgKHNjaGVtYS5hZGRpdGlvbmFsSXRlbXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuYWRkaXRpb25hbEl0ZW1zID09PSAiYm9vbGVhbiIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfQURESVRJT05BTF9JVEVNUywge30sICcvJyArIGksICcvYWRkaXRpb25hbEl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuYWRkaXRpb25hbEl0ZW1zLCBbaV0sIFsiYWRkaXRpb25hbEl0ZW1zIl0sIGRhdGFQb2ludGVyUGF0aCArICIvIiArIGkpKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5pdGVtcywgW2ldLCBbIml0ZW1zIl0sIGRhdGFQb2ludGVyUGF0aCArICIvIiArIGkpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0ID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHsKICAgIGlmICgodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoZGF0YSkpICE9PSAib2JqZWN0IiB8fCBkYXRhID09PSBudWxsIHx8IEFycmF5LmlzQXJyYXkoZGF0YSkpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHJldHVybiB0aGlzLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7CiAgICB2YXIga2V5cyA9ICgwLCBfa2V5czIuZGVmYXVsdCkoZGF0YSk7CiAgICB2YXIgZXJyb3I7CiAgICBpZiAoc2NoZW1hLm1pblByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChrZXlzLmxlbmd0aCA8IHNjaGVtYS5taW5Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU0sIHsKICAgICAgICAgICAgICAgIHByb3BlcnR5Q291bnQ6IGtleXMubGVuZ3RoLAogICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pblByb3BlcnRpZXMKICAgICAgICAgICAgfSwgJycsICcvbWluUHJvcGVydGllcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgaWYgKHNjaGVtYS5tYXhQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiBzY2hlbWEubWF4UHJvcGVydGllcykgewogICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNLCB7CiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvdW50OiBrZXlzLmxlbmd0aCwKICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhQcm9wZXJ0aWVzCiAgICAgICAgICAgIH0sICcnLCAnL21heFByb3BlcnRpZXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcyhkYXRhLCBzY2hlbWEpIHsKICAgIGlmIChzY2hlbWEucmVxdWlyZWQgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLnJlcXVpcmVkLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBrZXkgPSBzY2hlbWEucmVxdWlyZWRbaV07CiAgICAgICAgICAgIGlmIChkYXRhW2tleV0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9SRVFVSVJFRCwgeyBrZXk6IGtleSB9LCAnJywgJy9yZXF1aXJlZC8nICsgaSwgbnVsbCwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICB2YXIgZXJyb3I7CiAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkgewogICAgICAgIHZhciBrZXlQb2ludGVyUGF0aCA9IGRhdGFQb2ludGVyUGF0aCArICIvIiArIGtleS5yZXBsYWNlKC9+L2csICd+MCcpLnJlcGxhY2UoL1wvL2csICd+MScpOwogICAgICAgIHZhciBmb3VuZE1hdGNoID0gZmFsc2U7CiAgICAgICAgaWYgKHNjaGVtYS5wcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQgJiYgc2NoZW1hLnByb3BlcnRpZXNba2V5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlOwogICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLnByb3BlcnRpZXNba2V5XSwgW2tleV0sIFsicHJvcGVydGllcyIsIGtleV0sIGtleVBvaW50ZXJQYXRoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIChzY2hlbWEucGF0dGVyblByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBmb3IgKHZhciBwYXR0ZXJuS2V5IGluIHNjaGVtYS5wYXR0ZXJuUHJvcGVydGllcykgewogICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAocGF0dGVybktleSk7CiAgICAgICAgICAgICAgICBpZiAocmVnZXhwLnRlc3Qoa2V5KSkgewogICAgICAgICAgICAgICAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtrZXldLCBzY2hlbWEucGF0dGVyblByb3BlcnRpZXNbcGF0dGVybktleV0sIFtrZXldLCBbInBhdHRlcm5Qcm9wZXJ0aWVzIiwgcGF0dGVybktleV0sIGtleVBvaW50ZXJQYXRoKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmICghZm91bmRNYXRjaCkgewogICAgICAgICAgICBpZiAoc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSAiYm9vbGVhbiIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcykgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTLCB7IGtleToga2V5IH0sICcnLCAnL2FkZGl0aW9uYWxQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKGtleSwgbnVsbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzLCBba2V5XSwgWyJhZGRpdGlvbmFsUHJvcGVydGllcyJdLCBrZXlQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMgJiYgIXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSkgewogICAgICAgICAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0gPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdID0gdHJ1ZTsKICAgICAgICAgICAgZGVsZXRlIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBudWxsOwp9OwoKVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgdmFyIGVycm9yOwogICAgaWYgKHNjaGVtYS5kZXBlbmRlbmNpZXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGZvciAodmFyIGRlcEtleSBpbiBzY2hlbWEuZGVwZW5kZW5jaWVzKSB7CiAgICAgICAgICAgIGlmIChkYXRhW2RlcEtleV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdmFyIGRlcCA9IHNjaGVtYS5kZXBlbmRlbmNpZXNbZGVwS2V5XTsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGVwID09PSAic3RyaW5nIikgewogICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2RlcF0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfREVQRU5ERU5DWV9LRVksIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogZGVwS2V5LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZzogZGVwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKG51bGwsIGRlcEtleSkucHJlZml4V2l0aChudWxsLCAiZGVwZW5kZW5jaWVzIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRlcCkpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRLZXkgPSBkZXBbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW3JlcXVpcmVkS2V5XSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfREVQRU5ERU5DWV9LRVksIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nOiByZXF1aXJlZEtleQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJycsICcvJyArIGksIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBkZXBLZXkpLnByZWZpeFdpdGgobnVsbCwgImRlcGVuZGVuY2llcyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIGRlcCwgW10sIFsiZGVwZW5kZW5jaWVzIiwgZGVwS2V5XSwgZGF0YVBvaW50ZXJQYXRoKSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUNvbWJpbmF0aW9ucyA9IGZ1bmN0aW9uIHZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUFsbE9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB8fCB0aGlzLnZhbGlkYXRlQW55T2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHx8IHRoaXMudmFsaWRhdGVPbmVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgdGhpcy52YWxpZGF0ZU5vdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgfHwgbnVsbDsKfTsKClZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQWxsT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZUFsbE9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoc2NoZW1hLmFsbE9mID09PSB1bmRlZmluZWQpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBlcnJvcjsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmFsbE9mLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5hbGxPZltpXTsKICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHN1YlNjaGVtYSwgW10sIFsiYWxsT2YiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKSkgewogICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFueU9mID0gZnVuY3Rpb24gdmFsaWRhdGVBbnlPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKHNjaGVtYS5hbnlPZiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgZXJyb3JzID0gW107CiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoOwogICAgdmFyIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzLCBvbGRLbm93blByb3BlcnR5UGF0aHM7CiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgICAgIG9sZEtub3duUHJvcGVydHlQYXRocyA9IHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgfQogICAgdmFyIGVycm9yQXRFbmQgPSB0cnVlOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEuYW55T2YubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTsKICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTsKICAgICAgICB9CiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5hbnlPZltpXTsKCiAgICAgICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7CiAgICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbImFueU9mIiwgaV0sIGRhdGFQb2ludGVyUGF0aCk7CgogICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCAmJiBlcnJvckNvdW50ID09PSB0aGlzLmVycm9ycy5sZW5ndGgpIHsKICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpOwoKICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICAgICAgZm9yICh2YXIga25vd25LZXkgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpIHsKICAgICAgICAgICAgICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHNba25vd25LZXldID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2xkVW5rbm93blByb3BlcnR5UGF0aHNba25vd25LZXldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yICh2YXIgdW5rbm93bktleSBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFvbGRLbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY29udGludWUgbG9vcGluZyBzbyB3ZSBjYXRjaCBhbGwgdGhlIHByb3BlcnR5IGRlZmluaXRpb25zLCBidXQgd2UgZG9uJ3Qgd2FudCB0byByZXR1cm4gYW4gZXJyb3IKICAgICAgICAgICAgICAgIGVycm9yQXRFbmQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yLnByZWZpeFdpdGgobnVsbCwgIiIgKyBpKS5wcmVmaXhXaXRoKG51bGwsICJhbnlPZiIpKTsKICAgICAgICB9CiAgICB9CiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkS25vd25Qcm9wZXJ0eVBhdGhzOwogICAgfQogICAgaWYgKGVycm9yQXRFbmQpIHsKICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCkpOwogICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFOWV9PRl9NSVNTSU5HLCB7fSwgIiIsICIvYW55T2YiLCBlcnJvcnMsIGRhdGEsIHNjaGVtYSk7CiAgICB9Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9uZU9mID0gZnVuY3Rpb24gdmFsaWRhdGVPbmVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKHNjaGVtYS5vbmVPZiA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgdmFsaWRJbmRleCA9IG51bGw7CiAgICB2YXIgZXJyb3JzID0gW107CiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoOwogICAgdmFyIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzLCBvbGRLbm93blByb3BlcnR5UGF0aHM7CiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgICAgIG9sZEtub3duUHJvcGVydHlQYXRocyA9IHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgfQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEub25lT2YubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTsKICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTsKICAgICAgICB9CiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5vbmVPZltpXTsKCiAgICAgICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7CiAgICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbIm9uZU9mIiwgaV0sIGRhdGFQb2ludGVyUGF0aCk7CgogICAgICAgIGlmIChlcnJvciA9PT0gbnVsbCAmJiBlcnJvckNvdW50ID09PSB0aGlzLmVycm9ycy5sZW5ndGgpIHsKICAgICAgICAgICAgaWYgKHZhbGlkSW5kZXggPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHZhbGlkSW5kZXggPSBpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PTkVfT0ZfTVVMVElQTEUsIHsKICAgICAgICAgICAgICAgICAgICBpbmRleDE6IHZhbGlkSW5kZXgsCiAgICAgICAgICAgICAgICAgICAgaW5kZXgyOiBpCiAgICAgICAgICAgICAgICB9LCAiIiwgIi9vbmVPZiIsIG51bGwsIGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICAgICAgZm9yICh2YXIga25vd25LZXkgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpIHsKICAgICAgICAgICAgICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHNba25vd25LZXldID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2xkVW5rbm93blByb3BlcnR5UGF0aHNba25vd25LZXldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZm9yICh2YXIgdW5rbm93bktleSBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFvbGRLbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHsKICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3IpOwogICAgICAgIH0KICAgIH0KICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7CiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7CiAgICB9CiAgICBpZiAodmFsaWRJbmRleCA9PT0gbnVsbCkgewogICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KSk7CiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpOwogICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT05FX09GX01JU1NJTkcsIHt9LCAiIiwgIi9vbmVPZiIsIGVycm9ycywgZGF0YSwgc2NoZW1hKTsKICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpOwogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU5vdCA9IGZ1bmN0aW9uIHZhbGlkYXRlTm90KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7CiAgICBpZiAoc2NoZW1hLm5vdCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICB2YXIgb2xkRXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDsKICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzOwogICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykgewogICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy51bmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRoczsKICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307CiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTsKICAgIH0KICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc2NoZW1hLm5vdCwgbnVsbCwgbnVsbCwgZGF0YVBvaW50ZXJQYXRoKTsKICAgIHZhciBub3RFcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZShvbGRFcnJvckNvdW50KTsKICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgb2xkRXJyb3JDb3VudCk7CiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzOwogICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkS25vd25Qcm9wZXJ0eVBhdGhzOwogICAgfQogICAgaWYgKGVycm9yID09PSBudWxsICYmIG5vdEVycm9ycy5sZW5ndGggPT09IDApIHsKICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5PVF9QQVNTRUQsIHt9LCAiIiwgIi9ub3QiLCBudWxsLCBkYXRhLCBzY2hlbWEpOwogICAgfQogICAgcmV0dXJuIG51bGw7Cn07CgpWYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUh5cGVybWVkaWEgPSBmdW5jdGlvbiB2YWxpZGF0ZUNvbWJpbmF0aW9ucyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkgewogICAgaWYgKCFzY2hlbWEubGlua3MpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHZhciBlcnJvcjsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmxpbmtzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGxkbyA9IHNjaGVtYS5saW5rc1tpXTsKICAgICAgICBpZiAobGRvLnJlbCA9PT0gImRlc2NyaWJlZGJ5IikgewogICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBuZXcgVXJpVGVtcGxhdGUobGRvLmhyZWYpOwogICAgICAgICAgICB2YXIgYWxsUHJlc2VudCA9IHRydWU7CiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGVtcGxhdGUudmFyTmFtZXMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgIGlmICghKHRlbXBsYXRlLnZhck5hbWVzW2pdIGluIGRhdGEpKSB7CiAgICAgICAgICAgICAgICAgICAgYWxsUHJlc2VudCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChhbGxQcmVzZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgc2NoZW1hVXJsID0gdGVtcGxhdGUuZmlsbEZyb21PYmplY3QoZGF0YSk7CiAgICAgICAgICAgICAgICB2YXIgc3ViU2NoZW1hID0geyAiJHJlZiI6IHNjaGVtYVVybCB9OwogICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbImxpbmtzIiwgaV0sIGRhdGFQb2ludGVyUGF0aCkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn07CgovLyBwYXJzZVVSSSgpIGFuZCByZXNvbHZlVXJsKCkgYXJlIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTA4ODg1MAovLyAgIC0gIHJlbGVhc2VkIGFzIHB1YmxpYyBkb21haW4gYnkgYXV0aG9yICgiWWFmZmxlIikgLSBzZWUgY29tbWVudHMgb24gZ2lzdAoKZnVuY3Rpb24gcGFyc2VVUkkodXJsKSB7CiAgICB2YXIgbSA9IFN0cmluZyh1cmwpLnJlcGxhY2UoL15ccyt8XHMrJC9nLCAnJykubWF0Y2goL14oW146XC8/I10rOik/KFwvXC8oPzpbXjpAXSooPzo6W146QF0qKT9AKT8oKFteOlwvPyNdKikoPzo6KFxkKikpPykpPyhbXj8jXSopKFw/W14jXSopPygjW1xzXFNdKik/Lyk7CiAgICAvLyBhdXRob3JpdHkgPSAnLy8nICsgdXNlciArICc6JyArIHBhc3MgJ0AnICsgaG9zdG5hbWUgKyAnOicgcG9ydAogICAgcmV0dXJuIG0gPyB7CiAgICAgICAgaHJlZjogbVswXSB8fCAnJywKICAgICAgICBwcm90b2NvbDogbVsxXSB8fCAnJywKICAgICAgICBhdXRob3JpdHk6IG1bMl0gfHwgJycsCiAgICAgICAgaG9zdDogbVszXSB8fCAnJywKICAgICAgICBob3N0bmFtZTogbVs0XSB8fCAnJywKICAgICAgICBwb3J0OiBtWzVdIHx8ICcnLAogICAgICAgIHBhdGhuYW1lOiBtWzZdIHx8ICcnLAogICAgICAgIHNlYXJjaDogbVs3XSB8fCAnJywKICAgICAgICBoYXNoOiBtWzhdIHx8ICcnCiAgICB9IDogbnVsbDsKfQoKZnVuY3Rpb24gcmVzb2x2ZVVybChiYXNlLCBocmVmKSB7CiAgICAvLyBSRkMgMzk4NgoKICAgIGZ1bmN0aW9uIHJlbW92ZURvdFNlZ21lbnRzKGlucHV0KSB7CiAgICAgICAgdmFyIG91dHB1dCA9IFtdOwogICAgICAgIGlucHV0LnJlcGxhY2UoL14oXC5cLj8oXC98JCkpKy8sICcnKS5yZXBsYWNlKC9cLyhcLihcL3wkKSkrL2csICcvJykucmVwbGFjZSgvXC9cLlwuJC8sICcvLi4vJykucmVwbGFjZSgvXC8/W15cL10qL2csIGZ1bmN0aW9uIChwKSB7CiAgICAgICAgICAgIGlmIChwID09PSAnLy4uJykgewogICAgICAgICAgICAgICAgb3V0cHV0LnBvcCgpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gocCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpLnJlcGxhY2UoL15cLy8sIGlucHV0LmNoYXJBdCgwKSA9PT0gJy8nID8gJy8nIDogJycpOwogICAgfQoKICAgIGhyZWYgPSBwYXJzZVVSSShocmVmIHx8ICcnKTsKICAgIGJhc2UgPSBwYXJzZVVSSShiYXNlIHx8ICcnKTsKCiAgICByZXR1cm4gIWhyZWYgfHwgIWJhc2UgPyBudWxsIDogKGhyZWYucHJvdG9jb2wgfHwgYmFzZS5wcm90b2NvbCkgKyAoaHJlZi5wcm90b2NvbCB8fCBocmVmLmF1dGhvcml0eSA/IGhyZWYuYXV0aG9yaXR5IDogYmFzZS5hdXRob3JpdHkpICsgcmVtb3ZlRG90U2VnbWVudHMoaHJlZi5wcm90b2NvbCB8fCBocmVmLmF1dGhvcml0eSB8fCBocmVmLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nID8gaHJlZi5wYXRobmFtZSA6IGhyZWYucGF0aG5hbWUgPyAoYmFzZS5hdXRob3JpdHkgJiYgIWJhc2UucGF0aG5hbWUgPyAnLycgOiAnJykgKyBiYXNlLnBhdGhuYW1lLnNsaWNlKDAsIGJhc2UucGF0aG5hbWUubGFzdEluZGV4T2YoJy8nKSArIDEpICsgaHJlZi5wYXRobmFtZSA6IGJhc2UucGF0aG5hbWUpICsgKGhyZWYucHJvdG9jb2wgfHwgaHJlZi5hdXRob3JpdHkgfHwgaHJlZi5wYXRobmFtZSA/IGhyZWYuc2VhcmNoIDogaHJlZi5zZWFyY2ggfHwgYmFzZS5zZWFyY2gpICsgaHJlZi5oYXNoOwp9CgpmdW5jdGlvbiBnZXREb2N1bWVudFVyaSh1cmkpIHsKICAgIHJldHVybiB1cmkuc3BsaXQoJyMnKVswXTsKfQoKZnVuY3Rpb24gbm9ybVNjaGVtYShzY2hlbWEsIGJhc2VVcmkpIHsKICAgIGlmIChzY2hlbWEgJiYgKHR5cGVvZiBzY2hlbWEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc2NoZW1hKSkgPT09ICJvYmplY3QiKSB7CiAgICAgICAgaWYgKGJhc2VVcmkgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBiYXNlVXJpID0gc2NoZW1hLmlkOwogICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNjaGVtYS5pZCA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgYmFzZVVyaSA9IHJlc29sdmVVcmwoYmFzZVVyaSwgc2NoZW1hLmlkKTsKICAgICAgICAgICAgc2NoZW1hLmlkID0gYmFzZVVyaTsKICAgICAgICB9CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hKSkgewogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgbm9ybVNjaGVtYShzY2hlbWFbaV0sIGJhc2VVcmkpOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFbJyRyZWYnXSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgIHNjaGVtYVsnJHJlZiddID0gcmVzb2x2ZVVybChiYXNlVXJpLCBzY2hlbWFbJyRyZWYnXSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkgewogICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gImVudW0iKSB7CiAgICAgICAgICAgICAgICAgICAgbm9ybVNjaGVtYShzY2hlbWFba2V5XSwgYmFzZVVyaSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIGRlZmF1bHRFcnJvclJlcG9ydGVyKGxhbmd1YWdlKSB7CiAgICBsYW5ndWFnZSA9IGxhbmd1YWdlIHx8ICdlbic7CgogICAgdmFyIGVycm9yTWVzc2FnZXMgPSBsYW5ndWFnZXNbbGFuZ3VhZ2VdOwoKICAgIHJldHVybiBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICB2YXIgbWVzc2FnZVRlbXBsYXRlID0gZXJyb3JNZXNzYWdlc1tlcnJvci5jb2RlXSB8fCBFcnJvck1lc3NhZ2VzRGVmYXVsdFtlcnJvci5jb2RlXTsKICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2VUZW1wbGF0ZSAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgcmV0dXJuICJVbmtub3duIGVycm9yIGNvZGUgIiArIGVycm9yLmNvZGUgKyAiOiAiICsgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKGVycm9yLm1lc3NhZ2VQYXJhbXMpOwogICAgICAgIH0KICAgICAgICB2YXIgbWVzc2FnZVBhcmFtcyA9IGVycm9yLnBhcmFtczsKICAgICAgICAvLyBBZGFwdGVkIGZyb20gQ3JvY2tmb3JkJ3Mgc3VwcGxhbnQoKQogICAgICAgIHJldHVybiBtZXNzYWdlVGVtcGxhdGUucmVwbGFjZSgvXHsoW157fV0qKVx9L2csIGZ1bmN0aW9uICh3aG9sZSwgdmFyTmFtZSkgewogICAgICAgICAgICB2YXIgc3ViVmFsdWUgPSBtZXNzYWdlUGFyYW1zW3Zhck5hbWVdOwogICAgICAgICAgICByZXR1cm4gdHlwZW9mIHN1YlZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygc3ViVmFsdWUgPT09ICdudW1iZXInID8gc3ViVmFsdWUgOiB3aG9sZTsKICAgICAgICB9KTsKICAgIH07Cn0KCnZhciBFcnJvckNvZGVzID0gewogICAgSU5WQUxJRF9UWVBFOiAwLAogICAgRU5VTV9NSVNNQVRDSDogMSwKICAgIEFOWV9PRl9NSVNTSU5HOiAxMCwKICAgIE9ORV9PRl9NSVNTSU5HOiAxMSwKICAgIE9ORV9PRl9NVUxUSVBMRTogMTIsCiAgICBOT1RfUEFTU0VEOiAxMywKICAgIC8vIE51bWVyaWMgZXJyb3JzCiAgICBOVU1CRVJfTVVMVElQTEVfT0Y6IDEwMCwKICAgIE5VTUJFUl9NSU5JTVVNOiAxMDEsCiAgICBOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6IDEwMiwKICAgIE5VTUJFUl9NQVhJTVVNOiAxMDMsCiAgICBOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6IDEwNCwKICAgIE5VTUJFUl9OT1RfQV9OVU1CRVI6IDEwNSwKICAgIC8vIFN0cmluZyBlcnJvcnMKICAgIFNUUklOR19MRU5HVEhfU0hPUlQ6IDIwMCwKICAgIFNUUklOR19MRU5HVEhfTE9ORzogMjAxLAogICAgU1RSSU5HX1BBVFRFUk46IDIwMiwKICAgIC8vIE9iamVjdCBlcnJvcnMKICAgIE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06IDMwMCwKICAgIE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06IDMwMSwKICAgIE9CSkVDVF9SRVFVSVJFRDogMzAyLAogICAgT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzogMzAzLAogICAgT0JKRUNUX0RFUEVOREVOQ1lfS0VZOiAzMDQsCiAgICAvLyBBcnJheSBlcnJvcnMKICAgIEFSUkFZX0xFTkdUSF9TSE9SVDogNDAwLAogICAgQVJSQVlfTEVOR1RIX0xPTkc6IDQwMSwKICAgIEFSUkFZX1VOSVFVRTogNDAyLAogICAgQVJSQVlfQURESVRJT05BTF9JVEVNUzogNDAzLAogICAgLy8gQ3VzdG9tL3VzZXItZGVmaW5lZCBlcnJvcnMKICAgIEZPUk1BVF9DVVNUT006IDUwMCwKICAgIEtFWVdPUkRfQ1VTVE9NOiA1MDEsCiAgICAvLyBTY2hlbWEgc3RydWN0dXJlCiAgICBDSVJDVUxBUl9SRUZFUkVOQ0U6IDYwMCwKICAgIC8vIE5vbi1zdGFuZGFyZCB2YWxpZGF0aW9uIG9wdGlvbnMKICAgIFVOS05PV05fUFJPUEVSVFk6IDEwMDAKfTsKdmFyIEVycm9yQ29kZUxvb2t1cCA9IHt9Owpmb3IgKHZhciBrZXkgaW4gRXJyb3JDb2RlcykgewogICAgRXJyb3JDb2RlTG9va3VwW0Vycm9yQ29kZXNba2V5XV0gPSBrZXk7Cn0KdmFyIEVycm9yTWVzc2FnZXNEZWZhdWx0ID0gewogICAgSU5WQUxJRF9UWVBFOiAiSW52YWxpZCB0eXBlOiB7dHlwZX0gKGV4cGVjdGVkIHtleHBlY3RlZH0pIiwKICAgIEVOVU1fTUlTTUFUQ0g6ICJObyBlbnVtIG1hdGNoIGZvcjoge3ZhbHVlfSIsCiAgICBBTllfT0ZfTUlTU0lORzogIkRhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSBcImFueU9mXCIiLAogICAgT05FX09GX01JU1NJTkc6ICJEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXCJvbmVPZlwiIiwKICAgIE9ORV9PRl9NVUxUSVBMRTogIkRhdGEgaXMgdmFsaWQgYWdhaW5zdCBtb3JlIHRoYW4gb25lIHNjaGVtYSBmcm9tIFwib25lT2ZcIjogaW5kaWNlcyB7aW5kZXgxfSBhbmQge2luZGV4Mn0iLAogICAgTk9UX1BBU1NFRDogIkRhdGEgbWF0Y2hlcyBzY2hlbWEgZnJvbSBcIm5vdFwiIiwKICAgIC8vIE51bWVyaWMgZXJyb3JzCiAgICBOVU1CRVJfTVVMVElQTEVfT0Y6ICJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIG11bHRpcGxlIG9mIHttdWx0aXBsZU9mfSIsCiAgICBOVU1CRVJfTUlOSU1VTTogIlZhbHVlIHt2YWx1ZX0gaXMgbGVzcyB0aGFuIG1pbmltdW0ge21pbmltdW19IiwKICAgIE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRTogIlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1pbmltdW0ge21pbmltdW19IiwKICAgIE5VTUJFUl9NQVhJTVVNOiAiVmFsdWUge3ZhbHVlfSBpcyBncmVhdGVyIHRoYW4gbWF4aW11bSB7bWF4aW11bX0iLAogICAgTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiAiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWF4aW11bSB7bWF4aW11bX0iLAogICAgTlVNQkVSX05PVF9BX05VTUJFUjogIlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgdmFsaWQgbnVtYmVyIiwKICAgIC8vIFN0cmluZyBlcnJvcnMKICAgIFNUUklOR19MRU5HVEhfU0hPUlQ6ICJTdHJpbmcgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSBjaGFycyksIG1pbmltdW0ge21pbmltdW19IiwKICAgIFNUUklOR19MRU5HVEhfTE9ORzogIlN0cmluZyBpcyB0b28gbG9uZyAoe2xlbmd0aH0gY2hhcnMpLCBtYXhpbXVtIHttYXhpbXVtfSIsCiAgICBTVFJJTkdfUEFUVEVSTjogIlN0cmluZyBkb2VzIG5vdCBtYXRjaCBwYXR0ZXJuOiB7cGF0dGVybn0iLAogICAgLy8gT2JqZWN0IGVycm9ycwogICAgT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTTogIlRvbyBmZXcgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtaW5pbXVtIHttaW5pbXVtfSIsCiAgICBPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOiAiVG9vIG1hbnkgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtYXhpbXVtIHttYXhpbXVtfSIsCiAgICBPQkpFQ1RfUkVRVUlSRUQ6ICJNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5OiB7a2V5fSIsCiAgICBPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOiAiQWRkaXRpb25hbCBwcm9wZXJ0aWVzIG5vdCBhbGxvd2VkIiwKICAgIE9CSkVDVF9ERVBFTkRFTkNZX0tFWTogIkRlcGVuZGVuY3kgZmFpbGVkIC0ga2V5IG11c3QgZXhpc3Q6IHttaXNzaW5nfSAoZHVlIHRvIGtleToge2tleX0pIiwKICAgIC8vIEFycmF5IGVycm9ycwogICAgQVJSQVlfTEVOR1RIX1NIT1JUOiAiQXJyYXkgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSksIG1pbmltdW0ge21pbmltdW19IiwKICAgIEFSUkFZX0xFTkdUSF9MT05HOiAiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX0iLAogICAgQVJSQVlfVU5JUVVFOiAiQXJyYXkgaXRlbXMgYXJlIG5vdCB1bmlxdWUgKGluZGljZXMge21hdGNoMX0gYW5kIHttYXRjaDJ9KSIsCiAgICBBUlJBWV9BRERJVElPTkFMX0lURU1TOiAiQWRkaXRpb25hbCBpdGVtcyBub3QgYWxsb3dlZCIsCiAgICAvLyBGb3JtYXQgZXJyb3JzCiAgICBGT1JNQVRfQ1VTVE9NOiAiRm9ybWF0IHZhbGlkYXRpb24gZmFpbGVkICh7bWVzc2FnZX0pIiwKICAgIEtFWVdPUkRfQ1VTVE9NOiAiS2V5d29yZCBmYWlsZWQ6IHtrZXl9ICh7bWVzc2FnZX0pIiwKICAgIC8vIFNjaGVtYSBzdHJ1Y3R1cmUKICAgIENJUkNVTEFSX1JFRkVSRU5DRTogIkNpcmN1bGFyICRyZWZzOiB7dXJsc30iLAogICAgLy8gTm9uLXN0YW5kYXJkIHZhbGlkYXRpb24gb3B0aW9ucwogICAgVU5LTk9XTl9QUk9QRVJUWTogIlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpIgp9OwoKZnVuY3Rpb24gVmFsaWRhdGlvbkVycm9yKGNvZGUsIHBhcmFtcywgZGF0YVBhdGgsIHNjaGVtYVBhdGgsIHN1YkVycm9ycykgewogICAgRXJyb3IuY2FsbCh0aGlzKTsKICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIk5vIGVycm9yIGNvZGUgc3VwcGxpZWQ6ICIgKyBzY2hlbWFQYXRoKTsKICAgIH0KICAgIHRoaXMubWVzc2FnZSA9ICcnOwogICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7CiAgICB0aGlzLmNvZGUgPSBjb2RlOwogICAgdGhpcy5kYXRhUGF0aCA9IGRhdGFQYXRoIHx8ICIiOwogICAgdGhpcy5zY2hlbWFQYXRoID0gc2NoZW1hUGF0aCB8fCAiIjsKICAgIHRoaXMuc3ViRXJyb3JzID0gc3ViRXJyb3JzIHx8IG51bGw7CgogICAgdmFyIGVyciA9IG5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpOwogICAgdGhpcy5zdGFjayA9IGVyci5zdGFjayB8fCBlcnIuc3RhY2t0cmFjZTsKICAgIGlmICghdGhpcy5zdGFjaykgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHRocm93IGVycjsKICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgdGhpcy5zdGFjayA9IGVyci5zdGFjayB8fCBlcnIuc3RhY2t0cmFjZTsKICAgICAgICB9CiAgICB9Cn0KClZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoRXJyb3IucHJvdG90eXBlKTsKVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFZhbGlkYXRpb25FcnJvcjsKVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5uYW1lID0gJ1ZhbGlkYXRpb25FcnJvcic7CgpWYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlLnByZWZpeFdpdGggPSBmdW5jdGlvbiAoZGF0YVByZWZpeCwgc2NoZW1hUHJlZml4KSB7CiAgICBpZiAoZGF0YVByZWZpeCAhPT0gbnVsbCkgewogICAgICAgIGRhdGFQcmVmaXggPSBkYXRhUHJlZml4LnJlcGxhY2UoL34vZywgIn4wIikucmVwbGFjZSgvXC8vZywgIn4xIik7CiAgICAgICAgdGhpcy5kYXRhUGF0aCA9ICIvIiArIGRhdGFQcmVmaXggKyB0aGlzLmRhdGFQYXRoOwogICAgfQogICAgaWYgKHNjaGVtYVByZWZpeCAhPT0gbnVsbCkgewogICAgICAgIHNjaGVtYVByZWZpeCA9IHNjaGVtYVByZWZpeC5yZXBsYWNlKC9+L2csICJ+MCIpLnJlcGxhY2UoL1wvL2csICJ+MSIpOwogICAgICAgIHRoaXMuc2NoZW1hUGF0aCA9ICIvIiArIHNjaGVtYVByZWZpeCArIHRoaXMuc2NoZW1hUGF0aDsKICAgIH0KICAgIGlmICh0aGlzLnN1YkVycm9ycyAhPT0gbnVsbCkgewogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJFcnJvcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdGhpcy5zdWJFcnJvcnNbaV0ucHJlZml4V2l0aChkYXRhUHJlZml4LCBzY2hlbWFQcmVmaXgpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0aGlzOwp9OwoKZnVuY3Rpb24gaXNUcnVzdGVkVXJsKGJhc2VVcmwsIHRlc3RVcmwpIHsKICAgIGlmICh0ZXN0VXJsLnN1YnN0cmluZygwLCBiYXNlVXJsLmxlbmd0aCkgPT09IGJhc2VVcmwpIHsKICAgICAgICB2YXIgcmVtYWluZGVyID0gdGVzdFVybC5zdWJzdHJpbmcoYmFzZVVybC5sZW5ndGgpOwogICAgICAgIGlmICh0ZXN0VXJsLmxlbmd0aCA+IDAgJiYgdGVzdFVybC5jaGFyQXQoYmFzZVVybC5sZW5ndGggLSAxKSA9PT0gIi8iIHx8IHJlbWFpbmRlci5jaGFyQXQoMCkgPT09ICIjIiB8fCByZW1haW5kZXIuY2hhckF0KDApID09PSAiPyIpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGZhbHNlOwp9Cgp2YXIgbGFuZ3VhZ2VzID0ge307CgpmdW5jdGlvbiBjcmVhdGVBcGkobGFuZ3VhZ2UpIHsKICAgIHZhciBnbG9iYWxDb250ZXh0ID0gbmV3IFZhbGlkYXRvckNvbnRleHQoKTsKICAgIHZhciBjdXJyZW50TGFuZ3VhZ2U7CiAgICB2YXIgY3VzdG9tRXJyb3JSZXBvcnRlcjsKICAgIHZhciBhcGkgPSB7CiAgICAgICAgc2V0RXJyb3JSZXBvcnRlcjogZnVuY3Rpb24gc2V0RXJyb3JSZXBvcnRlcihyZXBvcnRlcikgewogICAgICAgICAgICBpZiAodHlwZW9mIHJlcG9ydGVyID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGFuZ3VhZ2UocmVwb3J0ZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGN1c3RvbUVycm9yUmVwb3J0ZXIgPSByZXBvcnRlcjsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfSwKICAgICAgICBhZGRGb3JtYXQ6IGZ1bmN0aW9uIGFkZEZvcm1hdCgpIHsKICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5hZGRGb3JtYXQuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgICAgIGxhbmd1YWdlOiBmdW5jdGlvbiBsYW5ndWFnZShjb2RlKSB7CiAgICAgICAgICAgIGlmICghY29kZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRMYW5ndWFnZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoIWxhbmd1YWdlc1tjb2RlXSkgewogICAgICAgICAgICAgICAgY29kZSA9IGNvZGUuc3BsaXQoJy0nKVswXTsgLy8gZmFsbCBiYWNrIHRvIGJhc2UgbGFuZ3VhZ2UKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAobGFuZ3VhZ2VzW2NvZGVdKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50TGFuZ3VhZ2UgPSBjb2RlOwogICAgICAgICAgICAgICAgcmV0dXJuIGNvZGU7IC8vIHNvIHlvdSBjYW4gdGVsbCBpZiBmYWxsLWJhY2sgaGFzIGhhcHBlbmVkCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0sCiAgICAgICAgYWRkTGFuZ3VhZ2U6IGZ1bmN0aW9uIGFkZExhbmd1YWdlKGNvZGUsIG1lc3NhZ2VNYXApIHsKICAgICAgICAgICAgdmFyIGtleTsKICAgICAgICAgICAgZm9yIChrZXkgaW4gRXJyb3JDb2RlcykgewogICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VNYXBba2V5XSAmJiAhbWVzc2FnZU1hcFtFcnJvckNvZGVzW2tleV1dKSB7CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU1hcFtFcnJvckNvZGVzW2tleV1dID0gbWVzc2FnZU1hcFtrZXldOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByb290Q29kZSA9IGNvZGUuc3BsaXQoJy0nKVswXTsKICAgICAgICAgICAgaWYgKCFsYW5ndWFnZXNbcm9vdENvZGVdKSB7CiAgICAgICAgICAgICAgICAvLyB1c2UgZm9yIGJhc2UgbGFuZ3VhZ2UgaWYgbm90IHlldCBkZWZpbmVkCiAgICAgICAgICAgICAgICBsYW5ndWFnZXNbY29kZV0gPSBtZXNzYWdlTWFwOwogICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW3Jvb3RDb2RlXSA9IG1lc3NhZ2VNYXA7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsYW5ndWFnZXNbY29kZV0gPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkobGFuZ3VhZ2VzW3Jvb3RDb2RlXSk7CiAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBtZXNzYWdlTWFwKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXNbcm9vdENvZGVdW2tleV0gPT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tyb290Q29kZV1ba2V5XSA9IG1lc3NhZ2VNYXBba2V5XTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW2NvZGVdW2tleV0gPSBtZXNzYWdlTWFwW2tleV07CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXM7CiAgICAgICAgfSwKICAgICAgICBmcmVzaEFwaTogZnVuY3Rpb24gZnJlc2hBcGkobGFuZ3VhZ2UpIHsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUFwaSgpOwogICAgICAgICAgICBpZiAobGFuZ3VhZ2UpIHsKICAgICAgICAgICAgICAgIHJlc3VsdC5sYW5ndWFnZShsYW5ndWFnZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9LAogICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiB2YWxpZGF0ZShkYXRhLCBzY2hlbWEsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICB2YXIgZGVmID0gZGVmYXVsdEVycm9yUmVwb3J0ZXIoY3VycmVudExhbmd1YWdlKTsKICAgICAgICAgICAgdmFyIGVycm9yUmVwb3J0ZXIgPSBjdXN0b21FcnJvclJlcG9ydGVyID8gZnVuY3Rpb24gKGVycm9yLCBkYXRhLCBzY2hlbWEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21FcnJvclJlcG9ydGVyKGVycm9yLCBkYXRhLCBzY2hlbWEpIHx8IGRlZihlcnJvciwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgfSA6IGRlZjsKICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dChnbG9iYWxDb250ZXh0LCBmYWxzZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT09ICJzdHJpbmciKSB7CiAgICAgICAgICAgICAgICBzY2hlbWEgPSB7ICIkcmVmIjogc2NoZW1hIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udGV4dC5hZGRTY2hlbWEoIiIsIHNjaGVtYSk7CiAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbnRleHQudmFsaWRhdGVBbGwoZGF0YSwgc2NoZW1hLCBudWxsLCBudWxsLCAiIik7CiAgICAgICAgICAgIGlmICghZXJyb3IgJiYgYmFuVW5rbm93blByb3BlcnRpZXMpIHsKICAgICAgICAgICAgICAgIGVycm9yID0gY29udGV4dC5iYW5Vbmtub3duUHJvcGVydGllcyhkYXRhLCBzY2hlbWEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjsKICAgICAgICAgICAgdGhpcy5taXNzaW5nID0gY29udGV4dC5taXNzaW5nOwogICAgICAgICAgICB0aGlzLnZhbGlkID0gZXJyb3IgPT09IG51bGw7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbGlkOwogICAgICAgIH0sCiAgICAgICAgdmFsaWRhdGVSZXN1bHQ6IGZ1bmN0aW9uIHZhbGlkYXRlUmVzdWx0KCkgewogICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307CiAgICAgICAgICAgIHRoaXMudmFsaWRhdGUuYXBwbHkocmVzdWx0LCBhcmd1bWVudHMpOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0sCiAgICAgICAgdmFsaWRhdGVNdWx0aXBsZTogZnVuY3Rpb24gdmFsaWRhdGVNdWx0aXBsZShkYXRhLCBzY2hlbWEsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcykgewogICAgICAgICAgICB2YXIgZGVmID0gZGVmYXVsdEVycm9yUmVwb3J0ZXIoY3VycmVudExhbmd1YWdlKTsKICAgICAgICAgICAgdmFyIGVycm9yUmVwb3J0ZXIgPSBjdXN0b21FcnJvclJlcG9ydGVyID8gZnVuY3Rpb24gKGVycm9yLCBkYXRhLCBzY2hlbWEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21FcnJvclJlcG9ydGVyKGVycm9yLCBkYXRhLCBzY2hlbWEpIHx8IGRlZihlcnJvciwgZGF0YSwgc2NoZW1hKTsKICAgICAgICAgICAgfSA6IGRlZjsKICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dChnbG9iYWxDb250ZXh0LCB0cnVlLCBlcnJvclJlcG9ydGVyLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpOwogICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgIHNjaGVtYSA9IHsgIiRyZWYiOiBzY2hlbWEgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBjb250ZXh0LmFkZFNjaGVtYSgiIiwgc2NoZW1hKTsKICAgICAgICAgICAgY29udGV4dC52YWxpZGF0ZUFsbChkYXRhLCBzY2hlbWEsIG51bGwsIG51bGwsICIiKTsKICAgICAgICAgICAgaWYgKGJhblVua25vd25Qcm9wZXJ0aWVzKSB7CiAgICAgICAgICAgICAgICBjb250ZXh0LmJhblVua25vd25Qcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9OwogICAgICAgICAgICByZXN1bHQuZXJyb3JzID0gY29udGV4dC5lcnJvcnM7CiAgICAgICAgICAgIHJlc3VsdC5taXNzaW5nID0gY29udGV4dC5taXNzaW5nOwogICAgICAgICAgICByZXN1bHQudmFsaWQgPSByZXN1bHQuZXJyb3JzLmxlbmd0aCA9PT0gMDsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9LAogICAgICAgIGFkZFNjaGVtYTogZnVuY3Rpb24gYWRkU2NoZW1hKCkgewogICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5hZGRTY2hlbWEuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgICAgIGdldFNjaGVtYTogZnVuY3Rpb24gZ2V0U2NoZW1hKCkgewogICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWEuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgICAgIGdldFNjaGVtYU1hcDogZnVuY3Rpb24gZ2V0U2NoZW1hTWFwKCkgewogICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWFNYXAuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgICAgIGdldFNjaGVtYVVyaXM6IGZ1bmN0aW9uIGdldFNjaGVtYVVyaXMoKSB7CiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmdldFNjaGVtYVVyaXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgICAgIGdldE1pc3NpbmdVcmlzOiBmdW5jdGlvbiBnZXRNaXNzaW5nVXJpcygpIHsKICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0TWlzc2luZ1VyaXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTsKICAgICAgICB9LAogICAgICAgIGRyb3BTY2hlbWFzOiBmdW5jdGlvbiBkcm9wU2NoZW1hcygpIHsKICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5kcm9wU2NoZW1hcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpOwogICAgICAgIH0sCiAgICAgICAgZGVmaW5lS2V5d29yZDogZnVuY3Rpb24gZGVmaW5lS2V5d29yZCgpIHsKICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5kZWZpbmVLZXl3b3JkLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7CiAgICAgICAgfSwKICAgICAgICBkZWZpbmVFcnJvcjogZnVuY3Rpb24gZGVmaW5lRXJyb3IoY29kZU5hbWUsIGNvZGVOdW1iZXIsIGRlZmF1bHRNZXNzYWdlKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZU5hbWUgIT09ICdzdHJpbmcnIHx8ICEvXltBLVpdKyhfW0EtWl0rKSokLy50ZXN0KGNvZGVOYW1lKSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2RlIG5hbWUgbXVzdCBiZSBhIHN0cmluZyBpbiBVUFBFUl9DQVNFX1dJVEhfVU5ERVJTQ09SRVMnKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodHlwZW9mIGNvZGVOdW1iZXIgIT09ICdudW1iZXInIHx8IGNvZGVOdW1iZXIgJSAxICE9PSAwIHx8IGNvZGVOdW1iZXIgPCAxMDAwMCkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2RlIG51bWJlciBtdXN0IGJlIGFuIGludGVnZXIgPiAxMDAwMCcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb2Rlc1tjb2RlTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIGFscmVhZHkgZGVmaW5lZDogJyArIGNvZGVOYW1lICsgJyBhcyAnICsgRXJyb3JDb2Rlc1tjb2RlTmFtZV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb2RlTG9va3VwW2NvZGVOdW1iZXJdICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBjb2RlIGFscmVhZHkgdXNlZDogJyArIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSArICcgYXMgJyArIGNvZGVOdW1iZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIEVycm9yQ29kZXNbY29kZU5hbWVdID0gY29kZU51bWJlcjsKICAgICAgICAgICAgRXJyb3JDb2RlTG9va3VwW2NvZGVOdW1iZXJdID0gY29kZU5hbWU7CiAgICAgICAgICAgIEVycm9yTWVzc2FnZXNEZWZhdWx0W2NvZGVOYW1lXSA9IEVycm9yTWVzc2FnZXNEZWZhdWx0W2NvZGVOdW1iZXJdID0gZGVmYXVsdE1lc3NhZ2U7CiAgICAgICAgICAgIGZvciAodmFyIGxhbmdDb2RlIGluIGxhbmd1YWdlcykgewogICAgICAgICAgICAgICAgdmFyIGxhbmd1YWdlID0gbGFuZ3VhZ2VzW2xhbmdDb2RlXTsKICAgICAgICAgICAgICAgIGlmIChsYW5ndWFnZVtjb2RlTmFtZV0pIHsKICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZVtjb2RlTnVtYmVyXSA9IGxhbmd1YWdlW2NvZGVOdW1iZXJdIHx8IGxhbmd1YWdlW2NvZGVOYW1lXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkgewogICAgICAgICAgICBnbG9iYWxDb250ZXh0LnJlc2V0KCk7CiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsOwogICAgICAgICAgICB0aGlzLm1pc3NpbmcgPSBbXTsKICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7CiAgICAgICAgfSwKICAgICAgICBtaXNzaW5nOiBbXSwKICAgICAgICBlcnJvcjogbnVsbCwKICAgICAgICB2YWxpZDogdHJ1ZSwKICAgICAgICBub3JtU2NoZW1hOiBub3JtU2NoZW1hLAogICAgICAgIHJlc29sdmVVcmw6IHJlc29sdmVVcmwsCiAgICAgICAgZ2V0RG9jdW1lbnRVcmk6IGdldERvY3VtZW50VXJpLAogICAgICAgIGVycm9yQ29kZXM6IEVycm9yQ29kZXMKICAgIH07CiAgICBhcGkubGFuZ3VhZ2UobGFuZ3VhZ2UgfHwgJ2VuJyk7CiAgICByZXR1cm4gYXBpOwp9CgovL2V4cG9ydCBmdW5jdGlvbiB2YWxpZGF0b3IoKSB7CnZhciB0djQgPSBjcmVhdGVBcGkoKTsKdHY0LmFkZExhbmd1YWdlKCdlbi1nYicsIEVycm9yTWVzc2FnZXNEZWZhdWx0KTsKCi8vbGVnYWN5IHByb3BlcnR5CnR2NC50djQgPSB0djQ7Ci8vcmV0dXJuIHR2NDsKZXhwb3J0cy5kZWZhdWx0ID0gdHY0OwovL30KCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7ImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeSI6MywiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9jcmVhdGUiOjUsImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5Ijo2LCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2lzLWZyb3plbiI6OSwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzIjoxMCwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3R5cGVvZiI6MjB9XSw0NTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX3N0cmluZ2lmeSA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeScpOwoKdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCnZhciBfa2V5cyA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5cycpOwoKdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKZXhwb3J0cy5kaXZpZGVVUkwgPSBkaXZpZGVVUkw7CmV4cG9ydHMuZGl2aWRlRW1haWwgPSBkaXZpZGVFbWFpbDsKZXhwb3J0cy5lbXB0eU9iamVjdCA9IGVtcHR5T2JqZWN0OwpleHBvcnRzLmRlZXBDbG9uZSA9IGRlZXBDbG9uZTsKZXhwb3J0cy5yZW1vdmVQYXRoRnJvbVVSTCA9IHJlbW92ZVBhdGhGcm9tVVJMOwpleHBvcnRzLmdldFVzZXJVUkxGcm9tRW1haWwgPSBnZXRVc2VyVVJMRnJvbUVtYWlsOwpleHBvcnRzLmdldFVzZXJFbWFpbEZyb21VUkwgPSBnZXRVc2VyRW1haWxGcm9tVVJMOwpleHBvcnRzLmNvbnZlcnRUb1VzZXJVUkwgPSBjb252ZXJ0VG9Vc2VyVVJMOwpleHBvcnRzLmlzRGF0YU9iamVjdFVSTCA9IGlzRGF0YU9iamVjdFVSTDsKZXhwb3J0cy5nZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzID0gZ2V0Q29uZmlndXJhdGlvblJlc291cmNlczsKZXhwb3J0cy5idWlsZFVSTCA9IGJ1aWxkVVJMOwpleHBvcnRzLmdlbmVyYXRlR1VJRCA9IGdlbmVyYXRlR1VJRDsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgovKioKKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoqIENvcHlyaWdodCAyMDE2IEFwaXplZQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCioKKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CioKKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoqCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoqKi8KLyoqCiAqIFN1cHBvcnQgbW9kdWxlIHdpdGggc29tZSBmdW5jdGlvbnMgd2lsbCBiZSB1c2VmdWwKICogQG1vZHVsZSB1dGlscwogKi8KCi8qKgogKiBAdHlwZWRlZiBkaXZpZGVVUkwKICogQHR5cGUgT2JqZWN0CiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIFVSTAogKiBAcHJvcGVydHkge3N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gb2YgVVJMCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eSBUaGUgaWRlbnRpdHkgb2YgVVJMCiAqLwoKLyoqCiAqIERpdmlkZSBhbiB1cmwgaW4gdHlwZSwgZG9tYWluIGFuZCBpZGVudGl0eQogKiBAcGFyYW0gIHtVUkwuVVJMfSB1cmwgLSB1cmwgYWRkcmVzcwogKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMCiAqLwpmdW5jdGlvbiBkaXZpZGVVUkwodXJsKSB7CgogIGlmICghdXJsKSB0aHJvdyBFcnJvcignVVJMIGlzIG5lZWRlZCB0byBzcGxpdCcpOwoKICAvLyBsZXQgcmUgPSAvKFthLXpBLVotXSopPzpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fVwuW2Etel17Miw2fVxiKSooXC9bXC9cZFx3XC4tXSopKig/OltcP10pKiguKykqL2dpOwogIHZhciByZSA9IC8oW2EtekEtWi1dKik6XC9cLyg/OlwuKT8oWy1hLXpBLVowLTlAOiUuX1wrfiM9XXsyLDI1Nn0pKFstYS16QS1aMC05QDolLl9cK34jPVwvXSopL2dpOwogIHZhciBzdWJzdCA9ICckMSwkMiwkMyc7CiAgdmFyIHBhcnRzID0gdXJsLnJlcGxhY2UocmUsIHN1YnN0KS5zcGxpdCgnLCcpOwoKICAvLyBJZiB0aGUgdXJsIGhhcyBubyBwcm90b2NvbCwgdGhlIGRlZmF1bHQgcHJvdG9jb2wgc2V0IGlzIGh0dHBzCiAgaWYgKHBhcnRzWzBdID09PSB1cmwpIHsKICAgIHBhcnRzWzBdID0gJ2h0dHBzJzsKICAgIHBhcnRzWzFdID0gdXJsOwogIH0KCiAgdmFyIHJlc3VsdCA9IHsKICAgIHR5cGU6IHBhcnRzWzBdLAogICAgZG9tYWluOiBwYXJ0c1sxXSwKICAgIGlkZW50aXR5OiBwYXJ0c1syXQogIH07CgogIHJldHVybiByZXN1bHQ7Cn0KCmZ1bmN0aW9uIGRpdmlkZUVtYWlsKGVtYWlsKSB7CiAgdmFyIGluZGV4T2ZBdCA9IGVtYWlsLmluZGV4T2YoJ0AnKTsKCiAgdmFyIHJlc3VsdCA9IHsKICAgIHVzZXJuYW1lOiBlbWFpbC5zdWJzdHJpbmcoMCwgaW5kZXhPZkF0KSwKICAgIGRvbWFpbjogZW1haWwuc3Vic3RyaW5nKGluZGV4T2ZBdCArIDEsIGVtYWlsLmxlbmd0aCkKICB9OwoKICByZXR1cm4gcmVzdWx0Owp9CgovKioKICogQ2hlY2sgaWYgYW4gT2JqZWN0IGlzIGVtcHR5CiAqIEBwYXJhbSAge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBiZSBjaGVja2VkCiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIHN0YXR1cyBvZiBPYmplY3QsIGVtcHR5IG9yIG5vdCAodHJ1ZXxmYWxzZSk7CiAqLwpmdW5jdGlvbiBlbXB0eU9iamVjdChvYmplY3QpIHsKICByZXR1cm4gKDAsIF9rZXlzMi5kZWZhdWx0KShvYmplY3QpLmxlbmd0aCA+IDAgPyBmYWxzZSA6IHRydWU7Cn0KCi8qKgogKiBNYWtlIGEgQ09QWSBvZiB0aGUgb3JpZ2luYWwgZGF0YQogKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogLSBvYmplY3QgdG8gYmUgY2xvbmVkCiAqIEByZXR1cm4ge09iamVjdH0KICovCmZ1bmN0aW9uIGRlZXBDbG9uZShvYmopIHsKICAvL1RPRE86IHNpbXBsZSBidXQgaW5lZmZpY2llbnQgSlNPTiBkZWVwIGNsb25lLi4uCiAgaWYgKG9iaikgcmV0dXJuIEpTT04ucGFyc2UoKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG9iaikpOwp9CgpmdW5jdGlvbiByZW1vdmVQYXRoRnJvbVVSTCh1cmwpIHsKICB2YXIgc3BsaXRVUkwgPSB1cmwuc3BsaXQoJy8nKTsKICByZXR1cm4gc3BsaXRVUkxbMF0gKyAnLy8nICsgc3BsaXRVUkxbMl0gKyAnLycgKyBzcGxpdFVSTFszXTsKfQoKLyoqCiAqIE9idGFpbnMgdGhlIHVzZXIgVVJMIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBlbWFpbAogKiBAcGFyYW0gIHtzdHJpbmd9IHVzZXJFbWFpbCBUaGUgdXNlciBlbWFpbAogKiBAcmV0dXJuIHtVUkwuVVJMfSB1c2VyVVJMIFRoZSB1c2VyIFVSTAogKi8KZnVuY3Rpb24gZ2V0VXNlclVSTEZyb21FbWFpbCh1c2VyRW1haWwpIHsKICB2YXIgaW5kZXhPZkF0ID0gdXNlckVtYWlsLmluZGV4T2YoJ0AnKTsKICByZXR1cm4gJ3VzZXI6Ly8nICsgdXNlckVtYWlsLnN1YnN0cmluZyhpbmRleE9mQXQgKyAxLCB1c2VyRW1haWwubGVuZ3RoKSArICcvJyArIHVzZXJFbWFpbC5zdWJzdHJpbmcoMCwgaW5kZXhPZkF0KTsKfQoKLyoqCiAqIE9idGFpbnMgdGhlIHVzZXIgZW1haWwgdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIFVSTAogKiBAcGFyYW0gIHtVUkwuVVJMfSB1c2VyVVJMIFRoZSB1c2VyIFVSTAogKiBAcmV0dXJuIHtzdHJpbmd9IHVzZXJFbWFpbCBUaGUgdXNlciBlbWFpbAogKi8KZnVuY3Rpb24gZ2V0VXNlckVtYWlsRnJvbVVSTCh1c2VyVVJMKSB7CiAgdmFyIHVybCA9IGRpdmlkZVVSTCh1c2VyVVJMKTsKICByZXR1cm4gdXJsLmlkZW50aXR5LnJlcGxhY2UoJy8nLCAnJykgKyAnQCcgKyB1cmwuZG9tYWluOyAvLyBpZGVudGl0eSBmaWVsZCBoYXMgJy9leGFtcGxlSUQnIGluc3RlYWQgb2YgJ2V4YW1wbGVJRCcKfQoKLyoqCiAqIENoZWNrIGlmIHRoZSB1c2VyIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgVVJMIGZvcm1hdCwgaWYgbm90LCBjb252ZXJ0IHRvIFVSTCBmb3JtYXQKICogQHBhcmFtICB7c3RyaW5nfSAgIGlkZW50aWZpZXIgIHVzZXIgaWRlbnRpZmllcgogKiBAcmV0dXJuIHtzdHJpbmd9ICAgdXNlclVSTCAgICB0aGUgdXNlciBVUkwKICovCmZ1bmN0aW9uIGNvbnZlcnRUb1VzZXJVUkwoaWRlbnRpZmllcikgewoKICAvLyBjaGVjayBpZiB0aGUgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSB1cmwgZm9ybWF0CiAgaWYgKGlkZW50aWZpZXIuc3Vic3RyaW5nKDAsIDcpID09PSAndXNlcjovLycpIHsKICAgIHZhciBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKGlkZW50aWZpZXIpOwoKICAgIC8vY2hlY2sgaWYgdGhlIHVybCBpcyB3ZWxsIGZvcm1hdGVkCiAgICBpZiAoZGl2aWRlZFVSTC5kb21haW4gJiYgZGl2aWRlZFVSTC5pZGVudGl0eSkgewogICAgICByZXR1cm4gaWRlbnRpZmllcjsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93ICd1c2VyVVJMIHdpdGggd3JvbmcgZm9ybWF0JzsKICAgIH0KCiAgICAvL2lmIG5vdCwgY29udmVydCB0aGUgdXNlciBlbWFpbCB0byBVUkwgZm9ybWF0CiAgfSBlbHNlIHsKICAgIHJldHVybiBnZXRVc2VyVVJMRnJvbUVtYWlsKGlkZW50aWZpZXIpOwogIH0KfQoKZnVuY3Rpb24gaXNEYXRhT2JqZWN0VVJMKHVybCkgewogIHZhciBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nLCAnaHlwZXJ0eSddOwogIHZhciBzcGxpdFVSTCA9IHVybC5zcGxpdCgnOi8vJyk7CiAgdmFyIHVybFNjaGVtYSA9IHNwbGl0VVJMWzBdOwoKICByZXR1cm4gc2NoZW1hc1RvSWdub3JlLmluZGV4T2YodXJsU2NoZW1hKSA9PT0gLTE7Cn0KCi8qKgogKiBnZXQgaW5mb3JtYXRpb24gcmVsYXRpdmUgZWFjaCBjb21wb25lbnQgY29uZmlndXJlZCBvbiBydW50aW1lIGNvbmZpZ3VyYXRpb247CiAqIEBwYXJhbSAge29iamVjdH0gY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBhbGwgY29uZmlndXJhdGlvbgogKiBAcGFyYW0gIHtzdHJpbmd9IGNvbXBvbmVudCAgICAgc3RyaW5nIHdpdGggdGhlIGNvbXBvbmVudCB0byBnZXQgdGhlIGNvbmZpZ3VyYXRpb24sIGxpa2UsIHJ1bnRpbWVVUkxTLCBjYXRhbG9ndWVVUkxzLCBtc2dOb2RlVVJMLCBkb21haW5SZWdpc3RyeVVSTDsKICogQHBhcmFtICB7c3RyaW5nfSByZXNvdXJjZSAgICAgIHR5cGUgb2YgcmVzb3VyY2UgdG8gZ2V0LCBsaWtlLCBjYXRhbG9ndWUsIHJ1bnRpbWVVQSwgcHJvdG9jb2xzdHViLCBpZHBQcm94eQogKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgICAgICAgcmV0dXJuIGFuIG9iamVjdCB3aXRoIGFsbCBjb25maWd1cmF0aW9uczsKICovCmZ1bmN0aW9uIGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXMoY29uZmlndXJhdGlvbiwgY29tcG9uZW50LCByZXNvdXJjZSkgewogIHZhciBvYmplY3RSZXNvdXJjZSA9IGNvbmZpZ3VyYXRpb25bY29tcG9uZW50XTsKICB2YXIgcmVzb3VyY2VUeXBlID0gb2JqZWN0UmVzb3VyY2VbcmVzb3VyY2VdOwoKICByZXR1cm4gcmVzb3VyY2VUeXBlOwp9CgovKioKICogQnVpbGQgYSBmdWxsIHVybCB3aXRoIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb247CiAqIEBwYXJhbSAge29iamVjdH0gY29uZmlndXJhdGlvbiBvYmplY3Qgd2l0aCBhbGwgY29uZmlndXJhdGlvbgogKiBAcGFyYW0gIHtzdHJpbmd9IGNvbXBvbmVudCAgICAgc3RyaW5nIHdpdGggdGhlIGNvbXBvbmVudCB0byBnZXQgdGhlIGNvbmZpZ3VyYXRpb24sIGxpa2UsIHJ1bnRpbWVVUkxTLCBjYXRhbG9ndWVVUkxzLCBtc2dOb2RlVVJMLCBkb21haW5SZWdpc3RyeVVSTDsKICogQHBhcmFtICB7c3RyaW5nfSByZXNvdXJjZSAgICAgIHR5cGUgb2YgcmVzb3VyY2UgdG8gZ2V0LCBsaWtlLCBjYXRhbG9ndWUsIHJ1bnRpbWVVQSwgcHJvdG9jb2xzdHViLCBpZHBQcm94eQogKiBAcGFyYW0gIHtzdHJpbmd9IHR5cGUgICAgICAgICAgcmVzb3VyY2UgdG8gZ2V0LCBsaWtlIGEgaHlwZXJ0eSBuYW1lIG9yIHByb3RvY29sc3R1YiBuYW1lOwogKiBAcGFyYW0gIHtib29sZWFufSB1c2VGYWxsYmFjayAgaWYgdHJ1ZSB0aGUgZnVuY3Rpb24gd2lsbCBjaGVjayBpZiBoYXZlIGEgZmFsbGJhY2sgdXJsOwogKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgICAgcGFydGlhbCB1cmwgdG8gY29udGFjdCB0aGUgcmVzb3VyY2U7CiAqLwpmdW5jdGlvbiBidWlsZFVSTChjb25maWd1cmF0aW9uLCBjb21wb25lbnQsIHJlc291cmNlLCB0eXBlKSB7CiAgdmFyIHVzZUZhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTsKCiAgdmFyIG9iamVjdFJlc291cmNlID0gY29uZmlndXJhdGlvbltjb21wb25lbnRdOwogIHZhciB1cmwgPSB2b2lkIDA7CgogIGlmICghb2JqZWN0UmVzb3VyY2UuaGFzT3duUHJvcGVydHkocmVzb3VyY2UpKSB7CiAgICB0aHJvdyBFcnJvcignVGhlIGNvbmZpZ3VyYXRpb24gJyArICgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShvYmplY3RSZXNvdXJjZSwgJycsIDIpICsgJyBkb25cJ3QgaGF2ZSB0aGUgJyArIHJlc291cmNlICsgJyByZXNvdXJjZSB5b3UgYXJlIGxvb2tpbmcgZm9yJyk7CiAgfQoKICB2YXIgcmVzb3VyY2VUeXBlID0gb2JqZWN0UmVzb3VyY2VbcmVzb3VyY2VdOwoKICBpZiAodHlwZSkgewogICAgdXJsID0gcmVzb3VyY2VUeXBlLnByZWZpeCArIGNvbmZpZ3VyYXRpb24uZG9tYWluICsgcmVzb3VyY2VUeXBlLnN1ZmZpeCArIHR5cGU7CiAgICBpZiAocmVzb3VyY2VUeXBlLmhhc093blByb3BlcnR5KCdmYWxsYmFjaycpICYmIHVzZUZhbGxiYWNrKSB7CiAgICAgIGlmIChyZXNvdXJjZVR5cGUuZmFsbGJhY2suaW5kZXhPZignJWRvbWFpbiUnKSkgewogICAgICAgIHVybCA9IHJlc291cmNlVHlwZS5mYWxsYmFjay5yZXBsYWNlKC8oJWRvbWFpbiUpL2csIGNvbmZpZ3VyYXRpb24uZG9tYWluKSArIHR5cGU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdXJsID0gcmVzb3VyY2VUeXBlLmZhbGxiYWNrICsgdHlwZTsKICAgICAgfQogICAgfQogIH0gZWxzZSB7CiAgICB1cmwgPSByZXNvdXJjZVR5cGUucHJlZml4ICsgY29uZmlndXJhdGlvbi5kb21haW4gKyByZXNvdXJjZVR5cGUuc3VmZml4OwogIH0KCiAgLy8gY29uc29sZS5sb2codXJsKTsKCiAgcmV0dXJuIHVybDsKfQoKZnVuY3Rpb24gZ2VuZXJhdGVHVUlEKCkgewoKICBmdW5jdGlvbiBzNCgpIHsKICAgIHJldHVybiBNYXRoLmZsb29yKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpOwogIH0KCiAgcmV0dXJuIHM0KCkgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArIHM0KCkgKyBzNCgpOwp9Cgp9LHsiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5IjozLCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMiOjEwfV19LHt9LFs0NDhdKSg0NDgpCn0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdWZmJXOWtkV3hsY3k5aWNtOTNjMlZ5TFhCaFkyc3ZYM0J5Wld4MVpHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNHOXNlV1pwYkd3dmJHbGlMMmx1WkdWNExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTloY25KaGVTOW1jbTl0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXFjMjl1TDNOMGNtbHVaMmxtZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyRnpjMmxuYmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyTnlaV0YwWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyUmxabWx1WlMxd2NtOXdaWEowZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMmRsZEMxd2NtOTBiM1I1Y0dVdGIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNuVnVkR2x0WlM5amIzSmxMV3B6TDI5aWFtVmpkQzlwY3kxbWNtOTZaVzR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5clpYbHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2YzJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmNISnZiV2x6WlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZjM2x0WW05c0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl6ZVcxaWIyd3ZhWFJsY21GMGIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOc1lYTnpRMkZzYkVOb1pXTnJMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMkpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5amNtVmhkR1ZEYkdGemN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WjJWMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwySmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlwYm1obGNtbDBjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlpWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdmNHOXpjMmxpYkdWRGIyNXpkSEoxWTNSdmNsSmxkSFZ5Ymk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5aVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZkSGx3Wlc5bUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdlptNHZjbVZuWlhod0wyVnpZMkZ3WlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dllYSnlZWGt2Wm5KdmJTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZhbk52Ymk5emRISnBibWRwWm5rdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5aGMzTnBaMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlqY21WaGRHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRiM2R1TFhCeWIzQmxjblI1TFdSbGMyTnlhWEIwYjNJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2YVhNdFpuSnZlbVZ1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2YTJWNWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwzTmxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzQnliMjFwYzJVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGJtUmxlQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YzNsdFltOXNMMmwwWlhKaGRHOXlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWhMV1oxYm1OMGFXOXVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWhaR1F0ZEc4dGRXNXpZMjl3WVdKc1pYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnVMV2x1YzNSaGJtTmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWhiaTF2WW1wbFkzUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnljbUY1TFdsdVkyeDFaR1Z6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlqYkdGemMyOW1MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWpiMll1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMk52Y21VdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOeVpXRjBaUzF3Y205d1pYSjBlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZM1I0TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlrWldacGJtVmtMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWtaWE5qY21sd2RHOXljeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaRzl0TFdOeVpXRjBaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaVzUxYlMxaWRXY3RhMlY1Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWlc1MWJTMXJaWGx6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlsZUhCdmNuUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyWmhhV3h6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTltYjNJdGIyWXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyZHNiMkpoYkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYUdGekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5b2FXUmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOW9kRzFzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlwWlRndFpHOXRMV1JsWm1sdVpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFXNTJiMnRsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlwYjJKcVpXTjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBjeTFoY25KaGVTMXBkR1Z5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlwY3kxaGNuSmhlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWE10YjJKcVpXTjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5TFdOaGJHd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WTNKbFlYUmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5TFdSbFptbHVaUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWFJsY2kxa1pYUmxZM1F1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmwwWlhJdGMzUmxjQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWFJsY21GMGIzSnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXJaWGx2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYkdsaWNtRnllUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiV1YwWVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYldsamNtOTBZWE5yTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRZWE56YVdkdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WTNKbFlYUmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdFpIQXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxa2NITXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxbmIzQmtMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdFoyOXdiaTFsZUhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFuYjNCdUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WjI5d2N5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdkd2J5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFd0bGVYTXRhVzUwWlhKdVlXd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxclpYbHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdGNHbGxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdGMyRndMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXdjbTl3WlhKMGVTMWtaWE5qTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl5WldSbFptbHVaUzFoYkd3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNKbFpHVm1hVzVsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6WlhRdGNISnZkRzh1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM05sZEMxemNHVmphV1Z6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6WlhRdGRHOHRjM1J5YVc1bkxYUmhaeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjMmhoY21Wa0xXdGxlUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjMmhoY21Wa0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5emNHVmphV1Z6TFdOdmJuTjBjblZqZEc5eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5emRISnBibWN0WVhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSaGMyc3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzUnZMV2x1WkdWNExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXBiblJsWjJWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXBiMkpxWldOMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXNaVzVuZEdndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxXOWlhbVZqZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEc4dGNISnBiV2wwYVhabExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MWFXUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzZHJjeTFrWldacGJtVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzZHJjeTFsZUhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNkcmN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5amIzSmxMbWRsZEMxcGRHVnlZWFJ2Y2kxdFpYUm9iMlF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbVp5YjIwdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1sMFpYSmhkRzl5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WVhOemFXZHVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVZM0psWVhSbExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVpHVm1hVzVsTFhCeWIzQmxjblI1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WjJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbWx6TFdaeWIzcGxiaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbXRsZVhNdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1elpYUXRjSEp2ZEc5MGVYQmxMVzltTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1ZEc4dGMzUnlhVzVuTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1d2NtOXRhWE5sTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YVhSbGNtRjBiM0l1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG5ONWJXSnZiQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjemN1YzNsdFltOXNMbUZ6ZVc1akxXbDBaWEpoZEc5eUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dWIySnpaWEoyWVdKc1pTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5M1pXSXVaRzl0TG1sMFpYSmhZbXhsTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWVMxdWRXMWlaWEl0ZG1Gc2RXVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWhaR1F0ZEc4dGRXNXpZMjl3WVdKc1pYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWhjbkpoZVMxamIzQjVMWGRwZEdocGJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyRnljbUY1TFdacGJHd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWhjbkpoZVMxbWNtOXRMV2wwWlhKaFlteGxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZWEp5WVhrdGJXVjBhRzlrY3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJGeWNtRjVMWEpsWkhWalpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyRnljbUY1TFhOd1pXTnBaWE10WTI5dWMzUnlkV04wYjNJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5aGNuSmhlUzF6Y0dWamFXVnpMV055WldGMFpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgySnBibVF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlqYjJ4c1pXTjBhVzl1TFhOMGNtOXVaeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMk52Ykd4bFkzUnBiMjR0ZEc4dGFuTnZiaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMk52Ykd4bFkzUnBiMjR0ZDJWaGF5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyTnZiR3hsWTNScGIyNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWtZWFJsTFhSdkxYQnlhVzFwZEdsMlpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyVjRjRzl5ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJaaGFXeHpMV2x6TFhKbFoyVjRjQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMlpwZUMxeVpTMTNhM011YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTltYkdGbmN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgybHVhR1Z5YVhRdGFXWXRjbVZ4ZFdseVpXUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBjeTFwYm5SbFoyVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZhWE10Y21WblpYaHdMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiR2xpY21GeWVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyMWhkR2d0Wlhod2JURXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXRZWFJvTFd4dlp6RndMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiV0YwYUMxemFXZHVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiV1YwWVdSaGRHRXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXZZbXBsWTNRdFptOXlZMlZrTFhCaGJTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxMGJ5MWhjbkpoZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI5M2JpMXJaWGx6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmY0dGeWMyVXRabXh2WVhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5d1lYSnpaUzFwYm5RdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5d1lYSjBhV0ZzTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmY0dGMGFDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzSmxaR1ZtYVc1bExXRnNiQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYM0psWkdWbWFXNWxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjbVZ3YkdGalpYSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXpZVzFsTFhaaGJIVmxMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjMlYwTFhOd1pXTnBaWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl6ZEhKcFkzUXRiV1YwYUc5a0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmMzUnlhVzVuTFdOdmJuUmxlSFF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl6ZEhKcGJtY3RhSFJ0YkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNOMGNtbHVaeTF3WVdRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5emRISnBibWN0Y21Wd1pXRjBMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjM1J5YVc1bkxYUnlhVzB1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl6ZEhKcGJtY3RkM011YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTkwZVhCbFpDMWhjbkpoZVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNSNWNHVmtMV0oxWm1abGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzUjVjR1ZrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlqYjNKbExuSmxaMlY0Y0M1bGMyTmhjR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVqYjNCNUxYZHBkR2hwYmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1WMlpYSjVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WVhKeVlYa3VabWxzYkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1acGJIUmxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbVpwYm1RdGFXNWtaWGd1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVtYVc1a0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdVptOXlMV1ZoWTJndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1cGJtUmxlQzF2Wmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1sekxXRnljbUY1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YW05cGJpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxteGhjM1F0YVc1a1pYZ3RiMll1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzV0WVhBdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1dlppNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxuSmxaSFZqWlMxeWFXZG9kQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbkpsWkhWalpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxuTnNhV05sTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YzI5dFpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxuTnZjblF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzV6Y0dWamFXVnpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1WkdGMFpTNXViM2N1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1a1lYUmxMblJ2TFdsemJ5MXpkSEpwYm1jdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNWtZWFJsTG5SdkxXcHpiMjR1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1a1lYUmxMblJ2TFhCeWFXMXBkR2wyWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtUmhkR1V1ZEc4dGMzUnlhVzVuTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdVpuVnVZM1JwYjI0dVltbHVaQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG1aMWJtTjBhVzl1TG1oaGN5MXBibk4wWVc1alpTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbVoxYm1OMGFXOXVMbTVoYldVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWEF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MbUZqYjNOb0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1aGMybHVhQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VZWFJoYm1ndWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG1OaWNuUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xtTnNlak15TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVqYjNOb0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1bGVIQnRNUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3Vabkp2ZFc1a0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1b2VYQnZkQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VhVzExYkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1Ykc5bk1UQXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV0WVhSb0xteHZaekZ3TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVzYjJjeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1emFXZHVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YldGMGFDNXphVzVvTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzUwWVc1b0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1MGNuVnVZeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTVqYjI1emRISjFZM1J2Y2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1bGNITnBiRzl1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG1sekxXWnBibWwwWlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1cGN5MXBiblJsWjJWeUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViblZ0WW1WeUxtbHpMVzVoYmk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1cGN5MXpZV1psTFdsdWRHVm5aWEl1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1YldGNExYTmhabVV0YVc1MFpXZGxjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTV0YVc0dGMyRm1aUzFwYm5SbFoyVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbkJoY25ObExXWnNiMkYwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG5CaGNuTmxMV2x1ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1MGJ5MW1hWGhsWkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1MGJ5MXdjbVZqYVhOcGIyNHVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25ScFpYTXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVabkpsWlhwbExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdGJtRnRaWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1YVhNdFpYaDBaVzV6YVdKc1pTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXBjeTF6WldGc1pXUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVhWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1Y0hKbGRtVnVkQzFsZUhSbGJuTnBiMjV6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5ObFlXd3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVkRzh0YzNSeWFXNW5MbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y0dGeWMyVXRabXh2WVhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXdZWEp6WlMxcGJuUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbUZ3Y0d4NUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNWpiMjV6ZEhKMVkzUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbVJsWm1sdVpTMXdjbTl3WlhKMGVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVaR1ZzWlhSbExYQnliM0JsY25SNUxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNWxiblZ0WlhKaGRHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbWRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WjJWMExYQnliM1J2ZEhsd1pTMXZaaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WjJWMExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjbVZtYkdWamRDNW9ZWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG1sekxXVjRkR1Z1YzJsaWJHVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbTkzYmkxclpYbHpMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1Y21WbWJHVmpkQzV3Y21WMlpXNTBMV1Y0ZEdWdWMybHZibk11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG5ObGRDMXdjbTkwYjNSNWNHVXRiMll1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG5ObGRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbkpsWjJWNGNDNWpiMjV6ZEhKMVkzUnZjaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFoyVjRjQzVtYkdGbmN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbkpsWjJWNGNDNXRZWFJqYUM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuSmxaMlY0Y0M1eVpYQnNZV05sTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWNtVm5aWGh3TG5ObFlYSmphQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5KbFoyVjRjQzV6Y0d4cGRDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbkpsWjJWNGNDNTBieTF6ZEhKcGJtY3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6WlhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVlXNWphRzl5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1KcFp5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NWliR2x1YXk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1aWIyeGtMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbU52WkdVdGNHOXBiblF0WVhRdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVpXNWtjeTEzYVhSb0xtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtWnBlR1ZrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1admJuUmpiMnh2Y2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1bWIyNTBjMmw2WlM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1bWNtOXRMV052WkdVdGNHOXBiblF1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YVc1amJIVmtaWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YVhSaGJHbGpjeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVzYVc1ckxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuSmhkeTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTV5WlhCbFlYUXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VjMjFoYkd3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWMzUmhjblJ6TFhkcGRHZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VjM1J5YVd0bExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxuTjFZaTVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTV6ZFhBdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWRISnBiUzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMbUZ5Y21GNUxXSjFabVpsY2k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuUjVjR1ZrTG1SaGRHRXRkbWxsZHk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxuUjVjR1ZrTG1ac2IyRjBNekl0WVhKeVlYa3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNW1iRzloZERZMExXRnljbUY1TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1YVc1ME1UWXRZWEp5WVhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1cGJuUXpNaTFoY25KaGVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xtbHVkRGd0WVhKeVlYa3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNTFhVzUwTVRZdFlYSnlZWGt1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzUxYVc1ME16SXRZWEp5WVhrdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek5pNTBlWEJsWkM1MWFXNTBPQzFoY25KaGVTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMblI1Y0dWa0xuVnBiblE0TFdOc1lXMXdaV1F0WVhKeVlYa3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTUzWldGckxXMWhjQzVxY3lJc0ltNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5kbFlXc3RjMlYwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdVlYSnlZWGt1YVc1amJIVmtaWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1aGMyRndMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1WlhKeWIzSXVhWE10WlhKeWIzSXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV0WVhBdWRHOHRhbk52Ymk1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xtMWhkR2d1YVdGa1pHZ3Vhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOeTV0WVhSb0xtbHRkV3hvTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWJXRjBhQzVwYzNWaWFDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbTFoZEdndWRXMTFiR2d1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dlltcGxZM1F1WkdWbWFXNWxMV2RsZEhSbGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbTlpYW1WamRDNWtaV1pwYm1VdGMyVjBkR1Z5TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWIySnFaV04wTG1WdWRISnBaWE11YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1dlltcGxZM1F1WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5Y3k1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xtOWlhbVZqZEM1c2IyOXJkWEF0WjJWMGRHVnlMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YjJKcVpXTjBMbXh2YjJ0MWNDMXpaWFIwWlhJdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXZZbXBsWTNRdWRtRnNkV1Z6TG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWIySnpaWEoyWVdKc1pTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXVaR1ZtYVc1bExXMWxkR0ZrWVhSaExtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3VjbVZtYkdWamRDNWtaV3hsZEdVdGJXVjBZV1JoZEdFdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtZGxkQzF0WlhSaFpHRjBZUzFyWlhsekxtcHpJaXdpYm05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5bGN6Y3VjbVZtYkdWamRDNW5aWFF0YldWMFlXUmhkR0V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1kbGRDMXZkMjR0YldWMFlXUmhkR0V0YTJWNWN5NXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXVaMlYwTFc5M2JpMXRaWFJoWkdGMFlTNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXVhR0Z6TFcxbGRHRmtZWFJoTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWNtVm1iR1ZqZEM1b1lYTXRiM2R1TFcxbGRHRmtZWFJoTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWNtVm1iR1ZqZEM1dFpYUmhaR0YwWVM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuTmxkQzUwYnkxcWMyOXVMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjemN1YzNSeWFXNW5MbUYwTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWMzUnlhVzVuTG0xaGRHTm9MV0ZzYkM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuTjBjbWx1Wnk1d1lXUXRaVzVrTG1weklpd2libTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlsY3pjdWMzUnlhVzVuTG5CaFpDMXpkR0Z5ZEM1cWN5SXNJbTV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNM0xuTjBjbWx1Wnk1MGNtbHRMV3hsWm5RdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDJWek55NXpkSEpwYm1jdWRISnBiUzF5YVdkb2RDNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTNMbk41YzNSbGJTNW5iRzlpWVd3dWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDNkbFlpNWtiMjB1YVhSbGNtRmliR1V1YW5NaUxDSnViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMM2RsWWk1cGJXMWxaR2xoZEdVdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDNkbFlpNTBhVzFsY25NdWFuTWlMQ0p1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5emFHbHRMbXB6SWl3aWJtOWtaVjl0YjJSMWJHVnpMM0J5YjJObGMzTXZZbkp2ZDNObGNpNXFjeUlzSW01dlpHVmZiVzlrZFd4bGN5OXlaV2RsYm1WeVlYUnZjaTF5ZFc1MGFXMWxMM0oxYm5ScGJXVXVhbk1pTENKdWIyUmxYMjF2WkhWc1pYTXZjMlZ5ZG1salpTMW1jbUZ0WlhkdmNtc3ZaR2x6ZEM5TlpYTnpZV2RsUm1GamRHOXllUzVxY3lJc0luTnlZeTloYkd4dlkyRjBhVzl1TDBGa1pISmxjM05CYkd4dlkyRjBhVzl1TG1weklpd2ljM0pqTDJKMWN5OUNkWE11YW5NaUxDSnpjbU12WW5WekwwMWxjM05oWjJWQ2RYTXVhbk1pTENKemNtTXZZblZ6TDFCcGNHVnNhVzVsTG1weklpd2ljM0pqTDJsa1pXNTBhWFI1TDBOeWVYQjBieTVxY3lJc0luTnlZeTlwWkdWdWRHbDBlUzlIZFdsR1lXdGxMbXB6SWl3aWMzSmpMMmxrWlc1MGFYUjVMMGxrWlc1MGFYUjVMbXB6SWl3aWMzSmpMMmxrWlc1MGFYUjVMMGxrWlc1MGFYUjVUVzlrZFd4bExtcHpJaXdpYzNKakwzQnZiR2xqZVM5QlkzUnBiMjV6VTJWeWRtbGpaUzVxY3lJc0luTnlZeTl3YjJ4cFkza3ZUM0JsY21GMGIzSnpMbXB6SWl3aWMzSmpMM0J2YkdsamVTOVFSRkF1YW5NaUxDSnpjbU12Y0c5c2FXTjVMMUJGVUM1cWN5SXNJbk55WXk5d2IyeHBZM2t2VUc5c2FXTjVMbXB6SWl3aWMzSmpMM0J2YkdsamVTOVNaVlJvYVc1clEzUjRMbXB6SWl3aWMzSmpMM0J2YkdsamVTOVNkV3hsTG1weklpd2ljM0pqTDNCdmJHbGplUzlqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzF6TDBGc2JHOTNUM1psY25KcFpHVnpMbXB6SWl3aWMzSmpMM0J2YkdsamVTOWpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMXpMMEpzYjJOclQzWmxjbkpwWkdWekxtcHpJaXdpYzNKakwzQnZiR2xqZVM5amIyMWlhVzVwYm1kQmJHZHZjbWwwYUcxekwwWnBjbk4wUVhCd2JHbGpZV0pzWlM1cWN5SXNJbk55WXk5d2IyeHBZM2t2WTI5dVpHbDBhVzl1Y3k5QlpIWmhibU5sWkVOdmJtUnBkR2x2Ymk1cWN5SXNJbk55WXk5d2IyeHBZM2t2WTI5dVpHbDBhVzl1Y3k5RGIyNWthWFJwYjI0dWFuTWlMQ0p6Y21NdmNHOXNhV041TDJOdmJtUnBkR2x2Ym5NdlUzVmljMk55YVhCMGFXOXVRMjl1WkdsMGFXOXVMbXB6SWl3aWMzSmpMM0J2YkdsamVTOWpiMjUwWlhoMEwxSjFiblJwYldWRGIzSmxRM1I0TG1weklpd2ljM0pqTDNKbFoybHpkSEo1TDBoNWNHVnlkSGxKYm5OMFlXNWpaUzVxY3lJc0luTnlZeTl5WldkcGMzUnllUzlTWldkcGMzUnllUzVxY3lJc0luTnlZeTl5WldkcGMzUnllUzlTWldkcGMzUnllVVJoZEdGTmIyUmxiQzVxY3lJc0luTnlZeTl5ZFc1MGFXMWxMMFJsYzJOeWFYQjBiM0p6TG1weklpd2ljM0pqTDNKMWJuUnBiV1V2VEc5aFpHVnlMbXB6SWl3aWMzSmpMM0oxYm5ScGJXVXZVblZ1ZEdsdFpWVkJMbXB6SWl3aWMzSmpMM0oxYm5ScGJXVXZjblZ1ZEdsdFpVTnZibVpwWjNWeVlYUnBiMjR1YW5NaUxDSnpjbU12YzNsdVkyaGxjaTlQWW5ObGNuWmxjazlpYW1WamRDNXFjeUlzSW5OeVl5OXplVzVqYUdWeUwxSmxjRzl5ZEdWeVQySnFaV04wTG1weklpd2ljM0pqTDNONWJtTm9aWEl2VTNSdmNtVkVZWFJoVDJKcVpXTjBjeTVxY3lJc0luTnlZeTl6ZVc1amFHVnlMMU4xWW5OamNtbHdkR2x2Ymk1cWN5SXNJbk55WXk5emVXNWphR1Z5TDFONWJtTm9aWEpOWVc1aFoyVnlMbXB6SWl3aWMzSmpMM1YwYVd4ekwzTmphR1Z0WVZaaGJHbGtZWFJwYjI0dWFuTWlMQ0p6Y21NdmRYUnBiSE12ZEhZMExtcHpJaXdpYzNKakwzVjBhV3h6TDNWMGFXeHpMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQk96dEJRMEZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRNMEpCT3p0QlEwRkJPenRCUTBGQk96dEJRMEZCT3p0QlEwRkJPenRCUTBGQk96dEJRMEZCT3p0QlEwRkJPenRCUTBGQk96dEJRMEZCT3p0QlEwRkJPenRCUTBGQk96dEJRMEZCT3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNVUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY2tOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9RMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNCQ1FUdEJRVU5CT3p0QlEwUkJPMEZCUTBFN1FVRkRRVHM3UVVOR1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3TzBGRFJFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHM3UVVORVFUdEJRVU5CT3p0QlEwUkJPMEZCUTBFN08wRkRSRUU3UVVGRFFUczdRVU5FUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CT3p0QlEwWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCT3p0QlEwRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEY0VKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZEVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHM3UVVORVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYmtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFRrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpWRVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONFFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHM3UVVOQlFUdEJRVU5CTzBGQlEwRTdPMEZEUmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEWmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExQkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPenRCUTBaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5ZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOYVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOeVJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTNCQ1FUdEJRVU5CTzBGQlEwRTdPMEZEUmtFN08wRkRRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFZFRTdPMEZEUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTndSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTnVSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRla05CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJaQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwNUJPenRCUTBGQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYUVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk96dEJRMEZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVUVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVGtFN08wRkRRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRlRUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRZa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEweEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFKQk96dEJRMEZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVmtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlFRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM0pEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5xUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPenRCUTBaQk8wRkJRMEU3UVVGRFFUczdRVU5HUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUpCTzBGQlEwRTdRVUZEUVRzN1FVTkdRVHM3UVVOQlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6RlRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU14VDBFN08wRkRRVUU3TzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU5hUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM3BDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFpFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTFCQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNME5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6TkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVEVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdRVU4yUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZETjBsQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOU1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyeEdRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3T3pzN1FVTndSa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPenM3T3pzN096czdRVU5TUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU14UTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNMEpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3T3p0QlExcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdRVU5RUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVTk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPenM3T3pzN08wRkRVRUU3TzBGRFFVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdRVU5JUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN096czdPenM3T3p0QlEyeEVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5TUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM1JDUVRzN096dEJRMEZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXZRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pzN096czdPMEZEV2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyeENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRemRDUVR0QlFVTkJPenM3T3pzN096czdPenM3T3pzN08wRkRSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU01WkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMmhTUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096czdPenM3T3pzN1FVTjZRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTB4Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRURUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFZFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOaVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVTldRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEWkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN1FVTklRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFdFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRja0pCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJ4Q1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVNelFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU4wUWtFN08wRkRRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRNMEpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRZa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOV1FUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTklRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5hUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU40UWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTm9Ra0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMnBDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFVrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5RUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzcENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjRRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOb1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5RUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTmtRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFdFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5RUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNFVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5TUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOSVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMGhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRhRWhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3TzBGRGFrSkJPMEZCUTBFN1FVRkRRVHM3T3p0QlEwWkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dEJRMUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTFCQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVRUU3UVVGRFFUdEJRVU5CT3pzN08wRkRSa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMVJCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBoQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU01UTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGNrSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVONlFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVkVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEzQkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFCQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFZrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTJSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF6bENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTXhRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOVVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRja1ZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRM2hDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRXRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRUa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYmtKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEZEVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5ZUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOcVFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHhCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMDVCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5xUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVGtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVGtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEVGtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3UVVOT1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU0zUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTBwQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMHBCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTktRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjJSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOWVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEV0VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUTFKQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEwaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRWa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5XUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5tUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRXRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlExaEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOc1FrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEycENRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRha0pCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5TUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTjBUVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOUVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRaRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRGJFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZEYUVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRVRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMUpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRMlpCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5TUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFpFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRTRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFZFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUXpkQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVU5VUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTlVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVTk9RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPMEZEVGtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkRja0pCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVOTVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlEyNUNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlF5OUxRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3TzBGRGNFeEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdRVU16Y1VKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF5OUNRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYTkNRVHM3UVVGRlFUczdPMGxCUjAwc2FVSTdRVUZEU2pzN096czdRVUZMUVRzN096czdRVUZMUVN3MlFrRkJXU3hIUVVGYUxFVkJRV2xDTEVkQlFXcENMRVZCUVhOQ0xGRkJRWFJDTEVWQlFXZERPMEZCUVVFN08wRkJRemxDTEZGQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZWQlFVMHNTVUZCVGl4SFFVRmhMRWRCUVdJN1FVRkRRU3hWUVVGTkxFbEJRVTRzUjBGQllTeEhRVUZpTzBGQlEwRXNWVUZCVFN4VFFVRk9MRWRCUVd0Q0xGRkJRV3hDTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN1FVRk5RVHM3T3pzN096SkNRVTFQTEUwc1JVRkJVU3hOTEVWQlFWRXNTU3hGUVVGTkxFMHNSVUZCVVN4UkxFVkJRVlU3UVVGRE4wTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDT3p0QlFVVjBReXhaUVVGSkxGRkJRVW9zUlVGQll6czdRVUZGV2l4blFrRkJUU3hUUVVGT0xFTkJRV2RDTEcxQ1FVRm9RaXhEUVVGdlF5eEpRVUZ3UXl4RlFVRXdReXhKUVVFeFF5eERRVUVyUXl4VlFVRkRMRWxCUVVRc1JVRkJWVHM3UVVGRmRrUXNaMEpCUVVrc1NVRkJTaXhGUVVGVk8wRkJRMUlzYzBKQlFWRXNTVUZCVWl4RFFVRmhMREJDUVVFd1FpeE5RVUV4UWl4SFFVRnRReXhsUVVGb1JEdEJRVU5CTEd0Q1FVRkpMRkZCUVZFc1JVRkJReXhaUVVGWkxFdEJRV0lzUlVGQmIwSXNVMEZCVXl4SlFVRTNRaXhGUVVGYU8wRkJRMEVzYzBKQlFWRXNTMEZCVWp0QlFVTkVMR0ZCU2tRc1RVRkpUenRCUVVOTUxITkNRVUZSTEVsQlFWSXNRMEZCWVN3MlEwRkJOa01zVVVGQk4wTXNSMEZCZDBRc1dVRkJja1U3UVVGRFFTeHhRa0ZCVHl4bFFVRlFPMEZCUTBRN1FVRkZSaXhYUVZoRUxFVkJWMGNzUzBGWVNDeERRVmRUTEZWQlFVTXNUVUZCUkN4RlFVRlpPMEZCUTI1Q0xHMUNRVUZQTEUxQlFWQTdRVUZEUkN4WFFXSkVPMEZCWlVRc1UwRnFRa1FzVFVGcFFrODdPMEZCUlV3c1owSkJRVTBzVTBGQlRpeERRVUZuUWl4dFFrRkJhRUlzUTBGQmIwTXNTVUZCY0VNc1JVRkJNRU1zU1VGQk1VTXNRMEZCSzBNc1ZVRkJReXhKUVVGRUxFVkJRVlU3TzBGQlJYWkVPMEZCUTBFc1owSkJRVWtzU1VGQlNpeEZRVUZWT3p0QlFVVlNMSE5DUVVGUkxFbEJRVklzUTBGQllTd3dRa0ZCTUVJc1RVRkJNVUlzUjBGQmJVTXNaVUZCYUVRN1FVRkRRU3hyUWtGQlNTeFJRVUZSTEVWQlFVTXNXVUZCV1N4TFFVRmlMRVZCUVc5Q0xGTkJRVk1zU1VGQk4wSXNSVUZCV2p0QlFVTkJMSE5DUVVGUkxFdEJRVkk3UVVGRlJDeGhRVTVFTEUxQlRVODdPMEZCUlV3N1FVRkRRU3h2UWtGQlRTeHRRa0ZCVGl4RFFVRXdRaXhOUVVFeFFpeEZRVUZyUXl4TlFVRnNReXhGUVVFd1F5eE5RVUV4UXl4RlFVRnJSQ3hKUVVGc1JDeERRVUYxUkN4VlFVRkRMRk5CUVVRc1JVRkJaVHRCUVVOd1JTeDNRa0ZCVVN4VFFVRlNPMEZCUTBRc1pVRkdSQ3hGUVVWSExFdEJSa2dzUTBGRlV5eFZRVUZETEUxQlFVUXNSVUZCV1R0QlFVTnVRaXgxUWtGQlR5eE5RVUZRTzBGQlEwUXNaVUZLUkR0QlFVMUVPMEZCUTBZc1YwRnVRa1FzUlVGdFFrY3NTMEZ1UWtnc1EwRnRRbE1zVlVGQlF5eE5RVUZFTEVWQlFWazdRVUZEYmtJc2JVSkJRVThzVFVGQlVEdEJRVU5FTEZkQmNrSkVPMEZCZFVKRU8wRkJRMFlzVDBFM1EwMHNRMEZCVUR0QlFTdERSRHM3TzNkRFFVVnRRaXhOTEVWQlFWRXNUU3hGUVVGUkxFMHNSVUZCVVR0QlFVRkJPenRCUVVVeFF5eGhRVUZQTEhOQ1FVRlpMRlZCUVVNc1QwRkJSQ3hGUVVGVkxFMUJRVllzUlVGQmNVSTdPMEZCUlhSRExGbEJRVWtzVFVGQlRUdEJRVU5TTEdkQ1FVRk5MRkZCUkVVc1JVRkRVU3hOUVVGTkxFOUJRVXNzU1VGRWJrSXNSVUZEZVVJc1NVRkJTU3gxUWtGQmRVSXNUVUZCZGtJc1IwRkJaME1zY1VKQlJEZEVPMEZCUlZJc1owSkJRVTBzUlVGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4TlFVRldMRVZCUVZJN1FVRkdSU3hUUVVGV096dEJRVXRCTEZsQlFVa3NWMEZCVnl4UlFVRm1MRVZCUVhsQ0xFbEJRVWtzU1VGQlNpeERRVUZUTEUxQlFWUXNSMEZCYTBJc1RVRkJiRUk3TzBGQlJYcENMR2RDUVVGUkxFbEJRVklzUTBGQllTd3dRa0ZCTUVJc1RVRkJNVUlzUjBGQmJVTXNjVUpCUVdoRU96dEJRVVZCTzBGQlEwRXNaVUZCU3l4SlFVRk1MRU5CUVZVc1YwRkJWaXhEUVVGelFpeEhRVUYwUWl4RlFVRXlRaXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU53UXl4alFVRkpMRTFCUVUwc1NVRkJUaXhEUVVGWExFbEJRVmdzUzBGQmIwSXNSMEZCZUVJc1JVRkJOa0k3UVVGRE0wSXNaMEpCUVVrc1UwRkJVeXhGUVVGRExGbEJRVmtzU1VGQllpeEZRVUZ0UWl4VFFVRlRMRTFCUVUwc1NVRkJUaXhEUVVGWExFdEJRVmdzUTBGQmFVSXNVMEZCTjBNc1JVRkJZanRCUVVOQkxHOUNRVUZSTEUxQlFWSTdRVUZEUkN4WFFVaEVMRTFCUjA4N1FVRkRUQ3h0UWtGQlR5eE5RVUZOTEVsQlFVNHNRMEZCVnl4SlFVRnNRanRCUVVORU8wRkJRMFlzVTBGUVJEdEJRVk5FTEU5QmNrSk5MRU5CUVZBN1FVRjFRa1E3TzBGQlJVUTdPenM3T3pzN096czBRa0ZOVHl4TkxFVkJRVkVzVXl4RlFVRlhPMEZCUTNoQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1ZVRkJWVHRCUVVOYUxHTkJRVTBzVVVGRVRTeEZRVU5KTEUxQlFVMHNUVUZCVFN4SlFVUm9RaXhGUVVOelFpeEpRVUZKTEhWQ1FVRjFRaXhOUVVGMlFpeEhRVUZuUXl4eFFrRkVNVVE3UVVGRldpeGpRVUZOTEVWQlFVTXNiVUpCUVcxQ0xGTkJRWEJDTzBGQlJrMHNUMEZCWkRzN1FVRkxRU3hoUVVGUExITkNRVUZaTEZWQlFVTXNUMEZCUkN4RlFVRlZMRTFCUVZZc1JVRkJjVUk3TzBGQlJYUkRMR05CUVUwc1NVRkJUaXhEUVVGWExGZEJRVmdzUTBGQmRVSXNUMEZCZGtJc1JVRkJaME1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEZWtNc2EwSkJRVkVzUjBGQlVpeERRVUZaTEU5QlFWb3NSVUZCY1VJc1MwRkJja0k3UVVGRFFTeGpRVUZKTEUxQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVZnc1MwRkJiMElzUjBGQmVFSXNSVUZCTmtJN1FVRkRNMElzYjBKQlFWRXNUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJia0k3UVVGRFJDeFhRVVpFTEUxQlJVODdRVUZEVEN4dFFrRkJUeXhOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZzUWp0QlFVTkVPMEZCUTBZc1UwRlFSRHRCUVZGRUxFOUJWazBzUTBGQlVEdEJRVmxFT3pzN2QwSkJha2hUTzBGQlFVVXNZVUZCVHl4TFFVRkxMRWxCUVZvN1FVRkJiVUk3T3pzN08ydENRVzlJYkVJc2FVSTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZWt0bU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVhWQ1FUczdPenM3TzBsQlRVMHNSenRCUVVOS096czdPenM3TzBGQlUwRXNhVUpCUVdNN1FVRkJRVHM3UVVGRFdpeFJRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVUwc1RVRkJUaXhIUVVGbExFTkJRV1k3UVVGRFFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc1JVRkJka0k3TzBGQlJVRXNWVUZCVFN4blFrRkJUaXhIUVVGNVFpeEpRVUY2UWl4RFFVeFpMRU5CUzIxQ08wRkJReTlDTEZWQlFVMHNhMEpCUVU0c1IwRkJNa0lzUlVGQk0wSTdPMEZCUlVFc1ZVRkJUU3g1UWtGQlRqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenRuUTBGUFdTeEhMRVZCUVVzc1VTeEZRVUZWTzBGQlEzcENMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NUMEZCVHl4SlFVRkpMRmRCUVVvc1EwRkJaMElzVFVGQlRTeGpRVUYwUWl4RlFVRnpReXhIUVVGMFF5eEZRVUV5UXl4UlFVRXpReXhEUVVGWU8wRkJRMEVzVlVGQlNTeFhRVUZYTEUxQlFVMHNZMEZCVGl4RFFVRnhRaXhIUVVGeVFpeERRVUZtTzBGQlEwRXNWVUZCU1N4RFFVRkRMRkZCUVV3c1JVRkJaVHRCUVVOaUxHMUNRVUZYTEVWQlFWZzdRVUZEUVN4alFVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNTVUZCTkVJc1VVRkJOVUk3UVVGRFJEczdRVUZGUkN4bFFVRlRMRWxCUVZRc1EwRkJZeXhKUVVGa08wRkJRMEVzWVVGQlR5eEpRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN08zZERRVkZ2UWl4SExFVkJRVXNzU3l4RlFVRlBMR2RDTEVWQlFXdENPMEZCUTJoRUxGZEJRVXNzYTBKQlFVd3NRMEZCZDBJc1RVRkJUU3hMUVVFNVFpeEpRVUYxUXl4blFrRkJka003UVVGRFJEczdRVUZGUkRzN096czdPenM3TWtOQlMzVkNMRWNzUlVGQlN5eExMRVZCUVU4N1FVRkRha01zWVVGQlR5eExRVUZMTEd0Q1FVRk1MRU5CUVhkQ0xFMUJRVTBzUzBGQk9VSXNRMEZCVUR0QlFVTkVPenRCUVVWRU96czdPenM3TzNsRFFVbHhRaXhITEVWQlFVczdRVUZEZUVJc1lVRkJUeXhMUVVGTExHTkJRVXdzUTBGQmIwSXNSMEZCY0VJc1EwRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPenM3TzNsQ1FVOUxMRTBzUlVGQlVTeExMRVZCUVU4c1RTeEZRVUZSTzBGQlFVRTdPMEZCUXpGQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1dVRkJXU3hOUVVGTkxGZEJRVTRzUTBGQmEwSXNUVUZCYkVJc1JVRkJNRUlzVlVGQlF5eEhRVUZFTEVWQlFWTTdRVUZEYWtRc1pVRkJUeXhYUVVGUUxFTkJRVzFDTEVkQlFXNUNPMEZCUTBRc1QwRkdaU3hEUVVGb1FqczdRVUZKUVN4VlFVRkpMR05CUVdNc1QwRkJUeXhYUVVGUUxFTkJRVzFDTEV0QlFXNUNMRVZCUVRCQ0xGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEyNUVMR05CUVUwc1YwRkJUaXhEUVVGclFpeEhRVUZzUWp0QlFVTkVMRTlCUm1sQ0xFTkJRV3hDT3p0QlFVbEJMR0ZCUVU4N1FVRkRUQ3h6UWtGQll5eFRRVVJVTzBGQlJVd3NkMEpCUVdkQ0xGZEJSbGc3UVVGSFRDeG5Ra0ZCVVN4clFrRkJUVHRCUVVOYUxHbENRVUZMTEZsQlFVd3NRMEZCYTBJc1RVRkJiRUk3UVVGRFFTeHBRa0ZCU3l4alFVRk1MRU5CUVc5Q0xFMUJRWEJDTzBGQlEwUTdRVUZPU1N4UFFVRlFPMEZCVVVRN08wRkJSVVE3T3pzN2MwTkJRMnRDTEVjc1JVRkJTenRCUVVOeVFqdEJRVU5CTEZWQlFVa3NWMEZCVnl4TFFVRkxMR05CUVV3c1EwRkJiMElzUjBGQmNFSXNRMEZCWmp0QlFVTkJMRlZCUVVrc1VVRkJTaXhGUVVGak8wRkJRMW9zWVVGQlN5eFZRVUZNTEVOQlFXZENMRkZCUVdoQ0xFVkJRVEJDTEVkQlFURkNPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenNyUWtGRFZ5eFJMRVZCUVZVc1J5eEZRVUZMTzBGQlEzaENMR1ZCUVZNc1QwRkJWQ3hEUVVGcFFpeFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTjRRaXhaUVVGSkxGTkJRVW9zUTBGQll5eEhRVUZrTzBGQlEwUXNUMEZHUkR0QlFVZEVPenM3YzBOQlJXbENMRXNzUlVGQlR5eG5RaXhGUVVGclFqdEJRVU42UXl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFUdEJRVU5CTEZWQlFVa3NaMEpCUVVvc1JVRkJjMEk3UVVGQlFUdEJRVU53UWl4alFVRkpMR0ZCUVdFc1RVRkJUU3hKUVVGT0xFZEJRV0VzVFVGQlRTeEZRVUZ3UXp0QlFVTkJMR2RDUVVGTkxHdENRVUZPTEVOQlFYbENMRlZCUVhwQ0xFbEJRWFZETEdkQ1FVRjJRenM3UVVGRlFTeHhRa0ZCVnl4WlFVRk5PMEZCUTJZc1owSkJRVWtzWTBGQll5eE5RVUZOTEd0Q1FVRk9MRU5CUVhsQ0xGVkJRWHBDTEVOQlFXeENPMEZCUTBFc2JVSkJRVThzVFVGQlRTeHJRa0ZCVGl4RFFVRjVRaXhWUVVGNlFpeERRVUZRT3p0QlFVVkJMR2RDUVVGSkxGZEJRVW9zUlVGQmFVSTdRVUZEWml4clFrRkJTU3hYUVVGWE8wRkJRMklzYjBKQlFVa3NUVUZCVFN4RlFVUkhMRVZCUTBNc1RVRkJUU3hWUVVSUU8wRkJSV0lzYzBKQlFVMHNSVUZCUlN4TlFVRk5MRWRCUVZJc1JVRkJZU3hOUVVGTkxHMUNRVUZ1UWl4RlFVRjNReXhQUVVGUExFdEJRUzlETzBGQlJrOHNaVUZCWmpzN1FVRkxRU3d3UWtGQldTeFJRVUZhTzBGQlEwUTdRVUZEUml4WFFWcEVMRVZCV1Vjc1RVRkJUU3huUWtGYVZEdEJRVXB2UWp0QlFXbENja0k3UVVGRFJqczdPMmREUVVWWExFY3NSVUZCU3p0QlFVTm1MRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NTVUZCU1N4SlFVRktMRXRCUVdFc1ZVRkJha0lzUlVGQk5rSTdRVUZETTBJc1dVRkJTU3hoUVVGaExFbEJRVWtzUlVGQlNpeEhRVUZUTEVsQlFVa3NSVUZCT1VJN1FVRkRRU3haUVVGSkxHTkJRV01zVFVGQlRTeHJRa0ZCVGl4RFFVRjVRaXhWUVVGNlFpeERRVUZzUWpzN1FVRkZRVHRCUVVOQkxGbEJRVWtzU1VGQlNTeEpRVUZLTEVOQlFWTXNTVUZCVkN4SlFVRnBRaXhIUVVGeVFpeEZRVUV3UWp0QlFVTjRRaXhwUWtGQlR5eE5RVUZOTEd0Q1FVRk9MRU5CUVhsQ0xGVkJRWHBDTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxGZEJRVW9zUlVGQmFVSTdRVUZEWml4elFrRkJXU3hIUVVGYU8wRkJRMEVzYVVKQlFVOHNTVUZCVUR0QlFVTkVPMEZCUTBZN08wRkJSVVFzWVVGQlR5eExRVUZRTzBGQlEwUTdPMEZCUlVRN096czdLMEpCUTFjc1J5eEZRVUZMTzBGQlEyUXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeERRVUZETEUxQlFVMHNWMEZCVGl4RFFVRnJRaXhIUVVGc1FpeERRVUZNTEVWQlFUWkNPMEZCUXpOQ0xGbEJRVWtzVjBGQlZ5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc1NVRkJTU3hGUVVGNlFpeERRVUZtTzBGQlEwRXNXVUZCU1N4UlFVRktMRVZCUVdNN1FVRkRXaXhuUWtGQlRTeFZRVUZPTEVOQlFXbENMRkZCUVdwQ0xFVkJRVEpDTEVkQlFUTkNPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzWjBKQlFVMHNhVUpCUVU0c1EwRkJkMElzUjBGQmVFSTdRVUZEUkR0QlFVTkdPMEZCUTBZN096c3lRa0ZGVFN4TExFVkJRVTg3UVVGRFdqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRlZCUVVrc1EwRkJReXhOUVVGTkxFVkJRVkFzU1VGQllTeE5RVUZOTEVWQlFVNHNTMEZCWVN4RFFVRTVRaXhGUVVGcFF6dEJRVU12UWl4aFFVRkxMRTFCUVV3N1FVRkRRU3hqUVVGTkxFVkJRVTRzUjBGQlZ5eExRVUZMTEUxQlFXaENPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN096czdaME5CVVZrc1N5eEZRVUZQTEdkQ0xFVkJRV3RDTEVOQlFVYzdPMEZCUlhoRE96czdPenM3T3p0dFEwRkxaU3hITEVWQlFVc3NRMEZCTWtRc1F5eERRVUY2UkRzN1FVRkZkRUk3T3pzN096czdPenRuUkVGTk5FSXNRMEZCUlN4dFJrRkJjVVk3T3pzN08wbEJTUzlITEZjN1FVRkRTanM3T3pzN08wRkJUVUVzZFVKQlFWa3NZVUZCV2l4RlFVRXlRaXhIUVVFelFpeEZRVUZuUXl4UlFVRm9ReXhGUVVFd1F6dEJRVUZCT3p0QlFVTjRReXhSUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRk5MR05CUVU0c1IwRkJkVUlzWVVGQmRrSTdRVUZEUVN4VlFVRk5MRWxCUVU0c1IwRkJZU3hIUVVGaU8wRkJRMEVzVlVGQlRTeFRRVUZPTEVkQlFXdENMRkZCUVd4Q08wRkJRMFE3T3pzN096dEJRVWxFT3pzN05rSkJSMU03UVVGRFVDeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxFOUJRVThzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRTFCUVUwc1NVRkJNMElzUTBGQldEdEJRVU5CTEZWQlFVa3NTVUZCU2l4RlFVRlZPMEZCUTFJc1dVRkJTU3hSUVVGUkxFdEJRVXNzVDBGQlRDeERRVUZoTEV0QlFXSXNRMEZCV2p0QlFVTkJMR0ZCUVVzc1RVRkJUQ3hEUVVGWkxFdEJRVm9zUlVGQmJVSXNRMEZCYmtJN08wRkJSVUU3UVVGRFFTeFpRVUZKTEV0QlFVc3NUVUZCVEN4TFFVRm5RaXhEUVVGd1FpeEZRVUYxUWp0QlFVTnlRaXhwUWtGQlR5eE5RVUZOTEdOQlFVNHNRMEZCY1VJc1RVRkJUU3hKUVVFelFpeERRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkdPenM3ZDBKQmJFSlRPMEZCUVVVc1lVRkJUeXhMUVVGTExFbEJRVm83UVVGQmJVSTdPenM3TzJ0Q1FYRkNiRUlzUnpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUXk5UVpqczdPenRCUVVOQk96czdPenM3UVVGRlFUczdPenM3UVVGNlFrRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VFNFFrMHNWVHM3TzBGQlEwbzdPenM3T3p0QlFVOUJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeHpRa0ZCV1N4UlFVRmFMRVZCUVhOQ08wRkJRVUU3TzBGQlFVRTdPMEZCUlhCQ0xGZEJRVXNzVTBGQlRDeEhRVUZwUWl4UlFVRnFRanRCUVVOQkxGZEJRVXNzVTBGQlRDeEhRVUZwUWl4RlFVRnFRanM3UVVGRlFTeFhRVUZMTEZOQlFVd3NSMEZCYVVJc2RVSkJRV0VzVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEZGtNc1kwRkJVU3hIUVVGU0xFTkJRVmtzYTBKQlFWb3NSVUZCWjBNc2VVSkJRV1VzUzBGQlppeERRVUZvUXp0QlFVTkVMRXRCUm1kQ0xFTkJRV3BDTzBGQlRHOUNPMEZCVVhKQ096czdPenM3UVVGSlJEczdPenM3T3p0blEwRlBXU3hMTEVWQlFVOHNaMElzUlVGQmEwSTdRVUZEYmtNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNXVUZCVFN4TlFVRk9MRU5CUVdFc1MwRkJZanM3UVVGRlFTeFpRVUZOTEZOQlFVNHNRMEZCWjBJc1QwRkJhRUlzUTBGQmQwSXNTMEZCZUVJc1JVRkJLMElzVlVGQlF5eEhRVUZFTEVWQlFWTTdPMEZCUlhSRExHTkJRVTBzYVVKQlFVNHNRMEZCZDBJc1MwRkJlRUlzUlVGQkswSXNaMEpCUVM5Q096dEJRVVZCTEZsQlFVa3NRMEZCUXl4TlFVRk5MRmRCUVU0c1EwRkJhMElzUjBGQmJFSXNRMEZCVEN4RlFVRTJRanRCUVVNelFpeGpRVUZKTEZkQlFWY3NUVUZCVFN4alFVRk9MRU5CUVhGQ0xFbEJRVWtzUlVGQmVrSXNRMEZCWmp0QlFVTkJMR05CUVVrc1VVRkJTaXhGUVVGak8wRkJRMW83UVVGRFFTeHJRa0ZCVFN4VlFVRk9MRU5CUVdsQ0xGRkJRV3BDTEVWQlFUSkNMRWRCUVROQ08wRkJRMFFzVjBGSVJDeE5RVWRQTzBGQlEwdzdRVUZEUVN4clFrRkJUU3hqUVVGT0xFTkJRWEZDTEVkQlFYSkNPMEZCUTBRN1FVRkRSanRCUVVOR0xFOUJaRVE3TzBGQlowSkJMR0ZCUVU4c1RVRkJUU3hGUVVGaU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN095dENRVXRYTEVrc1JVRkJUVHRCUVVGQk96dEJRVU5tTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQk8wRkJRMEVzVlVGQlNTeFhRVUZYTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhKUVVGb1FpeERRVUZtTzBGQlEwRXNWVUZCU1N4RFFVRkRMRkZCUVV3c1JVRkJaVHRCUVVOaUxGbEJRVWtzYTBKQlFXdENMRTFCUVUwc1YwRkJUaXhEUVVGclFpeEpRVUZzUWl4RlFVRjNRaXhWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU55UkN4clFrRkJVU3hIUVVGU0xFTkJRVmtzYlVKQlFXMUNMRWxCUVc1Q0xFZEJRVEJDTEVsQlFYUkRPMEZCUTBFc1owSkJRVTBzWTBGQlRpeERRVUZ4UWl4SFFVRnlRanRCUVVORUxGTkJTSEZDTEVOQlFYUkNPenRCUVV0QkxHMUNRVUZYTzBGQlExUXNiVUpCUVZNc1EwRkVRVHRCUVVWVUxHTkJRVWtzWlVGR1N6dEJRVWRVTEd0Q1FVRlJMR3RDUVVGTk8wRkJRMW9zYlVKQlFVc3NUMEZCVER0QlFVTkJMR2RDUVVGSkxFOUJRVXNzVDBGQlRDeExRVUZwUWl4RFFVRnlRaXhGUVVGM1FqdEJRVU4wUWl4eFFrRkJTeXhGUVVGTUxFTkJRVkVzVFVGQlVqdEJRVU5CTEhGQ1FVRlBMRTFCUVUwc1UwRkJUaXhEUVVGblFpeEpRVUZvUWl4RFFVRlFPMEZCUTBRN1FVRkRSanRCUVZSUkxGTkJRVmc3TzBGQldVUXNZMEZCVFN4VFFVRk9MRU5CUVdkQ0xFbEJRV2hDTEVsQlFYZENMRkZCUVhoQ08wRkJRMFE3TzBGQlJVUXNaVUZCVXl4UFFVRlVPMEZCUTBFc1lVRkJUeXhSUVVGUU8wRkJRMEU3TzBGQlJVUTdPenM3T3pzN095dENRVXRaTEVrc1JVRkJUU3hGTEVWQlFVazdRVUZEYmtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4TlFVRk5MRmRCUVU0c1EwRkJhMElzU1VGQmJFSXNSVUZCZDBJc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRGRFTXNaMEpCUVZFc1IwRkJVaXhEUVVGWkxHMUNRVUZ0UWl4SlFVRnVRaXhIUVVFd1FpeE5RVUV4UWl4SFFVRnRReXhGUVVGdVF5eEhRVUYzUXl4SlFVRndSRHRCUVVOQkxHTkJRVTBzVDBGQlRpeERRVUZqTEVWQlFXUXNSVUZCYTBJc1IwRkJiRUk3UVVGRFJDeFBRVWhOTEVOQlFWQTdRVUZKUkRzN1FVRkZSRHM3T3pzN096czdORUpCUzFFc1J5eEZRVUZMTEVjc1JVRkJTenRCUVVOb1FpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxGZEJRVmNzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRWRCUVhKQ0xFTkJRV1k3UVVGRFFTeFZRVUZKTEZGQlFVb3NSVUZCWXp0QlFVTmFMR05CUVUwc1ZVRkJUaXhEUVVGcFFpeFJRVUZxUWl4RlFVRXlRaXhIUVVFelFqdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdiVU5CUTJVc1J5eEZRVUZMTzBGQlEyeENMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTzBGQlEwRXNXVUZCVFN4VFFVRk9MRU5CUVdkQ0xFOUJRV2hDTEVOQlFYZENMRWxCUVVrc1JVRkJOVUlzUlVGQlowTXNTVUZCYUVNc1EwRkJjVU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZET1VNc1kwRkJUU3hQUVVGT0xFTkJRV01zUzBGQlpDeEZRVUZ4UWl4SFFVRnlRanRCUVVORUxFOUJSa1FzUlVGRlJ5eExRVVpJTEVOQlJWTXNWVUZCVXl4RFFVRlVMRVZCUVZrN1FVRkRia0lzWjBKQlFWRXNSMEZCVWl4RFFVRlpMR2xDUVVGYUxFVkJRU3RDTEVOQlFTOUNPMEZCUTBRc1QwRktSRHRCUVV0RU96czdkMEpCTVVkaE8wRkJRVVVzWVVGQlR5eExRVUZMTEZOQlFWbzdRVUZCZDBJN096czdPMnRDUVRaSE5VSXNWVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOcVMyWTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmRVSkJPenM3T3p0SlFVdE5MRkU3UVVGRFNqczdPenM3UVVGTFFTeHZRa0ZCV1N4UFFVRmFMRVZCUVhGQ08wRkJRVUU3TzBGQlEyNUNMRkZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVMHNVVUZCVGl4SFFVRnBRaXhGUVVGcVFqdEJRVU5CTEZWQlFVMHNUVUZCVGl4SFFVRmxMRTlCUVdZN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096UkNRVXRSTEVjc1JVRkJTeXhUTEVWQlFWYzdRVUZEZEVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4TlFVRk5MRkZCUVU0c1EwRkJaU3hOUVVGbUxFZEJRWGRDTEVOQlFUVkNMRVZCUVN0Q08wRkJRemRDTEZsQlFVa3NUMEZCVHl4SlFVRkpMRkZCUVVvc1EwRkJZU3hOUVVGTkxGRkJRVzVDTEVOQlFWZzdRVUZEUVN4aFFVRkxMRWxCUVV3c1EwRkJWU3hKUVVGSkxGZEJRVW9zUTBGQlowSXNTMEZCYUVJc1JVRkJkVUlzU1VGQmRrSXNSVUZCTmtJc1IwRkJOMElzUlVGQmEwTXNVMEZCYkVNc1EwRkJWanRCUVVORUxFOUJTRVFzVFVGSFR6dEJRVU5NTEd0Q1FVRlZMRWRCUVZZN1FVRkRSRHRCUVVOR096czdPenRCUVVkSU96czdPenM3TzBsQlMwMHNWenRCUVVOS096czdPenM3TzBGQlVVRXNkVUpCUVZrc1VVRkJXaXhGUVVGelFpeEpRVUYwUWl4RlFVRTBRaXhIUVVFMVFpeEZRVUZwUXl4VFFVRnFReXhGUVVFMFF6dEJRVUZCT3p0QlFVTXhReXhSUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRk5MRTlCUVU0c1IwRkJaMElzUzBGQmFFSTdPMEZCUlVFc1ZVRkJUU3hUUVVGT0xFZEJRV3RDTEZGQlFXeENPMEZCUTBFc1ZVRkJUU3hMUVVGT0xFZEJRV01zU1VGQlpEdEJRVU5CTEZWQlFVMHNTVUZCVGl4SFFVRmhMRWRCUVdJN1FVRkRRU3hWUVVGTkxGVkJRVTRzUjBGQmJVSXNVMEZCYmtJN1FVRkRSRHM3T3pzN08wRkJUMFE3T3pzeVFrRkhUenRCUVVOTUxGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1EwRkJReXhOUVVGTkxFOUJRVmdzUlVGQmIwSTdRVUZEYkVJc1dVRkJTU3hOUVVGTkxFdEJRVTRzUTBGQldTeFBRVUZvUWl4RlFVRjVRanRCUVVOMlFpeG5Ra0ZCVFN4TFFVRk9MRU5CUVZrc1NVRkJXaXhEUVVGcFFpeExRVUZxUWp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxHZENRVUZOTEZWQlFVNHNRMEZCYVVJc1RVRkJUU3hKUVVGMlFqdEJRVU5FTzBGQlEwWTdRVUZEUmpzN1FVRkZSRHM3T3pzN096aENRVWRWTzBGQlExSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxFTkJRVU1zVFVGQlRTeFBRVUZZTEVWQlFXOUNPMEZCUTJ4Q0xHTkJRVTBzVDBGQlRpeEhRVUZuUWl4SlFVRm9RanRCUVVOQkxHTkJRVTBzVlVGQlRpeERRVUZwUWl4TlFVRk5MRWxCUVhaQ08wRkJRMFE3UVVGRFJqczdRVUZGUkRzN096czdPenQ1UWtGSlN5eExMRVZCUVU4N1FVRkRWaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRU5CUVVNc1RVRkJUU3hQUVVGWUxFVkJRVzlDTzBGQlEyeENMR05CUVUwc1QwRkJUaXhIUVVGblFpeEpRVUZvUWp0QlFVTkJMRmxCUVVrc1RVRkJUU3hUUVVGT0xFTkJRV2RDTEUxQlFYQkNMRVZCUVRSQ08wRkJRekZDTEdkQ1FVRk5MRk5CUVU0c1EwRkJaMElzVFVGQmFFSXNRMEZCZFVJc1MwRkJka0k3UVVGRFJEdEJRVU5HTzBGQlEwWTdPenQzUWtFMVEyTTdRVUZCUlN4aFFVRlBMRXRCUVVzc1UwRkJXanRCUVVGM1FqczdPM2RDUVVVdlFqdEJRVUZGTEdGQlFVOHNTMEZCU3l4SlFVRmFPMEZCUVcxQ0xFczdjMEpCUTNaQ0xFc3NSVUZCVHp0QlFVRkZMRmRCUVVzc1NVRkJUQ3hIUVVGWkxFdEJRVm83UVVGQmIwSTdPenM3TzBsQk5FTnFReXhSTzBGQlEwbzdPenM3TzBGQlMwRXNiMEpCUVZrc1MwRkJXaXhGUVVGdFFqdEJRVUZCT3p0QlFVTnFRaXhUUVVGTExFMUJRVXdzUjBGQll5eERRVUZETEVOQlFXWTdRVUZEUVN4VFFVRkxMRTFCUVV3c1IwRkJZeXhMUVVGa08wRkJRMFE3T3pzN2QwSkJSV0U3UVVGRFdpeGhRVUZQTEV0QlFVc3NUVUZCVEN4SFFVRmpMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFMUJRVm9zUjBGQmNVSXNRMEZCTVVNN1FVRkRSRHM3TzNkQ1FVVlZPMEZCUTFRc1YwRkJTeXhOUVVGTU8wRkJRMEVzWVVGQlR5eExRVUZMTEUxQlFVd3NRMEZCV1N4TFFVRkxMRTFCUVdwQ0xFTkJRVkE3UVVGRFJEczdPenM3YTBKQlIxa3NVVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRka3BtT3pzN08wbEJTVTBzVFR0QlFVVktMRzlDUVVGak8wRkJRVUU3TzBGQlExb3NVVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkZSRHM3UVVGRlJEczdPenM3T3pzN096SkNRVXRQTEVzc1JVRkJUenRCUVVOYUxHRkJRVThzUzBGQlN5eExRVUZNTEVOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdNa0pCUzA4c1N5eEZRVUZQTzBGQlExb3NZVUZCVHl4SlFVRkpMRlZCUVVvc1EwRkJaU3hMUVVGTExFdEJRVXdzUTBGQlZ5eE5RVUZOTEV0QlFVc3NTMEZCVEN4RFFVRk9MRWRCUVc5Q0xFZEJRUzlDTEVOQlFXWXNRMEZCVUR0QlFVTkVPenM3SzBKQlJWVXNUU3hGUVVGUkxFa3NSVUZCVFR0QlFVTjJRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4alFVRk5MRzlDUVVGT0xFTkJRVEpDTEVsQlFVa3NWVUZCU2l4RFFVRmxMRTFCUVdZc1EwRkJNMElzUlVGQmJVUXNTVUZCYmtRc1EwRkJkMFFzVlVGQlV5eFRRVUZVTEVWQlFXOUNPenRCUVVVeFJTeHBRa0ZCVHl4TlFVRlFMRU5CUVdNc1QwRkJaQ3hEUVVOSk8wRkJRMFVzYTBKQlFVMDdRVUZFVWl4WFFVUktMRVZCU1Vrc1UwRktTaXhGUVVsbE8wRkJRMWdzWTBGTVNpeERRVXRUTzBGQlRGUXNXVUZQUXl4SlFWQkVMRU5CVDAwc1ZVRkJVeXhUUVVGVUxFVkJRVzlDTzBGQlEzaENPMEZCUTBFN1FVRkRRU3h2UWtGQlVTeEpRVUZKTEZWQlFVb3NRMEZCWlN4VFFVRm1MRU5CUVZJN1FVRkZSQ3hYUVZwRUxFVkJXVWNzUzBGYVNDeERRVmxUTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKQ0xHOUNRVUZSTEVkQlFWSXNRMEZCV1N4dFFrRkJXaXhGUVVGcFF5eEhRVUZxUXp0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRV1pFTzBGQmFVSkVMRk5CYmtKRU8wRkJjVUpFTEU5QmRFSk5MRU5CUVZBN1FVRjNRa1E3T3pzclFrRkZWU3hQTEVWQlFWTXNTU3hGUVVGTk8wRkJRM2hDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCVXl4UFFVRlVMRVZCUVd0Q0xFMUJRV3hDTEVWQlFUQkNPMEZCUXpORExHTkJRVTBzYjBKQlFVNHNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNTVUZCY0VNc1EwRkJlVU1zVlVGQlV5eFZRVUZVTEVWQlFYRkNPenRCUVVVMVJDeHBRa0ZCVHl4TlFVRlFMRU5CUVdNc1QwRkJaQ3hEUVVOSk8wRkJRMFVzYTBKQlFVMDdRVUZFVWl4WFFVUktMRVZCU1Vrc1ZVRktTaXhGUVVsblFqdEJRVU5hTEdOQlRFb3NRMEZMVXp0QlFVeFVMRmxCVDBNc1NVRlFSQ3hEUVU5TkxGVkJRVk1zVTBGQlZDeEZRVUZ2UWpzN1FVRkZlRUlzWjBKQlFVa3NaMEpCUVdkQ0xFbEJRVWtzVlVGQlNpeERRVUZsTEZOQlFXWXNRMEZCY0VJN08wRkJSVUU3UVVGRFFTeHZRa0ZCVVN4aFFVRlNPMEZCUlVRc1YwRmtSQ3hGUVdOSExFdEJaRWdzUTBGalV5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXh2UWtGQlVTeEhRVUZTTEVOQlFWa3NiVUpCUVZvc1JVRkJhVU1zUjBGQmFrTTdRVUZEUVN4dFFrRkJUeXhIUVVGUU8wRkJRMFFzVjBGcVFrUTdRVUZyUWtRc1UwRndRa1E3UVVGelFrUXNUMEYyUWswc1EwRkJVRHRCUVhkQ1JEczdPelJDUVVWUExFOHNSVUZCVXl4SkxFVkJRVTA3UVVGRGNrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhMElzVFVGQmJFSXNSVUZCTUVJN1FVRkRNME1zWTBGQlRTeHBRa0ZCVGl4RFFVRjNRaXhQUVVGNFFpeEZRVUZwUXl4SlFVRnFReXhEUVVGelF5eFZRVUZUTEZWQlFWUXNSVUZCY1VJN08wRkJSWHBFTEdsQ1FVRlBMRTFCUVZBc1EwRkJZeXhKUVVGa0xFTkJRMGs3UVVGRFJTeHJRa0ZCVFR0QlFVUlNMRmRCUkVvc1JVRkpTU3hWUVVwS0xFVkJTV2RDTzBGQlExb3NaMEpCUVUwc1YwRkJUaXhEUVVGclFpeEpRVUZzUWl4RFFVeEtMRU5CU3pSQ08wRkJURFZDTEZsQlQwTXNTVUZRUkN4RFFVOU5MRlZCUVZNc1UwRkJWQ3hGUVVGdlFqdEJRVU40UWp0QlFVTkJPMEZCUTBFc2IwSkJRVkVzU1VGQlNTeFZRVUZLTEVOQlFXVXNVMEZCWml4RFFVRlNPMEZCUlVRc1YwRmFSQ3hGUVZsSExFdEJXa2dzUTBGWlV5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnlRaXh2UWtGQlVTeEhRVUZTTEVOQlFWa3NaMEpCUVZvc1JVRkJPRUlzUjBGQk9VSTdRVUZEUVN4dFFrRkJUeXhIUVVGUU8wRkJRMFFzVjBGbVJEdEJRV2xDUkN4VFFXNUNSRHRCUVhGQ1JDeFBRWFJDVFN4RFFVRlFPMEZCZFVKRU96czdPRUpCUlZNc1RTeEZRVUZSTEVrc1JVRkJUU3hUTEVWQlFWYzdRVUZEYWtNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNZMEZCVFN4dFFrRkJUaXhEUVVFd1FpeE5RVUV4UWl4RlFVRnJReXhKUVVGc1F5eERRVUYxUXl4VlFVRlRMRk5CUVZRc1JVRkJiMEk3TzBGQlJYcEVMR2xDUVVGUExFMUJRVkFzUTBGQll5eE5RVUZrTEVOQlEwazdRVUZEUlN4clFrRkJUVHRCUVVSU0xGZEJSRW9zUlVGSlNTeFRRVXBLTEVWQlNXVTdRVUZEV0N4dFFrRk1TaXhGUVV0bE8wRkJRMWdzWjBKQlFVMHNWMEZCVGl4RFFVRnJRaXhKUVVGc1FpeERRVTVLTEVOQlRUUkNPMEZCVGpWQ0xGbEJVVU1zU1VGU1JDeERRVkZOTEZWQlFWTXNUMEZCVkN4RlFVRnJRanRCUVVOMFFqdEJRVU5CTzBGQlEwRXNiMEpCUVZFc1QwRkJVanRCUVVWRUxGZEJZa1FzUlVGaFJ5eExRV0pJTEVOQllWTXNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRja0lzYjBKQlFWRXNSMEZCVWl4RFFVRlpMR3RDUVVGYUxFVkJRV2RETEVkQlFXaERPMEZCUTBFc2JVSkJRVThzUjBGQlVEdEJRVU5FTEZkQmFFSkVPMEZCYTBKRUxGTkJjRUpFTzBGQmMwSkVMRTlCZGtKTkxFTkJRVkE3UVVGM1FrUTdPenNyUWtGRlZTeEhMRVZCUVVzc1NTeEZRVUZOTEVVc1JVRkJTVHRCUVVONFFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWp0QlFVTXpReXhqUVVGTkxHRkJRVTRzUTBGQmIwSXNSMEZCY0VJc1JVRkJlVUlzU1VGQmVrSXNRMEZCT0VJc1ZVRkJVeXhOUVVGVUxFVkJRV2xDT3p0QlFVVTNReXhwUWtGQlR5eE5RVUZRTEVOQlFXTXNUMEZCWkN4RFFVTkpPMEZCUTBVc2EwSkJRVTBzVTBGRVVqdEJRVVZGTzBGQlEwRTdRVUZEUVN4blFrRkJTVHRCUVVwT0xGZEJSRW9zUlVGUFNTeE5RVkJLTEVWQlQxazdRVUZEVWl4blFrRkJUU3hYUVVGT0xFTkJRV3RDTEVsQlFXeENMRU5CVWtvc1EwRlJORUk3UVVGU05VSXNXVUZWUXl4SlFWWkVMRU5CVlUwc1ZVRkJVeXhUUVVGVUxFVkJRVzlDTzBGQlEzaENPMEZCUTBFN1FVRkRRU3h2UWtGQlVTeEpRVUZKTEZWQlFVb3NRMEZCWlN4VFFVRm1MRU5CUVZJN1FVRkZSQ3hYUVdaRUxFVkJaVWNzUzBGbVNDeERRV1ZUTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKQ0xHOUNRVUZSTEVkQlFWSXNRMEZCV1N4dFFrRkJXaXhGUVVGcFF5eEhRVUZxUXp0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRV3hDUkR0QlFXOUNSQ3hUUVhSQ1JEdEJRWGRDUkN4UFFYcENUU3hEUVVGUU8wRkJNRUpFT3pzN0swSkJSVlVzUnl4RlFVRkxMRWtzUlVGQlRTeEZMRVZCUVVrN1FVRkRlRUlzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdRVUZETTBNc1kwRkJUU3hoUVVGT0xFTkJRVzlDTEVkQlFYQkNMRVZCUVhsQ0xFbEJRWHBDTEVOQlFUaENMRlZCUVZNc1RVRkJWQ3hGUVVGcFFqczdRVUZGTjBNc2FVSkJRVThzVFVGQlVDeERRVUZqTEU5QlFXUXNRMEZEU1R0QlFVTkZMR3RDUVVGTkxGTkJSRkk3UVVGRlJTeG5Ra0ZCU1R0QlFVWk9MRmRCUkVvc1JVRkxTU3hOUVV4S0xFVkJTMWs3UVVGRFVpeGpRVTVLTEVOQlRWTTdRVUZPVkN4WlFWRkRMRWxCVWtRc1EwRlJUU3hWUVVGVExGTkJRVlFzUlVGQmIwSTdPMEZCUlhoQ0xHZENRVUZKTEdOQlFXTXNUVUZCVFN4WFFVRk9MRU5CUVd0Q0xFbEJRVWtzVlVGQlNpeERRVUZsTEZOQlFXWXNRMEZCYkVJc1EwRkJiRUk3UVVGRFFUdEJRVU5CTEc5Q1FVRlJMRmRCUVZJN1FVRkZSQ3hYUVdSRUxFVkJZMGNzUzBGa1NDeERRV05UTEZWQlFWTXNSMEZCVkN4RlFVRmpPMEZCUTNKQ0xHOUNRVUZSTEVkQlFWSXNRMEZCV1N4dFFrRkJXaXhGUVVGcFF5eEhRVUZxUXp0QlFVTkJMRzFDUVVGUExFZEJRVkE3UVVGRFJDeFhRV3BDUkR0QlFXMUNSQ3hUUVhKQ1JEdEJRWFZDUkN4UFFYaENUU3hEUVVGUU8wRkJlVUpFT3p0QlFVVkVPenM3T3pzN096czdOa0pCVFZNc1J5eEZRVUZMTEVrc1JVRkJUVHRCUVVOc1FpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnBRaXhOUVVGcVFpeEZRVUY1UWpzN1FVRkZNVU1zWTBGQlRTeGpRVUZPTEVOQlFYRkNMRWRCUVhKQ0xFVkJRVEJDTEVsQlFURkNMRU5CUVN0Q0xGVkJRVk1zVDBGQlZDeEZRVUZyUWpzN1FVRkZMME1zYVVKQlFVOHNUVUZCVUN4RFFVRmpMRWxCUVdRc1EwRkRRVHRCUVVORkxHdENRVUZOTzBGQlJGSXNWMEZFUVN4RlFVbEJMRTlCU2tFc1JVRkpVenRCUVVOVUxHZENRVUZOTEZkQlFVNHNRMEZCYTBJc1NVRkJiRUlzUTBGTVFTeERRVXQzUWp0QlFVeDRRaXhaUVU5RExFbEJVRVFzUTBGUFRTeFZRVUZUTEZOQlFWUXNSVUZCYjBJN1FVRkRlRUk3TzBGQlJVRTdRVUZEUVN4dlFrRkJVU3hKUVVGSkxGVkJRVW9zUTBGQlpTeFRRVUZtTEVOQlFWSTdRVUZGUkN4WFFXSkVMRVZCWVVjc1MwRmlTQ3hEUVdGVExGVkJRVk1zUjBGQlZDeEZRVUZqTzBGQlEzSkNMRzlDUVVGUkxFZEJRVklzUTBGQldTeHBRa0ZCV2l4RlFVRXJRaXhIUVVFdlFqdEJRVU5CTEcxQ1FVRlBMRWRCUVZBN1FVRkRSQ3hYUVdoQ1JEdEJRV2xDUkN4VFFXNUNSRHRCUVc5Q1JDeFBRWFJDVFN4RFFVRlFPMEZCZFVKRU96dEJRVVZFT3pzN096czdPenM3T3l0Q1FVOVhMRWNzUlVGQlN5eEpMRVZCUVUwc1V5eEZRVUZYTzBGQlF5OUNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ096dEJRVVV4UXl4alFVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNSVUZCTUVJc1NVRkJNVUlzUTBGQkswSXNWVUZCVXl4UFFVRlVMRVZCUVd0Q096dEJRVVV2UXl4cFFrRkJUeXhOUVVGUUxFTkJRV01zVFVGQlpDeERRVU5GTzBGQlEwVXNhMEpCUVUwN1FVRkVVaXhYUVVSR0xFVkJTVVVzVDBGS1JpeEZRVWxYTzBGQlExUXNiVUpCVEVZc1JVRkxZVHRCUVVOWUxHZENRVUZOTEZkQlFVNHNRMEZCYTBJc1NVRkJiRUlzUTBGT1JpeERRVTB3UWp0QlFVNHhRaXhaUVZGRExFbEJVa1FzUTBGUlRTeFZRVUZUTEU5QlFWUXNSVUZCYTBJN1FVRkRkRUk3UVVGRFFUdEJRVU5ETEcxQ1FVRkVMRWRCUVZrc1VVRkJVU3hQUVVGU0xFTkJRVm9zUjBGQkswSXNUMEZCVHl4UFFVRlFMRU5CUVM5Q08wRkJSVVFzVjBGaVJDeEZRV0ZITEV0QllrZ3NRMEZoVXl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOeVFpeHZRa0ZCVVN4TFFVRlNMRU5CUVdNc2JVSkJRV1FzUlVGQmJVTXNSMEZCYmtNN1FVRkRRU3h0UWtGQlR5eEhRVUZRTzBGQlEwUXNWMEZvUWtRN1FVRnJRa1FzVTBGd1FrUTdRVUZ4UWtRc1QwRjJRazBzUTBGQlVEdEJRWGRDUkRzN1FVRkZSRHM3T3pzN096dDVRMEZKY1VJN1FVRkRia0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpMRlZCUVZVc1JVRkJaRHM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eGxRVUZQTEUxQlFWQXNRMEZCWXl4WFFVRmtMRU5CUTBFN1FVRkRSU3huUWtGQlRTeFRRVVJTTzBGQlJVVXNlVUpCUVdVc1NVRkdha0lzUlVGRmRVSTdRVUZEY2tJc01FSkJRV2RDTEVsQlFVa3NWVUZCU2l4RFFVRmxMRU5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUlVGQllTeEpRVUZpTEVOQlFXWXNRMEZJYkVJN1FVRkpSU3huUWtGQlRTeEZRVUZETEUxQlFVMHNVMEZCVUN4RlFVcFNMRU5CU1RCQ08wRkJTakZDTEZOQlJFRXNSVUZQUVN4SlFWQkJMRVZCVDAwN1FVRkRUaXhUUVVGRExFMUJRVVFzUlVGQlV5eFJRVUZVTEVOQlVrRXNRMEZSYlVJN08wRkJVbTVDTEZWQlZVVXNTVUZXUml4RFFWVlBMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRMjVDTzBGQlEwRTdPMEZCUlVFc2FVSkJRVThzVFVGQlVDeERRVUZqTEZOQlFXUXNRMEZEUlN4TlFVUkdMRVZCUTFVN1FVRkRVaXhqUVVGSkxGTkJSazRzUTBGRlowSTdRVUZHYUVJc1dVRkhSU3hKUVVoR0xFTkJSMDhzVlVGQlV5eFRRVUZVTEVWQlFXOUNPMEZCUTNwQ08wRkJRMEVzYjBKQlFWRXNUVUZCVWl4SFFVRnJRaXhKUVVGSkxGVkJRVW9zUTBGQlpTeFRRVUZtTEVOQlFXeENPMEZCUTBFc2JVSkJRVThzVDBGQlR5eE5RVUZRTEVOQlFXTXNVMEZCWkN4RFFVTk1MRTlCUkVzc1JVRkRTVHRCUVVOVUxHZENRVUZKTEZWQlJrTXNRMEZGVlR0QlFVWldMR0ZCUVZBN1FVRkpSQ3hYUVZaRUxFVkJWVWNzU1VGV1NDeERRVlZSTEZWQlFWTXNWVUZCVkN4RlFVRnhRanRCUVVNelFpeHZRa0ZCVVN4UFFVRlNMRWRCUVcxQ0xFbEJRVWtzVlVGQlNpeERRVUZsTEZWQlFXWXNRMEZCYmtJN1FVRkRRVHM3UVVGRlFTeHZRa0ZCVVN4UFFVRlNPMEZCUlVRc1YwRm9Ra1FzUlVGblFrY3NTMEZvUWtnc1EwRm5RbE1zVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY2tJc2IwSkJRVkVzUzBGQlVpeERRVUZqTEVkQlFXUTdRVUZEUVN4dFFrRkJUeXhIUVVGUU8wRkJRMFFzVjBGdVFrUTdRVUZ4UWtRc1UwRnVRMFFzUlVGdFEwY3NTMEZ1UTBnc1EwRnRRMU1zVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY2tJc2EwSkJRVkVzUzBGQlVpeERRVUZqTEVkQlFXUTdRVUZEUVN4cFFrRkJUeXhIUVVGUU8wRkJRMFFzVTBGMFEwUTdRVUYxUTBRc1QwRjRRMDBzUTBGQlVEdEJRWGxEUkRzN1FVRkZSRHM3T3pzN096dHBRMEZKWVR0QlFVTllMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NVVUZCVVN4SlFVRkxMRlZCUVV3c1EwRkJaMElzUlVGQmFFSXNRMEZCV2p0QlFVTkJMR0ZCUVU4c1pVRkJVQ3hEUVVGMVFpeExRVUYyUWpzN1FVRkZRU3hoUVVGUExFdEJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3Y1VOQlMybENPMEZCUTJZc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4UlFVRlJMRWxCUVVzc1ZVRkJUQ3hEUVVGblFpeEZRVUZvUWl4RFFVRmFPMEZCUTBFc1lVRkJUeXhsUVVGUUxFTkJRWFZDTEV0QlFYWkNPenRCUVVWQkxGVkJRVWtzVDBGQlR5eExRVUZMTEVkQlFVd3NSVUZCV0R0QlFVTkJMRlZCUVVrc1kwRkJZeXhOUVVGTkxGZEJRVTRzUTBGQmEwSXNTVUZCYkVJc1EwRkJiRUk3TzBGQlJVRTdRVUZEUVN4VlFVRkpMRmxCUVZrc1dVRkJXU3hMUVVGYUxFTkJRV3RDTEZsQlFWa3NUVUZCV2l4SFFVRnhRaXhEUVVGMlF5eEZRVUV3UXl4WlFVRlpMRTFCUVhSRUxFTkJRV2hDT3p0QlFVVkJPMEZCUTBFc1YwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRU5CUVhCQ0xFVkJRWFZDTEVkQlFYWkNMRVZCUVRSQ08wRkJRVVVzWTBGQlRTeERRVUZPTEVsQlFWY3NWVUZCVlN4RFFVRldMRU5CUVZnN1FVRkJNRUk3UVVGRGVFUXNZVUZCVHl4TFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdhME5CU1dNN1FVRkRXaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMRkZCUVZFc1NVRkJTU3hWUVVGS0xFTkJRV1VzUlVGQlppeERRVUZhTzBGQlEwRXNZVUZCVHl4bFFVRlFMRU5CUVhWQ0xFdEJRWFpDTzBGQlEwRXNZVUZCVHl4TFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPM2xEUVV0eFFpeFBMRVZCUVZNc1NTeEZRVUZOTzBGQlEyeERMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ08wRkJRek5ETEZsQlFVa3NUVUZCVFN4SlFVRkpMRlZCUVVvc1EwRkJaU3hGUVVGbUxFTkJRVlk3UVVGRFFTeFpRVUZKTEU5QlFVOHNTVUZCV0RzN1FVRkZRU3hqUVVGTkxFOUJRVTRzUTBGQll5eFBRVUZrTEVWQlFYVkNMRWxCUVhaQ0xFTkJRVFJDTEZWQlFVTXNWMEZCUkN4RlFVRnBRanM3UVVGRk0wTXNaMEpCUVUwc1VVRkJUaXhEUVVGbExGZEJRV1lzUlVGQk5FSXNTVUZCTlVJc1JVRkJhME1zU1VGQmJFTXNRMEZCZFVNc1ZVRkJVeXhSUVVGVUxFVkJRVzFDT3p0QlFVVjRSRHRCUVVOQkxHbENRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzUlVGQmNFSXNSVUZCZDBJc1IwRkJlRUlzUlVGQk5rSTdRVUZCUlN4clFrRkJTU3hEUVVGS0xFbEJRVk1zVTBGQlV5eERRVUZVTEVOQlFWUTdRVUZCZFVJN1FVRkRkRVFzYlVKQlFVOHNUVUZCVFN4UlFVRk9MRU5CUVdVc1YwRkJaaXhGUVVFMFFpeFBRVUZQTEZGQlFXNURMRU5CUVZBN1FVRkZSQ3hYUVU1RUxFVkJUVWNzU1VGT1NDeERRVTFSTEZWQlFWTXNVVUZCVkN4RlFVRnRRanM3UVVGRmVrSTdRVUZEUVN4cFFrRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRVZCUVhCQ0xFVkJRWGRDTEVkQlFYaENMRVZCUVRaQ08wRkJRVVVzYTBKQlFVa3NTVUZCU1N4RlFVRlNMRWxCUVdNc1UwRkJVeXhEUVVGVUxFTkJRV1E3UVVGQk5FSTdRVUZETTBRN1FVRkRRU3h2UWtGQlVTeEhRVUZTTzBGQlJVUXNWMEZpUkN4RlFXRkhMRXRCWWtnc1EwRmhVeXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU55UWl4dlFrRkJVU3hIUVVGU0xFTkJRVmtzTmtKQlFWb3NSVUZCTWtNc1IwRkJNME03UVVGRFFTeHRRa0ZCVHl4SFFVRlFPMEZCUTBRc1YwRm9Ra1E3UVVGcFFrUXNVMEZ1UWtRN1FVRnhRa1FzVDBGNlFrMHNRMEZCVUR0QlFUQkNSRHM3UVVGRlJEczdPenM3T3pzN096dHBRMEZQWVN4UExFVkJRVk1zU1N4RlFVRk5PMEZCUXpGQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpReXhaUVVGSkxFMUJRVTBzUlVGQlZqdEJRVU5CTEZsQlFVa3NUMEZCVHl4SlFVRllPenRCUVVWQk8wRkJRMEVzWTBGQlRTeFJRVUZPTEVOQlFXVXNUMEZCWml4RlFVRjNRaXhKUVVGNFFpeEZRVUU0UWl4SlFVRTVRaXhEUVVGdFF5eFZRVUZUTEZGQlFWUXNSVUZCYlVJN1FVRkRjRVFzWTBGQlNTeEpRVUZLTEVOQlFWTXNVVUZCVkR0QlFVTkJMR2xDUVVGUExFMUJRVTBzVVVGQlRpeERRVUZsTEU5QlFXWXNSVUZCZDBJc1QwRkJUeXhSUVVFdlFpeERRVUZRTzBGQlJVUXNVMEZLUkN4RlFVbEhMRWxCU2tnc1EwRkpVU3hWUVVGVExGRkJRVlFzUlVGQmJVSTdRVUZEZWtJc1kwRkJTU3hKUVVGS0xFTkJRVk1zVVVGQlZEdEJRVU5CTEdsQ1FVRlBMRTFCUVUwc1VVRkJUaXhEUVVGbExFOUJRV1lzUlVGQmQwSXNUMEZCVHl4UlFVRXZRaXhEUVVGUU8wRkJSVVFzVTBGU1JDeEZRVkZITEVsQlVrZ3NRMEZSVVN4VlFVRlRMRkZCUVZRc1JVRkJiVUk3UVVGRGVrSXNZMEZCU1N4SlFVRktMRU5CUVZNc1VVRkJWRHRCUVVOQkxHbENRVUZQTEUxQlFVMHNVVUZCVGl4RFFVRmxMRTlCUVdZc1JVRkJkMElzVDBGQlR5eFJRVUV2UWl4RFFVRlFPMEZCUlVRc1UwRmFSQ3hGUVZsSExFbEJXa2dzUTBGWlVTeFZRVUZUTEZGQlFWUXNSVUZCYlVJN1FVRkRla0lzWTBGQlNTeEpRVUZLTEVOQlFWTXNVVUZCVkRzN1FVRkZRVHRCUVVOQkxHdENRVUZSTEVkQlFWSTdRVUZGUkN4VFFXeENSQ3hGUVd0Q1J5eExRV3hDU0N4RFFXdENVeXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU55UWp0QlFVTkJMR2xDUVVGUExFZEJRVkE3UVVGRFJDeFRRWEpDUkRzN1FVRjFRa0U3UVVGRFJDeFBRVGxDVFN4RFFVRlFPMEZCSzBKRU96czdjME5CUldsQ0xFOHNSVUZCVXp0QlFVTjZRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4bFFVRlBMRTFCUVZBc1EwRkJZeXhUUVVGa0xFTkJRMGtzVDBGRVNpeEZRVU5oTzBGQlExUXNaVUZHU2l4RlFVZEpMRVZCUVVrN1FVRkRSaXhuUWtGQlRTeHRRa0ZFVWp0QlFVVkZMR2RDUVVGTkxFVkJRVU1zVFVGQlRTeFRRVUZRTEVWQlJsSXNRMEZGTUVJN1FVRkdNVUlzVTBGSVNpeEZRVTlKTEVsQlVFb3NSVUZQVlR0QlFVTk9MRk5CUVVNc1RVRkJSQ3hEUVZKS0xFTkJVV0U3UVVGU1lpeFZRVlZETEVsQlZrUXNRMEZWVFN4VlFVRlRMRlZCUVZRc1JVRkJjVUk3UVVGRGVrSTdRVUZEUVR0QlFVTkJMR3RDUVVGUkxGVkJRVkk3UVVGRlJDeFRRV1pFTEVWQlpVY3NTMEZtU0N4RFFXVlRMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRM0pDTEd0Q1FVRlJMRXRCUVZJc1EwRkJZeXd3UWtGQlpDeEZRVUV3UXl4SFFVRXhRenRCUVVOQkxHbENRVUZQTEVkQlFWQTdRVUZEUkN4VFFXeENSRHRCUVcxQ1JDeFBRWEJDVFN4RFFVRlFPMEZCY1VKRU96czdkME5CUlcxQ0xFMHNSVUZCVVR0QlFVTXhRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4bFFVRlBMRTFCUVZBc1EwRkJZeXhUUVVGa0xFTkJRMGtzVFVGRVNpeEZRVU5aTzBGQlExSXNZMEZHU2l4RlFVZEpMRVZCUVVrN1FVRkRSaXhuUWtGQlRTeHRRa0ZFVWp0QlFVVkZMR2RDUVVGTkxFVkJRVU1zVFVGQlRTeFRRVUZRTEVWQlJsSXNRMEZGTUVJN1FVRkdNVUlzVTBGSVNpeEZRVTlKTEVsQlVFb3NSVUZQVlR0QlFVTk9MRk5CUVVNc1VVRkJSQ3hEUVZKS0xFTkJVV1U3UVVGU1ppeFZRVlZETEVsQlZrUXNRMEZWVFN4VlFVRlRMRk5CUVZRc1JVRkJiMEk3UVVGRGVFSTdRVUZEUVR0QlFVTkJMR3RDUVVGUkxGTkJRVkk3UVVGRlJDeFRRV1pFTEVWQlpVY3NTMEZtU0N4RFFXVlRMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRM0pDTEd0Q1FVRlJMRXRCUVZJc1EwRkJZeXcwUWtGQlpDeEZRVUUwUXl4SFFVRTFRenRCUVVOQkxHbENRVUZQTEVkQlFWQTdRVUZEUkN4VFFXeENSRHRCUVcxQ1JDeFBRWEJDVFN4RFFVRlFPMEZCY1VKRU96czdlVU5CUlc5Q0xFMHNSVUZCVVR0QlFVTXpRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4bFFVRlBMRTFCUVZBc1EwRkJZeXhUUVVGa0xFTkJRMGtzVFVGRVNpeEZRVU5aTzBGQlExSXNZMEZHU2l4RlFVZEpMRVZCUVVrN1FVRkRSaXhuUWtGQlRTeFZRVVJTTzBGQlJVVXNaMEpCUVUwc1JVRkJReXhOUVVGTkxGTkJRVkFzUlVGR1VpeERRVVV3UWp0QlFVWXhRaXhUUVVoS0xFVkJUMGtzU1VGUVNpeEZRVTlWTzBGQlEwNHNVMEZCUXl4VFFVRkVMRU5CVWtvc1EwRlJaMEk3UVVGRFFUdEJRVlJvUWl4VlFWZERMRWxCV0VRc1EwRlhUU3hWUVVGVExGTkJRVlFzUlVGQmIwSTdRVUZEZUVJN1FVRkRRVHRCUVVOQkxHdENRVUZSTEZOQlFWSTdRVUZGUkN4VFFXaENSQ3hGUVdkQ1J5eExRV2hDU0N4RFFXZENVeXhWUVVGVExFZEJRVlFzUlVGQll6dEJRVU55UWl4clFrRkJVU3hMUVVGU0xFTkJRV01zTmtKQlFXUXNSVUZCTmtNc1IwRkJOME03UVVGRFFTeHBRa0ZCVHl4SFFVRlFPMEZCUTBRc1UwRnVRa1E3UVVGdlFrUXNUMEZ5UWswc1EwRkJVRHRCUVhOQ1JEczdPM2xEUVVWdlFpeFBMRVZCUVZNN1FVRkROVUlzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdRVUZETTBNc1pVRkJUeXhOUVVGUUxFTkJRV01zVTBGQlpDeERRVU5KTEU5QlJFb3NSVUZEWVR0QlFVTlVMR1ZCUmtvc1JVRkhTU3hGUVVGSk8wRkJRMFlzWjBKQlFVMHNWVUZFVWp0QlFVVkZMR2RDUVVGTkxFVkJRVU1zVFVGQlRTeFRRVUZRTEVWQlJsSXNRMEZGTUVJN1FVRkdNVUlzVTBGSVNpeEZRVTlKTEVsQlVFb3NSVUZQVlR0QlFVTk9MRk5CUVVNc1UwRkJSQ3hEUVZKS0xFTkJVV2RDTzBGQlEwRTdRVUZVYUVJc1ZVRlhReXhKUVZoRUxFTkJWMDBzVlVGQlV5eFZRVUZVTEVWQlFYRkNPMEZCUTNwQ08wRkJRMEU3UVVGRFFTeHJRa0ZCVVN4VlFVRlNPMEZCUlVRc1UwRm9Ra1FzUlVGblFrY3NTMEZvUWtnc1EwRm5RbE1zVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEY2tJc2EwSkJRVkVzUzBGQlVpeERRVUZqTERaQ1FVRmtMRVZCUVRaRExFZEJRVGRETzBGQlEwRXNhVUpCUVU4c1IwRkJVRHRCUVVORUxGTkJia0pFTzBGQmIwSkVMRTlCY2tKTkxFTkJRVkE3UVVGelFrUTdPenQ1UTBGRmIwSXNSeXhGUVVGTExGRXNSVUZCVlN4VkxFVkJRVms3UVVGRE9VTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeFhRVUZYTEVsQlFVa3NWVUZCU2l4RFFVRmxMRWxCUVVrc1RVRkJTaXhIUVVGaExGTkJRVk1zVFVGQmRFSXNSMEZCSzBJc1YwRkJWeXhOUVVGNlJDeERRVUZtT3p0QlFVVkJPMEZCUTBFc1YwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQllpeEZRVUZuUWl4SlFVRkpMRWxCUVVrc1RVRkJlRUlzUlVGQlowTXNSMEZCYUVNc1JVRkJjVU03UVVGRGJrTXNhVUpCUVZNc1EwRkJWQ3hKUVVGakxFbEJRVWtzUTBGQlNpeERRVUZrTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3hYUVVGTExFbEJRVWtzUzBGQlNTeERRVUZpTEVWQlFXZENMRXRCUVVrc1UwRkJVeXhOUVVFM1FpeEZRVUZ4UXl4SlFVRnlReXhGUVVFd1F6dEJRVU40UXl4cFFrRkJVeXhMUVVGSkxFbEJRVWtzVFVGQmFrSXNTVUZCTWtJc1NVRkJTU3hGUVVGS0xFTkJRVE5DTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3hYUVVGTExFbEJRVWtzVFVGQlNTeERRVUZpTEVWQlFXZENMRTFCUVVrc1YwRkJWeXhOUVVFdlFpeEZRVUYxUXl4TFFVRjJReXhGUVVFMFF6dEJRVU14UXl4cFFrRkJVeXhOUVVGSkxFbEJRVWtzVFVGQlVpeEhRVUZwUWl4VFFVRlRMRTFCUVc1RExFbEJRVFpETEVsQlFVa3NSMEZCU2l4RFFVRTNRenRCUVVORU96dEJRVVZFTEdGQlFVOHNVVUZCVUR0QlFVTkVPenM3ZVVOQlJXOUNPMEZCUTI1Q0xGVkJRVWtzVVVGQlVTeEpRVUZMTEZWQlFVd3NRMEZCWjBJc1JVRkJhRUlzUTBGQldqdEJRVU5CTEdGQlFVOHNaVUZCVUN4RFFVRjFRaXhMUVVGMlFqczdRVUZGUVN4aFFVRlBMRXRCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN2JVTkJTMlVzVnl4RlFVRmhPMEZCUXpGQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpReXhqUVVGTkxFOUJRVTRzUTBGQll5eFhRVUZrTEVWQlFUSkNMRWxCUVROQ0xFTkJRV2RETEZWQlFVTXNSMEZCUkN4RlFVRlRPenRCUVVWMlF5eHBRa0ZCVHl4TlFVRlFMRU5CUVdNc1UwRkJaQ3hEUVVOQkxFdEJSRUVzUlVGRFR6dEJRVU5RTEdGQlJrRXNSVUZIUVN4RlFVRkpPMEZCUTBZc2EwSkJRVTBzVFVGRVVqdEJRVVZGTEd0Q1FVRk5MRVZCUVVNc1RVRkJUU3hUUVVGUUxFVkJSbElzUlVGRk1rSTdRVUZEZWtJc2IwSkJRVkVzUjBGSVZpeERRVWRqTzBGQlNHUXNWMEZJUVN4RlFWRkJMRWxCVWtFc1JVRlJUVHRCUVVOT0xGZEJRVU1zVFVGQlJDeEZRVUZUTEZGQlFWUXNRMEZVUVN4RFFWTnRRanRCUVZSdVFpeFpRVlZGTEVsQlZrWXNRMEZWVHl4VlFVRlRMRWRCUVZRc1JVRkJZenRCUVVOdVFqdEJRVU5CTzBGQlEwRXNiMEpCUVZFc1IwRkJVanRCUVVORUxGZEJaRVFzUlVGbFF5eExRV1pFTEVOQlpVOHNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRia0lzYlVKQlFVOHNSMEZCVUR0QlFVTkVMRmRCYWtKRU8wRkJhMEpFTEZOQmNFSkVPMEZCY1VKRUxFOUJka0pOTEVOQlFWQTdRVUYzUWtRN096czBRa0ZGVHl4TExFVkJRVTg3UVVGRFlpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWp0QlFVTXpReXhsUVVGUExFMUJRVkFzUTBGQll5eE5RVUZrTEVOQlEwazdRVUZEUlN4blFrRkJUVHRCUVVSU0xGTkJSRW9zUlVGSlNTeExRVXBLTEVOQlNWVTdRVUZLVml4VlFVMURMRWxCVGtRc1EwRk5UU3hWUVVGVExFbEJRVlFzUlVGQlpUdEJRVU51UWp0QlFVTkJPMEZCUTBFc2EwSkJRVkVzU1VGQlNTeFZRVUZLTEVOQlFXVXNTVUZCWml4RFFVRlNPMEZCUTBRc1UwRldSQ3hGUVZkRExFdEJXRVFzUTBGWFR5eFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnVRaXhyUWtGQlVTeExRVUZTTEVOQlFXTXNSMEZCWkR0QlFVTkJMR2xDUVVGUExFZEJRVkE3UVVGRFJDeFRRV1JFTzBGQlowSkVMRTlCYWtKTkxFTkJRVkE3UVVGclFrUTdPenRyUTBGRllTeFhMRVZCUVdFN1FVRkRla0lzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhMElzVFVGQmJFSXNSVUZCTUVJN1FVRkRNME1zWlVGQlR5eE5RVUZRTEVOQlFXTXNVMEZCWkN4RFFVTkpMRXRCUkVvc1JVRkRWenRCUVVOUUxHMUNRVVpLTEVWQlIwa3NSVUZCU1R0QlFVTkdMR2RDUVVGTk8wRkJSRklzVTBGSVNpeEZRVTFKTEVsQlRrb3NSVUZOVlR0QlFVTk9MRk5CUVVNc1UwRkJSQ3hGUVVGWkxGTkJRVm9zUTBGUVNpeERRVTh5UWp0QlFWQXpRaXhWUVZORExFbEJWRVFzUTBGVFRTeFZRVUZUTEVkQlFWUXNSVUZCWXp0QlFVTnNRanRCUVVOQk8wRkJRMEVzYTBKQlFWRXNSMEZCVWp0QlFVTkVMRk5CWWtRc1JVRmpReXhMUVdSRUxFTkJZMDhzVlVGQlV5eEhRVUZVTEVWQlFXTTdRVUZEYmtJc2EwSkJRVkVzUzBGQlVpeERRVUZqTEhGQ1FVRmtMRVZCUVhGRExFZEJRWEpETzBGQlEwRXNhVUpCUVU4c1IwRkJVRHRCUVVORUxGTkJha0pFTzBGQmEwSkVMRTlCYmtKTkxFTkJRVkE3UVVGdlFrUTdPenRuUTBGRlZ5eERMRVZCUVVjN1FVRkRZaXhoUVVGUExFbEJRVWtzVjBGQlNpeERRVUZuUWl4UFFVRm9RaXhGUVVGNVFpeE5RVUY2UWl4RFFVRm5ReXhEUVVGb1F5eERRVUZRTzBGQlEwUTdPenRuUTBGRlZ5eERMRVZCUVVjN1FVRkRZaXhoUVVGUExFbEJRVWtzVjBGQlNpeERRVUZuUWl4UFFVRm9RaXhGUVVGNVFpeE5RVUY2UWl4RFFVRm5ReXhEUVVGb1F5eERRVUZRTzBGQlEwUTdPenM3TzJ0Q1FVZFpMRTA3T3pzN096czdPenM3T3pzN096czdRVU55Y1VKbU96czdPenRKUVV0TkxFOHNSMEZGU2l4cFFrRkJXU3hIUVVGYUxFVkJRV2xDTEZWQlFXcENMRVZCUVRaQ08wRkJRVUU3TzBGQlF6TkNMRTFCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZGQlFVMHNTVUZCVGl4SFFVRmhMRWRCUVdJN1FVRkRRU3hSUVVGTkxGTkJRVTRzUjBGQmEwSXNTMEZCYkVJN1FVRkRRU3hSUVVGTkxGZEJRVTRzUjBGQmIwSXNWVUZCY0VJN08wRkJSVUVzVVVGQlRTeFhRVUZPTEVOQlFXdENMRmRCUVd4Q0xFTkJRVGhDTEUxQlFVMHNTVUZCY0VNc1JVRkJNRU1zWlVGQlR6czdRVUZGTDBNc1VVRkJTU3hoUVVGaExFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFWUXNRMEZCWlN4VlFVRm9RenRCUVVOQkxGRkJRVWtzVDBGQlR5eEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRlVMRU5CUVdVc1NVRkJNVUk3TzBGQlJVRXNVVUZCU1N4alFVRktPenRCUVVWQkxGRkJRVWtzVjBGQlZ5eERRVUZZTEUxQlFXdENMRk5CUVhSQ0xFVkJRV2xETzBGQlF5OUNMR05CUVZFc1JVRkJReXhOUVVGTkxGVkJRVkFzUlVGQmJVSXNUMEZCVHl4WFFVRlhMRU5CUVZnc1EwRkJNVUlzUlVGQmVVTXNUVUZCVFN4SFFVRXZReXhGUVVGU08wRkJRMFFzUzBGR1JDeE5RVVZQTzBGQlEwd3NZMEZCVVN4RlFVRkRMRTFCUVUwc1MwRkJVQ3hGUVVGakxFOUJRVThzUzBGQlN5eERRVUZNTEVOQlFYSkNMRVZCUVRoQ0xFMUJRVTBzUjBGQmNFTXNSVUZCVWp0QlFVTkVPenRCUVVWRUxGRkJRVWtzVjBGQlZ5eEZRVUZETEVsQlFVa3NTVUZCU1N4RlFVRlVMRVZCUVdFc1RVRkJUU3hWUVVGdVFpeEZRVUVyUWl4SlFVRkpMRWxCUVVrc1NVRkJka01zUlVGQk5rTXNUVUZCVFN4SlFVRkpMRVZCUVhaRUxFVkJRVEpFTEUxQlFVMHNTMEZCYWtVc1JVRkJaanM3UVVGRlFUdEJRVU5CTzBGQlEwRXNVVUZCU1N4SlFVRkpMRWxCUVVvc1EwRkJVeXhMUVVGVUxFdEJRVzFDTEUxQlFYWkNMRVZCUVN0Q096dEJRVVUzUWl4cFFrRkJWeXhaUVVGTk8wRkJRMllzWTBGQlRTeFhRVUZPTEVOQlFXdENMRmRCUVd4Q0xFTkJRVGhDTEZGQlFUbENPMEZCUTBRc1QwRkdSQ3hGUVVWSExFMUJRVTBzVTBGR1ZEdEJRVWRFTEV0QlRFUXNUVUZMVHp0QlFVTk1MRmxCUVUwc1YwRkJUaXhEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhSUVVFNVFqdEJRVU5FTzBGQlEwWXNSMEY2UWtRN1FVRXdRa1FzUXpzN2EwSkJTVmtzVHpzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTTFRMlk3T3pzN1NVRkpUU3hSTzBGQlJVb3NiMEpCUVZrc1NVRkJXaXhGUVVGclFpeEpRVUZzUWl4RlFVRjNRanRCUVVGQk96dEJRVU4wUWl4UlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZOTEVsQlFVNHNSMEZCWVN4SlFVRmlPMEZCUTBFc1ZVRkJUU3hKUVVGT0xFZEJRV0VzU1VGQllqdEJRVU5CTEZWQlFVMHNaVUZCVGl4SFFVRjNRaXhGUVVGNFFqdEJRVVZFT3pzN08yZERRVVZYTEZVc1JVRkJXVHRCUVVOMFFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc2MwSkJRWE5DTzBGQlEzaENMSEZDUVVGaExFVkJSRmM3UVVGRmVFSXNkMEpCUVdkQ0xFVkJSbEU3UVVGSGVFSXNORUpCUVc5Q0xFVkJTRWs3UVVGSmVFSXNNa0pCUVcxQ0xFVkJTa3M3UVVGTGVFSXNjVUpCUVdFN1FVRk1WeXhQUVVFeFFqdEJRVTlCTEZsQlFVMHNaVUZCVGl4RFFVRnpRaXhWUVVGMFFpeEpRVUZ2UXl4dFFrRkJjRU03UVVGRFJEczdPMjFEUVVWakxGVXNSVUZCV1N4VExFVkJRVmNzUnl4RlFVRkxMRXNzUlVGQlR6dEJRVU5vUkN4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEdsQ1FVRnBRaXhKUVVGSkxGZEJRVW9zUTBGQlowSXNVMEZCYUVJc1JVRkJNa0lzUjBGQk0wSXNSVUZCWjBNc1MwRkJhRU1zUTBGQmNrSTdPMEZCUlVFc1dVRkJUU3hsUVVGT0xFTkJRWE5DTEVsQlFYUkNMRU5CUVRKQ0xHTkJRVE5DTzBGQlEwUTdPenM3TzBsQlIwY3NWeXhIUVVWS0xIRkNRVUZaTEZOQlFWb3NSVUZCZFVJc1IwRkJka0lzUlVGQk5FSXNTMEZCTlVJc1JVRkJiVU03UVVGQlFUczdRVUZEYWtNc1RVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNVVUZCVFN4VFFVRk9MRWRCUVd0Q0xGTkJRV3hDTzBGQlEwRXNVVUZCVFN4SFFVRk9MRWRCUVZrc1IwRkJXanRCUVVOQkxGRkJRVTBzUzBGQlRpeEhRVUZqTEV0QlFXUTdRVUZEUkN4RE96dEpRVWxITEZrN1FVRkZTaXgzUWtGQldTeFJRVUZhTEVWQlFYTkNMRkZCUVhSQ0xFVkJRV2RETzBGQlFVRTdPMEZCUXpsQ0xGRkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xGRkJRV3BDTzBGQlEwRXNWVUZCVFN4UlFVRk9MRWRCUVdsQ0xGRkJRV3BDTzBGQlEwUTdPenM3T0VKQlJWTXNVU3hGUVVGVkxGRXNSVUZCVlR0QlFVTTFRanM3UVVGRlJEczdPenM3YTBKQlIxa3NVVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU0zUkdZN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3T3pzN1FVRkZRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRKUVRSQ1RTeGpPenRCUVVWS096czdRVUZIUVN3d1FrRkJXU3hWUVVGYUxFVkJRWGRDTEcxQ1FVRjRRaXhGUVVFMlF5eGpRVUUzUXl4RlFVRTJSRHRCUVVGQk96dEJRVU16UkN4UlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFJRVUZKTEVOQlFVTXNWVUZCVEN4RlFVRnBRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEhkQ1FVRldMRU5CUVU0N1FVRkRha0lzVVVGQlNTeERRVUZETEdOQlFVd3NSVUZCY1VJc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTd3lRa0ZCVml4RFFVRk9PenRCUVVWeVFpeFZRVUZOTEZkQlFVNHNSMEZCYjBJc1ZVRkJjRUk3UVVGRFFTeFZRVUZOTEdOQlFVNHNSMEZCZFVJc1kwRkJka0k3UVVGRFFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc1RVRkJUU3hYUVVGT0xFZEJRVzlDTEUxQlFYQkRPMEZCUTBFc1ZVRkJUU3hQUVVGT0xFZEJRV2RDTEUxQlFVMHNWMEZCVGl4SFFVRnZRaXhsUVVGd1F6dEJRVU5CTEZWQlFVMHNiVUpCUVU0c1IwRkJORUlzYlVKQlFUVkNPenRCUVVWQkxGVkJRVTBzVDBGQlRpeEhRVUZuUWl4elFrRkJWU3hOUVVGTkxGZEJRV2hDTEVWQlFUWkNMRTFCUVRkRE96dEJRVVZCTzBGQlEwRXNWVUZCVFN4VlFVRk9MRWRCUVcxQ0xFVkJRVzVDTzBGQlEwRXNWVUZCVFN4VlFVRk9MRWRCUVcxQ0xFVkJRVzVDTzBGQlEwRXNVVUZCU1N4alFVRmpMSFZDUVVGaExFMUJRV0lzUlVGQmIwSXNUMEZCY0VJc1EwRkJiRUk3UVVGRFFTeFZRVUZOTEZGQlFVNHNSMEZCYVVJc1YwRkJha0k3UVVGRFFTeFZRVUZOTEUxQlFVNHNSMEZCWlN4elFrRkJaanM3UVVGRlFUdEJRVU5CTEZWQlFVMHNiVUpCUVU0c1IwRkJORUlzUlVGQk5VSTdPMEZCUlVFN1FVRkRRU3hWUVVGTkxGRkJRVTRzUjBGQmFVSXNSVUZCYWtJN08wRkJSVUU3UVVGRFFTeFZRVUZOTEhGQ1FVRk9MRWRCUVRoQ0xFVkJRVGxDT3p0QlFVVkJPMEZCUTBFc1ZVRkJUU3hwUWtGQlRpeEhRVUV3UWl4SlFVRXhRanM3UVVGRlFUdEJRVU5CTEZWQlFVMHNWMEZCVGl4SFFVRnZRaXhMUVVGd1FqczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzVlVGQlRTeGxRVUZPTzBGQlJVUTdPMEZCUlVRN096czdPenM3T3pzN1FVRnhRMEU3T3pzN08yOURRVXRuUWp0QlFVTmtMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eE5RVUZOTEZWQlFXSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdaME5CUzFrc1R5eEZRVUZUTzBGQlEyNUNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZkQlFVc3NTVUZCU1N4TFFVRlVMRWxCUVd0Q0xFMUJRVTBzVlVGQmVFSXNSVUZCYjBNN08wRkJSV3hETEZsQlFVa3NWMEZCVnl4TlFVRk5MRlZCUVU0c1EwRkJhVUlzUzBGQmFrSXNRMEZCWmp0QlFVTkJMRmxCUVVrc1UwRkJVeXhSUVVGVUxFdEJRWE5DTEU5QlFURkNMRVZCUVcxRE8wRkJRMnBETEdsQ1FVRlBMRkZCUVZBN1FVRkRSRHRCUVVOR096dEJRVVZFTEZsQlFVMHNiMEpCUVU0N1FVRkRSRHM3TzNORFFVVnBRanRCUVVOb1FpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFXRTdPMEZCUlRsQ0xHTkJRVTBzWTBGQlRpeERRVUZ4UWl4SFFVRnlRaXhEUVVGNVFpeHhRa0ZCZWtJc1JVRkJaMFFzU1VGQmFFUXNRMEZCY1VRc1ZVRkJReXhWUVVGRUxFVkJRV2RDT3p0QlFVVnVSU3hqUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4clFrRkJUU3hWUVVGT0xFZEJRVzFDTEZWQlFXNUNPMEZCUTBRN1FVRkRSRHRCUVVORUxGTkJUa1E3UVVGUFJDeFBRVlJOTEVOQlFWQTdRVUZWUkRzN08yZERRVVZYTzBGQlExWXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3haUVVGTkxGZEJRVTRzUjBGQmIwSXNTVUZCY0VJN1FVRkRSRHM3TzNsRFFVVnZRaXhWTEVWQlFWazdRVUZETDBJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmEwSXNUVUZCYkVJc1JVRkJNRUk3UVVGRE0wTXNXVUZCU1N4WFFVRlhMRmRCUVZjc1MwRkJXQ3hEUVVGcFFpeExRVUZxUWl4RFFVRm1PMEZCUTBFc1dVRkJTU3hUUVVGVExFTkJRVlFzVFVGQlowSXNVMEZCY0VJc1JVRkJLMEk3UVVGRE4wSXNaMEpCUVUwc2VVSkJRVTRzUTBGQlowTXNWVUZCYUVNc1JVRkJORU1zU1VGQk5VTXNRMEZCYVVRc1ZVRkJReXhyUWtGQlJDeEZRVUYzUWp0QlFVTjJSU3huUWtGQlNTeFZRVUZWTEUxQlFVMHNVVUZCVGl4RFFVRmxMR1ZCUVdZc1EwRkJLMElzYTBKQlFTOUNMRU5CUVdRN1FVRkRRU3huUWtGQlNTeFBRVUZLTEVWQlFXRTdPMEZCUlZnc2JVSkJRVXNzU1VGQlNTeExRVUZVTEVsQlFXdENMRTFCUVUwc1ZVRkJlRUlzUlVGQmIwTTdRVUZEYkVNc2IwSkJRVWtzVjBGQlZ5eE5RVUZOTEZWQlFVNHNRMEZCYVVJc1MwRkJha0lzUTBGQlpqdEJRVU5CTEc5Q1FVRkpMRk5CUVZNc1VVRkJWQ3hMUVVGelFpeFBRVUV4UWl4RlFVRnRRenRCUVVOcVF5eDVRa0ZCVHl4UlFVRlJMRk5CUVZNc1YwRkJha0lzUTBGQlVEdEJRVU5FTzBGQlEwWTdRVUZEUml4aFFWSkVMRTFCVVU4N1FVRkRUQ3h4UWtGQlR5eFBRVUZQTEhkQ1FVRlFMRU5CUVZBN1FVRkRSRHRCUVVOR0xGZEJZa1E3UVVGalJDeFRRV1pFTEUxQlpVODdRVUZEVEN4alFVRkpMRlZCUVZVc1RVRkJUU3hSUVVGT0xFTkJRV1VzWlVGQlppeERRVUVyUWl4VlFVRXZRaXhEUVVGa08wRkJRMEVzWTBGQlNTeFBRVUZLTEVWQlFXRTdPMEZCUlZnc2FVSkJRVXNzU1VGQlNTeExRVUZVTEVsQlFXdENMRTFCUVUwc1ZVRkJlRUlzUlVGQmIwTTdRVUZEYkVNc2EwSkJRVWtzVjBGQlZ5eE5RVUZOTEZWQlFVNHNRMEZCYVVJc1MwRkJha0lzUTBGQlpqdEJRVU5CTEd0Q1FVRkpMRk5CUVZNc1VVRkJWQ3hMUVVGelFpeFBRVUV4UWl4RlFVRnRRenRCUVVOcVF5eDFRa0ZCVHl4UlFVRlJMRk5CUVZNc1YwRkJha0lzUTBGQlVEdEJRVU5FTzBGQlEwWTdRVUZEUml4WFFWSkVMRTFCVVU4N1FVRkRUQ3h0UWtGQlR5eFBRVUZQTEhkQ1FVRlFMRU5CUVZBN1FVRkRSRHRCUVVOR08wRkJRMFlzVDBFdlFrMHNRMEZCVUR0QlFXZERSRHM3T3pSRFFVVjFRanRCUVVOMFFpeFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc1lVRkJZU3hOUVVGTkxGVkJRWFpDTzBGQlEwRXNWVUZCU1N4UFFVRlBMRU5CUVVNc1dVRkJSQ3hGUVVGbExHVkJRV1lzUlVGQlowTXNWMEZCYUVNc1EwRkJXRHM3UVVGRlFTeGhRVUZQTEVWQlFVTXNXVUZCV1N4VlFVRmlMRVZCUVhsQ0xFMUJRVTBzU1VGQkwwSXNSVUZCVUR0QlFVTkVPenRCUVVWRU96czdPenM3T3pzN1owTkJUVmtzVnl4RlFVRmhPMEZCUTNaQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4UlFVRlJMRVZCUVZvN08wRkJSVUU3UVVGRFFTeFZRVUZKTEZsQlFXRXNWMEZCUkN4blEwRkJjME1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZCUXl4bFFVRlBMRXRCUVZBN1FVRkJZeXhQUVVGb1JqczdRVUZGUVN4WFFVRkxMRWxCUVVrc1MwRkJWQ3hKUVVGclFpeE5RVUZOTEZWQlFYaENMRVZCUVc5RE8wRkJRMnhETEZsQlFVa3NWMEZCVnl4TlFVRk5MRlZCUVU0c1EwRkJhVUlzUzBGQmFrSXNRMEZCWmp0QlFVTkJMR05CUVUwc1NVRkJUaXhEUVVGWExGVkJRVlVzVTBGQlV5eFJRVUZ1UWl4RFFVRllPMEZCUTBRN1FVRkRSQ3hoUVVGUExFdEJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenQ1UTBGSmNVSTdRVUZEYmtJc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeGhRVUZQTEUxQlFVMHNaVUZCWWp0QlFVTkVPenRCUVVWRU96czdPenM3TzNWRFFVbHRRaXhSTEVWQlFWVTdRVUZETTBJc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeFpRVUZOTEdWQlFVNHNSMEZCZDBJc1VVRkJlRUk3UVVGRFJEczdRVUZGUkRzN096czdPenR0UTBGSlpTeE5MRVZCUVZFN1FVRkRja0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hWUVVGVkxEWkNRVUZwUWl4TlFVRnFRaXhEUVVGa096dEJRVVZCTEZkQlFVc3NTVUZCU1N4UlFVRlVMRWxCUVhGQ0xFMUJRVTBzVlVGQk0wSXNSVUZCZFVNN1FVRkRja01zV1VGQlNTeE5RVUZOTEZWQlFVNHNRMEZCYVVJc1VVRkJha0lzUlVGQk1rSXNVVUZCTTBJc1MwRkJkME1zVDBGQk5VTXNSVUZCY1VRN1FVRkRia1FzWjBKQlFVMHNWVUZCVGl4RFFVRnBRaXhOUVVGcVFpeERRVUYzUWl4UlFVRjRRaXhGUVVGclF5eERRVUZzUXp0QlFVTkVPMEZCUTBZN1FVRkRSanM3UVVGRlJEczdPenM3T3p0MVEwRkpiVUlzU3l4RlFVRlBPMEZCUTNoQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRmRCUVVzc1NVRkJTU3hEUVVGVUxFbEJRV01zVFVGQlRTeFZRVUZ3UWl4RlFVRm5RenRCUVVNNVFpeFpRVUZKTEUxQlFVMHNWVUZCVGl4RFFVRnBRaXhEUVVGcVFpeE5RVUYzUWl4TFFVRTFRaXhGUVVGdFF6dEJRVU5xUXl4blFrRkJUU3hWUVVGT0xFTkJRV2xDTEUxQlFXcENMRU5CUVhkQ0xFTkJRWGhDTEVWQlFUSkNMRU5CUVROQ08wRkJRMFE3UVVGRFJqdEJRVU5HT3p0QlFVVkVPenM3T3pzN08yMURRVWxsTEZNc1JVRkJWenRCUVVONFFpeFZRVUZKTEVOQlFVTXNVMEZCVEN4RlFVRm5RanRCUVVOa0xHVkJRVThzZVVKQlFWQTdRVUZEUkN4UFFVWkVMRTFCUlU4N1FVRkRUQ3hsUVVGUExHdENRVUZyUWl4VFFVRjZRanRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdlVU5CVDNGQ0xGVXNSVUZCV1N4SkxFVkJRVTA3UVVGRGNrTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN08wRkJSVEZETzBGQlEwRXNXVUZCU1N4TlFVRk5MRmRCUVU0c1MwRkJjMElzUzBGQk1VSXNSVUZCYVVNN08wRkJSUzlDTEdOQlFVa3NWVUZCVlN4elFrRkJXU3hOUVVGTkxFOUJRV3hDTEVWQlFUSkNMRTFCUVUwc1YwRkJha01zUTBGQlpEdEJRVU5CTEdkQ1FVRk5MRTlCUVU0c1IwRkJaMElzVDBGQmFFSTdRVUZEUVN4blFrRkJUU3hYUVVGT0xFZEJRVzlDTEVsQlFYQkNPMEZCUTBRN08wRkJSVVFzV1VGQlNTeFZRVUZWTEVWQlFVTXNUVUZCU3l4UlFVRk9MRVZCUVdkQ0xFbEJRVWtzVFVGQlRTeFBRVUV4UWl4RlFVRnRReXhOUVVGTkxFMUJRVTBzVDBGQkwwTTdRVUZEUVN4blFrRkJUU3hGUVVGRExFOUJRVThzUlVGQlF5eFpRVUZaTEZWQlFXSXNSVUZCZVVJc1RVRkJUU3hKUVVFdlFpeEZRVUZTTEVWQlJFNHNSVUZCWkRzN1FVRkhRU3haUVVGSkxFdEJRVXNzVFVGQlRTeFhRVUZPTEVOQlFXdENMRmRCUVd4Q0xFTkJRVGhDTEU5QlFUbENMRU5CUVZRN08wRkJSVUU3UVVGRFFTeGpRVUZOTEZkQlFVNHNRMEZCYTBJc2JVSkJRV3hDTEVOQlFYTkRMRTFCUVUwc1QwRkJOVU1zUlVGQmNVUXNSVUZCY2tRc1JVRkJlVVFzWlVGQlR6dEJRVU01UkN4blFrRkJUU3hYUVVGT0xFTkJRV3RDTEhOQ1FVRnNRaXhEUVVGNVF5eE5RVUZOTEU5QlFTOURMRVZCUVhkRUxFVkJRWGhFT3p0QlFVVkJMR05CUVVrc1NVRkJTU3hKUVVGS0xFTkJRVk1zU1VGQlZDeExRVUZyUWl4SFFVRjBRaXhGUVVFeVFqdEJRVU42UWl4blFrRkJTU3h0UWtGQmJVSXNTVUZCU1N4SlFVRXpRanM3UVVGRlFTeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc2IwSkJRVm9zUlVGQmEwTXNhVUpCUVdsQ0xFdEJRVzVFTzBGQlEwRXNiMEpCUVZFc1owSkJRVkk3UVVGRFJDeFhRVXhFTEUxQlMwODdRVUZEVEN4dFFrRkJUeXcwUTBGQlVEdEJRVU5FTzBGQlEwWXNVMEZZUkR0QlFWbEVMRTlCTlVKTkxFTkJRVkE3UVVFMlFrUTdPenM0UWtGRlV5eFhMRVZCUVdFN08wRkJSWEpDTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU1zV1VGQlNTeE5RVUZOTEU5QlFVOHNTVUZCVUN4RFFVRlpMRmRCUVZvc1JVRkJlVUlzWlVGQmVrSXNSVUZCTUVNc2RVSkJRVEZETEVOQlFWWTdRVUZEUVN4WlFVRkpMRTlCUVU4c1QwRkJXQ3hGUVVGdlFqdEJRVU5zUWl4alFVRkpMR2RDUVVGS0xFTkJRWEZDTEZkQlFYSkNMRVZCUVd0RExGVkJRVk1zUTBGQlZDeEZRVUZaTzBGQlF6VkRMR2RDUVVGSkxFMUJRVTBzUlVGQlJTeEhRVUZhTzBGQlEwRXNaMEpCUVVrc1QwRkJUeXhsUVVGbExFbEJRV1lzUTBGQmIwSXNSMEZCY0VJc1EwRkJXRHRCUVVOQkxHZENRVUZKTEZGQlFWRXNaMEpCUVdkQ0xFbEJRV2hDTEVOQlFYRkNMRWRCUVhKQ0xFTkJRVm83TzBGQlJVRXNaMEpCUVVrc1VVRkJVU3hMUVVGYUxFVkJRVzFDTzBGQlEycENMR3RDUVVGSkxFdEJRVW83UVVGRFFTeHpRa0ZCVVN4SFFVRlNPMEZCUTBRN1FVRkRSaXhYUVZSRU8wRkJWVVFzVTBGWVJDeE5RVmRQTzBGQlFVRTdRVUZEVEN4blFrRkJTU3haUVVGWkxGbEJRVmtzV1VGQlZ6dEJRVU55UXl4clFrRkJTVHRCUVVOR0xHOUNRVUZKTEVsQlFVa3NUVUZCVWl4RlFVRm5RanRCUVVOa0xIbENRVUZQTEdsRVFVRlFPMEZCUTBFc1owTkJRV01zVTBGQlpEdEJRVU5FT3p0QlFVVkVMRzlDUVVGSkxFbEJRVWtzVVVGQlNpeERRVUZoTEVkQlFXSXNRMEZCYVVJc1QwRkJha0lzUTBGQmVVSXNWVUZCZWtJc1RVRkJlVU1zUTBGQlF5eERRVUV4UXl4SlFVRXJReXhKUVVGSkxGRkJRVW9zUTBGQllTeEhRVUZpTEVOQlFXbENMRTlCUVdwQ0xFTkJRWGxDTEZOQlFWTXNUVUZCYkVNc1RVRkJPRU1zUTBGQlF5eERRVUZzUnl4RlFVRnhSenRCUVVOdVJ5eDVRa0ZCVHl4aFFVRlFMRU5CUVhGQ0xGTkJRWEpDTzBGQlEwRXNjMEpCUVVrc1RVRkJVU3hKUVVGSkxGRkJRVW9zUTBGQllTeEhRVUY2UWpzN1FVRkZRU3h6UWtGQlNTeExRVUZLTzBGQlEwRXNNRUpCUVZFc1IwRkJVanRCUVVORU8wRkJRMFlzWlVGaVJDeERRV0ZGTEU5QlFVOHNRMEZCVUN4RlFVRlZPMEZCUTFZN1FVRkRSRHRCUVVOR0xHRkJha0psTEVWQmFVSmlMRWRCYWtKaExFTkJRV2hDTzBGQlJFczdRVUZ0UWs0N1FVRkRSaXhQUVd4RFRTeERRVUZRTzBGQmJVTkVPenRCUVVWRU96czdPenM3T3p0NVEwRkxjVUlzVlN4RlFVRlpMRTBzUlVGQlVTeFpMRVZCUVdNc1V5eEZRVUZYTzBGQlEyaEZMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV2xDTEUxQlFXcENMRVZCUVhsQ096dEJRVVV4UXp0QlFVTkJPenRCUVVWQkxHTkJRVTBzYlVKQlFVNHNRMEZCTUVJc1YwRkJNVUlzUTBGQmMwTXNVMEZCZEVNc1JVRkJhVVFzU1VGQmFrUXNRMEZCYzBRc1ZVRkJReXhOUVVGRUxFVkJRVms3UVVGRGFFVXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxIVkRRVUZhTEVWQlFYRkVMRTFCUVhKRU96dEJRVVZCTEdOQlFVa3NRMEZCUXl4TlFVRk1MRVZCUVdFN08wRkJSV0lzWTBGQlNTeHBRa0ZCYVVJc1RVRkJUU3h4UWtGQlRpeEZRVUZ5UWpzN1FVRkZRU3huUWtGQlRTeHZRa0ZCVGl4RFFVRXlRaXhsUVVGbExGVkJRVEZETEVWQlFYTkVMR1ZCUVdVc1NVRkJja1VzUlVGQk1rVXNTVUZCTTBVc1EwRkJaMFlzYVVKQlFWTTdPMEZCUlhaR0xHZENRVUZKTEUxQlFVMHNTVUZCVGl4TFFVRmxMRlZCUVc1Q0xFVkJRU3RDT3p0QlFVVTNRaXhyUWtGQlNTeFhRVUZYTEdkRFFVRnZRaXhOUVVGTkxFdEJRVEZDTEVOQlFXWTdPMEZCUlVFN1FVRkRRU3h0UWtGQlN5eEpRVUZKTEVOQlFWUXNTVUZCWXl4TlFVRk5MRlZCUVhCQ0xFVkJRV2RETzBGQlF6bENMRzlDUVVGSkxFMUJRVTBzVlVGQlRpeERRVUZwUWl4RFFVRnFRaXhGUVVGdlFpeFJRVUZ3UWl4TFFVRnBReXhSUVVGeVF5eEZRVUVyUXp0QlFVTTNReXg1UWtGQlR5eFJRVUZSTEUxQlFVMHNWVUZCVGl4RFFVRnBRaXhEUVVGcVFpeEZRVUZ2UWl4WFFVRTFRaXhEUVVGUU8wRkJRMFE3UVVGRFJqdEJRVU5FTEhGQ1FVRlBMSGxDUVVGUU8wRkJRMFFzWVVGWVJDeE5RVmRQTEVsQlFVa3NUVUZCVFN4SlFVRk9MRXRCUVdVc1MwRkJia0lzUlVGQk1FSTdPMEZCUlM5Q0xHOUNRVUZOTEcxQ1FVRk9MRU5CUVRCQ0xFMUJRVTBzUzBGQmFFTXNSVUZCZFVNc1RVRkJka01zUlVGQkswTXNTVUZCTDBNc1EwRkJiMFFzVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZETjBRc2QwSkJRVkVzUzBGQlVqdEJRVU5FTEdWQlJrUXNSVUZGUnl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVOV0xIVkNRVUZQTEVkQlFWQTdRVUZEUkN4bFFVcEVPMEZCVFVRc1lVRlNUU3hOUVZGQk8wRkJRMHdzY1VKQlFVOHNaME5CUVZBN1FVRkRSRHRCUVVOR0xGZEJlRUpFTzBGQmVVSkVMRk5CYUVORUxFVkJaME5ITEV0QmFFTklMRU5CWjBOVExHbENRVUZUTzBGQlEyaENMR3RDUVVGUkxFZEJRVklzUTBGQldTeG5RMEZCV2l4RlFVRTRReXhMUVVFNVF6dEJRVU5CTEdsQ1FVRlBMRXRCUVZBN1FVRkRSQ3hUUVc1RFJEczdRVUZ4UTBFc1kwRkJUU3h0UWtGQlRpeERRVUV3UWl4WFFVRXhRaXhEUVVGelF5eE5RVUYwUXl4RlFVRTRReXhKUVVFNVF5eERRVUZ0UkN4VlFVRkRMRTFCUVVRc1JVRkJXVHRCUVVNM1JDeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc05FSkJRVm9zUlVGQk1FTXNUVUZCTVVNN08wRkJSVUVzWTBGQlNTeERRVUZETEUxQlFVd3NSVUZCWVRzN1FVRkZZaXhqUVVGSkxFMUJRVTBzWlVGQlRpeExRVUV3UWl4VFFVRTVRaXhGUVVGNVF6dEJRVU4yUXp0QlFVTkJPMEZCUTBFc2JVSkJRVThzVVVGQlVTeE5RVUZOTEdWQlFXUXNRMEZCVUR0QlFVTkVMRmRCU2tRc1RVRkpUenRCUVVGQk8wRkJRMHdzYzBKQlFWRXNSMEZCVWl4RFFVRlpMR2xEUVVGYU8wRkJRMEVzYTBKQlFVa3NaVUZCWlN4TFFVRkxMRXRCUVV3c1EwRkJXU3hMUVVGTExFMUJRVXdzUzBGQlowSXNTMEZCYWtJc1IwRkJNRUlzUTBGQmNrTXNRMEZCYmtJN1FVRkRRU3hyUWtGQlNTeHBRa0ZCYVVJN1FVRkRia0lzTWtKQlFWY3NWMEZFVVR0QlFVVnVRaXh4UWtGQlNTeFJRVVpsTzBGQlIyNUNMRFpDUVVGaE8wRkJRMWdzTUVKQlFWRXNPRVpCUkVjN1FVRkZXQ3h6UWtGQlNTeGhRVVpQTzBGQlIxZ3NORUpCUVZVc1dVRkJXU3haUVVGYUxFZEJRVEpDTEdGQlNERkNPMEZCU1Znc01rSkJRVk1zT0VKQlFUaENPMEZCU2pWQ0xHbENRVWhOTEVWQlFYSkNPMEZCVTBFc2IwSkJRVTBzWlVGQlRpeEhRVUYzUWl4alFVRjRRanRCUVVOQkxHOUNRVUZOTEZWQlFVNHNRMEZCYVVJc1NVRkJha0lzUTBGQmMwSXNZMEZCZEVJN1FVRkRRU3h2UWtGQlRTeGpRVUZPTEVOQlFYRkNMRWRCUVhKQ0xFTkJRWGxDTEhGQ1FVRjZRaXhGUVVGblJDeERRVUZvUkN4RlFVRnRSQ3hOUVVGTkxGVkJRWHBFTEVWQlFYRkZMRWxCUVhKRkxFTkJRVEJGTEZsQlFVMDdPMEZCUlRsRkxIVkNRVUZQTEZGQlFWRXNZMEZCVWl4RFFVRlFPMEZCUTBRc1pVRklSRHRCUVdSTE8wRkJhMEpPTzBGQlJVWXNVMEUzUWtRc1JVRTJRa2NzUzBFM1FrZ3NRMEUyUWxNc2FVSkJRVk03UVVGRGFFSXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxHZERRVUZhTEVWQlFUaERMRXRCUVRsRE8wRkJRMEVzYVVKQlFVOHNTMEZCVUR0QlFVTkVMRk5CYUVORU8wRkJhVU5FTEU5Qk0wVk5MRU5CUVZBN1FVRTBSVVE3T3p0M1EwRkZiVUlzUnl4RlFVRkxMRTBzUlVGQlVUdEJRVU12UWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVVNc1QwRkJSQ3hGUVVGVkxFMUJRVllzUlVGQmNVSTdPMEZCUlhSRExGbEJRVWtzYTBKQlFVbzdRVUZEUVN4WlFVRkpMRzlDUVVGS096dEJRVVZCTzBGQlEwRXNZMEZCVFN4TlFVRk9MRU5CUVdFc2EwSkJRV0lzUjBGQmEwTXNTVUZCYkVNc1EwRkJkVU1zVlVGQlV5eFBRVUZVTEVWQlFXdENPenRCUVVWMlJDeHpRa0ZCV1N4TFFVRkxMRkZCUVZFc1RVRkJZaXhEUVVGYU8wRkJRMEVzZDBKQlFXTXNUMEZCWkR0QlFVTkJMR2xDUVVGUExFMUJRVTBzYVVKQlFVNHNRMEZCZDBJc1UwRkJlRUlzUlVGQmJVTXNUVUZCYmtNc1JVRkJNa01zUlVGQk0wTXNSVUZCSzBNc1YwRkJMME1zUlVGQk5FUXNSMEZCTlVRc1EwRkJVRHRCUVVWRUxGTkJUa1FzUlVGTlJ5eEpRVTVJTEVOQlRWRXNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRjRUlzYVVKQlFVOHNUVUZCVFN4cFFrRkJUaXhEUVVGM1FpeFRRVUY0UWl4RlFVRnRReXhOUVVGdVF5eEZRVUV5UXl4SFFVRXpReXhGUVVGblJDeFhRVUZvUkN4RlFVRTJSQ3hIUVVFM1JDeERRVUZRTzBGQlJVUXNVMEZVUkN4RlFWTkhMRWxCVkVnc1EwRlRVU3hWUVVGVExFdEJRVlFzUlVGQlowSTdRVUZEZEVJc1kwRkJTU3hMUVVGS0xFVkJRVmM3UVVGRFZDeHZRa0ZCVVN4TFFVRlNPMEZCUTBRc1YwRkdSQ3hOUVVWUE8wRkJRMHdzYlVKQlFVOHNOa0pCUVZBN1FVRkRSRHRCUVVOR0xGTkJaa1FzUlVGbFJ5eExRV1pJTEVOQlpWTXNWVUZCVXl4SFFVRlVMRVZCUVdNN1FVRkRja0lzYTBKQlFWRXNSMEZCVWl4RFFVRlpMRWRCUVZvN1FVRkRRU3hwUWtGQlR5eEhRVUZRTzBGQlEwUXNVMEZzUWtRN1FVRnRRa1FzVDBGNlFrMHNRMEZCVUR0QlFUQkNSRHM3TzNkRFFVVnRRaXhSTEVWQlFWVXNUU3hGUVVGUkxGa3NSVUZCWXl4VExFVkJRVmM3UVVGRE4wUXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkxGTkJRVk1zVFVGQlRTeGpRVUZPTEVOQlFYRkNMRk5CUVhKQ0xFTkJRV0k3UVVGRFFTeFZRVUZKTEdkQ1FVRktPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqdEJRVU4wUXl4clFrRkJWU3hGUVVGRExFMUJRVXNzVTBGQlRpeEZRVUZwUWl4SlFVRkpMRTFCUVhKQ0xFVkJRVFpDTEUxQlFVMHNUVUZCVFN4UFFVRjZReXhGUVVGclJDeE5RVUZOTEVWQlFVTXNWVUZCVlN4VlFVRllMRVZCUVhWQ0xGRkJRVkVzYlVKQlFTOUNMRVZCUVc5RUxGRkJRVkVzUlVGQlF5eFZRVUZWTEZGQlFWZ3NSVUZCY1VJc1VVRkJVU3hOUVVFM1FpeEZRVUZ4UXl4alFVRmpMRmxCUVc1RUxFVkJRVFZFTEVWQlFYaEVMRVZCUVZZN1FVRkRRU3hqUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzVDBGQk9VSXNSVUZCZFVNc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRE9VTXNZMEZCU1N4VFFVRlRMRWxCUVVrc1NVRkJTaXhEUVVGVExFdEJRWFJDT3p0QlFVVkJMR3RDUVVGUkxFMUJRVkk3UVVGRlJDeFRRVXhFTzBGQlRVUXNUMEZTVFN4RFFVRlFPMEZCVTBRN096dHJRMEZGWVN4TkxFVkJRVkVzVHl4RlFVRlRPMEZCUXpkQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanM3UVVGRmRFTXNXVUZCU1N4dFFrRkJiVUlzVDBGQlR5eFRRVUZRTEVOQlFXbENMRXRCUVdwQ0xFTkJRWFZDTEVkQlFYWkNMRU5CUVhaQ08wRkJRMEVzV1VGQlNTeDNRa0ZCU2pzN1FVRkZRVHRCUVVOQkxGbEJRVWtzYVVKQlFXbENMRU5CUVdwQ0xFTkJRVW9zUlVGQmVVSTdRVUZEZGtJc05FSkJRV3RDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVVzc2FVSkJRV2xDTEVOQlFXcENMRU5CUVV3c1EwRkJXQ3hEUVVGc1FqdEJRVU5FTEZOQlJrUXNUVUZGVHpzN1FVRkZUQ3cwUWtGQmEwSXNTMEZCU3l4TFFVRk1MRU5CUVZjc1MwRkJTeXhQUVVGUExGTkJRVm9zUTBGQldDeERRVUZzUWp0QlFVTkVPMEZCUTBRc1dVRkJTU3huUWtGQlNqczdRVUZGUVR0QlFVTkJMRmxCUVVrc1owSkJRV2RDTEZkQlFYQkNMRVZCUVdsRE8wRkJReTlDTEc5Q1FVRlZMR2RDUVVGblFpeFhRVUV4UWp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxHOUNRVUZWTEdWQlFWWTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxGRkJRVkVzVVVGQlVTeExRVUZTTEVsQlFXbENMRkZCUVZFc1IwRkJja003TzBGQlJVRXNXVUZCU1N4aFFVRmhMR2REUVVGdlFpeExRVUZ3UWl4RFFVRnFRanM3UVVGRlFTeGxRVUZQTEZGQlFWQXNSMEZCYTBJc1ZVRkJiRUk3TzBGQlJVRXNZMEZCVFN4UlFVRk9MRU5CUVdVc1YwRkJaaXhEUVVFeVFpeE5RVUV6UWpzN1FVRkZRVHRCUVVOQkxGbEJRVWtzV1VGQllTeFBRVUZQTEZOQlFWSXNSMEZCY1VJc1QwRkJUeXhUUVVFMVFpeEhRVUYzUXl4RlFVRjRSRHM3UVVGRlFTeFpRVUZKTEdGQlFXRXNVVUZCVVN4SlFVRlNMRWxCUVdkQ0xFMUJRVTBzVTBGQlRpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFpeE5RVUZOTEU5QlFVNHNRMEZCWXl4SFFVRmtMRU5CUVc1Q0xFTkJRV3BETzBGQlEwRXNXVUZCU1N4dlFrRkJiMElzUlVGQlF5eFZRVUZWTEV0QlFWZ3NSVUZCYTBJc1NVRkJTU3hWUVVGMFFpeEZRVUZyUXl4UlFVRlJMRlZCUVZVc1QwRkJjRVFzUlVGQk5rUXNVVUZCVVN4VlFVRlZMRTFCUVM5RkxFVkJRWFZHTEZOQlFWTXNWVUZCYUVjc1JVRkJlRUk3TzBGQlJVRTdRVUZEUVN4WlFVRkpMR05CUVdNc1JVRkJReXhoUVVGaExHbENRVUZrTEVWQlFXbERMRXRCUVVzc1QwRkJUeXhIUVVGUUxFTkJRVmNzVFVGQmFrUXNSVUZCZVVRc1YwRkJWeXhQUVVGUExGTkJRVE5GTEVWQlFXeENPMEZCUTBFc1pVRkJUeXhYUVVGUUxFZEJRWEZDTEZkQlFYSkNPMEZCUTBFc1pVRkJUeXhQUVVGUUxFZEJRV2xDTEU5QlFXcENPenRCUVVWQkxHTkJRVTBzWlVGQlRpeEhRVUYzUWl4WFFVRjRRanM3UVVGRlFUdEJRVU5CTEZsQlFVa3NhMEpCUVd0Q0xFdEJRWFJDTzBGQlEwRXNXVUZCU1N4alFVRktPMEZCUTBFc1lVRkJTeXhKUVVGSkxGRkJRVlFzU1VGQmNVSXNUVUZCVFN4VlFVRXpRaXhGUVVGMVF6dEJRVU55UXl4alFVRkpMRTFCUVUwc1ZVRkJUaXhEUVVGcFFpeFJRVUZxUWl4RlFVRXlRaXhSUVVFelFpeExRVUYzUXl4UFFVRlBMRkZCUVc1RUxFVkJRVFpFTzBGQlF6TkVMRGhDUVVGclFpeEpRVUZzUWp0QlFVTkJMRzlDUVVGUkxFMUJRVTBzVlVGQlRpeERRVUZwUWl4UlFVRnFRaXhGUVVFeVFpeFhRVUZ1UXp0QlFVTkVPMEZCUTBZN08wRkJSVVFzV1VGQlNTeGxRVUZLTEVWQlFYRkNPMEZCUTI1Q0xHdENRVUZSTEV0QlFWSTdRVUZEUVN4alFVRkpMRk5CUVZNc1MwRkJZanM3UVVGRlFUdEJRVU5CTzBGQlEwRXNaVUZCU3l4SlFVRkpMRU5CUVZRc1NVRkJZeXhOUVVGTkxGVkJRWEJDTEVWQlFXZERPMEZCUXpsQ0xHZENRVUZKTEUxQlFVMHNWVUZCVGl4RFFVRnBRaXhEUVVGcVFpeE5RVUYzUWl4TFFVRTFRaXhGUVVGdFF6dEJRVU5xUXl4MVFrRkJVeXhKUVVGVU8wRkJRMEU3UVVGRFJEdEJRVU5HTzBGQlEwUXNZMEZCU1N4RFFVRkRMRTFCUVV3c1JVRkJZVHRCUVVOWUxHdENRVUZOTEZWQlFVNHNRMEZCYVVJc1NVRkJha0lzUTBGQmMwSXNTMEZCZEVJN1FVRkRSRHRCUVVWR0xGTkJhRUpFTEUxQlowSlBPMEZCUTB3c1owSkJRVTBzVlVGQlRpeERRVUZwUWl4SlFVRnFRaXhEUVVGelFpeExRVUYwUWp0QlFVTkJMR2RDUVVGTkxGVkJRVTRzUTBGQmFVSXNTVUZCYWtJc1EwRkJjMElzVFVGQmRFSTdRVUZEUVN4blFrRkJUU3hqUVVGT0xFTkJRWEZDTEVkQlFYSkNMRU5CUVhsQ0xIRkNRVUY2UWl4RlFVRm5SQ3hEUVVGb1JDeEZRVUZ0UkN4TlFVRk5MRlZCUVhwRUxFVkJRWEZGTEVsQlFYSkZMRU5CUVRCRkxGbEJRVTA3TzBGQlJUbEZMRzlDUVVGUkxGZEJRVkk3UVVGRFJDeFhRVWhFTzBGQlNVUTdRVUZGUml4UFFUZEZUU3hEUVVGUU8wRkJPRVZFT3p0QlFVVkVPenM3T3pzN096czdPenM3YzBOQlUydENMRkVzUlVGQlZTeE5MRVZCUVZFc1dTeEZRVUZqTEU4c1JVRkJVeXhUTEVWQlFWYzdRVUZEY0VVc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZMEZCVVN4SFFVRlNMRU5CUVZrc2JVSkJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmFVSXNUVUZCYWtJc1JVRkJlVUk3TzBGQlJURkRMR05CUVUwc2JVSkJRVTRzUTBGQk1FSXNVVUZCTVVJc1JVRkJiME1zVFVGQmNFTXNSVUZCTkVNc1dVRkJOVU1zUlVGQk1FUXNVMEZCTVVRc1JVRkJjVVVzU1VGQmNrVXNRMEZCTUVVc1ZVRkJReXhOUVVGRUxFVkJRVms3TzBGQlJYQkdMR05CUVVrc1QwRkJUeXhSUVVGWUxFVkJRWEZDT3p0QlFVVnVRaXhyUWtGQlRTeFRRVUZPTEVOQlFXZENMRTlCUVU4c1VVRkJka0lzUlVGQmFVTXNTVUZCYWtNc1EwRkJjME1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZETDBNc2MwSkJRVkVzUzBGQlVqdEJRVU5FTEdGQlJrUXNSVUZGUnl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVOV0xIRkNRVUZQTEVkQlFWQTdRVUZEUkN4aFFVcEVPMEZCUzBRc1YwRlFSQ3hOUVU5UExFbEJRVWtzVFVGQlNpeEZRVUZaT3p0QlFVVnFRaXhyUWtGQlRTeGhRVUZPTEVOQlFXOUNMRTFCUVhCQ0xFVkJRVFJDTEU5QlFUVkNMRVZCUVhGRExFbEJRWEpETEVOQlFUQkRMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMjVFTEhOQ1FVRlJMRXRCUVZJN1FVRkRSQ3hoUVVaRUxFVkJSVWNzVlVGQlF5eEhRVUZFTEVWQlFWTTdRVUZEVml4eFFrRkJUeXhIUVVGUU8wRkJRMFFzWVVGS1JEdEJRVTFFTEZkQlVrMHNUVUZSUVR0QlFVTk1MRzFDUVVGUExIbERRVUZRTzBGQlEwUTdRVUZGUml4VFFYSkNSRHRCUVhOQ1JDeFBRWGhDVFN4RFFVRlFPMEZCZVVKRU96dEJRVVZFT3pzN08wRkJTVUU3T3pzN096czdPenM3YzBOQlQydENMRk1zUlVGQlZ5eE5MRVZCUVZFc1V5eEZRVUZYTzBGQlF6bERMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NVMEZCVXl4TlFVRk5MR05CUVU0c1EwRkJjVUlzVTBGQmNrSXNRMEZCWWpzN1FVRkZRU3hWUVVGSkxGVkJRVlVzUlVGQlF5eE5RVUZMTEZOQlFVNHNSVUZCYVVJc1NVRkJTU3hOUVVGeVFpeEZRVUUyUWl4TlFVRk5MRTFCUVUwc1QwRkJla01zUlVGQmEwUXNUVUZCVFN4RlFVRkRMRlZCUVZVc1ZVRkJXQ3hGUVVGMVFpeFJRVUZSTEcxQ1FVRXZRanRCUVVNNVJDeHJRa0ZCVVN4RlFVRkRMRmRCUVZjc1UwRkJXaXhGUVVGMVFpeFJRVUZSTEUxQlFTOUNMRVZCUkhORUxFVkJRWGhFTEVWQlFXUTdPMEZCUjBFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdRVUZETTBNc1kwRkJUU3hYUVVGT0xFTkJRV3RDTEZkQlFXeENMRU5CUVRoQ0xFOUJRVGxDTEVWQlFYVkRMRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMnBFTEdOQlFVa3NUMEZCVHl4SlFVRlFMRU5CUVZrc1NVRkJXaXhMUVVGeFFpeEhRVUY2UWl4RlFVRTRRanRCUVVNMVFpeHZRa0ZCVVN4UFFVRlBMRWxCUVZBc1EwRkJXU3hMUVVGd1FqdEJRVU5FTEZkQlJrUXNUVUZGVHp0QlFVTk1MRzFDUVVGUExFOUJRVkFzUlVGQlowSXNUMEZCVHl4SlFVRlFMRU5CUVZrc1NVRkJOVUk3UVVGRFJEdEJRVU5HTEZOQlRrUTdRVUZQUkN4UFFWSk5MRU5CUVZBN1FVRlRSRHM3TzIxRFFVVmpMRThzUlVGQlV6dEJRVU4wUWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGpRVUZSTEVkQlFWSXNRMEZCV1N4clFrRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanRCUVVNelF5eFpRVUZKTEd0Q1FVRnJRaXhSUVVGUkxFbEJRVklzUzBGQmFVSXNWMEZCZGtNN08wRkJSVUU3UVVGRFFTeFpRVUZKTEVOQlFVTXNUVUZCVFN4cFFrRkJVQ3hKUVVFMFFpeERRVUZETEdWQlFXcERMRVZCUVd0RU8wRkJRMmhFTEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3h4UWtGQldqdEJRVU5CTEdsQ1FVRlBMRkZCUVZFc1QwRkJVaXhEUVVGUU8wRkJRMFE3TzBGQlJVUTdRVUZEUVN4WlFVRkpMR1ZCUVdVc1VVRkJVU3hGUVVGU0xFTkJRVmNzUzBGQldDeERRVUZwUWl4SFFVRnFRaXhEUVVGdVFqdEJRVU5CTEZsQlFVa3NaMEpCUVdkQ0xHRkJRV0VzUTBGQllpeEpRVUZyUWl4SlFVRnNRaXhIUVVGNVFpeGhRVUZoTEVOQlFXSXNRMEZCZWtJc1IwRkJNa01zUjBGQk0wTXNSMEZCYVVRc1lVRkJZU3hEUVVGaUxFTkJRWEpGTzBGQlEwRXNXVUZCU1N4aFFVRmhMRTFCUVdJc1IwRkJjMElzUTBGQk1VSXNSVUZCTmtJN1FVRkRNMElzTUVKQlFXZENMR0ZCUVdFc1EwRkJZaXhKUVVGclFpeEpRVUZzUWl4SFFVRjVRaXhoUVVGaExFTkJRV0lzUTBGQmVrSXNSMEZCTWtNc1IwRkJNME1zUjBGQmFVUXNZVUZCWVN4RFFVRmlMRU5CUVdwRUxFZEJRVzFGTEVkQlFXNUZMRWRCUVhsRkxHRkJRV0VzUTBGQllpeERRVUY2Ump0QlFVTkVPenRCUVVWRUxGbEJRVWtzYVVKQlFXbENMRFJDUVVGblFpeGhRVUZvUWl4RFFVRnlRanRCUVVOQkxGbEJRVWtzWjBKQlFXZENMSE5DUVVGVkxGRkJRVkVzU1VGQmJFSXNSVUZCZDBJc1NVRkJlRUlzUzBGQmFVTXNVMEZCY2tRN1FVRkRRU3haUVVGSkxHTkJRV01zYzBKQlFWVXNVVUZCVVN4RlFVRnNRaXhGUVVGelFpeEpRVUYwUWl4TFFVRXJRaXhUUVVGcVJEczdRVUZGUVN4WlFVRkpMRkZCUVZFc1NVRkJVaXhMUVVGcFFpeFJRVUZ5UWl4RlFVRXJRanRCUVVNM1FpeHJRa0ZCVVN4UFFVRlNPMEZCUTBRN08wRkJSVVFzV1VGQlNTeHBRa0ZCYVVJc1YwRkJja0lzUlVGQmEwTTdRVUZEYUVNc1kwRkJTU3hWUVVGVkxFMUJRVTBzVTBGQlRpeERRVUZuUWl4bFFVRm9RaXhEUVVGblF5eFJRVUZSTEVsQlFYaERMRU5CUVdRN1FVRkRRU3hqUVVGSkxFOUJRVW9zUlVGQllUdEJRVUZCT3p0QlFVVllPMEZCUTBFc2EwSkJRVWtzVjBGQlZ5eE5RVUZOTEZGQlFVNHNRMEZCWlN4UlFVRlJMRWxCUVZJc1IwRkJaU3hMUVVGbUxFZEJRWFZDTEZGQlFWRXNSVUZCT1VNc1EwRkJaanRCUVVOQkxHdENRVUZKTEVOQlFVTXNVVUZCVEN4RlFVRmxPMEZCUTJJc01rSkJRVmNzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRTlCUVhKQ0xFVkJRVGhDTEU5QlFUbENMRU5CUVZnN1FVRkRRU3gzUWtGQlVTeEhRVUZTTEVOQlFWa3NkVUpCUVZvc1JVRkJjVU1zVVVGQlVTeEpRVUZTTEVkQlFXVXNVVUZCVVN4RlFVRTFSRHRCUVVOQkxITkNRVUZOTEZGQlFVNHNRMEZCWlN4UlFVRlJMRWxCUVZJc1IwRkJaU3hMUVVGbUxFZEJRWFZDTEZGQlFWRXNSVUZCT1VNc1NVRkJiMFFzVVVGQmNFUTdRVUZEUVN4M1FrRkJVU3hKUVVGU0xFTkJRV0VzWTBGQllpeEhRVUU0UWl4blFrRkJPVUk3UVVGRFJEczdRVUZGUkN4clFrRkJTU3hUUVVGVExHRkJRVlFzU1VGQk1FSXNRMEZCUXl4bFFVRXZRaXhGUVVGblJEdEJRVUZCT3p0QlFVVTVReXh6UWtGQlNTeExRVUZMTEUxQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1JVRkJWRHRCUVVOQkxIZENRVUZOTEUxQlFVNHNRMEZCWVN4VlFVRmlMRU5CUVhkQ0xGTkJRVk1zU1VGQlZDeERRVUZqTEhGQ1FVRjBReXhGUVVFMlJDeFJRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRXhSU3hGUVVGcFJpeEZRVUZxUml4RlFVRnhSaXhKUVVGeVJpeERRVUV3Uml3d1FrRkJhMEk3TzBGQlJURkhMSGRDUVVGSkxHdENRVUZyUWl4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEU5QlFUTkNMRVZCUVc5RExGRkJRVkVzU1VGQlVpeERRVUZoTEV0QlFXSXNSMEZCY1VJc1JVRkJla1FzUlVGQk5rUXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGZEJRV3hHTEVOQlFYUkNPenRCUVVWQkxEQkNRVUZOTEUxQlFVNHNRMEZCWVN4UlFVRmlMRU5CUVhOQ0xGTkJRVk1zU1VGQlZDeERRVUZqTEd0Q1FVRndReXhGUVVGM1JDeGxRVUY0UkN4RlFVRjVSU3hKUVVGNlJTeERRVUU0UlN4blFrRkJVVHRCUVVOd1JqdEJRVU5CTERCQ1FVRkpMRkZCUVZFc1JVRkJReXhKUVVGSkxFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1JVRkJjRUlzUTBGQlRDeEZRVUU0UWl4UFFVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNZMEZCY0VJc1EwRkJja01zUlVGQk1FVXNUVUZCVFN4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEVsQlFYQkNMRU5CUVdoR0xFVkJRVm83UVVGRFFTdzRRa0ZCVVN4SlFVRlNMRU5CUVdFc1MwRkJZaXhIUVVGeFFpeDVRa0ZCWlN4TFFVRm1MRU5CUVhKQ096dEJRVVZCTERoQ1FVRlJMRTlCUVZJN1FVRkRSQ3h4UWtGT1JEdEJRVTlFTEcxQ1FWaEVPenRCUVdGQk8wRkJhRUk0UXp0QlFXbENMME1zWlVGcVFrUXNUVUZwUWs4c1NVRkJTU3hsUVVGS0xFVkJRWEZDTzBGQlF6RkNMSGRDUVVGUkxFOUJRVkk3TzBGQlJVRTdRVUZEUkN4bFFVcE5MRTFCU1VFN1FVRkRUQ3h6UWtGQlRTeHBRa0ZCVGl4RFFVRjNRaXhQUVVGNFFpeEZRVUZwUXl4UlFVRnFReXhGUVVFeVF5eEpRVUV6UXl4RFFVRm5SQ3hWUVVGVExFdEJRVlFzUlVGQlowSTdRVUZET1VRc2QwSkJRVTBzVVVGQlRpeERRVUZsTEZGQlFWRXNTVUZCVWl4SFFVRmxMRXRCUVdZc1IwRkJkVUlzVVVGQlVTeEZRVUU1UXl4SlFVRnZSQ3hOUVVGTkxGRkJRVEZFT3p0QlFVVkJMSGRDUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzVFVGQlRTeFBRVUZ3UXp0QlFVTkJMSGxDUVVGUExHMURRVUZRTzBGQlEwUXNhVUpCVEVRN1FVRk5SRHRCUVhaRFZUdEJRWGREV2pzN1FVRkZTRHRCUVVORExGTkJOME5FTEUxQk5rTlBMRWxCUVVrc2FVSkJRV2xDTEdOQlFYSkNMRVZCUVhGRE8wRkJRVUU3UVVGRE1VTXNiMEpCUVZFc1IwRkJVaXhEUVVGWkxDdENRVUZhTEVWQlFUWkRMRkZCUVZFc1NVRkJVaXhEUVVGaExFdEJRVEZFT3p0QlFVVkJMR2RDUVVGSkxHZENRVUZuUWl4TlFVRk5MSEZDUVVGT0xFTkJRVFJDTEdGQlFUVkNMRU5CUVhCQ096dEJRVVZCTzBGQlEwRXNaMEpCUVVrc1EwRkJReXhoUVVGTUxFVkJRVzlDTzBGQlEyeENMR3RDUVVGSkxHOUNRVUZ2UWl4TlFVRk5MRkZCUVU0c1EwRkJaU3gzUWtGQlppeERRVUYzUXl4aFFVRjRReXhEUVVGNFFqczdRVUZGUVR0QlFVTkJMR3RDUVVGSkxIRkNRVUZ4UWl4elFrRkJjMElzVVVGQlVTeEpRVUYyUkN4RlFVRTJSRHM3UVVGRk0wUXNiMEpCUVVrc1lVRkJZU3hOUVVGTkxFMUJRVTRzUTBGQllTeGpRVUZpTEVWQlFXcENPMEZCUTBFc2MwSkJRVTBzY1VKQlFVNHNRMEZCTkVJc1lVRkJOVUlzU1VGQk5rTXNSVUZCUXl4WlFVRlpMRlZCUVdJc1JVRkJlVUlzWVVGQllTeEpRVUYwUXl4RlFVRTNRenM3UVVGRlFTeG5RMEZCWjBJc1RVRkJUU3h4UWtGQlRpeERRVUUwUWl4aFFVRTFRaXhEUVVGb1FqdEJRVU5FTzBGQlEwWTdPMEZCUlVRN1FVRkRRU3huUWtGQlNTeGhRVUZLTEVWQlFXMUNPenRCUVVWcVFqdEJRVU5CTEd0Q1FVRkpMR05CUVdNc1YwRkJiRUlzUlVGQkswSTdRVUZCUVR0QlFVTTNRaXh6UWtGQlNTeExRVUZMTEUxQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1JVRkJWRHM3UVVGRlFTeDNRa0ZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhEUVVGM1FpeGpRVUZqTEZWQlFYUkRMRVZCUVd0RUxFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc2VVSkJRV1VzVVVGQlVTeEpRVUZTTEVOQlFXRXNTMEZCTlVJc1EwRkJjRUlzUTBGQmJFUXNSVUZCTWtjc1JVRkJNMGNzUlVGQkswY3NTVUZCTDBjc1EwRkJiMGdzTUVKQlFXdENPenRCUVVWd1NTeDNRa0ZCU1N4clFrRkJhMElzVFVGQlRTeHZRa0ZCVGl4RFFVRXlRaXhQUVVFelFpeEZRVUZ2UXl4UlFVRlJMRWxCUVZJc1EwRkJZU3hMUVVGaUxFZEJRWEZDTEVWQlFYcEVMRVZCUVRaRUxHTkJRV01zVlVGQk0wVXNRMEZCZEVJN08wRkJSVUVzTUVKQlFVMHNUVUZCVGl4RFFVRmhMRkZCUVdJc1EwRkJjMElzWTBGQll5eFZRVUZ3UXl4RlFVRm5SQ3hsUVVGb1JDeEZRVUZwUlN4SlFVRnFSU3hEUVVGelJTeG5Ra0ZCVVR0QlFVTTFSVHM3UVVGRlFTd3dRa0ZCU1N4WFFVRlhMRVZCUVVNc1QwRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMR05CUVhCQ0xFTkJRVklzUlVGQk5rTXNTVUZCU1N4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEVWQlFYQkNMRU5CUVdwRUxFVkJRVEJGTEUxQlFVMHNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeEpRVUZ3UWl4RFFVRm9SaXhGUVVGbU96dEJRVVZCTERoQ1FVRlJMRWxCUVZJc1EwRkJZU3hMUVVGaUxFZEJRWEZDTEhsQ1FVRmxMRkZCUVdZc1EwRkJja0k3UVVGRFFTdzRRa0ZCVVN4UFFVRlNPMEZCUTBRc2NVSkJVRVE3UVVGUlJDeHRRa0ZhUkRzN1FVRmpSanRCUVdwQ0swSTdRVUZyUWpsQ0xHVkJiRUpFTEUxQmEwSlBPMEZCUTB3c2QwSkJRVkVzVDBGQlVqdEJRVU5FT3p0QlFVVkVPMEZCUTBRc1lVRXhRa1FzVFVFd1FrODdRVUZEVEN4eFFrRkJUeXd5UWtGQlVEdEJRVU5FTzBGQmFFUjVRenRCUVdsRU0wTTdRVUZEUml4UFFYWklUU3hEUVVGUU8wRkJkMGhFT3pzN2JVTkJSV01zVHl4RlFVRlRPMEZCUTNSQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR05CUVZFc1IwRkJVaXhEUVVGWkxHdENRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMRmxCUVVrc2EwSkJRV3RDTEZGQlFWRXNTVUZCVWl4TFFVRnBRaXhYUVVGMlF6czdRVUZGUVR0QlFVTkJMRmxCUVVrc1EwRkJReXhOUVVGTkxHbENRVUZRTEVsQlFUUkNMRU5CUVVNc1pVRkJha01zUlVGQmEwUTdRVUZEYUVRc2EwSkJRVkVzUjBGQlVpeERRVUZaTEhGQ1FVRmFPMEZCUTBFc2FVSkJRVThzVVVGQlVTeFBRVUZTTEVOQlFWQTdRVUZEUkRzN1FVRkZSRHM3UVVGRlFTeFpRVUZKTEdWQlFXVXNVVUZCVVN4RlFVRlNMRU5CUVZjc1MwRkJXQ3hEUVVGcFFpeEhRVUZxUWl4RFFVRnVRanRCUVVOQkxGbEJRVWtzWjBKQlFXZENMR0ZCUVdFc1EwRkJZaXhKUVVGclFpeEpRVUZzUWl4SFFVRjVRaXhoUVVGaExFTkJRV0lzUTBGQmVrSXNSMEZCTWtNc1IwRkJNME1zUjBGQmFVUXNZVUZCWVN4RFFVRmlMRU5CUVhKRk8wRkJRMEVzV1VGQlNTeGhRVUZoTEUxQlFXSXNSMEZCYzBJc1EwRkJNVUlzUlVGQk5rSTdRVUZETTBJc01FSkJRV2RDTEdGQlFXRXNRMEZCWWl4SlFVRnJRaXhKUVVGc1FpeEhRVUY1UWl4aFFVRmhMRU5CUVdJc1EwRkJla0lzUjBGQk1rTXNSMEZCTTBNc1IwRkJhVVFzWVVGQllTeERRVUZpTEVOQlFXcEVMRWRCUVcxRkxFZEJRVzVGTEVkQlFYbEZMR0ZCUVdFc1EwRkJZaXhEUVVGNlJqdEJRVU5FT3p0QlFVVkVMRmxCUVVrc2FVSkJRV2xDTERSQ1FVRm5RaXhoUVVGb1FpeERRVUZ5UWp0QlFVTkJMRmxCUVVrc1owSkJRV2RDTEhOQ1FVRlZMRkZCUVZFc1NVRkJiRUlzUlVGQmQwSXNTVUZCZUVJc1MwRkJhVU1zVTBGQmNrUTdRVUZEUVN4WlFVRkpMR05CUVdNc2MwSkJRVlVzVVVGQlVTeEZRVUZzUWl4RlFVRnpRaXhKUVVGMFFpeExRVUVyUWl4VFFVRnFSRHM3UVVGRlFTeFpRVUZKTEZGQlFWRXNTVUZCVWl4TFFVRnBRaXhSUVVGeVFpeEZRVUVyUWp0QlFVTTNRaXhyUWtGQlVTeFBRVUZTTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3haUVVGSkxHbENRVUZwUWl4WFFVRnlRaXhGUVVGclF6dEJRVU5vUXp0QlFVTkJMR05CUVVrc1ZVRkJWU3hOUVVGTkxGTkJRVTRzUTBGQlowSXNaVUZCYUVJc1EwRkJaME1zVVVGQlVTeEZRVUY0UXl4RFFVRmtPMEZCUTBFc1kwRkJTU3hQUVVGS0xFVkJRV0U3UVVGQlFUczdRVUZGV0N4clFrRkJTU3hYUVVGWExFMUJRVTBzVVVGQlRpeERRVUZsTEZGQlFWRXNSVUZCVWl4SFFVRmhMRXRCUVdJc1IwRkJjVUlzVVVGQlVTeEpRVUUxUXl4RFFVRm1PMEZCUTBFc2EwSkJRVWtzUTBGQlF5eFJRVUZNTEVWQlFXVTdRVUZEWWl3eVFrRkJWeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNUMEZCY2tJc1JVRkJPRUlzVDBGQk9VSXNSVUZCZFVNc1UwRkJka01zUTBGQldEdEJRVU5CTEhOQ1FVRk5MRkZCUVU0c1EwRkJaU3hSUVVGUkxFVkJRVklzUjBGQllTeExRVUZpTEVkQlFYRkNMRkZCUVZFc1NVRkJOVU1zU1VGQmIwUXNVVUZCY0VRN1FVRkRSRHM3UVVGRlJDeHJRa0ZCU1N4VFFVRlRMR0ZCUVZRc1NVRkJNRUlzUTBGQlF5eGxRVUV2UWl4RlFVRm5SRHRCUVVGQk8wRkJRemxETEhOQ1FVRkpMRkZCUVZFc1MwRkJTeXhMUVVGTUxFTkJRVmNzVVVGQlVTeEpRVUZTTEVOQlFXRXNTMEZCZUVJc1EwRkJXanRCUVVOQkxITkNRVUZKTEV0QlFVc3NUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeE5RVUZOTEVWQlFURkNMRU5CUVZRN1FVRkRRU3h6UWtGQlNTeFBRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzVFVGQlRTeExRVUV4UWl4RFFVRllPMEZCUTBFc2MwSkJRVWtzVDBGQlR5eE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFMUJRVTBzU1VGQk1VSXNRMEZCV0R0QlFVTkJMSGRDUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMRk5CUVZNc1NVRkJWQ3hEUVVGakxHMUNRVUYwUXl4RlFVRXlSQ3hKUVVFelJDeEZRVUZwUlN4RlFVRnFSU3hGUVVGeFJTeEpRVUZ5UlN4RFFVRXdSU3g1UWtGQmFVSTdRVUZEZWtZc05FSkJRVkVzUjBGQlVpeERRVUZaTEd0Q1FVRmFMRVZCUVdkRExHRkJRV2hETzBGQlEwRXNORUpCUVZFc1NVRkJVaXhEUVVGaExFdEJRV0lzUjBGQmNVSXNZVUZCY2tJN08wRkJSVUVzZDBKQlFVa3NhMEpCUVd0Q0xFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNaMEpCUVdkQ0xFVkJRWEJFTEVOQlFYUkNPenRCUVVWQkxEQkNRVUZOTEUxQlFVNHNRMEZCWVN4VlFVRmlMRU5CUVhkQ0xGTkJRVk1zU1VGQlZDeERRVUZqTEdkQ1FVRjBReXhGUVVGM1JDeGxRVUY0UkN4RlFVRjVSU3hKUVVGNlJTeEZRVUVyUlN4SlFVRXZSU3hEUVVGdlJpeHJRa0ZCVlR0QlFVTTFSanRCUVVOQkxEaENRVUZSTEVsQlFWSXNRMEZCWVN4blFrRkJZaXhIUVVGblF5eEpRVUZvUXp0QlFVTkJMRGhDUVVGUkxFOUJRVkk3UVVGRFJDeHhRa0ZLUkR0QlFVdEVMRzFDUVZoRU8wRkJURGhETzBGQmEwSXZReXhsUVd4Q1JDeE5RV3RDVHl4SlFVRkpMR1ZCUVVvc1JVRkJjVUk3UVVGRE1VSXNjMEpCUVUwc2FVSkJRVTRzUTBGQmQwSXNUMEZCZUVJc1JVRkJhVU1zVVVGQmFrTXNSVUZCTWtNc1NVRkJNME1zUTBGQlowUXNWVUZCVXl4TFFVRlVMRVZCUVdkQ096dEJRVVU1UkR0QlFVTkJMSE5DUVVGSkxGVkJRVlVzWTBGQlpDeEZRVUU0UWp0QlFVTTFRaXd5UWtGQlR5eHRRMEZCVURzN1FVRkZSanRCUVVORExHMUNRVXBFTEUxQlNVODdRVUZEVEN3d1FrRkJUU3hSUVVGT0xFTkJRV1VzVVVGQlVTeEZRVUZTTEVkQlFXRXNTMEZCWWl4SFFVRnhRaXhSUVVGUkxFbEJRVFZETEVsQlFXOUVMRTFCUVUwc1VVRkJNVVE3UVVGRFFTd3dRa0ZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRTFCUVUwc1QwRkJjRU03UVVGRFFTd3lRa0ZCVHl4dFEwRkJVRHRCUVVORU8wRkJRMFlzYVVKQldrUTdRVUZoUkN4bFFXUk5MRTFCWTBFN1FVRkRUQ3gxUWtGQlR5d3dRa0ZCVUR0QlFVTkVPMEZCTVVOVk8wRkJNa05hTEZkQk0wTkVMRTFCTWtOUE8wRkJRMHdzYlVKQlFVOHNNRUpCUVZBN1FVRkRSRHM3UVVGRlJEdEJRVU5FTEZOQmJrUkVMRTFCYlVSUExFbEJRVWtzYVVKQlFXbENMR05CUVhKQ0xFVkJRWEZETzBGQlFVRTdRVUZETVVNc2IwSkJRVkVzUjBGQlVpeERRVUZaTEN0Q1FVRmFMRVZCUVRaRExGRkJRVkVzU1VGQmNrUTdPMEZCUlVFc1owSkJRVWtzWjBKQlFXZENMRTFCUVUwc2NVSkJRVTRzUTBGQk5FSXNZVUZCTlVJc1EwRkJjRUk3TzBGQlJVRXNaMEpCUVVrc1lVRkJTaXhGUVVGdFFqczdRVUZGYWtJN1FVRkRRU3hyUWtGQlNTeGpRVUZqTEZkQlFXeENMRVZCUVN0Q08wRkJRVUU3UVVGRE4wSXNjMEpCUVVrc1kwRkJZeXhMUVVGTExFdEJRVXdzUTBGQlZ5eFJRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRjRRaXhEUVVGc1FqdEJRVU5CTEhOQ1FVRkpMRXRCUVVzc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4WlFVRlpMRVZCUVdoRExFTkJRVlE3UVVGRFFTeHpRa0ZCU1N4cFFrRkJhVUlzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhaUVVGWkxFdEJRV2hETEVOQlFYSkNPMEZCUTBFc2MwSkJRVWtzVDBGQlR5eE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xGbEJRVmtzU1VGQmFFTXNRMEZCV0RzN1FVRkZRU3gzUWtGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhqUVVGakxGVkJRWFJETEVWQlFXdEVMR05CUVd4RUxFVkJRV3RGTEVWQlFXeEZMRVZCUVhORkxFbEJRWFJGTEVOQlFUSkZMREJDUVVGclFqdEJRVU16Uml4M1FrRkJTU3hqUVVGakxFdEJRVXNzUzBGQlRDeERRVUZYTEV0QlFVc3NZMEZCVEN4RFFVRllMRU5CUVd4Q08wRkJRMEVzTkVKQlFWRXNSMEZCVWl4RFFVRlpMR3RDUVVGYUxFVkJRV2RETEZkQlFXaERPMEZCUTBFc05FSkJRVkVzU1VGQlVpeERRVUZoTEV0QlFXSXNSMEZCY1VJc1YwRkJja0k3TzBGQlJVRXNkMEpCUVVrc2EwSkJRV3RDTEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzVDBGQk0wSXNSVUZCYjBNc1kwRkJZeXhGUVVGc1JDeERRVUYwUWpzN1FVRkZRU3d3UWtGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhqUVVGakxGVkJRWFJETEVWQlFXdEVMR1ZCUVd4RUxFVkJRVzFGTEVsQlFXNUZMRVZCUVhsRkxFbEJRWHBGTEVOQlFUaEZMR3RDUVVGVk8wRkJRM1JHT3p0QlFVVkJMRGhDUVVGUkxFbEJRVklzUTBGQllTeG5Ra0ZCWWl4SFFVRm5ReXhKUVVGb1F6dEJRVU5CTERoQ1FVRlJMRTlCUVZJN1FVRkRSQ3h4UWtGTVJEdEJRVTFFTEcxQ1FXSkVPenRCUVdWR08wRkJja0lyUWp0QlFYTkNPVUlzWlVGMFFrUXNUVUZ6UWs4N1FVRkRUQ3gzUWtGQlVTeEpRVUZTTEVOQlFXRXNaMEpCUVdJc1IwRkJaME1zU1VGQmFFTTdRVUZEUVN4M1FrRkJVU3hQUVVGU08wRkJRMFE3UVVGRlJpeGhRVGxDUkN4TlFUaENUenRCUVVOTUxITkNRVUZSTEVsQlFWSXNRMEZCWVN4blFrRkJZaXhIUVVGblF5eEpRVUZvUXp0QlFVTkJMSE5DUVVGUkxFOUJRVkk3TzBGQlJVRTdRVUZEUkR0QlFYaERlVU03UVVFd1F6TkRMRk5CTVVOTkxFMUJNRU5CTzBGQlEwd3NhVUpCUVU4c01FSkJRVkE3UVVGRFJEdEJRVVZHTEU5Qk0waE5MRU5CUVZBN1FVRTBTRVE3T3pzeVEwRkZjMElzVFN4RlFVRlJMRkVzUlVGQlZUdEJRVU4yUXl4alFVRlJMRWRCUVZJc1EwRkJXU3d3UWtGQldpeEZRVUYzUXl4TlFVRjRReXhGUVVGblJDeFJRVUZvUkR0QlFVTkJMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeHpRa0ZCU2pzN1FVRkZRVHRCUVVOQkxGVkJRVWtzWTBGQll5eE5RVUZOTEZGQlFVNHNRMEZCWlN4M1FrRkJaaXhEUVVGM1F5eE5RVUY0UXl4RFFVRnNRanRCUVVOQkxGVkJRVWtzVjBGQlNpeEZRVUZwUWp0QlFVTm1MSGRDUVVGblFpeE5RVUZvUWp0QlFVTkJMR2xDUVVGVExGZEJRVlE3UVVGRFJEczdRVUZGUkN4VlFVRkpMRTFCUVUwN1FVRkRVaXhaUVVGSkxGRkJSRWs3UVVGRlVpeGpRVUZOTEUxQlJrVTdRVUZIVWl4clFrRkJWU3hUUVVoR08wRkJTVklzWTBGQlRTeEZRVUZETEdkQ1FVRm5RaXhuUWtGQmFrSXNSVUZCYlVNc1VVRkJVU3hsUVVFelF6dEJRVXBGTEU5QlFWWTdPMEZCVDBFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORExGbEJRVWtzUTBGQlF5eE5RVUZFTEVsQlFWY3NRMEZCUXl4UlFVRm9RaXhGUVVFd1FqdEJRVU40UWl4cFFrRkJUeXhQUVVGUExITkVRVUZRTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxGZEJRVmNzVFVGQlRTeFJRVUZPTEVOQlFXVXNVMEZCVXl4TFFVRlVMRWRCUVdsQ0xGRkJRV2hETEVOQlFXWTdRVUZEUVN4WlFVRkpMRlZCUVZVc1RVRkJUU3hUUVVGT0xFTkJRV2RDTEdWQlFXaENMRU5CUVdkRExFMUJRV2hETEVOQlFXUTdPMEZCUlVFc1dVRkJTU3hQUVVGS0xFVkJRV0U3TzBGQlJWZ3NZMEZCU1N4RFFVRkRMRkZCUVV3c1JVRkJaVHRCUVVOaU8wRkJRMEVzWjBKQlFVa3NWMEZCVnl4VFFVRllMRkZCUVZjc1EwRkJVeXhMUVVGVUxFVkJRV2RDTzBGQlF6ZENMSE5DUVVGUkxFZEJRVklzUTBGQldTeHBRa0ZCV2l4RlFVRXJRaXhMUVVFdlFqdEJRVU5CTEhOQ1FVRlJMRXRCUVZJN1FVRkRSQ3hoUVVoRU8wRkJTVUVzWjBKQlFVa3NVVUZCU2l4SFFVRmxMRkZCUVdZN1FVRkRRU3huUWtGQlNTeGhRVUZLTEVkQlFXOUNMR0ZCUVhCQ096dEJRVVZCTEhWQ1FVRlhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWl4RlFVRXdRaXhQUVVFeFFpeERRVUZZTzBGQlEwRXNhMEpCUVUwc1VVRkJUaXhEUVVGbExGTkJRVk1zUzBGQlZDeEhRVUZwUWl4UlFVRm9ReXhKUVVFMFF5eFJRVUUxUXp0QlFVTkVPenRCUVVWRUxHTkJRVWtzVTBGQlV5eGhRVUZpTEVWQlFUUkNPenRCUVVVeFFpeG5Ra0ZCU1N3d1FrRkJNRUk3UVVGRE5VSXNhMEpCUVVrc1RVRkVkMEk3UVVGRk5VSXNiMEpCUVUwN1FVRkdjMElzWVVGQk9VSTdRVUZKUVN4eFFrRkJVeXhoUVVGVUxFZEJRWGxDTEdGQlFYcENPMEZCUTBFc2EwSkJRVTBzZFVKQlFVNHNRMEZCT0VJc2RVSkJRVGxDTEVWQlFYVkVMRkZCUVhaRUxFVkJRV2xGTEVsQlFXcEZMRU5CUVhORkxHbENRVUZUT3p0QlFVVTNSU3h2UWtGQlRTeFhRVUZPTEVOQlFXdENMRmRCUVd4Q0xFTkJRVGhDTEUxQlFVMHNUMEZCY0VNN1FVRkRRU3h6UWtGQlVTeDFRMEZCVWp0QlFVTkVMR0ZCU2tRN1FVRkxSQ3hYUVZwRUxFMUJXVTg3TzBGQlJVd3NhMEpCUVUwc2FVSkJRVTRzUTBGQmQwSXNSMEZCZUVJc1JVRkJOa0lzVVVGQk4wSTdRVUZEUkR0QlFVTkdMRk5CTDBKRUxFMUJLMEpQTzBGQlEwd3NhVUpCUVU4c2FVTkJRVkE3UVVGRFJEdEJRVU5HTEU5Qk0wTk5MRU5CUVZBN1FVRTJRMFE3T3p0elEwRkZhVUlzVHl4RlFVRlRMRkVzUlVGQlZUdEJRVU51UXl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFUczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFqczdRVUZGTVVNc1dVRkJTU3huUWtGQlowSXNVVUZCVVN4SlFVRlNMRU5CUVdFc1kwRkJha003UVVGRFFTeFpRVUZKTEZkQlFVbzdRVUZEUVN4WlFVRkpMR0ZCUVVvN1FVRkRRU3haUVVGSkxGRkJRVkVzUlVGQldqdEJRVU5CTEZsQlFVa3NkMEpCUVVvN08wRkJUakJETzBGQlR6RkRMR3RDUVVGUkxHRkJRVkk3TzBGQlJVVXNhVUpCUVVzc1owSkJRVXc3UVVGRFJTeDFRa0ZCVXl4SlFVRlVMRU5CUVdNc1ZVRkJaQ3hIUVVFeVFpeE5RVUZOTEUxQlFVNHNRMEZCWVN4alFVRmlMRVZCUVROQ096dEJRVVZCTEd0Q1FVRkpMRzlDUVVGdlFqdEJRVU4wUWl4elFrRkJUU3hYUVVSblFqdEJRVVYwUWl4dlFrRkJTU3hSUVVGUkxFVkJSbFU3UVVGSGRFSXNjMEpCUVUwc1VVRkJVU3hKUVVoUk8wRkJTWFJDTEhOQ1FVRk5PMEZCUTBvc2EwTkJRV2RDTEdGQlJGbzdRVUZGU2l4NVFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRk5CUVZNc1NVRkJWQ3hEUVVGakxGVkJRV3hETzBGQlJrZzdRVUZLWjBJc1pVRkJlRUk3UVVGVFFTeDFRa0ZCVXl4blFrRkJWQ3hEUVVFd1FpeFhRVUV4UWl4SFFVRjNReXhOUVVGTkxHOUNRVUZPTEVOQlFUSkNMR2xDUVVFelFpeEZRVUU0UXl4VFFVRTVReXhGUVVGNVJDeFRRVUZUTEZkQlFWUXNRMEZCY1VJc1YwRkJPVVVzUTBGQmVFTTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHdENRVUZKTEZOQlFWTXNZMEZCWWl4RlFVRTJRanRCUVVGRExIZENRVUZSTEVWQlFVTXNVMEZCVXl4cFFrRkJWaXhGUVVFMlFpeFZRVUZWTEZGQlFYWkRMRVZCUVZJN1FVRkROMElzWlVGRVJDeE5RVU5QTzBGQlEwd3NjMEpCUVUwc1VVRkJUaXhEUVVGbExGRkJRVkVzU1VGQlVpeEhRVUZsTEV0QlFXWXNSMEZCZFVJc1VVRkJVU3hGUVVFNVF5eEpRVUZ2UkN4UlFVRndSRHRCUVVOQkxITkNRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNhVUpCUVRsQ08wRkJRMFE3TzBGQlJVZzdRVUZEUVN4cFFrRkJTeXhoUVVGTU96dEJRVVZGTEhOQ1FVRlJMRWRCUVZJc1EwRkJXU3hoUVVGYU8wRkJRMEVzZFVKQlFWTXNaMEpCUVZRc1EwRkJNRUlzVjBGQk1VSXNSMEZCZDBNc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4UFFVRXpRaXhEUVVGNFF6dEJRVU5CTEhWQ1FVRlRMRWxCUVZRc1EwRkJZeXhWUVVGa0xFZEJRVEpDTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzVVVGQlVTeEpRVUZTTEVOQlFXRXNTMEZCYWtNc1EwRkJNMEk3UVVGRFFTeDFRa0ZCVXl4SlFVRlVMRU5CUVdNc1VVRkJaQ3hIUVVGNVFpeE5RVUZOTEUxQlFVNHNRMEZCWVN4alFVRmlMRVZCUVhwQ096dEJRVVZCTEd0Q1FVRkpMR2xDUVVGcFFqdEJRVU51UWl4elFrRkJUU3hYUVVSaE8wRkJSVzVDTEc5Q1FVRkpMRkZCUVZFc1NVRkdUenRCUVVkdVFpeHpRa0ZCVFN4UlFVRlJMRVZCU0VzN1FVRkpia0lzYzBKQlFVMDdRVUZEU2l4clEwRkJaMElzWlVGRVdqdEJRVVZLTEhsQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc1VVRkJiRU03UVVGR1NEdEJRVXBoTEdWQlFYSkNPMEZCVTBFc2RVSkJRVk1zWjBKQlFWUXNRMEZCTUVJc1lVRkJNVUlzUjBGQk1FTXNUVUZCVFN4dlFrRkJUaXhEUVVFeVFpeGpRVUV6UWl4RlFVRXlReXhUUVVFelF5eEZRVUZ6UkN4VFFVRlRMRmRCUVZRc1EwRkJjVUlzVjBGQk0wVXNRMEZCTVVNN1FVRkRRU3h6UWtGQlVTeEZRVUZETEZOQlFWTXNZMEZCVml4RlFVRXdRaXhWUVVGVkxGRkJRWEJETEVWQlFWSTdPMEZCUlVZN1FVRkRRU3hwUWtGQlN5eGxRVUZNT3p0QlFVVkZMSE5DUVVGUkxFZEJRVklzUTBGQldTeGxRVUZhTzBGQlEwRXNkVUpCUVZNc1owSkJRVlFzUTBGQk1FSXNZVUZCTVVJc1IwRkJNRU1zVFVGQlRTeHZRa0ZCVGl4RFFVRXlRaXhQUVVFelFpeERRVUV4UXpzN1FVRkZRU3h2UWtGQlRTeHBRa0ZCVGl4RFFVRjNRaXhSUVVGUkxFbEJRVklzUTBGQllTeFJRVUZpTEVOQlFYTkNMRk5CUVRsRExFVkJRWGxFTEZOQlFYcEVMRVZCUVc5RkxGRkJRVkVzU1VGQlVpeERRVUZoTEZGQlFXSXNRMEZCYzBJc1IwRkJNVVlzUlVGQkswWXNTVUZCTDBZc1EwRkJiMGNzVlVGQlF5eExRVUZFTEVWQlFWYzdPMEZCUlRkSE8wRkJRMEVzYjBKQlFVa3NiVUpCUVc5Q0xFOUJRVThzVFVGQlRTeFJRVUZpTEV0QlFUQkNMRkZCUVROQ0xFZEJRWFZETEUxQlFVMHNVVUZCTjBNc1IwRkJkMFFzVFVGQlRTeFJRVUZPTEVOQlFXVXNTMEZCT1VZN08wRkJSVUVzYjBKQlFVa3NiMEpCUVc5Q0xFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1owSkJRWEJDTEVOQlFYaENPMEZCUTBFc2IwSkJRVWtzYTBKQlFXdENMRTFCUVUwc1RVRkJUaXhEUVVGaExGZEJRV0lzUlVGQmRFSTdRVUZEUVN4dlFrRkJTU3hYUVVGWExGRkJRVkVzU1VGQlVpeERRVUZoTEV0QlFUVkNPMEZCUTBFc2VVSkJRVk1zVTBGQlZDeERRVUZ0UWl4VFFVRnVRaXhIUVVFclFpeFJRVUZSTEVsQlFWSXNRMEZCWVN4UlFVRmlMRU5CUVhOQ0xGTkJRWEpFTzBGQlEwRXNlVUpCUVZNc1UwRkJWQ3hEUVVGdFFpeFRRVUZ1UWl4SFFVRXJRaXhwUWtGQkwwSTdRVUZEUVN4NVFrRkJVeXhUUVVGVUxFTkJRVzFDTEUxQlFXNUNMRWRCUVN0Q0xFMUJRVTBzVVVGQlRpeERRVUZsTEV0QlFUbERPMEZCUTBFc2VVSkJRVk1zU1VGQlZDeERRVUZqTEZGQlFXUXNSMEZCTUVJc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4UlFVRndRaXhEUVVFeFFqdEJRVU5CTEhsQ1FVRlRMRWxCUVZRc1EwRkJZeXhaUVVGa0xFZEJRVFpDTEdWQlFUZENPenRCUVVWQkxHOUNRVUZKTEZsQlFWa3NUVUZCVFN4TlFVRk9MRU5CUVdFc2IwSkJRV0lzUTBGQmEwTXNaVUZCYkVNc1JVRkJiVVFzVTBGQlV5eEpRVUZVTEVOQlFXTXNVVUZCYWtVc1JVRkJNa1VzVTBGQlV5eEpRVUZVTEVOQlFXTXNWVUZCZWtZc1EwRkJhRUk3TzBGQlJVRXNkVUpCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzYjBKQlFXSXNRMEZCYTBNc1UwRkJiRU1zUlVGQk5rTXNiMEpCUVc5Q0xGTkJRVk1zU1VGQlZDeERRVUZqTEZGQlFXeERMRWRCUVRaRExGTkJRVk1zU1VGQlZDeERRVUZqTEZWQlFYaEhMRU5CUVZBN08wRkJSVUU3UVVGRFJDeGxRVzVDUkN4RlFXMUNSeXhKUVc1Q1NDeERRVzFDVVN4VlFVRkRMRk5CUVVRc1JVRkJaVHRCUVVOeVFpeDVRa0ZCVXl4SlFVRlVMRU5CUVdNc1UwRkJaQ3hIUVVFd1FpeFRRVUV4UWpzN1FVRkZRU3gxUWtGQlR5eE5RVUZOTEUxQlFVNHNRMEZCWVN4WlFVRmlMRU5CUVRCQ0xGTkJRVEZDTEVWQlFYRkRMR3RDUVVGclFpeFRRVUZUTEVsQlFWUXNRMEZCWXl4UlFVRm9ReXhIUVVFeVF5eFRRVUZUTEVsQlFWUXNRMEZCWXl4VlFVRTVSaXhEUVVGUU96dEJRVVZCTzBGQlEwUXNaVUY2UWtRc1JVRjVRa2NzU1VGNlFrZ3NRMEY1UWxFc1ZVRkJReXhKUVVGRUxFVkJRVlU3TzBGQlJXaENMSGxDUVVGVExFbEJRVlFzUTBGQll5eHRRa0ZCWkN4SFFVRnZReXhKUVVGSkxGVkJRVW9zUTBGQlpTeExRVUZMTEVOQlFVd3NRMEZCWml4RFFVRndRenRCUVVOQkxIbENRVUZUTEVsQlFWUXNRMEZCWXl4eFFrRkJaQ3hIUVVGelF5eEpRVUZKTEZWQlFVb3NRMEZCWlN4TFFVRkxMRU5CUVV3c1EwRkJaaXhEUVVGMFF6dEJRVU5CTEhsQ1FVRlRMRWxCUVZRc1EwRkJZeXhuUWtGQlpDeEhRVUZwUXl4SlFVRkpMRlZCUVVvc1EwRkJaU3hMUVVGTExFTkJRVXdzUTBGQlppeERRVUZxUXp0QlFVTkJMSGxDUVVGVExFbEJRVlFzUTBGQll5eHJRa0ZCWkN4SFFVRnRReXhKUVVGSkxGVkJRVW9zUTBGQlpTeExRVUZMTEVOQlFVd3NRMEZCWml4RFFVRnVRenRCUVVOQkxIRkNRVUZMTEUxQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1JVRkJURHRCUVVOQkxITkNRVUZOTEVWQlFVNHNSMEZCVnl4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEVWQlFYQkNMRU5CUVZnN08wRkJSVUVzYjBKQlFVa3NiVUpCUVcxQ08wRkJRM0pDTEhkQ1FVRk5MRmRCUkdVN1FVRkZja0lzYzBKQlFVa3NVVUZCVVN4SlFVWlRPMEZCUjNKQ0xIZENRVUZOTEZGQlFWRXNSVUZJVHp0QlFVbHlRaXgzUWtGQlRUdEJRVU5LTEc5RFFVRm5RanRCUVVSYU8wRkJTbVVzYVVKQlFYWkNPenRCUVZOQk8wRkJRMEVzYTBOQlFXdENMRTFCUVUwc2IwSkJRVTRzUTBGQk1rSXNaMEpCUVROQ0xFVkJRVFpETEU5QlFVOHNSVUZCY0VRc1JVRkJkMFFzVTBGQlV5eFhRVUZVTEVOQlFYRkNMRmRCUVRkRkxFTkJRV3hDTzBGQlEwRXNkVUpCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzVVVGQllpeERRVUZ6UWl4VFFVRlRMRWxCUVZRc1EwRkJZeXhyUWtGQmNFTXNSVUZCZDBRc1pVRkJlRVFzUTBGQlVEdEJRVU5FTEdWQk9VTkVMRVZCT0VOSExFbEJPVU5JTEVOQk9FTlJMRlZCUVVNc1NVRkJSQ3hGUVVGVk8wRkJRMmhDTEhOQ1FVRk5MRWxCUVU0c1IwRkJZU3hOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRWxCUVhCQ0xFTkJRV0k3TzBGQlJVRTdRVUZEUVN4MVFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMRk5CUVZNc1NVRkJWQ3hEUVVGakxIRkNRVUYwUXl4RlFVRTJSQ3hKUVVFM1JDeEZRVUZ0UlN4RlFVRnVSU3hEUVVGUU8wRkJRMFFzWlVGdVJFUXNSVUZ0UkVjc1NVRnVSRWdzUTBGdFJGRXNWVUZCUXl4aFFVRkVMRVZCUVcxQ08wRkJRM3BDTEhOQ1FVRk5MR3RDUVVGT0xFZEJRVEpDTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzWVVGQmNFSXNRMEZCTTBJN08wRkJSVUVzZFVKQlFVOHNUVUZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhEUVVGM1FpeFRRVUZUTEZOQlFWUXNRMEZCYlVJc1UwRkJNME1zUlVGQmMwUXNVMEZCVXl4SlFVRlVMRU5CUVdNc1dVRkJjRVVzUTBGQlVEdEJRVVZFTEdWQmVFUkVMRVZCZDBSSExFbEJlRVJJTEVOQmQwUlJMRlZCUVVNc1kwRkJSQ3hGUVVGdlFqczdRVUZGTVVJc2MwSkJRVTBzYjBKQlFVNHNSMEZCTmtJc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4alFVRndRaXhEUVVFM1FqczdRVUZGUVN4dlFrRkJTU3h0UWtGQmJVSTdRVUZEY2tJc2QwSkJRVTBzVjBGRVpUdEJRVVZ5UWl4elFrRkJTU3hSUVVGUkxFbEJSbE03UVVGSGNrSXNkMEpCUVUwc1VVRkJVU3hGUVVoUE8wRkJTWEpDTEhkQ1FVRk5PMEZCUTBvc2IwTkJRV2RDTzBGQlJGbzdRVUZLWlN4cFFrRkJka0k3TzBGQlUwRXNiMEpCUVVrc1owSkJRV2RDTEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzWjBKQlFUTkNMRVZCUVRaRExGTkJRVk1zU1VGQlZDeERRVUZqTEZsQlFUTkVMRVZCUVhsRkxGTkJRVk1zVjBGQlZDeERRVUZ4UWl4WFFVRTVSaXhEUVVGd1FqczdRVUZGUVN4MVFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeFBRVUZpTEVOQlFYRkNMRk5CUVZNc1YwRkJWQ3hEUVVGeFFpeFZRVUV4UXl4RlFVRnpSQ3g1UWtGQlpTeFRRVUZUTEdkQ1FVRjRRaXhKUVVFMFF5eDVRa0ZCWlN4aFFVRm1MRU5CUVd4SExFTkJRVkE3UVVGRlJDeGxRWHBGUkN4RlFYbEZSeXhKUVhwRlNDeERRWGxGVVN4eFFrRkJZVHM3UVVGRmJrSXNjMEpCUVUwc1UwRkJUaXhIUVVGclFpeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xGTkJRWEJDTEVOQlFXeENPenRCUVVWQkxHOUNRVUZKTEcxQ1FVRnRRanRCUVVOeVFpeDNRa0ZCVFN4WFFVUmxPMEZCUlhKQ0xITkNRVUZKTEZGQlFWRXNTVUZHVXp0QlFVZHlRaXgzUWtGQlRTeFJRVUZSTEVWQlNFODdRVUZKY2tJc2QwSkJRVTA3UVVGRFNpeHZRMEZCWjBJc2JVSkJSRm83UVVGRlNpd3lRa0ZCVHl4TFFVRkxMSGxDUVVGbExFdEJRV1lzUTBGQlREdEJRVVpJTzBGQlNtVXNhVUpCUVhaQ08wRkJVMEVzZVVKQlFWTXNaMEpCUVZRc1EwRkJNRUlzYVVKQlFURkNMRWRCUVRoRExFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1owSkJRVE5DTEVWQlFUWkRMRTlCUVU4c1JVRkJjRVFzUlVGQmQwUXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGZEJRVGRGTEVOQlFUbERPenRCUVVWQkxIZENRVUZSTEVWQlFVTXNVMEZCVXl4blFrRkJWaXhGUVVFMFFpeFZRVUZWTEZGQlFYUkRMRVZCUVZJN1FVRkZSQ3hsUVRGR1JDeEZRVEJHUnp0QlFVRkJMSFZDUVVGVExFOUJRVThzUzBGQlVDeERRVUZVTzBGQlFVRXNaVUV4UmtnN08wRkJORVpHTzBGQlEwRXNhVUpCUVVzc2JVSkJRVXc3TzBGQlJVVXNjMEpCUVZFc1IwRkJVaXhEUVVGWkxHMUNRVUZhTzBGQlEwRXNhMEpCUVVrc1owSkJRV2RDTEV0QlFVc3NTMEZCVEN4RFFVRlhMRXRCUVVzc1VVRkJVU3hKUVVGU0xFTkJRV0VzUzBGQmJFSXNRMEZCV0N4RFFVRndRanM3UVVGRlFTeHZRa0ZCVFN4cFFrRkJUaXhEUVVGM1FpeFJRVUZSTEVsQlFWSXNRMEZCWVN4UlFVRmlMRU5CUVhOQ0xGTkJRVGxETEVWQlFYbEVMRk5CUVhwRUxFVkJRVzlGTEZGQlFWRXNTVUZCVWl4RFFVRmhMRkZCUVdJc1EwRkJjMElzUjBGQk1VWXNSVUZCSzBZc1NVRkJMMFlzUTBGQmIwY3NWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkROMGNzYjBKQlFVa3NaVUZCWlN4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEdOQlFXTXNiMEpCUVd4RExFTkJRVzVDT3p0QlFVVkJPMEZCUTBFc2IwSkJRVWtzYlVKQlFXOUNMRTlCUVU4c1RVRkJUU3hSUVVGaUxFdEJRVEJDTEZGQlFUTkNMRWRCUVhWRExFMUJRVTBzVVVGQk4wTXNSMEZCZDBRc1RVRkJUU3hSUVVGT0xFTkJRV1VzUzBGQk9VWTdPMEZCUlVFc2IwSkJRVWtzYTBKQlFXdENMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNaMEpCUVhCQ0xFTkJRWFJDTzBGQlEwRXNlVUpCUVZNc1UwRkJWQ3hEUVVGdFFpeFRRVUZ1UWl4SFFVRXJRaXhSUVVGUkxFbEJRVklzUTBGQllTeFJRVUZpTEVOQlFYTkNMRk5CUVhKRU8wRkJRMEVzZVVKQlFWTXNVMEZCVkN4RFFVRnRRaXhUUVVGdVFpeEhRVUVyUWl4bFFVRXZRanRCUVVOQkxIbENRVUZUTEZOQlFWUXNRMEZCYlVJc1RVRkJia0lzUjBGQkswSXNUVUZCVFN4UlFVRk9MRU5CUVdVc1MwRkJPVU03TzBGQlJVRXNkVUpCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeERRVUYzUWl4VFFVRlRMRmRCUVZRc1EwRkJjVUlzVlVGQk4wTXNSVUZCZVVRc1dVRkJla1FzUTBGQlVEdEJRVVZFTEdWQllrUXNSVUZoUnl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOYUxIZENRVUZSTEVkQlFWSXNRMEZCV1N4TFFVRmFPMEZCUTBFc2RVSkJRVThzZVVOQlFWQTdPMEZCUlVFN1FVRkRSQ3hsUVd4Q1JDeEZRV3RDUnl4SlFXeENTQ3hEUVd0Q1VTeGxRVUZQT3p0QlFVVmlMSGxDUVVGVExFbEJRVlFzUTBGQll5eFpRVUZrTEVkQlFUWkNMRWxCUVVrc1ZVRkJTaXhEUVVGbExFZEJRV1lzUTBGQk4wSTdPMEZCUlVFc2IwSkJRVWtzV1VGQldTeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xHTkJRV01zVTBGQmJFTXNRMEZCYUVJN08wRkJSVUVzYjBKQlFVa3NiMEpCUVc5Q0xFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNVMEZCVXl4SlFVRlVMRU5CUVdNc1dVRkJiRVFzUTBGQmVFSTdPMEZCUlVFc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNVMEZCWWl4RFFVRjFRaXhUUVVGVExGTkJRVlFzUTBGQmJVSXNVMEZCTVVNc1JVRkJjVVFzZVVKQlFXVXNVMEZCVXl4blFrRkJlRUlzU1VGQk5FTXNlVUpCUVdVc2FVSkJRV1lzUTBGQmFrY3NSVUZCYjBrc1UwRkJjRWtzUTBGQlVEczdRVUZGUVR0QlFVTkVMR1ZCTjBKRUxFVkJOa0pITEVsQk4wSklMRU5CTmtKUkxHZERRVUYzUWpzN1FVRkZPVUlzZDBKQlFWRXNSMEZCVWl4RFFVRlpMRGhDUVVGYUxFVkJRVFJETEc5Q1FVRTFRenRCUVVOQkxHOUNRVUZKTEZsQlFWa3NUVUZCVFN4TlFVRk9MRU5CUVdFc2IwSkJRV0lzUTBGQmEwTXNVMEZCVXl4SlFVRlVMRU5CUVdNc1dVRkJhRVFzUlVGQk9FUXNVMEZCVXl4SlFVRlVMRU5CUVdNc1VVRkJOVVVzUlVGQmMwWXNVMEZCVXl4SlFVRlVMRU5CUVdNc1ZVRkJjRWNzUTBGQmFFSTdPMEZCUlVFc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNiMEpCUVdJc1EwRkJhME1zVTBGQmJFTXNSVUZCTmtNc2IwSkJRVzlDTEZOQlFWTXNTVUZCVkN4RFFVRmpMRkZCUVd4RExFZEJRVFpETEZOQlFWTXNTVUZCVkN4RFFVRmpMRlZCUVhoSExFTkJRVkE3TzBGQlJVRTdRVUZEUkN4bFFYSkRSQ3hGUVhGRFJ5eEpRWEpEU0N4RFFYRkRVU3h4UWtGQllUdEJRVU51UWl4NVFrRkJVeXhKUVVGVUxFTkJRV01zVTBGQlpDeEhRVUV3UWl4VFFVRXhRanM3UVVGRlFTeDFRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3haUVVGaUxFTkJRVEJDTEZOQlFURkNMRVZCUVhGRExHdENRVUZyUWl4VFFVRlRMRWxCUVZRc1EwRkJZeXhSUVVGb1F5eEhRVUV5UXl4VFFVRlRMRWxCUVZRc1EwRkJZeXhWUVVFNVJpeERRVUZRT3p0QlFVVkJPMEZCUTBRc1pVRXpRMFFzUlVFeVEwY3NTVUV6UTBnc1EwRXlRMUVzWjBKQlFWRTdRVUZEWkN4NVFrRkJVeXhKUVVGVUxFTkJRV01zY1VKQlFXUXNSMEZCYzBNc1NVRkJTU3hWUVVGS0xFTkJRV1VzUzBGQlN5eERRVUZNTEVOQlFXWXNRMEZCZEVNN1FVRkRRU3g1UWtGQlV5eEpRVUZVTEVOQlFXTXNiVUpCUVdRc1IwRkJiME1zU1VGQlNTeFZRVUZLTEVOQlFXVXNTMEZCU3l4RFFVRk1MRU5CUVdZc1EwRkJjRU03UVVGRFFTeDVRa0ZCVXl4SlFVRlVMRU5CUVdNc2EwSkJRV1FzUjBGQmJVTXNTVUZCU1N4VlFVRktMRU5CUVdVc1MwRkJTeXhEUVVGTUxFTkJRV1lzUTBGQmJrTTdRVUZEUVN4NVFrRkJVeXhKUVVGVUxFTkJRV01zWjBKQlFXUXNSMEZCYVVNc1NVRkJTU3hWUVVGS0xFTkJRV1VzUzBGQlN5eERRVUZNTEVOQlFXWXNRMEZCYWtNN1FVRkRRU3h4UWtGQlN5eE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xHTkJRV01zUlVGQmJFTXNRMEZCVER0QlFVTkJMRzlDUVVGSkxFOUJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhqUVVGakxHdENRVUZzUXl4RFFVRllPenRCUVVWQkxIVkNRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1EwRkJkMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNiVUpCUVhSRExFVkJRVEpFTEVsQlFUTkVMRVZCUVdsRkxFVkJRV3BGTEVOQlFWQTdRVUZGUkN4bFFYSkVSQ3hGUVhGRVJ5eEpRWEpFU0N4RFFYRkVVU3g1UWtGQmFVSTdRVUZEZGtJN08wRkJSVUVzZVVKQlFWTXNaMEpCUVZRc1EwRkJNRUlzYVVKQlFURkNMRWRCUVRoRExFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNaMEpCUVdkQ0xFVkJRWEJFTEVOQlFUbERPenRCUVVWQkxHOUNRVUZKTEdWQlFXVXNUVUZCVFN4TlFVRk9MRU5CUVdFc1RVRkJZaXhEUVVGdlFpeGpRVUZqTEVsQlFXeERMRU5CUVc1Q096dEJRVVZCTEd0RFFVRnJRaXhOUVVGTkxHOUNRVUZPTEVOQlFUSkNMRTlCUVROQ0xFVkJRVzlETEdkQ1FVRm5RaXhGUVVGd1JDeERRVUZzUWpzN1FVRkZRU3gxUWtGQlR5eE5RVUZOTEUxQlFVNHNRMEZCWVN4VlFVRmlMRU5CUVhkQ0xGTkJRVk1zU1VGQlZDeERRVUZqTEdkQ1FVRjBReXhGUVVGM1JDeGxRVUY0UkN4RlFVRjVSU3haUVVGNlJTeERRVUZRTzBGQlJVUXNaVUZvUlVRc1JVRm5SVWNzU1VGb1JVZ3NRMEZuUlZFc2QwSkJRV2xDT3p0QlFVVjJRanRCUVVOQkxHOUNRVUZKTERCQ1FVRXdRanRCUVVNMVFpeDNRa0ZCVFN4WFFVUnpRanRCUVVVMVFpeHpRa0ZCU1N4UlFVRlJMRWxCUm1kQ08wRkJSelZDTEhkQ1FVRk5MRkZCUVZFc1JVRklZenRCUVVrMVFpeDNRa0ZCVFR0QlFVTktMRzlEUVVGblFqdEJRVVJhTzBGQlNuTkNMR2xDUVVFNVFqdEJRVkZCTEhGQ1FVRkxMRTFCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUlVGQlREdEJRVU5CTEhOQ1FVRk5MRVZCUVU0c1IwRkJWeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRVZCUVhCQ0xFTkJRVmc3TzBGQlJVRXNhME5CUVd0Q0xFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc2RVSkJRVE5DTEVWQlFXOUVMRkZCUVZFc1JVRkJOVVFzUlVGQlowVXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGZEJRWEpHTEVOQlFXeENPenRCUVVWQkxIVkNRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRkZCUVdJc1EwRkJjMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNhMEpCUVhCRExFVkJRWGRFTEhWQ1FVRjRSQ3hEUVVGUU8wRkJRMFFzWlVGcVJrUXNSVUZwUmtjc1NVRnFSa2dzUTBGcFJsRXNaMEpCUVZFN08wRkJSV1FzYzBKQlFVMHNTVUZCVGl4SFFVRmhMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNTVUZCY0VJc1EwRkJZanRCUVVOQkxIVkNRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRlZCUVdJc1EwRkJkMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNjVUpCUVhSRExFVkJRVFpFTEV0QlFUZEVMRVZCUVc5RkxFVkJRWEJGTEVOQlFWQTdRVUZGUkN4bFFYUkdSQ3hGUVhOR1J5eEpRWFJHU0N4RFFYTkdVU3d3UWtGQmEwSTdRVUZEZUVJc2MwSkJRVTBzUzBGQlRpeEhRVUZqTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzWTBGQmNFSXNRMEZCWkR0QlFVTkJMRzlDUVVGSkxEQkNRVUV3UWp0QlFVTTFRaXgzUWtGQlRTeFhRVVJ6UWp0QlFVVTFRaXh6UWtGQlNTeFJRVUZSTEVsQlJtZENPMEZCUnpWQ0xIZENRVUZOTEZGQlFWRXNSVUZJWXp0QlFVazFRaXgzUWtGQlRUdEJRVU5LTEc5RFFVRm5RaXg1UWtGRVdqdEJRVVZLTERKQ1FVRlBMRXRCUVVzc2VVSkJRV1VzUzBGQlppeERRVUZNTzBGQlJrZzdRVUZLYzBJc2FVSkJRVGxDT3p0QlFWVkJMSGxDUVVGVExHZENRVUZVTEVOQlFUQkNMSFZDUVVFeFFpeEhRVUZ2UkN4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEhWQ1FVRXpRaXhGUVVGdlJDeFJRVUZSTEVWQlFUVkVMRVZCUVdkRkxGTkJRVk1zVjBGQlZDeERRVUZ4UWl4WFFVRnlSaXhEUVVGd1JEdEJRVU5CTEhsQ1FVRlRMR0ZCUVZRc1IwRkJlVUlzU1VGQmVrSTdRVUZEUVN4M1FrRkJVU3hGUVVGRExGTkJRVk1zZFVKQlFWWXNSVUZCYlVNc1ZVRkJWU3hSUVVFM1F5eEZRVUZTTzBGQlEwUXNaVUZ5UjBRN08wRkJkVWRHTzBGQlEwRXNhVUpCUVVzc2VVSkJRVXc3TzBGQlJVVXNjMEpCUVZFc1IwRkJVaXhEUVVGWkxIbENRVUZhTzBGQlEwRXNkVUpCUVZNc1lVRkJWQ3hIUVVGNVFpeEpRVUY2UWpzN1FVRkZRU3h6UWtGQlVTeExRVUZMTEV0QlFVd3NRMEZCVnl4TFFVRkxMRkZCUVZFc1NVRkJVaXhEUVVGaExFdEJRV3hDTEVOQlFWZ3NRMEZCVWpzN1FVRkZRU3h0UWtGQlN5eE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xFMUJRVTBzUlVGQk1VSXNRMEZCVER0QlFVTkJMR3RDUVVGSkxFOUJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhOUVVGTkxFdEJRVEZDTEVOQlFWZzdRVUZEUVN4eFFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMRTFCUVUwc1NVRkJNVUlzUTBGQlVEczdRVUZGUVN4dlFrRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeERRVUYzUWl4VFFVRlRMRWxCUVZRc1EwRkJZeXh0UWtGQmRFTXNSVUZCTWtRc1NVRkJNMFFzUlVGQmFVVXNSVUZCYWtVc1JVRkJjVVVzU1VGQmNrVXNRMEZCTUVVc2VVSkJRV2xDTzBGQlEzcEdMSGRDUVVGUkxFZEJRVklzUTBGQldTeGxRVUZhTEVWQlFUWkNMR0ZCUVRkQ08wRkJRMEVzZVVKQlFWTXNaMEpCUVZRc1EwRkJNRUlzZFVKQlFURkNMRWRCUVc5RUxFMUJRVTBzYjBKQlFVNHNRMEZCTWtJc1QwRkJNMElzUlVGQmIwTXNaMEpCUVdkQ0xFVkJRWEJFTEVOQlFYQkVPenRCUVVWQkxHOUNRVUZKTEd0Q1FVRnJRaXhOUVVGTkxHOUNRVUZPTEVOQlFUSkNMRTlCUVROQ0xFVkJRVzlETEU5QlFVOHNSVUZCTTBNc1EwRkJkRUk3UVVGRFFTeHpRa0ZCVFN4TlFVRk9MRU5CUVdFc1ZVRkJZaXhEUVVGM1FpeFRRVUZUTEVsQlFWUXNRMEZCWXl4blFrRkJkRU1zUlVGQmQwUXNaVUZCZUVRc1JVRkJlVVVzU1VGQmVrVXNSVUZCSzBVc1NVRkJMMFVzUTBGQmIwWXNhMEpCUVZVN1FVRkROVVlzTUVKQlFWRXNSMEZCVWl4RFFVRlpMR0ZCUVZvc1JVRkJNa0lzVFVGQk0wSTdPMEZCUlVFN1FVRkRRU3h6UWtGQlNTeFRRVUZUTEdOQlFXSXNSVUZCTmtJN1FVRkRNMElzZDBKQlFVa3NhVUpCUVdsQ08wRkJRMjVDTERSQ1FVRk5MRkZCUkdFN1FVRkZia0lzTUVKQlFVa3NVVUZCVVN4SlFVWlBPMEZCUjI1Q0xEUkNRVUZOTEZGQlFWRXNSVUZJU3p0QlFVbHVRaXcwUWtGQlRUdEJRVU5LTEN0Q1FVRlBMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeEpRVUY0UWl4RFFVRTJRanRCUVVSb1F6dEJRVXBoTEhGQ1FVRnlRanM3UVVGVFFTdzBRa0ZCVVN4RlFVRkRMRk5CUVZNc1kwRkJWaXhGUVVFd1FpeFZRVUZWTEZGQlFYQkRMRVZCUVZJN08wRkJSVUU3UVVGRFJDeHRRa0ZpUkN4TlFXRlBPMEZCUTB3c01FSkJRVTBzZFVKQlFVNHNRMEZCT0VJc1QwRkJPVUlzUlVGQmRVTXNVVUZCZGtNc1JVRkJhVVFzU1VGQmFrUXNRMEZCYzBRc2FVSkJRVk03UVVGRE4wUXNPRUpCUVZFc1MwRkJVanRCUVVORUxIRkNRVVpFTzBGQlIwUTdRVUZEUml4cFFrRjBRa1E3UVVGMVFrUXNaVUUxUWtRN08wRkJPRUpHTzBGQlEwRXNhVUpCUVVzc2IwSkJRVXc3TzBGQlJVVXNjMEpCUVZFc1IwRkJVaXhEUVVGWkxHOUNRVUZhT3p0QlFVVkJMR3RDUVVGSkxHbENRVUZwUWl4TFFVRkxMRXRCUVV3c1EwRkJWeXhMUVVGTExGRkJRVkVzU1VGQlVpeERRVUZoTEV0QlFXeENMRU5CUVZnc1EwRkJja0k3UVVGRFFTeHhRa0ZCVHl4TlFVRk5MRTFCUVU0c1EwRkJZU3hOUVVGaUxFTkJRVzlDTEdWQlFXVXNTVUZCYmtNc1EwRkJVRHRCUVVOQkxHMUNRVUZMTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzWlVGQlpTeEZRVUZ1UXl4RFFVRk1PMEZCUTBFc2EwSkJRVWtzYVVKQlFXbENMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNaVUZCWlN4TFFVRnVReXhEUVVGeVFqdEJRVU5CTEd0Q1FVRkpMRzlDUVVGS08wRkJRMEVzYTBKQlFVa3NiVUpCUVVvN1FVRkRRU3hyUWtGQlNTeHpRa0ZCU2p0QlFVTkJMR3RDUVVGSkxDdENRVUZLT3p0QlFVVkJMSE5DUVVGUkxFZEJRVklzUTBGQldTeHhRMEZCV2l4RlFVRnRSQ3hUUVVGVExFbEJRVlFzUTBGQll5eHRRa0ZCYWtVc1JVRkJjMFlzWTBGQmRFWXNSVUZCYzBjc1JVRkJkRWM3TzBGQlJVRXNiMEpCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2JVSkJRWFJETEVWQlFUSkVMR05CUVRORUxFVkJRVEpGTEVWQlFUTkZMRVZCUVN0RkxFbEJRUzlGTEVOQlFXOUdMREJDUVVGclFqczdRVUZGY0Vjc09FSkJRV01zUzBGQlN5eExRVUZNTEVOQlFWY3NZMEZCV0N4RFFVRmtPMEZCUTBFc05rSkJRV0VzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhaUVVGWkxFdEJRV2hETEVOQlFXSTdRVUZEUVN4blEwRkJaMElzV1VGQldTeGhRVUUxUWpzN1FVRkZRU3h2UWtGQlNTeG5Ra0ZCWjBJc1RVRkJUU3h2UWtGQlRpeERRVUV5UWl4UFFVRXpRaXhGUVVGdlF5eHBRa0ZCYVVJc1JVRkJja1FzUTBGQmNFSTdPMEZCUlVFc2RVSkJRVThzVFVGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhUUVVGVExFbEJRVlFzUTBGQll5eG5Ra0ZCZEVNc1JVRkJkMFFzWVVGQmVFUXNSVUZCZFVVc1NVRkJka1VzUTBGQlVEdEJRVVZFTEdWQlZrUXNSVUZWUnl4SlFWWklMRU5CVlZFc2MwSkJRV003TzBGQlJYQkNPenRCUVVWQkxITkNRVUZOTEhGQ1FVRk9MRU5CUVRSQ0xHRkJRVFZDTEVsQlFUaERMRVZCUVVNc1dVRkJXU3hWUVVGaUxFVkJRWGxDTEdGQlFXRXNTVUZCZEVNc1JVRkJPVU03TzBGQlJVRXNjVUpCUVVzc1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeEZRVUZNTzBGQlEwRXNjMEpCUVUwc1JVRkJUaXhIUVVGWExFMUJRVTBzVFVGQlRpeERRVUZoTEUxQlFXSXNRMEZCYjBJc1JVRkJjRUlzUTBGQldEczdRVUZGUVN4MVFrRkJUeXhOUVVGTkxFMUJRVTRzUTBGQllTeFZRVUZpTEVOQlFYZENMRk5CUVZNc1NVRkJWQ3hEUVVGakxIRkNRVUYwUXl4RlFVRTJSQ3hOUVVFM1JDeEZRVUZ4UlN4RlFVRnlSU3hEUVVGUU8wRkJRMFFzWlVGd1FrUXNSVUZ2UWtjc1NVRndRa2dzUTBGdlFsRXNNRUpCUVd0Q096dEJRVVY0UWl4NVEwRkJlVUk3UVVGRGRrSXNkMEpCUVUwc1YwRkVhVUk3UVVGRmRrSXNjMEpCUVVrc1VVRkJVU3hKUVVaWE8wRkJSM1pDTEhkQ1FVRk5MRkZCUVZFc1JVRklVenRCUVVsMlFpeDNRa0ZCVFR0QlFVTktMRzlEUVVGblFqdEJRVVJhTzBGQlNtbENMR2xDUVVGNlFqczdRVUZUUVN4elFrRkJUU3hMUVVGT0xFZEJRV01zVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXhqUVVGd1FpeERRVUZrTzBGQlEwRXNiMEpCUVVrc1owSkJRV2RDTEUxQlFVMHNiMEpCUVU0c1EwRkJNa0lzYzBKQlFUTkNMRVZCUVcxRUxGTkJRVk1zUlVGQk5VUXNSVUZCWjBVc1UwRkJVeXhYUVVGVUxFTkJRWEZDTEZkQlFYSkdMRU5CUVhCQ096dEJRVVZCTEhWQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExGRkJRV0lzUTBGQmMwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2EwSkJRWEJETEVWQlFYZEVMR0ZCUVhoRUxFTkJRVkE3UVVGRFJDeGxRVzVEUkN4RlFXMURSeXhKUVc1RFNDeERRVzFEVVN4NVFrRkJhVUk3UVVGRGRrSXNiMEpCUVVrc1lVRkJZU3hMUVVGTExIbENRVUZsTEVWQlFVTXNUMEZCVHl4TlFVRk5MRXRCUVdRc1JVRkJjVUlzVFVGQlRTeE5RVUZOTEUxQlFVNHNRMEZCWVN4TlFVRmlMRU5CUVc5Q0xHRkJRWEJDTEVOQlFUTkNMRVZCUVN0RUxFbEJRVWtzVFVGQlRTeEZRVUY2UlN4RlFVRm1MRU5CUVV3c1EwRkJha0k3TzBGQlJVRXNkVU5CUVhWQ0xFbEJRWFpDTEVOQlFUUkNMRXRCUVRWQ0xFZEJRVzlETEZWQlFYQkRPMEZCUTBFc2QwSkJRVkVzUlVGQlF5eFRRVUZUTEhOQ1FVRldMRVZCUVd0RExGVkJRVlVzVVVGQk5VTXNSVUZCVWp0QlFVTkVMR1ZCZUVORU96dEJRVEJEUmp0QlFVTkJMR2xDUVVGTExIRkNRVUZNT3p0QlFVVkZMSE5DUVVGUkxFZEJRVklzUTBGQldTeHhRa0ZCV2pzN1FVRkZRU3hyUWtGQlNTeDVRa0ZCZVVJc1MwRkJTeXhMUVVGTUxFTkJRVmNzUzBGQlN5eFJRVUZSTEVsQlFWSXNRMEZCWVN4TFFVRnNRaXhEUVVGWUxFTkJRVGRDTzBGQlEwRXNhMEpCUVVrc1pVRkJaU3hOUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZpTEVOQlFXOUNMSFZDUVVGMVFpeEpRVUV6UXl4RFFVRnVRanRCUVVOQkxHMUNRVUZMTEUxQlFVMHNUVUZCVGl4RFFVRmhMRTFCUVdJc1EwRkJiMElzZFVKQlFYVkNMRVZCUVRORExFTkJRVXc3UVVGRFFTeHJRa0ZCU1N4NVFrRkJlVUlzVFVGQlRTeE5RVUZPTEVOQlFXRXNUVUZCWWl4RFFVRnZRaXgxUWtGQmRVSXNTMEZCTTBNc1EwRkJOMEk3TzBGQlJVRXNiMEpCUVUwc1RVRkJUaXhEUVVGaExGVkJRV0lzUTBGQmQwSXNVMEZCVXl4SlFVRlVMRU5CUVdNc2JVSkJRWFJETEVWQlFUSkVMSE5DUVVFelJDeEZRVUZ0Uml4RlFVRnVSaXhGUVVGMVJpeEpRVUYyUml4RFFVRTBSaXd3UWtGQmEwSTdPMEZCUlRWSExHOUNRVUZKTEd0Q1FVRnJRaXhOUVVGTkxHOUNRVUZPTEVOQlFUSkNMRTlCUVROQ0xFVkJRVzlETEdsQ1FVRnBRaXhGUVVGeVJDeERRVUYwUWp0QlFVTkJMSFZDUVVGUExFMUJRVTBzVFVGQlRpeERRVUZoTEZWQlFXSXNRMEZCZDBJc1UwRkJVeXhKUVVGVUxFTkJRV01zWjBKQlFYUkRMRVZCUVhkRUxHVkJRWGhFTEVWQlFYbEZMRmxCUVhwRkxFTkJRVkE3UVVGRFJDeGxRVXBFTEVWQlNVY3NTVUZLU0N4RFFVbFJMSE5DUVVGak8wRkJRM0JDT3p0QlFVVkJMRzlDUVVGSkxGZEJRVmNzVTBGQlV5eFJRVUY0UWpzN1FVRkZRU3h2UWtGQlNTeFJRVUZLTEVWQlFXTTdRVUZEV2l3eVFrRkJVeXhqUVVGVU8wRkJRMFE3UVVGRFJDeDNRa0ZCVVN4alFVRlNPMEZCUTBRc1pVRmlSRHM3UVVGbFJqdEJRVU5CTzBGQlEwVXNjVUpCUVU4c1QwRkJVRHRCUVRGWVNqdEJRVkF3UXp0QlFXMVpNME1zVDBGdVdVMHNRMEZCVUR0QlFXOVpSRHM3T3pSRFFVVjFRaXhQTEVWQlFWTXNVU3hGUVVGVk8wRkJRM3BETEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3h0UWtGQmJVSXNUVUZCVFN4eFFrRkJUaXhEUVVFMFFpeFRRVUZUTEdGQlFYSkRMRU5CUVhaQ08wRkJRMEVzVlVGQlNTdzRRa0ZCU2p0QlFVTkJMRlZCUVVrc2RVSkJRVW83UVVGRFFTeFZRVUZKTEcxQ1FVRktPMEZCUTBFc1ZVRkJTU3hYUVVGS08wRkJRMEVzVlVGQlNTeFJRVUZSTEVWQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYTBJc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORE8wRkJRMEVzV1VGQlNTeERRVUZETEdkQ1FVRk1MRVZCUVhWQ08wRkJRM0pDTEhWQ1FVRmhMRTFCUVUwc1RVRkJUaXhEUVVGaExHTkJRV0lzUlVGQllqdEJRVU5CTEdkQ1FVRk5MSEZDUVVGT0xFTkJRVFJDTEZOQlFWTXNZVUZCY2tNc1NVRkJjMFFzUlVGQlF5eFpRVUZaTEZWQlFXSXNSVUZCZVVJc1lVRkJZU3hKUVVGMFF5eEZRVUYwUkR0QlFVTkVMRk5CU0VRc1RVRkhUenRCUVVOTUxIVkNRVUZoTEdsQ1FVRnBRaXhWUVVFNVFqdEJRVU5FT3p0QlFVVkVMSGxDUVVGcFFpeDVRa0ZCWlN4RlFVRkRMRTlCUVU4c1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4VlFVRndRaXhEUVVGU0xFVkJRWGxETEdWQlFXVXNVMEZCVXl4aFFVRnFSU3hGUVVGbUxFTkJRV3BDT3p0QlFVVkJMR0ZCUVVzc1RVRkJUU3hOUVVGT0xFTkJRV0VzVlVGQllpeEZRVUZNTzBGQlEwRXNZMEZCVFN4RlFVRk9MRWRCUVZjc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4RlFVRndRaXhEUVVGWU8wRkJRMEVzWTBGQlRTeE5RVUZPTEVOQlFXRXNWVUZCWWl4RFFVRjNRaXhUUVVGVExFbEJRVlFzUTBGQll5eHhRa0ZCZEVNc1JVRkJOa1FzWTBGQk4wUXNSVUZCTmtVc1JVRkJOMFVzUlVGQmFVWXNTVUZCYWtZc1EwRkJjMFlzTUVKQlFXdENPenRCUVVWMFJ5eHJRMEZCZDBJN1FVRkRkRUlzYTBKQlFVMHNWMEZFWjBJN1FVRkZkRUlzWjBKQlFVa3NVVUZCVVN4SlFVWlZPMEZCUjNSQ0xHdENRVUZOTEZGQlFWRXNSVUZJVVR0QlFVbDBRaXhyUWtGQlRUdEJRVU5LTERoQ1FVRm5RaXh2UWtGRVdqdEJRVVZLTEhGQ1FVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQmIwSXNZMEZCY0VJN1FVRkdTRHRCUVVwblFpeFhRVUY0UWpzN1FVRlZRU3hqUVVGSkxHdENRVUZyUWl4TlFVRk5MRzlDUVVGT0xFTkJRVEpDTEhGQ1FVRXpRaXhGUVVGclJDeHBRa0ZCYVVJc1JVRkJia1VzUlVGQmRVVXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGZEJRVFZHTEVOQlFYUkNPenRCUVVWQkxHbENRVUZQTEUxQlFVMHNUVUZCVGl4RFFVRmhMRkZCUVdJc1EwRkJjMElzVTBGQlV5eEpRVUZVTEVOQlFXTXNhMEpCUVhCRExFVkJRWGRFTEdWQlFYaEVMRU5CUVZBN1FVRkRSQ3hUUVdaRUxFVkJaVWNzU1VGbVNDeERRV1ZSTEhsQ1FVRnBRanM3UVVGRmRrSXNZMEZCU1N4blFrRkJaMElzUzBGQlN5eDVRa0ZCWlN4RlFVRkRMRTlCUVU4c2MwSkJRWE5DTEVsQlFYUkNMRU5CUVRKQ0xFdEJRVzVETEVWQlFUQkRMRTFCUVUwc1RVRkJUU3hOUVVGT0xFTkJRV0VzVFVGQllpeERRVUZ2UWl4aFFVRndRaXhEUVVGb1JDeEZRVUZ2Uml4SlFVRkpMRTFCUVUwc1JVRkJPVVlzUlVGQlppeERRVUZNTEVOQlFYQkNPenRCUVVWQkxHZERRVUZ6UWl4SlFVRjBRaXhEUVVFeVFpeExRVUV6UWl4SFFVRnRReXhoUVVGdVF6dEJRVU5CTEd0Q1FVRlJMRVZCUVVNc1UwRkJVeXh4UWtGQlZpeEZRVUZwUXl4VlFVRlZMRkZCUVRORExFVkJRVkk3UVVGRFJDeFRRWEpDUkR0QlFYTkNSQ3hQUVhCRFRTeERRVUZRTzBGQmNVTkVPenRCUVVWRU96czdPenM3T3pzNFEwRkxNRUlzWVN4RlFVRmxPMEZCUTNaRExGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpRenM3UVVGRlFTeFpRVUZKTEdGQlFXRXNZMEZCWXl4TFFVRmtMRU5CUVc5Q0xFZEJRWEJDTEVOQlFXcENPMEZCUTBFc1dVRkJTU3hYUVVGWExGZEJRVmNzUTBGQldDeEpRVUZuUWl4SlFVRm9RaXhIUVVGMVFpeFhRVUZYTEVOQlFWZ3NRMEZCZGtJc1IwRkJkVU1zUjBGQmRrTXNSMEZCTmtNc1YwRkJWeXhEUVVGWUxFTkJRVFZFTzBGQlEwRXNXVUZCU1N4WFFVRlhMRTFCUVZnc1IwRkJiMElzUTBGQmVFSXNSVUZCTWtJN1FVRkRla0lzY1VKQlFWY3NWMEZCVnl4RFFVRllMRWxCUVdkQ0xFbEJRV2hDTEVkQlFYVkNMRmRCUVZjc1EwRkJXQ3hEUVVGMlFpeEhRVUYxUXl4SFFVRjJReXhIUVVFMlF5eFhRVUZYTEVOQlFWZ3NRMEZCTjBNc1IwRkJOa1FzUjBGQk4wUXNSMEZCYlVVc1YwRkJWeXhEUVVGWUxFTkJRVGxGTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3haUVVGSkxHTkJRV01zVFVGQlRTeFJRVUZPTEVOQlFXVXNkMEpCUVdZc1EwRkJkME1zVVVGQmVFTXNRMEZCYkVJN08wRkJSVUVzV1VGQlNTeFhRVUZLTEVWQlFXbENPMEZCUTJZc2EwSkJRVkVzVjBGQlVqdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1PMEZCUTBFc1kwRkJTU3h2UWtGQmIwSXNUVUZCVFN4dFFrRkJUaXhEUVVFd1FpeFJRVUV4UWl4RFFVRjRRanM3UVVGRlFTeGpRVUZKTEdsQ1FVRktMRVZCUVhWQ08wRkJRM0pDTEc5Q1FVRlJMR2xDUVVGU08wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwdzdRVUZEUVN4blFrRkJTU3h2UWtGQmIwSXNUVUZCVFN4UlFVRk9MRU5CUVdVc09FSkJRV1lzUTBGQk9FTXNZVUZCT1VNc1EwRkJlRUk3TzBGQlJVRXNaMEpCUVVrc2FVSkJRVW9zUlVGQmRVSTdRVUZEY2tJc2MwSkJRVkVzYVVKQlFWSTdRVUZEUkN4aFFVWkVMRTFCUlU4N08wRkJSVXc3UVVGRFFUdEJRVU5CTEc5Q1FVRk5MRkZCUVU0c1EwRkJaU3gzUWtGQlppeERRVUYzUXl4UlFVRjRReXhGUVVGclJDeFhRVUZYTEVOQlFWZ3NRMEZCYkVRc1JVRkJhVVVzU1VGQmFrVXNRMEZCYzBVc2MwSkJRV003UVVGRGJFWXNjMEpCUVUwc2JVSkJRVTRzUTBGQk1FSXNVVUZCTVVJc1NVRkJjME1zVjBGQlZ5eFJRVUZxUkR0QlFVTkJMSGRDUVVGUkxGZEJRVmNzVVVGQmJrSTdRVUZEUkN4bFFVaEVMRVZCUjBjc1pVRkJUenRCUVVOU0xIVkNRVUZQTEVkQlFWQTdRVUZEUkN4bFFVeEVPMEZCVFVRN1FVRkRSanRCUVVOR08wRkJRMFlzVDBGNFEwMHNRMEZCVUR0QlFYbERSRHM3UVVGRlJEczdPenM3T3pzN096dDVRMEZQY1VJc1R5eEZRVUZUTEdNc1JVRkJaMElzVVN4RlFVRlZPenRCUVVWMFJDeGhRVUZQTzBGQlEwd3NZMEZCVFN4UlFVRlJMRWxCUkZRN1FVRkZUQ3hqUVVGTkxGRkJRVkVzU1VGR1ZEdEJRVWRNTEZsQlFVMHNVVUZCVVN4RlFVaFVPMEZCU1V3c1kwRkJUVHRCUVVOS0xHOUNRVUZWTEZsQlFWa3NVVUZCVVN4SlFVRlNMRU5CUVdFc1VVRkVMMEk3UVVGRlNpeHBRa0ZCVHl4clFrRkJhMElzVVVGQlVTeEpRVUZTTEVOQlFXRXNTMEZHYkVNN1FVRkhTaXd3UWtGQlowSXNVVUZCVVN4SlFVRlNMRU5CUVdFN1FVRklla0k3UVVGS1JDeFBRVUZRTzBGQlZVUTdPMEZCUlVRN096czdPenM3T3pzN2JVTkJUMlVzVHl4RlFVRlRMRThzUlVGQlV5eFJMRVZCUVZVN1FVRkRla01zVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVlVGQlNTeFBRVUZSTEZGQlFVUXNSMEZCWVN4UlFVRlJMRVZCUVhKQ0xFZEJRVEJDTEZGQlFWRXNTVUZCTjBNN1FVRkRRU3hWUVVGSkxFdEJRVTBzVVVGQlJDeEhRVUZoTEZGQlFWRXNTVUZCY2tJc1IwRkJORUlzVVVGQlVTeEZRVUUzUXpzN1FVRkZRU3hWUVVGSkxGZEJRVmNzVFVGQlRTeFhRVUZPTEVOQlFXdENMRTlCUVd4Q0xFTkJRV1k3TzBGQlJVRXNWVUZCU1N4blFrRkRTanRCUVVORkxIRkNRVU5CTzBGQlEwVXNiVUpCUVZNc1NVRkVXRHRCUVVWRkxHdENRVUZSTEZOQlFWTXNWMEZCVkN4RFFVRnhRaXhYUVVGeVFpeERRVUZwUXl4UlFVWXpRenRCUVVkRkxITkNRVUZaTEZOQlFWTXNUMEZCVkN4RFFVRnBRaXhQUVVndlFqdEJRVWxGTEhGQ1FVRlhMRk5CUVZNc1QwRkJWQ3hEUVVGcFFpeE5RVW81UWp0QlFVdEZMSEZDUVVGWExGTkJRVk1zVTBGTWRFSTdRVUZOUlN4MVFrRkJZU3hUUVVGVE8wRkJUbmhDTEZOQlJrWTdRVUZWUlN4dFFrRkRRVHRCUVVORkxHMUNRVUZUTEVWQlJGZzdRVUZGUlN4clFrRkJVU3hUUVVaV08wRkJSMFVzY1VKQlFWY3NVMEZJWWp0QlFVbEZMSEZDUVVGWE8wRkJTbUlzVTBGWVJqdEJRV2xDUlN4alFVTkJPMEZCUTBVc0swSkJRWEZDTEZOQlJIWkNPMEZCUlVVc2FVTkJRWFZDTEZOQlJucENPMEZCUjBVc05FSkJRV3RDTEZOQlNIQkNPMEZCU1VVc09FSkJRVzlDTEZOQlNuUkNPMEZCUzBVc2IwSkJRVlVzVTBGTVdqdEJRVTFGTEhOQ1FVRlpMRk5CVG1RN1FVRlBSU3gzUWtGQll5eFRRVkJvUWp0QlFWRkZMSEZDUVVGWE8wRkJVbUlzVTBGc1FrWTdRVUUwUWtVc01FSkJRV3RDTzBGQlEyaENMSFZDUVVGaExGTkJSRWM3UVVGRmFFSXNlVUpCUVdVc1UwRkdRenRCUVVkb1FpdzJRa0ZCYlVJc1UwRklTRHRCUVVsb1FpeHRRMEZCZVVJN1FVRktWQ3hUUVRWQ2NFSTdRVUZyUTBVc2QwSkJRV2xDTEZGQlFWRXNTVUZCVWl4RFFVRmhMRTFCUVdRc1IwRkJkMElzVTBGQmVFSXNSMEZCYjBNc1QwRnNRM1JFTzBGQmJVTkZMR3RDUVVGVkxGRkJRVkVzVVVGdVEzQkNPMEZCYjBORkxIVkNRVUZsTEV0QmNFTnFRanRCUVhGRFJTeDFRa0ZCWlN4UlFVRlJPMEZCY2tONlFpeFBRVVJCT3p0QlFYbERRU3hoUVVGUExHRkJRVkE3UVVGRFJEczdPM2RDUVdnNFEyZENPMEZCUTJZc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeGhRVUZQTEUxQlFVMHNWMEZCWWp0QlFVTkVPenRCUVVWRU96czdPenR6UWtGSlpTeFZMRVZCUVZrN1FVRkRla0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4WlFVRk5MRmRCUVU0c1IwRkJiMElzVlVGQmNFSTdRVUZGUkRzN1FVRkZSRHM3T3pzN096dDNRa0ZKWlR0QlFVTmlMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eE5RVUZOTEZOQlFXSTdRVUZEUkRzN1FVRkZSRHM3T3pzN2MwSkJTV0VzVVN4RlFVRlZPMEZCUTNKQ0xGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNXVUZCVFN4VFFVRk9MRWRCUVd0Q0xGRkJRV3hDTzBGQlEwUTdPenM3TzJ0Q1FXODJRMWtzWXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMGxETVdoRVZDeGpPMEZCUlVvc01FSkJRVmtzVDBGQldpeEZRVUZ4UWp0QlFVRkJPenRCUVVOdVFpeFRRVUZMTEU5QlFVd3NSMEZCWlN4UFFVRm1PMEZCUTBRN096czdiME5CUldVc1R5eEZRVUZUTEdsQ0xFVkJRVzFDTzBGQlF6RkRMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDT3p0QlFVVjBReXhaUVVGSkxGZEJRVmNzVFVGQlRTeFBRVUZPTEVOQlFXTXNWMEZCWkN4RFFVRXdRaXhQUVVFeFFpeEZRVUZ0UXl4cFFrRkJia01zUTBGQlpqczdRVUZGUVN4WlFVRkpMR0ZCUVdFc1UwRkJha0lzUlVGQk5FSTdRVUZETVVJc1kwRkJTU3hUUVVGVExIRkNRVUZVTEV0QlFXMURMRk5CUVhaRExFVkJRV3RFTzBGQlEyaEVMSEZDUVVGVExIRkNRVUZVTEVOQlFTdENMR05CUVM5Q0xFTkJRVGhETEUxQlFVMHNUMEZCY0VRc1JVRkJOa1FzVDBGQk4wUXNSVUZCYzBVc1NVRkJkRVVzUTBGQk1rVXNiMEpCUVZrN1FVRkRja1lzYzBKQlFWRXNVVUZCVWp0QlFVTkVMR0ZCUmtRc1JVRkZSeXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5hTEhGQ1FVRlBMRXRCUVZBN1FVRkRSQ3hoUVVwRU8wRkJTMFFzVjBGT1JDeE5RVTFQTzBGQlEwd3NaMEpCUVVrc1UwRkJVeXhWUVVGVUxFdEJRWGRDTEZOQlFUVkNMRVZCUVhWRE8wRkJRM0pETEhWQ1FVRlRMRlZCUVZRc1EwRkJiMElzWTBGQmNFSXNRMEZCYlVNc1RVRkJUU3hQUVVGNlF5eEZRVUZyUkN4UFFVRnNSQ3hGUVVFeVJDeEpRVUV6UkN4RFFVRm5SU3h2UWtGQldUdEJRVU14UlN4M1FrRkJVU3hSUVVGU08wRkJRMFFzWlVGR1JDeEZRVVZITEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTFvc2RVSkJRVThzUzBGQlVEdEJRVU5FTEdWQlNrUTdRVUZMUkN4aFFVNUVMRTFCVFU4N1FVRkRUQ3h6UWtGQlVTeERRVUZETEU5QlFVUXNRMEZCVWp0QlFVTkVPMEZCUTBZN1FVRkRSaXhUUVd4Q1JDeE5RV3RDVHp0QlFVTk1MR3RDUVVGUkxFTkJRVU1zVDBGQlJDeERRVUZTTzBGQlEwUTdRVUZEUml4UFFYcENUU3hEUVVGUU8wRkJNRUpFT3pzN1owTkJSVmNzVHl4RlFVRlRMRXNzUlVGQlR6dEJRVU14UWl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxGVkJRVWtzUTBGQlF5eE5RVUZOTEU5QlFVNHNRMEZCWXl4bFFVRnVRaXhGUVVGdlF5eE5RVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMR2RGUVVGV0xFTkJRVTQ3TzBGQlJYQkRMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanRCUVVOMFF5eFpRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMR1ZCUVdRc1EwRkJPRUlzWVVGQk9VSXNRMEZCTkVNc1EwRkJOVU1zUlVGQkswTXNWVUZCTDBNc1MwRkJPRVFzVVVGQlVTeEZRVUV4UlN4RlFVRTRSVHRCUVVNMVJTeGpRVUZKTEZWQlFWY3NVVUZCVVN4RlFVRlVMRU5CUVdFc1MwRkJZaXhEUVVGdFFpeExRVUZ1UWl4RFFVRmtPMEZCUTBFc1kwRkJTU3hSUVVGUkxFTkJRVklzVFVGQlpTeFRRVUZ1UWl4RlFVRTRRanRCUVVNMVFpeHJRa0ZCVFN4UFFVRk9MRU5CUVdNc1pVRkJaQ3hEUVVFNFFpeHpRa0ZCT1VJc1EwRkJjVVFzUzBGQmNrUXNSVUZCTkVRc1NVRkJOVVFzUTBGQmFVVXNhMEpCUVZVN1FVRkRla1VzYzBKQlFWRXNSVUZCVWl4SFFVRmhMRTlCUVU4c1ZVRkJjRUk3UVVGRFFTeHpRa0ZCVVN4SlFVRlNMRU5CUVdFc1IwRkJZaXhIUVVGdFFpeFRRVUZ1UWp0QlFVTkJMSE5DUVVGUkxFOUJRVkk3UVVGRFFTeHZRa0ZCVFN4UFFVRk9MRU5CUVdNc1pVRkJaQ3hEUVVFNFFpeFhRVUU1UWl4RFFVRXdReXhYUVVFeFF5eERRVUZ6UkN4UFFVRjBSRHRCUVVORUxHRkJURVFzUlVGTFJ5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTmFMSEZDUVVGUExFdEJRVkE3UVVGRFJDeGhRVkJFTzBGQlVVUXNWMEZVUkN4TlFWTlBPMEZCUTB3c2IwSkJRVkVzVDBGQlVqdEJRVU5FTzBGQlEwWXNVMEZrUkN4TlFXTlBPMEZCUTB3c2EwSkJRVkVzVDBGQlVqdEJRVU5FTzBGQlEwWXNUMEZzUWswc1EwRkJVRHRCUVcxQ1JEczdPM0ZEUVVWblFpeFBMRVZCUVZNc1ZTeEZRVUZaTzBGQlEzQkRMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNTeERRVUZETEUxQlFVMHNUMEZCVGl4RFFVRmpMR1ZCUVc1Q0xFVkJRVzlETEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc1owVkJRVllzUTBGQlRqczdRVUZGY0VNc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCWVR0QlFVTTVRaXhaUVVGSkxFMUJRVTBzVDBGQlRpeERRVUZqTEdWQlFXUXNRMEZCT0VJc1lVRkJPVUlzUTBGQk5FTXNRMEZCTlVNc1JVRkJLME1zVlVGQkwwTXNTMEZCT0VRc1VVRkJVU3hGUVVFeFJTeEZRVUU0UlR0QlFVTTFSU3hqUVVGSkxGVkJRVmNzVVVGQlVTeEZRVUZVTEVOQlFXRXNTMEZCWWl4RFFVRnRRaXhMUVVGdVFpeERRVUZrTzBGQlEwRXNZMEZCU1N4UlFVRlJMRU5CUVZJc1RVRkJaU3hUUVVGdVFpeEZRVUU0UWp0QlFVTTFRaXh2UWtGQlVTeEZRVUZTTEVkQlFXRXNWVUZCWWp0QlFVTkJMRzlDUVVGUkxFbEJRVklzUTBGQllTeEhRVUZpTEVkQlFXMUNMRk5CUVc1Q08wRkJRMEVzYjBKQlFWRXNUMEZCVWp0QlFVTkJMR3RDUVVGTkxFOUJRVTRzUTBGQll5eGxRVUZrTEVOQlFUaENMRmRCUVRsQ0xFTkJRVEJETEZkQlFURkRMRU5CUVhORUxFOUJRWFJFTzBGQlEwUXNWMEZNUkN4TlFVdFBPMEZCUTB3c2IwSkJRVkVzVDBGQlVqdEJRVU5FTzBGQlEwWXNVMEZXUkN4TlFWVlBPMEZCUTB3c2EwSkJRVkVzVDBGQlVqdEJRVU5FTzBGQlEwWXNUMEZrVFN4RFFVRlFPMEZCWlVRN096dDVRMEZGYjBJc1R5eEZRVUZUTEVrc1JVRkJUVHRCUVVOc1F5eFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFXRTdRVUZET1VJc1dVRkJTU3h0UWtGQmJVSTdRVUZEY2tJc1owSkJRVTBzVVVGQlVTeEZRVVJQTzBGQlJYSkNMR05CUVVrc1VVRkJVU3hKUVVaVE8wRkJSM0pDTEdkQ1FVRk5PMEZCUTBvc2JVSkJRVTg3UVVGRVNDeFhRVWhsTzBGQlRYSkNMR2RDUVVGTkxGRkJRVkU3UVVGT1R5eFRRVUYyUWp0QlFWRkJMR2RDUVVGUkxFOUJRVkk3UVVGRFFTeGpRVUZOTEU5QlFVNHNRMEZCWXl4bFFVRmtMRU5CUVRoQ0xGZEJRVGxDTEVOQlFUQkRMRmRCUVRGRExFTkJRWE5FTEdkQ1FVRjBSRHRCUVVORUxFOUJXRTBzUTBGQlVEdEJRVmxFT3pzN096dHJRa0ZKV1N4ak96czdPenM3T3pzN096czdPenM3T3pzN096dEpRM0JIVkN4VE96czdPenM3TzNkQ1FVVkJMRTBzUlVGQlVUdEJRVU5XTEdGQlFVOHNUMEZCVHl4RFFVRlFMRXRCUVdFc1QwRkJUeXhEUVVGUUxFTkJRWEJDTzBGQlEwUTdPenMwUWtGRlR5eE5MRVZCUVZFN1FVRkRaQ3hWUVVGSkxGRkJRVkVzVTBGQlV5eFBRVUZQTEVOQlFWQXNSVUZCVlN4RFFVRldMRU5CUVZRc1EwRkJXanRCUVVOQkxGVkJRVWtzVFVGQlRTeFRRVUZUTEU5QlFVOHNRMEZCVUN4RlFVRlZMRU5CUVZZc1EwRkJWQ3hEUVVGV08wRkJRMEVzVlVGQlNTeE5RVUZOTEU5QlFVOHNRMEZCVUN4RFFVRldPenRCUVVWQkxGVkJRVWtzVFVGQlRTeExRVUZXTEVWQlFXbENPMEZCUTJZc1kwRkJUeXhOUVVGTkxFdEJRVkFzUjBGQlowSXNUMEZCVHl4SlFVRjJRaXhIUVVFNFFpeEhRVUZ3UXp0QlFVTkJMR1ZCUVU4c1NVRkJVRHRCUVVORU96dEJRVVZFTEdGQlFWRXNUVUZCVFN4TFFVRk9MRWxCUVdVc1RVRkJUU3hIUVVFM1FqdEJRVU5FT3pzN01rSkJSVTBzVFN4RlFVRlJPMEZCUTJJc1lVRkJUeXhQUVVGUExFOUJRVThzUTBGQlVDeERRVUZRTEUxQlFYTkNMRWRCUVhSQ0xFbEJRVFpDTEU5QlFVOHNUMEZCVHl4RFFVRlFMRU5CUVZBc1RVRkJjMElzVDBGQlR5eFBRVUZQTEVOQlFWQXNRMEZCVUN4RFFVRXhSRHRCUVVORU96czdaME5CUlZjc1RTeEZRVUZSTzBGQlEyeENMR0ZCUVU4c1QwRkJUeXhEUVVGUUxFbEJRVmtzVDBGQlR5eERRVUZRTEVOQlFXNUNPMEZCUTBRN096dDNRa0ZGUlN4TkxFVkJRVkU3UVVGRFZDeGhRVUZQTEU5QlFVOHNRMEZCVUN4RlFVRlZMRTlCUVZZc1EwRkJhMElzVDBGQlR5eERRVUZRTEVOQlFXeENMRWxCUVN0Q0xFTkJRVU1zUTBGQmRrTTdRVUZEUkRzN096WkNRVVZSTEUwc1JVRkJVVHRCUVVObUxHRkJRVThzVDBGQlR5eERRVUZRTEVsQlFWa3NUMEZCVHl4RFFVRlFMRU5CUVc1Q08wRkJRMFE3T3p0M1FrRkZSeXhOTEVWQlFWRTdRVUZEVml4aFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGUUxFTkJRVkk3UVVGRFJEczdPM1ZDUVVWRkxFMHNSVUZCVVR0QlFVTlVMR0ZCUVU4c1QwRkJUeXhEUVVGUUxFdEJRV0VzVDBGQlR5eERRVUZRTEVOQlFYQkNPMEZCUTBRN096czdPMnRDUVVsWkxGTTdPenM3T3pzN096czdPenM3T3pzN096dEJRemREWmpzN096czdPMEZCUlVFN096czdPenM3U1VGUFRTeEhPMEZCUlVvc1pVRkJXU3hQUVVGYUxFVkJRWEZDTzBGQlFVRTdPMEZCUTI1Q0xGTkJRVXNzVDBGQlRDeEhRVUZsTEU5QlFXWTdRVUZEUVN4VFFVRkxMRk5CUVV3c1IwRkJhVUlzZVVKQlFXcENPMEZCUTBRN096czdjVU5CUldkQ0xFOHNSVUZCVXl4cFFpeEZRVUZ0UWp0QlFVTXpReXhWUVVGSkxGZEJRVmNzUzBGQlN5eFBRVUZNTEVOQlFXRXNWMEZCWWl4RFFVRjVRaXhQUVVGNlFpeEZRVUZyUXl4cFFrRkJiRU1zUTBGQlpqdEJRVU5CTEZWQlFVa3NVMEZCVXl4blFrRkJZanM3UVVGRlFTeFZRVUZKTEdGQlFXRXNVMEZCYWtJc1JVRkJORUk3UVVGRE1VSXNhVUpCUVZNc1MwRkJTeXhqUVVGTUxFTkJRVzlDTEU5QlFYQkNMRVZCUVRaQ0xGTkJRVk1zY1VKQlFYUkRMRVZCUVRaRUxHbENRVUUzUkN4RFFVRlVPMEZCUTBFc1dVRkJTU3hWUVVGVkxGZEJRVmNzWjBKQlFYcENMRVZCUVRKRE8wRkJRM3BETEdOQlFVa3NZVUZCWVN4TFFVRkxMR05CUVV3c1EwRkJiMElzVDBGQmNFSXNSVUZCTmtJc1UwRkJVeXhWUVVGMFF5eEZRVUZyUkN4cFFrRkJiRVFzUTBGQmFrSTdRVUZEUVN4alFVRkpMR1ZCUVdVc1owSkJRVzVDTEVWQlFYRkRPMEZCUTI1RExIRkNRVUZUTEZWQlFWUTdRVUZEUkR0QlFVTkdPMEZCUTBZN08wRkJSVVFzWVVGQlR5eE5RVUZRTzBGQlEwUTdPenR0UTBGRll5eFBMRVZCUVZNc1RTeEZRVUZSTEZVc1JVRkJXVHRCUVVNeFF5eFZRVUZKTEZOQlFWTXNaMEpCUVdJN1FVRkRRU3hWUVVGSkxFMUJRVW9zUlVGQldUdEJRVU5XTEdsQ1FVRlRMRTlCUVU4c1lVRkJVQ3hEUVVGeFFpeExRVUZMTEU5QlFURkNMRVZCUVcxRExFOUJRVzVETEVWQlFUUkRMRlZCUVRWRExFTkJRVlE3UVVGRFJEczdRVUZGUkN4aFFVRlBMRTFCUVZBN1FVRkRSRHM3T3pzN2EwSkJTVmtzUnpzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRelZEWmpzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN096dEpRVVZOTEVjN08wRkJSVW83T3pzN1FVRkpRU3hsUVVGWkxFOUJRVm9zUlVGQmNVSTdRVUZCUVRzN1FVRkRia0lzVVVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJUU3hIUVVGT0xFZEJRVmtzYTBKQlFWRXNUMEZCVWl4RFFVRmFPMEZCUTBFc1ZVRkJUU3hqUVVGT0xFZEJRWFZDTERaQ1FVRnRRaXhQUVVGdVFpeERRVUYyUWp0QlFVTkJMRlZCUVUwc1QwRkJUaXhIUVVGblFpeFBRVUZvUWp0QlFVTkJMRmxCUVZFc1IwRkJVaXhIUVVGakxFdEJRV1E3TzBGQlJVRTdRVUZEUVN4WlFVRlJMR3RDUVVGU08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdPemhDUVU5VkxFMHNSVUZCVVN4SExFVkJRVXNzVFN4RlFVRlJMR3RDTEVWQlFXOUNPMEZCUTJwRUxGVkJRVWtzUTBGQlF5eE5RVUZNTEVWQlFXRXNUVUZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3gxUWtGQlZpeERRVUZPTzBGQlEySXNWVUZCU1N4RFFVRkRMRWRCUVV3c1JVRkJWU3hOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEc5Q1FVRldMRU5CUVU0N08wRkJSVllzVlVGQlNTeFhRVUZYTEZOQlFXWXNSVUZCTUVJN1FVRkRlRUlzYVVKQlFWTXNjVUpCUVZjc1IwRkJXQ3hGUVVGblFpeEZRVUZvUWl4RlFVRnZRaXhGUVVGd1FpeEZRVUYzUWl4clFrRkJlRUlzUTBGQlZEdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MRmxCUVVrc1JVRkJSU3hyUTBGQlJpeERRVUZLTEVWQlFXbERPMEZCUXk5Q0xHMUNRVUZUTEhGQ1FVRlhMRTlCUVU4c1IwRkJiRUlzUlVGQmRVSXNUMEZCVHl4TFFVRTVRaXhGUVVGeFF5eFBRVUZQTEU5QlFUVkRMRVZCUVhGRUxFOUJRVThzYTBKQlFUVkVMRU5CUVZRN1FVRkRSRHRCUVVOR096dEJRVVZFTEdOQlFWRXNUVUZCVWp0QlFVTkZMR0ZCUVVzc2EwSkJRVXc3UVVGRFJTeGxRVUZMTEU5QlFVd3NRMEZCWVN4WlFVRmlMRU5CUVRCQ0xFMUJRVEZDTEVWQlFXdERMRTFCUVd4RExFVkJRVEJETEVkQlFURkRPMEZCUTBFN1FVRkRSaXhoUVVGTExFMUJRVXc3UVVGRFJTeGxRVUZMTEU5QlFVd3NRMEZCWVN4WlFVRmlMRU5CUVRCQ0xFZEJRVEZDTEVsQlFXbERMRTFCUVdwRE8wRkJRMEVzWlVGQlN5eFBRVUZNTEVOQlFXRXNXVUZCWWl4RFFVRXdRaXhOUVVFeFFqdEJRVU5CTzBGQlEwWTdRVUZEUlN4blFrRkJUU3hOUVVGTkxEUkNRVUUwUWl4TlFVRnNReXhEUVVGT08wRkJWRW83UVVGWFJEczdPemhDUVVWVExFOHNSVUZCVXp0QlFVRkJPenRCUVVOcVFpeGpRVUZSTEVkQlFWSXNRMEZCV1N4MVFrRkJXanRCUVVOQkxHTkJRVkVzUjBGQlVpeERRVUZaTEU5QlFWbzdRVUZEUVN4VlFVRkpMRU5CUVVNc1QwRkJUQ3hGUVVGakxFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNkMEpCUVZZc1EwRkJUanRCUVVOa0xGVkJRVWtzUTBGQlF5eFJRVUZSTEVsQlFXSXNSVUZCYlVJc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTdzJRa0ZCVml4RFFVRk9PMEZCUTI1Q0xGVkJRVWtzUTBGQlF5eFJRVUZSTEVWQlFXSXNSVUZCYVVJc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTd3lRa0ZCVml4RFFVRk9PMEZCUTJwQ0xGVkJRVWtzUTBGQlF5eFJRVUZSTEVsQlFXSXNSVUZCYlVJc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTdzJRa0ZCVml4RFFVRk9PMEZCUTI1Q0xHTkJRVkVzU1VGQlVpeEhRVUZsTEZGQlFWRXNTVUZCVWl4SlFVRm5RaXhGUVVFdlFqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZWTEUxQlFWWXNSVUZCY1VJN08wRkJSWFJETEdkQ1FVRlJMRWxCUVZJc1IwRkJaU3hSUVVGUkxFbEJRVklzU1VGQlowSXNSVUZCTDBJN1FVRkRRU3haUVVGSkxHTkJRVW83UVVGRFFTeFpRVUZKTEdWQlFVbzdRVUZEUVN4WlFVRkpMRTFCUVUwc1YwRkJUaXhEUVVGclFpeFBRVUZzUWl4RFFVRktMRVZCUVdkRE8wRkJRVUU3UVVGRE9VSXNaMEpCUVVrc1lVRkJZU3hOUVVGTkxHdENRVUZPTEVOQlFYbENMRTlCUVhwQ0xFTkJRV3BDTzBGQlEwRXNhMEpCUVUwc1QwRkJUaXhEUVVGakxHOUNRVUZrTEVOQlFXMURMRTlCUVc1RExFVkJRVFJETEZWQlFUVkRMRVZCUVhkRUxFbEJRWGhFTEVOQlFUWkVMRzFDUVVGWE8wRkJRM1JGTEhWQ1FVRlRMRTFCUVUwc1IwRkJUaXhEUVVGVkxHZENRVUZXTEVOQlFUSkNMRTlCUVROQ0xFVkJRVzlETEZWQlFYQkRMRU5CUVZRN1FVRkRRU3hyUWtGQlNTeFhRVUZYTEdkQ1FVRm1MRVZCUVdsRE8wRkJReTlDTEhsQ1FVRlRMRTFCUVUwc1QwRkJUaXhEUVVGakxHZENRVUYyUWp0QlFVTkJMSGRDUVVGUkxFbEJRVklzUTBGQllTeEpRVUZpTEVkQlFXOUNMRXRCUVhCQ08wRkJRMFE3UVVGRFJDeHZRa0ZCVFN4alFVRk9MRU5CUVhGQ0xHVkJRWEpDTEVOQlFYRkRMRTlCUVhKRExFVkJRVGhETEZWQlFUbERMRVZCUVRCRUxFbEJRVEZFTEVOQlFTdEVMRzlDUVVGWk8wRkJRM3BGTEhGQ1FVRkxMRWxCUVVrc1EwRkJWQ3hKUVVGakxGRkJRV1FzUlVGQmQwSTdRVUZEZEVJc05FSkJRVlVzVTBGQlV5eERRVUZVTEVOQlFWWTdRVUZEUVN4M1FrRkJUU3hQUVVGT0xFTkJRV01zWjBKQlFXUXNRMEZCSzBJc1QwRkJMMElzUlVGQmQwTXNWVUZCZUVNc1JVRkJiMFFzVFVGQmNFUXNSVUZCTkVRc1NVRkJOVVFzUTBGQmFVVXNiVUpCUVZjN1FVRkRNVVVzZDBKQlFVa3NUVUZCU2l4RlFVRlpPMEZCUTFZc09FSkJRVkVzU1VGQlVpeERRVUZoTEVsQlFXSXNSMEZCY1VJc1VVRkJVU3hKUVVGU0xFTkJRV0VzU1VGQllpeExRVUZ6UWl4VFFVRjJRaXhIUVVGdlF5eEpRVUZ3UXl4SFFVRXlReXhSUVVGUkxFbEJRVklzUTBGQllTeEpRVUUxUlR0QlFVTkJMRGhDUVVGUkxFOUJRVkk3UVVGRFJDeHhRa0ZJUkN4TlFVZFBPMEZCUTB3c01FSkJRVWtzWlVGQlpTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRWRCUVZJc1JVRkJZU3hoUVVGaExHMUNRVUV4UWl4RlFVRlNMRVZCUVhsRUxFMUJRVTBzVVVGQlVTeEZRVUYyUlN4RlFVRXlSU3hKUVVGSkxGRkJRVkVzU1VGQmRrWXNSVUZCTmtZc1RVRkJUU3hWUVVGdVJ5eEZRVUZ1UWp0QlFVTkJMRFpDUVVGUExGbEJRVkE3UVVGRFJEdEJRVU5HTEcxQ1FWSkVMRVZCVVVjc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRFdpd3lRa0ZCVHl4TFFVRlFPMEZCUTBRc2JVSkJWa1E3UVVGWFJEdEJRVU5HTEdWQlprUXNSVUZsUnl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOYUxIVkNRVUZQTEV0QlFWQTdRVUZEUkN4bFFXcENSRHRCUVd0Q1JDeGhRWGhDUkN4RlFYZENSeXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU5hTEhGQ1FVRlBMRXRCUVZBN1FVRkRSQ3hoUVRGQ1JEdEJRVVk0UWp0QlFUWkNMMElzVTBFM1FrUXNUVUUyUWs4N1FVRkRUQ3h0UWtGQlV5eE5RVUZOTEU5QlFVNHNRMEZCWXl4blFrRkJka0k3UVVGRFFTeGpRVUZKTEUxQlFVb3NSVUZCV1R0QlFVTldMRzlDUVVGUkxFbEJRVklzUTBGQllTeEpRVUZpTEVkQlFXOUNMRXRCUVhCQ08wRkJRMEVzYjBKQlFWRXNUMEZCVWp0QlFVTkVMRmRCU0VRc1RVRkhUenRCUVVOTUxHZENRVUZKTEdWQlFXVXNSVUZCUlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hIUVVGU0xFVkJRV0VzWVVGQllTeHRRa0ZCTVVJc1JVRkJVaXhGUVVGNVJDeE5RVUZOTEZGQlFWRXNSVUZCZGtVc1JVRkJNa1VzU1VGQlNTeFJRVUZSTEVsQlFYWkdMRVZCUVRaR0xFMUJRVTBzVlVGQmJrY3NSVUZCYmtJN1FVRkRRU3h0UWtGQlR5eFpRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkdMRTlCTlVOTkxFTkJRVkE3UVVFMlEwUTdPenRyUTBGRllTeFBMRVZCUVZNN1FVRkRja0lzVlVGQlNTeGxRVUZLTzBGQlEwRXNZMEZCVVN4SlFVRlNMRWRCUVdVc1VVRkJVU3hKUVVGU0xFbEJRV2RDTEVWQlFTOUNPMEZCUTBFc1ZVRkJTU3hMUVVGTExGZEJRVXdzUTBGQmFVSXNUMEZCYWtJc1EwRkJTaXhGUVVFclFqdEJRVU0zUWl4WlFVRkpMR0ZCUVdFc1MwRkJTeXhyUWtGQlRDeERRVUYzUWl4UFFVRjRRaXhEUVVGcVFqdEJRVU5CTEd0Q1FVRlZMRXRCUVVzc1QwRkJUQ3hEUVVGaExHOUNRVUZpTEVOQlFXdERMRTlCUVd4RExFVkJRVEpETEZWQlFUTkRMRU5CUVZZN1FVRkRRU3hwUWtGQlV5eExRVUZMTEVkQlFVd3NRMEZCVXl4blFrRkJWQ3hEUVVFd1FpeFBRVUV4UWl4RlFVRnRReXhWUVVGdVF5eERRVUZVTzBGQlEwRXNXVUZCU1N4WFFVRlhMR2RDUVVGbUxFVkJRV2xETzBGQlF5OUNMRzFDUVVGVExFdEJRVXNzVDBGQlRDeERRVUZoTEdkQ1FVRjBRanRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN4SlFVRmlMRWRCUVc5Q0xFdEJRWEJDTzBGQlEwUTdRVUZEUkN4aFFVRkxMR05CUVV3c1EwRkJiMElzWlVGQmNFSXNRMEZCYjBNc1QwRkJjRU1zUlVGQk5rTXNWVUZCTjBNN1FVRkRRU3hyUWtGQlZTeExRVUZMTEU5QlFVd3NRMEZCWVN4blFrRkJZaXhEUVVFNFFpeFBRVUU1UWl4RlFVRjFReXhWUVVGMlF5eEZRVUZ0UkN4TlFVRnVSQ3hEUVVGV08wRkJRMEVzV1VGQlNTeE5RVUZLTEVWQlFWazdRVUZEVml4clFrRkJVU3hKUVVGU0xFTkJRV0VzU1VGQllpeEhRVUZ4UWl4UlFVRlJMRWxCUVZJc1EwRkJZU3hKUVVGaUxFdEJRWE5DTEZOQlFYWkNMRWRCUVc5RExFbEJRWEJETEVkQlFUSkRMRkZCUVZFc1NVRkJVaXhEUVVGaExFbEJRVFZGTzBGQlEwRXNhVUpCUVU4c1NVRkJVRHRCUVVORUxGTkJTRVFzVFVGSFR6dEJRVU5NTEdsQ1FVRlBMRXRCUVZBN1FVRkRSRHRCUVVOR0xFOUJhRUpFTEUxQlowSlBPMEZCUTB3c2FVSkJRVk1zUzBGQlN5eFBRVUZNTEVOQlFXRXNaMEpCUVhSQ08wRkJRMEVzV1VGQlNTeE5RVUZLTEVWQlFWazdRVUZEVml4clFrRkJVU3hKUVVGU0xFTkJRV0VzU1VGQllpeEhRVUZ2UWl4TFFVRndRanRCUVVOQkxHbENRVUZQTEVsQlFWQTdRVUZEUkN4VFFVaEVMRTFCUjA4N1FVRkRUQ3hwUWtGQlR5eExRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkdPenM3ZFVOQlJXdENMRThzUlVGQlV6dEJRVU14UWl4aFFVRlJMRkZCUVZFc1NVRkJVaXhMUVVGcFFpeFRRVUZxUWl4SlFVRTRRaXhSUVVGUkxFbEJRVklzUTBGQllTeFJRVUZpTEV0QlFUQkNMRk5CUVhwRUxFZEJRWE5GTEVsQlFYUkZMRWRCUVRaRkxFdEJRWEJHTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3p0blEwRk5XU3hQTEVWQlFWTTdRVUZEYmtJc1ZVRkJTU3hyUWtGQmEwSXNRMEZCUXl4UlFVRkVMRVZCUVZjc1dVRkJXQ3hGUVVGNVFpeFJRVUY2UWl4RlFVRnRReXhwUWtGQmJrTXNSVUZCYzBRc1UwRkJkRVFzUTBGQmRFSTdRVUZEUVN4VlFVRkpMRmxCUVdFc1VVRkJVU3hKUVVGVUxFTkJRV1VzUzBGQlppeERRVUZ4UWl4TFFVRnlRaXhEUVVGb1FqdEJRVU5CTEZWQlFVa3NZVUZCWVN4VlFVRlZMRU5CUVZZc1EwRkJha0k3UVVGRFFTeFZRVUZKTEZWQlFWY3NVVUZCVVN4RlFVRlVMRU5CUVdFc1MwRkJZaXhEUVVGdFFpeExRVUZ1UWl4RFFVRmtPMEZCUTBFc1ZVRkJTU3hYUVVGWkxGRkJRVkVzUTBGQlVpeERRVUZvUWpzN1FVRkZRU3hWUVVGSkxGRkJRVkVzU1VGQlVpeExRVUZwUWl4VlFVRnFRaXhKUVVFclFpeFJRVUZSTEVWQlFWSXNTMEZCWlN4UlFVRTVReXhKUVVFd1JDeFJRVUZSTEVsQlFWSXNTMEZCYVVJc1RVRkJNMFVzU1VGQmNVWXNVVUZCVVN4SlFVRlNMRXRCUVdsQ0xGVkJRVEZITEVWQlFYTklPMEZCUTNCSUxHVkJRVThzUzBGQlVEdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MR1ZCUVU4c1owSkJRV2RDTEU5QlFXaENMRU5CUVhkQ0xGVkJRWGhDTEUxQlFYZERMRU5CUVVNc1EwRkJla01zU1VGQk9FTXNaMEpCUVdkQ0xFOUJRV2hDTEVOQlFYZENMRkZCUVhoQ0xFMUJRWE5ETEVOQlFVTXNRMEZCTlVZN1FVRkRSRHRCUVVOR096czdhVU5CUlZrc1RTeEZRVUZSTEVjc1JVRkJTenRCUVVONFFpeFZRVUZKTEVOQlFVTXNUVUZCVEN4RlFVRmhMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzZFVKQlFWWXNRMEZCVGp0QlFVTmlMRlZCUVVrc1YwRkJWeXhIUVVGWUxFbEJRV3RDTEVOQlFVTXNSMEZCZGtJc1JVRkJORUlzVFVGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN4dlFrRkJWaXhEUVVGT096dEJRVVUxUWl4alFVRlJMRTFCUVZJN1FVRkRSU3hoUVVGTExFZEJRVXc3UVVGRFJTeGxRVUZMTEU5QlFVd3NRMEZCWVN4eFFrRkJZaXhIUVVGeFF5eEZRVUZ5UXp0QlFVTkJMR1ZCUVVzc1QwRkJUQ3hEUVVGaExGbEJRV0lzUjBGQk5FSXNSVUZCTlVJN1FVRkRRU3hsUVVGTExFOUJRVXdzUTBGQllTeG5Ra0ZCWWl4SFFVRm5ReXhUUVVGb1F6dEJRVU5CTEdWQlFVc3NUMEZCVEN4RFFVRmhMRmxCUVdJc1EwRkJNRUlzVFVGQk1VSTdRVUZEUVN4bFFVRkxMRTlCUVV3c1EwRkJZU3haUVVGaUxFTkJRVEJDTEd0Q1FVRXhRanRCUVVOQkxHVkJRVXNzVDBGQlRDeERRVUZoTEdkQ1FVRmlPMEZCUTBFN1FVRkRSaXhoUVVGTExHdENRVUZNTzBGQlEwVXNhVUpCUVU4c1MwRkJTeXhQUVVGTUxFTkJRV0VzY1VKQlFXSXNRMEZCYlVNc1IwRkJia01zUTBGQlVEdEJRVU5CTEdWQlFVc3NUMEZCVEN4RFFVRmhMRmxCUVdJN1FVRkRRVHRCUVVOR0xHRkJRVXNzVFVGQlREdEJRVU5GTEdsQ1FVRlBMRXRCUVVzc1QwRkJUQ3hEUVVGaExGbEJRV0lzUTBGQk1FSXNSMEZCTVVJc1EwRkJVRHRCUVVOQkxHTkJRVWtzVVVGQlVTeExRVUZMTEU5QlFVd3NRMEZCWVN4blFrRkJla0lzUlVGQk1rTTdRVUZEZWtNc2FVSkJRVXNzVDBGQlRDeERRVUZoTEdkQ1FVRmlMRWRCUVdkRExGTkJRV2hETzBGQlEwRXNhVUpCUVVzc1QwRkJUQ3hEUVVGaExHZENRVUZpTzBGQlEwUTdRVUZEUkN4bFFVRkxMRTlCUVV3c1EwRkJZU3haUVVGaUxFTkJRVEJDTEUxQlFURkNPMEZCUTBFN1FVRkRSanRCUVVORkxHZENRVUZOTEUxQlFVMHNORUpCUVRSQ0xFMUJRV3hETEVOQlFVNDdRVUYwUWtvN1FVRjNRa1E3T3pzN08ydENRVWxaTEVjN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU53VFdZN096czdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN096dEpRVVZOTEUwN1FVRkZTaXhyUWtGQldTeEhRVUZhTEVWQlFXbENMRXRCUVdwQ0xFVkJRWGRDTEU5QlFYaENMRVZCUVdsRExHdENRVUZxUXl4RlFVRnhSRHRCUVVGQk96dEJRVU51UkN4UlFVRkpMRU5CUVVNc1IwRkJUQ3hGUVVGVkxFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNiMEpCUVZZc1EwRkJUanRCUVVOV0xGRkJRVWtzUTBGQlF5eFBRVUZNTEVWQlFXTXNUVUZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3g1UWtGQlZpeERRVUZPT3p0QlFVVmtMRk5CUVVzc1QwRkJUQ3hIUVVGbExFOUJRV1k3UVVGRFFTeFRRVUZMTEVkQlFVd3NSMEZCVnl4SFFVRllPMEZCUTBFc1UwRkJTeXhUUVVGTUxFTkJRV1VzUzBGQlpqdEJRVU5CTEZOQlFVc3NjMEpCUVV3c1EwRkJORUlzYTBKQlFUVkNPMEZCUTBRN096czdPRUpCUlZNc1RTeEZRVUZSTEVzc1JVRkJUenRCUVVOMlFpeFhRVUZMTEU5QlFVd3NRMEZCWVN4SlFVRmlMRU5CUVd0Q0xFVkJRVVVzVVVGQlVTeE5RVUZXTEVWQlFXdENMRTlCUVU4c1MwRkJla0lzUlVGQmJFSTdRVUZEUkRzN095dENRVVZWTEZFc1JVRkJWU3hUTEVWQlFWY3NTeXhGUVVGUExFMHNSVUZCVVN4UkxFVkJRVlU3UVVGRGRrUXNWVUZCU1N4aFFVRmhMRk5CUVdwQ0xFVkJRVFJDTzBGQlF6RkNMRzFDUVVGWExFdEJRVXNzWlVGQlRDeExRVUY1UWl4RFFVRndRenRCUVVORU8wRkJRMFFzVlVGQlNTeFBRVUZQTEcxQ1FVRlRMRkZCUVZRc1JVRkJiVUlzVTBGQmJrSXNSVUZCT0VJc1MwRkJPVUlzUlVGQmNVTXNUVUZCY2tNc1JVRkJOa01zVVVGQk4wTXNRMEZCV0R0QlFVTkJMRmRCUVVzc1MwRkJUQ3hEUVVGWExFbEJRVmdzUTBGQlowSXNTVUZCYUVJN1FVRkRSRHM3T3l0Q1FVVlZMRWtzUlVGQlRUdEJRVU5tTEZWQlFVa3NaMEpCUVdkQ0xFdEJRVXNzUzBGQlRDeERRVUZYTEU5QlFWZ3NRMEZCYlVJc1NVRkJia0lzUTBGQmNFSTdRVUZEUVN4WFFVRkxMRXRCUVV3c1EwRkJWeXhOUVVGWUxFTkJRV3RDTEdGQlFXeENMRVZCUVdsRExFTkJRV3BETzBGQlEwUTdPenR0UTBGRll5eFBMRVZCUVZNc1R5eEZRVUZUTzBGQlFVRTdPMEZCUXk5Q0xHRkJRVThzYzBKQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqdEJRVU4wUXl4WlFVRkpMRlZCUVZVc1JVRkJaRHRCUVVOQkxGbEJRVWtzVFVGQlN5eFBRVUZNTEVOQlFXRXNUVUZCWWl4TFFVRjNRaXhEUVVFMVFpeEZRVUVyUWp0QlFVTTNRaXhsUVVGTExFbEJRVWtzUTBGQlZDeEpRVUZqTEUxQlFVc3NUMEZCYmtJc1JVRkJORUk3UVVGRE1VSXNaMEpCUVVrc1UwRkJVeXhSUVVGUkxFZEJRVklzUTBGQldTeGpRVUZhTEVOQlFUSkNMRTFCUVVzc1QwRkJUQ3hEUVVGaExFTkJRV0lzUlVGQlowSXNUVUZCTTBNc1JVRkJiVVFzVDBGQmJrUXNSVUZCTkVRc1RVRkJTeXhQUVVGTUxFTkJRV0VzUTBGQllpeEZRVUZuUWl4TFFVRTFSU3hEUVVGaU8wRkJRMEVzYjBKQlFWRXNTVUZCVWl4RFFVRmhMRTFCUVdJN1FVRkRSRHRCUVVORUxEUkNRVUZSTEVkQlFWSXNRMEZCV1N4UFFVRmFMRVZCUVhGQ0xFbEJRWEpDTEVOQlFUQkNMRlZCUVVNc1VVRkJSQ3hGUVVGak8wRkJRM1JETEc5Q1FVRlJMRkZCUVZJN1FVRkRSQ3hYUVVaRUxFVkJSVWNzYVVKQlFWTTdRVUZEVml4dFFrRkJUeXhMUVVGUU8wRkJRMFFzVjBGS1JEdEJRVXRFTEZOQlZrUXNUVUZWVHp0QlFVTk1MR3RDUVVGUkxFTkJRVU1zVDBGQlJDeERRVUZTTzBGQlEwUTdRVUZEUml4UFFXWk5MRU5CUVZBN1FVRm5Ra1E3T3p0clEwRkZZU3hQTEVWQlFWTXNUeXhGUVVGVExGVXNSVUZCV1R0QlFVTXhReXhWUVVGSkxGVkJRVlVzUlVGQlpEdEJRVU5CTEZkQlFVc3NTVUZCU1N4RFFVRlVMRWxCUVdNc1MwRkJTeXhMUVVGdVFpeEZRVUV3UWp0QlFVTjRRaXhuUWtGQlVTeEpRVUZTTEVOQlFXRXNTMEZCU3l4TFFVRk1MRU5CUVZjc1EwRkJXQ3hGUVVGakxGRkJRV1FzUTBGQmRVSXNUMEZCZGtJc1JVRkJaME1zVDBGQmFFTXNSVUZCZVVNc1ZVRkJla01zUTBGQllqdEJRVU5FT3p0QlFVVkVMR0ZCUVU4c1MwRkJTeXhyUWtGQlRDeERRVUYzUWl4UFFVRjRRaXhEUVVGblF5eFBRVUZvUXl4RFFVRlFPMEZCUTBRN096dHpRMEZGYVVJN1FVRkRhRUlzVlVGQlNTeGhRVUZoTEVWQlFXcENPenRCUVVWQkxGVkJRVWtzUzBGQlN5eExRVUZNTEVOQlFWY3NUVUZCV0N4TFFVRnpRaXhEUVVFeFFpeEZRVUUyUWp0QlFVTXpRaXhoUVVGTExFbEJRVWtzUTBGQlZDeEpRVUZqTEV0QlFVc3NTMEZCYmtJc1JVRkJNRUk3UVVGRGVFSXNjVUpCUVZjc1NVRkJXQ3hEUVVGblFpeExRVUZMTEV0QlFVd3NRMEZCVnl4RFFVRllMRVZCUVdNc1VVRkJPVUk3UVVGRFJEdEJRVU5FTEdWQlFVOHNTMEZCU3l4SFFVRk1MRU5CUVZNc1MwRkJWQ3hEUVVGbExFbEJRV1lzUlVGQmNVSXNWVUZCY2tJc1EwRkJVRHRCUVVORUxFOUJURVFzVFVGTFR6dEJRVU5NTEdWQlFVOHNRMEZCUXl4RFFVRlNPMEZCUTBRN1FVRkRSanM3TzNORFFVVnBRaXhSTEVWQlFWVTdRVUZETVVJc1YwRkJTeXhKUVVGSkxFTkJRVlFzU1VGQll5eExRVUZMTEV0QlFXNUNMRVZCUVRCQ08wRkJRM2hDTEZsQlFVa3NUMEZCVHl4TFFVRkxMRXRCUVV3c1EwRkJWeXhEUVVGWUxFVkJRV01zVVVGQmNrSXNUVUZCYlVNc1QwRkJUeXhSUVVGUUxFTkJRWFpETEVWQlFYbEVPMEZCUTNaRUxHbENRVUZQTEV0QlFVc3NTMEZCVEN4RFFVRlhMRU5CUVZnc1EwRkJVRHRCUVVORU8wRkJRMFk3UVVGRFJDeFpRVUZOTEUxQlFVMHNkMEpCUVhkQ0xGRkJRWGhDTEVkQlFXMURMR3RDUVVGNlF5eERRVUZPTzBGQlEwUTdPenN5UTBGRmMwSXNhMElzUlVGQmIwSTdRVUZEZWtNc1ZVRkJTU3hEUVVGRExHdENRVUZNTEVWQlFYbENPMEZCUTNaQ0xEWkNRVUZ4UWl4blFrRkJja0k3UVVGRFJEdEJRVU5FTEdOQlFWRXNhMEpCUVZJN1FVRkRSU3hoUVVGTExHZENRVUZNTzBGQlEwVXNaVUZCU3l4clFrRkJUQ3hIUVVFd1FpdzRRa0ZCTVVJN1FVRkRRVHRCUVVOR0xHRkJRVXNzWjBKQlFVdzdRVUZEUlN4bFFVRkxMR3RDUVVGTUxFZEJRVEJDTERoQ1FVRXhRanRCUVVOQk8wRkJRMFlzWVVGQlN5eHBRa0ZCVER0QlFVTkZMR1ZCUVVzc2EwSkJRVXdzUjBGQk1FSXNLMEpCUVRGQ08wRkJRMEU3UVVGRFJqdEJRVU5GTEdkQ1FVRk5MRTFCUVUwc2QwSkJRWGRDTEd0Q1FVRTVRaXhEUVVGT08wRkJXRW83UVVGaFJEczdPemhDUVVWVExFc3NSVUZCVHp0QlFVTm1MRmRCUVVzc1MwRkJUQ3hIUVVGaExFVkJRV0k3TzBGQlJVRXNWMEZCU3l4SlFVRkpMRU5CUVZRc1NVRkJZeXhMUVVGa0xFVkJRWEZDTzBGQlEyNUNMRmxCUVVrc1QwRkJUeXhOUVVGTkxFTkJRVTRzUTBGQldEdEJRVU5CTEZsQlFVa3NTMEZCU3l4UlFVRk1MRXRCUVd0Q0xGTkJRWFJDTEVWQlFXbERPMEZCUXk5Q0xHVkJRVXNzVVVGQlRDeEhRVUZuUWl4TFFVRkxMR1ZCUVV3c1MwRkJlVUlzUTBGQmVrTTdRVUZEUkR0QlFVTkVMRmxCUVVrc1JVRkJSU3c0UWtGQlJpeERRVUZLTEVWQlFUWkNPMEZCUXpOQ0xHbENRVUZQTEcxQ1FVRlRMRXRCUVVzc1VVRkJaQ3hGUVVGM1FpeExRVUZMTEZOQlFUZENMRVZCUVhkRExFdEJRVXNzUzBGQk4wTXNSVUZCYjBRc1MwRkJTeXhOUVVGNlJDeEZRVUZwUlN4TFFVRkxMRkZCUVhSRkxFTkJRVkE3UVVGRFJEdEJRVU5FTEdGQlFVc3NTMEZCVEN4RFFVRlhMRWxCUVZnc1EwRkJaMElzU1VGQmFFSTdRVUZEUkR0QlFVTkdPenM3WjBOQlJWYzdRVUZEVml4aFFVRlBMRXRCUVVzc1MwRkJUQ3hEUVVGWExFbEJRVmdzUTBGQlowSXNWVUZCVXl4RFFVRlVMRVZCUVZrc1EwRkJXaXhGUVVGbE8wRkJRM0JETEZsQlFVa3NTVUZCU1N4RlFVRkZMRkZCUVZZc1EwRkJiMElzU1VGQlNTeEpRVUZKTEVWQlFVVXNVVUZCVmp0QlFVTndRaXhsUVVGVExFbEJRVWtzUTBGQlRDeEhRVUZWTEVOQlFVTXNRMEZCV0N4SFFVRnBRaXhKUVVGSkxFTkJRVXdzUjBGQlZTeERRVUZXTEVkQlFXTXNRMEZCZEVNN1FVRkRSQ3hQUVVoTkxFTkJRVkE3UVVGSlJEczdPenM3YTBKQlNWa3NUVHM3T3pzN096czdPenM3T3pzN096czdPMEZETDBobU96czdPMGxCUlUwc1ZUdEJRVVZLTEhkQ1FVRmpPMEZCUVVFN08wRkJRMW9zVTBGQlN5eG5Ra0ZCVEN4SFFVRjNRaXhKUVVGNFFqdEJRVU5CTEZOQlFVc3NUVUZCVEN4SFFVRmpMRVZCUVdRN1FVRkRSRHM3T3p0M1FrRkZXVHRCUVVOWUxHRkJRVThzUzBGQlN5eFBRVUZhTzBGQlEwUXNTenR6UWtFd1FsVXNUU3hGUVVGUk8wRkJRMnBDTEZWQlFVa3NUMEZCVHl4UFFVRlBMRTlCUVZBc1EwRkJaU3hKUVVFeFFqdEJRVU5CTEZWQlFVa3NORUpCUVdkQ0xFbEJRV2hDTEVOQlFVb3NSVUZCTWtJN1FVRkRla0lzWVVGQlN5eFBRVUZNTEVkQlFXVXNjMEpCUVZVc1NVRkJWaXhGUVVGblFpeEpRVUV2UWp0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxHRkJRVXNzVDBGQlRDeEhRVUZsTEZOQlFXWTdRVUZEUkR0QlFVTkdPenM3ZDBKQkwwSlZPMEZCUTFRc1lVRkJUeXhMUVVGTExFdEJRVm83UVVGRFJDeExPM05DUVN0Q1VTeEhMRVZCUVVzN1FVRkRXaXhWUVVGSkxFOUJRVThzU1VGQlNTeEpRVUZLTEVWQlFWZzdRVUZEUVN4VlFVRkpMRTFCUVUwc1QwRkJUeXhMUVVGTExFOUJRVXdzUlVGQlVDeERRVUZXTzBGQlEwRXNWVUZCU1N4SlFVRkpMRTFCUVVvc1MwRkJaU3hEUVVGdVFpeEZRVUZ6UWp0QlFVTndRaXhqUVVGTkxFMUJRVTBzUjBGQldqdEJRVU5FTzBGQlEwUXNWVUZCU1N4UlFVRlJMRTlCUVU4c1MwRkJTeXhSUVVGTUxFdEJRV3RDTEVOQlFYcENMRU5CUVZvN1FVRkRRU3hWUVVGSkxFMUJRVTBzVFVGQlRpeExRVUZwUWl4RFFVRnlRaXhGUVVGM1FqdEJRVU4wUWl4blFrRkJVU3hOUVVGTkxFdEJRV1E3UVVGRFJEdEJRVU5FTEZkQlFVc3NTMEZCVEN4SFFVRmhMRTFCUVUwc1IwRkJUaXhIUVVGWkxFdEJRVm9zUjBGQmIwSXNSMEZCY0VJc1IwRkJNRUlzUzBGQlN5eFhRVUZNTEVWQlFYWkRPMEZCUTBRN096dDNRa0Y0UTFrN1FVRkRXQ3hoUVVGUExFdEJRVXNzVDBGQldqdEJRVU5FTEVzN2MwSkJkME5WTEUwc1JVRkJVVHRCUVVOcVFpeFZRVUZKTEU5QlFVOHNUMEZCVUN4RFFVRmxMRWxCUVdZc1EwRkJiMElzVVVGQmNFSXNTMEZCYVVNc1UwRkJja01zUlVGQlowUTdRVUZET1VNc1lVRkJTeXhQUVVGTUxFZEJRV1VzZDBKQlFWa3NUMEZCVHl4UFFVRlFMRU5CUVdVc1NVRkJaaXhEUVVGdlFpeFJRVUZ3UWl4RFFVRTJRaXhYUVVFM1FpeERRVUY1UXl4UlFVRnlSQ3hGUVVFclJDeE5RVUU1UlR0QlFVTkVPMEZCUTBZN096dDNRa0V4UTFVN1FVRkRWQ3hoUVVGUExFdEJRVXNzUzBGQldqdEJRVU5FTEVzN2MwSkJNRU5STEUwc1JVRkJVVHRCUVVObUxGVkJRVWtzVlVGQlZTeFBRVUZQTEU5QlFYSkNPMEZCUTBFc1ZVRkJTU3hSUVVGUkxFbEJRVklzUTBGQllTeExRVUZpTEV0QlFYVkNMRk5CUVROQ0xFVkJRWE5ETzBGQlEzQkRMR0ZCUVVzc1MwRkJUQ3hIUVVGaExGRkJRVkVzU1VGQlVpeERRVUZoTEV0QlFXSXNRMEZCYlVJc1dVRkJhRU03UVVGRFJEdEJRVU5HT3pzN2QwSkJOME5aTzBGQlExZ3NZVUZCVHl4TFFVRkxMRTlCUVZvN1FVRkRSQ3hMTzNOQ1FUWkRWU3hOTEVWQlFWRTdRVUZEYWtJc1ZVRkJTU3hQUVVGUExFOUJRVkFzUTBGQlpTeEpRVUZtTEVOQlFXOUNMRkZCUVhCQ0xFdEJRV2xETEZOQlFYSkRMRVZCUVdkRU8wRkJRemxETEdGQlFVc3NUMEZCVEN4SFFVRmxMRTlCUVU4c1QwRkJVQ3hEUVVGbExFbEJRV1lzUTBGQmIwSXNVVUZCY0VJc1EwRkJOa0lzVjBGQk4wSXNRMEZCZVVNc1VVRkJlRVE3UVVGRFJEdEJRVU5HT3pzN2QwSkJMME5WTzBGQlExUXNZVUZCVHl4TFFVRkxMRXRCUVZvN1FVRkRSQ3hMTzNOQ1FTdERVU3hITEVWQlFVczdRVUZEV2l4WlFVRk5MRWxCUVVrc1NVRkJTaXhGUVVGT08wRkJRMEVzVlVGQlNTeFZRVUZWTEU5QlFVOHNTVUZCU1N4VlFVRktMRVZCUVZBc1EwRkJaRHRCUVVOQkxGVkJRVWtzVVVGQlVTeE5RVUZTTEV0QlFXMUNMRU5CUVhaQ0xFVkJRVEJDTzBGQlEzaENMR3RDUVVGVkxFMUJRVTBzVDBGQmFFSTdRVUZEUkR0QlFVTkVMRmRCUVVzc1MwRkJUQ3hIUVVGaExGTkJRVk1zVDBGQlR5eEpRVUZKTEZGQlFVb3NSVUZCVUN4SlFVRjVRaXhQUVVGc1F5eERRVUZpTzBGQlEwUTdPenQzUWtGd1JHRTdRVUZEV2l4aFFVRlBMRXRCUVVzc1VVRkJXanRCUVVORUxFczdjMEpCYjBSWExFY3NSVUZCU3p0QlFVTm1MRmRCUVVzc1VVRkJUQ3hIUVVGblFpeFBRVUZQTEVsQlFVa3NTVUZCU2l4SFFVRlhMRTFCUVZnc1JVRkJVQ3hEUVVGb1FqdEJRVU5FT3pzN096dHJRa0ZKV1N4Vk96czdPenM3T3pzN096czdPenM3T3pzN1FVTTNSbVk3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBsQlIwMHNTVHRCUVVWS0xHZENRVUZaTEZGQlFWb3NSVUZCYzBJc1UwRkJkRUlzUlVGQmFVTXNTMEZCYWtNc1JVRkJkME1zVFVGQmVFTXNSVUZCWjBRc1VVRkJhRVFzUlVGQk1FUTdRVUZCUVRzN1FVRkRlRVFzVTBGQlN5eFJRVUZNTEVkQlFXZENMRkZCUVdoQ08wRkJRMEVzVTBGQlN5eFpRVUZNTEVOQlFXdENMRk5CUVd4Q08wRkJRMEVzVTBGQlN5eFJRVUZNTEVkQlFXZENMRkZCUVdoQ08wRkJRMEVzVTBGQlN5eExRVUZNTEVkQlFXRXNTMEZCWWp0QlFVTkJMRk5CUVVzc1RVRkJUQ3hIUVVGakxFMUJRV1E3UVVGRFJEczdPenRwUTBGRldTeFRMRVZCUVZjN1FVRkRkRUlzVlVGQlNTeEZRVUZGTERSRFFVRnJReXhuUkVGQmJFTXNTVUZCWjBZc1owUkJRV3hHTEVOQlFVb3NSVUZCSzBnN1FVRkROMGdzV1VGQlNTeFpRVUZaTEZWQlFWVXNVMEZCTVVJN1FVRkRRU3huUWtGQlVTeFRRVUZTTzBGQlEwVXNaVUZCU3l4alFVRk1PMEZCUTBVc2FVSkJRVXNzVTBGQlRDeEhRVUZwUWl4blEwRkJNRUlzVlVGQlZTeFRRVUZ3UXl4RlFVRXJReXhWUVVGVkxGRkJRWHBFTEVWQlFXMUZMRlZCUVZVc1RVRkJOMFVzUTBGQmFrSTdRVUZEUVR0QlFVTkdMR1ZCUVVzc1UwRkJURHRCUVVORkxHbENRVUZMTEZOQlFVd3NSMEZCYVVJc1owTkJRWE5DTEZOQlFYUkNMRU5CUVdwQ08wRkJRMEU3UVVGRFJqdEJRVU5GTEdsQ1FVRkxMRk5CUVV3c1IwRkJhVUlzZDBKQlFXTXNWVUZCVlN4VFFVRjRRaXhGUVVGdFF5eFZRVUZWTEZGQlFUZERMRVZCUVhWRUxGVkJRVlVzVFVGQmFrVXNRMEZCYWtJN1FVRlNTanRCUVZWRUxFOUJXa1FzVFVGWlR6dEJRVU5NTEdGQlFVc3NVMEZCVEN4SFFVRnBRaXhUUVVGcVFqdEJRVU5FTzBGQlEwWTdPenMyUWtGRlVTeFBMRVZCUVZNc1R5eEZRVUZUTEZVc1JVRkJXVHRCUVVOeVF5eFZRVUZKTEZGQlFWTXNWVUZCUkN4SFFVRmxMRkZCUVZFc1JVRkJka0lzUjBGQk5FSXNVVUZCVVN4SlFVRm9SRHRCUVVOQkxGVkJRVWtzYjBKQlFVbzdRVUZEUVN4alFVRlJMRXRCUVVzc1MwRkJZanRCUVVORkxHRkJRVXNzVVVGQlREdEJRVU5GT3p0QlFVVkdMR0ZCUVVzc1UwRkJURHRCUVVORkxHTkJRVWtzTkVKQlFXZENMRXRCUVdoQ0xFTkJRVW9zUlVGQk5FSTdRVUZETVVJc1owSkJRVWtzVjBGQlZ5eFJRVUZSTEdWQlFWSXNRMEZCZDBJc2QwSkJRWGhDTEVOQlFXbEVMRGhDUVVGclFpeExRVUZzUWl4RFFVRnFSQ3hEUVVGbU8wRkJRMEVzWjBKQlFVa3NZVUZCWVN4VFFVRnFRaXhGUVVFMFFqdEJRVU14UWl3MFFrRkJZeXhSUVVGUkxHVkJRVklzUTBGQmQwSXNZMEZCZUVJc1EwRkJkVU1zVVVGQmRrTXNRMEZCWkR0QlFVTkVPMEZCUTBZc1YwRk1SQ3hOUVV0UE8wRkJRMHdzWjBKQlFVa3NUVUZCVFN4TFFVRk9MRU5CUVZrc1MwRkJXaXhGUVVGdFFpeERRVUZ1UWl4TlFVRXdRaXhUUVVFNVFpeEZRVUY1UXp0QlFVTjJReXcwUWtGQll5eFJRVUZSTEdWQlFWSXNRMEZCZDBJc1kwRkJlRUlzUTBGQmRVTXNPRUpCUVd0Q0xFdEJRV3hDTEVOQlFYWkRMRU5CUVdRN1FVRkRSRHRCUVVOR08wRkJRMFFzWTBGQlNTeG5Ra0ZCWjBJc1MwRkJTeXhOUVVGNlFpeEZRVUZwUXp0QlFVTXZRanRCUVVORU96dEJRVVZFTEdsQ1FVRlBMR2RDUVVGUU96dEJRVVZHTEdGQlFVc3NWVUZCVER0QlFVTkZMR05CUVVrc1kwRkJTanM3UVVGRlFTeGpRVUZKTERSQ1FVRm5RaXhMUVVGb1FpeERRVUZLTEVWQlFUUkNPMEZCUXpGQ0xHZENRVUZKTEZsQlFWY3NVVUZCVVN4bFFVRlNMRU5CUVhkQ0xIZENRVUY0UWl4RFFVRnBSQ3c0UWtGQmEwSXNTMEZCYkVJc1EwRkJha1FzUTBGQlpqdEJRVU5CTEc5Q1FVRlJMRkZCUVZFc1pVRkJVaXhEUVVGM1FpeGxRVUY0UWl4RFFVRjNReXhUUVVGNFF5eERRVUZTTzBGQlEwUXNWMEZJUkN4TlFVZFBPMEZCUTB3c1owSkJRVWtzVFVGQlRTeExRVUZPTEVOQlFWa3NTMEZCV2l4RlFVRnRRaXhEUVVGdVFpeE5RVUV3UWl4VFFVRTVRaXhGUVVGNVF6dEJRVU4yUXl4elFrRkJVU3hSUVVGUkxHVkJRVklzUTBGQmQwSXNaVUZCZUVJc1EwRkJkME1zT0VKQlFXdENMRXRCUVd4Q0xFTkJRWGhETEVOQlFWSTdRVUZEUkR0QlFVTkdPMEZCUTBRc1kwRkJTU3hWUVVGVkxGTkJRV1FzUlVGQmVVSTdRVUZEZGtJc2IwSkJRVkVzWjBOQlFXOUNMRXRCUVhCQ0xFTkJRVkk3UVVGRFJEdEJRVU5FTEdOQlFVa3NWVUZCVlN4TFFVRkxMRTFCUVc1Q0xFVkJRVEpDTzBGQlEzcENPMEZCUTBRN08wRkJSVVFzYVVKQlFVOHNaMEpCUVZBN1FVRjJRMG83TzBGQk1FTkJMRlZCUVVrc1MwRkJTeXhUUVVGTUxFTkJRV1VzV1VGQlppeERRVUUwUWl4UFFVRTFRaXhGUVVGeFF5eFBRVUZ5UXl4RlFVRTRReXhMUVVGTExFdEJRVzVFTEVWQlFUQkVMRXRCUVVzc1RVRkJMMFFzUTBGQlNpeEZRVUUwUlR0QlFVTXhSU3hsUVVGUExFdEJRVXNzVVVGQldqdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MR1ZCUVU4c1owSkJRVkE3UVVGRFJEdEJRVU5HT3pzN096dHJRa0ZIV1N4Sk96czdPenM3T3pzN096czdPenM3T3pzN096dEJRM1JHWmpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUYxUWtFN096czdTVUZKVFN4ak96czdPenM3T3pzN1FVRkZTanM3T3pzN05FSkJTMUVzVXl4RlFVRlhPMEZCUTJwQ0xGVkJRVWtzVlVGQlZTeFBRVUZXTEVOQlFXdENMRWxCUVd4Q0xFMUJRVFJDTEVOQlFVTXNRMEZCYWtNc1JVRkJiME03UVVGRGJFTXNaVUZCVHl4SlFVRlFPMEZCUTBRc1QwRkdSQ3hOUVVWUE8wRkJRMHdzV1VGQlNTeFZRVUZWTEU5QlFWWXNRMEZCYTBJc1MwRkJiRUlzVFVGQk5rSXNRMEZCUXl4RFFVRnNReXhGUVVGeFF6dEJRVU51UXl4cFFrRkJUeXhMUVVGUU8wRkJRMFFzVTBGR1JDeE5RVVZQTzBGQlEwd3NhVUpCUVU4c1owSkJRVkE3UVVGRFJEdEJRVU5HTzBGQlEwWTdPenM3TzJ0Q1FVbFpMR003T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGFFUm1PenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYVkNRVHM3T3p0SlFVbE5MR003T3pzN096czdPenRCUVVWS096czdPenMwUWtGTFVTeFRMRVZCUVZjN1FVRkRha0lzVlVGQlNTeFZRVUZWTEU5QlFWWXNRMEZCYTBJc1MwRkJiRUlzVFVGQk5rSXNRMEZCUXl4RFFVRnNReXhGUVVGeFF6dEJRVU51UXl4bFFVRlBMRXRCUVZBN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRDeFpRVUZKTEZWQlFWVXNUMEZCVml4RFFVRnJRaXhKUVVGc1FpeE5RVUUwUWl4RFFVRkRMRU5CUVdwRExFVkJRVzlETzBGQlEyeERMR2xDUVVGUExFbEJRVkE3UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVEN4cFFrRkJUeXhuUWtGQlVEdEJRVU5FTzBGQlEwWTdRVUZEUmpzN096czdhMEpCU1Zrc1l6czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5vUkdZN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCZFVKQk96czdPMGxCU1Uwc1pUczdPenM3T3pzN08wRkJSVW83T3pzN096UkNRVXRSTEZNc1JVRkJWenRCUVVOcVFpeFhRVUZMTEVsQlFVa3NRMEZCVkN4SlFVRmpMRk5CUVdRc1JVRkJlVUk3UVVGRGRrSXNXVUZCU1N4VlFVRlZMRU5CUVZZc1RVRkJhVUlzWjBKQlFYSkNMRVZCUVhWRE8wRkJRM0pETEdsQ1FVRlBMRlZCUVZVc1EwRkJWaXhEUVVGUU8wRkJRMFE3UVVGRFJqdEJRVU5FTEdGQlFVOHNaMEpCUVZBN1FVRkRSRHM3T3pzN2EwSkJTVmtzWlRzN096czdPenM3T3pzN096czdPenM3TzBGRE4wTm1PenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenM3TzBsQlJVMHNhVUk3UVVGRlNpdzJRa0ZCV1N4VFFVRmFMRVZCUVhWQ08wRkJRVUU3TzBGQlEzSkNMRk5CUVVzc1UwRkJUQ3hIUVVGcFFpeDVRa0ZCYWtJN1FVRkRRU3hSUVVGSkxGVkJRVlVzVTBGQlZpeExRVUYzUWl4VFFVRTFRaXhGUVVGMVF6dEJRVU55UXl4clFrRkJXU3hWUVVGVkxGTkJRWFJDTzBGQlEwUTdRVUZEUkN4blFrRkJXU3hMUVVGTExHTkJRVXdzUTBGQmIwSXNVMEZCY0VJc1EwRkJXanRCUVVOQkxGTkJRVXNzVTBGQlRDeEhRVUZwUWl4VFFVRnFRanRCUVVORU96czdPMjFEUVVWakxGTXNSVUZCVnp0QlFVTjRRaXhWUVVGSkxFMUJRVTBzVDBGQlRpeERRVUZqTEZWQlFWVXNRMEZCVml4RFFVRmtMRU5CUVVvc1JVRkJhVU03UVVGREwwSXNhMEpCUVZVc1EwRkJWaXhKUVVGbExFdEJRVXNzWTBGQlRDeERRVUZ2UWl4VlFVRlZMRU5CUVZZc1EwRkJjRUlzUTBGQlpqdEJRVU5FTEU5QlJrUXNUVUZGVHp0QlFVTk1MRmxCUVVrc1ZVRkJWU3hEUVVGV0xFVkJRV0VzVTBGQllpeExRVUV5UWl4alFVRXZRaXhGUVVFclF6dEJRVU0zUXl4dlFrRkJWU3hEUVVGV0xFbEJRV1VzYjBOQlFUQkNMRlZCUVZVc1EwRkJWaXhGUVVGaExGTkJRWFpETEVWQlFXdEVMRlZCUVZVc1EwRkJWaXhGUVVGaExGRkJRUzlFTEVWQlFYbEZMRlZCUVZVc1EwRkJWaXhGUVVGaExFMUJRWFJHTEVOQlFXWTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3h2UWtGQlZTeERRVUZXTEVsQlFXVXNkMEpCUVdNc1ZVRkJWU3hEUVVGV0xFVkJRV0VzVTBGQk0wSXNSVUZCYzBNc1ZVRkJWU3hEUVVGV0xFVkJRV0VzVVVGQmJrUXNSVUZCTmtRc1ZVRkJWU3hEUVVGV0xFVkJRV0VzVFVGQk1VVXNRMEZCWmp0QlFVTkVPMEZCUTBZN08wRkJSVVFzVlVGQlNTeFZRVUZWTEVOQlFWWXNUVUZCYVVJc1UwRkJja0lzUlVGQlowTTdRVUZET1VJc1dVRkJTU3hOUVVGTkxFOUJRVTRzUTBGQll5eFZRVUZWTEVOQlFWWXNRMEZCWkN4RFFVRktMRVZCUVdsRE8wRkJReTlDTEc5Q1FVRlZMRU5CUVZZc1NVRkJaU3hMUVVGTExHTkJRVXdzUTBGQmIwSXNWVUZCVlN4RFFVRldMRU5CUVhCQ0xFTkJRV1k3UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVEN4alFVRkpMRlZCUVZVc1EwRkJWaXhGUVVGaExGTkJRV0lzUzBGQk1rSXNZMEZCTDBJc1JVRkJLME03UVVGRE4wTXNjMEpCUVZVc1EwRkJWaXhKUVVGbExHOURRVUV3UWl4VlFVRlZMRU5CUVZZc1JVRkJZU3hUUVVGMlF5eEZRVUZyUkN4VlFVRlZMRU5CUVZZc1JVRkJZU3hSUVVFdlJDeEZRVUY1UlN4VlFVRlZMRU5CUVZZc1JVRkJZU3hOUVVGMFJpeERRVUZtTzBGQlEwUXNWMEZHUkN4TlFVVlBPMEZCUTB3c2MwSkJRVlVzUTBGQlZpeEpRVUZsTEhkQ1FVRmpMRlZCUVZVc1EwRkJWaXhGUVVGaExGTkJRVE5DTEVWQlFYTkRMRlZCUVZVc1EwRkJWaXhGUVVGaExGRkJRVzVFTEVWQlFUWkVMRlZCUVZVc1EwRkJWaXhGUVVGaExFMUJRVEZGTEVOQlFXWTdRVUZEUkR0QlFVTkdPMEZCUTBZN1FVRkRSQ3hoUVVGUExGTkJRVkE3UVVGRFJEczdPMmxEUVVWWkxFOHNSVUZCVXl4UExFVkJRVk1zU3l4RlFVRlBMRTBzUlVGQlVTeFJMRVZCUVZVc1NTeEZRVUZOTEVzc1JVRkJUenRCUVVOdVJTeFZRVUZKTEVOQlFVTXNVVUZCVEN4RlFVRmxPMEZCUTJJc2JVSkJRVmNzUzBGQlN5eFRRVUZNTEVOQlFXVXNRMEZCWml4RFFVRllPMEZCUTBFc1pVRkJUeXhMUVVGTExGTkJRVXdzUTBGQlpTeERRVUZtTEVOQlFWQTdRVUZEUVN4blFrRkJVU3hMUVVGTExGTkJRVXdzUTBGQlpTeERRVUZtTEVOQlFWSTdRVUZEUkRzN1FVRkZSQ3hoUVVGUExFVkJRVVVzYlVOQlFVWXNTVUZCSzBJc1JVRkJSU3dyUTBGQlJpeERRVUV2UWl4SFFVRXlSU3hQUVVGUExFbEJRVkFzUzBGQlowSXNVMEZCYkVjc1JVRkJPRWM3UVVGRE5VY3NaVUZCVHl4TFFVRkxMRmxCUVV3c1EwRkJhMElzVDBGQmJFSXNSVUZCTWtJc1QwRkJNMElzUlVGQmIwTXNTMEZCY0VNc1JVRkJNa01zVFVGQk0wTXNSVUZCYlVRc1MwRkJTeXhEUVVGTUxFTkJRVzVFTEVWQlFUUkVMRXRCUVVzc1EwRkJUQ3hEUVVFMVJDeEZRVUZ4UlN4TFFVRkxMRU5CUVV3c1EwRkJja1VzUTBGQlVEdEJRVU5FTzBGQlEwUXNWVUZCU1N4VlFVRlZMRk5CUVdRc1JVRkJlVUk3UVVGRGRrSXNaVUZCVHl4RlFVRkZMRzlEUVVGR0xFbEJRV2RETEVWQlFVVXNaMFJCUVVZc1EwRkJhRU1zUjBGQk5rVXNUMEZCVHl4TFFVRlFMRXRCUVdsQ0xGTkJRWEpITEVWQlFXbElPMEZCUXk5SExHdENRVUZSTEV0QlFVc3NXVUZCVEN4RFFVRnJRaXhQUVVGc1FpeEZRVUV5UWl4UFFVRXpRaXhGUVVGdlF5eExRVUZ3UXl4RlFVRXlReXhOUVVFelF5eEZRVUZ0UkN4TlFVRk5MRU5CUVU0c1EwRkJia1FzUlVGQk5rUXNUVUZCVFN4RFFVRk9MRU5CUVRkRUxFVkJRWFZGTEUxQlFVMHNRMEZCVGl4RFFVRjJSU3hEUVVGU08wRkJRMFE3UVVGRFJqczdRVUZGUkN4VlFVRkpMR0ZCUVdNc1QwRkJUeXhKUVVGUUxFdEJRV2RDTEZOQlFXcENMRWRCUVRoQ0xFbEJRVGxDTEVkQlFYRkRMRXRCUVVzc1dVRkJUQ3hEUVVGclFpeFBRVUZzUWl4RlFVRXlRaXhQUVVFelFpeEZRVUZ2UXl4TFFVRndReXhGUVVFeVF5eE5RVUV6UXl4RFFVRjBSRHRCUVVOQkxGVkJRVWtzYjBKQlFVbzdRVUZEUVN4VlFVRkpMRlZCUVZVc1UwRkJaQ3hGUVVGNVFqdEJRVU4yUWl4elFrRkJaU3hQUVVGUExFdEJRVkFzUzBGQmFVSXNVMEZCYkVJc1IwRkJLMElzUzBGQkwwSXNSMEZCZFVNc1RVRkJUU3haUVVGT0xFTkJRVzFDTEU5QlFXNUNMRVZCUVRSQ0xFOUJRVFZDTEVWQlFYRkRMRXRCUVhKRExFVkJRVFJETEUxQlFUVkRMRU5CUVhKRU8wRkJRMFE3UVVGRFJDeGhRVUZQTEV0QlFVc3NVMEZCVEN4RFFVRmxMRkZCUVdZc1JVRkJlVUlzUTBGQlF5eFZRVUZFTEVWQlFXRXNWMEZCWWl4RFFVRjZRaXhEUVVGUU8wRkJRMFE3T3pzN08ydENRVWxaTEdsQ096czdPenM3T3pzN096czdPenM3T3pzN1FVTXpRMlk3T3pzN096dEJRVVZCT3pzN08wbEJTVTBzVXpzN1FVRkZTanM3T3pzN096dEJRVTlCTEhGQ1FVRlpMRk5CUVZvc1JVRkJkVUlzVVVGQmRrSXNSVUZCYVVNc1RVRkJha01zUlVGQmVVTTdRVUZCUVRzN1FVRkRka01zVTBGQlN5eFRRVUZNTEVkQlFXbENMRk5CUVdwQ08wRkJRMEVzVTBGQlN5eFJRVUZNTEVkQlFXZENMRkZCUVdoQ08wRkJRMEVzVTBGQlN5eE5RVUZNTEVkQlFXTXNUVUZCWkR0QlFVTkJMRk5CUVVzc1UwRkJUQ3hIUVVGcFFpeDVRa0ZCYWtJN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN08ybERRVXRoTEU4c1JVRkJVeXhQTEVWQlFWTTdRVUZETjBJc1kwRkJVU3hMUVVGTExGTkJRV0lzU1VGQk1FSXNSVUZCUlN4VFFVRlRMRTlCUVZnc1JVRkJNVUk3UVVGRFFTeFZRVUZKTEZGQlFWRXNVVUZCVVN4TFFVRkxMRk5CUVdJc1EwRkJXanRCUVVOQkxGVkJRVWtzYTBKQlFVbzdPMEZCUlVFc1ZVRkJTU3hMUVVGTExGRkJRVXdzUzBGQmEwSXNTVUZCZEVJc1JVRkJORUk3UVVGRE1VSXNXVUZCU1N4RFFVRkZMRTFCUVUwc1QwRkJUaXhEUVVGakxFdEJRVXNzVFVGQmJrSXNRMEZCVGl4RlFVRnRRenRCUVVOcVF5eHpRa0ZCV1N4UlFVRlJMRkZCUVZJc1EwRkJhVUlzUzBGQlN5eE5RVUYwUWl4RlFVRTRRaXhSUVVGUkxFVkJRWFJETEVOQlFWbzdRVUZEUVN4cFFrRkJUeXhMUVVGTExGTkJRVXdzUTBGQlpTeExRVUZMTEZGQlFYQkNMRVZCUVRoQ0xFTkJRVU1zVTBGQlJDeEZRVUZaTEV0QlFWb3NRMEZCT1VJc1EwRkJVRHRCUVVORU8wRkJRMFk3TzBGQlJVUXNZVUZCVHl4TFFVRkxMRk5CUVV3c1EwRkJaU3hMUVVGTExGRkJRWEJDTEVWQlFUaENMRU5CUVVNc1MwRkJTeXhOUVVGT0xFVkJRV01zUzBGQlpDeERRVUU1UWl4RFFVRlFPMEZCUTBRN096dExRUzlFU0RzN096czdPenM3T3pzN096czdPenM3T3pzN096czdhMEpCYlVWbExGTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTTFRMlk3T3pzN096dEJRVVZCT3pzN08wbEJTVTBzY1VJN096dEJRVVZLT3pzN096czdPMEZCVDBFc2FVTkJRVmtzVTBGQldpeEZRVUYxUWl4UlFVRjJRaXhGUVVGcFF5eE5RVUZxUXl4RlFVRjVRenRCUVVGQk8wRkJRVUVzSzBwQlEycERMRk5CUkdsRExFVkJRM1JDTEZGQlJITkNMRVZCUTFvc1RVRkVXVHRCUVVWNFF6czdRVUZGUkRzN096czdPenM3TzJsRFFVdGhMRThzUlVGQlV5eFBMRVZCUVZNN1FVRkROMElzVlVGQlNTeHBRa0ZCYVVJc1VVRkJVU3hKUVVGU0xFdEJRV2xDTEZkQlFYUkRPMEZCUTBFc1ZVRkJTU3hwUWtGQmFVSXNVVUZCVVN4alFVRlNMRU5CUVhWQ0xGRkJRVkVzU1VGQkwwSXNRMEZCY2tJN1FVRkRRU3hWUVVGSkxHbENRVUZwUWl4alFVRnlRaXhGUVVGeFF6dEJRVU51UXl4blRFRkJNRUlzVDBGQk1VSXNSVUZCYlVNc1QwRkJia003UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEN4bFFVRlBMRXRCUVZBN1FVRkRSRHRCUVVOR096czdkMEpCZGtSSU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenRyUWtFeVJHVXNjVUk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE0wUm1PenM3TzBGQlEwRTdPenM3UVVGRFFUczdRVUZEUVRzN096dEJRVU5CT3pzN096czdTVUZGVFN4ak96czdRVUZGU2l3d1FrRkJXU3hSUVVGYUxFVkJRWE5DTEdWQlFYUkNMRVZCUVhWRExHTkJRWFpETEVWQlFYVkVPMEZCUVVFN08wRkJRVUU3TzBGQlJYSkVMRmRCUVVzc1VVRkJUQ3hIUVVGblFpeFJRVUZvUWp0QlFVTkJMRmRCUVVzc1pVRkJUQ3hIUVVGMVFpeGxRVUYyUWp0QlFVTkJMRmRCUVVzc1owSkJRVXdzUjBGQmQwSXNVMEZCZUVJN1FVRkRRU3hYUVVGTExIRkNRVUZNTEVkQlFUWkNMRVZCUVRkQ08wRkJRMEVzVjBGQlN5eFpRVUZNTEVkQlFXOUNMRVZCUVhCQ08wRkJRMEVzVjBGQlN5eGpRVUZNTEVkQlFYTkNMR05CUVhSQ08wRkJVSEZFTzBGQlVYUkVPenM3TzNsRFFWVnZRanRCUVVOdVFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFVTXNUMEZCUkN4RlFVRlZMRTFCUVZZc1JVRkJjVUk3TzBGQlJYUkRMR05CUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWl4RFFVRjVRaXh6UWtGQmVrSXNSVUZCYVVRc1NVRkJha1FzUTBGQmMwUXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRMMFFzWjBKQlFVMHNaMEpCUVU0c1IwRkJlVUlzUzBGQmVrSTdPMEZCUlVFc2FVSkJRVThzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRWRCUVhKQ0xFTkJRWGxDTEdkQ1FVRjZRaXhEUVVGUU8wRkJRMFFzVTBGS1JDeEZRVWxITEVsQlNrZ3NRMEZKVVN4VlFVRkRMRk5CUVVRc1JVRkJaVHRCUVVOeVFpeGpRVUZKTEZOQlFWTXNVMEZCWWp0QlFVTkJMR2RDUVVGTkxFMUJRVTRzUjBGQlowSXNWMEZCVnl4VFFVRmFMRWRCUVhsQ0xFVkJRWHBDTEVkQlFUaENMRTFCUVRkRE96dEJRVVZCTEdsQ1FVRlBMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWl4RFFVRjVRaXh2UWtGQmVrSXNRMEZCVUR0QlFVTkVMRk5CVkVRc1JVRlRSeXhKUVZSSUxFTkJVMUVzVlVGQlF5eFpRVUZFTEVWQlFXdENPMEZCUTNoQ0xHTkJRVWtzWVVGQllTeFpRVUZxUWp0QlFVTkJMR2RDUVVGTkxIRkNRVUZPTEVkQlFTdENMR1ZCUVdVc1UwRkJhRUlzUjBGQk5rSXNSVUZCTjBJc1IwRkJhME1zVlVGQmFFVTdPMEZCUlVFc1owSkJRVTBzYVVKQlFVNHNSMEZCTUVJc1NVRkJNVUlzUTBGQkswSXNXVUZCVFR0QlFVTnVRenRCUVVORUxGZEJSa1E3UVVGSFJDeFRRV2hDUkR0QlFXbENSQ3hQUVc1Q1RTeERRVUZRTzBGQmIwSkVPenM3ZVVOQlJXOUNMRThzUlVGQlV5eFZMRVZCUVZrN1FVRkJRVHM3UVVGRGVFTXNZVUZCVHl4elFrRkJXU3hWUVVGRExFOUJRVVFzUlVGQlZTeE5RVUZXTEVWQlFYRkNPenRCUVVWMFF5eFpRVUZKTEdOQlFVbzdRVUZEUVN4WlFVRkpMRlZCUVVvc1JVRkJaMEk3UVVGRFpDeGpRVUZKTEUxQlFVMHNhVUpCUVU0c1EwRkJkMElzVDBGQmVFSXNRMEZCU2l4RlFVRnpRenRCUVVOd1F5eHJRa0ZCVFN4UlFVRk9MRU5CUVdVc1kwRkJaaXhEUVVFNFFpeFBRVUU1UWl4RlFVRjFReXhKUVVGMlF5eERRVUUwUXl4VlFVRlRMRTlCUVZRc1JVRkJhMEk3UVVGRE5VUTdPMEZCUlVFc2MwSkJRVkVzVDBGQlVqdEJRVU5FTEdGQlNrUXNSVUZKUnl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOYUxIRkNRVUZQTEV0QlFWQTdRVUZEUVRzN096dEJRVWxFTEdGQlZrUTdRVUZYUkN4WFFWcEVMRTFCV1U4N1FVRkRUQ3h2UWtGQlVTeFBRVUZTTzBGQlEwUTdRVUZEUml4VFFXaENSQ3hOUVdkQ1R6dEJRVU5NTEdOQlFVa3NUVUZCVFN4VlFVRk9MRU5CUVdsQ0xFOUJRV3BDTEVOQlFVb3NSVUZCSzBJN1FVRkROMElzYTBKQlFVMHNXVUZCVGl4RFFVRnRRaXhQUVVGdVFpeEZRVUUwUWl4SlFVRTFRaXhEUVVGcFF5eHZRa0ZCV1R0QlFVTXpReXh6UWtGQlVTeEpRVUZTTEVOQlFXRXNVVUZCWWl4SFFVRjNRaXhSUVVGNFFqdEJRVU5CTEhOQ1FVRlJMRTlCUVZJN1FVRkRSQ3hoUVVoRUxFVkJSMGNzVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEV2l4eFFrRkJUeXhMUVVGUU8wRkJRMFFzWVVGTVJEdEJRVTFFTEZkQlVFUXNUVUZQVHp0QlFVTk1MRzlDUVVGUkxFOUJRVkk3UVVGRFJEdEJRVU5HTzBGQlJVWXNUMEZvUTAwc1EwRkJVRHRCUVdsRFJEczdPMmREUVVWWExFOHNSVUZCVXl4cFFpeEZRVUZ0UWp0QlFVTjBReXhWUVVGSkxGZEJRVmNzUlVGQlpqczdRVUZGUVN4VlFVRkpMRXRCUVVzc1owSkJRVXdzUzBGQk1FSXNVMEZCT1VJc1JVRkJlVU03UVVGRGRrTXNhVUpCUVZNc1ZVRkJWQ3hIUVVGelFpeExRVUZMTEZsQlFVd3NRMEZCYTBJc1MwRkJTeXhuUWtGQmRrSXNRMEZCZEVJN1FVRkRSRHM3UVVGRlJDeGxRVUZUTEhGQ1FVRlVMRWRCUVdsRExFdEJRVXNzZDBKQlFVd3NRMEZCT0VJc1QwRkJPVUlzUlVGQmRVTXNhVUpCUVhaRExFTkJRV3BET3p0QlFVVkJMR0ZCUVU4c1VVRkJVRHRCUVVORU96czdiVU5CUldNc1R5eEZRVUZUTzBGQlEzUkNMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDTzBGQlEzUkRMRmxCUVVrc1VVRkJVU3hKUVVGU0xFTkJRV0VzUzBGQllpeERRVUZ0UWl4TFFVRnVRaXhGUVVFd1FpeE5RVUV4UWl4SFFVRnRReXhEUVVGMlF5eEZRVUV3UXp0QlFVTjRReXhuUWtGQlRTeFJRVUZPTEVOQlFXVXNlVUpCUVdZc1EwRkJlVU1zVVVGQlVTeEpRVUZxUkN4RlFVRjFSQ3hKUVVGMlJDeERRVUUwUkN4elFrRkJZenRCUVVONFJTeG5Ra0ZCU1N4bFFVRmxMRkZCUVZFc1NVRkJVaXhEUVVGaExFMUJRV2hETEVWQlFYZERPMEZCUTNSRExITkNRVUZSTEU5QlFWSTdRVUZEUkN4aFFVWkVMRTFCUlU4N1FVRkRUQ3h4UWtGQlR5eDVRMEZCVUR0QlFVTkVPMEZCUTBZc1YwRk9SQ3hGUVUxSExGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlExb3NiVUpCUVU4c1MwRkJVRHRCUVVORUxGZEJVa1E3UVVGVFJDeFRRVlpFTEUxQlZVODdRVUZEVEN4clFrRkJVU3hQUVVGU08wRkJRMFE3UVVGRFJpeFBRV1JOTEVOQlFWQTdRVUZsUkRzN08zRkRRVVZuUWl4UExFVkJRVk1zVlN4RlFVRlpMRTBzUlVGQlVUdEJRVU0xUXl4VlFVRkpMRkZCUVZFc1NVRkJXanRCUVVOQkxHRkJRVThzYzBKQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqdEJRVU4wUXl4WlFVRkpMR0ZCUVdFc1RVRkJha0lzUlVGQmVVSTdRVUZEZGtJc1kwRkJTU3hwUWtGQmFVSXNVVUZCVVN4SlFVRlNMRXRCUVdsQ0xGZEJRWFJETzBGQlEwRXNZMEZCU1N4cFFrRkJhVUlzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRkZCUVZFc1NVRkJOMElzUTBGQmNrSTdRVUZEUVN4alFVRkpMR2xDUVVGcFFpeGpRVUZ5UWl4RlFVRnhRenRCUVVOdVF5eHJRa0ZCVFN4elFrRkJUaXhEUVVFMlFpeFBRVUUzUWl4RlFVRnpReXhKUVVGMFF5eERRVUV5UXl4WlFVRk5PMEZCUXk5RExITkNRVUZSTEU5QlFWSTdRVUZEUkN4aFFVWkVMRVZCUlVjc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRFdpeHhRa0ZCVHl4TFFVRlFPMEZCUTBRc1lVRktSRHRCUVV0RUxGZEJUa1FzVFVGTlR6dEJRVU5NTEc5Q1FVRlJMRTlCUVZJN1FVRkRSRHRCUVVOR0xGTkJXa1FzVFVGWlR6dEJRVU5NTEdOQlFVa3NUVUZCVFN4cFFrRkJUaXhEUVVGM1FpeFBRVUY0UWl4RFFVRktMRVZCUVhORE8wRkJRM0JETEd0Q1FVRk5MRkZCUVU0c1EwRkJaU3hqUVVGbUxFTkJRVGhDTEU5QlFUbENMRVZCUVhWRExFbEJRWFpETEVOQlFUUkRMRlZCUVVNc1QwRkJSQ3hGUVVGaE8wRkJRM1pFTEhOQ1FVRlJMRTlCUVZJN1FVRkRSQ3hoUVVaRUxFVkJSVWNzVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEV2l4eFFrRkJUeXhMUVVGUU8wRkJRMFFzWVVGS1JEdEJRVXRFTEZkQlRrUXNUVUZOVHp0QlFVTk1MRzlDUVVGUkxFOUJRVkk3UVVGRFJEdEJRVU5HTzBGQlEwWXNUMEY0UWswc1EwRkJVRHRCUVhsQ1JEczdPekpEUVVWelFpeFBMRVZCUVZNN1FVRkRPVUlzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqdEJRVU16UXl4WlFVRkpMRXRCUVVzc1VVRkJVU3hGUVVGU0xFTkJRVmNzUzBGQldDeERRVUZwUWl4SFFVRnFRaXhEUVVGVU8wRkJRMEVzV1VGQlNTeFpRVUZaTEVkQlFVY3NUMEZCU0N4RFFVRlhMR05CUVZnc1EwRkJhRUk3UVVGRFFTeFpRVUZKTERKQ1FVRXlRaXhqUVVGakxFTkJRVU1zUTBGQk9VTTdRVUZEUVN4WlFVRkpMR2xDUVVGcFFpeE5RVUZOTEdOQlFVNHNRMEZCY1VJc1VVRkJVU3hKUVVFM1FpeERRVUZ5UWp0QlFVTkJMRmxCUVVrc01rSkJRVEpDTEdOQlFTOUNMRVZCUVN0RE8wRkJRVUU3UVVGRE4wTXNaVUZCUnl4SFFVRklPMEZCUTBFc1owSkJRVWtzWjBKQlFXZENMRWRCUVVjc1EwRkJTQ3hKUVVGUkxFbEJRVklzUjBGQlpTeEhRVUZITEVOQlFVZ3NRMEZCWml4SFFVRjFRaXhIUVVGMlFpeEhRVUUyUWl4SFFVRkhMRU5CUVVnc1EwRkJha1E3UVVGRFFTeHJRa0ZCVFN4UlFVRk9MRU5CUVdVc2MwSkJRV1lzUTBGQmMwTXNZVUZCZEVNc1JVRkJjVVFzVVVGQlVTeEpRVUZTTEVOQlFXRXNWVUZCYkVVc1JVRkJPRVVzU1VGQk9VVXNRMEZCYlVZc1dVRkJUVHRCUVVOMlJpeHZRa0ZCVFN4bFFVRk9MRU5CUVhOQ0xHdENRVUYwUWl4RFFVRjVReXhoUVVGNlF5eEZRVUYzUkN4UlFVRlJMRWxCUVZJc1EwRkJZU3hWUVVGeVJUdEJRVU5CTzBGQlEwUXNZVUZJUkN4RlFVZEhMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMW9zY1VKQlFVOHNTMEZCVUR0QlFVTkVMR0ZCVEVRN1FVRklOa003UVVGVE9VTTdRVUZEUml4UFFXWk5MRU5CUVZBN1FVRm5Ra1E3T3p0clEwRkZZVHRCUVVOYUxGVkJRVWtzWVVGQllTeExRVUZMTEZGQlFVd3NRMEZCWXl4aFFVRmtMRVZCUVdwQ08wRkJRMEVzVlVGQlNTeFRRVUZUTEVWQlFXSTdPMEZCUlVFc1YwRkJTeXhKUVVGSkxFTkJRVlFzU1VGQll5eFZRVUZrTEVWQlFUQkNPMEZCUTNoQ0xHVkJRVThzU1VGQlVDeERRVUZaTEdkRFFVRnZRaXhYUVVGWExFTkJRVmdzUlVGQll5eFJRVUZzUXl4RFFVRmFPMEZCUTBRN08wRkJSVVFzWVVGQlR5eE5RVUZRTzBGQlEwUTdPenR4UTBGRlowSTdRVUZEWml4VlFVRkpMRmxCUVZrc1MwRkJTeXhsUVVGTUxFTkJRWEZDTEdGQlFYSkRPMEZCUTBFc1ZVRkJTU3hwUWtGQmFVSXNSVUZCY2tJN08wRkJSVUVzVjBGQlN5eEpRVUZKTEVOQlFWUXNTVUZCWXl4VFFVRmtMRVZCUVhsQ08wRkJRM1pDTEZsQlFVa3NZMEZCWXl4VlFVRlZMRU5CUVZZc1JVRkJZU3hWUVVFdlFqdEJRVU5CTEZsQlFVa3NaVUZCWlN4UFFVRm1MRU5CUVhWQ0xGZEJRWFpDTEUxQlFYZERMRU5CUVVNc1EwRkJOME1zUlVGQlowUTdRVUZET1VNc2VVSkJRV1VzU1VGQlppeERRVUZ2UWl4WFFVRndRanRCUVVORU8wRkJRMFk3TzBGQlJVUXNZVUZCVHl4alFVRlFPMEZCUTBRN096czJRMEZGZDBJc1R5eEZRVUZUTEZVc1JVRkJXVHRCUVVNMVF5eFZRVUZKTEdWQlFVbzdPMEZCUlVFc1ZVRkJTU3hWUVVGS0xFVkJRV2RDTzBGQlEyUXNXVUZCU1N4WlFVRlpMRXRCUVVzc1pVRkJUQ3hEUVVGeFFpeGpRVUZ5UWl4RFFVRnZReXhSUVVGUkxFVkJRVFZETEVOQlFXaENPMEZCUTBFc2FVSkJRVk1zUzBGQlN5eHhRa0ZCVEN4RFFVRXlRaXhUUVVFelFpeERRVUZVTzBGQlEwUXNUMEZJUkN4TlFVZFBPMEZCUTB3c1dVRkJTU3hqUVVGakxFdEJRVXNzWlVGQlRDeERRVUZ4UWl4alFVRnlRaXhEUVVGdlF5eFJRVUZSTEVsQlFUVkRMRU5CUVd4Q08wRkJRMEVzYVVKQlFWTXNTMEZCU3l4eFFrRkJUQ3hEUVVFeVFpeFhRVUV6UWl4RFFVRlVPMEZCUTBRN1FVRkRSQ3hoUVVGUExFMUJRVkE3UVVGRFJEczdPMjFEUVVWakxFa3NSVUZCVFR0QlFVTnVRaXhWUVVGSkxGbEJRVmtzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCV0N4RFFVRm9RanRCUVVOQkxHRkJRVThzVlVGQlZTeERRVUZXTEUxQlFXbENMRk5CUVdwQ0xFbEJRVGhDTEZOQlFWTXNTMEZCU3l4bFFVRk1MRU5CUVhGQ0xGVkJRWEpDTEVkQlFXdERMRXRCUVdoR08wRkJRMFE3T3pzclFrRkZWU3hQTEVWQlFWTTdRVUZEYkVJc1ZVRkJTU3hyUWtGQmEwSXNRMEZCUXl4WlFVRkVMRVZCUVdVc1UwRkJaaXhGUVVFd1FpeFJRVUV4UWl4RFFVRjBRanRCUVVOQkxGVkJRVWtzV1VGQllTeFJRVUZSTEVsQlFWUXNRMEZCWlN4TFFVRm1MRU5CUVhGQ0xFdEJRWEpDTEVOQlFXaENPMEZCUTBFc1ZVRkJTU3hoUVVGaExGVkJRVlVzUTBGQlZpeERRVUZxUWpzN1FVRkZRU3hoUVVGUExHZENRVUZuUWl4UFFVRm9RaXhEUVVGM1FpeFZRVUY0UWl4TlFVRjNReXhEUVVGRExFTkJRV2hFTzBGQlEwUTdPenN5UWtGRlRTeEhMRVZCUVVzN1FVRkRWaXhWUVVGSkxGZEJRVmNzU1VGQlNTeExRVUZLTEVOQlFWVXNSMEZCVml4RFFVRm1PMEZCUTBFc1lVRkJUeXhUUVVGVExFTkJRVlFzU1VGQll5eEpRVUZrTEVkQlFYRkNMRk5CUVZNc1EwRkJWQ3hEUVVGeVFpeEhRVUZ0UXl4SFFVRnVReXhIUVVGNVF5eFRRVUZUTEVOQlFWUXNRMEZCYUVRN1FVRkRSRHM3TzJsRFFVVlpMRThzUlVGQlV6dEJRVU53UWl4VlFVRkpMRkZCUVZFc1NVRkJVaXhMUVVGcFFpeFJRVUZ5UWl4RlFVRXJRanRCUVVNM1FpeGxRVUZQTEV0QlFVc3NVVUZCVEN4RFFVRmpMRzlDUVVGa0xFTkJRVzFETEZGQlFWRXNTVUZCVWl4RFFVRmhMRTFCUVdoRUxFTkJRVkE3UVVGRFJEczdRVUZGUkN4VlFVRkpMRkZCUVZFc1NVRkJVaXhMUVVGcFFpeFZRVUZxUWl4SlFVRXJRaXhSUVVGUkxFbEJRVklzUTBGQllTeE5RVUZpTEV0QlFYZENMRk5CUVRORUxFVkJRWE5GTzBGQlEzQkZMR1ZCUVU4c1MwRkJTeXhSUVVGTUxFTkJRV01zYjBKQlFXUXNRMEZCYlVNc1VVRkJVU3hKUVVGU0xFTkJRV0VzVFVGQmFFUXNRMEZCVUR0QlFVTkVPenRCUVVWRUxGVkJRVWtzYzBKQlFWVXNVVUZCVVN4SlFVRnNRaXhGUVVGM1FpeEpRVUY0UWl4TFFVRnBReXhUUVVGeVF5eEZRVUZuUkR0QlFVTTVReXhsUVVGUExFdEJRVXNzVVVGQlRDeERRVUZqTEc5Q1FVRmtMRU5CUVcxRExGRkJRVkVzU1VGQk0wTXNRMEZCVUR0QlFVTkVMRTlCUmtRc1RVRkZUenRCUVVOTUxHVkJRVThzUzBGQlN5eFJRVUZNTEVOQlFXTXNiMEpCUVdRc1EwRkJiVU1zUzBGQlN5eE5RVUZNTEVOQlFWa3NVVUZCVVN4SlFVRndRaXhEUVVGdVF5eERRVUZRTzBGQlEwUTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenR6UTBGUGEwSXNUeXhGUVVGVE8wRkJRM3BDTEZWQlFVa3NWMEZCVnl4UlFVRlJMRWxCUVZJc1MwRkJhVUlzVVVGQmFFTTdRVUZEUVN4VlFVRkpMR2RDUVVGblFpeHpRa0ZCVlN4UlFVRlJMRWxCUVd4Q0xFVkJRWGRDTEVsQlFYaENMRXRCUVdsRExGTkJRWEpFTzBGQlEwRXNWVUZCU1N4alFVRmpMSE5DUVVGVkxGRkJRVkVzUlVGQmJFSXNSVUZCYzBJc1NVRkJkRUlzUzBGQkswSXNVMEZCYWtRN1FVRkRRU3hWUVVGSkxHbENRVUZwUWl3MFFrRkJaMElzVVVGQlVTeEZRVUY0UWl4RFFVRnlRanM3UVVGRlFTeGhRVUZSTEZsQlFWa3NZVUZCV2l4SlFVRTJRaXhYUVVFNVFpeEpRVUVyUXl4WlFVRlpMR0ZCUVZvc1NVRkJOa0lzWTBGQk5VVXNTVUZCSzBZc1VVRkJVU3hKUVVGU0xFdEJRV2xDTEZkQlFXaElMRWxCUVN0SUxGRkJRVkVzU1VGQlVpeExRVUZwUWl4UlFVRjJTanRCUVVORU96dEJRVVZFT3pzN096czdPM2REUVVsdlFqdEJRVUZCT3p0QlFVTnNRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZWTEUxQlFWWXNSVUZCY1VJN08wRkJSWFJETEdOQlFVMHNZMEZCVGl4RFFVRnhRaXhIUVVGeVFpeERRVUY1UWl4elFrRkJla0lzUlVGQmFVUXNTVUZCYWtRc1EwRkJjMFFzVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZETDBRc1kwRkJTU3hYUVVGWExFdEJRV1k3UVVGRFFTeGpRVUZKTEdGQlFXRXNVMEZCYWtJc1JVRkJORUk3UVVGRE1VSXNhVUpCUVVzc1NVRkJTU3hEUVVGVUxFbEJRV01zVVVGQlpDeEZRVUYzUWp0QlFVTjBRaXh4UWtGQlN5eEhRVUZNTEVOQlFWTXNVMEZCVkN4RFFVRnRRaXhOUVVGdVFpeEZRVUV5UWl4RFFVRXpRaXhGUVVFNFFpeFRRVUZUTEVOQlFWUXNRMEZCT1VJN1FVRkRSRHRCUVVOR08wRkJRMFE3UVVGRFJDeFRRVkpFTzBGQlUwUXNUMEZZVFN4RFFVRlFPMEZCWVVRN096c3lRMEZGYzBJc1J5eEZRVUZMTzBGQlF6RkNMRlZCUVVrc1VVRkJVU3hKUVVGSkxFdEJRVW9zUTBGQlZTeEhRVUZXTEVOQlFWbzdRVUZEUVN4aFFVRlBMRTFCUVUwc1RVRkJUU3hOUVVGT0xFZEJRV1VzUTBGQmNrSXNRMEZCVUR0QlFVTkVPenM3Y1VOQlJXZENMRkVzUlVGQlZUdEJRVU42UWl4WFFVRkxMRWxCUVVrc1EwRkJWQ3hKUVVGakxGRkJRV1FzUlVGQmQwSTdRVUZEZEVJc1dVRkJTU3h4UWtGQmNVSXNVMEZCVXl4RFFVRlVMRVZCUVZrc2EwSkJRWEpETzBGQlEwRXNXVUZCU1N4elJFRkJTaXhGUVVGclJEdEJRVU5vUkN4dFFrRkJVeXhEUVVGVUxFVkJRVmtzYTBKQlFWb3NSMEZCYVVNc1owSkJRV3BETzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c1kwRkJTU3h6UkVGQlNpeEZRVUZyUkR0QlFVTm9SQ3h4UWtGQlV5eERRVUZVTEVWQlFWa3NhMEpCUVZvc1IwRkJhVU1zWjBKQlFXcERPMEZCUTBRc1YwRkdSQ3hOUVVWUE8wRkJRMHdzWjBKQlFVa3NkVVJCUVVvc1JVRkJiVVE3UVVGRGFrUXNkVUpCUVZNc1EwRkJWQ3hGUVVGWkxHdENRVUZhTEVkQlFXbERMR2xDUVVGcVF6dEJRVU5FTEdGQlJrUXNUVUZGVHp0QlFVTk1MSFZDUVVGVExFTkJRVlFzUlVGQldTeHJRa0ZCV2l4SFFVRnBReXhUUVVGcVF6dEJRVU5FTzBGQlEwWTdRVUZEUmp0QlFVTkdPenRCUVVWRUxHRkJRVThzVVVGQlVEdEJRVU5FT3pzN2RVTkJSV3RDTzBGQlFVRTdPMEZCUTJwQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanRCUVVOMFF5eGpRVUZOTEdOQlFVNHNRMEZCY1VJc1IwRkJja0lzUTBGQmVVSXNjMEpCUVhwQ0xFVkJRV2xFTEVOQlFXcEVMRVZCUVc5RUxFOUJRVXNzWjBKQlFYcEVMRVZCUVRKRkxFbEJRVE5GTEVOQlFXZEdMRmxCUVUwN1FVRkRjRVk3UVVGRFJDeFRRVVpFTzBGQlIwUXNUMEZLVFN4RFFVRlFPMEZCUzBRN096dHBRMEZGV1R0QlFVRkJPenRCUVVOWUxGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanRCUVVOMFF5eGpRVUZOTEdOQlFVNHNRMEZCY1VJc1IwRkJja0lzUTBGQmVVSXNaMEpCUVhwQ0xFVkJRVEpETEVOQlFUTkRMRVZCUVRoRExFOUJRVXNzVFVGQmJrUXNSVUZCTWtRc1NVRkJNMFFzUTBGQlowVXNXVUZCVFR0QlFVTndSVHRCUVVORUxGTkJSa1E3UVVGSFJDeFBRVXBOTEVOQlFWQTdRVUZMUkRzN08ybERRVVZaTEUwc1JVRkJVU3hOTEVWQlFWRXNSeXhGUVVGTE8wRkJRMmhETEZWQlFVa3NjVUpCUVVvN08wRkJSVUVzWTBGQlVTeE5RVUZTTzBGQlEwVXNZVUZCU3l4TlFVRk1PMEZCUTBVc2VVSkJRV1VzZVVKQlFXVXNTMEZCU3l4WlFVRndRaXhEUVVGbU8wRkJRMEVzZVVKQlFXVXNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeExRVUZMTEV0QlFVd3NRMEZCVnl4WlFVRllMRU5CUVhSQ0xFTkJRV1k3UVVGRFFTeGxRVUZMTEdOQlFVd3NRMEZCYjBJc1IwRkJjRUlzUTBGQmQwSXNjMEpCUVhoQ0xFVkJRV2RFTEVOQlFXaEVMRVZCUVcxRUxGbEJRVzVFTzBGQlEwRTdRVUZEUml4aFFVRkxMR3RDUVVGTU8wRkJRMFVzWTBGQlNTeFhRVUZYTEZOQlFWZ3NSMEZCZFVJc1VVRkJVU3hUUVVGdVF5eEZRVUU0UXp0QlFVTTFReXhwUWtGQlN5eHhRa0ZCVEN4RFFVRXlRaXhIUVVFelFpeEpRVUZyUXl4TlFVRnNRenRCUVVORU8wRkJRMFFzZVVKQlFXVXNlVUpCUVdVc1MwRkJTeXh4UWtGQmNFSXNRMEZCWmp0QlFVTkJMSGxDUVVGbExFdEJRVXNzWjBKQlFVd3NRMEZCYzBJc1MwRkJTeXhMUVVGTUxFTkJRVmNzV1VGQldDeERRVUYwUWl4RFFVRm1PMEZCUTBFc1pVRkJTeXhqUVVGTUxFTkJRVzlDTEVkQlFYQkNMRU5CUVhkQ0xHOUNRVUY0UWl4RlFVRTRReXhEUVVFNVF5eEZRVUZwUkN4WlFVRnFSRHRCUVVOQk8wRkJRMFk3UVVGRFJTeG5Ra0ZCVFN4TlFVRk5MRFJDUVVFMFFpeE5RVUZzUXl4RFFVRk9PMEZCWmtvN1FVRnBRa1E3T3p0eFEwRkZaMEk3UVVGRFppeFZRVUZKTEZkQlFWY3NTMEZCU3l4TlFVRndRanRCUVVOQkxGVkJRVWtzWTBGQll5eEZRVUZzUWp0QlFVTkJMRlZCUVVrc1lVRkJZU3hUUVVGcVFpeEZRVUUwUWp0QlFVTXhRaXhoUVVGTExFbEJRVWtzVTBGQlZDeEpRVUZ6UWl4UlFVRjBRaXhGUVVGblF6dEJRVU01UWl4elFrRkJXU3hKUVVGYUxFTkJRV2xDTEZOQlFXcENPMEZCUTBRN1FVRkRSanRCUVVORUxHRkJRVThzVjBGQlVEdEJRVU5FT3pzN05rSkJSVkVzVXl4RlFVRlhMRmNzUlVGQllUdEJRVU12UWl4VlFVRkpMRlZCUVZVc1JVRkJaRHM3UVVGRlFTeFZRVUZKTEdOQlFXTXNaVUZCYkVJc1JVRkJiVU03UVVGRGFrTXNXVUZCU1N4blFrRkJaMElzV1VGQldTeExRVUZhTEVOQlFXdENMRWRCUVd4Q0xFTkJRWEJDTzBGQlEwRXNjMEpCUVdNc1IwRkJaRHRCUVVOQkxIZENRVUZuUWl4alFVRmpMRU5CUVdRc1NVRkJiVUlzU1VGQmJrSXNSMEZCTUVJc1kwRkJZeXhEUVVGa0xFTkJRVEZETzBGQlEwRXNhMEpCUVZVc1MwRkJTeXhsUVVGTUxFTkJRWEZDTEhGQ1FVRnlRaXhEUVVFeVF5eGhRVUV6UXl4RFFVRldPMEZCUTBRc1QwRk1SQ3hOUVV0UE8wRkJRMHdzV1VGQlNTeExRVUZMTEUxQlFVd3NRMEZCV1N4VFFVRmFMRTFCUVRKQ0xGTkJRUzlDTEVWQlFUQkRPMEZCUTNoRExHOUNRVUZWTEV0QlFVc3NUVUZCVEN4RFFVRlpMRk5CUVZvc1EwRkJWanRCUVVORU8wRkJRMFk3TzBGQlJVUXNZVUZCVHl4UFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdaME5CU1Zrc1V5eEZRVUZYTzBGQlEzSkNMRmRCUVVzc1RVRkJUQ3hEUVVGWkxGTkJRVm9zU1VGQmVVSXNSVUZCZWtJN1FVRkRRU3hYUVVGTExGVkJRVXc3UVVGRFJEczdPMmREUVVWWExGTXNSVUZCVnp0QlFVTnlRaXhoUVVGUExFdEJRVXNzVFVGQlRDeERRVUZaTEZOQlFWb3NRMEZCVUR0QlFVTkJMRmRCUVVzc1ZVRkJURHRCUVVORU96dEJRVVZFT3pzN096czdPenNyUWtGTFZ5eFRMRVZCUVZjc1V5eEZRVUZYTzBGQlF5OUNMRlZCUVVrc1YwRkJWeXhMUVVGTExFMUJRWEJDTzBGQlEwRXNWVUZCU1N4VFFVRlRMRk5CUVZRc1RVRkJkMElzVTBGQk5VSXNSVUZCZFVNN1FVRkRja01zV1VGQlNTeFRRVUZUTEZOQlFWUXNSVUZCYjBJc1QwRkJjRUlzUTBGQk5FSXNVMEZCTlVJc1RVRkJNa01zUTBGQlF5eERRVUZvUkN4RlFVRnRSRHRCUVVOcVJDeHRRa0ZCVXl4VFFVRlVMRVZCUVc5Q0xFbEJRWEJDTEVOQlFYbENMRk5CUVhwQ08wRkJRMEVzWlVGQlN5eFZRVUZNTzBGQlEwUTdRVUZEUml4UFFVeEVMRTFCUzA4N1FVRkRUQ3hqUVVGTkxFMUJRVTBzV1VGQldTeFRRVUZhTEVkQlFYZENMRzFDUVVFNVFpeERRVUZPTzBGQlEwUTdRVUZEUmpzN08yOURRVVZsTEZNc1JVRkJWeXhUTEVWQlFWYzdRVUZEY0VNc1ZVRkJTU3hSUVVGUkxFdEJRVXNzVFVGQlRDeERRVUZaTEZOQlFWb3NRMEZCV2pzN1FVRkZRU3haUVVGTkxFMUJRVTRzUTBGQllTeE5RVUZOTEU5QlFVNHNRMEZCWXl4VFFVRmtMRU5CUVdJc1JVRkJkVU1zUTBGQmRrTTdRVUZEUVN4WFFVRkxMRlZCUVV3N1FVRkRSRHM3TzNkQ1FYWlphMEk3UVVGRGFrSXNZVUZCVHl4TFFVRkxMR0ZCUVZvN1FVRkRSQ3hMTzNOQ1FVVm5RaXhOTEVWQlFWRTdRVUZEZGtJc1YwRkJTeXhoUVVGTUxFZEJRWEZDTEU5QlFVOHNUMEZCVUN4RFFVRmxMRWxCUVdZc1EwRkJiMElzVlVGQmVrTTdRVUZEUkRzN096czdhMEpCY1ZsWkxHTTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNaWlpqczdPenM3TzBGQlJVRTdPenM3U1VGSlRTeGxPenM3UVVGRlNpd3lRa0ZCV1N4RlFVRmFMRVZCUVdkQ0xFZEJRV2hDTEVWQlFYRkNMR0ZCUVhKQ0xFVkJRVzFETEZWQlFXNURMRVZCUVN0RExGVkJRUzlETEVWQlFUSkVMRWxCUVRORUxFVkJRV2xGTEVsQlFXcEZMRVZCUVhWRkxFOUJRWFpGTEVWQlFXZEdMRTlCUVdoR0xFVkJRWGxHTzBGQlFVRTdPMEZCUVVFc2VVcEJRMnBHTEVWQlJHbEdMRVZCUXpkRkxFZEJSRFpGTEVWQlEzaEZMR0ZCUkhkRk96dEJRVVYyUml4UlFVRkpMR05CUVVvN1FVRkRRU3hWUVVGTkxGZEJRVTRzUjBGQmIwSXNWVUZCY0VJN1FVRkRRU3hWUVVGTkxGZEJRVTRzUjBGQmIwSXNWVUZCY0VJN1FVRkRRU3hWUVVGTkxFdEJRVTRzUjBGQll5eEpRVUZrTzBGQlEwRXNWVUZCVFN4TFFVRk9MRWRCUVdNc1NVRkJaRHRCUVVOQkxGVkJRVTBzVVVGQlRpeEhRVUZwUWl4UFFVRnFRanRCUVVOQkxGVkJRVTBzVVVGQlRpeEhRVUZwUWl4UFFVRnFRanRCUVZKMVJqdEJRVk40UmpzN096dHpRa0ZGVVN4UkxFVkJRVlU3UVVGRGFrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3haUVVGTkxFbEJRVTRzUjBGQllTeFJRVUZpTzBGQlEwUXNTenQzUWtGRlZUdEJRVU5VTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1lVRkJUeXhOUVVGTkxFdEJRV0k3UVVGRFJEczdPM2RDUVVWblFqdEJRVU5tTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1lVRkJUeXhOUVVGTkxGZEJRV0k3UVVGRFJEczdPM2RDUVVWblFqdEJRVU5tTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1lVRkJUeXhOUVVGTkxGZEJRV0k3UVVGRFJEczdPM2RDUVVWblFqdEJRVU5tTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1lVRkJUeXhOUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCZWtJN1FVRkRSRHM3TzJkRFFXaEZTRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08ydENRVzFGWlN4bE96czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZETjBObU96czdPMEZCUTBFN096czdRVUZGUVRzN1FVRkRRVHM3T3p0QlFURkNRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUUkNRU3hKUVVGTkxGTkJRVk1zUlVGQlJTeFZRVUZWTEZWQlFWb3NSVUZCZDBJc1ZVRkJWU3hoUVVGc1F5eEZRVUZtT3p0QlFVVkJPenM3UVVGSFFUczdPenRKUVVkTkxGRTdPMEZCUlVvN096czdPenM3T3p0QlFWTkJMRzlDUVVGWkxGVkJRVm9zUlVGQmQwSXNWVUZCZUVJc1JVRkJiME1zWTBGQmNFTXNSVUZCYjBRc1owSkJRWEJFTEVWQlFYTkZMRzFDUVVGMFJTeEZRVUV5Uml4alFVRXpSaXhGUVVFeVJ5eGpRVUV6Unl4RlFVRXlTRHRCUVVGQk96czdRVUZGZWtnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4UlFVRkpMRU5CUVVNc1ZVRkJUQ3hGUVVGcFFpeE5RVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMSGRDUVVGV0xFTkJRVTQ3UVVGRGFrSXNVVUZCU1N4RFFVRkRMR05CUVV3c1JVRkJjVUlzVFVGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN3MFFrRkJWaXhEUVVGT08wRkJRM0pDT3p0QlFVVkJMRkZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVMHNWMEZCVGl4SFFVRnZRaXhoUVVGaExGbEJRV3BETzBGQlEwRXNWVUZCVFN4VlFVRk9MRWRCUVcxQ0xGVkJRVzVDTzBGQlEwRXNWVUZCVFN4VlFVRk9MRWRCUVcxQ0xGVkJRVzVDTzBGQlEwRXNWVUZCVFN4blFrRkJUaXhIUVVGNVFpeG5Ra0ZCZWtJN1FVRkRRU3hWUVVGTkxHTkJRVTRzUjBGQmRVSXNZMEZCZGtJN1FVRkRRU3hWUVVGTkxGRkJRVTRzUjBGQmFVSXNZMEZCYWtJN1FVRkRRU3hWUVVGTkxHTkJRVTRzUjBGQmRVSXNZMEZCZGtJN1FVRkRRU3hWUVVGTkxHMUNRVUZPTEVkQlFUUkNMRzFDUVVFMVFqdEJRVU5CTEZWQlFVMHNWVUZCVGl4SFFVRnRRaXhMUVVGTExFdEJRVXdzUTBGQldTeExRVUZMTEUxQlFVd3NTMEZCWjBJc1MwRkJha0lzUjBGQk1FSXNRMEZCY2tNc1EwRkJia0k3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRlZCUVUwc1YwRkJUaXhIUVVGdlFpeEpRVUZ3UWpzN1FVRkZRU3hWUVVGTkxIRkNRVUZPTEVkQlFUaENMRVZCUVRsQ08wRkJRMEVzVlVGQlRTeGhRVUZPTEVkQlFYTkNMRVZCUVhSQ08wRkJRMEVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMRVZCUVhaQ08wRkJRMEVzVlVGQlRTeFpRVUZPTEVkQlFYRkNMRVZCUVhKQ08wRkJRMEVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMRVZCUVhaQ08wRkJRMEVzVlVGQlRTeDNRa0ZCVGl4SFFVRnBReXhGUVVGcVF6dEJRVU5CTEZWQlFVMHNZVUZCVGl4SFFVRnpRaXhGUVVGRExGTkJRVk1zUlVGQlZpeEZRVUZqTEZsQlFWa3NSVUZCTVVJc1JVRkJkRUk3UVVGRFFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc1JVRkJhRUk3TzBGQlJVRXNWVUZCVFN4UFFVRk9MRWRCUVdkQ0xITkNRVUZWTEUxQlFVMHNWMEZCYUVJc1JVRkJOa0lzVFVGQk4wTTdRVUZEUVN4VlFVRk5MR0ZCUVU0c1EwRkJiMElzVlVGQmNFSXNRMEZCSzBJc1ZVRkJMMElzU1VGQk5rTXNWVUZCTjBNN1FVRkRRU3hSUVVGSkxHRkJRV0VzYlVOQlFXMUNMRTlCUVc1Q0xFVkJRVFJDTEVsQlFUVkNMRU5CUVdwQ08wRkJRMEVzVlVGQlRTeGpRVUZPTEVkQlFYVkNMRlZCUVhaQ08wRkJRMFE3T3pzN096dEJRV2xFUkRzN096czdPenM3UVVGUlFUc3lRMEZEZFVJc1N5eEZRVUZQTEUwc1JVRkJVVHRCUVVOd1F5eFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc2NVSkJRVW83TzBGQlJVRXNWVUZCU1N4RFFVRkRMRTFCUVV3c1JVRkJZVHRCUVVOWUxIVkNRVUZsTEUxQlFVMHNUMEZCY2tJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRDeDFRa0ZCWlN4TlFVRm1PMEZCUTBRN08wRkJSVVFzVlVGQlNTeGpRVUZqTEZsQlFWa3NUVUZCVFN4VFFVRk9MRU5CUVdkQ0xFMUJRVTBzVDBGQlRpeERRVUZqTEVkQlFXUXNTVUZCY1VJc1EwRkJja01zUlVGQmQwTXNUVUZCVFN4TlFVRTVReXhEUVVGYUxFZEJRVzlGTEVkQlFYQkZMRWRCUVRCRkxFMUJRVTBzVTBGQlRpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFpeE5RVUZOTEU5QlFVNHNRMEZCWXl4SFFVRmtMRU5CUVc1Q0xFTkJRVFZHT3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3hWUVVGVk8wRkJRMW9zWTBGQlRTeE5RVVJOTEVWQlEwVXNUVUZCVFN4TlFVRk5MRmRCUkdRc1JVRkRNa0lzU1VGQlNTeDFRa0ZCZFVJc1dVRkJka0lzUjBGQmMwTXNSMEZFY2tVc1JVRkRNRVVzVFVGQlRTeEZRVUZGTEZWQlFWVXNWMEZCV2p0QlFVUm9SaXhQUVVGa096dEJRVWxCTEdOQlFWRXNSMEZCVWl4RFFVRlpMRmRCUVZvc1JVRkJlVUlzVDBGQmVrSXNSVUZCYTBNc1dVRkJiRU1zUlVGQlowUXNWMEZCYUVRN08wRkJSVUU3UVVGRFFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanM3UVVGRk0wTXNZMEZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRTlCUVRsQ0xFVkJRWFZETEZWQlFVTXNTMEZCUkN4RlFVRlhPMEZCUTJoRUxHdENRVUZSTEVkQlFWSXNRMEZCV1N4bFFVRmFMRVZCUVRaQ0xFdEJRVGRDT3p0QlFVVkJMR05CUVVrc1owSkJRVW83UVVGRFFTeGpRVUZKTEcxQ1FVRktPMEZCUTBFc1kwRkJTU3h2UWtGQlNqdEJRVU5CTEdOQlFVa3NVVUZCVVN4TlFVRk5MRWxCUVU0c1EwRkJWeXhMUVVGMlFqczdRVUZGUVN4bFFVRkxMRTlCUVV3c1NVRkJaMElzUzBGQmFFSXNSVUZCZFVJN1FVRkRja0lzWjBKQlFVa3NUVUZCVFN4UFFVRk9MRVZCUVdVc1dVRkJaaXhMUVVGblF5eFRRVUZ3UXl4RlFVRXJRenRCUVVNM1F5eHJRa0ZCU1N4bFFVRmxMRk5CUVc1Q0xFVkJRVGhDTzBGQlF6VkNMRFpDUVVGaExFbEJRVWtzU1VGQlNpeERRVUZUTEUxQlFVMHNUMEZCVGl4RlFVRmxMRmxCUVhoQ0xFTkJRV0k3UVVGRFFTdzRRa0ZCWXl4UFFVRmtPMEZCUTBRc1pVRklSQ3hOUVVkUE8wRkJRMHdzYjBKQlFVa3NZMEZCWXl4SlFVRkpMRWxCUVVvc1EwRkJVeXhOUVVGTkxFOUJRVTRzUlVGQlpTeFpRVUY0UWl4RFFVRnNRanRCUVVOQkxHOUNRVUZKTEZkQlFWY3NUMEZCV0N4TFFVRjFRaXhaUVVGWkxFOUJRVm9zUlVGQk0wSXNSVUZCYTBRN1FVRkRhRVFzSzBKQlFXRXNWMEZCWWp0QlFVTkJMR2REUVVGakxFOUJRV1E3UVVGRFJEdEJRVU5HTzBGQlEwWTdRVUZEUmpzN1FVRkZSQ3hyUWtGQlVTeEhRVUZTTEVOQlFWa3NaMEpCUVZvc1JVRkJPRUlzVjBGQk9VSXNSVUZCTWtNc1ZVRkJNME03TzBGQlJVRXNZMEZCU1N4aFFVRmhMRmRCUVdwQ096dEJRVVZCTEdOQlFVa3NaVUZCWlN4VFFVRnVRaXhGUVVFNFFqdEJRVU0xUWl4dFFrRkJUeXhQUVVGUExIZENRVUZRTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hqUVVGSkxGbEJRVms3UVVGRFpDeG5Ra0ZCU1N4TFFVUlZPMEZCUldRc2QwSkJRVmtzVFVGQlRTeFZRVUZPTEVWQlFXdENMRlZCUm1oQ08wRkJSMlFzZDBKQlFWazdRVUZJUlN4WFFVRm9RanM3UVVGTlFTeHJRa0ZCVVN4SFFVRlNMRU5CUVZrc2RVTkJRVm9zUlVGQmNVUXNVMEZCY2tRN1FVRkRRU3hyUWtGQlVTeFRRVUZTTzBGQlEwUXNVMEYyUTBRN1FVRjNRMFFzVDBFeFEwMHNRMEZCVUR0QlFUSkRSRHM3T3pKRFFVVnpRaXhKTEVWQlFVMHNWU3hGUVVGWk8wRkJRM1pETEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGZEJRVXNzU1VGQlNTeFBRVUZVTEVsQlFXOUNMRTFCUVUwc1lVRkJNVUlzUlVGQmVVTTdRVUZEZGtNc1dVRkJTU3hSUVVGUkxFMUJRVTBzWVVGQlRpeERRVUZ2UWl4UFFVRndRaXhEUVVGYU8wRkJRMEVzV1VGQlNTeE5RVUZOTEZkQlFVNHNTMEZCYzBJc1ZVRkJNVUlzUlVGQmMwTTdRVUZEY0VNc2EwSkJRVkVzU1VGQlVqdEJRVU5GTEdsQ1FVRkxMRlZCUVV3N1FVRkRSU3h4UWtGQlR5eE5RVUZOTEV0QlFVNHNRMEZCV1N4UlFVRnVRanRCUVVOR0xHbENRVUZMTEVsQlFVdzdRVUZEUlN4eFFrRkJUeXhOUVVGTkxFdEJRVTRzUTBGQldTeEZRVUZ1UWp0QlFVTkdMR2xDUVVGTExGRkJRVXc3UVVGRFJTeHhRa0ZCVHl4TlFVRk5MRXRCUVU0c1EwRkJXU3hOUVVGdVFqdEJRVU5HTEdsQ1FVRkxMRkZCUVV3N1FVRkRSU3h4UWtGQlR5eE5RVUZOTEV0QlFVNHNRMEZCV1N4TlFVRnVRanRCUVVOR0xHbENRVUZMTEZOQlFVdzdRVUZEUlN4eFFrRkJUeXhOUVVGTkxFdEJRVTRzUTBGQldTeFBRVUZ1UWp0QlFVTkdMR2xDUVVGTExFZEJRVXc3UVVGRFJTeHhRa0ZCVHl4TlFVRk5MRXRCUVdJN1FVRkRSanRCUVVORkxIRkNRVUZQTEVWQlFWQTdRVUZrU2p0QlFXZENSRHRCUVVOR08wRkJRMFFzWVVGQlR5eEZRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3paRFFVdDVRaXhITEVWQlFVc3NUU3hGUVVGUk96dEJRVVZ3UXl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVZNc1QwRkJWQ3hGUVVGclFpeE5RVUZzUWl4RlFVRXdRanM3UVVGRk0wTXNXVUZCU1N4eFFrRkJTanM3UVVGRlFTeFpRVUZKTEVOQlFVTXNUVUZCVEN4RlFVRmhPMEZCUTFnc2VVSkJRV1VzVFVGQlRTeFBRVUZ5UWp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxIbENRVUZsTEUxQlFXWTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxFMUJRVTA3UVVGRFVpeG5Ra0ZCVFN4TlFVUkZMRVZCUTAwc1RVRkJUU3hOUVVGTkxGZEJSR3hDTEVWQlF5dENMRWxCUVVrc2RVSkJRWFZDTEZsQlFYWkNMRWRCUVhORExFZEJSSHBGTEVWQlF6aEZMRTFCUVUwc1JVRkJSU3hWUVVGVkxFZEJRVm83UVVGRWNFWXNVMEZCVmpzN1FVRkpRU3hqUVVGTkxGZEJRVTRzUTBGQmEwSXNWMEZCYkVJc1EwRkJPRUlzUjBGQk9VSXNSVUZCYlVNc1ZVRkJReXhMUVVGRUxFVkJRVmM3TzBGQlJUVkRMR05CUVVrc1lVRkJZU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eExRVUUxUWpzN1FVRkZRU3hqUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4dlFrRkJVU3hWUVVGU08wRkJRMFFzVjBGR1JDeE5RVVZQTzBGQlEwd3NiVUpCUVU4c2MwSkJRVkE3UVVGRFJEdEJRVU5HTEZOQlZFUTdRVUZWUkN4UFFYaENUU3hEUVVGUU8wRkJlVUpFT3p0QlFVVkVPenM3T3pzN2IwTkJSMmRDTzBGQlEyUXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3hoUVVGUExFMUJRVTBzVlVGQllqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096dHZRMEZMWjBJc1ZTeEZRVUZaT3p0QlFVVXhRaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NaMEpCUVVvN08wRkJSVUVzVjBGQlN5eEpRVUZKTEV0QlFWUXNTVUZCYTBJc1RVRkJUU3hoUVVGNFFpeEZRVUYxUXp0QlFVTnlReXhaUVVGSkxGVkJRVlVzVFVGQlRTeGhRVUZPTEVOQlFXOUNMRXRCUVhCQ0xFTkJRV1E3UVVGRFFTeFpRVUZKTEZGQlFWRXNWVUZCVWl4TFFVRjFRaXhWUVVFelFpeEZRVUYxUXp0QlFVTnlReXh2UWtGQlZTeFJRVUZSTEVsQlFWSXNRMEZCWVN4UFFVRjJRanRCUVVORU8wRkJRMFk3UVVGRFJDeGhRVUZQTEU5QlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdiVU5CUzJVc1J5eEZRVUZMTzBGQlEyeENMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NaVUZCWlN4elFrRkJWU3hIUVVGV0xFVkJRV1VzU1VGQlppeExRVUYzUWl4VFFVRXpRenM3UVVGRlFUdEJRVU5CTEZWQlFVa3NiMEpCUVVvN08wRkJSVUU3UVVGRFFTeFZRVUZKTEdGQlFXTXNXVUZCUkN4SFFVRnBRaXhoUVVGaExFZEJRVGxDTEVkQlFXOURMRTFCUVUwc2QwSkJRVTRzUTBGQkswSXNSMEZCTDBJc1EwRkJja1E3TzBGQlJVRXNWMEZCU3l4SlFVRkpMRXRCUVZRc1NVRkJhMElzVFVGQlRTeGhRVUY0UWl4RlFVRjFRenRCUVVOeVF5eFpRVUZKTEZWQlFWVXNUVUZCVFN4aFFVRk9MRU5CUVc5Q0xFdEJRWEJDTEVOQlFXUTdRVUZEUVN4WlFVRkpMRkZCUVZFc1ZVRkJVaXhMUVVGMVFpeFZRVUV6UWl4RlFVRjFRenRCUVVOeVF5eDNRa0ZCWXl4UlFVRlJMRlZCUVhSQ08wRkJRMEU3UVVGRFJEdEJRVU5HTzBGQlEwUXNZVUZCVHl4WFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPMjFEUVV0bExHRXNSVUZCWlR0QlFVTTFRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4VlFVRkpMR0ZCUVdFc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEdGQlFYSkNMRU5CUVdwQ096dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ08wRkJRek5ETEZsQlFVa3NWVUZCU2l4RlFVRm5RanRCUVVOa0xHdENRVUZSTEZkQlFWY3NVVUZCYmtJN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeHBRa0ZCVHl4MVFrRkJVRHRCUVVORU8wRkJRMFlzVDBGT1RTeERRVUZRTzBGQlQwUTdPMEZCUlVRN096czdPenM3T3paRFFVdDVRaXhoTEVWQlFXVTdRVUZEZEVNc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4aFFVRmhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeGhRVUZ5UWl4RFFVRnFRanM3UVVGRlFTeGhRVUZSTEZWQlFVUXNSMEZCWlN4WFFVRlhMRkZCUVRGQ0xFZEJRWEZETEZOQlFUVkRPMEZCUTBRN08wRkJSVVE3T3pzN096czdPMjFFUVVzclFpeEhMRVZCUVVzN1FVRkRiRU1zVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXhOUVVGTkxIZENRVUZPTEVOQlFTdENMRWRCUVM5Q0xFTkJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenRwUkVGSk5rSXNZU3hGUVVGbExGVXNSVUZCV1R0QlFVTjBSQ3hWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NUVUZCVFN4M1FrRkJUaXhEUVVFclFpeGhRVUV2UWl4TlFVRnJSQ3hUUVVGMFJDeEZRVUZwUlR0QlFVTXZSQ3hqUVVGTkxIZENRVUZPTEVOQlFTdENMR0ZCUVM5Q0xFbEJRV2RFTEZWQlFXaEVPMEZCUTBRN1FVRkRSanM3UVVGRlJEczdPenM3T3pzN01FTkJTM05DTEdFc1JVRkJaVHRCUVVOdVF5eFZRVUZKTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVrc1lVRkJZU3hOUVVGTkxHTkJRVTRzUTBGQmNVSXNZVUZCY2tJc1EwRkJha0k3UVVGRFFTeFZRVUZKTEZWQlFWVXNSVUZCWkRzN1FVRkZRU3hWUVVGSkxGVkJRVW9zUlVGQlowSTdRVUZEWkN4clFrRkJWU3hYUVVGWExFOUJRWEpDTzBGQlEwUTdRVUZEUkN4aFFVRlBMRTlCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzMlEwRkplVUk3UVVGRGRrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNTeHZRa0ZCYjBJc1JVRkJlRUk3TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmFVSXNUVUZCYWtJc1JVRkJlVUk3TzBGQlJURkRMR0ZCUVVzc1NVRkJTU3hMUVVGVUxFbEJRV3RDTEUxQlFVMHNZVUZCZUVJc1JVRkJkVU03UVVGRGNrTXNZMEZCU1N4VlFVRlZMRTFCUVUwc1lVRkJUaXhEUVVGdlFpeExRVUZ3UWl4RFFVRmtPMEZCUTBFc1kwRkJTU3hUUVVGVExFMUJRVTBzZVVKQlFVNHNRMEZCWjBNc1VVRkJVU3hKUVVGU0xFTkJRV0VzVDBGQk4wTXNSVUZCYzBRc1VVRkJVU3hWUVVFNVJDeERRVUZpTzBGQlEwRXNORUpCUVd0Q0xFbEJRV3hDTEVOQlFYVkNMRTFCUVhaQ08wRkJRMFE3TzBGQlJVUXNNRUpCUVZFc1IwRkJVaXhEUVVGWkxHbENRVUZhTEVWQlFTdENMRWxCUVM5Q0xFTkJRVzlETEZsQlFVMDdPMEZCUlhoRExHdENRVUZSTEhsRFFVRlNPMEZCUTBRc1UwRklSQ3hGUVVkSExHbENRVUZUTzBGQlFVVXNhVUpCUVU4c1MwRkJVRHRCUVVGbExGTkJTRGRDTzBGQlNVUXNUMEZhVFN4RFFVRlFPMEZCWVVRN08wRkJSVVE3T3pzN096czdPenM0UTBGTk1FSXNTU3hGUVVGTkxHVXNSVUZCYVVJN1FVRkRMME03UVVGRFFTeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSkxGVkJRVlVzUlVGQlJTeE5RVUZOTEZGQlFWSXNSVUZCYTBJc1RVRkJUU3hOUVVGTkxGZEJRVGxDTzBGQlEwVXNXVUZCU1N4MVFrRkJkVUlzVFVGQlRTeFBRVUUzUWl4SFFVRjFReXhIUVVRM1F6dEJRVVZGTEdOQlFVMHNSVUZCUlN4UFFVRlBMRVZCUVVNc1RVRkJUU3hKUVVGUUxFVkJRV0VzUzBGQlN5eGxRVUZzUWl4RlFVRlVMRVZCUmxJc1JVRkJaRHM3UVVGSlFTeFpRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNUMEZCT1VJc1JVRkJkVU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEYUVRc1owSkJRVkVzUjBGQlVpeERRVUZaTERCQ1FVRmFMRVZCUVhkRExFdEJRWGhETzBGQlEwUXNUMEZHUkR0QlFVZEVPenRCUVVWRU96czdPenM3T3paRFFVbDVRaXhKTEVWQlFVMDdRVUZETjBJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1N4VlFVRlZMRVZCUVVVc1RVRkJUU3hSUVVGU0xFVkJRV3RDTEUxQlFVMHNUVUZCVFN4WFFVRTVRanRCUVVORkxGbEJRVWtzZFVKQlFYVkNMRTFCUVUwc1QwRkJOMElzUjBGQmRVTXNSMEZFTjBNN1FVRkZSU3hqUVVGTkxFVkJRVVVzVDBGQlR5eEZRVUZETEUxQlFVMHNTVUZCVUN4RlFVRlVMRVZCUmxJc1JVRkJaRHM3UVVGSlFTeFpRVUZOTEZkQlFVNHNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNUMEZCT1VJc1JVRkJkVU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEYUVRc1owSkJRVkVzUjBGQlVpeERRVUZaTERaQ1FVRmFMRVZCUVRKRExFdEJRVE5ETzBGQlEwUXNUMEZHUkR0QlFVZEVPenRCUVVWRU96czdPenM3TUVOQlIzTkNMRkVzUlVGQlZTeExMRVZCUVU4N1FVRkRja01zVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3hWUVVGVkxFVkJRVVVzVFVGQlRTeFJRVUZTTEVWQlFXdENMRTFCUVUwc1RVRkJUU3hYUVVFNVFqdEJRVU5GTEZsQlFVa3NkVUpCUVhWQ0xFMUJRVTBzVDBGQk4wSXNSMEZCZFVNc1IwRkVOME03UVVGRlJTeGpRVUZOTEVWQlFVVXNWVUZCVlN4UlFVRmFMRVZCUVhOQ0xFOUJRVThzUzBGQk4wSXNSVUZHVWl4RlFVRmtPenRCUVVsQkxGbEJRVTBzVjBGQlRpeERRVUZyUWl4SlFVRnNRaXhEUVVGMVFpeFhRVUYyUWl4RFFVRnRReXhQUVVGdVF5eEZRVUUwUXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOeVJDeG5Ra0ZCVVN4SFFVRlNMRU5CUVZrc2RVSkJRVm9zUlVGQmNVTXNTMEZCY2tNN1FVRkRSQ3hQUVVaRU8wRkJSMFE3TzBGQlJVUTdPenM3T3pzN08zVkRRVXR0UWl4aExFVkJRV1VzWVN4RlFVRmxPMEZCUXk5RExGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNWVUZCU1N4aFFVRmhMRTFCUVUwc1kwRkJUaXhEUVVGeFFpeGhRVUZ5UWl4RFFVRnFRanM3UVVGRlFTeFZRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3h0UWtGQlZ5eFhRVUZZTEVOQlFYVkNMRWxCUVhaQ0xFTkJRVFJDTEdGQlFUVkNPMEZCUTBFc1kwRkJUU3hqUVVGT0xFTkJRWEZDTEdGQlFYSkNMRWxCUVhORExGVkJRWFJETzBGQlEwUTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdOa05CUzNsQ0xHRXNSVUZCWlR0QlFVTjBReXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NZVUZCWVN4TlFVRk5MR05CUVU0c1EwRkJjVUlzWVVGQmNrSXNRMEZCYWtJN08wRkJSVUVzVlVGQlNTeFZRVUZLTEVWQlFXZENPMEZCUTJRc1pVRkJUeXhYUVVGWExGZEJRV3hDTzBGQlEwUXNUMEZHUkN4TlFVVlBPMEZCUTB3c1kwRkJUU3g1UWtGQlRqdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdPenM3T3pzN096dDFRMEZUYlVJc1ZTeEZRVUZaTEdkQ0xFVkJRV3RDTEdFc1JVRkJaU3hyUWl4RlFVRnZRaXhUTEVWQlFWY3NWU3hGUVVGWkxGTXNSVUZCVnp0QlFVTndTQ3hWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNc1dVRkJTU3hoUVVGaExFVkJRV3BDTzBGQlEwRXNXVUZCU1N4eFFrRkJjVUlzWTBGQll5eExRVUZrTEVOQlFXOUNMRWRCUVhCQ0xFTkJRWHBDTzBGQlEwRXNiVUpCUVZjc1NVRkJXQ3hEUVVGblFpeHRRa0ZCYlVJc1EwRkJia0lzUTBGQmFFSTdPMEZCUlVFc1kwRkJUU3hqUVVGT0xFTkJRWEZDTEVkQlFYSkNMRU5CUVhsQ0xIbENRVUY2UWl4RlFVRnZSQ3hKUVVGd1JDeERRVUY1UkN4VlFVRkRMRkZCUVVRc1JVRkJZenM3UVVGRmNrVXNZMEZCU1N4RFFVRkRMRkZCUVV3c1JVRkJaVHRCUVVOaUxIVkNRVUZYTEVWQlFWZzdRVUZEUkRzN1FVRkZSRHRCUVVOQkxHMUNRVUZUTEdGQlFXRXNaMEpCUVdJc1IwRkJaME1zVTBGQmFFTXNSMEZCTkVNc2EwSkJRWEpFTEVsQlFUSkZMRmRCUVZjc1QwRkJkRVk3TzBGQlJVRTdRVUZEUVN4alFVRkpMR1ZCUVdVc1JVRkJReXhOUVVGTkxGVkJRVkFzUlVGQmJVSXNWMEZCVnl4VFFVRTVRaXhGUVVGNVF5eGhRVUZoTEZWQlFYUkVMRVZCUVd0RkxGRkJRVkVzWjBKQlFURkZMRVZCUVRSR0xFdEJRVXNzWVVGQmFrY3NSVUZCWjBnc1UwRkJVeXhOUVVGTkxGZEJRUzlJTEVWQlFUUkpMRlZCUVZVc2EwSkJRWFJLTEVWQlFUQkxMRk5CUVZNc1UwRkJia3dzUlVGQk9Fd3NZVUZCWVN4RlFVRXpUU3hGUVVGdVFqczdRVUZGUVN4alFVRkpMR2RDUVVGS096dEJRVVZCTEdOQlFVa3NWMEZCVnl4VlFVRm1MRVZCUVRKQ096dEJRVVY2UWl4dlFrRkJVU3hIUVVGU0xFTkJRVmtzYVVOQlFWb3NSVUZCSzBNc1lVRkJMME03TzBGQlJVRXNjMEpCUVZVc1JVRkJReXhOUVVGTExGRkJRVTRzUlVGQlowSXNUVUZCVFN4TlFVRk5MRmRCUVRWQ0xFVkJRWGxETEVsQlFVa3NkVUpCUVhWQ0xFMUJRVTBzWTBGQk4wSXNSMEZCT0VNc1IwRkJNMFlzUlVGQlowY3NUVUZCVFN4RlFVRkRMRTlCUVU4c1dVRkJVaXhGUVVGelFpeFJRVUZSTEZGQlFUbENMRVZCUVhSSExFVkJRVlk3UVVGRlJDeFhRVTVFTEUxQlRVODdPMEZCUlV3c2IwSkJRVkVzUjBGQlVpeERRVUZaTEcxRVFVRmFMRVZCUVdsRkxHRkJRV3BGT3p0QlFVVkJPenM3UVVGSlFTeHpRa0ZCVlR0QlFVTlNMRzlDUVVGTkxGRkJSRVU3UVVGRlVpeHJRa0ZCU1N4MVFrRkJkVUlzVFVGQlRTeGpRVUUzUWl4SFFVRTRReXhIUVVZeFF6dEJRVWRTTEc5Q1FVRk5MRTFCUVUwc1YwRklTanRCUVVsU0xHOUNRVUZOTEVWQlFVTXNWVUZCVlN4aFFVRllMRVZCUVRCQ0xFOUJRVThzVFVGQmFrTXNSVUZCZVVNc1YwRkJWeXhSUVVGd1JEdEJRVXBGTEdGQlFWWTdRVUZQUkRzN1FVRkZSQ3huUWtGQlRTeGpRVUZPTEVOQlFYRkNMR0ZCUVhKQ0xFbEJRWE5ETEZsQlFYUkRPenRCUVVWQk8wRkJRMEVzWjBKQlFVMHNZMEZCVGl4RFFVRnhRaXhIUVVGeVFpeERRVUY1UWl4NVFrRkJla0lzUlVGQmIwUXNRMEZCY0VRc1JVRkJkVVFzVVVGQmRrUXNSVUZCYVVVc1NVRkJha1VzUTBGQmMwVXNXVUZCVFRzN1FVRkZNVVU3T3pzN096czdRVUZQUVN4clFrRkJUU3hYUVVGT0xFTkJRV3RDTEZkQlFXeENMRU5CUVRoQ0xFOUJRVGxDTEVWQlFYVkRMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJRMmhFTEhOQ1FVRlJMRWRCUVZJc1EwRkJXU3hwUTBGQldpeEZRVUVyUXl4TFFVRXZRenRCUVVOQkxHdENRVUZKTEUxQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVZnc1MwRkJiMElzUjBGQmVFSXNSVUZCTmtJN1FVRkRNMElzZDBKQlFWRXNTVUZCVWp0QlFVTkVMR1ZCUmtRc1RVRkZUenRCUVVOTUxIVkNRVUZQTERoQ1FVRlFPMEZCUTBRN1FVRkRSaXhoUVZCRU8wRkJVVVFzVjBGcVFrUTdRVUZyUWtRc1UwRXhSRVE3UVVFeVJFUXNUMEZxUlUwc1EwRkJVRHRCUVd0RlJEczdPelJEUVVWMVFpeFZMRVZCUVZrN1FVRkRiRU1zVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCVlN4TlFVRldMRVZCUVc5Q096dEJRVVZ5UXl4WlFVRkpMR3RDUVVGS096dEJRVVZCTzBGQlEwRTdRVUZEUVN4WlFVRkpMRTlCUVZFc1YwRkJWeXhYUVVGdVFpeExRVUZ2UXl4UlFVRjRReXhGUVVGclJEdEJRVU5vUkN4elFrRkJXU3hGUVVGYU8wRkJRMEVzYjBKQlFWVXNTVUZCVml4RFFVRmxMRmRCUVZjc1YwRkJNVUk3UVVGRFJDeFRRVWhFTEUxQlIwODdRVUZEVEN4elFrRkJXU3hYUVVGWExGZEJRWFpDTzBGQlEwUTdPMEZCUlVRc1dVRkJTU3gxUWtGQmRVSXNWMEZCVnl4WFFVRjBRenRCUVVOQkxGbEJRVWtzYlVKQlFXMUNMRVZCUVhaQ096dEJRVVZCTzBGQlEwRXNZVUZCU3l4SlFVRkpMRXRCUVZRc1NVRkJhMElzYjBKQlFXeENMRVZCUVhkRE8wRkJRM1JETERKQ1FVRnBRaXhKUVVGcVFpeERRVUZ6UWl4TlFVRk5MR2RDUVVGT0xFTkJRWFZDTEhWQ1FVRjJRaXhEUVVFclF5eHhRa0ZCY1VJc1MwRkJja0lzUTBGQkwwTXNRMEZCZEVJN1FVRkRSRHM3UVVGRlJEdEJRVU5CTERCQ1FVRlJMRWRCUVZJc1EwRkJXU3huUWtGQldpeEZRVUU0UWl4SlFVRTVRaXhEUVVGdFF5eFZRVUZUTEZkQlFWUXNSVUZCYzBJN08wRkJSWFpFTEdOQlFVa3NjMEpCUVhOQ0xFVkJRVEZDTzBGQlEwRXNaVUZCU3l4SlFVRkpMRTFCUVZRc1NVRkJhMElzVjBGQmJFSXNSVUZCSzBJN1FVRkROMElzWjBKQlFVa3NZVUZCWVN4WlFVRlpMRTFCUVZvc1EwRkJha0k3UVVGRFFTeG5RMEZCYjBJc1NVRkJjRUlzUTBGQmVVSXNWMEZCVnl4aFFVRllMRU5CUVhsQ0xGVkJRWHBDTEVOQlFXOURMRlZCUVhCRExFTkJRU3RETEUxQlFTOURMRU5CUVhORUxGRkJRUzlGTzBGQlEwUTdPMEZCUlVRc2EwSkJRVkVzUjBGQlVpeERRVUZaTEdsQ1FVRmFMRVZCUVN0Q0xHMUNRVUV2UWp0QlFVTkJMR3RDUVVGUkxFZEJRVklzUTBGQldTeHRRa0ZCV2l4RlFVRnBReXhUUVVGcVF6czdRVUZGUVN4clFrRkJVU3hGUVVGRExGZEJRVmNzVTBGQldpeEZRVUYxUWl4WlFVRlpMRzFDUVVGdVF5eEZRVUZTTzBGQlEwUXNVMEZhUkR0QlFXRkVMRTlCYmtOTkxFTkJRVkE3UVVGdlEwUTdPMEZCUlVRN096czdPenM3TzNkRFFVdHZRaXhKTEVWQlFVMDdRVUZEZUVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGRExFOUJRVVFzUlVGQlZTeE5RVUZXTEVWQlFYRkNPenRCUVVWMFF5eFpRVUZKTEdGQlFXTXNTMEZCU3l4UlFVRk9MRWRCUVd0Q0xIbENRVUZzUWl4SFFVRTRReXh6UWtGQkwwUTdPMEZCUlVFc1kwRkJUU3hqUVVGT0xFTkJRWEZDTEVkQlFYSkNMRU5CUVhsQ0xGVkJRWHBDTEVWQlFYRkRMRWxCUVhKRExFTkJRVEJETEZWQlFVTXNVVUZCUkN4RlFVRmpPenRCUVVWMFJDeGpRVUZKTEVOQlFVTXNVVUZCVEN4RlFVRmxPMEZCUTJJc2RVSkJRVmNzUlVGQldEdEJRVU5FT3p0QlFVVkVMR05CUVVrc1pVRkJaU3h6UWtGQmJrSXNSVUZCTWtNN1FVRkRla01zYTBKQlFVMHNkVUpCUVU0c1EwRkJPRUlzU1VGQk9VSXNSVUZCYjBNc1NVRkJjRU1zUTBGQmVVTXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRiRVFzYTBKQlFVa3NVMEZCVXl4TlFVRk5MRk5CUVU0c1IwRkJhMElzVFVGQlRTeFZRVUZxUXl4RFFVRktMRVZCUVd0RU8wRkJRMmhFTEhkQ1FVRlJMRWRCUVZJc1EwRkJXU3gzUWtGQldqdEJRVU5CTEhWQ1FVRlBMRkZCUVZFc1UwRkJVeXhOUVVGTkxGTkJRVTRzUjBGQmEwSXNUVUZCVFN4VlFVRnFReXhEUVVGU0xFTkJRVkE3UVVGRFJDeGxRVWhFTEUxQlIwODdRVUZEVEN4M1FrRkJVU3hIUVVGU0xFTkJRVmtzTWtOQlFWbzdRVUZEUVN4MVFrRkJUeXhSUVVGUkxGTkJRVklzUTBGQlVEdEJRVU5FTzBGQlEwWXNZVUZTUkR0QlFWTkVMRmRCVmtRc1RVRlZUenM3UVVGRlRDeG5Ra0ZCU1N4clFrRkJhMElzUzBGQlN5eEpRVUZNTEVkQlFWa3NTMEZCU3l4TlFVRnFRaXhIUVVFd1FpeExRVUZMTEZOQlFTOUNMRWRCUVRKRExFdEJRVXNzVVVGQmRFVTdPMEZCUlVFc1owSkJRVWtzVTBGQlV5eGxRVUZVTEVOQlFVb3NSVUZCSzBJN1FVRkROMElzYzBKQlFWRXNSMEZCVWl4RFFVRlpMREpDUVVGYU8wRkJRMEVzY1VKQlFVOHNVVUZCVVN4VFFVRlRMR1ZCUVZRc1EwRkJVaXhEUVVGUU8wRkJRMFFzWVVGSVJDeE5RVWRQTzBGQlEwd3NjMEpCUVZFc1IwRkJVaXhEUVVGWkxEWkRRVUZhTzBGQlEwRXNjVUpCUVU4c1VVRkJVU3hUUVVGU0xFTkJRVkE3UVVGRFJEdEJRVU5HTzBGQlJVWXNVMEUzUWtRN1FVRXJRa1FzVDBGdVEwMHNRMEZCVUR0QlFXOURSRHM3UVVGRlJEczdPenM3T3pzN08yOURRVTFuUWl4UExFVkJRVk1zWVN4RlFVRmxMRlVzUlVGQldTeFZMRVZCUVZrN1FVRkRPVVFzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTU3cwUWtGQlNqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZyUWl4TlFVRnNRaXhGUVVFd1FqczdRVUZGTTBNN1FVRkRRVHRCUVVOQkxGbEJRVWtzV1VGQldTeHpRa0ZCVlN4aFFVRldMRVZCUVhsQ0xFMUJRWHBET3p0QlFVVkJMRmxCUVVrc1ZVRkJWU3hSUVVGV0xFTkJRVzFDTEZkQlFXNUNMRU5CUVVvc1JVRkJjVU03UVVGRGJrTXNjMEpCUVZrc1ZVRkJWU3hQUVVGV0xFTkJRV3RDTEZsQlFXeENMRVZCUVdkRExFVkJRV2hETEVOQlFWbzdRVUZEUkRzN1FVRkZSQ3hqUVVGTkxGRkJRVTRzUTBGQlpTeHZRa0ZCWml4SFFVRnpReXhKUVVGMFF5eERRVUV5UXl4VlFVRlRMRTFCUVZRc1JVRkJhVUk3UVVGRE1VUXNZMEZCU1N4alFVRmpMRTlCUVU4c1YwRkJla0k3UVVGRFFTeGpRVUZKTEdOQlFXTXNXVUZCV1N4UFFVRTVRanM3UVVGRlFTeGpRVUZKTEUxQlFVMHNWMEZCVGl4TFFVRnpRaXhUUVVFeFFpeEZRVUZ4UXp0QlFVTnVReXh0UWtGQlR5eHpRMEZCVUR0QlFVTkVMRmRCUmtRc1RVRkZUenRCUVVOTU8wRkJRMEVzYTBKQlFVMHNUMEZCVGl4RFFVRmpMSFZDUVVGMVFpeFRRVUZ5UXl4RlFVRm5SQ3hKUVVGb1JDeERRVUZ4UkN4WlFVRlhPenRCUVVVNVJDeHhRa0ZCVHl4TlFVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNRMEZCZVVJc2MwSkJRWHBDTEVOQlFWQTdRVUZEUkN4aFFVaEVMRVZCUjBjc1NVRklTQ3hEUVVkUkxGVkJRVU1zVVVGQlJDeEZRVUZqT3p0QlFVVndRaXh2UWtGQlRTeDFRa0ZCVGl4RFFVRTRRaXhWUVVFNVFpeEZRVUV3UXl4SlFVRXhReXhEUVVFclF5eFZRVUZETEV0QlFVUXNSVUZCVnpzN1FVRkZlRVFzYzBOQlFYTkNMRXRCUVhSQ096dEJRVVZCTEc5Q1FVRkpMRU5CUVVNc1VVRkJUQ3hGUVVGbE8wRkJRMklzTmtKQlFWY3NSVUZCV0R0QlFVTkVPenRCUVVWRUxIbENRVUZUTEc5Q1FVRnZRaXhUUVVGd1FpeEhRVUZuUXl4dlFrRkJiMElzVlVGQk4wUXNTVUZCTWtVc1YwRkJWeXhQUVVGMFJqdEJRVU5CTEhOQ1FVRk5MR05CUVU0c1EwRkJjVUlzUjBGQmNrSXNRMEZCZVVJc2MwSkJRWHBDTEVWQlFXbEVMRU5CUVdwRUxFVkJRVzlFTEZGQlFYQkVMRVZCUVRoRUxFbEJRVGxFTEVOQlFXMUZMRmxCUVUwN08wRkJSWFpGTEhkQ1FVRk5MR05CUVU0c1IwRkJkVUlzVTBGQmRrSTdPMEZCUlVFN1FVRkRRU3h6UWtGQlNTeFJRVUZSTEVsQlFWSXNTMEZCYVVJc1MwRkJja0lzUlVGQk5FSTdRVUZETVVJc01FSkJRVTBzWVVGQlRpeERRVUZ2UWl4VlFVRndRaXhEUVVFclFpeFhRVUZYTEU5QlFWZ3NRMEZCYlVJc1EwRkJia0lzUTBGQkwwSXNTVUZCZDBRc1QwRkJlRVE3UVVGRFJDeHRRa0ZHUkN4TlFVVlBMRWxCUVVrc1VVRkJVU3hKUVVGU0xFdEJRV2xDTEZGQlFYSkNMRVZCUVN0Q08wRkJRM0JETERCQ1FVRk5MR0ZCUVU0c1EwRkJiMElzVDBGQmNFSXNRMEZCTkVJc1YwRkJWeXhQUVVGWUxFTkJRVzFDTEVOQlFXNUNMRU5CUVRWQ0xFbEJRWEZFTEU5QlFYSkVPMEZCUTBRc2JVSkJSazBzVFVGRlFUdEJRVU5NTERKQ1FVRlBMRzFDUVVGUU8wRkJRMFE3TzBGQlJVUXNjMEpCUVVrc1ZVRkJWU3c0UWtGQmIwSXNUVUZCVFN4VlFVRXhRaXhGUVVGelF5eE5RVUZOTEZkQlFUVkRMRVZCUTJRc1lVRkVZeXhGUVVORExGVkJSRVFzUlVGRFlTeFhRVUZYTEU5QlFWZ3NRMEZCYlVJc1EwRkJia0lzUTBGRVlpeEZRVU52UXl4WFFVUndReXhEUVVGa096dEJRVWRCTERCQ1FVRlJMRlZCUVZJc1IwRkJjVUlzYjBKQlFXOUNMRk5CUVhwRE8wRkJRMEVzTUVKQlFWRXNXVUZCVWl4SFFVRjFRaXh2UWtGQmIwSXNWVUZCTTBNN1FVRkRRU3gzUWtGQlRTeGhRVUZPTEVOQlFXOUNMRWxCUVhCQ0xFTkJRWGxDTEU5QlFYcENPenRCUVVWQk8wRkJRMEVzYzBKQlFVa3NjVUpCUVVvN1FVRkRRU3h6UWtGQlNTeG5Ra0ZCU2pzN1FVRkZRU3h6UWtGQlNTeFhRVUZYTEZWQlFXWXNSVUZCTWtJN1FVRkRla0lzTkVKQlFWRXNSMEZCVWl4RFFVRlpMRFpDUVVGYUxFVkJRVEpETEZkQlFWY3NUMEZCV0N4RFFVRnRRaXhEUVVGdVFpeERRVUV6UXpzN1FVRkZRU3h0UTBGQlpTeEZRVUZETEUxQlFVMHNWMEZCVUN4RlFVRnhRaXhaUVVGWkxHRkJRV3BETEVWQlFXZEVMRXRCUVVzc1YwRkJWeXhQUVVGWUxFTkJRVzFDTEVOQlFXNUNMRU5CUVhKRUxFVkJRVFJGTEZOQlFWTXNUVUZCVFN4WFFVRXpSaXhGUVVGM1J5eFhRVUZYTEc5Q1FVRnZRaXhUUVVGMlNTeEZRVUZyU2l4aFFVRmhMRzlDUVVGdlFpeFZRVUZ1VEN4RlFVRm1PenRCUVVWQkxEaENRVUZWTEVWQlFVTXNUVUZCU3l4UlFVRk9MRVZCUVdkQ0xFMUJRVTBzVFVGQlRTeFhRVUUxUWl4RlFVRjVReXhKUVVGSkxIVkNRVUYxUWl4TlFVRk5MR05CUVRkQ0xFZEJRVGhETEVkQlFUTkdMRVZCUVdkSExFMUJRVTBzUlVGQlF5eFBRVUZQTEZsQlFWSXNSVUZCYzBJc1VVRkJVU3hSUVVFNVFpeEZRVUYwUnl4RlFVRldPMEZCUlVRc2JVSkJVRVFzVFVGUFR6dEJRVU5NTERSQ1FVRlJMRWRCUVZJc1EwRkJXU3dyUTBGQldpeEZRVUUyUkN4WFFVRlhMRTlCUVZnc1EwRkJiVUlzUTBGQmJrSXNRMEZCTjBRN08wRkJSVUVzT0VKQlEwVXNSVUZCUXl4TlFVRk5MRkZCUVZBN1FVRkRReXd3UWtGQlNTeDFRa0ZCZFVJc1RVRkJUU3hqUVVFM1FpeEhRVUU0UXl4SFFVUnVSRHRCUVVWRExEUkNRVUZOTEUxQlFVMHNWMEZHWWp0QlFVZERMRFJDUVVGTkxFVkJRVU1zVlVGQlZTeFhRVUZYTEU5QlFWZ3NRMEZCYlVJc1EwRkJia0lzUTBGQldDeERRVUZuUXl4M1EwRkJhRU03UVVGSVVDeHhRa0ZFUmp0QlFVOUVPenRCUVVWRU96czdPenM3TzBGQlQwRXNkMEpCUVUwc1YwRkJUaXhEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhQUVVFNVFpeEZRVUYxUXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOb1JDdzBRa0ZCVVN4SFFVRlNMRU5CUVZrc09FSkJRVm9zUlVGQk5FTXNTMEZCTlVNN08wRkJSVUVzZDBKQlFVa3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hMUVVGdlFpeEhRVUY0UWl4RlFVRTJRanRCUVVNelFpdzRRa0ZCVVN4WFFVRlhMRTlCUVZnc1EwRkJiVUlzUTBGQmJrSXNRMEZCVWp0QlFVTkVMSEZDUVVaRUxFMUJSVTg3UVVGRFRDdzJRa0ZCVHl3clFrRkJVRHRCUVVORU8wRkJRMFlzYlVKQlVrUTdPMEZCVlVFN1FVRkRRVHRCUVVOQkxITkNRVUZKTEdsQ1FVRnBRaXhaUVVGWkxGbEJRVmM3TzBGQlJURkRPenM3T3pzN08wRkJUMEVzZDBKQlFVa3NWVUZCVlN4RlFVRkRMRTFCUVVzc1VVRkJUaXhGUVVGblFpeE5RVUZOTEUxQlFVMHNWMEZCTlVJc1JVRkJlVU1zU1VGQlNTeDFRa0ZCZFVJc1RVRkJUU3hqUVVFM1FpeEhRVUU0UXl4SFFVRXpSaXhGUVVGblJ5eE5RVUZOTEVWQlFVVXNWVUZCVlN4WFFVRlhMRTlCUVZnc1EwRkJiVUlzUTBGQmJrSXNRMEZCV2l4RlFVRjBSeXhGUVVGa096dEJRVVZCTERCQ1FVRk5MRmRCUVU0c1EwRkJhMElzVjBGQmJFSXNRMEZCT0VJc1QwRkJPVUlzUlVGQmRVTXNWVUZCUXl4TFFVRkVMRVZCUVZjN1FVRkRhRVFzT0VKQlFWRXNSMEZCVWl4RFFVRlpMSGRDUVVGYUxFVkJRWE5ETEV0QlFYUkRPMEZCUTBRc2NVSkJSa1E3UVVGSFJDeHRRa0ZrYjBJc1JVRmphRUlzVFVGQlRTeFhRVUZPTEVkQlFXOUNMRWRCUVhKQ0xFZEJRVFJDTEVOQlFUZENMRWRCUVd0RExFbEJaR2hDTEVOQlFYSkNPMEZCWjBKRUxHbENRVGxGUkN4RlFUaEZSeXhMUVRsRlNDeERRVGhGVXl4VlFVRlRMRTFCUVZRc1JVRkJhVUk3UVVGRGVFSXNNRUpCUVZFc1IwRkJVaXhEUVVGWkxHdENRVUZhTEVWQlFXZERMRTFCUVdoRE8wRkJRMEVzZVVKQlFVOHNUVUZCVUR0QlFVTkVMR2xDUVdwR1JEdEJRV3RHUkN4bFFUTkdSRHRCUVRSR1JDeGhRV3BIUkR0QlFXdEhSRHRCUVVOR0xGTkJNMGRFTEVWQk1rZEhMRlZCUVZNc1IwRkJWQ3hGUVVGak8wRkJRMllzYVVKQlFVOHNPRUpCUVZBc1JVRkJkVU1zUjBGQmRrTTdRVUZEUkN4VFFUZEhSRHRCUVRoSFJDeFBRWGhJVFN4RFFVRlFPMEZCZVVoRU96dEJRVVZFT3pzN096czdPM05EUVVsclFpeEhMRVZCUVVzN1FVRkRja0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYVVJc1RVRkJha0lzUlVGQmVVSTdPMEZCUlRGRExGbEJRVWtzVVVGQlVTeExRVUZhTzBGQlEwRXNXVUZCU1N4UlFVRlJMRU5CUVZvN08wRkJSVUVzWVVGQlN5eFJRVUZSTEVOQlFXSXNSVUZCWjBJc1VVRkJVU3hOUVVGTkxHRkJRVTRzUTBGQmIwSXNUVUZCTlVNc1JVRkJiMFFzVDBGQmNFUXNSVUZCTmtRN1FVRkRNMFFzWTBGQlNTeFZRVUZWTEUxQlFVMHNZVUZCVGl4RFFVRnZRaXhMUVVGd1FpeERRVUZrTzBGQlEwRXNZMEZCU1N4WlFVRlpMRk5CUVdoQ0xFVkJRVEpDTzBGQlEzcENMR2RDUVVGSkxGRkJRVkVzVlVGQlVpeExRVUYxUWl4SFFVRXpRaXhGUVVGblF6dEJRVU01UWl4elFrRkJVU3hKUVVGU08wRkJRMEU3UVVGRFJEdEJRVU5HTzBGQlEwWTdPMEZCUlVRc1dVRkJTU3hWUVVGVkxFdEJRV1FzUlVGQmNVSTdRVUZEYmtJc2FVSkJRVThzYlVKQlFWQTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUQ3hwUWtGQlR5eE5RVUZOTEdGQlFVNHNRMEZCYjBJc1MwRkJjRUlzUTBGQlVEdEJRVU5CTEd0Q1FVRlJMRGhDUVVGU08wRkJRMFE3UVVGRFJpeFBRWEpDVFN4RFFVRlFPMEZCZFVKRU96dEJRVVZFT3pzN096czdPenR6UTBGTGEwSXNSeXhGUVVGTE8wRkJRM0pDTEZWQlFVa3NRMEZCUXl4SFFVRk1MRVZCUVZVc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeHpRa0ZCVml4RFFVRk9PMEZCUTFZc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNZVUZCVHl4elFrRkJXU3hWUVVGVExFOUJRVlFzUlVGQmFVSXNUVUZCYWtJc1JVRkJlVUk3TzBGQlJURkRMRmxCUVVrc1lVRkJZU3h6UWtGQlZTeEhRVUZXTEVOQlFXcENPMEZCUTBFc1dVRkJTU3haUVVGWkxGZEJRVmNzVFVGQk0wSTdPMEZCUlVFc1dVRkJTU3hOUVVGTkxHTkJRVTRzUTBGQmNVSXNZMEZCY2tJc1EwRkJiME1zVTBGQmNFTXNTMEZCYTBRc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEZOQlFYSkNMRVZCUVdkRExFMUJRV2hETEV0QlFUSkRMRTlCUVU4c1VVRkJlRWNzUlVGQmEwZzdRVUZEYUVnc2EwSkJRVkVzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRk5CUVhKQ0xFTkJRVkk3UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVEN4blFrRkJUU3hqUVVGT0xFTkJRWEZDTEZOQlFYSkNMRWxCUVd0RE8wRkJRMmhETEc5Q1FVRlJMRTlCUVU4N1FVRkVhVUlzVjBGQmJFTTdPMEZCU1VFc2FVSkJRVThzT0VOQlFWQTdRVUZEUkR0QlFVTkdMRTlCWkUwc1EwRkJVRHRCUVdkQ1JEczdRVUZGUkRzN096czdPenM3TzJsRFFVMWhMRThzUlVGQlV5eFRMRVZCUVZjN1FVRkRMMElzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1lVRkJUeXh6UWtGQldTeFZRVUZUTEU5QlFWUXNSVUZCYVVJc1RVRkJha0lzUlVGQmVVSTdPMEZCUlRGRExGbEJRVWtzTkVKQlFVbzdPMEZCUlVFN1FVRkRRU3haUVVGSkxFMUJRVTBzVjBGQlRpeExRVUZ6UWl4VFFVRXhRaXhGUVVGeFF6dEJRVU51UXl4cFFrRkJUeXh6UTBGQlVEdEJRVU5FT3p0QlFVVkVPMEZCUTBFc1dVRkJTU3hEUVVGRExGVkJRVlVzVDBGQlZpeERRVUZyUWl4WFFVRnNRaXhEUVVGTUxFVkJRWEZETzBGQlEyNURMSE5DUVVGWkxGVkJRVlVzVTBGQlZpeERRVUZ2UWl4VlFVRlZMRTlCUVZZc1EwRkJhMElzUjBGQmJFSXNTVUZCZVVJc1EwRkJOME1zUTBGQldqdEJRVU5FT3p0QlFVVkVMRGhDUVVGelFpeGpRVUZqTEZOQlFXUXNSMEZCTUVJc1lVRkJNVUlzUjBGQk1FTXNTMEZCU3l4TFFVRk1MRU5CUVZrc1MwRkJTeXhOUVVGTUxFdEJRV2RDTEV0QlFXcENMRWRCUVRCQ0xFTkJRWEpETEVOQlFXaEZPenRCUVVWQk8wRkJRMEU3UVVGRFFTeGpRVUZOTEdOQlFVNHNRMEZCY1VJc1UwRkJja0lzU1VGQmEwTTdRVUZEYUVNc1pVRkJTeXh0UWtGRU1rSTdRVUZGYUVNc2EwSkJRVkVzVDBGQlR6dEJRVVpwUWl4VFFVRnNRenM3UVVGTFFUdEJRVU5CTEdOQlFVMHNZVUZCVGl4RFFVRnZRaXhQUVVGd1FpeERRVUUwUWl4dFFrRkJOVUlzU1VGQmJVUXNUMEZCYmtRN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMR2RDUVVGUkxHMUNRVUZTT3p0QlFVVkJMR05CUVUwc1YwRkJUaXhEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXh6UWtGQmMwSXNVMEZCY0VRc1JVRkJLMFFzVlVGQlF5eEhRVUZFTEVWQlFWTTdRVUZEZEVVc1kwRkJTU3hKUVVGSkxGRkJRVW9zUzBGQmFVSXNTVUZCU1N4RlFVRktMRWRCUVZNc1UwRkJPVUlzUlVGQmVVTTdRVUZEZGtNc2IwSkJRVkVzUjBGQlVpeERRVUZaTEhORFFVRmFMRVZCUVc5RUxFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFUZEVPMEZCUTBRN1FVRkRSaXhUUVVwRU8wRkJTMFFzVDBGeVEwMHNRMEZCVUR0QlFYVkRSRHM3UVVGRlJEczdPenM3T3p0dFEwRkpaU3hwUWl4RlFVRnRRanRCUVVOb1F5eFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hoUVVGUExITkNRVUZaTEZWQlFWTXNUMEZCVkN4RlFVRnJRaXhOUVVGc1FpeEZRVUV3UWpzN1FVRkZNME1zV1VGQlNTeE5RVUZOTEdOQlFVNHNRMEZCY1VJc1kwRkJja0lzUTBGQmIwTXNhVUpCUVhCRExFTkJRVW9zUlVGQk5FUTdRVUZETVVRc2FVSkJRVThzVFVGQlRTeGpRVUZPTEVOQlFYRkNMR2xDUVVGeVFpeERRVUZRTzBGQlEwRXNhMEpCUVZFc2MwSkJRVkk3UVVGRFJDeFRRVWhFTEUxQlIwODdRVUZEVEN4cFFrRkJUeXcwUTBGQlVEdEJRVU5FTzBGQlEwWXNUMEZTVFN4RFFVRlFPMEZCVTBRN08wRkJSVVE3T3pzN096czdPenR4UTBGTmFVSXNUeXhGUVVGVExGTXNSVUZCVnp0QlFVTnVReXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFqczdRVUZGTVVNc1dVRkJTU3gzUWtGQlNqczdRVUZGUVR0QlFVTkJMRmxCUVVrc1RVRkJUU3hYUVVGT0xFdEJRWE5DTEZOQlFURkNMRVZCUVhGRE8wRkJRMjVETEdsQ1FVRlBMSE5EUVVGUU8wRkJRMFE3TzBGQlJVUXNNRUpCUVd0Q0xHdENRVUZyUWl4VFFVRnNRaXhIUVVFNFFpeFJRVUU1UWl4SFFVRjVReXhMUVVGTExFdEJRVXdzUTBGQldTeExRVUZMTEUxQlFVd3NTMEZCWjBJc1MwRkJha0lzUjBGQk1FSXNRMEZCY2tNc1EwRkJNMFE3TzBGQlJVRTdRVUZEUVN4alFVRk5MRmxCUVU0c1EwRkJiVUlzVTBGQmJrSXNTVUZCWjBNN1FVRkRPVUlzWlVGQlN5eGxRVVI1UWp0QlFVVTVRaXhyUWtGQlVTeFBRVUZQTzBGQlJtVXNVMEZCYUVNN08wRkJTMEVzWTBGQlRTeGhRVUZPTEVOQlFXOUNMRTlCUVhCQ0xFTkJRVFJDTEdWQlFUVkNMRWxCUVN0RExFOUJRUzlET3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeG5Ra0ZCVVN4bFFVRlNPenRCUVVWQkxHTkJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeHJRa0ZCYTBJc1UwRkJhRVFzUlVGQk1rUXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRiRVVzWTBGQlNTeEpRVUZKTEZGQlFVb3NTMEZCYVVJc1NVRkJTU3hGUVVGS0xFZEJRVk1zVTBGQk9VSXNSVUZCZVVNN1FVRkRka01zYjBKQlFWRXNSMEZCVWl4RFFVRlpMR3REUVVGYUxFVkJRV2RFTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVhwRU8wRkJRMFE3UVVGRFJpeFRRVXBFTzBGQlMwUXNUMEU1UWswc1EwRkJVRHRCUVN0Q1JEczdRVUZGUkRzN096czdPenM3Y1VOQlMybENMRWNzUlVGQlN6dEJRVU53UWl4VlFVRkpMRU5CUVVNc1IwRkJUQ3hGUVVGVkxFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNjMEpCUVZZc1EwRkJUanRCUVVOV0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXdENMRTFCUVd4Q0xFVkJRVEJDT3p0QlFVVXpReXhaUVVGSkxHRkJRV0VzYzBKQlFWVXNSMEZCVml4RFFVRnFRanRCUVVOQkxGbEJRVWtzV1VGQldTeFhRVUZYTEUxQlFUTkNPenRCUVVWQkxGbEJRVWtzVFVGQlRTeFpRVUZPTEVOQlFXMUNMR05CUVc1Q0xFTkJRV3RETEZOQlFXeERMRXRCUVdkRUxFMUJRVTBzV1VGQlRpeERRVUZ0UWl4VFFVRnVRaXhGUVVFNFFpeE5RVUU1UWl4TFFVRjVReXhQUVVGUExGRkJRWEJITEVWQlFUaEhPMEZCUXpWSExHdENRVUZSTEUxQlFVMHNXVUZCVGl4RFFVRnRRaXhUUVVGdVFpeERRVUZTTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3N1FVRkRRU3huUWtGQlRTeFpRVUZPTEVOQlFXMUNMRk5CUVc1Q0xFbEJRV2RETzBGQlF6bENMRzlDUVVGUkxFOUJRVTg3UVVGRVpTeFhRVUZvUXp0QlFVZEJMR2xDUVVGUExEWkRRVUZRTzBGQlEwUTdRVUZEUml4UFFXUk5MRU5CUVZBN1FVRm5Ra1E3TzBGQlJVUTdPenM3T3pzN096dG5RMEZOV1N4WExFVkJRV0VzVHl4RlFVRlRPMEZCUTJoRExGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMR0ZCUVU4c2MwSkJRVmtzVlVGQlV5eFBRVUZVTEVWQlFXbENMRTFCUVdwQ0xFVkJRWGxDTzBGQlF6RkRPMEZCUTBFc1kwRkJUU3hQUVVGT0xFTkJRV01zVDBGQlpDeEpRVUY1UWl4WFFVRjZRanRCUVVOQkxHZENRVUZSTERaQ1FVRlNPMEZCUTBRc1QwRktUU3hEUVVGUU8wRkJUVVE3TzBGQlJVUTdPenM3T3pzN2EwTkJTV01zYVVJc1JVRkJiVUk3UVVGREwwSXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRlRMRTlCUVZRc1JVRkJhVUlzVFVGQmFrSXNSVUZCZVVJN08wRkJSVEZETEZsQlFVa3NVMEZCVXl4TlFVRk5MRTlCUVU0c1EwRkJZeXhwUWtGQlpDeERRVUZpT3p0QlFVVkJMRmxCUVVrc1YwRkJWeXhUUVVGbUxFVkJRVEJDTzBGQlEzaENMR2xDUVVGUExHZENRVUZRTzBGQlEwUXNVMEZHUkN4TlFVVlBPMEZCUTB3c2EwSkJRVkVzTWtKQlFWSTdRVUZEUkR0QlFVTkdMRTlCVkUwc1EwRkJVRHRCUVZkRU96dEJRVVZFT3pzN096czdPelJDUVVsUkxFc3NSVUZCVHp0QlFVTmlPMEZCUTBFc1kwRkJVU3hIUVVGU0xFTkJRVmtzVTBGQldqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096c3JRa0ZMVnl4SExFVkJRVXM3UVVGRFpDeFZRVUZKTEVOQlFVTXNSMEZCVEN4RlFVRlZMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzYzBKQlFWWXNRMEZCVGp0QlFVTldMR05CUVZFc1IwRkJVaXhEUVVGWkxHTkJRVm9zUlVGQk5FSXNSMEZCTlVJN08wRkJSVUVzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4aFFVRlBMSE5DUVVGWkxGVkJRVk1zVDBGQlZDeEZRVUZwUWl4TlFVRnFRaXhGUVVGNVFqczdRVUZGTVVNc1dVRkJTU3huUWtGQlNqczdRVUZGUVR0QlFVTkJMR3RDUVVGVkxFMUJRVTBzWVVGQlRpeERRVUZ2UWl4VlFVRndRaXhEUVVFclFpeEhRVUV2UWl4RFFVRldPenRCUVVWQk8wRkJRMEVzV1VGQlNTeERRVUZETEU5QlFVd3NSVUZCWXp0QlFVTmFMRzlDUVVGVkxFMUJRVTBzWVVGQlRpeERRVUZ2UWl4UFFVRndRaXhEUVVFMFFpeEhRVUUxUWl4RFFVRldPenRCUVVWQkxHTkJRVWtzUTBGQlF5eFBRVUZNTEVWQlFXTTdPMEZCUlZvc1owSkJRVWtzVTBGQlV5eHpRa0ZCVlN4SFFVRldMRVZCUVdVc1RVRkJOVUk3TzBGQlJVRTdRVUZEUVN4cFFrRkJTeXhKUVVGSkxFOUJRVlFzU1VGQmIwSXNUVUZCVFN4aFFVRk9MRU5CUVc5Q0xFOUJRWGhETEVWQlFXbEVPMEZCUXk5RExHdENRVUZKTEZGQlFWRXNVVUZCVWl4RFFVRnBRaXhOUVVGcVFpeERRVUZLTEVWQlFUaENPMEZCUXpWQ0xEQkNRVUZWTEUxQlFVMHNZVUZCVGl4RFFVRnZRaXhQUVVGd1FpeERRVUUwUWl4UFFVRTFRaXhEUVVGV08wRkJRMEU3UVVGRFJEdEJRVU5HTzBGQlEwWTdRVUZEUmpzN1FVRkZSQ3haUVVGSkxFTkJRVU1zVDBGQlRDeEZRVUZqTzBGQlExb3NhVUpCUVU4c01rSkJRVEpDTEVkQlFXeERPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzYTBKQlFWRXNUMEZCVWp0QlFVTkVPMEZCUlVZc1QwRXZRazBzUTBGQlVEdEJRV2REUkRzN1FVRkZSRHM3T3pzN096czdORUpCUzFFc1J5eEZRVUZMTzBGQlExZ3NZMEZCVVN4SFFVRlNMRU5CUVZrc1lVRkJZU3hIUVVGNlFqdEJRVU5CTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxHRkJRVThzYzBKQlFWa3NWVUZCUXl4UFFVRkVMRVZCUVZVc1RVRkJWaXhGUVVGeFFqczdRVUZGZEVNN1FVRkRRVHRCUVVOQkxGbEJRVWtzWVVGQllTeHpRa0ZCVlN4SFFVRldMRU5CUVdwQ08wRkJRMEVzV1VGQlNTeFpRVUZaTEZkQlFWY3NUVUZCTTBJN1FVRkRRU3haUVVGSkxFOUJRVThzVjBGQlZ5eEpRVUYwUWpzN1FVRkZRVHRCUVVOQkxGbEJRVWtzU1VGQlNTeFJRVUZLTEVOQlFXRXNiVUpCUVdJc1EwRkJTaXhGUVVGMVF6dEJRVU55UXl4elFrRkJXU3hOUVVGTkxFOUJRV3hDTzBGQlEwUTdPMEZCUlVRc1dVRkJTU3hEUVVGRExGVkJRVlVzVDBGQlZpeERRVUZyUWl4WFFVRnNRaXhEUVVGRUxFbEJRVzFETEVOQlFVTXNWVUZCVlN4UFFVRldMRU5CUVd0Q0xGZEJRV3hDTEVOQlFYaERMRVZCUVhkRk8wRkJRM1JGTEhOQ1FVRlpMRlZCUVZVc1UwRkJWaXhEUVVGdlFpeFZRVUZWTEU5QlFWWXNRMEZCYTBJc1IwRkJiRUlzU1VGQmVVSXNRMEZCTjBNc1EwRkJXanRCUVVORU96dEJRVVZFTEZsQlFVa3NNa0pCUVVvN1FVRkRRU3haUVVGSkxGTkJRVk1zV1VGQllpeEZRVUV5UWp0QlFVTjZRaXdyUWtGQmMwSXNUVUZCVFN4WlFVRk9MRU5CUVcxQ0xHTkJRVzVDTEVOQlFXdERMRk5CUVd4RExFbEJRU3RETEUxQlFVMHNXVUZCVGl4RFFVRnRRaXhUUVVGdVFpeERRVUV2UXl4SFFVRXJSU3hMUVVGeVJ6dEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1MQ3RDUVVGelFpeE5RVUZOTEdOQlFVNHNRMEZCY1VJc1kwRkJja0lzUTBGQmIwTXNVMEZCY0VNc1NVRkJhVVFzVFVGQlRTeGpRVUZPTEVOQlFYRkNMRk5CUVhKQ0xFTkJRV3BFTEVkQlFXMUdMRXRCUVhwSE8wRkJRMFE3TzBGQlJVUXNXVUZCU1N4elFrRkJjMElzYlVKQlFXMUNMR05CUVc1Q0xFTkJRV3RETEZGQlFXeERMRU5CUVhSQ0xFbEJRWEZGTEcxQ1FVRnRRaXhOUVVGdVFpeExRVUU0UWl4UFFVRlBMRkZCUVRsSExFVkJRWGRJTzBGQlEzUklMR3RDUVVGUkxFbEJRVklzUTBGQllTeFpRVUZpTEVWQlFUSkNMRzFDUVVGdFFpeEhRVUU1UXp0QlFVTkJMR3RDUVVGUkxHMUNRVUZ0UWl4SFFVRXpRanRCUVVORUxGTkJTRVFzVFVGSFR6dEJRVU5NTEdOQlFVa3NVMEZCVXl4WlFVRmlMRVZCUVRKQ08wRkJRM3BDT3p0QlFVVkJMR3RDUVVGTkxFOUJRVTRzUTBGQll5eFpRVUZrTEVOQlFUSkNMRk5CUVROQ0xFVkJRWE5ETEVsQlFYUkRMRU5CUVRKRExGVkJRVU1zVFVGQlJDeEZRVUZaTzBGQlEzSkVMRzFEUVVGelFpeE5RVUZOTEZsQlFVNHNRMEZCYlVJc1UwRkJia0lzUTBGQmRFSTdRVUZEUVN4elFrRkJVU3hKUVVGU0xFTkJRV0VzY1VKQlFXSXNSVUZCYjBNc2EwSkJRWEJETEVWQlFYZEVMRTFCUVhoRU8wRkJRMEVzYjBKQlFVMHNXVUZCVGl4RFFVRnRRaXhUUVVGdVFpeEZRVUU0UWl4TlFVRTVRaXhIUVVGMVF5eFBRVUZQTEZGQlFUbERPMEZCUTBFc2MwSkJRVkVzYlVKQlFXMUNMRWRCUVROQ08wRkJRMFFzWVVGTVJDeEZRVXRITEV0QlRFZ3NRMEZMVXl4VlFVRkRMRTFCUVVRc1JVRkJXVHRCUVVOdVFpeHpRa0ZCVVN4TFFVRlNMRU5CUVdNc05FSkJRV1FzUlVGQk5FTXNUVUZCTlVNN1FVRkRRU3h4UWtGQlR5eE5RVUZRTzBGQlEwUXNZVUZTUkR0QlFWVkVMRmRCWWtRc1RVRmhUenRCUVVOTU96dEJRVVZCTEd0Q1FVRk5MRTlCUVU0c1EwRkJZeXhSUVVGa0xFTkJRWFZDTEZOQlFYWkNMRVZCUVd0RExFbEJRV3hETEVOQlFYVkRMRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMnBFTEcxRFFVRnpRaXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNVMEZCY2tJc1EwRkJkRUk3UVVGRFFTeHpRa0ZCVVN4SlFVRlNMRU5CUVdFc2MwSkJRV0lzUlVGQmNVTXNhMEpCUVhKRExFVkJRWGxFTEUxQlFYcEVPMEZCUTBFc2IwSkJRVTBzWTBGQlRpeERRVUZ4UWl4VFFVRnlRaXhGUVVGblF5eE5RVUZvUXl4SFFVRjVReXhQUVVGUExGRkJRV2hFTzBGQlEwRXNjMEpCUVZFc2JVSkJRVzFDTEVkQlFUTkNPMEZCUTBRc1lVRk1SQ3hGUVV0SExFdEJURWdzUTBGTFV5eFZRVUZETEUxQlFVUXNSVUZCV1R0QlFVTnVRaXh6UWtGQlVTeExRVUZTTEVOQlFXTXNOa0pCUVdRc1JVRkJOa01zVFVGQk4wTTdRVUZEUVN4eFFrRkJUeXhOUVVGUU8wRkJRMFFzWVVGU1JEdEJRVk5FTzBGQlJVWTdRVUZGUml4UFFYcEVUU3hEUVVGUU8wRkJNRVJFT3pzN2MwSkJNV2xEVlN4TkxFVkJRVkU3UVVGRGFrSXNWVUZCU1N4UlFVRlJMRWxCUVZvN1FVRkRRU3haUVVGTkxFOUJRVTRzUjBGQlowSXNUVUZCYUVJN1FVRkRSQ3hMTzNkQ1FVVlpPMEZCUTFnc1ZVRkJTU3hSUVVGUkxFbEJRVm83UVVGRFFTeGhRVUZQTEUxQlFVMHNUMEZCWWp0QlFVTkVPenRCUVVWRU96czdPenM3TzNkQ1FVbHBRanRCUVVObUxGVkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNZVUZCVHl4TlFVRk5MRmRCUVdJN1FVRkRSRHM3UVVGRlJEczdPenM3YzBKQlNXVXNWU3hGUVVGWk8wRkJRM3BDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1dVRkJUU3hYUVVGT0xFZEJRVzlDTEZWQlFYQkNPenRCUVVWQkxGbEJRVTBzVjBGQlRpeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeE5RVUZOTEZkQlFYQkRMRVZCUVdsRUxGVkJRVk1zUjBGQlZDeEZRVUZqT3p0QlFVVTNSQ3haUVVGSkxGVkJRVlVzVFVGQlRTeHpRa0ZCVGl4RFFVRTJRaXhKUVVGSkxFbEJRVW9zUTBGQlV5eFJRVUYwUXl4RlFVRm5SQ3hKUVVGSkxFbEJRVW9zUTBGQlV5eFJRVUY2UkN4RFFVRmtPenRCUVVWQkxGbEJRVWtzVVVGQlVTeEZRVUZETEVsQlFVa3NTVUZCU1N4RlFVRlVMRVZCUVdFc1RVRkJUU3hWUVVGdVFpeEZRVUVyUWl4SlFVRkpMRWxCUVVrc1NVRkJka01zUlVGQk5rTXNUVUZCVFN4SlFVRkpMRVZCUVhaRUxFVkJRVEpFTEUxQlFVMHNSVUZCUXl4VlFVRlZMRTlCUVZnc1JVRkJha1VzUlVGQldqdEJRVU5CTEdOQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVZnc1IwRkJiVUlzVDBGQlJDeEhRVUZaTEVkQlFWb3NSMEZCYTBJc1IwRkJjRU03TzBGQlJVRXNZMEZCVFN4WFFVRk9MRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRXRCUVRsQ08wRkJRMFFzVDBGU1JEczdRVUZWUVR0QlFVTkJPMEZCUTBFc1dVRkJUU3hSUVVGT0xFTkJRV1VzVlVGQlppeEhRVUUwUWl4VlFVRTFRanM3UVVGRlFUdEJRVU5CTEZWQlFVa3NiMEpCUVc5Q0xHZERRVUZ6UWl4TlFVRk5MRmRCUVRWQ0xFVkJRWGxETEZWQlFYcERMRVZCUVhGRUxFdEJRWEpFTEVOQlFYaENPMEZCUTBFc1dVRkJUU3hwUWtGQlRpeEhRVUV3UWl4cFFrRkJNVUk3UVVGRlJEczdPenM3YTBKQmFXZERXU3hST3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzaHZRMlk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnpRa0U3T3pzN1NVRkpUU3hwUWp0QlFVVktMRFpDUVVGWkxFVkJRVm9zUlVGQlowSXNSMEZCYUVJc1JVRkJjVUlzWVVGQmNrSXNSVUZCYjBNc1dVRkJjRU1zUlVGQmEwUXNXVUZCYkVRc1JVRkJaMFVzVFVGQmFFVXNSVUZCZDBVc1MwRkJlRVVzUlVGQkswVXNhMEpCUVM5RkxFVkJRVzFITzBGQlFVRTdPMEZCUTJwSExGRkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVUwc1IwRkJUaXhIUVVGWkxFVkJRVm83UVVGRFFTeFZRVUZOTEVsQlFVNHNSMEZCWVN4SFFVRmlPMEZCUTBFc1ZVRkJUU3hqUVVGT0xFZEJRWFZDTEdGQlFYWkNPMEZCUTBFc1ZVRkJUU3hoUVVGT0xFZEJRWE5DTEZsQlFYUkNPMEZCUTBFc1ZVRkJUU3hoUVVGT0xFZEJRWE5DTEZsQlFYUkNPMEZCUTBFc1ZVRkJUU3hQUVVGT0xFZEJRV2RDTEUxQlFXaENPMEZCUTBFc1ZVRkJUU3hOUVVGT0xFZEJRV1VzUzBGQlpqdEJRVU5CTEZWQlFVMHNiVUpCUVU0c1IwRkJORUlzYTBKQlFUVkNPMEZCUTBRN096czdkMEpCUlZFN1FVRkRVQ3hWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEdGQlFVOHNUVUZCVFN4SFFVRmlPMEZCUTBRN096dDNRa0ZGVXp0QlFVTlNMRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eE5RVUZOTEVsQlFXSTdRVUZEUkRzN08zZENRVVZuUWp0QlFVTm1MRlZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzWVVGQlR5eE5RVUZOTEdOQlFXSTdRVUZEUkRzN096czdhMEpCU1Zrc2FVSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNeFJHWTdPenM3U1VGRlRTeFhPMEZCUlVvc2RVSkJRVmtzVlVGQldpeEZRVUYzUWl4VFFVRjRRaXhGUVVGdFF5eHZRa0ZCYmtNc1JVRkJlVVE3UVVGQlFUczdRVUZEZGtRc1VVRkJTU3hEUVVGRExGVkJRVXdzUlVGQmFVSXNUVUZCVFN4TlFVRk5MSGRFUVVGT0xFTkJRVTQ3UVVGRGFrSXNVVUZCU1N4RFFVRkRMRk5CUVV3c1JVRkJaMElzVFVGQlRTeE5RVUZOTERaRFFVRk9MRU5CUVU0N1FVRkRhRUlzVVVGQlNTeERRVUZETEc5Q1FVRk1MRVZCUVRKQ0xFMUJRVTBzVFVGQlRTeG5SRUZCVGl4RFFVRk9PenRCUVVVelFpeFRRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xHOUNRVUUxUWp0QlFVTkJMRk5CUVVzc1ZVRkJUQ3hIUVVGclFpeFZRVUZzUWp0QlFVTkJMRk5CUVVzc1UwRkJUQ3hIUVVGcFFpeFRRVUZxUWp0QlFVTkVPenM3TzNsRFFVVnhRaXhWTEVWQlFWazdRVUZEYUVNc1lVRkJUeXhMUVVGTExGTkJRVXdzUTBGQlpTeHZRa0ZCWml4RFFVRnZReXhWUVVGd1F5eERRVUZRTzBGQlEwUTdPenR6UTBGRmEwSXNUeXhGUVVGVE8wRkJRVUU3TzBGQlJURkNMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanM3UVVGRmRFTXNXVUZCU1N4aFFVRmhMSE5DUVVGVkxFOUJRVllzUTBGQmFrSTdRVUZEUVN4WlFVRkpMRk5CUVZNc1YwRkJWeXhOUVVGNFFqdEJRVU5CTEZsQlFVa3NXVUZCV1N4WFFVRlhMRkZCUVROQ08wRkJRMEVzV1VGQlNTeHhRa0ZCU2pzN1FVRkZRU3haUVVGSkxHMUNRVUZ0UWl4elFrRkJWU3hOUVVGTExGVkJRV1lzUTBGQmRrSTdRVUZEUVN4WlFVRkpMR1ZCUVdVc2FVSkJRV2xDTEUxQlFYQkRPenRCUVVWQkxGbEJRVWtzUTBGQlF5eE5RVUZNTEVWQlFXRTdRVUZEV0N4dFFrRkJVeXhYUVVGVU8wRkJRMFE3TzBGQlJVUXNXVUZCU1N4RFFVRkRMRk5CUVV3c1JVRkJaMEk3UVVGRFpDeHpRa0ZCV1N4VFFVRmFPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzYzBKQlFWa3NWVUZCVlN4VFFVRldMRU5CUVc5Q0xGVkJRVlVzVjBGQlZpeERRVUZ6UWl4SFFVRjBRaXhKUVVFMlFpeERRVUZxUkN4RFFVRmFPMEZCUTBRN08wRkJSVVFzZFVKQlFXVXNjVUpCUVZNc1RVRkJTeXh2UWtGQlpDeEZRVUZ2UXl4bFFVRndReXhGUVVGeFJDeGpRVUZ5UkN4RlFVRnhSU3hUUVVGeVJTeERRVUZtTzBGQlEwRXNXVUZCU1N4WFFVRlhMRTFCUVVzc2IwSkJRVXdzUTBGQk1FSXNUVUZCZWtNc1JVRkJhVVE3UVVGREwwTXNZMEZCU1N4RFFVRkRMRkZCUVZFc1QwRkJVaXhEUVVGblFpeFBRVUZvUWl4RFFVRkVMRWxCUVRaQ0xFTkJRVU1zVVVGQlVTeFBRVUZTTEVOQlFXZENMRzFDUVVGb1FpeERRVUZzUXl4RlFVRjNSVHRCUVVOMFJTd3lRa0ZCWlN4UFFVRm1PMEZCUTBRc1YwRkdSQ3hOUVVWUE96dEJRVVZNTzBGQlEwRXNaMEpCUVVrc1YwRkJWeXh6UTBGQk1FSXNUVUZCU3l4dlFrRkJMMElzUlVGQmNVUXNaVUZCY2tRc1JVRkJjMFVzWTBGQmRFVXNRMEZCWmp0QlFVTkJMREpDUVVGbExGTkJRVk1zVFVGQlZDeEhRVUZyUWl4TlFVRnNRaXhIUVVFeVFpeFRRVUZUTEUxQlFYQkRMRWRCUVRaRExGTkJRVFZFTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3huUWtGQlVTeEhRVUZTTEVOQlFWa3NiVU5CUVcxRExFMUJRVzVETEVkQlFUUkRMRXRCUVhoRUxFVkJRU3RFTEZsQlFTOUVPMEZCUTBFc1pVRkJUeXhOUVVGTExGTkJRVXdzUTBGQlpTeHBRa0ZCWml4RFFVRnBReXhaUVVGcVF5eEZRVUVyUXl4SlFVRXZReXhEUVVGdlJDeFZRVUZETEUxQlFVUXNSVUZCV1RzN1FVRkZja1VzYTBKQlFWRXNUVUZCVWp0QlFVVkVMRk5CU2swc1JVRkpTaXhMUVVwSkxFTkJTVVVzVlVGQlF5eExRVUZFTEVWQlFWYzdPMEZCUld4Q0xHdENRVUZSTEVkQlFWSXNRMEZCV1N4VFFVRmFMRVZCUVhWQ0xFdEJRWFpDT3p0QlFVVkJMSE5DUVVGWkxFMUJRVm83UVVGRFFTeHRRa0ZCVXl4WlFVRlVPenRCUVVWQkxHTkJRVWtzVjBGQlZ5eHpRMEZCTUVJc1RVRkJTeXh2UWtGQkwwSXNSVUZCY1VRc1pVRkJja1FzUlVGQmMwVXNZMEZCZEVVc1EwRkJaanRCUVVOQkxIbENRVUZsTEZOQlFWTXNUVUZCVkN4SFFVRnJRaXhOUVVGc1FpeEhRVUV5UWl4VFFVRlRMRTFCUVhCRExFZEJRVFpETEZOQlFUVkVPenRCUVVWQkxHdENRVUZSTEVkQlFWSXNRMEZCV1N3clEwRkJLME1zVFVGQkwwTXNSMEZCZDBRc1MwRkJjRVVzUlVGQk1rVXNVMEZCTTBVN1FVRkRRU3hwUWtGQlR5eE5RVUZMTEZOQlFVd3NRMEZCWlN4cFFrRkJaaXhEUVVGcFF5eFpRVUZxUXl4RFFVRlFPMEZCUTBRc1UwRm9RazBzUlVGblFrb3NTVUZvUWtrc1EwRm5Ra01zVlVGQlF5eE5RVUZFTEVWQlFWazdRVUZEYkVJc2EwSkJRVkVzVFVGQlVqdEJRVU5FTEZOQmJFSk5MRVZCYTBKS0xFdEJiRUpKTEVOQmEwSkZMRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMjVDTEdsQ1FVRlBMRTFCUVZBN1FVRkRSQ3hUUVhCQ1RTeERRVUZRTzBGQmMwSkVMRTlCZGtSTkxFTkJRVkE3UVVGM1JFUTdPenN3UTBGRmNVSXNWeXhGUVVGaE8wRkJRVUU3TzBGQlEycERMR0ZCUVU4c2MwSkJRVmtzVlVGQlF5eFBRVUZFTEVWQlFWVXNUVUZCVml4RlFVRnhRanM3UVVGRmRFTXNXVUZCU1N4aFFVRmhMSE5DUVVGVkxGZEJRVllzUTBGQmFrSTdRVUZEUVN4WlFVRkpMRk5CUVZNc1YwRkJWeXhOUVVGNFFqdEJRVU5CTEZsQlFVa3NWMEZCVnl4WFFVRlhMRkZCUVRGQ096dEJRVVZCTEZsQlFVa3NiVUpCUVcxQ0xITkNRVUZWTEU5QlFVc3NWVUZCWml4RFFVRjJRanRCUVVOQkxGbEJRVWtzWlVGQlpTeHBRa0ZCYVVJc1RVRkJjRU03TzBGQlJVRXNXVUZCU1N4RFFVRkRMRTFCUVV3c1JVRkJZVHRCUVVOWUxHMUNRVUZUTEZkQlFWUTdRVUZEUkRzN1FVRkZSQ3haUVVGSkxGZEJRVmNzV1VGQldDeEpRVUV5UWl4RFFVRkRMRkZCUVdoRExFVkJRVEJETzBGQlEzaERMSEZDUVVGWExGTkJRVmc3UVVGRFJDeFRRVVpFTEUxQlJVODdRVUZEVEN4eFFrRkJWeXhUUVVGVExGTkJRVlFzUTBGQmJVSXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xFZEJRWEpDTEVsQlFUUkNMRU5CUVM5RExFTkJRVmc3UVVGRFJEczdRVUZGUkN4WlFVRkpMRmRCUVZjc2MwTkJRVEJDTEU5QlFVc3NiMEpCUVM5Q0xFVkJRWEZFTEdWQlFYSkVMRVZCUVhORkxGVkJRWFJGTEVOQlFXWTdPMEZCUlVFc2MwSkJRV01zVTBGQlV5eE5RVUZVTEVkQlFXdENMRTFCUVd4Q0xFZEJRVEpDTEZOQlFWTXNUVUZCY0VNc1IwRkJOa01zVVVGQk0wUTdRVUZEUVN4blFrRkJVU3hIUVVGU0xFTkJRVmtzWjBOQlFXZERMRTFCUVdoRExFZEJRWGxETEV0QlFYSkVMRVZCUVRSRUxGZEJRVFZFTzBGQlEwRXNaVUZCVHl4UFFVRkxMRk5CUVV3c1EwRkJaU3h4UWtGQlppeERRVUZ4UXl4WFFVRnlReXhGUVVGclJDeEpRVUZzUkN4RFFVRjFSQ3hWUVVGRExFMUJRVVFzUlVGQldUczdRVUZGZUVVc2EwSkJRVkVzVFVGQlVqdEJRVVZFTEZOQlNrMHNSVUZKU2l4TFFVcEpMRU5CU1VVc1dVRkJUVHM3UVVGRllpeHhRa0ZCVnl4TlFVRllPMEZCUTBFc2JVSkJRVk1zV1VGQlZEczdRVUZGUVN4M1FrRkJZeXh4UWtGQlV5eFBRVUZMTEc5Q1FVRmtMRVZCUVc5RExHVkJRWEJETEVWQlFYRkVMRlZCUVhKRUxFVkJRV2xGTEZGQlFXcEZMRU5CUVdRN08wRkJSVUVzYTBKQlFWRXNSMEZCVWl4RFFVRlpMR2REUVVGblF5eE5RVUZvUXl4SFFVRjVReXhMUVVGeVJDeEZRVUUwUkN4WFFVRTFSRHRCUVVOQkxHbENRVUZQTEU5QlFVc3NVMEZCVEN4RFFVRmxMSEZDUVVGbUxFTkJRWEZETEZkQlFYSkRMRU5CUVZBN1FVRkRSQ3hUUVdKTkxFVkJZVW9zU1VGaVNTeERRV0ZETEZWQlFVTXNUVUZCUkN4RlFVRlpPMEZCUTJ4Q0xHdENRVUZSTEUxQlFWSTdRVUZEUkN4VFFXWk5MRVZCWlVvc1MwRm1TU3hEUVdWRkxGVkJRVU1zVFVGQlJDeEZRVUZaTzBGQlEyNUNMR2xDUVVGUExFMUJRVkE3UVVGRFJDeFRRV3BDVFN4RFFVRlFPMEZCYlVKRUxFOUJNVU5OTEVOQlFWQTdRVUV5UTBRN096czdPMnRDUVVkWkxGYzdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkROMGhtT3p0QlFVTkJPenM3TzBGQlEwRTdPenM3T3p0SlFVVk5MRTA3UVVGRlNpeHJRa0ZCV1N4dlFrRkJXaXhGUVVGclF6dEJRVUZCT3p0QlFVTm9ReXhSUVVGSkxFTkJRVU1zYjBKQlFVd3NSVUZCTWtJc1RVRkJUU3hOUVVGTkxIVkVRVUZPTEVOQlFVNDdRVUZETTBJc1UwRkJTeXh2UWtGQlRDeEhRVUUwUWl4dlFrRkJOVUk3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3p0QlFYTkdRVHM3T3p0blEwRkpXU3h2UWl4RlFVRnpRanRCUVVGQk96dEJRVVZvUXl4VlFVRkpMRU5CUVVNc1MwRkJTeXhYUVVGTUxFVkJRVXdzUlVGQmVVSXNUMEZCVHl4TFFVRlFPMEZCUTNwQ0xGVkJRVWtzUTBGQlF5eHZRa0ZCVEN4RlFVRXlRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTERSRFFVRldMRU5CUVU0N08wRkJSVE5DTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU1zV1VGQlNTeHZRa0ZCU2p0QlFVTkJMRmxCUVVrc2QwSkJRVW83UVVGRFFTeFpRVUZKTERKQ1FVRktPMEZCUTBFc1dVRkJTU3c0UWtGQlNqdEJRVU5CTEZsQlFVa3NXVUZCV1N4TFFVRm9RanM3UVVGRlFTeFpRVUZKTEdOQlFXTXNVMEZCWkN4WFFVRmpMRU5CUVVNc1RVRkJSQ3hGUVVGWk8wRkJRelZDTEd0Q1FVRlJMRXRCUVZJc1EwRkJZeXd3UTBGQlpDeEZRVUV3UkN4TlFVRXhSRHRCUVVOQkxHbENRVUZQTEUxQlFWQTdRVUZEUkN4VFFVaEVPenRCUVV0QkxGbEJRVWtzWTBGQll5eFRRVUZrTEZkQlFXTXNRMEZCUXl4TlFVRkVMRVZCUVZrN1FVRkROVUlzYzBKQlFWa3NTVUZCV2p0QlFVTkJMR2xDUVVGUExFMUJRVkE3UVVGRFJDeFRRVWhFT3p0QlFVdEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBKQlFWRXNTVUZCVWl4RFFVRmhMSEZFUVVGaU8wRkJRMEVzWjBKQlFWRXNTVUZCVWl4RFFVRmhMRGhDUVVGaUxFVkJRVFpETEc5Q1FVRTNRenRCUVVOQkxHVkJRVThzVFVGQlN5eFhRVUZNTEVOQlFXbENMRzlDUVVGcVFpeERRVUZ6UXl4dlFrRkJkRU1zUlVGRFRpeEpRVVJOTEVOQlEwUXNWVUZCUXl4cFFrRkJSQ3hGUVVGMVFqdEJRVU16UWp0QlFVTkJMR3RDUVVGUkxFbEJRVklzUTBGQllTdzRRa0ZCWWpzN1FVRkZRVHRCUVVOQk8wRkJRMEVzSzBKQlFYRkNMR2xDUVVGeVFqczdRVUZGUVN4alFVRkpMRzFDUVVGdFFpeHJRa0ZCYTBJc1owSkJRWHBET3p0QlFVVkJMR05CUVVrc2NVSkJRWEZDTEdkQ1FVRjZRaXhGUVVFeVF6dEJRVU42UXl4dFFrRkJUeXhyUWtGQmEwSXNZVUZCZWtJN1FVRkRSRHM3UVVGRlJEdEJRVU5CTEdsQ1FVRlBMRTFCUVVzc1owSkJRVXdzUTBGQmMwSXNkVUpCUVhSQ0xFTkJRVGhETEdkQ1FVRTVReXhEUVVGUU8wRkJRMFFzVTBGcVFrMHNSVUZwUWtvc1YwRnFRa2tzUlVGclFrNHNTVUZzUWswc1EwRnJRa1FzVlVGQlF5eGhRVUZFTEVWQlFXMUNPMEZCUTNaQ0xHTkJRVWtzVTBGQlNpeEZRVUZsTEU5QlFVOHNTMEZCVURzN1FVRkZaaXhyUWtGQlVTeEpRVUZTTEVOQlFXRXNLMEpCUVdJN08wRkJSVUU3TzBGQlJVRXNhME5CUVhkQ0xHRkJRWGhDT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4alFVRkpMRk5CUVZNc1NVRkJZanM3UVVGRlFTeHBRa0ZCVHl4TlFVRlFPMEZCUTBRc1UwRnlRMDBzUlVGeFEwb3NWMEZ5UTBrc1JVRnpRMDRzU1VGMFEwMHNRMEZ6UTBRc1ZVRkJReXhaUVVGRUxFVkJRV3RDTzBGQlEzUkNMR05CUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3h0UTBGQmJVTXNXVUZCYUVRN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzWTBGQlNTeG5Ra0ZCWjBJc1NVRkJjRUk3UVVGRFFTeGpRVUZKTEdkQ1FVRktPenRCUVVWQkxHTkJRVWtzWVVGQlNpeEZRVUZ0UWpzN1FVRkZha0k3UVVGRFFTeHpRa0ZCVlN4TlFVRkxMRkZCUVV3c1EwRkJZeXhoUVVGa0xFVkJRVlk3TzBGQlJVRTdRVUZEUkN4WFFVNUVMRTFCVFU4N08wRkJSVXdzWjBKQlFVa3NVMEZCVXl4elFrRkJWU3h2UWtGQlZpeEZRVUZuUXl4TlFVRTNRenM3UVVGRlFUdEJRVU5CTEhOQ1FVRlZMRTFCUVVzc1VVRkJUQ3hEUVVGakxGVkJRV1FzUTBGQmVVSXNUVUZCZWtJc1EwRkJWanRCUVVORU96dEJRVVZFTzBGQlEwRXNhVUpCUVU4c1QwRkJVRHRCUVVORUxGTkJja1ZOTEVWQmNVVktMRmRCY2tWSkxFVkJjMFZPTEVsQmRFVk5MRU5CYzBWRUxGVkJRVU1zVDBGQlJDeEZRVUZoTzBGQlEycENMR05CUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3gxUWtGQllpeEZRVUZ6UXl4UFFVRjBRenM3UVVGRlFUdEJRVU5CTzBGQlEwRXNhVUpCUVU4c1QwRkJVRHRCUVVORUxGTkJOMFZOTEVWQk5rVktMRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMklzWTBGQlNTeFRRVUZLTEVWQlFXVXNUMEZCVHl4TFFVRlFPMEZCUTJZc2EwSkJRVkVzUzBGQlVpeERRVUZqTEc5RFFVRmtPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdOQlFVa3NWVUZCVlN4TlFVRkxMR1ZCUVV3c1EwRkJjVUlzWVVGQmNrSXNSVUZCWkRzN1FVRkZRU3hyUWtGQlVTeFhRVUZTTEVOQlFXOUNMRWRCUVhCQ0xFVkJRWGxDTEZWQlFVTXNSMEZCUkN4RlFVRlRPMEZCUTJoRExHdENRVUZMTEZWQlFVd3NRMEZCWjBJc1YwRkJhRUlzUTBGQk5FSXNSMEZCTlVJN1FVRkRSQ3hYUVVaRU96dEJRVWxCTEdsQ1FVRlBMRTlCUVZBN1FVRkRSQ3hUUVROR1RTeEZRVEpHU2l4WFFUTkdTU3hGUVRSR1RpeEpRVFZHVFN4RFFUUkdSQ3hWUVVGRExFOUJRVVFzUlVGQllUdEJRVU5xUWl4alFVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3UVVGRFppeHJRa0ZCVVN4SlFVRlNMRU5CUVdFc1owTkJRV0k3TzBGQlJVRXNORUpCUVd0Q0xFOUJRV3hDT3p0QlFVVkJMR05CUVVrc2IwSkJRVzlDTEVOQlFYaENPMEZCUTBFc2FVSkJRVThzVFVGQlN5eHJRa0ZCVEN4RFFVRjNRaXhOUVVGNFFpeERRVUVyUWl4TlFVRkxMRk5CUVV3c1EwRkJaU3hQUVVFNVF5eEZRVUYxUkN4cFFrRkJka1FzUlVGQk1FVXNhMEpCUVRGRkxFVkJRVGhHTEZOQlFUbEdMRU5CUVZBN1FVRkRSQ3hUUVhCSFRTeEZRVzlIU2l4WFFYQkhTU3hGUVhGSFRpeEpRWEpIVFN4RFFYRkhSQ3hWUVVGRExGTkJRVVFzUlVGQlpUdEJRVU51UWl4alFVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3UVVGRFppeHJRa0ZCVVN4SlFVRlNMRU5CUVdFc2VVTkJRV0k3TzBGQlJVRTdRVUZEUVN4cFFrRkJUeXhOUVVGTExGRkJRVXdzUTBGQll5eGxRVUZrTEVOQlFUaENMR1ZCUVRsQ0xFVkJRU3RETEc5Q1FVRXZReXhGUVVGeFJTeHJRa0ZCY2tVc1JVRkJlVVlzVTBGQmVrWXNRMEZCVUR0QlFVTkVMRk5CTTBkTkxFVkJNa2RLTEZkQk0wZEpMRVZCTkVkT0xFbEJOVWROTEVOQk5FZEVMRlZCUVVNc1ZVRkJSQ3hGUVVGblFqdEJRVU53UWl4alFVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3UVVGRFppeHJRa0ZCVVN4SlFVRlNMRU5CUVdFc2QwTkJRV0lzUlVGQmRVUXNWVUZCZGtRN08wRkJSVUU3UVVGRFFTeDNRa0ZCWXl4VlFVRmtPenRCUVVWQk8wRkJRMEVzWTBGQlNTeG5Ra0ZCWjBJc1JVRkJjRUk3UVVGRFFTeGpRVUZKTEVOQlFVTXNkMEpCUVZrc2JVSkJRVzFDTEdGQlFTOUNMRU5CUVV3c1JVRkJiMFE3UVVGRGJFUXNaMEpCUVVrN1FVRkRSaXc0UWtGQlowSXNjMEpCUVdNc1JVRkJaQ3hGUVVGclFpeExRVUZMTEV0QlFVd3NRMEZCVnl4dFFrRkJiVUlzWVVGQk9VSXNRMEZCYkVJc1EwRkJhRUk3UVVGRFJDeGhRVVpFTEVOQlJVVXNUMEZCVHl4RFFVRlFMRVZCUVZVN1FVRkRWaXc0UWtGQlowSXNiVUpCUVcxQ0xHRkJRVzVETzBGQlEwUTdRVUZEUmp0QlFVTkVMSGRDUVVGakxGVkJRV1FzUjBGQk1rSXNUVUZCU3l4WFFVRm9RenM3UVVGRlFUczdRVUZGUVN4alFVRkpPMEZCUTBZc2JVSkJRVThzWjBKQlFXZENMR1ZCUVdoQ0xFTkJRV2RETEhOQ1FVRnpRaXhWUVVGMFJDeEZRVUZyUlN4WFFVRnNSU3hGUVVFclJTeGhRVUV2UlN4RFFVRlFPMEZCUTBRc1YwRkdSQ3hEUVVWRkxFOUJRVThzUTBGQlVDeEZRVUZWTzBGQlExWXNiMEpCUVZFc1MwRkJVaXhEUVVGakxEUkNRVUZrTEVWQlFUUkRMRU5CUVRWRE8wRkJRMEVzYlVKQlFVOHNRMEZCVUR0QlFVTkVPMEZCUTBZc1UwRjBTVTBzUlVGelNVb3NWMEYwU1Vrc1JVRjFTVTRzU1VGMlNVMHNRMEYxU1VRc1ZVRkJReXh4UWtGQlJDeEZRVUV5UWp0QlFVTXZRaXhqUVVGSkxGTkJRVW9zUlVGQlpTeFBRVUZQTEV0QlFWQTdRVUZEWml4clFrRkJVU3hKUVVGU0xFTkJRV0VzTUVOQlFXSXNSVUZCZVVRc2NVSkJRWHBFT3p0QlFVVkJPenRCUVVWQk8wRkJRMEVzWjBKQlFVc3NWVUZCVEN4RFFVRm5RaXhYUVVGb1FpeERRVUUwUWl4WFFVRTFRaXhGUVVGNVF5eFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTm9SQ3cwUWtGQlowSXNWMEZCYUVJc1EwRkJORUlzUjBGQk5VSTdRVUZEUkN4WFFVWkVPenRCUVVsQk8wRkJRMEVzWTBGQlNTeFZRVUZWTzBGQlExb3NLMEpCUVcxQ0xGZEJSRkE3UVVGRldpeHZRa0ZCVVR0QlFVWkpMRmRCUVdRN08wRkJTMEVzYTBKQlFWRXNUMEZCVWpzN1FVRkZRVHRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN4cFJFRkJZanRCUVVORUxGTkJOVXBOTEVWQk5FcEtMRmRCTlVwSkxFVkJOa3BPTEV0Qk4wcE5MRU5CTmtwQkxGZEJOMHBCTEVOQlFWQTdRVUU0U2tRc1QwRjBURTBzUTBGQlVEdEJRWFZNUkRzN1FVRkZSRHM3T3pzN096czJRa0ZKVXl4WkxFVkJRV003UVVGQlFUczdRVUZGY2tJc1ZVRkJTU3hEUVVGRExFdEJRVXNzVjBGQlRDeEZRVUZNTEVWQlFYbENMRTlCUVU4c1MwRkJVRHRCUVVONlFpeFZRVUZKTEVOQlFVTXNXVUZCVEN4RlFVRnRRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTERoRFFVRldMRU5CUVU0N08wRkJSVzVDTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU1zV1VGQlNTeFRRVUZUTEhOQ1FVRlZMRmxCUVZZc1JVRkJkMElzVFVGQmNrTTdPMEZCUlVFc1dVRkJTU3hEUVVGRExFMUJRVXdzUlVGQllUdEJRVU5ZTEcxQ1FVRlRMRmxCUVZRN1FVRkRSRHM3UVVGRlJDeFpRVUZKTEhGQ1FVRktPMEZCUTBFc1dVRkJTU3gzUWtGQlNqdEJRVU5CTEZsQlFVa3NOa0pCUVVvN1FVRkRRU3haUVVGSkxESkNRVUZLTzBGQlEwRXNXVUZCU1N4WlFVRlpMRXRCUVdoQ096dEJRVVZCTEZsQlFVa3NZMEZCWXl4VFFVRmtMRmRCUVdNc1EwRkJReXhOUVVGRUxFVkJRVms3UVVGRE5VSXNhMEpCUVZFc1MwRkJVaXhEUVVGakxHdEVRVUZrTEVWQlFXdEZMRTFCUVd4Rk8wRkJRMEVzYVVKQlFVOHNUVUZCVUR0QlFVTkVMRk5CU0VRN08wRkJTMEVzV1VGQlNTeGpRVUZqTEZOQlFXUXNWMEZCWXl4RFFVRkRMRTFCUVVRc1JVRkJXVHRCUVVNMVFpeHpRa0ZCV1N4SlFVRmFPMEZCUTBFc2FVSkJRVThzVFVGQlVEdEJRVU5FTEZOQlNFUTdPMEZCUzBFN1FVRkRRU3huUWtGQlVTeEpRVUZTTEVOQlFXRXNOa1JCUVdJN1FVRkRRU3huUWtGQlVTeEpRVUZTTEVOQlFXRXNhVVJCUVdJc1JVRkJaMFVzVFVGQmFFVTdRVUZEUVN4bFFVRkxMRkZCUVV3c1EwRkJZeXhwUWtGQlpDeERRVUZuUXl4TlFVRm9ReXhGUVVGM1F5eEpRVUY0UXl4RFFVRTJReXhWUVVGRExHMUNRVUZFTEVWQlFYbENPMEZCUTNCRk8wRkJRMEVzYTBKQlFWRXNTVUZCVWl4RFFVRmhMQ3RDUVVGaUxFVkJRVGhETEUxQlFUbERMRVZCUVhORUxFbEJRWFJFTEVWQlFUUkVMRzFDUVVFMVJEczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNZMEZCU1N4UFFVRlBMRTlCUVVzc1VVRkJUQ3hEUVVGakxHTkJRV1FzUTBGQk5rSXNUVUZCTjBJc1EwRkJXRHRCUVVOQkxHdENRVUZSTEVsQlFWSTdRVUZEUVN4clFrRkJVU3hKUVVGU0xFTkJRV0VzZFVSQlFXSTdRVUZEUkN4VFFXUkVMRVZCWlVNc1MwRm1SQ3hEUVdWUExGVkJRVU1zVFVGQlJDeEZRVUZaT3p0QlFVVnFRanRCUVVOQkxHdENRVUZSTEVsQlFWSXNRMEZCWVN3MlFrRkJOa0lzVFVGQk1VTTdPMEZCUlVFN08wRkJSVUU3UVVGRFFTeHBRa0ZCU3l4WFFVRk1MRU5CUVdsQ0xHbENRVUZxUWl4RFFVRnRReXhaUVVGdVF5eEZRVU5ETEVsQlJFUXNRMEZEVFN4VlFVRkRMR05CUVVRc1JVRkJiMEk3UVVGRGVFSXNaMEpCUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3h2UTBGQllqczdRVUZGUVR0QlFVTkJMRGhDUVVGclFpeGpRVUZzUWpzN1FVRkZRU3huUWtGQlNTeHRRa0ZCYlVJc1pVRkJaU3huUWtGQmRFTTdPMEZCUlVFc1owSkJRVWtzY1VKQlFYRkNMR2RDUVVGNlFpeEZRVUV5UXp0QlFVTjZReXh4UWtGQlR5eGxRVUZsTEdGQlFYUkNPMEZCUTBRN08wRkJSVVE3UVVGRFFTeHRRa0ZCVHl4UFFVRkxMR2RDUVVGTUxFTkJRWE5DTEhWQ1FVRjBRaXhEUVVFNFF5eG5Ra0ZCT1VNc1EwRkJVRHRCUVVORUxGZEJhRUpFTEVWQlowSkhMRmRCYUVKSUxFVkJhVUpETEV0QmFrSkVMRU5CYVVKUExGZEJha0pRTEVWQmEwSkRMRWxCYkVKRUxFTkJhMEpOTEZWQlFVTXNhVUpCUVVRc1JVRkJkVUk3UVVGRE0wSXNaMEpCUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3h4UTBGQllqczdRVUZGUVRzN1FVRkZRU3hwUTBGQmNVSXNhVUpCUVhKQ096dEJRVVZCTzBGQlEwRXNaMEpCUVVrc1UwRkJVeXhKUVVGaU8wRkJRMEVzYlVKQlFVOHNUVUZCVUR0QlFVTkVMRmRCTjBKRUxFVkJOa0pITEZkQk4wSklMRVZCT0VKRExFbEJPVUpFTEVOQk9FSk5MRlZCUVVNc1RVRkJSQ3hGUVVGWk8wRkJRMmhDTEdkQ1FVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3TzBGQlJXWTdRVUZEUVN4dFFrRkJUeXhQUVVGTExGRkJRVXdzUTBGQll5eFZRVUZrTEVOQlFYbENMRTFCUVhwQ0xFTkJRVkE3UVVGRFJDeFhRVzVEUkN4RlFXOURReXhKUVhCRFJDeERRVzlEVFN4VlFVRkRMRmRCUVVRc1JVRkJhVUk3UVVGRGNrSXNaMEpCUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3d3UkVGQllpeEZRVUY1UlN4WFFVRjZSVHM3UVVGRlFUczdRVUZGUVN3eVFrRkJaU3hYUVVGbU8wRkJRMEVzYlVKQlFVOHNWMEZCVUR0QlFVTkVMRmRCTlVORUxFVkJOa05ETEV0Qk4wTkVMRU5CTmtOUExGVkJRVU1zVFVGQlJDeEZRVUZaTzBGQlEycENMR2RDUVVGSkxGTkJRVW9zUlVGQlpTeFBRVUZQTEV0QlFWQTdRVUZEWml4dlFrRkJVU3hKUVVGU0xFTkJRV0VzSzBOQlFXSXNSVUZCT0VRc1RVRkJPVVE3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1owSkJRVWtzVlVGQlZTeFBRVUZMTEdWQlFVd3NRMEZCY1VJc1lVRkJja0lzUlVGQlpEdEJRVU5CTEc5Q1FVRlJMRmRCUVZJc1EwRkJiMElzUjBGQmNFSXNSVUZCZVVJc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRGFFTXNjVUpCUVVzc1ZVRkJUQ3hEUVVGblFpeFhRVUZvUWl4RFFVRTBRaXhIUVVFMVFqdEJRVU5FTEdGQlJrUTdPMEZCU1VFc2JVSkJRVThzVDBGQlVEdEJRVU5FTEZkQk1VUkVMRVZCTWtSRExFbEJNMFJFTEVOQk1rUk5MRlZCUVVNc1QwRkJSQ3hGUVVGaE8wRkJRMnBDTEdkQ1FVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3UVVGRFppeHZRa0ZCVVN4SlFVRlNMRU5CUVdFc05rTkJRV0lzUlVGQk5FUXNUMEZCTlVRc1JVRkJjVVVzV1VGQmNrVXNSVUZCYlVZc1RVRkJia1k3TzBGQlJVRXNNa0pCUVdVc1QwRkJaanM3UVVGRlFUdEJRVU5CTEcxQ1FVRlBMRTlCUVVzc1VVRkJUQ3hEUVVGakxGbEJRV1FzUTBGQk1rSXNXVUZCTTBJc1JVRkJlVU1zVFVGQmVrTXNRMEZCVUR0QlFVTkVMRmRCYmtWRUxFVkJiVVZITEZkQmJrVklMRVZCYjBWRExFbEJjRVZFTEVOQmIwVk5MRlZCUVVNc2JVSkJRVVFzUlVGQmVVSTdRVUZETjBJc1owSkJRVWtzVTBGQlNpeEZRVUZsTEU5QlFVOHNTMEZCVUR0QlFVTm1MRzlDUVVGUkxFbEJRVklzUTBGQllTeDFRMEZCWWl4RlFVRnpSQ3h0UWtGQmRFUTdPMEZCUlVFN08wRkJSVUVzYlVOQlFYVkNMRzFDUVVGMlFqczdRVUZGUVR0QlFVTkJMR2RDUVVGSkxHZENRVUZuUWl4RlFVRndRanRCUVVOQkxHZENRVUZKTEVOQlFVTXNkMEpCUVZrc1owSkJRV2RDTEdGQlFUVkNMRU5CUVV3c1JVRkJhVVE3UVVGREwwTXNhMEpCUVVrN1FVRkRSaXhuUTBGQlowSXNjMEpCUVdNc1JVRkJaQ3hGUVVGclFpeExRVUZMTEV0QlFVd3NRMEZCVnl4blFrRkJaMElzWVVGQk0wSXNRMEZCYkVJc1EwRkJhRUk3UVVGRFJDeGxRVVpFTEVOQlJVVXNUMEZCVHl4RFFVRlFMRVZCUVZVN1FVRkRWaXhuUTBGQlowSXNaMEpCUVdkQ0xHRkJRV2hETzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3d3UWtGQll5eFZRVUZrTEVkQlFUSkNMRTlCUVVzc1YwRkJhRU03TzBGQlJVRTdRVUZEUVN4blFrRkJTVHRCUVVOR0xIRkNRVUZQTEdGQlFXRXNaVUZCWWl4RFFVRTJRaXh0UWtGQmJVSXNWVUZCYUVRc1JVRkJORVFzYlVKQlFUVkVMRVZCUVdsR0xHRkJRV3BHTEVOQlFWQTdRVUZEUkN4aFFVWkVMRU5CUlVVc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFZpeHpRa0ZCVVN4TFFVRlNMRU5CUVdNc05FSkJRV1FzUlVGQk5FTXNRMEZCTlVNN1FVRkRRU3h4UWtGQlR5eERRVUZRTzBGQlEwUTdRVUZEUml4WFFTOUdSQ3hGUVN0R1J5eFhRUzlHU0N4RlFXZEhReXhKUVdoSFJDeERRV2RIVFN4VlFVRkRMSEZDUVVGRUxFVkJRVEpDTzBGQlF5OUNMR2RDUVVGSkxGTkJRVW9zUlVGQlpTeFBRVUZQTEV0QlFWQTdRVUZEWml4dlFrRkJVU3hKUVVGU0xFTkJRV0VzYVVSQlFXSXNSVUZCWjBVc2NVSkJRV2hGT3p0QlFVVkJPenRCUVVWQk8wRkJRMEVzYlVKQlFVc3NWVUZCVEN4RFFVRm5RaXhYUVVGb1FpeERRVUUwUWl4dlFrRkJOVUlzUlVGQmEwUXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRla1FzTWtKQlFXRXNWMEZCWWl4RFFVRjVRaXhIUVVGNlFqdEJRVU5FTEdGQlJrUTdPMEZCU1VFN1FVRkRRU3huUWtGQlNTeFBRVUZQTEU5QlFVc3NVVUZCVEN4RFFVRmpMR05CUVdRc1EwRkJOa0lzVFVGQk4wSXNRMEZCV0RzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRzlDUVVGUkxFZEJRVklzUTBGQldTeFpRVUZhTEVWQlFUQkNMRWxCUVRGQ0xFVkJRV2RETEUxQlFXaERMRVZCUVhkRExFOUJRVXNzVVVGQlRDeERRVUZqTEdOQlFYUkVPenRCUVVWQkxHOUNRVUZSTEVsQlFWSTdRVUZEUVN4dlFrRkJVU3hKUVVGU0xFTkJRV0VzZFVSQlFXSTdRVUZGUkN4WFFYcElSQ3hGUVhsSVJ5eFhRWHBJU0N4RlFUQklReXhMUVRGSVJDeERRVEJJVHl4WFFURklVRHRCUVRSSVJDeFRRVzVLUkR0QlFYRktSQ3hQUVdoTVRTeERRVUZRTzBGQmEweEVPenRCUVVWRU96czdPenM3TzJsRFFVbGhMRmNzUlVGQllUdEJRVUZCT3p0QlFVVjRRaXhWUVVGSkxFTkJRVU1zUzBGQlN5eFhRVUZNTEVWQlFVd3NSVUZCZVVJc1QwRkJUeXhMUVVGUU8wRkJRM3BDTEZWQlFVa3NRMEZCUXl4WFFVRk1MRVZCUVd0Q0xFMUJRVTBzU1VGQlNTeExRVUZLTEVOQlFWVXNOa05CUVZZc1EwRkJUanM3UVVGRmJFSXNZVUZCVHl4elFrRkJXU3hWUVVGRExFOUJRVVFzUlVGQlZTeE5RVUZXTEVWQlFYRkNPenRCUVVWMFF5eFpRVUZKTEZOQlFWTXNjMEpCUVZVc1YwRkJWaXhGUVVGMVFpeE5RVUZ3UXpzN1FVRkZRU3haUVVGSkxFTkJRVU1zVFVGQlRDeEZRVUZoTzBGQlExZ3NiVUpCUVZNc1YwRkJWRHRCUVVORU96dEJRVVZFTEZsQlFVa3NjMEpCUVVvN1FVRkRRU3haUVVGSkxIbENRVUZLTzBGQlEwRXNXVUZCU1N3MFFrRkJTanRCUVVOQkxGbEJRVWtzTkVKQlFVbzdRVUZEUVN4WlFVRkpMRmxCUVZrc1MwRkJhRUk3TzBGQlJVRXNXVUZCU1N4alFVRmpMRk5CUVdRc1YwRkJZeXhEUVVGRExFMUJRVVFzUlVGQldUdEJRVU0xUWl4clFrRkJVU3hMUVVGU0xFTkJRV01zT0VOQlFXUXNSVUZCT0VRc1RVRkJPVVE3UVVGRFFTeHBRa0ZCVHl4TlFVRlFPMEZCUTBRc1UwRklSRHM3UVVGTFFTeFpRVUZKTEdOQlFXTXNVMEZCWkN4WFFVRmpMRU5CUVVNc1RVRkJSQ3hGUVVGWk8wRkJRelZDTEhOQ1FVRlpMRWxCUVZvN1FVRkRRU3hwUWtGQlR5eE5RVUZRTzBGQlEwUXNVMEZJUkRzN1FVRkxRVHRCUVVOQkxHZENRVUZSTEVsQlFWSXNRMEZCWVN4dlJVRkJZanRCUVVOQkxHZENRVUZSTEVsQlFWSXNRMEZCWVN4dlJFRkJZaXhGUVVGdFJTeE5RVUZ1UlR0QlFVTkJMR1ZCUVU4c1QwRkJTeXhSUVVGTUxFTkJRV01zWjBKQlFXUXNRMEZCSzBJc1RVRkJMMElzUlVGRFRpeEpRVVJOTEVOQlEwUXNWVUZCUXl4clFrRkJSQ3hGUVVGM1FqdEJRVU0xUWp0QlFVTkJMR3RDUVVGUkxFbEJRVklzUTBGQllTd3dRa0ZCWWl4RlFVRjVReXhyUWtGQmVrTTdPMEZCUlVFN08wRkJSVUVzWTBGQlNTeFhRVUZYTEU5QlFVc3NVVUZCVEN4RFFVRmpMRmxCUVdRc1EwRkJNa0lzVFVGQk0wSXNRMEZCWmp0QlFVTkJMR3RDUVVGUkxFZEJRVklzUTBGQldTeFpRVUZhTEVWQlFUQkNMRkZCUVRGQ096dEJRVVZCTEd0Q1FVRlJMRkZCUVZJN1FVRkRRU3hyUWtGQlVTeEpRVUZTTEVOQlFXRXNkVVJCUVdJN1FVRkRSQ3hUUVZwTkxFVkJZVTRzUzBGaVRTeERRV0ZCTEZWQlFVTXNUVUZCUkN4RlFVRlpPenRCUVVWcVFqdEJRVU5CTEd0Q1FVRlJMRWxCUVZJc1EwRkJZU3gzUWtGQllpeEZRVUYxUXl4TlFVRjJRenM3UVVGRlFUczdRVUZGUVR0QlFVTkJMR2xDUVVGTExGZEJRVXdzUTBGQmFVSXNjVUpCUVdwQ0xFTkJRWFZETEZkQlFYWkRMRVZCUTBNc1NVRkVSQ3hEUVVOTkxGVkJRVU1zWlVGQlJDeEZRVUZ4UWpzN1FVRkZla0lzYjBKQlFWRXNTVUZCVWl4RFFVRmhMRzFEUVVGaU96dEJRVVZCTzBGQlEwRXNLMEpCUVcxQ0xHVkJRVzVDT3p0QlFVVkJMR2RDUVVGSkxHMUNRVUZ0UWl4blFrRkJaMElzWjBKQlFYWkRPenRCUVVWQkxHZENRVUZKTEhGQ1FVRnhRaXhuUWtGQmVrSXNSVUZCTWtNN1FVRkRla01zY1VKQlFVOHNaMEpCUVdkQ0xHRkJRWFpDTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3h0UWtGQlR5eFBRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xIVkNRVUYwUWl4RFFVRTRReXhuUWtGQk9VTXNRMEZCVUR0QlFVTkVMRmRCYUVKRUxFVkJaMEpITEZkQmFFSklMRVZCYVVKRExFbEJha0pFTEVOQmFVSk5MRlZCUVVNc1lVRkJSQ3hGUVVGdFFqdEJRVU4yUWl4blFrRkJTU3hUUVVGS0xFVkJRV1VzVDBGQlR5eExRVUZRTzBGQlEyWXNiMEpCUVZFc1NVRkJVaXhEUVVGaExIVkRRVUZpT3p0QlFVVkJPenRCUVVWQkxHdERRVUZ6UWl4aFFVRjBRanM3UVVGRlFUdEJRVU5CTEdkQ1FVRkpMRk5CUVZNc1NVRkJZanRCUVVOQkxHMUNRVUZQTEUxQlFWQTdRVUZEUkN4WFFUVkNSQ3hGUVRSQ1J5eFhRVFZDU0N4RlFUWkNReXhKUVRkQ1JDeERRVFpDVFN4VlFVRkRMRTFCUVVRc1JVRkJXVHRCUVVOb1FpeG5Ra0ZCU1N4VFFVRktMRVZCUVdVc1QwRkJUeXhMUVVGUU96dEJRVVZtTzBGQlEwRXNiVUpCUVU4c1QwRkJTeXhSUVVGTUxFTkJRV01zVlVGQlpDeERRVUY1UWl4TlFVRjZRaXhEUVVGUU8wRkJRMFFzVjBGc1EwUXNSVUZ0UTBNc1NVRnVRMFFzUTBGdFEwMHNWVUZCUXl4WlFVRkVMRVZCUVd0Q08wRkJRM1JDTEdkQ1FVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3UVVGRFppeHZRa0ZCVVN4SlFVRlNMRU5CUVdFc2VVUkJRV0lzUlVGQmQwVXNXVUZCZUVVN08wRkJSVUVzTkVKQlFXZENMRmxCUVdoQ08wRkJRMEVzYlVKQlFVOHNXVUZCVUR0QlFVTkVMRmRCZWtORUxFVkJNRU5ETEV0Qk1VTkVMRU5CTUVOUExGVkJRVU1zVFVGQlJDeEZRVUZaTzBGQlEycENMR2RDUVVGSkxGTkJRVW9zUlVGQlpTeFBRVUZQTEV0QlFWQTdRVUZEWml4dlFrRkJVU3hKUVVGU0xFTkJRV0VzT0VOQlFXSXNSVUZCTmtRc1RVRkJOMFE3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1owSkJRVWtzVlVGQlZTeFBRVUZMTEdWQlFVd3NRMEZCY1VJc1lVRkJja0lzUlVGQlpEdEJRVU5CTEc5Q1FVRlJMRmRCUVZJc1EwRkJiMElzUjBGQmNFSXNSVUZCZVVJc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRGFFTXNjVUpCUVVzc1ZVRkJUQ3hEUVVGblFpeFhRVUZvUWl4RFFVRTBRaXhIUVVFMVFqdEJRVU5FTEdGQlJrUTdPMEZCU1VFc2JVSkJRVThzVDBGQlVEdEJRVU5FTEZkQmRrUkVMRVZCZDBSRExFbEJlRVJFTEVOQmQwUk5MRlZCUVVNc1QwRkJSQ3hGUVVGaE8wRkJRMnBDTEdkQ1FVRkpMRk5CUVVvc1JVRkJaU3hQUVVGUExFdEJRVkE3UVVGRFppeHZRa0ZCVVN4SlFVRlNMRU5CUVdFc05rTkJRV0lzUlVGQk5FUXNUMEZCTlVRc1JVRkJjVVVzV1VGQmNrVXNSVUZCYlVZc1RVRkJia1k3TzBGQlJVRXNORUpCUVdkQ0xFOUJRV2hDT3p0QlFVVkJPMEZCUTBFc2JVSkJRVThzVDBGQlN5eFJRVUZNTEVOQlFXTXNaMEpCUVdRc1EwRkJLMElzVDBGQkwwSXNSVUZCZDBNc1RVRkJlRU1zUTBGQlVEdEJRVU5FTEZkQmFFVkVMRVZCWjBWSExGZEJhRVZJTEVWQmFVVkRMRWxCYWtWRUxFTkJhVVZOTEZWQlFVTXNhMEpCUVVRc1JVRkJkMEk3UVVGRE5VSXNaMEpCUVVrc1UwRkJTaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3gxUTBGQllpeEZRVUZ6UkN4clFrRkJkRVE3TzBGQlJVRTdPMEZCUlVFc2EwTkJRWE5DTEd0Q1FVRjBRanM3UVVGRlFUdEJRVU5CTEdkQ1FVRkpMR2RDUVVGblFpeEZRVUZ3UWp0QlFVTkJMR2RDUVVGSkxFTkJRVU1zZDBKQlFWa3NhVUpCUVdsQ0xHRkJRVGRDTEVOQlFVd3NSVUZCYTBRN1FVRkRhRVFzYTBKQlFVazdRVUZEUml4blEwRkJaMElzYzBKQlFXTXNSVUZCWkN4RlFVRnJRaXhMUVVGTExFdEJRVXdzUTBGQlZ5eHBRa0ZCYVVJc1lVRkJOVUlzUTBGQmJFSXNRMEZCYUVJN1FVRkRSQ3hsUVVaRUxFTkJSVVVzVDBGQlR5eERRVUZRTEVWQlFWVTdRVUZEVml4blEwRkJaMElzYVVKQlFXbENMR0ZCUVdwRE8wRkJRMFE3UVVGRFJqdEJRVU5FTERCQ1FVRmpMRlZCUVdRc1IwRkJNa0lzVDBGQlN5eFhRVUZvUXpzN1FVRkZRVHRCUVVOQkxHZENRVUZKTzBGQlEwWXNjVUpCUVU4c1kwRkJZeXhsUVVGa0xFTkJRVGhDTEc5Q1FVRnZRaXhWUVVGc1JDeEZRVUU0UkN4clFrRkJPVVFzUlVGQmEwWXNZVUZCYkVZc1EwRkJVRHRCUVVORUxHRkJSa1FzUTBGRlJTeFBRVUZQTEVOQlFWQXNSVUZCVlR0QlFVTldMSE5DUVVGUkxFdEJRVklzUTBGQll5dzBRa0ZCWkN4RlFVRTBReXhEUVVFMVF6dEJRVU5CTEhGQ1FVRlBMRU5CUVZBN1FVRkRSRHRCUVVOR0xGZEJNMFpFTEVWQk1rWkhMRmRCTTBaSUxFVkJORVpETEVsQk5VWkVMRU5CTkVaTkxGVkJRVU1zY1VKQlFVUXNSVUZCTWtJN1FVRkRMMElzWjBKQlFVa3NVMEZCU2l4RlFVRmxMRTlCUVU4c1MwRkJVRHRCUVVObUxHOUNRVUZSTEVsQlFWSXNRMEZCWVN4cFJFRkJZaXhGUVVGblJTeHhRa0ZCYUVVN08wRkJSVUU3TzBGQlJVRTdRVUZEUVN4dFFrRkJTeXhWUVVGTUxFTkJRV2RDTEZkQlFXaENMRU5CUVRSQ0xHMUNRVUUxUWl4RlFVRnBSQ3hWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU40UkN3MFFrRkJZeXhYUVVGa0xFTkJRVEJDTEVkQlFURkNPMEZCUTBRc1lVRkdSRHM3UVVGSlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEcxQ1FVRkxMRkZCUVV3c1EwRkJZeXhaUVVGa0xFTkJRVEpDTEUxQlFUTkNMRVZCUVcxRExFMUJRVzVETEVkQlFUUkRMRlZCUVRWRE8wRkJRMEVzWjBKQlFVa3NWMEZCVnl4UFFVRkxMRkZCUVV3c1EwRkJZeXhaUVVGa0xFTkJRVEpDTEUxQlFUTkNMRU5CUVdZN08wRkJSVUVzYjBKQlFWRXNSMEZCVWl4RFFVRlpMRmxCUVZvc1JVRkJNRUlzVVVGQk1VSTdPMEZCUlVFc2IwSkJRVkVzVVVGQlVqdEJRVU5CTEc5Q1FVRlJMRWxCUVZJc1EwRkJZU3gxUkVGQllqdEJRVVZFTEZkQmRraEVMRVZCZFVoSExGZEJka2hJTEVWQmQwaERMRXRCZUVoRUxFTkJkMGhQTEZkQmVFaFFPMEZCZVVoRUxGTkJPVWxOTEVOQlFWQTdRVUZuU2tRc1QwRXpTMDBzUTBGQlVEdEJRVFJMUkRzN1FVRkZSRHM3T3p0clEwRkRZenM3UVVGRldpeFZRVUZKTEZOQlFWTXNTMEZCWWpzN1FVRkZRU3hWUVVGSkxFTkJRVU1zUzBGQlN5eFhRVUZXTEVWQlFYVkNMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzZVVOQlFWWXNRMEZCVGp0QlFVTjJRaXhWUVVGSkxFTkJRVU1zUzBGQlN5eFpRVUZXTEVWQlFYZENMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzTUVOQlFWWXNRMEZCVGp0QlFVTjRRaXhWUVVGSkxFTkJRVU1zUzBGQlN5eHBRa0ZCVml4RlFVRTJRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEdkRVFVRldMRU5CUVU0N1FVRkROMElzVlVGQlNTeERRVUZETEV0QlFVc3NVMEZCVml4RlFVRnhRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEhkRFFVRldMRU5CUVU0N1FVRkRja0lzVlVGQlNTeERRVUZETEV0QlFVc3NaVUZCVml4RlFVRXlRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEN0RFFVRldMRU5CUVU0N08wRkJSVE5DTEdWQlFWTXNTVUZCVkR0QlFVTkJMR0ZCUVU4c1RVRkJVRHRCUVVORU96czdjMEpCY25CQ1l5eExMRVZCUVU4N1FVRkRjRUlzVjBGQlN5eFhRVUZNTEVkQlFXMUNMRXRCUVc1Q08wRkJRMFE3TzBGQlJVUTdPenM3TzNkQ1FVbHBRanRCUVVObUxHRkJRVThzUzBGQlN5eFhRVUZhTzBGQlEwUTdPMEZCUlVRN096czdPenM3YzBKQlNXRXNTeXhGUVVGUE8wRkJRMnhDTEZkQlFVc3NVMEZCVEN4SFFVRnBRaXhMUVVGcVFqczdRVUZGUVR0QlFVTkJMRlZCUVVrc2IwSkJRVzlDTEdkRFFVRnpRaXhMUVVGTExGZEJRVE5DTEVWQlFYZERMRXRCUVVzc1dVRkJOME1zUlVGQk1rUXNTMEZCU3l4VFFVRm9SU3hEUVVGNFFqdEJRVU5CTEZkQlFVc3NhMEpCUVV3c1IwRkJNRUlzYVVKQlFURkNPMEZCUTBRN08wRkJSVVE3T3pzN08zZENRVWxsTzBGQlEySXNZVUZCVHl4TFFVRkxMRk5CUVZvN1FVRkRSRHM3UVVGRlJEczdPenM3T3p0elFrRkpjVUlzU3l4RlFVRlBPMEZCUXpGQ0xGZEJRVXNzYVVKQlFVd3NSMEZCZVVJc1MwRkJla0k3TzBGQlJVRXNWMEZCU3l4WFFVRk1MRWRCUVcxQ0xEQkNRVUZuUWl4TFFVRkxMRmRCUVhKQ0xFVkJRV3RETEV0QlFXeERMRVZCUVhsRExFdEJRVXNzYjBKQlFUbERMRU5CUVc1Q08wRkJRMFE3TzBGQlJVUTdPenM3TzNkQ1FVbDFRanRCUVVOeVFpeGhRVUZQTEV0QlFVc3NhVUpCUVZvN1FVRkRSRHM3UVVGRlJEczdPenM3T3p0elFrRkpaU3hMTEVWQlFVODdRVUZEY0VJc1YwRkJTeXhaUVVGTUxFZEJRVzlDTEV0QlFYQkNPMEZCUTBRN08wRkJSVVE3T3pzN08zZENRVWxwUWp0QlFVTm1MR0ZCUVU4c1MwRkJTeXhaUVVGYU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN2MwSkJTVzFDTEVzc1JVRkJUenRCUVVONFFpeFhRVUZMTEdWQlFVd3NSMEZCZFVJc1MwRkJka0k3UVVGRFJEczdRVUZGUkRzN096czdkMEpCU1hGQ08wRkJRMjVDTEdGQlFVOHNTMEZCU3l4bFFVRmFPMEZCUTBRN096czdPMnRDUVhsclFsa3NUVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5xY0VKbU96dEJRVWRCT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPMEZCUlVFN096czdRVUZEUVRzN1FVRkhRVHM3T3p0QlFVTkJPenM3T3pzN1FVRkRRVHM3T3pzN096czdPenM3T3pzN08wRkJTa0U3TzBGQmJFTkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0SlFXOUVUU3hUT3p0QlFVVktPenM3T3p0QlFVdEJMSEZDUVVGWkxHTkJRVm9zUlVGQk5FSXNUVUZCTlVJc1JVRkJiME03UVVGQlFUczdPMEZCUld4RExGRkJRVWtzUTBGQlF5eGpRVUZNTEVWQlFYRkNMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzTWtOQlFWWXNRMEZCVGp0QlFVTnlRaXhSUVVGSkxFTkJRVU1zVFVGQlRDeEZRVUZoTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc1owTkJRVllzUTBGQlRqczdRVUZGWWp0QlFVTkJMRk5CUVVzc2IwSkJRVXdzUjBGQk5FSXNjMEpCUVdNc1JVRkJReXhSUVVGUkxFMUJRVlFzUlVGQlpDdzJRMEZCTlVJN08wRkJSVUVzVTBGQlN5eGpRVUZNTEVkQlFYTkNMR05CUVhSQ08wRkJRMEVzVTBGQlN5eG5Ra0ZCVEN4SFFVRjNRaXhsUVVGbExITkNRVUZtTEVWQlFYaENPenRCUVVWQkxGRkJRVWtzVDBGQlR5eGxRVUZsTEhOQ1FVRjBRaXhMUVVGcFJDeFZRVUZ5UkN4RlFVRnBSVHRCUVVNdlJDeFhRVUZMTEd0Q1FVRk1MRWRCUVRCQ0xHVkJRV1VzYzBKQlFXWXNSVUZCTVVJN1FVRkRSQ3hMUVVaRUxFMUJSVTg3UVVGRFRDeFpRVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMR2xHUVVGV0xFTkJRVTQ3UVVGRFJEczdRVUZGUkN4UlFVRkpMRTlCUVU4c1pVRkJaU3hyUWtGQmRFSXNTMEZCTmtNc1ZVRkJha1FzUlVGQk5rUTdRVUZETTBRc1YwRkJTeXhyUWtGQlRDeEhRVUV3UWl4bFFVRmxMR3RDUVVGbUxFVkJRVEZDTzBGQlEwUXNTMEZHUkN4TlFVVlBPMEZCUTB3c1dVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeHRSa0ZCVml4RFFVRk9PMEZCUTBRN08wRkJSVVFzVVVGQlNTeFBRVUZQTEdWQlFXVXNZMEZCZEVJc1MwRkJlVU1zVlVGQk4wTXNSVUZCZVVRN1FVRkRka1FzVjBGQlN5eGpRVUZNTEVkQlFYTkNMR1ZCUVdVc1kwRkJaaXhGUVVGMFFqdEJRVU5FTEV0QlJrUXNUVUZGVHp0QlFVTk1MRmxCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzSzBWQlFWWXNRMEZCVGp0QlFVTkVPMEZCUTBRc1VVRkJTU3hQUVVGUExHVkJRV1VzYlVKQlFYUkNMRXRCUVRoRExGVkJRV3hFTEVWQlFUaEVPMEZCUXpWRUxGZEJRVXNzYlVKQlFVd3NSMEZCTWtJc1pVRkJaU3h0UWtGQlppeERRVUZ0UXl4TFFVRkxMR05CUVhoRExFTkJRVE5DTzBGQlEwUXNTMEZHUkN4TlFVVlBPMEZCUTB3c1kwRkJVU3hKUVVGU0xFTkJRV0VzYlVaQlFXSTdRVUZEUkR0QlFVVkdPenM3T3pKQ1FVVk5PMEZCUVVFN08wRkJSVXdzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDT3p0QlFVVjBReXhsUVVGTExFMUJRVXdzUjBGQll5eFBRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFMUJRWGhET3p0QlFVVkJMRmxCUVVrN1FVRkRSaXhqUVVGSkxHdENRVUZyUWl4UFFVRkxMRzFDUVVGTUxFTkJRWGxDTEhOQ1FVRjZRaXhGUVVGMFFqdEJRVU5CTEdOQlFVa3NaMEpCUVdkQ0xFOUJRVXNzWTBGQlRDeERRVUZ2UWl4SFFVRndRaXhEUVVGM1FpeGhRVUY0UWl4RFFVRndRanM3UVVGRlFTdzBRa0ZCVVN4SFFVRlNMRU5CUVZrc1EwRkJReXhoUVVGRUxFVkJRV2RDTEdWQlFXaENMRU5CUVZvc1JVRkJPRU1zU1VGQk9VTXNRMEZCYlVRc1ZVRkJReXhQUVVGRUxFVkJRV0U3TzBGQlJUbEVMRzFDUVVGTExGVkJRVXdzUjBGQmEwSXNVVUZCVVN4RFFVRlNMRWxCUVdFc1VVRkJVU3hEUVVGU0xFVkJRVmNzVlVGQmVFSXNSMEZCY1VNc1VVRkJVU3hEUVVGU0xFTkJRWFpFTzBGQlEwRXNaMEpCUVVrc1EwRkJReXhQUVVGTExGVkJRVllzUlVGQmMwSTdRVUZEY0VJc2NVSkJRVXNzVlVGQlRDeEhRVUZyUWl4bFFVRmxMRTlCUVVzc1RVRkJjRUlzUjBGQk5rSXNSMEZCTjBJc1IwRkJiVU1zTUVKQlFYSkVPMEZCUTBFc2NVSkJRVXNzWTBGQlRDeERRVUZ2UWl4SFFVRndRaXhEUVVGM1FpeGhRVUY0UWl4RlFVRjFReXhEUVVGMlF5eEZRVUV3UXl4RlFVRkRMRmxCUVZrc1QwRkJTeXhWUVVGc1FpeEZRVUV4UXp0QlFVTkVPenRCUVVWRUxHMUNRVUZMTEZsQlFVd3NSMEZCYjBJc1VVRkJVU3hEUVVGU0xFTkJRWEJDT3p0QlFVVkJMRzFDUVVGUExFOUJRVXNzWlVGQlRDeEZRVUZRTzBGQlJVUXNWMEZhUkN4RlFWbEhMRWxCV2tnc1EwRlpVU3hWUVVGRExFMUJRVVFzUlVGQldUdEJRVU5zUWl4dlFrRkJVU3hOUVVGU08wRkJRMFFzVjBGa1JDeEZRV05ITEV0QlpFZ3NRMEZqVXl4VlFVRkRMRXRCUVVRc1JVRkJWenRCUVVOc1FpeHZRa0ZCVVN4TFFVRlNMRU5CUVdNc1UwRkJaQ3hGUVVGNVFpeExRVUY2UWp0QlFVTkJMRzFDUVVGUExFdEJRVkE3UVVGRFJDeFhRV3BDUkR0QlFXMUNSQ3hUUVhaQ1JDeERRWFZDUlN4UFFVRlBMRU5CUVZBc1JVRkJWVHRCUVVOV0xHbENRVUZQTEVOQlFWQTdRVUZEUkR0QlFVVkdMRTlCTDBKTkxFTkJRVkE3UVVGcFEwUTdPenR6UTBGRmFVSTdRVUZCUVRzN1FVRkZhRUlzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDT3p0QlFVVjBReXhaUVVGSk96dEJRVVZHTzBGQlEwRXNhVUpCUVVzc1RVRkJUQ3hIUVVGakxIRkNRVUZYTEU5QlFVc3NiMEpCUVdoQ0xFTkJRV1E3TzBGQlJVRTdRVUZEUVN4cFFrRkJTeXhqUVVGTUxFZEJRWE5DTERaQ1FVRnRRaXhQUVVGTExGVkJRWGhDTEVWQlFXOURMRTlCUVVzc2JVSkJRWHBETEVWQlFUaEVMRTlCUVVzc1kwRkJia1VzUTBGQmRFSTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWTBGQlNTeGhRVUZoTEU5QlFVc3NZMEZCVEN4RFFVRnZRaXhuUWtGQmNFSXNSVUZCYWtJN08wRkJSVUU3UVVGRFFTeHBRa0ZCU3l4UlFVRk1MRWRCUVdkQ0xIVkNRVUZoTEU5QlFVc3NWVUZCYkVJc1JVRkJPRUlzVlVGQk9VSXNSVUZCTUVNc1QwRkJTeXhqUVVFdlF5eEZRVUVyUkN4UFFVRkxMR2RDUVVGd1JTeEZRVUZ6Uml4UFFVRkxMRzFDUVVFelJpeEZRVUZuU0N4UFFVRkxMR05CUVhKSUxFTkJRV2hDT3p0QlFVVkJPMEZCUTBFc2FVSkJRVXNzVVVGQlRDeERRVUZqTEUxQlFXUXNSMEZCZFVJc1QwRkJTeXhOUVVFMVFqczdRVUZGUVR0QlFVTkJMR2xDUVVGTExGVkJRVXdzUjBGQmEwSXNlVUpCUVdVc1QwRkJTeXhSUVVGd1FpeERRVUZzUWpzN1FVRkZRVHRCUVVOQkxHbENRVUZMTEZsQlFVd3NSMEZCYjBJc2EwSkJRVkVzTmtKQlFXMUNMRTlCUVVzc1kwRkJlRUlzUlVGQmQwTXNUMEZCU3l4UlFVRTNReXhGUVVGMVJDeFBRVUZMTEdOQlFUVkVMRU5CUVZJc1EwRkJjRUk3TzBGQlJVRXNhVUpCUVVzc1ZVRkJUQ3hEUVVGblFpeFJRVUZvUWl4RFFVRjVRaXhSUVVGNlFpeEhRVUZ2UXpzN1FVRkZiRU03UVVGRFFTeHZRa0ZCUXl4SFFVRkVMRVZCUVZNN1FVRkRVQ3h0UWtGQlN5eFpRVUZNTEVOQlFXdENMRk5CUVd4Q0xFTkJRVFJDTEVsQlFVa3NSMEZCYUVNc1JVRkJjVU1zU1VGQmNrTXNRMEZCTUVNc1ZVRkJReXhWUVVGRUxFVkJRV2RDTzBGQlEzaEVMR3RDUVVGSkxFZEJRVW9zUjBGQlZTeFZRVUZXTzBGQlEwRXNhMEpCUVVrc1NVRkJTanRCUVVORUxHRkJTRVFzUlVGSFJ5eExRVWhJTEVOQlIxTXNWVUZCUXl4TlFVRkVMRVZCUVZrN1FVRkRia0lzYzBKQlFWRXNTMEZCVWl4RFFVRmpMRTFCUVdRN1FVRkRRU3hyUWtGQlNTeEpRVUZLTEVOQlFWTXNUVUZCVkR0QlFVTkVMR0ZCVGtRN1FVRlBSQ3hYUVZocFF5eERRVUZ3UXpzN1FVRmpRVHRCUVVOQkxIRkNRVUZYTEZkQlFWZ3NRMEZCZFVJc1IwRkJka0lzUlVGQk5FSXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRia01zYlVKQlFVc3NWVUZCVEN4RFFVRm5RaXhYUVVGb1FpeERRVUUwUWl4SFFVRTFRanRCUVVORUxGZEJSa1E3TzBGQlNVRTdRVUZEUVN4cFFrRkJTeXhSUVVGTUxFTkJRV01zVlVGQlpDeEhRVUV5UWl4UFFVRkxMRlZCUVdoRE96dEJRVVZCTzBGQlEwRXNhVUpCUVVzc1kwRkJUQ3hEUVVGdlFpeFJRVUZ3UWl4SFFVRXJRaXhQUVVGTExGRkJRWEJET3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hwUWtGQlN5eGpRVUZNTEVOQlFXOUNMRlZCUVhCQ0xFZEJRV2xETEU5QlFVc3NWVUZCZEVNN08wRkJSVUU3UVVGRFFTeHBRa0ZCU3l4alFVRk1MRWRCUVhOQ0xEWkNRVUZ0UWl4UFFVRkxMRlZCUVhoQ0xFVkJRVzlETEU5QlFVc3NWVUZCZWtNc1JVRkJjVVFzVDBGQlN5eFJRVUV4UkN4RlFVRnZSU3hQUVVGTExHZENRVUY2UlN4RlFVRXlSaXhQUVVGTExHTkJRV2hITEVOQlFYUkNPenRCUVVWQk8wRkJRMEVzYVVKQlFVc3NUVUZCVEN4RFFVRlpMRlZCUVZvc1IwRkJlVUlzVDBGQlN5eFZRVUU1UWp0QlFVTkJMR2xDUVVGTExFMUJRVXdzUTBGQldTeFZRVUZhTEVkQlFYbENMRTlCUVVzc1ZVRkJPVUk3UVVGRFFTeHBRa0ZCU3l4TlFVRk1MRU5CUVZrc1VVRkJXaXhIUVVGMVFpeFBRVUZMTEZGQlFUVkNPMEZCUTBFc2FVSkJRVXNzVFVGQlRDeERRVUZaTEdkQ1FVRmFMRWRCUVN0Q0xFOUJRVXNzWjBKQlFYQkRPMEZCUTBFc2FVSkJRVXNzVFVGQlRDeERRVUZaTEdOQlFWb3NSMEZCTmtJc1QwRkJTeXhqUVVGc1F6czdRVUZGUVR0QlFVTkJPenRCUVVWQkxHdENRVUZSTEVsQlFWSTdRVUZEUkN4VFFYQkZSQ3hEUVc5RlJTeFBRVUZQTEVOQlFWQXNSVUZCVlR0QlFVTldMR2xDUVVGUExFTkJRVkE3UVVGRFJEdEJRVVZHTEU5Qk1VVk5MRU5CUVZBN1FVRTBSVVE3TzBGQlJVUTdPenM3T3pzN1owTkJTVmtzYjBJc1JVRkJjMEk3UVVGQlFUczdRVUZGYUVNc1ZVRkJTU3hEUVVGRExHOUNRVUZNTEVWQlFUSkNMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzTkVOQlFWWXNRMEZCVGpzN1FVRkZNMElzWVVGQlR5eHpRa0ZCV1N4VlFVRkRMRTlCUVVRc1JVRkJWU3hOUVVGV0xFVkJRWEZDT3p0QlFVVjBReXhsUVVGTExFMUJRVXdzUTBGQldTeFhRVUZhTEVOQlFYZENMRzlDUVVGNFFpeEZRVU5ETEVsQlJFUXNRMEZEVFN4VlFVRkRMRTFCUVVRc1JVRkJXVHRCUVVOb1FpeHJRa0ZCVVN4TlFVRlNPMEZCUTBRc1UwRklSQ3hGUVVsRExFdEJTa1FzUTBGSlR5eFZRVUZETEUxQlFVUXNSVUZCV1R0QlFVTnFRaXhwUWtGQlR5eE5RVUZRTzBGQlEwUXNVMEZPUkR0QlFWRkVMRTlCVmswc1EwRkJVRHRCUVZsRU96dEJRVVZFT3pzN096czdPelpDUVVsVExGa3NSVUZCWXp0QlFVRkJPenRCUVVWeVFpeFZRVUZKTEVOQlFVTXNXVUZCVEN4RlFVRnRRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTERoRFFVRldMRU5CUVU0N08wRkJSVzVDTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWpzN1FVRkZkRU1zWlVGQlN5eE5RVUZNTEVOQlFWa3NVVUZCV2l4RFFVRnhRaXhaUVVGeVFpeEZRVU5ETEVsQlJFUXNRMEZEVFN4VlFVRkRMRTFCUVVRc1JVRkJXVHRCUVVOb1FpeHJRa0ZCVVN4TlFVRlNPMEZCUTBRc1UwRklSQ3hGUVVsRExFdEJTa1FzUTBGSlR5eFZRVUZETEUxQlFVUXNSVUZCV1R0QlFVTnFRaXhwUWtGQlR5eE5RVUZRTzBGQlEwUXNVMEZPUkR0QlFWRkVMRTlCVmswc1EwRkJVRHRCUVZsRU96dEJRVVZFT3pzN096czdPMmxEUVVsaExGY3NSVUZCWVR0QlFVRkJPenRCUVVWNFFpeFZRVUZKTEVOQlFVTXNWMEZCVEN4RlFVRnJRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEhGRlFVRldMRU5CUVU0N08wRkJSV3hDTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWp0QlFVTjBReXhsUVVGTExFMUJRVXdzUTBGQldTeFpRVUZhTEVOQlFYbENMRmRCUVhwQ0xFVkJRME1zU1VGRVJDeERRVU5OTEZWQlFVTXNUVUZCUkN4RlFVRlpPMEZCUTJoQ0xHdENRVUZSTEUxQlFWSTdRVUZEUkN4VFFVaEVMRVZCU1VNc1MwRktSQ3hEUVVsUExGVkJRVU1zVFVGQlJDeEZRVUZaTzBGQlEycENMR2xDUVVGUExFMUJRVkE3UVVGRFJDeFRRVTVFTzBGQlQwUXNUMEZTVFN4RFFVRlFPMEZCVlVRN08wRkJSVVE3T3pzN096czdORUpCU1ZFN1FVRkRUaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4alFVRlJMRWxCUVZJc1EwRkJZU3d3UWtGQllqdEJRVU5CTEdGQlFVOHNjMEpCUVZrc1ZVRkJVeXhQUVVGVUxFVkJRV3RDTEUxQlFXeENMRVZCUVRCQ096dEJRVVV6UXl4alFVRk5MRkZCUVU0c1EwRkJaU3h6UWtGQlppeEhRVUYzUXl4SlFVRjRReXhEUVVFMlF5eFZRVUZUTEUxQlFWUXNSVUZCYVVJN1FVRkROVVFzYTBKQlFWRXNTVUZCVWl4RFFVRmhMR2RFUVVGaUxFVkJRU3RFTEUxQlFTOUVPMEZCUTBFc2EwSkJRVkVzU1VGQlVqdEJRVU5FTEZOQlNFUXNSVUZIUnl4TFFVaElMRU5CUjFNc1ZVRkJVeXhOUVVGVUxFVkJRV2xDTzBGQlEzaENMR3RDUVVGUkxFdEJRVklzUTBGQll5eHZRMEZCWkN4RlFVRnZSQ3hOUVVGd1JEdEJRVU5CTEdsQ1FVRlBMRXRCUVZBN1FVRkRSQ3hUUVU1RU8wRkJVVVFzVDBGV1RTeERRVUZRTzBGQldVUTdPenM3TzBGQkwxRklPenM3YTBKQmJWSmxMRk03T3pzN096czdPenRCUXpWVFVpeEpRVUZOTEhORVFVRjFRanM3UVVGRmJFTXNaVUZCWVR0QlFVTllMR05CUVZVN1FVRkRVaXhqUVVGUkxHOUNRVVJCTzBGQlJWSXNZMEZCVVR0QlFVWkJMRXRCUkVNN1FVRkxXQ3h2UWtGQlowSTdRVUZEWkN4alFVRlJMRzlDUVVSTk8wRkJSV1FzWTBGQlVUdEJRVVpOTEV0QlRFdzdRVUZUV0N4bFFVRlhPMEZCUTFRc1kwRkJVU3h2UWtGRVF6dEJRVVZVTEdOQlFWRTdRVUZHUXl4TFFWUkJPMEZCWVZnc1pVRkJWenRCUVVOVUxHTkJRVkVzYjBKQlJFTTdRVUZGVkN4alFVRlJPMEZCUmtNc1MwRmlRVHRCUVdsQ1dDeHZRa0ZCWjBJN1FVRkRaQ3hqUVVGUkxHOUNRVVJOTzBGQlJXUXNZMEZCVVR0QlFVWk5MRXRCYWtKTU8wRkJjVUpZTEdsQ1FVRmhPMEZCUTFnc1kwRkJVU3h2UWtGRVJ6dEJRVVZZTEdOQlFWRTdRVUZHUnp0QlFYSkNSaXhIUVVaeFFqdEJRVFJDYkVNc2FVSkJRV1U3UVVGRFlpeHJRa0ZCWXp0QlFVTmFMR05CUVZFc1owTkJSRWs3UVVGRldpeGpRVUZSTERSQ1FVWkpPMEZCUjFvc1owSkJRVlU3UVVGSVJTeExRVVJFTzBGQlRXSXNZMEZCVlR0QlFVTlNMR05CUVZFc1owTkJSRUU3UVVGRlVpeGpRVUZSTEhsQ1FVWkJPMEZCUjFJc1owSkJRVlU3UVVGSVJqdEJRVTVITEVkQk5VSnRRanRCUVhkRGJFTXNZMEZCV1R0QlFVTldMRmxCUVZFc2IwSkJSRVU3UVVGRlZpeFpRVUZSTEVWQlJrVTdRVUZIVml3NFFrRkJNRUlzTmtKQlNHaENPMEZCU1ZZc05rSkJRWGxDTERSQ1FVcG1PMEZCUzFZc05FSkJRWGRDTzBGQlRHUXNSMEY0UTNOQ08wRkJLME5zUXl4eFFrRkJiVUk3UVVGRGFrSXNXVUZCVVN4dlFrRkVVenRCUVVWcVFpeFpRVUZSTzBGQlJsTXNSMEV2UTJVN1FVRnRSR3hETEhGQ1FVRnRRanRCUVc1RVpTeERRVUUzUWpzN096czdPenM3T3pzN096czdPenM3UVVOQlVEczdRVUZEUVRzN096czdPMGxCUlUwc1l6dEJRVVZLTERCQ1FVRlpMRTFCUVZvc1JVRkJiMElzUjBGQmNFSXNSVUZCZVVJc1UwRkJla0lzUlVGQmIwTTdRVUZCUVRzN1FVRkRiRU1zVVVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJUU3hQUVVGT0xFZEJRV2RDTEUxQlFXaENPMEZCUTBFc1ZVRkJUU3hKUVVGT0xFZEJRV0VzUjBGQllqdEJRVU5CTEZWQlFVMHNWVUZCVGl4SFFVRnRRaXhUUVVGdVFqczdRVUZGUVN4VlFVRk5MR1ZCUVU0c1IwRkJkMElzVDBGQlR5eGxRVUV2UWpzN1FVRkZRU3hWUVVGTkxFbEJRVTRzUjBGQllTeFBRVUZQTEVsQlFYQkNPenRCUVVWQkxGVkJRVTBzWTBGQlRpeEhRVUYxUWl4RlFVRjJRanRCUVVOQkxGVkJRVTBzY1VKQlFVNHNSMEZCT0VJc1JVRkJPVUk3UVVGRFJEczdPenR4UTBGRlowSXNUeXhGUVVGVE8wRkJRM2hDTEZWQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGbEJRVTBzWTBGQlRpeERRVUZ4UWl4UFFVRnlRaXhKUVVGblF5d3lRa0ZCYVVJc1RVRkJUU3hKUVVGMlFpeEZRVUUyUWl4UFFVRTNRaXhGUVVGelF5eE5RVUZOTEVsQlFUVkRMRVZCUVd0RUxFMUJRVTBzVlVGQmVFUXNSVUZCYjBVc1MwRkJjRVVzUTBGQmFFTTdRVUZEUkRzN08yOURRVVZsTEU4c1JVRkJVenRCUVVOMlFpeFZRVUZKTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3haUVVGTkxHZENRVUZPTEVOQlFYVkNMRTlCUVhaQ08wRkJRMFE3T3p0MVEwRkZhMElzVHl4RlFVRlRPMEZCUXpGQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrc1UwRkJVeXh6UWtGQlZTeFBRVUZXTEVWQlFXMUNMRTFCUVdoRE8wRkJRMEVzVlVGQlNTeHhRa0ZCY1VJc1RVRkJUU3hKUVVGT0xFZEJRV0VzWlVGQmRFTTdPMEZCUlVFc1ZVRkJTU3hsUVVGbExFMUJRVTBzWTBGQlRpeERRVUZ4UWl4UFFVRnlRaXhEUVVGdVFqdEJRVU5CTEZWQlFVa3NXVUZCU2l4RlFVRnJRanRCUVVOb1FqdEJRVU5CTEdOQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUk3UVVGRGNrSXNaMEpCUVUwc1lVRkVaU3hGUVVOQkxFMUJRVTBzVFVGQlRTeFBRVUZPTEVOQlFXTXNTVUZFY0VJc1JVRkRNRUlzU1VGQlNTeHJRa0ZFT1VJN1FVRkZja0lzWjBKQlFVMHNSVUZCUlN4VlFVRlZMRTFCUVUwc1NVRkJiRUk3UVVGR1pTeFRRVUYyUWpzN1FVRkxRVHRCUVVOQk8wRkJRMEVzWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRanRCUVVOeVFpeG5Ra0ZCVFN4aFFVUmxMRVZCUTBFc1RVRkJUU3hOUVVGTkxFOUJRVTRzUTBGQll5eEpRVVJ3UWl4RlFVTXdRaXhKUVVGSkxIVkNRVUYxUWl4TlFVRjJRaXhIUVVGblF5eExRVVE1UkR0QlFVVnlRaXhuUWtGQlRTeEZRVUZGTEZWQlFWVXNUVUZCVFN4SlFVRnNRaXhGUVVGM1FpeHRRa0ZCYlVJc1RVRkJUU3hWUVVGcVJEdEJRVVpsTEZOQlFYWkNPenRCUVV0QkxIRkNRVUZoTEdsQ1FVRmlPMEZCUTBFc1pVRkJUeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNUMEZCY2tJc1EwRkJVRHRCUVVORU8wRkJRMFk3T3pzN08ydENRVWxaTEdNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE5VUm1PenRCUVVOQk96czdPenM3U1VGRlRTeGpPMEZCUlVvc01FSkJRVmtzVFVGQldpeEZRVUZ2UWl4TFFVRndRaXhGUVVFeVFpeEhRVUV6UWl4RlFVRm5RenRCUVVGQk96dEJRVU01UWl4UlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZOTEU5QlFVNHNSMEZCWjBJc1RVRkJhRUk3UVVGRFFTeFZRVUZOTEUxQlFVNHNSMEZCWlN4TFFVRm1PMEZCUTBFc1ZVRkJUU3hKUVVGT0xFZEJRV0VzUjBGQllqczdRVUZGUVN4VlFVRk5MRWxCUVU0c1IwRkJZU3hQUVVGUExFbEJRWEJDTzBGQlEwRXNWVUZCVFN4bFFVRk9MRWRCUVhkQ0xFOUJRVThzWlVGQkwwSTdPMEZCUlVFc1ZVRkJUU3hQUVVGT0xFZEJRV2RDTEhOQ1FVRlZMRXRCUVZZc1JVRkJhVUlzVFVGQmFrTTdRVUZEUVN4VlFVRk5MR3RDUVVGT0xFZEJRVEpDTEUxQlFVMHNTVUZCVGl4SFFVRmhMR1ZCUVhoRE96dEJRVVZCTEZWQlFVMHNZMEZCVGl4SFFVRjFRaXhGUVVGMlFqdEJRVU5CTEZWQlFVMHNWVUZCVGl4SFFVRnRRaXhGUVVGdVFqdEJRVU5CTEZWQlFVMHNhMEpCUVU0c1IwRkJNa0lzUlVGQk0wSTdPMEZCUlVFc1ZVRkJUU3hUUVVGT0xFZEJRV3RDTEVWQlFXeENPenRCUVVWQkxGVkJRVTBzYTBKQlFVNDdRVUZEUkRzN096dDVRMEZGYjBJN1FVRkRia0lzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFN1FVRkRRU3haUVVGTkxIRkNRVUZPTEVkQlFUaENMRTFCUVUwc1NVRkJUaXhEUVVGWExGZEJRVmdzUTBGQmRVSXNUVUZCVFN4clFrRkJOMElzUlVGQmFVUXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkRkRVlzWjBKQlFWRXNSMEZCVWl4RFFVRlpMRTFCUVUwc2EwSkJRVTRzUjBGQk1rSXNVVUZCZGtNc1JVRkJhVVFzUjBGQmFrUTdRVUZEUVN4blFrRkJVU3hKUVVGSkxFbEJRVm83UVVGRFJTeGxRVUZMTEZkQlFVdzdRVUZCYTBJc2EwSkJRVTBzYTBKQlFVNHNRMEZCZVVJc1IwRkJla0lzUlVGQkswSTdRVUZEYWtRc1pVRkJTeXhoUVVGTU8wRkJRVzlDTEd0Q1FVRk5MRzlDUVVGT0xFTkJRVEpDTEVkQlFUTkNMRVZCUVdsRE8wRkJRM0pFTEdWQlFVc3NWVUZCVER0QlFVRnBRaXhyUWtGQlRTeHBRa0ZCVGl4RFFVRjNRaXhIUVVGNFFpeEZRVUU0UWp0QlFVaHFSRHRCUVV0RUxFOUJVRFpDTEVOQlFUbENPenRCUVZOQkxGVkJRVWtzV1VGQldTeE5RVUZOTEVsQlFVNHNSMEZCWVN4VlFVRTNRanRCUVVOQkxGbEJRVTBzWlVGQlRpeEhRVUYzUWl4TlFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTEZOQlFYWkNMRVZCUVd0RExGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEycEZPMEZCUTBFc1dVRkJTU3hKUVVGSkxFbEJRVW9zUTBGQlV5eFRRVUZpTEVWQlFYZENPMEZCUTNSQ0xHZENRVUZOTEU5QlFVNHNRMEZCWXl4cFFrRkJaQ3hEUVVGblF5eFZRVUZvUXl4RFFVRXlReXhOUVVGTkxFbEJRV3BFTEVWQlFYVkVMRTFCUVhaRUxFVkJRU3RFTEVsQlFVa3NTVUZCU2l4RFFVRlRMRk5CUVhoRkxFVkJRVzFHTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVRWR0xFVkJRVzFITEVsQlFXNUhPMEZCUTBRN1FVRkRSQ3huUWtGQlVTeEhRVUZTTEVOQlFWa3NiMEpCUVc5Q0xGTkJRWEJDTEVkQlFXZERMRkZCUVRWRExFVkJRWE5FTEVkQlFYUkVPMEZCUTBRc1QwRk9kVUlzUTBGQmVFSTdRVUZQUkRzN08zZERRVVZ0UWl4aExFVkJRV1U3UVVGRGFrTXNWVUZCU1N4UlFVRlJMRWxCUVZvN08wRkJSVUVzTUVKQlFWa3NZVUZCV2l4RlFVRXlRaXhQUVVFelFpeERRVUZ0UXl4VlFVRkRMRWRCUVVRc1JVRkJVenRCUVVNeFF5eFpRVUZKTEdGQlFXRXNZMEZCWXl4SFFVRmtMRU5CUVdwQ096dEJRVVZCTEZsQlFVa3NRMEZCUXl4TlFVRk5MR05CUVU0c1EwRkJjVUlzVlVGQmNrSXNRMEZCVEN4RlFVRjFRenRCUVVOeVF5eG5Ra0ZCVFN4alFVRk9MRU5CUVhGQ0xGVkJRWEpDTEVsQlFXMURMREpDUVVGcFFpeE5RVUZOTEVsQlFYWkNMRVZCUVRaQ0xFMUJRVTBzVFVGQmJrTXNSVUZCTWtNc1RVRkJUU3hKUVVGcVJDeEZRVUYxUkN4TlFVRk5MRlZCUVRkRUxFVkJRWGxGTEVsQlFYcEZMRU5CUVc1RE8wRkJRMFE3UVVGRFJpeFBRVTVFTzBGQlVVUTdPenQzUTBGRmJVSTdRVUZEYkVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNXVUZCVFN4eFFrRkJUaXhEUVVFMFFpeE5RVUUxUWpzN1FVRkZRU3haUVVGTkxHVkJRVTRzUTBGQmMwSXNUVUZCZEVJN08wRkJSVUVzV1VGQlRTeHJRa0ZCVGl4RFFVRjVRaXhQUVVGNlFpeERRVUZwUXl4VlFVRkRMRVZCUVVRc1JVRkJVVHRCUVVOMlF5eFhRVUZITEUxQlFVZzdRVUZEUkN4UFFVWkVPenRCUVVsQkxEQkNRVUZaTEUxQlFVMHNVMEZCYkVJc1JVRkJOa0lzVDBGQk4wSXNRMEZCY1VNc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRE5VTXNZMEZCVFN4clFrRkJUaXhEUVVGNVFpeEhRVUY2UWp0QlFVTkVMRTlCUmtRN08wRkJTVUU3UVVGRFFTd3dRa0ZCV1N4TlFVRk5MR05CUVd4Q0xFVkJRV3RETEU5QlFXeERMRU5CUVRCRExGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEycEVMR05CUVUwc1kwRkJUaXhEUVVGeFFpeEhRVUZ5UWl4RlFVRXdRaXhwUWtGQk1VSTdRVUZEUkN4UFFVWkVPMEZCUjBRN08wRkJSVVE3T3pzN096czdPM0ZEUVV0cFFpeFRMRVZCUVZjN1FVRkRNVUlzVlVGQlNTeFJRVUZSTEVsQlFWbzdPMEZCUlVFN1FVRkRRU3hWUVVGSkxHMUNRVUZ0UWp0QlFVTnlRaXhqUVVGTkxGZEJSR1VzUlVGRFJpeE5RVUZOTEUxQlFVMHNUMEZCVGl4RFFVRmpMRWxCUkd4Q0xFVkJRM2RDTEVsQlFVa3NkVUpCUVhWQ0xFMUJRVTBzVDBGQk4wSXNSMEZCZFVNc1MwRkVia1U3UVVGRmNrSXNZMEZCVFN4RlFVRkZMRmRCUVZjc1UwRkJZaXhGUVVGM1FpeFJRVUZSTEUxQlFVMHNUVUZCZEVNN1FVRkdaU3hQUVVGMlFqczdRVUZMUVN4aFFVRlBMSE5DUVVGWkxGVkJRVU1zVDBGQlJDeEZRVUZWTEUxQlFWWXNSVUZCY1VJN1FVRkRkRU1zWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRaXhuUWtGQmRrSXNSVUZCZVVNc1ZVRkJReXhMUVVGRUxFVkJRVmM3UVVGRGJFUXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxIZERRVUZhTEVWQlFYTkVMRXRCUVhSRU8wRkJRMEVzWTBGQlNTeE5RVUZOTEVsQlFVNHNRMEZCVnl4SlFVRllMRXRCUVc5Q0xFZEJRWGhDTEVWQlFUWkNPMEZCUXpOQ0xHZENRVUZKTEdGQlFXRXNUVUZCVFN4SlFVRk9MRU5CUVZjc1ZVRkJXQ3hEUVVGelFpeE5RVUZOTEVsQlFUVkNMRVZCUVd0RExFMUJRVTBzVFVGQmVFTXNRMEZCYWtJN1FVRkRRU3hyUWtGQlRTeFRRVUZPTEVOQlFXZENMRlZCUVZVc1EwRkJWaXhEUVVGb1FpeEpRVUZuUXl4VlFVRm9RenRCUVVOQk8wRkJRMFFzVjBGS1JDeE5RVWxQTzBGQlEwd3NiVUpCUVU4c2NVTkJRWEZETEUxQlFVMHNTVUZCVGl4RFFVRlhMRWxCUVhaRU8wRkJRMFE3UVVGRFJpeFRRVlJFTzBGQlZVUXNUMEZZVFN4RFFVRlFPMEZCV1VRN08wRkJSVVE3T3pzN096czdkVU5CU1cxQ0xFOHNSVUZCVXp0QlFVTXhRaXhWUVVGSkxGRkJRVkVzU1VGQldqczdRVUZGUVN4WlFVRk5MRk5CUVU0c1EwRkJaMElzVDBGQmFFSXNSVUZCZVVJc1RVRkJla0k3UVVGRFFTeGhRVUZQTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhQUVVGb1FpeERRVUZRT3p0QlFVVkJPMEZCUTBFc1ZVRkJTU3h4UWtGQmNVSTdRVUZEZGtJc1kwRkJUU3hoUVVScFFpeEZRVU5HTEUxQlFVMHNUVUZCVFN4UFFVRk9MRU5CUVdNc1NVRkViRUlzUlVGRGQwSXNTVUZCU1N4MVFrRkJkVUlzVFVGQlRTeFBRVUUzUWl4SFFVRjFReXhMUVVSdVJUdEJRVVYyUWl4alFVRk5MRVZCUVVVc1YwRkJWeXhEUVVGRExFOUJRVVFzUTBGQllpeEZRVUYzUWl4UlFVRlJMRTFCUVUwc1RVRkJkRU03UVVGR2FVSXNUMEZCZWtJN08wRkJTMEVzV1VGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRaXhyUWtGQmRrSTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdhVU5CUzJFc1V5eEZRVUZYTzBGQlEzUkNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEdGQlFVOHNjMEpCUVZrc1ZVRkJReXhQUVVGRUxFVkJRVlVzVFVGQlZpeEZRVUZ4UWp0QlFVTjBReXhaUVVGSkxGVkJRVlVzVFVGQlZpeExRVUZ4UWl4RFFVRjZRaXhGUVVFMFFqdEJRVU14UWp0QlFVTkJPMEZCUTBRN08wRkJSVVFzV1VGQlNTeGxRVUZsTEUxQlFVMHNTVUZCVGl4SFFVRmhMRmxCUVdoRE8wRkJRMEVzWTBGQlRTeFZRVUZPTEVOQlFXbENMRWxCUVdwQ0xFTkJRWE5DTEZOQlFYUkNPenRCUVVWQk96czdPenM3TzBGQlVVRXNXVUZCU1N4blFrRkJaMElzUlVGQmNFSTdRVUZEUVN4clFrRkJWU3hQUVVGV0xFTkJRV3RDTEZWQlFVTXNTMEZCUkR0QlFVRkJMR2xDUVVGWExHTkJRV01zU1VGQlpDeERRVUZ0UWl4bFFVRmxMRXRCUVd4RExFTkJRVmc3UVVGQlFTeFRRVUZzUWpzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTEZsQlFVa3NiVUpCUVcxQ08wRkJRM0pDTEdkQ1FVRk5MRmRCUkdVc1JVRkRSaXhOUVVGTkxFMUJRVTBzVDBGQlRpeERRVUZqTEVsQlJHeENMRVZCUTNkQ0xFbEJRVWtzZFVKQlFYVkNMRTFCUVUwc1QwRkJOMElzUjBGQmRVTXNTMEZFYmtVN1FVRkZja0lzWjBKQlFVMHNSVUZCUlN4WFFVRlhMR0ZCUVdJc1JVRkJORUlzVVVGQlVTeE5RVUZOTEUxQlFURkRPMEZCUm1Vc1UwRkJka0k3TzBGQlMwRXNZMEZCVFN4SlFVRk9MRU5CUVZjc1YwRkJXQ3hEUVVGMVFpeG5Ra0ZCZGtJc1JVRkJlVU1zVlVGQlF5eExRVUZFTEVWQlFWYzdRVUZEYkVRc2EwSkJRVkVzUjBGQlVpeERRVUZaTEhGRFFVRmFMRVZCUVcxRUxFdEJRVzVFTzBGQlEwRXNZMEZCU1N4TlFVRk5MRWxCUVU0c1EwRkJWeXhKUVVGWUxFdEJRVzlDTEVkQlFYaENMRVZCUVRaQ096dEJRVVV6UWp0QlFVTkJMREJDUVVGakxFOUJRV1FzUTBGQmMwSXNWVUZCUXl4UlFVRkVMRVZCUVdNN1FVRkRiRU1zYTBKQlFVa3NaMEpCUVdkQ0xFMUJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJc1VVRkJka0lzUlVGQmFVTXNWVUZCUXl4SFFVRkVMRVZCUVZNN1FVRkROVVE3UVVGRFFTeDNRa0ZCVVN4SFFVRlNMRU5CUVZrc2IwSkJRVzlDTEZGQlFYQkNMRWRCUVN0Q0xGRkJRVE5ETEVWQlFYRkVMRWRCUVhKRU8wRkJRMFFzWlVGSWJVSXNRMEZCY0VJN1FVRkpRU3h2UWtGQlRTeHJRa0ZCVGl4RFFVRjVRaXhKUVVGNlFpeERRVUU0UWl4aFFVRTVRanM3UVVGRlFTeHJRa0ZCU1N4alFVRmpMRTFCUVUwc1NVRkJUaXhEUVVGWExGVkJRVmdzUTBGQmMwSXNVVUZCZEVJc1JVRkJaME1zVFVGQlRTeE5RVUYwUXl4RFFVRnNRanRCUVVOQkxHOUNRVUZOTEd0Q1FVRk9MRU5CUVhsQ0xFbEJRWHBDTEVOQlFUaENMRmRCUVRsQ08wRkJRMFFzWVVGVVJEczdRVUZYUVR0QlFVTkVMRmRCWmtRc1RVRmxUenRCUVVOTUxHMUNRVUZQTEhGRFFVRnhReXhOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUYyUkR0QlFVTkVPMEZCUTBZc1UwRndRa1E3UVVGeFFrUXNUMEZxUkUwc1EwRkJVRHRCUVd0RVJEczdPemhDUVVWUk8wRkJRMUFzVlVGQlNTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpMRk5CUVZNc2MwSkJRVlVzVFVGQlRTeE5RVUZvUWl4RlFVRjNRaXhOUVVGeVF6czdRVUZGUVR0QlFVTkJMRmxCUVUwc1NVRkJUaXhEUVVGWExGZEJRVmdzUTBGQmRVSTdRVUZEY2tJc1kwRkJUU3hSUVVSbExFVkJRMHdzVFVGQlRTeE5RVUZOTEd0Q1FVUlFMRVZCUXpKQ0xFbEJRVWtzVFVGQlRTeEpRVUZPTEVkQlFXRTdRVUZFTlVNc1QwRkJka0k3TzBGQlNVRTdRVUZEUVN4WlFVRk5MRWxCUVU0c1EwRkJWeXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNMR05CUVUwc1VVRkVaU3hGUVVOTUxFMUJRVTBzVFVGQlRTeFBRVUZPTEVOQlFXTXNTVUZFWml4RlFVTnhRaXhKUVVGSkxIVkNRVUYxUWl4TlFVRjJRaXhIUVVGblF5dzBRa0ZFZWtRN1FVRkZja0lzWTBGQlRTeEZRVUZGTEZWQlFWVXNUVUZCVFN4SlFVRnNRaXhGUVVGM1FpeHRRa0ZCYlVJc1RVRkJUU3hWUVVGcVJEdEJRVVpsTEU5QlFYWkNPenRCUVV0QkxGbEJRVTBzYVVKQlFVNDdRVUZEUVN4aFFVRlBMRTFCUVUwc1QwRkJUaXhEUVVGakxGVkJRV1FzUTBGQmVVSXNUVUZCVFN4SlFVRXZRaXhEUVVGUU8wRkJRMFE3T3p0elEwRkZhVUlzUnl4RlFVRkxPMEZCUTNKQ0xGVkJRVWtzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRmxCUVUwc1NVRkJUaXhEUVVGWExGZEJRVmdzUTBGQmRVSTdRVUZEY2tJc1dVRkJTU3hKUVVGSkxFVkJSR0VzUlVGRFZDeE5RVUZOTEZWQlJFY3NSVUZEVXl4TlFVRk5MRWxCUVVrc1JVRkVia0lzUlVGRGRVSXNTVUZCU1N4TlFVRk5MRWxCUkdwRE8wRkJSWEpDTEdOQlFVMHNSVUZCUlN4TlFVRk5MRWxCUVVrc1NVRkJTaXhEUVVGVExFbEJRV3BDTEVWQlFYVkNMRlZCUVZVc1NVRkJTU3hKUVVGS0xFTkJRVk1zVVVGQk1VTXNSVUZCYjBRc1VVRkJVU3hKUVVGSkxFbEJRV2hGTzBGQlJtVXNUMEZCZGtJN1FVRkpSRHM3UVVGRlJEczdPenQxUTBGRGJVSXNSeXhGUVVGTE8wRkJRM1JDTEZWQlFVa3NVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTU3hoUVVGaExFbEJRVWtzU1VGQlNpeERRVUZUTEZWQlFURkNPenRCUVVWQk8wRkJRMEVzVlVGQlNTeE5RVUZOTEdOQlFVNHNRMEZCY1VJc1ZVRkJja0lzUTBGQlNpeEZRVUZ6UXp0QlFVTndRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHTkJRVTBzWTBGQlRpeERRVUZ4UWl4VlFVRnlRaXhGUVVGcFF5eHBRa0ZCYWtNN1FVRkRSRHM3UVVGRlJEdEJRVU5CTzBGQlEwRXNWVUZCU1N4UFFVRlBMRk5CUVZnN08wRkJSVUVzVlVGQlNTeFRRVUZUTEZOQlFXSXNSVUZCZDBJN1FVRkRkRUk3UVVGRFFTeFpRVUZKTEdGQlFXRTdRVUZEWml4blFrRkJUU3hUUVVSVExFVkJRMFVzVFVGQlRTeE5RVUZOTEVsQlJHUXNSVUZEYjBJc1NVRkJTU3hOUVVGTkxFMUJSRGxDTzBGQlJXWXNaMEpCUVUwc1JVRkJSU3hOUVVGTkxFbEJRVWtzU1VGQldpeEZRVUZyUWl4TlFVRk5MRlZCUVhoQ0xFVkJRVzlETEVsQlFVa3NUVUZCVFN4SlFVRTVReXhGUVVGdlJDeFZRVUZWTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVhaRk8wRkJSbE1zVTBGQmFrSTdPMEZCUzBFc1kwRkJUU3hKUVVGT0xFTkJRVmNzVjBGQldDeERRVUYxUWl4VlFVRjJRaXhGUVVGdFF5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTTFReXhyUWtGQlVTeEhRVUZTTEVOQlFWa3NhVUpCUVZvc1JVRkJLMElzUzBGQkwwSTdRVUZEUVN4alFVRkpMRTFCUVUwc1NVRkJUaXhEUVVGWExFbEJRVmdzUzBGQmIwSXNSMEZCZUVJc1JVRkJOa0k3UVVGRE0wSXNaMEpCUVVrc1EwRkJReXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNWVUZCY2tJc1EwRkJUQ3hGUVVGMVF6dEJRVU55UXl4dlFrRkJUU3hqUVVGT0xFTkJRWEZDTEZWQlFYSkNMRWxCUVcxRExESkNRVUZwUWl4TlFVRk5MRWxCUVhaQ0xFVkJRVFpDTEUxQlFVMHNUVUZCYmtNc1JVRkJNa01zVFVGQlRTeEpRVUZxUkN4RlFVRjFSQ3hOUVVGTkxGVkJRVGRFTEVWQlFYbEZMRWxCUVhwRkxFTkJRVzVETzBGQlEwUTdRVUZEUmpzN1FVRkZSRHRCUVVOQkxHTkJRVWtzWjBKQlFVbzdRVUZEUVN4alFVRkpMRWxCUVVrc1NVRkJTaXhEUVVGVExGRkJRVlFzU1VGQmNVSXNTVUZCU1N4SlFVRktMRU5CUVZNc1VVRkJWQ3hEUVVGclFpeFhRVUZzUWl4RFFVRTRRaXhQUVVGMlJDeEZRVUZuUlR0QlFVTTVSQ3h6UWtGQlZTeEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRlVMRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRTlCUVhoRE8wRkJRMEVzYTBKQlFVMHNUMEZCVGl4RFFVRmpMR2xDUVVGa0xFTkJRV2RETEUxQlFXaERMRU5CUVhWRExFMUJRVTBzU1VGQk4wTXNSVUZCYlVRc2FVSkJRVzVFTEVWQlFYTkZMRTlCUVhSRk8wRkJRMFE3TzBGQlJVUXNaMEpCUVUwc1QwRkJUaXhEUVVGakxHbENRVUZrTEVOQlFXZERMRTFCUVdoRExFTkJRWFZETEUxQlFVMHNTVUZCTjBNc1JVRkJiVVFzWlVGQmJrUXNSVUZCYjBVc1ZVRkJjRVU3TzBGQlJVRTdRVUZEUVN4blFrRkJUU3hKUVVGT0xFTkJRVmNzVjBGQldDeERRVUYxUWp0QlFVTnlRaXhuUWtGQlNTeEpRVUZKTEVWQlJHRXNSVUZEVkN4TlFVRk5MRlZCUkVjc1JVRkRVeXhOUVVGTkxFbEJRVWtzUlVGRWJrSXNSVUZEZFVJc1NVRkJTU3hKUVVGSkxFbEJSQzlDTzBGQlJYSkNMR3RDUVVGTkxFMUJRVTA3UVVGR1V5eFhRVUYyUWp0QlFVdEVMRk5CZGtKRU8wRkJkMEpFTzBGQlJVWTdPMEZCUlVRN096czdlVU5CUTNGQ0xFY3NSVUZCU3p0QlFVTjRRaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NZVUZCWVN4SlFVRkpMRWxCUVVvc1EwRkJVeXhWUVVFeFFqczdRVUZGUVN4VlFVRkpMR1ZCUVdVc1RVRkJUU3hqUVVGT0xFTkJRWEZDTEZWQlFYSkNMRU5CUVc1Q08wRkJRMEVzVlVGQlNTeFpRVUZLTEVWQlFXdENPMEZCUTJoQ0xIRkNRVUZoTEdsQ1FVRmlPMEZCUTBFc1pVRkJUeXhOUVVGTkxHTkJRVTRzUTBGQmNVSXNWVUZCY2tJc1EwRkJVRHM3UVVGRlFUdEJRVU5FTzBGQlJVWTdPenM3TzJ0Q1FVbFpMR003T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wbERkRk5VTEdkQ08wRkJSVW9zTkVKQlFWa3NZMEZCV2l4RlFVRTBRanRCUVVGQk96dEJRVU14UWl4UlFVRkpMRU5CUVVNc1kwRkJUQ3hGUVVGeFFpeE5RVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMREpFUVVGV0xFTkJRVTQ3TzBGQlJYSkNMRk5CUVVzc1pVRkJUQ3hIUVVGMVFpeGpRVUYyUWp0QlFVTkJMRk5CUVVzc1owSkJRVXdzUjBGQmQwSXNSVUZCZUVJN1FVRkRSRHM3T3p0M1FrRkZSeXhSTEVWQlFWVXNWU3hGUVVGWkxFMHNSVUZCVVN4TkxFVkJRVkVzU1N4RlFVRk5MRmtzUlVGQll5eFJMRVZCUVZVc2FVSXNSVUZCYlVJc1l5eEZRVUZuUWpzN1FVRkZla2NzVlVGQlNTeFBRVUZQTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzVlVGQmRFSXNRMEZCV0R0QlFVTkJMRlZCUVVrc1EwRkJReXhMUVVGTExHZENRVUZNTEVOQlFYTkNMR05CUVhSQ0xFTkJRWEZETEVsQlFYSkRMRU5CUVV3c1JVRkJhVVFzUzBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhKUVVGMFFpeEpRVUU0UWl4RlFVRTVRanM3UVVGRmFrUXNWVUZCU1N4RFFVRkRMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNTVUZCZEVJc1JVRkJORUlzWTBGQk5VSXNRMEZCTWtNc1VVRkJNME1zUTBGQlRDeEZRVUV5UkR0QlFVTjZSQ3hoUVVGTExHZENRVUZNTEVOQlFYTkNMRWxCUVhSQ0xFVkJRVFJDTEZGQlFUVkNMRWxCUVhkRE8wRkJRM1JETEc5Q1FVRlZMRkZCUkRSQ08wRkJSWFJETEhOQ1FVRlpMRlZCUmpCQ08wRkJSM1JETEhsQ1FVRmxMRVZCU0hWQ08wRkJTWFJETERKQ1FVRnBRanRCUVVweFFpeFRRVUY0UXp0QlFVMUVPenRCUVVWRUxGVkJRVWtzU1VGQlNpeEZRVUZWTEV0QlFVc3NaMEpCUVV3c1EwRkJjMElzU1VGQmRFSXNSVUZCTkVJc1VVRkJOVUlzUlVGQmMwTXNTVUZCZEVNc1IwRkJOa01zU1VGQk4wTTdRVUZEVml4VlFVRkpMRTFCUVVvc1JVRkJXU3hMUVVGTExHZENRVUZNTEVOQlFYTkNMRWxCUVhSQ0xFVkJRVFJDTEZGQlFUVkNMRVZCUVhORExFMUJRWFJETEVkQlFTdERMRTFCUVM5RE8wRkJRMW9zVlVGQlNTeE5RVUZLTEVWQlFWa3NTMEZCU3l4blFrRkJUQ3hEUVVGelFpeEpRVUYwUWl4RlFVRTBRaXhSUVVFMVFpeEZRVUZ6UXl4TlFVRjBReXhIUVVFclF5eE5RVUV2UXp0QlFVTmFMRlZCUVVrc1VVRkJTaXhGUVVGakxFdEJRVXNzWjBKQlFVd3NRMEZCYzBJc1NVRkJkRUlzUlVGQk5FSXNVVUZCTlVJc1JVRkJjME1zVVVGQmRFTXNSMEZCYVVRc1VVRkJha1E3UVVGRFpDeFZRVUZKTEdsQ1FVRktMRVZCUVhWQ0xFdEJRVXNzWjBKQlFVd3NRMEZCYzBJc1NVRkJkRUlzUlVGQk5FSXNVVUZCTlVJc1JVRkJjME1zYVVKQlFYUkRMRWRCUVRCRUxHbENRVUV4UkRzN1FVRkZka0lzVlVGQlNTeG5Ra0ZCWjBJc1EwRkJReXhWUVVGeVFpeEZRVUZwUXp0QlFVTXZRaXhoUVVGTExHTkJRVXdzUTBGQmIwSXNVVUZCY0VJc1JVRkJPRUlzWlVGQk9VSXNSVUZCSzBNc1dVRkJMME1zUlVGQk5rUXNTVUZCTjBRN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRDeGhRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFbEJRWFJDTEVWQlFUUkNMRkZCUVRWQ0xFVkJRWE5ETEV0QlFYUkRMRWRCUVRoRExGbEJRVGxETzBGQlEwUTdPMEZCUlVRc1ZVRkJTU3hqUVVGS0xFVkJRVzlDTzBGQlEyeENMRmxCUVVrc1MwRkJTeXhuUWtGQlRDeERRVUZ6UWl4SlFVRjBRaXhGUVVFMFFpeFJRVUUxUWl4RlFVRnpReXhsUVVGMFF5eERRVUZ6UkN4UFFVRjBSQ3hEUVVFNFJDeGpRVUU1UkN4RFFVRktMRVZCUVcxR08wRkJRMnBHTEdWQlFVc3NZMEZCVEN4RFFVRnZRaXhSUVVGd1FpeEZRVUU0UWl4cFFrRkJPVUlzUlVGQmFVUXNZMEZCYWtRc1JVRkJhVVVzU1VGQmFrVTdRVUZEUkR0QlFVTkdPenRCUVVWRUxHRkJRVThzUzBGQlN5eGxRVUZNTEVOQlFYRkNMRWRCUVhKQ0xFTkJRWGxDTERKQ1FVRjZRaXhGUVVGelJDeERRVUYwUkN4RlFVRjVSQ3hMUVVGTExHZENRVUU1UkN4RFFVRlFPMEZCUTBRN096c3JRa0ZGVlN4UkxFVkJRVlVzUnl4RlFVRkxMRk1zUlVGQlZ5eExMRVZCUVRCQ08wRkJRVUVzVlVGQmJrSXNWVUZCYlVJc2RVVkJRVTRzU1VGQlRUczdRVUZETjBRc1ZVRkJTU3hQUVVGUExFdEJRVXNzWjBKQlFVd3NRMEZCYzBJc1ZVRkJkRUlzUTBGQldEczdRVUZGUVN4VlFVRkpMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNZMEZCZEVJc1EwRkJjVU1zU1VGQmNrTXNTMEZCT0VNc1MwRkJTeXhuUWtGQlRDeERRVUZ6UWl4SlFVRjBRaXhGUVVFMFFpeFJRVUUxUWl4RFFVRTVReXhKUVVGMVJpeFJRVUYyUml4SlFVRnRSeXhIUVVGdVJ5eEpRVUV3Unl4TFFVRTVSeXhGUVVGeFNEczdRVUZGYmtnc1dVRkJTU3hSUVVGUkxHVkJRVklzU1VGQk1rSXNVVUZCVVN4cFFrRkJka01zUlVGQk1FUTdRVUZEZUVRc1pVRkJTeXhqUVVGTUxFTkJRVzlDTEZGQlFYQkNMRVZCUVRoQ0xFZEJRVGxDTEVWQlFXMURMRXRCUVc1RExFVkJRVEJETEVsQlFURkRPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdzWlVGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhKUVVGMFFpeEZRVUUwUWl4UlFVRTFRaXhGUVVGelF5eEhRVUYwUXl4RlFVRXlReXhUUVVFelF5eEpRVUYzUkN4TFFVRjRSRHRCUVVORU96dEJRVVZFTEdWQlFVOHNTMEZCU3l4bFFVRk1MRU5CUVhGQ0xFZEJRWEpDTEVOQlFYbENMREpDUVVGNlFpeEZRVUZ6UkN4RFFVRjBSQ3hGUVVGNVJDeExRVUZMTEdkQ1FVRTVSQ3hEUVVGUU8wRkJSVVE3UVVGRFJqczdPekpDUVVWTkxGRXNSVUZCVlN4SExFVkJRVXNzU3l4RlFVRXdRanRCUVVGQkxGVkJRVzVDTEZWQlFXMUNMSFZGUVVGT0xFbEJRVTA3TzBGQlF6bERMRlZCUVVrc1QwRkJUeXhMUVVGTExHZENRVUZNTEVOQlFYTkNMRlZCUVhSQ0xFTkJRVmc3TzBGQlJVRXNWVUZCU1N4TFFVRkxMR2RDUVVGTUxFTkJRWE5DTEVsQlFYUkNMRXRCUVN0Q0xFdEJRVXNzWjBKQlFVd3NRMEZCYzBJc1NVRkJkRUlzUlVGQk5FSXNVVUZCTlVJc1EwRkJMMElzU1VGQmQwVXNVVUZCZUVVc1NVRkJiMFlzUjBGQmNFWXNTVUZCTWtZc1MwRkJMMFlzUlVGQmMwYzdPMEZCUlhCSExGbEJRVWtzVVVGQlVTeGxRVUZTTEVsQlFUSkNMRkZCUVZFc2FVSkJRWFpETEVWQlFUQkVPMEZCUTNoRUxHTkJRVWtzVTBGQlV5eEpRVUZpT3p0QlFVVkJMR05CUVVrc1VVRkJVU3hsUVVGYUxFVkJRVFpDTzBGQlF6TkNMSEZDUVVGVExFTkJRVU1zUzBGQlN5eFJRVUZNTEVOQlFXTXNTMEZCU3l4blFrRkJUQ3hEUVVGelFpeEpRVUYwUWl4RlFVRTBRaXhSUVVFMVFpeERRVUZrTEVWQlFYRkVMRXRCUVhKRUxFTkJRVlk3UVVGRFJEczdRVUZGUkN4alFVRkpMRTFCUVVvc1JVRkJXU3hMUVVGTExHTkJRVXdzUTBGQmIwSXNVVUZCY0VJc1JVRkJPRUlzUjBGQk9VSXNSVUZCYlVNc1MwRkJia01zUlVGQk1FTXNTVUZCTVVNN1FVRkZZaXhUUVZSRUxFMUJVMDg3UVVGRFRDeGxRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFbEJRWFJDTEVWQlFUUkNMRkZCUVRWQ0xFVkJRWE5ETEVkQlFYUkRMRWxCUVRaRExFdEJRVGRETzBGQlEwUTdPMEZCUlVRc1pVRkJUeXhMUVVGTExHVkJRVXdzUTBGQmNVSXNSMEZCY2tJc1EwRkJlVUlzTWtKQlFYcENMRVZCUVhORUxFTkJRWFJFTEVWQlFYbEVMRXRCUVVzc1owSkJRVGxFTEVOQlFWQTdRVUZGUkR0QlFVTkdPenM3TkVKQlJVMHNVU3hGUVVGVkxFY3NSVUZCU3l4TExFVkJRVEJDTzBGQlFVRXNWVUZCYmtJc1ZVRkJiVUlzZFVWQlFVNHNTVUZCVFRzN08wRkJSVGxETEZWQlFVa3NUMEZCVHl4TFFVRkxMR2RDUVVGTUxFTkJRWE5DTEZWQlFYUkNMRU5CUVZnN08wRkJSVUVzVlVGQlNTeExRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFbEJRWFJDTEV0QlFTdENMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNTVUZCZEVJc1JVRkJORUlzVVVGQk5VSXNRMEZCTDBJc1NVRkJkMFVzVVVGQmVFVXNTVUZCYjBZc1IwRkJjRVlzU1VGQk1rWXNTMEZCTDBZc1JVRkJjMGM3TzBGQlJYQkhMRmxCUVVrc1VVRkJVU3hsUVVGU0xFbEJRVEpDTEZGQlFWRXNhVUpCUVhaRExFVkJRVEJFTzBGQlEzaEVMR1ZCUVVzc1owSkJRVXdzUTBGQmMwSXNVVUZCZEVJc1JVRkJaME1zUjBGQmFFTXNSVUZCY1VNc1MwRkJja01zUlVGQk5FTXNTVUZCTlVNN1FVRkRSQ3hUUVVaRUxFMUJSVTg3UVVGRFRDeHBRa0ZCVHl4TFFVRkxMR2RDUVVGTUxFTkJRWE5DTEVsQlFYUkNMRVZCUVRSQ0xGRkJRVFZDTEVWQlFYTkRMRWRCUVhSRExFTkJRVkE3UVVGRFJEczdRVUZGUkN4bFFVRlBMRXRCUVVzc1pVRkJUQ3hEUVVGeFFpeEhRVUZ5UWl4RFFVRjVRaXd5UWtGQmVrSXNSVUZCYzBRc1EwRkJkRVFzUlVGQmVVUXNTMEZCU3l4blFrRkJPVVFzUTBGQlVEdEJRVVZFTzBGQlJVWTdPMEZCUlVRN096czdPenM3YlVOQlNXVXNVU3hGUVVGVk8wRkJRVUU3TzBGQlEzWkNMRlZCUVVrc1VVRkJTaXhGUVVGak96dEJRVVZhTEdWQlFVOHNTMEZCU3l4TlFVRk1MRWRCUVdNc1NVRkJaQ3hEUVVGdFFpeFZRVUZETEdsQ1FVRkVMRVZCUVhWQ08wRkJReTlETEdOQlFVa3NUVUZCVFN4cFFrRkJWanM3UVVGRlFTeGpRVUZKTEVsQlFVa3NZMEZCU2l4RFFVRnRRaXhSUVVGdVFpeERRVUZLTEVWQlFXdERPMEZCUTJoRExHMUNRVUZQTEVsQlFVa3NVMEZCU2l4RFFVRmpMRkZCUVdRc1EwRkJVRHRCUVVOQkxHMUNRVUZQTEVsQlFVa3NVMEZCU2l4RFFVRmpMRkZCUVdRc1EwRkJVRHRCUVVOQkxHMUNRVUZQTEUxQlFVc3NaVUZCVEN4RFFVRnhRaXhIUVVGeVFpeERRVUY1UWl3eVFrRkJla0lzUlVGQmMwUXNRMEZCZEVRc1JVRkJlVVFzUjBGQmVrUXNRMEZCVUR0QlFVTkVPMEZCUTBZc1UwRlNUU3hEUVVGUU8wRkJWVVFzVDBGYVJDeE5RVmxQTzBGQlEwd3NZMEZCVFN4SlFVRkpMRXRCUVVvc1EwRkJWU3cyUTBGQk5rTXNVVUZCZGtRc1EwRkJUanRCUVVORU8wRkJSVVk3T3pzMlFrRkZVVHRCUVVOUUxHRkJRVThzUzBGQlN5eGxRVUZNTEVOQlFYRkNMRWRCUVhKQ0xFTkJRWGxDTERKQ1FVRjZRaXhEUVVGUU8wRkJRMFE3T3p0M1FrRkZSeXhSTEVWQlFWVTdRVUZEV2l4VlFVRkpMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNVVUZCZEVJc1EwRkJTaXhGUVVGeFF6dEJRVU51UXl4bFFVRlBMRXRCUVVzc1owSkJRVXdzUTBGQmMwSXNVVUZCZEVJc1EwRkJVRHRCUVVORUxFOUJSa1FzVFVGRlR6dEJRVU5NTEdOQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc01rTkJRVEpETEZGQlFYSkVMRU5CUVU0N1FVRkRSRHRCUVVOR096dEJRVVZFT3pzN096czdNa05CUjNWQ0xFY3NSVUZCU3l4VkxFVkJRVms3UVVGQlFUczdRVUZGZEVNc1lVRkJUeXh6UWtGQldTeFZRVUZETEU5QlFVUXNSVUZCWVRzN1FVRkZPVUlzV1VGQlNTeFBRVUZQTEU5QlFVc3NaMEpCUVV3c1EwRkJjMElzVlVGQmRFSXNRMEZCV0RzN1FVRkZRU3hsUVVGTExFMUJRVXdzUjBGQll5eEpRVUZrTEVOQlFXMUNMRlZCUVVNc2FVSkJRVVFzUlVGQmRVSTdPMEZCUlhoRExHTkJRVWtzUTBGQlF5eHBRa0ZCVEN4RlFVRjNRanRCUVVOMFFpeHZRa0ZCVVN4SFFVRlNMRU5CUVZrc2FVTkJRVm83UVVGRFFTeHRRa0ZCVHl4UlFVRlJMRWxCUVZJc1EwRkJVRHRCUVVORU96dEJRVVZFTEdOQlFVa3NTVUZCU1N4SlFVRktMRWxCUVZrc1NVRkJTU3hKUVVGS0xFTkJRVk1zWTBGQlZDeERRVUYzUWl4UlFVRjRRaXhEUVVGYUxFbEJRV2xFTEVOQlFVTXNTVUZCU1N4SlFVRktMRU5CUVZNc1RVRkJMMFFzUlVGQmRVVTdRVUZEY2tVc2JVSkJRVThzVVVGQlVTeEpRVUZTTEVOQlFWQTdRVUZEUkRzN1FVRkZSRHRCUVVOQk8wRkJRMEVzWTBGQlNTeFRRVUZUTEVWQlFXSTdRVUZEUVN4alFVRkpMR3RDUVVGclFpeFBRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xHdENRVUZyUWl4SlFVRnNRaXhEUVVGMFFpeEZRVUVyUXl4SlFVRkpMRWxCUVc1RUxFTkJRWFJDTzBGQlEwRXNZMEZCU1N4VlFVRlZMRTlCUVVzc1dVRkJUQ3hEUVVGclFpeHJRa0ZCYTBJc1NVRkJiRUlzUTBGQmJFSXNSVUZCTWtNc1NVRkJTU3hKUVVFdlF5eERRVUZrT3p0QlFVVkJMR05CUVVrc1NVRkJTU3hqUVVGS0xFTkJRVzFDTEUxQlFXNUNMRXRCUVRoQ0xHVkJRVGxDTEVsQlFXbEVMRTlCUVhKRUxFVkJRVGhFTzBGQlF6VkVMR2RDUVVGSkxGZEJRVmNzVDBGQlN5d3lRa0ZCVEN4RFFVRnBReXhyUWtGQmEwSXNTVUZCYkVJc1EwRkJha01zUlVGQk1FUXNTVUZCU1N4SlFVRTVSQ3hEUVVGbU96dEJRVVZCTEdkQ1FVRkpMRzlDUVVGdlFpeEZRVUY0UWp0QlFVTkJMR2RDUVVGSkxFbEJRVWtzU1VGQlNpeEpRVUZaTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVhwQ0xFVkJRVzFETEc5Q1FVRnZRaXhQUVVGTExIVkNRVUZNTEVOQlFUWkNMR3RDUVVGclFpeEpRVUZzUWl4RFFVRTNRaXhGUVVGelJDeEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRXZSQ3hEUVVGd1FqczdRVUZGYmtNc1owSkJRVWtzYTBKQlFXdENMRVZCUVhSQ08wRkJRMEVzWjBKQlFVa3NTVUZCU1N4SlFVRktMRWxCUVZrc1NVRkJTU3hKUVVGS0xFTkJRVk1zVFVGQmVrSXNSVUZCYVVNc2EwSkJRV3RDTEU5QlFVc3NjVUpCUVV3c1EwRkJNa0lzYTBKQlFXdENMRWxCUVd4Q0xFTkJRVE5DTEVWQlFXOUVMRWxCUVVrc1NVRkJTaXhEUVVGVExFMUJRVGRFTEVOQlFXeENPenRCUVVWcVF5eG5Ra0ZCU1N4WlFVRlpMRVZCUVdoQ08wRkJRMEVzWjBKQlFVa3NTVUZCU1N4SlFVRktMRWxCUVZrc1NVRkJTU3hKUVVGS0xFTkJRVk1zUzBGQmVrSXNSVUZCWjBNc1dVRkJXU3hQUVVGTExHMUNRVUZNTEVOQlFYbENMR3RDUVVGclFpeEpRVUZzUWl4RFFVRjZRaXhGUVVGclJDeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRXpSQ3hEUVVGYU96dEJRVVZvUXp0QlFVTkJPMEZCUTBFc2NVSkJRVk1zVDBGQlN5eGhRVUZNTEVOQlFXMUNMRkZCUVc1Q0xFVkJRVFpDTEdsQ1FVRTNRaXhGUVVGblJDeGxRVUZvUkN4RlFVRnBSU3hUUVVGcVJTeERRVUZVTzBGQlEwUXNWMEZtUkN4TlFXVlBPMEZCUTB3c2JVSkJRVThzVVVGQlVTeEpRVUZTTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hqUVVGSkxFOUJRVThzUlVGQldEdEJRVU5CTEdsQ1FVRlBMRTlCUVZBc1EwRkJaU3hWUVVGRExFZEJRVVFzUlVGQlV6dEJRVU4wUWl4blFrRkJTU3h2UWtGQmIwSXNhMEpCUVd0Q0xFbEJRV3hDTEVWQlFYZENMRWRCUVhoQ0xFTkJRWGhDTzBGQlEwRXNhVUpCUVVzc1IwRkJUQ3hKUVVGWkxHbENRVUZhTzBGQlEwRXNiVUpCUVU4c1NVRkJVRHRCUVVORUxGZEJTa1E3TzBGQlRVRXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxIbENRVUZhTEVWQlFYVkRMRWxCUVhaRE96dEJRVVZCTEd0Q1FVRlJMRWxCUVZJN1FVRkRSQ3hUUVRsRFJEdEJRV2RFUkN4UFFYQkVUU3hEUVVGUU8wRkJjMFJFT3pzN05FTkJSWFZDTEZVc1JVRkJXU3hQTEVWQlFWTTdRVUZETTBNc1ZVRkJTU3hEUVVGRExGVkJRVXdzUlVGQmFVSXNUMEZCVHl4RlFVRlFPenRCUVVWcVFpeGhRVUZQTEc5Q1FVRlpMRlZCUVZvc1JVRkJkMElzVFVGQmVFSXNRMEZCSzBJc1ZVRkJReXhUUVVGRUxFVkJRV1U3UVVGRGJrUXNaVUZCVHl4WFFVRlhMRk5CUVZnc1JVRkJjMElzWlVGQmRFSXNRMEZCYzBNc1RVRkJkRU1zUTBGQk5rTXNWVUZCUXl4UFFVRkVMRVZCUVdFN1FVRkRMMFFzYVVKQlFVOHNXVUZCV1N4UFFVRnVRanRCUVVORUxGTkJSazBzUlVGRlNpeE5RVVpJTzBGQlIwUXNUMEZLVFN4RFFVRlFPMEZCUzBRN096dG5SRUZGTWtJc1ZTeEZRVUZaTEZrc1JVRkJZenRCUVVOd1JDeFZRVUZKTEVOQlFVTXNWVUZCVEN4RlFVRnBRaXhQUVVGUExFVkJRVkE3TzBGQlJXcENMR0ZCUVU4c2IwSkJRVmtzVlVGQldpeEZRVUYzUWl4TlFVRjRRaXhEUVVFclFpeFZRVUZETEZOQlFVUXNSVUZCWlR0QlFVTnVSQ3hsUVVGUExGZEJRVmNzVTBGQldDeEZRVUZ6UWl4aFFVRjBRaXhEUVVGdlF5eE5RVUZ3UXl4RFFVRXlReXhWUVVGRExFOUJRVVFzUlVGQllUdEJRVU0zUkN4cFFrRkJUeXhaUVVGWkxGbEJRVzVDTzBGQlEwUXNVMEZHVFN4RlFVVktMRTFCUmtnN1FVRkhSQ3hQUVVwTkxFTkJRVkE3UVVGTlJEczdPekJEUVVWeFFpeFZMRVZCUVZrc1RTeEZRVUZSTzBGQlEzaERMR0ZCUVU4c2IwSkJRVmtzVlVGQldpeEZRVUYzUWl4TlFVRjRRaXhEUVVFclFpeFZRVUZETEZOQlFVUXNSVUZCWlR0QlFVTnVSQ3haUVVGSkxHZENRVUZuUWl4WFFVRlhMRk5CUVZnc1EwRkJjRUk3UVVGRFFTeGxRVUZQTEc5Q1FVRlpMR0ZCUVZvc1JVRkJNa0lzVFVGQk0wSXNRMEZCYTBNc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRGFFUXNhVUpCUVU4c1VVRkJVU3hSUVVGU0xFbEJRVzlDTEdOQlFXTXNSMEZCWkN4TlFVRjFRaXhOUVVGc1JEdEJRVU5FTEZOQlJrMHNSVUZGU2l4TlFVWklPMEZCUjBRc1QwRk1UU3hEUVVGUU8wRkJUVVE3T3p0M1EwRkZiVUlzVlN4RlFVRlpMRWtzUlVGQlRUdEJRVU53UXl4VlFVRkpMRU5CUVVNc1NVRkJUQ3hGUVVGWExFOUJRVThzUlVGQlVEczdRVUZGV0N4aFFVRlBMRzlDUVVGWkxGVkJRVm9zUlVGQmQwSXNUVUZCZUVJc1EwRkJLMElzVlVGQlF5eFRRVUZFTEVWQlFXVTdRVUZEYmtRc1dVRkJTU3huUWtGQlowSXNWMEZCVnl4VFFVRllMRVZCUVhOQ0xFbEJRVEZETzBGQlEwRXNaVUZCVHl4dlFrRkJXU3hoUVVGYUxFVkJRVEpDTEUxQlFUTkNMRU5CUVd0RExGVkJRVU1zUjBGQlJDeEZRVUZUTzBGQlEyaEVPMEZCUTBFc2FVSkJRVThzYjBKQlFWa3NTVUZCV2l4RlFVRnJRaXhOUVVGc1FpeERRVUY1UWl4eFFrRkJZVHRCUVVNelF5eHRRa0ZCVHl4UlFVRlJMRk5CUVZJc1NVRkJjVUlzWTBGQll5eEhRVUZrTEUxQlFYVkNMRXRCUVVzc1UwRkJUQ3hEUVVGdVJEdEJRVU5FTEZkQlJrMHNSVUZGU2l4TlFVWklPMEZCU1VRc1UwRk9UU3hGUVUxS0xFMUJUa2c3UVVGUFJDeFBRVlJOTEVOQlFWQTdRVUZWUkRzN08zRkRRVVZuUWl4VkxFVkJRVmtzV1N4RlFVRmpPMEZCUTNwRExGVkJRVWtzUTBGQlF5eFZRVUZNTEVWQlFXbENMRTlCUVU4c1MwRkJVRHM3UVVGRmFrSXNZVUZCVHl4dlFrRkJXU3hWUVVGYUxFVkJRWGRDTEUxQlFYaENMRU5CUVN0Q0xGVkJRVU1zVTBGQlJDeEZRVUZsTzBGQlEyNUVMR1ZCUVU4c1YwRkJWeXhUUVVGWUxFVkJRWE5DTEdGQlFYUkNMRU5CUVc5RExFMUJRWEJETEVOQlFUSkRMRlZCUVVNc1QwRkJSQ3hGUVVGaE8wRkJRemRFTEdsQ1FVRlBMRmxCUVZrc1dVRkJia0k3UVVGRFJDeFRRVVpOTEVWQlJVb3NUVUZHU0R0QlFVZEVMRTlCU2swc1JVRkpTaXhOUVVwSkxFZEJTVXNzUTBGS1RDeEhRVWxUTEVsQlNsUXNSMEZKWjBJc1MwRktka0k3UVVGTFJEczdPMmxEUVVWWkxGVXNSVUZCV1N4SkxFVkJRVTA3UVVGRE4wSXNWVUZCU1N4RFFVRkRMRlZCUVV3c1JVRkJhVUlzVDBGQlR5eExRVUZRT3p0QlFVVnFRaXhoUVVGUExHOUNRVUZaTEZWQlFWb3NSVUZCZDBJc1RVRkJlRUlzUTBGQkswSXNWVUZCUXl4VFFVRkVMRVZCUVdVN1FVRkRia1FzWlVGQlR5eFhRVUZYTEZOQlFWZ3NSVUZCYzBJc1MwRkJkRUlzUzBGQlowTXNTVUZCZGtNN1FVRkRSQ3hQUVVaTkxFVkJSVW9zVFVGR1NTeEhRVVZMTEVOQlJrd3NSMEZGVXl4SlFVWlVMRWRCUldkQ0xFdEJSblpDTzBGQlIwUTdPenMyUWtGRlVTeExMRVZCUVU4c1J5eEZRVUZMTzBGQlEyNUNMRlZCUVVrc1EwRkJReXhMUVVGTUxFVkJRVmtzVDBGQlR5eExRVUZRTzBGQlExb3NZVUZCVHl4TlFVRk5MRXRCUVU0c1MwRkJaMElzUjBGQmFFSXNSMEZCYzBJc1NVRkJkRUlzUjBGQk5rSXNTMEZCY0VNN1FVRkRSRHM3TzI5RFFVVmxPMEZCUTJRc1ZVRkJTU3hQUVVGUExHOUNRVUZYTEZOQlFWZ3NRMEZCV0RzN1FVRkZRU3hWUVVGSkxGTkJRVk1zUzBGQlN5eE5RVUZNTEVOQlFWa3NWVUZCUXl4TFFVRkVMRVZCUVZFc1RVRkJVaXhGUVVGdFFqdEJRVU14UXl4bFFVRlBMRTFCUVUwc1RVRkJUaXhEUVVGaExFMUJRV0lzUTBGQlVEdEJRVU5FTEU5QlJsa3NSVUZGVml4TlFVWlZMRU5CUlVnc1ZVRkJReXhMUVVGRUxFVkJRVkVzUzBGQlVpeEZRVUZsTEVsQlFXWXNSVUZCZDBJN1FVRkRhRU1zWlVGQlR5eExRVUZMTEU5QlFVd3NRMEZCWVN4TFFVRmlMRTFCUVhkQ0xFdEJRUzlDTzBGQlEwUXNUMEZLV1N4RFFVRmlPMEZCUzBFc1kwRkJVU3hIUVVGU0xFTkJRVmtzY1VOQlFWb3NSVUZCYlVRc1RVRkJia1E3UVVGRFFTeGhRVUZQTEUxQlFWQTdRVUZEUkRzN08yMURRVVZqTEZFc1JVRkJWU3hITEVWQlFVc3NTeXhGUVVGUExFa3NSVUZCVFR0QlFVTjZReXhWUVVGSkxFdEJRVXNzWjBKQlFVd3NRMEZCYzBJc1NVRkJkRUlzUlVGQk5FSXNVVUZCTlVJc1JVRkJjME1zUjBGQmRFTXNSVUZCTWtNc1QwRkJNME1zUTBGQmJVUXNTMEZCYmtRc1EwRkJTaXhGUVVFclJDeExRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFbEJRWFJDTEVWQlFUUkNMRkZCUVRWQ0xFVkJRWE5ETEVkQlFYUkRMRVZCUVRKRExFbEJRVE5ETEVOQlFXZEVMRXRCUVdoRU8wRkJRMmhGT3pzN2NVTkJSV2RDTEZFc1JVRkJWU3hITEVWQlFVc3NTeXhGUVVGUExFa3NSVUZCVFR0QlFVTXpReXhWUVVGSkxHVkJRV1VzUzBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhKUVVGMFFpeEZRVUUwUWl4UlFVRTFRaXhGUVVGelF5eEhRVUYwUXl4RlFVRXlReXhQUVVFelF5eERRVUZ0UkN4TFFVRnVSQ3hEUVVGdVFqdEJRVU5CTEZWQlFVa3NXVUZCU2l4RlFVRnJRaXhMUVVGTExHZENRVUZNTEVOQlFYTkNMRWxCUVhSQ0xFVkJRVFJDTEZGQlFUVkNMRVZCUVhORExFZEJRWFJETEVWQlFUSkRMRTFCUVRORExFTkJRV3RFTEZsQlFXeEVMRVZCUVdkRkxFTkJRV2hGTzBGQlEyNUNPenM3T0VKQlJWTXNSeXhGUVVGTExFY3NSVUZCU3l4TExFVkJRVTg3UVVGRGVrSXNZVUZCVHl4SlFVRkpMR05CUVVvc1EwRkJiVUlzUjBGQmJrSXNTMEZCTWtJc1NVRkJTU3hIUVVGS0xFMUJRV0VzUzBGQkwwTTdRVUZEUkRzN08zRkRRVVZuUWl4VkxFVkJRVms3UVVGRE0wSXNZVUZCVHl4aFFVRmhMRmRCUVdJc1IwRkJNa0lzVjBGQmJFTTdRVUZEUkRzN096czdhMEpCU1Zrc1owSTdPenM3T3pzN096czdPenM3T3pzN096czdPMGxEZUZOVUxGazdRVUZGU2l4M1FrRkJXU3hIUVVGYUxFVkJRV2xDTEV0QlFXcENMRVZCUVhkQ0xFZEJRWGhDTEVWQlFUWkNMRk5CUVRkQ0xFVkJRWGRETEZWQlFYaERMRVZCUVc5RU8wRkJRVUU3TzBGQlEyeEVMRkZCUVVrc1VVRkJVU3hKUVVGYU8wRkJRMEVzVVVGQlNTeGxRVUZsTEUxQlFVMHNXVUZCZWtJN1FVRkRRU3hSUVVGSkxGbEJRVmtzVFVGQlRTeFZRVUYwUWpzN1FVRkZRVHRCUVVOQkxGVkJRVTBzWlVGQlRpeEhRVUYzUWl4SlFVRkpMRmRCUVVvc1EwRkJaMElzVTBGQmFFSXNSVUZCTWtJc1ZVRkJReXhIUVVGRUxFVkJRVk03UVVGRE1VUXNWVUZCU1N4SlFVRkpMRWxCUVVvc1MwRkJZU3hSUVVGcVFpeEZRVUV5UWp0QlFVTjZRaXhuUWtGQlVTeEhRVUZTTEVOQlFWa3NkVUpCUVZvc1JVRkJjVU1zUjBGQmNrTTdPMEZCUlVFN1FVRkRRU3haUVVGSkxIbENRVUY1UWp0QlFVTXpRaXhuUWtGQlRTeFJRVVJ4UWl4RlFVTllMRTFCUVUwc1NVRkJTU3hKUVVSRExFVkJRMHNzU1VGQlNTeExRVVJVTzBGQlJUTkNMR2RDUVVGTkxFVkJRVVVzVlVGQlZTeEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRnlRaXhGUVVFclFpeFZRVUZWTEVkQlFYcERPMEZCUm5GQ0xGTkJRVGRDT3p0QlFVdEJPMEZCUTBFc1dVRkJTU3hYUVVGS0xFTkJRV2RDTEhOQ1FVRm9RaXhGUVVGM1F5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTnFSQ3hyUWtGQlVTeEhRVUZTTEVOQlFWa3NOa0pCUVZvc1JVRkJNa01zUzBGQk0wTTdRVUZEUVN4alFVRkpMRTFCUVUwc1NVRkJUaXhEUVVGWExFbEJRVmdzUzBGQmIwSXNSMEZCZUVJc1JVRkJOa0k3UVVGRE0wSXNhMEpCUVUwc2FVSkJRVTQ3UVVGRFJEdEJRVU5HTEZOQlRFUTdRVUZOUkR0QlFVTkdMRXRCYkVKMVFpeERRVUY0UWpzN1FVRnZRa0U3UVVGRFFTeFJRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRaQ3haUVVGTkxHVkJRVTRzUjBGQmQwSXNTVUZCU1N4VlFVRktMRU5CUVdVc1UwRkJaaXhEUVVGNFFqdEJRVU5FTEV0QlJrUXNUVUZGVHp0QlFVTk1MRmxCUVUwc1pVRkJUaXhIUVVGM1FpeEpRVUZKTEZWQlFVb3NRMEZCWlN4VFFVRm1MRVZCUVRCQ0xFdEJRVEZDTEVOQlFYaENPMEZCUTBRN08wRkJSVVFzVlVGQlRTeHJRa0ZCVGl4SFFVRXlRaXhGUVVFelFqdEJRVU5CTEdOQlFWVXNUMEZCVml4RFFVRnJRaXhWUVVGRExFdEJRVVFzUlVGQlZ6dEJRVU16UWl4VlFVRkpMRlZCUVZVc1pVRkJaU3hMUVVFM1FqczdRVUZGUVR0QlFVTkJMRlZCUVVrc2EwSkJRV3RDTEVsQlFVa3NWVUZCU2l4RFFVRmxMRTlCUVdZc1EwRkJkRUk3UVVGRFFTeFpRVUZOTEd0Q1FVRk9MRU5CUVhsQ0xFbEJRWHBDTEVOQlFUaENMR1ZCUVRsQ096dEJRVVZCTzBGQlEwRXNWVUZCU1N4RFFVRkRMRlZCUVV3c1JVRkJhVUk3UVVGRFppeFpRVUZKTEdOQlFXTXNTVUZCU1N4VlFVRktMRU5CUVdVc1QwRkJaaXhGUVVGM1FpeExRVUY0UWl4RFFVRnNRanRCUVVOQkxHTkJRVTBzYTBKQlFVNHNRMEZCZVVJc1NVRkJla0lzUTBGQk9FSXNWMEZCT1VJN1FVRkRSRHRCUVVOR0xFdEJXa1E3UVVGaFJEczdPenQzUTBGRmJVSTdRVUZEYkVJc1ZVRkJTU3hSUVVGUkxFbEJRVm83TzBGQlJVRXNXVUZCVFN4bFFVRk9MRU5CUVhOQ0xFMUJRWFJDT3p0QlFVVkJMRmxCUVUwc1pVRkJUaXhEUVVGelFpeE5RVUYwUWpzN1FVRkZRU3haUVVGTkxHdENRVUZPTEVOQlFYbENMRTlCUVhwQ0xFTkJRV2xETEZWQlFVTXNUMEZCUkN4RlFVRmhPMEZCUXpWRExHZENRVUZSTEUxQlFWSTdRVUZEUkN4UFFVWkVPMEZCUjBRN096czdPMnRDUVVsWkxGazdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVNelEyWTdPMEZCUTBFN08wRkJSVUU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlJVRTdPMEZCUlVFN096czdPenRCUVVWQk96czdPMGxCU1Uwc1l6dEJRVU5LT3pzN096czdPenM3UVVGVlFTd3dRa0ZCV1N4VlFVRmFMRVZCUVhkQ0xFZEJRWGhDTEVWQlFUWkNMRkZCUVRkQ0xFVkJRWFZETEU5QlFYWkRMRVZCUVdkRUxHTkJRV2hFTEVWQlFXZEZMRk5CUVdoRkxFVkJRVEpGTzBGQlFVRTdPMEZCUTNwRkxGRkJRVWtzUTBGQlF5eFZRVUZNTEVWQlFXbENMRTFCUVUwc1NVRkJTU3hMUVVGS0xFTkJRVlVzYjBSQlFWWXNRMEZCVGp0QlFVTnFRaXhSUVVGSkxFTkJRVU1zUjBGQlRDeEZRVUZWTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc2JVUkJRVllzUTBGQlRqdEJRVU5XTEZGQlFVa3NRMEZCUXl4UlFVRk1MRVZCUVdVc1RVRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeHBSRUZCVml4RFFVRk9PMEZCUTJZc1VVRkJTU3hEUVVGRExFOUJRVXdzUlVGQll5eE5RVUZOTEVsQlFVa3NTMEZCU2l4RFFVRlZMSGxFUVVGV0xFTkJRVTQ3UVVGRFpDeFJRVUZKTEVOQlFVTXNZMEZCVEN4RlFVRnhRaXhOUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTEhORVFVRldMRU5CUVU0N08wRkJSWEpDTEZGQlFVa3NVVUZCVVN4SlFVRmFPenRCUVVWQkxGVkJRVTBzU1VGQlRpeEhRVUZoTEVkQlFXSTdRVUZEUVN4VlFVRk5MRk5CUVU0c1IwRkJhMElzVVVGQmJFSTdRVUZEUVN4VlFVRk5MRkZCUVU0c1IwRkJhVUlzVDBGQmFrSTdRVUZEUVN4VlFVRk5MR1ZCUVU0c1IwRkJkMElzWTBGQmVFSTdPMEZCUlVFN1FVRkRRU3hWUVVGTkxFbEJRVTRzUjBGQllTeGhRVUZoTEV0QlFURkNPMEZCUTBFc1ZVRkJUU3hWUVVGT0xFZEJRVzFDTEdGQlFXRXNiMEpCUVdoRE96dEJRVVZCTEZWQlFVMHNWVUZCVGl4SFFVRnRRaXhGUVVGdVFqdEJRVU5CTEZWQlFVMHNWVUZCVGl4SFFVRnRRaXhGUVVGdVFqczdRVUZGUVN4VlFVRk5MR2xDUVVGT0xFZEJRVEJDTEN0Q1FVRnhRaXhqUVVGeVFpeERRVUV4UWpzN1FVRkZRVHRCUVVOQkxGVkJRVTBzVDBGQlRpeEhRVUZuUWl4elFrRkJWU3hWUVVGV0xFVkJRWE5DTEUxQlFYUkRPenRCUVVWQkxGVkJRVTBzUjBGQlRpeEhRVUZaTEcxRFFVRnRRaXhMUVVGdVFpeEZRVUV3UWl4RlFVRXhRaXhEUVVGYU96dEJRVVZCTEZGQlFVa3NVMEZCU2l4RlFVRmxPMEZCUTJJc1dVRkJUU3hWUVVGT0xFZEJRVzFDTEZOQlFXNUNPMEZCUTBRc1MwRkdSQ3hOUVVWUE8wRkJRMHdzV1VGQlRTeFZRVUZPTEVkQlFXMUNMR2REUVVGelFpeE5RVUZOTEZWQlFUVkNMRVZCUVhkRExFZEJRWGhETEVWQlFUWkRMRTFCUVUwc1UwRkJia1FzUTBGQmJrSTdRVUZEUkRzN1FVRkZSQ3hSUVVGSkxGZEJRVW9zUTBGQlowSXNUVUZCVFN4SlFVRjBRaXhGUVVFMFFpeFZRVUZETEVkQlFVUXNSVUZCVXp0QlFVTnVReXhqUVVGUkxFZEJRVklzUTBGQldTeHpRa0ZCV2l4RlFVRnZReXhIUVVGd1F6dEJRVU5CTEdOQlFWRXNTVUZCU1N4SlFVRmFPMEZCUTBVc1lVRkJTeXhSUVVGTU8wRkJRV1VzWjBKQlFVMHNVMEZCVGl4RFFVRm5RaXhIUVVGb1FpeEZRVUZ6UWp0QlFVTnlReXhoUVVGTExGRkJRVXc3UVVGQlpTeG5Ra0ZCVFN4VFFVRk9MRU5CUVdkQ0xFZEJRV2hDTEVWQlFYTkNPMEZCUTNKRExHRkJRVXNzVjBGQlREdEJRVUZyUWl4blFrRkJUU3hwUWtGQlRpeERRVUYzUWl4SFFVRjRRaXhGUVVFNFFqdEJRVU5vUkN4aFFVRkxMR0ZCUVV3N1FVRkJiMElzWjBKQlFVMHNiVUpCUVU0c1EwRkJNRUlzUjBGQk1VSXNSVUZCWjBNN1FVRktkRVE3UVVGTlJDeExRVkpFTzBGQlZVUTdPenM3T3p0QlFVbEVPemhDUVVOVkxFY3NSVUZCU3p0QlFVRkJPenRCUVVWaUxGVkJRVWtzU1VGQlNTeEpRVUZLTEVOQlFWTXNZMEZCVkN4RFFVRjNRaXhSUVVGNFFpeExRVUZ4UXl4RFFVRkRMRWxCUVVrc1NVRkJTaXhEUVVGVExFMUJRVzVFTEVWQlFUSkVPMEZCUTNwRUxHZENRVUZSTEVsQlFWSXNRMEZCWVN4elEwRkJZaXhGUVVGeFJDeEhRVUZ5UkR0QlFVTkJMR0ZCUVVzc1ZVRkJUQ3hEUVVGblFpeEhRVUZvUWp0QlFVTkVMRTlCU0VRc1RVRkhUenRCUVVOTUxHRkJRVXNzYVVKQlFVd3NRMEZCZFVJc2MwSkJRWFpDTEVOQlFUaERMRWRCUVRsRExFVkJRVzFFTEVsQlFXNUVMRVZCUVhsRUxFbEJRWHBFTEVOQlFUaEVMRlZCUVVNc1RVRkJSQ3hGUVVGWk96dEJRVVY0UlN4clFrRkJVU3hKUVVGU0xFTkJRV0VzTUVOQlFXSXNSVUZCZVVRc1IwRkJla1E3TzBGQlJVRXNZMEZCU1N4VlFVRlZMRzlDUVVGWkxFMUJRVm9zUlVGQmIwSXNUVUZCY0VJc1IwRkJOa0lzUTBGQk0wTXNSVUZCT0VNN08wRkJSVFZETzBGQlEwRXNaME5CUVZrc1RVRkJXaXhGUVVGdlFpeFBRVUZ3UWl4RFFVRTBRaXhWUVVGRExFMUJRVVFzUlVGQldUdEJRVU4wUXl4eFFrRkJTeXhoUVVGTUxFTkJRVzFDTEVkQlFXNUNMRVZCUVhkQ0xFOUJRVThzVFVGQlVDeERRVUY0UWp0QlFVTkVMR0ZCUmtRN1FVRkpSQ3hYUVZCRUxFMUJUMDg3UVVGRFREdEJRVU5CTEdkQ1FVRkpMRkZCUVZFc1JVRkJXanRCUVVOQkxHdENRVUZOTEVWQlFVNHNSMEZCVnl4SlFVRkpMRVZCUVdZN1FVRkRRU3hyUWtGQlRTeEpRVUZPTEVkQlFXRXNTVUZCU1N4RlFVRnFRanRCUVVOQkxHdENRVUZOTEVWQlFVNHNSMEZCVnl4SlFVRkpMRWxCUVdZN1FVRkRRU3hyUWtGQlRTeEpRVUZPTEVkQlFXRXNWVUZCWWp0QlFVTkJMR3RDUVVGTkxFbEJRVTRzUjBGQllUdEJRVU5ZTEc5Q1FVRk5MRWRCUkVzN1FVRkZXQ3h2UWtGQlRUdEJRVVpMTEdGQlFXSTdRVUZKUVN4dFFrRkJTeXhKUVVGTUxFTkJRVlVzVjBGQlZpeERRVUZ6UWl4TFFVRjBRanRCUVVORU8wRkJSVVlzVTBGNlFrUTdRVUV3UWtRN1FVRkZSanM3T3l0Q1FVVlZMRWNzUlVGQlN6dEJRVUZCT3p0QlFVTmtMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NVVUZCVVN4SlFVRkpMRWxCUVdoQ08wRkJRMEVzVlVGQlNTeFRRVUZUTEhOQ1FVRlZMRWxCUVVrc1NVRkJaQ3hGUVVGdlFpeE5RVUZxUXpzN1FVRkZRU3hWUVVGSkxFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFXSXNSVUZCZFVJN1FVRkRja0lzWTBGQlRTeFZRVUZPTEVOQlFXbENMRWRCUVdwQ0xFVkJRWE5DTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVM5Q08wRkJRMEU3UVVGRFJEczdRVUZGUkR0QlFVTkJMRmxCUVUwc1VVRkJUaXhEUVVGbExIVkNRVUZtTEVOQlFYVkRMRWxCUVVrc1NVRkJTaXhEUVVGVExFMUJRV2hFTEVWQlFYZEVMRWxCUVhoRUxFTkJRVFpFTEZWQlFVTXNWVUZCUkN4RlFVRm5RanM3UVVGRk0wVXNXVUZCU1N4aFFVRmhMRmRCUVZjc1lVRkJXQ3hEUVVGNVFpeFZRVUY2UWl4RFFVRnZReXhWUVVGeVJEdEJRVU5CTEZsQlFVa3NVMEZCVXl4WFFVRlhMRTFCUVZnc1IwRkJiMElzVjBGQlZ5eE5RVUZZTEVOQlFXdENMRkZCUVhSRExFZEJRV2xFTEZWQlFUbEVPMEZCUTBFc1dVRkJTU3haUVVGWkxGZEJRVmNzVVVGQldDeEhRVUZ6UWl4WFFVRlhMRkZCUVZnc1EwRkJiMElzVVVGQk1VTXNSMEZCY1VRc1JVRkJja1U3TzBGQlJVRTdRVUZEUVR0QlFVTkJMR2RFUVVGcFFpeE5RVUZxUWl4RlFVRjVRaXhWUVVGNlFpeEZRVUZ4UXl4SlFVRkpMRWxCUVVvc1EwRkJVeXhMUVVFNVF6czdRVUZGUVN4WlFVRkpMR0ZCUVdFN1FVRkRaaXhuUWtGQlRTeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRlVMRU5CUVdVc1NVRkVUanRCUVVWbUxHdENRVUZSTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVZRc1EwRkJaU3hOUVVaU08wRkJSMllzYjBKQlFWVXNTVUZCU1N4SlFVRktMRU5CUVZNc1MwRkJWQ3hEUVVGbExGRkJTRlk3UVVGSlppeHhRa0ZCVnl4SlFVRkpMRWxCUVVvc1EwRkJVeXhMUVVGVUxFTkJRV1U3UVVGS1dDeFRRVUZxUWpzN1FVRlBRVHRCUVVOQkxGbEJRVWtzYTBKQlFXdENMRWxCUVVrc1NVRkJTaXhEUVVGVExFdEJRVlFzUTBGQlpTeFJRVUZ5UXpzN1FVRkZRVHRCUVVOQkxHTkJRVTBzVlVGQlRpeERRVUZwUWl4TlFVRnFRaXhEUVVGM1FpeE5RVUY0UWl4RlFVRm5ReXhEUVVGb1F5eEZRVUZ0UXl4VlFVRnVReXhGUVVFclF5eE5RVUV2UXl4RlFVRjFSQ3hsUVVGMlJDeEZRVUYzUlN4SlFVRjRSU3hEUVVFMlJTeFZRVUZETEZOQlFVUXNSVUZCWlR0QlFVTXhSaXhqUVVGSkxGTkJRVk1zVlVGQlZTeFBRVUZXTEVOQlFXdENMRU5CUVd4Q0xFTkJRV0k3TzBGQlJVRXNhMEpCUVZFc1IwRkJVaXhEUVVGWkxHMUNRVUZhTEVWQlFXbERMRk5CUVdwRE96dEJRVVZCTEdOQlFVa3NhMEpCUVd0Q0xGTkJRVk1zWlVGQkwwSTdPMEZCUlVFc2EwSkJRVkVzUjBGQlVpeERRVUZaTEd0Q1FVRmFMRVZCUVdkRExHVkJRV2hET3p0QlFVVkJPMEZCUTBFc2EwSkJRVkVzU1VGQlVpeERRVUZoTEcxQ1FVRmlMRVZCUVd0RExFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFWUXNRMEZCWlN4SlFVRnFSQ3hGUVVGMVJDeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRlVMRU5CUVdVc1RVRkJkRVVzUlVGQk9FVXNUVUZCT1VVc1JVRkJjMFlzU1VGQlNTeEpRVUZLTEVOQlFWTXNTMEZCVkN4RFFVRmxMRkZCUVhKSExFVkJRU3RITEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVZRc1EwRkJaU3hUUVVFNVNEdEJRVU5CTEdkQ1FVRk5MRk5CUVU0c1EwRkJaMElzYTBKQlFXaENMRU5CUVcxRExFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFWUXNRMEZCWlN4SlFVRnNSQ3hGUVVGM1JDeEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRlVMRU5CUVdVc1RVRkJka1VzUlVGQkswVXNUVUZCTDBVc1JVRkJkVVlzU1VGQlNTeEpRVUZLTEVOQlFWTXNTMEZCVkN4RFFVRmxMRkZCUVhSSExFVkJRV2RJTEVsQlFVa3NTVUZCU2l4RFFVRlRMRXRCUVZRc1EwRkJaU3hUUVVFdlNDeEZRVUV3U1N4VFFVRXhTU3hGUVVGeFNpeEpRVUZKTEVsQlFVb3NRMEZCVXl4VFFVRTVTaXhGUVVGNVN5eEpRVUY2U3l4RFFVRTRTeXhWUVVGRExFOUJRVVFzUlVGQllUdEJRVU42VEN4dlFrRkJVU3hIUVVGU0xFTkJRVmtzYjBOQlFWb3NSVUZCYTBRc1QwRkJiRVE3TzBGQlJVRTdRVUZEUVN4blFrRkJTU3hwUWtGQlNqczdRVUZGUVN4blFrRkJTU3hEUVVGRExFOUJRVXNzVlVGQlRDeERRVUZuUWl4TlFVRm9RaXhEUVVGTUxFVkJRVGhDTzBGQlF6VkNMSGxDUVVGWExEWkNRVUZ0UWl4TFFVRnVRaXhGUVVFd1FpeExRVUV4UWl4RlFVRnBReXhOUVVGcVF5eERRVUZZTzBGQlEwUXNZVUZHUkN4TlFVVlBPMEZCUTB3c2VVSkJRVmNzVDBGQlN5eFZRVUZNTEVOQlFXZENMRTFCUVdoQ0xFTkJRVmc3UVVGRFJEczdRVUZGUkN4dlFrRkJVU3hIUVVGU0xFTkJRVmtzYTBOQlFWb3NSVUZCWjBRc1IwRkJhRVE3TzBGQlJVRXNaMEpCUVVrc1NVRkJTU3hKUVVGS0xFTkJRVk1zWTBGQlZDeERRVUYzUWl4UFFVRjRRaXhMUVVGdlF5eEpRVUZKTEVsQlFVb3NRMEZCVXl4TFFVRnFSQ3hGUVVGM1JEdEJRVU4wUkR0QlFVTkJMR3RDUVVGSkxHZENRVUZLTzBGQlEwRXNhMEpCUVVrc1NVRkJTU3hKUVVGS0xFTkJRVk1zWTBGQlZDeERRVUYzUWl4VlFVRjRRaXhMUVVGMVF5eEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRlVMRU5CUVd0Q0xGZEJRV3hDTEVOQlFUaENMRTlCUVhwRkxFVkJRV3RHTzBGQlEyaEdMREJDUVVGVkxFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFWUXNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNUMEZCZUVNN1FVRkRSRHM3UVVGRlJDeHZRa0ZCVFN4cFFrRkJUaXhEUVVGM1FpeEhRVUY0UWl4RFFVRTBRaXhOUVVFMVFpeEZRVUZ2UXl4SlFVRndReXhGUVVFd1F5eEpRVUZKTEVsQlFVb3NRMEZCVXl4TlFVRnVSQ3hGUVVFeVJDeEpRVUV6UkN4RlFVRnBSU3hKUVVGSkxFbEJRVW9zUTBGQlV5eExRVUV4UlN4RlFVRnBSaXhMUVVGcVJpeEZRVUYzUml4SlFVRjRSaXhGUVVFNFJpeFRRVUU1Uml4RlFVRjVSeXhQUVVGNlJ6dEJRVU5FT3p0QlFVVkVMSEZDUVVGVExHZENRVUZVTEVOQlFUQkNMRU5CUVVNc1RVRkJSQ3hGUVVGVExHVkJRVlFzUTBGQk1VSXNSVUZCY1VRc1NVRkJja1FzUTBGQk1FUXNXVUZCVFR0QlFVTTVSQ3gxUWtGQlV5eFpRVUZVTEVOQlFYTkNMRk5CUVhSQ0xFVkJRV2xETEVsQlFXcERMRU5CUVhORExGbEJRVTA3UVVGRE1VTXNjMEpCUVUwc1ZVRkJUaXhEUVVGcFFpeE5RVUZxUWl4SlFVRXlRaXhSUVVFelFqczdRVUZGUVR0QlFVTkJMSE5DUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNPMEZCUTNKQ0xITkNRVUZKTEVsQlFVa3NSVUZFWVN4RlFVTlVMRTFCUVUwc1ZVRkVSeXhGUVVOVExFMUJRVTBzU1VGQlNTeEZRVVJ1UWl4RlFVTjFRaXhKUVVGSkxFdEJSRE5DTzBGQlJYSkNMSGRDUVVGTkxFVkJRVVVzVFVGQlRTeEhRVUZTTEVWQlFXRXNWVUZCVlN4TlFVRjJRaXhGUVVFclFpeHRRa0ZCYlVJc1UwRkJiRVE3UVVGR1pTeHBRa0ZCZGtJN08wRkJTMEU3UVVGRFFUdEJRVU5CTERKQ1FVRlhMRmxCUVUwN1FVRkRaanRCUVVOQkxIZENRVUZOTEZWQlFVNHNRMEZCYVVJc1IwRkJha0lzUlVGQmMwSXNUVUZCZEVJN1FVRkRSQ3hwUWtGSVJEdEJRVWxFTEdWQlprUTdRVUZuUWtRc1lVRnFRa1E3UVVGclFrUXNWMEV4UTBRc1JVRXdRMGNzVlVGQlV5eExRVUZVTEVWQlFXZENPMEZCUTJwQ0xHOUNRVUZSTEV0QlFWSXNRMEZCWXl4TFFVRmtPMEZCUTBRc1YwRTFRMFE3UVVFNFEwUXNVMEY2UkVRN1FVRXdSRVFzVDBFdlJVUXNSVUVyUlVjc1MwRXZSVWdzUTBFclJWTXNWVUZCUXl4TlFVRkVMRVZCUVZrN1FVRkRia0k3UVVGRFFTeFpRVUZKTEdOQlFXTTdRVUZEYUVJc1kwRkJTU3hKUVVGSkxFVkJSRkVzUlVGRFNpeE5RVUZOTEZWQlJFWXNSVUZEWXl4TlFVRk5MRWxCUVVrc1JVRkVlRUlzUlVGRE5FSXNTVUZCU1N4TFFVUm9RenRCUVVWb1FpeG5Ra0ZCVFN4RlFVRkZMRTFCUVUwc1IwRkJVaXhGUVVGaExFMUJRVTBzVFVGQmJrSTdRVUZHVlN4VFFVRnNRanM3UVVGTFFTeGpRVUZOTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVhWQ0xGZEJRWFpDTzBGQlEwUXNUMEYyUmtRN1FVRjVSa1E3T3p0clEwRkZZU3hITEVWQlFVc3NXU3hGUVVGak8wRkJRVUU3TzBGQlJTOUNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NVVUZCVVN4SlFVRkpMRWxCUVdoQ08wRkJRMEVzVlVGQlNTeFRRVUZUTEdGQlFXRXNUVUZCTVVJN1FVRkRRU3hWUVVGSkxGZEJRVmNzWVVGQllTeFJRVUUxUWp0QlFVTkJMRlZCUVVrc1kwRkJZeXhoUVVGaExFbEJRUzlDT3p0QlFVVkJMR05CUVZFc1IwRkJVaXhEUVVGWkxHbERRVUZhTEVWQlFTdERMRWRCUVM5RE96dEJRVVZCTEZWQlFVa3NWVUZCVlN4SFFVRmtPMEZCUTBFc1kwRkJVU3hKUVVGU0xFTkJRV0VzVTBGQllpeEhRVUY1UWl4aFFVRmhMR0ZCUVhSRE96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFpRVUZOTEZGQlFVNHNRMEZCWlN4MVFrRkJaaXhEUVVGMVF5eE5RVUYyUXl4RlFVRXJReXhKUVVFdlF5eERRVUZ2UkN4VlFVRkRMRlZCUVVRc1JVRkJaMEk3TzBGQlJXeEZMRmxCUVVrc1lVRkJZU3hYUVVGWExHRkJRVmdzUTBGQmVVSXNWVUZCZWtJc1EwRkJiME1zVlVGQmNrUTdRVUZEUVN4WlFVRkpMRk5CUVZNc1YwRkJWeXhOUVVGWUxFZEJRVzlDTEZkQlFWY3NUVUZCV0N4RFFVRnJRaXhSUVVGMFF5eEhRVUZwUkN4VlFVRTVSRHRCUVVOQkxGbEJRVWtzV1VGQldTeFhRVUZYTEZGQlFWZ3NSMEZCYzBJc1YwRkJWeXhSUVVGWUxFTkJRVzlDTEZGQlFURkRMRWRCUVhGRUxFVkJRWEpGT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3huUkVGQmFVSXNUVUZCYWtJc1JVRkJlVUlzVlVGQmVrSXNSVUZCY1VNc1YwRkJja003TzBGQlJVRTdRVUZEUVN4WlFVRkpMR2xDUVVGS096dEJRVVZCTEZsQlFVa3NRMEZCUXl4UFFVRkxMRlZCUVV3c1EwRkJaMElzVVVGQmFFSXNRMEZCVEN4RlFVRm5RenRCUVVNNVFpeHhRa0ZCVnl3MlFrRkJiVUlzUzBGQmJrSXNSVUZCTUVJc1MwRkJNVUlzUlVGQmFVTXNVVUZCYWtNc1EwRkJXRHRCUVVORUxGTkJSa1FzVFVGRlR6dEJRVU5NTEhGQ1FVRlhMRTlCUVVzc1ZVRkJUQ3hEUVVGblFpeFJRVUZvUWl4RFFVRllPMEZCUTBRN08wRkJSVVFzWTBGQlRTeFZRVUZPTEVOQlFXbENMRkZCUVdwQ0xFbEJRVFpDTEZGQlFUZENPenRCUVVWQkxHbENRVUZUTEcxQ1FVRlVMRU5CUVRaQ0xHRkJRV0VzWVVGQk1VTTdPMEZCUlVFN1FVRkRRU3hqUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNPMEZCUTNKQ0xHTkJRVWtzU1VGQlNTeEZRVVJoTEVWQlExUXNUVUZCVFN4VlFVUkhMRVZCUTFNc1RVRkJUU3hKUVVGSkxFVkJSRzVDTEVWQlEzVkNMRWxCUVVrc1MwRkVNMEk3UVVGRmNrSXNaMEpCUVUwc1JVRkJSU3hOUVVGTkxFZEJRVklzUlVGQllTeFZRVUZWTEZGQlFYWkNMRVZCUVdsRExHMUNRVUZ0UWl4VFFVRndSQ3hGUVVFclJDeFJRVUZSTEUxQlFYWkZMRVZCUVN0RkxFOUJRVThzWVVGQllTeEpRVUZ1Unp0QlFVWmxMRk5CUVhaQ096dEJRVXRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVWRUxFOUJjRU5FTzBGQmNVTkVPenM3SzBKQlJWVXNSeXhGUVVGTExFMHNSVUZCVVR0QlFVTjBRaXhWUVVGSkxGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVa3NiMEpCUVc5Q0xGTkJRVk1zWlVGQmFrTTdPMEZCUlVFc1ZVRkJTU3hKUVVGS0xFTkJRVk1zVTBGQlZDeERRVUZ0UWl4UFFVRnVRaXhEUVVFeVFpeFZRVUZETEZWQlFVUXNSVUZCWjBJN1FVRkRla003UVVGRFFTeGpRVUZOTEVsQlFVNHNRMEZCVnl4WFFVRllMRU5CUVhWQ08wRkJRM0pDTEdkQ1FVRk5MRkZCUkdVc1JVRkRUQ3hOUVVGTkxHbENRVVJFTEVWQlEyOUNMRWxCUVVrc1ZVRkVlRUk3UVVGRmNrSXNaMEpCUVUwc1JVRkJSU3hWUVVGVkxFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFYSkNMRVZCUVN0Q0xGRkJRVkVzU1VGQlNTeEpRVUV6UXl4RlFVRnBSQ3hQUVVGUExFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFXcEZMRVZCUVhkRkxGRkJRVkVzU1VGQlNTeEpRVUZLTEVOQlFWTXNUVUZCZWtZN1FVRkdaU3hUUVVGMlFqdEJRVWxFTEU5QlRrUTdRVUZQUkRzN1FVRkZSRHM3T3pzNFFrRkRWU3hITEVWQlFVczdRVUZEWWl4VlFVRkpMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKTEZOQlFWTXNTVUZCU1N4SlFVRktMRU5CUVZNc1VVRkJkRUk3TzBGQlJVRXNWVUZCU1N4VFFVRlRMRTFCUVUwc1ZVRkJUaXhEUVVGcFFpeE5RVUZxUWl4RFFVRmlPMEZCUTBFc1ZVRkJTU3hOUVVGS0xFVkJRVms3UVVGRFZqdEJRVU5CTEdWQlFVOHNUVUZCVURzN1FVRkZRU3hoUVVGTExHbENRVUZNTEVOQlFYVkNMR05CUVhaQ0xFTkJRWE5ETEUxQlFYUkRPenRCUVVWQk8wRkJRMEVzWTBGQlRTeEpRVUZPTEVOQlFWY3NWMEZCV0N4RFFVRjFRanRCUVVOeVFpeGpRVUZKTEVsQlFVa3NSVUZFWVN4RlFVTlVMRTFCUVUwc1ZVRkVSeXhGUVVOVExFMUJRVTBzU1VGQlNTeEZRVVJ1UWl4RlFVTjFRaXhKUVVGSkxFbEJRVWtzU1VGRUwwSTdRVUZGY2tJc1owSkJRVTBzUlVGQlJTeE5RVUZOTEVkQlFWSTdRVUZHWlN4VFFVRjJRanRCUVVsRU8wRkJRMFk3TzBGQlJVUTdPenM3YzBOQlEydENMRWNzUlVGQlN6dEJRVUZCT3p0QlFVVnlRaXhYUVVGTExHbENRVUZNTEVOQlFYVkNMSE5DUVVGMlFpeERRVUU0UXl4SFFVRTVReXhGUVVGdFJDeExRVUZ1UkN4RlFVRXdSQ3hKUVVFeFJDeERRVUVyUkN4VlFVRkRMRTFCUVVRc1JVRkJXVHM3UVVGRmVrVXNaMEpCUVZFc1IwRkJVaXhEUVVGWkxEaERRVUZhTEVWQlFUUkVMRTFCUVRWRU96dEJRVVZCTEZsQlFVa3NWVUZCVlN4dlFrRkJXU3hOUVVGYUxFVkJRVzlDTEUxQlFYQkNMRWRCUVRaQ0xFTkJRVE5ETEVWQlFUaERPenRCUVVVMVF6dEJRVU5CTERoQ1FVRlpMRTFCUVZvc1JVRkJiMElzVDBGQmNFSXNRMEZCTkVJc1ZVRkJReXhOUVVGRUxFVkJRVms3UVVGRGRFTXNiMEpCUVZFc1IwRkJVaXhEUVVGWkxHdEZRVUZhTEVWQlFXZEdMRTlCUVU4c1RVRkJVQ3hEUVVGb1JqdEJRVU5CTEcxQ1FVRkxMRzFDUVVGTUxFTkJRWGxDTEVkQlFYcENMRVZCUVRoQ0xFOUJRVThzVFVGQlVDeERRVUU1UWp0QlFVTkVMRmRCU0VRN1FVRkxSQ3hUUVZKRUxFMUJVVThzU1VGQlNTeEpRVUZKTEVsQlFVb3NRMEZCVXl4TlFVRlVMRWxCUVcxQ0xFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFXaERMRVZCUVRCRE8wRkJReTlETEd0Q1FVRlJMRWRCUVZJc1EwRkJXU3h4UTBGQldpeEZRVUZ0UkN4SlFVRkpMRWxCUVVvc1EwRkJVeXhOUVVFMVJDeEZRVUZ2UlN4SlFVRkpMRWxCUVVvc1EwRkJVeXhSUVVFM1JUdEJRVU5CTEdsQ1FVRkxMR2RDUVVGTUxFTkJRWE5DTEVkQlFYUkNPMEZCUTBRc1UwRklUU3hOUVVkQk8wRkJRMHc3UVVGRFFTeGpRVUZKTEZGQlFWRXNSVUZCV2p0QlFVTkJMR2RDUVVGTkxFVkJRVTRzUjBGQlZ5eEpRVUZKTEVWQlFXWTdRVUZEUVN4blFrRkJUU3hKUVVGT0xFZEJRV0VzU1VGQlNTeEZRVUZxUWp0QlFVTkJMR2RDUVVGTkxFVkJRVTRzUjBGQlZ5eEpRVUZKTEVsQlFXWTdRVUZEUVN4blFrRkJUU3hKUVVGT0xFZEJRV0VzVlVGQllqdEJRVU5CTEdkQ1FVRk5MRWxCUVU0c1IwRkJZVHRCUVVOWUxHdENRVUZOTEVkQlJFczdRVUZGV0N4clFrRkJUVHRCUVVaTExGZEJRV0k3UVVGSlFTeHBRa0ZCU3l4SlFVRk1MRU5CUVZVc1YwRkJWaXhEUVVGelFpeExRVUYwUWp0QlFVTkVPMEZCUlVZc1QwRTNRa1E3UVVFclFrUTdPenR4UTBGRlowSXNSeXhGUVVGTE8wRkJRVUU3TzBGQlEzQkNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NVMEZCVXl4SlFVRkpMRWxCUVVvc1EwRkJVeXhSUVVGMFFqczdRVUZGUVN4VlFVRkpMR0ZCUVdFc1NVRkJTU3hKUVVGeVFqdEJRVU5CTEZWQlFVa3NVMEZCVXl4elFrRkJWU3hOUVVGV0xFVkJRV3RDTEUxQlFTOUNPMEZCUTBFc1ZVRkJTU3h4UWtGQmNVSXNVMEZCVXl4bFFVRnNRenM3UVVGRlFTeFZRVUZKTEdWQlFXVXNVMEZCVXl4WlFVRTFRanM3UVVGRlFUdEJRVU5CTEZsQlFVMHNVVUZCVGl4RFFVRmxMSFZDUVVGbUxFTkJRWFZETEVsQlFVa3NTVUZCU2l4RFFVRlRMRTFCUVdoRUxFVkJRWGRFTEVsQlFYaEVMRU5CUVRaRUxGVkJRVU1zVlVGQlJDeEZRVUZuUWp0QlFVTXpSU3haUVVGSkxHRkJRV0VzVjBGQlZ5eGhRVUZZTEVOQlFYbENMRlZCUVhwQ0xFTkJRVzlETEZWQlFYSkVPMEZCUTBFc1dVRkJTU3haUVVGWkxGZEJRVmNzVVVGQldDeEhRVUZ6UWl4WFFVRlhMRkZCUVZnc1EwRkJiMElzVVVGQk1VTXNSMEZCY1VRc1JVRkJja1U3TzBGQlJVRTdRVUZEUVN4WlFVRkpMR2RDUVVGblFpeEZRVUZ3UWp0QlFVTkJMSE5DUVVGakxFbEJRV1FzUTBGQmJVSXNVMEZCVXl4VlFVRTFRanRCUVVOQkxHdENRVUZWTEU5QlFWWXNRMEZCYTBJc1ZVRkJReXhMUVVGRU8wRkJRVUVzYVVKQlFWY3NZMEZCWXl4SlFVRmtMRU5CUVcxQ0xHVkJRV1VzUzBGQmJFTXNRMEZCV0R0QlFVRkJMRk5CUVd4Q096dEJRVVZCTzBGQlEwRXNXVUZCU1N4dFFrRkJiVUk3UVVGRGNrSXNaMEpCUVUwc1YwRkVaU3hGUVVOR0xFMUJRVTBzVFVGQlRTeEpRVVJXTEVWQlEyZENMRWxCUVVrc2RVSkJRWFZDTEUxQlFYWkNMRWRCUVdkRExFdEJSSEJFTzBGQlJYSkNMR2RDUVVGTkxFVkJRVVVzVlVGQlZTeEpRVUZKTEVsQlFVb3NRMEZCVXl4UlFVRnlRaXhGUVVFclFpeFhRVUZYTEdGQlFURkRMRVZCUVhsRUxGRkJRVkVzVlVGQmFrVTdRVUZHWlN4VFFVRjJRanM3UVVGTFFUdEJRVU5CTEdOQlFVMHNTVUZCVGl4RFFVRlhMRmRCUVZnc1EwRkJkVUlzWjBKQlFYWkNMRVZCUVhsRExGVkJRVU1zUzBGQlJDeEZRVUZYTzBGQlEyeEVMR3RDUVVGUkxFZEJRVklzUTBGQldTeHhRMEZCV2l4RlFVRnRSQ3hMUVVGdVJEdEJRVU5CTEdOQlFVa3NUVUZCVFN4SlFVRk9MRU5CUVZjc1NVRkJXQ3hMUVVGdlFpeEhRVUY0UWl4RlFVRTJRanM3UVVGRk0wSTdRVUZEUVN4clFrRkJUU3hKUVVGT0xFTkJRVmNzVjBGQldDeERRVUYxUWp0QlFVTnlRaXhyUWtGQlNTeEpRVUZKTEVWQlJHRXNSVUZEVkN4TlFVRk5MRlZCUkVjc1JVRkRVeXhOUVVGTkxFbEJRVWtzUlVGRWJrSXNSVUZEZFVJc1NVRkJTU3hWUVVRelFqdEJRVVZ5UWl4dlFrRkJUU3hGUVVGRkxFMUJRVTBzUjBGQlVpeEZRVUZoTEcxQ1FVRnRRaXhUUVVGb1F5eEZRVUV5UXl4UlFVRlJMRWxCUVVrc1NVRkJTaXhEUVVGVExFMUJRVFZFTEVWQlFXOUZMRlZCUVZVc1NVRkJTU3hKUVVGS0xFTkJRVk1zVVVGQmRrWTdRVUZHWlN4aFFVRjJRanM3UVVGTFFUdEJRVU5CTEdkQ1FVRkpMR3RDUVVGclFqdEJRVU53UWl4dlFrRkJUU3hYUVVSakxFVkJRMFFzVFVGQlRTeE5RVUZOTEVsQlJGZ3NSVUZEYVVJc1NVRkJTU3hyUWtGRWNrSTdRVUZGY0VJc2IwSkJRVTBzUlVGQlJTeFZRVUZWTEdsQ1FVRnBRaXhKUVVGcVFpeERRVUZ6UWl4UlFVRnNReXhGUVVFMFF5eFpRVUZaTEZWQlFYaEVPMEZCUm1Nc1lVRkJkRUk3TzBGQlMwRTdRVUZEUVN4clFrRkJUU3hKUVVGT0xFTkJRVmNzVjBGQldDeERRVUYxUWl4bFFVRjJRaXhGUVVGM1F5eFZRVUZETEV0QlFVUXNSVUZCVnp0QlFVTnFSQ3h6UWtGQlVTeEhRVUZTTEVOQlFWa3NiVU5CUVZvc1JVRkJhVVFzUzBGQmFrUTdRVUZEUVN4clFrRkJTU3hOUVVGTkxFbEJRVTRzUTBGQlZ5eEpRVUZZTEV0QlFXOUNMRWRCUVhoQ0xFVkJRVFpDT3p0QlFVVXpRaXh2UWtGQlNTeFhRVUZYTEUxQlFVMHNWVUZCVGl4RFFVRnBRaXhOUVVGcVFpeERRVUZtTzBGQlEwRXNiMEpCUVVrc1EwRkJReXhSUVVGTUxFVkJRV1U3UVVGRFlpdzJRa0ZCVnl3MlFrRkJiVUlzUzBGQmJrSXNSVUZCTUVJc1RVRkJNVUlzUlVGQmEwTXNVMEZCYkVNc1EwRkJXRHRCUVVOQkxIZENRVUZOTEZWQlFVNHNRMEZCYVVJc1RVRkJha0lzU1VGQk1rSXNVVUZCTTBJN1FVRkRSRHM3UVVGRlJDeHZRa0ZCU1N4SlFVRkpMRWxCUVVvc1EwRkJVeXhqUVVGVUxFTkJRWGRDTEU5QlFYaENMRXRCUVc5RExFbEJRVWtzU1VGQlNpeERRVUZUTEV0QlFXcEVMRVZCUVhkRU8wRkJRM1JFTzBGQlEwRXNjMEpCUVVrc1owSkJRVW83UVVGRFFTeHpRa0ZCU1N4SlFVRkpMRWxCUVVvc1EwRkJVeXhqUVVGVUxFTkJRWGRDTEZWQlFYaENMRXRCUVhWRExFbEJRVWtzU1VGQlNpeERRVUZUTEZGQlFWUXNRMEZCYTBJc1YwRkJiRUlzUTBGQk9FSXNUMEZCZWtVc1JVRkJhMFk3UVVGRGFFWXNPRUpCUVZVc1NVRkJTU3hKUVVGS0xFTkJRVk1zVVVGQlZDeERRVUZyUWl4WFFVRnNRaXhEUVVFNFFpeFBRVUY0UXp0QlFVTkVPenRCUVVWRUxIZENRVUZOTEdsQ1FVRk9MRU5CUVhkQ0xFZEJRWGhDTEVOQlFUUkNMRTFCUVRWQ0xFVkJRVzlETEV0QlFYQkRMRVZCUVRKRExFbEJRVWtzU1VGQlNpeERRVUZUTEUxQlFYQkVMRVZCUVRSRUxFbEJRVFZFTEVWQlFXdEZMRVZCUVd4RkxFVkJRWE5GTEZWQlFYUkZMRVZCUVd0R0xFbEJRV3hHTEVWQlFYZEdMRk5CUVhoR0xFVkJRVzFITEU5QlFXNUhPMEZCUTBRN08wRkJSVVE3UVVGRFFTeDVRa0ZCVXl4bFFVRlVMRU5CUVhsQ0xGVkJRWHBDT3p0QlFVVkJPMEZCUTBFc2MwSkJRVTBzUlVGQlRpeEhRVUZYTEVsQlFVa3NSVUZCWmp0QlFVTkJMSE5DUVVGTkxFbEJRVTRzUjBGQllTeE5RVUZOTEVsQlFXNUNPMEZCUTBFc2MwSkJRVTBzUlVGQlRpeEhRVUZYTEZWQlFWZzdRVUZEUVN4elFrRkJUU3hKUVVGT0xFTkJRVmNzVFVGQldDeEhRVUZ2UWl4SlFVRkpMRWxCUVVvc1EwRkJVeXhOUVVFM1FqdEJRVU5CTEhOQ1FVRk5MRWxCUVU0c1EwRkJWeXhSUVVGWUxFZEJRWE5DTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVM5Q096dEJRVVZCTEhkQ1FVRlJMRWRCUVZJc1EwRkJXU3hyUTBGQldpeEZRVUZuUkN4SFFVRm9SQ3hGUVVGeFJDeExRVUZ5UkN4RlFVRTBSQ3hSUVVFMVJEczdRVUZGUVN4MVFrRkJTeXhKUVVGTUxFTkJRVlVzVjBGQlZpeERRVUZ6UWl4TFFVRjBRanRCUVVWRU8wRkJRMFlzWVVGdVEwUTdRVUZ4UTBRc1YwRndSRVFzVFVGdlJFODdRVUZEVER0QlFVTkJMR3RDUVVGTkxFbEJRVTRzUTBGQlZ5eFhRVUZZTEVOQlFYVkNPMEZCUTNKQ0xHdENRVUZKTEVsQlFVa3NSVUZFWVN4RlFVTlVMRTFCUVUwc1ZVRkVSeXhGUVVOVExFMUJRVTBzU1VGQlNTeEZRVVJ1UWl4RlFVTjFRaXhKUVVGSkxGVkJSRE5DTzBGQlJYSkNMRzlDUVVGTkxFMUJRVTA3UVVGR1V5eGhRVUYyUWp0QlFVbEVPMEZCUTBZc1UwRTNSRVE3UVVFclJFUXNUMEV2UlVRN1FVRnBSa1E3T3p0M1EwRkZiVUlzUnl4RlFVRkxMRmtzUlVGQll6dEJRVUZCT3p0QlFVTnlReXhWUVVGSkxGTkJRVk1zWVVGQllTeFJRVUV4UWp0QlFVTkJMRlZCUVVrc1UwRkJVeXhoUVVGaExFMUJRVEZDT3p0QlFVVkJMRlZCUVVrc1lVRkJZU3hKUVVGSkxFbEJRWEpDTzBGQlEwRXNWVUZCU1N4eFFrRkJjVUlzVTBGQlV5eGxRVUZzUXpzN1FVRkZRU3hWUVVGSkxHVkJRV1VzVTBGQlV5eFpRVUUxUWpzN1FVRkZRU3hqUVVGUkxFZEJRVklzUTBGQldTd3JRMEZCV2l4RlFVRTJSQ3hOUVVFM1JDeEZRVUZ4UlN4WlFVRnlSU3hGUVVGdFJpeE5RVUZ1UmpzN1FVRkZRVHRCUVVOQkxGZEJRVXNzVVVGQlRDeERRVUZqTEhWQ1FVRmtMRU5CUVhORExFMUJRWFJETEVWQlFUaERMRWxCUVRsRExFTkJRVzFFTEZWQlFVTXNWVUZCUkN4RlFVRm5RanRCUVVOcVJTeFpRVUZKTEdGQlFXRXNWMEZCVnl4aFFVRllMRU5CUVhsQ0xGVkJRWHBDTEVOQlFXOURMRlZCUVhKRU8wRkJRMEVzV1VGQlNTeFpRVUZaTEZkQlFWY3NVVUZCV0N4SFFVRnpRaXhYUVVGWExGRkJRVmdzUTBGQmIwSXNVVUZCTVVNc1IwRkJjVVFzUlVGQmNrVTdPMEZCUlVFN1FVRkRRU3haUVVGSkxHZENRVUZuUWl4RlFVRndRanRCUVVOQkxITkNRVUZqTEVsQlFXUXNRMEZCYlVJc1UwRkJVeXhWUVVFMVFqdEJRVU5CTEd0Q1FVRlZMRTlCUVZZc1EwRkJhMElzVlVGQlF5eExRVUZFTzBGQlFVRXNhVUpCUVZjc1kwRkJZeXhKUVVGa0xFTkJRVzFDTEdWQlFXVXNTMEZCYkVNc1EwRkJXRHRCUVVGQkxGTkJRV3hDT3p0QlFVVkJPMEZCUTBFc1pVRkJTeXhKUVVGTUxFTkJRVlVzVjBGQlZpeERRVUZ6UWp0QlFVTndRaXhqUVVGSkxFbEJRVWtzUlVGRVdTeEZRVU5TTEUxQlFVMHNWVUZFUlN4RlFVTlZMRTFCUVUwc1NVRkJTU3hGUVVSd1FpeEZRVU4zUWl4SlFVRkpMRlZCUkRWQ08wRkJSWEJDTEdkQ1FVRk5MRVZCUVVVc1RVRkJUU3hIUVVGU0xFVkJRV0VzYlVKQlFXMUNMRk5CUVdoRExFVkJRVEpETEZGQlFWRXNUVUZCYmtRc1JVRkJNa1FzVlVGQlZTeE5RVUZ5UlR0QlFVWmpMRk5CUVhSQ096dEJRVXRCTzBGQlEwRXNXVUZCU1N4clFrRkJhMEk3UVVGRGNFSXNaMEpCUVUwc1YwRkVZeXhGUVVORUxFMUJRVTBzVDBGQlN5eEpRVVJXTEVWQlEyZENMRWxCUVVrc2EwSkJSSEJDTzBGQlJYQkNMR2RDUVVGTkxFVkJRVVVzV1VGQldTeFZRVUZrTzBGQlJtTXNVMEZCZEVJN08wRkJTMEU3UVVGRFFTeGxRVUZMTEVsQlFVd3NRMEZCVlN4WFFVRldMRU5CUVhOQ0xHVkJRWFJDTEVWQlFYVkRMRlZCUVVNc1MwRkJSQ3hGUVVGWE96dEJRVVZvUkN4alFVRkpMRmRCUVZjc1QwRkJTeXhWUVVGTUxFTkJRV2RDTEUxQlFXaENMRU5CUVdZN1FVRkRRU3hqUVVGSkxFTkJRVU1zVVVGQlRDeEZRVUZsTzBGQlEySXNkVUpCUVZjc2NVTkJRWGxDTEUxQlFYcENMRVZCUVdsRExGTkJRV3BETEVOQlFWZzdRVUZEUVN4dFFrRkJTeXhWUVVGTUxFTkJRV2RDTEUxQlFXaENMRWxCUVRCQ0xGRkJRVEZDTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3h0UWtGQlV5eGxRVUZVTEVOQlFYbENMRlZCUVhwQ096dEJRVVZCTzBGQlEwRXNZMEZCU1N4WFFVRlhPMEZCUTJJc1owSkJRVWtzU1VGQlNTeEZRVVJMTEVWQlEwUXNUVUZCVFN4UFFVRkxMRWxCUkZZc1JVRkRaMElzU1VGQlNTeFZRVVJ3UWl4RlFVTm5ReXhOUVVGTkxGVkJSSFJETzBGQlJXSXNhMEpCUVUwc1RVRkJUVHRCUVVaRExGZEJRV1k3TzBGQlMwRXNiVUpCUVZNc1NVRkJWQ3hEUVVGakxFMUJRV1FzUjBGQmRVSXNUVUZCZGtJN1FVRkRRU3h0UWtGQlV5eEpRVUZVTEVOQlFXTXNVVUZCWkN4SFFVRjVRaXhOUVVGNlFqczdRVUZGUVN4clFrRkJVU3hIUVVGU0xFTkJRVmtzY1VOQlFWb3NSVUZCYlVRc1IwRkJia1FzUlVGQmQwUXNTMEZCZUVRc1JVRkJLMFFzVVVGQkwwUXNSVUZCZVVVc1VVRkJla1U3TzBGQlJVRXNhVUpCUVVzc1NVRkJUQ3hEUVVGVkxGZEJRVllzUTBGQmMwSXNVVUZCZEVJN1FVRkZSQ3hUUVhoQ1JEdEJRVEJDUkN4UFFXaEVSRHRCUVdsRVJEczdRVUZGUkRzN096dDNRMEZEYjBJc1J5eEZRVUZMTzBGQlEzWkNMRlZCUVVrc1VVRkJVU3hKUVVGYU96dEJRVVZCTEZWQlFVa3NZVUZCWVN4SlFVRkpMRWxCUVhKQ08wRkJRMEVzVlVGQlNTeFRRVUZUTEVsQlFVa3NTVUZCU2l4RFFVRlRMRkZCUVhSQ096dEJRVVZCTEZWQlFVa3NWMEZCVnl4TlFVRk5MRlZCUVU0c1EwRkJhVUlzVFVGQmFrSXNRMEZCWmp0QlFVTkJMRlZCUVVrc1VVRkJTaXhGUVVGak8wRkJRMW83UVVGRFFTeHBRa0ZCVXl4clFrRkJWQ3hEUVVFMFFpeFZRVUUxUWpzN1FVRkZRVHRCUVVOQkxHTkJRVTBzU1VGQlRpeERRVUZYTEZkQlFWZ3NRMEZCZFVJN1FVRkRja0lzWTBGQlNTeEpRVUZKTEVWQlJHRXNSVUZEVkN4TlFVRk5MRlZCUkVjc1JVRkRVeXhOUVVGTkxFbEJRVWtzUlVGRWJrSXNSVUZEZFVJc1NVRkJTU3hKUVVGSkxFbEJSQzlDTzBGQlJYSkNMR2RDUVVGTkxFVkJRVVVzVFVGQlRTeEhRVUZTTzBGQlJtVXNVMEZCZGtJN08wRkJTMEVzWVVGQlN5eHBRa0ZCVEN4RFFVRjFRaXhOUVVGMlFpeERRVUU0UWl4TlFVRTVRaXhGUVVGelF5eGxRVUYwUXl4RlFVRjFSQ3hWUVVGMlJDeEZRVUZ0UlN4SlFVRnVSVHM3UVVGRlFUdEJRVU5CTzBGQlEwUTdRVUZEUmpzN08zZENRWEpqVXp0QlFVRkZMR0ZCUVU4c1MwRkJTeXhKUVVGYU8wRkJRVzFDT3pzN1MwRTVSbXBET3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdhMEpCZFdsQ1pTeGpPenM3T3pzN096czdPenM3T3p0UlEzSnBRa01zWjBJc1IwRkJRU3huUWpzN1FVRkdhRUk3T3pzN096dEJRVVZQTEZOQlFWTXNaMEpCUVZRc1EwRkJNRUlzVFVGQk1VSXNSVUZCYTBNc1ZVRkJiRU1zUlVGQk9FTXNTMEZCT1VNc1JVRkJjVVE3TzBGQlJURkVMRlZCUVZFc1IwRkJVaXhEUVVGWkxGVkJRVm9zUlVGQmQwSXNUVUZCZUVJN08wRkJSVUU3UVVGRFFTeFZRVUZSTEVkQlFWSXNRMEZCV1N3NFFrRkJXanRCUVVOQkxFMUJRVWs3UVVGRFJpeFJRVUZKTEUxQlFVMHNTMEZCVmp0QlFVTkJMRkZCUVVrc1UwRkJVeXhYUVVGWExHRkJRVmdzUTBGQmVVSXNWVUZCZEVNN08wRkJSVUU3UVVGRFFTeHBRa0ZCU1N4VFFVRktMRU5CUVdNc1QwRkJUeXhGUVVGeVFpeEZRVUY1UWl4TlFVRjZRanM3UVVGRlFUdEJRVU5CTEZGQlFVa3NVMEZCVXl4aFFVRkpMR2RDUVVGS0xFTkJRWEZDTEVkQlFYSkNMRVZCUVRCQ0xFMUJRVEZDTEVOQlFXSTdPMEZCUlVFN1FVRkRRU3hYUVVGUExFMUJRVkFzUTBGQll5eFBRVUZrTEVOQlFYTkNMRlZCUVVNc1MwRkJSQ3hGUVVGWE8wRkJReTlDTEdGQlFVOHNUVUZCVFN4TFFVRmlPMEZCUTBRc1MwRkdSRHM3UVVGSlFUdEJRVU5CTEZGQlFVa3NRMEZCUXl4UFFVRlBMRXRCUVZJc1NVRkJhMElzVDBGQlR5eFBRVUZRTEVOQlFXVXNUVUZCWml4SFFVRjNRaXhEUVVFNVF5eEZRVUZyUkR0QlFVTm9SQ3hqUVVGUkxFbEJRVklzUTBGQllTeDNRa0ZCZDBJc1QwRkJUeXhMUVVGUUxFZEJRV1VzTmtOQlFXWXNSMEZCSzBRc1UwRkJka1lzUTBGQllpeEZRVUZuU0N4NVFrRkJaU3hOUVVGbUxFVkJRWFZDTEVsQlFYWkNMRVZCUVRaQ0xFTkJRVGRDTEVOQlFXaElPMEZCUTBFc1kwRkJVU3hMUVVGU0xFTkJRV01zVTBGQlpDeEZRVUY1UWl4NVFrRkJaU3hIUVVGbUxFVkJRVzlDTEVsQlFYQkNMRVZCUVRCQ0xFTkJRVEZDTEVOQlFYcENMRVZCUVhWRUxHRkJRWFpFTEVWQlFYTkZMSGxDUVVGbExFMUJRV1lzUlVGQmRVSXNTVUZCZGtJc1JVRkJOa0lzUTBGQk4wSXNRMEZCZEVVN1FVRkRSQ3hMUVVoRUxFMUJSMDg3UVVGRFRDeGpRVUZSTEVkQlFWSXNRMEZCV1N3MlFrRkJXanRCUVVORU8wRkJRMFlzUjBGMFFrUXNRMEZ6UWtVc1QwRkJUeXhEUVVGUUxFVkJRVlU3UVVGRFZpeFpRVUZSTEVsQlFWSXNRMEZCWVN4cFEwRkJZaXhGUVVGblJDeERRVUZvUkR0QlFVTkVPMEZCUlVZN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJFTkVPenM3T3pzN096dEJRVkZCTzBGQlEwRXNTVUZCU1N4bFFVRktMRVZCUVd0Q08wRkJRMlFzVjBGQlR5eEpRVUZRTEVkQlFXVXNXVUZCV1R0QlFVTjJRaXhaUVVGSkxHbENRVUZwUWl4UFFVRlBMRk5CUVZBc1EwRkJhVUlzWTBGQmRFTTdRVUZCUVN4WlFVTkpMR2xDUVVGcFFpeERRVUZGTEVWQlFVTXNWVUZCVlN4SlFVRllMRVZCUVVRc1EwRkJiVUlzYjBKQlFXNUNMRU5CUVhkRExGVkJRWGhETEVOQlJIUkNPMEZCUVVFc1dVRkZTU3haUVVGWkxFTkJRMUlzVlVGRVVTeEZRVVZTTEdkQ1FVWlJMRVZCUjFJc1UwRklVU3hGUVVsU0xHZENRVXBSTEVWQlMxSXNaVUZNVVN4RlFVMVNMSE5DUVU1UkxFVkJUMUlzWVVGUVVTeERRVVpvUWp0QlFVRkJMRmxCVjBrc2EwSkJRV3RDTEZWQlFWVXNUVUZZYUVNN08wRkJZVUVzWlVGQlR5eFZRVUZWTEVkQlFWWXNSVUZCWlR0QlFVTnNRaXhuUWtGQlNTeFJRVUZQTEVkQlFWQXNkVVJCUVU4c1IwRkJVQ3hQUVVGbExGRkJRV1lzU1VGQk1rSXNUMEZCVHl4SFFVRlFMRXRCUVdVc1ZVRkJNVU1zU1VGQmQwUXNVVUZCVVN4SlFVRndSU3hGUVVFd1JUdEJRVU4wUlN4elFrRkJUU3hKUVVGSkxGTkJRVW9zUTBGQll5eHJRMEZCWkN4RFFVRk9PMEZCUTBnN08wRkJSVVFzWjBKQlFVa3NVMEZCVXl4RlFVRmlPenRCUVVWQkxHbENRVUZMTEVsQlFVa3NTVUZCVkN4SlFVRnBRaXhIUVVGcVFpeEZRVUZ6UWp0QlFVTnNRaXh2UWtGQlNTeGxRVUZsTEVsQlFXWXNRMEZCYjBJc1IwRkJjRUlzUlVGQmVVSXNTVUZCZWtJc1EwRkJTaXhGUVVGdlF6dEJRVU5vUXl3eVFrRkJUeXhKUVVGUUxFTkJRVmtzU1VGQldqdEJRVU5JTzBGQlEwbzdPMEZCUlVRc1owSkJRVWtzWTBGQlNpeEZRVUZ2UWp0QlFVTm9RaXh4UWtGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxHVkJRWEJDTEVWQlFYRkRMRWRCUVhKRExFVkJRVEJETzBGQlEzUkRMSGRDUVVGSkxHVkJRV1VzU1VGQlppeERRVUZ2UWl4SFFVRndRaXhGUVVGNVFpeFZRVUZWTEVOQlFWWXNRMEZCZWtJc1EwRkJTaXhGUVVFMFF6dEJRVU40UXl3clFrRkJUeXhKUVVGUUxFTkJRVmtzVlVGQlZTeERRVUZXTEVOQlFWbzdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRSQ3h0UWtGQlR5eE5RVUZRTzBGQlEwZ3NVMEZ5UWtRN1FVRnpRa2dzUzBGd1EyRXNSVUZCWkR0QlFYRkRTRHRCUVVORU8wRkJRMEVzU1VGQlNTeHBRa0ZCU2l4RlFVRnZRanRCUVVOb1FpeFhRVUZQTEUxQlFWQXNSMEZCYVVJc1dVRkJXVHRCUVVONlFpeHBRa0ZCVXl4RFFVRlVMRWRCUVdFc1EwRkRXanM3UVVGRlJDeGxRVUZQTEZWQlFWVXNRMEZCVml4RlFVRmhPMEZCUTJoQ0xHZENRVUZKTEZWQlFWVXNUVUZCVml4TFFVRnhRaXhEUVVGNlFpeEZRVUUwUWp0QlFVTjRRaXh6UWtGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN3d1JFRkJWaXhEUVVGT08wRkJRMGc3UVVGRFJDeGpRVUZGTEZOQlFVWXNSMEZCWXl4RFFVRmtPMEZCUTBFc2JVSkJRVThzU1VGQlNTeERRVUZLTEVWQlFWQTdRVUZEU0N4VFFVNUVPMEZCVDBnc1MwRllaU3hGUVVGb1FqdEJRVmxJTzBGQlEwUTdRVUZEUVN4SlFVRkpMRU5CUVVNc1RVRkJUU3hQUVVGWUxFVkJRVzlDTzBGQlEyaENMRlZCUVUwc1QwRkJUaXhIUVVGblFpeFZRVUZWTEVsQlFWWXNSVUZCWjBJN1FVRkROVUlzWlVGQlR5eFBRVUZQTEZOQlFWQXNRMEZCYVVJc1VVRkJha0lzUTBGQk1FSXNTVUZCTVVJc1EwRkJLMElzU1VGQkwwSXNUVUZCZVVNc1owSkJRV2hFTzBGQlEwZ3NTMEZHUkR0QlFVZElPMEZCUTBRN1FVRkRRU3hKUVVGSkxFTkJRVU1zVFVGQlRTeFRRVUZPTEVOQlFXZENMRTlCUVhKQ0xFVkJRVGhDTzBGQlF6RkNMRlZCUVUwc1UwRkJUaXhEUVVGblFpeFBRVUZvUWl4SFFVRXdRaXhWUVVGVkxHRkJRVllzUTBGQmQwSXNaMEpCUVhoQ0xFVkJRVEJETzBGQlEyaEZMRmxCUVVrc1UwRkJVeXhKUVVGaUxFVkJRVzFDTzBGQlEyWXNhMEpCUVUwc1NVRkJTU3hUUVVGS0xFVkJRVTQ3UVVGRFNEdEJRVU5FTEZsQlFVa3NTVUZCU1N4UFFVRlBMRWxCUVZBc1EwRkJVanRCUVVOQkxGbEJRVWtzVFVGQlRTeEZRVUZGTEUxQlFVWXNTMEZCWVN4RFFVRjJRanM3UVVGRlFTeFpRVUZKTEZGQlFWRXNRMEZCV2l4RlFVRmxPMEZCUTFnc2JVSkJRVThzUTBGQlF5eERRVUZTTzBGQlEwZzdRVUZEUkN4WlFVRkpMRWxCUVVrc1EwRkJVanRCUVVOQkxGbEJRVWtzVlVGQlZTeE5RVUZXTEVkQlFXMUNMRU5CUVhaQ0xFVkJRVEJDTzBGQlEzUkNMR2RDUVVGSkxFOUJRVThzVlVGQlZTeERRVUZXTEVOQlFWQXNRMEZCU2p0QlFVTkJMR2RDUVVGSkxFMUJRVTBzUTBGQlZpeEZRVUZoTzBGQlFVVTdRVUZEV0N4dlFrRkJTU3hEUVVGS08wRkJRMGdzWVVGR1JDeE5RVVZQTEVsQlFVa3NUVUZCVFN4RFFVRk9MRWxCUVZjc1RVRkJUU3hSUVVGcVFpeEpRVUUyUWl4TlFVRk5MRU5CUVVNc1VVRkJlRU1zUlVGQmEwUTdRVUZEY2tRc2IwSkJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVb3NTVUZCVXl4RFFVRkRMRU5CUVZnc1NVRkJaMElzUzBGQlN5eExRVUZNTEVOQlFWY3NTMEZCU3l4SFFVRk1MRU5CUVZNc1EwRkJWQ3hEUVVGWUxFTkJRWEJDTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmxCUVVrc1MwRkJTeXhIUVVGVUxFVkJRV003UVVGRFZpeHRRa0ZCVHl4RFFVRkRMRU5CUVZJN1FVRkRTRHRCUVVORUxGbEJRVWtzU1VGQlNTeExRVUZMTEVOQlFVd3NSMEZCVXl4RFFVRlVMRWRCUVdFc1MwRkJTeXhIUVVGTUxFTkJRVk1zVFVGQlRTeExRVUZMTEVkQlFVd3NRMEZCVXl4RFFVRlVMRU5CUVdZc1JVRkJORUlzUTBGQk5VSXNRMEZCY2tJN1FVRkRRU3hsUVVGUExFbEJRVWtzUjBGQldDeEZRVUZuUWl4SFFVRm9RaXhGUVVGeFFqdEJRVU5xUWl4blFrRkJTU3hMUVVGTExFTkJRVXdzU1VGQlZTeEZRVUZGTEVOQlFVWXNUVUZCVXl4aFFVRjJRaXhGUVVGelF6dEJRVU5zUXl4MVFrRkJUeXhEUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEdWQlFVOHNRMEZCUXl4RFFVRlNPMEZCUTBnc1MwRTNRa1E3UVVFNFFrZzdPMEZCUlVRN1FVRkRRU3hKUVVGSkxHMUNRVUZLTEVWQlFYTkNPMEZCUTJ4Q0xGZEJRVThzVVVGQlVDeEhRVUZyUWl4VlFVRlZMRWRCUVZZc1JVRkJaVHRCUVVNM1FpeFpRVUZKTEUxQlFVMHNjVUpCUVZZN1FVRkRRU3hsUVVGUExFbEJRVWtzWTBGQlNpeERRVUZ0UWl4SFFVRnVRaXhEUVVGUUxFVkJRV2RETzBGQlF6VkNMRzFDUVVGUExFdEJRVXNzVFVGQlRDeEZRVUZRTzBGQlEwZzdRVUZEUkN4WlFVRkpPMEZCUTBFc1owSkJRVWtzUjBGQlNpeEpRVUZYTEVsQlFWZzdRVUZEUVN4dFFrRkJUeXhKUVVGSkxFZEJRVW9zUTBGQlVEdEJRVU5CTEcxQ1FVRlBMRXRCUVZBN1FVRkRTQ3hUUVVwRUxFTkJTVVVzVDBGQlR5eERRVUZRTEVWQlFWVTdRVUZEVWl4dFFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFNpeExRVnBFTzBGQllVZzdRVUZEUkRzN1FVRkZRU3hKUVVGSkxEWkNRVUUyUWp0QlFVTTNRaXhUUVVGTExFbEJSSGRDTzBGQlJUZENMRk5CUVVzc1NVRkdkMEk3UVVGSE4wSXNVMEZCU3l4SlFVaDNRanRCUVVrM1FpeFRRVUZMTEVsQlNuZENPMEZCU3pkQ0xGTkJRVXNzU1VGTWQwSTdRVUZOTjBJc1UwRkJTeXhKUVU1M1FqdEJRVTgzUWl4VFFVRkxPMEZCVUhkQ0xFTkJRV3BETzBGQlUwRXNTVUZCU1N4elFrRkJjMEk3UVVGRGRFSXNVMEZCU3p0QlFVUnBRaXhEUVVFeFFqczdRVUZKUVN4VFFVRlRMSE5DUVVGVUxFTkJRV2RETEUxQlFXaERMRVZCUVhkRE8wRkJRM0JETEZkQlFVOHNWVUZCVlN4TlFVRldMRVZCUVd0Q0xFOUJRV3hDTEVOQlFUQkNMR2RDUVVFeFFpeEZRVUUwUXl4VlFVRlZMR0ZCUVZZc1JVRkJlVUk3UVVGRGVFVXNaVUZCVHl4TlFVRk5MR05CUVdNc1UwRkJaQ3hEUVVGM1FpeERRVUY0UWl4RFFVRmlPMEZCUTBnc1MwRkdUU3hEUVVGUU8wRkJSMGc3TzBGQlJVUXNVMEZCVXl4MVFrRkJWQ3hEUVVGcFF5eEpRVUZxUXl4RlFVRjFRenRCUVVOdVF5eFJRVUZKTEZkQlFWY3NSVUZCWmp0QlFVTkJMRkZCUVVrc01rSkJRVEpDTEV0QlFVc3NUVUZCVEN4RFFVRlpMRU5CUVZvc1EwRkJNMElzUTBGQlNpeEZRVUZuUkR0QlFVTTFReXh0UWtGQlZ5eExRVUZMTEUxQlFVd3NRMEZCV1N4RFFVRmFMRU5CUVZnN1FVRkRRU3hsUVVGUExFdEJRVXNzVTBGQlRDeERRVUZsTEVOQlFXWXNRMEZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3haUVVGWkxFVkJRV2hDTzBGQlEwRXNVVUZCU1N4VFFVRlRMRVZCUVdJN1FVRkRRU3hSUVVGSkxHVkJRV1VzU1VGQmJrSTdRVUZEUVN4UlFVRkpMR2RDUVVGblFpeExRVUZ3UWp0QlFVTkJMRkZCUVVrc2EwSkJRV3RDTEV0QlFYUkNPMEZCUTBFc1VVRkJTU3hoUVVGaExFZEJRV3BDTEVWQlFYTkNPMEZCUTJ4Q0xIVkNRVUZsTEV0QlFXWTdRVUZEU0N4TFFVWkVMRTFCUlU4c1NVRkJTU3hoUVVGaExFZEJRV3BDTEVWQlFYTkNPMEZCUTNwQ0xHbENRVUZUTEVkQlFWUTdRVUZEUVN4dlFrRkJXU3hIUVVGYU8wRkJRMGdzUzBGSVRTeE5RVWRCTEVsQlFVa3NZVUZCWVN4SFFVRnFRaXhGUVVGelFqdEJRVU42UWl4cFFrRkJVeXhIUVVGVU8wRkJRMEVzYjBKQlFWa3NSMEZCV2p0QlFVTklMRXRCU0Uwc1RVRkhRU3hKUVVGSkxHRkJRV0VzUjBGQmFrSXNSVUZCYzBJN1FVRkRla0lzYVVKQlFWTXNSMEZCVkR0QlFVTkJMSFZDUVVGbExFdEJRV1k3UVVGRFNDeExRVWhOTEUxQlIwRXNTVUZCU1N4aFFVRmhMRWRCUVdwQ0xFVkJRWE5DTzBGQlEzcENMR2xDUVVGVExFZEJRVlE3UVVGRFFTeHZRa0ZCV1N4SFFVRmFPMEZCUTBFc2QwSkJRV2RDTEVsQlFXaENPMEZCUTBFc01FSkJRV3RDTEVsQlFXeENPMEZCUTBnc1MwRk1UU3hOUVV0QkxFbEJRVWtzWVVGQllTeEhRVUZxUWl4RlFVRnpRanRCUVVONlFpeHBRa0ZCVXl4SFFVRlVPMEZCUTBFc2IwSkJRVmtzUjBGQldqdEJRVU5CTEhkQ1FVRm5RaXhKUVVGb1FqdEJRVU5JTEV0QlNrMHNUVUZKUVN4SlFVRkpMR0ZCUVdFc1IwRkJha0lzUlVGQmMwSTdRVUZEZWtJc2FVSkJRVk1zUjBGQlZEdEJRVU5CTEc5Q1FVRlpMRWRCUVZvN1FVRkRRU3gzUWtGQlowSXNTVUZCYUVJN1FVRkRTRHM3UVVGRlJDeFJRVUZKTEZkQlFWY3NSVUZCWmp0QlFVTkJMRkZCUVVrc1ZVRkJWU3hMUVVGTExFdEJRVXdzUTBGQlZ5eEhRVUZZTEVOQlFXUTdRVUZEUVN4UlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxGRkJRVWtzWVVGQllTeEZRVUZxUWp0QlFVTkJMRk5CUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4UlFVRlJMRTFCUVRWQ0xFVkJRVzlETEVkQlFYQkRMRVZCUVhsRE8wRkJRM0pETEZsQlFVa3NWVUZCVlN4UlFVRlJMRU5CUVZJc1EwRkJaRHRCUVVOQkxGbEJRVWtzVjBGQlZ5eEpRVUZtTzBGQlEwRXNXVUZCU1N4UlFVRlJMRTlCUVZJc1EwRkJaMElzUjBGQmFFSXNUVUZCZVVJc1EwRkJReXhEUVVFNVFpeEZRVUZwUXp0QlFVTTNRaXhuUWtGQlNTeFJRVUZSTEZGQlFWRXNTMEZCVWl4RFFVRmpMRWRCUVdRc1EwRkJXanRCUVVOQkxITkNRVUZWTEUxQlFVMHNRMEZCVGl4RFFVRldPMEZCUTBFc2RVSkJRVmNzVTBGQlV5eE5RVUZOTEVOQlFVNHNRMEZCVkN4RlFVRnRRaXhGUVVGdVFpeERRVUZZTzBGQlEwZzdRVUZEUkN4WlFVRkpMRmRCUVZjc1JVRkJaanRCUVVOQkxHVkJRVThzYjBKQlFXOUNMRkZCUVZFc1RVRkJVaXhEUVVGbExGRkJRVkVzVFVGQlVpeEhRVUZwUWl4RFFVRm9ReXhEUVVGd1FpeERRVUZRTEVWQlFXZEZPMEZCUXpWRUxIRkNRVUZUTEZGQlFWRXNUVUZCVWl4RFFVRmxMRkZCUVZFc1RVRkJVaXhIUVVGcFFpeERRVUZvUXl4RFFVRlVMRWxCUVN0RExFbEJRUzlETzBGQlEwRXNjMEpCUVZVc1VVRkJVU3hUUVVGU0xFTkJRV3RDTEVOQlFXeENMRVZCUVhGQ0xGRkJRVkVzVFVGQlVpeEhRVUZwUWl4RFFVRjBReXhEUVVGV08wRkJRMGc3UVVGRFJDeFpRVUZKTEZWQlFWVTdRVUZEVml4elFrRkJWU3hSUVVSQk8wRkJSVllzYTBKQlFVMHNUMEZHU1R0QlFVZFdMSE5DUVVGVk8wRkJTRUVzVTBGQlpEdEJRVXRCTEdsQ1FVRlRMRWxCUVZRc1EwRkJZeXhQUVVGa08wRkJRMEVzYlVKQlFWY3NUMEZCV0N4SlFVRnpRaXhQUVVGMFFqdEJRVU5CTEdsQ1FVRlRMRWxCUVZRc1EwRkJZeXhQUVVGa08wRkJRMGc3UVVGRFJDeFJRVUZKTEdOQlFXTXNVMEZCWkN4WFFVRmpMRU5CUVZVc1lVRkJWaXhGUVVGNVFqdEJRVU4yUXl4WlFVRkpMRk5CUVZNc1JVRkJZanRCUVVOQkxGbEJRVWtzWVVGQllTeERRVUZxUWp0QlFVTkJMR0ZCUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4VFFVRlRMRTFCUVRkQ0xFVkJRWEZETEVkQlFYSkRMRVZCUVRCRE8wRkJRM1JETEdkQ1FVRkpMRlZCUVZVc1UwRkJVeXhEUVVGVUxFTkJRV1E3UVVGRFFTeG5Ra0ZCU1N4UlFVRlJMR05CUVdNc1VVRkJVU3hKUVVGMFFpeERRVUZhTzBGQlEwRXNaMEpCUVVrc1ZVRkJWU3hKUVVGV0xFbEJRV3RDTEZWQlFWVXNVMEZCTlVJc1NVRkJNRU1zVFVGQlRTeFBRVUZPTEVOQlFXTXNTMEZCWkN4TFFVRjNRaXhOUVVGTkxFMUJRVTRzUzBGQmFVSXNRMEZCYmtZc1NVRkJNRVlzVVVGQlR5eExRVUZRTEhWRVFVRlBMRXRCUVZBc1QwRkJhVUlzVVVGQmFrSXNTVUZCTmtJc2IwSkJRVmtzUzBGQldpeEZRVUZ0UWl4TlFVRnVRaXhMUVVFNFFpeERRVUY2U2l4RlFVRTJTanRCUVVONlNqdEJRVU5CTzBGQlEwZzdRVUZEUkN4blFrRkJTU3hOUVVGTkxGVkJRVllzUlVGQmMwSTdRVUZEYkVJc01FSkJRVlVzVFVGQlZqdEJRVU5JTEdGQlJrUXNUVUZGVHp0QlFVTklMREJDUVVGWExHRkJRV0VzUjBGQmVFSTdRVUZEU0R0QlFVTkVMR2RDUVVGSkxFMUJRVTBzVDBGQlRpeERRVUZqTEV0QlFXUXNRMEZCU2l4RlFVRXdRanRCUVVOMFFpeHZRa0ZCU1N4aFFVRktMRVZCUVcxQ08wRkJRMllzT0VKQlFWVXNVVUZCVVN4SlFVRlNMRWRCUVdVc1IwRkJla0k3UVVGRFNEdEJRVU5FTEhGQ1FVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NUVUZCVFN4TlFVRXhRaXhGUVVGclF5eEhRVUZzUXl4RlFVRjFRenRCUVVOdVF5eDNRa0ZCU1N4SlFVRkpMRU5CUVZJc1JVRkJWenRCUVVOUUxHdERRVUZWTEZGQlFWRXNVVUZCVWl4RFFVRnBRaXhIUVVGcVFpeEpRVUY1UWl4aFFVRmhMRWRCUVhSRExFZEJRVFpETEVkQlFYWkVPMEZCUTBFc05FSkJRVWtzVVVGQlVTeFJRVUZTTEVOQlFXbENMRWRCUVdwQ0xFdEJRWGxDTEdGQlFUZENMRVZCUVRSRE8wRkJRM2hETEhORFFVRlZMRkZCUVZFc1NVRkJVaXhIUVVGbExFZEJRWHBDTzBGQlEwZzdRVUZEU2p0QlFVTkVMRGhDUVVGVkxHVkJRV1VzYlVKQlFXMUNMRTFCUVUwc1EwRkJUaXhEUVVGdVFpeEZRVUUyUWl4UFFVRTNRaXhEUVVGeFF5eEpRVUZ5UXl4RlFVRXlReXhMUVVFelF5eERRVUZtTEVkQlFXMUZMSFZDUVVGMVFpeE5RVUZOTEVOQlFVNHNRMEZCZGtJc1EwRkJOMFU3UVVGRFNEdEJRVU5LTEdGQllrUXNUVUZoVHl4SlFVRkpMRkZCUVU4c1MwRkJVQ3gxUkVGQlR5eExRVUZRTEU5QlFXbENMRkZCUVhKQ0xFVkJRU3RDTzBGQlEyeERMRzlDUVVGSkxHbENRVUZwUWl4RFFVRkRMRkZCUVZFc1VVRkJVaXhEUVVGcFFpeEhRVUZxUWl4RFFVRjBRaXhGUVVFMlF6dEJRVU42UXl3NFFrRkJWU3hSUVVGUkxFbEJRVklzUjBGQlpTeEhRVUY2UWp0QlFVTklPMEZCUTBRc2IwSkJRVWtzVVVGQlVTeEpRVUZhTzBGQlEwRXNjVUpCUVVzc1NVRkJTU3hIUVVGVUxFbEJRV2RDTEV0QlFXaENMRVZCUVhWQ08wRkJRMjVDTEhkQ1FVRkpMRU5CUVVNc1MwRkJUQ3hGUVVGWk8wRkJRMUlzYTBOQlFWVXNVVUZCVVN4UlFVRlNMRU5CUVdsQ0xFZEJRV3BDTEVsQlFYbENMR0ZCUVdFc1IwRkJkRU1zUjBGQk5rTXNSMEZCZGtRN1FVRkRTRHRCUVVORUxEUkNRVUZSTEV0QlFWSTdRVUZEUVN3NFFrRkJWU3hsUVVGbExHMUNRVUZ0UWl4SFFVRnVRaXhGUVVGM1FpeFBRVUY0UWl4RFFVRm5ReXhKUVVGb1F5eEZRVUZ6UXl4TFFVRjBReXhEUVVGbUxFZEJRVGhFTEhWQ1FVRjFRaXhIUVVGMlFpeERRVUY0UlR0QlFVTkJMRGhDUVVGVkxGRkJRVkVzVVVGQlVpeERRVUZwUWl4SFFVRnFRaXhKUVVGM1FpeEhRVUY0UWl4SFFVRTRRaXhIUVVGNFF6dEJRVU5CTERoQ1FVRlZMR1ZCUVdVc2JVSkJRVzFDTEUxQlFVMHNSMEZCVGl4RFFVRnVRaXhGUVVFclFpeFBRVUV2UWl4RFFVRjFReXhKUVVGMlF5eEZRVUUyUXl4TFFVRTNReXhEUVVGbUxFZEJRWEZGTEhWQ1FVRjFRaXhOUVVGTkxFZEJRVTRzUTBGQmRrSXNRMEZCTDBVN1FVRkRTRHRCUVVOS0xHRkJaRTBzVFVGalFUdEJRVU5JTEc5Q1FVRkpMR0ZCUVVvc1JVRkJiVUk3UVVGRFppdzRRa0ZCVlN4UlFVRlJMRWxCUVd4Q08wRkJRMEVzZDBKQlFVa3NRMEZCUXl4bFFVRkVMRWxCUVc5Q0xGVkJRVlVzUlVGQmJFTXNSVUZCYzBNN1FVRkRiRU1zYTBOQlFWVXNSMEZCVmp0QlFVTklPMEZCUTBvN1FVRkRSQ3h2UWtGQlNTeFJRVUZSTEZGQlFWSXNTVUZCYjBJc1NVRkJlRUlzUlVGQk9FSTdRVUZETVVJc05FSkJRVkVzVFVGQlRTeFRRVUZPTEVOQlFXZENMRU5CUVdoQ0xFVkJRVzFDTEZGQlFWRXNVVUZCTTBJc1EwRkJVanRCUVVOSU8wRkJRMFFzTUVKQlFWVXNaVUZCWlN4dFFrRkJiVUlzUzBGQmJrSXNSVUZCTUVJc1QwRkJNVUlzUTBGQmEwTXNTVUZCYkVNc1JVRkJkME1zUzBGQmVFTXNRMEZCWml4SFFVRm5SU3gxUWtGQmRVSXNTMEZCZGtJc1EwRkJNVVU3UVVGRFNEdEJRVU5LTzBGQlEwUXNaVUZCVHl4TlFVRlFPMEZCUTBnc1MwRjRSRVE3UVVGNVJFRXNaMEpCUVZrc1VVRkJXaXhIUVVGMVFpeFJRVUYyUWp0QlFVTkJMRmRCUVU4N1FVRkRTQ3huUWtGQlVTeE5RVVJNTzBGQlJVZ3NjMEpCUVdNN1FVRkdXQ3hMUVVGUU8wRkJTVWc3TzBGQlJVUXNVMEZCVXl4WFFVRlVMRU5CUVhGQ0xGRkJRWEpDTEVWQlFTdENPMEZCUXpOQ0xGRkJRVWtzUlVGQlJTeG5Ra0ZCWjBJc1YwRkJiRUlzUTBGQlNpeEZRVUZ2UXp0QlFVTm9ReXhsUVVGUExFbEJRVWtzVjBGQlNpeERRVUZuUWl4UlFVRm9RaXhEUVVGUU8wRkJRMGc3UVVGRFJDeFJRVUZKTEZGQlFWRXNVMEZCVXl4TFFVRlVMRU5CUVdVc1IwRkJaaXhEUVVGYU8wRkJRMEVzVVVGQlNTeFpRVUZaTEVOQlFVTXNUVUZCVFN4TFFVRk9MRVZCUVVRc1EwRkJhRUk3UVVGRFFTeFJRVUZKTEZkQlFWY3NSVUZCWmp0QlFVTkJMRkZCUVVrc1owSkJRV2RDTEVWQlFYQkNPMEZCUTBFc1VVRkJTU3hYUVVGWExFVkJRV1k3UVVGRFFTeFhRVUZQTEUxQlFVMHNUVUZCVGl4SFFVRmxMRU5CUVhSQ0xFVkJRWGxDTzBGQlEzSkNMRmxCUVVrc1QwRkJUeXhOUVVGTkxFdEJRVTRzUlVGQldEdEJRVU5CTEZsQlFVa3NUMEZCVHl4TFFVRkxMRXRCUVV3c1EwRkJWeXhIUVVGWUxFVkJRV2RDTEVOQlFXaENMRU5CUVZnN1FVRkRRU3haUVVGSkxGbEJRVmtzUzBGQlN5eFRRVUZNTEVOQlFXVXNTMEZCU3l4TlFVRk1MRWRCUVdNc1EwRkJOMElzUTBGQmFFSTdRVUZEUVN4WlFVRkpMRkZCUVZFc2QwSkJRWGRDTEVsQlFYaENMRU5CUVZvN1FVRkRRU3h6UWtGQll5eEpRVUZrTEVOQlFXMUNMRTFCUVUwc1dVRkJla0k3UVVGRFFTeHBRa0ZCVXl4SlFVRlVMRU5CUVdNc1RVRkJUU3hOUVVGd1FqdEJRVU5CTEd0Q1FVRlZMRWxCUVZZc1EwRkJaU3hUUVVGbU8wRkJRMEVzYlVKQlFWY3NVMEZCVXl4TlFVRlVMRU5CUVdkQ0xFMUJRVTBzV1VGQlRpeERRVUZ0UWl4UlFVRnVReXhEUVVGWU8wRkJRMGc3UVVGRFJDeFRRVUZMTEVsQlFVd3NSMEZCV1N4VlFVRlZMR0ZCUVZZc1JVRkJlVUk3UVVGRGFrTXNXVUZCU1N4VFFVRlRMRlZCUVZVc1EwRkJWaXhEUVVGaU8wRkJRMEVzWVVGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxHTkJRV01zVFVGQmJFTXNSVUZCTUVNc1IwRkJNVU1zUlVGQkswTTdRVUZETTBNc1owSkJRVWtzWlVGQlpTeGpRVUZqTEVOQlFXUXNRMEZCYmtJN1FVRkRRU3h6UWtGQlZTeGhRVUZoTEdGQlFXSXNRMEZCVmp0QlFVTkJMSE5DUVVGVkxGVkJRVlVzU1VGQlNTeERRVUZrTEVOQlFWWTdRVUZEU0R0QlFVTkVMR1ZCUVU4c1RVRkJVRHRCUVVOSUxFdEJVa1E3UVVGVFFTeFRRVUZMTEZGQlFVd3NSMEZCWjBJc1VVRkJhRUk3UVVGRFFTeFRRVUZMTEZGQlFVd3NSMEZCWjBJc1VVRkJhRUk3UVVGRFNEczdRVUZGUkN4WlFVRlpMRk5CUVZvc1IwRkJkMEk3UVVGRGNFSXNZMEZCVlN4dlFrRkJXVHRCUVVOc1FpeGxRVUZQTEV0QlFVc3NVVUZCV2p0QlFVTklMRXRCU0cxQ08wRkJTWEJDTEc5Q1FVRm5RaXgzUWtGQlZTeEhRVUZXTEVWQlFXVTdRVUZETTBJc1pVRkJUeXhMUVVGTExFbEJRVXdzUTBGQlZTeFZRVUZWTEU5QlFWWXNSVUZCYlVJN1FVRkRhRU1zYlVKQlFVOHNTVUZCU1N4UFFVRktMRU5CUVZBN1FVRkRTQ3hUUVVaTkxFTkJRVkE3UVVGSFNEdEJRVkp0UWl4RFFVRjRRanRCUVZWQkxFbEJRVWtzYlVKQlFXMUNMRk5CUVZNc1owSkJRVlFzUTBGQk1FSXNUVUZCTVVJc1JVRkJhME1zWlVGQmJFTXNSVUZCYlVRc1lVRkJia1FzUlVGQmEwVXNZMEZCYkVVc1JVRkJhMFlzYzBKQlFXeEdMRVZCUVRCSE8wRkJRemRJTEZOQlFVc3NUMEZCVEN4SFFVRmxMRVZCUVdZN1FVRkRRU3hUUVVGTExGVkJRVXdzUjBGQmEwSXNSVUZCYkVJN1FVRkRRU3hUUVVGTExHZENRVUZNTEVkQlFYZENMRk5CUVZNc2MwSkJRV01zVDBGQlR5eG5Ra0ZCY2tJc1EwRkJWQ3hIUVVGclJDeEZRVUV4UlR0QlFVTkJMRk5CUVVzc1QwRkJUQ3hIUVVGbExGTkJRVk1zYzBKQlFXTXNUMEZCVHl4UFFVRnlRaXhEUVVGVUxFZEJRWGxETEVWQlFYaEVPMEZCUTBFc1UwRkJTeXhsUVVGTUxFZEJRWFZDTEdWQlFYWkNPMEZCUTBFc1UwRkJTeXhOUVVGTUxFZEJRV01zUlVGQlpEdEJRVU5CTEZOQlFVc3NWMEZCVEN4SFFVRnRRaXhyUWtGQmEwSXNTMEZCU3l4WlFVRjJRaXhIUVVGelF5eExRVUZMTEZkQlFUbEVPMEZCUTBFc1VVRkJTU3hqUVVGS0xFVkJRVzlDTzBGQlEyaENMR0ZCUVVzc1kwRkJUQ3hIUVVGelFpeEpRVUYwUWp0QlFVTkJMR0ZCUVVzc1QwRkJUQ3hIUVVGbExFVkJRV1k3UVVGRFFTeGhRVUZMTEdGQlFVd3NSMEZCY1VJc1JVRkJja0k3UVVGRFFTeGhRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xFVkJRVFZDTzBGQlEwRXNZVUZCU3l3MlFrRkJUQ3hIUVVGeFF5eEZRVUZ5UXp0QlFVTkJMR0ZCUVVzc2JVSkJRVXdzUjBGQk1rSXNiVUpCUVROQ08wRkJRMEVzWVVGQlN5eHRRa0ZCVEN4SFFVRXlRaXd3UWtGQk0wSTdRVUZEU0R0QlFVTkVMRkZCUVVrc2MwSkJRVW9zUlVGQk5FSTdRVUZEZUVJc1lVRkJTeXh6UWtGQlRDeEhRVUU0UWl4SlFVRTVRanRCUVVOQkxHRkJRVXNzYTBKQlFVd3NSMEZCTUVJc1JVRkJNVUk3UVVGRFFTeGhRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xFVkJRVFZDTzBGQlEwZzdRVUZEUkN4VFFVRkxMR0ZCUVV3c1IwRkJjVUlzYVVKQlFXbENMSEZDUVVGeFFpeEpRVUZ5UWl4RFFVRjBRenRCUVVOQkxGRkJRVWtzVDBGQlR5eExRVUZMTEdGQlFWb3NTMEZCT0VJc1VVRkJiRU1zUlVGQk5FTTdRVUZEZUVNc1kwRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTeFBRVUZXTEVOQlFVNDdRVUZEU0R0QlFVTkVMRk5CUVVzc1pVRkJUQ3hIUVVGMVFpeEZRVUYyUWp0QlFVTkJMRkZCUVVrc1RVRkJTaXhGUVVGWk8wRkJRMUlzWVVGQlN5eEpRVUZKTEVkQlFWUXNTVUZCWjBJc1QwRkJUeXhsUVVGMlFpeEZRVUYzUXp0QlFVTndReXhwUWtGQlN5eGxRVUZNTEVOQlFYRkNMRWRCUVhKQ0xFbEJRVFJDTEU5QlFVOHNaVUZCVUN4RFFVRjFRaXhIUVVGMlFpeEZRVUUwUWl4TFFVRTFRaXhEUVVGclF5eERRVUZzUXl4RFFVRTFRanRCUVVOSU8wRkJRMG83UVVGRFNpeERRV2hEUkR0QlFXbERRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzWVVGQk0wSXNSMEZCTWtNc1ZVRkJWU3hQUVVGV0xFVkJRVzFDTEdWQlFXNUNMRVZCUVc5RE8wRkJRek5GTEZOQlFVc3NaVUZCVEN4RFFVRnhRaXhQUVVGeVFpeEpRVUZuUXl4TFFVRkxMR1ZCUVV3c1EwRkJjVUlzVDBGQmNrSXNTMEZCYVVNc1JVRkJha1U3UVVGRFFTeFRRVUZMTEdWQlFVd3NRMEZCY1VJc1QwRkJja0lzUlVGQk9FSXNTVUZCT1VJc1EwRkJiVU1zWlVGQmJrTTdRVUZEU0N4RFFVaEVPMEZCU1VFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xGZEJRVE5DTEVkQlFYbERMRlZCUVZVc1NVRkJWaXhGUVVGblFpeGhRVUZvUWl4RlFVRXJRaXhSUVVFdlFpeEZRVUY1UXl4VlFVRjZReXhGUVVGeFJDeFRRVUZ5UkN4RlFVRm5SU3hKUVVGb1JTeEZRVUZ6UlN4TlFVRjBSU3hGUVVFNFJUdEJRVU51U0N4UlFVRkpMRkZCUVZFc1NVRkJTU3hsUVVGS0xFTkJRVzlDTEVsQlFYQkNMRVZCUVRCQ0xHRkJRVEZDTEVWQlFYbERMRkZCUVhwRExFVkJRVzFFTEZWQlFXNUVMRVZCUVN0RUxGTkJRUzlFTEVOQlFWbzdRVUZEUVN4VlFVRk5MRTlCUVU0c1IwRkJaMElzUzBGQlN5eGhRVUZNTEVOQlFXMUNMRXRCUVc1Q0xFVkJRVEJDTEVsQlFURkNMRVZCUVdkRExFMUJRV2hETEVOQlFXaENPMEZCUTBFc1YwRkJUeXhMUVVGUU8wRkJRMGdzUTBGS1JEdEJRVXRCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4WFFVRXpRaXhIUVVGNVF5eFZRVUZWTEV0QlFWWXNSVUZCYVVJN1FVRkRkRVFzVjBGQlR5eExRVUZRTzBGQlEwZ3NRMEZHUkR0QlFVZEJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhaUVVFelFpeEhRVUV3UXl4VlFVRlZMRXRCUVZZc1JVRkJhVUk3UVVGRGRrUXNVVUZCU1N4TFFVRktMRVZCUVZjN1FVRkRVQ3hoUVVGTExFMUJRVXdzUTBGQldTeEpRVUZhTEVOQlFXbENMRXRCUVdwQ08wRkJRMGc3UVVGRFJDeFhRVUZQTEVsQlFWQTdRVUZEU0N4RFFVeEVPMEZCVFVFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xGbEJRVE5DTEVkQlFUQkRMRlZCUVZVc1ZVRkJWaXhGUVVGelFpeFJRVUYwUWl4RlFVRm5ReXhWUVVGb1F5eEZRVUUwUXp0QlFVTnNSaXhUUVVGTExFbEJRVWtzU1VGQlNTeFZRVUZpTEVWQlFYbENMRWxCUVVrc1MwRkJTeXhOUVVGTUxFTkJRVmtzVFVGQmVrTXNSVUZCYVVRc1IwRkJha1FzUlVGQmMwUTdRVUZEYkVRc1lVRkJTeXhOUVVGTUxFTkJRVmtzUTBGQldpeEpRVUZwUWl4TFFVRkxMRTFCUVV3c1EwRkJXU3hEUVVGYUxFVkJRV1VzVlVGQlppeERRVUV3UWl4UlFVRXhRaXhGUVVGdlF5eFZRVUZ3UXl4RFFVRnFRanRCUVVOSU8wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEZNUkR0QlFVMUJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXh2UWtGQk0wSXNSMEZCYTBRc1ZVRkJWU3hKUVVGV0xFVkJRV2RDTEUxQlFXaENMRVZCUVhkQ08wRkJRM1JGTEZOQlFVc3NTVUZCU1N4WFFVRlVMRWxCUVhkQ0xFdEJRVXNzYjBKQlFUZENMRVZCUVcxRU8wRkJReTlETEZsQlFVa3NVVUZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eG5Ra0ZCTlVJc1JVRkJPRU1zUlVGQlF5eE5RVUZOTEZkQlFWQXNSVUZCT1VNc1JVRkJiVVVzVjBGQmJrVXNSVUZCWjBZc1JVRkJhRVlzUlVGQmIwWXNTVUZCY0VZc1JVRkJNRVlzU1VGQk1VWXNSVUZCWjBjc1RVRkJhRWNzUTBGQldqdEJRVU5CTEZsQlFVa3NVMEZCVXl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQmFrSXNRMEZCWWp0QlFVTkJMRmxCUVVrc1RVRkJTaXhGUVVGWk8wRkJRMUlzYlVKQlFVOHNUVUZCVUR0QlFVTklPMEZCUTBvN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFNDeERRVlJFT3p0QlFWZEJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhUUVVFelFpeEhRVUYxUXl4VlFVRlZMRTFCUVZZc1JVRkJhMElzVTBGQmJFSXNSVUZCTmtJN1FVRkRhRVVzVVVGQlNTeFJRVUZQTEUxQlFWQXNkVVJCUVU4c1RVRkJVQ3hQUVVGclFpeFJRVUYwUWl4RlFVRm5RenRCUVVNMVFpeGhRVUZMTEVsQlFVa3NSMEZCVkN4SlFVRm5RaXhOUVVGb1FpeEZRVUYzUWp0QlFVTndRaXhwUWtGQlN5eFRRVUZNTEVOQlFXVXNSMEZCWml4RlFVRnZRaXhQUVVGUExFZEJRVkFzUTBGQmNFSTdRVUZEU0R0QlFVTkVMR1ZCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMFFzVTBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhOUVVGMFFpeEpRVUZuUXl4VFFVRm9RenRCUVVOSUxFTkJVa1E3UVVGVFFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNWMEZCTTBJc1IwRkJlVU1zVlVGQlZTeE5RVUZXTEVWQlFXdENMRlZCUVd4Q0xFVkJRVGhDTzBGQlEyNUZMRkZCUVVrc1QwRkJUeXhOUVVGUUxFMUJRVzFDTEZOQlFYWkNMRVZCUVd0RE8wRkJRemxDTEhGQ1FVRmhMR05CUVdNc1JVRkJNMEk3UVVGRFFTeFpRVUZKTEZkQlFWY3NUMEZCVHl4TlFVRlFMRU5CUVZnc1EwRkJTaXhGUVVGblF6dEJRVU0xUWl4dFFrRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4clFrRkJOVUlzUlVGQlowUXNSVUZCUXl4TlFVRk5MRzlDUVVGWkxGVkJRVm9zUlVGQmQwSXNTVUZCZUVJc1EwRkJOa0lzU1VGQk4wSXNRMEZCVUN4RlFVRm9SQ3hGUVVFMFJpeEZRVUUxUml4RlFVRm5SeXhGUVVGb1J5eEZRVUZ2Unl4SlFVRndSeXhGUVVFd1J5eFRRVUV4Unl4RlFVRnhTQ3hOUVVGeVNDeERRVUZRTzBGQlEwZzdRVUZEUkN4dFFrRkJWeXhQUVVGUExFMUJRVkFzUTBGQldDeEpRVUUyUWl4SlFVRTNRanRCUVVOQkxHbENRVUZUTEV0QlFVc3NVMEZCVEN4RFFVRmxMRTlCUVU4c1RVRkJVQ3hEUVVGbUxFVkJRU3RDTEZWQlFTOUNMRU5CUVZRN1FVRkRTRHRCUVVORUxGZEJRVThzVFVGQlVEdEJRVU5JTEVOQlZrUTdRVUZYUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1UwRkJNMElzUjBGQmRVTXNWVUZCVlN4SFFVRldMRVZCUVdVc1ZVRkJaaXhGUVVFeVFqdEJRVU01UkN4UlFVRkpMRTFCUVVvN1FVRkRRU3hSUVVGSkxFdEJRVXNzVDBGQlRDeERRVUZoTEVkQlFXSXNUVUZCYzBJc1UwRkJNVUlzUlVGQmNVTTdRVUZEYWtNc2FVSkJRVk1zUzBGQlN5eFBRVUZNTEVOQlFXRXNSMEZCWWl4RFFVRlVPMEZCUTBFc1pVRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNUVUZCYWtJc1JVRkJlVUlzVlVGQmVrSXNRMEZCVUR0QlFVTklPMEZCUTBRc1VVRkJTU3hWUVVGVkxFZEJRV1E3UVVGRFFTeFJRVUZKTEZkQlFWY3NSVUZCWmp0QlFVTkJMRkZCUVVrc1NVRkJTU3hQUVVGS0xFTkJRVmtzUjBGQldpeE5RVUZ4UWl4RFFVRkRMRU5CUVRGQ0xFVkJRVFpDTzBGQlEzcENMRzFDUVVGWExFbEJRVWtzVTBGQlNpeERRVUZqTEVsQlFVa3NUMEZCU2l4RFFVRlpMRWRCUVZvc1NVRkJiVUlzUTBGQmFrTXNRMEZCV0R0QlFVTkJMR3RDUVVGVkxFbEJRVWtzVTBGQlNpeERRVUZqTEVOQlFXUXNSVUZCYVVJc1NVRkJTU3hQUVVGS0xFTkJRVmtzUjBGQldpeERRVUZxUWl4RFFVRldPMEZCUTBnN1FVRkRSQ3hSUVVGSkxITkNRVUZQTEV0QlFVc3NUMEZCVEN4RFFVRmhMRTlCUVdJc1EwRkJVQ3hOUVVGcFF5eFJRVUZ5UXl4RlFVRXJRenRCUVVNelF5eHBRa0ZCVXl4TFFVRkxMRTlCUVV3c1EwRkJZU3hQUVVGaUxFTkJRVlE3UVVGRFFTeFpRVUZKTEdOQlFXTXNiVUpCUVcxQ0xGRkJRVzVDTEVOQlFXeENPMEZCUTBFc1dVRkJTU3huUWtGQlowSXNSVUZCY0VJc1JVRkJkMEk3UVVGRGNFSXNiVUpCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEUxQlFXcENMRVZCUVhsQ0xGVkJRWHBDTEVOQlFWQTdRVUZEU0N4VFFVWkVMRTFCUlU4c1NVRkJTU3haUVVGWkxFMUJRVm9zUTBGQmJVSXNRMEZCYmtJc1RVRkJNRUlzUjBGQk9VSXNSVUZCYlVNN1FVRkRkRU1zYlVKQlFVOHNVMEZCVUR0QlFVTklPMEZCUTBRc1dVRkJTU3hSUVVGUkxGbEJRVmtzUzBGQldpeERRVUZyUWl4SFFVRnNRaXhGUVVGMVFpeExRVUYyUWl4RFFVRTJRaXhEUVVFM1FpeERRVUZhTzBGQlEwRXNZVUZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEUxQlFVMHNUVUZCTVVJc1JVRkJhME1zUjBGQmJFTXNSVUZCZFVNN1FVRkRia01zWjBKQlFVa3NXVUZCV1N4TlFVRk5MRU5CUVU0c1JVRkJVeXhQUVVGVUxFTkJRV2xDTEV0QlFXcENMRVZCUVhkQ0xFZEJRWGhDTEVWQlFUWkNMRTlCUVRkQ0xFTkJRWEZETEV0QlFYSkRMRVZCUVRSRExFZEJRVFZETEVOQlFXaENPMEZCUTBFc1owSkJRVWtzVDBGQlR5eFRRVUZRTEUxQlFYTkNMRk5CUVRGQ0xFVkJRWEZETzBGQlEycERMSGxDUVVGVExGTkJRVlE3UVVGRFFUdEJRVU5JTzBGQlEwUXNjVUpCUVZNc1QwRkJUeXhUUVVGUUxFTkJRVlE3UVVGRFNEdEJRVU5FTEZsQlFVa3NWMEZCVnl4VFFVRm1MRVZCUVRCQ08wRkJRM1JDTEcxQ1FVRlBMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeE5RVUZxUWl4RlFVRjVRaXhWUVVGNlFpeERRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMRkZCUVVrc1MwRkJTeXhQUVVGTUxFTkJRV0VzVDBGQllpeE5RVUV3UWl4VFFVRTVRaXhGUVVGNVF6dEJRVU55UXl4aFFVRkxMRTlCUVV3c1EwRkJZU3hKUVVGaUxFTkJRV3RDTEU5QlFXeENPMEZCUTBFc1lVRkJTeXhQUVVGTUxFTkJRV0VzVDBGQllpeEpRVUYzUWl4UFFVRjRRanRCUVVOQkxHRkJRVXNzVlVGQlRDeERRVUZuUWl4UFFVRm9RaXhKUVVFeVFpeFBRVUV6UWp0QlFVTklPMEZCUTBvc1EwRjBRMFE3UVVGMVEwRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR0ZCUVROQ0xFZEJRVEpETEZWQlFWVXNUVUZCVml4RlFVRnJRaXhIUVVGc1FpeEZRVUYxUWp0QlFVTTVSQ3hSUVVGSkxFMUJRVTBzVDBGQlRpeERRVUZqTEUxQlFXUXNRMEZCU2l4RlFVRXlRanRCUVVOMlFpeGhRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzVDBGQlR5eE5RVUV6UWl4RlFVRnRReXhIUVVGdVF5eEZRVUYzUXp0QlFVTndReXhwUWtGQlN5eGhRVUZNTEVOQlFXMUNMRTlCUVU4c1EwRkJVQ3hEUVVGdVFpeEZRVUU0UWl4SFFVRTVRanRCUVVOSU8wRkJRMG9zUzBGS1JDeE5RVWxQTEVsQlFVa3NWVUZCVlN4UlFVRlBMRTFCUVZBc2RVUkJRVThzVFVGQlVDeFBRVUZyUWl4UlFVRm9ReXhGUVVFd1F6dEJRVU0zUXl4WlFVRkpMRTlCUVU4c1QwRkJUeXhGUVVGa0xFdEJRWEZDTEZGQlFYcENMRVZCUVcxRE8wRkJReTlDTEdkQ1FVRkpMR0ZCUVdFc1IwRkJZaXhGUVVGclFpeFBRVUZQTEVWQlFYcENMRU5CUVVvc1JVRkJhME03UVVGRE9VSXNiMEpCUVVrc1MwRkJTeXhQUVVGTUxFTkJRV0VzVDBGQlR5eEZRVUZ3UWl4TlFVRTBRaXhUUVVGb1F5eEZRVUV5UXp0QlFVTjJReXg1UWtGQlN5eFBRVUZNTEVOQlFXRXNUMEZCVHl4RlFVRndRaXhKUVVFd1FpeE5RVUV4UWp0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxHRkJRVXNzU1VGQlNTeEhRVUZVTEVsQlFXZENMRTFCUVdoQ0xFVkJRWGRDTzBGQlEzQkNMR2RDUVVGSkxGRkJRVkVzVFVGQldpeEZRVUZ2UWp0QlFVTm9RaXh2UWtGQlNTeHpRa0ZCVHl4UFFVRlBMRWRCUVZBc1EwRkJVQ3hOUVVGMVFpeFJRVUV6UWl4RlFVRnhRenRCUVVOcVF5eDVRa0ZCU3l4aFFVRk1MRU5CUVcxQ0xFOUJRVThzUjBGQlVDeERRVUZ1UWl4RlFVRm5ReXhIUVVGb1F6dEJRVU5JTEdsQ1FVWkVMRTFCUlU4c1NVRkJTU3hSUVVGUkxFMUJRVm9zUlVGQmIwSTdRVUZEZGtJc2QwSkJRVWtzVFVGQlRTeGxRVUZsTEU5QlFVOHNSMEZCVUN4RFFVRm1MRU5CUVZZN1FVRkRRU3gzUWtGQlNTeFBRVUZQTEV0QlFVc3NUMEZCVEN4RFFVRmhMRWRCUVdJc1RVRkJjMElzVTBGQk4wSXNTVUZCTUVNc1MwRkJTeXhWUVVGTUxFTkJRV2RDTEVkQlFXaENMRTFCUVhsQ0xGTkJRWFpGTEVWQlFXdEdPMEZCUXpsRkxEWkNRVUZMTEZWQlFVd3NRMEZCWjBJc1IwRkJhRUlzU1VGQmRVSXNSMEZCZGtJN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNqdEJRVU5LTzBGQlEwb3NRMEV4UWtRN1FVRXlRa0VzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZOQlFUTkNMRWRCUVhWRExGVkJRVlVzUjBGQlZpeEZRVUZsTEUxQlFXWXNSVUZCZFVJN1FVRkRNVVE3UVVGRFFTeFJRVUZKTEU5QlFVOHNSMEZCVUN4TFFVRmxMRkZCUVdZc1NVRkJNa0lzVDBGQlR5eE5RVUZRTEV0QlFXdENMRmRCUVdwRUxFVkJRVGhFTzBGQlF6RkVMRmxCUVVrc1VVRkJUeXhIUVVGUUxIVkVRVUZQTEVkQlFWQXNUMEZCWlN4UlFVRm1MRWxCUVRKQ0xFOUJRVThzU1VGQlNTeEZRVUZZTEV0QlFXdENMRkZCUVdwRUxFVkJRVEpFTzBGQlEzWkVMSEZDUVVGVExFZEJRVlE3UVVGRFFTeHJRa0ZCVFN4UFFVRlBMRVZCUVdJN1FVRkRTQ3hUUVVoRUxFMUJTVXM3UVVGRFJEdEJRVU5JTzBGQlEwbzdRVUZEUkN4UlFVRkpMRkZCUVZFc1pVRkJaU3hIUVVGbUxFbEJRWE5DTEVkQlFXeERMRVZCUVhWRE8wRkJRMjVETzBGQlEwRXNZMEZCVFN4bFFVRmxMRWRCUVdZc1EwRkJUanRCUVVOSU8wRkJRMFFzVTBGQlN5eFBRVUZNTEVOQlFXRXNSMEZCWWl4SlFVRnZRaXhOUVVGd1FqdEJRVU5CTEZkQlFVOHNTMEZCU3l4VlFVRk1MRU5CUVdkQ0xFZEJRV2hDTEVOQlFWQTdRVUZEUVN4bFFVRlhMRTFCUVZnc1JVRkJiVUlzUjBGQmJrSTdRVUZEUVN4VFFVRkxMR0ZCUVV3c1EwRkJiVUlzVFVGQmJrSXNSVUZCTWtJc1IwRkJNMEk3UVVGRFNDeERRVzVDUkRzN1FVRnhRa0VzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEZsQlFUTkNMRWRCUVRCRExGbEJRVms3UVVGRGJFUXNVVUZCU1N4TlFVRk5MRVZCUVZZN1FVRkRRU3hUUVVGTExFbEJRVWtzUjBGQlZDeEpRVUZuUWl4TFFVRkxMRTlCUVhKQ0xFVkJRVGhDTzBGQlF6RkNMRmxCUVVrc1IwRkJTaXhKUVVGWExFdEJRVXNzVDBGQlRDeERRVUZoTEVkQlFXSXNRMEZCV0R0QlFVTklPMEZCUTBRc1YwRkJUeXhIUVVGUU8wRkJRMGdzUTBGT1JEczdRVUZSUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1lVRkJNMElzUjBGQk1rTXNWVUZCVlN4WlFVRldMRVZCUVhkQ08wRkJReTlFTEZGQlFVa3NUMEZCVHl4RlFVRllPMEZCUTBFc1UwRkJTeXhKUVVGSkxFZEJRVlFzU1VGQlowSXNTMEZCU3l4UFFVRnlRaXhGUVVFNFFqdEJRVU14UWl4WlFVRkpMRU5CUVVNc1dVRkJSQ3hKUVVGcFFpeGhRVUZoTEVsQlFXSXNRMEZCYTBJc1IwRkJiRUlzUTBGQmNrSXNSVUZCTmtNN1FVRkRla01zYVVKQlFVc3NTVUZCVEN4RFFVRlZMRWRCUVZZN1FVRkRTRHRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEZTUkRzN1FVRlZRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzWTBGQk0wSXNSMEZCTkVNc1ZVRkJWU3haUVVGV0xFVkJRWGRDTzBGQlEyaEZMRkZCUVVrc1QwRkJUeXhGUVVGWU8wRkJRMEVzVTBGQlN5eEpRVUZKTEVkQlFWUXNTVUZCWjBJc1MwRkJTeXhWUVVGeVFpeEZRVUZwUXp0QlFVTTNRaXhaUVVGSkxFTkJRVU1zV1VGQlJDeEpRVUZwUWl4aFFVRmhMRWxCUVdJc1EwRkJhMElzUjBGQmJFSXNRMEZCY2tJc1JVRkJOa003UVVGRGVrTXNhVUpCUVVzc1NVRkJUQ3hEUVVGVkxFZEJRVlk3UVVGRFNEdEJRVU5LTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRlNSRHM3UVVGVlFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNWMEZCTTBJc1IwRkJlVU1zV1VGQldUdEJRVU5xUkN4VFFVRkxMRTlCUVV3c1IwRkJaU3hGUVVGbU8wRkJRMEVzVTBGQlN5eExRVUZNTzBGQlEwZ3NRMEZJUkR0QlFVbEJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhMUVVFelFpeEhRVUZ0UXl4WlFVRlpPMEZCUXpORExGTkJRVXNzVDBGQlRDeEhRVUZsTEVWQlFXWTdRVUZEUVN4VFFVRkxMRlZCUVV3c1IwRkJhMElzUlVGQmJFSTdRVUZEUVN4VFFVRkxMRTFCUVV3c1IwRkJZeXhGUVVGa08wRkJRMGdzUTBGS1JEczdRVUZOUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1YwRkJNMElzUjBGQmVVTXNWVUZCVlN4SlFVRldMRVZCUVdkQ0xFMUJRV2hDTEVWQlFYZENMR0ZCUVhoQ0xFVkJRWFZETEdWQlFYWkRMRVZCUVhkRUxHVkJRWGhFTEVWQlFYbEZPMEZCUXpsSExGRkJRVWtzVVVGQlNqdEJRVU5CTEdGQlFWTXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFMUJRV3BDTEVOQlFWUTdRVUZEUVN4UlFVRkpMRU5CUVVNc1RVRkJUQ3hGUVVGaE8wRkJRMVFzWlVGQlR5eEpRVUZRTzBGQlEwZ3NTMEZHUkN4TlFVVlBMRWxCUVVrc2EwSkJRV3RDTEdWQlFYUkNMRVZCUVhWRE8wRkJRekZETEdGQlFVc3NUVUZCVEN4RFFVRlpMRWxCUVZvc1EwRkJhVUlzVFVGQmFrSTdRVUZEUVN4bFFVRlBMRTFCUVZBN1FVRkRTRHM3UVVGRlJDeFJRVUZKTEd0Q1FVRnJRaXhMUVVGTExFMUJRVXdzUTBGQldTeE5RVUZzUXp0QlFVTkJMRkZCUVVrc1YwRkJTanRCUVVGQkxGRkJRV2xDTERKQ1FVRXlRaXhKUVVFMVF6dEJRVUZCTEZGQlFXdEVMSE5DUVVGelFpeEpRVUY0UlR0QlFVTkJMRkZCUVVrc1MwRkJTeXhqUVVGTUxFbEJRWFZDTEVsQlFYWkNMRWxCUVN0Q0xGRkJRVThzU1VGQlVDeDFSRUZCVHl4SlFVRlFMRTlCUVdkQ0xGRkJRVzVFTEVWQlFUWkVPMEZCUTNwRUxHMUNRVUZYTEVOQlFVTXNTMEZCU3l4UFFVRk1MRU5CUVdFc1RVRkJla0k3UVVGRFFTeFpRVUZKTEV0QlFVc3NTMEZCU3l4dFFrRkJWaXhEUVVGS0xFVkJRVzlETzBGQlEyaERMR2RDUVVGSkxHTkJRV01zUzBGQlN5eExRVUZMTEcxQ1FVRldMRVZCUVN0Q0xFOUJRUzlDTEVOQlFYVkRMRTFCUVhaRExFTkJRV3hDTzBGQlEwRXNaMEpCUVVrc1owSkJRV2RDTEVOQlFVTXNRMEZCY2tJc1JVRkJkMEk3UVVGRGNFSXNjVUpCUVVzc1RVRkJUQ3hIUVVGakxFdEJRVXNzVFVGQlRDeERRVUZaTEUxQlFWb3NRMEZCYlVJc1MwRkJTeXhMUVVGTExHMUNRVUZXTEVWQlFTdENMRmRCUVM5Q0xFTkJRVzVDTEVOQlFXUTdRVUZEUVN4MVFrRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEZsQlFVa3NkMEpCUVdkQ0xFbEJRV2hDTEVOQlFVb3NSVUZCTWtJN1FVRkRka0lzTUVKQlFXTXNTMEZCU3l4aFFVRk1MRU5CUVcxQ0xFOUJRVzVDTEVOQlFUSkNMRWxCUVROQ0xFTkJRV1E3UVVGRFFTeG5Ra0ZCU1N4blFrRkJaMElzUTBGQlF5eERRVUZ5UWl4RlFVRjNRanRCUVVOd1FpeHZRa0ZCU1N4dlFrRkJiMElzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhYUVVFeFFpeEZRVUYxUXl4UFFVRjJReXhEUVVFclF5eE5RVUV2UXl4RFFVRjRRanRCUVVOQkxHOUNRVUZKTEhOQ1FVRnpRaXhEUVVGRExFTkJRVE5DTEVWQlFUaENPMEZCUXpGQ0xIbENRVUZMTEUxQlFVd3NSMEZCWXl4TFFVRkxMRTFCUVV3c1EwRkJXU3hOUVVGYUxFTkJRVzFDTEV0QlFVc3NOa0pCUVV3c1EwRkJiVU1zVjBGQmJrTXNSVUZCWjBRc2FVSkJRV2hFTEVOQlFXNUNMRU5CUVdRN1FVRkRRU3d5UWtGQlR5eEpRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTktPMEZCUTBRc1lVRkJTeXhQUVVGTUxFTkJRV0VzU1VGQllpeERRVUZyUWl4SlFVRnNRanRCUVVOQkxGbEJRVWtzZDBKQlFXZENMRWxCUVdoQ0xFTkJRVW9zUlVGQk1rSTdRVUZEZGtJc1owSkJRVWtzWjBKQlFXZENMRU5CUVVNc1EwRkJja0lzUlVGQmQwSTdRVUZEY0VJc09FSkJRV01zUzBGQlN5eGhRVUZNTEVOQlFXMUNMRTFCUVdwRE8wRkJRMEVzY1VKQlFVc3NZVUZCVEN4RFFVRnRRaXhKUVVGdVFpeERRVUYzUWl4SlFVRjRRanRCUVVOQkxIRkNRVUZMTEc5Q1FVRk1MRU5CUVRCQ0xFbEJRVEZDTEVOQlFTdENMRVZCUVM5Q08wRkJRMGc3UVVGRFJDeDFRMEZCTWtJc1MwRkJTeXh2UWtGQlRDeERRVUV3UWl4WFFVRXhRaXhGUVVGMVF5eE5RVUZzUlR0QlFVTkJMR2xDUVVGTExHOUNRVUZNTEVOQlFUQkNMRmRCUVRGQ0xFVkJRWFZETEhkQ1FVRjJReXhKUVVGdFJTeE5RVUZ1UlR0QlFVTkJMR2xDUVVGTExEWkNRVUZNTEVOQlFXMURMRmRCUVc1RExFVkJRV2RFTEhkQ1FVRm9SQ3hKUVVFMFJTeEZRVUUxUlR0QlFVTklMRk5CVkVRc1RVRlRUenRCUVVOSUxHZENRVUZKTEVOQlFVTXNTMEZCU3l4TFFVRkxMRzFDUVVGV0xFTkJRVXdzUlVGQmNVTTdRVUZEYWtNc2IwSkJRVWs3UVVGRFFTeHJSRUZCYzBJc1NVRkJkRUlzUlVGQk5FSXNTMEZCU3l4dFFrRkJha01zUlVGQmMwUTdRVUZEYkVRc0swSkJRVThzUlVGRU1rTTdRVUZGYkVRc2MwTkJRV003UVVGR2IwTXNjVUpCUVhSRU8wRkJTVUVzYTBSQlFYTkNMRWxCUVhSQ0xFVkJRVFJDTEV0QlFVc3NiVUpCUVdwRExFVkJRWE5FTzBGQlEyeEVMQ3RDUVVGUExFVkJSREpETzBGQlJXeEVMSE5EUVVGak8wRkJSbTlETEhGQ1FVRjBSRHRCUVVsSUxHbENRVlJFTEVOQlUwVXNUMEZCVHl4RFFVRlFMRVZCUVZVN1FVRkRVanRCUVVOQkxIbENRVUZMTEV0QlFVc3NiVUpCUVZZc1NVRkJhVU1zUlVGQmFrTTdRVUZEUVN4NVFrRkJTeXhMUVVGTExHMUNRVUZXTEVsQlFXbERMRVZCUVdwRE8wRkJRMGc3UVVGRFNqdEJRVU5FTEd0RFFVRnpRaXhMUVVGTExFdEJRVXNzYlVKQlFWWXNSVUZCSzBJc1RVRkJja1E3UVVGRFFTeHBRa0ZCU3l4TFFVRkxMRzFDUVVGV0xFVkJRU3RDTEcxQ1FVRXZRaXhKUVVGelJDeE5RVUYwUkR0QlFVTkJMR2xDUVVGTExFdEJRVXNzYlVKQlFWWXNSVUZCSzBJc2JVSkJRUzlDTEVsQlFYTkVMRVZCUVhSRU8wRkJRMGc3UVVGRFNqczdRVUZGUkN4UlFVRkpMR0ZCUVdFc1MwRkJTeXhOUVVGTUxFTkJRVmtzVFVGQk4wSTdRVUZEUVN4UlFVRkpMRkZCUVZFc1MwRkJTeXhoUVVGTUxFTkJRVzFDTEVsQlFXNUNMRVZCUVhsQ0xFMUJRWHBDTEVWQlFXbERMR1ZCUVdwRExFdEJRMHdzUzBGQlN5eGxRVUZNTEVOQlFYRkNMRWxCUVhKQ0xFVkJRVEpDTEUxQlFUTkNMRVZCUVcxRExHVkJRVzVETEVOQlJFc3NTVUZGVEN4TFFVRkxMR05CUVV3c1EwRkJiMElzU1VGQmNFSXNSVUZCTUVJc1RVRkJNVUlzUlVGQmEwTXNaVUZCYkVNc1EwRkdTeXhKUVVkTUxFdEJRVXNzWVVGQlRDeERRVUZ0UWl4SlFVRnVRaXhGUVVGNVFpeE5RVUY2UWl4RlFVRnBReXhsUVVGcVF5eERRVWhMTEVsQlNVd3NTMEZCU3l4alFVRk1MRU5CUVc5Q0xFbEJRWEJDTEVWQlFUQkNMRTFCUVRGQ0xFVkJRV3RETEdWQlFXeERMRU5CU2tzc1NVRkxUQ3hMUVVGTExHOUNRVUZNTEVOQlFUQkNMRWxCUVRGQ0xFVkJRV2RETEUxQlFXaERMRVZCUVhkRExHVkJRWGhETEVOQlRFc3NTVUZOVEN4TFFVRkxMR3RDUVVGTUxFTkJRWGRDTEVsQlFYaENMRVZCUVRoQ0xFMUJRVGxDTEVWQlFYTkRMR1ZCUVhSRExFTkJUa3NzU1VGUFRDeExRVUZMTEdOQlFVd3NRMEZCYjBJc1NVRkJjRUlzUlVGQk1FSXNUVUZCTVVJc1JVRkJhME1zWlVGQmJFTXNRMEZRU3l4SlFWRk1MRXRCUVVzc2RVSkJRVXdzUTBGQk5rSXNTVUZCTjBJc1JVRkJiVU1zVFVGQmJrTXNSVUZCTWtNc1pVRkJNME1zUTBGU1N5eEpRVk5NTEVsQlZGQTdPMEZCVjBFc1VVRkJTU3hSUVVGS0xFVkJRV003UVVGRFZpeGxRVUZQTEV0QlFVc3NUMEZCVEN4RFFVRmhMRTFCUVhCQ0xFVkJRVFJDTzBGQlEzaENMR2RDUVVGSkxFOUJRVThzUzBGQlN5eFBRVUZNTEVOQlFXRXNSMEZCWWl4RlFVRllPMEZCUTBFc2JVSkJRVThzUzBGQlN5eExRVUZMTEcxQ1FVRldMRU5CUVZBN1FVRkRTRHRCUVVORUxHRkJRVXNzWVVGQlRDeEhRVUZ4UWl4RlFVRnlRanRCUVVOQkxHRkJRVXNzYjBKQlFVd3NSMEZCTkVJc1JVRkJOVUk3UVVGRFNEczdRVUZGUkN4UlFVRkpMRk5CUVZNc1pVRkJaU3hMUVVGTExFMUJRVXdzUTBGQldTeE5RVUY0UXl4RlFVRm5SRHRCUVVNMVF5eGxRVUZSTEdsQ1FVRnBRaXhqUVVGakxFMUJRV2hETEVsQlFUUkRMRzFDUVVGdFFpeG5Ra0ZCWjBJc1RVRkJkRVlzUlVGQkswWTdRVUZETTBZc1owSkJRVWtzVjBGQldTeHBRa0ZCYVVJc1kwRkJZeXhOUVVGb1F5eEhRVUV3UXl4TFFVRkxMR05CUVdNc1IwRkJaQ3hGUVVFdlF5eEhRVUZ4UlN4SlFVRndSanRCUVVOQkxHZENRVUZKTEdGQlFXTXNiVUpCUVcxQ0xHZENRVUZuUWl4TlFVRndReXhIUVVFNFF5eExRVUZMTEdkQ1FVRm5RaXhIUVVGb1FpeEZRVUZ1UkN4SFFVRXlSU3hKUVVFMVJqdEJRVU5CTEdkQ1FVRkpMRXRCUVVvc1JVRkJWenRCUVVOUUxIZENRVUZSTEUxQlFVMHNWVUZCVGl4RFFVRnBRaXhSUVVGcVFpeEZRVUV5UWl4VlFVRXpRaXhEUVVGU08wRkJRMGc3UVVGRFJDeHBRa0ZCU3l4WlFVRk1MRU5CUVd0Q0xGVkJRV3hDTEVWQlFUaENMRkZCUVRsQ0xFVkJRWGRETEZWQlFYaERPMEZCUTBnN1FVRkRTanM3UVVGRlJDeFJRVUZKTERaQ1FVRTJRaXhKUVVGcVF5eEZRVUYxUXp0QlFVTnVReXhoUVVGTExEWkNRVUZNTEVOQlFXMURMRmRCUVc1RExFVkJRV2RFTEhkQ1FVRm9SQ3hKUVVFMFJTeExRVUZMTEUxQlFVd3NRMEZCV1N4TFFVRmFMRU5CUVd0Q0xHVkJRV3hDTEVOQlFUVkZPMEZCUTBnc1MwRkdSQ3hOUVVWUExFbEJRVWtzZDBKQlFYZENMRWxCUVRWQ0xFVkJRV3RETzBGQlEzSkRMR0ZCUVVzc1MwRkJTeXh0UWtGQlZpeEZRVUVyUWl4dFFrRkJMMElzU1VGQmMwUXNTMEZCU3l4TlFVRk1MRU5CUVZrc1MwRkJXaXhEUVVGclFpeGxRVUZzUWl4RFFVRjBSRHRCUVVOSU96dEJRVVZFTEZkQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRV3BDTEVOQlFWQTdRVUZEU0N4RFFYWkhSRHRCUVhkSFFTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNZMEZCTTBJc1IwRkJORU1zVlVGQlZTeEpRVUZXTEVWQlFXZENMRTFCUVdoQ0xFVkJRWGRDTzBGQlEyaEZMRkZCUVVrc1QwRkJUeXhQUVVGUExFMUJRV1FzUzBGQmVVSXNVVUZCZWtJc1NVRkJjVU1zUTBGQlF5eExRVUZMTEdkQ1FVRk1MRU5CUVhOQ0xFOUJRVThzVFVGQk4wSXNRMEZCTVVNc1JVRkJaMFk3UVVGRE5VVXNaVUZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3hSUVVGSkxHVkJRV1VzUzBGQlN5eG5Ra0ZCVEN4RFFVRnpRaXhQUVVGUExFMUJRVGRDTEVWQlFYRkRMRWxCUVhKRExFTkJRVEJETEVsQlFURkRMRVZCUVdkRUxFbEJRV2hFTEVWQlFYTkVMRTFCUVhSRUxFTkJRVzVDTzBGQlEwRXNVVUZCU1N4UFFVRlBMRmxCUVZBc1MwRkJkMElzVVVGQmVFSXNTVUZCYjBNc1QwRkJUeXhaUVVGUUxFdEJRWGRDTEZGQlFXaEZMRVZCUVRCRk8wRkJRM1JGTEdWQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzWVVGQk5VSXNSVUZCTWtNc1JVRkJReXhUUVVGVExGbEJRVllzUlVGQk0wTXNSVUZCYjBVc1JVRkJjRVVzUlVGQmQwVXNVMEZCZUVVc1JVRkJiVVlzU1VGQmJrWXNSVUZCZVVZc1NVRkJla1lzUlVGQkswWXNUVUZCTDBZc1EwRkJVRHRCUVVOSUxFdEJSa1FzVFVGRlR5eEpRVUZKTEdkQ1FVRm5RaXhSUVVGUExGbEJRVkFzZFVSQlFVOHNXVUZCVUN4UFFVRjNRaXhSUVVFMVF5eEZRVUZ6UkR0QlFVTjZSQ3hsUVVGUExFdEJRVXNzVjBGQlRDeERRVUZwUWl4WFFVRlhMR0ZCUVRWQ0xFVkJRVEpETEVWQlFVTXNVMEZCVXl4aFFVRmhMRTlCUVdJc1NVRkJkMElzUjBGQmJFTXNSVUZCTTBNc1JVRkJiVVlzWVVGQllTeFJRVUZpTEVsQlFYbENMRVZCUVRWSExFVkJRV2RJTEdGQlFXRXNWVUZCWWl4SlFVRXlRaXhUUVVFelNTeEZRVUZ6U2l4SlFVRjBTaXhGUVVFMFNpeEpRVUUxU2l4RlFVRnJTeXhOUVVGc1N5eERRVUZRTzBGQlEwZzdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRTQ3hEUVZoRU8wRkJXVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEhWQ1FVRXpRaXhIUVVGeFJDeFZRVUZWTEVsQlFWWXNSVUZCWjBJc1RVRkJhRUlzUlVGQmQwSXNaVUZCZUVJc1JVRkJlVU03UVVGRE1VWXNVMEZCU3l4SlFVRkpMRWRCUVZRc1NVRkJaMElzUzBGQlN5eGxRVUZ5UWl4RlFVRnpRenRCUVVOc1F5eFpRVUZKTEU5QlFVOHNUMEZCVHl4SFFVRlFMRU5CUVZBc1MwRkJkVUlzVjBGQk0wSXNSVUZCZDBNN1FVRkRjRU03UVVGRFNEdEJRVU5FTEZsQlFVa3NjMEpCUVhOQ0xFdEJRVXNzWlVGQlRDeERRVUZ4UWl4SFFVRnlRaXhEUVVFeFFqdEJRVU5CTEdGQlFVc3NTVUZCU1N4SlFVRkpMRU5CUVdJc1JVRkJaMElzU1VGQlNTeHZRa0ZCYjBJc1RVRkJlRU1zUlVGQlowUXNSMEZCYUVRc1JVRkJjVVE3UVVGRGFrUXNaMEpCUVVrc1QwRkJUeXh2UWtGQmIwSXNRMEZCY0VJc1EwRkJXRHRCUVVOQkxHZENRVUZKTEZOQlFWTXNTMEZCU3l4SlFVRk1MRVZCUVZjc1QwRkJUeXhIUVVGUUxFTkJRVmdzUlVGQmQwSXNUVUZCZUVJc1JVRkJaME1zWlVGQmFFTXNRMEZCWWp0QlFVTkJMR2RDUVVGSkxFOUJRVThzVFVGQlVDeExRVUZyUWl4UlFVRnNRaXhKUVVFNFFpeFBRVUZQTEUxQlFWQXNTMEZCYTBJc1VVRkJjRVFzUlVGQk9FUTdRVUZETVVRc2RVSkJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRmRCUVZjc1kwRkJOVUlzUlVGQk5FTTdRVUZETDBNc2VVSkJRVXNzUjBGRU1FTTdRVUZGTDBNc05rSkJRVk03UVVGR2MwTXNhVUpCUVRWRExFVkJSMG9zUlVGSVNTeEZRVWRCTEVWQlNFRXNSVUZIU1N4SlFVaEtMRVZCUjFVc1NVRklWaXhGUVVkblFpeE5RVWhvUWl4RlFVZDNRaXhWUVVoNFFpeERRVWR0UXl4SlFVaHVReXhGUVVkNVF5eEhRVWg2UXl4RFFVRlFPMEZCU1Vnc1lVRk1SQ3hOUVV0UExFbEJRVWtzVlVGQlZTeFJRVUZQTEUxQlFWQXNkVVJCUVU4c1RVRkJVQ3hQUVVGclFpeFJRVUZvUXl4RlFVRXdRenRCUVVNM1F5eHZRa0ZCU1N4UFFVRlBMRTlCUVU4c1NVRkJiRUk3UVVGRFFTeHZRa0ZCU1N4UFFVRlBMRWxCUVZBc1MwRkJaMElzVVVGQmNFSXNSVUZCT0VJN1FVRkRNVUlzZDBKQlFVa3NRMEZCUXl4WFFVRlhMRWxCUVZnc1EwRkJUQ3hGUVVGMVFqdEJRVU51UWl3NFFrRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTdzJRMEZCTmtNc1NVRkJka1FzUTBGQlRqdEJRVU5JTzBGQlEwUXNNa0pCUVU4c1YwRkJWeXhKUVVGWUxFTkJRVkE3UVVGRFNDeHBRa0ZNUkN4TlFVdFBMRWxCUVVrc1QwRkJUeXhKUVVGUUxFdEJRV2RDTEZGQlFYQkNMRVZCUVRoQ08wRkJRMnBETERKQ1FVRlBMRmRCUVZjc1kwRkJiRUk3UVVGRFNEdEJRVU5FTEc5Q1FVRkpMR2RDUVVGcFFpeHpRa0ZCVHl4UFFVRlBMRTlCUVdRc1RVRkJNRUlzVVVGQk0wSXNSMEZCZFVNc1QwRkJUeXhQUVVFNVF5eEhRVUYzUkR0QlFVTjRSU3g1UWtGQlN5eEhRVVJ0UlR0QlFVVjRSU3cyUWtGQlV5eFBRVUZQTEU5QlFWQXNTVUZCYTBJN1FVRkdOa01zYVVKQlFUVkZPMEZCU1VFc2IwSkJRVWtzWVVGQllTeFBRVUZQTEZWQlFWQXNTVUZCYzBJc1RVRkJUU3hKUVVGSkxFOUJRVW9zUTBGQldTeEpRVUZhTEVWQlFXdENMRWxCUVd4Q0xFVkJRWGRDTEU5QlFYaENMRU5CUVdkRExFdEJRV2hETEVWQlFYVkRMRWxCUVhaRExFTkJRVGRETzBGQlEwRXNkVUpCUVU4c1MwRkJTeXhYUVVGTUxFTkJRV2xDTEVsQlFXcENMRVZCUVhWQ0xHRkJRWFpDTEVWQlFYTkRMRTlCUVU4c1VVRkJVQ3hKUVVGdFFpeEpRVUY2UkN4RlFVRXJSQ3hWUVVFdlJDeEZRVUV5UlN4SlFVRXpSU3hGUVVGcFJpeEpRVUZxUml4RlFVRjFSaXhOUVVGMlJpeERRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGc1EwUTdPMEZCYjBOQkxGTkJRVk1zWjBKQlFWUXNRMEZCTUVJc1EwRkJNVUlzUlVGQk5rSXNRMEZCTjBJc1JVRkJaME03UVVGRE5VSXNVVUZCU1N4TlFVRk5MRU5CUVZZc1JVRkJZVHRCUVVOVUxHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNVVUZCU1N4TFFVRkxMRU5CUVV3c1NVRkJWU3hSUVVGUExFTkJRVkFzZFVSQlFVOHNRMEZCVUN4UFFVRmhMRkZCUVhaQ0xFbEJRVzFETEZGQlFVOHNRMEZCVUN4MVJFRkJUeXhEUVVGUUxFOUJRV0VzVVVGQmNFUXNSVUZCT0VRN1FVRkRNVVFzV1VGQlNTeE5RVUZOTEU5QlFVNHNRMEZCWXl4RFFVRmtMRTFCUVhGQ0xFMUJRVTBzVDBGQlRpeERRVUZqTEVOQlFXUXNRMEZCZWtJc1JVRkJNa003UVVGRGRrTXNiVUpCUVU4c1MwRkJVRHRCUVVOSUxGTkJSa1FzVFVGRlR5eEpRVUZKTEUxQlFVMHNUMEZCVGl4RFFVRmpMRU5CUVdRc1EwRkJTaXhGUVVGelFqdEJRVU42UWl4blFrRkJTU3hGUVVGRkxFMUJRVVlzUzBGQllTeEZRVUZGTEUxQlFXNUNMRVZCUVRKQ08wRkJRM1pDTEhWQ1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVORUxHbENRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzUlVGQlJTeE5RVUYwUWl4RlFVRTRRaXhIUVVFNVFpeEZRVUZ0UXp0QlFVTXZRaXh2UWtGQlNTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxFTkJRVVlzUTBGQmFrSXNSVUZCZFVJc1JVRkJSU3hEUVVGR0xFTkJRWFpDTEVOQlFVd3NSVUZCYlVNN1FVRkRMMElzTWtKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRTaXhUUVZSTkxFMUJVMEU3UVVGRFNDeG5Ra0ZCU1N4SFFVRktPMEZCUTBFc2FVSkJRVXNzUjBGQlRDeEpRVUZaTEVOQlFWb3NSVUZCWlR0QlFVTllMRzlDUVVGSkxFVkJRVVVzUjBGQlJpeE5RVUZYTEZOQlFWZ3NTVUZCZDBJc1JVRkJSU3hIUVVGR0xFMUJRVmNzVTBGQmRrTXNSVUZCYTBRN1FVRkRPVU1zTWtKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRSQ3hwUWtGQlN5eEhRVUZNTEVsQlFWa3NRMEZCV2l4RlFVRmxPMEZCUTFnc2IwSkJRVWtzUlVGQlJTeEhRVUZHTEUxQlFWY3NVMEZCV0N4SlFVRjNRaXhGUVVGRkxFZEJRVVlzVFVGQlZ5eFRRVUYyUXl4RlFVRnJSRHRCUVVNNVF5d3lRa0ZCVHl4TFFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxHbENRVUZMTEVkQlFVd3NTVUZCV1N4RFFVRmFMRVZCUVdVN1FVRkRXQ3h2UWtGQlNTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxFZEJRVVlzUTBGQmFrSXNSVUZCZVVJc1JVRkJSU3hIUVVGR0xFTkJRWHBDTEVOQlFVd3NSVUZCZFVNN1FVRkRia01zTWtKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN1FVRkRTanRCUVVORUxHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNWMEZCVHl4TFFVRlFPMEZCUTBnN08wRkJSVVFzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEdGQlFUTkNMRWRCUVRKRExGTkJRVk1zWVVGQlZDeERRVUYxUWl4SlFVRjJRaXhGUVVFMlFpeE5RVUUzUWl4RlFVRnhReXhsUVVGeVF5eEZRVUZ6UkR0QlFVTTNSaXhSUVVGSkxFdEJRVW83UVVGRFFTeFJRVUZKTEZGQlFWRXNTMEZCU3l4WlFVRk1MRU5CUVd0Q0xFbEJRV3hDTEVWQlFYZENMRTFCUVhoQ0xFVkJRV2RETEdWQlFXaERMRU5CUVZvc1JVRkJPRVE3UVVGRE1VUXNaVUZCVHl4TlFVRk5MRlZCUVU0c1EwRkJhVUlzU1VGQmFrSXNSVUZCZFVJc1RVRkJka0lzUTBGQlVEdEJRVU5JTzBGQlEwUXNVVUZCU1N4UlFVRlJMRXRCUVVzc1dVRkJUQ3hEUVVGclFpeEpRVUZzUWl4RlFVRjNRaXhOUVVGNFFpeEZRVUZuUXl4bFFVRm9ReXhEUVVGYUxFVkJRVGhFTzBGQlF6RkVMR1ZCUVU4c1RVRkJUU3hWUVVGT0xFTkJRV2xDTEVsQlFXcENMRVZCUVhWQ0xFMUJRWFpDTEVOQlFWQTdRVUZEU0R0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJWRVE3TzBGQlYwRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRmxCUVROQ0xFZEJRVEJETEZOQlFWTXNXVUZCVkN4RFFVRnpRaXhKUVVGMFFpeEZRVUUwUWl4TlFVRTFRaXhGUVVGdlF6dEJRVU14UlN4UlFVRkpMRTlCUVU4c1NVRkJVQ3hMUVVGblFpeFRRVUZ3UWl4RlFVRXJRanRCUVVNelFpeGxRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrc2EwSkJRV3RDTEVsQlFXeENMSFZFUVVGclFpeEpRVUZzUWl4RFFVRktPMEZCUTBFc1VVRkJTU3hUUVVGVExFbEJRV0lzUlVGQmJVSTdRVUZEWml4dFFrRkJWeXhOUVVGWU8wRkJRMGdzUzBGR1JDeE5RVVZQTEVsQlFVa3NUVUZCVFN4UFFVRk9MRU5CUVdNc1NVRkJaQ3hEUVVGS0xFVkJRWGxDTzBGQlF6VkNMRzFDUVVGWExFOUJRVmc3UVVGRFNEdEJRVU5FTEZGQlFVa3NaVUZCWlN4UFFVRlBMRWxCUVRGQ08wRkJRMEVzVVVGQlNTeERRVUZETEUxQlFVMHNUMEZCVGl4RFFVRmpMRmxCUVdRc1EwRkJUQ3hGUVVGclF6dEJRVU01UWl4MVFrRkJaU3hEUVVGRExGbEJRVVFzUTBGQlpqdEJRVU5JT3p0QlFVVkVMRk5CUVVzc1NVRkJTU3hKUVVGSkxFTkJRV0lzUlVGQlowSXNTVUZCU1N4aFFVRmhMRTFCUVdwRExFVkJRWGxETEVkQlFYcERMRVZCUVRoRE8wRkJRekZETEZsQlFVa3NUMEZCVHl4aFFVRmhMRU5CUVdJc1EwRkJXRHRCUVVOQkxGbEJRVWtzVTBGQlV5eFJRVUZVTEVsQlFYTkNMRk5CUVZNc1UwRkJWQ3hKUVVGelFpeGhRVUZoTEZGQlFXNURMRWxCUVdkRUxFOUJRVThzUTBGQlVDeExRVUZoTEVOQlFYWkdMRVZCUVRSR08wRkJRM2hHTEcxQ1FVRlBMRWxCUVZBN1FVRkRTRHRCUVVOS08wRkJRMFFzVjBGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXhaUVVFMVFpeEZRVUV3UXp0QlFVTTNReXhqUVVGTkxGRkJSSFZETzBGQlJUZERMR3RDUVVGVkxHRkJRV0VzU1VGQllpeERRVUZyUWl4SFFVRnNRanRCUVVadFF5eExRVUV4UXl4RlFVZEtMRVZCU0Vrc1JVRkhRU3hGUVVoQkxFVkJSMGtzU1VGSVNpeEZRVWRWTEVsQlNGWXNSVUZIWjBJc1RVRklhRUlzUTBGQlVEdEJRVWxJTEVOQmVrSkVPenRCUVRKQ1FTeHBRa0ZCYVVJc1UwRkJha0lzUTBGQk1rSXNXVUZCTTBJc1IwRkJNRU1zVTBGQlV5eFpRVUZVTEVOQlFYTkNMRWxCUVhSQ0xFVkJRVFJDTEUxQlFUVkNMRVZCUVc5RE8wRkJRekZGTEZGQlFVa3NUMEZCVHl4TlFVRlFMRTFCUVcxQ0xGTkJRWFpDTEVWQlFXdERPMEZCUXpsQ0xHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNVMEZCU3l4SlFVRkpMRWxCUVVrc1EwRkJZaXhGUVVGblFpeEpRVUZKTEU5QlFVOHNUVUZCVUN4RlFVRmxMRTFCUVc1RExFVkJRVEpETEVkQlFUTkRMRVZCUVdkRU8wRkJRelZETEZsQlFVa3NWVUZCVlN4UFFVRlBMRTFCUVZBc1JVRkJaU3hEUVVGbUxFTkJRV1E3UVVGRFFTeFpRVUZKTEdsQ1FVRnBRaXhKUVVGcVFpeEZRVUYxUWl4UFFVRjJRaXhEUVVGS0xFVkJRWEZETzBGQlEycERMRzFDUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwUXNWMEZCVHl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eGhRVUUxUWl4RlFVRXlReXhGUVVGRExFOUJRVkVzVDBGQlR5eEpRVUZRTEV0QlFXZENMRmRCUVdwQ0xFZEJRV2RETEhsQ1FVRmxMRWxCUVdZc1EwRkJhRU1zUjBGQmRVUXNTVUZCTDBRc1JVRkJNME1zUlVGQmFVZ3NSVUZCYWtnc1JVRkJjVWdzUlVGQmNrZ3NSVUZCZVVnc1NVRkJla2dzUlVGQkswZ3NTVUZCTDBnc1JVRkJjVWtzVFVGQmNra3NRMEZCVUR0QlFVTklMRU5CV0VRN08wRkJZVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEdWQlFUTkNMRWRCUVRaRExGTkJRVk1zWlVGQlZDeERRVUY1UWl4SlFVRjZRaXhGUVVFclFpeE5RVUV2UWl4RlFVRjFReXhsUVVGMlF5eEZRVUYzUkR0QlFVTnFSeXhYUVVGUExFdEJRVXNzYTBKQlFVd3NRMEZCZDBJc1NVRkJlRUlzUlVGQk9FSXNUVUZCT1VJc1JVRkJjME1zWlVGQmRFTXNTMEZEUVN4TFFVRkxMR05CUVV3c1EwRkJiMElzU1VGQmNFSXNSVUZCTUVJc1RVRkJNVUlzUlVGQmEwTXNaVUZCYkVNc1EwRkVRU3hKUVVWQkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeE5RVUYyUWl4RlFVRXJRaXhsUVVFdlFpeERRVVpCTEVsQlIwRXNTVUZJVUR0QlFVbElMRU5CVEVRN08wRkJUMEVzU1VGQlNTeHRRa0ZCYlVJc1MwRkJTeXhIUVVGTUxFTkJRVk1zUTBGQlZDeEZRVUZaTEVOQlFVTXNSVUZCWWl4RFFVRjJRanRCUVVOQkxFbEJRVWtzYjBKQlFXOUNMRWxCUVVrc1owSkJRVFZDTzBGQlEwRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMR3RDUVVFelFpeEhRVUZuUkN4VFFVRlRMR3RDUVVGVUxFTkJRVFJDTEVsQlFUVkNMRVZCUVd0RExFMUJRV3hETEVWQlFUQkRPMEZCUTNSR0xGRkJRVWtzWVVGQllTeFBRVUZQTEZWQlFWQXNTVUZCY1VJc1QwRkJUeXhYUVVFM1F6dEJRVU5CTEZGQlFVa3NaVUZCWlN4VFFVRnVRaXhGUVVFNFFqdEJRVU14UWl4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzVDBGQlR5eEpRVUZRTEV0QlFXZENMRkZCUVhCQ0xFVkJRVGhDTzBGQlF6RkNMRmxCUVVrc1dVRkJZU3hQUVVGUExGVkJRVklzUjBGQmMwSXNRMEZCZEVNN1FVRkRRU3haUVVGSkxHRkJRV0VzWjBKQlFXSXNTVUZCYVVNc1dVRkJXU3hwUWtGQmFrUXNSVUZCYjBVN1FVRkRhRVVzYlVKQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzYTBKQlFUVkNMRVZCUVdkRU8wRkJRMjVFTEhWQ1FVRlBMRWxCUkRSRE8wRkJSVzVFTERSQ1FVRlpPMEZCUm5WRExHRkJRV2hFTEVWQlIwb3NSVUZJU1N4RlFVZEJMRVZCU0VFc1JVRkhTU3hKUVVoS0xFVkJSMVVzU1VGSVZpeEZRVWRuUWl4TlFVaG9RaXhEUVVGUU8wRkJTVWc3UVVGRFNqdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CWmtRN08wRkJhVUpCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4alFVRXpRaXhIUVVFMFF5eFRRVUZUTEdOQlFWUXNRMEZCZDBJc1NVRkJlRUlzUlVGQk9FSXNUVUZCT1VJc1JVRkJjME03UVVGRE9VVXNVVUZCU1N4UFFVRlBMRWxCUVZBc1MwRkJaMElzVVVGQmNFSXNSVUZCT0VJN1FVRkRNVUlzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkpMRTlCUVU4c1QwRkJVQ3hMUVVGdFFpeFRRVUYyUWl4RlFVRnJRenRCUVVNNVFpeFpRVUZKTEU5QlFVOHNUMEZCVHl4UFFVRnNRaXhGUVVFeVFqdEJRVU4yUWl4dFFrRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4alFVRTFRaXhGUVVFMFF6dEJRVU12UXl4MVFrRkJUeXhKUVVSM1F6dEJRVVV2UXl4NVFrRkJVeXhQUVVGUE8wRkJSaXRDTEdGQlFUVkRMRVZCUjBvc1JVRklTU3hGUVVkQkxGVkJTRUVzUlVGSFdTeEpRVWhhTEVWQlIydENMRWxCU0d4Q0xFVkJSM2RDTEUxQlNIaENMRU5CUVZBN1FVRkpTRHRCUVVORUxGbEJRVWtzVDBGQlR5eG5Ra0ZCVUN4SlFVRXlRaXhUUVVGVExFOUJRVThzVDBGQkwwTXNSVUZCZDBRN1FVRkRjRVFzYlVKQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzZDBKQlFUVkNMRVZCUVhORU8wRkJRM3BFTEhWQ1FVRlBMRWxCUkd0RU8wRkJSWHBFTEhsQ1FVRlRMRTlCUVU4N1FVRkdlVU1zWVVGQmRFUXNSVUZIU2l4RlFVaEpMRVZCUjBFc2JVSkJTRUVzUlVGSGNVSXNTVUZJY2tJc1JVRkhNa0lzU1VGSU0wSXNSVUZIYVVNc1RVRklha01zUTBGQlVEdEJRVWxJTzBGQlEwbzdRVUZEUkN4UlFVRkpMRTlCUVU4c1QwRkJVQ3hMUVVGdFFpeFRRVUYyUWl4RlFVRnJRenRCUVVNNVFpeFpRVUZKTEU5QlFVOHNUMEZCVHl4UFFVRnNRaXhGUVVFeVFqdEJRVU4yUWl4dFFrRkJUeXhMUVVGTExGZEJRVXdzUTBGQmFVSXNWMEZCVnl4alFVRTFRaXhGUVVFMFF6dEJRVU12UXl4MVFrRkJUeXhKUVVSM1F6dEJRVVV2UXl4NVFrRkJVeXhQUVVGUE8wRkJSaXRDTEdGQlFUVkRMRVZCUjBvc1JVRklTU3hGUVVkQkxGVkJTRUVzUlVGSFdTeEpRVWhhTEVWQlIydENMRWxCU0d4Q0xFVkJSM2RDTEUxQlNIaENMRU5CUVZBN1FVRkpTRHRCUVVORUxGbEJRVWtzVDBGQlR5eG5Ra0ZCVUN4SlFVRXlRaXhUUVVGVExFOUJRVThzVDBGQkwwTXNSVUZCZDBRN1FVRkRjRVFzYlVKQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzZDBKQlFUVkNMRVZCUVhORU8wRkJRM3BFTEhWQ1FVRlBMRWxCUkd0RU8wRkJSWHBFTEhsQ1FVRlRMRTlCUVU4N1FVRkdlVU1zWVVGQmRFUXNSVUZIU2l4RlFVaEpMRVZCUjBFc2JVSkJTRUVzUlVGSGNVSXNTVUZJY2tJc1JVRkhNa0lzU1VGSU0wSXNSVUZIYVVNc1RVRklha01zUTBGQlVEdEJRVWxJTzBGQlEwbzdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRTQ3hEUVdwRFJEczdRVUZ0UTBFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xGZEJRVE5DTEVkQlFYbERMRk5CUVZNc1YwRkJWQ3hEUVVGeFFpeEpRVUZ5UWl4RlFVRXlRaXhOUVVFelFpeEZRVUZ0UXp0QlFVTjRSU3hSUVVGSkxFOUJRVThzU1VGQlVDeExRVUZuUWl4UlFVRndRaXhGUVVFNFFqdEJRVU14UWl4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzVFVGQlRTeEpRVUZPTEUxQlFXZENMRWxCUVdoQ0xFbEJRWGRDTEZOQlFWTXNVVUZCYWtNc1NVRkJOa01zVTBGQlV5eERRVUZETEZGQlFUTkVMRVZCUVhGRk8wRkJRMnBGTEdWQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzYlVKQlFUVkNMRVZCUVdsRUxFVkJRVU1zVDBGQlR5eEpRVUZTTEVWQlFXcEVMRVZCUVdkRkxFVkJRV2hGTEVWQlFXOUZMRTlCUVhCRkxFVkJRVFpGTEVsQlFUZEZMRVZCUVcxR0xFbEJRVzVHTEVWQlFYbEdMRTFCUVhwR0xFTkJRVkE3UVVGRFNEdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CVWtRN08wRkJWVUVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEdOQlFUTkNMRWRCUVRSRExGTkJRVk1zWTBGQlZDeERRVUYzUWl4SlFVRjRRaXhGUVVFNFFpeE5RVUU1UWl4RlFVRnpReXhsUVVGMFF5eEZRVUYxUkR0QlFVTXZSaXhYUVVGUExFdEJRVXNzYjBKQlFVd3NRMEZCTUVJc1NVRkJNVUlzUlVGQlowTXNUVUZCYUVNc1JVRkJkME1zWlVGQmVFTXNTMEZEUVN4TFFVRkxMSEZDUVVGTUxFTkJRVEpDTEVsQlFUTkNMRVZCUVdsRExFMUJRV3BETEVWQlFYbERMR1ZCUVhwRExFTkJSRUVzU1VGRlFTeEpRVVpRTzBGQlIwZ3NRMEZLUkRzN1FVRk5RU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzYjBKQlFUTkNMRWRCUVd0RUxGTkJRVk1zYjBKQlFWUXNRMEZCT0VJc1NVRkJPVUlzUlVGQmIwTXNUVUZCY0VNc1JVRkJORU03UVVGRE1VWXNVVUZCU1N4UFFVRlBMRWxCUVZBc1MwRkJaMElzVVVGQmNFSXNSVUZCT0VJN1FVRkRNVUlzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkpMRTlCUVU4c1UwRkJVQ3hMUVVGeFFpeFRRVUY2UWl4RlFVRnZRenRCUVVOb1F5eFpRVUZKTEV0QlFVc3NUVUZCVEN4SFFVRmpMRTlCUVU4c1UwRkJla0lzUlVGQmIwTTdRVUZEYUVNc2JVSkJRVThzUzBGQlN5eFhRVUZNTEVOQlFXbENMRmRCUVZjc2JVSkJRVFZDTEVWQlFXbEVPMEZCUTNCRUxIZENRVUZSTEV0QlFVc3NUVUZFZFVNN1FVRkZjRVFzZVVKQlFWTXNUMEZCVHp0QlFVWnZReXhoUVVGcVJDeEZRVWRLTEVWQlNFa3NSVUZIUVN4WlFVaEJMRVZCUjJNc1NVRklaQ3hGUVVkdlFpeEpRVWh3UWl4RlFVY3dRaXhOUVVneFFpeERRVUZRTzBGQlNVZzdRVUZEU2p0QlFVTkVMRkZCUVVrc1QwRkJUeXhUUVVGUUxFdEJRWEZDTEZOQlFYcENMRVZCUVc5RE8wRkJRMmhETEZsQlFVa3NTMEZCU3l4TlFVRk1MRWRCUVdNc1QwRkJUeXhUUVVGNlFpeEZRVUZ2UXp0QlFVTm9ReXh0UWtGQlR5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXhyUWtGQk5VSXNSVUZCWjBRN1FVRkRia1FzZDBKQlFWRXNTMEZCU3l4TlFVUnpRenRCUVVWdVJDeDVRa0ZCVXl4UFFVRlBPMEZCUm0xRExHRkJRV2hFTEVWQlIwb3NSVUZJU1N4RlFVZEJMRmxCU0VFc1JVRkhZeXhKUVVoa0xFVkJSMjlDTEVsQlNIQkNMRVZCUnpCQ0xFMUJTREZDTEVOQlFWQTdRVUZKU0R0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGeVFrUTdPMEZCZFVKQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeHhRa0ZCTTBJc1IwRkJiVVFzVTBGQlV5eHhRa0ZCVkN4RFFVRXJRaXhKUVVFdlFpeEZRVUZ4UXl4TlFVRnlReXhGUVVFMlF6dEJRVU0xUml4UlFVRkpMRTlCUVU4c1NVRkJVQ3hMUVVGblFpeFJRVUZvUWl4SlFVRTJRaXhQUVVGUExFOUJRVThzVDBGQlpDeExRVUV3UWl4UlFVRXhRaXhKUVVGelF5eEZRVUZGTEU5QlFVOHNUMEZCVUN4WlFVRXdRaXhOUVVFMVFpeERRVUYyUlN4RlFVRTJSenRCUVVONlJ5eGxRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrc1RVRkJTanRCUVVOQkxGRkJRVWtzVDBGQlR5eFBRVUZRTEZsQlFUQkNMRTFCUVRsQ0xFVkJRWE5ETzBGQlEyeERMR2xDUVVGVExFOUJRVThzVDBGQmFFSTdRVUZEU0N4TFFVWkVMRTFCUjBzN1FVRkRSQ3haUVVGSkxFbEJRVW83UVVGQlFTeFpRVUZWTEZGQlFWRXNSVUZCYkVJN1FVRkRRVHRCUVVOQk8wRkJRMEVzV1VGQlNTeFZRVUZWTEU5QlFVOHNUMEZCVUN4RFFVRmxMRXRCUVdZc1EwRkJjVUlzYjBKQlFYSkNMRU5CUVdRN1FVRkRRU3haUVVGSkxFOUJRVW9zUlVGQllUdEJRVU5VTEcxQ1FVRlBMRkZCUVZFc1EwRkJVaXhEUVVGUU8wRkJRMEVzYjBKQlFWRXNVVUZCVVN4RFFVRlNMRU5CUVZJN1FVRkRTQ3hUUVVoRUxFMUJTVXM3UVVGRFJDeHRRa0ZCVHl4UFFVRlBMRTlCUVdRN1FVRkRTRHRCUVVORUxHbENRVUZUTEVsQlFVa3NUVUZCU2l4RFFVRlhMRWxCUVZnc1JVRkJhVUlzUzBGQmFrSXNRMEZCVkR0QlFVTklPMEZCUTBRc1VVRkJTU3hEUVVGRExFOUJRVThzU1VGQlVDeERRVUZaTEVsQlFWb3NRMEZCVEN4RlFVRjNRanRCUVVOd1FpeGxRVUZQTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExHTkJRVFZDTEVWQlFUUkRMRVZCUVVNc1UwRkJVeXhQUVVGUExFOUJRV3BDTEVWQlFUVkRMRVZCUVhWRkxFVkJRWFpGTEVWQlFUSkZMRlZCUVRORkxFVkJRWFZHTEVsQlFYWkdMRVZCUVRaR0xFbEJRVGRHTEVWQlFXMUhMRTFCUVc1SExFTkJRVkE3UVVGRFNEdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CTVVKRU96dEJRVFJDUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc1lVRkJNMElzUjBGQk1rTXNVMEZCVXl4aFFVRlVMRU5CUVhWQ0xFbEJRWFpDTEVWQlFUWkNMRTFCUVRkQ0xFVkJRWEZETEdWQlFYSkRMRVZCUVhORU8wRkJRemRHTEZGQlFVa3NRMEZCUXl4TlFVRk5MRTlCUVU0c1EwRkJZeXhKUVVGa0xFTkJRVXdzUlVGQk1FSTdRVUZEZEVJc1pVRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeFhRVUZQTEV0QlFVc3NiVUpCUVV3c1EwRkJlVUlzU1VGQmVrSXNSVUZCSzBJc1RVRkJMMElzUlVGQmRVTXNaVUZCZGtNc1MwRkRRU3hMUVVGTExIZENRVUZNTEVOQlFUaENMRWxCUVRsQ0xFVkJRVzlETEUxQlFYQkRMRVZCUVRSRExHVkJRVFZETEVOQlJFRXNTVUZGUVN4TFFVRkxMR3RDUVVGTUxFTkJRWGRDTEVsQlFYaENMRVZCUVRoQ0xFMUJRVGxDTEVWQlFYTkRMR1ZCUVhSRExFTkJSa0VzU1VGSFFTeEpRVWhRTzBGQlNVZ3NRMEZTUkRzN1FVRlZRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzYlVKQlFUTkNMRWRCUVdsRUxGTkJRVk1zYlVKQlFWUXNRMEZCTmtJc1NVRkJOMElzUlVGQmJVTXNUVUZCYmtNc1JVRkJNa003UVVGRGVFWXNVVUZCU1N4TFFVRktPMEZCUTBFc1VVRkJTU3hQUVVGUExGRkJRVkFzUzBGQmIwSXNVMEZCZUVJc1JVRkJiVU03UVVGREwwSXNXVUZCU1N4TFFVRkxMRTFCUVV3c1IwRkJZeXhQUVVGUExGRkJRWHBDTEVWQlFXMURPMEZCUXk5Q0xHOUNRVUZSTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExHdENRVUUxUWl4RlFVRm5SRHRCUVVOd1JDeDNRa0ZCVVN4TFFVRkxMRTFCUkhWRE8wRkJSWEJFTEhsQ1FVRlRMRTlCUVU4N1FVRkdiME1zWVVGQmFFUXNSVUZIVEN4RlFVaExMRVZCUjBRc1YwRklReXhGUVVkWkxFbEJTRm9zUlVGSGEwSXNTVUZJYkVJc1JVRkhkMElzVFVGSWVFSXNRMEZCVWp0QlFVbEJMR2RDUVVGSkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRnFRaXhEUVVGS0xFVkJRVFpDTzBGQlEzcENMSFZDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEUkN4UlFVRkpMRTlCUVU4c1VVRkJVQ3hMUVVGdlFpeFRRVUY0UWl4RlFVRnRRenRCUVVNdlFpeFpRVUZKTEV0QlFVc3NUVUZCVEN4SFFVRmpMRTlCUVU4c1VVRkJla0lzUlVGQmJVTTdRVUZETDBJc2IwSkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRmRCUVZjc2FVSkJRVFZDTEVWQlFTdERPMEZCUTI1RUxIZENRVUZSTEV0QlFVc3NUVUZFYzBNN1FVRkZia1FzZVVKQlFWTXNUMEZCVHp0QlFVWnRReXhoUVVFdlF5eEZRVWRNTEVWQlNFc3NSVUZIUkN4WFFVaERMRVZCUjFrc1NVRklXaXhGUVVkclFpeEpRVWhzUWl4RlFVZDNRaXhOUVVoNFFpeERRVUZTTzBGQlNVRXNaMEpCUVVrc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFXcENMRU5CUVVvc1JVRkJOa0k3UVVGRGVrSXNkVUpCUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CZWtKRU96dEJRVEpDUVN4cFFrRkJhVUlzVTBGQmFrSXNRMEZCTWtJc2QwSkJRVE5DTEVkQlFYTkVMRk5CUVZNc2QwSkJRVlFzUTBGQmEwTXNTVUZCYkVNc1JVRkJkME1zVFVGQmVFTXNSVUZCWjBRN1FVRkRiRWNzVVVGQlNTeFBRVUZQTEZkQlFWZ3NSVUZCZDBJN1FVRkRjRUlzWVVGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxFdEJRVXNzVFVGQmVrSXNSVUZCYVVNc1IwRkJha01zUlVGQmMwTTdRVUZEYkVNc2FVSkJRVXNzU1VGQlNTeEpRVUZKTEVsQlFVa3NRMEZCYWtJc1JVRkJiMElzU1VGQlNTeExRVUZMTEUxQlFUZENMRVZCUVhGRExFZEJRWEpETEVWQlFUQkRPMEZCUTNSRExHOUNRVUZKTEdsQ1FVRnBRaXhMUVVGTExFTkJRVXdzUTBGQmFrSXNSVUZCTUVJc1MwRkJTeXhEUVVGTUxFTkJRVEZDTEVOQlFVb3NSVUZCZDBNN1FVRkRjRU1zZDBKQlFVa3NVVUZCVVN4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eFpRVUUxUWl4RlFVRXdRenRCUVVOc1JDeG5RMEZCVVN4RFFVUXdRenRCUVVWc1JDeG5RMEZCVVR0QlFVWXdReXh4UWtGQk1VTXNSVUZIVkN4RlFVaFRMRVZCUjB3c1kwRklTeXhGUVVkWExFbEJTRmdzUlVGSGFVSXNTVUZJYWtJc1JVRkhkVUlzVFVGSWRrSXNRMEZCV2p0QlFVbEJMSGRDUVVGSkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRnFRaXhEUVVGS0xFVkJRVFpDTzBGQlEzcENMQ3RDUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwbzdRVUZEU2p0QlFVTktPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMGdzUTBGcVFrUTdPMEZCYlVKQkxHbENRVUZwUWl4VFFVRnFRaXhEUVVFeVFpeHJRa0ZCTTBJc1IwRkJaMFFzVTBGQlV5eHJRa0ZCVkN4RFFVRTBRaXhKUVVFMVFpeEZRVUZyUXl4TlFVRnNReXhGUVVFd1F5eGxRVUV4UXl4RlFVRXlSRHRCUVVOMlJ5eFJRVUZKTEU5QlFVOHNTMEZCVUN4TFFVRnBRaXhUUVVGeVFpeEZRVUZuUXp0QlFVTTFRaXhsUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5FTEZGQlFVa3NTMEZCU2l4RlFVRlhMRU5CUVZnN1FVRkRRU3hSUVVGSkxFMUJRVTBzVDBGQlRpeERRVUZqTEU5QlFVOHNTMEZCY2tJc1EwRkJTaXhGUVVGcFF6dEJRVU0zUWl4aFFVRkxMRWxCUVVrc1EwRkJWQ3hGUVVGWkxFbEJRVWtzUzBGQlN5eE5RVUZ5UWl4RlFVRTJRaXhIUVVFM1FpeEZRVUZyUXp0QlFVTTVRaXhuUWtGQlNTeEpRVUZKTEU5QlFVOHNTMEZCVUN4RFFVRmhMRTFCUVhKQ0xFVkJRVFpDTzBGQlEzcENMRzlDUVVGSkxGRkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVVzc1EwRkJUQ3hEUVVGcVFpeEZRVUV3UWl4UFFVRlBMRXRCUVZBc1EwRkJZU3hEUVVGaUxFTkJRVEZDTEVWQlFUSkRMRU5CUVVNc1EwRkJSQ3hEUVVFelF5eEZRVUZuUkN4RFFVRkRMRTlCUVVRc1JVRkJWU3hEUVVGV0xFTkJRV2hFTEVWQlFUaEVMR3RDUVVGclFpeEhRVUZzUWl4SFFVRjNRaXhEUVVGMFJpeERRVUZhTEVWQlFYTkhPMEZCUTJ4SExESkNRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktMR0ZCU2tRc1RVRkpUeXhKUVVGSkxFOUJRVThzWlVGQlVDeExRVUV5UWl4VFFVRXZRaXhGUVVFd1F6dEJRVU0zUXl4dlFrRkJTU3hQUVVGUExFOUJRVThzWlVGQlpDeExRVUZyUXl4VFFVRjBReXhGUVVGcFJEdEJRVU0zUXl4M1FrRkJTU3hEUVVGRExFOUJRVThzWlVGQldpeEZRVUUyUWp0QlFVTjZRaXhuUTBGQlV5eExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXh6UWtGQk5VSXNSVUZCYjBRc1JVRkJjRVFzUlVGQmQwUXNUVUZCVFN4RFFVRTVSQ3hGUVVGcFJTeHJRa0ZCYWtVc1JVRkJjVVlzU1VGQmNrWXNSVUZCTWtZc1NVRkJNMFlzUlVGQmFVY3NUVUZCYWtjc1EwRkJWRHRCUVVOQkxEUkNRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xHMURRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvc2FVSkJVRVFzVFVGUFR5eEpRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUTBGQlRDeERRVUZxUWl4RlFVRXdRaXhQUVVGUExHVkJRV3BETEVWQlFXdEVMRU5CUVVNc1EwRkJSQ3hEUVVGc1JDeEZRVUYxUkN4RFFVRkRMR2xDUVVGRUxFTkJRWFpFTEVWQlFUUkZMR3RDUVVGclFpeEhRVUZzUWl4SFFVRjNRaXhEUVVGd1J5eERRVUZhTEVWQlFXOUlPMEZCUTNaSUxESkNRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRTaXhMUVc1Q1JDeE5RVzFDVHp0QlFVTklMR0ZCUVVzc1NVRkJTU3hEUVVGVUxFVkJRVmtzU1VGQlNTeExRVUZMTEUxQlFYSkNMRVZCUVRaQ0xFZEJRVGRDTEVWQlFXdERPMEZCUXpsQ0xHZENRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUTBGQlRDeERRVUZxUWl4RlFVRXdRaXhQUVVGUExFdEJRV3BETEVWQlFYZERMRU5CUVVNc1EwRkJSQ3hEUVVGNFF5eEZRVUUyUXl4RFFVRkRMRTlCUVVRc1EwRkJOME1zUlVGQmQwUXNhMEpCUVd0Q0xFZEJRV3hDTEVkQlFYZENMRU5CUVdoR0xFTkJRVm9zUlVGQlowYzdRVUZETlVZc2RVSkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJhRU5FT3p0QlFXdERRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzWTBGQk0wSXNSMEZCTkVNc1UwRkJVeXhqUVVGVUxFTkJRWGRDTEVsQlFYaENMRVZCUVRoQ0xFMUJRVGxDTEVWQlFYTkRMR1ZCUVhSRExFVkJRWFZFTzBGQlF5OUdMRkZCUVVrc1VVRkJUeXhKUVVGUUxIVkVRVUZQTEVsQlFWQXNUMEZCWjBJc1VVRkJhRUlzU1VGQk5FSXNVMEZCVXl4SlFVRnlReXhKUVVFMlF5eE5RVUZOTEU5QlFVNHNRMEZCWXl4SlFVRmtMRU5CUVdwRUxFVkJRWE5GTzBGQlEyeEZMR1ZCUVU4c1NVRkJVRHRCUVVOSU8wRkJRMFFzVjBGQlR5eExRVUZMTERoQ1FVRk1MRU5CUVc5RExFbEJRWEJETEVWQlFUQkRMRTFCUVRGRExFVkJRV3RFTEdWQlFXeEVMRXRCUTBFc1MwRkJTeXhuUTBGQlRDeERRVUZ6UXl4SlFVRjBReXhGUVVFMFF5eE5RVUUxUXl4RlFVRnZSQ3hsUVVGd1JDeERRVVJCTEVsQlJVRXNTMEZCU3l4M1FrRkJUQ3hEUVVFNFFpeEpRVUU1UWl4RlFVRnZReXhOUVVGd1F5eEZRVUUwUXl4bFFVRTFReXhEUVVaQkxFbEJSMEVzUzBGQlN5d3dRa0ZCVEN4RFFVRm5ReXhKUVVGb1F5eEZRVUZ6UXl4TlFVRjBReXhGUVVFNFF5eGxRVUU1UXl4RFFVaEJMRWxCU1VFc1NVRktVRHRCUVV0SUxFTkJWRVE3TzBGQlYwRXNhVUpCUVdsQ0xGTkJRV3BDTEVOQlFUSkNMRGhDUVVFelFpeEhRVUUwUkN4VFFVRlRMRGhDUVVGVUxFTkJRWGRETEVsQlFYaERMRVZCUVRoRExFMUJRVGxETEVWQlFYTkVPMEZCUXpsSExGRkJRVWtzVDBGQlR5eHZRa0ZCV1N4SlFVRmFMRU5CUVZnN1FVRkRRU3hSUVVGSkxFdEJRVW83UVVGRFFTeFJRVUZKTEU5QlFVOHNZVUZCVUN4TFFVRjVRaXhUUVVFM1FpeEZRVUYzUXp0QlFVTndReXhaUVVGSkxFdEJRVXNzVFVGQlRDeEhRVUZqTEU5QlFVOHNZVUZCZWtJc1JVRkJkME03UVVGRGNFTXNiMEpCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEZkQlFWY3NlVUpCUVRWQ0xFVkJRWFZFTzBGQlF6TkVMQ3RDUVVGbExFdEJRVXNzVFVGRWRVTTdRVUZGTTBRc2VVSkJRVk1zVDBGQlR6dEJRVVl5UXl4aFFVRjJSQ3hGUVVkTUxFVkJTRXNzUlVGSFJDeG5Ra0ZJUXl4RlFVZHBRaXhKUVVocVFpeEZRVWQxUWl4SlFVaDJRaXhGUVVjMlFpeE5RVWczUWl4RFFVRlNPMEZCU1VFc1owSkJRVWtzUzBGQlN5eFhRVUZNTEVOQlFXbENMRXRCUVdwQ0xFTkJRVW9zUlVGQk5rSTdRVUZEZWtJc2RVSkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEU2p0QlFVTkVMRkZCUVVrc1QwRkJUeXhoUVVGUUxFdEJRWGxDTEZOQlFUZENMRVZCUVhkRE8wRkJRM0JETEZsQlFVa3NTMEZCU3l4TlFVRk1MRWRCUVdNc1QwRkJUeXhoUVVGNlFpeEZRVUYzUXp0QlFVTndReXh2UWtGQlVTeExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXg1UWtGQk5VSXNSVUZCZFVRN1FVRkRNMFFzSzBKQlFXVXNTMEZCU3l4TlFVUjFRenRCUVVVelJDeDVRa0ZCVXl4UFFVRlBPMEZCUmpKRExHRkJRWFpFTEVWQlIwd3NSVUZJU3l4RlFVZEVMR2RDUVVoRExFVkJSMmxDTEVsQlNHcENMRVZCUjNWQ0xFbEJTSFpDTEVWQlJ6WkNMRTFCU0RkQ0xFTkJRVkk3UVVGSlFTeG5Ra0ZCU1N4TFFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQmFrSXNRMEZCU2l4RlFVRTJRanRCUVVONlFpeDFRa0ZCVHl4TFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMFFzVjBGQlR5eEpRVUZRTzBGQlEwZ3NRMEV4UWtRN08wRkJORUpCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4blEwRkJNMElzUjBGQk9FUXNVMEZCVXl4blEwRkJWQ3hEUVVFd1F5eEpRVUV4UXl4RlFVRm5SQ3hOUVVGb1JDeEZRVUYzUkR0QlFVTnNTQ3hSUVVGSkxFOUJRVThzVVVGQlVDeExRVUZ2UWl4VFFVRjRRaXhGUVVGdFF6dEJRVU12UWl4aFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NUMEZCVHl4UlFVRlFMRU5CUVdkQ0xFMUJRWEJETEVWQlFUUkRMRWRCUVRWRExFVkJRV2xFTzBGQlF6ZERMR2RDUVVGSkxFMUJRVTBzVDBGQlR5eFJRVUZRTEVOQlFXZENMRU5CUVdoQ0xFTkJRVlk3UVVGRFFTeG5Ra0ZCU1N4TFFVRkxMRWRCUVV3c1RVRkJZeXhUUVVGc1FpeEZRVUUyUWp0QlFVTjZRaXh2UWtGQlNTeFJRVUZSTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhYUVVGWExHVkJRVFZDTEVWQlFUWkRMRVZCUVVNc1MwRkJTeXhIUVVGT0xFVkJRVGRETEVWQlFYbEVMRVZCUVhwRUxFVkJRVFpFTEdWQlFXVXNRMEZCTlVVc1JVRkJLMFVzU1VGQkwwVXNSVUZCY1VZc1NVRkJja1lzUlVGQk1rWXNUVUZCTTBZc1EwRkJXanRCUVVOQkxHOUNRVUZKTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGcVFpeERRVUZLTEVWQlFUWkNPMEZCUTNwQ0xESkNRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQllrUTdPMEZCWlVFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xIZENRVUV6UWl4SFFVRnpSQ3hUUVVGVExIZENRVUZVTEVOQlFXdERMRWxCUVd4RExFVkJRWGRETEUxQlFYaERMRVZCUVdkRUxHVkJRV2hFTEVWQlFXbEZPMEZCUTI1SUxGRkJRVWtzUzBGQlNqdEJRVU5CTEZOQlFVc3NTVUZCU1N4SFFVRlVMRWxCUVdkQ0xFbEJRV2hDTEVWQlFYTkNPMEZCUTJ4Q0xGbEJRVWtzYVVKQlFXbENMR3RDUVVGclFpeEhRVUZzUWl4SFFVRjNRaXhKUVVGSkxFOUJRVW9zUTBGQldTeEpRVUZhTEVWQlFXdENMRWxCUVd4Q0xFVkJRWGRDTEU5QlFYaENMRU5CUVdkRExFdEJRV2hETEVWQlFYVkRMRWxCUVhaRExFTkJRVGRETzBGQlEwRXNXVUZCU1N4aFFVRmhMRXRCUVdwQ08wRkJRMEVzV1VGQlNTeFBRVUZQTEZWQlFWQXNTMEZCYzBJc1UwRkJkRUlzU1VGQmJVTXNUMEZCVHl4VlFVRlFMRU5CUVd0Q0xFZEJRV3hDTEUxQlFUSkNMRk5CUVd4RkxFVkJRVFpGTzBGQlEzcEZMSGxDUVVGaExFbEJRV0k3UVVGRFFTeG5Ra0ZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeExRVUZMTEVkQlFVd3NRMEZCYWtJc1JVRkJORUlzVDBGQlR5eFZRVUZRTEVOQlFXdENMRWRCUVd4Q0xFTkJRVFZDTEVWQlFXOUVMRU5CUVVNc1IwRkJSQ3hEUVVGd1JDeEZRVUV5UkN4RFFVRkRMRmxCUVVRc1JVRkJaU3hIUVVGbUxFTkJRVE5FTEVWQlFXZEdMR05CUVdoR0xFTkJRVm9zUlVGQk5rYzdRVUZEZWtjc2RVSkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdRVUZEUkN4WlFVRkpMRTlCUVU4c2FVSkJRVkFzUzBGQk5rSXNVMEZCYWtNc1JVRkJORU03UVVGRGVFTXNhVUpCUVVzc1NVRkJTU3hWUVVGVUxFbEJRWFZDTEU5QlFVOHNhVUpCUVRsQ0xFVkJRV2xFTzBGQlF6ZERMRzlDUVVGSkxGTkJRVk1zU1VGQlNTeE5RVUZLTEVOQlFWY3NWVUZCV0N4RFFVRmlPMEZCUTBFc2IwSkJRVWtzVDBGQlR5eEpRVUZRTEVOQlFWa3NSMEZCV2l4RFFVRktMRVZCUVhOQ08wRkJRMnhDTEdsRFFVRmhMRWxCUVdJN1FVRkRRU3gzUWtGQlNTeFJRVUZSTEV0QlFVc3NWMEZCVEN4RFFVRnBRaXhMUVVGTExFZEJRVXdzUTBGQmFrSXNSVUZCTkVJc1QwRkJUeXhwUWtGQlVDeERRVUY1UWl4VlFVRjZRaXhEUVVFMVFpeEZRVUZyUlN4RFFVRkRMRWRCUVVRc1EwRkJiRVVzUlVGQmVVVXNRMEZCUXl4dFFrRkJSQ3hGUVVGelFpeFZRVUYwUWl4RFFVRjZSU3hGUVVFMFJ5eGpRVUUxUnl4RFFVRmFMRVZCUVhsSk8wRkJRM0pKTEN0Q1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNqdEJRVU5FTEZsQlFVa3NRMEZCUXl4VlFVRk1MRVZCUVdsQ08wRkJRMklzWjBKQlFVa3NUMEZCVHl4dlFrRkJVQ3hMUVVGblF5eFRRVUZ3UXl4RlFVRXJRenRCUVVNelF5eHZRa0ZCU1N4TFFVRkxMSE5DUVVGVUxFVkJRV2xETzBGQlF6ZENMSGxDUVVGTExHdENRVUZNTEVOQlFYZENMR05CUVhoQ0xFbEJRVEJETEVsQlFURkRPMEZCUTBFc01rSkJRVThzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhqUVVFeFFpeERRVUZRTzBGQlEwZzdRVUZEUkN4dlFrRkJTU3hQUVVGUExFOUJRVThzYjBKQlFXUXNTMEZCZFVNc1UwRkJNME1zUlVGQmMwUTdRVUZEYkVRc2QwSkJRVWtzUTBGQlF5eFBRVUZQTEc5Q1FVRmFMRVZCUVd0RE8wRkJRemxDTEdkRFFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeFhRVUZYTERSQ1FVRTFRaXhGUVVFd1JDeEZRVUZETEV0QlFVc3NSMEZCVGl4RlFVRXhSQ3hGUVVGelJTeEZRVUYwUlN4RlFVRXdSU3gxUWtGQk1VVXNSVUZCYlVjc1NVRkJia2NzUlVGQmVVY3NTVUZCZWtjc1JVRkJLMGNzVFVGQkwwY3NSVUZCZFVnc1ZVRkJka2dzUTBGQmEwa3NSMEZCYkVrc1JVRkJkVWtzU1VGQmRra3NRMEZCVWp0QlFVTkJMRFJDUVVGSkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4TFFVRnFRaXhEUVVGS0xFVkJRVFpDTzBGQlEzcENMRzFEUVVGUExFdEJRVkE3UVVGRFNEdEJRVU5LTzBGQlEwb3NhVUpCVUVRc1RVRlBUenRCUVVOSUxIZENRVUZKTEZGQlFWRXNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xFdEJRVXNzUjBGQlRDeERRVUZxUWl4RlFVRTBRaXhQUVVGUExHOUNRVUZ1UXl4RlFVRjVSQ3hEUVVGRExFZEJRVVFzUTBGQmVrUXNSVUZCWjBVc1EwRkJReXh6UWtGQlJDeERRVUZvUlN4RlFVRXdSaXhqUVVFeFJpeERRVUZhTEVWQlFYVklPMEZCUTI1SUxDdENRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktPMEZCUTBvc1lVRnFRa1FzVFVGcFFrOHNTVUZCU1N4TFFVRkxMSE5DUVVGTUxFbEJRU3RDTEVOQlFVTXNTMEZCU3l4clFrRkJUQ3hEUVVGM1FpeGpRVUY0UWl4RFFVRndReXhGUVVFMlJUdEJRVU5vUml4eFFrRkJTeXh2UWtGQlRDeERRVUV3UWl4alFVRXhRaXhKUVVFMFF5eEpRVUUxUXp0QlFVTklPMEZCUTBvc1UwRnlRa1FzVFVGeFFrOHNTVUZCU1N4TFFVRkxMSE5DUVVGVUxFVkJRV2xETzBGQlEzQkRMR2xDUVVGTExHdENRVUZNTEVOQlFYZENMR05CUVhoQ0xFbEJRVEJETEVsQlFURkRPMEZCUTBFc2JVSkJRVThzUzBGQlN5eHZRa0ZCVEN4RFFVRXdRaXhqUVVFeFFpeERRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTkVMRmRCUVU4c1NVRkJVRHRCUVVOSUxFTkJha1JFT3p0QlFXMUVRU3hwUWtGQmFVSXNVMEZCYWtJc1EwRkJNa0lzTUVKQlFUTkNMRWRCUVhkRUxGTkJRVk1zTUVKQlFWUXNRMEZCYjBNc1NVRkJjRU1zUlVGQk1FTXNUVUZCTVVNc1JVRkJhMFFzWlVGQmJFUXNSVUZCYlVVN1FVRkRka2dzVVVGQlNTeExRVUZLTzBGQlEwRXNVVUZCU1N4UFFVRlBMRmxCUVZBc1MwRkJkMElzVTBGQk5VSXNSVUZCZFVNN1FVRkRia01zWVVGQlN5eEpRVUZKTEUxQlFWUXNTVUZCYlVJc1QwRkJUeXhaUVVFeFFpeEZRVUYzUXp0QlFVTndReXhuUWtGQlNTeExRVUZMTEUxQlFVd3NUVUZCYVVJc1UwRkJja0lzUlVGQlowTTdRVUZETlVJc2IwSkJRVWtzVFVGQlRTeFBRVUZQTEZsQlFWQXNRMEZCYjBJc1RVRkJjRUlzUTBGQlZqdEJRVU5CTEc5Q1FVRkpMRTlCUVU4c1IwRkJVQ3hMUVVGbExGRkJRVzVDTEVWQlFUWkNPMEZCUTNwQ0xIZENRVUZKTEV0QlFVc3NSMEZCVEN4TlFVRmpMRk5CUVd4Q0xFVkJRVFpDTzBGQlEzcENMR2REUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4WFFVRlhMSEZDUVVFMVFpeEZRVUZ0UkR0QlFVTjJSQ3hwUTBGQlN5eE5RVVJyUkR0QlFVVjJSQ3h4UTBGQlV6dEJRVVk0UXl4NVFrRkJia1FzUlVGSFRDeEZRVWhMTEVWQlIwUXNSVUZJUXl4RlFVZEhMRWxCU0Vnc1JVRkhVeXhKUVVoVUxFVkJSMlVzVFVGSVppeEZRVWQxUWl4VlFVaDJRaXhEUVVkclF5eEpRVWhzUXl4RlFVZDNReXhOUVVoNFF5eEZRVWRuUkN4VlFVaG9SQ3hEUVVjeVJDeEpRVWd6UkN4RlFVZHBSU3hqUVVocVJTeERRVUZTTzBGQlNVRXNORUpCUVVrc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEV0QlFXcENMRU5CUVVvc1JVRkJOa0k3UVVGRGVrSXNiVU5CUVU4c1MwRkJVRHRCUVVOSU8wRkJRMG83UVVGRFNpeHBRa0ZXUkN4TlFWVlBMRWxCUVVrc1RVRkJUU3hQUVVGT0xFTkJRV01zUjBGQlpDeERRVUZLTEVWQlFYZENPMEZCUXpOQ0xIbENRVUZMTEVsQlFVa3NTVUZCU1N4RFFVRmlMRVZCUVdkQ0xFbEJRVWtzU1VGQlNTeE5RVUY0UWl4RlFVRm5ReXhIUVVGb1F5eEZRVUZ4UXp0QlFVTnFReXcwUWtGQlNTeGpRVUZqTEVsQlFVa3NRMEZCU2l4RFFVRnNRanRCUVVOQkxEUkNRVUZKTEV0QlFVc3NWMEZCVEN4TlFVRnpRaXhUUVVFeFFpeEZRVUZ4UXp0QlFVTnFReXh2UTBGQlVTeExRVUZMTEZkQlFVd3NRMEZCYVVJc1YwRkJWeXh4UWtGQk5VSXNSVUZCYlVRN1FVRkRka1FzY1VOQlFVc3NUVUZFYTBRN1FVRkZka1FzZVVOQlFWTTdRVUZHT0VNc05rSkJRVzVFTEVWQlIwd3NSVUZJU3l4RlFVZEVMRTFCUVUwc1EwRklUQ3hGUVVkUkxFbEJTRklzUlVGSFl5eEpRVWhrTEVWQlIyOUNMRTFCU0hCQ0xFVkJSelJDTEZWQlNEVkNMRU5CUjNWRExFbEJTSFpETEVWQlJ6WkRMRTFCU0RkRExFVkJSM0ZFTEZWQlNISkVMRU5CUjJkRkxFbEJTR2hGTEVWQlIzTkZMR05CU0hSRkxFTkJRVkk3UVVGSlFTeG5RMEZCU1N4TFFVRkxMRmRCUVV3c1EwRkJhVUlzUzBGQmFrSXNRMEZCU2l4RlFVRTJRanRCUVVONlFpeDFRMEZCVHl4TFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG9zYVVKQllrMHNUVUZoUVR0QlFVTklMSGRDUVVGSkxGRkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEVkQlFYWkNMRVZCUVRSQ0xFVkJRVFZDTEVWQlFXZERMRU5CUVVNc1kwRkJSQ3hGUVVGcFFpeE5RVUZxUWl4RFFVRm9ReXhGUVVFd1JDeGxRVUV4UkN4RFFVRmFMRVZCUVhkR08wRkJRM0JHTEN0Q1FVRlBMRXRCUVZBN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNqdEJRVU5LTzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBnc1EwRjBRMFE3TzBGQmQwTkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXh2UWtGQk0wSXNSMEZCYTBRc1UwRkJVeXh2UWtGQlZDeERRVUU0UWl4SlFVRTVRaXhGUVVGdlF5eE5RVUZ3UXl4RlFVRTBReXhsUVVFMVF5eEZRVUUyUkR0QlFVTXpSeXhYUVVGUExFdEJRVXNzWVVGQlRDeERRVUZ0UWl4SlFVRnVRaXhGUVVGNVFpeE5RVUY2UWl4RlFVRnBReXhsUVVGcVF5eExRVU5CTEV0QlFVc3NZVUZCVEN4RFFVRnRRaXhKUVVGdVFpeEZRVUY1UWl4TlFVRjZRaXhGUVVGcFF5eGxRVUZxUXl4RFFVUkJMRWxCUlVFc1MwRkJTeXhoUVVGTUxFTkJRVzFDTEVsQlFXNUNMRVZCUVhsQ0xFMUJRWHBDTEVWQlFXbERMR1ZCUVdwRExFTkJSa0VzU1VGSFFTeExRVUZMTEZkQlFVd3NRMEZCYVVJc1NVRkJha0lzUlVGQmRVSXNUVUZCZGtJc1JVRkJLMElzWlVGQkwwSXNRMEZJUVN4SlFVbEJMRWxCU2xBN1FVRkxTQ3hEUVU1RU96dEJRVkZCTEdsQ1FVRnBRaXhUUVVGcVFpeERRVUV5UWl4aFFVRXpRaXhIUVVFeVF5eFRRVUZUTEdGQlFWUXNRMEZCZFVJc1NVRkJka0lzUlVGQk5rSXNUVUZCTjBJc1JVRkJjVU1zWlVGQmNrTXNSVUZCYzBRN1FVRkROMFlzVVVGQlNTeFBRVUZQTEV0QlFWQXNTMEZCYVVJc1UwRkJja0lzUlVGQlowTTdRVUZETlVJc1pVRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFJDeFJRVUZKTEV0QlFVbzdRVUZEUVN4VFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NUMEZCVHl4TFFVRlFMRU5CUVdFc1RVRkJha01zUlVGQmVVTXNSMEZCZWtNc1JVRkJPRU03UVVGRE1VTXNXVUZCU1N4WlFVRlpMRTlCUVU4c1MwRkJVQ3hEUVVGaExFTkJRV0lzUTBGQmFFSTdRVUZEUVN4WlFVRkpMRkZCUVZFc1MwRkJTeXhYUVVGTUxFTkJRV2xDTEVsQlFXcENMRVZCUVhWQ0xGTkJRWFpDTEVWQlFXdERMRVZCUVd4RExFVkJRWE5ETEVOQlFVTXNUMEZCUkN4RlFVRlZMRU5CUVZZc1EwRkJkRU1zUlVGQmIwUXNaVUZCY0VRc1EwRkJXaXhGUVVGclJqdEJRVU01UlN4dFFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CV2tRN08wRkJZMEVzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEdGQlFUTkNMRWRCUVRKRExGTkJRVk1zWVVGQlZDeERRVUYxUWl4SlFVRjJRaXhGUVVFMlFpeE5RVUUzUWl4RlFVRnhReXhsUVVGeVF5eEZRVUZ6UkR0QlFVTTNSaXhSUVVGSkxFOUJRVThzUzBGQlVDeExRVUZwUWl4VFFVRnlRaXhGUVVGblF6dEJRVU0xUWl4bFFVRlBMRWxCUVZBN1FVRkRTRHRCUVVORUxGRkJRVWtzVTBGQlV5eEZRVUZpTzBGQlEwRXNVVUZCU1N4clFrRkJhMElzUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCYkVNN1FVRkRRU3hSUVVGSkxIVkNRVUZLTEVWQlFUWkNMSEZDUVVFM1FqdEJRVU5CTEZGQlFVa3NTMEZCU3l4elFrRkJWQ3hGUVVGcFF6dEJRVU0zUWl4clEwRkJNRUlzUzBGQlN5eHZRa0ZCTDBJN1FVRkRRU3huUTBGQmQwSXNTMEZCU3l4clFrRkJOMEk3UVVGRFNEdEJRVU5FTEZGQlFVa3NZVUZCWVN4SlFVRnFRanRCUVVOQkxGTkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hQUVVGUExFdEJRVkFzUTBGQllTeE5RVUZxUXl4RlFVRjVReXhIUVVGNlF5eEZRVUU0UXp0QlFVTXhReXhaUVVGSkxFdEJRVXNzYzBKQlFWUXNSVUZCYVVNN1FVRkROMElzYVVKQlFVc3NiMEpCUVV3c1IwRkJORUlzUlVGQk5VSTdRVUZEUVN4cFFrRkJTeXhyUWtGQlRDeEhRVUV3UWl4RlFVRXhRanRCUVVOSU8wRkJRMFFzV1VGQlNTeFpRVUZaTEU5QlFVOHNTMEZCVUN4RFFVRmhMRU5CUVdJc1EwRkJhRUk3TzBGQlJVRXNXVUZCU1N4aFFVRmhMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFMUJRVGRDTzBGQlEwRXNXVUZCU1N4UlFVRlJMRXRCUVVzc1YwRkJUQ3hEUVVGcFFpeEpRVUZxUWl4RlFVRjFRaXhUUVVGMlFpeEZRVUZyUXl4RlFVRnNReXhGUVVGelF5eERRVUZETEU5QlFVUXNSVUZCVlN4RFFVRldMRU5CUVhSRExFVkJRVzlFTEdWQlFYQkVMRU5CUVZvN08wRkJSVUVzV1VGQlNTeFZRVUZWTEVsQlFWWXNTVUZCYTBJc1pVRkJaU3hMUVVGTExFMUJRVXdzUTBGQldTeE5RVUZxUkN4RlFVRjVSRHRCUVVOeVJDeHBRa0ZCU3l4TlFVRk1MRWRCUVdNc1MwRkJTeXhOUVVGTUxFTkJRVmtzUzBGQldpeERRVUZyUWl4RFFVRnNRaXhGUVVGeFFpeGxRVUZ5UWl4RFFVRmtPenRCUVVWQkxHZENRVUZKTEV0QlFVc3NjMEpCUVZRc1JVRkJhVU03UVVGRE4wSXNjVUpCUVVzc1NVRkJTU3hSUVVGVUxFbEJRWEZDTEV0QlFVc3NhMEpCUVRGQ0xFVkJRVGhETzBGQlF6RkRMREJEUVVGelFpeFJRVUYwUWl4SlFVRnJReXhKUVVGc1F6dEJRVU5CTERKQ1FVRlBMSGRDUVVGM1FpeFJRVUY0UWl4RFFVRlFPMEZCUTBnN1FVRkRSQ3h4UWtGQlN5eEpRVUZKTEZWQlFWUXNTVUZCZFVJc1MwRkJTeXh2UWtGQk5VSXNSVUZCYTBRN1FVRkRPVU1zZDBKQlFVa3NRMEZCUXl4elFrRkJjMElzVlVGQmRFSXNRMEZCVEN4RlFVRjNRenRCUVVOd1F5eG5SRUZCZDBJc1ZVRkJlRUlzU1VGQmMwTXNTVUZCZEVNN1FVRkRTRHRCUVVOS08wRkJRMFE3UVVGRFFTdzJRa0ZCWVN4TFFVRmlPMEZCUTBFN1FVRkRTRHM3UVVGRlJDeHRRa0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRSQ3haUVVGSkxFdEJRVW9zUlVGQlZ6dEJRVU5RTEcxQ1FVRlBMRWxCUVZBc1EwRkJXU3hOUVVGTkxGVkJRVTRzUTBGQmFVSXNTVUZCYWtJc1JVRkJkVUlzUzBGQlN5eERRVUUxUWl4RlFVRXJRaXhWUVVFdlFpeERRVUV3UXl4SlFVRXhReXhGUVVGblJDeFBRVUZvUkN4RFFVRmFPMEZCUTBnN1FVRkRTanRCUVVORUxGRkJRVWtzUzBGQlN5eHpRa0ZCVkN4RlFVRnBRenRCUVVNM1FpeGhRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xIVkNRVUUxUWp0QlFVTkJMR0ZCUVVzc2EwSkJRVXdzUjBGQk1FSXNjVUpCUVRGQ08wRkJRMGc3UVVGRFJDeFJRVUZKTEZWQlFVb3NSVUZCWjBJN1FVRkRXaXhwUWtGQlV5eFBRVUZQTEUxQlFWQXNRMEZCWXl4TFFVRkxMRTFCUVV3c1EwRkJXU3hMUVVGYUxFTkJRV3RDTEdWQlFXeENMRU5CUVdRc1EwRkJWRHRCUVVOQkxHRkJRVXNzVFVGQlRDeEhRVUZqTEV0QlFVc3NUVUZCVEN4RFFVRlpMRXRCUVZvc1EwRkJhMElzUTBGQmJFSXNSVUZCY1VJc1pVRkJja0lzUTBGQlpEdEJRVU5CTEdWQlFVOHNTMEZCU3l4WFFVRk1MRU5CUVdsQ0xGZEJRVmNzWTBGQk5VSXNSVUZCTkVNc1JVRkJOVU1zUlVGQlowUXNSVUZCYUVRc1JVRkJiMFFzVVVGQmNFUXNSVUZCT0VRc1RVRkJPVVFzUlVGQmMwVXNTVUZCZEVVc1JVRkJORVVzVFVGQk5VVXNRMEZCVUR0QlFVTklPMEZCUTBvc1EwRjJSRVE3TzBGQmVVUkJMR2xDUVVGcFFpeFRRVUZxUWl4RFFVRXlRaXhoUVVFelFpeEhRVUV5UXl4VFFVRlRMR0ZCUVZRc1EwRkJkVUlzU1VGQmRrSXNSVUZCTmtJc1RVRkJOMElzUlVGQmNVTXNaVUZCY2tNc1JVRkJjMFE3UVVGRE4wWXNVVUZCU1N4UFFVRlBMRXRCUVZBc1MwRkJhVUlzVTBGQmNrSXNSVUZCWjBNN1FVRkROVUlzWlVGQlR5eEpRVUZRTzBGQlEwZzdRVUZEUkN4UlFVRkpMR0ZCUVdFc1NVRkJha0k3UVVGRFFTeFJRVUZKTEZOQlFWTXNSVUZCWWp0QlFVTkJMRkZCUVVrc2EwSkJRV3RDTEV0QlFVc3NUVUZCVEN4RFFVRlpMRTFCUVd4RE8wRkJRMEVzVVVGQlNTeDFRa0ZCU2l4RlFVRTJRaXh4UWtGQk4wSTdRVUZEUVN4UlFVRkpMRXRCUVVzc2MwSkJRVlFzUlVGQmFVTTdRVUZETjBJc2EwTkJRVEJDTEV0QlFVc3NiMEpCUVM5Q08wRkJRMEVzWjBOQlFYZENMRXRCUVVzc2EwSkJRVGRDTzBGQlEwZzdRVUZEUkN4VFFVRkxMRWxCUVVrc1NVRkJTU3hEUVVGaUxFVkJRV2RDTEVsQlFVa3NUMEZCVHl4TFFVRlFMRU5CUVdFc1RVRkJha01zUlVGQmVVTXNSMEZCZWtNc1JVRkJPRU03UVVGRE1VTXNXVUZCU1N4TFFVRkxMSE5DUVVGVUxFVkJRV2xETzBGQlF6ZENMR2xDUVVGTExHOUNRVUZNTEVkQlFUUkNMRVZCUVRWQ08wRkJRMEVzYVVKQlFVc3NhMEpCUVV3c1IwRkJNRUlzUlVGQk1VSTdRVUZEU0R0QlFVTkVMRmxCUVVrc1dVRkJXU3hQUVVGUExFdEJRVkFzUTBGQllTeERRVUZpTEVOQlFXaENPenRCUVVWQkxGbEJRVWtzWVVGQllTeExRVUZMTEUxQlFVd3NRMEZCV1N4TlFVRTNRanRCUVVOQkxGbEJRVWtzVVVGQlVTeExRVUZMTEZkQlFVd3NRMEZCYVVJc1NVRkJha0lzUlVGQmRVSXNVMEZCZGtJc1JVRkJhME1zUlVGQmJFTXNSVUZCYzBNc1EwRkJReXhQUVVGRUxFVkJRVlVzUTBGQlZpeERRVUYwUXl4RlFVRnZSQ3hsUVVGd1JDeERRVUZhT3p0QlFVVkJMRmxCUVVrc1ZVRkJWU3hKUVVGV0xFbEJRV3RDTEdWQlFXVXNTMEZCU3l4TlFVRk1MRU5CUVZrc1RVRkJha1FzUlVGQmVVUTdRVUZEY2tRc1owSkJRVWtzWlVGQlpTeEpRVUZ1UWl4RlFVRjVRanRCUVVOeVFpdzJRa0ZCWVN4RFFVRmlPMEZCUTBnc1lVRkdSQ3hOUVVWUE8wRkJRMGdzY1VKQlFVc3NUVUZCVEN4SFFVRmpMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFdEJRVm9zUTBGQmEwSXNRMEZCYkVJc1JVRkJjVUlzWlVGQmNrSXNRMEZCWkR0QlFVTkJMSFZDUVVGUExFdEJRVXNzVjBGQlRDeERRVUZwUWl4WFFVRlhMR1ZCUVRWQ0xFVkJRVFpETzBGQlEyaEVMRFJDUVVGUkxGVkJSSGRETzBGQlJXaEVMRFJDUVVGUk8wRkJSbmRETEdsQ1FVRTNReXhGUVVkS0xFVkJTRWtzUlVGSFFTeFJRVWhCTEVWQlIxVXNTVUZJVml4RlFVZG5RaXhKUVVob1FpeEZRVWR6UWl4TlFVaDBRaXhEUVVGUU8wRkJTVWc3UVVGRFJDeG5Ra0ZCU1N4TFFVRkxMSE5DUVVGVUxFVkJRV2xETzBGQlF6ZENMSEZDUVVGTExFbEJRVWtzVVVGQlZDeEpRVUZ4UWl4TFFVRkxMR3RDUVVFeFFpeEZRVUU0UXp0QlFVTXhReXd3UTBGQmMwSXNVVUZCZEVJc1NVRkJhME1zU1VGQmJFTTdRVUZEUVN3eVFrRkJUeXgzUWtGQmQwSXNVVUZCZUVJc1EwRkJVRHRCUVVOSU8wRkJRMFFzY1VKQlFVc3NTVUZCU1N4VlFVRlVMRWxCUVhWQ0xFdEJRVXNzYjBKQlFUVkNMRVZCUVd0RU8wRkJRemxETEhkQ1FVRkpMRU5CUVVNc2MwSkJRWE5DTEZWQlFYUkNMRU5CUVV3c1JVRkJkME03UVVGRGNFTXNaMFJCUVhkQ0xGVkJRWGhDTEVsQlFYTkRMRWxCUVhSRE8wRkJRMGc3UVVGRFNqdEJRVU5LTzBGQlEwb3NVMEZ5UWtRc1RVRnhRazhzU1VGQlNTeExRVUZLTEVWQlFWYzdRVUZEWkN4dFFrRkJUeXhKUVVGUUxFTkJRVmtzUzBGQldqdEJRVU5JTzBGQlEwbzdRVUZEUkN4UlFVRkpMRXRCUVVzc2MwSkJRVlFzUlVGQmFVTTdRVUZETjBJc1lVRkJTeXh2UWtGQlRDeEhRVUUwUWl4MVFrRkJOVUk3UVVGRFFTeGhRVUZMTEd0Q1FVRk1MRWRCUVRCQ0xIRkNRVUV4UWp0QlFVTklPMEZCUTBRc1VVRkJTU3hsUVVGbExFbEJRVzVDTEVWQlFYbENPMEZCUTNKQ0xHbENRVUZUTEU5QlFVOHNUVUZCVUN4RFFVRmpMRXRCUVVzc1RVRkJUQ3hEUVVGWkxFdEJRVm9zUTBGQmEwSXNaVUZCYkVJc1EwRkJaQ3hEUVVGVU8wRkJRMEVzWVVGQlN5eE5RVUZNTEVkQlFXTXNTMEZCU3l4TlFVRk1MRU5CUVZrc1MwRkJXaXhEUVVGclFpeERRVUZzUWl4RlFVRnhRaXhsUVVGeVFpeERRVUZrTzBGQlEwRXNaVUZCVHl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eGpRVUUxUWl4RlFVRTBReXhGUVVFMVF5eEZRVUZuUkN4RlFVRm9SQ3hGUVVGdlJDeFJRVUZ3UkN4RlFVRTRSQ3hOUVVFNVJDeEZRVUZ6UlN4SlFVRjBSU3hGUVVFMFJTeE5RVUUxUlN4RFFVRlFPMEZCUTBnc1MwRktSQ3hOUVVsUE8wRkJRMGdzWVVGQlN5eE5RVUZNTEVkQlFXTXNTMEZCU3l4TlFVRk1MRU5CUVZrc1MwRkJXaXhEUVVGclFpeERRVUZzUWl4RlFVRnhRaXhsUVVGeVFpeERRVUZrTzBGQlEwZzdRVUZEUkN4WFFVRlBMRWxCUVZBN1FVRkRTQ3hEUVRORVJEczdRVUUyUkVFc2FVSkJRV2xDTEZOQlFXcENMRU5CUVRKQ0xGZEJRVE5DTEVkQlFYbERMRk5CUVZNc1YwRkJWQ3hEUVVGeFFpeEpRVUZ5UWl4RlFVRXlRaXhOUVVFelFpeEZRVUZ0UXl4bFFVRnVReXhGUVVGdlJEdEJRVU42Uml4UlFVRkpMRTlCUVU4c1IwRkJVQ3hMUVVGbExGTkJRVzVDTEVWQlFUaENPMEZCUXpGQ0xHVkJRVThzU1VGQlVEdEJRVU5JTzBGQlEwUXNVVUZCU1N4blFrRkJaMElzUzBGQlN5eE5RVUZNTEVOQlFWa3NUVUZCYUVNN1FVRkRRU3hSUVVGSkxIVkNRVUZLTEVWQlFUWkNMSEZDUVVFM1FqdEJRVU5CTEZGQlFVa3NTMEZCU3l4elFrRkJWQ3hGUVVGcFF6dEJRVU0zUWl4clEwRkJNRUlzUzBGQlN5eHZRa0ZCTDBJN1FVRkRRU3huUTBGQmQwSXNTMEZCU3l4clFrRkJOMEk3UVVGRFFTeGhRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xFVkJRVFZDTzBGQlEwRXNZVUZCU3l4clFrRkJUQ3hIUVVFd1FpeEZRVUV4UWp0QlFVTklPMEZCUTBRc1VVRkJTU3hSUVVGUkxFdEJRVXNzVjBGQlRDeERRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeFBRVUZQTEVkQlFUbENMRVZCUVcxRExFbEJRVzVETEVWQlFYbERMRWxCUVhwRExFVkJRU3RETEdWQlFTOURMRU5CUVZvN1FVRkRRU3hSUVVGSkxGbEJRVmtzUzBGQlN5eE5RVUZNTEVOQlFWa3NTMEZCV2l4RFFVRnJRaXhoUVVGc1FpeERRVUZvUWp0QlFVTkJMRk5CUVVzc1RVRkJUQ3hIUVVGakxFdEJRVXNzVFVGQlRDeERRVUZaTEV0QlFWb3NRMEZCYTBJc1EwRkJiRUlzUlVGQmNVSXNZVUZCY2tJc1EwRkJaRHRCUVVOQkxGRkJRVWtzUzBGQlN5eHpRa0ZCVkN4RlFVRnBRenRCUVVNM1FpeGhRVUZMTEc5Q1FVRk1MRWRCUVRSQ0xIVkNRVUUxUWp0QlFVTkJMR0ZCUVVzc2EwSkJRVXdzUjBGQk1FSXNjVUpCUVRGQ08wRkJRMGc3UVVGRFJDeFJRVUZKTEZWQlFWVXNTVUZCVml4SlFVRnJRaXhWUVVGVkxFMUJRVllzUzBGQmNVSXNRMEZCTTBNc1JVRkJPRU03UVVGRE1VTXNaVUZCVHl4TFFVRkxMRmRCUVV3c1EwRkJhVUlzVjBGQlZ5eFZRVUUxUWl4RlFVRjNReXhGUVVGNFF5eEZRVUUwUXl4RlFVRTFReXhGUVVGblJDeE5RVUZvUkN4RlFVRjNSQ3hKUVVGNFJDeEZRVUU0UkN4SlFVRTVSQ3hGUVVGdlJTeE5RVUZ3UlN4RFFVRlFPMEZCUTBnN1FVRkRSQ3hYUVVGUExFbEJRVkE3UVVGRFNDeERRWFpDUkRzN1FVRjVRa0VzYVVKQlFXbENMRk5CUVdwQ0xFTkJRVEpDTEd0Q1FVRXpRaXhIUVVGblJDeFRRVUZUTEc5Q1FVRlVMRU5CUVRoQ0xFbEJRVGxDTEVWQlFXOURMRTFCUVhCRExFVkJRVFJETEdWQlFUVkRMRVZCUVRaRU8wRkJRM3BITEZGQlFVa3NRMEZCUXl4UFFVRlBMRXRCUVZvc1JVRkJiVUk3UVVGRFppeGxRVUZQTEVsQlFWQTdRVUZEU0R0QlFVTkVMRkZCUVVrc1MwRkJTanRCUVVOQkxGTkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hQUVVGUExFdEJRVkFzUTBGQllTeE5RVUZxUXl4RlFVRjVReXhIUVVGNlF5eEZRVUU0UXp0QlFVTXhReXhaUVVGSkxFMUJRVTBzVDBGQlR5eExRVUZRTEVOQlFXRXNRMEZCWWl4RFFVRldPMEZCUTBFc1dVRkJTU3hKUVVGSkxFZEJRVW9zUzBGQldTeGhRVUZvUWl4RlFVRXJRanRCUVVNelFpeG5Ra0ZCU1N4WFFVRlhMRWxCUVVrc1YwRkJTaXhEUVVGblFpeEpRVUZKTEVsQlFYQkNMRU5CUVdZN1FVRkRRU3huUWtGQlNTeGhRVUZoTEVsQlFXcENPMEZCUTBFc2FVSkJRVXNzU1VGQlNTeEpRVUZKTEVOQlFXSXNSVUZCWjBJc1NVRkJTU3hUUVVGVExGRkJRVlFzUTBGQmEwSXNUVUZCZEVNc1JVRkJPRU1zUjBGQk9VTXNSVUZCYlVRN1FVRkRMME1zYjBKQlFVa3NSVUZCUlN4VFFVRlRMRkZCUVZRc1EwRkJhMElzUTBGQmJFSXNTMEZCZDBJc1NVRkJNVUlzUTBGQlNpeEZRVUZ4UXp0QlFVTnFReXhwUTBGQllTeExRVUZpTzBGQlEwRTdRVUZEU0R0QlFVTktPMEZCUTBRc1owSkJRVWtzVlVGQlNpeEZRVUZuUWp0QlFVTmFMRzlDUVVGSkxGbEJRVmtzVTBGQlV5eGpRVUZVTEVOQlFYZENMRWxCUVhoQ0xFTkJRV2hDTzBGQlEwRXNiMEpCUVVrc1dVRkJXU3hGUVVGRExGRkJRVkVzVTBGQlZDeEZRVUZvUWp0QlFVTkJMRzlDUVVGSkxGRkJRVkVzUzBGQlN5eFhRVUZNTEVOQlFXbENMRWxCUVdwQ0xFVkJRWFZDTEZOQlFYWkNMRVZCUVd0RExFVkJRV3hETEVWQlFYTkRMRU5CUVVNc1QwRkJSQ3hGUVVGVkxFTkJRVllzUTBGQmRFTXNSVUZCYjBRc1pVRkJjRVFzUTBGQldpeEZRVUZyUmp0QlFVTTVSU3d5UWtGQlR5eExRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTktPMEZCUTBvN1FVRkRTaXhEUVhwQ1JEczdRVUV5UWtFN1FVRkRRVHM3UVVGRlFTeFRRVUZUTEZGQlFWUXNRMEZCYTBJc1IwRkJiRUlzUlVGQmRVSTdRVUZEYmtJc1VVRkJTU3hKUVVGSkxFOUJRVThzUjBGQlVDeEZRVUZaTEU5QlFWb3NRMEZCYjBJc1dVRkJjRUlzUlVGQmEwTXNSVUZCYkVNc1JVRkJjME1zUzBGQmRFTXNRMEZCTkVNc2IwZEJRVFZETEVOQlFWSTdRVUZEUVR0QlFVTkJMRmRCUVZFc1NVRkJTVHRCUVVOU0xHTkJRVTBzUlVGQlJTeERRVUZHTEV0QlFWRXNSVUZFVGp0QlFVVlNMR3RDUVVGVkxFVkJRVVVzUTBGQlJpeExRVUZSTEVWQlJsWTdRVUZIVWl4dFFrRkJWeXhGUVVGRkxFTkJRVVlzUzBGQlVTeEZRVWhZTzBGQlNWSXNZMEZCVFN4RlFVRkZMRU5CUVVZc1MwRkJVU3hGUVVwT08wRkJTMUlzYTBKQlFWVXNSVUZCUlN4RFFVRkdMRXRCUVZFc1JVRk1WanRCUVUxU0xHTkJRVTBzUlVGQlJTeERRVUZHTEV0QlFWRXNSVUZPVGp0QlFVOVNMR3RDUVVGVkxFVkJRVVVzUTBGQlJpeExRVUZSTEVWQlVGWTdRVUZSVWl4blFrRkJVU3hGUVVGRkxFTkJRVVlzUzBGQlVTeEZRVkpTTzBGQlUxSXNZMEZCVFN4RlFVRkZMRU5CUVVZc1MwRkJVVHRCUVZST0xFdEJRVW9zUjBGVlNpeEpRVlpLTzBGQlYwZzdPMEZCUlVRc1UwRkJVeXhWUVVGVUxFTkJRVzlDTEVsQlFYQkNMRVZCUVRCQ0xFbEJRVEZDTEVWQlFXZERPMEZCUVVNN08wRkJSVGRDTEdGQlFWTXNhVUpCUVZRc1EwRkJNa0lzUzBGQk0wSXNSVUZCYTBNN1FVRkRPVUlzV1VGQlNTeFRRVUZUTEVWQlFXSTdRVUZEUVN4alFVRk5MRTlCUVU0c1EwRkJZeXhwUWtGQlpDeEZRVUZwUXl4RlFVRnFReXhGUVVOTExFOUJSRXdzUTBGRFlTeG5Ra0ZFWWl4RlFVTXJRaXhIUVVRdlFpeEZRVVZMTEU5QlJrd3NRMEZGWVN4VFFVWmlMRVZCUlhkQ0xFMUJSbmhDTEVWQlIwc3NUMEZJVEN4RFFVZGhMRmxCU0dJc1JVRkhNa0lzVlVGQlZTeERRVUZXTEVWQlFXRTdRVUZEYUVNc1owSkJRVWtzVFVGQlRTeExRVUZXTEVWQlFXbENPMEZCUTJJc2RVSkJRVThzUjBGQlVEdEJRVU5JTEdGQlJrUXNUVUZGVHp0QlFVTklMSFZDUVVGUExFbEJRVkFzUTBGQldTeERRVUZhTzBGQlEwZzdRVUZEU2l4VFFWUk1PMEZCVlVFc1pVRkJUeXhQUVVGUExFbEJRVkFzUTBGQldTeEZRVUZhTEVWQlFXZENMRTlCUVdoQ0xFTkJRWGRDTEV0QlFYaENMRVZCUVN0Q0xFMUJRVTBzVFVGQlRpeERRVUZoTEVOQlFXSXNUVUZCYjBJc1IwRkJjRUlzUjBGQk1FSXNSMEZCTVVJc1IwRkJaME1zUlVGQkwwUXNRMEZCVUR0QlFVTklPenRCUVVWRUxGZEJRVThzVTBGQlV5eFJRVUZSTEVWQlFXcENMRU5CUVZBN1FVRkRRU3hYUVVGUExGTkJRVk1zVVVGQlVTeEZRVUZxUWl4RFFVRlFPenRCUVVWQkxGZEJRVThzUTBGQlF5eEpRVUZFTEVsQlFWTXNRMEZCUXl4SlFVRldMRWRCUVdsQ0xFbEJRV3BDTEVkQlFYZENMRU5CUVVNc1MwRkJTeXhSUVVGTUxFbEJRV2xDTEV0QlFVc3NVVUZCZGtJc1MwRkRPVUlzUzBGQlN5eFJRVUZNTEVsQlFXbENMRXRCUVVzc1UwRkJkRUlzUjBGQmEwTXNTMEZCU3l4VFFVRjJReXhIUVVGdFJDeExRVUZMTEZOQlJERkNMRWxCUlM5Q0xHdENRVUZyUWl4TFFVRkxMRkZCUVV3c1NVRkJhVUlzUzBGQlN5eFRRVUYwUWl4SlFVRnRReXhMUVVGTExGRkJRVXdzUTBGQll5eE5RVUZrTEVOQlFYRkNMRU5CUVhKQ0xFMUJRVFJDTEVkQlFTOUVMRWRCUVhGRkxFdEJRVXNzVVVGQk1VVXNSMEZCYzBZc1MwRkJTeXhSUVVGTUxFZEJRV2xDTEVOQlFVTXNTMEZCU3l4VFFVRk1MRWxCUVd0Q0xFTkJRVU1zUzBGQlN5eFJRVUY0UWl4SFFVRnRReXhIUVVGdVF5eEhRVUY1UXl4RlFVRXhReXhKUVVGblJDeExRVUZMTEZGQlFVd3NRMEZCWXl4TFFVRmtMRU5CUVc5Q0xFTkJRWEJDTEVWQlFYVkNMRXRCUVVzc1VVRkJUQ3hEUVVGakxGZEJRV1FzUTBGQk1FSXNSMEZCTVVJc1NVRkJhVU1zUTBGQmVFUXNRMEZCYUVRc1IwRkJOa2NzUzBGQlN5eFJRVUZ1U1N4SFFVRXJTU3hMUVVGTExGRkJRVFZRTEVOQlJpdENMRWxCUnpsQ0xFdEJRVXNzVVVGQlRDeEpRVUZwUWl4TFFVRkxMRk5CUVhSQ0xFbEJRVzFETEV0QlFVc3NVVUZCZUVNc1IwRkJiVVFzUzBGQlN5eE5RVUY0UkN4SFFVRnJSU3hMUVVGTExFMUJRVXdzU1VGQlpTeExRVUZMTEUxQlNIaEVMRWxCU1M5Q0xFdEJRVXNzU1VGS1REdEJRVXRJT3p0QlFVVkVMRk5CUVZNc1kwRkJWQ3hEUVVGM1FpeEhRVUY0UWl4RlFVRTJRanRCUVVONlFpeFhRVUZQTEVsQlFVa3NTMEZCU2l4RFFVRlZMRWRCUVZZc1JVRkJaU3hEUVVGbUxFTkJRVkE3UVVGRFNEczdRVUZGUkN4VFFVRlRMRlZCUVZRc1EwRkJiMElzVFVGQmNFSXNSVUZCTkVJc1QwRkJOVUlzUlVGQmNVTTdRVUZEYWtNc1VVRkJTU3hWUVVGVkxGRkJRVThzVFVGQlVDeDFSRUZCVHl4TlFVRlFMRTlCUVd0Q0xGRkJRV2hETEVWQlFUQkRPMEZCUTNSRExGbEJRVWtzV1VGQldTeFRRVUZvUWl4RlFVRXlRanRCUVVOMlFpeHpRa0ZCVlN4UFFVRlBMRVZCUVdwQ08wRkJRMGdzVTBGR1JDeE5RVVZQTEVsQlFVa3NUMEZCVHl4UFFVRlBMRVZCUVdRc1MwRkJjVUlzVVVGQmVrSXNSVUZCYlVNN1FVRkRkRU1zYzBKQlFWVXNWMEZCVnl4UFFVRllMRVZCUVc5Q0xFOUJRVThzUlVGQk0wSXNRMEZCVmp0QlFVTkJMRzFDUVVGUExFVkJRVkFzUjBGQldTeFBRVUZhTzBGQlEwZzdRVUZEUkN4WlFVRkpMRTFCUVUwc1QwRkJUaXhEUVVGakxFMUJRV1FzUTBGQlNpeEZRVUV5UWp0QlFVTjJRaXhwUWtGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxFOUJRVThzVFVGQk0wSXNSVUZCYlVNc1IwRkJia01zUlVGQmQwTTdRVUZEY0VNc01rSkJRVmNzVDBGQlR5eERRVUZRTEVOQlFWZ3NSVUZCYzBJc1QwRkJkRUk3UVVGRFNEdEJRVU5LTEZOQlNrUXNUVUZKVHp0QlFVTklMR2RDUVVGSkxFOUJRVThzVDBGQlR5eE5RVUZRTEVOQlFWQXNTMEZCTUVJc1VVRkJPVUlzUlVGQmQwTTdRVUZEY0VNc2RVSkJRVThzVFVGQlVDeEpRVUZwUWl4WFFVRlhMRTlCUVZnc1JVRkJiMElzVDBGQlR5eE5RVUZRTEVOQlFYQkNMRU5CUVdwQ08wRkJRMGc3UVVGRFJDeHBRa0ZCU3l4SlFVRkpMRWRCUVZRc1NVRkJaMElzVFVGQmFFSXNSVUZCZDBJN1FVRkRjRUlzYjBKQlFVa3NVVUZCVVN4TlFVRmFMRVZCUVc5Q08wRkJRMmhDTEN0Q1FVRlhMRTlCUVU4c1IwRkJVQ3hEUVVGWUxFVkJRWGRDTEU5QlFYaENPMEZCUTBnN1FVRkRTanRCUVVOS08wRkJRMG83UVVGRFNqczdRVUZGUkN4VFFVRlRMRzlDUVVGVUxFTkJRVGhDTEZGQlFUbENMRVZCUVhkRE8wRkJRM0JETEdWQlFWY3NXVUZCV1N4SlFVRjJRanM3UVVGRlFTeFJRVUZKTEdkQ1FVRm5RaXhWUVVGVkxGRkJRVllzUTBGQmNFSTdPMEZCUlVFc1YwRkJUeXhWUVVGVkxFdEJRVllzUlVGQmFVSTdRVUZEY0VJc1dVRkJTU3hyUWtGQmEwSXNZMEZCWXl4TlFVRk5MRWxCUVhCQ0xFdEJRVFpDTEhGQ1FVRnhRaXhOUVVGTkxFbEJRVE5DTEVOQlFXNUVPMEZCUTBFc1dVRkJTU3hQUVVGUExHVkJRVkFzUzBGQk1rSXNVVUZCTDBJc1JVRkJlVU03UVVGRGNrTXNiVUpCUVU4c2QwSkJRWGRDTEUxQlFVMHNTVUZCT1VJc1IwRkJjVU1zU1VGQmNrTXNSMEZCTkVNc2VVSkJRV1VzVFVGQlRTeGhRVUZ5UWl4RFFVRnVSRHRCUVVOSU8wRkJRMFFzV1VGQlNTeG5Ra0ZCWjBJc1RVRkJUU3hOUVVFeFFqdEJRVU5CTzBGQlEwRXNaVUZCVHl4blFrRkJaMElzVDBGQmFFSXNRMEZCZDBJc1pVRkJlRUlzUlVGQmVVTXNWVUZCVlN4TFFVRldMRVZCUVdsQ0xFOUJRV3BDTEVWQlFUQkNPMEZCUTNSRkxHZENRVUZKTEZkQlFWY3NZMEZCWXl4UFFVRmtMRU5CUVdZN1FVRkRRU3h0UWtGQlR5eFBRVUZQTEZGQlFWQXNTMEZCYjBJc1VVRkJjRUlzU1VGQlowTXNUMEZCVHl4UlFVRlFMRXRCUVc5Q0xGRkJRWEJFTEVkQlFTdEVMRkZCUVM5RUxFZEJRVEJGTEV0QlFXcEdPMEZCUTBnc1UwRklUU3hEUVVGUU8wRkJTVWdzUzBGWVJEdEJRVmxJT3p0QlFVVkVMRWxCUVVrc1lVRkJZVHRCUVVOaUxHdENRVUZqTEVOQlJFUTdRVUZGWWl4dFFrRkJaU3hEUVVaR08wRkJSMklzYjBKQlFXZENMRVZCU0VnN1FVRkpZaXh2UWtGQlowSXNSVUZLU0R0QlFVdGlMSEZDUVVGcFFpeEZRVXhLTzBGQlRXSXNaMEpCUVZrc1JVRk9RenRCUVU5aU8wRkJRMEVzZDBKQlFXOUNMRWRCVWxBN1FVRlRZaXh2UWtGQlowSXNSMEZVU0R0QlFWVmlMRGhDUVVFd1FpeEhRVlppTzBGQlYySXNiMEpCUVdkQ0xFZEJXRWc3UVVGWllpdzRRa0ZCTUVJc1IwRmFZanRCUVdGaUxIbENRVUZ4UWl4SFFXSlNPMEZCWTJJN1FVRkRRU3g1UWtGQmNVSXNSMEZtVWp0QlFXZENZaXgzUWtGQmIwSXNSMEZvUWxBN1FVRnBRbUlzYjBKQlFXZENMRWRCYWtKSU8wRkJhMEppTzBGQlEwRXNLMEpCUVRKQ0xFZEJia0prTzBGQmIwSmlMQ3RDUVVFeVFpeEhRWEJDWkR0QlFYRkNZaXh4UWtGQmFVSXNSMEZ5UWtvN1FVRnpRbUlzYTBOQlFUaENMRWRCZEVKcVFqdEJRWFZDWWl3eVFrRkJkVUlzUjBGMlFsWTdRVUYzUW1JN1FVRkRRU3gzUWtGQmIwSXNSMEY2UWxBN1FVRXdRbUlzZFVKQlFXMUNMRWRCTVVKT08wRkJNa0ppTEd0Q1FVRmpMRWRCTTBKRU8wRkJORUppTERSQ1FVRjNRaXhIUVRWQ1dEdEJRVFpDWWp0QlFVTkJMRzFDUVVGbExFZEJPVUpHTzBGQkswSmlMRzlDUVVGblFpeEhRUzlDU0R0QlFXZERZanRCUVVOQkxIZENRVUZ2UWl4SFFXcERVRHRCUVd0RFlqdEJRVU5CTEhOQ1FVRnJRanRCUVc1RFRDeERRVUZxUWp0QlFYRkRRU3hKUVVGSkxHdENRVUZyUWl4RlFVRjBRanRCUVVOQkxFdEJRVXNzU1VGQlNTeEhRVUZVTEVsQlFXZENMRlZCUVdoQ0xFVkJRVFJDTzBGQlEzaENMRzlDUVVGblFpeFhRVUZYTEVkQlFWZ3NRMEZCYUVJc1NVRkJiVU1zUjBGQmJrTTdRVUZEU0R0QlFVTkVMRWxCUVVrc2RVSkJRWFZDTzBGQlEzWkNMR3RDUVVGakxEUkRRVVJUTzBGQlJYWkNMRzFDUVVGbExEUkNRVVpSTzBGQlIzWkNMRzlDUVVGblFpeG5SRUZJVHp0QlFVbDJRaXh2UWtGQlowSXNaMFJCU2s4N1FVRkxka0lzY1VKQlFXbENMREJHUVV4Tk8wRkJUWFpDTEdkQ1FVRlpMR3REUVU1WE8wRkJUM1pDTzBGQlEwRXNkMEpCUVc5Q0xHbEVRVkpITzBGQlUzWkNMRzlDUVVGblFpdzRRMEZVVHp0QlFWVjJRaXc0UWtGQk1FSXNkVVJCVmtnN1FVRlhka0lzYjBKQlFXZENMR2xFUVZoUE8wRkJXWFpDTERoQ1FVRXdRaXgxUkVGYVNEdEJRV0YyUWl4NVFrRkJjVUlzY1VOQllrVTdRVUZqZGtJN1FVRkRRU3g1UWtGQmNVSXNlVVJCWmtVN1FVRm5RblpDTEhkQ1FVRnZRaXgzUkVGb1FrYzdRVUZwUW5aQ0xHOUNRVUZuUWl3d1EwRnFRazg3UVVGclFuWkNPMEZCUTBFc0swSkJRVEpDTEdsRlFXNUNTanRCUVc5Q2RrSXNLMEpCUVRKQ0xHdEZRWEJDU2p0QlFYRkNka0lzY1VKQlFXbENMR3REUVhKQ1RUdEJRWE5DZGtJc2EwTkJRVGhDTEcxRFFYUkNVRHRCUVhWQ2RrSXNNa0pCUVhWQ0xHMUZRWFpDUVR0QlFYZENka0k3UVVGRFFTeDNRa0ZCYjBJc2EwUkJla0pITzBGQk1FSjJRaXgxUWtGQmJVSXNhVVJCTVVKSk8wRkJNa0oyUWl4clFrRkJZeXcwUkVFelFsTTdRVUUwUW5aQ0xEUkNRVUYzUWl3NFFrRTFRa1E3UVVFMlFuWkNPMEZCUTBFc2JVSkJRV1VzYzBOQk9VSlJPMEZCSzBKMlFpeHZRa0ZCWjBJc2JVTkJMMEpQTzBGQlowTjJRanRCUVVOQkxIZENRVUZ2UWl4M1FrRnFRMGM3UVVGclEzWkNPMEZCUTBFc2MwSkJRV3RDTzBGQmJrTkxMRU5CUVROQ096dEJRWE5EUVN4VFFVRlRMR1ZCUVZRc1EwRkJlVUlzU1VGQmVrSXNSVUZCSzBJc1RVRkJMMElzUlVGQmRVTXNVVUZCZGtNc1JVRkJhVVFzVlVGQmFrUXNSVUZCTmtRc1UwRkJOMFFzUlVGQmQwVTdRVUZEY0VVc1ZVRkJUU3hKUVVGT0xFTkJRVmNzU1VGQldEdEJRVU5CTEZGQlFVa3NVMEZCVXl4VFFVRmlMRVZCUVhkQ08wRkJRM0JDTEdOQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc05rSkJRVFpDTEZWQlFYWkRMRU5CUVU0N1FVRkRTRHRCUVVORUxGTkJRVXNzVDBGQlRDeEhRVUZsTEVWQlFXWTdRVUZEUVN4VFFVRkxMRTFCUVV3c1IwRkJZeXhOUVVGa08wRkJRMEVzVTBGQlN5eEpRVUZNTEVkQlFWa3NTVUZCV2p0QlFVTkJMRk5CUVVzc1VVRkJUQ3hIUVVGblFpeFpRVUZaTEVWQlFUVkNPMEZCUTBFc1UwRkJTeXhWUVVGTUxFZEJRV3RDTEdOQlFXTXNSVUZCYUVNN1FVRkRRU3hUUVVGTExGTkJRVXdzUjBGQmFVSXNZVUZCWVN4SlFVRTVRanM3UVVGRlFTeFJRVUZKTEUxQlFVMHNTVUZCU1N4TFFVRktMRU5CUVZVc1MwRkJTeXhQUVVGbUxFTkJRVlk3UVVGRFFTeFRRVUZMTEV0QlFVd3NSMEZCWVN4SlFVRkpMRXRCUVVvc1NVRkJZU3hKUVVGSkxGVkJRVGxDTzBGQlEwRXNVVUZCU1N4RFFVRkRMRXRCUVVzc1MwRkJWaXhGUVVGcFFqdEJRVU5pTEZsQlFVazdRVUZEUVN4clFrRkJUU3hIUVVGT08wRkJRMGdzVTBGR1JDeERRVWRCTEU5QlFVOHNSMEZCVUN4RlFVRlpPMEZCUTFJc2FVSkJRVXNzUzBGQlRDeEhRVUZoTEVsQlFVa3NTMEZCU2l4SlFVRmhMRWxCUVVrc1ZVRkJPVUk3UVVGRFNEdEJRVU5LTzBGQlEwbzdPMEZCUlVRc1owSkJRV2RDTEZOQlFXaENMRWRCUVRSQ0xITkNRVUZqTEUxQlFVMHNVMEZCY0VJc1EwRkJOVUk3UVVGRFFTeG5Ra0ZCWjBJc1UwRkJhRUlzUTBGQk1FSXNWMEZCTVVJc1IwRkJkME1zWlVGQmVFTTdRVUZEUVN4blFrRkJaMElzVTBGQmFFSXNRMEZCTUVJc1NVRkJNVUlzUjBGQmFVTXNhVUpCUVdwRE96dEJRVVZCTEdkQ1FVRm5RaXhUUVVGb1FpeERRVUV3UWl4VlFVRXhRaXhIUVVGMVF5eFZRVUZWTEZWQlFWWXNSVUZCYzBJc1dVRkJkRUlzUlVGQmIwTTdRVUZEZGtVc1VVRkJTU3hsUVVGbExFbEJRVzVDTEVWQlFYbENPMEZCUTNKQ0xIRkNRVUZoTEZkQlFWY3NUMEZCV0N4RFFVRnRRaXhKUVVGdVFpeEZRVUY1UWl4SlFVRjZRaXhGUVVFclFpeFBRVUV2UWl4RFFVRjFReXhMUVVGMlF5eEZRVUU0UXl4SlFVRTVReXhEUVVGaU8wRkJRMEVzWVVGQlN5eFJRVUZNTEVkQlFXZENMRTFCUVUwc1ZVRkJUaXhIUVVGdFFpeExRVUZMTEZGQlFYaERPMEZCUTBnN1FVRkRSQ3hSUVVGSkxHbENRVUZwUWl4SlFVRnlRaXhGUVVFeVFqdEJRVU4yUWl4MVFrRkJaU3hoUVVGaExFOUJRV0lzUTBGQmNVSXNTVUZCY2tJc1JVRkJNa0lzU1VGQk0wSXNSVUZCYVVNc1QwRkJha01zUTBGQmVVTXNTMEZCZWtNc1JVRkJaMFFzU1VGQmFFUXNRMEZCWmp0QlFVTkJMR0ZCUVVzc1ZVRkJUQ3hIUVVGclFpeE5RVUZOTEZsQlFVNHNSMEZCY1VJc1MwRkJTeXhWUVVFMVF6dEJRVU5JTzBGQlEwUXNVVUZCU1N4TFFVRkxMRk5CUVV3c1MwRkJiVUlzU1VGQmRrSXNSVUZCTmtJN1FVRkRla0lzWVVGQlN5eEpRVUZKTEVsQlFVa3NRMEZCWWl4RlFVRm5RaXhKUVVGSkxFdEJRVXNzVTBGQlRDeERRVUZsTEUxQlFXNURMRVZCUVRKRExFZEJRVE5ETEVWQlFXZEVPMEZCUXpWRExHbENRVUZMTEZOQlFVd3NRMEZCWlN4RFFVRm1MRVZCUVd0Q0xGVkJRV3hDTEVOQlFUWkNMRlZCUVRkQ0xFVkJRWGxETEZsQlFYcERPMEZCUTBnN1FVRkRTanRCUVVORUxGZEJRVThzU1VGQlVEdEJRVU5JTEVOQlprUTdPMEZCYVVKQkxGTkJRVk1zV1VGQlZDeERRVUZ6UWl4UFFVRjBRaXhGUVVFclFpeFBRVUV2UWl4RlFVRjNRenRCUVVOd1F5eFJRVUZKTEZGQlFWRXNVMEZCVWl4RFFVRnJRaXhEUVVGc1FpeEZRVUZ4UWl4UlFVRlJMRTFCUVRkQ0xFMUJRWGxETEU5QlFUZERMRVZCUVhORU8wRkJRMnhFTEZsQlFVa3NXVUZCV1N4UlFVRlJMRk5CUVZJc1EwRkJhMElzVVVGQlVTeE5RVUV4UWl4RFFVRm9RanRCUVVOQkxGbEJRVXNzVVVGQlVTeE5RVUZTTEVkQlFXbENMRU5CUVdwQ0xFbEJRWE5DTEZGQlFWRXNUVUZCVWl4RFFVRmxMRkZCUVZFc1RVRkJVaXhIUVVGcFFpeERRVUZvUXl4TlFVRjFReXhIUVVFNVJDeEpRVU5ITEZWQlFWVXNUVUZCVml4RFFVRnBRaXhEUVVGcVFpeE5RVUYzUWl4SFFVUXpRaXhKUVVWSExGVkJRVlVzVFVGQlZpeERRVUZwUWl4RFFVRnFRaXhOUVVGM1FpeEhRVVl2UWl4RlFVVnZRenRCUVVOb1F5eHRRa0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxGZEJRVThzUzBGQlVEdEJRVU5JT3p0QlFVVkVMRWxCUVVrc1dVRkJXU3hGUVVGb1FqczdRVUZGUVN4VFFVRlRMRk5CUVZRc1EwRkJiVUlzVVVGQmJrSXNSVUZCTmtJN1FVRkRla0lzVVVGQlNTeG5Ra0ZCWjBJc1NVRkJTU3huUWtGQlNpeEZRVUZ3UWp0QlFVTkJMRkZCUVVrc1pVRkJTanRCUVVOQkxGRkJRVWtzYlVKQlFVbzdRVUZEUVN4UlFVRkpMRTFCUVUwN1FVRkRUaXd3UWtGQmEwSXNNRUpCUVZVc1VVRkJWaXhGUVVGdlFqdEJRVU5zUXl4blFrRkJTU3hQUVVGUExGRkJRVkFzUzBGQmIwSXNVVUZCZUVJc1JVRkJhME03UVVGRE9VSXNkVUpCUVU4c1MwRkJTeXhSUVVGTUxFTkJRV01zVVVGQlpDeERRVUZRTzBGQlEwZzdRVUZEUkN4clEwRkJjMElzVVVGQmRFSTdRVUZEUVN4dFFrRkJUeXhKUVVGUU8wRkJRMGdzVTBGUVN6dEJRVkZPTEcxQ1FVRlhMSEZDUVVGWk8wRkJRMjVDTERCQ1FVRmpMRk5CUVdRc1EwRkJkMElzUzBGQmVFSXNRMEZCT0VJc1lVRkJPVUlzUlVGQk5rTXNVMEZCTjBNN1FVRkRTQ3hUUVZaTE8wRkJWMDRzYTBKQlFWVXNhMEpCUVZVc1NVRkJWaXhGUVVGblFqdEJRVU4wUWl4blFrRkJTU3hEUVVGRExFbEJRVXdzUlVGQlZ6dEJRVU5RTEhWQ1FVRlBMR1ZCUVZBN1FVRkRTRHRCUVVORUxHZENRVUZKTEVOQlFVTXNWVUZCVlN4SlFVRldMRU5CUVV3c1JVRkJjMEk3UVVGRGJFSXNkVUpCUVU4c1MwRkJTeXhMUVVGTUxFTkJRVmNzUjBGQldDeEZRVUZuUWl4RFFVRm9RaXhEUVVGUUxFTkJSR3RDTEVOQlExTTdRVUZET1VJN1FVRkRSQ3huUWtGQlNTeFZRVUZWTEVsQlFWWXNRMEZCU2l4RlFVRnhRanRCUVVOcVFpeHJRMEZCYTBJc1NVRkJiRUk3UVVGRFFTeDFRa0ZCVHl4SlFVRlFMRU5CUm1sQ0xFTkJSVW83UVVGRGFFSTdRVUZEUkN4dFFrRkJUeXhMUVVGUU8wRkJRMGdzVTBGMlFrczdRVUYzUWs0c2NVSkJRV0VzY1VKQlFWVXNTVUZCVml4RlFVRm5RaXhWUVVGb1FpeEZRVUUwUWp0QlFVTnlReXhuUWtGQlNTeEhRVUZLTzBGQlEwRXNhVUpCUVVzc1IwRkJUQ3hKUVVGWkxGVkJRVm9zUlVGQmQwSTdRVUZEY0VJc2IwSkJRVWtzVjBGQlZ5eEhRVUZZTEV0QlFXMUNMRU5CUVVNc1YwRkJWeXhYUVVGWExFZEJRVmdzUTBGQldDeERRVUY0UWl4RlFVRnhSRHRCUVVOcVJDd3JRa0ZCVnl4WFFVRlhMRWRCUVZnc1EwRkJXQ3hKUVVFNFFpeFhRVUZYTEVkQlFWZ3NRMEZCT1VJN1FVRkRTRHRCUVVOS08wRkJRMFFzWjBKQlFVa3NWMEZCVnl4TFFVRkxMRXRCUVV3c1EwRkJWeXhIUVVGWUxFVkJRV2RDTEVOQlFXaENMRU5CUVdZN1FVRkRRU3huUWtGQlNTeERRVUZETEZWQlFWVXNVVUZCVml4RFFVRk1MRVZCUVRCQ08wRkJRVVU3UVVGRGVFSXNNRUpCUVZVc1NVRkJWaXhKUVVGclFpeFZRVUZzUWp0QlFVTkJMREJDUVVGVkxGRkJRVllzU1VGQmMwSXNWVUZCZEVJN1FVRkRTQ3hoUVVoRUxFMUJSMDg3UVVGRFNDd3dRa0ZCVlN4SlFVRldMRWxCUVd0Q0xITkNRVUZqTEZWQlFWVXNVVUZCVml4RFFVRmtMRU5CUVd4Q08wRkJRMEVzY1VKQlFVc3NSMEZCVEN4SlFVRlpMRlZCUVZvc1JVRkJkMEk3UVVGRGNFSXNkMEpCUVVrc1QwRkJUeXhWUVVGVkxGRkJRVllzUlVGQmIwSXNSMEZCY0VJc1EwRkJVQ3hMUVVGdlF5eFhRVUY0UXl4RlFVRnhSRHRCUVVOcVJDeHJRMEZCVlN4UlFVRldMRVZCUVc5Q0xFZEJRWEJDTEVsQlFUSkNMRmRCUVZjc1IwRkJXQ3hEUVVFelFqdEJRVU5JTzBGQlEwUXNPRUpCUVZVc1NVRkJWaXhGUVVGblFpeEhRVUZvUWl4SlFVRjFRaXhYUVVGWExFZEJRVmdzUTBGQmRrSTdRVUZEU0R0QlFVTktPMEZCUTBRc2JVSkJRVThzU1VGQlVEdEJRVU5JTEZOQk4wTkxPMEZCT0VOT0xHdENRVUZWTEd0Q1FVRlZMRkZCUVZZc1JVRkJiMEk3UVVGRE1VSXNaMEpCUVVrc1UwRkJVeXhYUVVGaU8wRkJRMEVzWjBKQlFVa3NVVUZCU2l4RlFVRmpPMEZCUTFZc2RVSkJRVThzVVVGQlVDeERRVUZuUWl4UlFVRm9RanRCUVVOSU8wRkJRMFFzYlVKQlFVOHNUVUZCVUR0QlFVTklMRk5CY0VSTE8wRkJjVVJPTEd0Q1FVRlZMR3RDUVVGVkxFbEJRVllzUlVGQlowSXNUVUZCYUVJc1JVRkJkMElzWTBGQmVFSXNSVUZCZDBNc2IwSkJRWGhETEVWQlFUaEVPMEZCUTNCRkxHZENRVUZKTEUxQlFVMHNjVUpCUVhGQ0xHVkJRWEpDTEVOQlFWWTdRVUZEUVN4blFrRkJTU3huUWtGQlowSXNjMEpCUVhOQ0xGVkJRVlVzUzBGQlZpeEZRVUZwUWl4SlFVRnFRaXhGUVVGMVFpeE5RVUYyUWl4RlFVRXJRanRCUVVOeVJTeDFRa0ZCVHl4dlFrRkJiMElzUzBGQmNFSXNSVUZCTWtJc1NVRkJNMElzUlVGQmFVTXNUVUZCYWtNc1MwRkJORU1zU1VGQlNTeExRVUZLTEVWQlFWY3NTVUZCV0N4RlFVRnBRaXhOUVVGcVFpeERRVUZ1UkR0QlFVTklMR0ZCUm0xQ0xFZEJSV2hDTEVkQlJrbzdRVUZIUVN4blFrRkJTU3hWUVVGVkxFbEJRVWtzWjBKQlFVb3NRMEZCY1VJc1lVRkJja0lzUlVGQmIwTXNTMEZCY0VNc1JVRkJNa01zWVVGQk0wTXNSVUZCTUVRc1kwRkJNVVFzUlVGQk1FVXNiMEpCUVRGRkxFTkJRV1E3UVVGRFFTeG5Ra0ZCU1N4UFFVRlBMRTFCUVZBc1MwRkJhMElzVVVGQmRFSXNSVUZCWjBNN1FVRkROVUlzZVVKQlFWTXNSVUZCUXl4UlFVRlJMRTFCUVZRc1JVRkJWRHRCUVVOSU8wRkJRMFFzYjBKQlFWRXNVMEZCVWl4RFFVRnJRaXhGUVVGc1FpeEZRVUZ6UWl4TlFVRjBRanRCUVVOQkxHZENRVUZKTEZGQlFWRXNVVUZCVVN4WFFVRlNMRU5CUVc5Q0xFbEJRWEJDTEVWQlFUQkNMRTFCUVRGQ0xFVkJRV3RETEVsQlFXeERMRVZCUVhkRExFbEJRWGhETEVWQlFUaERMRVZCUVRsRExFTkJRVm83UVVGRFFTeG5Ra0ZCU1N4RFFVRkRMRXRCUVVRc1NVRkJWU3h2UWtGQlpDeEZRVUZ2UXp0QlFVTm9ReXgzUWtGQlVTeFJRVUZSTEc5Q1FVRlNMRU5CUVRaQ0xFbEJRVGRDTEVWQlFXMURMRTFCUVc1RExFTkJRVkk3UVVGRFNEdEJRVU5FTEdsQ1FVRkxMRXRCUVV3c1IwRkJZU3hMUVVGaU8wRkJRMEVzYVVKQlFVc3NUMEZCVEN4SFFVRmxMRkZCUVZFc1QwRkJka0k3UVVGRFFTeHBRa0ZCU3l4TFFVRk1MRWRCUVdNc1ZVRkJWU3hKUVVGNFFqdEJRVU5CTEcxQ1FVRlBMRXRCUVVzc1MwRkJXanRCUVVOSUxGTkJka1ZMTzBGQmQwVk9MSGRDUVVGblFpd3dRa0ZCV1R0QlFVTjRRaXhuUWtGQlNTeFRRVUZUTEVWQlFXSTdRVUZEUVN4cFFrRkJTeXhSUVVGTUxFTkJRV01zUzBGQlpDeERRVUZ2UWl4TlFVRndRaXhGUVVFMFFpeFRRVUUxUWp0QlFVTkJMRzFDUVVGUExFMUJRVkE3UVVGRFNDeFRRVFZGU3p0QlFUWkZUaXd3UWtGQmEwSXNNRUpCUVZVc1NVRkJWaXhGUVVGblFpeE5RVUZvUWl4RlFVRjNRaXhqUVVGNFFpeEZRVUYzUXl4dlFrRkJlRU1zUlVGQk9FUTdRVUZETlVVc1owSkJRVWtzVFVGQlRTeHhRa0ZCY1VJc1pVRkJja0lzUTBGQlZqdEJRVU5CTEdkQ1FVRkpMR2RDUVVGblFpeHpRa0ZCYzBJc1ZVRkJWU3hMUVVGV0xFVkJRV2xDTEVsQlFXcENMRVZCUVhWQ0xFMUJRWFpDTEVWQlFTdENPMEZCUTNKRkxIVkNRVUZQTEc5Q1FVRnZRaXhMUVVGd1FpeEZRVUV5UWl4SlFVRXpRaXhGUVVGcFF5eE5RVUZxUXl4TFFVRTBReXhKUVVGSkxFdEJRVW9zUlVGQlZ5eEpRVUZZTEVWQlFXbENMRTFCUVdwQ0xFTkJRVzVFTzBGQlEwZ3NZVUZHYlVJc1IwRkZhRUlzUjBGR1NqdEJRVWRCTEdkQ1FVRkpMRlZCUVZVc1NVRkJTU3huUWtGQlNpeERRVUZ4UWl4aFFVRnlRaXhGUVVGdlF5eEpRVUZ3UXl4RlFVRXdReXhoUVVFeFF5eEZRVUY1UkN4alFVRjZSQ3hGUVVGNVJTeHZRa0ZCZWtVc1EwRkJaRHRCUVVOQkxHZENRVUZKTEU5QlFVOHNUVUZCVUN4TFFVRnJRaXhSUVVGMFFpeEZRVUZuUXp0QlFVTTFRaXg1UWtGQlV5eEZRVUZETEZGQlFWRXNUVUZCVkN4RlFVRlVPMEZCUTBnN1FVRkRSQ3h2UWtGQlVTeFRRVUZTTEVOQlFXdENMRVZCUVd4Q0xFVkJRWE5DTEUxQlFYUkNPMEZCUTBFc2IwSkJRVkVzVjBGQlVpeERRVUZ2UWl4SlFVRndRaXhGUVVFd1FpeE5RVUV4UWl4RlFVRnJReXhKUVVGc1F5eEZRVUYzUXl4SlFVRjRReXhGUVVFNFF5eEZRVUU1UXp0QlFVTkJMR2RDUVVGSkxHOUNRVUZLTEVWQlFUQkNPMEZCUTNSQ0xIZENRVUZSTEc5Q1FVRlNMRU5CUVRaQ0xFbEJRVGRDTEVWQlFXMURMRTFCUVc1RE8wRkJRMGc3UVVGRFJDeG5Ra0ZCU1N4VFFVRlRMRVZCUVdJN1FVRkRRU3h0UWtGQlR5eE5RVUZRTEVkQlFXZENMRkZCUVZFc1RVRkJlRUk3UVVGRFFTeHRRa0ZCVHl4UFFVRlFMRWRCUVdsQ0xGRkJRVkVzVDBGQmVrSTdRVUZEUVN4dFFrRkJUeXhMUVVGUUxFZEJRV2RDTEU5QlFVOHNUVUZCVUN4RFFVRmpMRTFCUVdRc1MwRkJlVUlzUTBGQmVrTTdRVUZEUVN4dFFrRkJUeXhOUVVGUU8wRkJRMGdzVTBGb1IwczdRVUZwUjA0c2JVSkJRVmNzY1VKQlFWazdRVUZEYmtJc2JVSkJRVThzWTBGQll5eFRRVUZrTEVOQlFYZENMRXRCUVhoQ0xFTkJRVGhDTEdGQlFUbENMRVZCUVRaRExGTkJRVGRETEVOQlFWQTdRVUZEU0N4VFFXNUhTenRCUVc5SFRpeHRRa0ZCVnl4eFFrRkJXVHRCUVVOdVFpeHRRa0ZCVHl4alFVRmpMRk5CUVdRc1EwRkJkMElzUzBGQmVFSXNRMEZCT0VJc1lVRkJPVUlzUlVGQk5rTXNVMEZCTjBNc1EwRkJVRHRCUVVOSUxGTkJkRWRMTzBGQmRVZE9MSE5DUVVGakxIZENRVUZaTzBGQlEzUkNMRzFDUVVGUExHTkJRV01zV1VGQlpDeERRVUV5UWl4TFFVRXpRaXhEUVVGcFF5eGhRVUZxUXl4RlFVRm5SQ3hUUVVGb1JDeERRVUZRTzBGQlEwZ3NVMEY2UjBzN1FVRXdSMDRzZFVKQlFXVXNlVUpCUVZrN1FVRkRka0lzYlVKQlFVOHNZMEZCWXl4aFFVRmtMRU5CUVRSQ0xFdEJRVFZDTEVOQlFXdERMR0ZCUVd4RExFVkJRV2xFTEZOQlFXcEVMRU5CUVZBN1FVRkRTQ3hUUVRWSFN6dEJRVFpIVGl4M1FrRkJaMElzTUVKQlFWazdRVUZEZUVJc2JVSkJRVThzWTBGQll5eGpRVUZrTEVOQlFUWkNMRXRCUVRkQ0xFTkJRVzFETEdGQlFXNURMRVZCUVd0RUxGTkJRV3hFTEVOQlFWQTdRVUZEU0N4VFFTOUhTenRCUVdkSVRpeHhRa0ZCWVN4MVFrRkJXVHRCUVVOeVFpd3dRa0ZCWXl4WFFVRmtMRU5CUVRCQ0xFdEJRVEZDTEVOQlFXZERMR0ZCUVdoRExFVkJRU3RETEZOQlFTOURPMEZCUTBnc1UwRnNTRXM3UVVGdFNFNHNkVUpCUVdVc2VVSkJRVms3UVVGRGRrSXNNRUpCUVdNc1lVRkJaQ3hEUVVFMFFpeExRVUUxUWl4RFFVRnJReXhoUVVGc1F5eEZRVUZwUkN4VFFVRnFSRHRCUVVOSUxGTkJja2hMTzBGQmMwaE9MSEZDUVVGaExIRkNRVUZWTEZGQlFWWXNSVUZCYjBJc1ZVRkJjRUlzUlVGQlowTXNZMEZCYUVNc1JVRkJaMFE3UVVGRGVrUXNaMEpCUVVrc1QwRkJUeXhSUVVGUUxFdEJRVzlDTEZGQlFYQkNMRWxCUVdkRExFTkJRVU1zY1VKQlFYRkNMRWxCUVhKQ0xFTkJRVEJDTEZGQlFURkNMRU5CUVhKRExFVkJRVEJGTzBGQlEzUkZMSE5DUVVGTkxFbEJRVWtzUzBGQlNpeERRVUZWTERKRVFVRldMRU5CUVU0N1FVRkRTRHRCUVVORUxHZENRVUZKTEU5QlFVOHNWVUZCVUN4TFFVRnpRaXhSUVVGMFFpeEpRVUZyUXl4aFFVRmhMRU5CUVdJc1MwRkJiVUlzUTBGQmNrUXNTVUZCTUVRc1lVRkJZU3hMUVVFelJTeEZRVUZyUmp0QlFVTTVSU3h6UWtGQlRTeEpRVUZKTEV0QlFVb3NRMEZCVlN4M1EwRkJWaXhEUVVGT08wRkJRMGc3UVVGRFJDeG5Ra0ZCU1N4UFFVRlBMRmRCUVZjc1VVRkJXQ3hEUVVGUUxFdEJRV2RETEZkQlFYQkRMRVZCUVdsRU8wRkJRemRETEhOQ1FVRk5MRWxCUVVrc1MwRkJTaXhEUVVGVkxEUkNRVUUwUWl4UlFVRTFRaXhIUVVGMVF5eE5RVUYyUXl4SFFVRm5SQ3hYUVVGWExGRkJRVmdzUTBGQk1VUXNRMEZCVGp0QlFVTklPMEZCUTBRc1owSkJRVWtzVDBGQlR5eG5Ra0ZCWjBJc1ZVRkJhRUlzUTBGQlVDeExRVUYxUXl4WFFVRXpReXhGUVVGM1JEdEJRVU53UkN4elFrRkJUU3hKUVVGSkxFdEJRVW9zUTBGQlZTdzRRa0ZCT0VJc1owSkJRV2RDTEZWQlFXaENMRU5CUVRsQ0xFZEJRVFJFTEUxQlFUVkVMRWRCUVhGRkxGVkJRUzlGTEVOQlFVNDdRVUZEU0R0QlFVTkVMSFZDUVVGWExGRkJRVmdzU1VGQmRVSXNWVUZCZGtJN1FVRkRRU3cwUWtGQlowSXNWVUZCYUVJc1NVRkJPRUlzVVVGQk9VSTdRVUZEUVN4cFEwRkJjVUlzVVVGQmNrSXNTVUZCYVVNc2NVSkJRWEZDTEZWQlFYSkNMRWxCUVcxRExHTkJRWEJGTzBGQlEwRXNhVUpCUVVzc1NVRkJTU3hSUVVGVUxFbEJRWEZDTEZOQlFYSkNMRVZCUVdkRE8wRkJRelZDTEc5Q1FVRkpMRmRCUVZjc1ZVRkJWU3hSUVVGV0xFTkJRV1k3UVVGRFFTeHZRa0ZCU1N4VFFVRlRMRkZCUVZRc1EwRkJTaXhGUVVGM1FqdEJRVU53UWl3MlFrRkJVeXhWUVVGVUxFbEJRWFZDTEZOQlFWTXNWVUZCVkN4TFFVRjNRaXhUUVVGVExGRkJRVlFzUTBGQkwwTTdRVUZEU0R0QlFVTktPMEZCUTBvc1UwRTFTVXM3UVVFMlNVNHNaVUZCVHl4cFFrRkJXVHRCUVVObUxEQkNRVUZqTEV0QlFXUTdRVUZEUVN4cFFrRkJTeXhMUVVGTUxFZEJRV0VzU1VGQllqdEJRVU5CTEdsQ1FVRkxMRTlCUVV3c1IwRkJaU3hGUVVGbU8wRkJRMEVzYVVKQlFVc3NTMEZCVEN4SFFVRmhMRWxCUVdJN1FVRkRTQ3hUUVd4S1N6dEJRVzFLVGl4cFFrRkJVeXhGUVc1S1NEdEJRVzlLVGl4bFFVRlBMRWxCY0VwRU8wRkJjVXBPTEdWQlFVOHNTVUZ5U2tRN1FVRnpTazRzYjBKQlFWa3NWVUYwU2s0N1FVRjFTazRzYjBKQlFWa3NWVUYyU2s0N1FVRjNTazRzZDBKQlFXZENMR05CZUVwV08wRkJlVXBPTEc5Q1FVRlpPMEZCZWtwT0xFdEJRVlk3UVVFeVNrRXNVVUZCU1N4UlFVRktMRU5CUVdFc1dVRkJXU3hKUVVGNlFqdEJRVU5CTEZkQlFVOHNSMEZCVUR0QlFVTklPenRCUVVWRU8wRkJRMEVzU1VGQlNTeE5RVUZOTEZkQlFWWTdRVUZEUVN4SlFVRkpMRmRCUVVvc1EwRkJaMElzVDBGQmFFSXNSVUZCZVVJc2IwSkJRWHBDT3p0QlFVVkJPMEZCUTBFc1NVRkJTU3hIUVVGS0xFZEJRVlVzUjBGQlZqdEJRVU5CTzJ0Q1FVTmxMRWM3UVVGRFpqczdPenM3T3pzN096czdPenM3T3pzN096dFJRMnh3UkdkQ0xGTXNSMEZCUVN4VE8xRkJkMEpCTEZjc1IwRkJRU3hYTzFGQlowSkJMRmNzUjBGQlFTeFhPMUZCVTBFc1V5eEhRVUZCTEZNN1VVRkxRU3hwUWl4SFFVRkJMR2xDTzFGQlZVRXNiVUlzUjBGQlFTeHRRanRSUVZWQkxHMUNMRWRCUVVFc2JVSTdVVUZYUVN4blFpeEhRVUZCTEdkQ08xRkJiVUpCTEdVc1IwRkJRU3hsTzFGQlpVRXNlVUlzUjBGQlFTeDVRanRSUVdkQ1FTeFJMRWRCUVVFc1VUdFJRVFJDUVN4WkxFZEJRVUVzV1RzN096dEJRVE5OYUVJN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUZ6UWtFN096czdPMEZCUzBFN096czdPenM3TzBGQlVVRTdPenM3TzBGQlMwOHNVMEZCVXl4VFFVRlVMRU5CUVcxQ0xFZEJRVzVDTEVWQlFYZENPenRCUVVVM1FpeE5RVUZKTEVOQlFVTXNSMEZCVEN4RlFVRlZMRTFCUVUwc1RVRkJUU3gzUWtGQlRpeERRVUZPT3p0QlFVVldPMEZCUTBFc1RVRkJTU3hMUVVGTExITkdRVUZVTzBGQlEwRXNUVUZCU1N4UlFVRlJMRlZCUVZvN1FVRkRRU3hOUVVGSkxGRkJRVkVzU1VGQlNTeFBRVUZLTEVOQlFWa3NSVUZCV2l4RlFVRm5RaXhMUVVGb1FpeEZRVUYxUWl4TFFVRjJRaXhEUVVFMlFpeEhRVUUzUWl4RFFVRmFPenRCUVVWQk8wRkJRMEVzVFVGQlNTeE5RVUZOTEVOQlFVNHNUVUZCWVN4SFFVRnFRaXhGUVVGelFqdEJRVU53UWl4VlFVRk5MRU5CUVU0c1NVRkJWeXhQUVVGWU8wRkJRMEVzVlVGQlRTeERRVUZPTEVsQlFWY3NSMEZCV0R0QlFVTkVPenRCUVVWRUxFMUJRVWtzVTBGQlV6dEJRVU5ZTEZWQlFVMHNUVUZCVFN4RFFVRk9MRU5CUkVzN1FVRkZXQ3haUVVGUkxFMUJRVTBzUTBGQlRpeERRVVpITzBGQlIxZ3NZMEZCVlN4TlFVRk5MRU5CUVU0N1FVRklReXhIUVVGaU96dEJRVTFCTEZOQlFVOHNUVUZCVUR0QlFVTkVPenRCUVVWTkxGTkJRVk1zVjBGQlZDeERRVUZ4UWl4TFFVRnlRaXhGUVVFMFFqdEJRVU5xUXl4TlFVRkpMRmxCUVZrc1RVRkJUU3hQUVVGT0xFTkJRV01zUjBGQlpDeERRVUZvUWpzN1FVRkZRU3hOUVVGSkxGTkJRVk03UVVGRFdDeGpRVUZWTEUxQlFVMHNVMEZCVGl4RFFVRm5RaXhEUVVGb1FpeEZRVUZ0UWl4VFFVRnVRaXhEUVVSRE8wRkJSVmdzV1VGQlVTeE5RVUZOTEZOQlFVNHNRMEZCWjBJc1dVRkJXU3hEUVVFMVFpeEZRVUVyUWl4TlFVRk5MRTFCUVhKRE8wRkJSa2NzUjBGQllqczdRVUZMUVN4VFFVRlBMRTFCUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3UVVGTFR5eFRRVUZUTEZkQlFWUXNRMEZCY1VJc1RVRkJja0lzUlVGQk5rSTdRVUZEYkVNc1UwRkJUeXh2UWtGQldTeE5RVUZhTEVWQlFXOUNMRTFCUVhCQ0xFZEJRVFpDTEVOQlFUZENMRWRCUVdsRExFdEJRV3BETEVkQlFYbERMRWxCUVdoRU8wRkJRMFE3TzBGQlJVUTdPenM3TzBGQlMwOHNVMEZCVXl4VFFVRlVMRU5CUVcxQ0xFZEJRVzVDTEVWQlFYZENPMEZCUXpkQ08wRkJRMEVzVFVGQlNTeEhRVUZLTEVWQlFWTXNUMEZCVHl4TFFVRkxMRXRCUVV3c1EwRkJWeXg1UWtGQlpTeEhRVUZtTEVOQlFWZ3NRMEZCVUR0QlFVTldPenRCUVVWTkxGTkJRVk1zYVVKQlFWUXNRMEZCTWtJc1IwRkJNMElzUlVGQlowTTdRVUZEY2tNc1RVRkJTU3hYUVVGWExFbEJRVWtzUzBGQlNpeERRVUZWTEVkQlFWWXNRMEZCWmp0QlFVTkJMRk5CUVU4c1UwRkJVeXhEUVVGVUxFbEJRV01zU1VGQlpDeEhRVUZ4UWl4VFFVRlRMRU5CUVZRc1EwRkJja0lzUjBGQmJVTXNSMEZCYmtNc1IwRkJlVU1zVTBGQlV5eERRVUZVTEVOQlFXaEVPMEZCUTBRN08wRkJSVVE3T3pzN08wRkJTMDhzVTBGQlV5eHRRa0ZCVkN4RFFVRTJRaXhUUVVFM1FpeEZRVUYzUXp0QlFVTTNReXhOUVVGSkxGbEJRVmtzVlVGQlZTeFBRVUZXTEVOQlFXdENMRWRCUVd4Q0xFTkJRV2hDTzBGQlEwRXNVMEZCVHl4WlFVRlpMRlZCUVZVc1UwRkJWaXhEUVVGdlFpeFpRVUZaTEVOQlFXaERMRVZCUVcxRExGVkJRVlVzVFVGQk4wTXNRMEZCV2l4SFFVRnRSU3hIUVVGdVJTeEhRVUY1UlN4VlFVRlZMRk5CUVZZc1EwRkJiMElzUTBGQmNFSXNSVUZCZFVJc1UwRkJka0lzUTBGQmFFWTdRVUZEUkRzN1FVRkZSRHM3T3pzN1FVRkxUeXhUUVVGVExHMUNRVUZVTEVOQlFUWkNMRTlCUVRkQ0xFVkJRWE5ETzBGQlF6TkRMRTFCUVVrc1RVRkJUU3hWUVVGVkxFOUJRVllzUTBGQlZqdEJRVU5CTEZOQlFVOHNTVUZCU1N4UlFVRktMRU5CUVdFc1QwRkJZaXhEUVVGeFFpeEhRVUZ5UWl4RlFVRXdRaXhGUVVFeFFpeEpRVUZuUXl4SFFVRm9ReXhIUVVGelF5eEpRVUZKTEUxQlFXcEVMRU5CUmpKRExFTkJSV003UVVGRE1VUTdPMEZCUjBRN096czdPMEZCUzA4c1UwRkJVeXhuUWtGQlZDeERRVUV3UWl4VlFVRXhRaXhGUVVGelF6czdRVUZGTTBNN1FVRkRRU3hOUVVGSkxGZEJRVmNzVTBGQldDeERRVUZ4UWl4RFFVRnlRaXhGUVVGM1FpeERRVUY0UWl4TlFVRXJRaXhUUVVGdVF5eEZRVUU0UXp0QlFVTTFReXhSUVVGSkxHRkJRV0VzVlVGQlZTeFZRVUZXTEVOQlFXcENPenRCUVVWQk8wRkJRMEVzVVVGQlNTeFhRVUZYTEUxQlFWZ3NTVUZCY1VJc1YwRkJWeXhSUVVGd1F5eEZRVUU0UXp0QlFVTTFReXhoUVVGUExGVkJRVkE3UVVGRFJDeExRVVpFTEUxQlJVODdRVUZEVEN4WlFVRk5MREpDUVVGT08wRkJRMFE3TzBGQlJVZzdRVUZEUXl4SFFWaEVMRTFCVjA4N1FVRkRUQ3hYUVVGUExHOUNRVUZ2UWl4VlFVRndRaXhEUVVGUU8wRkJRMFE3UVVGRFJqczdRVUZGVFN4VFFVRlRMR1ZCUVZRc1EwRkJlVUlzUjBGQmVrSXNSVUZCT0VJN1FVRkRia01zVFVGQlNTeHJRa0ZCYTBJc1EwRkJReXhaUVVGRUxFVkJRV1VzVTBGQlppeEZRVUV3UWl4UlFVRXhRaXhGUVVGdlF5eFRRVUZ3UXl4RFFVRjBRanRCUVVOQkxFMUJRVWtzVjBGQldTeEhRVUZFTEVOQlFVMHNTMEZCVGl4RFFVRlpMRXRCUVZvc1EwRkJaanRCUVVOQkxFMUJRVWtzV1VGQldTeFRRVUZUTEVOQlFWUXNRMEZCYUVJN08wRkJSVUVzVTBGQlR5eG5Ra0ZCWjBJc1QwRkJhRUlzUTBGQmQwSXNVMEZCZUVJc1RVRkJkVU1zUTBGQlF5eERRVUV2UXp0QlFVTkVPenRCUVVWRU96czdPenM3TzBGQlQwOHNVMEZCVXl4NVFrRkJWQ3hEUVVGdFF5eGhRVUZ1UXl4RlFVRnJSQ3hUUVVGc1JDeEZRVUUyUkN4UlFVRTNSQ3hGUVVGMVJUdEJRVU0xUlN4TlFVRkpMR2xDUVVGcFFpeGpRVUZqTEZOQlFXUXNRMEZCY2tJN1FVRkRRU3hOUVVGSkxHVkJRV1VzWlVGQlpTeFJRVUZtTEVOQlFXNUNPenRCUVVWQkxGTkJRVThzV1VGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdRVUZUVHl4VFFVRlRMRkZCUVZRc1EwRkJhMElzWVVGQmJFSXNSVUZCYVVNc1UwRkJha01zUlVGQk5FTXNVVUZCTlVNc1JVRkJjMFFzU1VGQmRFUXNSVUZCYVVZN1FVRkJRU3hOUVVGeVFpeFhRVUZ4UWl4MVJVRkJVQ3hMUVVGUE96dEJRVU4wUml4TlFVRkpMR2xDUVVGcFFpeGpRVUZqTEZOQlFXUXNRMEZCY2tJN1FVRkRRU3hOUVVGSkxGbEJRVW83TzBGQlJVRXNUVUZCU1N4RFFVRkRMR1ZCUVdVc1kwRkJaaXhEUVVFNFFpeFJRVUU1UWl4RFFVRk1MRVZCUVRoRE8wRkJRelZETEZWQlFVMHNUVUZCVFN4MVFrRkJkVUlzZVVKQlFXVXNZMEZCWml4RlFVRXJRaXhGUVVFdlFpeEZRVUZ0UXl4RFFVRnVReXhEUVVGMlFpeEhRVUVyUkN4dFFrRkJMMFFzUjBGQmNVWXNVVUZCY2tZc1IwRkJaMGNzSzBKQlFYUkhMRU5CUVU0N1FVRkRSRHM3UVVGRlJDeE5RVUZKTEdWQlFXVXNaVUZCWlN4UlFVRm1MRU5CUVc1Q096dEJRVVZCTEUxQlFVa3NTVUZCU2l4RlFVRlZPMEZCUTFJc1ZVRkJUU3hoUVVGaExFMUJRV0lzUjBGQmMwSXNZMEZCWXl4TlFVRndReXhIUVVFMlF5eGhRVUZoTEUxQlFURkVMRWRCUVcxRkxFbEJRWHBGTzBGQlEwRXNVVUZCU1N4aFFVRmhMR05CUVdJc1EwRkJORUlzVlVGQk5VSXNTMEZCTWtNc1YwRkJMME1zUlVGQk5FUTdRVUZETVVRc1ZVRkJTU3hoUVVGaExGRkJRV0lzUTBGQmMwSXNUMEZCZEVJc1EwRkJPRUlzVlVGQk9VSXNRMEZCU2l4RlFVRXJRenRCUVVNM1F5eGpRVUZOTEdGQlFXRXNVVUZCWWl4RFFVRnpRaXhQUVVGMFFpeERRVUU0UWl4aFFVRTVRaXhGUVVFMlF5eGpRVUZqTEUxQlFUTkVMRWxCUVhGRkxFbEJRVE5GTzBGQlEwUXNUMEZHUkN4TlFVVlBPMEZCUTB3c1kwRkJUU3hoUVVGaExGRkJRV0lzUjBGQmQwSXNTVUZCT1VJN1FVRkRSRHRCUVVOR08wRkJRMFlzUjBGVVJDeE5RVk5QTzBGQlEwd3NWVUZCVFN4aFFVRmhMRTFCUVdJc1IwRkJjMElzWTBGQll5eE5RVUZ3UXl4SFFVRTJReXhoUVVGaExFMUJRV2hGTzBGQlEwUTdPMEZCUlVRN08wRkJSVUVzVTBGQlR5eEhRVUZRTzBGQlEwUTdPMEZCUlUwc1UwRkJVeXhaUVVGVUxFZEJRWGRDT3p0QlFVVTNRaXhYUVVGVExFVkJRVlFzUjBGQll6dEJRVU5hTEZkQlFVOHNTMEZCU3l4TFFVRk1MRU5CUVZjc1EwRkJReXhKUVVGSkxFdEJRVXNzVFVGQlRDeEZRVUZNTEVsQlFYTkNMRTlCUVdwRExFVkJRMG9zVVVGRVNTeERRVU5MTEVWQlJFd3NSVUZGU2l4VFFVWkpMRU5CUlUwc1EwRkdUaXhEUVVGUU8wRkJSMFE3TzBGQlJVUXNVMEZCVHl4UFFVRlBMRWxCUVZBc1IwRkJZeXhIUVVGa0xFZEJRVzlDTEVsQlFYQkNMRWRCUVRKQ0xFZEJRVE5DTEVkQlFXbERMRWxCUVdwRExFZEJRWGRETEVkQlFYaERMRWRCUVRoRExFbEJRVGxETEVkQlFYRkVMRWRCUVhKRUxFZEJRVEpFTEVsQlFUTkVMRWRCUVd0RkxFbEJRV3hGTEVkQlFYbEZMRWxCUVdoR08wRkJSVVFpTENKbWFXeGxJam9pWjJWdVpYSmhkR1ZrTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpQmxLSFFzYml4eUtYdG1kVzVqZEdsdmJpQnpLRzhzZFNsN2FXWW9JVzViYjEwcGUybG1LQ0YwVzI5ZEtYdDJZWElnWVQxMGVYQmxiMllnY21WeGRXbHlaVDA5WENKbWRXNWpkR2x2Ymx3aUppWnlaWEYxYVhKbE8ybG1LQ0YxSmlaaEtYSmxkSFZ5YmlCaEtHOHNJVEFwTzJsbUtHa3BjbVYwZFhKdUlHa29ieXdoTUNrN2RtRnlJR1k5Ym1WM0lFVnljbTl5S0Z3aVEyRnVibTkwSUdacGJtUWdiVzlrZFd4bElDZGNJaXR2SzF3aUoxd2lLVHQwYUhKdmR5Qm1MbU52WkdVOVhDSk5UMFJWVEVWZlRrOVVYMFpQVlU1RVhDSXNabjEyWVhJZ2JEMXVXMjlkUFh0bGVIQnZjblJ6T250OWZUdDBXMjlkV3pCZExtTmhiR3dvYkM1bGVIQnZjblJ6TEdaMWJtTjBhVzl1S0dVcGUzWmhjaUJ1UFhSYmIxMWJNVjFiWlYwN2NtVjBkWEp1SUhNb2JqOXVPbVVwZlN4c0xHd3VaWGh3YjNKMGN5eGxMSFFzYml4eUtYMXlaWFIxY200Z2JsdHZYUzVsZUhCdmNuUnpmWFpoY2lCcFBYUjVjR1Z2WmlCeVpYRjFhWEpsUFQxY0ltWjFibU4wYVc5dVhDSW1KbkpsY1hWcGNtVTdabTl5S0haaGNpQnZQVEE3Ynp4eUxteGxibWQwYUR0dkt5c3BjeWh5VzI5ZEtUdHlaWFIxY200Z2MzMHBJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm5KbGNYVnBjbVVvWENKamIzSmxMV3B6TDNOb2FXMWNJaWs3WEc1Y2JuSmxjWFZwY21Vb1hDSnlaV2RsYm1WeVlYUnZjaTF5ZFc1MGFXMWxMM0oxYm5ScGJXVmNJaWs3WEc1Y2JuSmxjWFZwY21Vb1hDSmpiM0psTFdwekwyWnVMM0psWjJWNGNDOWxjMk5oY0dWY0lpazdYRzVjYm1sbUlDaG5iRzlpWVd3dVgySmhZbVZzVUc5c2VXWnBiR3dwSUh0Y2JpQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2liMjVzZVNCdmJtVWdhVzV6ZEdGdVkyVWdiMllnWW1GaVpXd3RjRzlzZVdacGJHd2dhWE1nWVd4c2IzZGxaRndpS1R0Y2JuMWNibWRzYjJKaGJDNWZZbUZpWld4UWIyeDVabWxzYkNBOUlIUnlkV1U3WEc1Y2JuWmhjaUJFUlVaSlRrVmZVRkpQVUVWU1ZGa2dQU0JjSW1SbFptbHVaVkJ5YjNCbGNuUjVYQ0k3WEc1bWRXNWpkR2x2YmlCa1pXWnBibVVvVHl3Z2EyVjVMQ0IyWVd4MVpTa2dlMXh1SUNCUFcydGxlVjBnZkh3Z1QySnFaV04wVzBSRlJrbE9SVjlRVWs5UVJWSlVXVjBvVHl3Z2EyVjVMQ0I3WEc0Z0lDQWdkM0pwZEdGaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJSFpoYkhWbE9pQjJZV3gxWlZ4dUlDQjlLVHRjYm4xY2JseHVaR1ZtYVc1bEtGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVc0lGd2ljR0ZrVEdWbWRGd2lMQ0JjSWx3aUxuQmhaRk4wWVhKMEtUdGNibVJsWm1sdVpTaFRkSEpwYm1jdWNISnZkRzkwZVhCbExDQmNJbkJoWkZKcFoyaDBYQ0lzSUZ3aVhDSXVjR0ZrUlc1a0tUdGNibHh1WENKd2IzQXNjbVYyWlhKelpTeHphR2xtZEN4clpYbHpMSFpoYkhWbGN5eGxiblJ5YVdWekxHbHVaR1Y0VDJZc1pYWmxjbmtzYzI5dFpTeG1iM0pGWVdOb0xHMWhjQ3htYVd4MFpYSXNabWx1WkN4bWFXNWtTVzVrWlhnc2FXNWpiSFZrWlhNc2FtOXBiaXh6YkdsalpTeGpiMjVqWVhRc2NIVnphQ3h6Y0d4cFkyVXNkVzV6YUdsbWRDeHpiM0owTEd4aGMzUkpibVJsZUU5bUxISmxaSFZqWlN4eVpXUjFZMlZTYVdkb2RDeGpiM0I1VjJsMGFHbHVMR1pwYkd4Y0lpNXpjR3hwZENoY0lpeGNJaWt1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvYTJWNUtTQjdYRzRnSUZ0ZFcydGxlVjBnSmlZZ1pHVm1hVzVsS0VGeWNtRjVMQ0JyWlhrc0lFWjFibU4wYVc5dUxtTmhiR3d1WW1sdVpDaGJYVnRyWlhsZEtTazdYRzU5S1RzaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dllYSnlZWGt2Wm5KdmJWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5cWMyOXVMM04wY21sdVoybG1lVndpS1N3Z1gxOWxjMDF2WkhWc1pUb2dkSEoxWlNCOU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdllYTnphV2R1WENJcExDQmZYMlZ6VFc5a2RXeGxPaUIwY25WbElIMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWpjbVZoZEdWY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5T3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2V5QmNJbVJsWm1GMWJIUmNJam9nY21WeGRXbHlaU2hjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5WENJcExDQmZYMlZ6VFc5a2RXeGxPaUIwY25WbElIMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOW5aWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSXBMQ0JmWDJWelRXOWtkV3hsT2lCMGNuVmxJSDA3SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lGd2laR1ZtWVhWc2RGd2lPaUJ5WlhGMWFYSmxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlwY3kxbWNtOTZaVzVjSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwydGxlWE5jSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwzTmxkQzF3Y205MGIzUjVjR1V0YjJaY0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2Y0hKdmJXbHpaVndpS1N3Z1gxOWxjMDF2WkhWc1pUb2dkSEoxWlNCOU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXplVzFpYjJ4Y0lpa3NJRjlmWlhOTmIyUjFiR1U2SUhSeWRXVWdmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YzNsdFltOXNMMmwwWlhKaGRHOXlYQ0lwTENCZlgyVnpUVzlrZFd4bE9pQjBjblZsSUgwN0lpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNibVY0Y0c5eWRITXVYMTlsYzAxdlpIVnNaU0E5SUhSeWRXVTdYRzVjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUdaMWJtTjBhVzl1SUNocGJuTjBZVzVqWlN3Z1EyOXVjM1J5ZFdOMGIzSXBJSHRjYmlBZ2FXWWdLQ0VvYVc1emRHRnVZMlVnYVc1emRHRnVZMlZ2WmlCRGIyNXpkSEoxWTNSdmNpa3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpUTJGdWJtOTBJR05oYkd3Z1lTQmpiR0Z6Y3lCaGN5QmhJR1oxYm1OMGFXOXVYQ0lwTzF4dUlDQjlYRzU5T3lJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNWxlSEJ2Y25SekxsOWZaWE5OYjJSMWJHVWdQU0IwY25WbE8xeHVYRzUyWVhJZ1gyUmxabWx1WlZCeWIzQmxjblI1SUQwZ2NtVnhkV2x5WlNoY0lpNHVMMk52Y21VdGFuTXZiMkpxWldOMEwyUmxabWx1WlMxd2NtOXdaWEowZVZ3aUtUdGNibHh1ZG1GeUlGOWtaV1pwYm1WUWNtOXdaWEowZVRJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5a1pXWnBibVZRY205d1pYSjBlU2s3WEc1Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3SUdSbFptRjFiSFE2SUc5aWFpQjlPeUI5WEc1Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ1puVnVZM1JwYjI0Z1pHVm1hVzVsVUhKdmNHVnlkR2xsY3loMFlYSm5aWFFzSUhCeWIzQnpLU0I3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J3Y205d2N5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHUmxjMk55YVhCMGIzSWdQU0J3Y205d2MxdHBYVHRjYmlBZ0lDQWdJR1JsYzJOeWFYQjBiM0l1Wlc1MWJXVnlZV0pzWlNBOUlHUmxjMk55YVhCMGIzSXVaVzUxYldWeVlXSnNaU0I4ZkNCbVlXeHpaVHRjYmlBZ0lDQWdJR1JsYzJOeWFYQjBiM0l1WTI5dVptbG5kWEpoWW14bElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUdsbUlDaGNJblpoYkhWbFhDSWdhVzRnWkdWelkzSnBjSFJ2Y2lrZ1pHVnpZM0pwY0hSdmNpNTNjbWwwWVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBb01Dd2dYMlJsWm1sdVpWQnliM0JsY25SNU1pNWtaV1poZFd4MEtTaDBZWEpuWlhRc0lHUmxjMk55YVhCMGIzSXVhMlY1TENCa1pYTmpjbWx3ZEc5eUtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tFTnZibk4wY25WamRHOXlMQ0J3Y205MGIxQnliM0J6TENCemRHRjBhV05RY205d2N5a2dlMXh1SUNBZ0lHbG1JQ2h3Y205MGIxQnliM0J6S1NCa1pXWnBibVZRY205d1pYSjBhV1Z6S0VOdmJuTjBjblZqZEc5eUxuQnliM1J2ZEhsd1pTd2djSEp2ZEc5UWNtOXdjeWs3WEc0Z0lDQWdhV1lnS0hOMFlYUnBZMUJ5YjNCektTQmtaV1pwYm1WUWNtOXdaWEowYVdWektFTnZibk4wY25WamRHOXlMQ0J6ZEdGMGFXTlFjbTl3Y3lrN1hHNGdJQ0FnY21WMGRYSnVJRU52Ym5OMGNuVmpkRzl5TzF4dUlDQjlPMXh1ZlNncE95SXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzVsZUhCdmNuUnpMbDlmWlhOTmIyUjFiR1VnUFNCMGNuVmxPMXh1WEc1MllYSWdYMmRsZEZCeWIzUnZkSGx3WlU5bUlEMGdjbVZ4ZFdseVpTaGNJaTR1TDJOdmNtVXRhbk12YjJKcVpXTjBMMmRsZEMxd2NtOTBiM1I1Y0dVdGIyWmNJaWs3WEc1Y2JuWmhjaUJmWjJWMFVISnZkRzkwZVhCbFQyWXlJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZaMlYwVUhKdmRHOTBlWEJsVDJZcE8xeHVYRzUyWVhJZ1gyZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lBOUlISmxjWFZwY21Vb1hDSXVMaTlqYjNKbExXcHpMMjlpYW1WamRDOW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSmNJaWs3WEc1Y2JuWmhjaUJmWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlNaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9YMmRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpazdYRzVjYm1aMWJtTjBhVzl1SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9iMkpxS1NCN0lISmxkSFZ5YmlCdlltb2dKaVlnYjJKcUxsOWZaWE5OYjJSMWJHVWdQeUJ2WW1vZ09pQjdJR1JsWm1GMWJIUTZJRzlpYWlCOU95QjlYRzVjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUdaMWJtTjBhVzl1SUdkbGRDaHZZbXBsWTNRc0lIQnliM0JsY25SNUxDQnlaV05sYVhabGNpa2dlMXh1SUNCcFppQW9iMkpxWldOMElEMDlQU0J1ZFd4c0tTQnZZbXBsWTNRZ1BTQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVTdYRzRnSUhaaGNpQmtaWE5qSUQwZ0tEQXNJRjluWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSXlMbVJsWm1GMWJIUXBLRzlpYW1WamRDd2djSEp2Y0dWeWRIa3BPMXh1WEc0Z0lHbG1JQ2hrWlhOaklEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0IyWVhJZ2NHRnlaVzUwSUQwZ0tEQXNJRjluWlhSUWNtOTBiM1I1Y0dWUFpqSXVaR1ZtWVhWc2RDa29iMkpxWldOMEtUdGNibHh1SUNBZ0lHbG1JQ2h3WVhKbGJuUWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJuWlhRb2NHRnlaVzUwTENCd2NtOXdaWEowZVN3Z2NtVmpaV2wyWlhJcE8xeHVJQ0FnSUgxY2JpQWdmU0JsYkhObElHbG1JQ2hjSW5aaGJIVmxYQ0lnYVc0Z1pHVnpZeWtnZTF4dUlDQWdJSEpsZEhWeWJpQmtaWE5qTG5aaGJIVmxPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFpoY2lCblpYUjBaWElnUFNCa1pYTmpMbWRsZER0Y2JseHVJQ0FnSUdsbUlDaG5aWFIwWlhJZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1oyVjBkR1Z5TG1OaGJHd29jbVZqWldsMlpYSXBPMXh1SUNCOVhHNTlPeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNTJZWElnWDNObGRGQnliM1J2ZEhsd1pVOW1JRDBnY21WeGRXbHlaU2hjSWk0dUwyTnZjbVV0YW5NdmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMlpjSWlrN1hHNWNiblpoY2lCZmMyVjBVSEp2ZEc5MGVYQmxUMll5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmYzJWMFVISnZkRzkwZVhCbFQyWXBPMXh1WEc1MllYSWdYMk55WldGMFpTQTlJSEpsY1hWcGNtVW9YQ0l1TGk5amIzSmxMV3B6TDI5aWFtVmpkQzlqY21WaGRHVmNJaWs3WEc1Y2JuWmhjaUJmWTNKbFlYUmxNaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9YMk55WldGMFpTazdYRzVjYm5aaGNpQmZkSGx3Wlc5bU1pQTlJSEpsY1hWcGNtVW9YQ0l1TGk5b1pXeHdaWEp6TDNSNWNHVnZabHdpS1R0Y2JseHVkbUZ5SUY5MGVYQmxiMll6SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmZEhsd1pXOW1NaWs3WEc1Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3SUdSbFptRjFiSFE2SUc5aWFpQjlPeUI5WEc1Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHWjFibU4wYVc5dUlDaHpkV0pEYkdGemN5d2djM1Z3WlhKRGJHRnpjeWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JSE4xY0dWeVEyeGhjM01nSVQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCemRYQmxja05zWVhOeklDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbE4xY0dWeUlHVjRjSEpsYzNOcGIyNGdiWFZ6ZENCbGFYUm9aWElnWW1VZ2JuVnNiQ0J2Y2lCaElHWjFibU4wYVc5dUxDQnViM1FnWENJZ0t5QW9kSGx3Wlc5bUlITjFjR1Z5UTJ4aGMzTWdQVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdQeUJjSW5WdVpHVm1hVzVsWkZ3aUlEb2dLREFzSUY5MGVYQmxiMll6TG1SbFptRjFiSFFwS0hOMWNHVnlRMnhoYzNNcEtTazdYRzRnSUgxY2JseHVJQ0J6ZFdKRGJHRnpjeTV3Y205MGIzUjVjR1VnUFNBb01Dd2dYMk55WldGMFpUSXVaR1ZtWVhWc2RDa29jM1Z3WlhKRGJHRnpjeUFtSmlCemRYQmxja05zWVhOekxuQnliM1J2ZEhsd1pTd2dlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlPaUI3WEc0Z0lDQWdJQ0IyWVd4MVpUb2djM1ZpUTJ4aGMzTXNYRzRnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lIZHlhWFJoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdmVnh1SUNCOUtUdGNiaUFnYVdZZ0tITjFjR1Z5UTJ4aGMzTXBJRjl6WlhSUWNtOTBiM1I1Y0dWUFpqSXVaR1ZtWVhWc2RDQS9JQ2d3TENCZmMyVjBVSEp2ZEc5MGVYQmxUMll5TG1SbFptRjFiSFFwS0hOMVlrTnNZWE56TENCemRYQmxja05zWVhOektTQTZJSE4xWWtOc1lYTnpMbDlmY0hKdmRHOWZYeUE5SUhOMWNHVnlRMnhoYzNNN1hHNTlPeUlzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNTJZWElnWDNSNWNHVnZaaklnUFNCeVpYRjFhWEpsS0Z3aUxpNHZhR1ZzY0dWeWN5OTBlWEJsYjJaY0lpazdYRzVjYm5aaGNpQmZkSGx3Wlc5bU15QTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gzUjVjR1Z2WmpJcE8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0JtZFc1amRHbHZiaUFvYzJWc1ppd2dZMkZzYkNrZ2UxeHVJQ0JwWmlBb0lYTmxiR1lwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVW1WbVpYSmxibU5sUlhKeWIzSW9YQ0owYUdseklHaGhjMjRuZENCaVpXVnVJR2x1YVhScFlXeHBjMlZrSUMwZ2MzVndaWElvS1NCb1lYTnVKM1FnWW1WbGJpQmpZV3hzWldSY0lpazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdZMkZzYkNBbUppQW9LSFI1Y0dWdlppQmpZV3hzSUQwOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z1hDSjFibVJsWm1sdVpXUmNJaUE2SUNnd0xDQmZkSGx3Wlc5bU15NWtaV1poZFd4MEtTaGpZV3hzS1NrZ1BUMDlJRndpYjJKcVpXTjBYQ0lnZkh3Z2RIbHdaVzltSUdOaGJHd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2dQeUJqWVd4c0lEb2djMlZzWmp0Y2JuMDdJaXdpWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYm1WNGNHOXlkSE11WDE5bGMwMXZaSFZzWlNBOUlIUnlkV1U3WEc1Y2JuWmhjaUJmYVhSbGNtRjBiM0lnUFNCeVpYRjFhWEpsS0Z3aUxpNHZZMjl5WlMxcWN5OXplVzFpYjJ3dmFYUmxjbUYwYjNKY0lpazdYRzVjYm5aaGNpQmZhWFJsY21GMGIzSXlJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZhWFJsY21GMGIzSXBPMXh1WEc1MllYSWdYM041YldKdmJDQTlJSEpsY1hWcGNtVW9YQ0l1TGk5amIzSmxMV3B6TDNONWJXSnZiRndpS1R0Y2JseHVkbUZ5SUY5emVXMWliMnd5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmYzNsdFltOXNLVHRjYmx4dWRtRnlJRjkwZVhCbGIyWWdQU0IwZVhCbGIyWWdYM041YldKdmJESXVaR1ZtWVhWc2RDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JSFI1Y0dWdlppQmZhWFJsY21GMGIzSXlMbVJsWm1GMWJIUWdQVDA5SUZ3aWMzbHRZbTlzWENJZ1B5Qm1kVzVqZEdsdmJpQW9iMkpxS1NCN0lISmxkSFZ5YmlCMGVYQmxiMllnYjJKcU95QjlJRG9nWm5WdVkzUnBiMjRnS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlIUjVjR1Z2WmlCZmMzbHRZbTlzTWk1a1pXWmhkV3gwSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnSmlZZ2IySnFMbU52Ym5OMGNuVmpkRzl5SUQwOVBTQmZjM2x0WW05c01pNWtaV1poZFd4MElDWW1JRzlpYWlBaFBUMGdYM041YldKdmJESXVaR1ZtWVhWc2RDNXdjbTkwYjNSNWNHVWdQeUJjSW5ONWJXSnZiRndpSURvZ2RIbHdaVzltSUc5aWFqc2dmVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ2RIbHdaVzltSUY5emVXMWliMnd5TG1SbFptRjFiSFFnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCZmRIbHdaVzltS0Y5cGRHVnlZWFJ2Y2pJdVpHVm1ZWFZzZENrZ1BUMDlJRndpYzNsdFltOXNYQ0lnUHlCbWRXNWpkR2x2YmlBb2IySnFLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnYjJKcUlEMDlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlEOGdYQ0oxYm1SbFptbHVaV1JjSWlBNklGOTBlWEJsYjJZb2IySnFLVHRjYm4wZ09pQm1kVzVqZEdsdmJpQW9iMkpxS1NCN1hHNGdJSEpsZEhWeWJpQnZZbW9nSmlZZ2RIbHdaVzltSUY5emVXMWliMnd5TG1SbFptRjFiSFFnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCdlltb3VZMjl1YzNSeWRXTjBiM0lnUFQwOUlGOXplVzFpYjJ3eUxtUmxabUYxYkhRZ0ppWWdiMkpxSUNFOVBTQmZjM2x0WW05c01pNWtaV1poZFd4MExuQnliM1J2ZEhsd1pTQS9JRndpYzNsdFltOXNYQ0lnT2lCMGVYQmxiMllnYjJKcUlEMDlQU0JjSW5WdVpHVm1hVzVsWkZ3aUlEOGdYQ0oxYm1SbFptbHVaV1JjSWlBNklGOTBlWEJsYjJZb2IySnFLVHRjYm4wN0lpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5amIzSmxMbkpsWjJWNGNDNWxjMk5oY0dVbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaU2NwTGxKbFowVjRjQzVsYzJOaGNHVTdJaXdpY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbWwwWlhKaGRHOXlKeWs3WEc1eVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVtY205dEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVVuS1M1QmNuSmhlUzVtY205dE95SXNJblpoY2lCamIzSmxJQ0E5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktWeHVJQ0FzSUNSS1UwOU9JRDBnWTI5eVpTNUtVMDlPSUh4OElDaGpiM0psTGtwVFQwNGdQU0I3YzNSeWFXNW5hV1o1T2lCS1UwOU9Mbk4wY21sdVoybG1lWDBwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCemRISnBibWRwWm5rb2FYUXBleUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z0lISmxkSFZ5YmlBa1NsTlBUaTV6ZEhKcGJtZHBabmt1WVhCd2JIa29KRXBUVDA0c0lHRnlaM1Z0Wlc1MGN5azdYRzU5T3lJc0luSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1aGMzTnBaMjRuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpTY3BMazlpYW1WamRDNWhjM05wWjI0N0lpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtTnlaV0YwWlNjcE8xeHVkbUZ5SUNSUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbEp5a3VUMkpxWldOME8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQmpjbVZoZEdVb1VDd2dSQ2w3WEc0Z0lISmxkSFZ5YmlBa1QySnFaV04wTG1OeVpXRjBaU2hRTENCRUtUdGNibjA3SWl3aWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1SbFptbHVaUzF3Y205d1pYSjBlU2NwTzF4dWRtRnlJQ1JQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psSnlrdVQySnFaV04wTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlCa1pXWnBibVZRY205d1pYSjBlU2hwZEN3Z2EyVjVMQ0JrWlhOaktYdGNiaUFnY21WMGRYSnVJQ1JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2FYUXNJR3RsZVN3Z1pHVnpZeWs3WEc1OU95SXNJbkpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW5aWFF0YjNkdUxYQnliM0JsY25SNUxXUmxjMk55YVhCMGIzSW5LVHRjYm5aaGNpQWtUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaU2NwTGs5aWFtVmpkRHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLR2wwTENCclpYa3BlMXh1SUNCeVpYUjFjbTRnSkU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9hWFFzSUd0bGVTazdYRzU5T3lJc0luSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1blpYUXRjSEp2ZEc5MGVYQmxMVzltSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WDJOdmNtVW5LUzVQWW1wbFkzUXVaMlYwVUhKdmRHOTBlWEJsVDJZN0lpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtbHpMV1p5YjNwbGJpY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psSnlrdVQySnFaV04wTG1selJuSnZlbVZ1T3lJc0luSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1clpYbHpKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21VbktTNVBZbXBsWTNRdWEyVjVjenNpTENKeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1YzJWMExYQnliM1J2ZEhsd1pTMXZaaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbEp5a3VUMkpxWldOMExuTmxkRkJ5YjNSdmRIbHdaVTltT3lJc0luSmxjWFZwY21Vb0p5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzUwYnkxemRISnBibWNuS1R0Y2JuSmxjWFZwY21Vb0p5NHVMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVwZEdWeVlYUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpNHZiVzlrZFd4bGN5OTNaV0l1Wkc5dExtbDBaWEpoWW14bEp5azdYRzV5WlhGMWFYSmxLQ2N1TGk5dGIyUjFiR1Z6TDJWek5pNXdjbTl0YVhObEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR1TDIxdlpIVnNaWE12WDJOdmNtVW5LUzVRY205dGFYTmxPeUlzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG5ONWJXSnZiQ2NwTzF4dWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5SdkxYTjBjbWx1WnljcE8xeHVjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6Y3VjM2x0WW05c0xtRnplVzVqTFdsMFpYSmhkRzl5SnlrN1hHNXlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dWIySnpaWEoyWVdKc1pTY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psSnlrdVUzbHRZbTlzT3lJc0luSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHVnlZWFJ2Y2ljcE8xeHVjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5M1pXSXVaRzl0TG1sMFpYSmhZbXhsSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12WDNkcmN5MWxlSFFuS1M1bUtDZHBkR1Z5WVhSdmNpY3BPeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0JwWmloMGVYQmxiMllnYVhRZ0lUMGdKMloxYm1OMGFXOXVKeWwwYUhKdmR5QlVlWEJsUlhKeWIzSW9hWFFnS3lBbklHbHpJRzV2ZENCaElHWjFibU4wYVc5dUlTY3BPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPeUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvS1hzZ0x5b2daVzF3ZEhrZ0tpOGdmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMExDQkRiMjV6ZEhKMVkzUnZjaXdnYm1GdFpTd2dabTl5WW1sa1pHVnVSbWxsYkdRcGUxeHVJQ0JwWmlnaEtHbDBJR2x1YzNSaGJtTmxiMllnUTI5dWMzUnlkV04wYjNJcElIeDhJQ2htYjNKaWFXUmtaVzVHYVdWc1pDQWhQVDBnZFc1a1pXWnBibVZrSUNZbUlHWnZjbUpwWkdSbGJrWnBaV3hrSUdsdUlHbDBLU2w3WEc0Z0lDQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHNWhiV1VnS3lBbk9pQnBibU52Y25KbFkzUWdhVzUyYjJOaGRHbHZiaUVuS1R0Y2JpQWdmU0J5WlhSMWNtNGdhWFE3WEc1OU95SXNJblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUdsbUtDRnBjMDlpYW1WamRDaHBkQ2twZEdoeWIzY2dWSGx3WlVWeWNtOXlLR2wwSUNzZ0p5QnBjeUJ1YjNRZ1lXNGdiMkpxWldOMElTY3BPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPeUlzSWk4dklHWmhiSE5sSUMwK0lFRnljbUY1STJsdVpHVjRUMlpjYmk4dklIUnlkV1VnSUMwK0lFRnljbUY1STJsdVkyeDFaR1Z6WEc1MllYSWdkRzlKVDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzlpYW1WamRDY3BYRzRnSUN3Z2RHOU1aVzVuZEdnZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlsY2JpQWdMQ0IwYjBsdVpHVjRJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm1SbGVDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhKVTE5SlRrTk1WVVJGVXlsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ2tkR2hwY3l3Z1pXd3NJR1p5YjIxSmJtUmxlQ2w3WEc0Z0lDQWdkbUZ5SUU4Z0lDQWdJQ0E5SUhSdlNVOWlhbVZqZENna2RHaHBjeWxjYmlBZ0lDQWdJQ3dnYkdWdVozUm9JRDBnZEc5TVpXNW5kR2dvVHk1c1pXNW5kR2dwWEc0Z0lDQWdJQ0FzSUdsdVpHVjRJQ0E5SUhSdlNXNWtaWGdvWm5KdmJVbHVaR1Y0TENCc1pXNW5kR2dwWEc0Z0lDQWdJQ0FzSUhaaGJIVmxPMXh1SUNBZ0lDOHZJRUZ5Y21GNUkybHVZMngxWkdWeklIVnpaWE1nVTJGdFpWWmhiSFZsV21WeWJ5QmxjWFZoYkdsMGVTQmhiR2R2Y21sMGFHMWNiaUFnSUNCcFppaEpVMTlKVGtOTVZVUkZVeUFtSmlCbGJDQWhQU0JsYkNsM2FHbHNaU2hzWlc1bmRHZ2dQaUJwYm1SbGVDbDdYRzRnSUNBZ0lDQjJZV3gxWlNBOUlFOWJhVzVrWlhncksxMDdYRzRnSUNBZ0lDQnBaaWgyWVd4MVpTQWhQU0IyWVd4MVpTbHlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQXZMeUJCY25KaGVTTjBiMGx1WkdWNElHbG5ibTl5WlhNZ2FHOXNaWE1zSUVGeWNtRjVJMmx1WTJ4MVpHVnpJQzBnYm05MFhHNGdJQ0FnZlNCbGJITmxJR1p2Y2lnN2JHVnVaM1JvSUQ0Z2FXNWtaWGc3SUdsdVpHVjRLeXNwYVdZb1NWTmZTVTVEVEZWRVJWTWdmSHdnYVc1a1pYZ2dhVzRnVHlsN1hHNGdJQ0FnSUNCcFppaFBXMmx1WkdWNFhTQTlQVDBnWld3cGNtVjBkWEp1SUVsVFgwbE9RMHhWUkVWVElIeDhJR2x1WkdWNElIeDhJREE3WEc0Z0lDQWdmU0J5WlhSMWNtNGdJVWxUWDBsT1EweFZSRVZUSUNZbUlDMHhPMXh1SUNCOU8xeHVmVHNpTENJdkx5Qm5aWFIwYVc1bklIUmhaeUJtY205dElERTVMakV1TXk0MklFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jb0tWeHVkbUZ5SUdOdlppQTlJSEpsY1hWcGNtVW9KeTR2WDJOdlppY3BYRzRnSUN3Z1ZFRkhJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjNSdlUzUnlhVzVuVkdGbkp5bGNiaUFnTHk4Z1JWTXpJSGR5YjI1bklHaGxjbVZjYmlBZ0xDQkJVa2NnUFNCamIyWW9ablZ1WTNScGIyNG9LWHNnY21WMGRYSnVJR0Z5WjNWdFpXNTBjenNnZlNncEtTQTlQU0FuUVhKbmRXMWxiblJ6Snp0Y2JseHVMeThnWm1Gc2JHSmhZMnNnWm05eUlFbEZNVEVnVTJOeWFYQjBJRUZqWTJWemN5QkVaVzVwWldRZ1pYSnliM0pjYm5aaGNpQjBjbmxIWlhRZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnYTJWNUtYdGNiaUFnZEhKNUlIdGNiaUFnSUNCeVpYUjFjbTRnYVhSYmEyVjVYVHRjYmlBZ2ZTQmpZWFJqYUNobEtYc2dMeW9nWlcxd2RIa2dLaThnZlZ4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSFpoY2lCUExDQlVMQ0JDTzF4dUlDQnlaWFIxY200Z2FYUWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lDZFZibVJsWm1sdVpXUW5JRG9nYVhRZ1BUMDlJRzUxYkd3Z1B5QW5UblZzYkNkY2JpQWdJQ0F2THlCQVFIUnZVM1J5YVc1blZHRm5JR05oYzJWY2JpQWdJQ0E2SUhSNWNHVnZaaUFvVkNBOUlIUnllVWRsZENoUElEMGdUMkpxWldOMEtHbDBLU3dnVkVGSEtTa2dQVDBnSjNOMGNtbHVaeWNnUHlCVVhHNGdJQ0FnTHk4Z1luVnBiSFJwYmxSaFp5QmpZWE5sWEc0Z0lDQWdPaUJCVWtjZ1B5QmpiMllvVHlsY2JpQWdJQ0F2THlCRlV6TWdZWEpuZFcxbGJuUnpJR1poYkd4aVlXTnJYRzRnSUNBZ09pQW9RaUE5SUdOdlppaFBLU2tnUFQwZ0owOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlFOHVZMkZzYkdWbElEMDlJQ2RtZFc1amRHbHZiaWNnUHlBblFYSm5kVzFsYm5Sekp5QTZJRUk3WEc1OU95SXNJblpoY2lCMGIxTjBjbWx1WnlBOUlIdDlMblJ2VTNSeWFXNW5PMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJSFJ2VTNSeWFXNW5MbU5oYkd3b2FYUXBMbk5zYVdObEtEZ3NJQzB4S1R0Y2JuMDdJaXdpZG1GeUlHTnZjbVVnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0MlpYSnphVzl1T2lBbk1pNDBMakFuZlR0Y2JtbG1LSFI1Y0dWdlppQmZYMlVnUFQwZ0oyNTFiV0psY2ljcFgxOWxJRDBnWTI5eVpUc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFibVJsWmlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQWtaR1ZtYVc1bFVISnZjR1Z5ZEhrZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1Z4dUlDQXNJR055WldGMFpVUmxjMk1nSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNCeWIzQmxjblI1TFdSbGMyTW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlodlltcGxZM1FzSUdsdVpHVjRMQ0IyWVd4MVpTbDdYRzRnSUdsbUtHbHVaR1Y0SUdsdUlHOWlhbVZqZENra1pHVm1hVzVsVUhKdmNHVnlkSGt1WmlodlltcGxZM1FzSUdsdVpHVjRMQ0JqY21WaGRHVkVaWE5qS0RBc0lIWmhiSFZsS1NrN1hHNGdJR1ZzYzJVZ2IySnFaV04wVzJsdVpHVjRYU0E5SUhaaGJIVmxPMXh1ZlRzaUxDSXZMeUJ2Y0hScGIyNWhiQ0F2SUhOcGJYQnNaU0JqYjI1MFpYaDBJR0pwYm1ScGJtZGNiblpoY2lCaFJuVnVZM1JwYjI0Z1BTQnlaWEYxYVhKbEtDY3VMMTloTFdaMWJtTjBhVzl1SnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHWnVMQ0IwYUdGMExDQnNaVzVuZEdncGUxeHVJQ0JoUm5WdVkzUnBiMjRvWm00cE8xeHVJQ0JwWmloMGFHRjBJRDA5UFNCMWJtUmxabWx1WldRcGNtVjBkWEp1SUdadU8xeHVJQ0J6ZDJsMFkyZ29iR1Z1WjNSb0tYdGNiaUFnSUNCallYTmxJREU2SUhKbGRIVnliaUJtZFc1amRHbHZiaWhoS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYmk1allXeHNLSFJvWVhRc0lHRXBPMXh1SUNBZ0lIMDdYRzRnSUNBZ1kyRnpaU0F5T2lCeVpYUjFjbTRnWm5WdVkzUnBiMjRvWVN3Z1lpbDdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNHVZMkZzYkNoMGFHRjBMQ0JoTENCaUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUdOaGMyVWdNem9nY21WMGRYSnVJR1oxYm1OMGFXOXVLR0VzSUdJc0lHTXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnVMbU5oYkd3b2RHaGhkQ3dnWVN3Z1lpd2dZeWs3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9MeW9nTGk0dVlYSm5jeUFxTHlsN1hHNGdJQ0FnY21WMGRYSnVJR1p1TG1Gd2NHeDVLSFJvWVhRc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUgwN1hHNTlPeUlzSWk4dklEY3VNaTR4SUZKbGNYVnBjbVZQWW1wbFkzUkRiMlZ5WTJsaWJHVW9ZWEpuZFcxbGJuUXBYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdhV1lvYVhRZ1BUMGdkVzVrWldacGJtVmtLWFJvY205M0lGUjVjR1ZGY25KdmNpaGNJa05oYmlkMElHTmhiR3dnYldWMGFHOWtJRzl1SUNCY0lpQXJJR2wwS1R0Y2JpQWdjbVYwZFhKdUlHbDBPMXh1ZlRzaUxDSXZMeUJVYUdGdWF5ZHpJRWxGT0NCbWIzSWdhR2x6SUdaMWJtNTVJR1JsWm1sdVpWQnliM0JsY25SNVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDRnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29lMzBzSUNkaEp5d2dlMmRsZERvZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlEYzdJSDE5S1M1aElDRTlJRGM3WEc1OUtUc2lMQ0oyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJR1J2WTNWdFpXNTBJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlrdVpHOWpkVzFsYm5SY2JpQWdMeThnYVc0Z2IyeGtJRWxGSUhSNWNHVnZaaUJrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MElHbHpJQ2R2WW1wbFkzUW5YRzRnSUN3Z2FYTWdQU0JwYzA5aWFtVmpkQ2hrYjJOMWJXVnVkQ2tnSmlZZ2FYTlBZbXBsWTNRb1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2s3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJR2x6SUQ4Z1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2hwZENrZ09pQjdmVHRjYm4wN0lpd2lMeThnU1VVZ09DMGdaRzl1SjNRZ1pXNTFiU0JpZFdjZ2EyVjVjMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvWEc0Z0lDZGpiMjV6ZEhKMVkzUnZjaXhvWVhOUGQyNVFjbTl3WlhKMGVTeHBjMUJ5YjNSdmRIbHdaVTltTEhCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bExIUnZURzlqWVd4bFUzUnlhVzVuTEhSdlUzUnlhVzVuTEhaaGJIVmxUMlluWEc0cExuTndiR2wwS0Njc0p5azdJaXdpTHk4Z1lXeHNJR1Z1ZFcxbGNtRmliR1VnYjJKcVpXTjBJR3RsZVhNc0lHbHVZMngxWkdWeklITjViV0p2YkhOY2JuWmhjaUJuWlhSTFpYbHpJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTW5LVnh1SUNBc0lHZFBVRk1nSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3Y3ljcFhHNGdJQ3dnY0VsRklDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxd2FXVW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0IyWVhJZ2NtVnpkV3gwSUNBZ0lDQTlJR2RsZEV0bGVYTW9hWFFwWEc0Z0lDQWdMQ0JuWlhSVGVXMWliMnh6SUQwZ1owOVFVeTVtTzF4dUlDQnBaaWhuWlhSVGVXMWliMnh6S1h0Y2JpQWdJQ0IyWVhJZ2MzbHRZbTlzY3lBOUlHZGxkRk41YldKdmJITW9hWFFwWEc0Z0lDQWdJQ0FzSUdselJXNTFiU0FnUFNCd1NVVXVabHh1SUNBZ0lDQWdMQ0JwSUNBZ0lDQWdJRDBnTUZ4dUlDQWdJQ0FnTENCclpYazdYRzRnSUNBZ2QyaHBiR1VvYzNsdFltOXNjeTVzWlc1bmRHZ2dQaUJwS1dsbUtHbHpSVzUxYlM1allXeHNLR2wwTENCclpYa2dQU0J6ZVcxaWIyeHpXMmtySzEwcEtYSmxjM1ZzZEM1d2RYTm9LR3RsZVNrN1hHNGdJSDBnY21WMGRYSnVJSEpsYzNWc2REdGNibjA3SWl3aWRtRnlJR2RzYjJKaGJDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnWTI5eVpTQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl5WlNjcFhHNGdJQ3dnWTNSNElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0SnlsY2JpQWdMQ0JvYVdSbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0JRVWs5VVQxUlpVRVVnUFNBbmNISnZkRzkwZVhCbEp6dGNibHh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQm1kVzVqZEdsdmJpaDBlWEJsTENCdVlXMWxMQ0J6YjNWeVkyVXBlMXh1SUNCMllYSWdTVk5mUms5U1EwVkVJRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVSbHh1SUNBZ0lDd2dTVk5mUjB4UFFrRk1JRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVSMXh1SUNBZ0lDd2dTVk5mVTFSQlZFbERJRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVVMXh1SUNBZ0lDd2dTVk5mVUZKUFZFOGdJRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVVRnh1SUNBZ0lDd2dTVk5mUWtsT1JDQWdJRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVRbHh1SUNBZ0lDd2dTVk5mVjFKQlVDQWdJRDBnZEhsd1pTQW1JQ1JsZUhCdmNuUXVWMXh1SUNBZ0lDd2daWGh3YjNKMGN5QWdJRDBnU1ZOZlIweFBRa0ZNSUQ4Z1kyOXlaU0E2SUdOdmNtVmJibUZ0WlYwZ2ZId2dLR052Y21WYmJtRnRaVjBnUFNCN2ZTbGNiaUFnSUNBc0lHVjRjRkJ5YjNSdklDQTlJR1Y0Y0c5eWRITmJVRkpQVkU5VVdWQkZYVnh1SUNBZ0lDd2dkR0Z5WjJWMElDQWdJRDBnU1ZOZlIweFBRa0ZNSUQ4Z1oyeHZZbUZzSURvZ1NWTmZVMVJCVkVsRElEOGdaMnh2WW1Gc1cyNWhiV1ZkSURvZ0tHZHNiMkpoYkZ0dVlXMWxYU0I4ZkNCN2ZTbGJVRkpQVkU5VVdWQkZYVnh1SUNBZ0lDd2dhMlY1TENCdmQyNHNJRzkxZER0Y2JpQWdhV1lvU1ZOZlIweFBRa0ZNS1hOdmRYSmpaU0E5SUc1aGJXVTdYRzRnSUdadmNpaHJaWGtnYVc0Z2MyOTFjbU5sS1h0Y2JpQWdJQ0F2THlCamIyNTBZV2x1Y3lCcGJpQnVZWFJwZG1WY2JpQWdJQ0J2ZDI0Z1BTQWhTVk5mUms5U1EwVkVJQ1ltSUhSaGNtZGxkQ0FtSmlCMFlYSm5aWFJiYTJWNVhTQWhQVDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJR2xtS0c5M2JpQW1KaUJyWlhrZ2FXNGdaWGh3YjNKMGN5bGpiMjUwYVc1MVpUdGNiaUFnSUNBdkx5QmxlSEJ2Y25RZ2JtRjBhWFpsSUc5eUlIQmhjM05sWkZ4dUlDQWdJRzkxZENBOUlHOTNiaUEvSUhSaGNtZGxkRnRyWlhsZElEb2djMjkxY21ObFcydGxlVjA3WEc0Z0lDQWdMeThnY0hKbGRtVnVkQ0JuYkc5aVlXd2djRzlzYkhWMGFXOXVJR1p2Y2lCdVlXMWxjM0JoWTJWelhHNGdJQ0FnWlhod2IzSjBjMXRyWlhsZElEMGdTVk5mUjB4UFFrRk1JQ1ltSUhSNWNHVnZaaUIwWVhKblpYUmJhMlY1WFNBaFBTQW5ablZ1WTNScGIyNG5JRDhnYzI5MWNtTmxXMnRsZVYxY2JpQWdJQ0F2THlCaWFXNWtJSFJwYldWeWN5QjBieUJuYkc5aVlXd2dabTl5SUdOaGJHd2dabkp2YlNCbGVIQnZjblFnWTI5dWRHVjRkRnh1SUNBZ0lEb2dTVk5mUWtsT1JDQW1KaUJ2ZDI0Z1B5QmpkSGdvYjNWMExDQm5iRzlpWVd3cFhHNGdJQ0FnTHk4Z2QzSmhjQ0JuYkc5aVlXd2dZMjl1YzNSeWRXTjBiM0p6SUdadmNpQndjbVYyWlc1MElHTm9ZVzVuWlNCMGFHVnRJR2x1SUd4cFluSmhjbmxjYmlBZ0lDQTZJRWxUWDFkU1FWQWdKaVlnZEdGeVoyVjBXMnRsZVYwZ1BUMGdiM1YwSUQ4Z0tHWjFibU4wYVc5dUtFTXBlMXh1SUNBZ0lDQWdkbUZ5SUVZZ1BTQm1kVzVqZEdsdmJpaGhMQ0JpTENCaktYdGNiaUFnSUNBZ0lDQWdhV1lvZEdocGN5QnBibk4wWVc1alpXOW1JRU1wZTF4dUlDQWdJQ0FnSUNBZ0lITjNhWFJqYUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ01Eb2djbVYwZFhKdUlHNWxkeUJETzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBeE9pQnlaWFIxY200Z2JtVjNJRU1vWVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQnVaWGNnUXloaExDQmlLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlISmxkSFZ5YmlCdVpYY2dReWhoTENCaUxDQmpLVHRjYmlBZ0lDQWdJQ0FnZlNCeVpYUjFjbTRnUXk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQWdJRVpiVUZKUFZFOVVXVkJGWFNBOUlFTmJVRkpQVkU5VVdWQkZYVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQkdPMXh1SUNBZ0lDOHZJRzFoYTJVZ2MzUmhkR2xqSUhabGNuTnBiMjV6SUdadmNpQndjbTkwYjNSNWNHVWdiV1YwYUc5a2MxeHVJQ0FnSUgwcEtHOTFkQ2tnT2lCSlUxOVFVazlVVHlBbUppQjBlWEJsYjJZZ2IzVjBJRDA5SUNkbWRXNWpkR2x2YmljZ1B5QmpkSGdvUm5WdVkzUnBiMjR1WTJGc2JDd2diM1YwS1NBNklHOTFkRHRjYmlBZ0lDQXZMeUJsZUhCdmNuUWdjSEp2ZEc4Z2JXVjBhRzlrY3lCMGJ5QmpiM0psTGlWRFQwNVRWRkpWUTFSUFVpVXViV1YwYUc5a2N5NGxUa0ZOUlNWY2JpQWdJQ0JwWmloSlUxOVFVazlVVHlsN1hHNGdJQ0FnSUNBb1pYaHdiM0owY3k1MmFYSjBkV0ZzSUh4OElDaGxlSEJ2Y25SekxuWnBjblIxWVd3Z1BTQjdmU2twVzJ0bGVWMGdQU0J2ZFhRN1hHNGdJQ0FnSUNBdkx5QmxlSEJ2Y25RZ2NISnZkRzhnYldWMGFHOWtjeUIwYnlCamIzSmxMaVZEVDA1VFZGSlZRMVJQVWlVdWNISnZkRzkwZVhCbExpVk9RVTFGSlZ4dUlDQWdJQ0FnYVdZb2RIbHdaU0FtSUNSbGVIQnZjblF1VWlBbUppQmxlSEJRY205MGJ5QW1KaUFoWlhod1VISnZkRzliYTJWNVhTbG9hV1JsS0dWNGNGQnliM1J2TENCclpYa3NJRzkxZENrN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5TzF4dUx5OGdkSGx3WlNCaWFYUnRZWEJjYmlSbGVIQnZjblF1UmlBOUlERTdJQ0FnTHk4Z1ptOXlZMlZrWEc0a1pYaHdiM0owTGtjZ1BTQXlPeUFnSUM4dklHZHNiMkpoYkZ4dUpHVjRjRzl5ZEM1VElEMGdORHNnSUNBdkx5QnpkR0YwYVdOY2JpUmxlSEJ2Y25RdVVDQTlJRGc3SUNBZ0x5OGdjSEp2ZEc5Y2JpUmxlSEJ2Y25RdVFpQTlJREUyT3lBZ0x5OGdZbWx1WkZ4dUpHVjRjRzl5ZEM1WElEMGdNekk3SUNBdkx5QjNjbUZ3WEc0a1pYaHdiM0owTGxVZ1BTQTJORHNnSUM4dklITmhabVZjYmlSbGVIQnZjblF1VWlBOUlERXlPRHNnTHk4Z2NtVmhiQ0J3Y205MGJ5QnRaWFJvYjJRZ1ptOXlJR0JzYVdKeVlYSjVZQ0JjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnSkdWNGNHOXlkRHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dWNFpXTXBlMXh1SUNCMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlBaElXVjRaV01vS1R0Y2JpQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ2ZWeHVmVHNpTENKMllYSWdZM1I0SUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1Z4dUlDQXNJR05oYkd3Z0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxallXeHNKeWxjYmlBZ0xDQnBjMEZ5Y21GNVNYUmxjaUE5SUhKbGNYVnBjbVVvSnk0dlgybHpMV0Z5Y21GNUxXbDBaWEluS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV3hsYm1kMGFDY3BYRzRnSUN3Z1oyVjBTWFJsY2tadUlDQWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmNtVXVaMlYwTFdsMFpYSmhkRzl5TFcxbGRHaHZaQ2NwWEc0Z0lDd2dRbEpGUVVzZ0lDQWdJQ0FnUFNCN2ZWeHVJQ0FzSUZKRlZGVlNUaUFnSUNBZ0lEMGdlMzA3WEc1MllYSWdaWGh3YjNKMGN5QTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFJsY21GaWJHVXNJR1Z1ZEhKcFpYTXNJR1p1TENCMGFHRjBMQ0JKVkVWU1FWUlBVaWw3WEc0Z0lIWmhjaUJwZEdWeVJtNGdQU0JKVkVWU1FWUlBVaUEvSUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCcGRHVnlZV0pzWlRzZ2ZTQTZJR2RsZEVsMFpYSkdiaWhwZEdWeVlXSnNaU2xjYmlBZ0lDQXNJR1lnSUNBZ0lDQTlJR04wZUNobWJpd2dkR2hoZEN3Z1pXNTBjbWxsY3lBL0lESWdPaUF4S1Z4dUlDQWdJQ3dnYVc1a1pYZ2dJRDBnTUZ4dUlDQWdJQ3dnYkdWdVozUm9MQ0J6ZEdWd0xDQnBkR1Z5WVhSdmNpd2djbVZ6ZFd4ME8xeHVJQ0JwWmloMGVYQmxiMllnYVhSbGNrWnVJQ0U5SUNkbWRXNWpkR2x2YmljcGRHaHliM2NnVkhsd1pVVnljbTl5S0dsMFpYSmhZbXhsSUNzZ0p5QnBjeUJ1YjNRZ2FYUmxjbUZpYkdVaEp5azdYRzRnSUM4dklHWmhjM1FnWTJGelpTQm1iM0lnWVhKeVlYbHpJSGRwZEdnZ1pHVm1ZWFZzZENCcGRHVnlZWFJ2Y2x4dUlDQnBaaWhwYzBGeWNtRjVTWFJsY2locGRHVnlSbTRwS1dadmNpaHNaVzVuZEdnZ1BTQjBiMHhsYm1kMGFDaHBkR1Z5WVdKc1pTNXNaVzVuZEdncE95QnNaVzVuZEdnZ1BpQnBibVJsZURzZ2FXNWtaWGdyS3lsN1hHNGdJQ0FnY21WemRXeDBJRDBnWlc1MGNtbGxjeUEvSUdZb1lXNVBZbXBsWTNRb2MzUmxjQ0E5SUdsMFpYSmhZbXhsVzJsdVpHVjRYU2xiTUYwc0lITjBaWEJiTVYwcElEb2daaWhwZEdWeVlXSnNaVnRwYm1SbGVGMHBPMXh1SUNBZ0lHbG1LSEpsYzNWc2RDQTlQVDBnUWxKRlFVc2dmSHdnY21WemRXeDBJRDA5UFNCU1JWUlZVazRwY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlNCbGJITmxJR1p2Y2locGRHVnlZWFJ2Y2lBOUlHbDBaWEpHYmk1allXeHNLR2wwWlhKaFlteGxLVHNnSVNoemRHVndJRDBnYVhSbGNtRjBiM0l1Ym1WNGRDZ3BLUzVrYjI1bE95QXBlMXh1SUNBZ0lISmxjM1ZzZENBOUlHTmhiR3dvYVhSbGNtRjBiM0lzSUdZc0lITjBaWEF1ZG1Gc2RXVXNJR1Z1ZEhKcFpYTXBPMXh1SUNBZ0lHbG1LSEpsYzNWc2RDQTlQVDBnUWxKRlFVc2dmSHdnY21WemRXeDBJRDA5UFNCU1JWUlZVazRwY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dWZUdGNibVY0Y0c5eWRITXVRbEpGUVVzZ0lEMGdRbEpGUVVzN1hHNWxlSEJ2Y25SekxsSkZWRlZTVGlBOUlGSkZWRlZTVGpzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZW14dmFYSnZZMnN2WTI5eVpTMXFjeTlwYzNOMVpYTXZPRFlqYVhOemRXVmpiMjF0Wlc1MExURXhOVGMxT1RBeU9GeHVkbUZ5SUdkc2IySmhiQ0E5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnZEhsd1pXOW1JSGRwYm1SdmR5QWhQU0FuZFc1a1pXWnBibVZrSnlBbUppQjNhVzVrYjNjdVRXRjBhQ0E5UFNCTllYUm9YRzRnSUQ4Z2QybHVaRzkzSURvZ2RIbHdaVzltSUhObGJHWWdJVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdjMlZzWmk1TllYUm9JRDA5SUUxaGRHZ2dQeUJ6Wld4bUlEb2dSblZ1WTNScGIyNG9KM0psZEhWeWJpQjBhR2x6Snlrb0tUdGNibWxtS0hSNWNHVnZaaUJmWDJjZ1BUMGdKMjUxYldKbGNpY3BYMTluSUQwZ1oyeHZZbUZzT3lBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFhWdVpHVm1JaXdpZG1GeUlHaGhjMDkzYmxCeWIzQmxjblI1SUQwZ2UzMHVhR0Z6VDNkdVVISnZjR1Z5ZEhrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBMQ0JyWlhrcGUxeHVJQ0J5WlhSMWNtNGdhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hwZEN3Z2EyVjVLVHRjYm4wN0lpd2lkbUZ5SUdSUUlDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1Z4dUlDQXNJR055WldGMFpVUmxjMk1nUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ1B5Qm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lHdGxlU3dnZG1Gc2RXVXBlMXh1SUNCeVpYUjFjbTRnWkZBdVppaHZZbXBsWTNRc0lHdGxlU3dnWTNKbFlYUmxSR1Z6WXlneExDQjJZV3gxWlNrcE8xeHVmU0E2SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3dnYTJWNUxDQjJZV3gxWlNsN1hHNGdJRzlpYW1WamRGdHJaWGxkSUQwZ2RtRnNkV1U3WEc0Z0lISmxkSFZ5YmlCdlltcGxZM1E3WEc1OU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWt1Wkc5amRXMWxiblFnSmlZZ1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwT3lJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0lYSmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ0ppWWdJWEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVYwZFhKdUlFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h5WlhGMWFYSmxLQ2N1TDE5a2IyMHRZM0psWVhSbEp5a29KMlJwZGljcExDQW5ZU2NzSUh0blpYUTZJR1oxYm1OMGFXOXVLQ2w3SUhKbGRIVnliaUEzT3lCOWZTa3VZU0FoUFNBM08xeHVmU2s3SWl3aUx5OGdabUZ6ZENCaGNIQnNlU3dnYUhSMGNEb3ZMMnB6Y0dWeVppNXNibXRwZEM1amIyMHZabUZ6ZEMxaGNIQnNlUzgxWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dadUxDQmhjbWR6TENCMGFHRjBLWHRjYmlBZ2RtRnlJSFZ1SUQwZ2RHaGhkQ0E5UFQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0J6ZDJsMFkyZ29ZWEpuY3k1c1pXNW5kR2dwZTF4dUlDQWdJR05oYzJVZ01Eb2djbVYwZFhKdUlIVnVJRDhnWm00b0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ1ptNHVZMkZzYkNoMGFHRjBLVHRjYmlBZ0lDQmpZWE5sSURFNklISmxkSFZ5YmlCMWJpQS9JR1p1S0dGeVozTmJNRjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJtYmk1allXeHNLSFJvWVhRc0lHRnlaM05iTUYwcE8xeHVJQ0FnSUdOaGMyVWdNam9nY21WMGRYSnVJSFZ1SUQ4Z1ptNG9ZWEpuYzFzd1hTd2dZWEpuYzFzeFhTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHWnVMbU5oYkd3b2RHaGhkQ3dnWVhKbmMxc3dYU3dnWVhKbmMxc3hYU2s3WEc0Z0lDQWdZMkZ6WlNBek9pQnlaWFIxY200Z2RXNGdQeUJtYmloaGNtZHpXekJkTENCaGNtZHpXekZkTENCaGNtZHpXekpkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nWm00dVkyRnNiQ2gwYUdGMExDQmhjbWR6V3pCZExDQmhjbWR6V3pGZExDQmhjbWR6V3pKZEtUdGNiaUFnSUNCallYTmxJRFE2SUhKbGRIVnliaUIxYmlBL0lHWnVLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHNJR0Z5WjNOYk1sMHNJR0Z5WjNOYk0xMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQm1iaTVqWVd4c0tIUm9ZWFFzSUdGeVozTmJNRjBzSUdGeVozTmJNVjBzSUdGeVozTmJNbDBzSUdGeVozTmJNMTBwTzF4dUlDQjlJSEpsZEhWeWJpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm00dVlYQndiSGtvZEdoaGRDd2dZWEpuY3lrN1hHNTlPeUlzSWk4dklHWmhiR3hpWVdOcklHWnZjaUJ1YjI0dFlYSnlZWGt0YkdsclpTQkZVek1nWVc1a0lHNXZiaTFsYm5WdFpYSmhZbXhsSUc5c1pDQldPQ0J6ZEhKcGJtZHpYRzUyWVhJZ1kyOW1JRDBnY21WeGRXbHlaU2duTGk5ZlkyOW1KeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUU5aWFtVmpkQ2duZWljcExuQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxLREFwSUQ4Z1QySnFaV04wSURvZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnWTI5bUtHbDBLU0E5UFNBblUzUnlhVzVuSnlBL0lHbDBMbk53YkdsMEtDY25LU0E2SUU5aWFtVmpkQ2hwZENrN1hHNTlPeUlzSWk4dklHTm9aV05ySUc5dUlHUmxabUYxYkhRZ1FYSnlZWGtnYVhSbGNtRjBiM0pjYm5aaGNpQkpkR1Z5WVhSdmNuTWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjbUYwYjNKekp5bGNiaUFnTENCSlZFVlNRVlJQVWlBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KMmwwWlhKaGRHOXlKeWxjYmlBZ0xDQkJjbkpoZVZCeWIzUnZJRDBnUVhKeVlYa3VjSEp2ZEc5MGVYQmxPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJR2wwSUNFOVBTQjFibVJsWm1sdVpXUWdKaVlnS0VsMFpYSmhkRzl5Y3k1QmNuSmhlU0E5UFQwZ2FYUWdmSHdnUVhKeVlYbFFjbTkwYjF0SlZFVlNRVlJQVWwwZ1BUMDlJR2wwS1R0Y2JuMDdJaXdpTHk4Z055NHlMaklnU1hOQmNuSmhlU2hoY21kMWJXVnVkQ2xjYm5aaGNpQmpiMllnUFNCeVpYRjFhWEpsS0NjdUwxOWpiMlluS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1FYSnlZWGt1YVhOQmNuSmhlU0I4ZkNCbWRXNWpkR2x2YmlCcGMwRnljbUY1S0dGeVp5bDdYRzRnSUhKbGRIVnliaUJqYjJZb1lYSm5LU0E5UFNBblFYSnlZWGtuTzF4dWZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCcGRDQTlQVDBnSjI5aWFtVmpkQ2NnUHlCcGRDQWhQVDBnYm5Wc2JDQTZJSFI1Y0dWdlppQnBkQ0E5UFQwZ0oyWjFibU4wYVc5dUp6dGNibjA3SWl3aUx5OGdZMkZzYkNCemIyMWxkR2hwYm1jZ2IyNGdhWFJsY21GMGIzSWdjM1JsY0NCM2FYUm9JSE5oWm1VZ1kyeHZjMmx1WnlCdmJpQmxjbkp2Y2x4dWRtRnlJR0Z1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwWlhKaGRHOXlMQ0JtYml3Z2RtRnNkV1VzSUdWdWRISnBaWE1wZTF4dUlDQjBjbmtnZTF4dUlDQWdJSEpsZEhWeWJpQmxiblJ5YVdWeklEOGdabTRvWVc1UFltcGxZM1FvZG1Gc2RXVXBXekJkTENCMllXeDFaVnN4WFNrZ09pQm1iaWgyWVd4MVpTazdYRzRnSUM4dklEY3VOQzQySUVsMFpYSmhkRzl5UTJ4dmMyVW9hWFJsY21GMGIzSXNJR052YlhCc1pYUnBiMjRwWEc0Z0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ2RtRnlJSEpsZENBOUlHbDBaWEpoZEc5eVd5ZHlaWFIxY200blhUdGNiaUFnSUNCcFppaHlaWFFnSVQwOUlIVnVaR1ZtYVc1bFpDbGhiazlpYW1WamRDaHlaWFF1WTJGc2JDaHBkR1Z5WVhSdmNpa3BPMXh1SUNBZ0lIUm9jbTkzSUdVN1hHNGdJSDFjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJR055WldGMFpTQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV055WldGMFpTY3BYRzRnSUN3Z1pHVnpZM0pwY0hSdmNpQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlsY2JpQWdMQ0J6WlhSVWIxTjBjbWx1WjFSaFp5QTlJSEpsY1hWcGNtVW9KeTR2WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuSnlsY2JpQWdMQ0JKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU0E5SUh0OU8xeHVYRzR2THlBeU5TNHhMakl1TVM0eElDVkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTVmJRRUJwZEdWeVlYUnZjbDBvS1Z4dWNtVnhkV2x5WlNnbkxpOWZhR2xrWlNjcEtFbDBaWEpoZEc5eVVISnZkRzkwZVhCbExDQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25hWFJsY21GMGIzSW5LU3dnWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUhSb2FYTTdJSDBwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtFTnZibk4wY25WamRHOXlMQ0JPUVUxRkxDQnVaWGgwS1h0Y2JpQWdRMjl1YzNSeWRXTjBiM0l1Y0hKdmRHOTBlWEJsSUQwZ1kzSmxZWFJsS0VsMFpYSmhkRzl5VUhKdmRHOTBlWEJsTENCN2JtVjRkRG9nWkdWelkzSnBjSFJ2Y2lneExDQnVaWGgwS1gwcE8xeHVJQ0J6WlhSVWIxTjBjbWx1WjFSaFp5aERiMjV6ZEhKMVkzUnZjaXdnVGtGTlJTQXJJQ2NnU1hSbGNtRjBiM0luS1R0Y2JuMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUV4SlFsSkJVbGtnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJHbGljbUZ5ZVNjcFhHNGdJQ3dnSkdWNGNHOXlkQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJSEpsWkdWbWFXNWxJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVVuS1Z4dUlDQXNJR2hwWkdVZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdsa1pTY3BYRzRnSUN3Z2FHRnpJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJRWwwWlhKaGRHOXljeUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNtRjBiM0p6SnlsY2JpQWdMQ0FrYVhSbGNrTnlaV0YwWlNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSXRZM0psWVhSbEp5bGNiaUFnTENCelpYUlViMU4wY21sdVoxUmhaeUE5SUhKbGNYVnBjbVVvSnk0dlgzTmxkQzEwYnkxemRISnBibWN0ZEdGbkp5bGNiaUFnTENCblpYUlFjbTkwYjNSNWNHVlBaaUE5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmNHOG5LVnh1SUNBc0lFbFVSVkpCVkU5U0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oybDBaWEpoZEc5eUp5bGNiaUFnTENCQ1ZVZEhXU0FnSUNBZ0lDQWdJQ0E5SUNFb1cxMHVhMlY1Y3lBbUppQW5ibVY0ZENjZ2FXNGdXMTB1YTJWNWN5Z3BLU0F2THlCVFlXWmhjbWtnYUdGeklHSjFaMmQ1SUdsMFpYSmhkRzl5Y3lCM0wyOGdZRzVsZUhSZ1hHNGdJQ3dnUmtaZlNWUkZVa0ZVVDFJZ0lDQWdQU0FuUUVCcGRHVnlZWFJ2Y2lkY2JpQWdMQ0JMUlZsVElDQWdJQ0FnSUNBZ0lDQTlJQ2RyWlhsekoxeHVJQ0FzSUZaQlRGVkZVeUFnSUNBZ0lDQWdJRDBnSjNaaGJIVmxjeWM3WEc1Y2JuWmhjaUJ5WlhSMWNtNVVhR2x6SUQwZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlIUm9hWE03SUgwN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9RbUZ6WlN3Z1RrRk5SU3dnUTI5dWMzUnlkV04wYjNJc0lHNWxlSFFzSUVSRlJrRlZURlFzSUVsVFgxTkZWQ3dnUms5U1EwVkVLWHRjYmlBZ0pHbDBaWEpEY21WaGRHVW9RMjl1YzNSeWRXTjBiM0lzSUU1QlRVVXNJRzVsZUhRcE8xeHVJQ0IyWVhJZ1oyVjBUV1YwYUc5a0lEMGdablZ1WTNScGIyNG9hMmx1WkNsN1hHNGdJQ0FnYVdZb0lVSlZSMGRaSUNZbUlHdHBibVFnYVc0Z2NISnZkRzhwY21WMGRYSnVJSEJ5YjNSdlcydHBibVJkTzF4dUlDQWdJSE4zYVhSamFDaHJhVzVrS1h0Y2JpQWdJQ0FnSUdOaGMyVWdTMFZaVXpvZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUd0bGVYTW9LWHNnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaDBhR2x6TENCcmFXNWtLVHNnZlR0Y2JpQWdJQ0FnSUdOaGMyVWdWa0ZNVlVWVE9pQnlaWFIxY200Z1puVnVZM1JwYjI0Z2RtRnNkV1Z6S0NsN0lISmxkSFZ5YmlCdVpYY2dRMjl1YzNSeWRXTjBiM0lvZEdocGN5d2dhMmx1WkNrN0lIMDdYRzRnSUNBZ2ZTQnlaWFIxY200Z1puVnVZM1JwYjI0Z1pXNTBjbWxsY3lncGV5QnlaWFIxY200Z2JtVjNJRU52Ym5OMGNuVmpkRzl5S0hSb2FYTXNJR3RwYm1RcE95QjlPMXh1SUNCOU8xeHVJQ0IyWVhJZ1ZFRkhJQ0FnSUNBZ0lDQTlJRTVCVFVVZ0t5QW5JRWwwWlhKaGRHOXlKMXh1SUNBZ0lDd2dSRVZHWDFaQlRGVkZVeUE5SUVSRlJrRlZURlFnUFQwZ1ZrRk1WVVZUWEc0Z0lDQWdMQ0JXUVV4VlJWTmZRbFZISUQwZ1ptRnNjMlZjYmlBZ0lDQXNJSEJ5YjNSdklDQWdJQ0FnUFNCQ1lYTmxMbkJ5YjNSdmRIbHdaVnh1SUNBZ0lDd2dKRzVoZEdsMlpTQWdJQ0E5SUhCeWIzUnZXMGxVUlZKQlZFOVNYU0I4ZkNCd2NtOTBiMXRHUmw5SlZFVlNRVlJQVWwwZ2ZId2dSRVZHUVZWTVZDQW1KaUJ3Y205MGIxdEVSVVpCVlV4VVhWeHVJQ0FnSUN3Z0pHUmxabUYxYkhRZ0lDQTlJQ1J1WVhScGRtVWdmSHdnWjJWMFRXVjBhRzlrS0VSRlJrRlZURlFwWEc0Z0lDQWdMQ0FrWlc1MGNtbGxjeUFnSUQwZ1JFVkdRVlZNVkNBL0lDRkVSVVpmVmtGTVZVVlRJRDhnSkdSbFptRjFiSFFnT2lCblpYUk5aWFJvYjJRb0oyVnVkSEpwWlhNbktTQTZJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDd2dKR0Z1ZVU1aGRHbDJaU0E5SUU1QlRVVWdQVDBnSjBGeWNtRjVKeUEvSUhCeWIzUnZMbVZ1ZEhKcFpYTWdmSHdnSkc1aGRHbDJaU0E2SUNSdVlYUnBkbVZjYmlBZ0lDQXNJRzFsZEdodlpITXNJR3RsZVN3Z1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVN1hHNGdJQzh2SUVacGVDQnVZWFJwZG1WY2JpQWdhV1lvSkdGdWVVNWhkR2wyWlNsN1hHNGdJQ0FnU1hSbGNtRjBiM0pRY205MGIzUjVjR1VnUFNCblpYUlFjbTkwYjNSNWNHVlBaaWdrWVc1NVRtRjBhWFpsTG1OaGJHd29ibVYzSUVKaGMyVXBLVHRjYmlBZ0lDQnBaaWhKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU0FoUFQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlNsN1hHNGdJQ0FnSUNBdkx5QlRaWFFnUUVCMGIxTjBjbWx1WjFSaFp5QjBieUJ1WVhScGRtVWdhWFJsY21GMGIzSnpYRzRnSUNBZ0lDQnpaWFJVYjFOMGNtbHVaMVJoWnloSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlN3Z1ZFRkhMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDOHZJR1pwZUNCbWIzSWdjMjl0WlNCdmJHUWdaVzVuYVc1bGMxeHVJQ0FnSUNBZ2FXWW9JVXhKUWxKQlVsa2dKaVlnSVdoaGN5aEpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTd2dTVlJGVWtGVVQxSXBLV2hwWkdVb1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVc0lFbFVSVkpCVkU5U0xDQnlaWFIxY201VWFHbHpLVHRjYmlBZ0lDQjlYRzRnSUgxY2JpQWdMeThnWm1sNElFRnljbUY1STN0MllXeDFaWE1zSUVCQWFYUmxjbUYwYjNKOUxtNWhiV1VnYVc0Z1ZqZ2dMeUJHUmx4dUlDQnBaaWhFUlVaZlZrRk1WVVZUSUNZbUlDUnVZWFJwZG1VZ0ppWWdKRzVoZEdsMlpTNXVZVzFsSUNFOVBTQldRVXhWUlZNcGUxeHVJQ0FnSUZaQlRGVkZVMTlDVlVjZ1BTQjBjblZsTzF4dUlDQWdJQ1JrWldaaGRXeDBJRDBnWm5WdVkzUnBiMjRnZG1Gc2RXVnpLQ2w3SUhKbGRIVnliaUFrYm1GMGFYWmxMbU5oYkd3b2RHaHBjeWs3SUgwN1hHNGdJSDFjYmlBZ0x5OGdSR1ZtYVc1bElHbDBaWEpoZEc5eVhHNGdJR2xtS0NnaFRFbENVa0ZTV1NCOGZDQkdUMUpEUlVRcElDWW1JQ2hDVlVkSFdTQjhmQ0JXUVV4VlJWTmZRbFZISUh4OElDRndjbTkwYjF0SlZFVlNRVlJQVWwwcEtYdGNiaUFnSUNCb2FXUmxLSEJ5YjNSdkxDQkpWRVZTUVZSUFVpd2dKR1JsWm1GMWJIUXBPMXh1SUNCOVhHNGdJQzh2SUZCc2RXY2dabTl5SUd4cFluSmhjbmxjYmlBZ1NYUmxjbUYwYjNKelcwNUJUVVZkSUQwZ0pHUmxabUYxYkhRN1hHNGdJRWwwWlhKaGRHOXljMXRVUVVkZElDQTlJSEpsZEhWeWJsUm9hWE03WEc0Z0lHbG1LRVJGUmtGVlRGUXBlMXh1SUNBZ0lHMWxkR2h2WkhNZ1BTQjdYRzRnSUNBZ0lDQjJZV3gxWlhNNklDQkVSVVpmVmtGTVZVVlRJRDhnSkdSbFptRjFiSFFnT2lCblpYUk5aWFJvYjJRb1ZrRk1WVVZUS1N4Y2JpQWdJQ0FnSUd0bGVYTTZJQ0FnSUVsVFgxTkZWQ0FnSUNBZ1B5QWtaR1ZtWVhWc2RDQTZJR2RsZEUxbGRHaHZaQ2hMUlZsVEtTeGNiaUFnSUNBZ0lHVnVkSEpwWlhNNklDUmxiblJ5YVdWelhHNGdJQ0FnZlR0Y2JpQWdJQ0JwWmloR1QxSkRSVVFwWm05eUtHdGxlU0JwYmlCdFpYUm9iMlJ6S1h0Y2JpQWdJQ0FnSUdsbUtDRW9hMlY1SUdsdUlIQnliM1J2S1NseVpXUmxabWx1WlNod2NtOTBieXdnYTJWNUxDQnRaWFJvYjJSelcydGxlVjBwTzF4dUlDQWdJSDBnWld4elpTQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUNoQ1ZVZEhXU0I4ZkNCV1FVeFZSVk5mUWxWSEtTd2dUa0ZOUlN3Z2JXVjBhRzlrY3lrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUcxbGRHaHZaSE03WEc1OU95SXNJblpoY2lCSlZFVlNRVlJQVWlBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYVhSbGNtRjBiM0luS1Z4dUlDQXNJRk5CUmtWZlEweFBVMGxPUnlBOUlHWmhiSE5sTzF4dVhHNTBjbmtnZTF4dUlDQjJZWElnY21sMFpYSWdQU0JiTjExYlNWUkZVa0ZVVDFKZEtDazdYRzRnSUhKcGRHVnlXeWR5WlhSMWNtNG5YU0E5SUdaMWJtTjBhVzl1S0NsN0lGTkJSa1ZmUTB4UFUwbE9SeUE5SUhSeWRXVTdJSDA3WEc0Z0lFRnljbUY1TG1aeWIyMG9jbWwwWlhJc0lHWjFibU4wYVc5dUtDbDdJSFJvY205M0lESTdJSDBwTzF4dWZTQmpZWFJqYUNobEtYc2dMeW9nWlcxd2RIa2dLaThnZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHVjRaV01zSUhOcmFYQkRiRzl6YVc1bktYdGNiaUFnYVdZb0lYTnJhWEJEYkc5emFXNW5JQ1ltSUNGVFFVWkZYME5NVDFOSlRrY3BjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjJZWElnYzJGbVpTQTlJR1poYkhObE8xeHVJQ0IwY25rZ2UxeHVJQ0FnSUhaaGNpQmhjbklnSUQwZ1d6ZGRYRzRnSUNBZ0lDQXNJR2wwWlhJZ1BTQmhjbkpiU1ZSRlVrRlVUMUpkS0NrN1hHNGdJQ0FnYVhSbGNpNXVaWGgwSUQwZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlIdGtiMjVsT2lCellXWmxJRDBnZEhKMVpYMDdJSDA3WEc0Z0lDQWdZWEp5VzBsVVJWSkJWRTlTWFNBOUlHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQnBkR1Z5T3lCOU8xeHVJQ0FnSUdWNFpXTW9ZWEp5S1R0Y2JpQWdmU0JqWVhSamFDaGxLWHNnTHlvZ1pXMXdkSGtnS2k4Z2ZWeHVJQ0J5WlhSMWNtNGdjMkZtWlR0Y2JuMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhrYjI1bExDQjJZV3gxWlNsN1hHNGdJSEpsZEhWeWJpQjdkbUZzZFdVNklIWmhiSFZsTENCa2IyNWxPaUFoSVdSdmJtVjlPMXh1ZlRzaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdDlPeUlzSW5aaGNpQm5aWFJMWlhseklDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YTJWNWN5Y3BYRzRnSUN3Z2RHOUpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lHVnNLWHRjYmlBZ2RtRnlJRThnSUNBZ0lDQTlJSFJ2U1U5aWFtVmpkQ2h2WW1wbFkzUXBYRzRnSUNBZ0xDQnJaWGx6SUNBZ1BTQm5aWFJMWlhsektFOHBYRzRnSUNBZ0xDQnNaVzVuZEdnZ1BTQnJaWGx6TG14bGJtZDBhRnh1SUNBZ0lDd2dhVzVrWlhnZ0lEMGdNRnh1SUNBZ0lDd2dhMlY1TzF4dUlDQjNhR2xzWlNoc1pXNW5kR2dnUGlCcGJtUmxlQ2xwWmloUFcydGxlU0E5SUd0bGVYTmJhVzVrWlhncksxMWRJRDA5UFNCbGJDbHlaWFIxY200Z2EyVjVPMXh1ZlRzaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIUnlkV1U3SWl3aWRtRnlJRTFGVkVFZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRXbGtKeWtvSjIxbGRHRW5LVnh1SUNBc0lHbHpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlsY2JpQWdMQ0JvWVhNZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaGhjeWNwWEc0Z0lDd2djMlYwUkdWell5QWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktTNW1YRzRnSUN3Z2FXUWdJQ0FnSUNBZ1BTQXdPMXh1ZG1GeUlHbHpSWGgwWlc1emFXSnNaU0E5SUU5aWFtVmpkQzVwYzBWNGRHVnVjMmxpYkdVZ2ZId2dablZ1WTNScGIyNG9LWHRjYmlBZ2NtVjBkWEp1SUhSeWRXVTdYRzU5TzF4dWRtRnlJRVpTUlVWYVJTQTlJQ0Z5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwS0daMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQnBjMFY0ZEdWdWMybGliR1VvVDJKcVpXTjBMbkJ5WlhabGJuUkZlSFJsYm5OcGIyNXpLSHQ5S1NrN1hHNTlLVHRjYm5aaGNpQnpaWFJOWlhSaElEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnpaWFJFWlhOaktHbDBMQ0JOUlZSQkxDQjdkbUZzZFdVNklIdGNiaUFnSUNCcE9pQW5UeWNnS3lBcksybGtMQ0F2THlCdlltcGxZM1FnU1VSY2JpQWdJQ0IzT2lCN2ZTQWdJQ0FnSUNBZ0lDQXZMeUIzWldGcklHTnZiR3hsWTNScGIyNXpJRWxFYzF4dUlDQjlmU2s3WEc1OU8xeHVkbUZ5SUdaaGMzUkxaWGtnUFNCbWRXNWpkR2x2YmlocGRDd2dZM0psWVhSbEtYdGNiaUFnTHk4Z2NtVjBkWEp1SUhCeWFXMXBkR2wyWlNCM2FYUm9JSEJ5WldacGVGeHVJQ0JwWmlnaGFYTlBZbXBsWTNRb2FYUXBLWEpsZEhWeWJpQjBlWEJsYjJZZ2FYUWdQVDBnSjNONWJXSnZiQ2NnUHlCcGRDQTZJQ2gwZVhCbGIyWWdhWFFnUFQwZ0ozTjBjbWx1WnljZ1B5QW5VeWNnT2lBblVDY3BJQ3NnYVhRN1hHNGdJR2xtS0NGb1lYTW9hWFFzSUUxRlZFRXBLWHRjYmlBZ0lDQXZMeUJqWVc0bmRDQnpaWFFnYldWMFlXUmhkR0VnZEc4Z2RXNWpZWFZuYUhRZ1puSnZlbVZ1SUc5aWFtVmpkRnh1SUNBZ0lHbG1LQ0ZwYzBWNGRHVnVjMmxpYkdVb2FYUXBLWEpsZEhWeWJpQW5SaWM3WEc0Z0lDQWdMeThnYm05MElHNWxZMlZ6YzJGeWVTQjBieUJoWkdRZ2JXVjBZV1JoZEdGY2JpQWdJQ0JwWmlnaFkzSmxZWFJsS1hKbGRIVnliaUFuUlNjN1hHNGdJQ0FnTHk4Z1lXUmtJRzFwYzNOcGJtY2diV1YwWVdSaGRHRmNiaUFnSUNCelpYUk5aWFJoS0dsMEtUdGNiaUFnTHk4Z2NtVjBkWEp1SUc5aWFtVmpkQ0JKUkZ4dUlDQjlJSEpsZEhWeWJpQnBkRnROUlZSQlhTNXBPMXh1ZlR0Y2JuWmhjaUJuWlhSWFpXRnJJRDBnWm5WdVkzUnBiMjRvYVhRc0lHTnlaV0YwWlNsN1hHNGdJR2xtS0NGb1lYTW9hWFFzSUUxRlZFRXBLWHRjYmlBZ0lDQXZMeUJqWVc0bmRDQnpaWFFnYldWMFlXUmhkR0VnZEc4Z2RXNWpZWFZuYUhRZ1puSnZlbVZ1SUc5aWFtVmpkRnh1SUNBZ0lHbG1LQ0ZwYzBWNGRHVnVjMmxpYkdVb2FYUXBLWEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQzh2SUc1dmRDQnVaV05sYzNOaGNua2dkRzhnWVdSa0lHMWxkR0ZrWVhSaFhHNGdJQ0FnYVdZb0lXTnlaV0YwWlNseVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0x5OGdZV1JrSUcxcGMzTnBibWNnYldWMFlXUmhkR0ZjYmlBZ0lDQnpaWFJOWlhSaEtHbDBLVHRjYmlBZ0x5OGdjbVYwZFhKdUlHaGhjMmdnZDJWaGF5QmpiMnhzWldOMGFXOXVjeUJKUkhOY2JpQWdmU0J5WlhSMWNtNGdhWFJiVFVWVVFWMHVkenRjYm4wN1hHNHZMeUJoWkdRZ2JXVjBZV1JoZEdFZ2IyNGdabkpsWlhwbExXWmhiV2xzZVNCdFpYUm9iMlJ6SUdOaGJHeHBibWRjYm5aaGNpQnZia1p5WldWNlpTQTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdhV1lvUmxKRlJWcEZJQ1ltSUcxbGRHRXVUa1ZGUkNBbUppQnBjMFY0ZEdWdWMybGliR1VvYVhRcElDWW1JQ0ZvWVhNb2FYUXNJRTFGVkVFcEtYTmxkRTFsZEdFb2FYUXBPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPMXh1ZG1GeUlHMWxkR0VnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0Y2JpQWdTMFZaT2lBZ0lDQWdJRTFGVkVFc1hHNGdJRTVGUlVRNklDQWdJQ0JtWVd4elpTeGNiaUFnWm1GemRFdGxlVG9nSUdaaGMzUkxaWGtzWEc0Z0lHZGxkRmRsWVdzNklDQm5aWFJYWldGckxGeHVJQ0J2YmtaeVpXVjZaVG9nYjI1R2NtVmxlbVZjYm4wN0lpd2lkbUZ5SUdkc2IySmhiQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BYRzRnSUN3Z2JXRmpjbTkwWVhOcklEMGdjbVZ4ZFdseVpTZ25MaTlmZEdGemF5Y3BMbk5sZEZ4dUlDQXNJRTlpYzJWeWRtVnlJQ0E5SUdkc2IySmhiQzVOZFhSaGRHbHZiazlpYzJWeWRtVnlJSHg4SUdkc2IySmhiQzVYWldKTGFYUk5kWFJoZEdsdmJrOWljMlZ5ZG1WeVhHNGdJQ3dnY0hKdlkyVnpjeUFnSUQwZ1oyeHZZbUZzTG5CeWIyTmxjM05jYmlBZ0xDQlFjbTl0YVhObElDQWdQU0JuYkc5aVlXd3VVSEp2YldselpWeHVJQ0FzSUdselRtOWtaU0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk52WmljcEtIQnliMk5sYzNNcElEMDlJQ2R3Y205alpYTnpKenRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlncGUxeHVJQ0IyWVhJZ2FHVmhaQ3dnYkdGemRDd2dibTkwYVdaNU8xeHVYRzRnSUhaaGNpQm1iSFZ6YUNBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ2RtRnlJSEJoY21WdWRDd2dabTQ3WEc0Z0lDQWdhV1lvYVhOT2IyUmxJQ1ltSUNod1lYSmxiblFnUFNCd2NtOWpaWE56TG1SdmJXRnBiaWtwY0dGeVpXNTBMbVY0YVhRb0tUdGNiaUFnSUNCM2FHbHNaU2hvWldGa0tYdGNiaUFnSUNBZ0lHWnVJQ0FnUFNCb1pXRmtMbVp1TzF4dUlDQWdJQ0FnYUdWaFpDQTlJR2hsWVdRdWJtVjRkRHRjYmlBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lHWnVLQ2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNCcFppaG9aV0ZrS1c1dmRHbG1lU2dwTzF4dUlDQWdJQ0FnSUNCbGJITmxJR3hoYzNRZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJSFJvY205M0lHVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTQnNZWE4wSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUdsbUtIQmhjbVZ1ZENsd1lYSmxiblF1Wlc1MFpYSW9LVHRjYmlBZ2ZUdGNibHh1SUNBdkx5Qk9iMlJsTG1welhHNGdJR2xtS0dselRtOWtaU2w3WEc0Z0lDQWdibTkwYVdaNUlEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJSEJ5YjJObGMzTXVibVY0ZEZScFkyc29abXgxYzJncE8xeHVJQ0FnSUgwN1hHNGdJQzh2SUdKeWIzZHpaWEp6SUhkcGRHZ2dUWFYwWVhScGIyNVBZbk5sY25abGNseHVJQ0I5SUdWc2MyVWdhV1lvVDJKelpYSjJaWElwZTF4dUlDQWdJSFpoY2lCMGIyZG5iR1VnUFNCMGNuVmxYRzRnSUNBZ0lDQXNJRzV2WkdVZ0lDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpWUmxlSFJPYjJSbEtDY25LVHRjYmlBZ0lDQnVaWGNnVDJKelpYSjJaWElvWm14MWMyZ3BMbTlpYzJWeWRtVW9ibTlrWlN3Z2UyTm9ZWEpoWTNSbGNrUmhkR0U2SUhSeWRXVjlLVHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTF1WlhkY2JpQWdJQ0J1YjNScFpua2dQU0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnYm05a1pTNWtZWFJoSUQwZ2RHOW5aMnhsSUQwZ0lYUnZaMmRzWlR0Y2JpQWdJQ0I5TzF4dUlDQXZMeUJsYm5acGNtOXViV1Z1ZEhNZ2QybDBhQ0J0WVhsaVpTQnViMjR0WTI5dGNHeGxkR1ZzZVNCamIzSnlaV04wTENCaWRYUWdaWGhwYzNSbGJuUWdVSEp2YldselpWeHVJQ0I5SUdWc2MyVWdhV1lvVUhKdmJXbHpaU0FtSmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVwZTF4dUlDQWdJSFpoY2lCd2NtOXRhWE5sSUQwZ1VISnZiV2x6WlM1eVpYTnZiSFpsS0NrN1hHNGdJQ0FnYm05MGFXWjVJRDBnWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0FnSUhCeWIyMXBjMlV1ZEdobGJpaG1iSFZ6YUNrN1hHNGdJQ0FnZlR0Y2JpQWdMeThnWm05eUlHOTBhR1Z5SUdWdWRtbHliMjV0Wlc1MGN5QXRJRzFoWTNKdmRHRnpheUJpWVhObFpDQnZianBjYmlBZ0x5OGdMU0J6WlhSSmJXMWxaR2xoZEdWY2JpQWdMeThnTFNCTlpYTnpZV2RsUTJoaGJtNWxiRnh1SUNBdkx5QXRJSGRwYm1SdmR5NXdiM04wVFdWemMyRm5YRzRnSUM4dklDMGdiMjV5WldGa2VYTjBZWFJsWTJoaGJtZGxYRzRnSUM4dklDMGdjMlYwVkdsdFpXOTFkRnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzV2ZEdsbWVTQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0F2THlCemRISmhibWRsSUVsRklDc2dkMlZpY0dGamF5QmtaWFlnYzJWeWRtVnlJR0oxWnlBdElIVnpaU0F1WTJGc2JDaG5iRzlpWVd3cFhHNGdJQ0FnSUNCdFlXTnliM1JoYzJzdVkyRnNiQ2huYkc5aVlXd3NJR1pzZFhOb0tUdGNiaUFnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtHWnVLWHRjYmlBZ0lDQjJZWElnZEdGemF5QTlJSHRtYmpvZ1ptNHNJRzVsZUhRNklIVnVaR1ZtYVc1bFpIMDdYRzRnSUNBZ2FXWW9iR0Z6ZENsc1lYTjBMbTVsZUhRZ1BTQjBZWE5yTzF4dUlDQWdJR2xtS0NGb1pXRmtLWHRjYmlBZ0lDQWdJR2hsWVdRZ1BTQjBZWE5yTzF4dUlDQWdJQ0FnYm05MGFXWjVLQ2s3WEc0Z0lDQWdmU0JzWVhOMElEMGdkR0Z6YXp0Y2JpQWdmVHRjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdNVGt1TVM0eUxqRWdUMkpxWldOMExtRnpjMmxuYmloMFlYSm5aWFFzSUhOdmRYSmpaU3dnTGk0dUtWeHVkbUZ5SUdkbGRFdGxlWE1nSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXdGxlWE1uS1Z4dUlDQXNJR2RQVUZNZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNITW5LVnh1SUNBc0lIQkpSU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWEJwWlNjcFhHNGdJQ3dnZEc5UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF2WW1wbFkzUW5LVnh1SUNBc0lFbFBZbXBsWTNRZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVc5aWFtVmpkQ2NwWEc0Z0lDd2dKR0Z6YzJsbmJpQWdQU0JQWW1wbFkzUXVZWE56YVdkdU8xeHVYRzR2THlCemFHOTFiR1FnZDI5eWF5QjNhWFJvSUhONWJXSnZiSE1nWVc1a0lITm9iM1ZzWkNCb1lYWmxJR1JsZEdWeWJXbHVhWE4wYVdNZ2NISnZjR1Z5ZEhrZ2IzSmtaWElnS0ZZNElHSjFaeWxjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnSVNSaGMzTnBaMjRnZkh3Z2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCMllYSWdRU0E5SUh0OVhHNGdJQ0FnTENCQ0lEMGdlMzFjYmlBZ0lDQXNJRk1nUFNCVGVXMWliMndvS1Z4dUlDQWdJQ3dnU3lBOUlDZGhZbU5rWldabmFHbHFhMnh0Ym05d2NYSnpkQ2M3WEc0Z0lFRmJVMTBnUFNBM08xeHVJQ0JMTG5Od2JHbDBLQ2NuS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dzcGV5QkNXMnRkSUQwZ2F6c2dmU2s3WEc0Z0lISmxkSFZ5YmlBa1lYTnphV2R1S0h0OUxDQkJLVnRUWFNBaFBTQTNJSHg4SUU5aWFtVmpkQzVyWlhsektDUmhjM05wWjI0b2UzMHNJRUlwS1M1cWIybHVLQ2NuS1NBaFBTQkxPMXh1ZlNrZ1B5Qm1kVzVqZEdsdmJpQmhjM05wWjI0b2RHRnlaMlYwTENCemIzVnlZMlVwZXlBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFhWdWRYTmxaQzEyWVhKelhHNGdJSFpoY2lCVUlDQWdJQ0E5SUhSdlQySnFaV04wS0hSaGNtZGxkQ2xjYmlBZ0lDQXNJR0ZNWlc0Z0lEMGdZWEpuZFcxbGJuUnpMbXhsYm1kMGFGeHVJQ0FnSUN3Z2FXNWtaWGdnUFNBeFhHNGdJQ0FnTENCblpYUlRlVzFpYjJ4eklEMGdaMDlRVXk1bVhHNGdJQ0FnTENCcGMwVnVkVzBnSUNBZ0lEMGdjRWxGTG1ZN1hHNGdJSGRvYVd4bEtHRk1aVzRnUGlCcGJtUmxlQ2w3WEc0Z0lDQWdkbUZ5SUZNZ0lDQWdJQ0E5SUVsUFltcGxZM1FvWVhKbmRXMWxiblJ6VzJsdVpHVjRLeXRkS1Z4dUlDQWdJQ0FnTENCclpYbHpJQ0FnUFNCblpYUlRlVzFpYjJ4eklEOGdaMlYwUzJWNWN5aFRLUzVqYjI1allYUW9aMlYwVTNsdFltOXNjeWhUS1NrZ09pQm5aWFJMWlhsektGTXBYRzRnSUNBZ0lDQXNJR3hsYm1kMGFDQTlJR3RsZVhNdWJHVnVaM1JvWEc0Z0lDQWdJQ0FzSUdvZ0lDQWdJQ0E5SURCY2JpQWdJQ0FnSUN3Z2EyVjVPMXh1SUNBZ0lIZG9hV3hsS0d4bGJtZDBhQ0ErSUdvcGFXWW9hWE5GYm5WdExtTmhiR3dvVXl3Z2EyVjVJRDBnYTJWNWMxdHFLeXRkS1NsVVcydGxlVjBnUFNCVFcydGxlVjA3WEc0Z0lIMGdjbVYwZFhKdUlGUTdYRzU5SURvZ0pHRnpjMmxuYmpzaUxDSXZMeUF4T1M0eExqSXVNaUF2SURFMUxqSXVNeTQxSUU5aWFtVmpkQzVqY21WaGRHVW9UeUJiTENCUWNtOXdaWEowYVdWelhTbGNiblpoY2lCaGJrOWlhbVZqZENBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnWkZCeklDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEJ6SnlsY2JpQWdMQ0JsYm5WdFFuVm5TMlY1Y3lBOUlISmxjWFZwY21Vb0p5NHZYMlZ1ZFcwdFluVm5MV3RsZVhNbktWeHVJQ0FzSUVsRlgxQlNUMVJQSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzJoaGNtVmtMV3RsZVNjcEtDZEpSVjlRVWs5VVR5Y3BYRzRnSUN3Z1JXMXdkSGtnSUNBZ0lDQWdQU0JtZFc1amRHbHZiaWdwZXlBdktpQmxiWEIwZVNBcUx5QjlYRzRnSUN3Z1VGSlBWRTlVV1ZCRklDQWdQU0FuY0hKdmRHOTBlWEJsSnp0Y2JseHVMeThnUTNKbFlYUmxJRzlpYW1WamRDQjNhWFJvSUdaaGEyVWdZRzUxYkd4Z0lIQnliM1J2ZEhsd1pUb2dkWE5sSUdsbWNtRnRaU0JQWW1wbFkzUWdkMmwwYUNCamJHVmhjbVZrSUhCeWIzUnZkSGx3WlZ4dWRtRnlJR055WldGMFpVUnBZM1FnUFNCbWRXNWpkR2x2YmlncGUxeHVJQ0F2THlCVWFISmhjMmdzSUhkaGMzUmxJR0Z1WkNCemIyUnZiWGs2SUVsRklFZERJR0oxWjF4dUlDQjJZWElnYVdaeVlXMWxJRDBnY21WeGRXbHlaU2duTGk5ZlpHOXRMV055WldGMFpTY3BLQ2RwWm5KaGJXVW5LVnh1SUNBZ0lDd2dhU0FnSUNBZ0lEMGdaVzUxYlVKMVowdGxlWE11YkdWdVozUm9YRzRnSUNBZ0xDQnNkQ0FnSUNBZ1BTQW5QQ2RjYmlBZ0lDQXNJR2QwSUNBZ0lDQTlJQ2MrSjF4dUlDQWdJQ3dnYVdaeVlXMWxSRzlqZFcxbGJuUTdYRzRnSUdsbWNtRnRaUzV6ZEhsc1pTNWthWE53YkdGNUlEMGdKMjV2Ym1Vbk8xeHVJQ0J5WlhGMWFYSmxLQ2N1TDE5b2RHMXNKeWt1WVhCd1pXNWtRMmhwYkdRb2FXWnlZVzFsS1R0Y2JpQWdhV1p5WVcxbExuTnlZeUE5SUNkcVlYWmhjMk55YVhCME9pYzdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRjMk55YVhCMExYVnliRnh1SUNBdkx5QmpjbVZoZEdWRWFXTjBJRDBnYVdaeVlXMWxMbU52Ym5SbGJuUlhhVzVrYjNjdVQySnFaV04wTzF4dUlDQXZMeUJvZEcxc0xuSmxiVzkyWlVOb2FXeGtLR2xtY21GdFpTazdYRzRnSUdsbWNtRnRaVVJ2WTNWdFpXNTBJRDBnYVdaeVlXMWxMbU52Ym5SbGJuUlhhVzVrYjNjdVpHOWpkVzFsYm5RN1hHNGdJR2xtY21GdFpVUnZZM1Z0Wlc1MExtOXdaVzRvS1R0Y2JpQWdhV1p5WVcxbFJHOWpkVzFsYm5RdWQzSnBkR1VvYkhRZ0t5QW5jMk55YVhCMEp5QXJJR2QwSUNzZ0oyUnZZM1Z0Wlc1MExrWTlUMkpxWldOMEp5QXJJR3gwSUNzZ0p5OXpZM0pwY0hRbklDc2daM1FwTzF4dUlDQnBabkpoYldWRWIyTjFiV1Z1ZEM1amJHOXpaU2dwTzF4dUlDQmpjbVZoZEdWRWFXTjBJRDBnYVdaeVlXMWxSRzlqZFcxbGJuUXVSanRjYmlBZ2QyaHBiR1VvYVMwdEtXUmxiR1YwWlNCamNtVmhkR1ZFYVdOMFcxQlNUMVJQVkZsUVJWMWJaVzUxYlVKMVowdGxlWE5iYVYxZE8xeHVJQ0J5WlhSMWNtNGdZM0psWVhSbFJHbGpkQ2dwTzF4dWZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JQWW1wbFkzUXVZM0psWVhSbElIeDhJR1oxYm1OMGFXOXVJR055WldGMFpTaFBMQ0JRY205d1pYSjBhV1Z6S1h0Y2JpQWdkbUZ5SUhKbGMzVnNkRHRjYmlBZ2FXWW9UeUFoUFQwZ2JuVnNiQ2w3WEc0Z0lDQWdSVzF3ZEhsYlVGSlBWRTlVV1ZCRlhTQTlJR0Z1VDJKcVpXTjBLRThwTzF4dUlDQWdJSEpsYzNWc2RDQTlJRzVsZHlCRmJYQjBlVHRjYmlBZ0lDQkZiWEIwZVZ0UVVrOVVUMVJaVUVWZElEMGdiblZzYkR0Y2JpQWdJQ0F2THlCaFpHUWdYQ0pmWDNCeWIzUnZYMTljSWlCbWIzSWdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltSUhCdmJIbG1hV3hzWEc0Z0lDQWdjbVZ6ZFd4MFcwbEZYMUJTVDFSUFhTQTlJRTg3WEc0Z0lIMGdaV3h6WlNCeVpYTjFiSFFnUFNCamNtVmhkR1ZFYVdOMEtDazdYRzRnSUhKbGRIVnliaUJRY205d1pYSjBhV1Z6SUQwOVBTQjFibVJsWm1sdVpXUWdQeUJ5WlhOMWJIUWdPaUJrVUhNb2NtVnpkV3gwTENCUWNtOXdaWEowYVdWektUdGNibjA3WEc0aUxDSjJZWElnWVc1UFltcGxZM1FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUVsRk9GOUVUMDFmUkVWR1NVNUZJRDBnY21WeGRXbHlaU2duTGk5ZmFXVTRMV1J2YlMxa1pXWnBibVVuS1Z4dUlDQXNJSFJ2VUhKcGJXbDBhWFpsSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGNISnBiV2wwYVhabEp5bGNiaUFnTENCa1VDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVUdGNibHh1Wlhod2IzSjBjeTVtSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NBL0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU0E2SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUjVLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBlMXh1SUNCaGJrOWlhbVZqZENoUEtUdGNiaUFnVUNBOUlIUnZVSEpwYldsMGFYWmxLRkFzSUhSeWRXVXBPMXh1SUNCaGJrOWlhbVZqZENoQmRIUnlhV0oxZEdWektUdGNiaUFnYVdZb1NVVTRYMFJQVFY5RVJVWkpUa1VwZEhKNUlIdGNiaUFnSUNCeVpYUjFjbTRnWkZBb1R5d2dVQ3dnUVhSMGNtbGlkWFJsY3lrN1hHNGdJSDBnWTJGMFkyZ29aU2w3SUM4cUlHVnRjSFI1SUNvdklIMWNiaUFnYVdZb0oyZGxkQ2NnYVc0Z1FYUjBjbWxpZFhSbGN5QjhmQ0FuYzJWMEp5QnBiaUJCZEhSeWFXSjFkR1Z6S1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWduUVdOalpYTnpiM0p6SUc1dmRDQnpkWEJ3YjNKMFpXUWhKeWs3WEc0Z0lHbG1LQ2QyWVd4MVpTY2dhVzRnUVhSMGNtbGlkWFJsY3lsUFcxQmRJRDBnUVhSMGNtbGlkWFJsY3k1MllXeDFaVHRjYmlBZ2NtVjBkWEp1SUU4N1hHNTlPeUlzSW5aaGNpQmtVQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcFhHNGdJQ3dnWVc1UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh1SUNBc0lHZGxkRXRsZVhNZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV3RsZVhNbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJRDhnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25ScFpYTWdPaUJtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGFXVnpLRThzSUZCeWIzQmxjblJwWlhNcGUxeHVJQ0JoYms5aWFtVmpkQ2hQS1R0Y2JpQWdkbUZ5SUd0bGVYTWdJQ0E5SUdkbGRFdGxlWE1vVUhKdmNHVnlkR2xsY3lsY2JpQWdJQ0FzSUd4bGJtZDBhQ0E5SUd0bGVYTXViR1Z1WjNSb1hHNGdJQ0FnTENCcElEMGdNRnh1SUNBZ0lDd2dVRHRjYmlBZ2QyaHBiR1VvYkdWdVozUm9JRDRnYVNsa1VDNW1LRThzSUZBZ1BTQnJaWGx6VzJrcksxMHNJRkJ5YjNCbGNuUnBaWE5iVUYwcE8xeHVJQ0J5WlhSMWNtNGdUenRjYm4wN0lpd2lkbUZ5SUhCSlJTQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhCcFpTY3BYRzRnSUN3Z1kzSmxZWFJsUkdWell5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHZZbXBsWTNRbktWeHVJQ0FzSUhSdlVISnBiV2wwYVhabElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRjSEpwYldsMGFYWmxKeWxjYmlBZ0xDQm9ZWE1nSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhoY3ljcFhHNGdJQ3dnU1VVNFgwUlBUVjlFUlVaSlRrVWdQU0J5WlhGMWFYSmxLQ2N1TDE5cFpUZ3RaRzl0TFdSbFptbHVaU2NwWEc0Z0lDd2daMDlRUkNBZ0lDQWdJQ0FnSUNBZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5TzF4dVhHNWxlSEJ2Y25SekxtWWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJRDhnWjA5UVJDQTZJR1oxYm1OMGFXOXVJR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaFBMQ0JRS1h0Y2JpQWdUeUE5SUhSdlNVOWlhbVZqZENoUEtUdGNiaUFnVUNBOUlIUnZVSEpwYldsMGFYWmxLRkFzSUhSeWRXVXBPMXh1SUNCcFppaEpSVGhmUkU5TlgwUkZSa2xPUlNsMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlCblQxQkVLRThzSUZBcE8xeHVJQ0I5SUdOaGRHTm9LR1VwZXlBdktpQmxiWEIwZVNBcUx5QjlYRzRnSUdsbUtHaGhjeWhQTENCUUtTbHlaWFIxY200Z1kzSmxZWFJsUkdWell5Z2hjRWxGTG1ZdVkyRnNiQ2hQTENCUUtTd2dUMXRRWFNrN1hHNTlPeUlzSWk4dklHWmhiR3hpWVdOcklHWnZjaUJKUlRFeElHSjFaMmQ1SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6SUhkcGRHZ2dhV1p5WVcxbElHRnVaQ0IzYVc1a2IzZGNiblpoY2lCMGIwbFBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGIySnFaV04wSnlsY2JpQWdMQ0JuVDFCT0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdiaWNwTG1aY2JpQWdMQ0IwYjFOMGNtbHVaeUFnUFNCN2ZTNTBiMU4wY21sdVp6dGNibHh1ZG1GeUlIZHBibVJ2ZDA1aGJXVnpJRDBnZEhsd1pXOW1JSGRwYm1SdmR5QTlQU0FuYjJKcVpXTjBKeUFtSmlCM2FXNWtiM2NnSmlZZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhOY2JpQWdQeUJQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWgzYVc1a2IzY3BJRG9nVzEwN1hHNWNiblpoY2lCblpYUlhhVzVrYjNkT1lXMWxjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnZEhKNUlIdGNiaUFnSUNCeVpYUjFjbTRnWjA5UVRpaHBkQ2s3WEc0Z0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ2NtVjBkWEp1SUhkcGJtUnZkMDVoYldWekxuTnNhV05sS0NrN1hHNGdJSDFjYm4wN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SekxtWWdQU0JtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0dsMEtYdGNiaUFnY21WMGRYSnVJSGRwYm1SdmQwNWhiV1Z6SUNZbUlIUnZVM1J5YVc1bkxtTmhiR3dvYVhRcElEMDlJQ2RiYjJKcVpXTjBJRmRwYm1SdmQxMG5JRDhnWjJWMFYybHVaRzkzVG1GdFpYTW9hWFFwSURvZ1owOVFUaWgwYjBsUFltcGxZM1FvYVhRcEtUdGNibjA3WEc0aUxDSXZMeUF4T1M0eExqSXVOeUF2SURFMUxqSXVNeTQwSUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0U4cFhHNTJZWElnSkd0bGVYTWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6TFdsdWRHVnlibUZzSnlsY2JpQWdMQ0JvYVdSa1pXNUxaWGx6SUQwZ2NtVnhkV2x5WlNnbkxpOWZaVzUxYlMxaWRXY3RhMlY1Y3ljcExtTnZibU5oZENnbmJHVnVaM1JvSnl3Z0ozQnliM1J2ZEhsd1pTY3BPMXh1WEc1bGVIQnZjblJ6TG1ZZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5QjhmQ0JtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0U4cGUxeHVJQ0J5WlhSMWNtNGdKR3RsZVhNb1R5d2dhR2xrWkdWdVMyVjVjeWs3WEc1OU95SXNJbVY0Y0c5eWRITXVaaUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVWTjViV0p2YkhNN0lpd2lMeThnTVRrdU1TNHlMamtnTHlBeE5TNHlMak11TWlCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9UeWxjYm5aaGNpQm9ZWE1nSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaGhjeWNwWEc0Z0lDd2dkRzlQWW1wbFkzUWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF2WW1wbFkzUW5LVnh1SUNBc0lFbEZYMUJTVDFSUElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMyaGhjbVZrTFd0bGVTY3BLQ2RKUlY5UVVrOVVUeWNwWEc0Z0lDd2dUMkpxWldOMFVISnZkRzhnUFNCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFOWlhbVZqZEM1blpYUlFjbTkwYjNSNWNHVlBaaUI4ZkNCbWRXNWpkR2x2YmloUEtYdGNiaUFnVHlBOUlIUnZUMkpxWldOMEtFOHBPMXh1SUNCcFppaG9ZWE1vVHl3Z1NVVmZVRkpQVkU4cEtYSmxkSFZ5YmlCUFcwbEZYMUJTVDFSUFhUdGNiaUFnYVdZb2RIbHdaVzltSUU4dVkyOXVjM1J5ZFdOMGIzSWdQVDBnSjJaMWJtTjBhVzl1SnlBbUppQlBJR2x1YzNSaGJtTmxiMllnVHk1amIyNXpkSEoxWTNSdmNpbDdYRzRnSUNBZ2NtVjBkWEp1SUU4dVkyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxPMXh1SUNCOUlISmxkSFZ5YmlCUElHbHVjM1JoYm1ObGIyWWdUMkpxWldOMElEOGdUMkpxWldOMFVISnZkRzhnT2lCdWRXeHNPMXh1ZlRzaUxDSjJZWElnYUdGeklDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnTENCMGIwbFBZbXBsWTNRZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiMkpxWldOMEp5bGNiaUFnTENCaGNuSmhlVWx1WkdWNFQyWWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzFwYm1Oc2RXUmxjeWNwS0daaGJITmxLVnh1SUNBc0lFbEZYMUJTVDFSUElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTm9ZWEpsWkMxclpYa25LU2duU1VWZlVGSlBWRThuS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lHNWhiV1Z6S1h0Y2JpQWdkbUZ5SUU4Z0lDQWdJQ0E5SUhSdlNVOWlhbVZqZENodlltcGxZM1FwWEc0Z0lDQWdMQ0JwSUNBZ0lDQWdQU0F3WEc0Z0lDQWdMQ0J5WlhOMWJIUWdQU0JiWFZ4dUlDQWdJQ3dnYTJWNU8xeHVJQ0JtYjNJb2EyVjVJR2x1SUU4cGFXWW9hMlY1SUNFOUlFbEZYMUJTVDFSUEtXaGhjeWhQTENCclpYa3BJQ1ltSUhKbGMzVnNkQzV3ZFhOb0tHdGxlU2s3WEc0Z0lDOHZJRVJ2YmlkMElHVnVkVzBnWW5WbklDWWdhR2xrWkdWdUlHdGxlWE5jYmlBZ2QyaHBiR1VvYm1GdFpYTXViR1Z1WjNSb0lENGdhU2xwWmlob1lYTW9UeXdnYTJWNUlEMGdibUZ0WlhOYmFTc3JYU2twZTF4dUlDQWdJSDVoY25KaGVVbHVaR1Y0VDJZb2NtVnpkV3gwTENCclpYa3BJSHg4SUhKbGMzVnNkQzV3ZFhOb0tHdGxlU2s3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSEpsYzNWc2REdGNibjA3SWl3aUx5OGdNVGt1TVM0eUxqRTBJQzhnTVRVdU1pNHpMakUwSUU5aWFtVmpkQzVyWlhsektFOHBYRzUyWVhJZ0pHdGxlWE1nSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YTJWNWN5MXBiblJsY201aGJDY3BYRzRnSUN3Z1pXNTFiVUoxWjB0bGVYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGJuVnRMV0oxWnkxclpYbHpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1QySnFaV04wTG10bGVYTWdmSHdnWm5WdVkzUnBiMjRnYTJWNWN5aFBLWHRjYmlBZ2NtVjBkWEp1SUNSclpYbHpLRThzSUdWdWRXMUNkV2RMWlhsektUdGNibjA3SWl3aVpYaHdiM0owY3k1bUlEMGdlMzB1Y0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVN0lpd2lMeThnYlc5emRDQlBZbXBsWTNRZ2JXVjBhRzlrY3lCaWVTQkZVellnYzJodmRXeGtJR0ZqWTJWd2RDQndjbWx0YVhScGRtVnpYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1kyOXlaU0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk52Y21VbktWeHVJQ0FzSUdaaGFXeHpJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaExSVmtzSUdWNFpXTXBlMXh1SUNCMllYSWdabTRnSUQwZ0tHTnZjbVV1VDJKcVpXTjBJSHg4SUh0OUtWdExSVmxkSUh4OElFOWlhbVZqZEZ0TFJWbGRYRzRnSUNBZ0xDQmxlSEFnUFNCN2ZUdGNiaUFnWlhod1cwdEZXVjBnUFNCbGVHVmpLR1p1S1R0Y2JpQWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lCbVlXbHNjeWhtZFc1amRHbHZiaWdwZXlCbWJpZ3hLVHNnZlNrc0lDZFBZbXBsWTNRbkxDQmxlSEFwTzF4dWZUc2lMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR0pwZEcxaGNDd2dkbUZzZFdVcGUxeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lHVnVkVzFsY21GaWJHVWdJRG9nSVNoaWFYUnRZWEFnSmlBeEtTeGNiaUFnSUNCamIyNW1hV2QxY21GaWJHVTZJQ0VvWW1sMGJXRndJQ1lnTWlrc1hHNGdJQ0FnZDNKcGRHRmliR1VnSUNBZ09pQWhLR0pwZEcxaGNDQW1JRFFwTEZ4dUlDQWdJSFpoYkhWbElDQWdJQ0FnSURvZ2RtRnNkV1ZjYmlBZ2ZUdGNibjA3SWl3aWRtRnlJR2hwWkdVZ1BTQnlaWEYxYVhKbEtDY3VMMTlvYVdSbEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLSFJoY21kbGRDd2djM0pqTENCellXWmxLWHRjYmlBZ1ptOXlLSFpoY2lCclpYa2dhVzRnYzNKaktYdGNiaUFnSUNCcFppaHpZV1psSUNZbUlIUmhjbWRsZEZ0clpYbGRLWFJoY21kbGRGdHJaWGxkSUQwZ2MzSmpXMnRsZVYwN1hHNGdJQ0FnWld4elpTQm9hV1JsS0hSaGNtZGxkQ3dnYTJWNUxDQnpjbU5iYTJWNVhTazdYRzRnSUgwZ2NtVjBkWEp1SUhSaGNtZGxkRHRjYm4wN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlvYVdSbEp5azdJaXdpTHk4Z1YyOXlhM01nZDJsMGFDQmZYM0J5YjNSdlgxOGdiMjVzZVM0Z1QyeGtJSFk0SUdOaGJpZDBJSGR2Y21zZ2QybDBhQ0J1ZFd4c0lIQnliM1J2SUc5aWFtVmpkSE11WEc0dktpQmxjMnhwYm5RdFpHbHpZV0pzWlNCdWJ5MXdjbTkwYnlBcUwxeHVkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWxjYmlBZ0xDQmhiazlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcE8xeHVkbUZ5SUdOb1pXTnJJRDBnWm5WdVkzUnBiMjRvVHl3Z2NISnZkRzhwZTF4dUlDQmhiazlpYW1WamRDaFBLVHRjYmlBZ2FXWW9JV2x6VDJKcVpXTjBLSEJ5YjNSdktTQW1KaUJ3Y205MGJ5QWhQVDBnYm5Wc2JDbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb2NISnZkRzhnS3lCY0lqb2dZMkZ1SjNRZ2MyVjBJR0Z6SUhCeWIzUnZkSGx3WlNGY0lpazdYRzU5TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJSE5sZERvZ1QySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1JSHg4SUNnblgxOXdjbTkwYjE5Zkp5QnBiaUI3ZlNBL0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVZjYmlBZ0lDQm1kVzVqZEdsdmJpaDBaWE4wTENCaWRXZG5lU3dnYzJWMEtYdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUhObGRDQTlJSEpsY1hWcGNtVW9KeTR2WDJOMGVDY3BLRVoxYm1OMGFXOXVMbU5oYkd3c0lISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0JrSnlrdVppaFBZbXBsWTNRdWNISnZkRzkwZVhCbExDQW5YMTl3Y205MGIxOWZKeWt1YzJWMExDQXlLVHRjYmlBZ0lDQWdJQ0FnYzJWMEtIUmxjM1FzSUZ0ZEtUdGNiaUFnSUNBZ0lDQWdZblZuWjNrZ1BTQWhLSFJsYzNRZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVNrN1hHNGdJQ0FnSUNCOUlHTmhkR05vS0dVcGV5QmlkV2RuZVNBOUlIUnlkV1U3SUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ6WlhSUWNtOTBiM1I1Y0dWUFppaFBMQ0J3Y205MGJ5bDdYRzRnSUNBZ0lDQWdJR05vWldOcktFOHNJSEJ5YjNSdktUdGNiaUFnSUNBZ0lDQWdhV1lvWW5Wbloza3BUeTVmWDNCeWIzUnZYMThnUFNCd2NtOTBienRjYmlBZ0lDQWdJQ0FnWld4elpTQnpaWFFvVHl3Z2NISnZkRzhwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVHp0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlNoN2ZTd2dabUZzYzJVcElEb2dkVzVrWldacGJtVmtLU3hjYmlBZ1kyaGxZMnM2SUdOb1pXTnJYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQm5iRzlpWVd3Z0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnWTI5eVpTQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5bGNiaUFnTENCa1VDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcFhHNGdJQ3dnUkVWVFExSkpVRlJQVWxNZ1BTQnlaWEYxYVhKbEtDY3VMMTlrWlhOamNtbHdkRzl5Y3ljcFhHNGdJQ3dnVTFCRlEwbEZVeUFnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25jM0JsWTJsbGN5Y3BPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0V0RldTbDdYRzRnSUhaaGNpQkRJRDBnZEhsd1pXOW1JR052Y21WYlMwVlpYU0E5UFNBblpuVnVZM1JwYjI0bklEOGdZMjl5WlZ0TFJWbGRJRG9nWjJ4dlltRnNXMHRGV1YwN1hHNGdJR2xtS0VSRlUwTlNTVkJVVDFKVElDWW1JRU1nSmlZZ0lVTmJVMUJGUTBsRlUxMHBaRkF1WmloRExDQlRVRVZEU1VWVExDQjdYRzRnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUdkbGREb2dablZ1WTNScGIyNG9LWHNnY21WMGRYSnVJSFJvYVhNN0lIMWNiaUFnZlNrN1hHNTlPeUlzSW5aaGNpQmtaV1lnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LUzVtWEc0Z0lDd2dhR0Z6SUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6SnlsY2JpQWdMQ0JVUVVjZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25kRzlUZEhKcGJtZFVZV2NuS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnZEdGbkxDQnpkR0YwS1h0Y2JpQWdhV1lvYVhRZ0ppWWdJV2hoY3locGRDQTlJSE4wWVhRZ1B5QnBkQ0E2SUdsMExuQnliM1J2ZEhsd1pTd2dWRUZIS1Nsa1pXWW9hWFFzSUZSQlJ5d2dlMk52Ym1acFozVnlZV0pzWlRvZ2RISjFaU3dnZG1Gc2RXVTZJSFJoWjMwcE8xeHVmVHNpTENKMllYSWdjMmhoY21Wa0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzJoaGNtVmtKeWtvSjJ0bGVYTW5LVnh1SUNBc0lIVnBaQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1ZwWkNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHJaWGtwZTF4dUlDQnlaWFIxY200Z2MyaGhjbVZrVzJ0bGVWMGdmSHdnS0hOb1lYSmxaRnRyWlhsZElEMGdkV2xrS0d0bGVTa3BPMXh1ZlRzaUxDSjJZWElnWjJ4dlltRnNJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JUU0VGU1JVUWdQU0FuWDE5amIzSmxMV3B6WDNOb1lYSmxaRjlmSjF4dUlDQXNJSE4wYjNKbElDQTlJR2RzYjJKaGJGdFRTRUZTUlVSZElIeDhJQ2huYkc5aVlXeGJVMGhCVWtWRVhTQTlJSHQ5S1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ2NtVjBkWEp1SUhOMGIzSmxXMnRsZVYwZ2ZId2dLSE4wYjNKbFcydGxlVjBnUFNCN2ZTazdYRzU5T3lJc0lpOHZJRGN1TXk0eU1DQlRjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSW9UeXdnWkdWbVlYVnNkRU52Ym5OMGNuVmpkRzl5S1Z4dWRtRnlJR0Z1VDJKcVpXTjBJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z1lVWjFibU4wYVc5dUlEMGdjbVZ4ZFdseVpTZ25MaTlmWVMxbWRXNWpkR2x2YmljcFhHNGdJQ3dnVTFCRlEwbEZVeUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0ozTndaV05wWlhNbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9UeXdnUkNsN1hHNGdJSFpoY2lCRElEMGdZVzVQWW1wbFkzUW9UeWt1WTI5dWMzUnlkV04wYjNJc0lGTTdYRzRnSUhKbGRIVnliaUJESUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnS0ZNZ1BTQmhiazlpYW1WamRDaERLVnRUVUVWRFNVVlRYU2tnUFQwZ2RXNWtaV1pwYm1Wa0lEOGdSQ0E2SUdGR2RXNWpkR2x2YmloVEtUdGNibjA3SWl3aWRtRnlJSFJ2U1c1MFpXZGxjaUE5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x1ZEdWblpYSW5LVnh1SUNBc0lHUmxabWx1WldRZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJSbFptbHVaV1FuS1R0Y2JpOHZJSFJ5ZFdVZ0lDMCtJRk4wY21sdVp5TmhkRnh1THk4Z1ptRnNjMlVnTFQ0Z1UzUnlhVzVuSTJOdlpHVlFiMmx1ZEVGMFhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtGUlBYMU5VVWtsT1J5bDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWgwYUdGMExDQndiM01wZTF4dUlDQWdJSFpoY2lCeklEMGdVM1J5YVc1bktHUmxabWx1WldRb2RHaGhkQ2twWEc0Z0lDQWdJQ0FzSUdrZ1BTQjBiMGx1ZEdWblpYSW9jRzl6S1Z4dUlDQWdJQ0FnTENCc0lEMGdjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDd2dZU3dnWWp0Y2JpQWdJQ0JwWmlocElEd2dNQ0I4ZkNCcElENDlJR3dwY21WMGRYSnVJRlJQWDFOVVVrbE9SeUEvSUNjbklEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lHRWdQU0J6TG1Ob1lYSkRiMlJsUVhRb2FTazdYRzRnSUNBZ2NtVjBkWEp1SUdFZ1BDQXdlR1E0TURBZ2ZId2dZU0ErSURCNFpHSm1aaUI4ZkNCcElDc2dNU0E5UFQwZ2JDQjhmQ0FvWWlBOUlITXVZMmhoY2tOdlpHVkJkQ2hwSUNzZ01Ta3BJRHdnTUhoa1l6QXdJSHg4SUdJZ1BpQXdlR1JtWm1aY2JpQWdJQ0FnSUQ4Z1ZFOWZVMVJTU1U1SElEOGdjeTVqYUdGeVFYUW9hU2tnT2lCaFhHNGdJQ0FnSUNBNklGUlBYMU5VVWtsT1J5QS9JSE11YzJ4cFkyVW9hU3dnYVNBcklESXBJRG9nS0dFZ0xTQXdlR1E0TURBZ1BEd2dNVEFwSUNzZ0tHSWdMU0F3ZUdSak1EQXBJQ3NnTUhneE1EQXdNRHRjYmlBZ2ZUdGNibjA3SWl3aWRtRnlJR04wZUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTjBlQ2NwWEc0Z0lDd2dhVzUyYjJ0bElDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFXNTJiMnRsSnlsY2JpQWdMQ0JvZEcxc0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9kRzFzSnlsY2JpQWdMQ0JqWld3Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWtiMjB0WTNKbFlYUmxKeWxjYmlBZ0xDQm5iRzlpWVd3Z0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJSEJ5YjJObGMzTWdJQ0FnSUNBZ0lDQWdJQ0E5SUdkc2IySmhiQzV3Y205alpYTnpYRzRnSUN3Z2MyVjBWR0Z6YXlBZ0lDQWdJQ0FnSUNBZ0lEMGdaMnh2WW1Gc0xuTmxkRWx0YldWa2FXRjBaVnh1SUNBc0lHTnNaV0Z5VkdGemF5QWdJQ0FnSUNBZ0lDQTlJR2RzYjJKaGJDNWpiR1ZoY2tsdGJXVmthV0YwWlZ4dUlDQXNJRTFsYzNOaFoyVkRhR0Z1Ym1Wc0lDQWdJQ0E5SUdkc2IySmhiQzVOWlhOellXZGxRMmhoYm01bGJGeHVJQ0FzSUdOdmRXNTBaWElnSUNBZ0lDQWdJQ0FnSUNBOUlEQmNiaUFnTENCeGRXVjFaU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQjdmVnh1SUNBc0lFOU9Va1ZCUkZsVFZFRlVSVU5JUVU1SFJTQTlJQ2R2Ym5KbFlXUjVjM1JoZEdWamFHRnVaMlVuWEc0Z0lDd2daR1ZtWlhJc0lHTm9ZVzV1Wld3c0lIQnZjblE3WEc1MllYSWdjblZ1SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnZG1GeUlHbGtJRDBnSzNSb2FYTTdYRzRnSUdsbUtIRjFaWFZsTG1oaGMwOTNibEJ5YjNCbGNuUjVLR2xrS1NsN1hHNGdJQ0FnZG1GeUlHWnVJRDBnY1hWbGRXVmJhV1JkTzF4dUlDQWdJR1JsYkdWMFpTQnhkV1YxWlZ0cFpGMDdYRzRnSUNBZ1ptNG9LVHRjYmlBZ2ZWeHVmVHRjYm5aaGNpQnNhWE4wWlc1bGNpQTlJR1oxYm1OMGFXOXVLR1YyWlc1MEtYdGNiaUFnY25WdUxtTmhiR3dvWlhabGJuUXVaR0YwWVNrN1hHNTlPMXh1THk4Z1RtOWtaUzVxY3lBd0xqa3JJQ1lnU1VVeE1Dc2dhR0Z6SUhObGRFbHRiV1ZrYVdGMFpTd2diM1JvWlhKM2FYTmxPbHh1YVdZb0lYTmxkRlJoYzJzZ2ZId2dJV05zWldGeVZHRnpheWw3WEc0Z0lITmxkRlJoYzJzZ1BTQm1kVzVqZEdsdmJpQnpaWFJKYlcxbFpHbGhkR1VvWm00cGUxeHVJQ0FnSUhaaGNpQmhjbWR6SUQwZ1cxMHNJR2tnUFNBeE8xeHVJQ0FnSUhkb2FXeGxLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUJwS1dGeVozTXVjSFZ6YUNoaGNtZDFiV1Z1ZEhOYmFTc3JYU2s3WEc0Z0lDQWdjWFZsZFdWYkt5dGpiM1Z1ZEdWeVhTQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0JwYm5admEyVW9kSGx3Wlc5bUlHWnVJRDA5SUNkbWRXNWpkR2x2YmljZ1B5Qm1iaUE2SUVaMWJtTjBhVzl1S0dadUtTd2dZWEpuY3lrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JrWldabGNpaGpiM1Z1ZEdWeUtUdGNiaUFnSUNCeVpYUjFjbTRnWTI5MWJuUmxjanRjYmlBZ2ZUdGNiaUFnWTJ4bFlYSlVZWE5ySUQwZ1puVnVZM1JwYjI0Z1kyeGxZWEpKYlcxbFpHbGhkR1VvYVdRcGUxeHVJQ0FnSUdSbGJHVjBaU0J4ZFdWMVpWdHBaRjA3WEc0Z0lIMDdYRzRnSUM4dklFNXZaR1V1YW5NZ01DNDRMVnh1SUNCcFppaHlaWEYxYVhKbEtDY3VMMTlqYjJZbktTaHdjbTlqWlhOektTQTlQU0FuY0hKdlkyVnpjeWNwZTF4dUlDQWdJR1JsWm1WeUlEMGdablZ1WTNScGIyNG9hV1FwZTF4dUlDQWdJQ0FnY0hKdlkyVnpjeTV1WlhoMFZHbGpheWhqZEhnb2NuVnVMQ0JwWkN3Z01Ta3BPMXh1SUNBZ0lIMDdYRzRnSUM4dklFSnliM2R6WlhKeklIZHBkR2dnVFdWemMyRm5aVU5vWVc1dVpXd3NJR2x1WTJ4MVpHVnpJRmRsWWxkdmNtdGxjbk5jYmlBZ2ZTQmxiSE5sSUdsbUtFMWxjM05oWjJWRGFHRnVibVZzS1h0Y2JpQWdJQ0JqYUdGdWJtVnNJRDBnYm1WM0lFMWxjM05oWjJWRGFHRnVibVZzTzF4dUlDQWdJSEJ2Y25RZ0lDQWdQU0JqYUdGdWJtVnNMbkJ2Y25ReU8xeHVJQ0FnSUdOb1lXNXVaV3d1Y0c5eWRERXViMjV0WlhOellXZGxJRDBnYkdsemRHVnVaWEk3WEc0Z0lDQWdaR1ZtWlhJZ1BTQmpkSGdvY0c5eWRDNXdiM04wVFdWemMyRm5aU3dnY0c5eWRDd2dNU2s3WEc0Z0lDOHZJRUp5YjNkelpYSnpJSGRwZEdnZ2NHOXpkRTFsYzNOaFoyVXNJSE5yYVhBZ1YyVmlWMjl5YTJWeWMxeHVJQ0F2THlCSlJUZ2dhR0Z6SUhCdmMzUk5aWE56WVdkbExDQmlkWFFnYVhRbmN5QnplVzVqSUNZZ2RIbHdaVzltSUdsMGN5QndiM04wVFdWemMyRm5aU0JwY3lBbmIySnFaV04wSjF4dUlDQjlJR1ZzYzJVZ2FXWW9aMnh2WW1Gc0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJZ0ppWWdkSGx3Wlc5bUlIQnZjM1JOWlhOellXZGxJRDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdJV2RzYjJKaGJDNXBiWEJ2Y25SVFkzSnBjSFJ6S1h0Y2JpQWdJQ0JrWldabGNpQTlJR1oxYm1OMGFXOXVLR2xrS1h0Y2JpQWdJQ0FnSUdkc2IySmhiQzV3YjNOMFRXVnpjMkZuWlNocFpDQXJJQ2NuTENBbktpY3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ1oyeHZZbUZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjIxbGMzTmhaMlVuTENCc2FYTjBaVzVsY2l3Z1ptRnNjMlVwTzF4dUlDQXZMeUJKUlRndFhHNGdJSDBnWld4elpTQnBaaWhQVGxKRlFVUlpVMVJCVkVWRFNFRk9SMFVnYVc0Z1kyVnNLQ2R6WTNKcGNIUW5LU2w3WEc0Z0lDQWdaR1ZtWlhJZ1BTQm1kVzVqZEdsdmJpaHBaQ2w3WEc0Z0lDQWdJQ0JvZEcxc0xtRndjR1Z1WkVOb2FXeGtLR05sYkNnbmMyTnlhWEIwSnlrcFcwOU9Va1ZCUkZsVFZFRlVSVU5JUVU1SFJWMGdQU0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNCb2RHMXNMbkpsYlc5MlpVTm9hV3hrS0hSb2FYTXBPMXh1SUNBZ0lDQWdJQ0J5ZFc0dVkyRnNiQ2hwWkNrN1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgwN1hHNGdJQzh2SUZKbGMzUWdiMnhrSUdKeWIzZHpaWEp6WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnWkdWbVpYSWdQU0JtZFc1amRHbHZiaWhwWkNsN1hHNGdJQ0FnSUNCelpYUlVhVzFsYjNWMEtHTjBlQ2h5ZFc0c0lHbGtMQ0F4S1N3Z01DazdYRzRnSUNBZ2ZUdGNiaUFnZlZ4dWZWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdYRzRnSUhObGREb2dJQ0J6WlhSVVlYTnJMRnh1SUNCamJHVmhjam9nWTJ4bFlYSlVZWE5yWEc1OU95SXNJblpoY2lCMGIwbHVkR1ZuWlhJZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJuUmxaMlZ5SnlsY2JpQWdMQ0J0WVhnZ0lDQWdJQ0FnUFNCTllYUm9MbTFoZUZ4dUlDQXNJRzFwYmlBZ0lDQWdJQ0E5SUUxaGRHZ3ViV2x1TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGJtUmxlQ3dnYkdWdVozUm9LWHRjYmlBZ2FXNWtaWGdnUFNCMGIwbHVkR1ZuWlhJb2FXNWtaWGdwTzF4dUlDQnlaWFIxY200Z2FXNWtaWGdnUENBd0lEOGdiV0Y0S0dsdVpHVjRJQ3NnYkdWdVozUm9MQ0F3S1NBNklHMXBiaWhwYm1SbGVDd2diR1Z1WjNSb0tUdGNibjA3SWl3aUx5OGdOeTR4TGpRZ1ZHOUpiblJsWjJWeVhHNTJZWElnWTJWcGJDQWdQU0JOWVhSb0xtTmxhV3hjYmlBZ0xDQm1iRzl2Y2lBOUlFMWhkR2d1Wm14dmIzSTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlHbHpUbUZPS0dsMElEMGdLMmwwS1NBL0lEQWdPaUFvYVhRZ1BpQXdJRDhnWm14dmIzSWdPaUJqWldsc0tTaHBkQ2s3WEc1OU95SXNJaTh2SUhSdklHbHVaR1Y0WldRZ2IySnFaV04wTENCMGIwOWlhbVZqZENCM2FYUm9JR1poYkd4aVlXTnJJR1p2Y2lCdWIyNHRZWEp5WVhrdGJHbHJaU0JGVXpNZ2MzUnlhVzVuYzF4dWRtRnlJRWxQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGIySnFaV04wSnlsY2JpQWdMQ0JrWldacGJtVmtJRDBnY21WeGRXbHlaU2duTGk5ZlpHVm1hVzVsWkNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCSlQySnFaV04wS0dSbFptbHVaV1FvYVhRcEtUdGNibjA3SWl3aUx5OGdOeTR4TGpFMUlGUnZUR1Z1WjNSb1hHNTJZWElnZEc5SmJuUmxaMlZ5SUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc1MFpXZGxjaWNwWEc0Z0lDd2diV2x1SUNBZ0lDQWdJRDBnVFdGMGFDNXRhVzQ3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJR2wwSUQ0Z01DQS9JRzFwYmloMGIwbHVkR1ZuWlhJb2FYUXBMQ0F3ZURGbVptWm1abVptWm1abVptWm1LU0E2SURBN0lDOHZJSEJ2ZHlneUxDQTFNeWtnTFNBeElEMDlJRGt3TURjeE9Ua3lOVFEzTkRBNU9URmNibjA3SWl3aUx5OGdOeTR4TGpFeklGUnZUMkpxWldOMEtHRnlaM1Z0Wlc1MEtWeHVkbUZ5SUdSbFptbHVaV1FnUFNCeVpYRjFhWEpsS0NjdUwxOWtaV1pwYm1Wa0p5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlFOWlhbVZqZENoa1pXWnBibVZrS0dsMEtTazdYRzU5T3lJc0lpOHZJRGN1TVM0eElGUnZVSEpwYldsMGFYWmxLR2x1Y0hWMElGc3NJRkJ5WldabGNuSmxaRlI1Y0dWZEtWeHVkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWs3WEc0dkx5QnBibk4wWldGa0lHOW1JSFJvWlNCRlV6WWdjM0JsWXlCMlpYSnphVzl1TENCM1pTQmthV1J1SjNRZ2FXMXdiR1Z0Wlc1MElFQkFkRzlRY21sdGFYUnBkbVVnWTJGelpWeHVMeThnWVc1a0lIUm9aU0J6WldOdmJtUWdZWEpuZFcxbGJuUWdMU0JtYkdGbklDMGdjSEpsWm1WeWNtVmtJSFI1Y0dVZ2FYTWdZU0J6ZEhKcGJtZGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFzSUZNcGUxeHVJQ0JwWmlnaGFYTlBZbXBsWTNRb2FYUXBLWEpsZEhWeWJpQnBkRHRjYmlBZ2RtRnlJR1p1TENCMllXdzdYRzRnSUdsbUtGTWdKaVlnZEhsd1pXOW1JQ2htYmlBOUlHbDBMblJ2VTNSeWFXNW5LU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZwYzA5aWFtVmpkQ2gyWVd3Z1BTQm1iaTVqWVd4c0tHbDBLU2twY21WMGRYSnVJSFpoYkR0Y2JpQWdhV1lvZEhsd1pXOW1JQ2htYmlBOUlHbDBMblpoYkhWbFQyWXBJRDA5SUNkbWRXNWpkR2x2YmljZ0ppWWdJV2x6VDJKcVpXTjBLSFpoYkNBOUlHWnVMbU5oYkd3b2FYUXBLU2x5WlhSMWNtNGdkbUZzTzF4dUlDQnBaaWdoVXlBbUppQjBlWEJsYjJZZ0tHWnVJRDBnYVhRdWRHOVRkSEpwYm1jcElEMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ0lXbHpUMkpxWldOMEtIWmhiQ0E5SUdadUxtTmhiR3dvYVhRcEtTbHlaWFIxY200Z2RtRnNPMXh1SUNCMGFISnZkeUJVZVhCbFJYSnliM0lvWENKRFlXNG5kQ0JqYjI1MlpYSjBJRzlpYW1WamRDQjBieUJ3Y21sdGFYUnBkbVVnZG1Gc2RXVmNJaWs3WEc1OU95SXNJblpoY2lCcFpDQTlJREJjYmlBZ0xDQndlQ0E5SUUxaGRHZ3VjbUZ1Wkc5dEtDazdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR3RsZVNsN1hHNGdJSEpsZEhWeWJpQW5VM2x0WW05c0tDY3VZMjl1WTJGMEtHdGxlU0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdKeWNnT2lCclpYa3NJQ2NwWHljc0lDZ3JLMmxrSUNzZ2NIZ3BMblJ2VTNSeWFXNW5LRE0yS1NrN1hHNTlPeUlzSW5aaGNpQm5iRzlpWVd3Z0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BYRzRnSUN3Z1kyOXlaU0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2JpQWdMQ0JNU1VKU1FWSlpJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJ4cFluSmhjbmtuS1Z4dUlDQXNJSGRyYzBWNGRDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekxXVjRkQ2NwWEc0Z0lDd2daR1ZtYVc1bFVISnZjR1Z5ZEhrZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1M1bU8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHVZVzFsS1h0Y2JpQWdkbUZ5SUNSVGVXMWliMndnUFNCamIzSmxMbE41YldKdmJDQjhmQ0FvWTI5eVpTNVRlVzFpYjJ3Z1BTQk1TVUpTUVZKWklEOGdlMzBnT2lCbmJHOWlZV3d1VTNsdFltOXNJSHg4SUh0OUtUdGNiaUFnYVdZb2JtRnRaUzVqYUdGeVFYUW9NQ2tnSVQwZ0oxOG5JQ1ltSUNFb2JtRnRaU0JwYmlBa1UzbHRZbTlzS1Nsa1pXWnBibVZRY205d1pYSjBlU2drVTNsdFltOXNMQ0J1WVcxbExDQjdkbUZzZFdVNklIZHJjMFY0ZEM1bUtHNWhiV1VwZlNrN1hHNTlPeUlzSW1WNGNHOXlkSE11WmlBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcE95SXNJblpoY2lCemRHOXlaU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzJoaGNtVmtKeWtvSjNkcmN5Y3BYRzRnSUN3Z2RXbGtJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNWcFpDY3BYRzRnSUN3Z1UzbHRZbTlzSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwTGxONWJXSnZiRnh1SUNBc0lGVlRSVjlUV1UxQ1Qwd2dQU0IwZVhCbGIyWWdVM2x0WW05c0lEMDlJQ2RtZFc1amRHbHZiaWM3WEc1Y2JuWmhjaUFrWlhod2IzSjBjeUE5SUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYm1GdFpTbDdYRzRnSUhKbGRIVnliaUJ6ZEc5eVpWdHVZVzFsWFNCOGZDQW9jM1J2Y21WYmJtRnRaVjBnUFZ4dUlDQWdJRlZUUlY5VFdVMUNUMHdnSmlZZ1UzbHRZbTlzVzI1aGJXVmRJSHg4SUNoVlUwVmZVMWxOUWs5TUlEOGdVM2x0WW05c0lEb2dkV2xrS1NnblUzbHRZbTlzTGljZ0t5QnVZVzFsS1NrN1hHNTlPMXh1WEc0a1pYaHdiM0owY3k1emRHOXlaU0E5SUhOMGIzSmxPeUlzSW5aaGNpQmpiR0Z6YzI5bUlDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amJHRnpjMjltSnlsY2JpQWdMQ0JKVkVWU1FWUlBVaUFnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmFYUmxjbUYwYjNJbktWeHVJQ0FzSUVsMFpYSmhkRzl5Y3lBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhKaGRHOXljeWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlrdVoyVjBTWFJsY21GMGIzSk5aWFJvYjJRZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lHbG1LR2wwSUNFOUlIVnVaR1ZtYVc1bFpDbHlaWFIxY200Z2FYUmJTVlJGVWtGVVQxSmRYRzRnSUNBZ2ZId2dhWFJiSjBCQWFYUmxjbUYwYjNJblhWeHVJQ0FnSUh4OElFbDBaWEpoZEc5eWMxdGpiR0Z6YzI5bUtHbDBLVjA3WEc1OU95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJqZEhnZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOMGVDY3BYRzRnSUN3Z0pHVjRjRzl5ZENBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUhSdlQySnFaV04wSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENCallXeHNJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEl0WTJGc2JDY3BYRzRnSUN3Z2FYTkJjbkpoZVVsMFpYSWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTFoY25KaGVTMXBkR1Z5SnlsY2JpQWdMQ0IwYjB4bGJtZDBhQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnWTNKbFlYUmxVSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDE5amNtVmhkR1V0Y0hKdmNHVnlkSGtuS1Z4dUlDQXNJR2RsZEVsMFpYSkdiaUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlqYjNKbExtZGxkQzFwZEdWeVlYUnZjaTF0WlhSb2IyUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFoY21WeGRXbHlaU2duTGk5ZmFYUmxjaTFrWlhSbFkzUW5LU2htZFc1amRHbHZiaWhwZEdWeUtYc2dRWEp5WVhrdVpuSnZiU2hwZEdWeUtUc2dmU2tzSUNkQmNuSmhlU2NzSUh0Y2JpQWdMeThnTWpJdU1TNHlMakVnUVhKeVlYa3Vabkp2YlNoaGNuSmhlVXhwYTJVc0lHMWhjR1p1SUQwZ2RXNWtaV1pwYm1Wa0xDQjBhR2x6UVhKbklEMGdkVzVrWldacGJtVmtLVnh1SUNCbWNtOXRPaUJtZFc1amRHbHZiaUJtY205dEtHRnljbUY1VEdsclpTOHFMQ0J0WVhCbWJpQTlJSFZ1WkdWbWFXNWxaQ3dnZEdocGMwRnlaeUE5SUhWdVpHVm1hVzVsWkNvdktYdGNiaUFnSUNCMllYSWdUeUFnSUNBZ0lDQTlJSFJ2VDJKcVpXTjBLR0Z5Y21GNVRHbHJaU2xjYmlBZ0lDQWdJQ3dnUXlBZ0lDQWdJQ0E5SUhSNWNHVnZaaUIwYUdseklEMDlJQ2RtZFc1amRHbHZiaWNnUHlCMGFHbHpJRG9nUVhKeVlYbGNiaUFnSUNBZ0lDd2dZVXhsYmlBZ0lDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDd2diV0Z3Wm00Z0lDQTlJR0ZNWlc0Z1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQXNJRzFoY0hCcGJtY2dQU0J0WVhCbWJpQWhQVDBnZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FzSUdsdVpHVjRJQ0FnUFNBd1hHNGdJQ0FnSUNBc0lHbDBaWEpHYmlBZ1BTQm5aWFJKZEdWeVJtNG9UeWxjYmlBZ0lDQWdJQ3dnYkdWdVozUm9MQ0J5WlhOMWJIUXNJSE4wWlhBc0lHbDBaWEpoZEc5eU8xeHVJQ0FnSUdsbUtHMWhjSEJwYm1jcGJXRndabTRnUFNCamRIZ29iV0Z3Wm00c0lHRk1aVzRnUGlBeUlEOGdZWEpuZFcxbGJuUnpXekpkSURvZ2RXNWtaV1pwYm1Wa0xDQXlLVHRjYmlBZ0lDQXZMeUJwWmlCdlltcGxZM1FnYVhOdUozUWdhWFJsY21GaWJHVWdiM0lnYVhRbmN5QmhjbkpoZVNCM2FYUm9JR1JsWm1GMWJIUWdhWFJsY21GMGIzSWdMU0IxYzJVZ2MybHRjR3hsSUdOaGMyVmNiaUFnSUNCcFppaHBkR1Z5Um00Z0lUMGdkVzVrWldacGJtVmtJQ1ltSUNFb1F5QTlQU0JCY25KaGVTQW1KaUJwYzBGeWNtRjVTWFJsY2locGRHVnlSbTRwS1NsN1hHNGdJQ0FnSUNCbWIzSW9hWFJsY21GMGIzSWdQU0JwZEdWeVJtNHVZMkZzYkNoUEtTd2djbVZ6ZFd4MElEMGdibVYzSUVNN0lDRW9jM1JsY0NBOUlHbDBaWEpoZEc5eUxtNWxlSFFvS1NrdVpHOXVaVHNnYVc1a1pYZ3JLeWw3WEc0Z0lDQWdJQ0FnSUdOeVpXRjBaVkJ5YjNCbGNuUjVLSEpsYzNWc2RDd2dhVzVrWlhnc0lHMWhjSEJwYm1jZ1B5QmpZV3hzS0dsMFpYSmhkRzl5TENCdFlYQm1iaXdnVzNOMFpYQXVkbUZzZFdVc0lHbHVaR1Y0WFN3Z2RISjFaU2tnT2lCemRHVndMblpoYkhWbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYkdWdVozUm9JRDBnZEc5TVpXNW5kR2dvVHk1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnWm05eUtISmxjM1ZzZENBOUlHNWxkeUJES0d4bGJtZDBhQ2s3SUd4bGJtZDBhQ0ErSUdsdVpHVjRPeUJwYm1SbGVDc3JLWHRjYmlBZ0lDQWdJQ0FnWTNKbFlYUmxVSEp2Y0dWeWRIa29jbVZ6ZFd4MExDQnBibVJsZUN3Z2JXRndjR2x1WnlBL0lHMWhjR1p1S0U5YmFXNWtaWGhkTENCcGJtUmxlQ2tnT2lCUFcybHVaR1Y0WFNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsYzNWc2RDNXNaVzVuZEdnZ1BTQnBibVJsZUR0Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0I5WEc1OUtUdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCaFpHUlViMVZ1YzJOdmNHRmliR1Z6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZV1JrTFhSdkxYVnVjMk52Y0dGaWJHVnpKeWxjYmlBZ0xDQnpkR1Z3SUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNpMXpkR1Z3SnlsY2JpQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjbUYwYjNKekp5bGNiaUFnTENCMGIwbFBZbXBsWTNRZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwTzF4dVhHNHZMeUF5TWk0eExqTXVOQ0JCY25KaGVTNXdjbTkwYjNSNWNHVXVaVzUwY21sbGN5Z3BYRzR2THlBeU1pNHhMak11TVRNZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG10bGVYTW9LVnh1THk4Z01qSXVNUzR6TGpJNUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1MllXeDFaWE1vS1Z4dUx5OGdNakl1TVM0ekxqTXdJRUZ5Y21GNUxuQnliM1J2ZEhsd1pWdEFRR2wwWlhKaGRHOXlYU2dwWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEl0WkdWbWFXNWxKeWtvUVhKeVlYa3NJQ2RCY25KaGVTY3NJR1oxYm1OMGFXOXVLR2wwWlhKaGRHVmtMQ0JyYVc1a0tYdGNiaUFnZEdocGN5NWZkQ0E5SUhSdlNVOWlhbVZqZENocGRHVnlZWFJsWkNrN0lDOHZJSFJoY21kbGRGeHVJQ0IwYUdsekxsOXBJRDBnTURzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdibVY0ZENCcGJtUmxlRnh1SUNCMGFHbHpMbDlySUQwZ2EybHVaRHNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYTJsdVpGeHVMeThnTWpJdU1TNDFMakl1TVNBbFFYSnlZWGxKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU1V1Ym1WNGRDZ3BYRzU5TENCbWRXNWpkR2x2YmlncGUxeHVJQ0IyWVhJZ1R5QWdJQ0FnUFNCMGFHbHpMbDkwWEc0Z0lDQWdMQ0JyYVc1a0lDQTlJSFJvYVhNdVgydGNiaUFnSUNBc0lHbHVaR1Y0SUQwZ2RHaHBjeTVmYVNzck8xeHVJQ0JwWmlnaFR5QjhmQ0JwYm1SbGVDQStQU0JQTG14bGJtZDBhQ2w3WEc0Z0lDQWdkR2hwY3k1ZmRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnlaWFIxY200Z2MzUmxjQ2d4S1R0Y2JpQWdmVnh1SUNCcFppaHJhVzVrSUQwOUlDZHJaWGx6SnlBZ0tYSmxkSFZ5YmlCemRHVndLREFzSUdsdVpHVjRLVHRjYmlBZ2FXWW9hMmx1WkNBOVBTQW5kbUZzZFdWekp5bHlaWFIxY200Z2MzUmxjQ2d3TENCUFcybHVaR1Y0WFNrN1hHNGdJSEpsZEhWeWJpQnpkR1Z3S0RBc0lGdHBibVJsZUN3Z1QxdHBibVJsZUYxZEtUdGNibjBzSUNkMllXeDFaWE1uS1R0Y2JseHVMeThnWVhKbmRXMWxiblJ6VEdsemRGdEFRR2wwWlhKaGRHOXlYU0JwY3lBbFFYSnlZWGxRY205MGIxOTJZV3gxWlhNbElDZzVMalF1TkM0MkxDQTVMalF1TkM0M0tWeHVTWFJsY21GMGIzSnpMa0Z5WjNWdFpXNTBjeUE5SUVsMFpYSmhkRzl5Y3k1QmNuSmhlVHRjYmx4dVlXUmtWRzlWYm5OamIzQmhZbXhsY3lnbmEyVjVjeWNwTzF4dVlXUmtWRzlWYm5OamIzQmhZbXhsY3lnbmRtRnNkV1Z6SnlrN1hHNWhaR1JVYjFWdWMyTnZjR0ZpYkdWektDZGxiblJ5YVdWekp5azdJaXdpTHk4Z01Ua3VNUzR6TGpFZ1QySnFaV04wTG1GemMybG5iaWgwWVhKblpYUXNJSE52ZFhKalpTbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0xDQW5UMkpxWldOMEp5d2dlMkZ6YzJsbmJqb2djbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV0Z6YzJsbmJpY3BmU2s3SWl3aWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUx5OGdNVGt1TVM0eUxqSWdMeUF4TlM0eUxqTXVOU0JQWW1wbFkzUXVZM0psWVhSbEtFOGdXeXdnVUhKdmNHVnlkR2xsYzEwcFhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDlpYW1WamRDY3NJSHRqY21WaGRHVTZJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFqY21WaGRHVW5LWDBwT3lJc0luWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNHZMeUF4T1M0eExqSXVOQ0F2SURFMUxqSXVNeTQySUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaFBMQ0JRTENCQmRIUnlhV0oxZEdWektWeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaGNtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1N3Z0owOWlhbVZqZENjc0lIdGtaV1pwYm1WUWNtOXdaWEowZVRvZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWt1Wm4wcE95SXNJaTh2SURFNUxqRXVNaTQySUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9UeXdnVUNsY2JuWmhjaUIwYjBsUFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzlpYW1WamRDY3BYRzRnSUN3Z0pHZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0JrSnlrdVpqdGNibHh1Y21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhOaGNDY3BLQ2RuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW5MQ0JtZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1oyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0dsMExDQnJaWGtwZTF4dUlDQWdJSEpsZEhWeWJpQWtaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtIUnZTVTlpYW1WamRDaHBkQ2tzSUd0bGVTazdYRzRnSUgwN1hHNTlLVHNpTENJdkx5QXhPUzR4TGpJdU9TQlBZbXBsWTNRdVoyVjBVSEp2ZEc5MGVYQmxUMllvVHlsY2JuWmhjaUIwYjA5aWFtVmpkQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHVJQ0FzSUNSblpYUlFjbTkwYjNSNWNHVlBaaUE5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmNHOG5LVHRjYmx4dWNtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExYTmhjQ2NwS0NkblpYUlFjbTkwYjNSNWNHVlBaaWNzSUdaMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQm5aWFJRY205MGIzUjVjR1ZQWmlocGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUNSblpYUlFjbTkwYjNSNWNHVlBaaWgwYjA5aWFtVmpkQ2hwZENrcE8xeHVJQ0I5TzF4dWZTazdJaXdpTHk4Z01Ua3VNUzR5TGpFeUlFOWlhbVZqZEM1cGMwWnliM3BsYmloUEtWeHVkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWs3WEc1Y2JuSmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXpZWEFuS1NnbmFYTkdjbTk2Wlc0bkxDQm1kVzVqZEdsdmJpZ2thWE5HY205NlpXNHBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYVhOR2NtOTZaVzRvYVhRcGUxeHVJQ0FnSUhKbGRIVnliaUJwYzA5aWFtVmpkQ2hwZENrZ1B5QWthWE5HY205NlpXNGdQeUFrYVhOR2NtOTZaVzRvYVhRcElEb2dabUZzYzJVZ09pQjBjblZsTzF4dUlDQjlPMXh1ZlNrN0lpd2lMeThnTVRrdU1TNHlMakUwSUU5aWFtVmpkQzVyWlhsektFOHBYRzUyWVhJZ2RHOVBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxdlltcGxZM1FuS1Z4dUlDQXNJQ1JyWlhseklDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTW5LVHRjYmx4dWNtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExYTmhjQ2NwS0NkclpYbHpKeXdnWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHdGxlWE1vYVhRcGUxeHVJQ0FnSUhKbGRIVnliaUFrYTJWNWN5aDBiMDlpYW1WamRDaHBkQ2twTzF4dUlDQjlPMXh1ZlNrN0lpd2lMeThnTVRrdU1TNHpMakU1SUU5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFppaFBMQ0J3Y205MGJ5bGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjA5aWFtVmpkQ2NzSUh0elpYUlFjbTkwYjNSNWNHVlBaam9nY21WeGRXbHlaU2duTGk5ZmMyVjBMWEJ5YjNSdkp5a3VjMlYwZlNrN0lpd2lJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUV4SlFsSkJVbGtnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMnhwWW5KaGNua25LVnh1SUNBc0lHZHNiMkpoYkNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dZM1I0SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkzUjRKeWxjYmlBZ0xDQmpiR0Z6YzI5bUlDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amJHRnpjMjltSnlsY2JpQWdMQ0FrWlhod2IzSjBJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdselQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwWEc0Z0lDd2dZVVoxYm1OMGFXOXVJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllTMW1kVzVqZEdsdmJpY3BYRzRnSUN3Z1lXNUpibk4wWVc1alpTQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGFXNXpkR0Z1WTJVbktWeHVJQ0FzSUdadmNrOW1JQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlp2Y2kxdlppY3BYRzRnSUN3Z2MzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUlEMGdjbVZ4ZFdseVpTZ25MaTlmYzNCbFkybGxjeTFqYjI1emRISjFZM1J2Y2ljcFhHNGdJQ3dnZEdGemF5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkR0Z6YXljcExuTmxkRnh1SUNBc0lHMXBZM0p2ZEdGemF5QWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxcFkzSnZkR0Z6YXljcEtDbGNiaUFnTENCUVVrOU5TVk5GSUNBZ0lDQWdJQ0FnSUNBZ1BTQW5VSEp2YldselpTZGNiaUFnTENCVWVYQmxSWEp5YjNJZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dVZIbHdaVVZ5Y205eVhHNGdJQ3dnY0hKdlkyVnpjeUFnSUNBZ0lDQWdJQ0FnSUQwZ1oyeHZZbUZzTG5CeWIyTmxjM05jYmlBZ0xDQWtVSEp2YldselpTQWdJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXeGJVRkpQVFVsVFJWMWNiaUFnTENCd2NtOWpaWE56SUNBZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dWNISnZZMlZ6YzF4dUlDQXNJR2x6VG05a1pTQWdJQ0FnSUNBZ0lDQWdJQ0E5SUdOc1lYTnpiMllvY0hKdlkyVnpjeWtnUFQwZ0ozQnliMk5sYzNNblhHNGdJQ3dnWlcxd2RIa2dJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ1puVnVZM1JwYjI0b0tYc2dMeW9nWlcxd2RIa2dLaThnZlZ4dUlDQXNJRWx1ZEdWeWJtRnNMQ0JIWlc1bGNtbGpVSEp2YldselpVTmhjR0ZpYVd4cGRIa3NJRmR5WVhCd1pYSTdYRzVjYm5aaGNpQlZVMFZmVGtGVVNWWkZJRDBnSVNGbWRXNWpkR2x2YmlncGUxeHVJQ0IwY25rZ2UxeHVJQ0FnSUM4dklHTnZjbkpsWTNRZ2MzVmlZMnhoYzNOcGJtY2dkMmwwYUNCQVFITndaV05wWlhNZ2MzVndjRzl5ZEZ4dUlDQWdJSFpoY2lCd2NtOXRhWE5sSUNBZ0lDQTlJQ1JRY205dGFYTmxMbkpsYzI5c2RtVW9NU2xjYmlBZ0lDQWdJQ3dnUm1GclpWQnliMjFwYzJVZ1BTQW9jSEp2YldselpTNWpiMjV6ZEhKMVkzUnZjaUE5SUh0OUtWdHlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25jM0JsWTJsbGN5Y3BYU0E5SUdaMWJtTjBhVzl1S0dWNFpXTXBleUJsZUdWaktHVnRjSFI1TENCbGJYQjBlU2s3SUgwN1hHNGdJQ0FnTHk4Z2RXNW9ZVzVrYkdWa0lISmxhbVZqZEdsdmJuTWdkSEpoWTJ0cGJtY2djM1Z3Y0c5eWRDd2dUbTlrWlVwVElGQnliMjFwYzJVZ2QybDBhRzkxZENCcGRDQm1ZV2xzY3lCQVFITndaV05wWlhNZ2RHVnpkRnh1SUNBZ0lISmxkSFZ5YmlBb2FYTk9iMlJsSUh4OElIUjVjR1Z2WmlCUWNtOXRhWE5sVW1WcVpXTjBhVzl1UlhabGJuUWdQVDBnSjJaMWJtTjBhVzl1SnlrZ0ppWWdjSEp2YldselpTNTBhR1Z1S0dWdGNIUjVLU0JwYm5OMFlXNWpaVzltSUVaaGEyVlFjbTl0YVhObE8xeHVJQ0I5SUdOaGRHTm9LR1VwZXlBdktpQmxiWEIwZVNBcUx5QjlYRzU5S0NrN1hHNWNiaTh2SUdobGJIQmxjbk5jYm5aaGNpQnpZVzFsUTI5dWMzUnlkV04wYjNJZ1BTQm1kVzVqZEdsdmJpaGhMQ0JpS1h0Y2JpQWdMeThnZDJsMGFDQnNhV0p5WVhKNUlIZHlZWEJ3WlhJZ2MzQmxZMmxoYkNCallYTmxYRzRnSUhKbGRIVnliaUJoSUQwOVBTQmlJSHg4SUdFZ1BUMDlJQ1JRY205dGFYTmxJQ1ltSUdJZ1BUMDlJRmR5WVhCd1pYSTdYRzU5TzF4dWRtRnlJR2x6VkdobGJtRmliR1VnUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhaaGNpQjBhR1Z1TzF4dUlDQnlaWFIxY200Z2FYTlBZbXBsWTNRb2FYUXBJQ1ltSUhSNWNHVnZaaUFvZEdobGJpQTlJR2wwTG5Sb1pXNHBJRDA5SUNkbWRXNWpkR2x2YmljZ1B5QjBhR1Z1SURvZ1ptRnNjMlU3WEc1OU8xeHVkbUZ5SUc1bGQxQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlEMGdablZ1WTNScGIyNG9ReWw3WEc0Z0lISmxkSFZ5YmlCellXMWxRMjl1YzNSeWRXTjBiM0lvSkZCeWIyMXBjMlVzSUVNcFhHNGdJQ0FnUHlCdVpYY2dVSEp2YldselpVTmhjR0ZpYVd4cGRIa29ReWxjYmlBZ0lDQTZJRzVsZHlCSFpXNWxjbWxqVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvUXlrN1hHNTlPMXh1ZG1GeUlGQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlEMGdSMlZ1WlhKcFkxQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlEMGdablZ1WTNScGIyNG9ReWw3WEc0Z0lIWmhjaUJ5WlhOdmJIWmxMQ0J5WldwbFkzUTdYRzRnSUhSb2FYTXVjSEp2YldselpTQTlJRzVsZHlCREtHWjFibU4wYVc5dUtDUWtjbVZ6YjJ4MlpTd2dKQ1J5WldwbFkzUXBlMXh1SUNBZ0lHbG1LSEpsYzI5c2RtVWdJVDA5SUhWdVpHVm1hVzVsWkNCOGZDQnlaV3BsWTNRZ0lUMDlJSFZ1WkdWbWFXNWxaQ2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9KMEpoWkNCUWNtOXRhWE5sSUdOdmJuTjBjblZqZEc5eUp5azdYRzRnSUNBZ2NtVnpiMngyWlNBOUlDUWtjbVZ6YjJ4MlpUdGNiaUFnSUNCeVpXcGxZM1FnSUQwZ0pDUnlaV3BsWTNRN1hHNGdJSDBwTzF4dUlDQjBhR2x6TG5KbGMyOXNkbVVnUFNCaFJuVnVZM1JwYjI0b2NtVnpiMngyWlNrN1hHNGdJSFJvYVhNdWNtVnFaV04wSUNBOUlHRkdkVzVqZEdsdmJpaHlaV3BsWTNRcE8xeHVmVHRjYm5aaGNpQndaWEptYjNKdElEMGdablZ1WTNScGIyNG9aWGhsWXlsN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnWlhobFl5Z3BPMXh1SUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUhKbGRIVnliaUI3WlhKeWIzSTZJR1Y5TzF4dUlDQjlYRzU5TzF4dWRtRnlJRzV2ZEdsbWVTQTlJR1oxYm1OMGFXOXVLSEJ5YjIxcGMyVXNJR2x6VW1WcVpXTjBLWHRjYmlBZ2FXWW9jSEp2YldselpTNWZiaWx5WlhSMWNtNDdYRzRnSUhCeWIyMXBjMlV1WDI0Z1BTQjBjblZsTzF4dUlDQjJZWElnWTJoaGFXNGdQU0J3Y205dGFYTmxMbDlqTzF4dUlDQnRhV055YjNSaGMyc29ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQjJZWElnZG1Gc2RXVWdQU0J3Y205dGFYTmxMbDkyWEc0Z0lDQWdJQ0FzSUc5cklDQWdJRDBnY0hKdmJXbHpaUzVmY3lBOVBTQXhYRzRnSUNBZ0lDQXNJR2tnSUNBZ0lEMGdNRHRjYmlBZ0lDQjJZWElnY25WdUlEMGdablZ1WTNScGIyNG9jbVZoWTNScGIyNHBlMXh1SUNBZ0lDQWdkbUZ5SUdoaGJtUnNaWElnUFNCdmF5QS9JSEpsWVdOMGFXOXVMbTlySURvZ2NtVmhZM1JwYjI0dVptRnBiRnh1SUNBZ0lDQWdJQ0FzSUhKbGMyOXNkbVVnUFNCeVpXRmpkR2x2Ymk1eVpYTnZiSFpsWEc0Z0lDQWdJQ0FnSUN3Z2NtVnFaV04wSUNBOUlISmxZV04wYVc5dUxuSmxhbVZqZEZ4dUlDQWdJQ0FnSUNBc0lHUnZiV0ZwYmlBZ1BTQnlaV0ZqZEdsdmJpNWtiMjFoYVc1Y2JpQWdJQ0FnSUNBZ0xDQnlaWE4xYkhRc0lIUm9aVzQ3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBaaWhvWVc1a2JHVnlLWHRjYmlBZ0lDQWdJQ0FnSUNCcFppZ2hiMnNwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvY0hKdmJXbHpaUzVmYUNBOVBTQXlLVzl1U0dGdVpHeGxWVzVvWVc1a2JHVmtLSEJ5YjIxcGMyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZiV2x6WlM1ZmFDQTlJREU3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR2xtS0doaGJtUnNaWElnUFQwOUlIUnlkV1VwY21WemRXeDBJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppaGtiMjFoYVc0cFpHOXRZV2x1TG1WdWRHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQm9ZVzVrYkdWeUtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0dSdmJXRnBiaWxrYjIxaGFXNHVaWGhwZENncE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCcFppaHlaWE4xYkhRZ1BUMDlJSEpsWVdOMGFXOXVMbkJ5YjIxcGMyVXBlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0ZSNWNHVkZjbkp2Y2lnblVISnZiV2x6WlMxamFHRnBiaUJqZVdOc1pTY3BLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZb2RHaGxiaUE5SUdselZHaGxibUZpYkdVb2NtVnpkV3gwS1NsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdWdUxtTmhiR3dvY21WemRXeDBMQ0J5WlhOdmJIWmxMQ0J5WldwbFkzUXBPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WlhOdmJIWmxLSEpsYzNWc2RDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnlaV3BsWTNRb2RtRnNkV1VwTzF4dUlDQWdJQ0FnZlNCallYUmphQ2hsS1h0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0dVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNGdJQ0FnZDJocGJHVW9ZMmhoYVc0dWJHVnVaM1JvSUQ0Z2FTbHlkVzRvWTJoaGFXNWJhU3NyWFNrN0lDOHZJSFpoY21saFlteGxJR3hsYm1kMGFDQXRJR05oYmlkMElIVnpaU0JtYjNKRllXTm9YRzRnSUNBZ2NISnZiV2x6WlM1Zll5QTlJRnRkTzF4dUlDQWdJSEJ5YjIxcGMyVXVYMjRnUFNCbVlXeHpaVHRjYmlBZ0lDQnBaaWhwYzFKbGFtVmpkQ0FtSmlBaGNISnZiV2x6WlM1ZmFDbHZibFZ1YUdGdVpHeGxaQ2h3Y205dGFYTmxLVHRjYmlBZ2ZTazdYRzU5TzF4dWRtRnlJRzl1Vlc1b1lXNWtiR1ZrSUQwZ1puVnVZM1JwYjI0b2NISnZiV2x6WlNsN1hHNGdJSFJoYzJzdVkyRnNiQ2huYkc5aVlXd3NJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdkbUZ5SUhaaGJIVmxJRDBnY0hKdmJXbHpaUzVmZGx4dUlDQWdJQ0FnTENCaFluSjFjSFFzSUdoaGJtUnNaWElzSUdOdmJuTnZiR1U3WEc0Z0lDQWdhV1lvYVhOVmJtaGhibVJzWldRb2NISnZiV2x6WlNrcGUxeHVJQ0FnSUNBZ1lXSnlkWEIwSUQwZ2NHVnlabTl5YlNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQnBaaWhwYzA1dlpHVXBlMXh1SUNBZ0lDQWdJQ0FnSUhCeWIyTmxjM011WlcxcGRDZ25kVzVvWVc1a2JHVmtVbVZxWldOMGFXOXVKeXdnZG1Gc2RXVXNJSEJ5YjIxcGMyVXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lvYUdGdVpHeGxjaUE5SUdkc2IySmhiQzV2Ym5WdWFHRnVaR3hsWkhKbGFtVmpkR2x2YmlsN1hHNGdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bGNpaDdjSEp2YldselpUb2djSEp2YldselpTd2djbVZoYzI5dU9pQjJZV3gxWlgwcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWW9LR052Ym5OdmJHVWdQU0JuYkc5aVlXd3VZMjl1YzI5c1pTa2dKaVlnWTI5dWMyOXNaUzVsY25KdmNpbDdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25WVzVvWVc1a2JHVmtJSEJ5YjIxcGMyVWdjbVZxWldOMGFXOXVKeXdnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUM4dklFSnliM2R6WlhKeklITm9iM1ZzWkNCdWIzUWdkSEpwWjJkbGNpQmdjbVZxWldOMGFXOXVTR0Z1Wkd4bFpHQWdaWFpsYm5RZ2FXWWdhWFFnZDJGeklHaGhibVJzWldRZ2FHVnlaU3dnVG05a1pVcFRJQzBnYzJodmRXeGtYRzRnSUNBZ0lDQndjbTl0YVhObExsOW9JRDBnYVhOT2IyUmxJSHg4SUdselZXNW9ZVzVrYkdWa0tIQnliMjFwYzJVcElEOGdNaUE2SURFN1hHNGdJQ0FnZlNCd2NtOXRhWE5sTGw5aElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lHbG1LR0ZpY25Wd2RDbDBhSEp2ZHlCaFluSjFjSFF1WlhKeWIzSTdYRzRnSUgwcE8xeHVmVHRjYm5aaGNpQnBjMVZ1YUdGdVpHeGxaQ0E5SUdaMWJtTjBhVzl1S0hCeWIyMXBjMlVwZTF4dUlDQnBaaWh3Y205dGFYTmxMbDlvSUQwOUlERXBjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjJZWElnWTJoaGFXNGdQU0J3Y205dGFYTmxMbDloSUh4OElIQnliMjFwYzJVdVgyTmNiaUFnSUNBc0lHa2dJQ0FnSUQwZ01GeHVJQ0FnSUN3Z2NtVmhZM1JwYjI0N1hHNGdJSGRvYVd4bEtHTm9ZV2x1TG14bGJtZDBhQ0ErSUdrcGUxeHVJQ0FnSUhKbFlXTjBhVzl1SUQwZ1kyaGhhVzViYVNzclhUdGNiaUFnSUNCcFppaHlaV0ZqZEdsdmJpNW1ZV2xzSUh4OElDRnBjMVZ1YUdGdVpHeGxaQ2h5WldGamRHbHZiaTV3Y205dGFYTmxLU2x5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDBnY21WMGRYSnVJSFJ5ZFdVN1hHNTlPMXh1ZG1GeUlHOXVTR0Z1Wkd4bFZXNW9ZVzVrYkdWa0lEMGdablZ1WTNScGIyNG9jSEp2YldselpTbDdYRzRnSUhSaGMyc3VZMkZzYkNobmJHOWlZV3dzSUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnZG1GeUlHaGhibVJzWlhJN1hHNGdJQ0FnYVdZb2FYTk9iMlJsS1h0Y2JpQWdJQ0FnSUhCeWIyTmxjM011WlcxcGRDZ25jbVZxWldOMGFXOXVTR0Z1Wkd4bFpDY3NJSEJ5YjIxcGMyVXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppaG9ZVzVrYkdWeUlEMGdaMnh2WW1Gc0xtOXVjbVZxWldOMGFXOXVhR0Z1Wkd4bFpDbDdYRzRnSUNBZ0lDQm9ZVzVrYkdWeUtIdHdjbTl0YVhObE9pQndjbTl0YVhObExDQnlaV0Z6YjI0NklIQnliMjFwYzJVdVgzWjlLVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVmVHRjYm5aaGNpQWtjbVZxWldOMElEMGdablZ1WTNScGIyNG9kbUZzZFdVcGUxeHVJQ0IyWVhJZ2NISnZiV2x6WlNBOUlIUm9hWE03WEc0Z0lHbG1LSEJ5YjIxcGMyVXVYMlFwY21WMGRYSnVPMXh1SUNCd2NtOXRhWE5sTGw5a0lEMGdkSEoxWlR0Y2JpQWdjSEp2YldselpTQTlJSEJ5YjIxcGMyVXVYM2NnZkh3Z2NISnZiV2x6WlRzZ0x5OGdkVzUzY21Gd1hHNGdJSEJ5YjIxcGMyVXVYM1lnUFNCMllXeDFaVHRjYmlBZ2NISnZiV2x6WlM1ZmN5QTlJREk3WEc0Z0lHbG1LQ0Z3Y205dGFYTmxMbDloS1hCeWIyMXBjMlV1WDJFZ1BTQndjbTl0YVhObExsOWpMbk5zYVdObEtDazdYRzRnSUc1dmRHbG1lU2h3Y205dGFYTmxMQ0IwY25WbEtUdGNibjA3WEc1MllYSWdKSEpsYzI5c2RtVWdQU0JtZFc1amRHbHZiaWgyWVd4MVpTbDdYRzRnSUhaaGNpQndjbTl0YVhObElEMGdkR2hwYzF4dUlDQWdJQ3dnZEdobGJqdGNiaUFnYVdZb2NISnZiV2x6WlM1ZlpDbHlaWFIxY200N1hHNGdJSEJ5YjIxcGMyVXVYMlFnUFNCMGNuVmxPMXh1SUNCd2NtOXRhWE5sSUQwZ2NISnZiV2x6WlM1ZmR5QjhmQ0J3Y205dGFYTmxPeUF2THlCMWJuZHlZWEJjYmlBZ2RISjVJSHRjYmlBZ0lDQnBaaWh3Y205dGFYTmxJRDA5UFNCMllXeDFaU2wwYUhKdmR5QlVlWEJsUlhKeWIzSW9YQ0pRY205dGFYTmxJR05oYmlkMElHSmxJSEpsYzI5c2RtVmtJR2wwYzJWc1psd2lLVHRjYmlBZ0lDQnBaaWgwYUdWdUlEMGdhWE5VYUdWdVlXSnNaU2gyWVd4MVpTa3BlMXh1SUNBZ0lDQWdiV2xqY205MFlYTnJLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUhaaGNpQjNjbUZ3Y0dWeUlEMGdlMTkzT2lCd2NtOXRhWE5sTENCZlpEb2dabUZzYzJWOU95QXZMeUIzY21Gd1hHNGdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaGxiaTVqWVd4c0tIWmhiSFZsTENCamRIZ29KSEpsYzI5c2RtVXNJSGR5WVhCd1pYSXNJREVwTENCamRIZ29KSEpsYW1WamRDd2dkM0poY0hCbGNpd2dNU2twTzF4dUlDQWdJQ0FnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQWdJQ1J5WldwbFkzUXVZMkZzYkNoM2NtRndjR1Z5TENCbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIQnliMjFwYzJVdVgzWWdQU0IyWVd4MVpUdGNiaUFnSUNBZ0lIQnliMjFwYzJVdVgzTWdQU0F4TzF4dUlDQWdJQ0FnYm05MGFXWjVLSEJ5YjIxcGMyVXNJR1poYkhObEtUdGNiaUFnSUNCOVhHNGdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdKSEpsYW1WamRDNWpZV3hzS0h0ZmR6b2djSEp2YldselpTd2dYMlE2SUdaaGJITmxmU3dnWlNrN0lDOHZJSGR5WVhCY2JpQWdmVnh1ZlR0Y2JseHVMeThnWTI5dWMzUnlkV04wYjNJZ2NHOXNlV1pwYkd4Y2JtbG1LQ0ZWVTBWZlRrRlVTVlpGS1h0Y2JpQWdMeThnTWpVdU5DNHpMakVnVUhKdmJXbHpaU2hsZUdWamRYUnZjaWxjYmlBZ0pGQnliMjFwYzJVZ1BTQm1kVzVqZEdsdmJpQlFjbTl0YVhObEtHVjRaV04xZEc5eUtYdGNiaUFnSUNCaGJrbHVjM1JoYm1ObEtIUm9hWE1zSUNSUWNtOXRhWE5sTENCUVVrOU5TVk5GTENBblgyZ25LVHRjYmlBZ0lDQmhSblZ1WTNScGIyNG9aWGhsWTNWMGIzSXBPMXh1SUNBZ0lFbHVkR1Z5Ym1Gc0xtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR1Y0WldOMWRHOXlLR04wZUNna2NtVnpiMngyWlN3Z2RHaHBjeXdnTVNrc0lHTjBlQ2drY21WcVpXTjBMQ0IwYUdsekxDQXhLU2s3WEc0Z0lDQWdmU0JqWVhSamFDaGxjbklwZTF4dUlDQWdJQ0FnSkhKbGFtVmpkQzVqWVd4c0tIUm9hWE1zSUdWeWNpazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dUlDQkpiblJsY201aGJDQTlJR1oxYm1OMGFXOXVJRkJ5YjIxcGMyVW9aWGhsWTNWMGIzSXBlMXh1SUNBZ0lIUm9hWE11WDJNZ1BTQmJYVHNnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnWVhkaGFYUnBibWNnY21WaFkzUnBiMjV6WEc0Z0lDQWdkR2hwY3k1ZllTQTlJSFZ1WkdWbWFXNWxaRHNnSUNBZ0lDQXZMeUE4TFNCamFHVmphMlZrSUdsdUlHbHpWVzVvWVc1a2JHVmtJSEpsWVdOMGFXOXVjMXh1SUNBZ0lIUm9hWE11WDNNZ1BTQXdPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnYzNSaGRHVmNiaUFnSUNCMGFHbHpMbDlrSUQwZ1ptRnNjMlU3SUNBZ0lDQWdJQ0FnSUM4dklEd3RJR1J2Ym1WY2JpQWdJQ0IwYUdsekxsOTJJRDBnZFc1a1pXWnBibVZrT3lBZ0lDQWdJQzh2SUR3dElIWmhiSFZsWEc0Z0lDQWdkR2hwY3k1ZmFDQTlJREE3SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCeVpXcGxZM1JwYjI0Z2MzUmhkR1VzSURBZ0xTQmtaV1poZFd4MExDQXhJQzBnYUdGdVpHeGxaQ3dnTWlBdElIVnVhR0Z1Wkd4bFpGeHVJQ0FnSUhSb2FYTXVYMjRnUFNCbVlXeHpaVHNnSUNBZ0lDQWdJQ0FnTHk4Z1BDMGdibTkwYVdaNVhHNGdJSDA3WEc0Z0lFbHVkR1Z5Ym1Gc0xuQnliM1J2ZEhsd1pTQTlJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsTFdGc2JDY3BLQ1JRY205dGFYTmxMbkJ5YjNSdmRIbHdaU3dnZTF4dUlDQWdJQzh2SURJMUxqUXVOUzR6SUZCeWIyMXBjMlV1Y0hKdmRHOTBlWEJsTG5Sb1pXNG9iMjVHZFd4bWFXeHNaV1FzSUc5dVVtVnFaV04wWldRcFhHNGdJQ0FnZEdobGJqb2dablZ1WTNScGIyNGdkR2hsYmlodmJrWjFiR1pwYkd4bFpDd2diMjVTWldwbFkzUmxaQ2w3WEc0Z0lDQWdJQ0IyWVhJZ2NtVmhZM1JwYjI0Z0lDQWdQU0J1WlhkUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNoemNHVmphV1Z6UTI5dWMzUnlkV04wYjNJb2RHaHBjeXdnSkZCeWIyMXBjMlVwS1R0Y2JpQWdJQ0FnSUhKbFlXTjBhVzl1TG05cklDQWdJQ0E5SUhSNWNHVnZaaUJ2YmtaMWJHWnBiR3hsWkNBOVBTQW5ablZ1WTNScGIyNG5JRDhnYjI1R2RXeG1hV3hzWldRZ09pQjBjblZsTzF4dUlDQWdJQ0FnY21WaFkzUnBiMjR1Wm1GcGJDQWdJRDBnZEhsd1pXOW1JRzl1VW1WcVpXTjBaV1FnUFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJ2YmxKbGFtVmpkR1ZrTzF4dUlDQWdJQ0FnY21WaFkzUnBiMjR1Wkc5dFlXbHVJRDBnYVhOT2IyUmxJRDhnY0hKdlkyVnpjeTVrYjIxaGFXNGdPaUIxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0IwYUdsekxsOWpMbkIxYzJnb2NtVmhZM1JwYjI0cE8xeHVJQ0FnSUNBZ2FXWW9kR2hwY3k1ZllTbDBhR2x6TGw5aExuQjFjMmdvY21WaFkzUnBiMjRwTzF4dUlDQWdJQ0FnYVdZb2RHaHBjeTVmY3lsdWIzUnBabmtvZEdocGN5d2dabUZzYzJVcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhKbFlXTjBhVzl1TG5CeWIyMXBjMlU3WEc0Z0lDQWdmU3hjYmlBZ0lDQXZMeUF5TlM0MExqVXVNU0JRY205dGFYTmxMbkJ5YjNSdmRIbHdaUzVqWVhSamFDaHZibEpsYW1WamRHVmtLVnh1SUNBZ0lDZGpZWFJqYUNjNklHWjFibU4wYVc5dUtHOXVVbVZxWldOMFpXUXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZEdobGJpaDFibVJsWm1sdVpXUXNJRzl1VW1WcVpXTjBaV1FwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzRnSUZCeWIyMXBjMlZEWVhCaFltbHNhWFI1SUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnSUNCMllYSWdjSEp2YldselpTQWdQU0J1WlhjZ1NXNTBaWEp1WVd3N1hHNGdJQ0FnZEdocGN5NXdjbTl0YVhObElEMGdjSEp2YldselpUdGNiaUFnSUNCMGFHbHpMbkpsYzI5c2RtVWdQU0JqZEhnb0pISmxjMjlzZG1Vc0lIQnliMjFwYzJVc0lERXBPMXh1SUNBZ0lIUm9hWE11Y21WcVpXTjBJQ0E5SUdOMGVDZ2tjbVZxWldOMExDQndjbTl0YVhObExDQXhLVHRjYmlBZ2ZUdGNibjFjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGtjZ0t5QWtaWGh3YjNKMExsY2dLeUFrWlhod2IzSjBMa1lnS2lBaFZWTkZYMDVCVkVsV1JTd2dlMUJ5YjIxcGMyVTZJQ1JRY205dGFYTmxmU2s3WEc1eVpYRjFhWEpsS0NjdUwxOXpaWFF0ZEc4dGMzUnlhVzVuTFhSaFp5Y3BLQ1JRY205dGFYTmxMQ0JRVWs5TlNWTkZLVHRjYm5KbGNYVnBjbVVvSnk0dlgzTmxkQzF6Y0dWamFXVnpKeWtvVUZKUFRVbFRSU2s3WEc1WGNtRndjR1Z5SUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjl5WlNjcFcxQlNUMDFKVTBWZE8xeHVYRzR2THlCemRHRjBhV056WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ0ZWVTBWZlRrRlVTVlpGTENCUVVrOU5TVk5GTENCN1hHNGdJQzh2SURJMUxqUXVOQzQxSUZCeWIyMXBjMlV1Y21WcVpXTjBLSElwWEc0Z0lISmxhbVZqZERvZ1puVnVZM1JwYjI0Z2NtVnFaV04wS0hJcGUxeHVJQ0FnSUhaaGNpQmpZWEJoWW1sc2FYUjVJRDBnYm1WM1VISnZiV2x6WlVOaGNHRmlhV3hwZEhrb2RHaHBjeWxjYmlBZ0lDQWdJQ3dnSkNSeVpXcGxZM1FnSUNBOUlHTmhjR0ZpYVd4cGRIa3VjbVZxWldOME8xeHVJQ0FnSUNRa2NtVnFaV04wS0hJcE8xeHVJQ0FnSUhKbGRIVnliaUJqWVhCaFltbHNhWFI1TG5CeWIyMXBjMlU3WEc0Z0lIMWNibjBwTzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFvVEVsQ1VrRlNXU0I4ZkNBaFZWTkZYMDVCVkVsV1JTa3NJRkJTVDAxSlUwVXNJSHRjYmlBZ0x5OGdNalV1TkM0MExqWWdVSEp2YldselpTNXlaWE52YkhabEtIZ3BYRzRnSUhKbGMyOXNkbVU2SUdaMWJtTjBhVzl1SUhKbGMyOXNkbVVvZUNsN1hHNGdJQ0FnTHk4Z2FXNXpkR0Z1WTJWdlppQnBibk4wWldGa0lHOW1JR2x1ZEdWeWJtRnNJSE5zYjNRZ1kyaGxZMnNnWW1WallYVnpaU0IzWlNCemFHOTFiR1FnWm1sNElHbDBJSGRwZEdodmRYUWdjbVZ3YkdGalpXMWxiblFnYm1GMGFYWmxJRkJ5YjIxcGMyVWdZMjl5WlZ4dUlDQWdJR2xtS0hnZ2FXNXpkR0Z1WTJWdlppQWtVSEp2YldselpTQW1KaUJ6WVcxbFEyOXVjM1J5ZFdOMGIzSW9lQzVqYjI1emRISjFZM1J2Y2l3Z2RHaHBjeWtwY21WMGRYSnVJSGc3WEc0Z0lDQWdkbUZ5SUdOaGNHRmlhV3hwZEhrZ1BTQnVaWGRRY205dGFYTmxRMkZ3WVdKcGJHbDBlU2gwYUdsektWeHVJQ0FnSUNBZ0xDQWtKSEpsYzI5c2RtVWdJRDBnWTJGd1lXSnBiR2wwZVM1eVpYTnZiSFpsTzF4dUlDQWdJQ1FrY21WemIyeDJaU2g0S1R0Y2JpQWdJQ0J5WlhSMWNtNGdZMkZ3WVdKcGJHbDBlUzV3Y205dGFYTmxPMXh1SUNCOVhHNTlLVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJU2hWVTBWZlRrRlVTVlpGSUNZbUlISmxjWFZwY21Vb0p5NHZYMmwwWlhJdFpHVjBaV04wSnlrb1puVnVZM1JwYjI0b2FYUmxjaWw3WEc0Z0lDUlFjbTl0YVhObExtRnNiQ2hwZEdWeUtWc25ZMkYwWTJnblhTaGxiWEIwZVNrN1hHNTlLU2tzSUZCU1QwMUpVMFVzSUh0Y2JpQWdMeThnTWpVdU5DNDBMakVnVUhKdmJXbHpaUzVoYkd3b2FYUmxjbUZpYkdVcFhHNGdJR0ZzYkRvZ1puVnVZM1JwYjI0Z1lXeHNLR2wwWlhKaFlteGxLWHRjYmlBZ0lDQjJZWElnUXlBZ0lDQWdJQ0FnSUNBOUlIUm9hWE5jYmlBZ0lDQWdJQ3dnWTJGd1lXSnBiR2wwZVNBOUlHNWxkMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVLRU1wWEc0Z0lDQWdJQ0FzSUhKbGMyOXNkbVVnSUNBZ1BTQmpZWEJoWW1sc2FYUjVMbkpsYzI5c2RtVmNiaUFnSUNBZ0lDd2djbVZxWldOMElDQWdJQ0E5SUdOaGNHRmlhV3hwZEhrdWNtVnFaV04wTzF4dUlDQWdJSFpoY2lCaFluSjFjSFFnUFNCd1pYSm1iM0p0S0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCMllYSWdkbUZzZFdWeklDQWdJRDBnVzExY2JpQWdJQ0FnSUNBZ0xDQnBibVJsZUNBZ0lDQWdQU0F3WEc0Z0lDQWdJQ0FnSUN3Z2NtVnRZV2x1YVc1bklEMGdNVHRjYmlBZ0lDQWdJR1p2Y2s5bUtHbDBaWEpoWW14bExDQm1ZV3h6WlN3Z1puVnVZM1JwYjI0b2NISnZiV2x6WlNsN1hHNGdJQ0FnSUNBZ0lIWmhjaUFrYVc1a1pYZ2dJQ0FnSUNBZ0lEMGdhVzVrWlhncksxeHVJQ0FnSUNBZ0lDQWdJQ3dnWVd4eVpXRmtlVU5oYkd4bFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjJZV3gxWlhNdWNIVnphQ2gxYm1SbFptbHVaV1FwTzF4dUlDQWdJQ0FnSUNCeVpXMWhhVzVwYm1jckt6dGNiaUFnSUNBZ0lDQWdReTV5WlhOdmJIWmxLSEJ5YjIxcGMyVXBMblJvWlc0b1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQ0FnSUNBZ0lHbG1LR0ZzY21WaFpIbERZV3hzWldRcGNtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lHRnNjbVZoWkhsRFlXeHNaV1FnSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaWE5iSkdsdVpHVjRYU0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUMwdGNtVnRZV2x1YVc1bklIeDhJSEpsYzI5c2RtVW9kbUZzZFdWektUdGNiaUFnSUNBZ0lDQWdmU3dnY21WcVpXTjBLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnTFMxeVpXMWhhVzVwYm1jZ2ZId2djbVZ6YjJ4MlpTaDJZV3gxWlhNcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUdsbUtHRmljblZ3ZENseVpXcGxZM1FvWVdKeWRYQjBMbVZ5Y205eUtUdGNiaUFnSUNCeVpYUjFjbTRnWTJGd1lXSnBiR2wwZVM1d2NtOXRhWE5sTzF4dUlDQjlMRnh1SUNBdkx5QXlOUzQwTGpRdU5DQlFjbTl0YVhObExuSmhZMlVvYVhSbGNtRmliR1VwWEc0Z0lISmhZMlU2SUdaMWJtTjBhVzl1SUhKaFkyVW9hWFJsY21GaWJHVXBlMXh1SUNBZ0lIWmhjaUJESUNBZ0lDQWdJQ0FnSUQwZ2RHaHBjMXh1SUNBZ0lDQWdMQ0JqWVhCaFltbHNhWFI1SUQwZ2JtVjNVSEp2YldselpVTmhjR0ZpYVd4cGRIa29ReWxjYmlBZ0lDQWdJQ3dnY21WcVpXTjBJQ0FnSUNBOUlHTmhjR0ZpYVd4cGRIa3VjbVZxWldOME8xeHVJQ0FnSUhaaGNpQmhZbkoxY0hRZ1BTQndaWEptYjNKdEtHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQm1iM0pQWmlocGRHVnlZV0pzWlN3Z1ptRnNjMlVzSUdaMWJtTjBhVzl1S0hCeWIyMXBjMlVwZTF4dUlDQWdJQ0FnSUNCRExuSmxjMjlzZG1Vb2NISnZiV2x6WlNrdWRHaGxiaWhqWVhCaFltbHNhWFI1TG5KbGMyOXNkbVVzSUhKbGFtVmpkQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdJQ0JwWmloaFluSjFjSFFwY21WcVpXTjBLR0ZpY25Wd2RDNWxjbkp2Y2lrN1hHNGdJQ0FnY21WMGRYSnVJR05oY0dGaWFXeHBkSGt1Y0hKdmJXbHpaVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmhkQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdFlYUW5LU2gwY25WbEtUdGNibHh1THk4Z01qRXVNUzR6TGpJM0lGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dWYlFFQnBkR1Z5WVhSdmNsMG9LVnh1Y21WeGRXbHlaU2duTGk5ZmFYUmxjaTFrWldacGJtVW5LU2hUZEhKcGJtY3NJQ2RUZEhKcGJtY25MQ0JtZFc1amRHbHZiaWhwZEdWeVlYUmxaQ2w3WEc0Z0lIUm9hWE11WDNRZ1BTQlRkSEpwYm1jb2FYUmxjbUYwWldRcE95QXZMeUIwWVhKblpYUmNiaUFnZEdocGN5NWZhU0E5SURBN0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHNWxlSFFnYVc1a1pYaGNiaTh2SURJeExqRXVOUzR5TGpFZ0pWTjBjbWx1WjBsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSlM1dVpYaDBLQ2xjYm4wc0lHWjFibU4wYVc5dUtDbDdYRzRnSUhaaGNpQlBJQ0FnSUNBOUlIUm9hWE11WDNSY2JpQWdJQ0FzSUdsdVpHVjRJRDBnZEdocGN5NWZhVnh1SUNBZ0lDd2djRzlwYm5RN1hHNGdJR2xtS0dsdVpHVjRJRDQ5SUU4dWJHVnVaM1JvS1hKbGRIVnliaUI3ZG1Gc2RXVTZJSFZ1WkdWbWFXNWxaQ3dnWkc5dVpUb2dkSEoxWlgwN1hHNGdJSEJ2YVc1MElEMGdKR0YwS0U4c0lHbHVaR1Y0S1R0Y2JpQWdkR2hwY3k1ZmFTQXJQU0J3YjJsdWRDNXNaVzVuZEdnN1hHNGdJSEpsZEhWeWJpQjdkbUZzZFdVNklIQnZhVzUwTENCa2IyNWxPaUJtWVd4elpYMDdYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QkZRMDFCVTJOeWFYQjBJRFlnYzNsdFltOXNjeUJ6YUdsdFhHNTJZWElnWjJ4dlltRnNJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJR2hoY3lBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYUdGekp5bGNiaUFnTENCRVJWTkRVa2xRVkU5U1V5QWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWxjYmlBZ0xDQWtaWGh3YjNKMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2NtVmtaV1pwYm1VZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXlaV1JsWm1sdVpTY3BYRzRnSUN3Z1RVVlVRU0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRaWFJoSnlrdVMwVlpYRzRnSUN3Z0pHWmhhV3h6SUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcFhHNGdJQ3dnYzJoaGNtVmtJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emFHRnlaV1FuS1Z4dUlDQXNJSE5sZEZSdlUzUnlhVzVuVkdGbklEMGdjbVZ4ZFdseVpTZ25MaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2NuS1Z4dUlDQXNJSFZwWkNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZFdsa0p5bGNiaUFnTENCM2EzTWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwWEc0Z0lDd2dkMnR6UlhoMElDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNdFpYaDBKeWxjYmlBZ0xDQjNhM05FWldacGJtVWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3kxa1pXWnBibVVuS1Z4dUlDQXNJR3RsZVU5bUlDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYTJWNWIyWW5LVnh1SUNBc0lHVnVkVzFMWlhseklDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaVzUxYlMxclpYbHpKeWxjYmlBZ0xDQnBjMEZ5Y21GNUlDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFdGeWNtRjVKeWxjYmlBZ0xDQmhiazlpYW1WamRDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlKVDJKcVpXTjBJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGIySnFaV04wSnlsY2JpQWdMQ0IwYjFCeWFXMXBkR2wyWlNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxYQnlhVzFwZEdsMlpTY3BYRzRnSUN3Z1kzSmxZWFJsUkdWell5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlsY2JpQWdMQ0JmWTNKbFlYUmxJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFqY21WaGRHVW5LVnh1SUNBc0lHZFBVRTVGZUhRZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjRzR0WlhoMEp5bGNiaUFnTENBa1IwOVFSQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQmtKeWxjYmlBZ0xDQWtSRkFnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwWEc0Z0lDd2dKR3RsZVhNZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRhMlY1Y3ljcFhHNGdJQ3dnWjA5UVJDQWdJQ0FnSUNBZ0lDQWdQU0FrUjA5UVJDNW1YRzRnSUN3Z1pGQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBa1JGQXVabHh1SUNBc0lHZFBVRTRnSUNBZ0lDQWdJQ0FnSUQwZ1owOVFUa1Y0ZEM1bVhHNGdJQ3dnSkZONWJXSnZiQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VVM2x0WW05c1hHNGdJQ3dnSkVwVFQwNGdJQ0FnSUNBZ0lDQWdQU0JuYkc5aVlXd3VTbE5QVGx4dUlDQXNJRjl6ZEhKcGJtZHBabmtnSUNBZ0lEMGdKRXBUVDA0Z0ppWWdKRXBUVDA0dWMzUnlhVzVuYVdaNVhHNGdJQ3dnVUZKUFZFOVVXVkJGSUNBZ0lDQWdQU0FuY0hKdmRHOTBlWEJsSjF4dUlDQXNJRWhKUkVSRlRpQWdJQ0FnSUNBZ0lEMGdkMnR6S0NkZmFHbGtaR1Z1SnlsY2JpQWdMQ0JVVDE5UVVrbE5TVlJKVmtVZ0lDQTlJSGRyY3lnbmRHOVFjbWx0YVhScGRtVW5LVnh1SUNBc0lHbHpSVzUxYlNBZ0lDQWdJQ0FnSUQwZ2UzMHVjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1ZjYmlBZ0xDQlRlVzFpYjJ4U1pXZHBjM1J5ZVNBOUlITm9ZWEpsWkNnbmMzbHRZbTlzTFhKbFoybHpkSEo1SnlsY2JpQWdMQ0JCYkd4VGVXMWliMnh6SUNBZ0lDQTlJSE5vWVhKbFpDZ25jM2x0WW05c2N5Y3BYRzRnSUN3Z1QxQlRlVzFpYjJ4eklDQWdJQ0FnUFNCemFHRnlaV1FvSjI5d0xYTjViV0p2YkhNbktWeHVJQ0FzSUU5aWFtVmpkRkJ5YjNSdklDQWdJRDBnVDJKcVpXTjBXMUJTVDFSUFZGbFFSVjFjYmlBZ0xDQlZVMFZmVGtGVVNWWkZJQ0FnSUNBOUlIUjVjR1Z2WmlBa1UzbHRZbTlzSUQwOUlDZG1kVzVqZEdsdmJpZGNiaUFnTENCUlQySnFaV04wSUNBZ0lDQWdJQ0E5SUdkc2IySmhiQzVSVDJKcVpXTjBPMXh1THk4Z1JHOXVKM1FnZFhObElITmxkSFJsY25NZ2FXNGdVWFFnVTJOeWFYQjBMQ0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZW14dmFYSnZZMnN2WTI5eVpTMXFjeTlwYzNOMVpYTXZNVGN6WEc1MllYSWdjMlYwZEdWeUlEMGdJVkZQWW1wbFkzUWdmSHdnSVZGUFltcGxZM1JiVUZKUFZFOVVXVkJGWFNCOGZDQWhVVTlpYW1WamRGdFFVazlVVDFSWlVFVmRMbVpwYm1SRGFHbHNaRHRjYmx4dUx5OGdabUZzYkdKaFkyc2dabTl5SUc5c1pDQkJibVJ5YjJsa0xDQm9kSFJ3Y3pvdkwyTnZaR1V1WjI5dloyeGxMbU52YlM5d0wzWTRMMmx6YzNWbGN5OWtaWFJoYVd3L2FXUTlOamczWEc1MllYSWdjMlYwVTNsdFltOXNSR1Z6WXlBOUlFUkZVME5TU1ZCVVQxSlRJQ1ltSUNSbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQnlaWFIxY200Z1gyTnlaV0YwWlNoa1VDaDdmU3dnSjJFbkxDQjdYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnWkZBb2RHaHBjeXdnSjJFbkxDQjdkbUZzZFdVNklEZDlLUzVoT3lCOVhHNGdJSDBwS1M1aElDRTlJRGM3WEc1OUtTQS9JR1oxYm1OMGFXOXVLR2wwTENCclpYa3NJRVFwZTF4dUlDQjJZWElnY0hKdmRHOUVaWE5qSUQwZ1owOVFSQ2hQWW1wbFkzUlFjbTkwYnl3Z2EyVjVLVHRjYmlBZ2FXWW9jSEp2ZEc5RVpYTmpLV1JsYkdWMFpTQlBZbXBsWTNSUWNtOTBiMXRyWlhsZE8xeHVJQ0JrVUNocGRDd2dhMlY1TENCRUtUdGNiaUFnYVdZb2NISnZkRzlFWlhOaklDWW1JR2wwSUNFOVBTQlBZbXBsWTNSUWNtOTBieWxrVUNoUFltcGxZM1JRY205MGJ5d2dhMlY1TENCd2NtOTBiMFJsYzJNcE8xeHVmU0E2SUdSUU8xeHVYRzUyWVhJZ2QzSmhjQ0E5SUdaMWJtTjBhVzl1S0hSaFp5bDdYRzRnSUhaaGNpQnplVzBnUFNCQmJHeFRlVzFpYjJ4elczUmhaMTBnUFNCZlkzSmxZWFJsS0NSVGVXMWliMnhiVUZKUFZFOVVXVkJGWFNrN1hHNGdJSE41YlM1ZmF5QTlJSFJoWnp0Y2JpQWdjbVYwZFhKdUlITjViVHRjYm4wN1hHNWNiblpoY2lCcGMxTjViV0p2YkNBOUlGVlRSVjlPUVZSSlZrVWdKaVlnZEhsd1pXOW1JQ1JUZVcxaWIyd3VhWFJsY21GMGIzSWdQVDBnSjNONWJXSnZiQ2NnUHlCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdhWFFnUFQwZ0ozTjViV0p2YkNjN1hHNTlJRG9nWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdhWFFnYVc1emRHRnVZMlZ2WmlBa1UzbHRZbTlzTzF4dWZUdGNibHh1ZG1GeUlDUmtaV1pwYm1WUWNtOXdaWEowZVNBOUlHWjFibU4wYVc5dUlHUmxabWx1WlZCeWIzQmxjblI1S0dsMExDQnJaWGtzSUVRcGUxeHVJQ0JwWmlocGRDQTlQVDBnVDJKcVpXTjBVSEp2ZEc4cEpHUmxabWx1WlZCeWIzQmxjblI1S0U5UVUzbHRZbTlzY3l3Z2EyVjVMQ0JFS1R0Y2JpQWdZVzVQWW1wbFkzUW9hWFFwTzF4dUlDQnJaWGtnUFNCMGIxQnlhVzFwZEdsMlpTaHJaWGtzSUhSeWRXVXBPMXh1SUNCaGJrOWlhbVZqZENoRUtUdGNiaUFnYVdZb2FHRnpLRUZzYkZONWJXSnZiSE1zSUd0bGVTa3BlMXh1SUNBZ0lHbG1LQ0ZFTG1WdWRXMWxjbUZpYkdVcGUxeHVJQ0FnSUNBZ2FXWW9JV2hoY3locGRDd2dTRWxFUkVWT0tTbGtVQ2hwZEN3Z1NFbEVSRVZPTENCamNtVmhkR1ZFWlhOaktERXNJSHQ5S1NrN1hHNGdJQ0FnSUNCcGRGdElTVVJFUlU1ZFcydGxlVjBnUFNCMGNuVmxPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCcFppaG9ZWE1vYVhRc0lFaEpSRVJGVGlrZ0ppWWdhWFJiU0VsRVJFVk9YVnRyWlhsZEtXbDBXMGhKUkVSRlRsMWJhMlY1WFNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnUkNBOUlGOWpjbVZoZEdVb1JDd2dlMlZ1ZFcxbGNtRmliR1U2SUdOeVpXRjBaVVJsYzJNb01Dd2dabUZzYzJVcGZTazdYRzRnSUNBZ2ZTQnlaWFIxY200Z2MyVjBVM2x0WW05c1JHVnpZeWhwZEN3Z2EyVjVMQ0JFS1R0Y2JpQWdmU0J5WlhSMWNtNGdaRkFvYVhRc0lHdGxlU3dnUkNrN1hHNTlPMXh1ZG1GeUlDUmtaV1pwYm1WUWNtOXdaWEowYVdWeklEMGdablZ1WTNScGIyNGdaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aHBkQ3dnVUNsN1hHNGdJR0Z1VDJKcVpXTjBLR2wwS1R0Y2JpQWdkbUZ5SUd0bGVYTWdQU0JsYm5WdFMyVjVjeWhRSUQwZ2RHOUpUMkpxWldOMEtGQXBLVnh1SUNBZ0lDd2dhU0FnSUNBOUlEQmNiaUFnSUNBc0lHd2dQU0JyWlhsekxteGxibWQwYUZ4dUlDQWdJQ3dnYTJWNU8xeHVJQ0IzYUdsc1pTaHNJRDRnYVNra1pHVm1hVzVsVUhKdmNHVnlkSGtvYVhRc0lHdGxlU0E5SUd0bGVYTmJhU3NyWFN3Z1VGdHJaWGxkS1R0Y2JpQWdjbVYwZFhKdUlHbDBPMXh1ZlR0Y2JuWmhjaUFrWTNKbFlYUmxJRDBnWm5WdVkzUnBiMjRnWTNKbFlYUmxLR2wwTENCUUtYdGNiaUFnY21WMGRYSnVJRkFnUFQwOUlIVnVaR1ZtYVc1bFpDQS9JRjlqY21WaGRHVW9hWFFwSURvZ0pHUmxabWx1WlZCeWIzQmxjblJwWlhNb1gyTnlaV0YwWlNocGRDa3NJRkFwTzF4dWZUdGNiblpoY2lBa2NISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVWdQU0JtZFc1amRHbHZiaUJ3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlNoclpYa3BlMXh1SUNCMllYSWdSU0E5SUdselJXNTFiUzVqWVd4c0tIUm9hWE1zSUd0bGVTQTlJSFJ2VUhKcGJXbDBhWFpsS0d0bGVTd2dkSEoxWlNrcE8xeHVJQ0JwWmloMGFHbHpJRDA5UFNCUFltcGxZM1JRY205MGJ5QW1KaUJvWVhNb1FXeHNVM2x0WW05c2N5d2dhMlY1S1NBbUppQWhhR0Z6S0U5UVUzbHRZbTlzY3l3Z2EyVjVLU2x5WlhSMWNtNGdabUZzYzJVN1hHNGdJSEpsZEhWeWJpQkZJSHg4SUNGb1lYTW9kR2hwY3l3Z2EyVjVLU0I4ZkNBaGFHRnpLRUZzYkZONWJXSnZiSE1zSUd0bGVTa2dmSHdnYUdGektIUm9hWE1zSUVoSlJFUkZUaWtnSmlZZ2RHaHBjMXRJU1VSRVJVNWRXMnRsZVYwZ1B5QkZJRG9nZEhKMVpUdGNibjA3WEc1MllYSWdKR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpQTlJR1oxYm1OMGFXOXVJR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaHBkQ3dnYTJWNUtYdGNiaUFnYVhRZ0lEMGdkRzlKVDJKcVpXTjBLR2wwS1R0Y2JpQWdhMlY1SUQwZ2RHOVFjbWx0YVhScGRtVW9hMlY1TENCMGNuVmxLVHRjYmlBZ2FXWW9hWFFnUFQwOUlFOWlhbVZqZEZCeWIzUnZJQ1ltSUdoaGN5aEJiR3hUZVcxaWIyeHpMQ0JyWlhrcElDWW1JQ0ZvWVhNb1QxQlRlVzFpYjJ4ekxDQnJaWGtwS1hKbGRIVnlianRjYmlBZ2RtRnlJRVFnUFNCblQxQkVLR2wwTENCclpYa3BPMXh1SUNCcFppaEVJQ1ltSUdoaGN5aEJiR3hUZVcxaWIyeHpMQ0JyWlhrcElDWW1JQ0VvYUdGektHbDBMQ0JJU1VSRVJVNHBJQ1ltSUdsMFcwaEpSRVJGVGwxYmEyVjVYU2twUkM1bGJuVnRaWEpoWW14bElEMGdkSEoxWlR0Y2JpQWdjbVYwZFhKdUlFUTdYRzU5TzF4dWRtRnlJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6SUQwZ1puVnVZM1JwYjI0Z1oyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aHBkQ2w3WEc0Z0lIWmhjaUJ1WVcxbGN5QWdQU0JuVDFCT0tIUnZTVTlpYW1WamRDaHBkQ2twWEc0Z0lDQWdMQ0J5WlhOMWJIUWdQU0JiWFZ4dUlDQWdJQ3dnYVNBZ0lDQWdJRDBnTUZ4dUlDQWdJQ3dnYTJWNU8xeHVJQ0IzYUdsc1pTaHVZVzFsY3k1c1pXNW5kR2dnUGlCcEtYdGNiaUFnSUNCcFppZ2hhR0Z6S0VGc2JGTjViV0p2YkhNc0lHdGxlU0E5SUc1aGJXVnpXMmtySzEwcElDWW1JR3RsZVNBaFBTQklTVVJFUlU0Z0ppWWdhMlY1SUNFOUlFMUZWRUVwY21WemRXeDBMbkIxYzJnb2EyVjVLVHRjYmlBZ2ZTQnlaWFIxY200Z2NtVnpkV3gwTzF4dWZUdGNiblpoY2lBa1oyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpJRDBnWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4ektHbDBLWHRjYmlBZ2RtRnlJRWxUWDA5UUlDQTlJR2wwSUQwOVBTQlBZbXBsWTNSUWNtOTBiMXh1SUNBZ0lDd2dibUZ0WlhNZ0lEMGdaMDlRVGloSlUxOVBVQ0EvSUU5UVUzbHRZbTlzY3lBNklIUnZTVTlpYW1WamRDaHBkQ2twWEc0Z0lDQWdMQ0J5WlhOMWJIUWdQU0JiWFZ4dUlDQWdJQ3dnYVNBZ0lDQWdJRDBnTUZ4dUlDQWdJQ3dnYTJWNU8xeHVJQ0IzYUdsc1pTaHVZVzFsY3k1c1pXNW5kR2dnUGlCcEtYdGNiaUFnSUNCcFppaG9ZWE1vUVd4c1UzbHRZbTlzY3l3Z2EyVjVJRDBnYm1GdFpYTmJhU3NyWFNrZ0ppWWdLRWxUWDA5UUlEOGdhR0Z6S0U5aWFtVmpkRkJ5YjNSdkxDQnJaWGtwSURvZ2RISjFaU2twY21WemRXeDBMbkIxYzJnb1FXeHNVM2x0WW05c2MxdHJaWGxkS1R0Y2JpQWdmU0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVHRjYmx4dUx5OGdNVGt1TkM0eExqRWdVM2x0WW05c0tGdGtaWE5qY21sd2RHbHZibDBwWEc1cFppZ2hWVk5GWDA1QlZFbFdSU2w3WEc0Z0lDUlRlVzFpYjJ3Z1BTQm1kVzVqZEdsdmJpQlRlVzFpYjJ3b0tYdGNiaUFnSUNCcFppaDBhR2x6SUdsdWMzUmhibU5sYjJZZ0pGTjViV0p2YkNsMGFISnZkeUJVZVhCbFJYSnliM0lvSjFONWJXSnZiQ0JwY3lCdWIzUWdZU0JqYjI1emRISjFZM1J2Y2lFbktUdGNiaUFnSUNCMllYSWdkR0ZuSUQwZ2RXbGtLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF3SUQ4Z1lYSm5kVzFsYm5Seld6QmRJRG9nZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0IyWVhJZ0pITmxkQ0E5SUdaMWJtTjBhVzl1S0haaGJIVmxLWHRjYmlBZ0lDQWdJR2xtS0hSb2FYTWdQVDA5SUU5aWFtVmpkRkJ5YjNSdktTUnpaWFF1WTJGc2JDaFBVRk41YldKdmJITXNJSFpoYkhWbEtUdGNiaUFnSUNBZ0lHbG1LR2hoY3loMGFHbHpMQ0JJU1VSRVJVNHBJQ1ltSUdoaGN5aDBhR2x6VzBoSlJFUkZUbDBzSUhSaFp5a3BkR2hwYzF0SVNVUkVSVTVkVzNSaFoxMGdQU0JtWVd4elpUdGNiaUFnSUNBZ0lITmxkRk41YldKdmJFUmxjMk1vZEdocGN5d2dkR0ZuTENCamNtVmhkR1ZFWlhOaktERXNJSFpoYkhWbEtTazdYRzRnSUNBZ2ZUdGNiaUFnSUNCcFppaEVSVk5EVWtsUVZFOVNVeUFtSmlCelpYUjBaWElwYzJWMFUzbHRZbTlzUkdWell5aFBZbXBsWTNSUWNtOTBieXdnZEdGbkxDQjdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMQ0J6WlhRNklDUnpaWFI5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdkM0poY0NoMFlXY3BPMXh1SUNCOU8xeHVJQ0J5WldSbFptbHVaU2drVTNsdFltOXNXMUJTVDFSUFZGbFFSVjBzSUNkMGIxTjBjbWx1Wnljc0lHWjFibU4wYVc5dUlIUnZVM1J5YVc1bktDbDdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMnM3WEc0Z0lIMHBPMXh1WEc0Z0lDUkhUMUJFTG1ZZ1BTQWtaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eU8xeHVJQ0FrUkZBdVppQWdJRDBnSkdSbFptbHVaVkJ5YjNCbGNuUjVPMXh1SUNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdiaWNwTG1ZZ1BTQm5UMUJPUlhoMExtWWdQU0FrWjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3p0Y2JpQWdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMWEJwWlNjcExtWWdJRDBnSkhCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bE8xeHVJQ0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d2N5Y3BMbVlnUFNBa1oyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpPMXh1WEc0Z0lHbG1LRVJGVTBOU1NWQlVUMUpUSUNZbUlDRnlaWEYxYVhKbEtDY3VMMTlzYVdKeVlYSjVKeWtwZTF4dUlDQWdJSEpsWkdWbWFXNWxLRTlpYW1WamRGQnliM1J2TENBbmNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVW5MQ0FrY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVc0lIUnlkV1VwTzF4dUlDQjlYRzVjYmlBZ2QydHpSWGgwTG1ZZ1BTQm1kVzVqZEdsdmJpaHVZVzFsS1h0Y2JpQWdJQ0J5WlhSMWNtNGdkM0poY0NoM2EzTW9ibUZ0WlNrcE8xeHVJQ0I5WEc1OVhHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNUhJQ3NnSkdWNGNHOXlkQzVYSUNzZ0pHVjRjRzl5ZEM1R0lDb2dJVlZUUlY5T1FWUkpWa1VzSUh0VGVXMWliMnc2SUNSVGVXMWliMng5S1R0Y2JseHVabTl5S0haaGNpQnplVzFpYjJ4eklEMGdLRnh1SUNBdkx5QXhPUzQwTGpJdU1pd2dNVGt1TkM0eUxqTXNJREU1TGpRdU1pNDBMQ0F4T1M0MExqSXVOaXdnTVRrdU5DNHlMamdzSURFNUxqUXVNaTQ1TENBeE9TNDBMakl1TVRBc0lERTVMalF1TWk0eE1Td2dNVGt1TkM0eUxqRXlMQ0F4T1M0MExqSXVNVE1zSURFNUxqUXVNaTR4TkZ4dUlDQW5hR0Z6U1c1emRHRnVZMlVzYVhORGIyNWpZWFJUY0hKbFlXUmhZbXhsTEdsMFpYSmhkRzl5TEcxaGRHTm9MSEpsY0d4aFkyVXNjMlZoY21Ob0xITndaV05wWlhNc2MzQnNhWFFzZEc5UWNtbHRhWFJwZG1Vc2RHOVRkSEpwYm1kVVlXY3NkVzV6WTI5d1lXSnNaWE1uWEc0cExuTndiR2wwS0Njc0p5a3NJR2tnUFNBd095QnplVzFpYjJ4ekxteGxibWQwYUNBK0lHazdJQ2wzYTNNb2MzbHRZbTlzYzF0cEt5dGRLVHRjYmx4dVptOXlLSFpoY2lCemVXMWliMnh6SUQwZ0pHdGxlWE1vZDJ0ekxuTjBiM0psS1N3Z2FTQTlJREE3SUhONWJXSnZiSE11YkdWdVozUm9JRDRnYVRzZ0tYZHJjMFJsWm1sdVpTaHplVzFpYjJ4elcya3JLMTBwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNGVlUwVmZUa0ZVU1ZaRkxDQW5VM2x0WW05c0p5d2dlMXh1SUNBdkx5QXhPUzQwTGpJdU1TQlRlVzFpYjJ3dVptOXlLR3RsZVNsY2JpQWdKMlp2Y2ljNklHWjFibU4wYVc5dUtHdGxlU2w3WEc0Z0lDQWdjbVYwZFhKdUlHaGhjeWhUZVcxaWIyeFNaV2RwYzNSeWVTd2dhMlY1SUNzOUlDY25LVnh1SUNBZ0lDQWdQeUJUZVcxaWIyeFNaV2RwYzNSeWVWdHJaWGxkWEc0Z0lDQWdJQ0E2SUZONWJXSnZiRkpsWjJsemRISjVXMnRsZVYwZ1BTQWtVM2x0WW05c0tHdGxlU2s3WEc0Z0lIMHNYRzRnSUM4dklERTVMalF1TWk0MUlGTjViV0p2YkM1clpYbEdiM0lvYzNsdEtWeHVJQ0JyWlhsR2IzSTZJR1oxYm1OMGFXOXVJR3RsZVVadmNpaHJaWGtwZTF4dUlDQWdJR2xtS0dselUzbHRZbTlzS0d0bGVTa3BjbVYwZFhKdUlHdGxlVTltS0ZONWJXSnZiRkpsWjJsemRISjVMQ0JyWlhrcE8xeHVJQ0FnSUhSb2NtOTNJRlI1Y0dWRmNuSnZjaWhyWlhrZ0t5QW5JR2x6SUc1dmRDQmhJSE41YldKdmJDRW5LVHRjYmlBZ2ZTeGNiaUFnZFhObFUyVjBkR1Z5T2lCbWRXNWpkR2x2YmlncGV5QnpaWFIwWlhJZ1BTQjBjblZsT3lCOUxGeHVJQ0IxYzJWVGFXMXdiR1U2SUdaMWJtTjBhVzl1S0NsN0lITmxkSFJsY2lBOUlHWmhiSE5sT3lCOVhHNTlLVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFoVlZORlgwNUJWRWxXUlN3Z0owOWlhbVZqZENjc0lIdGNiaUFnTHk4Z01Ua3VNUzR5TGpJZ1QySnFaV04wTG1OeVpXRjBaU2hQSUZzc0lGQnliM0JsY25ScFpYTmRLVnh1SUNCamNtVmhkR1U2SUNSamNtVmhkR1VzWEc0Z0lDOHZJREU1TGpFdU1pNDBJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoUExDQlFMQ0JCZEhSeWFXSjFkR1Z6S1Z4dUlDQmtaV1pwYm1WUWNtOXdaWEowZVRvZ0pHUmxabWx1WlZCeWIzQmxjblI1TEZ4dUlDQXZMeUF4T1M0eExqSXVNeUJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aFBMQ0JRY205d1pYSjBhV1Z6S1Z4dUlDQmtaV1pwYm1WUWNtOXdaWEowYVdWek9pQWtaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5eGNiaUFnTHk4Z01Ua3VNUzR5TGpZZ1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWhQTENCUUtWeHVJQ0JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSTZJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSXNYRzRnSUM4dklERTVMakV1TWk0M0lFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVTVoYldWektFOHBYRzRnSUdkbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNNklDUm5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpMRnh1SUNBdkx5QXhPUzR4TGpJdU9DQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpLRThwWEc0Z0lHZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjem9nSkdkbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2MxeHVmU2s3WEc1Y2JpOHZJREkwTGpNdU1pQktVMDlPTG5OMGNtbHVaMmxtZVNoMllXeDFaU0JiTENCeVpYQnNZV05sY2lCYkxDQnpjR0ZqWlYxZEtWeHVKRXBUVDA0Z0ppWWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBb0lWVlRSVjlPUVZSSlZrVWdmSHdnSkdaaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lIWmhjaUJUSUQwZ0pGTjViV0p2YkNncE8xeHVJQ0F2THlCTlV5QkZaR2RsSUdOdmJuWmxjblJ6SUhONWJXSnZiQ0IyWVd4MVpYTWdkRzhnU2xOUFRpQmhjeUI3ZlZ4dUlDQXZMeUJYWldKTGFYUWdZMjl1ZG1WeWRITWdjM2x0WW05c0lIWmhiSFZsY3lCMGJ5QktVMDlPSUdGeklHNTFiR3hjYmlBZ0x5OGdWamdnZEdoeWIzZHpJRzl1SUdKdmVHVmtJSE41YldKdmJITmNiaUFnY21WMGRYSnVJRjl6ZEhKcGJtZHBabmtvVzFOZEtTQWhQU0FuVzI1MWJHeGRKeUI4ZkNCZmMzUnlhVzVuYVdaNUtIdGhPaUJUZlNrZ0lUMGdKM3Q5SnlCOGZDQmZjM1J5YVc1bmFXWjVLRTlpYW1WamRDaFRLU2tnSVQwZ0ozdDlKenRjYm4wcEtTd2dKMHBUVDA0bkxDQjdYRzRnSUhOMGNtbHVaMmxtZVRvZ1puVnVZM1JwYjI0Z2MzUnlhVzVuYVdaNUtHbDBLWHRjYmlBZ0lDQnBaaWhwZENBOVBUMGdkVzVrWldacGJtVmtJSHg4SUdselUzbHRZbTlzS0dsMEtTbHlaWFIxY200N0lDOHZJRWxGT0NCeVpYUjFjbTV6SUhOMGNtbHVaeUJ2YmlCMWJtUmxabWx1WldSY2JpQWdJQ0IyWVhJZ1lYSm5jeUE5SUZ0cGRGMWNiaUFnSUNBZ0lDd2dhU0FnSUNBOUlERmNiaUFnSUNBZ0lDd2djbVZ3YkdGalpYSXNJQ1J5WlhCc1lXTmxjanRjYmlBZ0lDQjNhR2xzWlNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z2FTbGhjbWR6TG5CMWMyZ29ZWEpuZFcxbGJuUnpXMmtySzEwcE8xeHVJQ0FnSUhKbGNHeGhZMlZ5SUQwZ1lYSm5jMXN4WFR0Y2JpQWdJQ0JwWmloMGVYQmxiMllnY21Wd2JHRmpaWElnUFQwZ0oyWjFibU4wYVc5dUp5a2tjbVZ3YkdGalpYSWdQU0J5WlhCc1lXTmxjanRjYmlBZ0lDQnBaaWdrY21Wd2JHRmpaWElnZkh3Z0lXbHpRWEp5WVhrb2NtVndiR0ZqWlhJcEtYSmxjR3hoWTJWeUlEMGdablZ1WTNScGIyNG9hMlY1TENCMllXeDFaU2w3WEc0Z0lDQWdJQ0JwWmlna2NtVndiR0ZqWlhJcGRtRnNkV1VnUFNBa2NtVndiR0ZqWlhJdVkyRnNiQ2gwYUdsekxDQnJaWGtzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJR2xtS0NGcGMxTjViV0p2YkNoMllXeDFaU2twY21WMGRYSnVJSFpoYkhWbE8xeHVJQ0FnSUgwN1hHNGdJQ0FnWVhKbmMxc3hYU0E5SUhKbGNHeGhZMlZ5TzF4dUlDQWdJSEpsZEhWeWJpQmZjM1J5YVc1bmFXWjVMbUZ3Y0d4NUtDUktVMDlPTENCaGNtZHpLVHRjYmlBZ2ZWeHVmU2s3WEc1Y2JpOHZJREU1TGpRdU15NDBJRk41YldKdmJDNXdjbTkwYjNSNWNHVmJRRUIwYjFCeWFXMXBkR2wyWlYwb2FHbHVkQ2xjYmlSVGVXMWliMnhiVUZKUFZFOVVXVkJGWFZ0VVQxOVFVa2xOU1ZSSlZrVmRJSHg4SUhKbGNYVnBjbVVvSnk0dlgyaHBaR1VuS1Nna1UzbHRZbTlzVzFCU1QxUlBWRmxRUlYwc0lGUlBYMUJTU1UxSlZFbFdSU3dnSkZONWJXSnZiRnRRVWs5VVQxUlpVRVZkTG5aaGJIVmxUMllwTzF4dUx5OGdNVGt1TkM0ekxqVWdVM2x0WW05c0xuQnliM1J2ZEhsd1pWdEFRSFJ2VTNSeWFXNW5WR0ZuWFZ4dWMyVjBWRzlUZEhKcGJtZFVZV2NvSkZONWJXSnZiQ3dnSjFONWJXSnZiQ2NwTzF4dUx5OGdNakF1TWk0eExqa2dUV0YwYUZ0QVFIUnZVM1J5YVc1blZHRm5YVnh1YzJWMFZHOVRkSEpwYm1kVVlXY29UV0YwYUN3Z0owMWhkR2duTENCMGNuVmxLVHRjYmk4dklESTBMak11TXlCS1UwOU9XMEJBZEc5VGRISnBibWRVWVdkZFhHNXpaWFJVYjFOMGNtbHVaMVJoWnlobmJHOWlZV3d1U2xOUFRpd2dKMHBUVDA0bkxDQjBjblZsS1RzaUxDSnlaWEYxYVhKbEtDY3VMMTkzYTNNdFpHVm1hVzVsSnlrb0oyRnplVzVqU1hSbGNtRjBiM0luS1RzaUxDSnlaWEYxYVhKbEtDY3VMMTkzYTNNdFpHVm1hVzVsSnlrb0oyOWljMlZ5ZG1GaWJHVW5LVHNpTENKeVpYRjFhWEpsS0NjdUwyVnpOaTVoY25KaGVTNXBkR1Z5WVhSdmNpY3BPMXh1ZG1GeUlHZHNiMkpoYkNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUdocFpHVWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWxjYmlBZ0xDQkpkR1Z5WVhSdmNuTWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY21GMGIzSnpKeWxjYmlBZ0xDQlVUMTlUVkZKSlRrZGZWRUZISUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0ozUnZVM1J5YVc1blZHRm5KeWs3WEc1Y2JtWnZjaWgyWVhJZ1kyOXNiR1ZqZEdsdmJuTWdQU0JiSjA1dlpHVk1hWE4wSnl3Z0owUlBUVlJ2YTJWdVRHbHpkQ2NzSUNkTlpXUnBZVXhwYzNRbkxDQW5VM1I1YkdWVGFHVmxkRXhwYzNRbkxDQW5RMU5UVW5Wc1pVeHBjM1FuWFN3Z2FTQTlJREE3SUdrZ1BDQTFPeUJwS3lzcGUxeHVJQ0IyWVhJZ1RrRk5SU0FnSUNBZ0lDQTlJR052Ykd4bFkzUnBiMjV6VzJsZFhHNGdJQ0FnTENCRGIyeHNaV04wYVc5dUlEMGdaMnh2WW1Gc1cwNUJUVVZkWEc0Z0lDQWdMQ0J3Y205MGJ5QWdJQ0FnSUQwZ1EyOXNiR1ZqZEdsdmJpQW1KaUJEYjJ4c1pXTjBhVzl1TG5CeWIzUnZkSGx3WlR0Y2JpQWdhV1lvY0hKdmRHOGdKaVlnSVhCeWIzUnZXMVJQWDFOVVVrbE9SMTlVUVVkZEtXaHBaR1VvY0hKdmRHOHNJRlJQWDFOVVVrbE9SMTlVUVVjc0lFNUJUVVVwTzF4dUlDQkpkR1Z5WVhSdmNuTmJUa0ZOUlYwZ1BTQkpkR1Z5WVhSdmNuTXVRWEp5WVhrN1hHNTlJaXdpZG1GeUlHTnZaaUE5SUhKbGNYVnBjbVVvSnk0dlgyTnZaaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDd2diWE5uS1h0Y2JpQWdhV1lvZEhsd1pXOW1JR2wwSUNFOUlDZHVkVzFpWlhJbklDWW1JR052WmlocGRDa2dJVDBnSjA1MWJXSmxjaWNwZEdoeWIzY2dWSGx3WlVWeWNtOXlLRzF6WnlrN1hHNGdJSEpsZEhWeWJpQXJhWFE3WEc1OU95SXNJaTh2SURJeUxqRXVNeTR6TVNCQmNuSmhlUzV3Y205MGIzUjVjR1ZiUUVCMWJuTmpiM0JoWW14bGMxMWNiblpoY2lCVlRsTkRUMUJCUWt4RlV5QTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2QxYm5OamIzQmhZbXhsY3ljcFhHNGdJQ3dnUVhKeVlYbFFjbTkwYnlBZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVN1hHNXBaaWhCY25KaGVWQnliM1J2VzFWT1UwTlBVRUZDVEVWVFhTQTlQU0IxYm1SbFptbHVaV1FwY21WeGRXbHlaU2duTGk5ZmFHbGtaU2NwS0VGeWNtRjVVSEp2ZEc4c0lGVk9VME5QVUVGQ1RFVlRMQ0I3ZlNrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHdGxlU2w3WEc0Z0lFRnljbUY1VUhKdmRHOWJWVTVUUTA5UVFVSk1SVk5kVzJ0bGVWMGdQU0IwY25WbE8xeHVmVHNpTENJdkx5QXlNaTR4TGpNdU15QkJjbkpoZVM1d2NtOTBiM1I1Y0dVdVkyOXdlVmRwZEdocGJpaDBZWEpuWlhRc0lITjBZWEowTENCbGJtUWdQU0IwYUdsekxteGxibWQwYUNsY2JpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQjBiMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXOWlhbVZqZENjcFhHNGdJQ3dnZEc5SmJtUmxlQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm1SbGVDY3BYRzRnSUN3Z2RHOU1aVzVuZEdnZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxc1pXNW5kR2duS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmJYUzVqYjNCNVYybDBhR2x1SUh4OElHWjFibU4wYVc5dUlHTnZjSGxYYVhSb2FXNG9kR0Z5WjJWMEx5bzlJREFxTHl3Z2MzUmhjblF2S2owZ01Dd2daVzVrSUQwZ1FHeGxibWQwYUNvdktYdGNiaUFnZG1GeUlFOGdJQ0FnSUQwZ2RHOVBZbXBsWTNRb2RHaHBjeWxjYmlBZ0lDQXNJR3hsYmlBZ0lEMGdkRzlNWlc1bmRHZ29UeTVzWlc1bmRHZ3BYRzRnSUNBZ0xDQjBieUFnSUNBOUlIUnZTVzVrWlhnb2RHRnlaMlYwTENCc1pXNHBYRzRnSUNBZ0xDQm1jbTl0SUNBOUlIUnZTVzVrWlhnb2MzUmhjblFzSUd4bGJpbGNiaUFnSUNBc0lHVnVaQ0FnSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lESWdQeUJoY21kMWJXVnVkSE5iTWwwZ09pQjFibVJsWm1sdVpXUmNiaUFnSUNBc0lHTnZkVzUwSUQwZ1RXRjBhQzV0YVc0b0tHVnVaQ0E5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdiR1Z1SURvZ2RHOUpibVJsZUNobGJtUXNJR3hsYmlrcElDMGdabkp2YlN3Z2JHVnVJQzBnZEc4cFhHNGdJQ0FnTENCcGJtTWdJQ0E5SURFN1hHNGdJR2xtS0daeWIyMGdQQ0IwYnlBbUppQjBieUE4SUdaeWIyMGdLeUJqYjNWdWRDbDdYRzRnSUNBZ2FXNWpJQ0E5SUMweE8xeHVJQ0FnSUdaeWIyMGdLejBnWTI5MWJuUWdMU0F4TzF4dUlDQWdJSFJ2SUNBZ0t6MGdZMjkxYm5RZ0xTQXhPMXh1SUNCOVhHNGdJSGRvYVd4bEtHTnZkVzUwTFMwZ1BpQXdLWHRjYmlBZ0lDQnBaaWhtY205dElHbHVJRThwVDF0MGIxMGdQU0JQVzJaeWIyMWRPMXh1SUNBZ0lHVnNjMlVnWkdWc1pYUmxJRTliZEc5ZE8xeHVJQ0FnSUhSdklDQWdLejBnYVc1ak8xeHVJQ0FnSUdaeWIyMGdLejBnYVc1ak8xeHVJQ0I5SUhKbGRIVnliaUJQTzF4dWZUc2lMQ0l2THlBeU1pNHhMak11TmlCQmNuSmhlUzV3Y205MGIzUjVjR1V1Wm1sc2JDaDJZV3gxWlN3Z2MzUmhjblFnUFNBd0xDQmxibVFnUFNCMGFHbHpMbXhsYm1kMGFDbGNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUIwYjA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z2RHOUpibVJsZUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJtUmxlQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXNaVzVuZEdnbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdabWxzYkNoMllXeDFaU0F2S2l3Z2MzUmhjblFnUFNBd0xDQmxibVFnUFNCQWJHVnVaM1JvSUNvdktYdGNiaUFnZG1GeUlFOGdJQ0FnSUNBOUlIUnZUMkpxWldOMEtIUm9hWE1wWEc0Z0lDQWdMQ0JzWlc1bmRHZ2dQU0IwYjB4bGJtZDBhQ2hQTG14bGJtZDBhQ2xjYmlBZ0lDQXNJR0ZNWlc0Z0lDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHaGNiaUFnSUNBc0lHbHVaR1Y0SUNBOUlIUnZTVzVrWlhnb1lVeGxiaUErSURFZ1B5QmhjbWQxYldWdWRITmJNVjBnT2lCMWJtUmxabWx1WldRc0lHeGxibWQwYUNsY2JpQWdJQ0FzSUdWdVpDQWdJQ0E5SUdGTVpXNGdQaUF5SUQ4Z1lYSm5kVzFsYm5Seld6SmRJRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdMQ0JsYm1SUWIzTWdQU0JsYm1RZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUd4bGJtZDBhQ0E2SUhSdlNXNWtaWGdvWlc1a0xDQnNaVzVuZEdncE8xeHVJQ0IzYUdsc1pTaGxibVJRYjNNZ1BpQnBibVJsZUNsUFcybHVaR1Y0S3l0ZElEMGdkbUZzZFdVN1hHNGdJSEpsZEhWeWJpQlBPMXh1ZlRzaUxDSjJZWElnWm05eVQyWWdQU0J5WlhGMWFYSmxLQ2N1TDE5bWIzSXRiMlluS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkR1Z5TENCSlZFVlNRVlJQVWlsN1hHNGdJSFpoY2lCeVpYTjFiSFFnUFNCYlhUdGNiaUFnWm05eVQyWW9hWFJsY2l3Z1ptRnNjMlVzSUhKbGMzVnNkQzV3ZFhOb0xDQnlaWE4xYkhRc0lFbFVSVkpCVkU5U0tUdGNiaUFnY21WMGRYSnVJSEpsYzNWc2REdGNibjA3WEc0aUxDSXZMeUF3SUMwK0lFRnljbUY1STJadmNrVmhZMmhjYmk4dklERWdMVDRnUVhKeVlYa2piV0Z3WEc0dkx5QXlJQzArSUVGeWNtRjVJMlpwYkhSbGNseHVMeThnTXlBdFBpQkJjbkpoZVNOemIyMWxYRzR2THlBMElDMCtJRUZ5Y21GNUkyVjJaWEo1WEc0dkx5QTFJQzArSUVGeWNtRjVJMlpwYm1SY2JpOHZJRFlnTFQ0Z1FYSnlZWGtqWm1sdVpFbHVaR1Y0WEc1MllYSWdZM1I0SUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5amRIZ25LVnh1SUNBc0lFbFBZbXBsWTNRZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHVJQ0FzSUhSdlRHVnVaM1JvSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWxjYmlBZ0xDQmhjMk1nSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMWE53WldOcFpYTXRZM0psWVhSbEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRlJaVUVVc0lDUmpjbVZoZEdVcGUxeHVJQ0IyWVhJZ1NWTmZUVUZRSUNBZ0lDQWdJQ0E5SUZSWlVFVWdQVDBnTVZ4dUlDQWdJQ3dnU1ZOZlJrbE1WRVZTSUNBZ0lDQTlJRlJaVUVVZ1BUMGdNbHh1SUNBZ0lDd2dTVk5mVTA5TlJTQWdJQ0FnSUNBOUlGUlpVRVVnUFQwZ00xeHVJQ0FnSUN3Z1NWTmZSVlpGVWxrZ0lDQWdJQ0E5SUZSWlVFVWdQVDBnTkZ4dUlDQWdJQ3dnU1ZOZlJrbE9SRjlKVGtSRldDQTlJRlJaVUVVZ1BUMGdObHh1SUNBZ0lDd2dUazlmU0U5TVJWTWdJQ0FnSUNBOUlGUlpVRVVnUFQwZ05TQjhmQ0JKVTE5R1NVNUVYMGxPUkVWWVhHNGdJQ0FnTENCamNtVmhkR1VnSUNBZ0lDQWdJRDBnSkdOeVpXRjBaU0I4ZkNCaGMyTTdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdrZEdocGN5d2dZMkZzYkdKaFkydG1iaXdnZEdoaGRDbDdYRzRnSUNBZ2RtRnlJRThnSUNBZ0lDQTlJSFJ2VDJKcVpXTjBLQ1IwYUdsektWeHVJQ0FnSUNBZ0xDQnpaV3htSUNBZ1BTQkpUMkpxWldOMEtFOHBYRzRnSUNBZ0lDQXNJR1lnSUNBZ0lDQTlJR04wZUNoallXeHNZbUZqYTJadUxDQjBhR0YwTENBektWeHVJQ0FnSUNBZ0xDQnNaVzVuZEdnZ1BTQjBiMHhsYm1kMGFDaHpaV3htTG14bGJtZDBhQ2xjYmlBZ0lDQWdJQ3dnYVc1a1pYZ2dJRDBnTUZ4dUlDQWdJQ0FnTENCeVpYTjFiSFFnUFNCSlUxOU5RVkFnUHlCamNtVmhkR1VvSkhSb2FYTXNJR3hsYm1kMGFDa2dPaUJKVTE5R1NVeFVSVklnUHlCamNtVmhkR1VvSkhSb2FYTXNJREFwSURvZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBc0lIWmhiQ3dnY21Wek8xeHVJQ0FnSUdadmNpZzdiR1Z1WjNSb0lENGdhVzVrWlhnN0lHbHVaR1Y0S3lzcGFXWW9UazlmU0U5TVJWTWdmSHdnYVc1a1pYZ2dhVzRnYzJWc1ppbDdYRzRnSUNBZ0lDQjJZV3dnUFNCelpXeG1XMmx1WkdWNFhUdGNiaUFnSUNBZ0lISmxjeUE5SUdZb2RtRnNMQ0JwYm1SbGVDd2dUeWs3WEc0Z0lDQWdJQ0JwWmloVVdWQkZLWHRjYmlBZ0lDQWdJQ0FnYVdZb1NWTmZUVUZRS1hKbGMzVnNkRnRwYm1SbGVGMGdQU0J5WlhNN0lDQWdJQ0FnSUNBZ0lDQWdMeThnYldGd1hHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZb2NtVnpLWE4zYVhSamFDaFVXVkJGS1h0Y2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSURNNklISmxkSFZ5YmlCMGNuVmxPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyOXRaVnh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdOVG9nY21WMGRYSnVJSFpoYkRzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJtYVc1a1hHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBMk9pQnlaWFIxY200Z2FXNWtaWGc3SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHWnBibVJKYm1SbGVGeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ01qb2djbVZ6ZFd4MExuQjFjMmdvZG1Gc0tUc2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5Qm1hV3gwWlhKY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUtFbFRYMFZXUlZKWktYSmxkSFZ5YmlCbVlXeHpaVHNnSUNBZ0lDQWdJQ0FnTHk4Z1pYWmxjbmxjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUVsVFgwWkpUa1JmU1U1RVJWZ2dQeUF0TVNBNklFbFRYMU5QVFVVZ2ZId2dTVk5mUlZaRlVsa2dQeUJKVTE5RlZrVlNXU0E2SUhKbGMzVnNkRHRjYmlBZ2ZUdGNibjA3SWl3aWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVnh1SUNBc0lIUnZUMkpxWldOMElDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXOWlhbVZqZENjcFhHNGdJQ3dnU1U5aWFtVmpkQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhVzlpYW1WamRDY3BYRzRnSUN3Z2RHOU1aVzVuZEdnZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9kR2hoZEN3Z1kyRnNiR0poWTJ0bWJpd2dZVXhsYml3Z2JXVnRieXdnYVhOU2FXZG9kQ2w3WEc0Z0lHRkdkVzVqZEdsdmJpaGpZV3hzWW1GamEyWnVLVHRjYmlBZ2RtRnlJRThnSUNBZ0lDQTlJSFJ2VDJKcVpXTjBLSFJvWVhRcFhHNGdJQ0FnTENCelpXeG1JQ0FnUFNCSlQySnFaV04wS0U4cFhHNGdJQ0FnTENCc1pXNW5kR2dnUFNCMGIweGxibWQwYUNoUExteGxibWQwYUNsY2JpQWdJQ0FzSUdsdVpHVjRJQ0E5SUdselVtbG5hSFFnUHlCc1pXNW5kR2dnTFNBeElEb2dNRnh1SUNBZ0lDd2dhU0FnSUNBZ0lEMGdhWE5TYVdkb2RDQS9JQzB4SURvZ01UdGNiaUFnYVdZb1lVeGxiaUE4SURJcFptOXlLRHM3S1h0Y2JpQWdJQ0JwWmlocGJtUmxlQ0JwYmlCelpXeG1LWHRjYmlBZ0lDQWdJRzFsYlc4Z1BTQnpaV3htVzJsdVpHVjRYVHRjYmlBZ0lDQWdJR2x1WkdWNElDczlJR2s3WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCOVhHNGdJQ0FnYVc1a1pYZ2dLejBnYVR0Y2JpQWdJQ0JwWmlocGMxSnBaMmgwSUQ4Z2FXNWtaWGdnUENBd0lEb2diR1Z1WjNSb0lEdzlJR2x1WkdWNEtYdGNiaUFnSUNBZ0lIUm9jbTkzSUZSNWNHVkZjbkp2Y2lnblVtVmtkV05sSUc5bUlHVnRjSFI1SUdGeWNtRjVJSGRwZEdnZ2JtOGdhVzVwZEdsaGJDQjJZV3gxWlNjcE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCbWIzSW9PMmx6VW1sbmFIUWdQeUJwYm1SbGVDQStQU0F3SURvZ2JHVnVaM1JvSUQ0Z2FXNWtaWGc3SUdsdVpHVjRJQ3M5SUdrcGFXWW9hVzVrWlhnZ2FXNGdjMlZzWmlsN1hHNGdJQ0FnYldWdGJ5QTlJR05oYkd4aVlXTnJabTRvYldWdGJ5d2djMlZzWmx0cGJtUmxlRjBzSUdsdVpHVjRMQ0JQS1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnYldWdGJ6dGNibjA3SWl3aWRtRnlJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5bGNiaUFnTENCcGMwRnljbUY1SUNBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFdGeWNtRjVKeWxjYmlBZ0xDQlRVRVZEU1VWVElDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2R6Y0dWamFXVnpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2IzSnBaMmx1WVd3cGUxeHVJQ0IyWVhJZ1F6dGNiaUFnYVdZb2FYTkJjbkpoZVNodmNtbG5hVzVoYkNrcGUxeHVJQ0FnSUVNZ1BTQnZjbWxuYVc1aGJDNWpiMjV6ZEhKMVkzUnZjanRjYmlBZ0lDQXZMeUJqY205emN5MXlaV0ZzYlNCbVlXeHNZbUZqYTF4dUlDQWdJR2xtS0hSNWNHVnZaaUJESUQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnS0VNZ1BUMDlJRUZ5Y21GNUlIeDhJR2x6UVhKeVlYa29ReTV3Y205MGIzUjVjR1VwS1NsRElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lHbG1LR2x6VDJKcVpXTjBLRU1wS1h0Y2JpQWdJQ0FnSUVNZ1BTQkRXMU5RUlVOSlJWTmRPMXh1SUNBZ0lDQWdhV1lvUXlBOVBUMGdiblZzYkNsRElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNiaUFnZlNCeVpYUjFjbTRnUXlBOVBUMGdkVzVrWldacGJtVmtJRDhnUVhKeVlYa2dPaUJETzF4dWZUc2lMQ0l2THlBNUxqUXVNaTR6SUVGeWNtRjVVM0JsWTJsbGMwTnlaV0YwWlNodmNtbG5hVzVoYkVGeWNtRjVMQ0JzWlc1bmRHZ3BYRzUyWVhJZ2MzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUlEMGdjbVZ4ZFdseVpTZ25MaTlmWVhKeVlYa3RjM0JsWTJsbGN5MWpiMjV6ZEhKMVkzUnZjaWNwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHOXlhV2RwYm1Gc0xDQnNaVzVuZEdncGUxeHVJQ0J5WlhSMWNtNGdibVYzSUNoemNHVmphV1Z6UTI5dWMzUnlkV04wYjNJb2IzSnBaMmx1WVd3cEtTaHNaVzVuZEdncE8xeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ1lVWjFibU4wYVc5dUlDQTlJSEpsY1hWcGNtVW9KeTR2WDJFdFpuVnVZM1JwYjI0bktWeHVJQ0FzSUdselQySnFaV04wSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJR2x1ZG05clpTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBiblp2YTJVbktWeHVJQ0FzSUdGeWNtRjVVMnhwWTJVZ1BTQmJYUzV6YkdsalpWeHVJQ0FzSUdaaFkzUnZjbWxsY3lBZ1BTQjdmVHRjYmx4dWRtRnlJR052Ym5OMGNuVmpkQ0E5SUdaMWJtTjBhVzl1S0VZc0lHeGxiaXdnWVhKbmN5bDdYRzRnSUdsbUtDRW9iR1Z1SUdsdUlHWmhZM1J2Y21sbGN5a3BlMXh1SUNBZ0lHWnZjaWgyWVhJZ2JpQTlJRnRkTENCcElEMGdNRHNnYVNBOElHeGxianNnYVNzcktXNWJhVjBnUFNBbllWc25JQ3NnYVNBcklDZGRKenRjYmlBZ0lDQm1ZV04wYjNKcFpYTmJiR1Z1WFNBOUlFWjFibU4wYVc5dUtDZEdMR0VuTENBbmNtVjBkWEp1SUc1bGR5QkdLQ2NnS3lCdUxtcHZhVzRvSnl3bktTQXJJQ2NwSnlrN1hHNGdJSDBnY21WMGRYSnVJR1poWTNSdmNtbGxjMXRzWlc1ZEtFWXNJR0Z5WjNNcE8xeHVmVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCR2RXNWpkR2x2Ymk1aWFXNWtJSHg4SUdaMWJtTjBhVzl1SUdKcGJtUW9kR2hoZENBdktpd2dZWEpuY3k0dUxpQXFMeWw3WEc0Z0lIWmhjaUJtYmlBZ0lDQWdJQ0E5SUdGR2RXNWpkR2x2YmloMGFHbHpLVnh1SUNBZ0lDd2djR0Z5ZEVGeVozTWdQU0JoY25KaGVWTnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpMQ0F4S1R0Y2JpQWdkbUZ5SUdKdmRXNWtJRDBnWm5WdVkzUnBiMjRvTHlvZ1lYSm5jeTR1TGlBcUx5bDdYRzRnSUNBZ2RtRnlJR0Z5WjNNZ1BTQndZWEowUVhKbmN5NWpiMjVqWVhRb1lYSnlZWGxUYkdsalpTNWpZV3hzS0dGeVozVnRaVzUwY3lrcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdseklHbHVjM1JoYm1ObGIyWWdZbTkxYm1RZ1B5QmpiMjV6ZEhKMVkzUW9abTRzSUdGeVozTXViR1Z1WjNSb0xDQmhjbWR6S1NBNklHbHVkbTlyWlNobWJpd2dZWEpuY3l3Z2RHaGhkQ2s3WEc0Z0lIMDdYRzRnSUdsbUtHbHpUMkpxWldOMEtHWnVMbkJ5YjNSdmRIbHdaU2twWW05MWJtUXVjSEp2ZEc5MGVYQmxJRDBnWm00dWNISnZkRzkwZVhCbE8xeHVJQ0J5WlhSMWNtNGdZbTkxYm1RN1hHNTlPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCa1VDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcExtWmNiaUFnTENCamNtVmhkR1VnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFqY21WaGRHVW5LVnh1SUNBc0lISmxaR1ZtYVc1bFFXeHNJRDBnY21WeGRXbHlaU2duTGk5ZmNtVmtaV1pwYm1VdFlXeHNKeWxjYmlBZ0xDQmpkSGdnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTjBlQ2NwWEc0Z0lDd2dZVzVKYm5OMFlXNWpaU0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTFwYm5OMFlXNWpaU2NwWEc0Z0lDd2daR1ZtYVc1bFpDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWtaV1pwYm1Wa0p5bGNiaUFnTENCbWIzSlBaaUFnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJadmNpMXZaaWNwWEc0Z0lDd2dKR2wwWlhKRVpXWnBibVVnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdSbFptbHVaU2NwWEc0Z0lDd2djM1JsY0NBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFhOMFpYQW5LVnh1SUNBc0lITmxkRk53WldOcFpYTWdJRDBnY21WeGRXbHlaU2duTGk5ZmMyVjBMWE53WldOcFpYTW5LVnh1SUNBc0lFUkZVME5TU1ZCVVQxSlRJRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LVnh1SUNBc0lHWmhjM1JMWlhrZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZU2NwTG1aaGMzUkxaWGxjYmlBZ0xDQlRTVnBGSUNBZ0lDQWdJQ0E5SUVSRlUwTlNTVkJVVDFKVElEOGdKMTl6SnlBNklDZHphWHBsSnp0Y2JseHVkbUZ5SUdkbGRFVnVkSEo1SUQwZ1puVnVZM1JwYjI0b2RHaGhkQ3dnYTJWNUtYdGNiaUFnTHk4Z1ptRnpkQ0JqWVhObFhHNGdJSFpoY2lCcGJtUmxlQ0E5SUdaaGMzUkxaWGtvYTJWNUtTd2daVzUwY25rN1hHNGdJR2xtS0dsdVpHVjRJQ0U5UFNBblJpY3BjbVYwZFhKdUlIUm9ZWFF1WDJsYmFXNWtaWGhkTzF4dUlDQXZMeUJtY205NlpXNGdiMkpxWldOMElHTmhjMlZjYmlBZ1ptOXlLR1Z1ZEhKNUlEMGdkR2hoZEM1Zlpqc2daVzUwY25rN0lHVnVkSEo1SUQwZ1pXNTBjbmt1YmlsN1hHNGdJQ0FnYVdZb1pXNTBjbmt1YXlBOVBTQnJaWGtwY21WMGRYSnVJR1Z1ZEhKNU8xeHVJQ0I5WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ1oyVjBRMjl1YzNSeWRXTjBiM0k2SUdaMWJtTjBhVzl1S0hkeVlYQndaWElzSUU1QlRVVXNJRWxUWDAxQlVDd2dRVVJFUlZJcGUxeHVJQ0FnSUhaaGNpQkRJRDBnZDNKaGNIQmxjaWhtZFc1amRHbHZiaWgwYUdGMExDQnBkR1Z5WVdKc1pTbDdYRzRnSUNBZ0lDQmhia2x1YzNSaGJtTmxLSFJvWVhRc0lFTXNJRTVCVFVVc0lDZGZhU2NwTzF4dUlDQWdJQ0FnZEdoaGRDNWZhU0E5SUdOeVpXRjBaU2h1ZFd4c0tUc2dMeThnYVc1a1pYaGNiaUFnSUNBZ0lIUm9ZWFF1WDJZZ1BTQjFibVJsWm1sdVpXUTdJQ0FnSUM4dklHWnBjbk4wSUdWdWRISjVYRzRnSUNBZ0lDQjBhR0YwTGw5c0lEMGdkVzVrWldacGJtVmtPeUFnSUNBdkx5QnNZWE4wSUdWdWRISjVYRzRnSUNBZ0lDQjBhR0YwVzFOSldrVmRJRDBnTURzZ0lDQWdJQ0FnSUNBdkx5QnphWHBsWEc0Z0lDQWdJQ0JwWmlocGRHVnlZV0pzWlNBaFBTQjFibVJsWm1sdVpXUXBabTl5VDJZb2FYUmxjbUZpYkdVc0lFbFRYMDFCVUN3Z2RHaGhkRnRCUkVSRlVsMHNJSFJvWVhRcE8xeHVJQ0FnSUgwcE8xeHVJQ0FnSUhKbFpHVm1hVzVsUVd4c0tFTXVjSEp2ZEc5MGVYQmxMQ0I3WEc0Z0lDQWdJQ0F2THlBeU15NHhMak11TVNCTllYQXVjSEp2ZEc5MGVYQmxMbU5zWldGeUtDbGNiaUFnSUNBZ0lDOHZJREl6TGpJdU15NHlJRk5sZEM1d2NtOTBiM1I1Y0dVdVkyeGxZWElvS1Z4dUlDQWdJQ0FnWTJ4bFlYSTZJR1oxYm1OMGFXOXVJR05zWldGeUtDbDdYRzRnSUNBZ0lDQWdJR1p2Y2loMllYSWdkR2hoZENBOUlIUm9hWE1zSUdSaGRHRWdQU0IwYUdGMExsOXBMQ0JsYm5SeWVTQTlJSFJvWVhRdVgyWTdJR1Z1ZEhKNU95QmxiblJ5ZVNBOUlHVnVkSEo1TG00cGUxeHVJQ0FnSUNBZ0lDQWdJR1Z1ZEhKNUxuSWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJR2xtS0dWdWRISjVMbkFwWlc1MGNua3VjQ0E5SUdWdWRISjVMbkF1YmlBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdJQ0JrWld4bGRHVWdaR0YwWVZ0bGJuUnllUzVwWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR0YwTGw5bUlEMGdkR2hoZEM1ZmJDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnZEdoaGRGdFRTVnBGWFNBOUlEQTdYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdMeThnTWpNdU1TNHpMak1nVFdGd0xuQnliM1J2ZEhsd1pTNWtaV3hsZEdVb2EyVjVLVnh1SUNBZ0lDQWdMeThnTWpNdU1pNHpMalFnVTJWMExuQnliM1J2ZEhsd1pTNWtaV3hsZEdVb2RtRnNkV1VwWEc0Z0lDQWdJQ0FuWkdWc1pYUmxKem9nWm5WdVkzUnBiMjRvYTJWNUtYdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSb1lYUWdJRDBnZEdocGMxeHVJQ0FnSUNBZ0lDQWdJQ3dnWlc1MGNua2dQU0JuWlhSRmJuUnllU2gwYUdGMExDQnJaWGtwTzF4dUlDQWdJQ0FnSUNCcFppaGxiblJ5ZVNsN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUc1bGVIUWdQU0JsYm5SeWVTNXVYRzRnSUNBZ0lDQWdJQ0FnSUNBc0lIQnlaWFlnUFNCbGJuUnllUzV3TzF4dUlDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCMGFHRjBMbDlwVzJWdWRISjVMbWxkTzF4dUlDQWdJQ0FnSUNBZ0lHVnVkSEo1TG5JZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lHbG1LSEJ5WlhZcGNISmxkaTV1SUQwZ2JtVjRkRHRjYmlBZ0lDQWdJQ0FnSUNCcFppaHVaWGgwS1c1bGVIUXVjQ0E5SUhCeVpYWTdYRzRnSUNBZ0lDQWdJQ0FnYVdZb2RHaGhkQzVmWmlBOVBTQmxiblJ5ZVNsMGFHRjBMbDltSUQwZ2JtVjRkRHRjYmlBZ0lDQWdJQ0FnSUNCcFppaDBhR0YwTGw5c0lEMDlJR1Z1ZEhKNUtYUm9ZWFF1WDJ3Z1BTQndjbVYyTzF4dUlDQWdJQ0FnSUNBZ0lIUm9ZWFJiVTBsYVJWMHRMVHRjYmlBZ0lDQWdJQ0FnZlNCeVpYUjFjbTRnSVNGbGJuUnllVHRjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0F2THlBeU15NHlMak11TmlCVFpYUXVjSEp2ZEc5MGVYQmxMbVp2Y2tWaFkyZ29ZMkZzYkdKaFkydG1iaXdnZEdocGMwRnlaeUE5SUhWdVpHVm1hVzVsWkNsY2JpQWdJQ0FnSUM4dklESXpMakV1TXk0MUlFMWhjQzV3Y205MGIzUjVjR1V1Wm05eVJXRmphQ2hqWVd4c1ltRmphMlp1TENCMGFHbHpRWEpuSUQwZ2RXNWtaV1pwYm1Wa0tWeHVJQ0FnSUNBZ1ptOXlSV0ZqYURvZ1puVnVZM1JwYjI0Z1ptOXlSV0ZqYUNoallXeHNZbUZqYTJadUlDOHFMQ0IwYUdGMElEMGdkVzVrWldacGJtVmtJQ292S1h0Y2JpQWdJQ0FnSUNBZ1lXNUpibk4wWVc1alpTaDBhR2x6TENCRExDQW5abTl5UldGamFDY3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1ppQTlJR04wZUNoallXeHNZbUZqYTJadUxDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0EvSUdGeVozVnRaVzUwYzFzeFhTQTZJSFZ1WkdWbWFXNWxaQ3dnTXlsY2JpQWdJQ0FnSUNBZ0lDQXNJR1Z1ZEhKNU8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNobGJuUnllU0E5SUdWdWRISjVJRDhnWlc1MGNua3ViaUE2SUhSb2FYTXVYMllwZTF4dUlDQWdJQ0FnSUNBZ0lHWW9aVzUwY25rdWRpd2daVzUwY25rdWF5d2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lDQWdMeThnY21WMlpYSjBJSFJ2SUhSb1pTQnNZWE4wSUdWNGFYTjBhVzVuSUdWdWRISjVYRzRnSUNBZ0lDQWdJQ0FnZDJocGJHVW9aVzUwY25rZ0ppWWdaVzUwY25rdWNpbGxiblJ5ZVNBOUlHVnVkSEo1TG5BN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQXZMeUF5TXk0eExqTXVOeUJOWVhBdWNISnZkRzkwZVhCbExtaGhjeWhyWlhrcFhHNGdJQ0FnSUNBdkx5QXlNeTR5TGpNdU55QlRaWFF1Y0hKdmRHOTBlWEJsTG1oaGN5aDJZV3gxWlNsY2JpQWdJQ0FnSUdoaGN6b2dablZ1WTNScGIyNGdhR0Z6S0d0bGVTbDdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQWhJV2RsZEVWdWRISjVLSFJvYVhNc0lHdGxlU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lDQWdhV1lvUkVWVFExSkpVRlJQVWxNcFpGQW9ReTV3Y205MGIzUjVjR1VzSUNkemFYcGxKeXdnZTF4dUlDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaR1ZtYVc1bFpDaDBhR2x6VzFOSldrVmRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ0lDQnlaWFIxY200Z1F6dGNiaUFnZlN4Y2JpQWdaR1ZtT2lCbWRXNWpkR2x2YmloMGFHRjBMQ0JyWlhrc0lIWmhiSFZsS1h0Y2JpQWdJQ0IyWVhJZ1pXNTBjbmtnUFNCblpYUkZiblJ5ZVNoMGFHRjBMQ0JyWlhrcFhHNGdJQ0FnSUNBc0lIQnlaWFlzSUdsdVpHVjRPMXh1SUNBZ0lDOHZJR05vWVc1blpTQmxlR2x6ZEdsdVp5QmxiblJ5ZVZ4dUlDQWdJR2xtS0dWdWRISjVLWHRjYmlBZ0lDQWdJR1Z1ZEhKNUxuWWdQU0IyWVd4MVpUdGNiaUFnSUNBdkx5QmpjbVZoZEdVZ2JtVjNJR1Z1ZEhKNVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvWVhRdVgyd2dQU0JsYm5SeWVTQTlJSHRjYmlBZ0lDQWdJQ0FnYVRvZ2FXNWtaWGdnUFNCbVlYTjBTMlY1S0d0bGVTd2dkSEoxWlNrc0lDOHZJRHd0SUdsdVpHVjRYRzRnSUNBZ0lDQWdJR3M2SUd0bGVTd2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QThMU0JyWlhsY2JpQWdJQ0FnSUNBZ2Rqb2dkbUZzZFdVc0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUR3dElIWmhiSFZsWEc0Z0lDQWdJQ0FnSUhBNklIQnlaWFlnUFNCMGFHRjBMbDlzTENBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUE4TFNCd2NtVjJhVzkxY3lCbGJuUnllVnh1SUNBZ0lDQWdJQ0J1T2lCMWJtUmxabWx1WldRc0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnYm1WNGRDQmxiblJ5ZVZ4dUlDQWdJQ0FnSUNCeU9pQm1ZV3h6WlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUEMwZ2NtVnRiM1psWkZ4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUdsbUtDRjBhR0YwTGw5bUtYUm9ZWFF1WDJZZ1BTQmxiblJ5ZVR0Y2JpQWdJQ0FnSUdsbUtIQnlaWFlwY0hKbGRpNXVJRDBnWlc1MGNuazdYRzRnSUNBZ0lDQjBhR0YwVzFOSldrVmRLeXM3WEc0Z0lDQWdJQ0F2THlCaFpHUWdkRzhnYVc1a1pYaGNiaUFnSUNBZ0lHbG1LR2x1WkdWNElDRTlQU0FuUmljcGRHaGhkQzVmYVZ0cGJtUmxlRjBnUFNCbGJuUnllVHRjYmlBZ0lDQjlJSEpsZEhWeWJpQjBhR0YwTzF4dUlDQjlMRnh1SUNCblpYUkZiblJ5ZVRvZ1oyVjBSVzUwY25rc1hHNGdJSE5sZEZOMGNtOXVaem9nWm5WdVkzUnBiMjRvUXl3Z1RrRk5SU3dnU1ZOZlRVRlFLWHRjYmlBZ0lDQXZMeUJoWkdRZ0xtdGxlWE1zSUM1MllXeDFaWE1zSUM1bGJuUnlhV1Z6TENCYlFFQnBkR1Z5WVhSdmNsMWNiaUFnSUNBdkx5QXlNeTR4TGpNdU5Dd2dNak11TVM0ekxqZ3NJREl6TGpFdU15NHhNU3dnTWpNdU1TNHpMakV5TENBeU15NHlMak11TlN3Z01qTXVNaTR6TGpnc0lESXpMakl1TXk0eE1Dd2dNak11TWk0ekxqRXhYRzRnSUNBZ0pHbDBaWEpFWldacGJtVW9ReXdnVGtGTlJTd2dablZ1WTNScGIyNG9hWFJsY21GMFpXUXNJR3RwYm1RcGUxeHVJQ0FnSUNBZ2RHaHBjeTVmZENBOUlHbDBaWEpoZEdWa095QWdMeThnZEdGeVoyVjBYRzRnSUNBZ0lDQjBhR2x6TGw5cklEMGdhMmx1WkRzZ0lDQWdJQ0F2THlCcmFXNWtYRzRnSUNBZ0lDQjBhR2x6TGw5c0lEMGdkVzVrWldacGJtVmtPeUF2THlCd2NtVjJhVzkxYzF4dUlDQWdJSDBzSUdaMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNCMllYSWdkR2hoZENBZ1BTQjBhR2x6WEc0Z0lDQWdJQ0FnSUN3Z2EybHVaQ0FnUFNCMGFHRjBMbDlyWEc0Z0lDQWdJQ0FnSUN3Z1pXNTBjbmtnUFNCMGFHRjBMbDlzTzF4dUlDQWdJQ0FnTHk4Z2NtVjJaWEowSUhSdklIUm9aU0JzWVhOMElHVjRhWE4wYVc1bklHVnVkSEo1WEc0Z0lDQWdJQ0IzYUdsc1pTaGxiblJ5ZVNBbUppQmxiblJ5ZVM1eUtXVnVkSEo1SUQwZ1pXNTBjbmt1Y0R0Y2JpQWdJQ0FnSUM4dklHZGxkQ0J1WlhoMElHVnVkSEo1WEc0Z0lDQWdJQ0JwWmlnaGRHaGhkQzVmZENCOGZDQWhLSFJvWVhRdVgyd2dQU0JsYm5SeWVTQTlJR1Z1ZEhKNUlEOGdaVzUwY25rdWJpQTZJSFJvWVhRdVgzUXVYMllwS1h0Y2JpQWdJQ0FnSUNBZ0x5OGdiM0lnWm1sdWFYTm9JSFJvWlNCcGRHVnlZWFJwYjI1Y2JpQWdJQ0FnSUNBZ2RHaGhkQzVmZENBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITjBaWEFvTVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QnlaWFIxY200Z2MzUmxjQ0JpZVNCcmFXNWtYRzRnSUNBZ0lDQnBaaWhyYVc1a0lEMDlJQ2RyWlhsekp5QWdLWEpsZEhWeWJpQnpkR1Z3S0RBc0lHVnVkSEo1TG1zcE8xeHVJQ0FnSUNBZ2FXWW9hMmx1WkNBOVBTQW5kbUZzZFdWekp5bHlaWFIxY200Z2MzUmxjQ2d3TENCbGJuUnllUzUyS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6ZEdWd0tEQXNJRnRsYm5SeWVTNXJMQ0JsYm5SeWVTNTJYU2s3WEc0Z0lDQWdmU3dnU1ZOZlRVRlFJRDhnSjJWdWRISnBaWE1uSURvZ0ozWmhiSFZsY3ljZ0xDQWhTVk5mVFVGUUxDQjBjblZsS1R0Y2JseHVJQ0FnSUM4dklHRmtaQ0JiUUVCemNHVmphV1Z6WFN3Z01qTXVNUzR5TGpJc0lESXpMakl1TWk0eVhHNGdJQ0FnYzJWMFUzQmxZMmxsY3loT1FVMUZLVHRjYmlBZ2ZWeHVmVHNpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZSR0YyYVdSQ2NuVmhiblF2VFdGd0xWTmxkQzV3Y205MGIzUjVjR1V1ZEc5S1UwOU9YRzUyWVhJZ1kyeGhjM052WmlBOUlISmxjWFZwY21Vb0p5NHZYMk5zWVhOemIyWW5LVnh1SUNBc0lHWnliMjBnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMW1jbTl0TFdsMFpYSmhZbXhsSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtFNUJUVVVwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z2RHOUtVMDlPS0NsN1hHNGdJQ0FnYVdZb1kyeGhjM052WmloMGFHbHpLU0FoUFNCT1FVMUZLWFJvY205M0lGUjVjR1ZGY25KdmNpaE9RVTFGSUNzZ1hDSWpkRzlLVTA5T0lHbHpiaWQwSUdkbGJtVnlhV05jSWlrN1hHNGdJQ0FnY21WMGRYSnVJR1p5YjIwb2RHaHBjeWs3WEc0Z0lIMDdYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQnlaV1JsWm1sdVpVRnNiQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsTFdGc2JDY3BYRzRnSUN3Z1oyVjBWMlZoYXlBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WlhSaEp5a3VaMlYwVjJWaGExeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQnBjMDlpYW1WamRDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWVc1SmJuTjBZVzVqWlNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTFwYm5OMFlXNWpaU2NwWEc0Z0lDd2dabTl5VDJZZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bWIzSXRiMlluS1Z4dUlDQXNJR055WldGMFpVRnljbUY1VFdWMGFHOWtJRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0YldWMGFHOWtjeWNwWEc0Z0lDd2dKR2hoY3lBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTW5LVnh1SUNBc0lHRnljbUY1Um1sdVpDQWdJQ0FnSUNBZ0lEMGdZM0psWVhSbFFYSnlZWGxOWlhSb2IyUW9OU2xjYmlBZ0xDQmhjbkpoZVVacGJtUkpibVJsZUNBZ0lDQTlJR055WldGMFpVRnljbUY1VFdWMGFHOWtLRFlwWEc0Z0lDd2dhV1FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0F3TzF4dVhHNHZMeUJtWVd4c1ltRmpheUJtYjNJZ2RXNWpZWFZuYUhRZ1puSnZlbVZ1SUd0bGVYTmNiblpoY2lCMWJtTmhkV2RvZEVaeWIzcGxibE4wYjNKbElEMGdablZ1WTNScGIyNG9kR2hoZENsN1hHNGdJSEpsZEhWeWJpQjBhR0YwTGw5c0lIeDhJQ2gwYUdGMExsOXNJRDBnYm1WM0lGVnVZMkYxWjJoMFJuSnZlbVZ1VTNSdmNtVXBPMXh1ZlR0Y2JuWmhjaUJWYm1OaGRXZG9kRVp5YjNwbGJsTjBiM0psSUQwZ1puVnVZM1JwYjI0b0tYdGNiaUFnZEdocGN5NWhJRDBnVzEwN1hHNTlPMXh1ZG1GeUlHWnBibVJWYm1OaGRXZG9kRVp5YjNwbGJpQTlJR1oxYm1OMGFXOXVLSE4wYjNKbExDQnJaWGtwZTF4dUlDQnlaWFIxY200Z1lYSnlZWGxHYVc1a0tITjBiM0psTG1Fc0lHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ0lDQnlaWFIxY200Z2FYUmJNRjBnUFQwOUlHdGxlVHRjYmlBZ2ZTazdYRzU5TzF4dVZXNWpZWFZuYUhSR2NtOTZaVzVUZEc5eVpTNXdjbTkwYjNSNWNHVWdQU0I3WEc0Z0lHZGxkRG9nWm5WdVkzUnBiMjRvYTJWNUtYdGNiaUFnSUNCMllYSWdaVzUwY25rZ1BTQm1hVzVrVlc1allYVm5hSFJHY205NlpXNG9kR2hwY3l3Z2EyVjVLVHRjYmlBZ0lDQnBaaWhsYm5SeWVTbHlaWFIxY200Z1pXNTBjbmxiTVYwN1hHNGdJSDBzWEc0Z0lHaGhjem9nWm5WdVkzUnBiMjRvYTJWNUtYdGNiaUFnSUNCeVpYUjFjbTRnSVNGbWFXNWtWVzVqWVhWbmFIUkdjbTk2Wlc0b2RHaHBjeXdnYTJWNUtUdGNiaUFnZlN4Y2JpQWdjMlYwT2lCbWRXNWpkR2x2YmloclpYa3NJSFpoYkhWbEtYdGNiaUFnSUNCMllYSWdaVzUwY25rZ1BTQm1hVzVrVlc1allYVm5hSFJHY205NlpXNG9kR2hwY3l3Z2EyVjVLVHRjYmlBZ0lDQnBaaWhsYm5SeWVTbGxiblJ5ZVZzeFhTQTlJSFpoYkhWbE8xeHVJQ0FnSUdWc2MyVWdkR2hwY3k1aExuQjFjMmdvVzJ0bGVTd2dkbUZzZFdWZEtUdGNiaUFnZlN4Y2JpQWdKMlJsYkdWMFpTYzZJR1oxYm1OMGFXOXVLR3RsZVNsN1hHNGdJQ0FnZG1GeUlHbHVaR1Y0SUQwZ1lYSnlZWGxHYVc1a1NXNWtaWGdvZEdocGN5NWhMQ0JtZFc1amRHbHZiaWhwZENsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYVhSYk1GMGdQVDA5SUd0bGVUdGNiaUFnSUNCOUtUdGNiaUFnSUNCcFppaCthVzVrWlhncGRHaHBjeTVoTG5Od2JHbGpaU2hwYm1SbGVDd2dNU2s3WEc0Z0lDQWdjbVYwZFhKdUlDRWhmbWx1WkdWNE8xeHVJQ0I5WEc1OU8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ1oyVjBRMjl1YzNSeWRXTjBiM0k2SUdaMWJtTjBhVzl1S0hkeVlYQndaWElzSUU1QlRVVXNJRWxUWDAxQlVDd2dRVVJFUlZJcGUxeHVJQ0FnSUhaaGNpQkRJRDBnZDNKaGNIQmxjaWhtZFc1amRHbHZiaWgwYUdGMExDQnBkR1Z5WVdKc1pTbDdYRzRnSUNBZ0lDQmhia2x1YzNSaGJtTmxLSFJvWVhRc0lFTXNJRTVCVFVVc0lDZGZhU2NwTzF4dUlDQWdJQ0FnZEdoaGRDNWZhU0E5SUdsa0t5czdJQ0FnSUNBZ0x5OGdZMjlzYkdWamRHbHZiaUJwWkZ4dUlDQWdJQ0FnZEdoaGRDNWZiQ0E5SUhWdVpHVm1hVzVsWkRzZ0x5OGdiR1ZoYXlCemRHOXlaU0JtYjNJZ2RXNWpZWFZuYUhRZ1puSnZlbVZ1SUc5aWFtVmpkSE5jYmlBZ0lDQWdJR2xtS0dsMFpYSmhZbXhsSUNFOUlIVnVaR1ZtYVc1bFpDbG1iM0pQWmlocGRHVnlZV0pzWlN3Z1NWTmZUVUZRTENCMGFHRjBXMEZFUkVWU1hTd2dkR2hoZENrN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnY21Wa1pXWnBibVZCYkd3b1F5NXdjbTkwYjNSNWNHVXNJSHRjYmlBZ0lDQWdJQzh2SURJekxqTXVNeTR5SUZkbFlXdE5ZWEF1Y0hKdmRHOTBlWEJsTG1SbGJHVjBaU2hyWlhrcFhHNGdJQ0FnSUNBdkx5QXlNeTQwTGpNdU15QlhaV0ZyVTJWMExuQnliM1J2ZEhsd1pTNWtaV3hsZEdVb2RtRnNkV1VwWEc0Z0lDQWdJQ0FuWkdWc1pYUmxKem9nWm5WdVkzUnBiMjRvYTJWNUtYdGNiaUFnSUNBZ0lDQWdhV1lvSVdselQySnFaV04wS0d0bGVTa3BjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCMllYSWdaR0YwWVNBOUlHZGxkRmRsWVdzb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnYVdZb1pHRjBZU0E5UFQwZ2RISjFaU2x5WlhSMWNtNGdkVzVqWVhWbmFIUkdjbTk2Wlc1VGRHOXlaU2gwYUdsektWc25aR1ZzWlhSbEoxMG9hMlY1S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdSaGRHRWdKaVlnSkdoaGN5aGtZWFJoTENCMGFHbHpMbDlwS1NBbUppQmtaV3hsZEdVZ1pHRjBZVnQwYUdsekxsOXBYVHRjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0F2THlBeU15NHpMak11TkNCWFpXRnJUV0Z3TG5CeWIzUnZkSGx3WlM1b1lYTW9hMlY1S1Z4dUlDQWdJQ0FnTHk4Z01qTXVOQzR6TGpRZ1YyVmhhMU5sZEM1d2NtOTBiM1I1Y0dVdWFHRnpLSFpoYkhWbEtWeHVJQ0FnSUNBZ2FHRnpPaUJtZFc1amRHbHZiaUJvWVhNb2EyVjVLWHRjYmlBZ0lDQWdJQ0FnYVdZb0lXbHpUMkpxWldOMEtHdGxlU2twY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFlTQTlJR2RsZEZkbFlXc29hMlY1S1R0Y2JpQWdJQ0FnSUNBZ2FXWW9aR0YwWVNBOVBUMGdkSEoxWlNseVpYUjFjbTRnZFc1allYVm5hSFJHY205NlpXNVRkRzl5WlNoMGFHbHpLUzVvWVhNb2EyVjVLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1JoZEdFZ0ppWWdKR2hoY3loa1lYUmhMQ0IwYUdsekxsOXBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ0lDQnlaWFIxY200Z1F6dGNiaUFnZlN4Y2JpQWdaR1ZtT2lCbWRXNWpkR2x2YmloMGFHRjBMQ0JyWlhrc0lIWmhiSFZsS1h0Y2JpQWdJQ0IyWVhJZ1pHRjBZU0E5SUdkbGRGZGxZV3NvWVc1UFltcGxZM1FvYTJWNUtTd2dkSEoxWlNrN1hHNGdJQ0FnYVdZb1pHRjBZU0E5UFQwZ2RISjFaU2wxYm1OaGRXZG9kRVp5YjNwbGJsTjBiM0psS0hSb1lYUXBMbk5sZENoclpYa3NJSFpoYkhWbEtUdGNiaUFnSUNCbGJITmxJR1JoZEdGYmRHaGhkQzVmYVYwZ1BTQjJZV3gxWlR0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hoZER0Y2JpQWdmU3hjYmlBZ2RXWnpkRzl5WlRvZ2RXNWpZWFZuYUhSR2NtOTZaVzVUZEc5eVpWeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ1oyeHZZbUZzSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lDUmxlSEJ2Y25RZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQnlaV1JsWm1sdVpTQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsSnlsY2JpQWdMQ0J5WldSbFptbHVaVUZzYkNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bExXRnNiQ2NwWEc0Z0lDd2diV1YwWVNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhKeWxjYmlBZ0xDQm1iM0pQWmlBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJadmNpMXZaaWNwWEc0Z0lDd2dZVzVKYm5OMFlXNWpaU0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXBibk4wWVc1alpTY3BYRzRnSUN3Z2FYTlBZbXBsWTNRZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJR1poYVd4eklDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1Z4dUlDQXNJQ1JwZEdWeVJHVjBaV04wSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjaTFrWlhSbFkzUW5LVnh1SUNBc0lITmxkRlJ2VTNSeWFXNW5WR0ZuSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2NuS1Z4dUlDQXNJR2x1YUdWeWFYUkpabEpsY1hWcGNtVmtJRDBnY21WeGRXbHlaU2duTGk5ZmFXNW9aWEpwZEMxcFppMXlaWEYxYVhKbFpDY3BPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0U1QlRVVXNJSGR5WVhCd1pYSXNJRzFsZEdodlpITXNJR052YlcxdmJpd2dTVk5mVFVGUUxDQkpVMTlYUlVGTEtYdGNiaUFnZG1GeUlFSmhjMlVnSUQwZ1oyeHZZbUZzVzA1QlRVVmRYRzRnSUNBZ0xDQkRJQ0FnSUNBOUlFSmhjMlZjYmlBZ0lDQXNJRUZFUkVWU0lEMGdTVk5mVFVGUUlEOGdKM05sZENjZ09pQW5ZV1JrSjF4dUlDQWdJQ3dnY0hKdmRHOGdQU0JESUNZbUlFTXVjSEp2ZEc5MGVYQmxYRzRnSUNBZ0xDQlBJQ0FnSUNBOUlIdDlPMXh1SUNCMllYSWdabWw0VFdWMGFHOWtJRDBnWm5WdVkzUnBiMjRvUzBWWktYdGNiaUFnSUNCMllYSWdabTRnUFNCd2NtOTBiMXRMUlZsZE8xeHVJQ0FnSUhKbFpHVm1hVzVsS0hCeWIzUnZMQ0JMUlZrc1hHNGdJQ0FnSUNCTFJWa2dQVDBnSjJSbGJHVjBaU2NnUHlCbWRXNWpkR2x2YmloaEtYdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFbFRYMWRGUVVzZ0ppWWdJV2x6VDJKcVpXTjBLR0VwSUQ4Z1ptRnNjMlVnT2lCbWJpNWpZV3hzS0hSb2FYTXNJR0VnUFQwOUlEQWdQeUF3SURvZ1lTazdYRzRnSUNBZ0lDQjlJRG9nUzBWWklEMDlJQ2RvWVhNbklEOGdablZ1WTNScGIyNGdhR0Z6S0dFcGUxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1NWTmZWMFZCU3lBbUppQWhhWE5QWW1wbFkzUW9ZU2tnUHlCbVlXeHpaU0E2SUdadUxtTmhiR3dvZEdocGN5d2dZU0E5UFQwZ01DQS9JREFnT2lCaEtUdGNiaUFnSUNBZ0lIMGdPaUJMUlZrZ1BUMGdKMmRsZENjZ1B5Qm1kVzVqZEdsdmJpQm5aWFFvWVNsN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCSlUxOVhSVUZMSUNZbUlDRnBjMDlpYW1WamRDaGhLU0EvSUhWdVpHVm1hVzVsWkNBNklHWnVMbU5oYkd3b2RHaHBjeXdnWVNBOVBUMGdNQ0EvSURBZ09pQmhLVHRjYmlBZ0lDQWdJSDBnT2lCTFJWa2dQVDBnSjJGa1pDY2dQeUJtZFc1amRHbHZiaUJoWkdRb1lTbDdJR1p1TG1OaGJHd29kR2hwY3l3Z1lTQTlQVDBnTUNBL0lEQWdPaUJoS1RzZ2NtVjBkWEp1SUhSb2FYTTdJSDFjYmlBZ0lDQWdJQ0FnT2lCbWRXNWpkR2x2YmlCelpYUW9ZU3dnWWlsN0lHWnVMbU5oYkd3b2RHaHBjeXdnWVNBOVBUMGdNQ0EvSURBZ09pQmhMQ0JpS1RzZ2NtVjBkWEp1SUhSb2FYTTdJSDFjYmlBZ0lDQXBPMXh1SUNCOU8xeHVJQ0JwWmloMGVYQmxiMllnUXlBaFBTQW5ablZ1WTNScGIyNG5JSHg4SUNFb1NWTmZWMFZCU3lCOGZDQndjbTkwYnk1bWIzSkZZV05vSUNZbUlDRm1ZV2xzY3lobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUc1bGR5QkRLQ2t1Wlc1MGNtbGxjeWdwTG01bGVIUW9LVHRjYmlBZ2ZTa3BLWHRjYmlBZ0lDQXZMeUJqY21WaGRHVWdZMjlzYkdWamRHbHZiaUJqYjI1emRISjFZM1J2Y2x4dUlDQWdJRU1nUFNCamIyMXRiMjR1WjJWMFEyOXVjM1J5ZFdOMGIzSW9kM0poY0hCbGNpd2dUa0ZOUlN3Z1NWTmZUVUZRTENCQlJFUkZVaWs3WEc0Z0lDQWdjbVZrWldacGJtVkJiR3dvUXk1d2NtOTBiM1I1Y0dVc0lHMWxkR2h2WkhNcE8xeHVJQ0FnSUcxbGRHRXVUa1ZGUkNBOUlIUnlkV1U3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnZG1GeUlHbHVjM1JoYm1ObElDQWdJQ0FnSUNBZ0lDQWdJRDBnYm1WM0lFTmNiaUFnSUNBZ0lDOHZJR1ZoY214NUlHbHRjR3hsYldWdWRHRjBhVzl1Y3lCdWIzUWdjM1Z3Y0c5eWRITWdZMmhoYVc1cGJtZGNiaUFnSUNBZ0lDd2dTRUZUVGxSZlEwaEJTVTVKVGtjZ0lDQWdJQ0FnUFNCcGJuTjBZVzVqWlZ0QlJFUkZVbDBvU1ZOZlYwVkJTeUEvSUh0OUlEb2dMVEFzSURFcElDRTlJR2x1YzNSaGJtTmxYRzRnSUNBZ0lDQXZMeUJXT0NCK0lDQkRhSEp2YldsMWJTQTBNQzBnZDJWaGF5MWpiMnhzWldOMGFXOXVjeUIwYUhKdmQzTWdiMjRnY0hKcGJXbDBhWFpsY3l3Z1luVjBJSE5vYjNWc1pDQnlaWFIxY200Z1ptRnNjMlZjYmlBZ0lDQWdJQ3dnVkVoU1QxZFRYMDlPWDFCU1NVMUpWRWxXUlZNZ1BTQm1ZV2xzY3lobWRXNWpkR2x2YmlncGV5QnBibk4wWVc1alpTNW9ZWE1vTVNrN0lIMHBYRzRnSUNBZ0lDQXZMeUJ0YjNOMElHVmhjbXg1SUdsdGNHeGxiV1Z1ZEdGMGFXOXVjeUJrYjJWemJpZDBJSE4xY0hCdmNuUnpJR2wwWlhKaFlteGxjeXdnYlc5emRDQnRiMlJsY200Z0xTQnViM1FnWTJ4dmMyVWdhWFFnWTI5eWNtVmpkR3g1WEc0Z0lDQWdJQ0FzSUVGRFEwVlFWRjlKVkVWU1FVSk1SVk1nSUNBZ0lEMGdKR2wwWlhKRVpYUmxZM1FvWm5WdVkzUnBiMjRvYVhSbGNpbDdJRzVsZHlCREtHbDBaWElwT3lCOUtTQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxXNWxkMXh1SUNBZ0lDQWdMeThnWm05eUlHVmhjbXg1SUdsdGNHeGxiV1Z1ZEdGMGFXOXVjeUF0TUNCaGJtUWdLekFnYm05MElIUm9aU0J6WVcxbFhHNGdJQ0FnSUNBc0lFSlZSMGRaWDFwRlVrOGdQU0FoU1ZOZlYwVkJTeUFtSmlCbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBdkx5QldPQ0IrSUVOb2NtOXRhWFZ0SURReUxTQm1ZV2xzY3lCdmJteDVJSGRwZEdnZ05Tc2daV3hsYldWdWRITmNiaUFnSUNBZ0lDQWdkbUZ5SUNScGJuTjBZVzVqWlNBOUlHNWxkeUJES0NsY2JpQWdJQ0FnSUNBZ0lDQXNJR2x1WkdWNElDQWdJQ0E5SURVN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsS0dsdVpHVjRMUzBwSkdsdWMzUmhibU5sVzBGRVJFVlNYU2hwYm1SbGVDd2dhVzVrWlhncE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0lTUnBibk4wWVc1alpTNW9ZWE1vTFRBcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2FXWW9JVUZEUTBWUVZGOUpWRVZTUVVKTVJWTXBleUJjYmlBZ0lDQWdJRU1nUFNCM2NtRndjR1Z5S0daMWJtTjBhVzl1S0hSaGNtZGxkQ3dnYVhSbGNtRmliR1VwZTF4dUlDQWdJQ0FnSUNCaGJrbHVjM1JoYm1ObEtIUmhjbWRsZEN3Z1F5d2dUa0ZOUlNrN1hHNGdJQ0FnSUNBZ0lIWmhjaUIwYUdGMElEMGdhVzVvWlhKcGRFbG1VbVZ4ZFdseVpXUW9ibVYzSUVKaGMyVXNJSFJoY21kbGRDd2dReWs3WEc0Z0lDQWdJQ0FnSUdsbUtHbDBaWEpoWW14bElDRTlJSFZ1WkdWbWFXNWxaQ2xtYjNKUFppaHBkR1Z5WVdKc1pTd2dTVk5mVFVGUUxDQjBhR0YwVzBGRVJFVlNYU3dnZEdoaGRDazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR0YwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCRExuQnliM1J2ZEhsd1pTQTlJSEJ5YjNSdk8xeHVJQ0FnSUNBZ2NISnZkRzh1WTI5dWMzUnlkV04wYjNJZ1BTQkRPMXh1SUNBZ0lIMWNiaUFnSUNCcFppaFVTRkpQVjFOZlQwNWZVRkpKVFVsVVNWWkZVeUI4ZkNCQ1ZVZEhXVjlhUlZKUEtYdGNiaUFnSUNBZ0lHWnBlRTFsZEdodlpDZ25aR1ZzWlhSbEp5azdYRzRnSUNBZ0lDQm1hWGhOWlhSb2IyUW9KMmhoY3ljcE8xeHVJQ0FnSUNBZ1NWTmZUVUZRSUNZbUlHWnBlRTFsZEdodlpDZ25aMlYwSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtS0VKVlIwZFpYMXBGVWs4Z2ZId2dTRUZUVGxSZlEwaEJTVTVKVGtjcFptbDRUV1YwYUc5a0tFRkVSRVZTS1R0Y2JpQWdJQ0F2THlCM1pXRnJJR052Ykd4bFkzUnBiMjV6SUhOb2IzVnNaQ0J1YjNRZ1kyOXVkR0ZwYm5NZ0xtTnNaV0Z5SUcxbGRHaHZaRnh1SUNBZ0lHbG1LRWxUWDFkRlFVc2dKaVlnY0hKdmRHOHVZMnhsWVhJcFpHVnNaWFJsSUhCeWIzUnZMbU5zWldGeU8xeHVJQ0I5WEc1Y2JpQWdjMlYwVkc5VGRISnBibWRVWVdjb1F5d2dUa0ZOUlNrN1hHNWNiaUFnVDF0T1FVMUZYU0E5SUVNN1hHNGdJQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNUhJQ3NnSkdWNGNHOXlkQzVYSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLRU1nSVQwZ1FtRnpaU2tzSUU4cE8xeHVYRzRnSUdsbUtDRkpVMTlYUlVGTEtXTnZiVzF2Ymk1elpYUlRkSEp2Ym1jb1F5d2dUa0ZOUlN3Z1NWTmZUVUZRS1R0Y2JseHVJQ0J5WlhSMWNtNGdRenRjYm4wN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJR0Z1VDJKcVpXTjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMUJ5YVcxcGRHbDJaU0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMWEJ5YVcxcGRHbDJaU2NwWEc0Z0lDd2dUbFZOUWtWU0lDQWdJQ0FnUFNBbmJuVnRZbVZ5Snp0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaG9hVzUwS1h0Y2JpQWdhV1lvYUdsdWRDQWhQVDBnSjNOMGNtbHVaeWNnSmlZZ2FHbHVkQ0FoUFQwZ1RsVk5Ra1ZTSUNZbUlHaHBiblFnSVQwOUlDZGtaV1poZFd4MEp5bDBhSEp2ZHlCVWVYQmxSWEp5YjNJb0owbHVZMjl5Y21WamRDQm9hVzUwSnlrN1hHNGdJSEpsZEhWeWJpQjBiMUJ5YVcxcGRHbDJaU2hoYms5aWFtVmpkQ2gwYUdsektTd2dhR2x1ZENBaFBTQk9WVTFDUlZJcE8xeHVmVHNpTENKMllYSWdaMnh2WW1Gc0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlsY2JpQWdMQ0JqYjNKbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2JpQWdMQ0JvYVdSbElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0J5WldSbFptbHVaU0FnUFNCeVpYRjFhWEpsS0NjdUwxOXlaV1JsWm1sdVpTY3BYRzRnSUN3Z1kzUjRJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTNSNEp5bGNiaUFnTENCUVVrOVVUMVJaVUVVZ1BTQW5jSEp2ZEc5MGVYQmxKenRjYmx4dWRtRnlJQ1JsZUhCdmNuUWdQU0JtZFc1amRHbHZiaWgwZVhCbExDQnVZVzFsTENCemIzVnlZMlVwZTF4dUlDQjJZWElnU1ZOZlJrOVNRMFZFSUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1Umx4dUlDQWdJQ3dnU1ZOZlIweFBRa0ZNSUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1UjF4dUlDQWdJQ3dnU1ZOZlUxUkJWRWxESUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1VTF4dUlDQWdJQ3dnU1ZOZlVGSlBWRThnSUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1VUZ4dUlDQWdJQ3dnU1ZOZlFrbE9SQ0FnSUQwZ2RIbHdaU0FtSUNSbGVIQnZjblF1UWx4dUlDQWdJQ3dnZEdGeVoyVjBJQ0FnSUQwZ1NWTmZSMHhQUWtGTUlEOGdaMnh2WW1Gc0lEb2dTVk5mVTFSQlZFbERJRDhnWjJ4dlltRnNXMjVoYldWZElIeDhJQ2huYkc5aVlXeGJibUZ0WlYwZ1BTQjdmU2tnT2lBb1oyeHZZbUZzVzI1aGJXVmRJSHg4SUh0OUtWdFFVazlVVDFSWlVFVmRYRzRnSUNBZ0xDQmxlSEJ2Y25SeklDQWdQU0JKVTE5SFRFOUNRVXdnUHlCamIzSmxJRG9nWTI5eVpWdHVZVzFsWFNCOGZDQW9ZMjl5WlZ0dVlXMWxYU0E5SUh0OUtWeHVJQ0FnSUN3Z1pYaHdVSEp2ZEc4Z0lEMGdaWGh3YjNKMGMxdFFVazlVVDFSWlVFVmRJSHg4SUNobGVIQnZjblJ6VzFCU1QxUlBWRmxRUlYwZ1BTQjdmU2xjYmlBZ0lDQXNJR3RsZVN3Z2IzZHVMQ0J2ZFhRc0lHVjRjRHRjYmlBZ2FXWW9TVk5mUjB4UFFrRk1LWE52ZFhKalpTQTlJRzVoYldVN1hHNGdJR1p2Y2loclpYa2dhVzRnYzI5MWNtTmxLWHRjYmlBZ0lDQXZMeUJqYjI1MFlXbHVjeUJwYmlCdVlYUnBkbVZjYmlBZ0lDQnZkMjRnUFNBaFNWTmZSazlTUTBWRUlDWW1JSFJoY21kbGRDQW1KaUIwWVhKblpYUmJhMlY1WFNBaFBUMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDOHZJR1Y0Y0c5eWRDQnVZWFJwZG1VZ2IzSWdjR0Z6YzJWa1hHNGdJQ0FnYjNWMElEMGdLRzkzYmlBL0lIUmhjbWRsZENBNklITnZkWEpqWlNsYmEyVjVYVHRjYmlBZ0lDQXZMeUJpYVc1a0lIUnBiV1Z5Y3lCMGJ5Qm5iRzlpWVd3Z1ptOXlJR05oYkd3Z1puSnZiU0JsZUhCdmNuUWdZMjl1ZEdWNGRGeHVJQ0FnSUdWNGNDQTlJRWxUWDBKSlRrUWdKaVlnYjNkdUlEOGdZM1I0S0c5MWRDd2daMnh2WW1Gc0tTQTZJRWxUWDFCU1QxUlBJQ1ltSUhSNWNHVnZaaUJ2ZFhRZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUdOMGVDaEdkVzVqZEdsdmJpNWpZV3hzTENCdmRYUXBJRG9nYjNWME8xeHVJQ0FnSUM4dklHVjRkR1Z1WkNCbmJHOWlZV3hjYmlBZ0lDQnBaaWgwWVhKblpYUXBjbVZrWldacGJtVW9kR0Z5WjJWMExDQnJaWGtzSUc5MWRDd2dkSGx3WlNBbUlDUmxlSEJ2Y25RdVZTazdYRzRnSUNBZ0x5OGdaWGh3YjNKMFhHNGdJQ0FnYVdZb1pYaHdiM0owYzF0clpYbGRJQ0U5SUc5MWRDbG9hV1JsS0dWNGNHOXlkSE1zSUd0bGVTd2daWGh3S1R0Y2JpQWdJQ0JwWmloSlUxOVFVazlVVHlBbUppQmxlSEJRY205MGIxdHJaWGxkSUNFOUlHOTFkQ2xsZUhCUWNtOTBiMXRyWlhsZElEMGdiM1YwTzF4dUlDQjlYRzU5TzF4dVoyeHZZbUZzTG1OdmNtVWdQU0JqYjNKbE8xeHVMeThnZEhsd1pTQmlhWFJ0WVhCY2JpUmxlSEJ2Y25RdVJpQTlJREU3SUNBZ0x5OGdabTl5WTJWa1hHNGtaWGh3YjNKMExrY2dQU0F5T3lBZ0lDOHZJR2RzYjJKaGJGeHVKR1Y0Y0c5eWRDNVRJRDBnTkRzZ0lDQXZMeUJ6ZEdGMGFXTmNiaVJsZUhCdmNuUXVVQ0E5SURnN0lDQWdMeThnY0hKdmRHOWNiaVJsZUhCdmNuUXVRaUE5SURFMk95QWdMeThnWW1sdVpGeHVKR1Y0Y0c5eWRDNVhJRDBnTXpJN0lDQXZMeUIzY21Gd1hHNGtaWGh3YjNKMExsVWdQU0EyTkRzZ0lDOHZJSE5oWm1WY2JpUmxlSEJ2Y25RdVVpQTlJREV5T0RzZ0x5OGdjbVZoYkNCd2NtOTBieUJ0WlhSb2IyUWdabTl5SUdCc2FXSnlZWEo1WUNCY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0pHVjRjRzl5ZERzaUxDSjJZWElnVFVGVVEwZ2dQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYldGMFkyZ25LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvUzBWWktYdGNiaUFnZG1GeUlISmxJRDBnTHk0dk8xeHVJQ0IwY25rZ2UxeHVJQ0FnSUNjdkxpOG5XMHRGV1Ywb2NtVXBPMXh1SUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQnlaVnROUVZSRFNGMGdQU0JtWVd4elpUdGNiaUFnSUNBZ0lISmxkSFZ5YmlBaEp5OHVMeWRiUzBWWlhTaHlaU2s3WEc0Z0lDQWdmU0JqWVhSamFDaG1LWHNnTHlvZ1pXMXdkSGtnS2k4Z2ZWeHVJQ0I5SUhKbGRIVnliaUIwY25WbE8xeHVmVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ2FHbGtaU0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvYVdSbEp5bGNiaUFnTENCeVpXUmxabWx1WlNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWxjYmlBZ0xDQm1ZV2xzY3lBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWxjYmlBZ0xDQmtaV1pwYm1Wa0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJSbFptbHVaV1FuS1Z4dUlDQXNJSGRyY3lBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWs3WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1MwVlpMQ0JzWlc1bmRHZ3NJR1Y0WldNcGUxeHVJQ0IyWVhJZ1UxbE5RazlNSUNBZ1BTQjNhM01vUzBWWktWeHVJQ0FnSUN3Z1ptNXpJQ0FnSUNBZ1BTQmxlR1ZqS0dSbFptbHVaV1FzSUZOWlRVSlBUQ3dnSnlkYlMwVlpYU2xjYmlBZ0lDQXNJSE4wY21adUlDQWdJRDBnWm01eld6QmRYRzRnSUNBZ0xDQnllR1p1SUNBZ0lDQTlJR1p1YzFzeFhUdGNiaUFnYVdZb1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0IyWVhJZ1R5QTlJSHQ5TzF4dUlDQWdJRTliVTFsTlFrOU1YU0E5SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlBM095QjlPMXh1SUNBZ0lISmxkSFZ5YmlBbkoxdExSVmxkS0U4cElDRTlJRGM3WEc0Z0lIMHBLWHRjYmlBZ0lDQnlaV1JsWm1sdVpTaFRkSEpwYm1jdWNISnZkRzkwZVhCbExDQkxSVmtzSUhOMGNtWnVLVHRjYmlBZ0lDQm9hV1JsS0ZKbFowVjRjQzV3Y205MGIzUjVjR1VzSUZOWlRVSlBUQ3dnYkdWdVozUm9JRDA5SURKY2JpQWdJQ0FnSUM4dklESXhMakl1TlM0NElGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dWYlFFQnlaWEJzWVdObFhTaHpkSEpwYm1jc0lISmxjR3hoWTJWV1lXeDFaU2xjYmlBZ0lDQWdJQzh2SURJeExqSXVOUzR4TVNCU1pXZEZlSEF1Y0hKdmRHOTBlWEJsVzBCQWMzQnNhWFJkS0hOMGNtbHVaeXdnYkdsdGFYUXBYRzRnSUNBZ0lDQS9JR1oxYm1OMGFXOXVLSE4wY21sdVp5d2dZWEpuS1hzZ2NtVjBkWEp1SUhKNFptNHVZMkZzYkNoemRISnBibWNzSUhSb2FYTXNJR0Z5WnlrN0lIMWNiaUFnSUNBZ0lDOHZJREl4TGpJdU5TNDJJRkpsWjBWNGNDNXdjbTkwYjNSNWNHVmJRRUJ0WVhSamFGMG9jM1J5YVc1bktWeHVJQ0FnSUNBZ0x5OGdNakV1TWk0MUxqa2dVbVZuUlhod0xuQnliM1J2ZEhsd1pWdEFRSE5sWVhKamFGMG9jM1J5YVc1bktWeHVJQ0FnSUNBZ09pQm1kVzVqZEdsdmJpaHpkSEpwYm1jcGV5QnlaWFIxY200Z2NuaG1iaTVqWVd4c0tITjBjbWx1Wnl3Z2RHaHBjeWs3SUgxY2JpQWdJQ0FwTzF4dUlDQjlYRzU5T3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklESXhMakl1TlM0eklHZGxkQ0JTWldkRmVIQXVjSEp2ZEc5MGVYQmxMbVpzWVdkelhHNTJZWElnWVc1UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUhSb1lYUWdJQ0E5SUdGdVQySnFaV04wS0hSb2FYTXBYRzRnSUNBZ0xDQnlaWE4xYkhRZ1BTQW5KenRjYmlBZ2FXWW9kR2hoZEM1bmJHOWlZV3dwSUNBZ0lDQnlaWE4xYkhRZ0t6MGdKMmNuTzF4dUlDQnBaaWgwYUdGMExtbG5ibTl5WlVOaGMyVXBJSEpsYzNWc2RDQXJQU0FuYVNjN1hHNGdJR2xtS0hSb1lYUXViWFZzZEdsc2FXNWxLU0FnY21WemRXeDBJQ3M5SUNkdEp6dGNiaUFnYVdZb2RHaGhkQzUxYm1samIyUmxLU0FnSUNCeVpYTjFiSFFnS3owZ0ozVW5PMXh1SUNCcFppaDBhR0YwTG5OMGFXTnJlU2tnSUNBZ0lISmxjM1ZzZENBclBTQW5lU2M3WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OU95SXNJblpoY2lCcGMwOWlhbVZqZENBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUN3Z2MyVjBVSEp2ZEc5MGVYQmxUMllnUFNCeVpYRjFhWEpsS0NjdUwxOXpaWFF0Y0hKdmRHOG5LUzV6WlhRN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtIUm9ZWFFzSUhSaGNtZGxkQ3dnUXlsN1hHNGdJSFpoY2lCUUxDQlRJRDBnZEdGeVoyVjBMbU52Ym5OMGNuVmpkRzl5TzF4dUlDQnBaaWhUSUNFOVBTQkRJQ1ltSUhSNWNHVnZaaUJUSUQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnS0ZBZ1BTQlRMbkJ5YjNSdmRIbHdaU2tnSVQwOUlFTXVjSEp2ZEc5MGVYQmxJQ1ltSUdselQySnFaV04wS0ZBcElDWW1JSE5sZEZCeWIzUnZkSGx3WlU5bUtYdGNiaUFnSUNCelpYUlFjbTkwYjNSNWNHVlBaaWgwYUdGMExDQlFLVHRjYmlBZ2ZTQnlaWFIxY200Z2RHaGhkRHRjYm4wN0lpd2lMeThnTWpBdU1TNHlMak1nVG5WdFltVnlMbWx6U1c1MFpXZGxjaWh1ZFcxaVpYSXBYRzUyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJR1pzYjI5eUlDQWdJRDBnVFdGMGFDNW1iRzl2Y2p0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z2FYTkpiblJsWjJWeUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUNGcGMwOWlhbVZqZENocGRDa2dKaVlnYVhOR2FXNXBkR1VvYVhRcElDWW1JR1pzYjI5eUtHbDBLU0E5UFQwZ2FYUTdYRzU5T3lJc0lpOHZJRGN1TWk0NElFbHpVbVZuUlhod0tHRnlaM1Z0Wlc1MEtWeHVkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWxjYmlBZ0xDQmpiMllnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJOdlppY3BYRzRnSUN3Z1RVRlVRMGdnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25iV0YwWTJnbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQjJZWElnYVhOU1pXZEZlSEE3WEc0Z0lISmxkSFZ5YmlCcGMwOWlhbVZqZENocGRDa2dKaVlnS0NocGMxSmxaMFY0Y0NBOUlHbDBXMDFCVkVOSVhTa2dJVDA5SUhWdVpHVm1hVzVsWkNBL0lDRWhhWE5TWldkRmVIQWdPaUJqYjJZb2FYUXBJRDA5SUNkU1pXZEZlSEFuS1R0Y2JuMDdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtWVd4elpUc2lMQ0l2THlBeU1DNHlMakl1TVRRZ1RXRjBhQzVsZUhCdE1TaDRLVnh1ZG1GeUlDUmxlSEJ0TVNBOUlFMWhkR2d1Wlhod2JURTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJQ2doSkdWNGNHMHhYRzRnSUM4dklFOXNaQ0JHUmlCaWRXZGNiaUFnZkh3Z0pHVjRjRzB4S0RFd0tTQStJREl5TURJMUxqUTJOVGM1TkRnd05qY3hPU0I4ZkNBa1pYaHdiVEVvTVRBcElEd2dNakl3TWpVdU5EWTFOemswT0RBMk56RTJOVEUyT0Z4dUlDQXZMeUJVYjNJZ1FuSnZkM05sY2lCaWRXZGNiaUFnZkh3Z0pHVjRjRzB4S0MweVpTMHhOeWtnSVQwZ0xUSmxMVEUzWEc0cElEOGdablZ1WTNScGIyNGdaWGh3YlRFb2VDbDdYRzRnSUhKbGRIVnliaUFvZUNBOUlDdDRLU0E5UFNBd0lEOGdlQ0E2SUhnZ1BpQXRNV1V0TmlBbUppQjRJRHdnTVdVdE5pQS9JSGdnS3lCNElDb2dlQ0F2SURJZ09pQk5ZWFJvTG1WNGNDaDRLU0F0SURFN1hHNTlJRG9nSkdWNGNHMHhPeUlzSWk4dklESXdMakl1TWk0eU1DQk5ZWFJvTG14dlp6RndLSGdwWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUUxaGRHZ3ViRzluTVhBZ2ZId2dablZ1WTNScGIyNGdiRzluTVhBb2VDbDdYRzRnSUhKbGRIVnliaUFvZUNBOUlDdDRLU0ErSUMweFpTMDRJQ1ltSUhnZ1BDQXhaUzA0SUQ4Z2VDQXRJSGdnS2lCNElDOGdNaUE2SUUxaGRHZ3ViRzluS0RFZ0t5QjRLVHRjYm4wN0lpd2lMeThnTWpBdU1pNHlMakk0SUUxaGRHZ3VjMmxuYmloNEtWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQk5ZWFJvTG5OcFoyNGdmSHdnWm5WdVkzUnBiMjRnYzJsbmJpaDRLWHRjYmlBZ2NtVjBkWEp1SUNoNElEMGdLM2dwSUQwOUlEQWdmSHdnZUNBaFBTQjRJRDhnZUNBNklIZ2dQQ0F3SUQ4Z0xURWdPaUF4TzF4dWZUc2lMQ0oyWVhJZ1RXRndJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZaWE0yTG0xaGNDY3BYRzRnSUN3Z0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2MyaGhjbVZrSUNBOUlISmxjWFZwY21Vb0p5NHZYM05vWVhKbFpDY3BLQ2R0WlhSaFpHRjBZU2NwWEc0Z0lDd2djM1J2Y21VZ0lDQTlJSE5vWVhKbFpDNXpkRzl5WlNCOGZDQW9jMmhoY21Wa0xuTjBiM0psSUQwZ2JtVjNJQ2h5WlhGMWFYSmxLQ2N1TDJWek5pNTNaV0ZyTFcxaGNDY3BLU2s3WEc1Y2JuWmhjaUJuWlhSUGNrTnlaV0YwWlUxbGRHRmtZWFJoVFdGd0lEMGdablZ1WTNScGIyNG9kR0Z5WjJWMExDQjBZWEpuWlhSTFpYa3NJR055WldGMFpTbDdYRzRnSUhaaGNpQjBZWEpuWlhSTlpYUmhaR0YwWVNBOUlITjBiM0psTG1kbGRDaDBZWEpuWlhRcE8xeHVJQ0JwWmlnaGRHRnlaMlYwVFdWMFlXUmhkR0VwZTF4dUlDQWdJR2xtS0NGamNtVmhkR1VwY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnpkRzl5WlM1elpYUW9kR0Z5WjJWMExDQjBZWEpuWlhSTlpYUmhaR0YwWVNBOUlHNWxkeUJOWVhBcE8xeHVJQ0I5WEc0Z0lIWmhjaUJyWlhsTlpYUmhaR0YwWVNBOUlIUmhjbWRsZEUxbGRHRmtZWFJoTG1kbGRDaDBZWEpuWlhSTFpYa3BPMXh1SUNCcFppZ2hhMlY1VFdWMFlXUmhkR0VwZTF4dUlDQWdJR2xtS0NGamNtVmhkR1VwY21WMGRYSnVJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQjBZWEpuWlhSTlpYUmhaR0YwWVM1elpYUW9kR0Z5WjJWMFMyVjVMQ0JyWlhsTlpYUmhaR0YwWVNBOUlHNWxkeUJOWVhBcE8xeHVJQ0I5SUhKbGRIVnliaUJyWlhsTlpYUmhaR0YwWVR0Y2JuMDdYRzUyWVhJZ2IzSmthVzVoY25sSVlYTlBkMjVOWlhSaFpHRjBZU0E5SUdaMWJtTjBhVzl1S0UxbGRHRmtZWFJoUzJWNUxDQlBMQ0JRS1h0Y2JpQWdkbUZ5SUcxbGRHRmtZWFJoVFdGd0lEMGdaMlYwVDNKRGNtVmhkR1ZOWlhSaFpHRjBZVTFoY0NoUExDQlFMQ0JtWVd4elpTazdYRzRnSUhKbGRIVnliaUJ0WlhSaFpHRjBZVTFoY0NBOVBUMGdkVzVrWldacGJtVmtJRDhnWm1Gc2MyVWdPaUJ0WlhSaFpHRjBZVTFoY0M1b1lYTW9UV1YwWVdSaGRHRkxaWGtwTzF4dWZUdGNiblpoY2lCdmNtUnBibUZ5ZVVkbGRFOTNiazFsZEdGa1lYUmhJRDBnWm5WdVkzUnBiMjRvVFdWMFlXUmhkR0ZMWlhrc0lFOHNJRkFwZTF4dUlDQjJZWElnYldWMFlXUmhkR0ZOWVhBZ1BTQm5aWFJQY2tOeVpXRjBaVTFsZEdGa1lYUmhUV0Z3S0U4c0lGQXNJR1poYkhObEtUdGNiaUFnY21WMGRYSnVJRzFsZEdGa1lYUmhUV0Z3SUQwOVBTQjFibVJsWm1sdVpXUWdQeUIxYm1SbFptbHVaV1FnT2lCdFpYUmhaR0YwWVUxaGNDNW5aWFFvVFdWMFlXUmhkR0ZMWlhrcE8xeHVmVHRjYm5aaGNpQnZjbVJwYm1GeWVVUmxabWx1WlU5M2JrMWxkR0ZrWVhSaElEMGdablZ1WTNScGIyNG9UV1YwWVdSaGRHRkxaWGtzSUUxbGRHRmtZWFJoVm1Gc2RXVXNJRThzSUZBcGUxeHVJQ0JuWlhSUGNrTnlaV0YwWlUxbGRHRmtZWFJoVFdGd0tFOHNJRkFzSUhSeWRXVXBMbk5sZENoTlpYUmhaR0YwWVV0bGVTd2dUV1YwWVdSaGRHRldZV3gxWlNrN1hHNTlPMXh1ZG1GeUlHOXlaR2x1WVhKNVQzZHVUV1YwWVdSaGRHRkxaWGx6SUQwZ1puVnVZM1JwYjI0b2RHRnlaMlYwTENCMFlYSm5aWFJMWlhrcGUxeHVJQ0IyWVhJZ2JXVjBZV1JoZEdGTllYQWdQU0JuWlhSUGNrTnlaV0YwWlUxbGRHRmtZWFJoVFdGd0tIUmhjbWRsZEN3Z2RHRnlaMlYwUzJWNUxDQm1ZV3h6WlNsY2JpQWdJQ0FzSUd0bGVYTWdJQ0FnSUNBZ0lEMGdXMTA3WEc0Z0lHbG1LRzFsZEdGa1lYUmhUV0Z3S1cxbGRHRmtZWFJoVFdGd0xtWnZja1ZoWTJnb1puVnVZM1JwYjI0b1h5d2dhMlY1S1hzZ2EyVjVjeTV3ZFhOb0tHdGxlU2s3SUgwcE8xeHVJQ0J5WlhSMWNtNGdhMlY1Y3p0Y2JuMDdYRzUyWVhJZ2RHOU5aWFJoUzJWNUlEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z2FYUWdQVDA5SUhWdVpHVm1hVzVsWkNCOGZDQjBlWEJsYjJZZ2FYUWdQVDBnSjNONWJXSnZiQ2NnUHlCcGRDQTZJRk4wY21sdVp5aHBkQ2s3WEc1OU8xeHVkbUZ5SUdWNGNDQTlJR1oxYm1OMGFXOXVLRThwZTF4dUlDQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMUpsWm14bFkzUW5MQ0JQS1R0Y2JuMDdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZTF4dUlDQnpkRzl5WlRvZ2MzUnZjbVVzWEc0Z0lHMWhjRG9nWjJWMFQzSkRjbVZoZEdWTlpYUmhaR0YwWVUxaGNDeGNiaUFnYUdGek9pQnZjbVJwYm1GeWVVaGhjMDkzYmsxbGRHRmtZWFJoTEZ4dUlDQm5aWFE2SUc5eVpHbHVZWEo1UjJWMFQzZHVUV1YwWVdSaGRHRXNYRzRnSUhObGREb2diM0prYVc1aGNubEVaV1pwYm1WUGQyNU5aWFJoWkdGMFlTeGNiaUFnYTJWNWN6b2diM0prYVc1aGNubFBkMjVOWlhSaFpHRjBZVXRsZVhNc1hHNGdJR3RsZVRvZ2RHOU5aWFJoUzJWNUxGeHVJQ0JsZUhBNklHVjRjRnh1ZlRzaUxDSXZMeUJHYjNKalpXUWdjbVZ3YkdGalpXMWxiblFnY0hKdmRHOTBlWEJsSUdGalkyVnpjMjl5Y3lCdFpYUm9iMlJ6WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgyeHBZbkpoY25rbktYeDhJQ0Z5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwS0daMWJtTjBhVzl1S0NsN1hHNGdJSFpoY2lCTElEMGdUV0YwYUM1eVlXNWtiMjBvS1R0Y2JpQWdMeThnU1c0Z1JrWWdkR2h5YjNkeklHOXViSGtnWkdWbWFXNWxJRzFsZEdodlpITmNiaUFnWDE5a1pXWnBibVZUWlhSMFpYSmZYeTVqWVd4c0tHNTFiR3dzSUVzc0lHWjFibU4wYVc5dUtDbDdJQzhxSUdWdGNIUjVJQ292ZlNrN1hHNGdJR1JsYkdWMFpTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnRMWFR0Y2JuMHBPeUlzSW5aaGNpQm5aWFJMWlhseklDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YTJWNWN5Y3BYRzRnSUN3Z2RHOUpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnYVhORmJuVnRJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExYQnBaU2NwTG1ZN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbHpSVzUwY21sbGN5bDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWhwZENsN1hHNGdJQ0FnZG1GeUlFOGdJQ0FnSUNBOUlIUnZTVTlpYW1WamRDaHBkQ2xjYmlBZ0lDQWdJQ3dnYTJWNWN5QWdJRDBnWjJWMFMyVjVjeWhQS1Z4dUlDQWdJQ0FnTENCc1pXNW5kR2dnUFNCclpYbHpMbXhsYm1kMGFGeHVJQ0FnSUNBZ0xDQnBJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0lDQXNJSEpsYzNWc2RDQTlJRnRkWEc0Z0lDQWdJQ0FzSUd0bGVUdGNiaUFnSUNCM2FHbHNaU2hzWlc1bmRHZ2dQaUJwS1dsbUtHbHpSVzUxYlM1allXeHNLRThzSUd0bGVTQTlJR3RsZVhOYmFTc3JYU2twZTF4dUlDQWdJQ0FnY21WemRXeDBMbkIxYzJnb2FYTkZiblJ5YVdWeklEOGdXMnRsZVN3Z1QxdHJaWGxkWFNBNklFOWJhMlY1WFNrN1hHNGdJQ0FnZlNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNCOU8xeHVmVHNpTENJdkx5QmhiR3dnYjJKcVpXTjBJR3RsZVhNc0lHbHVZMngxWkdWeklHNXZiaTFsYm5WdFpYSmhZbXhsSUdGdVpDQnplVzFpYjJ4elhHNTJZWElnWjA5UVRpQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdiaWNwWEc0Z0lDd2daMDlRVXlBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d2N5Y3BYRzRnSUN3Z1lXNVBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJRkpsWm14bFkzUWdJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlrdVVtVm1iR1ZqZER0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1VtVm1iR1ZqZENBbUppQlNaV1pzWldOMExtOTNia3RsZVhNZ2ZId2dablZ1WTNScGIyNGdiM2R1UzJWNWN5aHBkQ2w3WEc0Z0lIWmhjaUJyWlhseklDQWdJQ0FnSUQwZ1owOVFUaTVtS0dGdVQySnFaV04wS0dsMEtTbGNiaUFnSUNBc0lHZGxkRk41YldKdmJITWdQU0JuVDFCVExtWTdYRzRnSUhKbGRIVnliaUJuWlhSVGVXMWliMnh6SUQ4Z2EyVjVjeTVqYjI1allYUW9aMlYwVTNsdFltOXNjeWhwZENrcElEb2dhMlY1Y3p0Y2JuMDdJaXdpZG1GeUlDUndZWEp6WlVac2IyRjBJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlrdWNHRnljMlZHYkc5aGRGeHVJQ0FzSUNSMGNtbHRJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MWFJ5YVcwbktTNTBjbWx0TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlERWdMeUFrY0dGeWMyVkdiRzloZENoeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGQzTW5LU0FySUNjdE1DY3BJQ0U5UFNBdFNXNW1hVzVwZEhrZ1B5Qm1kVzVqZEdsdmJpQndZWEp6WlVac2IyRjBLSE4wY2lsN1hHNGdJSFpoY2lCemRISnBibWNnUFNBa2RISnBiU2hUZEhKcGJtY29jM1J5S1N3Z015bGNiaUFnSUNBc0lISmxjM1ZzZENBOUlDUndZWEp6WlVac2IyRjBLSE4wY21sdVp5azdYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUWdQVDA5SURBZ0ppWWdjM1J5YVc1bkxtTm9ZWEpCZENnd0tTQTlQU0FuTFNjZ1B5QXRNQ0E2SUhKbGMzVnNkRHRjYm4wZ09pQWtjR0Z5YzJWR2JHOWhkRHNpTENKMllYSWdKSEJoY25ObFNXNTBJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlrdWNHRnljMlZKYm5SY2JpQWdMQ0FrZEhKcGJTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGRISnBiU2NwTG5SeWFXMWNiaUFnTENCM2N5QWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RkM01uS1Z4dUlDQXNJR2hsZUNBZ0lDQWdJQ0E5SUM5ZVcxeGNMU3RkUHpCYmVGaGRMenRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBa2NHRnljMlZKYm5Rb2QzTWdLeUFuTURnbktTQWhQVDBnT0NCOGZDQWtjR0Z5YzJWSmJuUW9kM01nS3lBbk1IZ3hOaWNwSUNFOVBTQXlNaUEvSUdaMWJtTjBhVzl1SUhCaGNuTmxTVzUwS0hOMGNpd2djbUZrYVhncGUxeHVJQ0IyWVhJZ2MzUnlhVzVuSUQwZ0pIUnlhVzBvVTNSeWFXNW5LSE4wY2lrc0lETXBPMXh1SUNCeVpYUjFjbTRnSkhCaGNuTmxTVzUwS0hOMGNtbHVaeXdnS0hKaFpHbDRJRDQrUGlBd0tTQjhmQ0FvYUdWNExuUmxjM1FvYzNSeWFXNW5LU0EvSURFMklEb2dNVEFwS1R0Y2JuMGdPaUFrY0dGeWMyVkpiblE3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlIQmhkR2dnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNCaGRHZ25LVnh1SUNBc0lHbHVkbTlyWlNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsdWRtOXJaU2NwWEc0Z0lDd2dZVVoxYm1OMGFXOXVJRDBnY21WeGRXbHlaU2duTGk5ZllTMW1kVzVqZEdsdmJpY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWd2S2lBdUxpNXdZWEpuY3lBcUx5bDdYRzRnSUhaaGNpQm1iaUFnSUNBZ1BTQmhSblZ1WTNScGIyNG9kR2hwY3lsY2JpQWdJQ0FzSUd4bGJtZDBhQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2hjYmlBZ0lDQXNJSEJoY21keklDQTlJRUZ5Y21GNUtHeGxibWQwYUNsY2JpQWdJQ0FzSUdrZ0lDQWdJQ0E5SURCY2JpQWdJQ0FzSUY4Z0lDQWdJQ0E5SUhCaGRHZ3VYMXh1SUNBZ0lDd2dhRzlzWkdWeUlEMGdabUZzYzJVN1hHNGdJSGRvYVd4bEtHeGxibWQwYUNBK0lHa3BhV1lvS0hCaGNtZHpXMmxkSUQwZ1lYSm5kVzFsYm5Selcya3JLMTBwSUQwOVBTQmZLV2h2YkdSbGNpQTlJSFJ5ZFdVN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3ZLaUF1TGk1aGNtZHpJQ292S1h0Y2JpQWdJQ0IyWVhJZ2RHaGhkQ0E5SUhSb2FYTmNiaUFnSUNBZ0lDd2dZVXhsYmlBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdoY2JpQWdJQ0FnSUN3Z2FpQTlJREFzSUdzZ1BTQXdMQ0JoY21kek8xeHVJQ0FnSUdsbUtDRm9iMnhrWlhJZ0ppWWdJV0ZNWlc0cGNtVjBkWEp1SUdsdWRtOXJaU2htYml3Z2NHRnlaM01zSUhSb1lYUXBPMXh1SUNBZ0lHRnlaM01nUFNCd1lYSm5jeTV6YkdsalpTZ3BPMXh1SUNBZ0lHbG1LR2h2YkdSbGNpbG1iM0lvTzJ4bGJtZDBhQ0ErSUdvN0lHb3JLeWxwWmloaGNtZHpXMnBkSUQwOVBTQmZLV0Z5WjNOYmFsMGdQU0JoY21kMWJXVnVkSE5iYXlzclhUdGNiaUFnSUNCM2FHbHNaU2hoVEdWdUlENGdheWxoY21kekxuQjFjMmdvWVhKbmRXMWxiblJ6VzJzcksxMHBPMXh1SUNBZ0lISmxkSFZ5YmlCcGJuWnZhMlVvWm00c0lHRnlaM01zSUhSb1lYUXBPMXh1SUNCOU8xeHVmVHNpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcE95SXNJblpoY2lCeVpXUmxabWx1WlNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1S0hSaGNtZGxkQ3dnYzNKakxDQnpZV1psS1h0Y2JpQWdabTl5S0haaGNpQnJaWGtnYVc0Z2MzSmpLWEpsWkdWbWFXNWxLSFJoY21kbGRDd2dhMlY1TENCemNtTmJhMlY1WFN3Z2MyRm1aU2s3WEc0Z0lISmxkSFZ5YmlCMFlYSm5aWFE3WEc1OU95SXNJblpoY2lCbmJHOWlZV3dnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVnh1SUNBc0lHaGhjeUFnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BYRzRnSUN3Z1UxSkRJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZFdsa0p5a29KM055WXljcFhHNGdJQ3dnVkU5ZlUxUlNTVTVISUQwZ0ozUnZVM1J5YVc1bkoxeHVJQ0FzSUNSMGIxTjBjbWx1WnlBOUlFWjFibU4wYVc5dVcxUlBYMU5VVWtsT1IxMWNiaUFnTENCVVVFd2dJQ0FnSUNBZ1BTQW9KeWNnS3lBa2RHOVRkSEpwYm1jcExuTndiR2wwS0ZSUFgxTlVVa2xPUnlrN1hHNWNibkpsY1hWcGNtVW9KeTR2WDJOdmNtVW5LUzVwYm5Od1pXTjBVMjkxY21ObElEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQnlaWFIxY200Z0pIUnZVM1J5YVc1bkxtTmhiR3dvYVhRcE8xeHVmVHRjYmx4dUtHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1R5d2dhMlY1TENCMllXd3NJSE5oWm1VcGUxeHVJQ0IyWVhJZ2FYTkdkVzVqZEdsdmJpQTlJSFI1Y0dWdlppQjJZV3dnUFQwZ0oyWjFibU4wYVc5dUp6dGNiaUFnYVdZb2FYTkdkVzVqZEdsdmJpbG9ZWE1vZG1Gc0xDQW5ibUZ0WlNjcElIeDhJR2hwWkdVb2RtRnNMQ0FuYm1GdFpTY3NJR3RsZVNrN1hHNGdJR2xtS0U5YmEyVjVYU0E5UFQwZ2RtRnNLWEpsZEhWeWJqdGNiaUFnYVdZb2FYTkdkVzVqZEdsdmJpbG9ZWE1vZG1Gc0xDQlRVa01wSUh4OElHaHBaR1VvZG1Gc0xDQlRVa01zSUU5YmEyVjVYU0EvSUNjbklDc2dUMXRyWlhsZElEb2dWRkJNTG1wdmFXNG9VM1J5YVc1bktHdGxlU2twS1R0Y2JpQWdhV1lvVHlBOVBUMGdaMnh2WW1Gc0tYdGNiaUFnSUNCUFcydGxlVjBnUFNCMllXdzdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdhV1lvSVhOaFptVXBlMXh1SUNBZ0lDQWdaR1ZzWlhSbElFOWJhMlY1WFR0Y2JpQWdJQ0FnSUdocFpHVW9UeXdnYTJWNUxDQjJZV3dwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaWhQVzJ0bGVWMHBUMXRyWlhsZElEMGdkbUZzTzF4dUlDQWdJQ0FnWld4elpTQm9hV1JsS0U4c0lHdGxlU3dnZG1Gc0tUdGNiaUFnSUNCOVhHNGdJSDFjYmk4dklHRmtaQ0JtWVd0bElFWjFibU4wYVc5dUkzUnZVM1J5YVc1bklHWnZjaUJqYjNKeVpXTjBJSGR2Y21zZ2QzSmhjSEJsWkNCdFpYUm9iMlJ6SUM4Z1kyOXVjM1J5ZFdOMGIzSnpJSGRwZEdnZ2JXVjBhRzlrY3lCc2FXdGxJRXh2UkdGemFDQnBjMDVoZEdsMlpWeHVmU2tvUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTENCVVQxOVRWRkpKVGtjc0lHWjFibU4wYVc5dUlIUnZVM1J5YVc1bktDbDdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdkR2hwY3lBOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUhSb2FYTmJVMUpEWFNCOGZDQWtkRzlUZEhKcGJtY3VZMkZzYkNoMGFHbHpLVHRjYm4wcE95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9jbVZuUlhod0xDQnlaWEJzWVdObEtYdGNiaUFnZG1GeUlISmxjR3hoWTJWeUlEMGdjbVZ3YkdGalpTQTlQVDBnVDJKcVpXTjBLSEpsY0d4aFkyVXBJRDhnWm5WdVkzUnBiMjRvY0dGeWRDbDdYRzRnSUNBZ2NtVjBkWEp1SUhKbGNHeGhZMlZiY0dGeWRGMDdYRzRnSUgwZ09pQnlaWEJzWVdObE8xeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQWdJSEpsZEhWeWJpQlRkSEpwYm1jb2FYUXBMbkpsY0d4aFkyVW9jbVZuUlhod0xDQnlaWEJzWVdObGNpazdYRzRnSUgwN1hHNTlPeUlzSWk4dklEY3VNaTQ1SUZOaGJXVldZV3gxWlNoNExDQjVLVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JQWW1wbFkzUXVhWE1nZkh3Z1puVnVZM1JwYjI0Z2FYTW9lQ3dnZVNsN1hHNGdJSEpsZEhWeWJpQjRJRDA5UFNCNUlEOGdlQ0FoUFQwZ01DQjhmQ0F4SUM4Z2VDQTlQVDBnTVNBdklIa2dPaUI0SUNFOUlIZ2dKaVlnZVNBaFBTQjVPMXh1ZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdaMnh2WW1Gc0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUdSUUlDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlsY2JpQWdMQ0JFUlZORFVrbFFWRTlTVXlBOUlISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlsY2JpQWdMQ0JUVUVWRFNVVlRJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZHpjR1ZqYVdWekp5azdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvUzBWWktYdGNiaUFnZG1GeUlFTWdQU0JuYkc5aVlXeGJTMFZaWFR0Y2JpQWdhV1lvUkVWVFExSkpVRlJQVWxNZ0ppWWdReUFtSmlBaFExdFRVRVZEU1VWVFhTbGtVQzVtS0VNc0lGTlFSVU5KUlZNc0lIdGNiaUFnSUNCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZWeHVJQ0I5S1R0Y2JuMDdJaXdpZG1GeUlHWmhhV3h6SUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWh0WlhSb2IyUXNJR0Z5WnlsN1hHNGdJSEpsZEhWeWJpQWhJVzFsZEdodlpDQW1KaUJtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lHRnlaeUEvSUcxbGRHaHZaQzVqWVd4c0tHNTFiR3dzSUdaMWJtTjBhVzl1S0NsN2ZTd2dNU2tnT2lCdFpYUm9iMlF1WTJGc2JDaHVkV3hzS1R0Y2JpQWdmU2s3WEc1OU95SXNJaTh2SUdobGJIQmxjaUJtYjNJZ1UzUnlhVzVuSTN0emRHRnlkSE5YYVhSb0xDQmxibVJ6VjJsMGFDd2dhVzVqYkhWa1pYTjlYRzUyWVhJZ2FYTlNaV2RGZUhBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxeVpXZGxlSEFuS1Z4dUlDQXNJR1JsWm1sdVpXUWdJRDBnY21WeGRXbHlaU2duTGk5ZlpHVm1hVzVsWkNjcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLSFJvWVhRc0lITmxZWEpqYUZOMGNtbHVaeXdnVGtGTlJTbDdYRzRnSUdsbUtHbHpVbVZuUlhod0tITmxZWEpqYUZOMGNtbHVaeWtwZEdoeWIzY2dWSGx3WlVWeWNtOXlLQ2RUZEhKcGJtY2pKeUFySUU1QlRVVWdLeUJjSWlCa2IyVnpiaWQwSUdGalkyVndkQ0J5WldkbGVDRmNJaWs3WEc0Z0lISmxkSFZ5YmlCVGRISnBibWNvWkdWbWFXNWxaQ2gwYUdGMEtTazdYRzU5T3lJc0luWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JtWVdsc2N5QWdJRDBnY21WeGRXbHlaU2duTGk5ZlptRnBiSE1uS1Z4dUlDQXNJR1JsWm1sdVpXUWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pXWnBibVZrSnlsY2JpQWdMQ0J4ZFc5MElDQWdJRDBnTDF3aUwyYzdYRzR2THlCQ0xqSXVNeTR5TGpFZ1EzSmxZWFJsU0ZSTlRDaHpkSEpwYm1jc0lIUmhaeXdnWVhSMGNtbGlkWFJsTENCMllXeDFaU2xjYm5aaGNpQmpjbVZoZEdWSVZFMU1JRDBnWm5WdVkzUnBiMjRvYzNSeWFXNW5MQ0IwWVdjc0lHRjBkSEpwWW5WMFpTd2dkbUZzZFdVcElIdGNiaUFnZG1GeUlGTWdJRDBnVTNSeWFXNW5LR1JsWm1sdVpXUW9jM1J5YVc1bktTbGNiaUFnSUNBc0lIQXhJRDBnSnp3bklDc2dkR0ZuTzF4dUlDQnBaaWhoZEhSeWFXSjFkR1VnSVQwOUlDY25LWEF4SUNzOUlDY2dKeUFySUdGMGRISnBZblYwWlNBcklDYzlYQ0luSUNzZ1UzUnlhVzVuS0haaGJIVmxLUzV5WlhCc1lXTmxLSEYxYjNRc0lDY21jWFZ2ZERzbktTQXJJQ2RjSWljN1hHNGdJSEpsZEhWeWJpQndNU0FySUNjK0p5QXJJRk1nS3lBblBDOG5JQ3NnZEdGbklDc2dKejRuTzF4dWZUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9Ua0ZOUlN3Z1pYaGxZeWw3WEc0Z0lIWmhjaUJQSUQwZ2UzMDdYRzRnSUU5YlRrRk5SVjBnUFNCbGVHVmpLR055WldGMFpVaFVUVXdwTzF4dUlDQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUdaaGFXeHpLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdkbUZ5SUhSbGMzUWdQU0FuSjF0T1FVMUZYU2duWENJbktUdGNiaUFnSUNCeVpYUjFjbTRnZEdWemRDQWhQVDBnZEdWemRDNTBiMHh2ZDJWeVEyRnpaU2dwSUh4OElIUmxjM1F1YzNCc2FYUW9KMXdpSnlrdWJHVnVaM1JvSUQ0Z016dGNiaUFnZlNrc0lDZFRkSEpwYm1jbkxDQlBLVHRjYm4wN0lpd2lMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNSak16a3ZjSEp2Y0c5ellXd3RjM1J5YVc1bkxYQmhaQzF6ZEdGeWRDMWxibVJjYm5aaGNpQjBiMHhsYm1kMGFDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnY21Wd1pXRjBJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGNtVndaV0YwSnlsY2JpQWdMQ0JrWldacGJtVmtJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxabWx1WldRbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWgwYUdGMExDQnRZWGhNWlc1bmRHZ3NJR1pwYkd4VGRISnBibWNzSUd4bFpuUXBlMXh1SUNCMllYSWdVeUFnSUNBZ0lDQWdJQ0FnSUQwZ1UzUnlhVzVuS0dSbFptbHVaV1FvZEdoaGRDa3BYRzRnSUNBZ0xDQnpkSEpwYm1kTVpXNW5kR2dnUFNCVExteGxibWQwYUZ4dUlDQWdJQ3dnWm1sc2JGTjBjaUFnSUNBZ0lEMGdabWxzYkZOMGNtbHVaeUE5UFQwZ2RXNWtaV1pwYm1Wa0lEOGdKeUFuSURvZ1UzUnlhVzVuS0dacGJHeFRkSEpwYm1jcFhHNGdJQ0FnTENCcGJuUk5ZWGhNWlc1bmRHZ2dQU0IwYjB4bGJtZDBhQ2h0WVhoTVpXNW5kR2dwTzF4dUlDQnBaaWhwYm5STllYaE1aVzVuZEdnZ1BEMGdjM1J5YVc1blRHVnVaM1JvSUh4OElHWnBiR3hUZEhJZ1BUMGdKeWNwY21WMGRYSnVJRk03WEc0Z0lIWmhjaUJtYVd4c1RHVnVJRDBnYVc1MFRXRjRUR1Z1WjNSb0lDMGdjM1J5YVc1blRHVnVaM1JvWEc0Z0lDQWdMQ0J6ZEhKcGJtZEdhV3hzWlhJZ1BTQnlaWEJsWVhRdVkyRnNiQ2htYVd4c1UzUnlMQ0JOWVhSb0xtTmxhV3dvWm1sc2JFeGxiaUF2SUdacGJHeFRkSEl1YkdWdVozUm9LU2s3WEc0Z0lHbG1LSE4wY21sdVowWnBiR3hsY2k1c1pXNW5kR2dnUGlCbWFXeHNUR1Z1S1hOMGNtbHVaMFpwYkd4bGNpQTlJSE4wY21sdVowWnBiR3hsY2k1emJHbGpaU2d3TENCbWFXeHNUR1Z1S1R0Y2JpQWdjbVYwZFhKdUlHeGxablFnUHlCemRISnBibWRHYVd4c1pYSWdLeUJUSURvZ1V5QXJJSE4wY21sdVowWnBiR3hsY2p0Y2JuMDdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ2RHOUpiblJsWjJWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNTBaV2RsY2ljcFhHNGdJQ3dnWkdWbWFXNWxaQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFpDY3BPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUhKbGNHVmhkQ2hqYjNWdWRDbDdYRzRnSUhaaGNpQnpkSElnUFNCVGRISnBibWNvWkdWbWFXNWxaQ2gwYUdsektTbGNiaUFnSUNBc0lISmxjeUE5SUNjblhHNGdJQ0FnTENCdUlDQWdQU0IwYjBsdWRHVm5aWElvWTI5MWJuUXBPMXh1SUNCcFppaHVJRHdnTUNCOGZDQnVJRDA5SUVsdVptbHVhWFI1S1hSb2NtOTNJRkpoYm1kbFJYSnliM0lvWENKRGIzVnVkQ0JqWVc0bmRDQmlaU0J1WldkaGRHbDJaVndpS1R0Y2JpQWdabTl5S0R0dUlENGdNRHNnS0c0Z1BqNCtQU0F4S1NBbUppQW9jM1J5SUNzOUlITjBjaWtwYVdZb2JpQW1JREVwY21WeklDczlJSE4wY2p0Y2JpQWdjbVYwZFhKdUlISmxjenRjYm4wN0lpd2lkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdSbFptbHVaV1FnUFNCeVpYRjFhWEpsS0NjdUwxOWtaV1pwYm1Wa0p5bGNiaUFnTENCbVlXbHNjeUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktWeHVJQ0FzSUhOd1lXTmxjeUFnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGQzTW5LVnh1SUNBc0lITndZV05sSUNBZ1BTQW5XeWNnS3lCemNHRmpaWE1nS3lBblhTZGNiaUFnTENCdWIyNGdJQ0FnSUQwZ0oxeGNkVEl3TUdKY1hIVXdNRGcxSjF4dUlDQXNJR3gwY21sdElDQWdQU0JTWldkRmVIQW9KMTRuSUNzZ2MzQmhZMlVnS3lCemNHRmpaU0FySUNjcUp5bGNiaUFnTENCeWRISnBiU0FnSUQwZ1VtVm5SWGh3S0hOd1lXTmxJQ3NnYzNCaFkyVWdLeUFuS2lRbktUdGNibHh1ZG1GeUlHVjRjRzl5ZEdWeUlEMGdablZ1WTNScGIyNG9TMFZaTENCbGVHVmpMQ0JCVEVsQlV5bDdYRzRnSUhaaGNpQmxlSEFnSUNBOUlIdDlPMXh1SUNCMllYSWdSazlTUTBVZ1BTQm1ZV2xzY3lobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUhKbGRIVnliaUFoSVhOd1lXTmxjMXRMUlZsZEtDa2dmSHdnYm05dVcwdEZXVjBvS1NBaFBTQnViMjQ3WEc0Z0lIMHBPMXh1SUNCMllYSWdabTRnUFNCbGVIQmJTMFZaWFNBOUlFWlBVa05GSUQ4Z1pYaGxZeWgwY21sdEtTQTZJSE53WVdObGMxdExSVmxkTzF4dUlDQnBaaWhCVEVsQlV5bGxlSEJiUVV4SlFWTmRJRDBnWm00N1hHNGdJQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ1JrOVNRMFVzSUNkVGRISnBibWNuTENCbGVIQXBPMXh1ZlR0Y2JseHVMeThnTVNBdFBpQlRkSEpwYm1jamRISnBiVXhsWm5SY2JpOHZJRElnTFQ0Z1UzUnlhVzVuSTNSeWFXMVNhV2RvZEZ4dUx5OGdNeUF0UGlCVGRISnBibWNqZEhKcGJWeHVkbUZ5SUhSeWFXMGdQU0JsZUhCdmNuUmxjaTUwY21sdElEMGdablZ1WTNScGIyNG9jM1J5YVc1bkxDQlVXVkJGS1h0Y2JpQWdjM1J5YVc1bklEMGdVM1J5YVc1bktHUmxabWx1WldRb2MzUnlhVzVuS1NrN1hHNGdJR2xtS0ZSWlVFVWdKaUF4S1hOMGNtbHVaeUE5SUhOMGNtbHVaeTV5WlhCc1lXTmxLR3gwY21sdExDQW5KeWs3WEc0Z0lHbG1LRlJaVUVVZ0ppQXlLWE4wY21sdVp5QTlJSE4wY21sdVp5NXlaWEJzWVdObEtISjBjbWx0TENBbkp5azdYRzRnSUhKbGRIVnliaUJ6ZEhKcGJtYzdYRzU5TzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHVjRjRzl5ZEdWeU95SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdKMXhjZURBNVhGeDRNRUZjWEhnd1FseGNlREJEWEZ4NE1FUmNYSGd5TUZ4Y2VFRXdYRngxTVRZNE1GeGNkVEU0TUVWY1hIVXlNREF3WEZ4MU1qQXdNVnhjZFRJd01ESmNYSFV5TURBekp5QXJYRzRnSUNkY1hIVXlNREEwWEZ4MU1qQXdOVnhjZFRJd01EWmNYSFV5TURBM1hGeDFNakF3T0Z4Y2RUSXdNRGxjWEhVeU1EQkJYRngxTWpBeVJseGNkVEl3TlVaY1hIVXpNREF3WEZ4MU1qQXlPRnhjZFRJd01qbGNYSFZHUlVaR0p6c2lMQ0luZFhObElITjBjbWxqZENjN1hHNXBaaWh5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BLWHRjYmlBZ2RtRnlJRXhKUWxKQlVsa2dJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXNhV0p5WVhKNUp5bGNiaUFnSUNBc0lHZHNiMkpoYkNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQWdJQ3dnWm1GcGJITWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5bGNiaUFnSUNBc0lDUmxlSEJ2Y25RZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQWdJQ3dnSkhSNWNHVmtJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1I1Y0dWa0p5bGNiaUFnSUNBc0lDUmlkV1ptWlhJZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQzFpZFdabVpYSW5LVnh1SUNBZ0lDd2dZM1I0SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTjBlQ2NwWEc0Z0lDQWdMQ0JoYmtsdWMzUmhibU5sSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YVc1emRHRnVZMlVuS1Z4dUlDQWdJQ3dnY0hKdmNHVnlkSGxFWlhOaklDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0J5YjNCbGNuUjVMV1JsYzJNbktWeHVJQ0FnSUN3Z2FHbGtaU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVnh1SUNBZ0lDd2djbVZrWldacGJtVkJiR3dnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bExXRnNiQ2NwWEc0Z0lDQWdMQ0IwYjBsdWRHVm5aWElnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc1MFpXZGxjaWNwWEc0Z0lDQWdMQ0IwYjB4bGJtZDBhQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWxjYmlBZ0lDQXNJSFJ2U1c1a1pYZ2dJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm1SbGVDY3BYRzRnSUNBZ0xDQjBiMUJ5YVcxcGRHbDJaU0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRjSEpwYldsMGFYWmxKeWxjYmlBZ0lDQXNJR2hoY3lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQWdJQ3dnYzJGdFpTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM05oYldVdGRtRnNkV1VuS1Z4dUlDQWdJQ3dnWTJ4aGMzTnZaaUFnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk5zWVhOemIyWW5LVnh1SUNBZ0lDd2dhWE5QWW1wbFkzUWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMVzlpYW1WamRDY3BYRzRnSUNBZ0xDQjBiMDlpYW1WamRDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnSUNBc0lHbHpRWEp5WVhsSmRHVnlJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MWhjbkpoZVMxcGRHVnlKeWxjYmlBZ0lDQXNJR055WldGMFpTQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFkzSmxZWFJsSnlsY2JpQWdJQ0FzSUdkbGRGQnliM1J2ZEhsd1pVOW1JQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaM0J2SnlsY2JpQWdJQ0FzSUdkUFVFNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3YmljcExtWmNiaUFnSUNBc0lHZGxkRWwwWlhKR2JpQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDJOdmNtVXVaMlYwTFdsMFpYSmhkRzl5TFcxbGRHaHZaQ2NwWEc0Z0lDQWdMQ0IxYVdRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkV2xrSnlsY2JpQWdJQ0FzSUhkcmN5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktWeHVJQ0FnSUN3Z1kzSmxZWFJsUVhKeVlYbE5aWFJvYjJRZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMVzFsZEdodlpITW5LVnh1SUNBZ0lDd2dZM0psWVhSbFFYSnlZWGxKYm1Oc2RXUmxjeUE5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFdsdVkyeDFaR1Z6SnlsY2JpQWdJQ0FzSUhOd1pXTnBaWE5EYjI1emRISjFZM1J2Y2lBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6Y0dWamFXVnpMV052Ym5OMGNuVmpkRzl5SnlsY2JpQWdJQ0FzSUVGeWNtRjVTWFJsY21GMGIzSnpJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMlZ6Tmk1aGNuSmhlUzVwZEdWeVlYUnZjaWNwWEc0Z0lDQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY21GMGIzSnpKeWxjYmlBZ0lDQXNJQ1JwZEdWeVJHVjBaV04wSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdSbGRHVmpkQ2NwWEc0Z0lDQWdMQ0J6WlhSVGNHVmphV1Z6SUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMlYwTFhOd1pXTnBaWE1uS1Z4dUlDQWdJQ3dnWVhKeVlYbEdhV3hzSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXWnBiR3duS1Z4dUlDQWdJQ3dnWVhKeVlYbERiM0I1VjJsMGFHbHVJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXTnZjSGt0ZDJsMGFHbHVKeWxjYmlBZ0lDQXNJQ1JFVUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LVnh1SUNBZ0lDd2dKRWRQVUVRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQmtKeWxjYmlBZ0lDQXNJR1JRSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNBa1JGQXVabHh1SUNBZ0lDd2daMDlRUkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUNSSFQxQkVMbVpjYmlBZ0lDQXNJRkpoYm1kbFJYSnliM0lnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1VW1GdVoyVkZjbkp2Y2x4dUlDQWdJQ3dnVkhsd1pVVnljbTl5SUNBZ0lDQWdJQ0FnSUNBOUlHZHNiMkpoYkM1VWVYQmxSWEp5YjNKY2JpQWdJQ0FzSUZWcGJuUTRRWEp5WVhrZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dVZXbHVkRGhCY25KaGVWeHVJQ0FnSUN3Z1FWSlNRVmxmUWxWR1JrVlNJQ0FnSUNBZ0lDQTlJQ2RCY25KaGVVSjFabVpsY2lkY2JpQWdJQ0FzSUZOSVFWSkZSRjlDVlVaR1JWSWdJQ0FnSUNBZ1BTQW5VMmhoY21Wa0p5QXJJRUZTVWtGWlgwSlZSa1pGVWx4dUlDQWdJQ3dnUWxsVVJWTmZVRVZTWDBWTVJVMUZUbFFnSUNBOUlDZENXVlJGVTE5UVJWSmZSVXhGVFVWT1ZDZGNiaUFnSUNBc0lGQlNUMVJQVkZsUVJTQWdJQ0FnSUNBZ0lDQWdQU0FuY0hKdmRHOTBlWEJsSjF4dUlDQWdJQ3dnUVhKeVlYbFFjbTkwYnlBZ0lDQWdJQ0FnSUNBOUlFRnljbUY1VzFCU1QxUlBWRmxRUlYxY2JpQWdJQ0FzSUNSQmNuSmhlVUoxWm1abGNpQWdJQ0FnSUNBZ1BTQWtZblZtWm1WeUxrRnljbUY1UW5WbVptVnlYRzRnSUNBZ0xDQWtSR0YwWVZacFpYY2dJQ0FnSUNBZ0lDQWdJRDBnSkdKMVptWmxjaTVFWVhSaFZtbGxkMXh1SUNBZ0lDd2dZWEp5WVhsR2IzSkZZV05vSUNBZ0lDQWdJQ0E5SUdOeVpXRjBaVUZ5Y21GNVRXVjBhRzlrS0RBcFhHNGdJQ0FnTENCaGNuSmhlVVpwYkhSbGNpQWdJQ0FnSUNBZ0lEMGdZM0psWVhSbFFYSnlZWGxOWlhSb2IyUW9NaWxjYmlBZ0lDQXNJR0Z5Y21GNVUyOXRaU0FnSUNBZ0lDQWdJQ0FnUFNCamNtVmhkR1ZCY25KaGVVMWxkR2h2WkNnektWeHVJQ0FnSUN3Z1lYSnlZWGxGZG1WeWVTQWdJQ0FnSUNBZ0lDQTlJR055WldGMFpVRnljbUY1VFdWMGFHOWtLRFFwWEc0Z0lDQWdMQ0JoY25KaGVVWnBibVFnSUNBZ0lDQWdJQ0FnSUQwZ1kzSmxZWFJsUVhKeVlYbE5aWFJvYjJRb05TbGNiaUFnSUNBc0lHRnljbUY1Um1sdVpFbHVaR1Y0SUNBZ0lDQWdQU0JqY21WaGRHVkJjbkpoZVUxbGRHaHZaQ2cyS1Z4dUlDQWdJQ3dnWVhKeVlYbEpibU5zZFdSbGN5QWdJQ0FnSUNBOUlHTnlaV0YwWlVGeWNtRjVTVzVqYkhWa1pYTW9kSEoxWlNsY2JpQWdJQ0FzSUdGeWNtRjVTVzVrWlhoUFppQWdJQ0FnSUNBZ1BTQmpjbVZoZEdWQmNuSmhlVWx1WTJ4MVpHVnpLR1poYkhObEtWeHVJQ0FnSUN3Z1lYSnlZWGxXWVd4MVpYTWdJQ0FnSUNBZ0lDQTlJRUZ5Y21GNVNYUmxjbUYwYjNKekxuWmhiSFZsYzF4dUlDQWdJQ3dnWVhKeVlYbExaWGx6SUNBZ0lDQWdJQ0FnSUNBOUlFRnljbUY1U1hSbGNtRjBiM0p6TG10bGVYTmNiaUFnSUNBc0lHRnljbUY1Ulc1MGNtbGxjeUFnSUNBZ0lDQWdQU0JCY25KaGVVbDBaWEpoZEc5eWN5NWxiblJ5YVdWelhHNGdJQ0FnTENCaGNuSmhlVXhoYzNSSmJtUmxlRTltSUNBZ0lEMGdRWEp5WVhsUWNtOTBieTVzWVhOMFNXNWtaWGhQWmx4dUlDQWdJQ3dnWVhKeVlYbFNaV1IxWTJVZ0lDQWdJQ0FnSUNBOUlFRnljbUY1VUhKdmRHOHVjbVZrZFdObFhHNGdJQ0FnTENCaGNuSmhlVkpsWkhWalpWSnBaMmgwSUNBZ0lEMGdRWEp5WVhsUWNtOTBieTV5WldSMVkyVlNhV2RvZEZ4dUlDQWdJQ3dnWVhKeVlYbEtiMmx1SUNBZ0lDQWdJQ0FnSUNBOUlFRnljbUY1VUhKdmRHOHVhbTlwYmx4dUlDQWdJQ3dnWVhKeVlYbFRiM0owSUNBZ0lDQWdJQ0FnSUNBOUlFRnljbUY1VUhKdmRHOHVjMjl5ZEZ4dUlDQWdJQ3dnWVhKeVlYbFRiR2xqWlNBZ0lDQWdJQ0FnSUNBOUlFRnljbUY1VUhKdmRHOHVjMnhwWTJWY2JpQWdJQ0FzSUdGeWNtRjVWRzlUZEhKcGJtY2dJQ0FnSUNBZ1BTQkJjbkpoZVZCeWIzUnZMblJ2VTNSeWFXNW5YRzRnSUNBZ0xDQmhjbkpoZVZSdlRHOWpZV3hsVTNSeWFXNW5JRDBnUVhKeVlYbFFjbTkwYnk1MGIweHZZMkZzWlZOMGNtbHVaMXh1SUNBZ0lDd2dTVlJGVWtGVVQxSWdJQ0FnSUNBZ0lDQWdJQ0E5SUhkcmN5Z25hWFJsY21GMGIzSW5LVnh1SUNBZ0lDd2dWRUZISUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhkcmN5Z25kRzlUZEhKcGJtZFVZV2NuS1Z4dUlDQWdJQ3dnVkZsUVJVUmZRMDlPVTFSU1ZVTlVUMUlnSUNBOUlIVnBaQ2duZEhsd1pXUmZZMjl1YzNSeWRXTjBiM0luS1Z4dUlDQWdJQ3dnUkVWR1gwTlBUbE5VVWxWRFZFOVNJQ0FnSUNBOUlIVnBaQ2duWkdWbVgyTnZibk4wY25WamRHOXlKeWxjYmlBZ0lDQXNJRUZNVEY5RFQwNVRWRkpWUTFSUFVsTWdJQ0FnUFNBa2RIbHdaV1F1UTA5T1UxUlNYRzRnSUNBZ0xDQlVXVkJGUkY5QlVsSkJXU0FnSUNBZ0lDQWdJRDBnSkhSNWNHVmtMbFJaVUVWRVhHNGdJQ0FnTENCV1NVVlhJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdKSFI1Y0dWa0xsWkpSVmRjYmlBZ0lDQXNJRmRTVDA1SFgweEZUa2RVU0NBZ0lDQWdJQ0FnUFNBblYzSnZibWNnYkdWdVozUm9JU2M3WEc1Y2JpQWdkbUZ5SUNSdFlYQWdQU0JqY21WaGRHVkJjbkpoZVUxbGRHaHZaQ2d4TENCbWRXNWpkR2x2YmloUExDQnNaVzVuZEdncGUxeHVJQ0FnSUhKbGRIVnliaUJoYkd4dlkyRjBaU2h6Y0dWamFXVnpRMjl1YzNSeWRXTjBiM0lvVHl3Z1QxdEVSVVpmUTA5T1UxUlNWVU5VVDFKZEtTd2diR1Z1WjNSb0tUdGNiaUFnZlNrN1hHNWNiaUFnZG1GeUlFeEpWRlJNUlY5RlRrUkpRVTRnUFNCbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVldsdWREaEJjbkpoZVNodVpYY2dWV2x1ZERFMlFYSnlZWGtvV3pGZEtTNWlkV1ptWlhJcFd6QmRJRDA5UFNBeE8xeHVJQ0I5S1R0Y2JseHVJQ0IyWVhJZ1JrOVNRMFZFWDFORlZDQTlJQ0VoVldsdWREaEJjbkpoZVNBbUppQWhJVlZwYm5RNFFYSnlZWGxiVUZKUFZFOVVXVkJGWFM1elpYUWdKaVlnWm1GcGJITW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQnVaWGNnVldsdWREaEJjbkpoZVNneEtTNXpaWFFvZTMwcE8xeHVJQ0I5S1R0Y2JseHVJQ0IyWVhJZ2MzUnlhV04wVkc5TVpXNW5kR2dnUFNCbWRXNWpkR2x2YmlocGRDd2dVMEZOUlNsN1hHNGdJQ0FnYVdZb2FYUWdQVDA5SUhWdVpHVm1hVzVsWkNsMGFISnZkeUJVZVhCbFJYSnliM0lvVjFKUFRrZGZURVZPUjFSSUtUdGNiaUFnSUNCMllYSWdiblZ0WW1WeUlEMGdLMmwwWEc0Z0lDQWdJQ0FzSUd4bGJtZDBhQ0E5SUhSdlRHVnVaM1JvS0dsMEtUdGNiaUFnSUNCcFppaFRRVTFGSUNZbUlDRnpZVzFsS0c1MWJXSmxjaXdnYkdWdVozUm9LU2wwYUhKdmR5QlNZVzVuWlVWeWNtOXlLRmRTVDA1SFgweEZUa2RVU0NrN1hHNGdJQ0FnY21WMGRYSnVJR3hsYm1kMGFEdGNiaUFnZlR0Y2JseHVJQ0IyWVhJZ2RHOVBabVp6WlhRZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnUWxsVVJWTXBlMXh1SUNBZ0lIWmhjaUJ2Wm1aelpYUWdQU0IwYjBsdWRHVm5aWElvYVhRcE8xeHVJQ0FnSUdsbUtHOW1abk5sZENBOElEQWdmSHdnYjJabWMyVjBJQ1VnUWxsVVJWTXBkR2h5YjNjZ1VtRnVaMlZGY25KdmNpZ25WM0p2Ym1jZ2IyWm1jMlYwSVNjcE8xeHVJQ0FnSUhKbGRIVnliaUJ2Wm1aelpYUTdYRzRnSUgwN1hHNWNiaUFnZG1GeUlIWmhiR2xrWVhSbElEMGdablZ1WTNScGIyNG9hWFFwZTF4dUlDQWdJR2xtS0dselQySnFaV04wS0dsMEtTQW1KaUJVV1ZCRlJGOUJVbEpCV1NCcGJpQnBkQ2x5WlhSMWNtNGdhWFE3WEc0Z0lDQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHbDBJQ3NnSnlCcGN5QnViM1FnWVNCMGVYQmxaQ0JoY25KaGVTRW5LVHRjYmlBZ2ZUdGNibHh1SUNCMllYSWdZV3hzYjJOaGRHVWdQU0JtZFc1amRHbHZiaWhETENCc1pXNW5kR2dwZTF4dUlDQWdJR2xtS0NFb2FYTlBZbXBsWTNRb1F5a2dKaVlnVkZsUVJVUmZRMDlPVTFSU1ZVTlVUMUlnYVc0Z1F5a3BlMXh1SUNBZ0lDQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtDZEpkQ0JwY3lCdWIzUWdZU0IwZVhCbFpDQmhjbkpoZVNCamIyNXpkSEoxWTNSdmNpRW5LVHRjYmlBZ0lDQjlJSEpsZEhWeWJpQnVaWGNnUXloc1pXNW5kR2dwTzF4dUlDQjlPMXh1WEc0Z0lIWmhjaUJ6Y0dWamFXVnpSbkp2YlV4cGMzUWdQU0JtZFc1amRHbHZiaWhQTENCc2FYTjBLWHRjYmlBZ0lDQnlaWFIxY200Z1puSnZiVXhwYzNRb2MzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUtFOHNJRTliUkVWR1gwTlBUbE5VVWxWRFZFOVNYU2tzSUd4cGMzUXBPMXh1SUNCOU8xeHVYRzRnSUhaaGNpQm1jbTl0VEdsemRDQTlJR1oxYm1OMGFXOXVLRU1zSUd4cGMzUXBlMXh1SUNBZ0lIWmhjaUJwYm1SbGVDQWdQU0F3WEc0Z0lDQWdJQ0FzSUd4bGJtZDBhQ0E5SUd4cGMzUXViR1Z1WjNSb1hHNGdJQ0FnSUNBc0lISmxjM1ZzZENBOUlHRnNiRzlqWVhSbEtFTXNJR3hsYm1kMGFDazdYRzRnSUNBZ2QyaHBiR1VvYkdWdVozUm9JRDRnYVc1a1pYZ3BjbVZ6ZFd4MFcybHVaR1Y0WFNBOUlHeHBjM1JiYVc1a1pYZ3JLMTA3WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdmVHRjYmx4dUlDQjJZWElnWVdSa1IyVjBkR1Z5SUQwZ1puVnVZM1JwYjI0b2FYUXNJR3RsZVN3Z2FXNTBaWEp1WVd3cGUxeHVJQ0FnSUdSUUtHbDBMQ0JyWlhrc0lIdG5aWFE2SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCMGFHbHpMbDlrVzJsdWRHVnlibUZzWFRzZ2ZYMHBPMXh1SUNCOU8xeHVYRzRnSUhaaGNpQWtabkp2YlNBOUlHWjFibU4wYVc5dUlHWnliMjBvYzI5MWNtTmxJQzhxTENCdFlYQm1iaXdnZEdocGMwRnlaeUFxTHlsN1hHNGdJQ0FnZG1GeUlFOGdJQ0FnSUNBZ1BTQjBiMDlpYW1WamRDaHpiM1Z5WTJVcFhHNGdJQ0FnSUNBc0lHRk1aVzRnSUNBZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb1hHNGdJQ0FnSUNBc0lHMWhjR1p1SUNBZ1BTQmhUR1Z1SUQ0Z01TQS9JR0Z5WjNWdFpXNTBjMXN4WFNBNklIVnVaR1ZtYVc1bFpGeHVJQ0FnSUNBZ0xDQnRZWEJ3YVc1bklEMGdiV0Z3Wm00Z0lUMDlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdMQ0JwZEdWeVJtNGdJRDBnWjJWMFNYUmxja1p1S0U4cFhHNGdJQ0FnSUNBc0lHa3NJR3hsYm1kMGFDd2dkbUZzZFdWekxDQnlaWE4xYkhRc0lITjBaWEFzSUdsMFpYSmhkRzl5TzF4dUlDQWdJR2xtS0dsMFpYSkdiaUFoUFNCMWJtUmxabWx1WldRZ0ppWWdJV2x6UVhKeVlYbEpkR1Z5S0dsMFpYSkdiaWtwZTF4dUlDQWdJQ0FnWm05eUtHbDBaWEpoZEc5eUlEMGdhWFJsY2tadUxtTmhiR3dvVHlrc0lIWmhiSFZsY3lBOUlGdGRMQ0JwSUQwZ01Ec2dJU2h6ZEdWd0lEMGdhWFJsY21GMGIzSXVibVY0ZENncEtTNWtiMjVsT3lCcEt5c3BlMXh1SUNBZ0lDQWdJQ0IyWVd4MVpYTXVjSFZ6YUNoemRHVndMblpoYkhWbEtUdGNiaUFnSUNBZ0lIMGdUeUE5SUhaaGJIVmxjenRjYmlBZ0lDQjlYRzRnSUNBZ2FXWW9iV0Z3Y0dsdVp5QW1KaUJoVEdWdUlENGdNaWx0WVhCbWJpQTlJR04wZUNodFlYQm1iaXdnWVhKbmRXMWxiblJ6V3pKZExDQXlLVHRjYmlBZ0lDQm1iM0lvYVNBOUlEQXNJR3hsYm1kMGFDQTlJSFJ2VEdWdVozUm9LRTh1YkdWdVozUm9LU3dnY21WemRXeDBJRDBnWVd4c2IyTmhkR1VvZEdocGN5d2diR1Z1WjNSb0tUc2diR1Z1WjNSb0lENGdhVHNnYVNzcktYdGNiaUFnSUNBZ0lISmxjM1ZzZEZ0cFhTQTlJRzFoY0hCcGJtY2dQeUJ0WVhCbWJpaFBXMmxkTENCcEtTQTZJRTliYVYwN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDA3WEc1Y2JpQWdkbUZ5SUNSdlppQTlJR1oxYm1OMGFXOXVJRzltS0M4cUxpNHVhWFJsYlhNcUx5bDdYRzRnSUNBZ2RtRnlJR2x1WkdWNElDQTlJREJjYmlBZ0lDQWdJQ3dnYkdWdVozUm9JRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0J5WlhOMWJIUWdQU0JoYkd4dlkyRjBaU2gwYUdsekxDQnNaVzVuZEdncE8xeHVJQ0FnSUhkb2FXeGxLR3hsYm1kMGFDQStJR2x1WkdWNEtYSmxjM1ZzZEZ0cGJtUmxlRjBnUFNCaGNtZDFiV1Z1ZEhOYmFXNWtaWGdySzEwN1hHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlR0Y2JseHVJQ0F2THlCcFQxTWdVMkZtWVhKcElEWXVlQ0JtWVdsc2N5Qm9aWEpsWEc0Z0lIWmhjaUJVVDE5TVQwTkJURVZmUWxWSElEMGdJU0ZWYVc1ME9FRnljbUY1SUNZbUlHWmhhV3h6S0daMWJtTjBhVzl1S0NsN0lHRnljbUY1Vkc5TWIyTmhiR1ZUZEhKcGJtY3VZMkZzYkNodVpYY2dWV2x1ZERoQmNuSmhlU2d4S1NrN0lIMHBPMXh1WEc0Z0lIWmhjaUFrZEc5TWIyTmhiR1ZUZEhKcGJtY2dQU0JtZFc1amRHbHZiaUIwYjB4dlkyRnNaVk4wY21sdVp5Z3BlMXh1SUNBZ0lISmxkSFZ5YmlCaGNuSmhlVlJ2VEc5allXeGxVM1J5YVc1bkxtRndjR3g1S0ZSUFgweFBRMEZNUlY5Q1ZVY2dQeUJoY25KaGVWTnNhV05sTG1OaGJHd29kbUZzYVdSaGRHVW9kR2hwY3lrcElEb2dkbUZzYVdSaGRHVW9kR2hwY3lrc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUgwN1hHNWNiaUFnZG1GeUlIQnliM1J2SUQwZ2UxeHVJQ0FnSUdOdmNIbFhhWFJvYVc0NklHWjFibU4wYVc5dUlHTnZjSGxYYVhSb2FXNG9kR0Z5WjJWMExDQnpkR0Z5ZENBdktpd2daVzVrSUNvdktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVU52Y0hsWGFYUm9hVzR1WTJGc2JDaDJZV3hwWkdGMFpTaDBhR2x6S1N3Z2RHRnlaMlYwTENCemRHRnlkQ3dnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURJZ1B5QmhjbWQxYldWdWRITmJNbDBnT2lCMWJtUmxabWx1WldRcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnWlhabGNuazZJR1oxYm1OMGFXOXVJR1YyWlhKNUtHTmhiR3hpWVdOclptNGdMeW9zSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVSWFpsY25rb2RtRnNhV1JoZEdVb2RHaHBjeWtzSUdOaGJHeGlZV05yWm00c0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHWnBiR3c2SUdaMWJtTjBhVzl1SUdacGJHd29kbUZzZFdVZ0x5b3NJSE4wWVhKMExDQmxibVFnS2k4cGV5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ0lDQnlaWFIxY200Z1lYSnlZWGxHYVd4c0xtRndjR3g1S0haaGJHbGtZWFJsS0hSb2FYTXBMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQWdJSDBzWEc0Z0lDQWdabWxzZEdWeU9pQm1kVzVqZEdsdmJpQm1hV3gwWlhJb1kyRnNiR0poWTJ0bWJpQXZLaXdnZEdocGMwRnlaeUFxTHlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzNCbFkybGxjMFp5YjIxTWFYTjBLSFJvYVhNc0lHRnljbUY1Um1sc2RHVnlLSFpoYkdsa1lYUmxLSFJvYVhNcExDQmpZV3hzWW1GamEyWnVMRnh1SUNBZ0lDQWdJQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkNrcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnWm1sdVpEb2dablZ1WTNScGIyNGdabWx1WkNod2NtVmthV05oZEdVZ0x5b3NJSFJvYVhOQmNtY2dLaThwZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0Z5Y21GNVJtbHVaQ2gyWVd4cFpHRjBaU2gwYUdsektTd2djSEpsWkdsallYUmxMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JtYVc1a1NXNWtaWGc2SUdaMWJtTjBhVzl1SUdacGJtUkpibVJsZUNod2NtVmthV05oZEdVZ0x5b3NJSFJvYVhOQmNtY2dLaThwZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0Z5Y21GNVJtbHVaRWx1WkdWNEtIWmhiR2xrWVhSbEtIUm9hWE1wTENCd2NtVmthV05oZEdVc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHWnZja1ZoWTJnNklHWjFibU4wYVc5dUlHWnZja1ZoWTJnb1kyRnNiR0poWTJ0bWJpQXZLaXdnZEdocGMwRnlaeUFxTHlsN1hHNGdJQ0FnSUNCaGNuSmhlVVp2Y2tWaFkyZ29kbUZzYVdSaGRHVW9kR2hwY3lrc0lHTmhiR3hpWVdOclptNHNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR2x1WkdWNFQyWTZJR1oxYm1OMGFXOXVJR2x1WkdWNFQyWW9jMlZoY21Ob1JXeGxiV1Z1ZENBdktpd2dabkp2YlVsdVpHVjRJQ292S1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoY25KaGVVbHVaR1Y0VDJZb2RtRnNhV1JoZEdVb2RHaHBjeWtzSUhObFlYSmphRVZzWlcxbGJuUXNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF4SUQ4Z1lYSm5kVzFsYm5Seld6RmRJRG9nZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR2x1WTJ4MVpHVnpPaUJtZFc1amRHbHZiaUJwYm1Oc2RXUmxjeWh6WldGeVkyaEZiR1Z0Wlc1MElDOHFMQ0JtY205dFNXNWtaWGdnS2k4cGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVTVzVqYkhWa1pYTW9kbUZzYVdSaGRHVW9kR2hwY3lrc0lITmxZWEpqYUVWc1pXMWxiblFzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElEOGdZWEpuZFcxbGJuUnpXekZkSURvZ2RXNWtaV1pwYm1Wa0tUdGNiaUFnSUNCOUxGeHVJQ0FnSUdwdmFXNDZJR1oxYm1OMGFXOXVJR3B2YVc0b2MyVndZWEpoZEc5eUtYc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFiblZ6WldRdGRtRnljMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnljbUY1U205cGJpNWhjSEJzZVNoMllXeHBaR0YwWlNoMGFHbHpLU3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJR3hoYzNSSmJtUmxlRTltT2lCbWRXNWpkR2x2YmlCc1lYTjBTVzVrWlhoUFppaHpaV0Z5WTJoRmJHVnRaVzUwSUM4cUxDQm1jbTl0U1c1a1pYZ2dLaThwZXlBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFhWdWRYTmxaQzEyWVhKelhHNGdJQ0FnSUNCeVpYUjFjbTRnWVhKeVlYbE1ZWE4wU1c1a1pYaFBaaTVoY0hCc2VTaDJZV3hwWkdGMFpTaDBhR2x6S1N3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNCOUxGeHVJQ0FnSUcxaGNEb2dablZ1WTNScGIyNGdiV0Z3S0cxaGNHWnVJQzhxTENCMGFHbHpRWEpuSUNvdktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlBa2JXRndLSFpoYkdsa1lYUmxLSFJvYVhNcExDQnRZWEJtYml3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE5iTVYwZ09pQjFibVJsWm1sdVpXUXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2NtVmtkV05sT2lCbWRXNWpkR2x2YmlCeVpXUjFZMlVvWTJGc2JHSmhZMnRtYmlBdktpd2dhVzVwZEdsaGJGWmhiSFZsSUNvdktYc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFiblZ6WldRdGRtRnljMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRnljbUY1VW1Wa2RXTmxMbUZ3Y0d4NUtIWmhiR2xrWVhSbEtIUm9hWE1wTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnY21Wa2RXTmxVbWxuYUhRNklHWjFibU4wYVc5dUlISmxaSFZqWlZKcFoyaDBLR05oYkd4aVlXTnJabTRnTHlvc0lHbHVhWFJwWVd4V1lXeDFaU0FxTHlsN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm04dGRXNTFjMlZrTFhaaGNuTmNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVkpsWkhWalpWSnBaMmgwTG1Gd2NHeDVLSFpoYkdsa1lYUmxLSFJvYVhNcExDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ2NtVjJaWEp6WlRvZ1puVnVZM1JwYjI0Z2NtVjJaWEp6WlNncGUxeHVJQ0FnSUNBZ2RtRnlJSFJvWVhRZ0lDQTlJSFJvYVhOY2JpQWdJQ0FnSUNBZ0xDQnNaVzVuZEdnZ1BTQjJZV3hwWkdGMFpTaDBhR0YwS1M1c1pXNW5kR2hjYmlBZ0lDQWdJQ0FnTENCdGFXUmtiR1VnUFNCTllYUm9MbVpzYjI5eUtHeGxibWQwYUNBdklESXBYRzRnSUNBZ0lDQWdJQ3dnYVc1a1pYZ2dJRDBnTUZ4dUlDQWdJQ0FnSUNBc0lIWmhiSFZsTzF4dUlDQWdJQ0FnZDJocGJHVW9hVzVrWlhnZ1BDQnRhV1JrYkdVcGUxeHVJQ0FnSUNBZ0lDQjJZV3gxWlNBZ0lDQWdJQ0FnSUQwZ2RHaGhkRnRwYm1SbGVGMDdYRzRnSUNBZ0lDQWdJSFJvWVhSYmFXNWtaWGdySzEwZ1BTQjBhR0YwV3kwdGJHVnVaM1JvWFR0Y2JpQWdJQ0FnSUNBZ2RHaGhkRnRzWlc1bmRHaGRJQ0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdmU0J5WlhSMWNtNGdkR2hoZER0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE52YldVNklHWjFibU4wYVc5dUlITnZiV1VvWTJGc2JHSmhZMnRtYmlBdktpd2dkR2hwYzBGeVp5QXFMeWw3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZWEp5WVhsVGIyMWxLSFpoYkdsa1lYUmxLSFJvYVhNcExDQmpZV3hzWW1GamEyWnVMQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNBL0lHRnlaM1Z0Wlc1MGMxc3hYU0E2SUhWdVpHVm1hVzVsWkNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0J6YjNKME9pQm1kVzVqZEdsdmJpQnpiM0owS0dOdmJYQmhjbVZtYmlsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWVhKeVlYbFRiM0owTG1OaGJHd29kbUZzYVdSaGRHVW9kR2hwY3lrc0lHTnZiWEJoY21WbWJpazdYRzRnSUNBZ2ZTeGNiaUFnSUNCemRXSmhjbkpoZVRvZ1puVnVZM1JwYjI0Z2MzVmlZWEp5WVhrb1ltVm5hVzRzSUdWdVpDbDdYRzRnSUNBZ0lDQjJZWElnVHlBZ0lDQWdJRDBnZG1Gc2FXUmhkR1VvZEdocGN5bGNiaUFnSUNBZ0lDQWdMQ0JzWlc1bmRHZ2dQU0JQTG14bGJtZDBhRnh1SUNBZ0lDQWdJQ0FzSUNSaVpXZHBiaUE5SUhSdlNXNWtaWGdvWW1WbmFXNHNJR3hsYm1kMGFDazdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtVjNJQ2h6Y0dWamFXVnpRMjl1YzNSeWRXTjBiM0lvVHl3Z1QxdEVSVVpmUTA5T1UxUlNWVU5VVDFKZEtTa29YRzRnSUNBZ0lDQWdJRTh1WW5WbVptVnlMRnh1SUNBZ0lDQWdJQ0JQTG1KNWRHVlBabVp6WlhRZ0t5QWtZbVZuYVc0Z0tpQlBMa0paVkVWVFgxQkZVbDlGVEVWTlJVNVVMRnh1SUNBZ0lDQWdJQ0IwYjB4bGJtZDBhQ2dvWlc1a0lEMDlQU0IxYm1SbFptbHVaV1FnUHlCc1pXNW5kR2dnT2lCMGIwbHVaR1Y0S0dWdVpDd2diR1Z1WjNSb0tTa2dMU0FrWW1WbmFXNHBYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0IyWVhJZ0pITnNhV05sSUQwZ1puVnVZM1JwYjI0Z2MyeHBZMlVvYzNSaGNuUXNJR1Z1WkNsN1hHNGdJQ0FnY21WMGRYSnVJSE53WldOcFpYTkdjbTl0VEdsemRDaDBhR2x6TENCaGNuSmhlVk5zYVdObExtTmhiR3dvZG1Gc2FXUmhkR1VvZEdocGN5a3NJSE4wWVhKMExDQmxibVFwS1R0Y2JpQWdmVHRjYmx4dUlDQjJZWElnSkhObGRDQTlJR1oxYm1OMGFXOXVJSE5sZENoaGNuSmhlVXhwYTJVZ0x5b3NJRzltWm5ObGRDQXFMeWw3WEc0Z0lDQWdkbUZzYVdSaGRHVW9kR2hwY3lrN1hHNGdJQ0FnZG1GeUlHOW1abk5sZENBOUlIUnZUMlptYzJWMEtHRnlaM1Z0Wlc1MGMxc3hYU3dnTVNsY2JpQWdJQ0FnSUN3Z2JHVnVaM1JvSUQwZ2RHaHBjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDd2djM0pqSUNBZ0lEMGdkRzlQWW1wbFkzUW9ZWEp5WVhsTWFXdGxLVnh1SUNBZ0lDQWdMQ0JzWlc0Z0lDQWdQU0IwYjB4bGJtZDBhQ2h6Y21NdWJHVnVaM1JvS1Z4dUlDQWdJQ0FnTENCcGJtUmxlQ0FnUFNBd08xeHVJQ0FnSUdsbUtHeGxiaUFySUc5bVpuTmxkQ0ErSUd4bGJtZDBhQ2wwYUhKdmR5QlNZVzVuWlVWeWNtOXlLRmRTVDA1SFgweEZUa2RVU0NrN1hHNGdJQ0FnZDJocGJHVW9hVzVrWlhnZ1BDQnNaVzRwZEdocGMxdHZabVp6WlhRZ0t5QnBibVJsZUYwZ1BTQnpjbU5iYVc1a1pYZ3JLMTA3WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJQ1JwZEdWeVlYUnZjbk1nUFNCN1hHNGdJQ0FnWlc1MGNtbGxjem9nWm5WdVkzUnBiMjRnWlc1MGNtbGxjeWdwZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0Z5Y21GNVJXNTBjbWxsY3k1allXeHNLSFpoYkdsa1lYUmxLSFJvYVhNcEtUdGNiaUFnSUNCOUxGeHVJQ0FnSUd0bGVYTTZJR1oxYm1OMGFXOXVJR3RsZVhNb0tYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSmhlVXRsZVhNdVkyRnNiQ2gyWVd4cFpHRjBaU2gwYUdsektTazdYRzRnSUNBZ2ZTeGNiaUFnSUNCMllXeDFaWE02SUdaMWJtTjBhVzl1SUhaaGJIVmxjeWdwZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0Z5Y21GNVZtRnNkV1Z6TG1OaGJHd29kbUZzYVdSaGRHVW9kR2hwY3lrcE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQjJZWElnYVhOVVFVbHVaR1Y0SUQwZ1puVnVZM1JwYjI0b2RHRnlaMlYwTENCclpYa3BlMXh1SUNBZ0lISmxkSFZ5YmlCcGMwOWlhbVZqZENoMFlYSm5aWFFwWEc0Z0lDQWdJQ0FtSmlCMFlYSm5aWFJiVkZsUVJVUmZRVkpTUVZsZFhHNGdJQ0FnSUNBbUppQjBlWEJsYjJZZ2EyVjVJQ0U5SUNkemVXMWliMnduWEc0Z0lDQWdJQ0FtSmlCclpYa2dhVzRnZEdGeVoyVjBYRzRnSUNBZ0lDQW1KaUJUZEhKcGJtY29LMnRsZVNrZ1BUMGdVM1J5YVc1bktHdGxlU2s3WEc0Z0lIMDdYRzRnSUhaaGNpQWtaMlYwUkdWell5QTlJR1oxYm1OMGFXOXVJR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaDBZWEpuWlhRc0lHdGxlU2w3WEc0Z0lDQWdjbVYwZFhKdUlHbHpWRUZKYm1SbGVDaDBZWEpuWlhRc0lHdGxlU0E5SUhSdlVISnBiV2wwYVhabEtHdGxlU3dnZEhKMVpTa3BYRzRnSUNBZ0lDQS9JSEJ5YjNCbGNuUjVSR1Z6WXlneUxDQjBZWEpuWlhSYmEyVjVYU2xjYmlBZ0lDQWdJRG9nWjA5UVJDaDBZWEpuWlhRc0lHdGxlU2s3WEc0Z0lIMDdYRzRnSUhaaGNpQWtjMlYwUkdWell5QTlJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25SNUtIUmhjbWRsZEN3Z2EyVjVMQ0JrWlhOaktYdGNiaUFnSUNCcFppaHBjMVJCU1c1a1pYZ29kR0Z5WjJWMExDQnJaWGtnUFNCMGIxQnlhVzFwZEdsMlpTaHJaWGtzSUhSeWRXVXBLVnh1SUNBZ0lDQWdKaVlnYVhOUFltcGxZM1FvWkdWell5bGNiaUFnSUNBZ0lDWW1JR2hoY3loa1pYTmpMQ0FuZG1Gc2RXVW5LVnh1SUNBZ0lDQWdKaVlnSVdoaGN5aGtaWE5qTENBbloyVjBKeWxjYmlBZ0lDQWdJQ1ltSUNGb1lYTW9aR1Z6WXl3Z0ozTmxkQ2NwWEc0Z0lDQWdJQ0F2THlCVVQwUlBPaUJoWkdRZ2RtRnNhV1JoZEdsdmJpQmtaWE5qY21sd2RHOXlJSGN2YnlCallXeHNhVzVuSUdGalkyVnpjMjl5YzF4dUlDQWdJQ0FnSmlZZ0lXUmxjMk11WTI5dVptbG5kWEpoWW14bFhHNGdJQ0FnSUNBbUppQW9JV2hoY3loa1pYTmpMQ0FuZDNKcGRHRmliR1VuS1NCOGZDQmtaWE5qTG5keWFYUmhZbXhsS1Z4dUlDQWdJQ0FnSmlZZ0tDRm9ZWE1vWkdWell5d2dKMlZ1ZFcxbGNtRmliR1VuS1NCOGZDQmtaWE5qTG1WdWRXMWxjbUZpYkdVcFhHNGdJQ0FnS1h0Y2JpQWdJQ0FnSUhSaGNtZGxkRnRyWlhsZElEMGdaR1Z6WXk1MllXeDFaVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBZWEpuWlhRN1hHNGdJQ0FnZlNCbGJITmxJSEpsZEhWeWJpQmtVQ2gwWVhKblpYUXNJR3RsZVN3Z1pHVnpZeWs3WEc0Z0lIMDdYRzVjYmlBZ2FXWW9JVUZNVEY5RFQwNVRWRkpWUTFSUFVsTXBlMXh1SUNBZ0lDUkhUMUJFTG1ZZ1BTQWtaMlYwUkdWell6dGNiaUFnSUNBa1JGQXVaaUFnSUQwZ0pITmxkRVJsYzJNN1hHNGdJSDFjYmx4dUlDQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNGQlRFeGZRMDlPVTFSU1ZVTlVUMUpUTENBblQySnFaV04wSnl3Z2UxeHVJQ0FnSUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjam9nSkdkbGRFUmxjMk1zWEc0Z0lDQWdaR1ZtYVc1bFVISnZjR1Z5ZEhrNklDQWdJQ0FnSUNBZ0lDQWtjMlYwUkdWelkxeHVJQ0I5S1R0Y2JseHVJQ0JwWmlobVlXbHNjeWhtZFc1amRHbHZiaWdwZXlCaGNuSmhlVlJ2VTNSeWFXNW5MbU5oYkd3b2UzMHBPeUI5S1NsN1hHNGdJQ0FnWVhKeVlYbFViMU4wY21sdVp5QTlJR0Z5Y21GNVZHOU1iMk5oYkdWVGRISnBibWNnUFNCbWRXNWpkR2x2YmlCMGIxTjBjbWx1WnlncGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdGeWNtRjVTbTlwYmk1allXeHNLSFJvYVhNcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lIWmhjaUFrVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlNRZ1BTQnlaV1JsWm1sdVpVRnNiQ2g3ZlN3Z2NISnZkRzhwTzF4dUlDQnlaV1JsWm1sdVpVRnNiQ2drVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlNRc0lDUnBkR1Z5WVhSdmNuTXBPMXh1SUNCb2FXUmxLQ1JVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsSkN3Z1NWUkZVa0ZVVDFJc0lDUnBkR1Z5WVhSdmNuTXVkbUZzZFdWektUdGNiaUFnY21Wa1pXWnBibVZCYkd3b0pGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVWtMQ0I3WEc0Z0lDQWdjMnhwWTJVNklDQWdJQ0FnSUNBZ0lDUnpiR2xqWlN4Y2JpQWdJQ0J6WlhRNklDQWdJQ0FnSUNBZ0lDQWdKSE5sZEN4Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2pvZ0lDQWdablZ1WTNScGIyNG9LWHNnTHlvZ2JtOXZjQ0FxTHlCOUxGeHVJQ0FnSUhSdlUzUnlhVzVuT2lBZ0lDQWdJQ0JoY25KaGVWUnZVM1J5YVc1bkxGeHVJQ0FnSUhSdlRHOWpZV3hsVTNSeWFXNW5PaUFrZEc5TWIyTmhiR1ZUZEhKcGJtZGNiaUFnZlNrN1hHNGdJR0ZrWkVkbGRIUmxjaWdrVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlNRc0lDZGlkV1ptWlhJbkxDQW5ZaWNwTzF4dUlDQmhaR1JIWlhSMFpYSW9KRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VrTENBbllubDBaVTltWm5ObGRDY3NJQ2R2SnlrN1hHNGdJR0ZrWkVkbGRIUmxjaWdrVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlNRc0lDZGllWFJsVEdWdVozUm9KeXdnSjJ3bktUdGNiaUFnWVdSa1IyVjBkR1Z5S0NSVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbEpDd2dKMnhsYm1kMGFDY3NJQ2RsSnlrN1hHNGdJR1JRS0NSVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbEpDd2dWRUZITENCN1hHNGdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdkR2hwYzF0VVdWQkZSRjlCVWxKQldWMDdJSDFjYmlBZ2ZTazdYRzVjYmlBZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloTFJWa3NJRUpaVkVWVExDQjNjbUZ3Y0dWeUxDQkRURUZOVUVWRUtYdGNiaUFnSUNCRFRFRk5VRVZFSUQwZ0lTRkRURUZOVUVWRU8xeHVJQ0FnSUhaaGNpQk9RVTFGSUNBZ0lDQWdJRDBnUzBWWklDc2dLRU5NUVUxUVJVUWdQeUFuUTJ4aGJYQmxaQ2NnT2lBbkp5a2dLeUFuUVhKeVlYa25YRzRnSUNBZ0lDQXNJRWxUVGxSZlZVbE9WRGdnUFNCT1FVMUZJQ0U5SUNkVmFXNTBPRUZ5Y21GNUoxeHVJQ0FnSUNBZ0xDQkhSVlJVUlZJZ0lDQWdJRDBnSjJkbGRDY2dLeUJMUlZsY2JpQWdJQ0FnSUN3Z1UwVlVWRVZTSUNBZ0lDQTlJQ2R6WlhRbklDc2dTMFZaWEc0Z0lDQWdJQ0FzSUZSNWNHVmtRWEp5WVhrZ1BTQm5iRzlpWVd4YlRrRk5SVjFjYmlBZ0lDQWdJQ3dnUW1GelpTQWdJQ0FnSUNBOUlGUjVjR1ZrUVhKeVlYa2dmSHdnZTMxY2JpQWdJQ0FnSUN3Z1ZFRkRJQ0FnSUNBZ0lDQTlJRlI1Y0dWa1FYSnlZWGtnSmlZZ1oyVjBVSEp2ZEc5MGVYQmxUMllvVkhsd1pXUkJjbkpoZVNsY2JpQWdJQ0FnSUN3Z1JrOVNRMFZFSUNBZ0lDQTlJQ0ZVZVhCbFpFRnljbUY1SUh4OElDRWtkSGx3WldRdVFVSldYRzRnSUNBZ0lDQXNJRThnSUNBZ0lDQWdJQ0FnUFNCN2ZWeHVJQ0FnSUNBZ0xDQlVlWEJsWkVGeWNtRjVVSEp2ZEc5MGVYQmxJRDBnVkhsd1pXUkJjbkpoZVNBbUppQlVlWEJsWkVGeWNtRjVXMUJTVDFSUFZGbFFSVjA3WEc0Z0lDQWdkbUZ5SUdkbGRIUmxjaUE5SUdaMWJtTjBhVzl1S0hSb1lYUXNJR2x1WkdWNEtYdGNiaUFnSUNBZ0lIWmhjaUJrWVhSaElEMGdkR2hoZEM1ZlpEdGNiaUFnSUNBZ0lISmxkSFZ5YmlCa1lYUmhMblpiUjBWVVZFVlNYU2hwYm1SbGVDQXFJRUpaVkVWVElDc2daR0YwWVM1dkxDQk1TVlJVVEVWZlJVNUVTVUZPS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSFpoY2lCelpYUjBaWElnUFNCbWRXNWpkR2x2YmloMGFHRjBMQ0JwYm1SbGVDd2dkbUZzZFdVcGUxeHVJQ0FnSUNBZ2RtRnlJR1JoZEdFZ1BTQjBhR0YwTGw5a08xeHVJQ0FnSUNBZ2FXWW9RMHhCVFZCRlJDbDJZV3gxWlNBOUlDaDJZV3gxWlNBOUlFMWhkR2d1Y205MWJtUW9kbUZzZFdVcEtTQThJREFnUHlBd0lEb2dkbUZzZFdVZ1BpQXdlR1ptSUQ4Z01IaG1aaUE2SUhaaGJIVmxJQ1lnTUhobVpqdGNiaUFnSUNBZ0lHUmhkR0V1ZGx0VFJWUlVSVkpkS0dsdVpHVjRJQ29nUWxsVVJWTWdLeUJrWVhSaExtOHNJSFpoYkhWbExDQk1TVlJVVEVWZlJVNUVTVUZPS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSFpoY2lCaFpHUkZiR1Z0Wlc1MElEMGdablZ1WTNScGIyNG9kR2hoZEN3Z2FXNWtaWGdwZTF4dUlDQWdJQ0FnWkZBb2RHaGhkQ3dnYVc1a1pYZ3NJSHRjYmlBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJuWlhSMFpYSW9kR2hwY3l3Z2FXNWtaWGdwTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnpaWFE2SUdaMWJtTjBhVzl1S0haaGJIVmxLWHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzJWMGRHVnlLSFJvYVhNc0lHbHVaR1Y0TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdWY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnYVdZb1JrOVNRMFZFS1h0Y2JpQWdJQ0FnSUZSNWNHVmtRWEp5WVhrZ1BTQjNjbUZ3Y0dWeUtHWjFibU4wYVc5dUtIUm9ZWFFzSUdSaGRHRXNJQ1J2Wm1aelpYUXNJQ1JzWlc1bmRHZ3BlMXh1SUNBZ0lDQWdJQ0JoYmtsdWMzUmhibU5sS0hSb1lYUXNJRlI1Y0dWa1FYSnlZWGtzSUU1QlRVVXNJQ2RmWkNjcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYVc1a1pYZ2dJRDBnTUZ4dUlDQWdJQ0FnSUNBZ0lDd2diMlptYzJWMElEMGdNRnh1SUNBZ0lDQWdJQ0FnSUN3Z1luVm1abVZ5TENCaWVYUmxUR1Z1WjNSb0xDQnNaVzVuZEdnc0lHdHNZWE56TzF4dUlDQWdJQ0FnSUNCcFppZ2hhWE5QWW1wbFkzUW9aR0YwWVNrcGUxeHVJQ0FnSUNBZ0lDQWdJR3hsYm1kMGFDQWdJQ0FnUFNCemRISnBZM1JVYjB4bGJtZDBhQ2hrWVhSaExDQjBjblZsS1Z4dUlDQWdJQ0FnSUNBZ0lHSjVkR1ZNWlc1bmRHZ2dQU0JzWlc1bmRHZ2dLaUJDV1ZSRlV6dGNiaUFnSUNBZ0lDQWdJQ0JpZFdabVpYSWdJQ0FnSUQwZ2JtVjNJQ1JCY25KaGVVSjFabVpsY2loaWVYUmxUR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1LR1JoZEdFZ2FXNXpkR0Z1WTJWdlppQWtRWEp5WVhsQ2RXWm1aWElnZkh3Z0tHdHNZWE56SUQwZ1kyeGhjM052Wmloa1lYUmhLU2tnUFQwZ1FWSlNRVmxmUWxWR1JrVlNJSHg4SUd0c1lYTnpJRDA5SUZOSVFWSkZSRjlDVlVaR1JWSXBlMXh1SUNBZ0lDQWdJQ0FnSUdKMVptWmxjaUE5SUdSaGRHRTdYRzRnSUNBZ0lDQWdJQ0FnYjJabWMyVjBJRDBnZEc5UFptWnpaWFFvSkc5bVpuTmxkQ3dnUWxsVVJWTXBPMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQWtiR1Z1SUQwZ1pHRjBZUzVpZVhSbFRHVnVaM1JvTzF4dUlDQWdJQ0FnSUNBZ0lHbG1LQ1JzWlc1bmRHZ2dQVDA5SUhWdVpHVm1hVzVsWkNsN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlna2JHVnVJQ1VnUWxsVVJWTXBkR2h5YjNjZ1VtRnVaMlZGY25KdmNpaFhVazlPUjE5TVJVNUhWRWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZbmwwWlV4bGJtZDBhQ0E5SUNSc1pXNGdMU0J2Wm1aelpYUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppaGllWFJsVEdWdVozUm9JRHdnTUNsMGFISnZkeUJTWVc1blpVVnljbTl5S0ZkU1QwNUhYMHhGVGtkVVNDazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSjVkR1ZNWlc1bmRHZ2dQU0IwYjB4bGJtZDBhQ2drYkdWdVozUm9LU0FxSUVKWlZFVlRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9ZbmwwWlV4bGJtZDBhQ0FySUc5bVpuTmxkQ0ErSUNSc1pXNHBkR2h5YjNjZ1VtRnVaMlZGY25KdmNpaFhVazlPUjE5TVJVNUhWRWdwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JzWlc1bmRHZ2dQU0JpZVhSbFRHVnVaM1JvSUM4Z1FsbFVSVk03WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmloVVdWQkZSRjlCVWxKQldTQnBiaUJrWVhSaEtYdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabkp2YlV4cGMzUW9WSGx3WldSQmNuSmhlU3dnWkdGMFlTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJQ1JtY205dExtTmhiR3dvVkhsd1pXUkJjbkpoZVN3Z1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FHbGtaU2gwYUdGMExDQW5YMlFuTENCN1hHNGdJQ0FnSUNBZ0lDQWdZam9nWW5WbVptVnlMRnh1SUNBZ0lDQWdJQ0FnSUc4NklHOW1abk5sZEN4Y2JpQWdJQ0FnSUNBZ0lDQnNPaUJpZVhSbFRHVnVaM1JvTEZ4dUlDQWdJQ0FnSUNBZ0lHVTZJR3hsYm1kMGFDeGNiaUFnSUNBZ0lDQWdJQ0IyT2lCdVpYY2dKRVJoZEdGV2FXVjNLR0oxWm1abGNpbGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxLR2x1WkdWNElEd2diR1Z1WjNSb0tXRmtaRVZzWlcxbGJuUW9kR2hoZEN3Z2FXNWtaWGdyS3lrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVWdQU0JVZVhCbFpFRnljbUY1VzFCU1QxUlBWRmxRUlYwZ1BTQmpjbVZoZEdVb0pGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVWtLVHRjYmlBZ0lDQWdJR2hwWkdVb1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTd2dKMk52Ym5OMGNuVmpkRzl5Snl3Z1ZIbHdaV1JCY25KaGVTazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUtDRWthWFJsY2tSbGRHVmpkQ2htZFc1amRHbHZiaWhwZEdWeUtYdGNiaUFnSUNBZ0lDOHZJRlk0SUhkdmNtdHpJSGRwZEdnZ2FYUmxjbUYwYjNKekxDQmlkWFFnWm1GcGJITWdhVzRnYldGdWVTQnZkR2hsY2lCallYTmxjMXh1SUNBZ0lDQWdMeThnYUhSMGNITTZMeTlqYjJSbExtZHZiMmRzWlM1amIyMHZjQzkyT0M5cGMzTjFaWE12WkdWMFlXbHNQMmxrUFRRMU5USmNiaUFnSUNBZ0lHNWxkeUJVZVhCbFpFRnljbUY1S0c1MWJHd3BPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMVzVsZDF4dUlDQWdJQ0FnYm1WM0lGUjVjR1ZrUVhKeVlYa29hWFJsY2lrN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm04dGJtVjNYRzRnSUNBZ2ZTd2dkSEoxWlNrcGUxeHVJQ0FnSUNBZ1ZIbHdaV1JCY25KaGVTQTlJSGR5WVhCd1pYSW9ablZ1WTNScGIyNG9kR2hoZEN3Z1pHRjBZU3dnSkc5bVpuTmxkQ3dnSkd4bGJtZDBhQ2w3WEc0Z0lDQWdJQ0FnSUdGdVNXNXpkR0Z1WTJVb2RHaGhkQ3dnVkhsd1pXUkJjbkpoZVN3Z1RrRk5SU2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQnJiR0Z6Y3p0Y2JpQWdJQ0FnSUNBZ0x5OGdZSGR6WUNCdGIyUjFiR1VnWW5WbkxDQjBaVzF3YjNKaGNtbHNlU0J5WlcxdmRtVWdkbUZzYVdSaGRHbHZiaUJzWlc1bmRHZ2dabTl5SUZWcGJuUTRRWEp5WVhsY2JpQWdJQ0FnSUNBZ0x5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM2RsWW5OdlkydGxkSE12ZDNNdmNIVnNiQzgyTkRWY2JpQWdJQ0FnSUNBZ2FXWW9JV2x6VDJKcVpXTjBLR1JoZEdFcEtYSmxkSFZ5YmlCdVpYY2dRbUZ6WlNoemRISnBZM1JVYjB4bGJtZDBhQ2hrWVhSaExDQkpVMDVVWDFWSlRsUTRLU2s3WEc0Z0lDQWdJQ0FnSUdsbUtHUmhkR0VnYVc1emRHRnVZMlZ2WmlBa1FYSnlZWGxDZFdabVpYSWdmSHdnS0d0c1lYTnpJRDBnWTJ4aGMzTnZaaWhrWVhSaEtTa2dQVDBnUVZKU1FWbGZRbFZHUmtWU0lIeDhJR3RzWVhOeklEMDlJRk5JUVZKRlJGOUNWVVpHUlZJcGUxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQWtiR1Z1WjNSb0lDRTlQU0IxYm1SbFptbHVaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdibVYzSUVKaGMyVW9aR0YwWVN3Z2RHOVBabVp6WlhRb0pHOW1abk5sZEN3Z1FsbFVSVk1wTENBa2JHVnVaM1JvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdPaUFrYjJabWMyVjBJQ0U5UFNCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnUHlCdVpYY2dRbUZ6WlNoa1lYUmhMQ0IwYjA5bVpuTmxkQ2drYjJabWMyVjBMQ0JDV1ZSRlV5a3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dibVYzSUVKaGMyVW9aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lvVkZsUVJVUmZRVkpTUVZrZ2FXNGdaR0YwWVNseVpYUjFjbTRnWm5KdmJVeHBjM1FvVkhsd1pXUkJjbkpoZVN3Z1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFrWm5KdmJTNWpZV3hzS0ZSNWNHVmtRWEp5WVhrc0lHUmhkR0VwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCaGNuSmhlVVp2Y2tWaFkyZ29WRUZESUNFOVBTQkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVWdQeUJuVDFCT0tFSmhjMlVwTG1OdmJtTmhkQ2huVDFCT0tGUkJReWtwSURvZ1owOVFUaWhDWVhObEtTd2dablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdJQ0FnSUNBZ2FXWW9JU2hyWlhrZ2FXNGdWSGx3WldSQmNuSmhlU2twYUdsa1pTaFVlWEJsWkVGeWNtRjVMQ0JyWlhrc0lFSmhjMlZiYTJWNVhTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJRlI1Y0dWa1FYSnlZWGxiVUZKUFZFOVVXVkJGWFNBOUlGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVTdYRzRnSUNBZ0lDQnBaaWdoVEVsQ1VrRlNXU2xVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUlEMGdWSGx3WldSQmNuSmhlVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJQ1J1WVhScGRtVkpkR1Z5WVhSdmNpQWdJRDBnVkhsd1pXUkJjbkpoZVZCeWIzUnZkSGx3WlZ0SlZFVlNRVlJQVWwxY2JpQWdJQ0FnSUN3Z1EwOVNVa1ZEVkY5SlZFVlNYMDVCVFVVZ1BTQWhJU1J1WVhScGRtVkpkR1Z5WVhSdmNpQW1KaUFvSkc1aGRHbDJaVWwwWlhKaGRHOXlMbTVoYldVZ1BUMGdKM1poYkhWbGN5Y2dmSHdnSkc1aGRHbDJaVWwwWlhKaGRHOXlMbTVoYldVZ1BUMGdkVzVrWldacGJtVmtLVnh1SUNBZ0lDQWdMQ0FrYVhSbGNtRjBiM0lnSUNBZ0lDQWdJQ0E5SUNScGRHVnlZWFJ2Y25NdWRtRnNkV1Z6TzF4dUlDQWdJR2hwWkdVb1ZIbHdaV1JCY25KaGVTd2dWRmxRUlVSZlEwOU9VMVJTVlVOVVQxSXNJSFJ5ZFdVcE8xeHVJQ0FnSUdocFpHVW9WSGx3WldSQmNuSmhlVkJ5YjNSdmRIbHdaU3dnVkZsUVJVUmZRVkpTUVZrc0lFNUJUVVVwTzF4dUlDQWdJR2hwWkdVb1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTd2dWa2xGVnl3Z2RISjFaU2s3WEc0Z0lDQWdhR2xrWlNoVWVYQmxaRUZ5Y21GNVVISnZkRzkwZVhCbExDQkVSVVpmUTA5T1UxUlNWVU5VVDFJc0lGUjVjR1ZrUVhKeVlYa3BPMXh1WEc0Z0lDQWdhV1lvUTB4QlRWQkZSQ0EvSUc1bGR5QlVlWEJsWkVGeWNtRjVLREVwVzFSQlIxMGdJVDBnVGtGTlJTQTZJQ0VvVkVGSElHbHVJRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VwS1h0Y2JpQWdJQ0FnSUdSUUtGUjVjR1ZrUVhKeVlYbFFjbTkwYjNSNWNHVXNJRlJCUnl3Z2UxeHVJQ0FnSUNBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCT1FVMUZPeUI5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JQVzA1QlRVVmRJRDBnVkhsd1pXUkJjbkpoZVR0Y2JseHVJQ0FnSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVISUNzZ0pHVjRjRzl5ZEM1WElDc2dKR1Y0Y0c5eWRDNUdJQ29nS0ZSNWNHVmtRWEp5WVhrZ0lUMGdRbUZ6WlNrc0lFOHBPMXh1WEc0Z0lDQWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJRTVCVFVVc0lIdGNiaUFnSUNBZ0lFSlpWRVZUWDFCRlVsOUZURVZOUlU1VU9pQkNXVlJGVXl4Y2JpQWdJQ0FnSUdaeWIyMDZJQ1JtY205dExGeHVJQ0FnSUNBZ2IyWTZJQ1J2Wmx4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnYVdZb0lTaENXVlJGVTE5UVJWSmZSVXhGVFVWT1ZDQnBiaUJVZVhCbFpFRnljbUY1VUhKdmRHOTBlWEJsS1Nsb2FXUmxLRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1VzSUVKWlZFVlRYMUJGVWw5RlRFVk5SVTVVTENCQ1dWUkZVeWs3WEc1Y2JpQWdJQ0FrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ3dnVGtGTlJTd2djSEp2ZEc4cE8xeHVYRzRnSUNBZ2MyVjBVM0JsWTJsbGN5aE9RVTFGS1R0Y2JseHVJQ0FnSUNSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dSazlTUTBWRVgxTkZWQ3dnVGtGTlJTd2dlM05sZERvZ0pITmxkSDBwTzF4dVhHNGdJQ0FnSkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQWhRMDlTVWtWRFZGOUpWRVZTWDA1QlRVVXNJRTVCVFVVc0lDUnBkR1Z5WVhSdmNuTXBPMXh1WEc0Z0lDQWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBb1ZIbHdaV1JCY25KaGVWQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5QWhQU0JoY25KaGVWUnZVM1J5YVc1bktTd2dUa0ZOUlN3Z2UzUnZVM1J5YVc1bk9pQmhjbkpoZVZSdlUzUnlhVzVuZlNrN1hHNWNiaUFnSUNBa1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJR1poYVd4ektHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQnVaWGNnVkhsd1pXUkJjbkpoZVNneEtTNXpiR2xqWlNncE8xeHVJQ0FnSUgwcExDQk9RVTFGTENCN2MyeHBZMlU2SUNSemJHbGpaWDBwTzF4dVhHNGdJQ0FnSkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQW9abUZwYkhNb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCYk1Td2dNbDB1ZEc5TWIyTmhiR1ZUZEhKcGJtY29LU0FoUFNCdVpYY2dWSGx3WldSQmNuSmhlU2hiTVN3Z01sMHBMblJ2VEc5allXeGxVM1J5YVc1bktDbGNiaUFnSUNCOUtTQjhmQ0FoWm1GcGJITW9ablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJRlI1Y0dWa1FYSnlZWGxRY205MGIzUjVjR1V1ZEc5TWIyTmhiR1ZUZEhKcGJtY3VZMkZzYkNoYk1Td2dNbDBwTzF4dUlDQWdJSDBwS1N3Z1RrRk5SU3dnZTNSdlRHOWpZV3hsVTNSeWFXNW5PaUFrZEc5TWIyTmhiR1ZUZEhKcGJtZDlLVHRjYmx4dUlDQWdJRWwwWlhKaGRHOXljMXRPUVUxRlhTQTlJRU5QVWxKRlExUmZTVlJGVWw5T1FVMUZJRDhnSkc1aGRHbDJaVWwwWlhKaGRHOXlJRG9nSkdsMFpYSmhkRzl5TzF4dUlDQWdJR2xtS0NGTVNVSlNRVkpaSUNZbUlDRkRUMUpTUlVOVVgwbFVSVkpmVGtGTlJTbG9hV1JsS0ZSNWNHVmtRWEp5WVhsUWNtOTBiM1I1Y0dVc0lFbFVSVkpCVkU5U0xDQWthWFJsY21GMGIzSXBPMXh1SUNCOU8xeHVmU0JsYkhObElHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b0tYc2dMeW9nWlcxd2RIa2dLaThnZlRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdaMnh2WW1Gc0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lFUkZVME5TU1ZCVVQxSlRJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1Z4dUlDQXNJRXhKUWxKQlVsa2dJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYkdsaWNtRnllU2NwWEc0Z0lDd2dKSFI1Y0dWa0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwZVhCbFpDY3BYRzRnSUN3Z2FHbGtaU0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0J5WldSbFptbHVaVUZzYkNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsTFdGc2JDY3BYRzRnSUN3Z1ptRnBiSE1nSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcFhHNGdJQ3dnWVc1SmJuTjBZVzVqWlNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXBibk4wWVc1alpTY3BYRzRnSUN3Z2RHOUpiblJsWjJWeUlDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm5SbFoyVnlKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFd4bGJtZDBhQ2NwWEc0Z0lDd2daMDlRVGlBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3YmljcExtWmNiaUFnTENCa1VDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVpjYmlBZ0xDQmhjbkpoZVVacGJHd2dJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXWnBiR3duS1Z4dUlDQXNJSE5sZEZSdlUzUnlhVzVuVkdGbklEMGdjbVZ4ZFdseVpTZ25MaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2NuS1Z4dUlDQXNJRUZTVWtGWlgwSlZSa1pGVWlBZ0lEMGdKMEZ5Y21GNVFuVm1abVZ5SjF4dUlDQXNJRVJCVkVGZlZrbEZWeUFnSUNBZ0lEMGdKMFJoZEdGV2FXVjNKMXh1SUNBc0lGQlNUMVJQVkZsUVJTQWdJQ0FnSUQwZ0ozQnliM1J2ZEhsd1pTZGNiaUFnTENCWFVrOU9SMTlNUlU1SFZFZ2dJQ0E5SUNkWGNtOXVaeUJzWlc1bmRHZ2hKMXh1SUNBc0lGZFNUMDVIWDBsT1JFVllJQ0FnSUQwZ0oxZHliMjVuSUdsdVpHVjRJU2RjYmlBZ0xDQWtRWEp5WVhsQ2RXWm1aWElnSUNBOUlHZHNiMkpoYkZ0QlVsSkJXVjlDVlVaR1JWSmRYRzRnSUN3Z0pFUmhkR0ZXYVdWM0lDQWdJQ0FnUFNCbmJHOWlZV3hiUkVGVVFWOVdTVVZYWFZ4dUlDQXNJRTFoZEdnZ0lDQWdJQ0FnSUNBZ0lEMGdaMnh2WW1Gc0xrMWhkR2hjYmlBZ0xDQlNZVzVuWlVWeWNtOXlJQ0FnSUNBOUlHZHNiMkpoYkM1U1lXNW5aVVZ5Y205eVhHNGdJQ3dnU1c1bWFXNXBkSGtnSUNBZ0lDQWdQU0JuYkc5aVlXd3VTVzVtYVc1cGRIbGNiaUFnTENCQ1lYTmxRblZtWm1WeUlDQWdJQ0E5SUNSQmNuSmhlVUoxWm1abGNseHVJQ0FzSUdGaWN5QWdJQ0FnSUNBZ0lDQWdJRDBnVFdGMGFDNWhZbk5jYmlBZ0xDQndiM2NnSUNBZ0lDQWdJQ0FnSUNBOUlFMWhkR2d1Y0c5M1hHNGdJQ3dnWm14dmIzSWdJQ0FnSUNBZ0lDQWdQU0JOWVhSb0xtWnNiMjl5WEc0Z0lDd2diRzluSUNBZ0lDQWdJQ0FnSUNBZ1BTQk5ZWFJvTG14dloxeHVJQ0FzSUV4T01pQWdJQ0FnSUNBZ0lDQWdJRDBnVFdGMGFDNU1UakpjYmlBZ0xDQkNWVVpHUlZJZ0lDQWdJQ0FnSUNBOUlDZGlkV1ptWlhJblhHNGdJQ3dnUWxsVVJWOU1SVTVIVkVnZ0lDQWdQU0FuWW5sMFpVeGxibWQwYUNkY2JpQWdMQ0JDV1ZSRlgwOUdSbE5GVkNBZ0lDQTlJQ2RpZVhSbFQyWm1jMlYwSjF4dUlDQXNJQ1JDVlVaR1JWSWdJQ0FnSUNBZ0lEMGdSRVZUUTFKSlVGUlBVbE1nUHlBblgySW5JRG9nUWxWR1JrVlNYRzRnSUN3Z0pFeEZUa2RVU0NBZ0lDQWdJQ0FnUFNCRVJWTkRVa2xRVkU5U1V5QS9JQ2RmYkNjZ09pQkNXVlJGWDB4RlRrZFVTRnh1SUNBc0lDUlBSa1pUUlZRZ0lDQWdJQ0FnSUQwZ1JFVlRRMUpKVUZSUFVsTWdQeUFuWDI4bklEb2dRbGxVUlY5UFJrWlRSVlE3WEc1Y2JpOHZJRWxGUlVVM05UUWdZMjl1ZG1WeWMybHZibk1nWW1GelpXUWdiMjRnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJabGNtOXpjeTlwWldWbE56VTBYRzUyWVhJZ2NHRmphMGxGUlVVM05UUWdQU0JtZFc1amRHbHZiaWgyWVd4MVpTd2diVXhsYml3Z2JrSjVkR1Z6S1h0Y2JpQWdkbUZ5SUdKMVptWmxjaUE5SUVGeWNtRjVLRzVDZVhSbGN5bGNiaUFnSUNBc0lHVk1aVzRnSUNBOUlHNUNlWFJsY3lBcUlEZ2dMU0J0VEdWdUlDMGdNVnh1SUNBZ0lDd2daVTFoZUNBZ0lEMGdLREVnUER3Z1pVeGxiaWtnTFNBeFhHNGdJQ0FnTENCbFFtbGhjeUFnUFNCbFRXRjRJRDQrSURGY2JpQWdJQ0FzSUhKMElDQWdJQ0E5SUcxTVpXNGdQVDA5SURJeklEOGdjRzkzS0RJc0lDMHlOQ2tnTFNCd2IzY29NaXdnTFRjM0tTQTZJREJjYmlBZ0lDQXNJR2tnSUNBZ0lDQTlJREJjYmlBZ0lDQXNJSE1nSUNBZ0lDQTlJSFpoYkhWbElEd2dNQ0I4ZkNCMllXeDFaU0E5UFQwZ01DQW1KaUF4SUM4Z2RtRnNkV1VnUENBd0lEOGdNU0E2SURCY2JpQWdJQ0FzSUdVc0lHMHNJR003WEc0Z0lIWmhiSFZsSUQwZ1lXSnpLSFpoYkhWbEtWeHVJQ0JwWmloMllXeDFaU0FoUFNCMllXeDFaU0I4ZkNCMllXeDFaU0E5UFQwZ1NXNW1hVzVwZEhrcGUxeHVJQ0FnSUcwZ1BTQjJZV3gxWlNBaFBTQjJZV3gxWlNBL0lERWdPaUF3TzF4dUlDQWdJR1VnUFNCbFRXRjRPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJR1VnUFNCbWJHOXZjaWhzYjJjb2RtRnNkV1VwSUM4Z1RFNHlLVHRjYmlBZ0lDQnBaaWgyWVd4MVpTQXFJQ2hqSUQwZ2NHOTNLRElzSUMxbEtTa2dQQ0F4S1h0Y2JpQWdJQ0FnSUdVdExUdGNiaUFnSUNBZ0lHTWdLajBnTWp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lvWlNBcklHVkNhV0Z6SUQ0OUlERXBlMXh1SUNBZ0lDQWdkbUZzZFdVZ0t6MGdjblFnTHlCak8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IyWVd4MVpTQXJQU0J5ZENBcUlIQnZkeWd5TENBeElDMGdaVUpwWVhNcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmloMllXeDFaU0FxSUdNZ1BqMGdNaWw3WEc0Z0lDQWdJQ0JsS3lzN1hHNGdJQ0FnSUNCaklDODlJREk3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1LR1VnS3lCbFFtbGhjeUErUFNCbFRXRjRLWHRjYmlBZ0lDQWdJRzBnUFNBd08xeHVJQ0FnSUNBZ1pTQTlJR1ZOWVhnN1hHNGdJQ0FnZlNCbGJITmxJR2xtS0dVZ0t5QmxRbWxoY3lBK1BTQXhLWHRjYmlBZ0lDQWdJRzBnUFNBb2RtRnNkV1VnS2lCaklDMGdNU2tnS2lCd2IzY29NaXdnYlV4bGJpazdYRzRnSUNBZ0lDQmxJRDBnWlNBcklHVkNhV0Z6TzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnRJRDBnZG1Gc2RXVWdLaUJ3YjNjb01pd2daVUpwWVhNZ0xTQXhLU0FxSUhCdmR5Z3lMQ0J0VEdWdUtUdGNiaUFnSUNBZ0lHVWdQU0F3TzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0JtYjNJb095QnRUR1Z1SUQ0OUlEZzdJR0oxWm1abGNsdHBLeXRkSUQwZ2JTQW1JREkxTlN3Z2JTQXZQU0F5TlRZc0lHMU1aVzRnTFQwZ09DazdYRzRnSUdVZ1BTQmxJRHc4SUcxTVpXNGdmQ0J0TzF4dUlDQmxUR1Z1SUNzOUlHMU1aVzQ3WEc0Z0lHWnZjaWc3SUdWTVpXNGdQaUF3T3lCaWRXWm1aWEpiYVNzclhTQTlJR1VnSmlBeU5UVXNJR1VnTHowZ01qVTJMQ0JsVEdWdUlDMDlJRGdwTzF4dUlDQmlkV1ptWlhKYkxTMXBYU0I4UFNCeklDb2dNVEk0TzF4dUlDQnlaWFIxY200Z1luVm1abVZ5TzF4dWZUdGNiblpoY2lCMWJuQmhZMnRKUlVWRk56VTBJRDBnWm5WdVkzUnBiMjRvWW5WbVptVnlMQ0J0VEdWdUxDQnVRbmwwWlhNcGUxeHVJQ0IyWVhJZ1pVeGxiaUFnUFNCdVFubDBaWE1nS2lBNElDMGdiVXhsYmlBdElERmNiaUFnSUNBc0lHVk5ZWGdnSUQwZ0tERWdQRHdnWlV4bGJpa2dMU0F4WEc0Z0lDQWdMQ0JsUW1saGN5QTlJR1ZOWVhnZ1BqNGdNVnh1SUNBZ0lDd2dia0pwZEhNZ1BTQmxUR1Z1SUMwZ04xeHVJQ0FnSUN3Z2FTQWdJQ0FnUFNCdVFubDBaWE1nTFNBeFhHNGdJQ0FnTENCeklDQWdJQ0E5SUdKMVptWmxjbHRwTFMxZFhHNGdJQ0FnTENCbElDQWdJQ0E5SUhNZ0ppQXhNamRjYmlBZ0lDQXNJRzA3WEc0Z0lITWdQajQ5SURjN1hHNGdJR1p2Y2lnN0lHNUNhWFJ6SUQ0Z01Ec2daU0E5SUdVZ0tpQXlOVFlnS3lCaWRXWm1aWEpiYVYwc0lHa3RMU3dnYmtKcGRITWdMVDBnT0NrN1hHNGdJRzBnUFNCbElDWWdLREVnUER3Z0xXNUNhWFJ6S1NBdElERTdYRzRnSUdVZ1BqNDlJQzF1UW1sMGN6dGNiaUFnYmtKcGRITWdLejBnYlV4bGJqdGNiaUFnWm05eUtEc2dia0pwZEhNZ1BpQXdPeUJ0SUQwZ2JTQXFJREkxTmlBcklHSjFabVpsY2x0cFhTd2dhUzB0TENCdVFtbDBjeUF0UFNBNEtUdGNiaUFnYVdZb1pTQTlQVDBnTUNsN1hHNGdJQ0FnWlNBOUlERWdMU0JsUW1saGN6dGNiaUFnZlNCbGJITmxJR2xtS0dVZ1BUMDlJR1ZOWVhncGUxeHVJQ0FnSUhKbGRIVnliaUJ0SUQ4Z1RtRk9JRG9nY3lBL0lDMUpibVpwYm1sMGVTQTZJRWx1Wm1sdWFYUjVPMXh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJRzBnUFNCdElDc2djRzkzS0RJc0lHMU1aVzRwTzF4dUlDQWdJR1VnUFNCbElDMGdaVUpwWVhNN1hHNGdJSDBnY21WMGRYSnVJQ2h6SUQ4Z0xURWdPaUF4S1NBcUlHMGdLaUJ3YjNjb01pd2daU0F0SUcxTVpXNHBPMXh1ZlR0Y2JseHVkbUZ5SUhWdWNHRmphMGt6TWlBOUlHWjFibU4wYVc5dUtHSjVkR1Z6S1h0Y2JpQWdjbVYwZFhKdUlHSjVkR1Z6V3pOZElEdzhJREkwSUh3Z1lubDBaWE5iTWwwZ1BEd2dNVFlnZkNCaWVYUmxjMXN4WFNBOFBDQTRJSHdnWW5sMFpYTmJNRjA3WEc1OU8xeHVkbUZ5SUhCaFkydEpPQ0E5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJRnRwZENBbUlEQjRabVpkTzF4dWZUdGNiblpoY2lCd1lXTnJTVEUySUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnVzJsMElDWWdNSGhtWml3Z2FYUWdQajRnT0NBbUlEQjRabVpkTzF4dWZUdGNiblpoY2lCd1lXTnJTVE15SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCeVpYUjFjbTRnVzJsMElDWWdNSGhtWml3Z2FYUWdQajRnT0NBbUlEQjRabVlzSUdsMElENCtJREUySUNZZ01IaG1aaXdnYVhRZ1BqNGdNalFnSmlBd2VHWm1YVHRjYm4wN1hHNTJZWElnY0dGamEwWTJOQ0E5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnY21WMGRYSnVJSEJoWTJ0SlJVVkZOelUwS0dsMExDQTFNaXdnT0NrN1hHNTlPMXh1ZG1GeUlIQmhZMnRHTXpJZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCd1lXTnJTVVZGUlRjMU5DaHBkQ3dnTWpNc0lEUXBPMXh1ZlR0Y2JseHVkbUZ5SUdGa1pFZGxkSFJsY2lBOUlHWjFibU4wYVc5dUtFTXNJR3RsZVN3Z2FXNTBaWEp1WVd3cGUxeHVJQ0JrVUNoRFcxQlNUMVJQVkZsUVJWMHNJR3RsZVN3Z2UyZGxkRG9nWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUhSb2FYTmJhVzUwWlhKdVlXeGRPeUI5ZlNrN1hHNTlPMXh1WEc1MllYSWdaMlYwSUQwZ1puVnVZM1JwYjI0b2RtbGxkeXdnWW5sMFpYTXNJR2x1WkdWNExDQnBjMHhwZEhSc1pVVnVaR2xoYmlsN1hHNGdJSFpoY2lCdWRXMUpibVJsZUNBOUlDdHBibVJsZUZ4dUlDQWdJQ3dnYVc1MFNXNWtaWGdnUFNCMGIwbHVkR1ZuWlhJb2JuVnRTVzVrWlhncE8xeHVJQ0JwWmlodWRXMUpibVJsZUNBaFBTQnBiblJKYm1SbGVDQjhmQ0JwYm5SSmJtUmxlQ0E4SURBZ2ZId2dhVzUwU1c1a1pYZ2dLeUJpZVhSbGN5QStJSFpwWlhkYkpFeEZUa2RVU0YwcGRHaHliM2NnVW1GdVoyVkZjbkp2Y2loWFVrOU9SMTlKVGtSRldDazdYRzRnSUhaaGNpQnpkRzl5WlNBOUlIWnBaWGRiSkVKVlJrWkZVbDB1WDJKY2JpQWdJQ0FzSUhOMFlYSjBJRDBnYVc1MFNXNWtaWGdnS3lCMmFXVjNXeVJQUmtaVFJWUmRYRzRnSUNBZ0xDQndZV05ySUNBOUlITjBiM0psTG5Oc2FXTmxLSE4wWVhKMExDQnpkR0Z5ZENBcklHSjVkR1Z6S1R0Y2JpQWdjbVYwZFhKdUlHbHpUR2wwZEd4bFJXNWthV0Z1SUQ4Z2NHRmpheUE2SUhCaFkyc3VjbVYyWlhKelpTZ3BPMXh1ZlR0Y2JuWmhjaUJ6WlhRZ1BTQm1kVzVqZEdsdmJpaDJhV1YzTENCaWVYUmxjeXdnYVc1a1pYZ3NJR052Ym5abGNuTnBiMjRzSUhaaGJIVmxMQ0JwYzB4cGRIUnNaVVZ1WkdsaGJpbDdYRzRnSUhaaGNpQnVkVzFKYm1SbGVDQTlJQ3RwYm1SbGVGeHVJQ0FnSUN3Z2FXNTBTVzVrWlhnZ1BTQjBiMGx1ZEdWblpYSW9iblZ0U1c1a1pYZ3BPMXh1SUNCcFppaHVkVzFKYm1SbGVDQWhQU0JwYm5SSmJtUmxlQ0I4ZkNCcGJuUkpibVJsZUNBOElEQWdmSHdnYVc1MFNXNWtaWGdnS3lCaWVYUmxjeUErSUhacFpYZGJKRXhGVGtkVVNGMHBkR2h5YjNjZ1VtRnVaMlZGY25KdmNpaFhVazlPUjE5SlRrUkZXQ2s3WEc0Z0lIWmhjaUJ6ZEc5eVpTQTlJSFpwWlhkYkpFSlZSa1pGVWwwdVgySmNiaUFnSUNBc0lITjBZWEowSUQwZ2FXNTBTVzVrWlhnZ0t5QjJhV1YzV3lSUFJrWlRSVlJkWEc0Z0lDQWdMQ0J3WVdOcklDQTlJR052Ym5abGNuTnBiMjRvSzNaaGJIVmxLVHRjYmlBZ1ptOXlLSFpoY2lCcElEMGdNRHNnYVNBOElHSjVkR1Z6T3lCcEt5c3BjM1J2Y21WYmMzUmhjblFnS3lCcFhTQTlJSEJoWTJ0YmFYTk1hWFIwYkdWRmJtUnBZVzRnUHlCcElEb2dZbmwwWlhNZ0xTQnBJQzBnTVYwN1hHNTlPMXh1WEc1MllYSWdkbUZzYVdSaGRHVkJjbkpoZVVKMVptWmxja0Z5WjNWdFpXNTBjeUE5SUdaMWJtTjBhVzl1S0hSb1lYUXNJR3hsYm1kMGFDbDdYRzRnSUdGdVNXNXpkR0Z1WTJVb2RHaGhkQ3dnSkVGeWNtRjVRblZtWm1WeUxDQkJVbEpCV1Y5Q1ZVWkdSVklwTzF4dUlDQjJZWElnYm5WdFltVnlUR1Z1WjNSb0lEMGdLMnhsYm1kMGFGeHVJQ0FnSUN3Z1lubDBaVXhsYm1kMGFDQWdJRDBnZEc5TVpXNW5kR2dvYm5WdFltVnlUR1Z1WjNSb0tUdGNiaUFnYVdZb2JuVnRZbVZ5VEdWdVozUm9JQ0U5SUdKNWRHVk1aVzVuZEdncGRHaHliM2NnVW1GdVoyVkZjbkp2Y2loWFVrOU9SMTlNUlU1SFZFZ3BPMXh1SUNCeVpYUjFjbTRnWW5sMFpVeGxibWQwYUR0Y2JuMDdYRzVjYm1sbUtDRWtkSGx3WldRdVFVSldLWHRjYmlBZ0pFRnljbUY1UW5WbVptVnlJRDBnWm5WdVkzUnBiMjRnUVhKeVlYbENkV1ptWlhJb2JHVnVaM1JvS1h0Y2JpQWdJQ0IyWVhJZ1lubDBaVXhsYm1kMGFDQTlJSFpoYkdsa1lYUmxRWEp5WVhsQ2RXWm1aWEpCY21kMWJXVnVkSE1vZEdocGN5d2diR1Z1WjNSb0tUdGNiaUFnSUNCMGFHbHpMbDlpSUNBZ0lDQWdJRDBnWVhKeVlYbEdhV3hzTG1OaGJHd29RWEp5WVhrb1lubDBaVXhsYm1kMGFDa3NJREFwTzF4dUlDQWdJSFJvYVhOYkpFeEZUa2RVU0YwZ1BTQmllWFJsVEdWdVozUm9PMXh1SUNCOU8xeHVYRzRnSUNSRVlYUmhWbWxsZHlBOUlHWjFibU4wYVc5dUlFUmhkR0ZXYVdWM0tHSjFabVpsY2l3Z1lubDBaVTltWm5ObGRDd2dZbmwwWlV4bGJtZDBhQ2w3WEc0Z0lDQWdZVzVKYm5OMFlXNWpaU2gwYUdsekxDQWtSR0YwWVZacFpYY3NJRVJCVkVGZlZrbEZWeWs3WEc0Z0lDQWdZVzVKYm5OMFlXNWpaU2hpZFdabVpYSXNJQ1JCY25KaGVVSjFabVpsY2l3Z1JFRlVRVjlXU1VWWEtUdGNiaUFnSUNCMllYSWdZblZtWm1WeVRHVnVaM1JvSUQwZ1luVm1abVZ5V3lSTVJVNUhWRWhkWEc0Z0lDQWdJQ0FzSUc5bVpuTmxkQ0FnSUNBZ0lDQTlJSFJ2U1c1MFpXZGxjaWhpZVhSbFQyWm1jMlYwS1R0Y2JpQWdJQ0JwWmlodlptWnpaWFFnUENBd0lIeDhJRzltWm5ObGRDQStJR0oxWm1abGNreGxibWQwYUNsMGFISnZkeUJTWVc1blpVVnljbTl5S0NkWGNtOXVaeUJ2Wm1aelpYUWhKeWs3WEc0Z0lDQWdZbmwwWlV4bGJtZDBhQ0E5SUdKNWRHVk1aVzVuZEdnZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUdKMVptWmxja3hsYm1kMGFDQXRJRzltWm5ObGRDQTZJSFJ2VEdWdVozUm9LR0o1ZEdWTVpXNW5kR2dwTzF4dUlDQWdJR2xtS0c5bVpuTmxkQ0FySUdKNWRHVk1aVzVuZEdnZ1BpQmlkV1ptWlhKTVpXNW5kR2dwZEdoeWIzY2dVbUZ1WjJWRmNuSnZjaWhYVWs5T1IxOU1SVTVIVkVncE8xeHVJQ0FnSUhSb2FYTmJKRUpWUmtaRlVsMGdQU0JpZFdabVpYSTdYRzRnSUNBZ2RHaHBjMXNrVDBaR1UwVlVYU0E5SUc5bVpuTmxkRHRjYmlBZ0lDQjBhR2x6V3lSTVJVNUhWRWhkSUQwZ1lubDBaVXhsYm1kMGFEdGNiaUFnZlR0Y2JseHVJQ0JwWmloRVJWTkRVa2xRVkU5U1V5bDdYRzRnSUNBZ1lXUmtSMlYwZEdWeUtDUkJjbkpoZVVKMVptWmxjaXdnUWxsVVJWOU1SVTVIVkVnc0lDZGZiQ2NwTzF4dUlDQWdJR0ZrWkVkbGRIUmxjaWdrUkdGMFlWWnBaWGNzSUVKVlJrWkZVaXdnSjE5aUp5azdYRzRnSUNBZ1lXUmtSMlYwZEdWeUtDUkVZWFJoVm1sbGR5d2dRbGxVUlY5TVJVNUhWRWdzSUNkZmJDY3BPMXh1SUNBZ0lHRmtaRWRsZEhSbGNpZ2tSR0YwWVZacFpYY3NJRUpaVkVWZlQwWkdVMFZVTENBblgyOG5LVHRjYmlBZ2ZWeHVYRzRnSUhKbFpHVm1hVzVsUVd4c0tDUkVZWFJoVm1sbGQxdFFVazlVVDFSWlVFVmRMQ0I3WEc0Z0lDQWdaMlYwU1c1ME9Eb2dablZ1WTNScGIyNGdaMlYwU1c1ME9DaGllWFJsVDJabWMyVjBLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm5aWFFvZEdocGN5d2dNU3dnWW5sMFpVOW1abk5sZENsYk1GMGdQRHdnTWpRZ1BqNGdNalE3WEc0Z0lDQWdmU3hjYmlBZ0lDQm5aWFJWYVc1ME9Eb2dablZ1WTNScGIyNGdaMlYwVldsdWREZ29ZbmwwWlU5bVpuTmxkQ2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaMlYwS0hSb2FYTXNJREVzSUdKNWRHVlBabVp6WlhRcFd6QmRPMXh1SUNBZ0lIMHNYRzRnSUNBZ1oyVjBTVzUwTVRZNklHWjFibU4wYVc5dUlHZGxkRWx1ZERFMktHSjVkR1ZQWm1aelpYUWdMeW9zSUd4cGRIUnNaVVZ1WkdsaGJpQXFMeWw3WEc0Z0lDQWdJQ0IyWVhJZ1lubDBaWE1nUFNCblpYUW9kR2hwY3l3Z01pd2dZbmwwWlU5bVpuTmxkQ3dnWVhKbmRXMWxiblJ6V3pGZEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlBb1lubDBaWE5iTVYwZ1BEd2dPQ0I4SUdKNWRHVnpXekJkS1NBOFBDQXhOaUErUGlBeE5qdGNiaUFnSUNCOUxGeHVJQ0FnSUdkbGRGVnBiblF4TmpvZ1puVnVZM1JwYjI0Z1oyVjBWV2x1ZERFMktHSjVkR1ZQWm1aelpYUWdMeW9zSUd4cGRIUnNaVVZ1WkdsaGJpQXFMeWw3WEc0Z0lDQWdJQ0IyWVhJZ1lubDBaWE1nUFNCblpYUW9kR2hwY3l3Z01pd2dZbmwwWlU5bVpuTmxkQ3dnWVhKbmRXMWxiblJ6V3pGZEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaWVYUmxjMXN4WFNBOFBDQTRJSHdnWW5sMFpYTmJNRjA3WEc0Z0lDQWdmU3hjYmlBZ0lDQm5aWFJKYm5Rek1qb2dablZ1WTNScGIyNGdaMlYwU1c1ME16SW9ZbmwwWlU5bVpuTmxkQ0F2S2l3Z2JHbDBkR3hsUlc1a2FXRnVJQ292S1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUIxYm5CaFkydEpNeklvWjJWMEtIUm9hWE1zSURRc0lHSjVkR1ZQWm1aelpYUXNJR0Z5WjNWdFpXNTBjMXN4WFNrcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnWjJWMFZXbHVkRE15T2lCbWRXNWpkR2x2YmlCblpYUlZhVzUwTXpJb1lubDBaVTltWm5ObGRDQXZLaXdnYkdsMGRHeGxSVzVrYVdGdUlDb3ZLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjFibkJoWTJ0Sk16SW9aMlYwS0hSb2FYTXNJRFFzSUdKNWRHVlBabVp6WlhRc0lHRnlaM1Z0Wlc1MGMxc3hYU2twSUQ0K1BpQXdPMXh1SUNBZ0lIMHNYRzRnSUNBZ1oyVjBSbXh2WVhRek1qb2dablZ1WTNScGIyNGdaMlYwUm14dllYUXpNaWhpZVhSbFQyWm1jMlYwSUM4cUxDQnNhWFIwYkdWRmJtUnBZVzRnS2k4cGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhWdWNHRmphMGxGUlVVM05UUW9aMlYwS0hSb2FYTXNJRFFzSUdKNWRHVlBabVp6WlhRc0lHRnlaM1Z0Wlc1MGMxc3hYU2tzSURJekxDQTBLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lHZGxkRVpzYjJGME5qUTZJR1oxYm1OMGFXOXVJR2RsZEVac2IyRjBOalFvWW5sMFpVOW1abk5sZENBdktpd2diR2wwZEd4bFJXNWthV0Z1SUNvdktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMWJuQmhZMnRKUlVWRk56VTBLR2RsZENoMGFHbHpMQ0E0TENCaWVYUmxUMlptYzJWMExDQmhjbWQxYldWdWRITmJNVjBwTENBMU1pd2dPQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnpaWFJKYm5RNE9pQm1kVzVqZEdsdmJpQnpaWFJKYm5RNEtHSjVkR1ZQWm1aelpYUXNJSFpoYkhWbEtYdGNiaUFnSUNBZ0lITmxkQ2gwYUdsekxDQXhMQ0JpZVhSbFQyWm1jMlYwTENCd1lXTnJTVGdzSUhaaGJIVmxLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lITmxkRlZwYm5RNE9pQm1kVzVqZEdsdmJpQnpaWFJWYVc1ME9DaGllWFJsVDJabWMyVjBMQ0IyWVd4MVpTbDdYRzRnSUNBZ0lDQnpaWFFvZEdocGN5d2dNU3dnWW5sMFpVOW1abk5sZEN3Z2NHRmphMGs0TENCMllXeDFaU2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnpaWFJKYm5ReE5qb2dablZ1WTNScGIyNGdjMlYwU1c1ME1UWW9ZbmwwWlU5bVpuTmxkQ3dnZG1Gc2RXVWdMeW9zSUd4cGRIUnNaVVZ1WkdsaGJpQXFMeWw3WEc0Z0lDQWdJQ0J6WlhRb2RHaHBjeXdnTWl3Z1lubDBaVTltWm5ObGRDd2djR0ZqYTBreE5pd2dkbUZzZFdVc0lHRnlaM1Z0Wlc1MGMxc3lYU2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQnpaWFJWYVc1ME1UWTZJR1oxYm1OMGFXOXVJSE5sZEZWcGJuUXhOaWhpZVhSbFQyWm1jMlYwTENCMllXeDFaU0F2S2l3Z2JHbDBkR3hsUlc1a2FXRnVJQ292S1h0Y2JpQWdJQ0FnSUhObGRDaDBhR2x6TENBeUxDQmllWFJsVDJabWMyVjBMQ0J3WVdOclNURTJMQ0IyWVd4MVpTd2dZWEpuZFcxbGJuUnpXekpkS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5sZEVsdWRETXlPaUJtZFc1amRHbHZiaUJ6WlhSSmJuUXpNaWhpZVhSbFQyWm1jMlYwTENCMllXeDFaU0F2S2l3Z2JHbDBkR3hsUlc1a2FXRnVJQ292S1h0Y2JpQWdJQ0FnSUhObGRDaDBhR2x6TENBMExDQmllWFJsVDJabWMyVjBMQ0J3WVdOclNUTXlMQ0IyWVd4MVpTd2dZWEpuZFcxbGJuUnpXekpkS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5sZEZWcGJuUXpNam9nWm5WdVkzUnBiMjRnYzJWMFZXbHVkRE15S0dKNWRHVlBabVp6WlhRc0lIWmhiSFZsSUM4cUxDQnNhWFIwYkdWRmJtUnBZVzRnS2k4cGUxeHVJQ0FnSUNBZ2MyVjBLSFJvYVhNc0lEUXNJR0o1ZEdWUFptWnpaWFFzSUhCaFkydEpNeklzSUhaaGJIVmxMQ0JoY21kMWJXVnVkSE5iTWwwcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYzJWMFJteHZZWFF6TWpvZ1puVnVZM1JwYjI0Z2MyVjBSbXh2WVhRek1paGllWFJsVDJabWMyVjBMQ0IyWVd4MVpTQXZLaXdnYkdsMGRHeGxSVzVrYVdGdUlDb3ZLWHRjYmlBZ0lDQWdJSE5sZENoMGFHbHpMQ0EwTENCaWVYUmxUMlptYzJWMExDQndZV05yUmpNeUxDQjJZV3gxWlN3Z1lYSm5kVzFsYm5Seld6SmRLVHRjYmlBZ0lDQjlMRnh1SUNBZ0lITmxkRVpzYjJGME5qUTZJR1oxYm1OMGFXOXVJSE5sZEVac2IyRjBOalFvWW5sMFpVOW1abk5sZEN3Z2RtRnNkV1VnTHlvc0lHeHBkSFJzWlVWdVpHbGhiaUFxTHlsN1hHNGdJQ0FnSUNCelpYUW9kR2hwY3l3Z09Dd2dZbmwwWlU5bVpuTmxkQ3dnY0dGamEwWTJOQ3dnZG1Gc2RXVXNJR0Z5WjNWdFpXNTBjMXN5WFNrN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYm4wZ1pXeHpaU0I3WEc0Z0lHbG1LQ0ZtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lHNWxkeUFrUVhKeVlYbENkV1ptWlhJN0lDQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMVzVsZDF4dUlDQjlLU0I4ZkNBaFptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdJQ0J1WlhjZ0pFRnljbUY1UW5WbVptVnlLQzQxS1RzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxdVpYZGNiaUFnZlNrcGUxeHVJQ0FnSUNSQmNuSmhlVUoxWm1abGNpQTlJR1oxYm1OMGFXOXVJRUZ5Y21GNVFuVm1abVZ5S0d4bGJtZDBhQ2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVKaGMyVkNkV1ptWlhJb2RtRnNhV1JoZEdWQmNuSmhlVUoxWm1abGNrRnlaM1Z0Wlc1MGN5aDBhR2x6TENCc1pXNW5kR2dwS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJSFpoY2lCQmNuSmhlVUoxWm1abGNsQnliM1J2SUQwZ0pFRnljbUY1UW5WbVptVnlXMUJTVDFSUFZGbFFSVjBnUFNCQ1lYTmxRblZtWm1WeVcxQlNUMVJQVkZsUVJWMDdYRzRnSUNBZ1ptOXlLSFpoY2lCclpYbHpJRDBnWjA5UVRpaENZWE5sUW5WbVptVnlLU3dnYWlBOUlEQXNJR3RsZVRzZ2EyVjVjeTVzWlc1bmRHZ2dQaUJxT3lBcGUxeHVJQ0FnSUNBZ2FXWW9JU2dvYTJWNUlEMGdhMlY1YzF0cUt5dGRLU0JwYmlBa1FYSnlZWGxDZFdabVpYSXBLV2hwWkdVb0pFRnljbUY1UW5WbVptVnlMQ0JyWlhrc0lFSmhjMlZDZFdabVpYSmJhMlY1WFNrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JwWmlnaFRFbENVa0ZTV1NsQmNuSmhlVUoxWm1abGNsQnliM1J2TG1OdmJuTjBjblZqZEc5eUlEMGdKRUZ5Y21GNVFuVm1abVZ5TzF4dUlDQjlYRzRnSUM4dklHbFBVeUJUWVdaaGNta2dOeTU0SUdKMVoxeHVJQ0IyWVhJZ2RtbGxkeUE5SUc1bGR5QWtSR0YwWVZacFpYY29ibVYzSUNSQmNuSmhlVUoxWm1abGNpZ3lLU2xjYmlBZ0lDQXNJQ1J6WlhSSmJuUTRJRDBnSkVSaGRHRldhV1YzVzFCU1QxUlBWRmxRUlYwdWMyVjBTVzUwT0R0Y2JpQWdkbWxsZHk1elpYUkpiblE0S0RBc0lESXhORGMwT0RNMk5EZ3BPMXh1SUNCMmFXVjNMbk5sZEVsdWREZ29NU3dnTWpFME56UTRNelkwT1NrN1hHNGdJR2xtS0hacFpYY3VaMlYwU1c1ME9DZ3dLU0I4ZkNBaGRtbGxkeTVuWlhSSmJuUTRLREVwS1hKbFpHVm1hVzVsUVd4c0tDUkVZWFJoVm1sbGQxdFFVazlVVDFSWlVFVmRMQ0I3WEc0Z0lDQWdjMlYwU1c1ME9Eb2dablZ1WTNScGIyNGdjMlYwU1c1ME9DaGllWFJsVDJabWMyVjBMQ0IyWVd4MVpTbDdYRzRnSUNBZ0lDQWtjMlYwU1c1ME9DNWpZV3hzS0hSb2FYTXNJR0o1ZEdWUFptWnpaWFFzSUhaaGJIVmxJRHc4SURJMElENCtJREkwS1R0Y2JpQWdJQ0I5TEZ4dUlDQWdJSE5sZEZWcGJuUTRPaUJtZFc1amRHbHZiaUJ6WlhSVmFXNTBPQ2hpZVhSbFQyWm1jMlYwTENCMllXeDFaU2w3WEc0Z0lDQWdJQ0FrYzJWMFNXNTBPQzVqWVd4c0tIUm9hWE1zSUdKNWRHVlBabVp6WlhRc0lIWmhiSFZsSUR3OElESTBJRDQrSURJMEtUdGNiaUFnSUNCOVhHNGdJSDBzSUhSeWRXVXBPMXh1ZlZ4dWMyVjBWRzlUZEhKcGJtZFVZV2NvSkVGeWNtRjVRblZtWm1WeUxDQkJVbEpCV1Y5Q1ZVWkdSVklwTzF4dWMyVjBWRzlUZEhKcGJtZFVZV2NvSkVSaGRHRldhV1YzTENCRVFWUkJYMVpKUlZjcE8xeHVhR2xrWlNna1JHRjBZVlpwWlhkYlVGSlBWRTlVV1ZCRlhTd2dKSFI1Y0dWa0xsWkpSVmNzSUhSeWRXVXBPMXh1Wlhod2IzSjBjMXRCVWxKQldWOUNWVVpHUlZKZElEMGdKRUZ5Y21GNVFuVm1abVZ5TzF4dVpYaHdiM0owYzF0RVFWUkJYMVpKUlZkZElEMGdKRVJoZEdGV2FXVjNPeUlzSW5aaGNpQm5iRzlpWVd3Z1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHaHBaR1VnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhwWkdVbktWeHVJQ0FzSUhWcFpDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzVnBaQ2NwWEc0Z0lDd2dWRmxRUlVRZ0lEMGdkV2xrS0NkMGVYQmxaRjloY25KaGVTY3BYRzRnSUN3Z1ZrbEZWeUFnSUQwZ2RXbGtLQ2QyYVdWM0p5bGNiaUFnTENCQlFsWWdJQ0FnUFNBaElTaG5iRzlpWVd3dVFYSnlZWGxDZFdabVpYSWdKaVlnWjJ4dlltRnNMa1JoZEdGV2FXVjNLVnh1SUNBc0lFTlBUbE5VVWlBOUlFRkNWbHh1SUNBc0lHa2dQU0F3TENCc0lEMGdPU3dnVkhsd1pXUTdYRzVjYm5aaGNpQlVlWEJsWkVGeWNtRjVRMjl1YzNSeWRXTjBiM0p6SUQwZ0tGeHVJQ0FuU1c1ME9FRnljbUY1TEZWcGJuUTRRWEp5WVhrc1ZXbHVkRGhEYkdGdGNHVmtRWEp5WVhrc1NXNTBNVFpCY25KaGVTeFZhVzUwTVRaQmNuSmhlU3hKYm5Rek1rRnljbUY1TEZWcGJuUXpNa0Z5Y21GNUxFWnNiMkYwTXpKQmNuSmhlU3hHYkc5aGREWTBRWEp5WVhrblhHNHBMbk53YkdsMEtDY3NKeWs3WEc1Y2JuZG9hV3hsS0drZ1BDQnNLWHRjYmlBZ2FXWW9WSGx3WldRZ1BTQm5iRzlpWVd4YlZIbHdaV1JCY25KaGVVTnZibk4wY25WamRHOXljMXRwS3l0ZFhTbDdYRzRnSUNBZ2FHbGtaU2hVZVhCbFpDNXdjbTkwYjNSNWNHVXNJRlJaVUVWRUxDQjBjblZsS1R0Y2JpQWdJQ0JvYVdSbEtGUjVjR1ZrTG5CeWIzUnZkSGx3WlN3Z1ZrbEZWeXdnZEhKMVpTazdYRzRnSUgwZ1pXeHpaU0JEVDA1VFZGSWdQU0JtWVd4elpUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJRUZDVmpvZ0lDQWdRVUpXTEZ4dUlDQkRUMDVUVkZJNklFTlBUbE5VVWl4Y2JpQWdWRmxRUlVRNklDQlVXVkJGUkN4Y2JpQWdWa2xGVnpvZ0lDQldTVVZYWEc1OU95SXNJaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5aVpXNXFZVzFwYm1keUwxSmxlRVY0Y0M1bGMyTmhjR1ZjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtjbVVnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmY21Wd2JHRmpaWEluS1NndlcxeGNYRnhlSkNvclB5NG9LWHhiWEZ4ZGUzMWRMMmNzSUNkY1hGeGNKQ1luS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RTWldkRmVIQW5MQ0I3WlhOallYQmxPaUJtZFc1amRHbHZiaUJsYzJOaGNHVW9hWFFwZXlCeVpYUjFjbTRnSkhKbEtHbDBLVHNnZlgwcE8xeHVJaXdpTHk4Z01qSXVNUzR6TGpNZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1OdmNIbFhhWFJvYVc0b2RHRnlaMlYwTENCemRHRnlkQ3dnWlc1a0lEMGdkR2hwY3k1c1pXNW5kR2dwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDd2dKMEZ5Y21GNUp5d2dlMk52Y0hsWGFYUm9hVzQ2SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFdOdmNIa3RkMmwwYUdsdUp5bDlLVHRjYmx4dWNtVnhkV2x5WlNnbkxpOWZZV1JrTFhSdkxYVnVjMk52Y0dGaWJHVnpKeWtvSjJOdmNIbFhhWFJvYVc0bktUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnSkdWMlpYSjVJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFcxbGRHaHZaSE1uS1NnMEtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQWhjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXTjBMVzFsZEdodlpDY3BLRnRkTG1WMlpYSjVMQ0IwY25WbEtTd2dKMEZ5Y21GNUp5d2dlMXh1SUNBdkx5QXlNaTR4TGpNdU5TQXZJREUxTGpRdU5DNHhOaUJCY25KaGVTNXdjbTkwYjNSNWNHVXVaWFpsY25rb1kyRnNiR0poWTJ0bWJpQmJMQ0IwYUdselFYSm5YU2xjYmlBZ1pYWmxjbms2SUdaMWJtTjBhVzl1SUdWMlpYSjVLR05oYkd4aVlXTnJabTRnTHlvZ0xDQjBhR2x6UVhKbklDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z0pHVjJaWEo1S0hSb2FYTXNJR05oYkd4aVlXTnJabTRzSUdGeVozVnRaVzUwYzFzeFhTazdYRzRnSUgxY2JuMHBPeUlzSWk4dklESXlMakV1TXk0MklFRnljbUY1TG5CeWIzUnZkSGx3WlM1bWFXeHNLSFpoYkhWbExDQnpkR0Z5ZENBOUlEQXNJR1Z1WkNBOUlIUm9hWE11YkdWdVozUm9LVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBc0lDZEJjbkpoZVNjc0lIdG1hV3hzT2lCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxbWFXeHNKeWw5S1R0Y2JseHVjbVZ4ZFdseVpTZ25MaTlmWVdSa0xYUnZMWFZ1YzJOdmNHRmliR1Z6Snlrb0oyWnBiR3duS1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKR1pwYkhSbGNpQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMVzFsZEdodlpITW5LU2d5S1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBaGNtVnhkV2x5WlNnbkxpOWZjM1J5YVdOMExXMWxkR2h2WkNjcEtGdGRMbVpwYkhSbGNpd2dkSEoxWlNrc0lDZEJjbkpoZVNjc0lIdGNiaUFnTHk4Z01qSXVNUzR6TGpjZ0x5QXhOUzQwTGpRdU1qQWdRWEp5WVhrdWNISnZkRzkwZVhCbExtWnBiSFJsY2loallXeHNZbUZqYTJadUlGc3NJSFJvYVhOQmNtZGRLVnh1SUNCbWFXeDBaWEk2SUdaMWJtTjBhVzl1SUdacGJIUmxjaWhqWVd4c1ltRmphMlp1SUM4cUlDd2dkR2hwYzBGeVp5QXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlDUm1hV3gwWlhJb2RHaHBjeXdnWTJGc2JHSmhZMnRtYml3Z1lYSm5kVzFsYm5Seld6RmRLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z01qSXVNUzR6TGprZ1FYSnlZWGt1Y0hKdmRHOTBlWEJsTG1acGJtUkpibVJsZUNod2NtVmthV05oZEdVc0lIUm9hWE5CY21jZ1BTQjFibVJsWm1sdVpXUXBYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHWnBibVFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ5Y21GNUxXMWxkR2h2WkhNbktTZzJLVnh1SUNBc0lFdEZXU0FnSUNBZ1BTQW5abWx1WkVsdVpHVjRKMXh1SUNBc0lHWnZjbU5sWkNBZ1BTQjBjblZsTzF4dUx5OGdVMmh2ZFd4a2JpZDBJSE5yYVhBZ2FHOXNaWE5jYm1sbUtFdEZXU0JwYmlCYlhTbEJjbkpoZVNneEtWdExSVmxkS0daMWJtTjBhVzl1S0NsN0lHWnZjbU5sWkNBOUlHWmhiSE5sT3lCOUtUdGNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ1ptOXlZMlZrTENBblFYSnlZWGtuTENCN1hHNGdJR1pwYm1SSmJtUmxlRG9nWm5WdVkzUnBiMjRnWm1sdVpFbHVaR1Y0S0dOaGJHeGlZV05yWm00dktpd2dkR2hoZENBOUlIVnVaR1ZtYVc1bFpDQXFMeWw3WEc0Z0lDQWdjbVYwZFhKdUlDUm1hVzVrS0hSb2FYTXNJR05oYkd4aVlXTnJabTRzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElEOGdZWEpuZFcxbGJuUnpXekZkSURvZ2RXNWtaV1pwYm1Wa0tUdGNiaUFnZlZ4dWZTazdYRzV5WlhGMWFYSmxLQ2N1TDE5aFpHUXRkRzh0ZFc1elkyOXdZV0pzWlhNbktTaExSVmtwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklESXlMakV1TXk0NElFRnljbUY1TG5CeWIzUnZkSGx3WlM1bWFXNWtLSEJ5WldScFkyRjBaU3dnZEdocGMwRnlaeUE5SUhWdVpHVm1hVzVsWkNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrWm1sdVpDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0YldWMGFHOWtjeWNwS0RVcFhHNGdJQ3dnUzBWWklDQWdJQ0E5SUNkbWFXNWtKMXh1SUNBc0lHWnZjbU5sWkNBZ1BTQjBjblZsTzF4dUx5OGdVMmh2ZFd4a2JpZDBJSE5yYVhBZ2FHOXNaWE5jYm1sbUtFdEZXU0JwYmlCYlhTbEJjbkpoZVNneEtWdExSVmxkS0daMWJtTjBhVzl1S0NsN0lHWnZjbU5sWkNBOUlHWmhiSE5sT3lCOUtUdGNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ1ptOXlZMlZrTENBblFYSnlZWGtuTENCN1hHNGdJR1pwYm1RNklHWjFibU4wYVc5dUlHWnBibVFvWTJGc2JHSmhZMnRtYmk4cUxDQjBhR0YwSUQwZ2RXNWtaV1pwYm1Wa0lDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z0pHWnBibVFvZEdocGN5d2dZMkZzYkdKaFkydG1iaXdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURFZ1B5QmhjbWQxYldWdWRITmJNVjBnT2lCMWJtUmxabWx1WldRcE8xeHVJQ0I5WEc1OUtUdGNibkpsY1hWcGNtVW9KeTR2WDJGa1pDMTBieTExYm5OamIzQmhZbXhsY3ljcEtFdEZXU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtabTl5UldGamFDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMVzFsZEdodlpITW5LU2d3S1Z4dUlDQXNJRk5VVWtsRFZDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlhV04wTFcxbGRHaHZaQ2NwS0Z0ZExtWnZja1ZoWTJnc0lIUnlkV1VwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUNGVFZGSkpRMVFzSUNkQmNuSmhlU2NzSUh0Y2JpQWdMeThnTWpJdU1TNHpMakV3SUM4Z01UVXVOQzQwTGpFNElFRnljbUY1TG5CeWIzUnZkSGx3WlM1bWIzSkZZV05vS0dOaGJHeGlZV05yWm00Z1d5d2dkR2hwYzBGeVoxMHBYRzRnSUdadmNrVmhZMmc2SUdaMWJtTjBhVzl1SUdadmNrVmhZMmdvWTJGc2JHSmhZMnRtYmlBdktpQXNJSFJvYVhOQmNtY2dLaThwZTF4dUlDQWdJSEpsZEhWeWJpQWtabTl5UldGamFDaDBhR2x6TENCallXeHNZbUZqYTJadUxDQmhjbWQxYldWdWRITmJNVjBwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z0pHbHVaR1Y0VDJZZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnljbUY1TFdsdVkyeDFaR1Z6Snlrb1ptRnNjMlVwWEc0Z0lDd2dKRzVoZEdsMlpTQWdJQ0FnSUNBOUlGdGRMbWx1WkdWNFQyWmNiaUFnTENCT1JVZEJWRWxXUlY5YVJWSlBJRDBnSVNFa2JtRjBhWFpsSUNZbUlERWdMeUJiTVYwdWFXNWtaWGhQWmlneExDQXRNQ2tnUENBd08xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDaE9SVWRCVkVsV1JWOWFSVkpQSUh4OElDRnlaWEYxYVhKbEtDY3VMMTl6ZEhKcFkzUXRiV1YwYUc5a0p5a29KRzVoZEdsMlpTa3BMQ0FuUVhKeVlYa25MQ0I3WEc0Z0lDOHZJREl5TGpFdU15NHhNU0F2SURFMUxqUXVOQzR4TkNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YVc1a1pYaFBaaWh6WldGeVkyaEZiR1Z0Wlc1MElGc3NJR1p5YjIxSmJtUmxlRjBwWEc0Z0lHbHVaR1Y0VDJZNklHWjFibU4wYVc5dUlHbHVaR1Y0VDJZb2MyVmhjbU5vUld4bGJXVnVkQ0F2S2l3Z1puSnZiVWx1WkdWNElEMGdNQ0FxTHlsN1hHNGdJQ0FnY21WMGRYSnVJRTVGUjBGVVNWWkZYMXBGVWs5Y2JpQWdJQ0FnSUM4dklHTnZiblpsY25RZ0xUQWdkRzhnS3pCY2JpQWdJQ0FnSUQ4Z0pHNWhkR2wyWlM1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBJSHg4SURCY2JpQWdJQ0FnSURvZ0pHbHVaR1Y0VDJZb2RHaHBjeXdnYzJWaGNtTm9SV3hsYldWdWRDd2dZWEpuZFcxbGJuUnpXekZkS1R0Y2JpQWdmVnh1ZlNrN0lpd2lMeThnTWpJdU1TNHlMaklnTHlBeE5TNDBMak11TWlCQmNuSmhlUzVwYzBGeWNtRjVLR0Z5WnlsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuUVhKeVlYa25MQ0I3YVhOQmNuSmhlVG9nY21WeGRXbHlaU2duTGk5ZmFYTXRZWEp5WVhrbktYMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SURJeUxqRXVNeTR4TXlCQmNuSmhlUzV3Y205MGIzUjVjR1V1YW05cGJpaHpaWEJoY21GMGIzSXBYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQjBiMGxQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiMkpxWldOMEp5bGNiaUFnTENCaGNuSmhlVXB2YVc0Z1BTQmJYUzVxYjJsdU8xeHVYRzR2THlCbVlXeHNZbUZqYXlCbWIzSWdibTkwSUdGeWNtRjVMV3hwYTJVZ2MzUnlhVzVuYzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUFvY21WeGRXbHlaU2duTGk5ZmFXOWlhbVZqZENjcElDRTlJRTlpYW1WamRDQjhmQ0FoY21WeGRXbHlaU2duTGk5ZmMzUnlhV04wTFcxbGRHaHZaQ2NwS0dGeWNtRjVTbTlwYmlrcExDQW5RWEp5WVhrbkxDQjdYRzRnSUdwdmFXNDZJR1oxYm1OMGFXOXVJR3B2YVc0b2MyVndZWEpoZEc5eUtYdGNiaUFnSUNCeVpYUjFjbTRnWVhKeVlYbEtiMmx1TG1OaGJHd29kRzlKVDJKcVpXTjBLSFJvYVhNcExDQnpaWEJoY21GMGIzSWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lDY3NKeUE2SUhObGNHRnlZWFJ2Y2lrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWlhod2IzSjBJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQjBiMGxQWW1wbFkzUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlKYm5SbFoyVnlJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdWRHVm5aWEluS1Z4dUlDQXNJSFJ2VEdWdVozUm9JQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxc1pXNW5kR2duS1Z4dUlDQXNJQ1J1WVhScGRtVWdJQ0FnSUNBZ1BTQmJYUzVzWVhOMFNXNWtaWGhQWmx4dUlDQXNJRTVGUjBGVVNWWkZYMXBGVWs4Z1BTQWhJU1J1WVhScGRtVWdKaVlnTVNBdklGc3hYUzVzWVhOMFNXNWtaWGhQWmlneExDQXRNQ2tnUENBd08xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDaE9SVWRCVkVsV1JWOWFSVkpQSUh4OElDRnlaWEYxYVhKbEtDY3VMMTl6ZEhKcFkzUXRiV1YwYUc5a0p5a29KRzVoZEdsMlpTa3BMQ0FuUVhKeVlYa25MQ0I3WEc0Z0lDOHZJREl5TGpFdU15NHhOQ0F2SURFMUxqUXVOQzR4TlNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YkdGemRFbHVaR1Y0VDJZb2MyVmhjbU5vUld4bGJXVnVkQ0JiTENCbWNtOXRTVzVrWlhoZEtWeHVJQ0JzWVhOMFNXNWtaWGhQWmpvZ1puVnVZM1JwYjI0Z2JHRnpkRWx1WkdWNFQyWW9jMlZoY21Ob1JXeGxiV1Z1ZENBdktpd2dabkp2YlVsdVpHVjRJRDBnUUZzcUxURmRJQ292S1h0Y2JpQWdJQ0F2THlCamIyNTJaWEowSUMwd0lIUnZJQ3N3WEc0Z0lDQWdhV1lvVGtWSFFWUkpWa1ZmV2tWU1R5bHlaWFIxY200Z0pHNWhkR2wyWlM1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBJSHg4SURBN1hHNGdJQ0FnZG1GeUlFOGdJQ0FnSUNBOUlIUnZTVTlpYW1WamRDaDBhR2x6S1Z4dUlDQWdJQ0FnTENCc1pXNW5kR2dnUFNCMGIweGxibWQwYUNoUExteGxibWQwYUNsY2JpQWdJQ0FnSUN3Z2FXNWtaWGdnSUQwZ2JHVnVaM1JvSUMwZ01UdGNiaUFnSUNCcFppaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU2xwYm1SbGVDQTlJRTFoZEdndWJXbHVLR2x1WkdWNExDQjBiMGx1ZEdWblpYSW9ZWEpuZFcxbGJuUnpXekZkS1NrN1hHNGdJQ0FnYVdZb2FXNWtaWGdnUENBd0tXbHVaR1Y0SUQwZ2JHVnVaM1JvSUNzZ2FXNWtaWGc3WEc0Z0lDQWdabTl5S0R0cGJtUmxlQ0ErUFNBd095QnBibVJsZUMwdEtXbG1LR2x1WkdWNElHbHVJRThwYVdZb1QxdHBibVJsZUYwZ1BUMDlJSE5sWVhKamFFVnNaVzFsYm5RcGNtVjBkWEp1SUdsdVpHVjRJSHg4SURBN1hHNGdJQ0FnY21WMGRYSnVJQzB4TzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKRzFoY0NBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGeWNtRjVMVzFsZEdodlpITW5LU2d4S1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUFrWlhod2IzSjBMa1lnS2lBaGNtVnhkV2x5WlNnbkxpOWZjM1J5YVdOMExXMWxkR2h2WkNjcEtGdGRMbTFoY0N3Z2RISjFaU2tzSUNkQmNuSmhlU2NzSUh0Y2JpQWdMeThnTWpJdU1TNHpMakUxSUM4Z01UVXVOQzQwTGpFNUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1dFlYQW9ZMkZzYkdKaFkydG1iaUJiTENCMGFHbHpRWEpuWFNsY2JpQWdiV0Z3T2lCbWRXNWpkR2x2YmlCdFlYQW9ZMkZzYkdKaFkydG1iaUF2S2lBc0lIUm9hWE5CY21jZ0tpOHBlMXh1SUNBZ0lISmxkSFZ5YmlBa2JXRndLSFJvYVhNc0lHTmhiR3hpWVdOclptNHNJR0Z5WjNWdFpXNTBjMXN4WFNrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWlhod2IzSjBJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dZM0psWVhSbFVISnZjR1Z5ZEhrZ1BTQnlaWEYxYVhKbEtDY3VMMTlqY21WaGRHVXRjSEp2Y0dWeWRIa25LVHRjYmx4dUx5OGdWMlZpUzJsMElFRnljbUY1TG05bUlHbHpiaWQwSUdkbGJtVnlhV05jYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUSUNzZ0pHVjRjRzl5ZEM1R0lDb2djbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaWdwZTF4dUlDQm1kVzVqZEdsdmJpQkdLQ2w3ZlZ4dUlDQnlaWFIxY200Z0lTaEJjbkpoZVM1dlppNWpZV3hzS0VZcElHbHVjM1JoYm1ObGIyWWdSaWs3WEc1OUtTd2dKMEZ5Y21GNUp5d2dlMXh1SUNBdkx5QXlNaTR4TGpJdU15QkJjbkpoZVM1dlppZ2dMaTR1YVhSbGJYTXBYRzRnSUc5bU9pQm1kVzVqZEdsdmJpQnZaaWd2S2lBdUxpNWhjbWR6SUNvdktYdGNiaUFnSUNCMllYSWdhVzVrWlhnZ0lEMGdNRnh1SUNBZ0lDQWdMQ0JoVEdWdUlDQWdQU0JoY21kMWJXVnVkSE11YkdWdVozUm9YRzRnSUNBZ0lDQXNJSEpsYzNWc2RDQTlJRzVsZHlBb2RIbHdaVzltSUhSb2FYTWdQVDBnSjJaMWJtTjBhVzl1SnlBL0lIUm9hWE1nT2lCQmNuSmhlU2tvWVV4bGJpazdYRzRnSUNBZ2QyaHBiR1VvWVV4bGJpQStJR2x1WkdWNEtXTnlaV0YwWlZCeWIzQmxjblI1S0hKbGMzVnNkQ3dnYVc1a1pYZ3NJR0Z5WjNWdFpXNTBjMXRwYm1SbGVDc3JYU2s3WEc0Z0lDQWdjbVZ6ZFd4MExteGxibWQwYUNBOUlHRk1aVzQ3WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1J5WldSMVkyVWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzF5WldSMVkyVW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExrWWdLaUFoY21WeGRXbHlaU2duTGk5ZmMzUnlhV04wTFcxbGRHaHZaQ2NwS0Z0ZExuSmxaSFZqWlZKcFoyaDBMQ0IwY25WbEtTd2dKMEZ5Y21GNUp5d2dlMXh1SUNBdkx5QXlNaTR4TGpNdU1Ua2dMeUF4TlM0MExqUXVNaklnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbkpsWkhWalpWSnBaMmgwS0dOaGJHeGlZV05yWm00Z1d5d2dhVzVwZEdsaGJGWmhiSFZsWFNsY2JpQWdjbVZrZFdObFVtbG5hSFE2SUdaMWJtTjBhVzl1SUhKbFpIVmpaVkpwWjJoMEtHTmhiR3hpWVdOclptNGdMeW9nTENCcGJtbDBhV0ZzVm1Gc2RXVWdLaThwZTF4dUlDQWdJSEpsZEhWeWJpQWtjbVZrZFdObEtIUm9hWE1zSUdOaGJHeGlZV05yWm00c0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnc0lHRnlaM1Z0Wlc1MGMxc3hYU3dnZEhKMVpTazdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa2NtVmtkV05sSUQwZ2NtVnhkV2x5WlNnbkxpOWZZWEp5WVhrdGNtVmtkV05sSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ0lYSmxjWFZwY21Vb0p5NHZYM04wY21samRDMXRaWFJvYjJRbktTaGJYUzV5WldSMVkyVXNJSFJ5ZFdVcExDQW5RWEp5WVhrbkxDQjdYRzRnSUM4dklESXlMakV1TXk0eE9DQXZJREUxTGpRdU5DNHlNU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjbVZrZFdObEtHTmhiR3hpWVdOclptNGdXeXdnYVc1cGRHbGhiRlpoYkhWbFhTbGNiaUFnY21Wa2RXTmxPaUJtZFc1amRHbHZiaUJ5WldSMVkyVW9ZMkZzYkdKaFkydG1iaUF2S2lBc0lHbHVhWFJwWVd4V1lXeDFaU0FxTHlsN1hHNGdJQ0FnY21WMGRYSnVJQ1J5WldSMVkyVW9kR2hwY3l3Z1kyRnNiR0poWTJ0bWJpd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDd2dZWEpuZFcxbGJuUnpXekZkTENCbVlXeHpaU2s3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQWtaWGh3YjNKMElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JvZEcxc0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhSFJ0YkNjcFhHNGdJQ3dnWTI5bUlDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMk52WmljcFhHNGdJQ3dnZEc5SmJtUmxlQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdVpHVjRKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5bGNiaUFnTENCaGNuSmhlVk5zYVdObElEMGdXMTB1YzJ4cFkyVTdYRzVjYmk4dklHWmhiR3hpWVdOcklHWnZjaUJ1YjNRZ1lYSnlZWGt0YkdsclpTQkZVek1nYzNSeWFXNW5jeUJoYm1RZ1JFOU5JRzlpYW1WamRITmNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCcFppaG9kRzFzS1dGeWNtRjVVMnhwWTJVdVkyRnNiQ2hvZEcxc0tUdGNibjBwTENBblFYSnlZWGtuTENCN1hHNGdJSE5zYVdObE9pQm1kVzVqZEdsdmJpQnpiR2xqWlNoaVpXZHBiaXdnWlc1a0tYdGNiaUFnSUNCMllYSWdiR1Z1SUNBZ1BTQjBiMHhsYm1kMGFDaDBhR2x6TG14bGJtZDBhQ2xjYmlBZ0lDQWdJQ3dnYTJ4aGMzTWdQU0JqYjJZb2RHaHBjeWs3WEc0Z0lDQWdaVzVrSUQwZ1pXNWtJRDA5UFNCMWJtUmxabWx1WldRZ1B5QnNaVzRnT2lCbGJtUTdYRzRnSUNBZ2FXWW9hMnhoYzNNZ1BUMGdKMEZ5Y21GNUp5bHlaWFIxY200Z1lYSnlZWGxUYkdsalpTNWpZV3hzS0hSb2FYTXNJR0psWjJsdUxDQmxibVFwTzF4dUlDQWdJSFpoY2lCemRHRnlkQ0FnUFNCMGIwbHVaR1Y0S0dKbFoybHVMQ0JzWlc0cFhHNGdJQ0FnSUNBc0lIVndWRzhnSUNBOUlIUnZTVzVrWlhnb1pXNWtMQ0JzWlc0cFhHNGdJQ0FnSUNBc0lITnBlbVVnSUNBOUlIUnZUR1Z1WjNSb0tIVndWRzhnTFNCemRHRnlkQ2xjYmlBZ0lDQWdJQ3dnWTJ4dmJtVmtJRDBnUVhKeVlYa29jMmw2WlNsY2JpQWdJQ0FnSUN3Z2FTQWdJQ0FnSUQwZ01EdGNiaUFnSUNCbWIzSW9PeUJwSUR3Z2MybDZaVHNnYVNzcktXTnNiMjVsWkZ0cFhTQTlJR3RzWVhOeklEMDlJQ2RUZEhKcGJtY25YRzRnSUNBZ0lDQS9JSFJvYVhNdVkyaGhja0YwS0hOMFlYSjBJQ3NnYVNsY2JpQWdJQ0FnSURvZ2RHaHBjMXR6ZEdGeWRDQXJJR2xkTzF4dUlDQWdJSEpsZEhWeWJpQmpiRzl1WldRN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrYzI5dFpTQWdJRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0YldWMGFHOWtjeWNwS0RNcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDRnlaWEYxYVhKbEtDY3VMMTl6ZEhKcFkzUXRiV1YwYUc5a0p5a29XMTB1YzI5dFpTd2dkSEoxWlNrc0lDZEJjbkpoZVNjc0lIdGNiaUFnTHk4Z01qSXVNUzR6TGpJeklDOGdNVFV1TkM0MExqRTNJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiMjFsS0dOaGJHeGlZV05yWm00Z1d5d2dkR2hwYzBGeVoxMHBYRzRnSUhOdmJXVTZJR1oxYm1OMGFXOXVJSE52YldVb1kyRnNiR0poWTJ0bWJpQXZLaUFzSUhSb2FYTkJjbWNnS2k4cGUxeHVJQ0FnSUhKbGRIVnliaUFrYzI5dFpTaDBhR2x6TENCallXeHNZbUZqYTJadUxDQmhjbWQxYldWdWRITmJNVjBwTzF4dUlDQjlYRzU5S1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1MllYSWdKR1Y0Y0c5eWRDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JoUm5WdVkzUnBiMjRnUFNCeVpYRjFhWEpsS0NjdUwxOWhMV1oxYm1OMGFXOXVKeWxjYmlBZ0xDQjBiMDlpYW1WamRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHVJQ0FzSUdaaGFXeHpJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5bGNiaUFnTENBa2MyOXlkQ0FnSUNBZ1BTQmJYUzV6YjNKMFhHNGdJQ3dnZEdWemRDQWdJQ0FnSUQwZ1d6RXNJRElzSUROZE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVQ0FySUNSbGVIQnZjblF1UmlBcUlDaG1ZV2xzY3lobWRXNWpkR2x2YmlncGUxeHVJQ0F2THlCSlJUZ3RYRzRnSUhSbGMzUXVjMjl5ZENoMWJtUmxabWx1WldRcE8xeHVmU2tnZkh3Z0lXWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJQzh2SUZZNElHSjFaMXh1SUNCMFpYTjBMbk52Y25Rb2JuVnNiQ2s3WEc0Z0lDOHZJRTlzWkNCWFpXSkxhWFJjYm4wcElIeDhJQ0Z5WlhGMWFYSmxLQ2N1TDE5emRISnBZM1F0YldWMGFHOWtKeWtvSkhOdmNuUXBLU3dnSjBGeWNtRjVKeXdnZTF4dUlDQXZMeUF5TWk0eExqTXVNalVnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbk52Y25Rb1kyOXRjR0Z5WldadUtWeHVJQ0J6YjNKME9pQm1kVzVqZEdsdmJpQnpiM0owS0dOdmJYQmhjbVZtYmlsN1hHNGdJQ0FnY21WMGRYSnVJR052YlhCaGNtVm1iaUE5UFQwZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBL0lDUnpiM0owTG1OaGJHd29kRzlQWW1wbFkzUW9kR2hwY3lrcFhHNGdJQ0FnSUNBNklDUnpiM0owTG1OaGJHd29kRzlQWW1wbFkzUW9kR2hwY3lrc0lHRkdkVzVqZEdsdmJpaGpiMjF3WVhKbFptNHBLVHRjYmlBZ2ZWeHVmU2s3SWl3aWNtVnhkV2x5WlNnbkxpOWZjMlYwTFhOd1pXTnBaWE1uS1NnblFYSnlZWGtuS1RzaUxDSXZMeUF5TUM0ekxqTXVNU0F2SURFMUxqa3VOQzQwSUVSaGRHVXVibTkzS0NsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuUkdGMFpTY3NJSHR1YjNjNklHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQnVaWGNnUkdGMFpTZ3BMbWRsZEZScGJXVW9LVHNnZlgwcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJREl3TGpNdU5DNHpOaUF2SURFMUxqa3VOUzQwTXlCRVlYUmxMbkJ5YjNSdmRIbHdaUzUwYjBsVFQxTjBjbWx1WnlncFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWm1GcGJITWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6SnlsY2JpQWdMQ0JuWlhSVWFXMWxJRDBnUkdGMFpTNXdjbTkwYjNSNWNHVXVaMlYwVkdsdFpUdGNibHh1ZG1GeUlHeDZJRDBnWm5WdVkzUnBiMjRvYm5WdEtYdGNiaUFnY21WMGRYSnVJRzUxYlNBK0lEa2dQeUJ1ZFcwZ09pQW5NQ2NnS3lCdWRXMDdYRzU5TzF4dVhHNHZMeUJRYUdGdWRHOXRTbE1nTHlCdmJHUWdWMlZpUzJsMElHaGhjeUJoSUdKeWIydGxiaUJwYlhCc1pXMWxiblJoZEdsdmJuTmNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQnVaWGNnUkdGMFpTZ3ROV1V4TXlBdElERXBMblJ2U1ZOUFUzUnlhVzVuS0NrZ0lUMGdKekF6T0RVdE1EY3RNalZVTURjNk1EWTZNemt1T1RrNVdpYzdYRzU5S1NCOGZDQWhabUZwYkhNb1puVnVZM1JwYjI0b0tYdGNiaUFnYm1WM0lFUmhkR1VvVG1GT0tTNTBiMGxUVDFOMGNtbHVaeWdwTzF4dWZTa3BMQ0FuUkdGMFpTY3NJSHRjYmlBZ2RHOUpVMDlUZEhKcGJtYzZJR1oxYm1OMGFXOXVJSFJ2U1ZOUFUzUnlhVzVuS0NsN1hHNGdJQ0FnYVdZb0lXbHpSbWx1YVhSbEtHZGxkRlJwYldVdVkyRnNiQ2gwYUdsektTa3BkR2h5YjNjZ1VtRnVaMlZGY25KdmNpZ25TVzUyWVd4cFpDQjBhVzFsSUhaaGJIVmxKeWs3WEc0Z0lDQWdkbUZ5SUdRZ1BTQjBhR2x6WEc0Z0lDQWdJQ0FzSUhrZ1BTQmtMbWRsZEZWVVEwWjFiR3haWldGeUtDbGNiaUFnSUNBZ0lDd2diU0E5SUdRdVoyVjBWVlJEVFdsc2JHbHpaV052Ym1SektDbGNiaUFnSUNBZ0lDd2djeUE5SUhrZ1BDQXdJRDhnSnkwbklEb2dlU0ErSURrNU9Ua2dQeUFuS3ljZ09pQW5KenRjYmlBZ0lDQnlaWFIxY200Z2N5QXJJQ2duTURBd01EQW5JQ3NnVFdGMGFDNWhZbk1vZVNrcExuTnNhV05sS0hNZ1B5QXROaUE2SUMwMEtTQXJYRzRnSUNBZ0lDQW5MU2NnS3lCc2VpaGtMbWRsZEZWVVEwMXZiblJvS0NrZ0t5QXhLU0FySUNjdEp5QXJJR3g2S0dRdVoyVjBWVlJEUkdGMFpTZ3BLU0FyWEc0Z0lDQWdJQ0FuVkNjZ0t5QnNlaWhrTG1kbGRGVlVRMGh2ZFhKektDa3BJQ3NnSnpvbklDc2diSG9vWkM1blpYUlZWRU5OYVc1MWRHVnpLQ2twSUN0Y2JpQWdJQ0FnSUNjNkp5QXJJR3g2S0dRdVoyVjBWVlJEVTJWamIyNWtjeWdwS1NBcklDY3VKeUFySUNodElENGdPVGtnUHlCdElEb2dKekFuSUNzZ2JIb29iU2twSUNzZ0oxb25PMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ0pHVjRjRzl5ZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJSFJ2VDJKcVpXTjBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMUJ5YVcxcGRHbDJaU0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMWEJ5YVcxcGRHbDJaU2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJRzVsZHlCRVlYUmxLRTVoVGlrdWRHOUtVMDlPS0NrZ0lUMDlJRzUxYkd3Z2ZId2dSR0YwWlM1d2NtOTBiM1I1Y0dVdWRHOUtVMDlPTG1OaGJHd29lM1J2U1ZOUFUzUnlhVzVuT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z01Uc2dmWDBwSUNFOVBTQXhPMXh1ZlNrc0lDZEVZWFJsSnl3Z2UxeHVJQ0IwYjBwVFQwNDZJR1oxYm1OMGFXOXVJSFJ2U2xOUFRpaHJaWGtwZTF4dUlDQWdJSFpoY2lCUElDQTlJSFJ2VDJKcVpXTjBLSFJvYVhNcFhHNGdJQ0FnSUNBc0lIQjJJRDBnZEc5UWNtbHRhWFJwZG1Vb1R5azdYRzRnSUNBZ2NtVjBkWEp1SUhSNWNHVnZaaUJ3ZGlBOVBTQW5iblZ0WW1WeUp5QW1KaUFoYVhOR2FXNXBkR1VvY0hZcElEOGdiblZzYkNBNklFOHVkRzlKVTA5VGRISnBibWNvS1R0Y2JpQWdmVnh1ZlNrN0lpd2lkbUZ5SUZSUFgxQlNTVTFKVkVsV1JTQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5Y3BLQ2QwYjFCeWFXMXBkR2wyWlNjcFhHNGdJQ3dnY0hKdmRHOGdJQ0FnSUNBZ0lEMGdSR0YwWlM1d2NtOTBiM1I1Y0dVN1hHNWNibWxtS0NFb1ZFOWZVRkpKVFVsVVNWWkZJR2x1SUhCeWIzUnZLU2x5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWtvY0hKdmRHOHNJRlJQWDFCU1NVMUpWRWxXUlN3Z2NtVnhkV2x5WlNnbkxpOWZaR0YwWlMxMGJ5MXdjbWx0YVhScGRtVW5LU2s3SWl3aWRtRnlJRVJoZEdWUWNtOTBieUFnSUNBOUlFUmhkR1V1Y0hKdmRHOTBlWEJsWEc0Z0lDd2dTVTVXUVV4SlJGOUVRVlJGSUQwZ0owbHVkbUZzYVdRZ1JHRjBaU2RjYmlBZ0xDQlVUMTlUVkZKSlRrY2dJQ0FnUFNBbmRHOVRkSEpwYm1jblhHNGdJQ3dnSkhSdlUzUnlhVzVuSUNBZ0lEMGdSR0YwWlZCeWIzUnZXMVJQWDFOVVVrbE9SMTFjYmlBZ0xDQm5aWFJVYVcxbElDQWdJQ0FnUFNCRVlYUmxVSEp2ZEc4dVoyVjBWR2x0WlR0Y2JtbG1LRzVsZHlCRVlYUmxLRTVoVGlrZ0t5QW5KeUFoUFNCSlRsWkJURWxFWDBSQlZFVXBlMXh1SUNCeVpYRjFhWEpsS0NjdUwxOXlaV1JsWm1sdVpTY3BLRVJoZEdWUWNtOTBieXdnVkU5ZlUxUlNTVTVITENCbWRXNWpkR2x2YmlCMGIxTjBjbWx1WnlncGUxeHVJQ0FnSUhaaGNpQjJZV3gxWlNBOUlHZGxkRlJwYldVdVkyRnNiQ2gwYUdsektUdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc2RXVWdQVDA5SUhaaGJIVmxJRDhnSkhSdlUzUnlhVzVuTG1OaGJHd29kR2hwY3lrZ09pQkpUbFpCVEVsRVgwUkJWRVU3WEc0Z0lIMHBPMXh1ZlNJc0lpOHZJREU1TGpJdU15NHlJQzhnTVRVdU15NDBMalVnUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTG1KcGJtUW9kR2hwYzBGeVp5d2dZWEpuY3k0dUxpbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRTENBblJuVnVZM1JwYjI0bkxDQjdZbWx1WkRvZ2NtVnhkV2x5WlNnbkxpOWZZbWx1WkNjcGZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdselQySnFaV04wSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5bGNiaUFnTENCblpYUlFjbTkwYjNSNWNHVlBaaUE5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmNHOG5LVnh1SUNBc0lFaEJVMTlKVGxOVVFVNURSU0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oyaGhjMGx1YzNSaGJtTmxKeWxjYmlBZ0xDQkdkVzVqZEdsdmJsQnliM1J2SUNBOUlFWjFibU4wYVc5dUxuQnliM1J2ZEhsd1pUdGNiaTh2SURFNUxqSXVNeTQySUVaMWJtTjBhVzl1TG5CeWIzUnZkSGx3WlZ0QVFHaGhjMGx1YzNSaGJtTmxYU2hXS1Z4dWFXWW9JU2hJUVZOZlNVNVRWRUZPUTBVZ2FXNGdSblZ1WTNScGIyNVFjbTkwYnlrcGNtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWt1WmloR2RXNWpkR2x2YmxCeWIzUnZMQ0JJUVZOZlNVNVRWRUZPUTBVc0lIdDJZV3gxWlRvZ1puVnVZM1JwYjI0b1R5bDdYRzRnSUdsbUtIUjVjR1Z2WmlCMGFHbHpJQ0U5SUNkbWRXNWpkR2x2YmljZ2ZId2dJV2x6VDJKcVpXTjBLRThwS1hKbGRIVnliaUJtWVd4elpUdGNiaUFnYVdZb0lXbHpUMkpxWldOMEtIUm9hWE11Y0hKdmRHOTBlWEJsS1NseVpYUjFjbTRnVHlCcGJuTjBZVzVqWlc5bUlIUm9hWE03WEc0Z0lDOHZJR1p2Y2lCbGJuWnBjbTl1YldWdWRDQjNMMjhnYm1GMGFYWmxJR0JBUUdoaGMwbHVjM1JoYm1ObFlDQnNiMmRwWXlCbGJtOTFaMmdnWUdsdWMzUmhibU5sYjJaZ0xDQmlkWFFnWVdSa0lIUm9hWE02WEc0Z0lIZG9hV3hsS0U4Z1BTQm5aWFJRY205MGIzUjVjR1ZQWmloUEtTbHBaaWgwYUdsekxuQnliM1J2ZEhsd1pTQTlQVDBnVHlseVpYUjFjbTRnZEhKMVpUdGNiaUFnY21WMGRYSnVJR1poYkhObE8xeHVmWDBwT3lJc0luWmhjaUJrVUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWt1Wmx4dUlDQXNJR055WldGMFpVUmxjMk1nUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlsY2JpQWdMQ0JvWVhNZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6SnlsY2JpQWdMQ0JHVUhKdmRHOGdJQ0FnSUQwZ1JuVnVZM1JwYjI0dWNISnZkRzkwZVhCbFhHNGdJQ3dnYm1GdFpWSkZJQ0FnSUNBOUlDOWVYRnh6S21aMWJtTjBhVzl1SUNoYlhpQW9YU29wTDF4dUlDQXNJRTVCVFVVZ0lDQWdJQ0FnUFNBbmJtRnRaU2M3WEc1Y2JuWmhjaUJwYzBWNGRHVnVjMmxpYkdVZ1BTQlBZbXBsWTNRdWFYTkZlSFJsYm5OcFlteGxJSHg4SUdaMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQjBjblZsTzF4dWZUdGNibHh1THk4Z01Ua3VNaTQwTGpJZ2JtRnRaVnh1VGtGTlJTQnBiaUJHVUhKdmRHOGdmSHdnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0FtSmlCa1VDaEdVSEp2ZEc4c0lFNUJUVVVzSUh0Y2JpQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNCblpYUTZJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUhaaGNpQjBhR0YwSUQwZ2RHaHBjMXh1SUNBZ0lDQWdJQ0FzSUc1aGJXVWdQU0FvSnljZ0t5QjBhR0YwS1M1dFlYUmphQ2h1WVcxbFVrVXBXekZkTzF4dUlDQWdJQ0FnYUdGektIUm9ZWFFzSUU1QlRVVXBJSHg4SUNGcGMwVjRkR1Z1YzJsaWJHVW9kR2hoZENrZ2ZId2daRkFvZEdoaGRDd2dUa0ZOUlN3Z1kzSmxZWFJsUkdWell5ZzFMQ0J1WVcxbEtTazdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtRnRaVHRjYmlBZ0lDQjlJR05oZEdOb0tHVXBlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDY25PMXh1SUNBZ0lIMWNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUhOMGNtOXVaeUE5SUhKbGNYVnBjbVVvSnk0dlgyTnZiR3hsWTNScGIyNHRjM1J5YjI1bkp5azdYRzVjYmk4dklESXpMakVnVFdGd0lFOWlhbVZqZEhOY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjlzYkdWamRHbHZiaWNwS0NkTllYQW5MQ0JtZFc1amRHbHZiaWhuWlhRcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdUV0Z3S0NsN0lISmxkSFZ5YmlCblpYUW9kR2hwY3l3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lEQWdQeUJoY21kMWJXVnVkSE5iTUYwZ09pQjFibVJsWm1sdVpXUXBPeUI5TzF4dWZTd2dlMXh1SUNBdkx5QXlNeTR4TGpNdU5pQk5ZWEF1Y0hKdmRHOTBlWEJsTG1kbGRDaHJaWGtwWEc0Z0lHZGxkRG9nWm5WdVkzUnBiMjRnWjJWMEtHdGxlU2w3WEc0Z0lDQWdkbUZ5SUdWdWRISjVJRDBnYzNSeWIyNW5MbWRsZEVWdWRISjVLSFJvYVhNc0lHdGxlU2s3WEc0Z0lDQWdjbVYwZFhKdUlHVnVkSEo1SUNZbUlHVnVkSEo1TG5ZN1hHNGdJSDBzWEc0Z0lDOHZJREl6TGpFdU15NDVJRTFoY0M1d2NtOTBiM1I1Y0dVdWMyVjBLR3RsZVN3Z2RtRnNkV1VwWEc0Z0lITmxkRG9nWm5WdVkzUnBiMjRnYzJWMEtHdGxlU3dnZG1Gc2RXVXBlMXh1SUNBZ0lISmxkSFZ5YmlCemRISnZibWN1WkdWbUtIUm9hWE1zSUd0bGVTQTlQVDBnTUNBL0lEQWdPaUJyWlhrc0lIWmhiSFZsS1R0Y2JpQWdmVnh1ZlN3Z2MzUnliMjVuTENCMGNuVmxLVHNpTENJdkx5QXlNQzR5TGpJdU15Qk5ZWFJvTG1GamIzTm9LSGdwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2diRzluTVhBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxaGRHZ3RiRzluTVhBbktWeHVJQ0FzSUhOeGNuUWdJQ0FnUFNCTllYUm9Mbk54Y25SY2JpQWdMQ0FrWVdOdmMyZ2dJRDBnVFdGMGFDNWhZMjl6YUR0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaEtDUmhZMjl6YUZ4dUlDQXZMeUJXT0NCaWRXYzZJR2gwZEhCek9pOHZZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZkamd2YVhOemRXVnpMMlJsZEdGcGJEOXBaRDB6TlRBNVhHNGdJQ1ltSUUxaGRHZ3VabXh2YjNJb0pHRmpiM05vS0U1MWJXSmxjaTVOUVZoZlZrRk1WVVVwS1NBOVBTQTNNVEJjYmlBZ0x5OGdWRzl5SUVKeWIzZHpaWElnWW5Wbk9pQk5ZWFJvTG1GamIzTm9LRWx1Wm1sdWFYUjVLU0F0UGlCT1lVNGdYRzRnSUNZbUlDUmhZMjl6YUNoSmJtWnBibWwwZVNrZ1BUMGdTVzVtYVc1cGRIbGNiaWtzSUNkTllYUm9KeXdnZTF4dUlDQmhZMjl6YURvZ1puVnVZM1JwYjI0Z1lXTnZjMmdvZUNsN1hHNGdJQ0FnY21WMGRYSnVJQ2g0SUQwZ0szZ3BJRHdnTVNBL0lFNWhUaUE2SUhnZ1BpQTVORGt3TmpJMk5TNDJNalF5TlRFMU5seHVJQ0FnSUNBZ1B5Qk5ZWFJvTG14dlp5aDRLU0FySUUxaGRHZ3VURTR5WEc0Z0lDQWdJQ0E2SUd4dlp6RndLSGdnTFNBeElDc2djM0Z5ZENoNElDMGdNU2tnS2lCemNYSjBLSGdnS3lBeEtTazdYRzRnSUgxY2JuMHBPeUlzSWk4dklESXdMakl1TWk0MUlFMWhkR2d1WVhOcGJtZ29lQ2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtZWE5wYm1nZ0lEMGdUV0YwYUM1aGMybHVhRHRjYmx4dVpuVnVZM1JwYjI0Z1lYTnBibWdvZUNsN1hHNGdJSEpsZEhWeWJpQWhhWE5HYVc1cGRHVW9lQ0E5SUN0NEtTQjhmQ0I0SUQwOUlEQWdQeUI0SURvZ2VDQThJREFnUHlBdFlYTnBibWdvTFhncElEb2dUV0YwYUM1c2IyY29lQ0FySUUxaGRHZ3VjM0Z5ZENoNElDb2dlQ0FySURFcEtUdGNibjFjYmx4dUx5OGdWRzl5SUVKeWIzZHpaWElnWW5Wbk9pQk5ZWFJvTG1GemFXNW9LREFwSUMwK0lDMHdJRnh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQWhLQ1JoYzJsdWFDQW1KaUF4SUM4Z0pHRnphVzVvS0RBcElENGdNQ2tzSUNkTllYUm9KeXdnZTJGemFXNW9PaUJoYzJsdWFIMHBPeUlzSWk4dklESXdMakl1TWk0M0lFMWhkR2d1WVhSaGJtZ29lQ2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtZWFJoYm1nZ0lEMGdUV0YwYUM1aGRHRnVhRHRjYmx4dUx5OGdWRzl5SUVKeWIzZHpaWElnWW5Wbk9pQk5ZWFJvTG1GMFlXNW9LQzB3S1NBdFBpQXdJRnh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQWhLQ1JoZEdGdWFDQW1KaUF4SUM4Z0pHRjBZVzVvS0Mwd0tTQThJREFwTENBblRXRjBhQ2NzSUh0Y2JpQWdZWFJoYm1nNklHWjFibU4wYVc5dUlHRjBZVzVvS0hncGUxeHVJQ0FnSUhKbGRIVnliaUFvZUNBOUlDdDRLU0E5UFNBd0lEOGdlQ0E2SUUxaGRHZ3ViRzluS0NneElDc2dlQ2tnTHlBb01TQXRJSGdwS1NBdklESTdYRzRnSUgxY2JuMHBPeUlzSWk4dklESXdMakl1TWk0NUlFMWhkR2d1WTJKeWRDaDRLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lITnBaMjRnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl0WVhSb0xYTnBaMjRuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2ROWVhSb0p5d2dlMXh1SUNCalluSjBPaUJtZFc1amRHbHZiaUJqWW5KMEtIZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCemFXZHVLSGdnUFNBcmVDa2dLaUJOWVhSb0xuQnZkeWhOWVhSb0xtRmljeWg0S1N3Z01TQXZJRE1wTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TUM0eUxqSXVNVEVnVFdGMGFDNWpiSG96TWloNEtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkTllYUm9KeXdnZTF4dUlDQmpiSG96TWpvZ1puVnVZM1JwYjI0Z1kyeDZNeklvZUNsN1hHNGdJQ0FnY21WMGRYSnVJQ2g0SUQ0K1BqMGdNQ2tnUHlBek1TQXRJRTFoZEdndVpteHZiM0lvVFdGMGFDNXNiMmNvZUNBcklEQXVOU2tnS2lCTllYUm9Ma3hQUnpKRktTQTZJRE15TzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TUM0eUxqSXVNVElnVFdGMGFDNWpiM05vS0hncFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWlhod0lDQWdJQ0E5SUUxaGRHZ3VaWGh3TzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDFoZEdnbkxDQjdYRzRnSUdOdmMyZzZJR1oxYm1OMGFXOXVJR052YzJnb2VDbDdYRzRnSUNBZ2NtVjBkWEp1SUNobGVIQW9lQ0E5SUN0NEtTQXJJR1Y0Y0NndGVDa3BJQzhnTWp0Y2JpQWdmVnh1ZlNrN0lpd2lMeThnTWpBdU1pNHlMakUwSUUxaGRHZ3VaWGh3YlRFb2VDbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENBa1pYaHdiVEVnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV0YwYUMxbGVIQnRNU2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNna1pYaHdiVEVnSVQwZ1RXRjBhQzVsZUhCdE1Ta3NJQ2ROWVhSb0p5d2dlMlY0Y0cweE9pQWtaWGh3YlRGOUtUc2lMQ0l2THlBeU1DNHlMakl1TVRZZ1RXRjBhQzVtY205MWJtUW9lQ2xjYm5aaGNpQWtaWGh3YjNKMElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJSE5wWjI0Z0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWhkR2d0YzJsbmJpY3BYRzRnSUN3Z2NHOTNJQ0FnSUNBZ0lEMGdUV0YwYUM1d2IzZGNiaUFnTENCRlVGTkpURTlPSUNBZ1BTQndiM2NvTWl3Z0xUVXlLVnh1SUNBc0lFVlFVMGxNVDA0ek1pQTlJSEJ2ZHlneUxDQXRNak1wWEc0Z0lDd2dUVUZZTXpJZ0lDQWdJRDBnY0c5M0tESXNJREV5TnlrZ0tpQW9NaUF0SUVWUVUwbE1UMDR6TWlsY2JpQWdMQ0JOU1U0ek1pQWdJQ0FnUFNCd2IzY29NaXdnTFRFeU5pazdYRzVjYm5aaGNpQnliM1Z1WkZScFpYTlViMFYyWlc0Z1BTQm1kVzVqZEdsdmJpaHVLWHRjYmlBZ2NtVjBkWEp1SUc0Z0t5QXhJQzhnUlZCVFNVeFBUaUF0SURFZ0x5QkZVRk5KVEU5T08xeHVmVHRjYmx4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDFoZEdnbkxDQjdYRzRnSUdaeWIzVnVaRG9nWm5WdVkzUnBiMjRnWm5KdmRXNWtLSGdwZTF4dUlDQWdJSFpoY2lBa1lXSnpJQ0E5SUUxaGRHZ3VZV0p6S0hncFhHNGdJQ0FnSUNBc0lDUnphV2R1SUQwZ2MybG5iaWg0S1Z4dUlDQWdJQ0FnTENCaExDQnlaWE4xYkhRN1hHNGdJQ0FnYVdZb0pHRmljeUE4SUUxSlRqTXlLWEpsZEhWeWJpQWtjMmxuYmlBcUlISnZkVzVrVkdsbGMxUnZSWFpsYmlna1lXSnpJQzhnVFVsT016SWdMeUJGVUZOSlRFOU9NeklwSUNvZ1RVbE9NeklnS2lCRlVGTkpURTlPTXpJN1hHNGdJQ0FnWVNBOUlDZ3hJQ3NnUlZCVFNVeFBUak15SUM4Z1JWQlRTVXhQVGlrZ0tpQWtZV0p6TzF4dUlDQWdJSEpsYzNWc2RDQTlJR0VnTFNBb1lTQXRJQ1JoWW5NcE8xeHVJQ0FnSUdsbUtISmxjM1ZzZENBK0lFMUJXRE15SUh4OElISmxjM1ZzZENBaFBTQnlaWE4xYkhRcGNtVjBkWEp1SUNSemFXZHVJQ29nU1c1bWFXNXBkSGs3WEc0Z0lDQWdjbVYwZFhKdUlDUnphV2R1SUNvZ2NtVnpkV3gwTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUF5TUM0eUxqSXVNVGNnVFdGMGFDNW9lWEJ2ZENoYmRtRnNkV1V4V3l3Z2RtRnNkV1V5V3l3ZzRvQ21JRjFkWFNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JoWW5NZ0lDQWdJRDBnVFdGMGFDNWhZbk03WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UV0YwYUNjc0lIdGNiaUFnYUhsd2IzUTZJR1oxYm1OMGFXOXVJR2g1Y0c5MEtIWmhiSFZsTVN3Z2RtRnNkV1V5S1hzZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJHbHVaU0J1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0FnSUhaaGNpQnpkVzBnSUQwZ01GeHVJQ0FnSUNBZ0xDQnBJQ0FnSUQwZ01GeHVJQ0FnSUNBZ0xDQmhUR1Z1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUZ4dUlDQWdJQ0FnTENCc1lYSm5JRDBnTUZ4dUlDQWdJQ0FnTENCaGNtY3NJR1JwZGp0Y2JpQWdJQ0IzYUdsc1pTaHBJRHdnWVV4bGJpbDdYRzRnSUNBZ0lDQmhjbWNnUFNCaFluTW9ZWEpuZFcxbGJuUnpXMmtySzEwcE8xeHVJQ0FnSUNBZ2FXWW9iR0Z5WnlBOElHRnlaeWw3WEc0Z0lDQWdJQ0FnSUdScGRpQWdQU0JzWVhKbklDOGdZWEpuTzF4dUlDQWdJQ0FnSUNCemRXMGdJRDBnYzNWdElDb2daR2wySUNvZ1pHbDJJQ3NnTVR0Y2JpQWdJQ0FnSUNBZ2JHRnlaeUE5SUdGeVp6dGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppaGhjbWNnUGlBd0tYdGNiaUFnSUNBZ0lDQWdaR2wySUNBOUlHRnlaeUF2SUd4aGNtYzdYRzRnSUNBZ0lDQWdJSE4xYlNBclBTQmthWFlnS2lCa2FYWTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2MzVnRJQ3M5SUdGeVp6dGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR3hoY21jZ1BUMDlJRWx1Wm1sdWFYUjVJRDhnU1c1bWFXNXBkSGtnT2lCc1lYSm5JQ29nVFdGMGFDNXpjWEowS0hOMWJTazdYRzRnSUgxY2JuMHBPeUlzSWk4dklESXdMakl1TWk0eE9DQk5ZWFJvTG1sdGRXd29lQ3dnZVNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrYVcxMWJDQWdJRDBnVFdGMGFDNXBiWFZzTzF4dVhHNHZMeUJ6YjIxbElGZGxZa3RwZENCMlpYSnphVzl1Y3lCbVlXbHNjeUIzYVhSb0lHSnBaeUJ1ZFcxaVpYSnpMQ0J6YjIxbElHaGhjeUIzY205dVp5QmhjbWwwZVZ4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUJ5WlhGMWFYSmxLQ2N1TDE5bVlXbHNjeWNwS0daMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQWthVzExYkNnd2VHWm1abVptWm1abUxDQTFLU0FoUFNBdE5TQjhmQ0FrYVcxMWJDNXNaVzVuZEdnZ0lUMGdNanRjYm4wcExDQW5UV0YwYUNjc0lIdGNiaUFnYVcxMWJEb2dablZ1WTNScGIyNGdhVzExYkNoNExDQjVLWHRjYmlBZ0lDQjJZWElnVlVsT1ZERTJJRDBnTUhobVptWm1YRzRnSUNBZ0lDQXNJSGh1SUQwZ0szaGNiaUFnSUNBZ0lDd2dlVzRnUFNBcmVWeHVJQ0FnSUNBZ0xDQjRiQ0E5SUZWSlRsUXhOaUFtSUhodVhHNGdJQ0FnSUNBc0lIbHNJRDBnVlVsT1ZERTJJQ1lnZVc0N1hHNGdJQ0FnY21WMGRYSnVJREFnZkNCNGJDQXFJSGxzSUNzZ0tDaFZTVTVVTVRZZ0ppQjRiaUErUGo0Z01UWXBJQ29nZVd3Z0t5QjRiQ0FxSUNoVlNVNVVNVFlnSmlCNWJpQStQajRnTVRZcElEdzhJREUySUQ0K1BpQXdLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TWk0eUxqSXhJRTFoZEdndWJHOW5NVEFvZUNsY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVFdGMGFDY3NJSHRjYmlBZ2JHOW5NVEE2SUdaMWJtTjBhVzl1SUd4dlp6RXdLSGdwZTF4dUlDQWdJSEpsZEhWeWJpQk5ZWFJvTG14dlp5aDRLU0F2SUUxaGRHZ3VURTR4TUR0Y2JpQWdmVnh1ZlNrN0lpd2lMeThnTWpBdU1pNHlMakl3SUUxaGRHZ3ViRzluTVhBb2VDbGNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblRXRjBhQ2NzSUh0c2IyY3hjRG9nY21WeGRXbHlaU2duTGk5ZmJXRjBhQzFzYjJjeGNDY3BmU2s3SWl3aUx5OGdNakF1TWk0eUxqSXlJRTFoZEdndWJHOW5NaWg0S1Z4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2ROWVhSb0p5d2dlMXh1SUNCc2IyY3lPaUJtZFc1amRHbHZiaUJzYjJjeUtIZ3BlMXh1SUNBZ0lISmxkSFZ5YmlCTllYUm9MbXh2WnloNEtTQXZJRTFoZEdndVRFNHlPMXh1SUNCOVhHNTlLVHNpTENJdkx5QXlNQzR5TGpJdU1qZ2dUV0YwYUM1emFXZHVLSGdwWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDFoZEdnbkxDQjdjMmxuYmpvZ2NtVnhkV2x5WlNnbkxpOWZiV0YwYUMxemFXZHVKeWw5S1RzaUxDSXZMeUF5TUM0eUxqSXVNekFnVFdGMGFDNXphVzVvS0hncFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWlhod2JURWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWhkR2d0Wlhod2JURW5LVnh1SUNBc0lHVjRjQ0FnSUNBZ1BTQk5ZWFJvTG1WNGNEdGNibHh1THk4Z1ZqZ2dibVZoY2lCRGFISnZiV2wxYlNBek9DQm9ZWE1nWVNCd2NtOWliR1Z0SUhkcGRHZ2dkbVZ5ZVNCemJXRnNiQ0J1ZFcxaVpYSnpYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5a29ablZ1WTNScGIyNG9LWHRjYmlBZ2NtVjBkWEp1SUNGTllYUm9Mbk5wYm1nb0xUSmxMVEUzS1NBaFBTQXRNbVV0TVRjN1hHNTlLU3dnSjAxaGRHZ25MQ0I3WEc0Z0lITnBibWc2SUdaMWJtTjBhVzl1SUhOcGJtZ29lQ2w3WEc0Z0lDQWdjbVYwZFhKdUlFMWhkR2d1WVdKektIZ2dQU0FyZUNrZ1BDQXhYRzRnSUNBZ0lDQS9JQ2hsZUhCdE1TaDRLU0F0SUdWNGNHMHhLQzE0S1NrZ0x5QXlYRzRnSUNBZ0lDQTZJQ2hsZUhBb2VDQXRJREVwSUMwZ1pYaHdLQzE0SUMwZ01Ta3BJQ29nS0UxaGRHZ3VSU0F2SURJcE8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1DNHlMakl1TXpNZ1RXRjBhQzUwWVc1b0tIZ3BYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1pYaHdiVEVnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjFoZEdndFpYaHdiVEVuS1Z4dUlDQXNJR1Y0Y0NBZ0lDQWdQU0JOWVhSb0xtVjRjRHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UxeHVJQ0IwWVc1b09pQm1kVzVqZEdsdmJpQjBZVzVvS0hncGUxeHVJQ0FnSUhaaGNpQmhJRDBnWlhod2JURW9lQ0E5SUN0NEtWeHVJQ0FnSUNBZ0xDQmlJRDBnWlhod2JURW9MWGdwTzF4dUlDQWdJSEpsZEhWeWJpQmhJRDA5SUVsdVptbHVhWFI1SUQ4Z01TQTZJR0lnUFQwZ1NXNW1hVzVwZEhrZ1B5QXRNU0E2SUNoaElDMGdZaWtnTHlBb1pYaHdLSGdwSUNzZ1pYaHdLQzE0S1NrN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJd0xqSXVNaTR6TkNCTllYUm9MblJ5ZFc1aktIZ3BYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owMWhkR2duTENCN1hHNGdJSFJ5ZFc1ak9pQm1kVzVqZEdsdmJpQjBjblZ1WXlocGRDbDdYRzRnSUNBZ2NtVjBkWEp1SUNocGRDQStJREFnUHlCTllYUm9MbVpzYjI5eUlEb2dUV0YwYUM1alpXbHNLU2hwZENrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJuYkc5aVlXd2dJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnYUdGeklDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJR052WmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyOW1KeWxjYmlBZ0xDQnBibWhsY21sMFNXWlNaWEYxYVhKbFpDQTlJSEpsY1hWcGNtVW9KeTR2WDJsdWFHVnlhWFF0YVdZdGNtVnhkV2x5WldRbktWeHVJQ0FzSUhSdlVISnBiV2wwYVhabElDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0Y0hKcGJXbDBhWFpsSnlsY2JpQWdMQ0JtWVdsc2N5QWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6SnlsY2JpQWdMQ0JuVDFCT0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnVKeWt1Wmx4dUlDQXNJR2RQVUVRZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LUzVtWEc0Z0lDd2daRkFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktTNW1YRzRnSUN3Z0pIUnlhVzBnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RkSEpwYlNjcExuUnlhVzFjYmlBZ0xDQk9WVTFDUlZJZ0lDQWdJQ0FnSUNBZ0lDQTlJQ2RPZFcxaVpYSW5YRzRnSUN3Z0pFNTFiV0psY2lBZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd4YlRsVk5Ra1ZTWFZ4dUlDQXNJRUpoYzJVZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnSkU1MWJXSmxjbHh1SUNBc0lIQnliM1J2SUNBZ0lDQWdJQ0FnSUNBZ0lEMGdKRTUxYldKbGNpNXdjbTkwYjNSNWNHVmNiaUFnTHk4Z1QzQmxjbUVnZmpFeUlHaGhjeUJpY205clpXNGdUMkpxWldOMEkzUnZVM1J5YVc1blhHNGdJQ3dnUWxKUFMwVk9YME5QUmlBZ0lDQWdJQ0FnUFNCamIyWW9jbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV055WldGMFpTY3BLSEJ5YjNSdktTa2dQVDBnVGxWTlFrVlNYRzRnSUN3Z1ZGSkpUU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQW5kSEpwYlNjZ2FXNGdVM1J5YVc1bkxuQnliM1J2ZEhsd1pUdGNibHh1THk4Z055NHhMak1nVkc5T2RXMWlaWElvWVhKbmRXMWxiblFwWEc1MllYSWdkRzlPZFcxaVpYSWdQU0JtZFc1amRHbHZiaWhoY21kMWJXVnVkQ2w3WEc0Z0lIWmhjaUJwZENBOUlIUnZVSEpwYldsMGFYWmxLR0Z5WjNWdFpXNTBMQ0JtWVd4elpTazdYRzRnSUdsbUtIUjVjR1Z2WmlCcGRDQTlQU0FuYzNSeWFXNW5KeUFtSmlCcGRDNXNaVzVuZEdnZ1BpQXlLWHRjYmlBZ0lDQnBkQ0E5SUZSU1NVMGdQeUJwZEM1MGNtbHRLQ2tnT2lBa2RISnBiU2hwZEN3Z015azdYRzRnSUNBZ2RtRnlJR1pwY25OMElEMGdhWFF1WTJoaGNrTnZaR1ZCZENnd0tWeHVJQ0FnSUNBZ0xDQjBhR2x5WkN3Z2NtRmthWGdzSUcxaGVFTnZaR1U3WEc0Z0lDQWdhV1lvWm1seWMzUWdQVDA5SURReklIeDhJR1pwY25OMElEMDlQU0EwTlNsN1hHNGdJQ0FnSUNCMGFHbHlaQ0E5SUdsMExtTm9ZWEpEYjJSbFFYUW9NaWs3WEc0Z0lDQWdJQ0JwWmloMGFHbHlaQ0E5UFQwZ09EZ2dmSHdnZEdocGNtUWdQVDA5SURFeU1DbHlaWFIxY200Z1RtRk9PeUF2THlCT2RXMWlaWElvSnlzd2VERW5LU0J6YUc5MWJHUWdZbVVnVG1GT0xDQnZiR1FnVmpnZ1ptbDRYRzRnSUNBZ2ZTQmxiSE5sSUdsbUtHWnBjbk4wSUQwOVBTQTBPQ2w3WEc0Z0lDQWdJQ0J6ZDJsMFkyZ29hWFF1WTJoaGNrTnZaR1ZCZENneEtTbDdYRzRnSUNBZ0lDQWdJR05oYzJVZ05qWWdPaUJqWVhObElEazRJQ0E2SUhKaFpHbDRJRDBnTWpzZ2JXRjRRMjlrWlNBOUlEUTVPeUJpY21WaGF6c2dMeThnWm1GemRDQmxjWFZoYkNBdlhqQmlXekF4WFNza0wybGNiaUFnSUNBZ0lDQWdZMkZ6WlNBM09TQTZJR05oYzJVZ01URXhJRG9nY21Ga2FYZ2dQU0E0T3lCdFlYaERiMlJsSUQwZ05UVTdJR0p5WldGck95QXZMeUJtWVhOMElHVnhkV0ZzSUM5ZU1HOWJNQzAzWFNza0wybGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2RDQTZJSEpsZEhWeWJpQXJhWFE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JtYjNJb2RtRnlJR1JwWjJsMGN5QTlJR2wwTG5Oc2FXTmxLRElwTENCcElEMGdNQ3dnYkNBOUlHUnBaMmwwY3k1c1pXNW5kR2dzSUdOdlpHVTdJR2tnUENCc095QnBLeXNwZTF4dUlDQWdJQ0FnSUNCamIyUmxJRDBnWkdsbmFYUnpMbU5vWVhKRGIyUmxRWFFvYVNrN1hHNGdJQ0FnSUNBZ0lDOHZJSEJoY25ObFNXNTBJSEJoY25ObGN5QmhJSE4wY21sdVp5QjBieUJoSUdacGNuTjBJSFZ1WVhaaGFXeGhZbXhsSUhONWJXSnZiRnh1SUNBZ0lDQWdJQ0F2THlCaWRYUWdWRzlPZFcxaVpYSWdjMmh2ZFd4a0lISmxkSFZ5YmlCT1lVNGdhV1lnWVNCemRISnBibWNnWTI5dWRHRnBibk1nZFc1aGRtRnBiR0ZpYkdVZ2MzbHRZbTlzYzF4dUlDQWdJQ0FnSUNCcFppaGpiMlJsSUR3Z05EZ2dmSHdnWTI5a1pTQStJRzFoZUVOdlpHVXBjbVYwZFhKdUlFNWhUanRjYmlBZ0lDQWdJSDBnY21WMGRYSnVJSEJoY25ObFNXNTBLR1JwWjJsMGN5d2djbUZrYVhncE8xeHVJQ0FnSUgxY2JpQWdmU0J5WlhSMWNtNGdLMmwwTzF4dWZUdGNibHh1YVdZb0lTUk9kVzFpWlhJb0p5QXdiekVuS1NCOGZDQWhKRTUxYldKbGNpZ25NR0l4SnlrZ2ZId2dKRTUxYldKbGNpZ25LekI0TVNjcEtYdGNiaUFnSkU1MWJXSmxjaUE5SUdaMWJtTjBhVzl1SUU1MWJXSmxjaWgyWVd4MVpTbDdYRzRnSUNBZ2RtRnlJR2wwSUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYUNBOElERWdQeUF3SURvZ2RtRnNkV1ZjYmlBZ0lDQWdJQ3dnZEdoaGRDQTlJSFJvYVhNN1hHNGdJQ0FnY21WMGRYSnVJSFJvWVhRZ2FXNXpkR0Z1WTJWdlppQWtUblZ0WW1WeVhHNGdJQ0FnSUNBdkx5QmphR1ZqYXlCdmJpQXhMaTVqYjI1emRISjFZM1J2Y2lobWIyOHBJR05oYzJWY2JpQWdJQ0FnSUNZbUlDaENVazlMUlU1ZlEwOUdJRDhnWm1GcGJITW9ablZ1WTNScGIyNG9LWHNnY0hKdmRHOHVkbUZzZFdWUFppNWpZV3hzS0hSb1lYUXBPeUI5S1NBNklHTnZaaWgwYUdGMEtTQWhQU0JPVlUxQ1JWSXBYRzRnSUNBZ0lDQWdJRDhnYVc1b1pYSnBkRWxtVW1WeGRXbHlaV1FvYm1WM0lFSmhjMlVvZEc5T2RXMWlaWElvYVhRcEtTd2dkR2hoZEN3Z0pFNTFiV0psY2lrZ09pQjBiMDUxYldKbGNpaHBkQ2s3WEc0Z0lIMDdYRzRnSUdadmNpaDJZWElnYTJWNWN5QTlJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a2dQeUJuVDFCT0tFSmhjMlVwSURvZ0tGeHVJQ0FnSUM4dklFVlRNenBjYmlBZ0lDQW5UVUZZWDFaQlRGVkZMRTFKVGw5V1FVeFZSU3hPWVU0c1RrVkhRVlJKVmtWZlNVNUdTVTVKVkZrc1VFOVRTVlJKVmtWZlNVNUdTVTVKVkZrc0p5QXJYRzRnSUNBZ0x5OGdSVk0ySUNocGJpQmpZWE5sTENCcFppQnRiMlIxYkdWeklIZHBkR2dnUlZNMklFNTFiV0psY2lCemRHRjBhV056SUhKbGNYVnBjbVZrSUdKbFptOXlaU2s2WEc0Z0lDQWdKMFZRVTBsTVQwNHNhWE5HYVc1cGRHVXNhWE5KYm5SbFoyVnlMR2x6VG1GT0xHbHpVMkZtWlVsdWRHVm5aWElzVFVGWVgxTkJSa1ZmU1U1VVJVZEZVaXduSUN0Y2JpQWdJQ0FuVFVsT1gxTkJSa1ZmU1U1VVJVZEZVaXh3WVhKelpVWnNiMkYwTEhCaGNuTmxTVzUwTEdselNXNTBaV2RsY2lkY2JpQWdLUzV6Y0d4cGRDZ25MQ2NwTENCcUlEMGdNQ3dnYTJWNU95QnJaWGx6TG14bGJtZDBhQ0ErSUdvN0lHb3JLeWw3WEc0Z0lDQWdhV1lvYUdGektFSmhjMlVzSUd0bGVTQTlJR3RsZVhOYmFsMHBJQ1ltSUNGb1lYTW9KRTUxYldKbGNpd2dhMlY1S1NsN1hHNGdJQ0FnSUNCa1VDZ2tUblZ0WW1WeUxDQnJaWGtzSUdkUFVFUW9RbUZ6WlN3Z2EyVjVLU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJQ1JPZFcxaVpYSXVjSEp2ZEc5MGVYQmxJRDBnY0hKdmRHODdYRzRnSUhCeWIzUnZMbU52Ym5OMGNuVmpkRzl5SUQwZ0pFNTFiV0psY2p0Y2JpQWdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVVuS1NobmJHOWlZV3dzSUU1VlRVSkZVaXdnSkU1MWJXSmxjaWs3WEc1OUlpd2lMeThnTWpBdU1TNHlMakVnVG5WdFltVnlMa1ZRVTBsTVQwNWNiblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblRuVnRZbVZ5Snl3Z2UwVlFVMGxNVDA0NklFMWhkR2d1Y0c5M0tESXNJQzAxTWlsOUtUc2lMQ0l2THlBeU1DNHhMakl1TWlCT2RXMWlaWEl1YVhOR2FXNXBkR1VvYm5WdFltVnlLVnh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dYMmx6Um1sdWFYUmxJRDBnY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlrdWFYTkdhVzVwZEdVN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVG5WdFltVnlKeXdnZTF4dUlDQnBjMFpwYm1sMFpUb2dablZ1WTNScGIyNGdhWE5HYVc1cGRHVW9hWFFwZTF4dUlDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ2FYUWdQVDBnSjI1MWJXSmxjaWNnSmlZZ1gybHpSbWx1YVhSbEtHbDBLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNakF1TVM0eUxqTWdUblZ0WW1WeUxtbHpTVzUwWldkbGNpaHVkVzFpWlhJcFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjA1MWJXSmxjaWNzSUh0cGMwbHVkR1ZuWlhJNklISmxjWFZwY21Vb0p5NHZYMmx6TFdsdWRHVm5aWEluS1gwcE95SXNJaTh2SURJd0xqRXVNaTQwSUU1MWJXSmxjaTVwYzA1aFRpaHVkVzFpWlhJcFhHNTJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjA1MWJXSmxjaWNzSUh0Y2JpQWdhWE5PWVU0NklHWjFibU4wYVc5dUlHbHpUbUZPS0c1MWJXSmxjaWw3WEc0Z0lDQWdjbVYwZFhKdUlHNTFiV0psY2lBaFBTQnVkVzFpWlhJN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJd0xqRXVNaTQxSUU1MWJXSmxjaTVwYzFOaFptVkpiblJsWjJWeUtHNTFiV0psY2lsY2JuWmhjaUFrWlhod2IzSjBJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdselNXNTBaV2RsY2lBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFdsdWRHVm5aWEluS1Z4dUlDQXNJR0ZpY3lBZ0lDQWdJQ0E5SUUxaGRHZ3VZV0p6TzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5d2dKMDUxYldKbGNpY3NJSHRjYmlBZ2FYTlRZV1psU1c1MFpXZGxjam9nWm5WdVkzUnBiMjRnYVhOVFlXWmxTVzUwWldkbGNpaHVkVzFpWlhJcGUxeHVJQ0FnSUhKbGRIVnliaUJwYzBsdWRHVm5aWElvYm5WdFltVnlLU0FtSmlCaFluTW9iblZ0WW1WeUtTQThQU0F3ZURGbVptWm1abVptWm1abVptWm1PMXh1SUNCOVhHNTlLVHNpTENJdkx5QXlNQzR4TGpJdU5pQk9kVzFpWlhJdVRVRllYMU5CUmtWZlNVNVVSVWRGVWx4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2RPZFcxaVpYSW5MQ0I3VFVGWVgxTkJSa1ZmU1U1VVJVZEZVam9nTUhneFptWm1abVptWm1abVptWm1abjBwT3lJc0lpOHZJREl3TGpFdU1pNHhNQ0JPZFcxaVpYSXVUVWxPWDFOQlJrVmZTVTVVUlVkRlVseHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkT2RXMWlaWEluTENCN1RVbE9YMU5CUmtWZlNVNVVSVWRGVWpvZ0xUQjRNV1ptWm1abVptWm1abVptWm1aOUtUc2lMQ0oyWVhJZ0pHVjRjRzl5ZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1J3WVhKelpVWnNiMkYwSUQwZ2NtVnhkV2x5WlNnbkxpOWZjR0Z5YzJVdFpteHZZWFFuS1R0Y2JpOHZJREl3TGpFdU1pNHhNaUJPZFcxaVpYSXVjR0Z5YzJWR2JHOWhkQ2h6ZEhKcGJtY3BYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDaE9kVzFpWlhJdWNHRnljMlZHYkc5aGRDQWhQU0FrY0dGeWMyVkdiRzloZENrc0lDZE9kVzFpWlhJbkxDQjdjR0Z5YzJWR2JHOWhkRG9nSkhCaGNuTmxSbXh2WVhSOUtUc2lMQ0oyWVhJZ0pHVjRjRzl5ZENBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtjR0Z5YzJWSmJuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5d1lYSnpaUzFwYm5RbktUdGNiaTh2SURJd0xqRXVNaTR4TXlCT2RXMWlaWEl1Y0dGeWMyVkpiblFvYzNSeWFXNW5MQ0J5WVdScGVDbGNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tFNTFiV0psY2k1d1lYSnpaVWx1ZENBaFBTQWtjR0Z5YzJWSmJuUXBMQ0FuVG5WdFltVnlKeXdnZTNCaGNuTmxTVzUwT2lBa2NHRnljMlZKYm5SOUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQjBiMGx1ZEdWblpYSWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFwYm5SbFoyVnlKeWxjYmlBZ0xDQmhUblZ0WW1WeVZtRnNkV1VnUFNCeVpYRjFhWEpsS0NjdUwxOWhMVzUxYldKbGNpMTJZV3gxWlNjcFhHNGdJQ3dnY21Wd1pXRjBJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MWEpsY0dWaGRDY3BYRzRnSUN3Z0pIUnZSbWw0WldRZ0lDQWdJRDBnTVM0dWRHOUdhWGhsWkZ4dUlDQXNJR1pzYjI5eUlDQWdJQ0FnSUNBOUlFMWhkR2d1Wm14dmIzSmNiaUFnTENCa1lYUmhJQ0FnSUNBZ0lDQWdQU0JiTUN3Z01Dd2dNQ3dnTUN3Z01Dd2dNRjFjYmlBZ0xDQkZVbEpQVWlBZ0lDQWdJQ0FnUFNBblRuVnRZbVZ5TG5SdlJtbDRaV1E2SUdsdVkyOXljbVZqZENCcGJuWnZZMkYwYVc5dUlTZGNiaUFnTENCYVJWSlBJQ0FnSUNBZ0lDQWdQU0FuTUNjN1hHNWNiblpoY2lCdGRXeDBhWEJzZVNBOUlHWjFibU4wYVc5dUtHNHNJR01wZTF4dUlDQjJZWElnYVNBZ1BTQXRNVnh1SUNBZ0lDd2dZeklnUFNCak8xeHVJQ0IzYUdsc1pTZ3JLMmtnUENBMktYdGNiaUFnSUNCak1pQXJQU0J1SUNvZ1pHRjBZVnRwWFR0Y2JpQWdJQ0JrWVhSaFcybGRJRDBnWXpJZ0pTQXhaVGM3WEc0Z0lDQWdZeklnUFNCbWJHOXZjaWhqTWlBdklERmxOeWs3WEc0Z0lIMWNibjA3WEc1MllYSWdaR2wyYVdSbElEMGdablZ1WTNScGIyNG9iaWw3WEc0Z0lIWmhjaUJwSUQwZ05seHVJQ0FnSUN3Z1l5QTlJREE3WEc0Z0lIZG9hV3hsS0MwdGFTQStQU0F3S1h0Y2JpQWdJQ0JqSUNzOUlHUmhkR0ZiYVYwN1hHNGdJQ0FnWkdGMFlWdHBYU0E5SUdac2IyOXlLR01nTHlCdUtUdGNiaUFnSUNCaklEMGdLR01nSlNCdUtTQXFJREZsTnp0Y2JpQWdmVnh1ZlR0Y2JuWmhjaUJ1ZFcxVWIxTjBjbWx1WnlBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUhaaGNpQnBJRDBnTmx4dUlDQWdJQ3dnY3lBOUlDY25PMXh1SUNCM2FHbHNaU2d0TFdrZ1BqMGdNQ2w3WEc0Z0lDQWdhV1lvY3lBaFBUMGdKeWNnZkh3Z2FTQTlQVDBnTUNCOGZDQmtZWFJoVzJsZElDRTlQU0F3S1h0Y2JpQWdJQ0FnSUhaaGNpQjBJRDBnVTNSeWFXNW5LR1JoZEdGYmFWMHBPMXh1SUNBZ0lDQWdjeUE5SUhNZ1BUMDlJQ2NuSUQ4Z2RDQTZJSE1nS3lCeVpYQmxZWFF1WTJGc2JDaGFSVkpQTENBM0lDMGdkQzVzWlc1bmRHZ3BJQ3NnZER0Y2JpQWdJQ0I5WEc0Z0lIMGdjbVYwZFhKdUlITTdYRzU5TzF4dWRtRnlJSEJ2ZHlBOUlHWjFibU4wYVc5dUtIZ3NJRzRzSUdGall5bDdYRzRnSUhKbGRIVnliaUJ1SUQwOVBTQXdJRDhnWVdOaklEb2diaUFsSURJZ1BUMDlJREVnUHlCd2IzY29lQ3dnYmlBdElERXNJR0ZqWXlBcUlIZ3BJRG9nY0c5M0tIZ2dLaUI0TENCdUlDOGdNaXdnWVdOaktUdGNibjA3WEc1MllYSWdiRzluSUQwZ1puVnVZM1JwYjI0b2VDbDdYRzRnSUhaaGNpQnVJQ0E5SURCY2JpQWdJQ0FzSUhneUlEMGdlRHRjYmlBZ2QyaHBiR1VvZURJZ1BqMGdOREE1TmlsN1hHNGdJQ0FnYmlBclBTQXhNanRjYmlBZ0lDQjRNaUF2UFNBME1EazJPMXh1SUNCOVhHNGdJSGRvYVd4bEtIZ3lJRDQ5SURJcGUxeHVJQ0FnSUc0Z0lDczlJREU3WEc0Z0lDQWdlRElnTHowZ01qdGNiaUFnZlNCeVpYUjFjbTRnYmp0Y2JuMDdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVRSUNzZ0pHVjRjRzl5ZEM1R0lDb2dLQ0VoSkhSdlJtbDRaV1FnSmlZZ0tGeHVJQ0F3TGpBd01EQTRMblJ2Um1sNFpXUW9NeWtnSVQwOUlDY3dMakF3TUNjZ2ZIeGNiaUFnTUM0NUxuUnZSbWw0WldRb01Da2dJVDA5SUNjeEp5QjhmRnh1SUNBeExqSTFOUzUwYjBacGVHVmtLRElwSUNFOVBTQW5NUzR5TlNjZ2ZIeGNiaUFnTVRBd01EQXdNREF3TURBd01EQXdNREV5T0M0dWRHOUdhWGhsWkNnd0tTQWhQVDBnSnpFd01EQXdNREF3TURBd01EQXdNREF4TWpnblhHNHBJSHg4SUNGeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcEtHWjFibU4wYVc5dUtDbDdYRzRnSUM4dklGWTRJSDRnUVc1a2NtOXBaQ0EwTGpNdFhHNGdJQ1IwYjBacGVHVmtMbU5oYkd3b2UzMHBPMXh1ZlNrcExDQW5UblZ0WW1WeUp5d2dlMXh1SUNCMGIwWnBlR1ZrT2lCbWRXNWpkR2x2YmlCMGIwWnBlR1ZrS0daeVlXTjBhVzl1UkdsbmFYUnpLWHRjYmlBZ0lDQjJZWElnZUNBOUlHRk9kVzFpWlhKV1lXeDFaU2gwYUdsekxDQkZVbEpQVWlsY2JpQWdJQ0FnSUN3Z1ppQTlJSFJ2U1c1MFpXZGxjaWhtY21GamRHbHZia1JwWjJsMGN5bGNiaUFnSUNBZ0lDd2djeUE5SUNjblhHNGdJQ0FnSUNBc0lHMGdQU0JhUlZKUFhHNGdJQ0FnSUNBc0lHVXNJSG9zSUdvc0lHczdYRzRnSUNBZ2FXWW9aaUE4SURBZ2ZId2daaUErSURJd0tYUm9jbTkzSUZKaGJtZGxSWEp5YjNJb1JWSlNUMUlwTzF4dUlDQWdJR2xtS0hnZ0lUMGdlQ2x5WlhSMWNtNGdKMDVoVGljN1hHNGdJQ0FnYVdZb2VDQThQU0F0TVdVeU1TQjhmQ0I0SUQ0OUlERmxNakVwY21WMGRYSnVJRk4wY21sdVp5aDRLVHRjYmlBZ0lDQnBaaWg0SUR3Z01DbDdYRzRnSUNBZ0lDQnpJRDBnSnkwbk8xeHVJQ0FnSUNBZ2VDQTlJQzE0TzF4dUlDQWdJSDFjYmlBZ0lDQnBaaWg0SUQ0Z01XVXRNakVwZTF4dUlDQWdJQ0FnWlNBOUlHeHZaeWg0SUNvZ2NHOTNLRElzSURZNUxDQXhLU2tnTFNBMk9UdGNiaUFnSUNBZ0lIb2dQU0JsSUR3Z01DQS9JSGdnS2lCd2IzY29NaXdnTFdVc0lERXBJRG9nZUNBdklIQnZkeWd5TENCbExDQXhLVHRjYmlBZ0lDQWdJSG9nS2owZ01IZ3hNREF3TURBd01EQXdNREF3TUR0Y2JpQWdJQ0FnSUdVZ1BTQTFNaUF0SUdVN1hHNGdJQ0FnSUNCcFppaGxJRDRnTUNsN1hHNGdJQ0FnSUNBZ0lHMTFiSFJwY0d4NUtEQXNJSG9wTzF4dUlDQWdJQ0FnSUNCcUlEMGdaanRjYmlBZ0lDQWdJQ0FnZDJocGJHVW9haUErUFNBM0tYdGNiaUFnSUNBZ0lDQWdJQ0J0ZFd4MGFYQnNlU2d4WlRjc0lEQXBPMXh1SUNBZ0lDQWdJQ0FnSUdvZ0xUMGdOenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCdGRXeDBhWEJzZVNod2IzY29NVEFzSUdvc0lERXBMQ0F3S1R0Y2JpQWdJQ0FnSUNBZ2FpQTlJR1VnTFNBeE8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNocUlENDlJREl6S1h0Y2JpQWdJQ0FnSUNBZ0lDQmthWFpwWkdVb01TQThQQ0F5TXlrN1hHNGdJQ0FnSUNBZ0lDQWdhaUF0UFNBeU16dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JrYVhacFpHVW9NU0E4UENCcUtUdGNiaUFnSUNBZ0lDQWdiWFZzZEdsd2JIa29NU3dnTVNrN1hHNGdJQ0FnSUNBZ0lHUnBkbWxrWlNneUtUdGNiaUFnSUNBZ0lDQWdiU0E5SUc1MWJWUnZVM1J5YVc1bktDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnRkV3gwYVhCc2VTZ3dMQ0I2S1R0Y2JpQWdJQ0FnSUNBZ2JYVnNkR2x3Ykhrb01TQThQQ0F0WlN3Z01DazdYRzRnSUNBZ0lDQWdJRzBnUFNCdWRXMVViMU4wY21sdVp5Z3BJQ3NnY21Wd1pXRjBMbU5oYkd3b1drVlNUeXdnWmlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR2xtS0dZZ1BpQXdLWHRjYmlBZ0lDQWdJR3NnUFNCdExteGxibWQwYUR0Y2JpQWdJQ0FnSUcwZ1BTQnpJQ3NnS0dzZ1BEMGdaaUEvSUNjd0xpY2dLeUJ5WlhCbFlYUXVZMkZzYkNoYVJWSlBMQ0JtSUMwZ2F5a2dLeUJ0SURvZ2JTNXpiR2xqWlNnd0xDQnJJQzBnWmlrZ0t5QW5MaWNnS3lCdExuTnNhV05sS0dzZ0xTQm1LU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHMGdQU0J6SUNzZ2JUdGNiaUFnSUNCOUlISmxkSFZ5YmlCdE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtabUZwYkhNZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcFhHNGdJQ3dnWVU1MWJXSmxjbFpoYkhWbElEMGdjbVZ4ZFdseVpTZ25MaTlmWVMxdWRXMWlaWEl0ZG1Gc2RXVW5LVnh1SUNBc0lDUjBiMUJ5WldOcGMybHZiaUE5SURFdUxuUnZVSEpsWTJsemFXOXVPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVJpQXFJQ2drWm1GcGJITW9ablZ1WTNScGIyNG9LWHRjYmlBZ0x5OGdTVVUzTFZ4dUlDQnlaWFIxY200Z0pIUnZVSEpsWTJsemFXOXVMbU5oYkd3b01Td2dkVzVrWldacGJtVmtLU0FoUFQwZ0p6RW5PMXh1ZlNrZ2ZId2dJU1JtWVdsc2N5aG1kVzVqZEdsdmJpZ3BlMXh1SUNBdkx5QldPQ0IrSUVGdVpISnZhV1FnTkM0ekxWeHVJQ0FrZEc5UWNtVmphWE5wYjI0dVkyRnNiQ2g3ZlNrN1hHNTlLU2tzSUNkT2RXMWlaWEluTENCN1hHNGdJSFJ2VUhKbFkybHphVzl1T2lCbWRXNWpkR2x2YmlCMGIxQnlaV05wYzJsdmJpaHdjbVZqYVhOcGIyNHBlMXh1SUNBZ0lIWmhjaUIwYUdGMElEMGdZVTUxYldKbGNsWmhiSFZsS0hSb2FYTXNJQ2RPZFcxaVpYSWpkRzlRY21WamFYTnBiMjQ2SUdsdVkyOXljbVZqZENCcGJuWnZZMkYwYVc5dUlTY3BPMXh1SUNBZ0lISmxkSFZ5YmlCd2NtVmphWE5wYjI0Z1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUNSMGIxQnlaV05wYzJsdmJpNWpZV3hzS0hSb1lYUXBJRG9nSkhSdlVISmxZMmx6YVc5dUxtTmhiR3dvZEdoaGRDd2djSEpsWTJsemFXOXVLVHNnWEc0Z0lIMWNibjBwT3lJc0luWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNHZMeUF4T1M0eExqSXVNeUF2SURFMUxqSXVNeTQzSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLRThzSUZCeWIzQmxjblJwWlhNcFhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNGeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwTENBblQySnFaV04wSnl3Z2UyUmxabWx1WlZCeWIzQmxjblJwWlhNNklISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjSE1uS1gwcE95SXNJaTh2SURFNUxqRXVNaTQxSUU5aWFtVmpkQzVtY21WbGVtVW9UeWxjYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnYldWMFlTQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXRaWFJoSnlrdWIyNUdjbVZsZW1VN1hHNWNibkpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF6WVhBbktTZ25abkpsWlhwbEp5d2dablZ1WTNScGIyNG9KR1p5WldWNlpTbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJtY21WbGVtVW9hWFFwZTF4dUlDQWdJSEpsZEhWeWJpQWtabkpsWlhwbElDWW1JR2x6VDJKcVpXTjBLR2wwS1NBL0lDUm1jbVZsZW1Vb2JXVjBZU2hwZENrcElEb2dhWFE3WEc0Z0lIMDdYRzU5S1RzaUxDSXZMeUF4T1M0eExqSXVOeUJQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjeWhQS1Z4dWNtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExYTmhjQ2NwS0NkblpYUlBkMjVRY205d1pYSjBlVTVoYldWekp5d2dablZ1WTNScGIyNG9LWHRjYmlBZ2NtVjBkWEp1SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnVMV1Y0ZENjcExtWTdYRzU5S1RzaUxDSXZMeUF4T1M0eExqSXVNVEVnVDJKcVpXTjBMbWx6UlhoMFpXNXphV0pzWlNoUEtWeHVkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWs3WEc1Y2JuSmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXpZWEFuS1NnbmFYTkZlSFJsYm5OcFlteGxKeXdnWm5WdVkzUnBiMjRvSkdselJYaDBaVzV6YVdKc1pTbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJwYzBWNGRHVnVjMmxpYkdVb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlCcGMwOWlhbVZqZENocGRDa2dQeUFrYVhORmVIUmxibk5wWW14bElEOGdKR2x6UlhoMFpXNXphV0pzWlNocGRDa2dPaUIwY25WbElEb2dabUZzYzJVN1hHNGdJSDA3WEc1OUtUc2lMQ0l2THlBeE9TNHhMakl1TVRNZ1QySnFaV04wTG1selUyVmhiR1ZrS0U4cFhHNTJZWElnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVHRjYmx4dWNtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExYTmhjQ2NwS0NkcGMxTmxZV3hsWkNjc0lHWjFibU4wYVc5dUtDUnBjMU5sWVd4bFpDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJwYzFObFlXeGxaQ2hwZENsN1hHNGdJQ0FnY21WMGRYSnVJR2x6VDJKcVpXTjBLR2wwS1NBL0lDUnBjMU5sWVd4bFpDQS9JQ1JwYzFObFlXeGxaQ2hwZENrZ09pQm1ZV3h6WlNBNklIUnlkV1U3WEc0Z0lIMDdYRzU5S1RzaUxDSXZMeUF4T1M0eExqTXVNVEFnVDJKcVpXTjBMbWx6S0haaGJIVmxNU3dnZG1Gc2RXVXlLVnh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblQySnFaV04wSnl3Z2UybHpPaUJ5WlhGMWFYSmxLQ2N1TDE5ellXMWxMWFpoYkhWbEp5bDlLVHNpTENJdkx5QXhPUzR4TGpJdU1UVWdUMkpxWldOMExuQnlaWFpsYm5SRmVIUmxibk5wYjI1ektFOHBYRzUyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJRzFsZEdFZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZU2NwTG05dVJuSmxaWHBsTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjMkZ3Snlrb0ozQnlaWFpsYm5SRmVIUmxibk5wYjI1ekp5d2dablZ1WTNScGIyNG9KSEJ5WlhabGJuUkZlSFJsYm5OcGIyNXpLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhCeVpYWmxiblJGZUhSbGJuTnBiMjV6S0dsMEtYdGNiaUFnSUNCeVpYUjFjbTRnSkhCeVpYWmxiblJGZUhSbGJuTnBiMjV6SUNZbUlHbHpUMkpxWldOMEtHbDBLU0EvSUNSd2NtVjJaVzUwUlhoMFpXNXphVzl1Y3lodFpYUmhLR2wwS1NrZ09pQnBkRHRjYmlBZ2ZUdGNibjBwT3lJc0lpOHZJREU1TGpFdU1pNHhOeUJQWW1wbFkzUXVjMlZoYkNoUEtWeHVkbUZ5SUdselQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZhWE10YjJKcVpXTjBKeWxjYmlBZ0xDQnRaWFJoSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxbGRHRW5LUzV2YmtaeVpXVjZaVHRjYmx4dWNtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExYTmhjQ2NwS0NkelpXRnNKeXdnWm5WdVkzUnBiMjRvSkhObFlXd3BlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYzJWaGJDaHBkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDUnpaV0ZzSUNZbUlHbHpUMkpxWldOMEtHbDBLU0EvSUNSelpXRnNLRzFsZEdFb2FYUXBLU0E2SUdsME8xeHVJQ0I5TzF4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnTVRrdU1TNHpMallnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeWdwWEc1MllYSWdZMnhoYzNOdlppQTlJSEpsY1hWcGNtVW9KeTR2WDJOc1lYTnpiMlluS1Z4dUlDQXNJSFJsYzNRZ0lDQWdQU0I3ZlR0Y2JuUmxjM1JiY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjNSdlUzUnlhVzVuVkdGbkp5bGRJRDBnSjNvbk8xeHVhV1lvZEdWemRDQXJJQ2NuSUNFOUlDZGJiMkpxWldOMElIcGRKeWw3WEc0Z0lISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWtvVDJKcVpXTjBMbkJ5YjNSdmRIbHdaU3dnSjNSdlUzUnlhVzVuSnl3Z1puVnVZM1JwYjI0Z2RHOVRkSEpwYm1jb0tYdGNiaUFnSUNCeVpYUjFjbTRnSjF0dlltcGxZM1FnSnlBcklHTnNZWE56YjJZb2RHaHBjeWtnS3lBblhTYzdYRzRnSUgwc0lIUnlkV1VwTzF4dWZTSXNJblpoY2lBa1pYaHdiM0owSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKSEJoY25ObFJteHZZWFFnUFNCeVpYRjFhWEpsS0NjdUwxOXdZWEp6WlMxbWJHOWhkQ2NwTzF4dUx5OGdNVGd1TWk0MElIQmhjbk5sUm14dllYUW9jM1J5YVc1bktWeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExrY2dLeUFrWlhod2IzSjBMa1lnS2lBb2NHRnljMlZHYkc5aGRDQWhQU0FrY0dGeWMyVkdiRzloZENrc0lIdHdZWEp6WlVac2IyRjBPaUFrY0dGeWMyVkdiRzloZEgwcE95SXNJblpoY2lBa1pYaHdiM0owSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lDUndZWEp6WlVsdWRDQTlJSEpsY1hWcGNtVW9KeTR2WDNCaGNuTmxMV2x1ZENjcE8xeHVMeThnTVRndU1pNDFJSEJoY25ObFNXNTBLSE4wY21sdVp5d2djbUZrYVhncFhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVJ5QXJJQ1JsZUhCdmNuUXVSaUFxSUNod1lYSnpaVWx1ZENBaFBTQWtjR0Z5YzJWSmJuUXBMQ0I3Y0dGeWMyVkpiblE2SUNSd1lYSnpaVWx1ZEgwcE95SXNJaTh2SURJMkxqRXVNU0JTWldac1pXTjBMbUZ3Y0d4NUtIUmhjbWRsZEN3Z2RHaHBjMEZ5WjNWdFpXNTBMQ0JoY21kMWJXVnVkSE5NYVhOMEtWeHVkbUZ5SUNSbGVIQnZjblFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1lVWjFibU4wYVc5dUlEMGdjbVZ4ZFdseVpTZ25MaTlmWVMxbWRXNWpkR2x2YmljcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQnlRWEJ3YkhrZ0lDQWdQU0FvY21WeGRXbHlaU2duTGk5ZloyeHZZbUZzSnlrdVVtVm1iR1ZqZENCOGZDQjdmU2t1WVhCd2JIbGNiaUFnTENCbVFYQndiSGtnSUNBZ1BTQkdkVzVqZEdsdmJpNWhjSEJzZVR0Y2JpOHZJRTFUSUVWa1oyVWdZWEpuZFcxbGJuUnpUR2x6ZENCaGNtZDFiV1Z1ZENCcGN5QnZjSFJwYjI1aGJGeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTWdLeUFrWlhod2IzSjBMa1lnS2lBaGNtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCeVFYQndiSGtvWm5WdVkzUnBiMjRvS1h0OUtUdGNibjBwTENBblVtVm1iR1ZqZENjc0lIdGNiaUFnWVhCd2JIazZJR1oxYm1OMGFXOXVJR0Z3Y0d4NUtIUmhjbWRsZEN3Z2RHaHBjMEZ5WjNWdFpXNTBMQ0JoY21kMWJXVnVkSE5NYVhOMEtYdGNiaUFnSUNCMllYSWdWQ0E5SUdGR2RXNWpkR2x2YmloMFlYSm5aWFFwWEc0Z0lDQWdJQ0FzSUV3Z1BTQmhiazlpYW1WamRDaGhjbWQxYldWdWRITk1hWE4wS1R0Y2JpQWdJQ0J5WlhSMWNtNGdja0Z3Y0d4NUlEOGdja0Z3Y0d4NUtGUXNJSFJvYVhOQmNtZDFiV1Z1ZEN3Z1RDa2dPaUJtUVhCd2JIa3VZMkZzYkNoVUxDQjBhR2x6UVhKbmRXMWxiblFzSUV3cE8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU5pNHhMaklnVW1WbWJHVmpkQzVqYjI1emRISjFZM1FvZEdGeVoyVjBMQ0JoY21kMWJXVnVkSE5NYVhOMElGc3NJRzVsZDFSaGNtZGxkRjBwWEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnWTNKbFlYUmxJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWpjbVZoZEdVbktWeHVJQ0FzSUdGR2RXNWpkR2x2YmlBZ1BTQnlaWEYxYVhKbEtDY3VMMTloTFdaMWJtTjBhVzl1SnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWxjYmlBZ0xDQnBjMDlpYW1WamRDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5bGNiaUFnTENCbVlXbHNjeUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LVnh1SUNBc0lHSnBibVFnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aWFXNWtKeWxjYmlBZ0xDQnlRMjl1YzNSeWRXTjBJRDBnS0hKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcExsSmxabXhsWTNRZ2ZId2dlMzBwTG1OdmJuTjBjblZqZER0Y2JseHVMeThnVFZNZ1JXUm5aU0J6ZFhCd2IzSjBjeUJ2Ym14NUlESWdZWEpuZFcxbGJuUnpJR0Z1WkNCaGNtZDFiV1Z1ZEhOTWFYTjBJR0Z5WjNWdFpXNTBJR2x6SUc5d2RHbHZibUZzWEc0dkx5QkdSaUJPYVdkb2RHeDVJSE5sZEhNZ2RHaHBjbVFnWVhKbmRXMWxiblFnWVhNZ1lHNWxkeTUwWVhKblpYUmdMQ0JpZFhRZ1pHOWxjeUJ1YjNRZ1kzSmxZWFJsSUdCMGFHbHpZQ0JtY205dElHbDBYRzUyWVhJZ1RrVlhYMVJCVWtkRlZGOUNWVWNnUFNCbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQm1kVzVqZEdsdmJpQkdLQ2w3ZlZ4dUlDQnlaWFIxY200Z0lTaHlRMjl1YzNSeWRXTjBLR1oxYm1OMGFXOXVLQ2w3ZlN3Z1cxMHNJRVlwSUdsdWMzUmhibU5sYjJZZ1JpazdYRzU5S1R0Y2JuWmhjaUJCVWtkVFgwSlZSeUE5SUNGbVlXbHNjeWhtZFc1amRHbHZiaWdwZTF4dUlDQnlRMjl1YzNSeWRXTjBLR1oxYm1OMGFXOXVLQ2w3ZlNrN1hHNTlLVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFvVGtWWFgxUkJVa2RGVkY5Q1ZVY2dmSHdnUVZKSFUxOUNWVWNwTENBblVtVm1iR1ZqZENjc0lIdGNiaUFnWTI5dWMzUnlkV04wT2lCbWRXNWpkR2x2YmlCamIyNXpkSEoxWTNRb1ZHRnlaMlYwTENCaGNtZHpJQzhxTENCdVpYZFVZWEpuWlhRcUx5bDdYRzRnSUNBZ1lVWjFibU4wYVc5dUtGUmhjbWRsZENrN1hHNGdJQ0FnWVc1UFltcGxZM1FvWVhKbmN5azdYRzRnSUNBZ2RtRnlJRzVsZDFSaGNtZGxkQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUENBeklEOGdWR0Z5WjJWMElEb2dZVVoxYm1OMGFXOXVLR0Z5WjNWdFpXNTBjMXN5WFNrN1hHNGdJQ0FnYVdZb1FWSkhVMTlDVlVjZ0ppWWdJVTVGVjE5VVFWSkhSVlJmUWxWSEtYSmxkSFZ5YmlCeVEyOXVjM1J5ZFdOMEtGUmhjbWRsZEN3Z1lYSm5jeXdnYm1WM1ZHRnlaMlYwS1R0Y2JpQWdJQ0JwWmloVVlYSm5aWFFnUFQwZ2JtVjNWR0Z5WjJWMEtYdGNiaUFnSUNBZ0lDOHZJSGN2YnlCaGJIUmxjbVZrSUc1bGQxUmhjbWRsZEN3Z2IzQjBhVzFwZW1GMGFXOXVJR1p2Y2lBd0xUUWdZWEpuZFcxbGJuUnpYRzRnSUNBZ0lDQnpkMmwwWTJnb1lYSm5jeTVzWlc1bmRHZ3BlMXh1SUNBZ0lDQWdJQ0JqWVhObElEQTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBPMXh1SUNBZ0lDQWdJQ0JqWVhObElERTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBLR0Z5WjNOYk1GMHBPMXh1SUNBZ0lDQWdJQ0JqWVhObElESTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHBPMXh1SUNBZ0lDQWdJQ0JqWVhObElETTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHNJR0Z5WjNOYk1sMHBPMXh1SUNBZ0lDQWdJQ0JqWVhObElEUTZJSEpsZEhWeWJpQnVaWGNnVkdGeVoyVjBLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHNJR0Z5WjNOYk1sMHNJR0Z5WjNOYk0xMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdMeThnZHk5dklHRnNkR1Z5WldRZ2JtVjNWR0Z5WjJWMExDQnNiM1FnYjJZZ1lYSm5kVzFsYm5SeklHTmhjMlZjYmlBZ0lDQWdJSFpoY2lBa1lYSm5jeUE5SUZ0dWRXeHNYVHRjYmlBZ0lDQWdJQ1JoY21kekxuQjFjMmd1WVhCd2JIa29KR0Z5WjNNc0lHRnlaM01wTzF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZHlBb1ltbHVaQzVoY0hCc2VTaFVZWEpuWlhRc0lDUmhjbWR6S1NrN1hHNGdJQ0FnZlZ4dUlDQWdJQzh2SUhkcGRHZ2dZV3gwWlhKbFpDQnVaWGRVWVhKblpYUXNJRzV2ZENCemRYQndiM0owSUdKMWFXeDBMV2x1SUdOdmJuTjBjblZqZEc5eWMxeHVJQ0FnSUhaaGNpQndjbTkwYnlBZ0lDQTlJRzVsZDFSaGNtZGxkQzV3Y205MGIzUjVjR1ZjYmlBZ0lDQWdJQ3dnYVc1emRHRnVZMlVnUFNCamNtVmhkR1VvYVhOUFltcGxZM1FvY0hKdmRHOHBJRDhnY0hKdmRHOGdPaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxLVnh1SUNBZ0lDQWdMQ0J5WlhOMWJIUWdJQ0E5SUVaMWJtTjBhVzl1TG1Gd2NHeDVMbU5oYkd3b1ZHRnlaMlYwTENCcGJuTjBZVzVqWlN3Z1lYSm5jeWs3WEc0Z0lDQWdjbVYwZFhKdUlHbHpUMkpxWldOMEtISmxjM1ZzZENrZ1B5QnlaWE4xYkhRZ09pQnBibk4wWVc1alpUdGNiaUFnZlZ4dWZTazdJaXdpTHk4Z01qWXVNUzR6SUZKbFpteGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU3dnWVhSMGNtbGlkWFJsY3lsY2JuWmhjaUJrVUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0IwYjFCeWFXMXBkR2wyWlNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFhCeWFXMXBkR2wyWlNjcE8xeHVYRzR2THlCTlV5QkZaR2RsSUdoaGN5QmljbTlyWlc0Z1VtVm1iR1ZqZEM1a1pXWnBibVZRY205d1pYSjBlU0F0SUhSb2NtOTNhVzVuSUdsdWMzUmxZV1FnYjJZZ2NtVjBkWEp1YVc1bklHWmhiSE5sWEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdVbVZtYkdWamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoa1VDNW1LSHQ5TENBeExDQjdkbUZzZFdVNklERjlLU3dnTVN3Z2UzWmhiSFZsT2lBeWZTazdYRzU5S1N3Z0oxSmxabXhsWTNRbkxDQjdYRzRnSUdSbFptbHVaVkJ5YjNCbGNuUjVPaUJtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGVTaDBZWEpuWlhRc0lIQnliM0JsY25SNVMyVjVMQ0JoZEhSeWFXSjFkR1Z6S1h0Y2JpQWdJQ0JoYms5aWFtVmpkQ2gwWVhKblpYUXBPMXh1SUNBZ0lIQnliM0JsY25SNVMyVjVJRDBnZEc5UWNtbHRhWFJwZG1Vb2NISnZjR1Z5ZEhsTFpYa3NJSFJ5ZFdVcE8xeHVJQ0FnSUdGdVQySnFaV04wS0dGMGRISnBZblYwWlhNcE8xeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQmtVQzVtS0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrc0lHRjBkSEpwWW5WMFpYTXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibjBwT3lJc0lpOHZJREkyTGpFdU5DQlNaV1pzWldOMExtUmxiR1YwWlZCeWIzQmxjblI1S0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrcFhHNTJZWElnSkdWNGNHOXlkQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdkUFVFUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjR1FuS1M1bVhHNGdJQ3dnWVc1UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFNaV1pzWldOMEp5d2dlMXh1SUNCa1pXeGxkR1ZRY205d1pYSjBlVG9nWm5WdVkzUnBiMjRnWkdWc1pYUmxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU2w3WEc0Z0lDQWdkbUZ5SUdSbGMyTWdQU0JuVDFCRUtHRnVUMkpxWldOMEtIUmhjbWRsZENrc0lIQnliM0JsY25SNVMyVjVLVHRjYmlBZ0lDQnlaWFIxY200Z1pHVnpZeUFtSmlBaFpHVnpZeTVqYjI1bWFXZDFjbUZpYkdVZ1B5Qm1ZV3h6WlNBNklHUmxiR1YwWlNCMFlYSm5aWFJiY0hKdmNHVnlkSGxMWlhsZE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUF5Tmk0eExqVWdVbVZtYkdWamRDNWxiblZ0WlhKaGRHVW9kR0Z5WjJWMEtWeHVkbUZ5SUNSbGVIQnZjblFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCaGJrOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwTzF4dWRtRnlJRVZ1ZFcxbGNtRjBaU0E5SUdaMWJtTjBhVzl1S0dsMFpYSmhkR1ZrS1h0Y2JpQWdkR2hwY3k1ZmRDQTlJR0Z1VDJKcVpXTjBLR2wwWlhKaGRHVmtLVHNnTHk4Z2RHRnlaMlYwWEc0Z0lIUm9hWE11WDJrZ1BTQXdPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUc1bGVIUWdhVzVrWlhoY2JpQWdkbUZ5SUd0bGVYTWdQU0IwYUdsekxsOXJJRDBnVzEwZ0lDQWdJQ0FnTHk4Z2EyVjVjMXh1SUNBZ0lDd2dhMlY1TzF4dUlDQm1iM0lvYTJWNUlHbHVJR2wwWlhKaGRHVmtLV3RsZVhNdWNIVnphQ2hyWlhrcE8xeHVmVHRjYm5KbGNYVnBjbVVvSnk0dlgybDBaWEl0WTNKbFlYUmxKeWtvUlc1MWJXVnlZWFJsTENBblQySnFaV04wSnl3Z1puVnVZM1JwYjI0b0tYdGNiaUFnZG1GeUlIUm9ZWFFnUFNCMGFHbHpYRzRnSUNBZ0xDQnJaWGx6SUQwZ2RHaGhkQzVmYTF4dUlDQWdJQ3dnYTJWNU8xeHVJQ0JrYnlCN1hHNGdJQ0FnYVdZb2RHaGhkQzVmYVNBK1BTQnJaWGx6TG14bGJtZDBhQ2x5WlhSMWNtNGdlM1poYkhWbE9pQjFibVJsWm1sdVpXUXNJR1J2Ym1VNklIUnlkV1Y5TzF4dUlDQjlJSGRvYVd4bEtDRW9LR3RsZVNBOUlHdGxlWE5iZEdoaGRDNWZhU3NyWFNrZ2FXNGdkR2hoZEM1ZmRDa3BPMXh1SUNCeVpYUjFjbTRnZTNaaGJIVmxPaUJyWlhrc0lHUnZibVU2SUdaaGJITmxmVHRjYm4wcE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN1hHNGdJR1Z1ZFcxbGNtRjBaVG9nWm5WdVkzUnBiMjRnWlc1MWJXVnlZWFJsS0hSaGNtZGxkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJGYm5WdFpYSmhkR1VvZEdGeVoyVjBLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNall1TVM0M0lGSmxabXhsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrcFhHNTJZWElnWjA5UVJDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblVtVm1iR1ZqZENjc0lIdGNiaUFnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlPaUJtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9kR0Z5WjJWMExDQndjbTl3WlhKMGVVdGxlU2w3WEc0Z0lDQWdjbVYwZFhKdUlHZFBVRVF1WmloaGJrOWlhbVZqZENoMFlYSm5aWFFwTENCd2NtOXdaWEowZVV0bGVTazdYRzRnSUgxY2JuMHBPeUlzSWk4dklESTJMakV1T0NCU1pXWnNaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1LSFJoY21kbGRDbGNiblpoY2lBa1pYaHdiM0owSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1oyVjBVSEp2ZEc4Z1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaM0J2SnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0oxSmxabXhsWTNRbkxDQjdYRzRnSUdkbGRGQnliM1J2ZEhsd1pVOW1PaUJtZFc1amRHbHZiaUJuWlhSUWNtOTBiM1I1Y0dWUFppaDBZWEpuWlhRcGUxeHVJQ0FnSUhKbGRIVnliaUJuWlhSUWNtOTBieWhoYms5aWFtVmpkQ2gwWVhKblpYUXBLVHRjYmlBZ2ZWeHVmU2s3SWl3aUx5OGdNall1TVM0MklGSmxabXhsWTNRdVoyVjBLSFJoY21kbGRDd2djSEp2Y0dWeWRIbExaWGtnV3l3Z2NtVmpaV2wyWlhKZEtWeHVkbUZ5SUdkUFVFUWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LVnh1SUNBc0lHZGxkRkJ5YjNSdmRIbHdaVTltSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHdieWNwWEc0Z0lDd2dhR0Z6SUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlvWVhNbktWeHVJQ0FzSUNSbGVIQnZjblFnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0JwYzA5aWFtVmpkQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktUdGNibHh1Wm5WdVkzUnBiMjRnWjJWMEtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhsTFpYa3ZLaXdnY21WalpXbDJaWElxTHlsN1hHNGdJSFpoY2lCeVpXTmxhWFpsY2lBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BDQXpJRDhnZEdGeVoyVjBJRG9nWVhKbmRXMWxiblJ6V3pKZFhHNGdJQ0FnTENCa1pYTmpMQ0J3Y205MGJ6dGNiaUFnYVdZb1lXNVBZbXBsWTNRb2RHRnlaMlYwS1NBOVBUMGdjbVZqWldsMlpYSXBjbVYwZFhKdUlIUmhjbWRsZEZ0d2NtOXdaWEowZVV0bGVWMDdYRzRnSUdsbUtHUmxjMk1nUFNCblQxQkVMbVlvZEdGeVoyVjBMQ0J3Y205d1pYSjBlVXRsZVNrcGNtVjBkWEp1SUdoaGN5aGtaWE5qTENBbmRtRnNkV1VuS1Z4dUlDQWdJRDhnWkdWell5NTJZV3gxWlZ4dUlDQWdJRG9nWkdWell5NW5aWFFnSVQwOUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUNBZ1B5QmtaWE5qTG1kbGRDNWpZV3hzS0hKbFkyVnBkbVZ5S1Z4dUlDQWdJQ0FnT2lCMWJtUmxabWx1WldRN1hHNGdJR2xtS0dselQySnFaV04wS0hCeWIzUnZJRDBnWjJWMFVISnZkRzkwZVhCbFQyWW9kR0Z5WjJWMEtTa3BjbVYwZFhKdUlHZGxkQ2h3Y205MGJ5d2djSEp2Y0dWeWRIbExaWGtzSUhKbFkyVnBkbVZ5S1R0Y2JuMWNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkU1pXWnNaV04wSnl3Z2UyZGxkRG9nWjJWMGZTazdJaXdpTHk4Z01qWXVNUzQ1SUZKbFpteGxZM1F1YUdGektIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhsTFpYa3BYRzUyWVhJZ0pHVjRjRzl5ZENBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0oxSmxabXhsWTNRbkxDQjdYRzRnSUdoaGN6b2dablZ1WTNScGIyNGdhR0Z6S0hSaGNtZGxkQ3dnY0hKdmNHVnlkSGxMWlhrcGUxeHVJQ0FnSUhKbGRIVnliaUJ3Y205d1pYSjBlVXRsZVNCcGJpQjBZWEpuWlhRN1hHNGdJSDFjYm4wcE95SXNJaTh2SURJMkxqRXVNVEFnVW1WbWJHVmpkQzVwYzBWNGRHVnVjMmxpYkdVb2RHRnlaMlYwS1Z4dWRtRnlJQ1JsZUhCdmNuUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVnh1SUNBc0lDUnBjMFY0ZEdWdWMybGliR1VnUFNCUFltcGxZM1F1YVhORmVIUmxibk5wWW14bE8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN1hHNGdJR2x6UlhoMFpXNXphV0pzWlRvZ1puVnVZM1JwYjI0Z2FYTkZlSFJsYm5OcFlteGxLSFJoY21kbGRDbDdYRzRnSUNBZ1lXNVBZbXBsWTNRb2RHRnlaMlYwS1R0Y2JpQWdJQ0J5WlhSMWNtNGdKR2x6UlhoMFpXNXphV0pzWlNBL0lDUnBjMFY0ZEdWdWMybGliR1VvZEdGeVoyVjBLU0E2SUhSeWRXVTdYRzRnSUgxY2JuMHBPeUlzSWk4dklESTJMakV1TVRFZ1VtVm1iR1ZqZEM1dmQyNUxaWGx6S0hSaGNtZGxkQ2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5VbVZtYkdWamRDY3NJSHR2ZDI1TFpYbHpPaUJ5WlhGMWFYSmxLQ2N1TDE5dmQyNHRhMlY1Y3ljcGZTazdJaXdpTHk4Z01qWXVNUzR4TWlCU1pXWnNaV04wTG5CeVpYWmxiblJGZUhSbGJuTnBiMjV6S0hSaGNtZGxkQ2xjYm5aaGNpQWtaWGh3YjNKMElDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z0pIQnlaWFpsYm5SRmVIUmxibk5wYjI1eklEMGdUMkpxWldOMExuQnlaWFpsYm5SRmVIUmxibk5wYjI1ek8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN1hHNGdJSEJ5WlhabGJuUkZlSFJsYm5OcGIyNXpPaUJtZFc1amRHbHZiaUJ3Y21WMlpXNTBSWGgwWlc1emFXOXVjeWgwWVhKblpYUXBlMXh1SUNBZ0lHRnVUMkpxWldOMEtIUmhjbWRsZENrN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lHbG1LQ1J3Y21WMlpXNTBSWGgwWlc1emFXOXVjeWtrY0hKbGRtVnVkRVY0ZEdWdWMybHZibk1vZEdGeVoyVjBLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQjlYRzU5S1RzaUxDSXZMeUF5Tmk0eExqRTBJRkpsWm14bFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZb2RHRnlaMlYwTENCd2NtOTBieWxjYm5aaGNpQWtaWGh3YjNKMElDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2djMlYwVUhKdmRHOGdQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUXRjSEp2ZEc4bktUdGNibHh1YVdZb2MyVjBVSEp2ZEc4cEpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFNaV1pzWldOMEp5d2dlMXh1SUNCelpYUlFjbTkwYjNSNWNHVlBaam9nWm5WdVkzUnBiMjRnYzJWMFVISnZkRzkwZVhCbFQyWW9kR0Z5WjJWMExDQndjbTkwYnlsN1hHNGdJQ0FnYzJWMFVISnZkRzh1WTJobFkyc29kR0Z5WjJWMExDQndjbTkwYnlrN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lITmxkRkJ5YjNSdkxuTmxkQ2gwWVhKblpYUXNJSEJ5YjNSdktUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOVhHNTlLVHNpTENJdkx5QXlOaTR4TGpFeklGSmxabXhsWTNRdWMyVjBLSFJoY21kbGRDd2djSEp2Y0dWeWRIbExaWGtzSUZZZ1d5d2djbVZqWldsMlpYSmRLVnh1ZG1GeUlHUlFJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndKeWxjYmlBZ0xDQm5UMUJFSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0JrSnlsY2JpQWdMQ0JuWlhSUWNtOTBiM1I1Y0dWUFppQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFuY0c4bktWeHVJQ0FzSUdoaGN5QWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFHRnpKeWxjYmlBZ0xDQWtaWGh3YjNKMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z1kzSmxZWFJsUkdWell5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnYVhOUFltcGxZM1FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktUdGNibHh1Wm5WdVkzUnBiMjRnYzJWMEtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhsTFpYa3NJRll2S2l3Z2NtVmpaV2wyWlhJcUx5bDdYRzRnSUhaaGNpQnlaV05sYVhabGNpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQQ0EwSUQ4Z2RHRnlaMlYwSURvZ1lYSm5kVzFsYm5Seld6TmRYRzRnSUNBZ0xDQnZkMjVFWlhOaklDQTlJR2RQVUVRdVppaGhiazlpYW1WamRDaDBZWEpuWlhRcExDQndjbTl3WlhKMGVVdGxlU2xjYmlBZ0lDQXNJR1Y0YVhOMGFXNW5SR1Z6WTNKcGNIUnZjaXdnY0hKdmRHODdYRzRnSUdsbUtDRnZkMjVFWlhOaktYdGNiaUFnSUNCcFppaHBjMDlpYW1WamRDaHdjbTkwYnlBOUlHZGxkRkJ5YjNSdmRIbHdaVTltS0hSaGNtZGxkQ2twS1h0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ6WlhRb2NISnZkRzhzSUhCeWIzQmxjblI1UzJWNUxDQldMQ0J5WldObGFYWmxjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lHOTNia1JsYzJNZ1BTQmpjbVZoZEdWRVpYTmpLREFwTzF4dUlDQjlYRzRnSUdsbUtHaGhjeWh2ZDI1RVpYTmpMQ0FuZG1Gc2RXVW5LU2w3WEc0Z0lDQWdhV1lvYjNkdVJHVnpZeTUzY21sMFlXSnNaU0E5UFQwZ1ptRnNjMlVnZkh3Z0lXbHpUMkpxWldOMEtISmxZMlZwZG1WeUtTbHlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdaWGhwYzNScGJtZEVaWE5qY21sd2RHOXlJRDBnWjA5UVJDNW1LSEpsWTJWcGRtVnlMQ0J3Y205d1pYSjBlVXRsZVNrZ2ZId2dZM0psWVhSbFJHVnpZeWd3S1R0Y2JpQWdJQ0JsZUdsemRHbHVaMFJsYzJOeWFYQjBiM0l1ZG1Gc2RXVWdQU0JXTzF4dUlDQWdJR1JRTG1Zb2NtVmpaV2wyWlhJc0lIQnliM0JsY25SNVMyVjVMQ0JsZUdsemRHbHVaMFJsYzJOeWFYQjBiM0lwTzF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ2ZDI1RVpYTmpMbk5sZENBOVBUMGdkVzVrWldacGJtVmtJRDhnWm1Gc2MyVWdPaUFvYjNkdVJHVnpZeTV6WlhRdVkyRnNiQ2h5WldObGFYWmxjaXdnVmlrc0lIUnlkV1VwTzF4dWZWeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeXdnSjFKbFpteGxZM1FuTENCN2MyVjBPaUJ6WlhSOUtUc2lMQ0oyWVhJZ1oyeHZZbUZzSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHbHVhR1Z5YVhSSlpsSmxjWFZwY21Wa0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVc1b1pYSnBkQzFwWmkxeVpYRjFhWEpsWkNjcFhHNGdJQ3dnWkZBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LUzVtWEc0Z0lDd2daMDlRVGlBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d2JpY3BMbVpjYmlBZ0xDQnBjMUpsWjBWNGNDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxYSmxaMlY0Y0NjcFhHNGdJQ3dnSkdac1lXZHpJQ0FnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW1iR0ZuY3ljcFhHNGdJQ3dnSkZKbFowVjRjQ0FnSUNBZ0lDQWdJQ0FnUFNCbmJHOWlZV3d1VW1WblJYaHdYRzRnSUN3Z1FtRnpaU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQWtVbVZuUlhod1hHNGdJQ3dnY0hKdmRHOGdJQ0FnSUNBZ0lDQWdJQ0FnUFNBa1VtVm5SWGh3TG5CeWIzUnZkSGx3WlZ4dUlDQXNJSEpsTVNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnTDJFdloxeHVJQ0FzSUhKbE1pQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ0wyRXZaMXh1SUNBdkx5QmNJbTVsZDF3aUlHTnlaV0YwWlhNZ1lTQnVaWGNnYjJKcVpXTjBMQ0J2YkdRZ2QyVmlhMmwwSUdKMVoyZDVJR2hsY21WY2JpQWdMQ0JEVDFKU1JVTlVYMDVGVnlBZ0lDQWdJQ0E5SUc1bGR5QWtVbVZuUlhod0tISmxNU2tnSVQwOUlISmxNVHRjYmx4dWFXWW9jbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTQW1KaUFvSVVOUFVsSkZRMVJmVGtWWElIeDhJSEpsY1hWcGNtVW9KeTR2WDJaaGFXeHpKeWtvWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVV5VzNKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkdFlYUmphQ2NwWFNBOUlHWmhiSE5sTzF4dUlDQXZMeUJTWldkRmVIQWdZMjl1YzNSeWRXTjBiM0lnWTJGdUlHRnNkR1Z5SUdac1lXZHpJR0Z1WkNCSmMxSmxaMFY0Y0NCM2IzSnJjeUJqYjNKeVpXTjBJSGRwZEdnZ1FFQnRZWFJqYUZ4dUlDQnlaWFIxY200Z0pGSmxaMFY0Y0NoeVpURXBJQ0U5SUhKbE1TQjhmQ0FrVW1WblJYaHdLSEpsTWlrZ1BUMGdjbVV5SUh4OElDUlNaV2RGZUhBb2NtVXhMQ0FuYVNjcElDRTlJQ2N2WVM5cEp6dGNibjBwS1NsN1hHNGdJQ1JTWldkRmVIQWdQU0JtZFc1amRHbHZiaUJTWldkRmVIQW9jQ3dnWmlsN1hHNGdJQ0FnZG1GeUlIUnBVa1VnUFNCMGFHbHpJR2x1YzNSaGJtTmxiMllnSkZKbFowVjRjRnh1SUNBZ0lDQWdMQ0J3YVZKRklEMGdhWE5TWldkRmVIQW9jQ2xjYmlBZ0lDQWdJQ3dnWm1sVklDQTlJR1lnUFQwOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCeVpYUjFjbTRnSVhScFVrVWdKaVlnY0dsU1JTQW1KaUJ3TG1OdmJuTjBjblZqZEc5eUlEMDlQU0FrVW1WblJYaHdJQ1ltSUdacFZTQS9JSEJjYmlBZ0lDQWdJRG9nYVc1b1pYSnBkRWxtVW1WeGRXbHlaV1FvUTA5U1VrVkRWRjlPUlZkY2JpQWdJQ0FnSUNBZ1B5QnVaWGNnUW1GelpTaHdhVkpGSUNZbUlDRm1hVlVnUHlCd0xuTnZkWEpqWlNBNklIQXNJR1lwWEc0Z0lDQWdJQ0FnSURvZ1FtRnpaU2dvY0dsU1JTQTlJSEFnYVc1emRHRnVZMlZ2WmlBa1VtVm5SWGh3S1NBL0lIQXVjMjkxY21ObElEb2djQ3dnY0dsU1JTQW1KaUJtYVZVZ1B5QWtabXhoWjNNdVkyRnNiQ2h3S1NBNklHWXBYRzRnSUNBZ0lDQXNJSFJwVWtVZ1B5QjBhR2x6SURvZ2NISnZkRzhzSUNSU1pXZEZlSEFwTzF4dUlDQjlPMXh1SUNCMllYSWdjSEp2ZUhrZ1BTQm1kVzVqZEdsdmJpaHJaWGtwZTF4dUlDQWdJR3RsZVNCcGJpQWtVbVZuUlhod0lIeDhJR1JRS0NSU1pXZEZlSEFzSUd0bGVTd2dlMXh1SUNBZ0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lDQWdaMlYwT2lCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z1FtRnpaVnRyWlhsZE95QjlMRnh1SUNBZ0lDQWdjMlYwT2lCbWRXNWpkR2x2YmlocGRDbDdJRUpoYzJWYmEyVjVYU0E5SUdsME95QjlYRzRnSUNBZ2ZTazdYRzRnSUgwN1hHNGdJR1p2Y2loMllYSWdhMlY1Y3lBOUlHZFBVRTRvUW1GelpTa3NJR2tnUFNBd095QnJaWGx6TG14bGJtZDBhQ0ErSUdrN0lDbHdjbTk0ZVNoclpYbHpXMmtySzEwcE8xeHVJQ0J3Y205MGJ5NWpiMjV6ZEhKMVkzUnZjaUE5SUNSU1pXZEZlSEE3WEc0Z0lDUlNaV2RGZUhBdWNISnZkRzkwZVhCbElEMGdjSEp2ZEc4N1hHNGdJSEpsY1hWcGNtVW9KeTR2WDNKbFpHVm1hVzVsSnlrb1oyeHZZbUZzTENBblVtVm5SWGh3Snl3Z0pGSmxaMFY0Y0NrN1hHNTlYRzVjYm5KbGNYVnBjbVVvSnk0dlgzTmxkQzF6Y0dWamFXVnpKeWtvSjFKbFowVjRjQ2NwT3lJc0lpOHZJREl4TGpJdU5TNHpJR2RsZENCU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTG1ac1lXZHpLQ2xjYm1sbUtISmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ0ppWWdMeTR2Wnk1bWJHRm5jeUFoUFNBblp5Y3BjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlrdVppaFNaV2RGZUhBdWNISnZkRzkwZVhCbExDQW5abXhoWjNNbkxDQjdYRzRnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlN4Y2JpQWdaMlYwT2lCeVpYRjFhWEpsS0NjdUwxOW1iR0ZuY3ljcFhHNTlLVHNpTENJdkx5QkFRRzFoZEdOb0lHeHZaMmxqWEc1eVpYRjFhWEpsS0NjdUwxOW1hWGd0Y21VdGQydHpKeWtvSjIxaGRHTm9KeXdnTVN3Z1puVnVZM1JwYjI0b1pHVm1hVzVsWkN3Z1RVRlVRMGdzSUNSdFlYUmphQ2w3WEc0Z0lDOHZJREl4TGpFdU15NHhNU0JUZEhKcGJtY3VjSEp2ZEc5MGVYQmxMbTFoZEdOb0tISmxaMlY0Y0NsY2JpQWdjbVYwZFhKdUlGdG1kVzVqZEdsdmJpQnRZWFJqYUNoeVpXZGxlSEFwZTF4dUlDQWdJQ2QxYzJVZ2MzUnlhV04wSnp0Y2JpQWdJQ0IyWVhJZ1R5QWdQU0JrWldacGJtVmtLSFJvYVhNcFhHNGdJQ0FnSUNBc0lHWnVJRDBnY21WblpYaHdJRDA5SUhWdVpHVm1hVzVsWkNBL0lIVnVaR1ZtYVc1bFpDQTZJSEpsWjJWNGNGdE5RVlJEU0YwN1hHNGdJQ0FnY21WMGRYSnVJR1p1SUNFOVBTQjFibVJsWm1sdVpXUWdQeUJtYmk1allXeHNLSEpsWjJWNGNDd2dUeWtnT2lCdVpYY2dVbVZuUlhod0tISmxaMlY0Y0NsYlRVRlVRMGhkS0ZOMGNtbHVaeWhQS1NrN1hHNGdJSDBzSUNSdFlYUmphRjA3WEc1OUtUc2lMQ0l2THlCQVFISmxjR3hoWTJVZ2JHOW5hV05jYm5KbGNYVnBjbVVvSnk0dlgyWnBlQzF5WlMxM2EzTW5LU2duY21Wd2JHRmpaU2NzSURJc0lHWjFibU4wYVc5dUtHUmxabWx1WldRc0lGSkZVRXhCUTBVc0lDUnlaWEJzWVdObEtYdGNiaUFnTHk4Z01qRXVNUzR6TGpFMElGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWNtVndiR0ZqWlNoelpXRnlZMmhXWVd4MVpTd2djbVZ3YkdGalpWWmhiSFZsS1Z4dUlDQnlaWFIxY200Z1cyWjFibU4wYVc5dUlISmxjR3hoWTJVb2MyVmhjbU5vVm1Gc2RXVXNJSEpsY0d4aFkyVldZV3gxWlNsN1hHNGdJQ0FnSjNWelpTQnpkSEpwWTNRbk8xeHVJQ0FnSUhaaGNpQlBJQ0E5SUdSbFptbHVaV1FvZEdocGN5bGNiaUFnSUNBZ0lDd2dabTRnUFNCelpXRnlZMmhXWVd4MVpTQTlQU0IxYm1SbFptbHVaV1FnUHlCMWJtUmxabWx1WldRZ09pQnpaV0Z5WTJoV1lXeDFaVnRTUlZCTVFVTkZYVHRjYmlBZ0lDQnlaWFIxY200Z1ptNGdJVDA5SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnUHlCbWJpNWpZV3hzS0hObFlYSmphRlpoYkhWbExDQlBMQ0J5WlhCc1lXTmxWbUZzZFdVcFhHNGdJQ0FnSUNBNklDUnlaWEJzWVdObExtTmhiR3dvVTNSeWFXNW5LRThwTENCelpXRnlZMmhXWVd4MVpTd2djbVZ3YkdGalpWWmhiSFZsS1R0Y2JpQWdmU3dnSkhKbGNHeGhZMlZkTzF4dWZTazdJaXdpTHk4Z1FFQnpaV0Z5WTJnZ2JHOW5hV05jYm5KbGNYVnBjbVVvSnk0dlgyWnBlQzF5WlMxM2EzTW5LU2duYzJWaGNtTm9KeXdnTVN3Z1puVnVZM1JwYjI0b1pHVm1hVzVsWkN3Z1UwVkJVa05JTENBa2MyVmhjbU5vS1h0Y2JpQWdMeThnTWpFdU1TNHpMakUxSUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1YzJWaGNtTm9LSEpsWjJWNGNDbGNiaUFnY21WMGRYSnVJRnRtZFc1amRHbHZiaUJ6WldGeVkyZ29jbVZuWlhod0tYdGNiaUFnSUNBbmRYTmxJSE4wY21samRDYzdYRzRnSUNBZ2RtRnlJRThnSUQwZ1pHVm1hVzVsWkNoMGFHbHpLVnh1SUNBZ0lDQWdMQ0JtYmlBOUlISmxaMlY0Y0NBOVBTQjFibVJsWm1sdVpXUWdQeUIxYm1SbFptbHVaV1FnT2lCeVpXZGxlSEJiVTBWQlVrTklYVHRjYmlBZ0lDQnlaWFIxY200Z1ptNGdJVDA5SUhWdVpHVm1hVzVsWkNBL0lHWnVMbU5oYkd3b2NtVm5aWGh3TENCUEtTQTZJRzVsZHlCU1pXZEZlSEFvY21WblpYaHdLVnRUUlVGU1EwaGRLRk4wY21sdVp5aFBLU2s3WEc0Z0lIMHNJQ1J6WldGeVkyaGRPMXh1ZlNrN0lpd2lMeThnUUVCemNHeHBkQ0JzYjJkcFkxeHVjbVZ4ZFdseVpTZ25MaTlmWm1sNExYSmxMWGRyY3ljcEtDZHpjR3hwZENjc0lESXNJR1oxYm1OMGFXOXVLR1JsWm1sdVpXUXNJRk5RVEVsVUxDQWtjM0JzYVhRcGUxeHVJQ0FuZFhObElITjBjbWxqZENjN1hHNGdJSFpoY2lCcGMxSmxaMFY0Y0NBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGNtVm5aWGh3SnlsY2JpQWdJQ0FzSUY5emNHeHBkQ0FnSUNBZ1BTQWtjM0JzYVhSY2JpQWdJQ0FzSUNSd2RYTm9JQ0FnSUNBZ1BTQmJYUzV3ZFhOb1hHNGdJQ0FnTENBa1UxQk1TVlFnSUNBZ0lEMGdKM053YkdsMEoxeHVJQ0FnSUN3Z1RFVk9SMVJJSUNBZ0lDQTlJQ2RzWlc1bmRHZ25YRzRnSUNBZ0xDQk1RVk5VWDBsT1JFVllJRDBnSjJ4aGMzUkpibVJsZUNjN1hHNGdJR2xtS0Z4dUlDQWdJQ2RoWW1Kakoxc2tVMUJNU1ZSZEtDOG9ZaWtxTHlsYk1WMGdQVDBnSjJNbklIeDhYRzRnSUNBZ0ozUmxjM1FuV3lSVFVFeEpWRjBvTHlnL09pa3ZMQ0F0TVNsYlRFVk9SMVJJWFNBaFBTQTBJSHg4WEc0Z0lDQWdKMkZpSjFza1UxQk1TVlJkS0M4b1B6cGhZaWtxTHlsYlRFVk9SMVJJWFNBaFBTQXlJSHg4WEc0Z0lDQWdKeTRuV3lSVFVFeEpWRjBvTHlndVB5a29MajhwTHlsYlRFVk9SMVJJWFNBaFBTQTBJSHg4WEc0Z0lDQWdKeTRuV3lSVFVFeEpWRjBvTHlncEtDa3ZLVnRNUlU1SFZFaGRJRDRnTVNCOGZGeHVJQ0FnSUNjbld5UlRVRXhKVkYwb0x5NC9MeWxiVEVWT1IxUklYVnh1SUNBcGUxeHVJQ0FnSUhaaGNpQk9VRU5ISUQwZ0x5Z3BQejh2TG1WNFpXTW9KeWNwV3pGZElEMDlQU0IxYm1SbFptbHVaV1E3SUM4dklHNXZibkJoY25ScFkybHdZWFJwYm1jZ1kyRndkSFZ5YVc1bklHZHliM1Z3WEc0Z0lDQWdMeThnWW1GelpXUWdiMjRnWlhNMUxYTm9hVzBnYVcxd2JHVnRaVzUwWVhScGIyNHNJRzVsWldRZ2RHOGdjbVYzYjNKcklHbDBYRzRnSUNBZ0pITndiR2wwSUQwZ1puVnVZM1JwYjI0b2MyVndZWEpoZEc5eUxDQnNhVzFwZENsN1hHNGdJQ0FnSUNCMllYSWdjM1J5YVc1bklEMGdVM1J5YVc1bktIUm9hWE1wTzF4dUlDQWdJQ0FnYVdZb2MyVndZWEpoZEc5eUlEMDlQU0IxYm1SbFptbHVaV1FnSmlZZ2JHbHRhWFFnUFQwOUlEQXBjbVYwZFhKdUlGdGRPMXh1SUNBZ0lDQWdMeThnU1dZZ1lITmxjR0Z5WVhSdmNtQWdhWE1nYm05MElHRWdjbVZuWlhnc0lIVnpaU0J1WVhScGRtVWdjM0JzYVhSY2JpQWdJQ0FnSUdsbUtDRnBjMUpsWjBWNGNDaHpaWEJoY21GMGIzSXBLWEpsZEhWeWJpQmZjM0JzYVhRdVkyRnNiQ2h6ZEhKcGJtY3NJSE5sY0dGeVlYUnZjaXdnYkdsdGFYUXBPMXh1SUNBZ0lDQWdkbUZ5SUc5MWRIQjFkQ0E5SUZ0ZE8xeHVJQ0FnSUNBZ2RtRnlJR1pzWVdkeklEMGdLSE5sY0dGeVlYUnZjaTVwWjI1dmNtVkRZWE5sSUQ4Z0oya25JRG9nSnljcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h6WlhCaGNtRjBiM0l1YlhWc2RHbHNhVzVsSUQ4Z0oyMG5JRG9nSnljcElDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2h6WlhCaGNtRjBiM0l1ZFc1cFkyOWtaU0EvSUNkMUp5QTZJQ2NuS1NBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9jMlZ3WVhKaGRHOXlMbk4wYVdOcmVTQS9JQ2Q1SnlBNklDY25LVHRjYmlBZ0lDQWdJSFpoY2lCc1lYTjBUR0Z6ZEVsdVpHVjRJRDBnTUR0Y2JpQWdJQ0FnSUhaaGNpQnpjR3hwZEV4cGJXbDBJRDBnYkdsdGFYUWdQVDA5SUhWdVpHVm1hVzVsWkNBL0lEUXlPVFE1TmpjeU9UVWdPaUJzYVcxcGRDQStQajRnTUR0Y2JpQWdJQ0FnSUM4dklFMWhhMlVnWUdkc2IySmhiR0FnWVc1a0lHRjJiMmxrSUdCc1lYTjBTVzVrWlhoZ0lHbHpjM1ZsY3lCaWVTQjNiM0pyYVc1bklIZHBkR2dnWVNCamIzQjVYRzRnSUNBZ0lDQjJZWElnYzJWd1lYSmhkRzl5UTI5d2VTQTlJRzVsZHlCU1pXZEZlSEFvYzJWd1lYSmhkRzl5TG5OdmRYSmpaU3dnWm14aFozTWdLeUFuWnljcE8xeHVJQ0FnSUNBZ2RtRnlJSE5sY0dGeVlYUnZjaklzSUcxaGRHTm9MQ0JzWVhOMFNXNWtaWGdzSUd4aGMzUk1aVzVuZEdnc0lHazdYRzRnSUNBZ0lDQXZMeUJFYjJWemJpZDBJRzVsWldRZ1pteGhaM01nWjNrc0lHSjFkQ0IwYUdWNUlHUnZiaWQwSUdoMWNuUmNiaUFnSUNBZ0lHbG1LQ0ZPVUVOSEtYTmxjR0Z5WVhSdmNqSWdQU0J1WlhjZ1VtVm5SWGh3S0NkZUp5QXJJSE5sY0dGeVlYUnZja052Y0hrdWMyOTFjbU5sSUNzZ0p5UW9QeUZjWEZ4Y2N5a25MQ0JtYkdGbmN5azdYRzRnSUNBZ0lDQjNhR2xzWlNodFlYUmphQ0E5SUhObGNHRnlZWFJ2Y2tOdmNIa3VaWGhsWXloemRISnBibWNwS1h0Y2JpQWdJQ0FnSUNBZ0x5OGdZSE5sY0dGeVlYUnZja052Y0hrdWJHRnpkRWx1WkdWNFlDQnBjeUJ1YjNRZ2NtVnNhV0ZpYkdVZ1kzSnZjM010WW5KdmQzTmxjbHh1SUNBZ0lDQWdJQ0JzWVhOMFNXNWtaWGdnUFNCdFlYUmphQzVwYm1SbGVDQXJJRzFoZEdOb1d6QmRXMHhGVGtkVVNGMDdYRzRnSUNBZ0lDQWdJR2xtS0d4aGMzUkpibVJsZUNBK0lHeGhjM1JNWVhOMFNXNWtaWGdwZTF4dUlDQWdJQ0FnSUNBZ0lHOTFkSEIxZEM1d2RYTm9LSE4wY21sdVp5NXpiR2xqWlNoc1lYTjBUR0Z6ZEVsdVpHVjRMQ0J0WVhSamFDNXBibVJsZUNrcE8xeHVJQ0FnSUNBZ0lDQWdJQzh2SUVacGVDQmljbTkzYzJWeWN5QjNhRzl6WlNCZ1pYaGxZMkFnYldWMGFHOWtjeUJrYjI0bmRDQmpiMjV6YVhOMFpXNTBiSGtnY21WMGRYSnVJR0IxYm1SbFptbHVaV1JnSUdadmNpQk9VRU5IWEc0Z0lDQWdJQ0FnSUNBZ2FXWW9JVTVRUTBjZ0ppWWdiV0YwWTJoYlRFVk9SMVJJWFNBK0lERXBiV0YwWTJoYk1GMHVjbVZ3YkdGalpTaHpaWEJoY21GMGIzSXlMQ0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5S0drZ1BTQXhPeUJwSUR3Z1lYSm5kVzFsYm5SelcweEZUa2RVU0YwZ0xTQXlPeUJwS3lzcGFXWW9ZWEpuZFcxbGJuUnpXMmxkSUQwOVBTQjFibVJsWm1sdVpXUXBiV0YwWTJoYmFWMGdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnYVdZb2JXRjBZMmhiVEVWT1IxUklYU0ErSURFZ0ppWWdiV0YwWTJndWFXNWtaWGdnUENCemRISnBibWRiVEVWT1IxUklYU2trY0hWemFDNWhjSEJzZVNodmRYUndkWFFzSUcxaGRHTm9Mbk5zYVdObEtERXBLVHRjYmlBZ0lDQWdJQ0FnSUNCc1lYTjBUR1Z1WjNSb0lEMGdiV0YwWTJoYk1GMWJURVZPUjFSSVhUdGNiaUFnSUNBZ0lDQWdJQ0JzWVhOMFRHRnpkRWx1WkdWNElEMGdiR0Z6ZEVsdVpHVjRPMXh1SUNBZ0lDQWdJQ0FnSUdsbUtHOTFkSEIxZEZ0TVJVNUhWRWhkSUQ0OUlITndiR2wwVEdsdGFYUXBZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lvYzJWd1lYSmhkRzl5UTI5d2VWdE1RVk5VWDBsT1JFVllYU0E5UFQwZ2JXRjBZMmd1YVc1a1pYZ3BjMlZ3WVhKaGRHOXlRMjl3ZVZ0TVFWTlVYMGxPUkVWWVhTc3JPeUF2THlCQmRtOXBaQ0JoYmlCcGJtWnBibWwwWlNCc2IyOXdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaWhzWVhOMFRHRnpkRWx1WkdWNElEMDlQU0J6ZEhKcGJtZGJURVZPUjFSSVhTbDdYRzRnSUNBZ0lDQWdJR2xtS0d4aGMzUk1aVzVuZEdnZ2ZId2dJWE5sY0dGeVlYUnZja052Y0hrdWRHVnpkQ2duSnlrcGIzVjBjSFYwTG5CMWMyZ29KeWNwTzF4dUlDQWdJQ0FnZlNCbGJITmxJRzkxZEhCMWRDNXdkWE5vS0hOMGNtbHVaeTV6YkdsalpTaHNZWE4wVEdGemRFbHVaR1Y0S1NrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYjNWMGNIVjBXMHhGVGtkVVNGMGdQaUJ6Y0d4cGRFeHBiV2wwSUQ4Z2IzVjBjSFYwTG5Oc2FXTmxLREFzSUhOd2JHbDBUR2x0YVhRcElEb2diM1YwY0hWME8xeHVJQ0FnSUgwN1hHNGdJQzh2SUVOb1lXdHlZU3dnVmpoY2JpQWdmU0JsYkhObElHbG1LQ2N3SjFza1UxQk1TVlJkS0hWdVpHVm1hVzVsWkN3Z01DbGJURVZPUjFSSVhTbDdYRzRnSUNBZ0pITndiR2wwSUQwZ1puVnVZM1JwYjI0b2MyVndZWEpoZEc5eUxDQnNhVzFwZENsN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWd1lYSmhkRzl5SUQwOVBTQjFibVJsWm1sdVpXUWdKaVlnYkdsdGFYUWdQVDA5SURBZ1B5QmJYU0E2SUY5emNHeHBkQzVqWVd4c0tIUm9hWE1zSUhObGNHRnlZWFJ2Y2l3Z2JHbHRhWFFwTzF4dUlDQWdJSDA3WEc0Z0lIMWNiaUFnTHk4Z01qRXVNUzR6TGpFM0lGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdWMzQnNhWFFvYzJWd1lYSmhkRzl5TENCc2FXMXBkQ2xjYmlBZ2NtVjBkWEp1SUZ0bWRXNWpkR2x2YmlCemNHeHBkQ2h6WlhCaGNtRjBiM0lzSUd4cGJXbDBLWHRjYmlBZ0lDQjJZWElnVHlBZ1BTQmtaV1pwYm1Wa0tIUm9hWE1wWEc0Z0lDQWdJQ0FzSUdadUlEMGdjMlZ3WVhKaGRHOXlJRDA5SUhWdVpHVm1hVzVsWkNBL0lIVnVaR1ZtYVc1bFpDQTZJSE5sY0dGeVlYUnZjbHRUVUV4SlZGMDdYRzRnSUNBZ2NtVjBkWEp1SUdadUlDRTlQU0IxYm1SbFptbHVaV1FnUHlCbWJpNWpZV3hzS0hObGNHRnlZWFJ2Y2l3Z1R5d2diR2x0YVhRcElEb2dKSE53YkdsMExtTmhiR3dvVTNSeWFXNW5LRThwTENCelpYQmhjbUYwYjNJc0lHeHBiV2wwS1R0Y2JpQWdmU3dnSkhOd2JHbDBYVHRjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuSmxjWFZwY21Vb0p5NHZaWE0yTG5KbFoyVjRjQzVtYkdGbmN5Y3BPMXh1ZG1GeUlHRnVUMkpxWldOMElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENBa1pteGhaM01nSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJac1lXZHpKeWxjYmlBZ0xDQkVSVk5EVWtsUVZFOVNVeUE5SUhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWxjYmlBZ0xDQlVUMTlUVkZKSlRrY2dJQ0E5SUNkMGIxTjBjbWx1WnlkY2JpQWdMQ0FrZEc5VGRISnBibWNnSUNBOUlDOHVMMXRVVDE5VFZGSkpUa2RkTzF4dVhHNTJZWElnWkdWbWFXNWxJRDBnWm5WdVkzUnBiMjRvWm00cGUxeHVJQ0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcEtGSmxaMFY0Y0M1d2NtOTBiM1I1Y0dVc0lGUlBYMU5VVWtsT1J5d2dabTRzSUhSeWRXVXBPMXh1ZlR0Y2JseHVMeThnTWpFdU1pNDFMakUwSUZKbFowVjRjQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWNvS1Z4dWFXWW9jbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaWdwZXlCeVpYUjFjbTRnSkhSdlUzUnlhVzVuTG1OaGJHd29lM052ZFhKalpUb2dKMkVuTENCbWJHRm5jem9nSjJJbmZTa2dJVDBnSnk5aEwySW5PeUI5S1NsN1hHNGdJR1JsWm1sdVpTaG1kVzVqZEdsdmJpQjBiMU4wY21sdVp5Z3BlMXh1SUNBZ0lIWmhjaUJTSUQwZ1lXNVBZbXBsWTNRb2RHaHBjeWs3WEc0Z0lDQWdjbVYwZFhKdUlDY3ZKeTVqYjI1allYUW9VaTV6YjNWeVkyVXNJQ2N2Snl4Y2JpQWdJQ0FnSUNkbWJHRm5jeWNnYVc0Z1VpQS9JRkl1Wm14aFozTWdPaUFoUkVWVFExSkpVRlJQVWxNZ0ppWWdVaUJwYm5OMFlXNWpaVzltSUZKbFowVjRjQ0EvSUNSbWJHRm5jeTVqWVd4c0tGSXBJRG9nZFc1a1pXWnBibVZrS1R0Y2JpQWdmU2s3WEc0dkx5QkdSalEwTFNCU1pXZEZlSEFqZEc5VGRISnBibWNnYUdGeklHRWdkM0p2Ym1jZ2JtRnRaVnh1ZlNCbGJITmxJR2xtS0NSMGIxTjBjbWx1Wnk1dVlXMWxJQ0U5SUZSUFgxTlVVa2xPUnlsN1hHNGdJR1JsWm1sdVpTaG1kVzVqZEdsdmJpQjBiMU4wY21sdVp5Z3BlMXh1SUNBZ0lISmxkSFZ5YmlBa2RHOVRkSEpwYm1jdVkyRnNiQ2gwYUdsektUdGNiaUFnZlNrN1hHNTlJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUhOMGNtOXVaeUE5SUhKbGNYVnBjbVVvSnk0dlgyTnZiR3hsWTNScGIyNHRjM1J5YjI1bkp5azdYRzVjYmk4dklESXpMaklnVTJWMElFOWlhbVZqZEhOY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjlzYkdWamRHbHZiaWNwS0NkVFpYUW5MQ0JtZFc1amRHbHZiaWhuWlhRcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdVMlYwS0NsN0lISmxkSFZ5YmlCblpYUW9kR2hwY3l3Z1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lEQWdQeUJoY21kMWJXVnVkSE5iTUYwZ09pQjFibVJsWm1sdVpXUXBPeUI5TzF4dWZTd2dlMXh1SUNBdkx5QXlNeTR5TGpNdU1TQlRaWFF1Y0hKdmRHOTBlWEJsTG1Ga1pDaDJZV3gxWlNsY2JpQWdZV1JrT2lCbWRXNWpkR2x2YmlCaFpHUW9kbUZzZFdVcGUxeHVJQ0FnSUhKbGRIVnliaUJ6ZEhKdmJtY3VaR1ZtS0hSb2FYTXNJSFpoYkhWbElEMGdkbUZzZFdVZ1BUMDlJREFnUHlBd0lEb2dkbUZzZFdVc0lIWmhiSFZsS1R0Y2JpQWdmVnh1ZlN3Z2MzUnliMjVuS1RzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QkNMakl1TXk0eUlGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdVlXNWphRzl5S0c1aGJXVXBYRzV5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0YUhSdGJDY3BLQ2RoYm1Ob2IzSW5MQ0JtZFc1amRHbHZiaWhqY21WaGRHVklWRTFNS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHRnVZMmh2Y2lodVlXMWxLWHRjYmlBZ0lDQnlaWFIxY200Z1kzSmxZWFJsU0ZSTlRDaDBhR2x6TENBbllTY3NJQ2R1WVcxbEp5d2dibUZ0WlNrN1hHNGdJSDFjYm4wcE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJRUl1TWk0ekxqTWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNWlhV2NvS1Z4dWNtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXaDBiV3duS1NnblltbG5KeXdnWm5WdVkzUnBiMjRvWTNKbFlYUmxTRlJOVENsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQmlhV2NvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFNGUk5UQ2gwYUdsekxDQW5ZbWxuSnl3Z0p5Y3NJQ2NuS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdRaTR5TGpNdU5DQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtSnNhVzVyS0NsY2JuSmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MW9kRzFzSnlrb0oySnNhVzVySnl3Z1puVnVZM1JwYjI0b1kzSmxZWFJsU0ZSTlRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJpYkdsdWF5Z3BlMXh1SUNBZ0lISmxkSFZ5YmlCamNtVmhkR1ZJVkUxTUtIUm9hWE1zSUNkaWJHbHVheWNzSUNjbkxDQW5KeWs3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklFSXVNaTR6TGpVZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1aWIyeGtLQ2xjYm5KbGNYVnBjbVVvSnk0dlgzTjBjbWx1Wnkxb2RHMXNKeWtvSjJKdmJHUW5MQ0JtZFc1amRHbHZiaWhqY21WaGRHVklWRTFNS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHSnZiR1FvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFNGUk5UQ2gwYUdsekxDQW5ZaWNzSUNjbkxDQW5KeWs3WEc0Z0lIMWNibjBwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtZWFFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV0YwSnlrb1ptRnNjMlVwTzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBc0lDZFRkSEpwYm1jbkxDQjdYRzRnSUM4dklESXhMakV1TXk0eklGTjBjbWx1Wnk1d2NtOTBiM1I1Y0dVdVkyOWtaVkJ2YVc1MFFYUW9jRzl6S1Z4dUlDQmpiMlJsVUc5cGJuUkJkRG9nWm5WdVkzUnBiMjRnWTI5a1pWQnZhVzUwUVhRb2NHOXpLWHRjYmlBZ0lDQnlaWFIxY200Z0pHRjBLSFJvYVhNc0lIQnZjeWs3WEc0Z0lIMWNibjBwT3lJc0lpOHZJREl4TGpFdU15NDJJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVaVzVrYzFkcGRHZ29jMlZoY21Ob1UzUnlhVzVuSUZzc0lHVnVaRkJ2YzJsMGFXOXVYU2xjYmlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lBa1pYaHdiM0owSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lIUnZUR1Z1WjNSb0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnWTI5dWRHVjRkQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXTnZiblJsZUhRbktWeHVJQ0FzSUVWT1JGTmZWMGxVU0NBOUlDZGxibVJ6VjJsMGFDZGNiaUFnTENBa1pXNWtjMWRwZEdnZ1BTQW5KMXRGVGtSVFgxZEpWRWhkTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJQ1JsZUhCdmNuUXVSaUFxSUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6TFdsekxYSmxaMlY0Y0NjcEtFVk9SRk5mVjBsVVNDa3NJQ2RUZEhKcGJtY25MQ0I3WEc0Z0lHVnVaSE5YYVhSb09pQm1kVzVqZEdsdmJpQmxibVJ6VjJsMGFDaHpaV0Z5WTJoVGRISnBibWNnTHlvc0lHVnVaRkJ2YzJsMGFXOXVJRDBnUUd4bGJtZDBhQ0FxTHlsN1hHNGdJQ0FnZG1GeUlIUm9ZWFFnUFNCamIyNTBaWGgwS0hSb2FYTXNJSE5sWVhKamFGTjBjbWx1Wnl3Z1JVNUVVMTlYU1ZSSUtWeHVJQ0FnSUNBZ0xDQmxibVJRYjNOcGRHbHZiaUE5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElEOGdZWEpuZFcxbGJuUnpXekZkSURvZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnSUNBc0lHeGxiaUFnSUNBOUlIUnZUR1Z1WjNSb0tIUm9ZWFF1YkdWdVozUm9LVnh1SUNBZ0lDQWdMQ0JsYm1RZ0lDQWdQU0JsYm1SUWIzTnBkR2x2YmlBOVBUMGdkVzVrWldacGJtVmtJRDhnYkdWdUlEb2dUV0YwYUM1dGFXNG9kRzlNWlc1bmRHZ29aVzVrVUc5emFYUnBiMjRwTENCc1pXNHBYRzRnSUNBZ0lDQXNJSE5sWVhKamFDQTlJRk4wY21sdVp5aHpaV0Z5WTJoVGRISnBibWNwTzF4dUlDQWdJSEpsZEhWeWJpQWtaVzVrYzFkcGRHaGNiaUFnSUNBZ0lEOGdKR1Z1WkhOWGFYUm9MbU5oYkd3b2RHaGhkQ3dnYzJWaGNtTm9MQ0JsYm1RcFhHNGdJQ0FnSUNBNklIUm9ZWFF1YzJ4cFkyVW9aVzVrSUMwZ2MyVmhjbU5vTG14bGJtZDBhQ3dnWlc1a0tTQTlQVDBnYzJWaGNtTm9PMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlCQ0xqSXVNeTQySUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1Wm1sNFpXUW9LVnh1Y21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFdoMGJXd25LU2duWm1sNFpXUW5MQ0JtZFc1amRHbHZiaWhqY21WaGRHVklWRTFNS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlHWnBlR1ZrS0NsN1hHNGdJQ0FnY21WMGRYSnVJR055WldGMFpVaFVUVXdvZEdocGN5d2dKM1IwSnl3Z0p5Y3NJQ2NuS1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdRaTR5TGpNdU55QlRkSEpwYm1jdWNISnZkRzkwZVhCbExtWnZiblJqYjJ4dmNpaGpiMnh2Y2lsY2JuSmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MW9kRzFzSnlrb0oyWnZiblJqYjJ4dmNpY3NJR1oxYm1OMGFXOXVLR055WldGMFpVaFVUVXdwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1ptOXVkR052Ykc5eUtHTnZiRzl5S1h0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFNGUk5UQ2gwYUdsekxDQW5abTl1ZENjc0lDZGpiMnh2Y2ljc0lHTnZiRzl5S1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdRaTR5TGpNdU9DQlRkSEpwYm1jdWNISnZkRzkwZVhCbExtWnZiblJ6YVhwbEtITnBlbVVwWEc1eVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGFIUnRiQ2NwS0NkbWIyNTBjMmw2WlNjc0lHWjFibU4wYVc5dUtHTnlaV0YwWlVoVVRVd3BlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnWm05dWRITnBlbVVvYzJsNlpTbDdYRzRnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVWhVVFV3b2RHaHBjeXdnSjJadmJuUW5MQ0FuYzJsNlpTY3NJSE5wZW1VcE8xeHVJQ0I5WEc1OUtUc2lMQ0oyWVhJZ0pHVjRjRzl5ZENBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUhSdlNXNWtaWGdnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzVrWlhnbktWeHVJQ0FzSUdaeWIyMURhR0Z5UTI5a1pTQWdJRDBnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlZ4dUlDQXNJQ1JtY205dFEyOWtaVkJ2YVc1MElEMGdVM1J5YVc1bkxtWnliMjFEYjJSbFVHOXBiblE3WEc1Y2JpOHZJR3hsYm1kMGFDQnphRzkxYkdRZ1ltVWdNU3dnYjJ4a0lFWkdJSEJ5YjJKc1pXMWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tDRWhKR1p5YjIxRGIyUmxVRzlwYm5RZ0ppWWdKR1p5YjIxRGIyUmxVRzlwYm5RdWJHVnVaM1JvSUNFOUlERXBMQ0FuVTNSeWFXNW5KeXdnZTF4dUlDQXZMeUF5TVM0eExqSXVNaUJUZEhKcGJtY3Vabkp2YlVOdlpHVlFiMmx1ZENndUxpNWpiMlJsVUc5cGJuUnpLVnh1SUNCbWNtOXRRMjlrWlZCdmFXNTBPaUJtZFc1amRHbHZiaUJtY205dFEyOWtaVkJ2YVc1MEtIZ3BleUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z0lDQWdkbUZ5SUhKbGN5QWdQU0JiWFZ4dUlDQWdJQ0FnTENCaFRHVnVJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRnh1SUNBZ0lDQWdMQ0JwSUNBZ0lEMGdNRnh1SUNBZ0lDQWdMQ0JqYjJSbE8xeHVJQ0FnSUhkb2FXeGxLR0ZNWlc0Z1BpQnBLWHRjYmlBZ0lDQWdJR052WkdVZ1BTQXJZWEpuZFcxbGJuUnpXMmtySzEwN1hHNGdJQ0FnSUNCcFppaDBiMGx1WkdWNEtHTnZaR1VzSURCNE1UQm1abVptS1NBaFBUMGdZMjlrWlNsMGFISnZkeUJTWVc1blpVVnljbTl5S0dOdlpHVWdLeUFuSUdseklHNXZkQ0JoSUhaaGJHbGtJR052WkdVZ2NHOXBiblFuS1R0Y2JpQWdJQ0FnSUhKbGN5NXdkWE5vS0dOdlpHVWdQQ0F3ZURFd01EQXdYRzRnSUNBZ0lDQWdJRDhnWm5KdmJVTm9ZWEpEYjJSbEtHTnZaR1VwWEc0Z0lDQWdJQ0FnSURvZ1puSnZiVU5vWVhKRGIyUmxLQ2dvWTI5a1pTQXRQU0F3ZURFd01EQXdLU0ErUGlBeE1Da2dLeUF3ZUdRNE1EQXNJR052WkdVZ0pTQXdlRFF3TUNBcklEQjRaR013TUNsY2JpQWdJQ0FnSUNrN1hHNGdJQ0FnZlNCeVpYUjFjbTRnY21WekxtcHZhVzRvSnljcE8xeHVJQ0I5WEc1OUtUc2lMQ0l2THlBeU1TNHhMak11TnlCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1sdVkyeDFaR1Z6S0hObFlYSmphRk4wY21sdVp5d2djRzl6YVhScGIyNGdQU0F3S1Z4dUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQmpiMjUwWlhoMElDQTlJSEpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTFqYjI1MFpYaDBKeWxjYmlBZ0xDQkpUa05NVlVSRlV5QTlJQ2RwYm1Oc2RXUmxjeWM3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNUdJQ29nY21WeGRXbHlaU2duTGk5ZlptRnBiSE10YVhNdGNtVm5aWGh3Snlrb1NVNURURlZFUlZNcExDQW5VM1J5YVc1bkp5d2dlMXh1SUNCcGJtTnNkV1JsY3pvZ1puVnVZM1JwYjI0Z2FXNWpiSFZrWlhNb2MyVmhjbU5vVTNSeWFXNW5JQzhxTENCd2IzTnBkR2x2YmlBOUlEQWdLaThwZTF4dUlDQWdJSEpsZEhWeWJpQWhJWDVqYjI1MFpYaDBLSFJvYVhNc0lITmxZWEpqYUZOMGNtbHVaeXdnU1U1RFRGVkVSVk1wWEc0Z0lDQWdJQ0F1YVc1a1pYaFBaaWh6WldGeVkyaFRkSEpwYm1jc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z1FpNHlMak11T1NCVGRISnBibWN1Y0hKdmRHOTBlWEJsTG1sMFlXeHBZM01vS1Z4dWNtVnhkV2x5WlNnbkxpOWZjM1J5YVc1bkxXaDBiV3duS1NnbmFYUmhiR2xqY3ljc0lHWjFibU4wYVc5dUtHTnlaV0YwWlVoVVRVd3BlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYVhSaGJHbGpjeWdwZTF4dUlDQWdJSEpsZEhWeWJpQmpjbVZoZEdWSVZFMU1LSFJvYVhNc0lDZHBKeXdnSnljc0lDY25LVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z1FpNHlMak11TVRBZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1c2FXNXJLSFZ5YkNsY2JuSmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MW9kRzFzSnlrb0oyeHBibXNuTENCbWRXNWpkR2x2YmloamNtVmhkR1ZJVkUxTUtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR3hwYm1zb2RYSnNLWHRjYmlBZ0lDQnlaWFIxY200Z1kzSmxZWFJsU0ZSTlRDaDBhR2x6TENBbllTY3NJQ2RvY21WbUp5d2dkWEpzS1R0Y2JpQWdmVnh1ZlNrN0lpd2lkbUZ5SUNSbGVIQnZjblFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2RHOUpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnZEc5TVpXNW5kR2dnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5VM1J5YVc1bkp5d2dlMXh1SUNBdkx5QXlNUzR4TGpJdU5DQlRkSEpwYm1jdWNtRjNLR05oYkd4VGFYUmxMQ0F1TGk1emRXSnpkR2wwZFhScGIyNXpLVnh1SUNCeVlYYzZJR1oxYm1OMGFXOXVJSEpoZHloallXeHNVMmwwWlNsN1hHNGdJQ0FnZG1GeUlIUndiQ0FnUFNCMGIwbFBZbXBsWTNRb1kyRnNiRk5wZEdVdWNtRjNLVnh1SUNBZ0lDQWdMQ0JzWlc0Z0lEMGdkRzlNWlc1bmRHZ29kSEJzTG14bGJtZDBhQ2xjYmlBZ0lDQWdJQ3dnWVV4bGJpQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDd2djbVZ6SUNBOUlGdGRYRzRnSUNBZ0lDQXNJR2tnSUNBZ1BTQXdPMXh1SUNBZ0lIZG9hV3hsS0d4bGJpQStJR2twZTF4dUlDQWdJQ0FnY21WekxuQjFjMmdvVTNSeWFXNW5LSFJ3YkZ0cEt5dGRLU2s3WEc0Z0lDQWdJQ0JwWmlocElEd2dZVXhsYmlseVpYTXVjSFZ6YUNoVGRISnBibWNvWVhKbmRXMWxiblJ6VzJsZEtTazdYRzRnSUNBZ2ZTQnlaWFIxY200Z2NtVnpMbXB2YVc0b0p5Y3BPMXh1SUNCOVhHNTlLVHNpTENKMllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDd2dKMU4wY21sdVp5Y3NJSHRjYmlBZ0x5OGdNakV1TVM0ekxqRXpJRk4wY21sdVp5NXdjbTkwYjNSNWNHVXVjbVZ3WldGMEtHTnZkVzUwS1Z4dUlDQnlaWEJsWVhRNklISmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MXlaWEJsWVhRbktWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z1FpNHlMak11TVRFZ1UzUnlhVzVuTG5CeWIzUnZkSGx3WlM1emJXRnNiQ2dwWEc1eVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdGFIUnRiQ2NwS0NkemJXRnNiQ2NzSUdaMWJtTjBhVzl1S0dOeVpXRjBaVWhVVFV3cGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdjMjFoYkd3b0tYdGNiaUFnSUNCeVpYUjFjbTRnWTNKbFlYUmxTRlJOVENoMGFHbHpMQ0FuYzIxaGJHd25MQ0FuSnl3Z0p5Y3BPMXh1SUNCOVhHNTlLVHNpTENJdkx5QXlNUzR4TGpNdU1UZ2dVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNXpkR0Z5ZEhOWGFYUm9LSE5sWVhKamFGTjBjbWx1WnlCYkxDQndiM05wZEdsdmJpQmRLVnh1SjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUNSbGVIQnZjblFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQjBiMHhsYm1kMGFDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV3hsYm1kMGFDY3BYRzRnSUN3Z1kyOXVkR1Y0ZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0WTI5dWRHVjRkQ2NwWEc0Z0lDd2dVMVJCVWxSVFgxZEpWRWdnUFNBbmMzUmhjblJ6VjJsMGFDZGNiaUFnTENBa2MzUmhjblJ6VjJsMGFDQTlJQ2NuVzFOVVFWSlVVMTlYU1ZSSVhUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFnS3lBa1pYaHdiM0owTGtZZ0tpQnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5MXBjeTF5WldkbGVIQW5LU2hUVkVGU1ZGTmZWMGxVU0Nrc0lDZFRkSEpwYm1jbkxDQjdYRzRnSUhOMFlYSjBjMWRwZEdnNklHWjFibU4wYVc5dUlITjBZWEowYzFkcGRHZ29jMlZoY21Ob1UzUnlhVzVuSUM4cUxDQndiM05wZEdsdmJpQTlJREFnS2k4cGUxeHVJQ0FnSUhaaGNpQjBhR0YwSUNBZ1BTQmpiMjUwWlhoMEtIUm9hWE1zSUhObFlYSmphRk4wY21sdVp5d2dVMVJCVWxSVFgxZEpWRWdwWEc0Z0lDQWdJQ0FzSUdsdVpHVjRJQ0E5SUhSdlRHVnVaM1JvS0UxaGRHZ3ViV2x1S0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeElEOGdZWEpuZFcxbGJuUnpXekZkSURvZ2RXNWtaV1pwYm1Wa0xDQjBhR0YwTG14bGJtZDBhQ2twWEc0Z0lDQWdJQ0FzSUhObFlYSmphQ0E5SUZOMGNtbHVaeWh6WldGeVkyaFRkSEpwYm1jcE8xeHVJQ0FnSUhKbGRIVnliaUFrYzNSaGNuUnpWMmwwYUZ4dUlDQWdJQ0FnUHlBa2MzUmhjblJ6VjJsMGFDNWpZV3hzS0hSb1lYUXNJSE5sWVhKamFDd2dhVzVrWlhncFhHNGdJQ0FnSUNBNklIUm9ZWFF1YzJ4cFkyVW9hVzVrWlhnc0lHbHVaR1Y0SUNzZ2MyVmhjbU5vTG14bGJtZDBhQ2tnUFQwOUlITmxZWEpqYUR0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdRaTR5TGpNdU1USWdVM1J5YVc1bkxuQnliM1J2ZEhsd1pTNXpkSEpwYTJVb0tWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV2gwYld3bktTZ25jM1J5YVd0bEp5d2dablZ1WTNScGIyNG9ZM0psWVhSbFNGUk5UQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCemRISnBhMlVvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFNGUk5UQ2gwYUdsekxDQW5jM1J5YVd0bEp5d2dKeWNzSUNjbktUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnUWk0eUxqTXVNVE1nVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzV6ZFdJb0tWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV2gwYld3bktTZ25jM1ZpSnl3Z1puVnVZM1JwYjI0b1kzSmxZWFJsU0ZSTlRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ6ZFdJb0tYdGNiaUFnSUNCeVpYUjFjbTRnWTNKbFlYUmxTRlJOVENoMGFHbHpMQ0FuYzNWaUp5d2dKeWNzSUNjbktUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnUWk0eUxqTXVNVFFnVTNSeWFXNW5MbkJ5YjNSdmRIbHdaUzV6ZFhBb0tWeHVjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV2gwYld3bktTZ25jM1Z3Snl3Z1puVnVZM1JwYjI0b1kzSmxZWFJsU0ZSTlRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ6ZFhBb0tYdGNiaUFnSUNCeVpYUjFjbTRnWTNKbFlYUmxTRlJOVENoMGFHbHpMQ0FuYzNWd0p5d2dKeWNzSUNjbktUdGNiaUFnZlZ4dWZTazdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnTWpFdU1TNHpMakkxSUZOMGNtbHVaeTV3Y205MGIzUjVjR1V1ZEhKcGJTZ3BYRzV5WlhGMWFYSmxLQ2N1TDE5emRISnBibWN0ZEhKcGJTY3BLQ2QwY21sdEp5d2dablZ1WTNScGIyNG9KSFJ5YVcwcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdkSEpwYlNncGUxeHVJQ0FnSUhKbGRIVnliaUFrZEhKcGJTaDBhR2x6TENBektUdGNiaUFnZlR0Y2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lBa1pYaHdiM0owSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJQ1IwZVhCbFpDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1I1Y0dWa0p5bGNiaUFnTENCaWRXWm1aWElnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQzFpZFdabVpYSW5LVnh1SUNBc0lHRnVUMkpxWldOMElDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z2RHOUpibVJsZUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzVrWlhnbktWeHVJQ0FzSUhSdlRHVnVaM1JvSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXeGxibWQwYUNjcFhHNGdJQ3dnYVhOUFltcGxZM1FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlsY2JpQWdMQ0JCY25KaGVVSjFabVpsY2lBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LUzVCY25KaGVVSjFabVpsY2x4dUlDQXNJSE53WldOcFpYTkRiMjV6ZEhKMVkzUnZjaUE5SUhKbGNYVnBjbVVvSnk0dlgzTndaV05wWlhNdFkyOXVjM1J5ZFdOMGIzSW5LVnh1SUNBc0lDUkJjbkpoZVVKMVptWmxjaUE5SUdKMVptWmxjaTVCY25KaGVVSjFabVpsY2x4dUlDQXNJQ1JFWVhSaFZtbGxkeUFnSUNBOUlHSjFabVpsY2k1RVlYUmhWbWxsZDF4dUlDQXNJQ1JwYzFacFpYY2dJQ0FnSUNBOUlDUjBlWEJsWkM1QlFsWWdKaVlnUVhKeVlYbENkV1ptWlhJdWFYTldhV1YzWEc0Z0lDd2dKSE5zYVdObElDQWdJQ0FnSUQwZ0pFRnljbUY1UW5WbVptVnlMbkJ5YjNSdmRIbHdaUzV6YkdsalpWeHVJQ0FzSUZaSlJWY2dJQ0FnSUNBZ0lDQTlJQ1IwZVhCbFpDNVdTVVZYWEc0Z0lDd2dRVkpTUVZsZlFsVkdSa1ZTSUQwZ0owRnljbUY1UW5WbVptVnlKenRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGtjZ0t5QWtaWGh3YjNKMExsY2dLeUFrWlhod2IzSjBMa1lnS2lBb1FYSnlZWGxDZFdabVpYSWdJVDA5SUNSQmNuSmhlVUoxWm1abGNpa3NJSHRCY25KaGVVSjFabVpsY2pvZ0pFRnljbUY1UW5WbVptVnlmU2s3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nSVNSMGVYQmxaQzVEVDA1VFZGSXNJRUZTVWtGWlgwSlZSa1pGVWl3Z2UxeHVJQ0F2THlBeU5DNHhMak11TVNCQmNuSmhlVUoxWm1abGNpNXBjMVpwWlhjb1lYSm5LVnh1SUNCcGMxWnBaWGM2SUdaMWJtTjBhVzl1SUdselZtbGxkeWhwZENsN1hHNGdJQ0FnY21WMGRYSnVJQ1JwYzFacFpYY2dKaVlnSkdselZtbGxkeWhwZENrZ2ZId2dhWE5QWW1wbFkzUW9hWFFwSUNZbUlGWkpSVmNnYVc0Z2FYUTdYRzRnSUgxY2JuMHBPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklDUmxlSEJ2Y25RdVZTQXJJQ1JsZUhCdmNuUXVSaUFxSUhKbGNYVnBjbVVvSnk0dlgyWmhhV3h6Snlrb1puVnVZM1JwYjI0b0tYdGNiaUFnY21WMGRYSnVJQ0Z1WlhjZ0pFRnljbUY1UW5WbVptVnlLRElwTG5Oc2FXTmxLREVzSUhWdVpHVm1hVzVsWkNrdVlubDBaVXhsYm1kMGFEdGNibjBwTENCQlVsSkJXVjlDVlVaR1JWSXNJSHRjYmlBZ0x5OGdNalF1TVM0MExqTWdRWEp5WVhsQ2RXWm1aWEl1Y0hKdmRHOTBlWEJsTG5Oc2FXTmxLSE4wWVhKMExDQmxibVFwWEc0Z0lITnNhV05sT2lCbWRXNWpkR2x2YmlCemJHbGpaU2h6ZEdGeWRDd2daVzVrS1h0Y2JpQWdJQ0JwWmlna2MyeHBZMlVnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJsYm1RZ1BUMDlJSFZ1WkdWbWFXNWxaQ2x5WlhSMWNtNGdKSE5zYVdObExtTmhiR3dvWVc1UFltcGxZM1FvZEdocGN5a3NJSE4wWVhKMEtUc2dMeThnUmtZZ1ptbDRYRzRnSUNBZ2RtRnlJR3hsYmlBZ0lDQTlJR0Z1VDJKcVpXTjBLSFJvYVhNcExtSjVkR1ZNWlc1bmRHaGNiaUFnSUNBZ0lDd2dabWx5YzNRZ0lEMGdkRzlKYm1SbGVDaHpkR0Z5ZEN3Z2JHVnVLVnh1SUNBZ0lDQWdMQ0JtYVc1aGJDQWdQU0IwYjBsdVpHVjRLR1Z1WkNBOVBUMGdkVzVrWldacGJtVmtJRDhnYkdWdUlEb2daVzVrTENCc1pXNHBYRzRnSUNBZ0lDQXNJSEpsYzNWc2RDQTlJRzVsZHlBb2MzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUtIUm9hWE1zSUNSQmNuSmhlVUoxWm1abGNpa3BLSFJ2VEdWdVozUm9LR1pwYm1Gc0lDMGdabWx5YzNRcEtWeHVJQ0FnSUNBZ0xDQjJhV1YzVXlBZ1BTQnVaWGNnSkVSaGRHRldhV1YzS0hSb2FYTXBYRzRnSUNBZ0lDQXNJSFpwWlhkVUlDQTlJRzVsZHlBa1JHRjBZVlpwWlhjb2NtVnpkV3gwS1Z4dUlDQWdJQ0FnTENCcGJtUmxlQ0FnUFNBd08xeHVJQ0FnSUhkb2FXeGxLR1pwY25OMElEd2dabWx1WVd3cGUxeHVJQ0FnSUNBZ2RtbGxkMVF1YzJWMFZXbHVkRGdvYVc1a1pYZ3JLeXdnZG1sbGQxTXVaMlYwVldsdWREZ29abWx5YzNRckt5a3BPMXh1SUNBZ0lIMGdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdmVnh1ZlNrN1hHNWNibkpsY1hWcGNtVW9KeTR2WDNObGRDMXpjR1ZqYVdWekp5a29RVkpTUVZsZlFsVkdSa1ZTS1RzaUxDSjJZWElnSkdWNGNHOXlkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcE8xeHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExrY2dLeUFrWlhod2IzSjBMbGNnS3lBa1pYaHdiM0owTGtZZ0tpQWhjbVZ4ZFdseVpTZ25MaTlmZEhsd1pXUW5LUzVCUWxZc0lIdGNiaUFnUkdGMFlWWnBaWGM2SUhKbGNYVnBjbVVvSnk0dlgzUjVjR1ZrTFdKMVptWmxjaWNwTGtSaGRHRldhV1YzWEc1OUtUc2lMQ0p5WlhGMWFYSmxLQ2N1TDE5MGVYQmxaQzFoY25KaGVTY3BLQ2RHYkc5aGRETXlKeXdnTkN3Z1puVnVZM1JwYjI0b2FXNXBkQ2w3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCR2JHOWhkRE15UVhKeVlYa29aR0YwWVN3Z1lubDBaVTltWm5ObGRDd2diR1Z1WjNSb0tYdGNiaUFnSUNCeVpYUjFjbTRnYVc1cGRDaDBhR2x6TENCa1lYUmhMQ0JpZVhSbFQyWm1jMlYwTENCc1pXNW5kR2dwTzF4dUlDQjlPMXh1ZlNrN0lpd2ljbVZ4ZFdseVpTZ25MaTlmZEhsd1pXUXRZWEp5WVhrbktTZ25SbXh2WVhRMk5DY3NJRGdzSUdaMWJtTjBhVzl1S0dsdWFYUXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnUm14dllYUTJORUZ5Y21GNUtHUmhkR0VzSUdKNWRHVlBabVp6WlhRc0lHeGxibWQwYUNsN1hHNGdJQ0FnY21WMGRYSnVJR2x1YVhRb2RHaHBjeXdnWkdGMFlTd2dZbmwwWlU5bVpuTmxkQ3dnYkdWdVozUm9LVHRjYmlBZ2ZUdGNibjBwT3lJc0luSmxjWFZwY21Vb0p5NHZYM1I1Y0dWa0xXRnljbUY1Snlrb0owbHVkREUySnl3Z01pd2dablZ1WTNScGIyNG9hVzVwZENsN1hHNGdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQkpiblF4TmtGeWNtRjVLR1JoZEdFc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDbDdYRzRnSUNBZ2NtVjBkWEp1SUdsdWFYUW9kR2hwY3l3Z1pHRjBZU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1R0Y2JpQWdmVHRjYm4wcE95SXNJbkpsY1hWcGNtVW9KeTR2WDNSNWNHVmtMV0Z5Y21GNUp5a29KMGx1ZERNeUp5d2dOQ3dnWm5WdVkzUnBiMjRvYVc1cGRDbDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJKYm5Rek1rRnljbUY1S0dSaGRHRXNJR0o1ZEdWUFptWnpaWFFzSUd4bGJtZDBhQ2w3WEc0Z0lDQWdjbVYwZFhKdUlHbHVhWFFvZEdocGN5d2daR0YwWVN3Z1lubDBaVTltWm5ObGRDd2diR1Z1WjNSb0tUdGNiaUFnZlR0Y2JuMHBPeUlzSW5KbGNYVnBjbVVvSnk0dlgzUjVjR1ZrTFdGeWNtRjVKeWtvSjBsdWREZ25MQ0F4TENCbWRXNWpkR2x2YmlocGJtbDBLWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUVsdWREaEJjbkpoZVNoa1lYUmhMQ0JpZVhSbFQyWm1jMlYwTENCc1pXNW5kR2dwZTF4dUlDQWdJSEpsZEhWeWJpQnBibWwwS0hSb2FYTXNJR1JoZEdFc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDazdYRzRnSUgwN1hHNTlLVHNpTENKeVpYRjFhWEpsS0NjdUwxOTBlWEJsWkMxaGNuSmhlU2NwS0NkVmFXNTBNVFluTENBeUxDQm1kVzVqZEdsdmJpaHBibWwwS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlGVnBiblF4TmtGeWNtRjVLR1JoZEdFc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDbDdYRzRnSUNBZ2NtVjBkWEp1SUdsdWFYUW9kR2hwY3l3Z1pHRjBZU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1R0Y2JpQWdmVHRjYm4wcE95SXNJbkpsY1hWcGNtVW9KeTR2WDNSNWNHVmtMV0Z5Y21GNUp5a29KMVZwYm5Rek1pY3NJRFFzSUdaMWJtTjBhVzl1S0dsdWFYUXBlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnVldsdWRETXlRWEp5WVhrb1pHRjBZU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1h0Y2JpQWdJQ0J5WlhSMWNtNGdhVzVwZENoMGFHbHpMQ0JrWVhSaExDQmllWFJsVDJabWMyVjBMQ0JzWlc1bmRHZ3BPMXh1SUNCOU8xeHVmU2s3SWl3aWNtVnhkV2x5WlNnbkxpOWZkSGx3WldRdFlYSnlZWGtuS1NnblZXbHVkRGduTENBeExDQm1kVzVqZEdsdmJpaHBibWwwS1h0Y2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlGVnBiblE0UVhKeVlYa29aR0YwWVN3Z1lubDBaVTltWm5ObGRDd2diR1Z1WjNSb0tYdGNiaUFnSUNCeVpYUjFjbTRnYVc1cGRDaDBhR2x6TENCa1lYUmhMQ0JpZVhSbFQyWm1jMlYwTENCc1pXNW5kR2dwTzF4dUlDQjlPMXh1ZlNrN0lpd2ljbVZ4ZFdseVpTZ25MaTlmZEhsd1pXUXRZWEp5WVhrbktTZ25WV2x1ZERnbkxDQXhMQ0JtZFc1amRHbHZiaWhwYm1sMEtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJRlZwYm5RNFEyeGhiWEJsWkVGeWNtRjVLR1JoZEdFc0lHSjVkR1ZQWm1aelpYUXNJR3hsYm1kMGFDbDdYRzRnSUNBZ2NtVjBkWEp1SUdsdWFYUW9kR2hwY3l3Z1pHRjBZU3dnWW5sMFpVOW1abk5sZEN3Z2JHVnVaM1JvS1R0Y2JpQWdmVHRjYm4wc0lIUnlkV1VwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQmxZV05vSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxdFpYUm9iMlJ6Snlrb01DbGNiaUFnTENCeVpXUmxabWx1WlNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcFhHNGdJQ3dnYldWMFlTQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldWMFlTY3BYRzRnSUN3Z1lYTnphV2R1SUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdGemMybG5iaWNwWEc0Z0lDd2dkMlZoYXlBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjlzYkdWamRHbHZiaTEzWldGckp5bGNiaUFnTENCcGMwOWlhbVZqZENBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdkbGRGZGxZV3NnSUNBZ0lDQTlJRzFsZEdFdVoyVjBWMlZoYTF4dUlDQXNJR2x6UlhoMFpXNXphV0pzWlNBOUlFOWlhbVZqZEM1cGMwVjRkR1Z1YzJsaWJHVmNiaUFnTENCMWJtTmhkV2RvZEVaeWIzcGxibE4wYjNKbElEMGdkMlZoYXk1MVpuTjBiM0psWEc0Z0lDd2dkRzF3SUNBZ0lDQWdJQ0FnSUQwZ2UzMWNiaUFnTENCSmJuUmxjbTVoYkUxaGNEdGNibHh1ZG1GeUlIZHlZWEJ3WlhJZ1BTQm1kVzVqZEdsdmJpaG5aWFFwZTF4dUlDQnlaWFIxY200Z1puVnVZM1JwYjI0Z1YyVmhhMDFoY0NncGUxeHVJQ0FnSUhKbGRIVnliaUJuWlhRb2RHaHBjeXdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURBZ1B5QmhjbWQxYldWdWRITmJNRjBnT2lCMWJtUmxabWx1WldRcE8xeHVJQ0I5TzF4dWZUdGNibHh1ZG1GeUlHMWxkR2h2WkhNZ1BTQjdYRzRnSUM4dklESXpMak11TXk0eklGZGxZV3ROWVhBdWNISnZkRzkwZVhCbExtZGxkQ2hyWlhrcFhHNGdJR2RsZERvZ1puVnVZM1JwYjI0Z1oyVjBLR3RsZVNsN1hHNGdJQ0FnYVdZb2FYTlBZbXBsWTNRb2EyVjVLU2w3WEc0Z0lDQWdJQ0IyWVhJZ1pHRjBZU0E5SUdkbGRGZGxZV3NvYTJWNUtUdGNiaUFnSUNBZ0lHbG1LR1JoZEdFZ1BUMDlJSFJ5ZFdVcGNtVjBkWEp1SUhWdVkyRjFaMmgwUm5KdmVtVnVVM1J2Y21Vb2RHaHBjeWt1WjJWMEtHdGxlU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdaR0YwWVNBL0lHUmhkR0ZiZEdocGN5NWZhVjBnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dUlDQjlMRnh1SUNBdkx5QXlNeTR6TGpNdU5TQlhaV0ZyVFdGd0xuQnliM1J2ZEhsd1pTNXpaWFFvYTJWNUxDQjJZV3gxWlNsY2JpQWdjMlYwT2lCbWRXNWpkR2x2YmlCelpYUW9hMlY1TENCMllXeDFaU2w3WEc0Z0lDQWdjbVYwZFhKdUlIZGxZV3N1WkdWbUtIUm9hWE1zSUd0bGVTd2dkbUZzZFdVcE8xeHVJQ0I5WEc1OU8xeHVYRzR2THlBeU15NHpJRmRsWVd0TllYQWdUMkpxWldOMGMxeHVkbUZ5SUNSWFpXRnJUV0Z3SUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUwxOWpiMnhzWldOMGFXOXVKeWtvSjFkbFlXdE5ZWEFuTENCM2NtRndjR1Z5TENCdFpYUm9iMlJ6TENCM1pXRnJMQ0IwY25WbExDQjBjblZsS1R0Y2JseHVMeThnU1VVeE1TQlhaV0ZyVFdGd0lHWnliM3BsYmlCclpYbHpJR1pwZUZ4dWFXWW9ibVYzSUNSWFpXRnJUV0Z3S0NrdWMyVjBLQ2hQWW1wbFkzUXVabkpsWlhwbElIeDhJRTlpYW1WamRDa29kRzF3S1N3Z055a3VaMlYwS0hSdGNDa2dJVDBnTnlsN1hHNGdJRWx1ZEdWeWJtRnNUV0Z3SUQwZ2QyVmhheTVuWlhSRGIyNXpkSEoxWTNSdmNpaDNjbUZ3Y0dWeUtUdGNiaUFnWVhOemFXZHVLRWx1ZEdWeWJtRnNUV0Z3TG5CeWIzUnZkSGx3WlN3Z2JXVjBhRzlrY3lrN1hHNGdJRzFsZEdFdVRrVkZSQ0E5SUhSeWRXVTdYRzRnSUdWaFkyZ29XeWRrWld4bGRHVW5MQ0FuYUdGekp5d2dKMmRsZENjc0lDZHpaWFFuWFN3Z1puVnVZM1JwYjI0b2EyVjVLWHRjYmlBZ0lDQjJZWElnY0hKdmRHOGdJRDBnSkZkbFlXdE5ZWEF1Y0hKdmRHOTBlWEJsWEc0Z0lDQWdJQ0FzSUcxbGRHaHZaQ0E5SUhCeWIzUnZXMnRsZVYwN1hHNGdJQ0FnY21Wa1pXWnBibVVvY0hKdmRHOHNJR3RsZVN3Z1puVnVZM1JwYjI0b1lTd2dZaWw3WEc0Z0lDQWdJQ0F2THlCemRHOXlaU0JtY205NlpXNGdiMkpxWldOMGN5QnZiaUJwYm5SbGNtNWhiQ0IzWldGcmJXRndJSE5vYVcxY2JpQWdJQ0FnSUdsbUtHbHpUMkpxWldOMEtHRXBJQ1ltSUNGcGMwVjRkR1Z1YzJsaWJHVW9ZU2twZTF4dUlDQWdJQ0FnSUNCcFppZ2hkR2hwY3k1ZlppbDBhR2x6TGw5bUlEMGdibVYzSUVsdWRHVnlibUZzVFdGd08xeHVJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnZEdocGN5NWZabHRyWlhsZEtHRXNJR0lwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYTJWNUlEMDlJQ2R6WlhRbklEOGdkR2hwY3lBNklISmxjM1ZzZER0Y2JpQWdJQ0FnSUM4dklITjBiM0psSUdGc2JDQjBhR1VnY21WemRDQnZiaUJ1WVhScGRtVWdkMlZoYTIxaGNGeHVJQ0FnSUNBZ2ZTQnlaWFIxY200Z2JXVjBhRzlrTG1OaGJHd29kR2hwY3l3Z1lTd2dZaWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMHBPMXh1ZlNJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQjNaV0ZySUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjlzYkdWamRHbHZiaTEzWldGckp5azdYRzVjYmk4dklESXpMalFnVjJWaGExTmxkQ0JQWW1wbFkzUnpYRzV5WlhGMWFYSmxLQ2N1TDE5amIyeHNaV04wYVc5dUp5a29KMWRsWVd0VFpYUW5MQ0JtZFc1amRHbHZiaWhuWlhRcGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdWMlZoYTFObGRDZ3BleUJ5WlhSMWNtNGdaMlYwS0hSb2FYTXNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUF3SUQ4Z1lYSm5kVzFsYm5Seld6QmRJRG9nZFc1a1pXWnBibVZrS1RzZ2ZUdGNibjBzSUh0Y2JpQWdMeThnTWpNdU5DNHpMakVnVjJWaGExTmxkQzV3Y205MGIzUjVjR1V1WVdSa0tIWmhiSFZsS1Z4dUlDQmhaR1E2SUdaMWJtTjBhVzl1SUdGa1pDaDJZV3gxWlNsN1hHNGdJQ0FnY21WMGRYSnVJSGRsWVdzdVpHVm1LSFJvYVhNc0lIWmhiSFZsTENCMGNuVmxLVHRjYmlBZ2ZWeHVmU3dnZDJWaGF5d2dabUZzYzJVc0lIUnlkV1VwT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOTBZek01TDBGeWNtRjVMbkJ5YjNSdmRIbHdaUzVwYm1Oc2RXUmxjMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKR2x1WTJ4MVpHVnpJRDBnY21WeGRXbHlaU2duTGk5ZllYSnlZWGt0YVc1amJIVmtaWE1uS1NoMGNuVmxLVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBc0lDZEJjbkpoZVNjc0lIdGNiaUFnYVc1amJIVmtaWE02SUdaMWJtTjBhVzl1SUdsdVkyeDFaR1Z6S0dWc0lDOHFMQ0JtY205dFNXNWtaWGdnUFNBd0lDb3ZLWHRjYmlBZ0lDQnlaWFIxY200Z0pHbHVZMngxWkdWektIUm9hWE1zSUdWc0xDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0EvSUdGeVozVnRaVzUwYzFzeFhTQTZJSFZ1WkdWbWFXNWxaQ2s3WEc0Z0lIMWNibjBwTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTloWkdRdGRHOHRkVzV6WTI5d1lXSnNaWE1uS1NnbmFXNWpiSFZrWlhNbktUc2lMQ0l2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNuZGhiR1J5YjI0dmRHTXpPUzF1YjNSbGN5OWliRzlpTDIxaGMzUmxjaTlsY3pZdk1qQXhOQzB3T1M5elpYQjBMVEkxTG0xa0l6VXhNQzFuYkc5aVlXeGhjMkZ3TFdadmNpMWxibkYxWlhWcGJtY3RZUzF0YVdOeWIzUmhjMnRjYm5aaGNpQWtaWGh3YjNKMElDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJRzFwWTNKdmRHRnpheUE5SUhKbGNYVnBjbVVvSnk0dlgyMXBZM0p2ZEdGemF5Y3BLQ2xjYmlBZ0xDQndjbTlqWlhOeklDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1M1d2NtOWpaWE56WEc0Z0lDd2dhWE5PYjJSbElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyOW1KeWtvY0hKdlkyVnpjeWtnUFQwZ0ozQnliMk5sYzNNbk8xeHVYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVSeXdnZTF4dUlDQmhjMkZ3T2lCbWRXNWpkR2x2YmlCaGMyRndLR1p1S1h0Y2JpQWdJQ0IyWVhJZ1pHOXRZV2x1SUQwZ2FYTk9iMlJsSUNZbUlIQnliMk5sYzNNdVpHOXRZV2x1TzF4dUlDQWdJRzFwWTNKdmRHRnpheWhrYjIxaGFXNGdQeUJrYjIxaGFXNHVZbWx1WkNobWJpa2dPaUJtYmlrN1hHNGdJSDFjYm4wcE95SXNJaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5c2FtaGhjbUl2Y0hKdmNHOXpZV3d0YVhNdFpYSnliM0pjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQmpiMllnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5bUp5azdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblJYSnliM0luTENCN1hHNGdJR2x6UlhKeWIzSTZJR1oxYm1OMGFXOXVJR2x6UlhKeWIzSW9hWFFwZTF4dUlDQWdJSEpsZEhWeWJpQmpiMllvYVhRcElEMDlQU0FuUlhKeWIzSW5PMXh1SUNCOVhHNTlLVHNpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZSR0YyYVdSQ2NuVmhiblF2VFdGd0xWTmxkQzV3Y205MGIzUjVjR1V1ZEc5S1UwOU9YRzUyWVhJZ0pHVjRjRzl5ZENBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QWtaWGh3YjNKMExsSXNJQ2ROWVhBbkxDQjdkRzlLVTA5T09pQnlaWEYxYVhKbEtDY3VMMTlqYjJ4c1pXTjBhVzl1TFhSdkxXcHpiMjRuS1NnblRXRndKeWw5S1RzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwYzNRdVoybDBhSFZpTG1OdmJTOUNjbVZ1WkdGdVJXbGphQzgwTWprMFpEVmpNakV5WVRaa01qSTFORGN3TTF4dWRtRnlJQ1JsZUhCdmNuUWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsTXNJQ2ROWVhSb0p5d2dlMXh1SUNCcFlXUmthRG9nWm5WdVkzUnBiMjRnYVdGa1pHZ29lREFzSUhneExDQjVNQ3dnZVRFcGUxeHVJQ0FnSUhaaGNpQWtlREFnUFNCNE1DQStQajRnTUZ4dUlDQWdJQ0FnTENBa2VERWdQU0I0TVNBK1BqNGdNRnh1SUNBZ0lDQWdMQ0FrZVRBZ1BTQjVNQ0ErUGo0Z01EdGNiaUFnSUNCeVpYUjFjbTRnSkhneElDc2dLSGt4SUQ0K1BpQXdLU0FySUNnb0pIZ3dJQ1lnSkhrd0lId2dLQ1I0TUNCOElDUjVNQ2tnSmlCK0tDUjRNQ0FySUNSNU1DQStQajRnTUNrcElENCtQaUF6TVNrZ2ZDQXdPMXh1SUNCOVhHNTlLVHNpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBjM1F1WjJsMGFIVmlMbU52YlM5Q2NtVnVaR0Z1UldsamFDODBNamswWkRWak1qRXlZVFprTWpJMU5EY3dNMXh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UxeHVJQ0JwYlhWc2FEb2dablZ1WTNScGIyNGdhVzExYkdnb2RTd2dkaWw3WEc0Z0lDQWdkbUZ5SUZWSlRsUXhOaUE5SURCNFptWm1abHh1SUNBZ0lDQWdMQ0FrZFNBOUlDdDFYRzRnSUNBZ0lDQXNJQ1IySUQwZ0szWmNiaUFnSUNBZ0lDd2dkVEFnUFNBa2RTQW1JRlZKVGxReE5seHVJQ0FnSUNBZ0xDQjJNQ0E5SUNSMklDWWdWVWxPVkRFMlhHNGdJQ0FnSUNBc0lIVXhJRDBnSkhVZ1BqNGdNVFpjYmlBZ0lDQWdJQ3dnZGpFZ1BTQWtkaUErUGlBeE5seHVJQ0FnSUNBZ0xDQjBJQ0E5SUNoMU1TQXFJSFl3SUQ0K1BpQXdLU0FySUNoMU1DQXFJSFl3SUQ0K1BpQXhOaWs3WEc0Z0lDQWdjbVYwZFhKdUlIVXhJQ29nZGpFZ0t5QW9kQ0ErUGlBeE5pa2dLeUFvS0hVd0lDb2dkakVnUGo0K0lEQXBJQ3NnS0hRZ0ppQlZTVTVVTVRZcElENCtJREUyS1R0Y2JpQWdmVnh1ZlNrN0lpd2lMeThnYUhSMGNITTZMeTluYVhOMExtZHBkR2gxWWk1amIyMHZRbkpsYm1SaGJrVnBZMmd2TkRJNU5HUTFZekl4TW1FMlpESXlOVFEzTUROY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRMQ0FuVFdGMGFDY3NJSHRjYmlBZ2FYTjFZbWc2SUdaMWJtTjBhVzl1SUdsemRXSm9LSGd3TENCNE1Td2dlVEFzSUhreEtYdGNiaUFnSUNCMllYSWdKSGd3SUQwZ2VEQWdQajQrSURCY2JpQWdJQ0FnSUN3Z0pIZ3hJRDBnZURFZ1BqNCtJREJjYmlBZ0lDQWdJQ3dnSkhrd0lEMGdlVEFnUGo0K0lEQTdYRzRnSUNBZ2NtVjBkWEp1SUNSNE1TQXRJQ2g1TVNBK1BqNGdNQ2tnTFNBb0tINGtlREFnSmlBa2VUQWdmQ0IrS0NSNE1DQmVJQ1I1TUNrZ0ppQWtlREFnTFNBa2VUQWdQajQrSURBcElENCtQaUF6TVNrZ2ZDQXdPMXh1SUNCOVhHNTlLVHNpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBjM1F1WjJsMGFIVmlMbU52YlM5Q2NtVnVaR0Z1UldsamFDODBNamswWkRWak1qRXlZVFprTWpJMU5EY3dNMXh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZE5ZWFJvSnl3Z2UxeHVJQ0IxYlhWc2FEb2dablZ1WTNScGIyNGdkVzExYkdnb2RTd2dkaWw3WEc0Z0lDQWdkbUZ5SUZWSlRsUXhOaUE5SURCNFptWm1abHh1SUNBZ0lDQWdMQ0FrZFNBOUlDdDFYRzRnSUNBZ0lDQXNJQ1IySUQwZ0szWmNiaUFnSUNBZ0lDd2dkVEFnUFNBa2RTQW1JRlZKVGxReE5seHVJQ0FnSUNBZ0xDQjJNQ0E5SUNSMklDWWdWVWxPVkRFMlhHNGdJQ0FnSUNBc0lIVXhJRDBnSkhVZ1BqNCtJREUyWEc0Z0lDQWdJQ0FzSUhZeElEMGdKSFlnUGo0K0lERTJYRzRnSUNBZ0lDQXNJSFFnSUQwZ0tIVXhJQ29nZGpBZ1BqNCtJREFwSUNzZ0tIVXdJQ29nZGpBZ1BqNCtJREUyS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkVEVnS2lCMk1TQXJJQ2gwSUQ0K1BpQXhOaWtnS3lBb0tIVXdJQ29nZGpFZ1BqNCtJREFwSUNzZ0tIUWdKaUJWU1U1VU1UWXBJRDQrUGlBeE5pazdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lBa1pYaHdiM0owSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUhSdlQySnFaV04wSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z1lVWjFibU4wYVc5dUlDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZUzFtZFc1amRHbHZiaWNwWEc0Z0lDd2dKR1JsWm1sdVpWQnliM0JsY25SNUlEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlrN1hHNWNiaTh2SUVJdU1pNHlMaklnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVmWDJSbFptbHVaVWRsZEhSbGNsOWZLRkFzSUdkbGRIUmxjaWxjYm5KbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWtnSmlZZ0pHVjRjRzl5ZENna1pYaHdiM0owTGxBZ0t5QnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRabTl5WTJWa0xYQmhiU2NwTENBblQySnFaV04wSnl3Z2UxeHVJQ0JmWDJSbFptbHVaVWRsZEhSbGNsOWZPaUJtZFc1amRHbHZiaUJmWDJSbFptbHVaVWRsZEhSbGNsOWZLRkFzSUdkbGRIUmxjaWw3WEc0Z0lDQWdKR1JsWm1sdVpWQnliM0JsY25SNUxtWW9kRzlQWW1wbFkzUW9kR2hwY3lrc0lGQXNJSHRuWlhRNklHRkdkVzVqZEdsdmJpaG5aWFIwWlhJcExDQmxiblZ0WlhKaFlteGxPaUIwY25WbExDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVjlLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2RHOVBZbXBsWTNRZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0xDQmhSblZ1WTNScGIyNGdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloTFdaMWJtTjBhVzl1SnlsY2JpQWdMQ0FrWkdWbWFXNWxVSEp2Y0dWeWRIa2dQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktUdGNibHh1THk4Z1FpNHlMakl1TXlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTGw5ZlpHVm1hVzVsVTJWMGRHVnlYMThvVUN3Z2MyVjBkR1Z5S1Z4dWNtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NBbUppQWtaWGh3YjNKMEtDUmxlSEJ2Y25RdVVDQXJJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFtYjNKalpXUXRjR0Z0Snlrc0lDZFBZbXBsWTNRbkxDQjdYRzRnSUY5ZlpHVm1hVzVsVTJWMGRHVnlYMTg2SUdaMWJtTjBhVzl1SUY5ZlpHVm1hVzVsVTJWMGRHVnlYMThvVUN3Z2MyVjBkR1Z5S1h0Y2JpQWdJQ0FrWkdWbWFXNWxVSEp2Y0dWeWRIa3VaaWgwYjA5aWFtVmpkQ2gwYUdsektTd2dVQ3dnZTNObGREb2dZVVoxYm1OMGFXOXVLSE5sZEhSbGNpa3NJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNJR052Ym1acFozVnlZV0pzWlRvZ2RISjFaWDBwTzF4dUlDQjlYRzU5S1RzaUxDSXZMeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2ZEdNek9TOXdjbTl3YjNOaGJDMXZZbXBsWTNRdGRtRnNkV1Z6TFdWdWRISnBaWE5jYm5aaGNpQWtaWGh3YjNKMElDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKR1Z1ZEhKcFpYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0ZEc4dFlYSnlZWGtuS1NoMGNuVmxLVHRjYmx4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNc0lDZFBZbXBsWTNRbkxDQjdYRzRnSUdWdWRISnBaWE02SUdaMWJtTjBhVzl1SUdWdWRISnBaWE1vYVhRcGUxeHVJQ0FnSUhKbGRIVnliaUFrWlc1MGNtbGxjeWhwZENrN1hHNGdJSDFjYm4wcE95SXNJaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MFl6TTVMM0J5YjNCdmMyRnNMVzlpYW1WamRDMW5aWFJ2ZDI1d2NtOXdaWEowZVdSbGMyTnlhWEIwYjNKelhHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGVIQnZjblFuS1Z4dUlDQXNJRzkzYmt0bGVYTWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjNkdUxXdGxlWE1uS1Z4dUlDQXNJSFJ2U1U5aWFtVmpkQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXOWlhbVZqZENjcFhHNGdJQ3dnWjA5UVJDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjI5d1pDY3BYRzRnSUN3Z1kzSmxZWFJsVUhKdmNHVnlkSGtnUFNCeVpYRjFhWEpsS0NjdUwxOWpjbVZoZEdVdGNISnZjR1Z5ZEhrbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1zSUNkUFltcGxZM1FuTENCN1hHNGdJR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNuTTZJR1oxYm1OMGFXOXVJR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNuTW9iMkpxWldOMEtYdGNiaUFnSUNCMllYSWdUeUFnSUNBZ0lDQTlJSFJ2U1U5aWFtVmpkQ2h2WW1wbFkzUXBYRzRnSUNBZ0lDQXNJR2RsZEVSbGMyTWdQU0JuVDFCRUxtWmNiaUFnSUNBZ0lDd2dhMlY1Y3lBZ0lDQTlJRzkzYmt0bGVYTW9UeWxjYmlBZ0lDQWdJQ3dnY21WemRXeDBJQ0E5SUh0OVhHNGdJQ0FnSUNBc0lHa2dJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0lDQXNJR3RsZVR0Y2JpQWdJQ0IzYUdsc1pTaHJaWGx6TG14bGJtZDBhQ0ErSUdrcFkzSmxZWFJsVUhKdmNHVnlkSGtvY21WemRXeDBMQ0JyWlhrZ1BTQnJaWGx6VzJrcksxMHNJR2RsZEVSbGMyTW9UeXdnYTJWNUtTazdYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1ZG1GeUlDUmxlSEJ2Y25RZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlY0Y0c5eWRDY3BYRzRnSUN3Z2RHOVBZbXBsWTNRZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YjJKcVpXTjBKeWxjYmlBZ0xDQjBiMUJ5YVcxcGRHbDJaU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxd2NtbHRhWFJwZG1VbktWeHVJQ0FzSUdkbGRGQnliM1J2ZEhsd1pVOW1JQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmNHOG5LVnh1SUNBc0lHZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2lBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0JrSnlrdVpqdGNibHh1THk4Z1FpNHlMakl1TkNCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTGw5ZmJHOXZhM1Z3UjJWMGRHVnlYMThvVUNsY2JuSmxjWFZwY21Vb0p5NHZYMlJsYzJOeWFYQjBiM0p6SnlrZ0ppWWdKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQWdLeUJ5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0Wm05eVkyVmtMWEJoYlNjcExDQW5UMkpxWldOMEp5d2dlMXh1SUNCZlgyeHZiMnQxY0VkbGRIUmxjbDlmT2lCbWRXNWpkR2x2YmlCZlgyeHZiMnQxY0VkbGRIUmxjbDlmS0ZBcGUxeHVJQ0FnSUhaaGNpQlBJRDBnZEc5UFltcGxZM1FvZEdocGN5bGNiaUFnSUNBZ0lDd2dTeUE5SUhSdlVISnBiV2wwYVhabEtGQXNJSFJ5ZFdVcFhHNGdJQ0FnSUNBc0lFUTdYRzRnSUNBZ1pHOGdlMXh1SUNBZ0lDQWdhV1lvUkNBOUlHZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2loUExDQkxLU2x5WlhSMWNtNGdSQzVuWlhRN1hHNGdJQ0FnZlNCM2FHbHNaU2hQSUQwZ1oyVjBVSEp2ZEc5MGVYQmxUMllvVHlrcE8xeHVJQ0I5WEc1OUtUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNTJZWElnSkdWNGNHOXlkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0IwYjA5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXZZbXBsWTNRbktWeHVJQ0FzSUhSdlVISnBiV2wwYVhabElDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMWEJ5YVcxcGRHbDJaU2NwWEc0Z0lDd2daMlYwVUhKdmRHOTBlWEJsVDJZZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R3YnljcFhHNGdJQ3dnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LUzVtTzF4dVhHNHZMeUJDTGpJdU1pNDFJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVYMTlzYjI5cmRYQlRaWFIwWlhKZlh5aFFLVnh1Y21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0FtSmlBa1pYaHdiM0owS0NSbGVIQnZjblF1VUNBcklISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW1iM0pqWldRdGNHRnRKeWtzSUNkUFltcGxZM1FuTENCN1hHNGdJRjlmYkc5dmEzVndVMlYwZEdWeVgxODZJR1oxYm1OMGFXOXVJRjlmYkc5dmEzVndVMlYwZEdWeVgxOG9VQ2w3WEc0Z0lDQWdkbUZ5SUU4Z1BTQjBiMDlpYW1WamRDaDBhR2x6S1Z4dUlDQWdJQ0FnTENCTElEMGdkRzlRY21sdGFYUnBkbVVvVUN3Z2RISjFaU2xjYmlBZ0lDQWdJQ3dnUkR0Y2JpQWdJQ0JrYnlCN1hHNGdJQ0FnSUNCcFppaEVJRDBnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLRThzSUVzcEtYSmxkSFZ5YmlCRUxuTmxkRHRjYmlBZ0lDQjlJSGRvYVd4bEtFOGdQU0JuWlhSUWNtOTBiM1I1Y0dWUFppaFBLU2s3WEc0Z0lIMWNibjBwT3lJc0lpOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzkwWXpNNUwzQnliM0J2YzJGc0xXOWlhbVZqZEMxMllXeDFaWE10Wlc1MGNtbGxjMXh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lDUjJZV3gxWlhNZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRkRzh0WVhKeVlYa25LU2htWVd4elpTazdYRzVjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVUTENBblQySnFaV04wSnl3Z2UxeHVJQ0IyWVd4MVpYTTZJR1oxYm1OMGFXOXVJSFpoYkhWbGN5aHBkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDUjJZV3gxWlhNb2FYUXBPMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmVtVnVjR0Z5YzJsdVp5OWxjeTF2WW5ObGNuWmhZbXhsWEc1MllYSWdKR1Y0Y0c5eWRDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUdkc2IySmhiQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWxjYmlBZ0xDQmpiM0psSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnZjbVVuS1Z4dUlDQXNJRzFwWTNKdmRHRnpheUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiV2xqY205MFlYTnJKeWtvS1Z4dUlDQXNJRTlDVTBWU1ZrRkNURVVnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oyOWljMlZ5ZG1GaWJHVW5LVnh1SUNBc0lHRkdkVzVqZEdsdmJpQWdJRDBnY21WeGRXbHlaU2duTGk5ZllTMW1kVzVqZEdsdmJpY3BYRzRnSUN3Z1lXNVBZbXBsWTNRZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUdGdVNXNXpkR0Z1WTJVZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGFXNXpkR0Z1WTJVbktWeHVJQ0FzSUhKbFpHVm1hVzVsUVd4c0lEMGdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVV0WVd4c0p5bGNiaUFnTENCb2FXUmxJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJocFpHVW5LVnh1SUNBc0lHWnZjazltSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlptOXlMVzltSnlsY2JpQWdMQ0JTUlZSVlVrNGdJQ0FnSUNBOUlHWnZjazltTGxKRlZGVlNUanRjYmx4dWRtRnlJR2RsZEUxbGRHaHZaQ0E5SUdaMWJtTjBhVzl1S0dadUtYdGNiaUFnY21WMGRYSnVJR1p1SUQwOUlHNTFiR3dnUHlCMWJtUmxabWx1WldRZ09pQmhSblZ1WTNScGIyNG9abTRwTzF4dWZUdGNibHh1ZG1GeUlHTnNaV0Z1ZFhCVGRXSnpZM0pwY0hScGIyNGdQU0JtZFc1amRHbHZiaWh6ZFdKelkzSnBjSFJwYjI0cGUxeHVJQ0IyWVhJZ1kyeGxZVzUxY0NBOUlITjFZbk5qY21sd2RHbHZiaTVmWXp0Y2JpQWdhV1lvWTJ4bFlXNTFjQ2w3WEc0Z0lDQWdjM1ZpYzJOeWFYQjBhVzl1TGw5aklEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lHTnNaV0Z1ZFhBb0tUdGNiaUFnZlZ4dWZUdGNibHh1ZG1GeUlITjFZbk5qY21sd2RHbHZia05zYjNObFpDQTlJR1oxYm1OMGFXOXVLSE4xWW5OamNtbHdkR2x2YmlsN1hHNGdJSEpsZEhWeWJpQnpkV0p6WTNKcGNIUnBiMjR1WDI4Z1BUMDlJSFZ1WkdWbWFXNWxaRHRjYm4wN1hHNWNiblpoY2lCamJHOXpaVk4xWW5OamNtbHdkR2x2YmlBOUlHWjFibU4wYVc5dUtITjFZbk5qY21sd2RHbHZiaWw3WEc0Z0lHbG1LQ0Z6ZFdKelkzSnBjSFJwYjI1RGJHOXpaV1FvYzNWaWMyTnlhWEIwYVc5dUtTbDdYRzRnSUNBZ2MzVmljMk55YVhCMGFXOXVMbDl2SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUdOc1pXRnVkWEJUZFdKelkzSnBjSFJwYjI0b2MzVmljMk55YVhCMGFXOXVLVHRjYmlBZ2ZWeHVmVHRjYmx4dWRtRnlJRk4xWW5OamNtbHdkR2x2YmlBOUlHWjFibU4wYVc5dUtHOWljMlZ5ZG1WeUxDQnpkV0p6WTNKcFltVnlLWHRjYmlBZ1lXNVBZbXBsWTNRb2IySnpaWEoyWlhJcE8xeHVJQ0IwYUdsekxsOWpJRDBnZFc1a1pXWnBibVZrTzF4dUlDQjBhR2x6TGw5dklEMGdiMkp6WlhKMlpYSTdYRzRnSUc5aWMyVnlkbVZ5SUQwZ2JtVjNJRk4xWW5OamNtbHdkR2x2Yms5aWMyVnlkbVZ5S0hSb2FYTXBPMXh1SUNCMGNua2dlMXh1SUNBZ0lIWmhjaUJqYkdWaGJuVndJQ0FnSUNBZ1BTQnpkV0p6WTNKcFltVnlLRzlpYzJWeWRtVnlLVnh1SUNBZ0lDQWdMQ0J6ZFdKelkzSnBjSFJwYjI0Z1BTQmpiR1ZoYm5Wd08xeHVJQ0FnSUdsbUtHTnNaV0Z1ZFhBZ0lUMGdiblZzYkNsN1hHNGdJQ0FnSUNCcFppaDBlWEJsYjJZZ1kyeGxZVzUxY0M1MWJuTjFZbk5qY21saVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlsamJHVmhiblZ3SUQwZ1puVnVZM1JwYjI0b0tYc2djM1ZpYzJOeWFYQjBhVzl1TG5WdWMzVmljMk55YVdKbEtDazdJSDA3WEc0Z0lDQWdJQ0JsYkhObElHRkdkVzVqZEdsdmJpaGpiR1ZoYm5Wd0tUdGNiaUFnSUNBZ0lIUm9hWE11WDJNZ1BTQmpiR1ZoYm5Wd08xeHVJQ0FnSUgxY2JpQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQnZZbk5sY25abGNpNWxjbkp2Y2lobEtUdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMGdhV1lvYzNWaWMyTnlhWEIwYVc5dVEyeHZjMlZrS0hSb2FYTXBLV05zWldGdWRYQlRkV0p6WTNKcGNIUnBiMjRvZEdocGN5azdYRzU5TzF4dVhHNVRkV0p6WTNKcGNIUnBiMjR1Y0hKdmRHOTBlWEJsSUQwZ2NtVmtaV1pwYm1WQmJHd29lMzBzSUh0Y2JpQWdkVzV6ZFdKelkzSnBZbVU2SUdaMWJtTjBhVzl1SUhWdWMzVmljMk55YVdKbEtDbDdJR05zYjNObFUzVmljMk55YVhCMGFXOXVLSFJvYVhNcE95QjlYRzU5S1R0Y2JseHVkbUZ5SUZOMVluTmpjbWx3ZEdsdmJrOWljMlZ5ZG1WeUlEMGdablZ1WTNScGIyNG9jM1ZpYzJOeWFYQjBhVzl1S1h0Y2JpQWdkR2hwY3k1ZmN5QTlJSE4xWW5OamNtbHdkR2x2Ymp0Y2JuMDdYRzVjYmxOMVluTmpjbWx3ZEdsdmJrOWljMlZ5ZG1WeUxuQnliM1J2ZEhsd1pTQTlJSEpsWkdWbWFXNWxRV3hzS0h0OUxDQjdYRzRnSUc1bGVIUTZJR1oxYm1OMGFXOXVJRzVsZUhRb2RtRnNkV1VwZTF4dUlDQWdJSFpoY2lCemRXSnpZM0pwY0hScGIyNGdQU0IwYUdsekxsOXpPMXh1SUNBZ0lHbG1LQ0Z6ZFdKelkzSnBjSFJwYjI1RGJHOXpaV1FvYzNWaWMyTnlhWEIwYVc5dUtTbDdYRzRnSUNBZ0lDQjJZWElnYjJKelpYSjJaWElnUFNCemRXSnpZM0pwY0hScGIyNHVYMjg3WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYlNBOUlHZGxkRTFsZEdodlpDaHZZbk5sY25abGNpNXVaWGgwS1R0Y2JpQWdJQ0FnSUNBZ2FXWW9iU2x5WlhSMWNtNGdiUzVqWVd4c0tHOWljMlZ5ZG1WeUxDQjJZV3gxWlNrN1hHNGdJQ0FnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnNiM05sVTNWaWMyTnlhWEIwYVc5dUtITjFZbk5qY21sd2RHbHZiaWs3WEc0Z0lDQWdJQ0FnSUgwZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1pUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdaWEp5YjNJNklHWjFibU4wYVc5dUlHVnljbTl5S0haaGJIVmxLWHRjYmlBZ0lDQjJZWElnYzNWaWMyTnlhWEIwYVc5dUlEMGdkR2hwY3k1ZmN6dGNiaUFnSUNCcFppaHpkV0p6WTNKcGNIUnBiMjVEYkc5elpXUW9jM1ZpYzJOeWFYQjBhVzl1S1NsMGFISnZkeUIyWVd4MVpUdGNiaUFnSUNCMllYSWdiMkp6WlhKMlpYSWdQU0J6ZFdKelkzSnBjSFJwYjI0dVgyODdYRzRnSUNBZ2MzVmljMk55YVhCMGFXOXVMbDl2SUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQjJZWElnYlNBOUlHZGxkRTFsZEdodlpDaHZZbk5sY25abGNpNWxjbkp2Y2lrN1hHNGdJQ0FnSUNCcFppZ2hiU2wwYUhKdmR5QjJZV3gxWlR0Y2JpQWdJQ0FnSUhaaGJIVmxJRDBnYlM1allXeHNLRzlpYzJWeWRtVnlMQ0IyWVd4MVpTazdYRzRnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdOc1pXRnVkWEJUZFdKelkzSnBjSFJwYjI0b2MzVmljMk55YVhCMGFXOXVLVHRjYmlBZ0lDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJR1U3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JqYkdWaGJuVndVM1ZpYzJOeWFYQjBhVzl1S0hOMVluTmpjbWx3ZEdsdmJpazdYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxPMXh1SUNCOUxGeHVJQ0JqYjIxd2JHVjBaVG9nWm5WdVkzUnBiMjRnWTI5dGNHeGxkR1VvZG1Gc2RXVXBlMXh1SUNBZ0lIWmhjaUJ6ZFdKelkzSnBjSFJwYjI0Z1BTQjBhR2x6TGw5ek8xeHVJQ0FnSUdsbUtDRnpkV0p6WTNKcGNIUnBiMjVEYkc5elpXUW9jM1ZpYzJOeWFYQjBhVzl1S1NsN1hHNGdJQ0FnSUNCMllYSWdiMkp6WlhKMlpYSWdQU0J6ZFdKelkzSnBjSFJwYjI0dVgyODdYRzRnSUNBZ0lDQnpkV0p6WTNKcGNIUnBiMjR1WDI4Z1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCMllYSWdiU0E5SUdkbGRFMWxkR2h2WkNodlluTmxjblpsY2k1amIyMXdiR1YwWlNrN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2JTQS9JRzB1WTJGc2JDaHZZbk5sY25abGNpd2dkbUZzZFdVcElEb2dkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0JqYkdWaGJuVndVM1ZpYzJOeWFYQjBhVzl1S0hOMVluTmpjbWx3ZEdsdmJpazdYRzRnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHliM2NnWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmpiR1ZoYm5Wd1UzVmljMk55YVhCMGFXOXVLSE4xWW5OamNtbHdkR2x2YmlrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVJQ0I5WEc1OUtUdGNibHh1ZG1GeUlDUlBZbk5sY25aaFlteGxJRDBnWm5WdVkzUnBiMjRnVDJKelpYSjJZV0pzWlNoemRXSnpZM0pwWW1WeUtYdGNiaUFnWVc1SmJuTjBZVzVqWlNoMGFHbHpMQ0FrVDJKelpYSjJZV0pzWlN3Z0owOWljMlZ5ZG1GaWJHVW5MQ0FuWDJZbktTNWZaaUE5SUdGR2RXNWpkR2x2YmloemRXSnpZM0pwWW1WeUtUdGNibjA3WEc1Y2JuSmxaR1ZtYVc1bFFXeHNLQ1JQWW5ObGNuWmhZbXhsTG5CeWIzUnZkSGx3WlN3Z2UxeHVJQ0J6ZFdKelkzSnBZbVU2SUdaMWJtTjBhVzl1SUhOMVluTmpjbWxpWlNodlluTmxjblpsY2lsN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCVGRXSnpZM0pwY0hScGIyNG9iMkp6WlhKMlpYSXNJSFJvYVhNdVgyWXBPMXh1SUNCOUxGeHVJQ0JtYjNKRllXTm9PaUJtZFc1amRHbHZiaUJtYjNKRllXTm9LR1p1S1h0Y2JpQWdJQ0IyWVhJZ2RHaGhkQ0E5SUhSb2FYTTdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QW9ZMjl5WlM1UWNtOXRhWE5sSUh4OElHZHNiMkpoYkM1UWNtOXRhWE5sS1NobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwZTF4dUlDQWdJQ0FnWVVaMWJtTjBhVzl1S0dadUtUdGNiaUFnSUNBZ0lIWmhjaUJ6ZFdKelkzSnBjSFJwYjI0Z1BTQjBhR0YwTG5OMVluTmpjbWxpWlNoN1hHNGdJQ0FnSUNBZ0lHNWxlSFFnT2lCbWRXNWpkR2x2YmloMllXeDFaU2w3WEc0Z0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbWJpaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENobEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMVluTmpjbWx3ZEdsdmJpNTFibk4xWW5OamNtbGlaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWlhKeWIzSTZJSEpsYW1WamRDeGNiaUFnSUNBZ0lDQWdZMjl0Y0d4bGRHVTZJSEpsYzI5c2RtVmNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNTlLVHRjYmx4dWNtVmtaV1pwYm1WQmJHd29KRTlpYzJWeWRtRmliR1VzSUh0Y2JpQWdabkp2YlRvZ1puVnVZM1JwYjI0Z1puSnZiU2g0S1h0Y2JpQWdJQ0IyWVhJZ1F5QTlJSFI1Y0dWdlppQjBhR2x6SUQwOVBTQW5ablZ1WTNScGIyNG5JRDhnZEdocGN5QTZJQ1JQWW5ObGNuWmhZbXhsTzF4dUlDQWdJSFpoY2lCdFpYUm9iMlFnUFNCblpYUk5aWFJvYjJRb1lXNVBZbXBsWTNRb2VDbGJUMEpUUlZKV1FVSk1SVjBwTzF4dUlDQWdJR2xtS0cxbGRHaHZaQ2w3WEc0Z0lDQWdJQ0IyWVhJZ2IySnpaWEoyWVdKc1pTQTlJR0Z1VDJKcVpXTjBLRzFsZEdodlpDNWpZV3hzS0hncEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdlluTmxjblpoWW14bExtTnZibk4wY25WamRHOXlJRDA5UFNCRElEOGdiMkp6WlhKMllXSnNaU0E2SUc1bGR5QkRLR1oxYm1OMGFXOXVLRzlpYzJWeWRtVnlLWHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzlpYzJWeWRtRmliR1V1YzNWaWMyTnlhV0psS0c5aWMyVnlkbVZ5S1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUVNb1puVnVZM1JwYjI0b2IySnpaWEoyWlhJcGUxeHVJQ0FnSUNBZ2RtRnlJR1J2Ym1VZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUcxcFkzSnZkR0Z6YXlobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ0lDQnBaaWdoWkc5dVpTbDdYRzRnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUtHWnZjazltS0hnc0lHWmhiSE5sTENCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHOWljMlZ5ZG1WeUxtNWxlSFFvYVhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppaGtiMjVsS1hKbGRIVnliaUJTUlZSVlVrNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtTQTlQVDBnVWtWVVZWSk9LWEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWkc5dVpTbDBhSEp2ZHlCbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYjJKelpYSjJaWEl1WlhKeWIzSW9aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdmU0J2WW5ObGNuWmxjaTVqYjIxd2JHVjBaU2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlncGV5QmtiMjVsSUQwZ2RISjFaVHNnZlR0Y2JpQWdJQ0I5S1R0Y2JpQWdmU3hjYmlBZ2IyWTZJR1oxYm1OMGFXOXVJRzltS0NsN1hHNGdJQ0FnWm05eUtIWmhjaUJwSUQwZ01Dd2diQ0E5SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dzSUdsMFpXMXpJRDBnUVhKeVlYa29iQ2s3SUdrZ1BDQnNPeWxwZEdWdGMxdHBYU0E5SUdGeVozVnRaVzUwYzF0cEt5dGRPMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dLSFI1Y0dWdlppQjBhR2x6SUQwOVBTQW5ablZ1WTNScGIyNG5JRDhnZEdocGN5QTZJQ1JQWW5ObGNuWmhZbXhsS1NobWRXNWpkR2x2YmlodlluTmxjblpsY2lsN1hHNGdJQ0FnSUNCMllYSWdaRzl1WlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnYldsamNtOTBZWE5yS0daMWJtTjBhVzl1S0NsN1hHNGdJQ0FnSUNBZ0lHbG1LQ0ZrYjI1bEtYdGNiaUFnSUNBZ0lDQWdJQ0JtYjNJb2RtRnlJR2tnUFNBd095QnBJRHdnYVhSbGJYTXViR1Z1WjNSb095QXJLMmtwZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiMkp6WlhKMlpYSXVibVY0ZENocGRHVnRjMXRwWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloa2IyNWxLWEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0I5SUc5aWMyVnlkbVZ5TG1OdmJYQnNaWFJsS0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtDbDdJR1J2Ym1VZ1BTQjBjblZsT3lCOU8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OUtUdGNibHh1YUdsa1pTZ2tUMkp6WlhKMllXSnNaUzV3Y205MGIzUjVjR1VzSUU5Q1UwVlNWa0ZDVEVVc0lHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQjBhR2x6T3lCOUtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMa2NzSUh0UFluTmxjblpoWW14bE9pQWtUMkp6WlhKMllXSnNaWDBwTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTl6WlhRdGMzQmxZMmxsY3ljcEtDZFBZbk5sY25aaFlteGxKeWs3SWl3aWRtRnlJRzFsZEdGa1lYUmhJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhaR0YwWVNjcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z2RHOU5aWFJoUzJWNUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHMWxkR0ZrWVhSaExtdGxlVnh1SUNBc0lHOXlaR2x1WVhKNVJHVm1hVzVsVDNkdVRXVjBZV1JoZEdFZ1BTQnRaWFJoWkdGMFlTNXpaWFE3WEc1Y2JtMWxkR0ZrWVhSaExtVjRjQ2g3WkdWbWFXNWxUV1YwWVdSaGRHRTZJR1oxYm1OMGFXOXVJR1JsWm1sdVpVMWxkR0ZrWVhSaEtHMWxkR0ZrWVhSaFMyVjVMQ0J0WlhSaFpHRjBZVlpoYkhWbExDQjBZWEpuWlhRc0lIUmhjbWRsZEV0bGVTbDdYRzRnSUc5eVpHbHVZWEo1UkdWbWFXNWxUM2R1VFdWMFlXUmhkR0VvYldWMFlXUmhkR0ZMWlhrc0lHMWxkR0ZrWVhSaFZtRnNkV1VzSUdGdVQySnFaV04wS0hSaGNtZGxkQ2tzSUhSdlRXVjBZVXRsZVNoMFlYSm5aWFJMWlhrcEtUdGNibjE5S1RzaUxDSjJZWElnYldWMFlXUmhkR0VnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxbGRHRmtZWFJoSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0IwYjAxbGRHRkxaWGtnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdiV1YwWVdSaGRHRXVhMlY1WEc0Z0lDd2daMlYwVDNKRGNtVmhkR1ZOWlhSaFpHRjBZVTFoY0NBOUlHMWxkR0ZrWVhSaExtMWhjRnh1SUNBc0lITjBiM0psSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCdFpYUmhaR0YwWVM1emRHOXlaVHRjYmx4dWJXVjBZV1JoZEdFdVpYaHdLSHRrWld4bGRHVk5aWFJoWkdGMFlUb2dablZ1WTNScGIyNGdaR1ZzWlhSbFRXVjBZV1JoZEdFb2JXVjBZV1JoZEdGTFpYa3NJSFJoY21kbGRDQXZLaXdnZEdGeVoyVjBTMlY1SUNvdktYdGNiaUFnZG1GeUlIUmhjbWRsZEV0bGVTQWdJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E4SURNZ1B5QjFibVJsWm1sdVpXUWdPaUIwYjAxbGRHRkxaWGtvWVhKbmRXMWxiblJ6V3pKZEtWeHVJQ0FnSUN3Z2JXVjBZV1JoZEdGTllYQWdQU0JuWlhSUGNrTnlaV0YwWlUxbGRHRmtZWFJoVFdGd0tHRnVUMkpxWldOMEtIUmhjbWRsZENrc0lIUmhjbWRsZEV0bGVTd2dabUZzYzJVcE8xeHVJQ0JwWmlodFpYUmhaR0YwWVUxaGNDQTlQVDBnZFc1a1pXWnBibVZrSUh4OElDRnRaWFJoWkdGMFlVMWhjRnNuWkdWc1pYUmxKMTBvYldWMFlXUmhkR0ZMWlhrcEtYSmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2FXWW9iV1YwWVdSaGRHRk5ZWEF1YzJsNlpTbHlaWFIxY200Z2RISjFaVHRjYmlBZ2RtRnlJSFJoY21kbGRFMWxkR0ZrWVhSaElEMGdjM1J2Y21VdVoyVjBLSFJoY21kbGRDazdYRzRnSUhSaGNtZGxkRTFsZEdGa1lYUmhXeWRrWld4bGRHVW5YU2gwWVhKblpYUkxaWGtwTzF4dUlDQnlaWFIxY200Z0lTRjBZWEpuWlhSTlpYUmhaR0YwWVM1emFYcGxJSHg4SUhOMGIzSmxXeWRrWld4bGRHVW5YU2gwWVhKblpYUXBPMXh1ZlgwcE95SXNJblpoY2lCVFpYUWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlpYTTJMbk5sZENjcFhHNGdJQ3dnWm5KdmJTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGNuSmhlUzFtY205dExXbDBaWEpoWW14bEp5bGNiaUFnTENCdFpYUmhaR0YwWVNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWxkR0ZrWVhSaEp5bGNiaUFnTENCaGJrOWlhbVZqZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BYRzRnSUN3Z1oyVjBVSEp2ZEc5MGVYQmxUMllnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFozQnZKeWxjYmlBZ0xDQnZjbVJwYm1GeWVVOTNiazFsZEdGa1lYUmhTMlY1Y3lBOUlHMWxkR0ZrWVhSaExtdGxlWE5jYmlBZ0xDQjBiMDFsZEdGTFpYa2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHMWxkR0ZrWVhSaExtdGxlVHRjYmx4dWRtRnlJRzl5WkdsdVlYSjVUV1YwWVdSaGRHRkxaWGx6SUQwZ1puVnVZM1JwYjI0b1R5d2dVQ2w3WEc0Z0lIWmhjaUJ2UzJWNWN5QWdQU0J2Y21ScGJtRnllVTkzYmsxbGRHRmtZWFJoUzJWNWN5aFBMQ0JRS1Z4dUlDQWdJQ3dnY0dGeVpXNTBJRDBnWjJWMFVISnZkRzkwZVhCbFQyWW9UeWs3WEc0Z0lHbG1LSEJoY21WdWRDQTlQVDBnYm5Wc2JDbHlaWFIxY200Z2IwdGxlWE03WEc0Z0lIWmhjaUJ3UzJWNWN5QWdQU0J2Y21ScGJtRnllVTFsZEdGa1lYUmhTMlY1Y3lod1lYSmxiblFzSUZBcE8xeHVJQ0J5WlhSMWNtNGdjRXRsZVhNdWJHVnVaM1JvSUQ4Z2IwdGxlWE11YkdWdVozUm9JRDhnWm5KdmJTaHVaWGNnVTJWMEtHOUxaWGx6TG1OdmJtTmhkQ2h3UzJWNWN5a3BLU0E2SUhCTFpYbHpJRG9nYjB0bGVYTTdYRzU5TzF4dVhHNXRaWFJoWkdGMFlTNWxlSEFvZTJkbGRFMWxkR0ZrWVhSaFMyVjVjem9nWm5WdVkzUnBiMjRnWjJWMFRXVjBZV1JoZEdGTFpYbHpLSFJoY21kbGRDQXZLaXdnZEdGeVoyVjBTMlY1SUNvdktYdGNiaUFnY21WMGRYSnVJRzl5WkdsdVlYSjVUV1YwWVdSaGRHRkxaWGx6S0dGdVQySnFaV04wS0hSaGNtZGxkQ2tzSUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUENBeUlEOGdkVzVrWldacGJtVmtJRG9nZEc5TlpYUmhTMlY1S0dGeVozVnRaVzUwYzFzeFhTa3BPMXh1ZlgwcE95SXNJblpoY2lCdFpYUmhaR0YwWVNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmJXVjBZV1JoZEdFbktWeHVJQ0FzSUdGdVQySnFaV04wSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5aGJpMXZZbXBsWTNRbktWeHVJQ0FzSUdkbGRGQnliM1J2ZEhsd1pVOW1JQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WjNCdkp5bGNiaUFnTENCdmNtUnBibUZ5ZVVoaGMwOTNiazFsZEdGa1lYUmhJRDBnYldWMFlXUmhkR0V1YUdGelhHNGdJQ3dnYjNKa2FXNWhjbmxIWlhSUGQyNU5aWFJoWkdGMFlTQTlJRzFsZEdGa1lYUmhMbWRsZEZ4dUlDQXNJSFJ2VFdWMFlVdGxlU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnRaWFJoWkdGMFlTNXJaWGs3WEc1Y2JuWmhjaUJ2Y21ScGJtRnllVWRsZEUxbGRHRmtZWFJoSUQwZ1puVnVZM1JwYjI0b1RXVjBZV1JoZEdGTFpYa3NJRThzSUZBcGUxeHVJQ0IyWVhJZ2FHRnpUM2R1SUQwZ2IzSmthVzVoY25sSVlYTlBkMjVOWlhSaFpHRjBZU2hOWlhSaFpHRjBZVXRsZVN3Z1R5d2dVQ2s3WEc0Z0lHbG1LR2hoYzA5M2JpbHlaWFIxY200Z2IzSmthVzVoY25sSFpYUlBkMjVOWlhSaFpHRjBZU2hOWlhSaFpHRjBZVXRsZVN3Z1R5d2dVQ2s3WEc0Z0lIWmhjaUJ3WVhKbGJuUWdQU0JuWlhSUWNtOTBiM1I1Y0dWUFppaFBLVHRjYmlBZ2NtVjBkWEp1SUhCaGNtVnVkQ0FoUFQwZ2JuVnNiQ0EvSUc5eVpHbHVZWEo1UjJWMFRXVjBZV1JoZEdFb1RXVjBZV1JoZEdGTFpYa3NJSEJoY21WdWRDd2dVQ2tnT2lCMWJtUmxabWx1WldRN1hHNTlPMXh1WEc1dFpYUmhaR0YwWVM1bGVIQW9lMmRsZEUxbGRHRmtZWFJoT2lCbWRXNWpkR2x2YmlCblpYUk5aWFJoWkdGMFlTaHRaWFJoWkdGMFlVdGxlU3dnZEdGeVoyVjBJQzhxTENCMFlYSm5aWFJMWlhrZ0tpOHBlMXh1SUNCeVpYUjFjbTRnYjNKa2FXNWhjbmxIWlhSTlpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2dZVzVQWW1wbFkzUW9kR0Z5WjJWMEtTd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQThJRE1nUHlCMWJtUmxabWx1WldRZ09pQjBiMDFsZEdGTFpYa29ZWEpuZFcxbGJuUnpXekpkS1NrN1hHNTlmU2s3SWl3aWRtRnlJRzFsZEdGa1lYUmhJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldWMFlXUmhkR0VuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0J2Y21ScGJtRnllVTkzYmsxbGRHRmtZWFJoUzJWNWN5QTlJRzFsZEdGa1lYUmhMbXRsZVhOY2JpQWdMQ0IwYjAxbGRHRkxaWGtnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRzFsZEdGa1lYUmhMbXRsZVR0Y2JseHViV1YwWVdSaGRHRXVaWGh3S0h0blpYUlBkMjVOWlhSaFpHRjBZVXRsZVhNNklHWjFibU4wYVc5dUlHZGxkRTkzYmsxbGRHRmtZWFJoUzJWNWN5aDBZWEpuWlhRZ0x5b3NJSFJoY21kbGRFdGxlU0FxTHlsN1hHNGdJSEpsZEhWeWJpQnZjbVJwYm1GeWVVOTNiazFsZEdGa1lYUmhTMlY1Y3loaGJrOWlhbVZqZENoMFlYSm5aWFFwTENCaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUR3Z01pQS9JSFZ1WkdWbWFXNWxaQ0E2SUhSdlRXVjBZVXRsZVNoaGNtZDFiV1Z1ZEhOYk1WMHBLVHRjYm4xOUtUc2lMQ0oyWVhJZ2JXVjBZV1JoZEdFZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyMWxkR0ZrWVhSaEp5bGNiaUFnTENCaGJrOWlhbVZqZENBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCdmNtUnBibUZ5ZVVkbGRFOTNiazFsZEdGa1lYUmhJRDBnYldWMFlXUmhkR0V1WjJWMFhHNGdJQ3dnZEc5TlpYUmhTMlY1SUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRzFsZEdGa1lYUmhMbXRsZVR0Y2JseHViV1YwWVdSaGRHRXVaWGh3S0h0blpYUlBkMjVOWlhSaFpHRjBZVG9nWm5WdVkzUnBiMjRnWjJWMFQzZHVUV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUhSaGNtZGxkQ0F2S2l3Z2RHRnlaMlYwUzJWNUlDb3ZLWHRjYmlBZ2NtVjBkWEp1SUc5eVpHbHVZWEo1UjJWMFQzZHVUV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUdGdVQySnFaV04wS0hSaGNtZGxkQ2xjYmlBZ0lDQXNJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQQ0F6SUQ4Z2RXNWtaV1pwYm1Wa0lEb2dkRzlOWlhSaFMyVjVLR0Z5WjNWdFpXNTBjMXN5WFNrcE8xeHVmWDBwT3lJc0luWmhjaUJ0WlhSaFpHRjBZU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYldWMFlXUmhkR0VuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJR2RsZEZCeWIzUnZkSGx3WlU5bUlDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaM0J2SnlsY2JpQWdMQ0J2Y21ScGJtRnllVWhoYzA5M2JrMWxkR0ZrWVhSaElEMGdiV1YwWVdSaGRHRXVhR0Z6WEc0Z0lDd2dkRzlOWlhSaFMyVjVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHMWxkR0ZrWVhSaExtdGxlVHRjYmx4dWRtRnlJRzl5WkdsdVlYSjVTR0Z6VFdWMFlXUmhkR0VnUFNCbWRXNWpkR2x2YmloTlpYUmhaR0YwWVV0bGVTd2dUeXdnVUNsN1hHNGdJSFpoY2lCb1lYTlBkMjRnUFNCdmNtUnBibUZ5ZVVoaGMwOTNiazFsZEdGa1lYUmhLRTFsZEdGa1lYUmhTMlY1TENCUExDQlFLVHRjYmlBZ2FXWW9hR0Z6VDNkdUtYSmxkSFZ5YmlCMGNuVmxPMXh1SUNCMllYSWdjR0Z5Wlc1MElEMGdaMlYwVUhKdmRHOTBlWEJsVDJZb1R5azdYRzRnSUhKbGRIVnliaUJ3WVhKbGJuUWdJVDA5SUc1MWJHd2dQeUJ2Y21ScGJtRnllVWhoYzAxbGRHRmtZWFJoS0UxbGRHRmtZWFJoUzJWNUxDQndZWEpsYm5Rc0lGQXBJRG9nWm1Gc2MyVTdYRzU5TzF4dVhHNXRaWFJoWkdGMFlTNWxlSEFvZTJoaGMwMWxkR0ZrWVhSaE9pQm1kVzVqZEdsdmJpQm9ZWE5OWlhSaFpHRjBZU2h0WlhSaFpHRjBZVXRsZVN3Z2RHRnlaMlYwSUM4cUxDQjBZWEpuWlhSTFpYa2dLaThwZTF4dUlDQnlaWFIxY200Z2IzSmthVzVoY25sSVlYTk5aWFJoWkdGMFlTaHRaWFJoWkdGMFlVdGxlU3dnWVc1UFltcGxZM1FvZEdGeVoyVjBLU3dnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E4SURNZ1B5QjFibVJsWm1sdVpXUWdPaUIwYjAxbGRHRkxaWGtvWVhKbmRXMWxiblJ6V3pKZEtTazdYRzU5ZlNrN0lpd2lkbUZ5SUcxbGRHRmtZWFJoSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dFpYUmhaR0YwWVNjcFhHNGdJQ3dnWVc1UFltcGxZM1FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnYjNKa2FXNWhjbmxJWVhOUGQyNU5aWFJoWkdGMFlTQTlJRzFsZEdGa1lYUmhMbWhoYzF4dUlDQXNJSFJ2VFdWMFlVdGxlU0FnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnRaWFJoWkdGMFlTNXJaWGs3WEc1Y2JtMWxkR0ZrWVhSaExtVjRjQ2g3YUdGelQzZHVUV1YwWVdSaGRHRTZJR1oxYm1OMGFXOXVJR2hoYzA5M2JrMWxkR0ZrWVhSaEtHMWxkR0ZrWVhSaFMyVjVMQ0IwWVhKblpYUWdMeW9zSUhSaGNtZGxkRXRsZVNBcUx5bDdYRzRnSUhKbGRIVnliaUJ2Y21ScGJtRnllVWhoYzA5M2JrMWxkR0ZrWVhSaEtHMWxkR0ZrWVhSaFMyVjVMQ0JoYms5aWFtVmpkQ2gwWVhKblpYUXBYRzRnSUNBZ0xDQmhjbWQxYldWdWRITXViR1Z1WjNSb0lEd2dNeUEvSUhWdVpHVm1hVzVsWkNBNklIUnZUV1YwWVV0bGVTaGhjbWQxYldWdWRITmJNbDBwS1R0Y2JuMTlLVHNpTENKMllYSWdiV1YwWVdSaGRHRWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDIxbGRHRmtZWFJoSnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCaFJuVnVZM1JwYjI0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZUzFtZFc1amRHbHZiaWNwWEc0Z0lDd2dkRzlOWlhSaFMyVjVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRzFsZEdGa1lYUmhMbXRsZVZ4dUlDQXNJRzl5WkdsdVlYSjVSR1ZtYVc1bFQzZHVUV1YwWVdSaGRHRWdQU0J0WlhSaFpHRjBZUzV6WlhRN1hHNWNibTFsZEdGa1lYUmhMbVY0Y0NoN2JXVjBZV1JoZEdFNklHWjFibU4wYVc5dUlHMWxkR0ZrWVhSaEtHMWxkR0ZrWVhSaFMyVjVMQ0J0WlhSaFpHRjBZVlpoYkhWbEtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR1JsWTI5eVlYUnZjaWgwWVhKblpYUXNJSFJoY21kbGRFdGxlU2w3WEc0Z0lDQWdiM0prYVc1aGNubEVaV1pwYm1WUGQyNU5aWFJoWkdGMFlTaGNiaUFnSUNBZ0lHMWxkR0ZrWVhSaFMyVjVMQ0J0WlhSaFpHRjBZVlpoYkhWbExGeHVJQ0FnSUNBZ0tIUmhjbWRsZEV0bGVTQWhQVDBnZFc1a1pXWnBibVZrSUQ4Z1lXNVBZbXBsWTNRZ09pQmhSblZ1WTNScGIyNHBLSFJoY21kbGRDa3NYRzRnSUNBZ0lDQjBiMDFsZEdGTFpYa29kR0Z5WjJWMFMyVjVLVnh1SUNBZ0lDazdYRzRnSUgwN1hHNTlmU2s3SWl3aUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMFJoZG1sa1FuSjFZVzUwTDAxaGNDMVRaWFF1Y0hKdmRHOTBlWEJsTG5SdlNsTlBUbHh1ZG1GeUlDUmxlSEJ2Y25RZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1UUlDc2dKR1Y0Y0c5eWRDNVNMQ0FuVTJWMEp5d2dlM1J2U2xOUFRqb2djbVZ4ZFdseVpTZ25MaTlmWTI5c2JHVmpkR2x2YmkxMGJ5MXFjMjl1Snlrb0oxTmxkQ2NwZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMjFoZEdocFlYTmllVzVsYm5NdlUzUnlhVzVuTG5CeWIzUnZkSGx3WlM1aGRGeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktWeHVJQ0FzSUNSaGRDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXpkSEpwYm1jdFlYUW5LU2gwY25WbEtUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFzSUNkVGRISnBibWNuTENCN1hHNGdJR0YwT2lCbWRXNWpkR2x2YmlCaGRDaHdiM01wZTF4dUlDQWdJSEpsZEhWeWJpQWtZWFFvZEdocGN5d2djRzl6S1R0Y2JpQWdmVnh1ZlNrN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dUx5OGdhSFIwY0hNNkx5OTBZek01TG1kcGRHaDFZaTVwYnk5VGRISnBibWN1Y0hKdmRHOTBlWEJsTG0xaGRHTm9RV3hzTDF4dWRtRnlJQ1JsZUhCdmNuUWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCa1pXWnBibVZrSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJSbFptbHVaV1FuS1Z4dUlDQXNJSFJ2VEdWdVozUm9JQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YkdWdVozUm9KeWxjYmlBZ0xDQnBjMUpsWjBWNGNDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybHpMWEpsWjJWNGNDY3BYRzRnSUN3Z1oyVjBSbXhoWjNNZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bWJHRm5jeWNwWEc0Z0lDd2dVbVZuUlhod1VISnZkRzhnUFNCU1pXZEZlSEF1Y0hKdmRHOTBlWEJsTzF4dVhHNTJZWElnSkZKbFowVjRjRk4wY21sdVowbDBaWEpoZEc5eUlEMGdablZ1WTNScGIyNG9jbVZuWlhod0xDQnpkSEpwYm1jcGUxeHVJQ0IwYUdsekxsOXlJRDBnY21WblpYaHdPMXh1SUNCMGFHbHpMbDl6SUQwZ2MzUnlhVzVuTzF4dWZUdGNibHh1Y21WeGRXbHlaU2duTGk5ZmFYUmxjaTFqY21WaGRHVW5LU2drVW1WblJYaHdVM1J5YVc1blNYUmxjbUYwYjNJc0lDZFNaV2RGZUhBZ1UzUnlhVzVuSnl3Z1puVnVZM1JwYjI0Z2JtVjRkQ2dwZTF4dUlDQjJZWElnYldGMFkyZ2dQU0IwYUdsekxsOXlMbVY0WldNb2RHaHBjeTVmY3lrN1hHNGdJSEpsZEhWeWJpQjdkbUZzZFdVNklHMWhkR05vTENCa2IyNWxPaUJ0WVhSamFDQTlQVDBnYm5Wc2JIMDdYRzU5S1R0Y2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExsQXNJQ2RUZEhKcGJtY25MQ0I3WEc0Z0lHMWhkR05vUVd4c09pQm1kVzVqZEdsdmJpQnRZWFJqYUVGc2JDaHlaV2RsZUhBcGUxeHVJQ0FnSUdSbFptbHVaV1FvZEdocGN5azdYRzRnSUNBZ2FXWW9JV2x6VW1WblJYaHdLSEpsWjJWNGNDa3BkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtISmxaMlY0Y0NBcklDY2dhWE1nYm05MElHRWdjbVZuWlhod0lTY3BPMXh1SUNBZ0lIWmhjaUJUSUNBZ0lDQTlJRk4wY21sdVp5aDBhR2x6S1Z4dUlDQWdJQ0FnTENCbWJHRm5jeUE5SUNkbWJHRm5jeWNnYVc0Z1VtVm5SWGh3VUhKdmRHOGdQeUJUZEhKcGJtY29jbVZuWlhod0xtWnNZV2R6S1NBNklHZGxkRVpzWVdkekxtTmhiR3dvY21WblpYaHdLVnh1SUNBZ0lDQWdMQ0J5ZUNBZ0lDQTlJRzVsZHlCU1pXZEZlSEFvY21WblpYaHdMbk52ZFhKalpTd2dmbVpzWVdkekxtbHVaR1Y0VDJZb0oyY25LU0EvSUdac1lXZHpJRG9nSjJjbklDc2dabXhoWjNNcE8xeHVJQ0FnSUhKNExteGhjM1JKYm1SbGVDQTlJSFJ2VEdWdVozUm9LSEpsWjJWNGNDNXNZWE4wU1c1a1pYZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dKRkpsWjBWNGNGTjBjbWx1WjBsMFpYSmhkRzl5S0hKNExDQlRLVHRjYmlBZ2ZWeHVmU2s3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzUmpNemt2Y0hKdmNHOXpZV3d0YzNSeWFXNW5MWEJoWkMxemRHRnlkQzFsYm1SY2JuWmhjaUFrWlhod2IzSjBJRDBnY21WeGRXbHlaU2duTGk5ZlpYaHdiM0owSnlsY2JpQWdMQ0FrY0dGa0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFhCaFpDY3BPMXh1WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VUN3Z0oxTjBjbWx1Wnljc0lIdGNiaUFnY0dGa1JXNWtPaUJtZFc1amRHbHZiaUJ3WVdSRmJtUW9iV0Y0VEdWdVozUm9JQzhxTENCbWFXeHNVM1J5YVc1bklEMGdKeUFuSUNvdktYdGNiaUFnSUNCeVpYUjFjbTRnSkhCaFpDaDBhR2x6TENCdFlYaE1aVzVuZEdnc0lHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkVzVrWldacGJtVmtMQ0JtWVd4elpTazdYRzRnSUgxY2JuMHBPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5MFl6TTVMM0J5YjNCdmMyRnNMWE4wY21sdVp5MXdZV1F0YzNSaGNuUXRaVzVrWEc1MllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0Z0lDd2dKSEJoWkNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOMGNtbHVaeTF3WVdRbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbEFzSUNkVGRISnBibWNuTENCN1hHNGdJSEJoWkZOMFlYSjBPaUJtZFc1amRHbHZiaUJ3WVdSVGRHRnlkQ2h0WVhoTVpXNW5kR2dnTHlvc0lHWnBiR3hUZEhKcGJtY2dQU0FuSUNjZ0tpOHBlMXh1SUNBZ0lISmxkSFZ5YmlBa2NHRmtLSFJvYVhNc0lHMWhlRXhsYm1kMGFDd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVnUHlCaGNtZDFiV1Z1ZEhOYk1WMGdPaUIxYm1SbFptbHVaV1FzSUhSeWRXVXBPMXh1SUNCOVhHNTlLVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzR2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmMyVmliV0Z5YTJKaFoyVXZaV050WVhOamNtbHdkQzF6ZEhKcGJtY3RiR1ZtZEMxeWFXZG9kQzEwY21sdFhHNXlaWEYxYVhKbEtDY3VMMTl6ZEhKcGJtY3RkSEpwYlNjcEtDZDBjbWx0VEdWbWRDY3NJR1oxYm1OMGFXOXVLQ1IwY21sdEtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJSFJ5YVcxTVpXWjBLQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDUjBjbWx0S0hSb2FYTXNJREVwTzF4dUlDQjlPMXh1ZlN3Z0ozUnlhVzFUZEdGeWRDY3BPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiaTh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5elpXSnRZWEpyWW1GblpTOWxZMjFoYzJOeWFYQjBMWE4wY21sdVp5MXNaV1owTFhKcFoyaDBMWFJ5YVcxY2JuSmxjWFZwY21Vb0p5NHZYM04wY21sdVp5MTBjbWx0Snlrb0ozUnlhVzFTYVdkb2RDY3NJR1oxYm1OMGFXOXVLQ1IwY21sdEtYdGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJSFJ5YVcxU2FXZG9kQ2dwZTF4dUlDQWdJSEpsZEhWeWJpQWtkSEpwYlNoMGFHbHpMQ0F5S1R0Y2JpQWdmVHRjYm4wc0lDZDBjbWx0Ulc1a0p5azdJaXdpTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyeHFhR0Z5WWk5d2NtOXdiM05oYkMxbmJHOWlZV3hjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5VM2x6ZEdWdEp5d2dlMmRzYjJKaGJEb2djbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWw5S1RzaUxDSjJZWElnSkdsMFpYSmhkRzl5Y3lBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WlhNMkxtRnljbUY1TG1sMFpYSmhkRzl5SnlsY2JpQWdMQ0J5WldSbFptbHVaU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmY21Wa1pXWnBibVVuS1Z4dUlDQXNJR2RzYjJKaGJDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNtRjBiM0p6SnlsY2JpQWdMQ0IzYTNNZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5bGNiaUFnTENCSlZFVlNRVlJQVWlBZ0lDQWdJRDBnZDJ0ektDZHBkR1Z5WVhSdmNpY3BYRzRnSUN3Z1ZFOWZVMVJTU1U1SFgxUkJSeUE5SUhkcmN5Z25kRzlUZEhKcGJtZFVZV2NuS1Z4dUlDQXNJRUZ5Y21GNVZtRnNkV1Z6SUNBZ1BTQkpkR1Z5WVhSdmNuTXVRWEp5WVhrN1hHNWNibVp2Y2loMllYSWdZMjlzYkdWamRHbHZibk1nUFNCYkowNXZaR1ZNYVhOMEp5d2dKMFJQVFZSdmEyVnVUR2x6ZENjc0lDZE5aV1JwWVV4cGMzUW5MQ0FuVTNSNWJHVlRhR1ZsZEV4cGMzUW5MQ0FuUTFOVFVuVnNaVXhwYzNRblhTd2dhU0E5SURBN0lHa2dQQ0ExT3lCcEt5c3BlMXh1SUNCMllYSWdUa0ZOUlNBZ0lDQWdJQ0E5SUdOdmJHeGxZM1JwYjI1elcybGRYRzRnSUNBZ0xDQkRiMnhzWldOMGFXOXVJRDBnWjJ4dlltRnNXMDVCVFVWZFhHNGdJQ0FnTENCd2NtOTBieUFnSUNBZ0lEMGdRMjlzYkdWamRHbHZiaUFtSmlCRGIyeHNaV04wYVc5dUxuQnliM1J2ZEhsd1pWeHVJQ0FnSUN3Z2EyVjVPMXh1SUNCcFppaHdjbTkwYnlsN1hHNGdJQ0FnYVdZb0lYQnliM1J2VzBsVVJWSkJWRTlTWFNsb2FXUmxLSEJ5YjNSdkxDQkpWRVZTUVZSUFVpd2dRWEp5WVhsV1lXeDFaWE1wTzF4dUlDQWdJR2xtS0NGd2NtOTBiMXRVVDE5VFZGSkpUa2RmVkVGSFhTbG9hV1JsS0hCeWIzUnZMQ0JVVDE5VFZGSkpUa2RmVkVGSExDQk9RVTFGS1R0Y2JpQWdJQ0JKZEdWeVlYUnZjbk5iVGtGTlJWMGdQU0JCY25KaGVWWmhiSFZsY3p0Y2JpQWdJQ0JtYjNJb2EyVjVJR2x1SUNScGRHVnlZWFJ2Y25NcGFXWW9JWEJ5YjNSdlcydGxlVjBwY21Wa1pXWnBibVVvY0hKdmRHOHNJR3RsZVN3Z0pHbDBaWEpoZEc5eWMxdHJaWGxkTENCMGNuVmxLVHRjYmlBZ2ZWeHVmU0lzSW5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQWtkR0Z6YXlBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEdGemF5Y3BPMXh1SkdWNGNHOXlkQ2drWlhod2IzSjBMa2NnS3lBa1pYaHdiM0owTGtJc0lIdGNiaUFnYzJWMFNXMXRaV1JwWVhSbE9pQWdJQ1IwWVhOckxuTmxkQ3hjYmlBZ1kyeGxZWEpKYlcxbFpHbGhkR1U2SUNSMFlYTnJMbU5zWldGeVhHNTlLVHNpTENJdkx5QnBaVGt0SUhObGRGUnBiV1Z2ZFhRZ0ppQnpaWFJKYm5SbGNuWmhiQ0JoWkdScGRHbHZibUZzSUhCaGNtRnRaWFJsY25NZ1ptbDRYRzUyWVhJZ1oyeHZZbUZzSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dKR1Y0Y0c5eWRDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnYVc1MmIydGxJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmx1ZG05clpTY3BYRzRnSUN3Z2NHRnlkR2xoYkNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNCaGNuUnBZV3duS1Z4dUlDQXNJRzVoZG1sbllYUnZjaUFnUFNCbmJHOWlZV3d1Ym1GMmFXZGhkRzl5WEc0Z0lDd2dUVk5KUlNBZ0lDQWdJQ0E5SUNFaGJtRjJhV2RoZEc5eUlDWW1JQzlOVTBsRklDNWNYQzR2TG5SbGMzUW9ibUYyYVdkaGRHOXlMblZ6WlhKQloyVnVkQ2s3SUM4dklEd3RJR1JwY25SNUlHbGxPUzBnWTJobFkydGNiblpoY2lCM2NtRndJRDBnWm5WdVkzUnBiMjRvYzJWMEtYdGNiaUFnY21WMGRYSnVJRTFUU1VVZ1B5Qm1kVzVqZEdsdmJpaG1iaXdnZEdsdFpTQXZLaXdnTGk0dVlYSm5jeUFxTHlsN1hHNGdJQ0FnY21WMGRYSnVJSE5sZENocGJuWnZhMlVvWEc0Z0lDQWdJQ0J3WVhKMGFXRnNMRnh1SUNBZ0lDQWdXMTB1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNc0lESXBMRnh1SUNBZ0lDQWdkSGx3Wlc5bUlHWnVJRDA5SUNkbWRXNWpkR2x2YmljZ1B5Qm1iaUE2SUVaMWJtTjBhVzl1S0dadUtWeHVJQ0FnSUNrc0lIUnBiV1VwTzF4dUlDQjlJRG9nYzJWME8xeHVmVHRjYmlSbGVIQnZjblFvSkdWNGNHOXlkQzVISUNzZ0pHVjRjRzl5ZEM1Q0lDc2dKR1Y0Y0c5eWRDNUdJQ29nVFZOSlJTd2dlMXh1SUNCelpYUlVhVzFsYjNWME9pQWdkM0poY0NobmJHOWlZV3d1YzJWMFZHbHRaVzkxZENrc1hHNGdJSE5sZEVsdWRHVnlkbUZzT2lCM2NtRndLR2RzYjJKaGJDNXpaWFJKYm5SbGNuWmhiQ2xjYm4wcE95SXNJbkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzbHRZbTlzSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVqY21WaGRHVW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtUmxabWx1WlMxd2NtOXdaWEowZVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1WkdWbWFXNWxMWEJ5YjNCbGNuUnBaWE1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbWRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaMlYwTFhCeWIzUnZkSGx3WlMxdlppY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWEyVjVjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMXVZVzFsY3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dlltcGxZM1F1Wm5KbFpYcGxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXpaV0ZzSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzV3Y21WMlpXNTBMV1Y0ZEdWdWMybHZibk1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbWx6TFdaeWIzcGxiaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVhWE10YzJWaGJHVmtKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXBjeTFsZUhSbGJuTnBZbXhsSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVoYzNOcFoyNG5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtbHpKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXpaWFF0Y0hKdmRHOTBlWEJsTFc5bUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1MGJ5MXpkSEpwYm1jbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVpuVnVZM1JwYjI0dVltbHVaQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVtZFc1amRHbHZiaTV1WVcxbEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtWjFibU4wYVc5dUxtaGhjeTFwYm5OMFlXNWpaU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV3WVhKelpTMXBiblFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y0dGeWMyVXRabXh2WVhRbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJuVnRZbVZ5TG1OdmJuTjBjblZqZEc5eUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1MGJ5MW1hWGhsWkNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dWRXMWlaWEl1ZEc4dGNISmxZMmx6YVc5dUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1bGNITnBiRzl1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTVwY3kxbWFXNXBkR1VuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbWx6TFdsdWRHVm5aWEluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Ym5WdFltVnlMbWx6TFc1aGJpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXVkVzFpWlhJdWFYTXRjMkZtWlMxcGJuUmxaMlZ5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG01MWJXSmxjaTV0WVhndGMyRm1aUzFwYm5SbFoyVnlKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTUxYldKbGNpNXRhVzR0YzJGbVpTMXBiblJsWjJWeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtNTFiV0psY2k1d1lYSnpaUzFtYkc5aGRDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXVkVzFpWlhJdWNHRnljMlV0YVc1MEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1WVdOdmMyZ25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1aGMybHVhQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV0WVhSb0xtRjBZVzVvSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VZMkp5ZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MbU5zZWpNeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1WTI5emFDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXRZWFJvTG1WNGNHMHhKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbTFoZEdndVpuSnZkVzVrSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VhSGx3YjNRbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzVwYlhWc0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtMWhkR2d1Ykc5bk1UQW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXViV0YwYUM1c2IyY3hjQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV0WVhSb0xteHZaekluS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YldGMGFDNXphV2R1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG0xaGRHZ3VjMmx1YUNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1dFlYUm9MblJoYm1nbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRjBhQzUwY25WdVl5Y3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdVpuSnZiUzFqYjJSbExYQnZhVzUwSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTV5WVhjbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG5SeWFXMG5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbDBaWEpoZEc5eUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1amIyUmxMWEJ2YVc1MExXRjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NWxibVJ6TFhkcGRHZ25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtbHVZMngxWkdWekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1eVpYQmxZWFFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5Mbk4wWVhKMGN5MTNhWFJvSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVoYm1Ob2IzSW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtSnBaeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VZbXhwYm1zbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWMzUnlhVzVuTG1KdmJHUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVjM1J5YVc1bkxtWnBlR1ZrSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVtYjI1MFkyOXNiM0luS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbVp2Ym5SemFYcGxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXBkR0ZzYVdOekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1c2FXNXJKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXpiV0ZzYkNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YzNSeWFXdGxKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXpkV0luS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5Mbk4xY0NjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1a1lYUmxMbTV2ZHljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1a1lYUmxMblJ2TFdwemIyNG5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVaR0YwWlM1MGJ5MXBjMjh0YzNSeWFXNW5KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbVJoZEdVdWRHOHRjM1J5YVc1bkp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtUmhkR1V1ZEc4dGNISnBiV2wwYVhabEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1sekxXRnljbUY1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbVp5YjIwbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YjJZbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YW05cGJpY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1emJHbGpaU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNXpiM0owSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbVp2Y2kxbFlXTm9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtMWhjQ2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNW1hV3gwWlhJbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YzI5dFpTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bGRtVnllU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTVoY25KaGVTNXlaV1IxWTJVbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Y21Wa2RXTmxMWEpwWjJoMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxtRnljbUY1TG1sdVpHVjRMVzltSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG1GeWNtRjVMbXhoYzNRdGFXNWtaWGd0YjJZbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1WTI5d2VTMTNhWFJvYVc0bktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1Wm1sc2JDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNWhjbkpoZVM1bWFXNWtKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtWnBibVF0YVc1a1pYZ25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWMzQmxZMmxsY3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1aGNuSmhlUzVwZEdWeVlYUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV5WldkbGVIQXVZMjl1YzNSeWRXTjBiM0luS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMblJ2TFhOMGNtbHVaeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV5WldkbGVIQXVabXhoWjNNbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWNtVm5aWGh3TG0xaGRHTm9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWjJWNGNDNXlaWEJzWVdObEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxaMlY0Y0M1elpXRnlZMmduS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1Y21WblpYaHdMbk53YkdsMEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuQnliMjFwYzJVbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWJXRndKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbk5sZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1M1pXRnJMVzFoY0NjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1M1pXRnJMWE5sZENjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1MGVYQmxaQzVoY25KaGVTMWlkV1ptWlhJbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1WkdGMFlTMTJhV1YzSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMbWx1ZERndFlYSnlZWGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVkV2x1ZERndFlYSnlZWGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVkV2x1ZERndFkyeGhiWEJsWkMxaGNuSmhlU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNXBiblF4TmkxaGNuSmhlU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTUwZVhCbFpDNTFhVzUwTVRZdFlYSnlZWGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVhVzUwTXpJdFlYSnlZWGtuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjell1ZEhsd1pXUXVkV2x1ZERNeUxXRnljbUY1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5SNWNHVmtMbVpzYjJGME16SXRZWEp5WVhrbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWRIbHdaV1F1Wm14dllYUTJOQzFoY25KaGVTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtRndjR3g1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WTI5dWMzUnlkV04wSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0yTG5KbFpteGxZM1F1WkdWbWFXNWxMWEJ5YjNCbGNuUjVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVaR1ZzWlhSbExYQnliM0JsY25SNUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVpXNTFiV1Z5WVhSbEp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNMkxuSmxabXhsWTNRdVoyVjBKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXlKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTJMbkpsWm14bFkzUXVaMlYwTFhCeWIzUnZkSGx3WlMxdlppY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExtaGhjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOaTV5Wldac1pXTjBMbWx6TFdWNGRHVnVjMmxpYkdVbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pZdWNtVm1iR1ZqZEM1dmQyNHRhMlY1Y3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG5CeVpYWmxiblF0WlhoMFpXNXphVzl1Y3ljcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tmk1eVpXWnNaV04wTG5ObGRDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek5pNXlaV1pzWldOMExuTmxkQzF3Y205MGIzUjVjR1V0YjJZbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdVlYSnlZWGt1YVc1amJIVmtaWE1uS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YzNSeWFXNW5MbUYwSnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG5OMGNtbHVaeTV3WVdRdGMzUmhjblFuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YzNSeWFXNW5MbkJoWkMxbGJtUW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3VjM1J5YVc1bkxuUnlhVzB0YkdWbWRDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXpkSEpwYm1jdWRISnBiUzF5YVdkb2RDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXpkSEpwYm1jdWJXRjBZMmd0WVd4c0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xuTjViV0p2YkM1aGMzbHVZeTFwZEdWeVlYUnZjaWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV6ZVcxaWIyd3ViMkp6WlhKMllXSnNaU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV2WW1wbFkzUXVaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXljeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV2WW1wbFkzUXVkbUZzZFdWekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtOWlhbVZqZEM1bGJuUnlhV1Z6SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG05aWFtVmpkQzVrWldacGJtVXRaMlYwZEdWeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtOWlhbVZqZEM1a1pXWnBibVV0YzJWMGRHVnlKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbTlpYW1WamRDNXNiMjlyZFhBdFoyVjBkR1Z5SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG05aWFtVmpkQzVzYjI5cmRYQXRjMlYwZEdWeUp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtMWhjQzUwYnkxcWMyOXVKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbk5sZEM1MGJ5MXFjMjl1SnlrN1hHNXlaWEYxYVhKbEtDY3VMMjF2WkhWc1pYTXZaWE0zTG5ONWMzUmxiUzVuYkc5aVlXd25LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5bGN6Y3VaWEp5YjNJdWFYTXRaWEp5YjNJbktUdGNibkpsY1hWcGNtVW9KeTR2Ylc5a2RXeGxjeTlsY3pjdWJXRjBhQzVwWVdSa2FDY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXRZWFJvTG1semRXSm9KeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbTFoZEdndWFXMTFiR2duS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1YldGMGFDNTFiWFZzYUNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1SbFptbHVaUzF0WlhSaFpHRjBZU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbVJsYkdWMFpTMXRaWFJoWkdGMFlTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtZGxkQzF0WlhSaFpHRjBZU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbWRsZEMxdFpYUmhaR0YwWVMxclpYbHpKeWs3WEc1eVpYRjFhWEpsS0NjdUwyMXZaSFZzWlhNdlpYTTNMbkpsWm14bFkzUXVaMlYwTFc5M2JpMXRaWFJoWkdGMFlTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDJWek55NXlaV1pzWldOMExtZGxkQzF2ZDI0dGJXVjBZV1JoZEdFdGEyVjVjeWNwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTV5Wldac1pXTjBMbWhoY3kxdFpYUmhaR0YwWVNjcE8xeHVjbVZ4ZFdseVpTZ25MaTl0YjJSMWJHVnpMMlZ6Tnk1eVpXWnNaV04wTG1oaGN5MXZkMjR0YldWMFlXUmhkR0VuS1R0Y2JuSmxjWFZwY21Vb0p5NHZiVzlrZFd4bGN5OWxjemN1Y21WbWJHVmpkQzV0WlhSaFpHRjBZU2NwTzF4dWNtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwyVnpOeTVoYzJGd0p5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12WlhNM0xtOWljMlZ5ZG1GaWJHVW5LVHRjYm5KbGNYVnBjbVVvSnk0dmJXOWtkV3hsY3k5M1pXSXVkR2x0WlhKekp5azdYRzV5WlhGMWFYSmxLQ2N1TDIxdlpIVnNaWE12ZDJWaUxtbHRiV1ZrYVdGMFpTY3BPMXh1Y21WeGRXbHlaU2duTGk5dGIyUjFiR1Z6TDNkbFlpNWtiMjB1YVhSbGNtRmliR1VuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpOXRiMlIxYkdWekwxOWpiM0psSnlrN0lpd2lMeThnYzJocGJTQm1iM0lnZFhOcGJtY2djSEp2WTJWemN5QnBiaUJpY205M2MyVnlYRzUyWVhJZ2NISnZZMlZ6Y3lBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UzMDdYRzVjYmk4dklHTmhZMmhsWkNCbWNtOXRJSGRvWVhSbGRtVnlJR2RzYjJKaGJDQnBjeUJ3Y21WelpXNTBJSE52SUhSb1lYUWdkR1Z6ZENCeWRXNXVaWEp6SUhSb1lYUWdjM1IxWWlCcGRGeHVMeThnWkc5dUozUWdZbkpsWVdzZ2RHaHBibWR6TGlBZ1FuVjBJSGRsSUc1bFpXUWdkRzhnZDNKaGNDQnBkQ0JwYmlCaElIUnllU0JqWVhSamFDQnBiaUJqWVhObElHbDBJR2x6WEc0dkx5QjNjbUZ3Y0dWa0lHbHVJSE4wY21samRDQnRiMlJsSUdOdlpHVWdkMmhwWTJnZ1pHOWxjMjRuZENCa1pXWnBibVVnWVc1NUlHZHNiMkpoYkhNdUlDQkpkQ2R6SUdsdWMybGtaU0JoWEc0dkx5Qm1kVzVqZEdsdmJpQmlaV05oZFhObElIUnllUzlqWVhSamFHVnpJR1JsYjNCMGFXMXBlbVVnYVc0Z1kyVnlkR0ZwYmlCbGJtZHBibVZ6TGx4dVhHNTJZWElnWTJGamFHVmtVMlYwVkdsdFpXOTFkRHRjYm5aaGNpQmpZV05vWldSRGJHVmhjbFJwYldWdmRYUTdYRzVjYm1aMWJtTjBhVzl1SUdSbFptRjFiSFJUWlhSVWFXMXZkWFFvS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R6WlhSVWFXMWxiM1YwSUdoaGN5QnViM1FnWW1WbGJpQmtaV1pwYm1Wa0p5azdYRzU5WEc1bWRXNWpkR2x2YmlCa1pXWmhkV3gwUTJ4bFlYSlVhVzFsYjNWMElDZ3BJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyTnNaV0Z5VkdsdFpXOTFkQ0JvWVhNZ2JtOTBJR0psWlc0Z1pHVm1hVzVsWkNjcE8xeHVmVnh1S0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhObGRGUnBiV1Z2ZFhRZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFpGTmxkRlJwYldWdmRYUWdQU0J6WlhSVWFXMWxiM1YwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlJR1JsWm1GMWJIUlRaWFJVYVcxdmRYUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUdOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFNCa1pXWmhkV3gwVTJWMFZHbHRiM1YwTzF4dUlDQWdJSDFjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHTnNaV0Z5VkdsdFpXOTFkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMElEMGdZMnhsWVhKVWFXMWxiM1YwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWkdWbVlYVnNkRU5zWldGeVZHbHRaVzkxZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDBnWkdWbVlYVnNkRU5zWldGeVZHbHRaVzkxZER0Y2JpQWdJQ0I5WEc1OUlDZ3BLVnh1Wm5WdVkzUnBiMjRnY25WdVZHbHRaVzkxZENobWRXNHBJSHRjYmlBZ0lDQnBaaUFvWTJGamFHVmtVMlYwVkdsdFpXOTFkQ0E5UFQwZ2MyVjBWR2x0Wlc5MWRDa2dlMXh1SUNBZ0lDQWdJQ0F2TDI1dmNtMWhiQ0JsYm5acGNtOXRaVzUwY3lCcGJpQnpZVzVsSUhOcGRIVmhkR2x2Ym5OY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhObGRGUnBiV1Z2ZFhRb1puVnVMQ0F3S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdMeThnYVdZZ2MyVjBWR2x0Wlc5MWRDQjNZWE51SjNRZ1lYWmhhV3hoWW14bElHSjFkQ0IzWVhNZ2JHRjBkR1Z5SUdSbFptbHVaV1JjYmlBZ0lDQnBaaUFvS0dOaFkyaGxaRk5sZEZScGJXVnZkWFFnUFQwOUlHUmxabUYxYkhSVFpYUlVhVzF2ZFhRZ2ZId2dJV05oWTJobFpGTmxkRlJwYldWdmRYUXBJQ1ltSUhObGRGUnBiV1Z2ZFhRcElIdGNiaUFnSUNBZ0lDQWdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDQTlJSE5sZEZScGJXVnZkWFE3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6WlhSVWFXMWxiM1YwS0daMWJpd2dNQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUM4dklIZG9aVzRnZDJobGJpQnpiMjFsWW05a2VTQm9ZWE1nYzJOeVpYZGxaQ0IzYVhSb0lITmxkRlJwYldWdmRYUWdZblYwSUc1dklFa3VSUzRnYldGa1pHNWxjM05jYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpGTmxkRlJwYldWdmRYUW9ablZ1TENBd0tUdGNiaUFnSUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVjJobGJpQjNaU0JoY21VZ2FXNGdTUzVGTGlCaWRYUWdkR2hsSUhOamNtbHdkQ0JvWVhNZ1ltVmxiaUJsZG1Gc1pXUWdjMjhnU1M1RkxpQmtiMlZ6YmlkMElIUnlkWE4wSUhSb1pTQm5iRzlpWVd3Z2IySnFaV04wSUhkb1pXNGdZMkZzYkdWa0lHNXZjbTFoYkd4NVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWa1UyVjBWR2x0Wlc5MWRDNWpZV3hzS0c1MWJHd3NJR1oxYml3Z01DazdYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ29aU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6WVcxbElHRnpJR0ZpYjNabElHSjFkQ0IzYUdWdUlHbDBKM01nWVNCMlpYSnphVzl1SUc5bUlFa3VSUzRnZEdoaGRDQnRkWE4wSUdoaGRtVWdkR2hsSUdkc2IySmhiQ0J2WW1wbFkzUWdabTl5SUNkMGFHbHpKeXdnYUc5d1puVnNiSGtnYjNWeUlHTnZiblJsZUhRZ1kyOXljbVZqZENCdmRHaGxjbmRwYzJVZ2FYUWdkMmxzYkNCMGFISnZkeUJoSUdkc2IySmhiQ0JsY25KdmNseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oWTJobFpGTmxkRlJwYldWdmRYUXVZMkZzYkNoMGFHbHpMQ0JtZFc0c0lEQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc1Y2JuMWNibVoxYm1OMGFXOXVJSEoxYmtOc1pXRnlWR2x0Wlc5MWRDaHRZWEpyWlhJcElIdGNiaUFnSUNCcFppQW9ZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDA5UFNCamJHVmhjbFJwYldWdmRYUXBJSHRjYmlBZ0lDQWdJQ0FnTHk5dWIzSnRZV3dnWlc1MmFYSnZiV1Z1ZEhNZ2FXNGdjMkZ1WlNCemFYUjFZWFJwYjI1elhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJHVmhjbFJwYldWdmRYUW9iV0Z5YTJWeUtUdGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2FXWWdZMnhsWVhKVWFXMWxiM1YwSUhkaGMyNG5kQ0JoZG1GcGJHRmliR1VnWW5WMElIZGhjeUJzWVhSMFpYSWdaR1ZtYVc1bFpGeHVJQ0FnSUdsbUlDZ29ZMkZqYUdWa1EyeGxZWEpVYVcxbGIzVjBJRDA5UFNCa1pXWmhkV3gwUTJ4bFlYSlVhVzFsYjNWMElIeDhJQ0ZqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFFwSUNZbUlHTnNaV0Z5VkdsdFpXOTFkQ2tnZTF4dUlDQWdJQ0FnSUNCallXTm9aV1JEYkdWaGNsUnBiV1Z2ZFhRZ1BTQmpiR1ZoY2xScGJXVnZkWFE3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYkdWaGNsUnBiV1Z2ZFhRb2JXRnlhMlZ5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0x5OGdkMmhsYmlCM2FHVnVJSE52YldWaWIyUjVJR2hoY3lCelkzSmxkMlZrSUhkcGRHZ2djMlYwVkdsdFpXOTFkQ0JpZFhRZ2JtOGdTUzVGTGlCdFlXUmtibVZ6YzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGamFHVmtRMnhsWVhKVWFXMWxiM1YwS0cxaGNtdGxjaWs3WEc0Z0lDQWdmU0JqWVhSamFDQW9aU2w3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhhR1Z1SUhkbElHRnlaU0JwYmlCSkxrVXVJR0oxZENCMGFHVWdjMk55YVhCMElHaGhjeUJpWldWdUlHVjJZV3hsWkNCemJ5QkpMa1V1SUdSdlpYTnVKM1FnSUhSeWRYTjBJSFJvWlNCbmJHOWlZV3dnYjJKcVpXTjBJSGRvWlc0Z1kyRnNiR1ZrSUc1dmNtMWhiR3g1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRmphR1ZrUTJ4bFlYSlVhVzFsYjNWMExtTmhiR3dvYm5Wc2JDd2diV0Z5YTJWeUtUdGNiaUFnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2w3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6WVcxbElHRnpJR0ZpYjNabElHSjFkQ0IzYUdWdUlHbDBKM01nWVNCMlpYSnphVzl1SUc5bUlFa3VSUzRnZEdoaGRDQnRkWE4wSUdoaGRtVWdkR2hsSUdkc2IySmhiQ0J2WW1wbFkzUWdabTl5SUNkMGFHbHpKeXdnYUc5d1puVnNiSGtnYjNWeUlHTnZiblJsZUhRZ1kyOXljbVZqZENCdmRHaGxjbmRwYzJVZ2FYUWdkMmxzYkNCMGFISnZkeUJoSUdkc2IySmhiQ0JsY25KdmNpNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTnZiV1VnZG1WeWMybHZibk1nYjJZZ1NTNUZMaUJvWVhabElHUnBabVpsY21WdWRDQnlkV3hsY3lCbWIzSWdZMnhsWVhKVWFXMWxiM1YwSUhaeklITmxkRlJwYldWdmRYUmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVdOb1pXUkRiR1ZoY2xScGJXVnZkWFF1WTJGc2JDaDBhR2x6TENCdFlYSnJaWElwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNWNibHh1ZlZ4dWRtRnlJSEYxWlhWbElEMGdXMTA3WEc1MllYSWdaSEpoYVc1cGJtY2dQU0JtWVd4elpUdGNiblpoY2lCamRYSnlaVzUwVVhWbGRXVTdYRzUyWVhJZ2NYVmxkV1ZKYm1SbGVDQTlJQzB4TzF4dVhHNW1kVzVqZEdsdmJpQmpiR1ZoYmxWd1RtVjRkRlJwWTJzb0tTQjdYRzRnSUNBZ2FXWWdLQ0ZrY21GcGJtbHVaeUI4ZkNBaFkzVnljbVZ1ZEZGMVpYVmxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzRnSUNBZ1pISmhhVzVwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JwWmlBb1kzVnljbVZ1ZEZGMVpYVmxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0J4ZFdWMVpTQTlJR04xY25KbGJuUlJkV1YxWlM1amIyNWpZWFFvY1hWbGRXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIRjFaWFZsU1c1a1pYZ2dQU0F0TVR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hGMVpYVmxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0JrY21GcGJsRjFaWFZsS0NrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVtZFc1amRHbHZiaUJrY21GcGJsRjFaWFZsS0NrZ2UxeHVJQ0FnSUdsbUlDaGtjbUZwYm1sdVp5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQjBhVzFsYjNWMElEMGdjblZ1VkdsdFpXOTFkQ2hqYkdWaGJsVndUbVY0ZEZScFkyc3BPMXh1SUNBZ0lHUnlZV2x1YVc1bklEMGdkSEoxWlR0Y2JseHVJQ0FnSUhaaGNpQnNaVzRnUFNCeGRXVjFaUzVzWlc1bmRHZzdYRzRnSUNBZ2QyaHBiR1VvYkdWdUtTQjdYRzRnSUNBZ0lDQWdJR04xY25KbGJuUlJkV1YxWlNBOUlIRjFaWFZsTzF4dUlDQWdJQ0FnSUNCeGRXVjFaU0E5SUZ0ZE8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb0t5dHhkV1YxWlVsdVpHVjRJRHdnYkdWdUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZM1Z5Y21WdWRGRjFaWFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZGMVpYVmxXM0YxWlhWbFNXNWtaWGhkTG5KMWJpZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEYxWlhWbFNXNWtaWGdnUFNBdE1UdGNiaUFnSUNBZ0lDQWdiR1Z1SUQwZ2NYVmxkV1V1YkdWdVozUm9PMXh1SUNBZ0lIMWNiaUFnSUNCamRYSnlaVzUwVVhWbGRXVWdQU0J1ZFd4c08xeHVJQ0FnSUdSeVlXbHVhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdjblZ1UTJ4bFlYSlVhVzFsYjNWMEtIUnBiV1Z2ZFhRcE8xeHVmVnh1WEc1d2NtOWpaWE56TG01bGVIUlVhV05ySUQwZ1puVnVZM1JwYjI0Z0tHWjFiaWtnZTF4dUlDQWdJSFpoY2lCaGNtZHpJRDBnYm1WM0lFRnljbUY1S0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnTFNBeEtUdGNiaUFnSUNCcFppQW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJREVwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREU3SUdrZ1BDQmhjbWQxYldWdWRITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z5WjNOYmFTQXRJREZkSUQwZ1lYSm5kVzFsYm5SelcybGRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lIRjFaWFZsTG5CMWMyZ29ibVYzSUVsMFpXMG9ablZ1TENCaGNtZHpLU2s3WEc0Z0lDQWdhV1lnS0hGMVpYVmxMbXhsYm1kMGFDQTlQVDBnTVNBbUppQWhaSEpoYVc1cGJtY3BJSHRjYmlBZ0lDQWdJQ0FnY25WdVZHbHRaVzkxZENoa2NtRnBibEYxWlhWbEtUdGNiaUFnSUNCOVhHNTlPMXh1WEc0dkx5QjJPQ0JzYVd0bGN5QndjbVZrYVdOMGFXSnNaU0J2WW1wbFkzUnpYRzVtZFc1amRHbHZiaUJKZEdWdEtHWjFiaXdnWVhKeVlYa3BJSHRjYmlBZ0lDQjBhR2x6TG1aMWJpQTlJR1oxYmp0Y2JpQWdJQ0IwYUdsekxtRnljbUY1SUQwZ1lYSnlZWGs3WEc1OVhHNUpkR1Z0TG5CeWIzUnZkSGx3WlM1eWRXNGdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZEdocGN5NW1kVzR1WVhCd2JIa29iblZzYkN3Z2RHaHBjeTVoY25KaGVTazdYRzU5TzF4dWNISnZZMlZ6Y3k1MGFYUnNaU0E5SUNkaWNtOTNjMlZ5Snp0Y2JuQnliMk5sYzNNdVluSnZkM05sY2lBOUlIUnlkV1U3WEc1d2NtOWpaWE56TG1WdWRpQTlJSHQ5TzF4dWNISnZZMlZ6Y3k1aGNtZDJJRDBnVzEwN1hHNXdjbTlqWlhOekxuWmxjbk5wYjI0Z1BTQW5KenNnTHk4Z1pXMXdkSGtnYzNSeWFXNW5JSFJ2SUdGMmIybGtJSEpsWjJWNGNDQnBjM04xWlhOY2JuQnliMk5sYzNNdWRtVnljMmx2Ym5NZ1BTQjdmVHRjYmx4dVpuVnVZM1JwYjI0Z2JtOXZjQ2dwSUh0OVhHNWNibkJ5YjJObGMzTXViMjRnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTVoWkdSTWFYTjBaVzVsY2lBOUlHNXZiM0E3WEc1d2NtOWpaWE56TG05dVkyVWdQU0J1YjI5d08xeHVjSEp2WTJWemN5NXZabVlnUFNCdWIyOXdPMXh1Y0hKdlkyVnpjeTV5WlcxdmRtVk1hWE4wWlc1bGNpQTlJRzV2YjNBN1hHNXdjbTlqWlhOekxuSmxiVzkyWlVGc2JFeHBjM1JsYm1WeWN5QTlJRzV2YjNBN1hHNXdjbTlqWlhOekxtVnRhWFFnUFNCdWIyOXdPMXh1WEc1d2NtOWpaWE56TG1KcGJtUnBibWNnUFNCbWRXNWpkR2x2YmlBb2JtRnRaU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25jSEp2WTJWemN5NWlhVzVrYVc1bklHbHpJRzV2ZENCemRYQndiM0owWldRbktUdGNibjA3WEc1Y2JuQnliMk5sYzNNdVkzZGtJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z0p5OG5JSDA3WEc1d2NtOWpaWE56TG1Ob1pHbHlJRDBnWm5WdVkzUnBiMjRnS0dScGNpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmNISnZZMlZ6Y3k1amFHUnBjaUJwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtKeWs3WEc1OU8xeHVjSEp2WTJWemN5NTFiV0Z6YXlBOUlHWjFibU4wYVc5dUtDa2dleUJ5WlhSMWNtNGdNRHNnZlR0Y2JpSXNJaThxS2x4dUlDb2dRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTBMQ0JHWVdObFltOXZheXdnU1c1akxseHVJQ29nUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpQXFYRzRnS2lCVWFHbHpJSE52ZFhKalpTQmpiMlJsSUdseklHeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkNVMFF0YzNSNWJHVWdiR2xqWlc1elpTQm1iM1Z1WkNCcGJpQjBhR1ZjYmlBcUlHaDBkSEJ6T2k4dmNtRjNMbWRwZEdoMVlpNWpiMjB2Wm1GalpXSnZiMnN2Y21WblpXNWxjbUYwYjNJdmJXRnpkR1Z5TDB4SlEwVk9VMFVnWm1sc1pTNGdRVzVjYmlBcUlHRmtaR2wwYVc5dVlXd2daM0poYm5RZ2IyWWdjR0YwWlc1MElISnBaMmgwY3lCallXNGdZbVVnWm05MWJtUWdhVzRnZEdobElGQkJWRVZPVkZNZ1ptbHNaU0JwYmx4dUlDb2dkR2hsSUhOaGJXVWdaR2x5WldOMGIzSjVMbHh1SUNvdlhHNWNiaUVvWm5WdVkzUnBiMjRvWjJ4dlltRnNLU0I3WEc0Z0lGd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNGdJSFpoY2lCUGNDQTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVTdYRzRnSUhaaGNpQm9ZWE5QZDI0Z1BTQlBjQzVvWVhOUGQyNVFjbTl3WlhKMGVUdGNiaUFnZG1GeUlIVnVaR1ZtYVc1bFpEc2dMeThnVFc5eVpTQmpiMjF3Y21WemMybGliR1VnZEdoaGJpQjJiMmxrSURBdVhHNGdJSFpoY2lBa1UzbHRZbTlzSUQwZ2RIbHdaVzltSUZONWJXSnZiQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJRDhnVTNsdFltOXNJRG9nZTMwN1hHNGdJSFpoY2lCcGRHVnlZWFJ2Y2xONWJXSnZiQ0E5SUNSVGVXMWliMnd1YVhSbGNtRjBiM0lnZkh3Z1hDSkFRR2wwWlhKaGRHOXlYQ0k3WEc0Z0lIWmhjaUIwYjFOMGNtbHVaMVJoWjFONWJXSnZiQ0E5SUNSVGVXMWliMnd1ZEc5VGRISnBibWRVWVdjZ2ZId2dYQ0pBUUhSdlUzUnlhVzVuVkdGblhDSTdYRzVjYmlBZ2RtRnlJR2x1VFc5a2RXeGxJRDBnZEhsd1pXOW1JRzF2WkhWc1pTQTlQVDBnWENKdlltcGxZM1JjSWp0Y2JpQWdkbUZ5SUhKMWJuUnBiV1VnUFNCbmJHOWlZV3d1Y21WblpXNWxjbUYwYjNKU2RXNTBhVzFsTzF4dUlDQnBaaUFvY25WdWRHbHRaU2tnZTF4dUlDQWdJR2xtSUNocGJrMXZaSFZzWlNrZ2UxeHVJQ0FnSUNBZ0x5OGdTV1lnY21WblpXNWxjbUYwYjNKU2RXNTBhVzFsSUdseklHUmxabWx1WldRZ1oyeHZZbUZzYkhrZ1lXNWtJSGRsSjNKbElHbHVJR0VnYlc5a2RXeGxMRnh1SUNBZ0lDQWdMeThnYldGclpTQjBhR1VnWlhod2IzSjBjeUJ2WW1wbFkzUWdhV1JsYm5ScFkyRnNJSFJ2SUhKbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlM1Y2JpQWdJQ0FnSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnY25WdWRHbHRaVHRjYmlBZ0lDQjlYRzRnSUNBZ0x5OGdSRzl1SjNRZ1ltOTBhR1Z5SUdWMllXeDFZWFJwYm1jZ2RHaGxJSEpsYzNRZ2IyWWdkR2hwY3lCbWFXeGxJR2xtSUhSb1pTQnlkVzUwYVcxbElIZGhjMXh1SUNBZ0lDOHZJR0ZzY21WaFpIa2daR1ZtYVc1bFpDQm5iRzlpWVd4c2VTNWNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNibHh1SUNBdkx5QkVaV1pwYm1VZ2RHaGxJSEoxYm5ScGJXVWdaMnh2WW1Gc2JIa2dLR0Z6SUdWNGNHVmpkR1ZrSUdKNUlHZGxibVZ5WVhSbFpDQmpiMlJsS1NCaGN5QmxhWFJvWlhKY2JpQWdMeThnYlc5a2RXeGxMbVY0Y0c5eWRITWdLR2xtSUhkbEozSmxJR2x1SUdFZ2JXOWtkV3hsS1NCdmNpQmhJRzVsZHl3Z1pXMXdkSGtnYjJKcVpXTjBMbHh1SUNCeWRXNTBhVzFsSUQwZ1oyeHZZbUZzTG5KbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlNBOUlHbHVUVzlrZFd4bElEOGdiVzlrZFd4bExtVjRjRzl5ZEhNZ09pQjdmVHRjYmx4dUlDQm1kVzVqZEdsdmJpQjNjbUZ3S0dsdWJtVnlSbTRzSUc5MWRHVnlSbTRzSUhObGJHWXNJSFJ5ZVV4dlkzTk1hWE4wS1NCN1hHNGdJQ0FnTHk4Z1NXWWdiM1YwWlhKR2JpQndjbTkyYVdSbFpDQmhibVFnYjNWMFpYSkdiaTV3Y205MGIzUjVjR1VnYVhNZ1lTQkhaVzVsY21GMGIzSXNJSFJvWlc0Z2IzVjBaWEpHYmk1d2NtOTBiM1I1Y0dVZ2FXNXpkR0Z1WTJWdlppQkhaVzVsY21GMGIzSXVYRzRnSUNBZ2RtRnlJSEJ5YjNSdlIyVnVaWEpoZEc5eUlEMGdiM1YwWlhKR2JpQW1KaUJ2ZFhSbGNrWnVMbkJ5YjNSdmRIbHdaU0JwYm5OMFlXNWpaVzltSUVkbGJtVnlZWFJ2Y2lBL0lHOTFkR1Z5Um00Z09pQkhaVzVsY21GMGIzSTdYRzRnSUNBZ2RtRnlJR2RsYm1WeVlYUnZjaUE5SUU5aWFtVmpkQzVqY21WaGRHVW9jSEp2ZEc5SFpXNWxjbUYwYjNJdWNISnZkRzkwZVhCbEtUdGNiaUFnSUNCMllYSWdZMjl1ZEdWNGRDQTlJRzVsZHlCRGIyNTBaWGgwS0hSeWVVeHZZM05NYVhOMElIeDhJRnRkS1R0Y2JseHVJQ0FnSUM4dklGUm9aU0F1WDJsdWRtOXJaU0J0WlhSb2IyUWdkVzVwWm1sbGN5QjBhR1VnYVcxd2JHVnRaVzUwWVhScGIyNXpJRzltSUhSb1pTQXVibVY0ZEN4Y2JpQWdJQ0F2THlBdWRHaHliM2NzSUdGdVpDQXVjbVYwZFhKdUlHMWxkR2h2WkhNdVhHNGdJQ0FnWjJWdVpYSmhkRzl5TGw5cGJuWnZhMlVnUFNCdFlXdGxTVzUyYjJ0bFRXVjBhRzlrS0dsdWJtVnlSbTRzSUhObGJHWXNJR052Ym5SbGVIUXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHZGxibVZ5WVhSdmNqdGNiaUFnZlZ4dUlDQnlkVzUwYVcxbExuZHlZWEFnUFNCM2NtRndPMXh1WEc0Z0lDOHZJRlJ5ZVM5allYUmphQ0JvWld4d1pYSWdkRzhnYldsdWFXMXBlbVVnWkdWdmNIUnBiV2w2WVhScGIyNXpMaUJTWlhSMWNtNXpJR0VnWTI5dGNHeGxkR2x2Ymx4dUlDQXZMeUJ5WldOdmNtUWdiR2xyWlNCamIyNTBaWGgwTG5SeWVVVnVkSEpwWlhOYmFWMHVZMjl0Y0d4bGRHbHZiaTRnVkdocGN5QnBiblJsY21aaFkyVWdZMjkxYkdSY2JpQWdMeThnYUdGMlpTQmlaV1Z1SUNoaGJtUWdkMkZ6SUhCeVpYWnBiM1Z6YkhrcElHUmxjMmxuYm1Wa0lIUnZJSFJoYTJVZ1lTQmpiRzl6ZFhKbElIUnZJR0psWEc0Z0lDOHZJR2x1ZG05clpXUWdkMmwwYUc5MWRDQmhjbWQxYldWdWRITXNJR0oxZENCcGJpQmhiR3dnZEdobElHTmhjMlZ6SUhkbElHTmhjbVVnWVdKdmRYUWdkMlZjYmlBZ0x5OGdZV3h5WldGa2VTQm9ZWFpsSUdGdUlHVjRhWE4wYVc1bklHMWxkR2h2WkNCM1pTQjNZVzUwSUhSdklHTmhiR3dzSUhOdklIUm9aWEpsSjNNZ2JtOGdibVZsWkZ4dUlDQXZMeUIwYnlCamNtVmhkR1VnWVNCdVpYY2dablZ1WTNScGIyNGdiMkpxWldOMExpQlhaU0JqWVc0Z1pYWmxiaUJuWlhRZ1lYZGhlU0IzYVhSb0lHRnpjM1Z0YVc1blhHNGdJQzh2SUhSb1pTQnRaWFJvYjJRZ2RHRnJaWE1nWlhoaFkzUnNlU0J2Ym1VZ1lYSm5kVzFsYm5Rc0lITnBibU5sSUhSb1lYUWdhR0Z3Y0dWdWN5QjBieUJpWlNCMGNuVmxYRzRnSUM4dklHbHVJR1YyWlhKNUlHTmhjMlVzSUhOdklIZGxJR1J2YmlkMElHaGhkbVVnZEc4Z2RHOTFZMmdnZEdobElHRnlaM1Z0Wlc1MGN5QnZZbXBsWTNRdUlGUm9aVnh1SUNBdkx5QnZibXg1SUdGa1pHbDBhVzl1WVd3Z1lXeHNiMk5oZEdsdmJpQnlaWEYxYVhKbFpDQnBjeUIwYUdVZ1kyOXRjR3hsZEdsdmJpQnlaV052Y21Rc0lIZG9hV05vWEc0Z0lDOHZJR2hoY3lCaElITjBZV0pzWlNCemFHRndaU0JoYm1RZ2MyOGdhRzl3WldaMWJHeDVJSE5vYjNWc1pDQmlaU0JqYUdWaGNDQjBieUJoYkd4dlkyRjBaUzVjYmlBZ1puVnVZM1JwYjI0Z2RISjVRMkYwWTJnb1ptNHNJRzlpYWl3Z1lYSm5LU0I3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUI3SUhSNWNHVTZJRndpYm05eWJXRnNYQ0lzSUdGeVp6b2dabTR1WTJGc2JDaHZZbW9zSUdGeVp5a2dmVHRjYmlBZ0lDQjlJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUI3SUhSNWNHVTZJRndpZEdoeWIzZGNJaXdnWVhKbk9pQmxjbklnZlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCMllYSWdSMlZ1VTNSaGRHVlRkWE53Wlc1a1pXUlRkR0Z5ZENBOUlGd2ljM1Z6Y0dWdVpHVmtVM1JoY25SY0lqdGNiaUFnZG1GeUlFZGxibE4wWVhSbFUzVnpjR1Z1WkdWa1dXbGxiR1FnUFNCY0luTjFjM0JsYm1SbFpGbHBaV3hrWENJN1hHNGdJSFpoY2lCSFpXNVRkR0YwWlVWNFpXTjFkR2x1WnlBOUlGd2laWGhsWTNWMGFXNW5YQ0k3WEc0Z0lIWmhjaUJIWlc1VGRHRjBaVU52YlhCc1pYUmxaQ0E5SUZ3aVkyOXRjR3hsZEdWa1hDSTdYRzVjYmlBZ0x5OGdVbVYwZFhKdWFXNW5JSFJvYVhNZ2IySnFaV04wSUdaeWIyMGdkR2hsSUdsdWJtVnlSbTRnYUdGeklIUm9aU0J6WVcxbElHVm1abVZqZENCaGMxeHVJQ0F2THlCaWNtVmhhMmx1WnlCdmRYUWdiMllnZEdobElHUnBjM0JoZEdOb0lITjNhWFJqYUNCemRHRjBaVzFsYm5RdVhHNGdJSFpoY2lCRGIyNTBhVzUxWlZObGJuUnBibVZzSUQwZ2UzMDdYRzVjYmlBZ0x5OGdSSFZ0YlhrZ1kyOXVjM1J5ZFdOMGIzSWdablZ1WTNScGIyNXpJSFJvWVhRZ2QyVWdkWE5sSUdGeklIUm9aU0F1WTI5dWMzUnlkV04wYjNJZ1lXNWtYRzRnSUM4dklDNWpiMjV6ZEhKMVkzUnZjaTV3Y205MGIzUjVjR1VnY0hKdmNHVnlkR2xsY3lCbWIzSWdablZ1WTNScGIyNXpJSFJvWVhRZ2NtVjBkWEp1SUVkbGJtVnlZWFJ2Y2x4dUlDQXZMeUJ2WW1wbFkzUnpMaUJHYjNJZ1puVnNiQ0J6Y0dWaklHTnZiWEJzYVdGdVkyVXNJSGx2ZFNCdFlYa2dkMmx6YUNCMGJ5QmpiMjVtYVdkMWNtVWdlVzkxY2x4dUlDQXZMeUJ0YVc1cFptbGxjaUJ1YjNRZ2RHOGdiV0Z1WjJ4bElIUm9aU0J1WVcxbGN5QnZaaUIwYUdWelpTQjBkMjhnWm5WdVkzUnBiMjV6TGx4dUlDQm1kVzVqZEdsdmJpQkhaVzVsY21GMGIzSW9LU0I3ZlZ4dUlDQm1kVzVqZEdsdmJpQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJpZ3BJSHQ5WEc0Z0lHWjFibU4wYVc5dUlFZGxibVZ5WVhSdmNrWjFibU4wYVc5dVVISnZkRzkwZVhCbEtDa2dlMzFjYmx4dUlDQXZMeUJVYUdseklHbHpJR0VnY0c5c2VXWnBiR3dnWm05eUlDVkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTVWdabTl5SUdWdWRtbHliMjV0Wlc1MGN5QjBhR0YwWEc0Z0lDOHZJR1J2YmlkMElHNWhkR2wyWld4NUlITjFjSEJ2Y25RZ2FYUXVYRzRnSUhaaGNpQkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTQTlJSHQ5TzF4dUlDQkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pWdHBkR1Z5WVhSdmNsTjViV0p2YkYwZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMDdYRzVjYmlBZ2RtRnlJR2RsZEZCeWIzUnZJRDBnVDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bU8xeHVJQ0IyWVhJZ1RtRjBhWFpsU1hSbGNtRjBiM0pRY205MGIzUjVjR1VnUFNCblpYUlFjbTkwYnlBbUppQm5aWFJRY205MGJ5aG5aWFJRY205MGJ5aDJZV3gxWlhNb1cxMHBLU2s3WEc0Z0lHbG1JQ2hPWVhScGRtVkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTQW1KbHh1SUNBZ0lDQWdUbUYwYVhabFNYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVZ0lUMDlJRTl3SUNZbVhHNGdJQ0FnSUNCb1lYTlBkMjR1WTJGc2JDaE9ZWFJwZG1WSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlN3Z2FYUmxjbUYwYjNKVGVXMWliMndwS1NCN1hHNGdJQ0FnTHk4Z1ZHaHBjeUJsYm5acGNtOXViV1Z1ZENCb1lYTWdZU0J1WVhScGRtVWdKVWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxKVHNnZFhObElHbDBJR2x1YzNSbFlXUmNiaUFnSUNBdkx5QnZaaUIwYUdVZ2NHOXNlV1pwYkd3dVhHNGdJQ0FnU1hSbGNtRjBiM0pRY205MGIzUjVjR1VnUFNCT1lYUnBkbVZKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaVHRjYmlBZ2ZWeHVYRzRnSUhaaGNpQkhjQ0E5SUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1VUhKdmRHOTBlWEJsTG5CeWIzUnZkSGx3WlNBOVhHNGdJQ0FnUjJWdVpYSmhkRzl5TG5CeWIzUnZkSGx3WlNBOUlFOWlhbVZqZEM1amNtVmhkR1VvU1hSbGNtRjBiM0pRY205MGIzUjVjR1VwTzF4dUlDQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJpNXdjbTkwYjNSNWNHVWdQU0JIY0M1amIyNXpkSEoxWTNSdmNpQTlJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVVSEp2ZEc5MGVYQmxPMXh1SUNCSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmxCeWIzUnZkSGx3WlM1amIyNXpkSEoxWTNSdmNpQTlJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVPMXh1SUNCSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmxCeWIzUnZkSGx3WlZ0MGIxTjBjbWx1WjFSaFoxTjViV0p2YkYwZ1BWeHVJQ0FnSUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1TG1ScGMzQnNZWGxPWVcxbElEMGdYQ0pIWlc1bGNtRjBiM0pHZFc1amRHbHZibHdpTzF4dVhHNGdJQzh2SUVobGJIQmxjaUJtYjNJZ1pHVm1hVzVwYm1jZ2RHaGxJQzV1WlhoMExDQXVkR2h5YjNjc0lHRnVaQ0F1Y21WMGRYSnVJRzFsZEdodlpITWdiMllnZEdobFhHNGdJQzh2SUVsMFpYSmhkRzl5SUdsdWRHVnlabUZqWlNCcGJpQjBaWEp0Y3lCdlppQmhJSE5wYm1kc1pTQXVYMmx1ZG05clpTQnRaWFJvYjJRdVhHNGdJR1oxYm1OMGFXOXVJR1JsWm1sdVpVbDBaWEpoZEc5eVRXVjBhRzlrY3lod2NtOTBiM1I1Y0dVcElIdGNiaUFnSUNCYlhDSnVaWGgwWENJc0lGd2lkR2h5YjNkY0lpd2dYQ0p5WlhSMWNtNWNJbDB1Wm05eVJXRmphQ2htZFc1amRHbHZiaWh0WlhSb2IyUXBJSHRjYmlBZ0lDQWdJSEJ5YjNSdmRIbHdaVnR0WlhSb2IyUmRJRDBnWm5WdVkzUnBiMjRvWVhKbktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGJuWnZhMlVvYldWMGFHOWtMQ0JoY21jcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJSEoxYm5ScGJXVXVhWE5IWlc1bGNtRjBiM0pHZFc1amRHbHZiaUE5SUdaMWJtTjBhVzl1S0dkbGJrWjFiaWtnZTF4dUlDQWdJSFpoY2lCamRHOXlJRDBnZEhsd1pXOW1JR2RsYmtaMWJpQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JR2RsYmtaMWJpNWpiMjV6ZEhKMVkzUnZjanRjYmlBZ0lDQnlaWFIxY200Z1kzUnZjbHh1SUNBZ0lDQWdQeUJqZEc5eUlEMDlQU0JIWlc1bGNtRjBiM0pHZFc1amRHbHZiaUI4ZkZ4dUlDQWdJQ0FnSUNBdkx5QkdiM0lnZEdobElHNWhkR2wyWlNCSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmlCamIyNXpkSEoxWTNSdmNpd2dkR2hsSUdKbGMzUWdkMlVnWTJGdVhHNGdJQ0FnSUNBZ0lDOHZJR1J2SUdseklIUnZJR05vWldOcklHbDBjeUF1Ym1GdFpTQndjbTl3WlhKMGVTNWNiaUFnSUNBZ0lDQWdLR04wYjNJdVpHbHpjR3hoZVU1aGJXVWdmSHdnWTNSdmNpNXVZVzFsS1NBOVBUMGdYQ0pIWlc1bGNtRjBiM0pHZFc1amRHbHZibHdpWEc0Z0lDQWdJQ0E2SUdaaGJITmxPMXh1SUNCOU8xeHVYRzRnSUhKMWJuUnBiV1V1YldGeWF5QTlJR1oxYm1OMGFXOXVLR2RsYmtaMWJpa2dlMXh1SUNBZ0lHbG1JQ2hQWW1wbFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZcElIdGNiaUFnSUNBZ0lFOWlhbVZqZEM1elpYUlFjbTkwYjNSNWNHVlBaaWhuWlc1R2RXNHNJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVVSEp2ZEc5MGVYQmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1oyVnVSblZ1TGw5ZmNISnZkRzlmWHlBOUlFZGxibVZ5WVhSdmNrWjFibU4wYVc5dVVISnZkRzkwZVhCbE8xeHVJQ0FnSUNBZ2FXWWdLQ0VvZEc5VGRISnBibWRVWVdkVGVXMWliMndnYVc0Z1oyVnVSblZ1S1NrZ2UxeHVJQ0FnSUNBZ0lDQm5aVzVHZFc1YmRHOVRkSEpwYm1kVVlXZFRlVzFpYjJ4ZElEMGdYQ0pIWlc1bGNtRjBiM0pHZFc1amRHbHZibHdpTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQm5aVzVHZFc0dWNISnZkRzkwZVhCbElEMGdUMkpxWldOMExtTnlaV0YwWlNoSGNDazdYRzRnSUNBZ2NtVjBkWEp1SUdkbGJrWjFianRjYmlBZ2ZUdGNibHh1SUNBdkx5QlhhWFJvYVc0Z2RHaGxJR0p2WkhrZ2IyWWdZVzU1SUdGemVXNWpJR1oxYm1OMGFXOXVMQ0JnWVhkaGFYUWdlR0FnYVhNZ2RISmhibk5tYjNKdFpXUWdkRzljYmlBZ0x5OGdZSGxwWld4a0lISmxaMlZ1WlhKaGRHOXlVblZ1ZEdsdFpTNWhkM0poY0NoNEtXQXNJSE52SUhSb1lYUWdkR2hsSUhKMWJuUnBiV1VnWTJGdUlIUmxjM1JjYmlBZ0x5OGdZR2hoYzA5M2JpNWpZV3hzS0haaGJIVmxMQ0JjSWw5ZllYZGhhWFJjSWlsZ0lIUnZJR1JsZEdWeWJXbHVaU0JwWmlCMGFHVWdlV2xsYkdSbFpDQjJZV3gxWlNCcGMxeHVJQ0F2THlCdFpXRnVkQ0IwYnlCaVpTQmhkMkZwZEdWa0xseHVJQ0J5ZFc1MGFXMWxMbUYzY21Gd0lEMGdablZ1WTNScGIyNG9ZWEpuS1NCN1hHNGdJQ0FnY21WMGRYSnVJSHNnWDE5aGQyRnBkRG9nWVhKbklIMDdYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnUVhONWJtTkpkR1Z5WVhSdmNpaG5aVzVsY21GMGIzSXBJSHRjYmlBZ0lDQm1kVzVqZEdsdmJpQnBiblp2YTJVb2JXVjBhRzlrTENCaGNtY3NJSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUhSeWVVTmhkR05vS0dkbGJtVnlZWFJ2Y2x0dFpYUm9iMlJkTENCblpXNWxjbUYwYjNJc0lHRnlaeWs3WEc0Z0lDQWdJQ0JwWmlBb2NtVmpiM0prTG5SNWNHVWdQVDA5SUZ3aWRHaHliM2RjSWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb2NtVmpiM0prTG1GeVp5azdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnY21WamIzSmtMbUZ5Wnp0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpoYkhWbElEMGdjbVZ6ZFd4MExuWmhiSFZsTzF4dUlDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnWENKdlltcGxZM1JjSWlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGelQzZHVMbU5oYkd3b2RtRnNkV1VzSUZ3aVgxOWhkMkZwZEZ3aUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9kbUZzZFdVdVgxOWhkMkZwZENrdWRHaGxiaWhtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNTJiMnRsS0Z3aWJtVjRkRndpTENCMllXeDFaU3dnY21WemIyeDJaU3dnY21WcVpXTjBLVHRjYmlBZ0lDQWdJQ0FnSUNCOUxDQm1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1ZG05clpTaGNJblJvY205M1hDSXNJR1Z5Y2l3Z2NtVnpiMngyWlN3Z2NtVnFaV04wS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvZG1Gc2RXVXBMblJvWlc0b1puVnVZM1JwYjI0b2RXNTNjbUZ3Y0dWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUJoSUhscFpXeGtaV1FnVUhKdmJXbHpaU0JwY3lCeVpYTnZiSFpsWkN3Z2FYUnpJR1pwYm1Gc0lIWmhiSFZsSUdKbFkyOXRaWE5jYmlBZ0lDQWdJQ0FnSUNBdkx5QjBhR1VnTG5aaGJIVmxJRzltSUhSb1pTQlFjbTl0YVhObFBIdDJZV3gxWlN4a2IyNWxmVDRnY21WemRXeDBJR1p2Y2lCMGFHVmNiaUFnSUNBZ0lDQWdJQ0F2THlCamRYSnlaVzUwSUdsMFpYSmhkR2x2Ymk0Z1NXWWdkR2hsSUZCeWIyMXBjMlVnYVhNZ2NtVnFaV04wWldRc0lHaHZkMlYyWlhJc0lIUm9aVnh1SUNBZ0lDQWdJQ0FnSUM4dklISmxjM1ZzZENCbWIzSWdkR2hwY3lCcGRHVnlZWFJwYjI0Z2QybHNiQ0JpWlNCeVpXcGxZM1JsWkNCM2FYUm9JSFJvWlNCellXMWxYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2NtVmhjMjl1TGlCT2IzUmxJSFJvWVhRZ2NtVnFaV04wYVc5dWN5QnZaaUI1YVdWc1pHVmtJRkJ5YjIxcGMyVnpJR0Z5WlNCdWIzUmNiaUFnSUNBZ0lDQWdJQ0F2THlCMGFISnZkMjRnWW1GamF5QnBiblJ2SUhSb1pTQm5aVzVsY21GMGIzSWdablZ1WTNScGIyNHNJR0Z6SUdseklIUm9aU0JqWVhObFhHNGdJQ0FnSUNBZ0lDQWdMeThnZDJobGJpQmhiaUJoZDJGcGRHVmtJRkJ5YjIxcGMyVWdhWE1nY21WcVpXTjBaV1F1SUZSb2FYTWdaR2xtWm1WeVpXNWpaU0JwYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJR0psYUdGMmFXOXlJR0psZEhkbFpXNGdlV2xsYkdRZ1lXNWtJR0YzWVdsMElHbHpJR2x0Y0c5eWRHRnVkQ3dnWW1WallYVnpaU0JwZEZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR0ZzYkc5M2N5QjBhR1VnWTI5dWMzVnRaWElnZEc4Z1pHVmphV1JsSUhkb1lYUWdkRzhnWkc4Z2QybDBhQ0IwYUdVZ2VXbGxiR1JsWkZ4dUlDQWdJQ0FnSUNBZ0lDOHZJSEpsYW1WamRHbHZiaUFvYzNkaGJHeHZkeUJwZENCaGJtUWdZMjl1ZEdsdWRXVXNJRzFoYm5WaGJHeDVJQzUwYUhKdmR5QnBkQ0JpWVdOclhHNGdJQ0FnSUNBZ0lDQWdMeThnYVc1MGJ5QjBhR1VnWjJWdVpYSmhkRzl5TENCaFltRnVaRzl1SUdsMFpYSmhkR2x2Yml3Z2QyaGhkR1YyWlhJcExpQlhhWFJvWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZWGRoYVhRc0lHSjVJR052Ym5SeVlYTjBMQ0IwYUdWeVpTQnBjeUJ1YnlCdmNIQnZjblIxYm1sMGVTQjBieUJsZUdGdGFXNWxJSFJvWlZ4dUlDQWdJQ0FnSUNBZ0lDOHZJSEpsYW1WamRHbHZiaUJ5WldGemIyNGdiM1YwYzJsa1pTQjBhR1VnWjJWdVpYSmhkRzl5SUdaMWJtTjBhVzl1TENCemJ5QjBhR1ZjYmlBZ0lDQWdJQ0FnSUNBdkx5QnZibXg1SUc5d2RHbHZiaUJwY3lCMGJ5QjBhSEp2ZHlCcGRDQm1jbTl0SUhSb1pTQmhkMkZwZENCbGVIQnlaWE56YVc5dUxDQmhibVJjYmlBZ0lDQWdJQ0FnSUNBdkx5QnNaWFFnZEdobElHZGxibVZ5WVhSdmNpQm1kVzVqZEdsdmJpQm9ZVzVrYkdVZ2RHaGxJR1Y0WTJWd2RHbHZiaTVjYmlBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1ZG1Gc2RXVWdQU0IxYm5keVlYQndaV1E3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYTjFiSFFwTzF4dUlDQWdJQ0FnSUNCOUxDQnlaV3BsWTNRcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NISnZZMlZ6Y3lBOVBUMGdYQ0p2WW1wbFkzUmNJaUFtSmlCd2NtOWpaWE56TG1SdmJXRnBiaWtnZTF4dUlDQWdJQ0FnYVc1MmIydGxJRDBnY0hKdlkyVnpjeTVrYjIxaGFXNHVZbWx1WkNocGJuWnZhMlVwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCd2NtVjJhVzkxYzFCeWIyMXBjMlU3WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJsYm5GMVpYVmxLRzFsZEdodlpDd2dZWEpuS1NCN1hHNGdJQ0FnSUNCbWRXNWpkR2x2YmlCallXeHNTVzUyYjJ0bFYybDBhRTFsZEdodlpFRnVaRUZ5WnlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsdWRtOXJaU2h0WlhSb2IyUXNJR0Z5Wnl3Z2NtVnpiMngyWlN3Z2NtVnFaV04wS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQndjbVYyYVc5MWMxQnliMjFwYzJVZ1BWeHVJQ0FnSUNBZ0lDQXZMeUJKWmlCbGJuRjFaWFZsSUdoaGN5QmlaV1Z1SUdOaGJHeGxaQ0JpWldadmNtVXNJSFJvWlc0Z2QyVWdkMkZ1ZENCMGJ5QjNZV2wwSUhWdWRHbHNYRzRnSUNBZ0lDQWdJQzh2SUdGc2JDQndjbVYyYVc5MWN5QlFjbTl0YVhObGN5Qm9ZWFpsSUdKbFpXNGdjbVZ6YjJ4MlpXUWdZbVZtYjNKbElHTmhiR3hwYm1jZ2FXNTJiMnRsTEZ4dUlDQWdJQ0FnSUNBdkx5QnpieUIwYUdGMElISmxjM1ZzZEhNZ1lYSmxJR0ZzZDJGNWN5QmtaV3hwZG1WeVpXUWdhVzRnZEdobElHTnZjbkpsWTNRZ2IzSmtaWEl1SUVsbVhHNGdJQ0FnSUNBZ0lDOHZJR1Z1Y1hWbGRXVWdhR0Z6SUc1dmRDQmlaV1Z1SUdOaGJHeGxaQ0JpWldadmNtVXNJSFJvWlc0Z2FYUWdhWE1nYVcxd2IzSjBZVzUwSUhSdlhHNGdJQ0FnSUNBZ0lDOHZJR05oYkd3Z2FXNTJiMnRsSUdsdGJXVmthV0YwWld4NUxDQjNhWFJvYjNWMElIZGhhWFJwYm1jZ2IyNGdZU0JqWVd4c1ltRmpheUIwYnlCbWFYSmxMRnh1SUNBZ0lDQWdJQ0F2THlCemJ5QjBhR0YwSUhSb1pTQmhjM2x1WXlCblpXNWxjbUYwYjNJZ1puVnVZM1JwYjI0Z2FHRnpJSFJvWlNCdmNIQnZjblIxYm1sMGVTQjBieUJrYjF4dUlDQWdJQ0FnSUNBdkx5QmhibmtnYm1WalpYTnpZWEo1SUhObGRIVndJR2x1SUdFZ2NISmxaR2xqZEdGaWJHVWdkMkY1TGlCVWFHbHpJSEJ5WldScFkzUmhZbWxzYVhSNVhHNGdJQ0FnSUNBZ0lDOHZJR2x6SUhkb2VTQjBhR1VnVUhKdmJXbHpaU0JqYjI1emRISjFZM1J2Y2lCemVXNWphSEp2Ym05MWMyeDVJR2x1ZG05clpYTWdhWFJ6WEc0Z0lDQWdJQ0FnSUM4dklHVjRaV04xZEc5eUlHTmhiR3hpWVdOckxDQmhibVFnZDJoNUlHRnplVzVqSUdaMWJtTjBhVzl1Y3lCemVXNWphSEp2Ym05MWMyeDVYRzRnSUNBZ0lDQWdJQzh2SUdWNFpXTjFkR1VnWTI5a1pTQmlaV1p2Y21VZ2RHaGxJR1pwY25OMElHRjNZV2wwTGlCVGFXNWpaU0IzWlNCcGJYQnNaVzFsYm5RZ2MybHRjR3hsWEc0Z0lDQWdJQ0FnSUM4dklHRnplVzVqSUdaMWJtTjBhVzl1Y3lCcGJpQjBaWEp0Y3lCdlppQmhjM2x1WXlCblpXNWxjbUYwYjNKekxDQnBkQ0JwY3lCbGMzQmxZMmxoYkd4NVhHNGdJQ0FnSUNBZ0lDOHZJR2x0Y0c5eWRHRnVkQ0IwYnlCblpYUWdkR2hwY3lCeWFXZG9kQ3dnWlhabGJpQjBhRzkxWjJnZ2FYUWdjbVZ4ZFdseVpYTWdZMkZ5WlM1Y2JpQWdJQ0FnSUNBZ2NISmxkbWx2ZFhOUWNtOXRhWE5sSUQ4Z2NISmxkbWx2ZFhOUWNtOXRhWE5sTG5Sb1pXNG9YRzRnSUNBZ0lDQWdJQ0FnWTJGc2JFbHVkbTlyWlZkcGRHaE5aWFJvYjJSQmJtUkJjbWNzWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdRWFp2YVdRZ2NISnZjR0ZuWVhScGJtY2dabUZwYkhWeVpYTWdkRzhnVUhKdmJXbHpaWE1nY21WMGRYSnVaV1FnWW5rZ2JHRjBaWEpjYmlBZ0lDQWdJQ0FnSUNBdkx5QnBiblp2WTJGMGFXOXVjeUJ2WmlCMGFHVWdhWFJsY21GMGIzSXVYRzRnSUNBZ0lDQWdJQ0FnWTJGc2JFbHVkbTlyWlZkcGRHaE5aWFJvYjJSQmJtUkJjbWRjYmlBZ0lDQWdJQ0FnS1NBNklHTmhiR3hKYm5admEyVlhhWFJvVFdWMGFHOWtRVzVrUVhKbktDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdSR1ZtYVc1bElIUm9aU0IxYm1sbWFXVmtJR2hsYkhCbGNpQnRaWFJvYjJRZ2RHaGhkQ0JwY3lCMWMyVmtJSFJ2SUdsdGNHeGxiV1Z1ZENBdWJtVjRkQ3hjYmlBZ0lDQXZMeUF1ZEdoeWIzY3NJR0Z1WkNBdWNtVjBkWEp1SUNoelpXVWdaR1ZtYVc1bFNYUmxjbUYwYjNKTlpYUm9iMlJ6S1M1Y2JpQWdJQ0IwYUdsekxsOXBiblp2YTJVZ1BTQmxibkYxWlhWbE8xeHVJQ0I5WEc1Y2JpQWdaR1ZtYVc1bFNYUmxjbUYwYjNKTlpYUm9iMlJ6S0VGemVXNWpTWFJsY21GMGIzSXVjSEp2ZEc5MGVYQmxLVHRjYmlBZ2NuVnVkR2x0WlM1QmMzbHVZMGwwWlhKaGRHOXlJRDBnUVhONWJtTkpkR1Z5WVhSdmNqdGNibHh1SUNBdkx5Qk9iM1JsSUhSb1lYUWdjMmx0Y0d4bElHRnplVzVqSUdaMWJtTjBhVzl1Y3lCaGNtVWdhVzF3YkdWdFpXNTBaV1FnYjI0Z2RHOXdJRzltWEc0Z0lDOHZJRUZ6ZVc1alNYUmxjbUYwYjNJZ2IySnFaV04wY3pzZ2RHaGxlU0JxZFhOMElISmxkSFZ5YmlCaElGQnliMjFwYzJVZ1ptOXlJSFJvWlNCMllXeDFaU0J2Wmx4dUlDQXZMeUIwYUdVZ1ptbHVZV3dnY21WemRXeDBJSEJ5YjJSMVkyVmtJR0o1SUhSb1pTQnBkR1Z5WVhSdmNpNWNiaUFnY25WdWRHbHRaUzVoYzNsdVl5QTlJR1oxYm1OMGFXOXVLR2x1Ym1WeVJtNHNJRzkxZEdWeVJtNHNJSE5sYkdZc0lIUnllVXh2WTNOTWFYTjBLU0I3WEc0Z0lDQWdkbUZ5SUdsMFpYSWdQU0J1WlhjZ1FYTjVibU5KZEdWeVlYUnZjaWhjYmlBZ0lDQWdJSGR5WVhBb2FXNXVaWEpHYml3Z2IzVjBaWEpHYml3Z2MyVnNaaXdnZEhKNVRHOWpjMHhwYzNRcFhHNGdJQ0FnS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ5ZFc1MGFXMWxMbWx6UjJWdVpYSmhkRzl5Um5WdVkzUnBiMjRvYjNWMFpYSkdiaWxjYmlBZ0lDQWdJRDhnYVhSbGNpQXZMeUJKWmlCdmRYUmxja1p1SUdseklHRWdaMlZ1WlhKaGRHOXlMQ0J5WlhSMWNtNGdkR2hsSUdaMWJHd2dhWFJsY21GMGIzSXVYRzRnSUNBZ0lDQTZJR2wwWlhJdWJtVjRkQ2dwTG5Sb1pXNG9ablZ1WTNScGIyNG9jbVZ6ZFd4MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2RDNWtiMjVsSUQ4Z2NtVnpkV3gwTG5aaGJIVmxJRG9nYVhSbGNpNXVaWGgwS0NrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNCOU8xeHVYRzRnSUdaMWJtTjBhVzl1SUcxaGEyVkpiblp2YTJWTlpYUm9iMlFvYVc1dVpYSkdiaXdnYzJWc1ppd2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lIWmhjaUJ6ZEdGMFpTQTlJRWRsYmxOMFlYUmxVM1Z6Y0dWdVpHVmtVM1JoY25RN1hHNWNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYVc1MmIydGxLRzFsZEdodlpDd2dZWEpuS1NCN1hHNGdJQ0FnSUNCcFppQW9jM1JoZEdVZ1BUMDlJRWRsYmxOMFlYUmxSWGhsWTNWMGFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWtkbGJtVnlZWFJ2Y2lCcGN5QmhiSEpsWVdSNUlISjFibTVwYm1kY0lpazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoemRHRjBaU0E5UFQwZ1IyVnVVM1JoZEdWRGIyMXdiR1YwWldRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0cxbGRHaHZaQ0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dZWEpuTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnUW1VZ1ptOXlaMmwyYVc1bkxDQndaWElnTWpVdU15NHpMak11TXlCdlppQjBhR1VnYzNCbFl6cGNiaUFnSUNBZ0lDQWdMeThnYUhSMGNITTZMeTl3Wlc5d2JHVXViVzk2YVd4c1lTNXZjbWN2Zm1wdmNtVnVaRzl5Wm1ZdlpYTTJMV1J5WVdaMExtaDBiV3dqYzJWakxXZGxibVZ5WVhSdmNuSmxjM1Z0WlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWkc5dVpWSmxjM1ZzZENncE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjNhR2xzWlNBb2RISjFaU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdaR1ZzWldkaGRHVWdQU0JqYjI1MFpYaDBMbVJsYkdWbllYUmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pHVnNaV2RoZEdVcElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JXVjBhRzlrSUQwOVBTQmNJbkpsZEhWeWJsd2lJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2h0WlhSb2IyUWdQVDA5SUZ3aWRHaHliM2RjSWlBbUppQmtaV3hsWjJGMFpTNXBkR1Z5WVhSdmNsdHRaWFJvYjJSZElEMDlQU0IxYm1SbFptbHVaV1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCQklISmxkSFZ5YmlCdmNpQjBhSEp2ZHlBb2QyaGxiaUIwYUdVZ1pHVnNaV2RoZEdVZ2FYUmxjbUYwYjNJZ2FHRnpJRzV2SUhSb2NtOTNYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnRaWFJvYjJRcElHRnNkMkY1Y3lCMFpYSnRhVzVoZEdWeklIUm9aU0I1YVdWc1pDb2diRzl2Y0M1Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVaR1ZzWldkaGRHVWdQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIwYUdVZ1pHVnNaV2RoZEdVZ2FYUmxjbUYwYjNJZ2FHRnpJR0VnY21WMGRYSnVJRzFsZEdodlpDd2daMmwyWlNCcGRDQmhYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmphR0Z1WTJVZ2RHOGdZMnhsWVc0Z2RYQXVYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbVYwZFhKdVRXVjBhRzlrSUQwZ1pHVnNaV2RoZEdVdWFYUmxjbUYwYjNKYlhDSnlaWFIxY201Y0lsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVYwZFhKdVRXVjBhRzlrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaV052Y21RZ1BTQjBjbmxEWVhSamFDaHlaWFIxY201TlpYUm9iMlFzSUdSbGJHVm5ZWFJsTG1sMFpYSmhkRzl5TENCaGNtY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY21WamIzSmtMblI1Y0dVZ1BUMDlJRndpZEdoeWIzZGNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFbG1JSFJvWlNCeVpYUjFjbTRnYldWMGFHOWtJSFJvY21WM0lHRnVJR1Y0WTJWd2RHbHZiaXdnYkdWMElIUm9ZWFJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCbGVHTmxjSFJwYjI0Z2NISmxkbUZwYkNCdmRtVnlJSFJvWlNCdmNtbG5hVzVoYkNCeVpYUjFjbTRnYjNJZ2RHaHliM2N1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWMGFHOWtJRDBnWENKMGFISnZkMXdpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJSEpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzFsZEdodlpDQTlQVDBnWENKeVpYUjFjbTVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkRiMjUwYVc1MVpTQjNhWFJvSUhSb1pTQnZkWFJsY2lCeVpYUjFjbTRzSUc1dmR5QjBhR0YwSUhSb1pTQmtaV3hsWjJGMFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBkR1Z5WVhSdmNpQm9ZWE1nWW1WbGJpQjBaWEp0YVc1aGRHVmtMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCMllYSWdjbVZqYjNKa0lEMGdkSEo1UTJGMFkyZ29YRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxaMkYwWlM1cGRHVnlZWFJ2Y2x0dFpYUm9iMlJkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzWldkaGRHVXVhWFJsY21GMGIzSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaGNtZGNiaUFnSUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW5Sb2NtOTNYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVaR1ZzWldkaGRHVWdQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5Qk1hV3RsSUhKbGRIVnlibWx1WnlCblpXNWxjbUYwYjNJdWRHaHliM2NvZFc1allYVm5hSFFwTENCaWRYUWdkMmwwYUc5MWRDQjBhR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzkyWlhKb1pXRmtJRzltSUdGdUlHVjRkSEpoSUdaMWJtTjBhVzl1SUdOaGJHd3VYRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYUm9iMlFnUFNCY0luUm9jbTkzWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoY21jZ1BTQnlaV052Y21RdVlYSm5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkR2x1ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdSR1ZzWldkaGRHVWdaMlZ1WlhKaGRHOXlJSEpoYmlCaGJtUWdhR0Z1Wkd4bFpDQnBkSE1nYjNkdUlHVjRZMlZ3ZEdsdmJuTWdjMjljYmlBZ0lDQWdJQ0FnSUNBdkx5QnlaV2RoY21Sc1pYTnpJRzltSUhkb1lYUWdkR2hsSUcxbGRHaHZaQ0IzWVhNc0lIZGxJR052Ym5ScGJuVmxJR0Z6SUdsbUlHbDBJR2x6WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdYQ0p1WlhoMFhDSWdkMmwwYUNCaGJpQjFibVJsWm1sdVpXUWdZWEpuTGx4dUlDQWdJQ0FnSUNBZ0lHMWxkR2h2WkNBOUlGd2libVY0ZEZ3aU8xeHVJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlIVnVaR1ZtYVc1bFpEdGNibHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnBibVp2SUQwZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FXNW1ieTVrYjI1bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNTBaWGgwVzJSbGJHVm5ZWFJsTG5KbGMzVnNkRTVoYldWZElEMGdhVzVtYnk1MllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdWJtVjRkQ0E5SUdSbGJHVm5ZWFJsTG01bGVIUk1iMk03WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVhSbElEMGdSMlZ1VTNSaGRHVlRkWE53Wlc1a1pXUlphV1ZzWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnBibVp2TzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFF1WkdWc1pXZGhkR1VnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFsZEdodlpDQTlQVDBnWENKdVpYaDBYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJUWlhSMGFXNW5JR052Ym5SbGVIUXVYM05sYm5RZ1ptOXlJR3hsWjJGamVTQnpkWEJ3YjNKMElHOW1JRUpoWW1Wc0ozTmNiaUFnSUNBZ0lDQWdJQ0F2THlCbWRXNWpkR2x2Ymk1elpXNTBJR2x0Y0d4bGJXVnVkR0YwYVc5dUxseHVJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVjMlZ1ZENBOUlHTnZiblJsZUhRdVgzTmxiblFnUFNCaGNtYzdYRzVjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNodFpYUm9iMlFnUFQwOUlGd2lkR2h5YjNkY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlNBOVBUMGdSMlZ1VTNSaGRHVlRkWE53Wlc1a1pXUlRkR0Z5ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRHVWdQU0JIWlc1VGRHRjBaVU52YlhCc1pYUmxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUdGeVp6dGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWTI5dWRHVjRkQzVrYVhOd1lYUmphRVY0WTJWd2RHbHZiaWhoY21jcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIwYUdVZ1pHbHpjR0YwWTJobFpDQmxlR05sY0hScGIyNGdkMkZ6SUdOaGRXZG9kQ0JpZVNCaElHTmhkR05vSUdKc2IyTnJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkR2hsYmlCc1pYUWdkR2hoZENCallYUmphQ0JpYkc5amF5Qm9ZVzVrYkdVZ2RHaGxJR1Y0WTJWd2RHbHZiaUJ1YjNKdFlXeHNlUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxkR2h2WkNBOUlGd2libVY0ZEZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhKbklEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzFsZEdodlpDQTlQVDBnWENKeVpYUjFjbTVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVZV0p5ZFhCMEtGd2ljbVYwZFhKdVhDSXNJR0Z5WnlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J6ZEdGMFpTQTlJRWRsYmxOMFlYUmxSWGhsWTNWMGFXNW5PMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaV052Y21RZ1BTQjBjbmxEWVhSamFDaHBibTVsY2tadUxDQnpaV3htTENCamIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsWTI5eVpDNTBlWEJsSUQwOVBTQmNJbTV2Y20xaGJGd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdTV1lnWVc0Z1pYaGpaWEIwYVc5dUlHbHpJSFJvY205M2JpQm1jbTl0SUdsdWJtVnlSbTRzSUhkbElHeGxZWFpsSUhOMFlYUmxJRDA5UFZ4dUlDQWdJQ0FnSUNBZ0lDOHZJRWRsYmxOMFlYUmxSWGhsWTNWMGFXNW5JR0Z1WkNCc2IyOXdJR0poWTJzZ1ptOXlJR0Z1YjNSb1pYSWdhVzUyYjJOaGRHbHZiaTVjYmlBZ0lDQWdJQ0FnSUNCemRHRjBaU0E5SUdOdmJuUmxlSFF1Wkc5dVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnUHlCSFpXNVRkR0YwWlVOdmJYQnNaWFJsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdPaUJIWlc1VGRHRjBaVk4xYzNCbGJtUmxaRmxwWld4a08xeHVYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHbHVabThnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2djbVZqYjNKa0xtRnlaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZibVU2SUdOdmJuUmxlSFF1Wkc5dVpWeHVJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvY21WamIzSmtMbUZ5WnlBOVBUMGdRMjl1ZEdsdWRXVlRaVzUwYVc1bGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR052Ym5SbGVIUXVaR1ZzWldkaGRHVWdKaVlnYldWMGFHOWtJRDA5UFNCY0ltNWxlSFJjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkVaV3hwWW1WeVlYUmxiSGtnWm05eVoyVjBJSFJvWlNCc1lYTjBJSE5sYm5RZ2RtRnNkV1VnYzI4Z2RHaGhkQ0IzWlNCa2IyNG5kRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJoWTJOcFpHVnVkR0ZzYkhrZ2NHRnpjeUJwZENCdmJpQjBieUIwYUdVZ1pHVnNaV2RoZEdVdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsdVptODdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2lkR2h5YjNkY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhOMFlYUmxJRDBnUjJWdVUzUmhkR1ZEYjIxd2JHVjBaV1E3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdSR2x6Y0dGMFkyZ2dkR2hsSUdWNFkyVndkR2x2YmlCaWVTQnNiMjl3YVc1bklHSmhZMnNnWVhKdmRXNWtJSFJ2SUhSb1pWeHVJQ0FnSUNBZ0lDQWdJQzh2SUdOdmJuUmxlSFF1WkdsemNHRjBZMmhGZUdObGNIUnBiMjRvWVhKbktTQmpZV3hzSUdGaWIzWmxMbHh1SUNBZ0lDQWdJQ0FnSUcxbGRHaHZaQ0E5SUZ3aWRHaHliM2RjSWp0Y2JpQWdJQ0FnSUNBZ0lDQmhjbWNnUFNCeVpXTnZjbVF1WVhKbk8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNiaUFnZlZ4dVhHNGdJQzh2SUVSbFptbHVaU0JIWlc1bGNtRjBiM0l1Y0hKdmRHOTBlWEJsTG50dVpYaDBMSFJvY205M0xISmxkSFZ5Ym4wZ2FXNGdkR1Z5YlhNZ2IyWWdkR2hsWEc0Z0lDOHZJSFZ1YVdacFpXUWdMbDlwYm5admEyVWdhR1ZzY0dWeUlHMWxkR2h2WkM1Y2JpQWdaR1ZtYVc1bFNYUmxjbUYwYjNKTlpYUm9iMlJ6S0Vkd0tUdGNibHh1SUNCSGNGdDBiMU4wY21sdVoxUmhaMU41YldKdmJGMGdQU0JjSWtkbGJtVnlZWFJ2Y2x3aU8xeHVYRzRnSUVkd0xuUnZVM1J5YVc1bklEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlGd2lXMjlpYW1WamRDQkhaVzVsY21GMGIzSmRYQ0k3WEc0Z0lIMDdYRzVjYmlBZ1puVnVZM1JwYjI0Z2NIVnphRlJ5ZVVWdWRISjVLR3h2WTNNcElIdGNiaUFnSUNCMllYSWdaVzUwY25rZ1BTQjdJSFJ5ZVV4dll6b2diRzlqYzFzd1hTQjlPMXh1WEc0Z0lDQWdhV1lnS0RFZ2FXNGdiRzlqY3lrZ2UxeHVJQ0FnSUNBZ1pXNTBjbmt1WTJGMFkyaE1iMk1nUFNCc2IyTnpXekZkTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNneUlHbHVJR3h2WTNNcElIdGNiaUFnSUNBZ0lHVnVkSEo1TG1acGJtRnNiSGxNYjJNZ1BTQnNiMk56V3pKZE8xeHVJQ0FnSUNBZ1pXNTBjbmt1WVdaMFpYSk1iMk1nUFNCc2IyTnpXek5kTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWRISjVSVzUwY21sbGN5NXdkWE5vS0dWdWRISjVLVHRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUhKbGMyVjBWSEo1Ulc1MGNua29aVzUwY25rcElIdGNiaUFnSUNCMllYSWdjbVZqYjNKa0lEMGdaVzUwY25rdVkyOXRjR3hsZEdsdmJpQjhmQ0I3ZlR0Y2JpQWdJQ0J5WldOdmNtUXVkSGx3WlNBOUlGd2libTl5YldGc1hDSTdYRzRnSUNBZ1pHVnNaWFJsSUhKbFkyOXlaQzVoY21jN1hHNGdJQ0FnWlc1MGNua3VZMjl0Y0d4bGRHbHZiaUE5SUhKbFkyOXlaRHRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUVOdmJuUmxlSFFvZEhKNVRHOWpjMHhwYzNRcElIdGNiaUFnSUNBdkx5QlVhR1VnY205dmRDQmxiblJ5ZVNCdlltcGxZM1FnS0dWbVptVmpkR2wyWld4NUlHRWdkSEo1SUhOMFlYUmxiV1Z1ZENCM2FYUm9iM1YwSUdFZ1kyRjBZMmhjYmlBZ0lDQXZMeUJ2Y2lCaElHWnBibUZzYkhrZ1lteHZZMnNwSUdkcGRtVnpJSFZ6SUdFZ2NHeGhZMlVnZEc4Z2MzUnZjbVVnZG1Gc2RXVnpJSFJvY205M2JpQm1jbTl0WEc0Z0lDQWdMeThnYkc5allYUnBiMjV6SUhkb1pYSmxJSFJvWlhKbElHbHpJRzV2SUdWdVkyeHZjMmx1WnlCMGNua2djM1JoZEdWdFpXNTBMbHh1SUNBZ0lIUm9hWE11ZEhKNVJXNTBjbWxsY3lBOUlGdDdJSFJ5ZVV4dll6b2dYQ0p5YjI5MFhDSWdmVjA3WEc0Z0lDQWdkSEo1VEc5amMweHBjM1F1Wm05eVJXRmphQ2h3ZFhOb1ZISjVSVzUwY25rc0lIUm9hWE1wTzF4dUlDQWdJSFJvYVhNdWNtVnpaWFFvZEhKMVpTazdYRzRnSUgxY2JseHVJQ0J5ZFc1MGFXMWxMbXRsZVhNZ1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRcElIdGNiaUFnSUNCMllYSWdhMlY1Y3lBOUlGdGRPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCdlltcGxZM1FwSUh0Y2JpQWdJQ0FnSUd0bGVYTXVjSFZ6YUNoclpYa3BPMXh1SUNBZ0lIMWNiaUFnSUNCclpYbHpMbkpsZG1WeWMyVW9LVHRjYmx4dUlDQWdJQzh2SUZKaGRHaGxjaUIwYUdGdUlISmxkSFZ5Ym1sdVp5QmhiaUJ2WW1wbFkzUWdkMmwwYUNCaElHNWxlSFFnYldWMGFHOWtMQ0IzWlNCclpXVndYRzRnSUNBZ0x5OGdkR2hwYm1keklITnBiWEJzWlNCaGJtUWdjbVYwZFhKdUlIUm9aU0J1WlhoMElHWjFibU4wYVc5dUlHbDBjMlZzWmk1Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdibVY0ZENncElIdGNiaUFnSUNBZ0lIZG9hV3hsSUNoclpYbHpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2EyVjVJRDBnYTJWNWN5NXdiM0FvS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR3RsZVNCcGJpQnZZbXBsWTNRcElIdGNiaUFnSUNBZ0lDQWdJQ0J1WlhoMExuWmhiSFZsSUQwZ2EyVjVPMXh1SUNBZ0lDQWdJQ0FnSUc1bGVIUXVaRzl1WlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYaDBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklGUnZJR0YyYjJsa0lHTnlaV0YwYVc1bklHRnVJR0ZrWkdsMGFXOXVZV3dnYjJKcVpXTjBMQ0IzWlNCcWRYTjBJR2hoYm1jZ2RHaGxJQzUyWVd4MVpWeHVJQ0FnSUNBZ0x5OGdZVzVrSUM1a2IyNWxJSEJ5YjNCbGNuUnBaWE1nYjJabUlIUm9aU0J1WlhoMElHWjFibU4wYVc5dUlHOWlhbVZqZENCcGRITmxiR1l1SUZSb2FYTmNiaUFnSUNBZ0lDOHZJR0ZzYzI4Z1pXNXpkWEpsY3lCMGFHRjBJSFJvWlNCdGFXNXBabWxsY2lCM2FXeHNJRzV2ZENCaGJtOXVlVzFwZW1VZ2RHaGxJR1oxYm1OMGFXOXVMbHh1SUNBZ0lDQWdibVY0ZEM1a2IyNWxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdVpYaDBPMXh1SUNBZ0lIMDdYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnZG1Gc2RXVnpLR2wwWlhKaFlteGxLU0I3WEc0Z0lDQWdhV1lnS0dsMFpYSmhZbXhsS1NCN1hHNGdJQ0FnSUNCMllYSWdhWFJsY21GMGIzSk5aWFJvYjJRZ1BTQnBkR1Z5WVdKc1pWdHBkR1Z5WVhSdmNsTjViV0p2YkYwN1hHNGdJQ0FnSUNCcFppQW9hWFJsY21GMGIzSk5aWFJvYjJRcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbDBaWEpoZEc5eVRXVjBhRzlrTG1OaGJHd29hWFJsY21GaWJHVXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdsMFpYSmhZbXhsTG01bGVIUWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWFJsY21GaWJHVTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNnaGFYTk9ZVTRvYVhSbGNtRmliR1V1YkdWdVozUm9LU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdhU0E5SUMweExDQnVaWGgwSUQwZ1puVnVZM1JwYjI0Z2JtVjRkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb0t5dHBJRHdnYVhSbGNtRmliR1V1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGelQzZHVMbU5oYkd3b2FYUmxjbUZpYkdVc0lHa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZUhRdWRtRnNkV1VnUFNCcGRHVnlZV0pzWlZ0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkQzVrYjI1bElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUc1bGVIUXVkbUZzZFdVZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ0lDQWdJQ0FnYm1WNGRDNWtiMjVsSUQwZ2RISjFaVHRjYmx4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYaDBPMXh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYaDBMbTVsZUhRZ1BTQnVaWGgwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZKbGRIVnliaUJoYmlCcGRHVnlZWFJ2Y2lCM2FYUm9JRzV2SUhaaGJIVmxjeTVjYmlBZ0lDQnlaWFIxY200Z2V5QnVaWGgwT2lCa2IyNWxVbVZ6ZFd4MElIMDdYRzRnSUgxY2JpQWdjblZ1ZEdsdFpTNTJZV3gxWlhNZ1BTQjJZV3gxWlhNN1hHNWNiaUFnWm5WdVkzUnBiMjRnWkc5dVpWSmxjM1ZzZENncElIdGNiaUFnSUNCeVpYUjFjbTRnZXlCMllXeDFaVG9nZFc1a1pXWnBibVZrTENCa2IyNWxPaUIwY25WbElIMDdYRzRnSUgxY2JseHVJQ0JEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaU0E5SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2pvZ1EyOXVkR1Y0ZEN4Y2JseHVJQ0FnSUhKbGMyVjBPaUJtZFc1amRHbHZiaWh6YTJsd1ZHVnRjRkpsYzJWMEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG5CeVpYWWdQU0F3TzF4dUlDQWdJQ0FnZEdocGN5NXVaWGgwSUQwZ01EdGNiaUFnSUNBZ0lDOHZJRkpsYzJWMGRHbHVaeUJqYjI1MFpYaDBMbDl6Wlc1MElHWnZjaUJzWldkaFkza2djM1Z3Y0c5eWRDQnZaaUJDWVdKbGJDZHpYRzRnSUNBZ0lDQXZMeUJtZFc1amRHbHZiaTV6Wlc1MElHbHRjR3hsYldWdWRHRjBhVzl1TGx4dUlDQWdJQ0FnZEdocGN5NXpaVzUwSUQwZ2RHaHBjeTVmYzJWdWRDQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJSFJvYVhNdVpHOXVaU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdkR2hwY3k1a1pXeGxaMkYwWlNBOUlHNTFiR3c3WEc1Y2JpQWdJQ0FnSUhSb2FYTXVkSEo1Ulc1MGNtbGxjeTVtYjNKRllXTm9LSEpsYzJWMFZISjVSVzUwY25rcE8xeHVYRzRnSUNBZ0lDQnBaaUFvSVhOcmFYQlVaVzF3VW1WelpYUXBJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYm1GdFpTQnBiaUIwYUdsektTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1RtOTBJSE4xY21VZ1lXSnZkWFFnZEdobElHOXdkR2x0WVd3Z2IzSmtaWElnYjJZZ2RHaGxjMlVnWTI5dVpHbDBhVzl1Y3pwY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYm1GdFpTNWphR0Z5UVhRb01Da2dQVDA5SUZ3aWRGd2lJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYzA5M2JpNWpZV3hzS0hSb2FYTXNJRzVoYldVcElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDRnBjMDVoVGlncmJtRnRaUzV6YkdsalpTZ3hLU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhOYmJtRnRaVjBnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSE4wYjNBNklHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1a2IyNWxJRDBnZEhKMVpUdGNibHh1SUNBZ0lDQWdkbUZ5SUhKdmIzUkZiblJ5ZVNBOUlIUm9hWE11ZEhKNVJXNTBjbWxsYzFzd1hUdGNiaUFnSUNBZ0lIWmhjaUJ5YjI5MFVtVmpiM0prSUQwZ2NtOXZkRVZ1ZEhKNUxtTnZiWEJzWlhScGIyNDdYRzRnSUNBZ0lDQnBaaUFvY205dmRGSmxZMjl5WkM1MGVYQmxJRDA5UFNCY0luUm9jbTkzWENJcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2NtOXZkRkpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSjJZV3c3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR1JwYzNCaGRHTm9SWGhqWlhCMGFXOXVPaUJtZFc1amRHbHZiaWhsZUdObGNIUnBiMjRwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG1SdmJtVXBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2daWGhqWlhCMGFXOXVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IyWVhJZ1kyOXVkR1Y0ZENBOUlIUm9hWE03WEc0Z0lDQWdJQ0JtZFc1amRHbHZiaUJvWVc1a2JHVW9iRzlqTENCallYVm5hSFFwSUh0Y2JpQWdJQ0FnSUNBZ2NtVmpiM0prTG5SNWNHVWdQU0JjSW5Sb2NtOTNYQ0k3WEc0Z0lDQWdJQ0FnSUhKbFkyOXlaQzVoY21jZ1BTQmxlR05sY0hScGIyNDdYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUXVibVY0ZENBOUlHeHZZenRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ0VoWTJGMVoyaDBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2RHaHBjeTUwY25sRmJuUnlhV1Z6TG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTURzZ0xTMXBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxiblJ5ZVNBOUlIUm9hWE11ZEhKNVJXNTBjbWxsYzF0cFhUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUdWdWRISjVMbU52YlhCc1pYUnBiMjQ3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z1ZEhKNUxuUnllVXh2WXlBOVBUMGdYQ0p5YjI5MFhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QkZlR05sY0hScGIyNGdkR2h5YjNkdUlHOTFkSE5wWkdVZ2IyWWdZVzU1SUhSeWVTQmliRzlqYXlCMGFHRjBJR052ZFd4a0lHaGhibVJzWlZ4dUlDQWdJQ0FnSUNBZ0lDOHZJR2wwTENCemJ5QnpaWFFnZEdobElHTnZiWEJzWlhScGIyNGdkbUZzZFdVZ2IyWWdkR2hsSUdWdWRHbHlaU0JtZFc1amRHbHZiaUIwYjF4dUlDQWdJQ0FnSUNBZ0lDOHZJSFJvY205M0lIUm9aU0JsZUdObGNIUnBiMjR1WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdoaGJtUnNaU2hjSW1WdVpGd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsYm5SeWVTNTBjbmxNYjJNZ1BEMGdkR2hwY3k1d2NtVjJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnlJR2hoYzBOaGRHTm9JRDBnYUdGelQzZHVMbU5oYkd3b1pXNTBjbmtzSUZ3aVkyRjBZMmhNYjJOY0lpazdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlHaGhjMFpwYm1Gc2JIa2dQU0JvWVhOUGQyNHVZMkZzYkNobGJuUnllU3dnWENKbWFXNWhiR3g1VEc5alhDSXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2hoYzBOaGRHTm9JQ1ltSUdoaGMwWnBibUZzYkhrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CeVpYWWdQQ0JsYm5SeWVTNWpZWFJqYUV4dll5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHRnVaR3hsS0dWdWRISjVMbU5oZEdOb1RHOWpMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTV3Y21WMklEd2daVzUwY25rdVptbHVZV3hzZVV4dll5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHRnVaR3hsS0dWdWRISjVMbVpwYm1Gc2JIbE1iMk1wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaG9ZWE5EWVhSamFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWNISmxkaUE4SUdWdWRISjVMbU5oZEdOb1RHOWpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm9ZVzVrYkdVb1pXNTBjbmt1WTJGMFkyaE1iMk1zSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNob1lYTkdhVzVoYkd4NUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1d2NtVjJJRHdnWlc1MGNua3VabWx1WVd4c2VVeHZZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdhR0Z1Wkd4bEtHVnVkSEo1TG1acGJtRnNiSGxNYjJNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5SeWVTQnpkR0YwWlcxbGJuUWdkMmwwYUc5MWRDQmpZWFJqYUNCdmNpQm1hVzVoYkd4NVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCaFluSjFjSFE2SUdaMWJtTjBhVzl1S0hSNWNHVXNJR0Z5WnlrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJSFJvYVhNdWRISjVSVzUwY21sbGN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJQzB0YVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlc1MGNua2dQU0IwYUdsekxuUnllVVZ1ZEhKcFpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxiblJ5ZVM1MGNubE1iMk1nUEQwZ2RHaHBjeTV3Y21WMklDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCb1lYTlBkMjR1WTJGc2JDaGxiblJ5ZVN3Z1hDSm1hVzVoYkd4NVRHOWpYQ0lwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnlaWFlnUENCbGJuUnllUzVtYVc1aGJHeDVURzlqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZ5SUdacGJtRnNiSGxGYm5SeWVTQTlJR1Z1ZEhKNU8xeHVJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNobWFXNWhiR3g1Ulc1MGNua2dKaVpjYmlBZ0lDQWdJQ0FnSUNBb2RIbHdaU0E5UFQwZ1hDSmljbVZoYTF3aUlIeDhYRzRnSUNBZ0lDQWdJQ0FnSUhSNWNHVWdQVDA5SUZ3aVkyOXVkR2x1ZFdWY0lpa2dKaVpjYmlBZ0lDQWdJQ0FnSUNCbWFXNWhiR3g1Ulc1MGNua3VkSEo1VEc5aklEdzlJR0Z5WnlBbUpseHVJQ0FnSUNBZ0lDQWdJR0Z5WnlBOFBTQm1hVzVoYkd4NVJXNTBjbmt1Wm1sdVlXeHNlVXh2WXlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJKWjI1dmNtVWdkR2hsSUdacGJtRnNiSGtnWlc1MGNua2dhV1lnWTI5dWRISnZiQ0JwY3lCdWIzUWdhblZ0Y0dsdVp5QjBieUJoWEc0Z0lDQWdJQ0FnSUM4dklHeHZZMkYwYVc5dUlHOTFkSE5wWkdVZ2RHaGxJSFJ5ZVM5allYUmphQ0JpYkc5amF5NWNiaUFnSUNBZ0lDQWdabWx1WVd4c2VVVnVkSEo1SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZG1GeUlISmxZMjl5WkNBOUlHWnBibUZzYkhsRmJuUnllU0EvSUdacGJtRnNiSGxGYm5SeWVTNWpiMjF3YkdWMGFXOXVJRG9nZTMwN1hHNGdJQ0FnSUNCeVpXTnZjbVF1ZEhsd1pTQTlJSFI1Y0dVN1hHNGdJQ0FnSUNCeVpXTnZjbVF1WVhKbklEMGdZWEpuTzF4dVhHNGdJQ0FnSUNCcFppQW9abWx1WVd4c2VVVnVkSEo1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1WNGRDQTlJR1pwYm1Gc2JIbEZiblJ5ZVM1bWFXNWhiR3g1VEc5ak8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjIxd2JHVjBaU2h5WldOdmNtUXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdRMjl1ZEdsdWRXVlRaVzUwYVc1bGJEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1kyOXRjR3hsZEdVNklHWjFibU4wYVc5dUtISmxZMjl5WkN3Z1lXWjBaWEpNYjJNcElIdGNiaUFnSUNBZ0lHbG1JQ2h5WldOdmNtUXVkSGx3WlNBOVBUMGdYQ0owYUhKdmQxd2lLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJSEpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaHlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSmljbVZoYTF3aUlIeDhYRzRnSUNBZ0lDQWdJQ0FnY21WamIzSmtMblI1Y0dVZ1BUMDlJRndpWTI5dWRHbHVkV1ZjSWlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG01bGVIUWdQU0J5WldOdmNtUXVZWEpuTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKeVpYUjFjbTVjSWlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KMllXd2dQU0J5WldOdmNtUXVZWEpuTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTVsZUhRZ1BTQmNJbVZ1WkZ3aU8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSnViM0p0WVd4Y0lpQW1KaUJoWm5SbGNreHZZeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTVsZUhRZ1BTQmhablJsY2t4dll6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ1ptbHVhWE5vT2lCbWRXNWpkR2x2YmlobWFXNWhiR3g1VEc5aktTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnZEdocGN5NTBjbmxGYm5SeWFXVnpMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnTFMxcEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJuUnllU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z1ZEhKNUxtWnBibUZzYkhsTWIyTWdQVDA5SUdacGJtRnNiSGxNYjJNcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiWEJzWlhSbEtHVnVkSEo1TG1OdmJYQnNaWFJwYjI0c0lHVnVkSEo1TG1GbWRHVnlURzlqS1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE5sZEZSeWVVVnVkSEo1S0dWdWRISjVLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUTI5dWRHbHVkV1ZUWlc1MGFXNWxiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JjSW1OaGRHTm9YQ0k2SUdaMWJtTjBhVzl1S0hSeWVVeHZZeWtnZTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlIUm9hWE11ZEhKNVJXNTBjbWxsY3k1c1pXNW5kR2dnTFNBeE95QnBJRDQ5SURBN0lDMHRhU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdaVzUwY25rZ1BTQjBhR2x6TG5SeWVVVnVkSEpwWlhOYmFWMDdYRzRnSUNBZ0lDQWdJR2xtSUNobGJuUnllUzUwY25sTWIyTWdQVDA5SUhSeWVVeHZZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ5WldOdmNtUWdQU0JsYm5SeWVTNWpiMjF3YkdWMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkR2h5YjNkdUlEMGdjbVZqYjNKa0xtRnlaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMlYwVkhKNVJXNTBjbmtvWlc1MGNua3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHliM2R1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRlJvWlNCamIyNTBaWGgwTG1OaGRHTm9JRzFsZEdodlpDQnRkWE4wSUc5dWJIa2dZbVVnWTJGc2JHVmtJSGRwZEdnZ1lTQnNiMk5oZEdsdmJseHVJQ0FnSUNBZ0x5OGdZWEpuZFcxbGJuUWdkR2hoZENCamIzSnlaWE53YjI1a2N5QjBieUJoSUd0dWIzZHVJR05oZEdOb0lHSnNiMk5yTGx4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpYVd4c1pXZGhiQ0JqWVhSamFDQmhkSFJsYlhCMFhDSXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmtaV3hsWjJGMFpWbHBaV3hrT2lCbWRXNWpkR2x2YmlocGRHVnlZV0pzWlN3Z2NtVnpkV3gwVG1GdFpTd2dibVY0ZEV4dll5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1a1pXeGxaMkYwWlNBOUlIdGNiaUFnSUNBZ0lDQWdhWFJsY21GMGIzSTZJSFpoYkhWbGN5aHBkR1Z5WVdKc1pTa3NYRzRnSUNBZ0lDQWdJSEpsYzNWc2RFNWhiV1U2SUhKbGMzVnNkRTVoYldVc1hHNGdJQ0FnSUNBZ0lHNWxlSFJNYjJNNklHNWxlSFJNYjJOY2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCRGIyNTBhVzUxWlZObGJuUnBibVZzTzF4dUlDQWdJSDFjYmlBZ2ZUdGNibjBwS0Z4dUlDQXZMeUJCYlc5dVp5QjBhR1VnZG1GeWFXOTFjeUIwY21samEzTWdabTl5SUc5aWRHRnBibWx1WnlCaElISmxabVZ5Wlc1alpTQjBieUIwYUdVZ1oyeHZZbUZzWEc0Z0lDOHZJRzlpYW1WamRDd2dkR2hwY3lCelpXVnRjeUIwYnlCaVpTQjBhR1VnYlc5emRDQnlaV3hwWVdKc1pTQjBaV05vYm1seGRXVWdkR2hoZENCa2IyVnpJRzV2ZEZ4dUlDQXZMeUIxYzJVZ2FXNWthWEpsWTNRZ1pYWmhiQ0FvZDJocFkyZ2dkbWx2YkdGMFpYTWdRMjl1ZEdWdWRDQlRaV04xY21sMGVTQlFiMnhwWTNrcExseHVJQ0IwZVhCbGIyWWdaMnh2WW1Gc0lEMDlQU0JjSW05aWFtVmpkRndpSUQ4Z1oyeHZZbUZzSURwY2JpQWdkSGx3Wlc5bUlIZHBibVJ2ZHlBOVBUMGdYQ0p2WW1wbFkzUmNJaUEvSUhkcGJtUnZkeUE2WEc0Z0lIUjVjR1Z2WmlCelpXeG1JRDA5UFNCY0ltOWlhbVZqZEZ3aUlEOGdjMlZzWmlBNklIUm9hWE5jYmlrN1hHNGlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNWNiaTh2SUVScGMzUnlhV0oxZEdsdmJpQm1hV3hsSUdadmNpQk5aWE56WVdkbFJtRmpkRzl5ZVM1cWN5QmNiaTh2SUhabGNuTnBiMjQ2SURBdU5TNHhYRzR2THlCTVlYTjBJR0oxYVd4a09pQlVhSFVnUkdWaklESXlJREl3TVRZZ01UQTZNRGc2TURrZ1IwMVVLekF3TURBZ0tGZEZWQ2xjYmx4dUlXWjFibU4wYVc5dUtHVXBlMmxtS0Z3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCbGVIQnZjblJ6SmlaY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdiVzlrZFd4bEtXMXZaSFZzWlM1bGVIQnZjblJ6UFdVb0tUdGxiSE5sSUdsbUtGd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JR1JsWm1sdVpTWW1aR1ZtYVc1bExtRnRaQ2xrWldacGJtVW9XMTBzWlNrN1pXeHpaWHQyWVhJZ2REdDBQVndpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCM2FXNWtiM2MvZDJsdVpHOTNPbHdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCbmJHOWlZV3cvWjJ4dlltRnNPbHdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCelpXeG1QM05sYkdZNmRHaHBjeXgwTGsxbGMzTmhaMlZHWVdOMGIzSjVQV1VvS1gxOUtHWjFibU4wYVc5dUtDbDdkbUZ5SUdVN2NtVjBkWEp1SUdaMWJtTjBhVzl1SUhRb1pTeHlMRzRwZTJaMWJtTjBhVzl1SUc4b1lTeHpLWHRwWmlnaGNsdGhYU2w3YVdZb0lXVmJZVjBwZTNaaGNpQjFQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUhKbGNYVnBjbVVtSm5KbGNYVnBjbVU3YVdZb0lYTW1KblVwY21WMGRYSnVJSFVvWVN3aE1DazdhV1lvYVNseVpYUjFjbTRnYVNoaExDRXdLVHQyWVhJZ1l6MXVaWGNnUlhKeWIzSW9YQ0pEWVc1dWIzUWdabWx1WkNCdGIyUjFiR1VnSjF3aUsyRXJYQ0luWENJcE8zUm9jbTkzSUdNdVkyOWtaVDFjSWsxUFJGVk1SVjlPVDFSZlJrOVZUa1JjSWl4amZYWmhjaUJzUFhKYllWMDllMlY0Y0c5eWRITTZlMzE5TzJWYllWMWJNRjB1WTJGc2JDaHNMbVY0Y0c5eWRITXNablZ1WTNScGIyNG9kQ2w3ZG1GeUlISTlaVnRoWFZzeFhWdDBYVHR5WlhSMWNtNGdieWh5UDNJNmRDbDlMR3dzYkM1bGVIQnZjblJ6TEhRc1pTeHlMRzRwZlhKbGRIVnliaUJ5VzJGZExtVjRjRzl5ZEhOOVptOXlLSFpoY2lCcFBWd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JSEpsY1hWcGNtVW1KbkpsY1hWcGNtVXNZVDB3TzJFOGJpNXNaVzVuZEdnN1lTc3JLVzhvYmx0aFhTazdjbVYwZFhKdUlHOTlLSHN4T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFh0Y0ltUmxabUYxYkhSY0lqcGxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDJwemIyNHZjM1J5YVc1bmFXWjVYQ0lwTEY5ZlpYTk5iMlIxYkdVNklUQjlmU3g3WENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmFuTnZiaTl6ZEhKcGJtZHBabmxjSWpveE5uMWRMREk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05ZTF3aVpHVm1ZWFZzZEZ3aU9tVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMk55WldGMFpWd2lLU3hmWDJWelRXOWtkV3hsT2lFd2ZYMHNlMXdpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzlqY21WaGRHVmNJam94TjMxZExETTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTllMXdpWkdWbVlYVnNkRndpT21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwyUmxabWx1WlMxd2NtOXdaWEowZVZ3aUtTeGZYMlZ6VFc5a2RXeGxPaUV3Zlgwc2Uxd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhsY0lqb3hPSDFkTERRNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOWUxd2laR1ZtWVhWc2RGd2lPbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJaeVpXVjZaVndpS1N4ZlgyVnpUVzlrZFd4bE9pRXdmWDBzZTF3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5bWNtVmxlbVZjSWpveE9YMWRMRFU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05ZTF3aVpHVm1ZWFZzZEZ3aU9tVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMmRsZEMxd2NtOTBiM1I1Y0dVdGIyWmNJaWtzWDE5bGMwMXZaSFZzWlRvaE1IMTlMSHRjSW1OdmNtVXRhbk12YkdsaWNtRnllUzltYmk5dlltcGxZM1F2WjJWMExYQnliM1J2ZEhsd1pTMXZabHdpT2pJd2ZWMHNOanBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejE3WENKa1pXWmhkV3gwWENJNlpTaGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZhMlY1YzF3aUtTeGZYMlZ6VFc5a2RXeGxPaUV3Zlgwc2Uxd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOXJaWGx6WENJNk1qRjlYU3czT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFh0Y0ltUmxabUYxYkhSY0lqcGxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzl6WlhRdGNISnZkRzkwZVhCbExXOW1YQ0lwTEY5ZlpYTk5iMlIxYkdVNklUQjlmU3g3WENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMlpjSWpveU1uMWRMRGc2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05ZTF3aVpHVm1ZWFZzZEZ3aU9tVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YzNsdFltOXNYQ0lwTEY5ZlpYTk5iMlIxYkdVNklUQjlmU3g3WENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmMzbHRZbTlzWENJNk1qTjlYU3c1T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFh0Y0ltUmxabUYxYkhSY0lqcGxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDNONWJXSnZiQzlwZEdWeVlYUnZjbHdpS1N4ZlgyVnpUVzlrZFd4bE9pRXdmWDBzZTF3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGRHVnlZWFJ2Y2x3aU9qSTBmVjBzTVRBNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanR5TGw5ZlpYTk5iMlIxYkdVOUlUQXNjbHRjSW1SbFptRjFiSFJjSWwwOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmlnaEtHVWdhVzV6ZEdGdVkyVnZaaUIwS1NsMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtGd2lRMkZ1Ym05MElHTmhiR3dnWVNCamJHRnpjeUJoY3lCaElHWjFibU4wYVc5dVhDSXBmWDBzZTMxZExERXhPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2JpaGxLWHR5WlhSMWNtNGdaU1ltWlM1ZlgyVnpUVzlrZFd4bFAyVTZlMXdpWkdWbVlYVnNkRndpT21WOWZYSXVYMTlsYzAxdlpIVnNaVDBoTUR0MllYSWdiejFsS0Z3aUxpNHZZMjl5WlMxcWN5OXZZbXBsWTNRdlpHVm1hVzVsTFhCeWIzQmxjblI1WENJcExHazliaWh2S1R0eVcxd2laR1ZtWVhWc2RGd2lYVDFtZFc1amRHbHZiaWdwZTJaMWJtTjBhVzl1SUdVb1pTeDBLWHRtYjNJb2RtRnlJSEk5TUR0eVBIUXViR1Z1WjNSb08zSXJLeWw3ZG1GeUlHNDlkRnR5WFR0dUxtVnVkVzFsY21GaWJHVTliaTVsYm5WdFpYSmhZbXhsZkh3aE1TeHVMbU52Ym1acFozVnlZV0pzWlQwaE1DeGNJblpoYkhWbFhDSnBiaUJ1SmlZb2JpNTNjbWwwWVdKc1pUMGhNQ2tzS0RBc2FWdGNJbVJsWm1GMWJIUmNJbDBwS0dVc2JpNXJaWGtzYmlsOWZYSmxkSFZ5YmlCbWRXNWpkR2x2YmloMExISXNiaWw3Y21WMGRYSnVJSEltSm1Vb2RDNXdjbTkwYjNSNWNHVXNjaWtzYmlZbVpTaDBMRzRwTEhSOWZTZ3BmU3g3WENJdUxpOWpiM0psTFdwekwyOWlhbVZqZEM5a1pXWnBibVV0Y0hKdmNHVnlkSGxjSWpvemZWMHNNVEk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRjSW5WelpTQnpkSEpwWTNSY0lqdG1kVzVqZEdsdmJpQnVLR1VwZTNKbGRIVnliaUJsSmlabExsOWZaWE5OYjJSMWJHVS9aVHA3WENKa1pXWmhkV3gwWENJNlpYMTljaTVmWDJWelRXOWtkV3hsUFNFd08zWmhjaUJ2UFdVb1hDSXVMaTlqYjNKbExXcHpMMjlpYW1WamRDOXpaWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSXBMR2s5YmlodktTeGhQV1VvWENJdUxpOWpiM0psTFdwekwyOWlhbVZqZEM5amNtVmhkR1ZjSWlrc2N6MXVLR0VwTEhVOVpTaGNJaTR1TDJobGJIQmxjbk12ZEhsd1pXOW1YQ0lwTEdNOWJpaDFLVHR5VzF3aVpHVm1ZWFZzZEZ3aVhUMW1kVzVqZEdsdmJpaGxMSFFwZTJsbUtGd2lablZ1WTNScGIyNWNJaUU5ZEhsd1pXOW1JSFFtSm01MWJHd2hQVDEwS1hSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSlRkWEJsY2lCbGVIQnlaWE56YVc5dUlHMTFjM1FnWldsMGFHVnlJR0psSUc1MWJHd2diM0lnWVNCbWRXNWpkR2x2Yml3Z2JtOTBJRndpS3loY0luVnVaR1ZtYVc1bFpGd2lQVDEwZVhCbGIyWWdkRDljSW5WdVpHVm1hVzVsWkZ3aU9pZ3dMR05iWENKa1pXWmhkV3gwWENKZEtTaDBLU2twTzJVdWNISnZkRzkwZVhCbFBTZ3dMSE5iWENKa1pXWmhkV3gwWENKZEtTaDBKaVowTG5CeWIzUnZkSGx3WlN4N1kyOXVjM1J5ZFdOMGIzSTZlM1poYkhWbE9tVXNaVzUxYldWeVlXSnNaVG9oTVN4M2NtbDBZV0pzWlRvaE1DeGpiMjVtYVdkMWNtRmliR1U2SVRCOWZTa3NkQ1ltS0dsYlhDSmtaV1poZFd4MFhDSmRQeWd3TEdsYlhDSmtaV1poZFd4MFhDSmRLU2hsTEhRcE9tVXVYMTl3Y205MGIxOWZQWFFwZlgwc2Uxd2lMaTR2WTI5eVpTMXFjeTl2WW1wbFkzUXZZM0psWVhSbFhDSTZNaXhjSWk0dUwyTnZjbVV0YW5NdmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMlpjSWpvM0xGd2lMaTR2YUdWc2NHVnljeTkwZVhCbGIyWmNJam94TkgxZExERXpPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2JpaGxLWHR5WlhSMWNtNGdaU1ltWlM1ZlgyVnpUVzlrZFd4bFAyVTZlMXdpWkdWbVlYVnNkRndpT21WOWZYSXVYMTlsYzAxdlpIVnNaVDBoTUR0MllYSWdiejFsS0Z3aUxpNHZhR1ZzY0dWeWN5OTBlWEJsYjJaY0lpa3NhVDF1S0c4cE8zSmJYQ0prWldaaGRXeDBYQ0pkUFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvSVdVcGRHaHliM2NnYm1WM0lGSmxabVZ5Wlc1alpVVnljbTl5S0Z3aWRHaHBjeUJvWVhOdUozUWdZbVZsYmlCcGJtbDBhV0ZzYVhObFpDQXRJSE4xY0dWeUtDa2dhR0Z6YmlkMElHSmxaVzRnWTJGc2JHVmtYQ0lwTzNKbGRIVnliaUYwZkh4Y0ltOWlhbVZqZEZ3aUlUMDlLRndpZFc1a1pXWnBibVZrWENJOVBYUjVjR1Z2WmlCMFAxd2lkVzVrWldacGJtVmtYQ0k2S0RBc2FWdGNJbVJsWm1GMWJIUmNJbDBwS0hRcEtTWW1YQ0ptZFc1amRHbHZibHdpSVQxMGVYQmxiMllnZEQ5bE9uUjlmU3g3WENJdUxpOW9aV3h3WlhKekwzUjVjR1Z2Wmx3aU9qRTBmVjBzTVRRNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanRtZFc1amRHbHZiaUJ1S0dVcGUzSmxkSFZ5YmlCbEppWmxMbDlmWlhOTmIyUjFiR1UvWlRwN1hDSmtaV1poZFd4MFhDSTZaWDE5Y2k1ZlgyVnpUVzlrZFd4bFBTRXdPM1poY2lCdlBXVW9YQ0l1TGk5amIzSmxMV3B6TDNONWJXSnZiQzlwZEdWeVlYUnZjbHdpS1N4cFBXNG9ieWtzWVQxbEtGd2lMaTR2WTI5eVpTMXFjeTl6ZVcxaWIyeGNJaWtzY3oxdUtHRXBMSFU5WENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2MxdGNJbVJsWm1GMWJIUmNJbDBtSmx3aWMzbHRZbTlzWENJOVBYUjVjR1Z2WmlCcFcxd2laR1ZtWVhWc2RGd2lYVDltZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnZEhsd1pXOW1JR1Y5T21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbEppWmNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJ6VzF3aVpHVm1ZWFZzZEZ3aVhTWW1aUzVqYjI1emRISjFZM1J2Y2owOVBYTmJYQ0prWldaaGRXeDBYQ0pkSmlabElUMDljMXRjSW1SbFptRjFiSFJjSWwwdWNISnZkRzkwZVhCbFAxd2ljM2x0WW05c1hDSTZkSGx3Wlc5bUlHVjlPM0piWENKa1pXWmhkV3gwWENKZFBWd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JSE5iWENKa1pXWmhkV3gwWENKZEppWmNJbk41YldKdmJGd2lQVDA5ZFNocFcxd2laR1ZtWVhWc2RGd2lYU2svWm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1WENKMWJtUmxabWx1WldSY0lqMDlkSGx3Wlc5bUlHVS9YQ0oxYm1SbFptbHVaV1JjSWpwMUtHVXBmVHBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlNZbVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdjMXRjSW1SbFptRjFiSFJjSWwwbUptVXVZMjl1YzNSeWRXTjBiM0k5UFQxelcxd2laR1ZtWVhWc2RGd2lYU1ltWlNFOVBYTmJYQ0prWldaaGRXeDBYQ0pkTG5CeWIzUnZkSGx3WlQ5Y0luTjViV0p2YkZ3aU9sd2lkVzVrWldacGJtVmtYQ0k5UFhSNWNHVnZaaUJsUDF3aWRXNWtaV1pwYm1Wa1hDSTZkU2hsS1gxOUxIdGNJaTR1TDJOdmNtVXRhbk12YzNsdFltOXNYQ0k2T0N4Y0lpNHVMMk52Y21VdGFuTXZjM2x0WW05c0wybDBaWEpoZEc5eVhDSTZPWDFkTERFMU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RDNWxlSEJ2Y25SelBXVW9YQ0p5WldkbGJtVnlZWFJ2Y2kxeWRXNTBhVzFsWENJcGZTeDdYQ0p5WldkbGJtVnlZWFJ2Y2kxeWRXNTBhVzFsWENJNk9UZDlYU3d4TmpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbFhDSXBMRzg5Ymk1S1UwOU9mSHdvYmk1S1UwOU9QWHR6ZEhKcGJtZHBabms2U2xOUFRpNXpkSEpwYm1kcFpubDlLVHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUc4dWMzUnlhVzVuYVdaNUxtRndjR3g1S0c4c1lYSm5kVzFsYm5SektYMTlMSHRjSWk0dUx5NHVMMjF2WkhWc1pYTXZYMk52Y21WY0lqb3pNSDFkTERFM09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1pTaGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWpjbVZoZEdWY0lpazdkbUZ5SUc0OVpTaGNJaTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVZjSWlrdVQySnFaV04wTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQnVMbU55WldGMFpTaGxMSFFwZlgwc2Uxd2lMaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaVndpT2pNd0xGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtTnlaV0YwWlZ3aU9qZzBmVjBzTVRnNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0bEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtUmxabWx1WlMxd2NtOXdaWEowZVZ3aUtUdDJZWElnYmoxbEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5ZlkyOXlaVndpS1M1UFltcGxZM1E3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVc2RDeHlLWHR5WlhSMWNtNGdiaTVrWldacGJtVlFjbTl3WlhKMGVTaGxMSFFzY2lsOWZTeDdYQ0l1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psWENJNk16QXNYQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaR1ZtYVc1bExYQnliM0JsY25SNVhDSTZPRFY5WFN3eE9UcGJablZ1WTNScGIyNG9aU3gwTEhJcGUyVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVabkpsWlhwbFhDSXBMSFF1Wlhod2IzSjBjejFsS0Z3aUxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpWd2lLUzVQWW1wbFkzUXVabkpsWlhwbGZTeDdYQ0l1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psWENJNk16QXNYQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVabkpsWlhwbFhDSTZPRFo5WFN3eU1EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUyVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lLU3gwTG1WNGNHOXlkSE05WlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12WDJOdmNtVmNJaWt1VDJKcVpXTjBMbWRsZEZCeWIzUnZkSGx3WlU5bWZTeDdYQ0l1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psWENJNk16QXNYQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVaMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lPamczZlYwc01qRTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdGxLRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbXRsZVhOY0lpa3NkQzVsZUhCdmNuUnpQV1VvWENJdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbFhDSXBMazlpYW1WamRDNXJaWGx6ZlN4N1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxYQ0k2TXpBc1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWEyVjVjMXdpT2pnNGZWMHNNakk2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHRsS0Z3aUxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5ObGRDMXdjbTkwYjNSNWNHVXRiMlpjSWlrc2RDNWxlSEJ2Y25SelBXVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psWENJcExrOWlhbVZqZEM1elpYUlFjbTkwYjNSNWNHVlBabjBzZTF3aUxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpWd2lPak13TEZ3aUxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5ObGRDMXdjbTkwYjNSNWNHVXRiMlpjSWpvNE9YMWRMREl6T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12WlhNMkxuTjViV0p2YkZ3aUtTeGxLRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMblJ2TFhOMGNtbHVaMXdpS1N4bEtGd2lMaTR2TGk0dmJXOWtkV3hsY3k5bGN6Y3VjM2x0WW05c0xtRnplVzVqTFdsMFpYSmhkRzl5WENJcExHVW9YQ0l1TGk4dUxpOXRiMlIxYkdWekwyVnpOeTV6ZVcxaWIyd3ViMkp6WlhKMllXSnNaVndpS1N4MExtVjRjRzl5ZEhNOVpTaGNJaTR1THk0dUwyMXZaSFZzWlhNdlgyTnZjbVZjSWlrdVUzbHRZbTlzZlN4N1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxYQ0k2TXpBc1hDSXVMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWRHOHRjM1J5YVc1blhDSTZPVEFzWENJdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1emVXMWliMnhjSWpvNU1peGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTNMbk41YldKdmJDNWhjM2x1WXkxcGRHVnlZWFJ2Y2x3aU9qa3pMRndpTGk0dkxpNHZiVzlrZFd4bGN5OWxjemN1YzNsdFltOXNMbTlpYzJWeWRtRmliR1ZjSWpvNU5IMWRMREkwT2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WlNoY0lpNHVMeTR1TDIxdlpIVnNaWE12WlhNMkxuTjBjbWx1Wnk1cGRHVnlZWFJ2Y2x3aUtTeGxLRndpTGk0dkxpNHZiVzlrZFd4bGN5OTNaV0l1Wkc5dExtbDBaWEpoWW14bFhDSXBMSFF1Wlhod2IzSjBjejFsS0Z3aUxpNHZMaTR2Ylc5a2RXeGxjeTlmZDJ0ekxXVjRkRndpS1M1bUtGd2lhWFJsY21GMGIzSmNJaWw5TEh0Y0lpNHVMeTR1TDIxdlpIVnNaWE12WDNkcmN5MWxlSFJjSWpvNE1TeGNJaTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXBkR1Z5WVhSdmNsd2lPamt4TEZ3aUxpNHZMaTR2Ylc5a2RXeGxjeTkzWldJdVpHOXRMbWwwWlhKaFlteGxYQ0k2T1RWOVhTd3lOVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsS1h0cFppaGNJbVoxYm1OMGFXOXVYQ0loUFhSNWNHVnZaaUJsS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhsSzF3aUlHbHpJRzV2ZENCaElHWjFibU4wYVc5dUlWd2lLVHR5WlhSMWNtNGdaWDE5TEh0OVhTd3lOanBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWdwZTMxOUxIdDlYU3d5TnpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOXBjeTF2WW1wbFkzUmNJaWs3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVcGUybG1LQ0Z1S0dVcEtYUm9jbTkzSUZSNWNHVkZjbkp2Y2lobEsxd2lJR2x6SUc1dmRDQmhiaUJ2WW1wbFkzUWhYQ0lwTzNKbGRIVnliaUJsZlgwc2Uxd2lMaTlmYVhNdGIySnFaV04wWENJNk5EWjlYU3d5T0RwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOTBieTFwYjJKcVpXTjBYQ0lwTEc4OVpTaGNJaTR2WDNSdkxXeGxibWQwYUZ3aUtTeHBQV1VvWENJdUwxOTBieTFwYm1SbGVGd2lLVHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdaMWJtTjBhVzl1S0hRc2NpeGhLWHQyWVhJZ2N5eDFQVzRvZENrc1l6MXZLSFV1YkdWdVozUm9LU3hzUFdrb1lTeGpLVHRwWmlobEppWnlJVDF5S1h0bWIzSW9PMk0rYkRzcGFXWW9jejExVzJ3cksxMHNjeUU5Y3lseVpYUjFjbTRoTUgxbGJITmxJR1p2Y2lnN1l6NXNPMndyS3lscFppZ29aWHg4YkNCcGJpQjFLU1ltZFZ0c1hUMDlQWElwY21WMGRYSnVJR1Y4Zkd4OGZEQTdjbVYwZFhKdUlXVW1KaTB4ZlgxOUxIdGNJaTR2WDNSdkxXbHVaR1Y0WENJNk56TXNYQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSTZOelVzWENJdUwxOTBieTFzWlc1bmRHaGNJam8zTm4xZExESTVPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWUzMHVkRzlUZEhKcGJtYzdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ1TG1OaGJHd29aU2t1YzJ4cFkyVW9PQ3d0TVNsOWZTeDdmVjBzTXpBNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajEwTG1WNGNHOXlkSE05ZTNabGNuTnBiMjQ2WENJeUxqUXVNRndpZlR0Y0ltNTFiV0psY2x3aVBUMTBlWEJsYjJZZ1gxOWxKaVlvWDE5bFBXNHBmU3g3ZlYwc016RTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmWVMxbWRXNWpkR2x2Ymx3aUtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwTEhJcGUybG1LRzRvWlNrc2RtOXBaQ0F3UFQwOWRDbHlaWFIxY200Z1pUdHpkMmwwWTJnb2NpbDdZMkZ6WlNBeE9uSmxkSFZ5YmlCbWRXNWpkR2x2YmloeUtYdHlaWFIxY200Z1pTNWpZV3hzS0hRc2NpbDlPMk5oYzJVZ01qcHlaWFIxY200Z1puVnVZM1JwYjI0b2NpeHVLWHR5WlhSMWNtNGdaUzVqWVd4c0tIUXNjaXh1S1gwN1kyRnpaU0F6T25KbGRIVnliaUJtZFc1amRHbHZiaWh5TEc0c2J5bDdjbVYwZFhKdUlHVXVZMkZzYkNoMExISXNiaXh2S1gxOWNtVjBkWEp1SUdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUdVdVlYQndiSGtvZEN4aGNtZDFiV1Z1ZEhNcGZYMTlMSHRjSWk0dlgyRXRablZ1WTNScGIyNWNJam95TlgxZExETXlPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTJsbUtIWnZhV1FnTUQwOVpTbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzRuZENCallXeHNJRzFsZEdodlpDQnZiaUFnWENJclpTazdjbVYwZFhKdUlHVjlmU3g3ZlYwc016TTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTlJV1VvWENJdUwxOW1ZV2xzYzF3aUtTaG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQTNJVDFQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2UzMHNYQ0poWENJc2UyZGxkRHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUEzZlgwcExtRjlLWDBzZTF3aUxpOWZabUZwYkhOY0lqb3pPSDFkTERNME9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMmx6TFc5aWFtVmpkRndpS1N4dlBXVW9YQ0l1TDE5bmJHOWlZV3hjSWlrdVpHOWpkVzFsYm5Rc2FUMXVLRzhwSmladUtHOHVZM0psWVhSbFJXeGxiV1Z1ZENrN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnBQMjh1WTNKbFlYUmxSV3hsYldWdWRDaGxLVHA3ZlgxOUxIdGNJaTR2WDJkc2IySmhiRndpT2pNNUxGd2lMaTlmYVhNdGIySnFaV04wWENJNk5EWjlYU3d6TlRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3oxY0ltTnZibk4wY25WamRHOXlMR2hoYzA5M2JsQnliM0JsY25SNUxHbHpVSEp2ZEc5MGVYQmxUMllzY0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVc2RHOU1iMk5oYkdWVGRISnBibWNzZEc5VGRISnBibWNzZG1Gc2RXVlBabHdpTG5Od2JHbDBLRndpTEZ3aUtYMHNlMzFkTERNMk9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYMjlpYW1WamRDMXJaWGx6WENJcExHODlaU2hjSWk0dlgyOWlhbVZqZEMxbmIzQnpYQ0lwTEdrOVpTaGNJaTR2WDI5aWFtVmpkQzF3YVdWY0lpazdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNaaGNpQjBQVzRvWlNrc2NqMXZMbVk3YVdZb2NpbG1iM0lvZG1GeUlHRXNjejF5S0dVcExIVTlhUzVtTEdNOU1EdHpMbXhsYm1kMGFENWpPeWwxTG1OaGJHd29aU3hoUFhOYll5c3JYU2ttSm5RdWNIVnphQ2hoS1R0eVpYUjFjbTRnZEgxOUxIdGNJaTR2WDI5aWFtVmpkQzFuYjNCelhDSTZOakFzWENJdUwxOXZZbXBsWTNRdGEyVjVjMXdpT2pZekxGd2lMaTlmYjJKcVpXTjBMWEJwWlZ3aU9qWTBmVjBzTXpjNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZaMnh2WW1Gc1hDSXBMRzg5WlNoY0lpNHZYMk52Y21WY0lpa3NhVDFsS0Z3aUxpOWZZM1I0WENJcExHRTlaU2hjSWk0dlgyaHBaR1ZjSWlrc2N6MWNJbkJ5YjNSdmRIbHdaVndpTEhVOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQmpMR3dzWml4a1BXVW1kUzVHTEhBOVpTWjFMa2NzYUQxbEpuVXVVeXg1UFdVbWRTNVFMRzA5WlNaMUxrSXNkajFsSm5VdVZ5eGZQWEEvYnpwdlczUmRmSHdvYjF0MFhUMTdmU2tzWWoxZlczTmRMR2M5Y0Q5dU9tZy9ibHQwWFRvb2JsdDBYWHg4ZTMwcFczTmRPM0FtSmloeVBYUXBPMlp2Y2loaklHbHVJSElwYkQwaFpDWW1aeVltZG05cFpDQXdJVDA5WjF0alhTeHNKaVpqSUdsdUlGOThmQ2htUFd3L1oxdGpYVHB5VzJOZExGOWJZMTA5Y0NZbVhDSm1kVzVqZEdsdmJsd2lJVDEwZVhCbGIyWWdaMXRqWFQ5eVcyTmRPbTBtSm13L2FTaG1MRzRwT25ZbUptZGJZMTA5UFdZL1puVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVpuVnVZM1JwYjI0b2RDeHlMRzRwZTJsbUtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCbEtYdHpkMmwwWTJnb1lYSm5kVzFsYm5SekxteGxibWQwYUNsN1kyRnpaU0F3T25KbGRIVnliaUJ1WlhjZ1pUdGpZWE5sSURFNmNtVjBkWEp1SUc1bGR5QmxLSFFwTzJOaGMyVWdNanB5WlhSMWNtNGdibVYzSUdVb2RDeHlLWDF5WlhSMWNtNGdibVYzSUdVb2RDeHlMRzRwZlhKbGRIVnliaUJsTG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektYMDdjbVYwZFhKdUlIUmJjMTA5WlZ0elhTeDBmU2htS1RwNUppWmNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJtUDJrb1JuVnVZM1JwYjI0dVkyRnNiQ3htS1RwbUxIa21KaWdvWHk1MmFYSjBkV0ZzZkh3b1h5NTJhWEowZFdGc1BYdDlLU2xiWTEwOVppeGxKblV1VWlZbVlpWW1JV0piWTEwbUptRW9ZaXhqTEdZcEtTbDlPM1V1UmoweExIVXVSejB5TEhVdVV6MDBMSFV1VUQwNExIVXVRajB4Tml4MUxsYzlNeklzZFM1VlBUWTBMSFV1VWoweE1qZ3NkQzVsZUhCdmNuUnpQWFY5TEh0Y0lpNHZYMk52Y21WY0lqb3pNQ3hjSWk0dlgyTjBlRndpT2pNeExGd2lMaTlmWjJ4dlltRnNYQ0k2TXprc1hDSXVMMTlvYVdSbFhDSTZOREY5WFN3ek9EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHQwY25sN2NtVjBkWEp1SVNGbEtDbDlZMkYwWTJnb2RDbDdjbVYwZFhKdUlUQjlmWDBzZTMxZExETTVPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OWRDNWxlSEJ2Y25SelBWd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUIzYVc1a2IzY21KbmRwYm1SdmR5NU5ZWFJvUFQxTllYUm9QM2RwYm1SdmR6cGNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnYzJWc1ppWW1jMlZzWmk1TllYUm9QVDFOWVhSb1AzTmxiR1k2Um5WdVkzUnBiMjRvWENKeVpYUjFjbTRnZEdocGMxd2lLU2dwTzF3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCZlgyY21KaWhmWDJjOWJpbDlMSHQ5WFN3ME1EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFh0OUxtaGhjMDkzYmxCeWIzQmxjblI1TzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJpQnVMbU5oYkd3b1pTeDBLWDE5TEh0OVhTdzBNVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5dlltcGxZM1F0WkhCY0lpa3NiejFsS0Z3aUxpOWZjSEp2Y0dWeWRIa3RaR1Z6WTF3aUtUdDBMbVY0Y0c5eWRITTlaU2hjSWk0dlgyUmxjMk55YVhCMGIzSnpYQ0lwUDJaMWJtTjBhVzl1S0dVc2RDeHlLWHR5WlhSMWNtNGdiaTVtS0dVc2RDeHZLREVzY2lrcGZUcG1kVzVqZEdsdmJpaGxMSFFzY2lsN2NtVjBkWEp1SUdWYmRGMDljaXhsZlgwc2Uxd2lMaTlmWkdWelkzSnBjSFJ2Y25OY0lqb3pNeXhjSWk0dlgyOWlhbVZqZEMxa2NGd2lPalUxTEZ3aUxpOWZjSEp2Y0dWeWRIa3RaR1Z6WTF3aU9qWTJmVjBzTkRJNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOVpTaGNJaTR2WDJkc2IySmhiRndpS1M1a2IyTjFiV1Z1ZENZbVpHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwZlN4N1hDSXVMMTluYkc5aVlXeGNJam96T1gxZExEUXpPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkQzVsZUhCdmNuUnpQU0ZsS0Z3aUxpOWZaR1Z6WTNKcGNIUnZjbk5jSWlrbUppRmxLRndpTGk5ZlptRnBiSE5jSWlrb1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z055RTlUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dVb1hDSXVMMTlrYjIwdFkzSmxZWFJsWENJcEtGd2laR2wyWENJcExGd2lZVndpTEh0blpYUTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdOMzE5S1M1aGZTbDlMSHRjSWk0dlgyUmxjMk55YVhCMGIzSnpYQ0k2TXpNc1hDSXVMMTlrYjIwdFkzSmxZWFJsWENJNk16UXNYQ0l1TDE5bVlXbHNjMXdpT2pNNGZWMHNORFE2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZlkyOW1YQ0lwTzNRdVpYaHdiM0owY3oxUFltcGxZM1FvWENKNlhDSXBMbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsS0RBcFAwOWlhbVZqZERwbWRXNWpkR2x2YmlobEtYdHlaWFIxY201Y0lsTjBjbWx1WjF3aVBUMXVLR1VwUDJVdWMzQnNhWFFvWENKY0lpazZUMkpxWldOMEtHVXBmWDBzZTF3aUxpOWZZMjltWENJNk1qbDlYU3cwTlRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOWpiMlpjSWlrN2RDNWxlSEJ2Y25SelBVRnljbUY1TG1selFYSnlZWGw4ZkdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5Ymx3aVFYSnlZWGxjSWowOWJpaGxLWDE5TEh0Y0lpNHZYMk52Wmx3aU9qSTVmVjBzTkRZNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MExtVjRjRzl5ZEhNOVpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHVS9iblZzYkNFOVBXVTZYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWlgxOUxIdDlYU3cwTnpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTF3aWRYTmxJSE4wY21samRGd2lPM1poY2lCdVBXVW9YQ0l1TDE5dlltcGxZM1F0WTNKbFlYUmxYQ0lwTEc4OVpTaGNJaTR2WDNCeWIzQmxjblI1TFdSbGMyTmNJaWtzYVQxbEtGd2lMaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2RjSWlrc1lUMTdmVHRsS0Z3aUxpOWZhR2xrWlZ3aUtTaGhMR1VvWENJdUwxOTNhM05jSWlrb1hDSnBkR1Z5WVhSdmNsd2lLU3htZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsemZTa3NkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdGxMbkJ5YjNSdmRIbHdaVDF1S0dFc2UyNWxlSFE2YnlneExISXBmU2tzYVNobExIUXJYQ0lnU1hSbGNtRjBiM0pjSWlsOWZTeDdYQ0l1TDE5b2FXUmxYQ0k2TkRFc1hDSXVMMTl2WW1wbFkzUXRZM0psWVhSbFhDSTZOVFFzWENJdUwxOXdjbTl3WlhKMGVTMWtaWE5qWENJNk5qWXNYQ0l1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWjF3aU9qWTVMRndpTGk5ZmQydHpYQ0k2T0RKOVhTdzBPRHBiWm5WdVkzUnBiMjRvWlN4MExISXBlMXdpZFhObElITjBjbWxqZEZ3aU8zWmhjaUJ1UFdVb1hDSXVMMTlzYVdKeVlYSjVYQ0lwTEc4OVpTaGNJaTR2WDJWNGNHOXlkRndpS1N4cFBXVW9YQ0l1TDE5eVpXUmxabWx1WlZ3aUtTeGhQV1VvWENJdUwxOW9hV1JsWENJcExITTlaU2hjSWk0dlgyaGhjMXdpS1N4MVBXVW9YQ0l1TDE5cGRHVnlZWFJ2Y25OY0lpa3NZejFsS0Z3aUxpOWZhWFJsY2kxamNtVmhkR1ZjSWlrc2JEMWxLRndpTGk5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdkY0lpa3NaajFsS0Z3aUxpOWZiMkpxWldOMExXZHdiMXdpS1N4a1BXVW9YQ0l1TDE5M2EzTmNJaWtvWENKcGRHVnlZWFJ2Y2x3aUtTeHdQU0VvVzEwdWEyVjVjeVltWENKdVpYaDBYQ0pwYmx0ZExtdGxlWE1vS1Nrc2FEMWNJa0JBYVhSbGNtRjBiM0pjSWl4NVBWd2lhMlY1YzF3aUxHMDlYQ0oyWVd4MVpYTmNJaXgyUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTjlPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsTEhRc2NpeGZMR0lzWnl4RktYdGpLSElzZEN4ZktUdDJZWElnYWl4M0xFOHNUVDFtZFc1amRHbHZiaWhsS1h0cFppZ2hjQ1ltWlNCcGJpQlNLWEpsZEhWeWJpQlNXMlZkTzNOM2FYUmphQ2hsS1h0allYTmxJSGs2Y21WMGRYSnVJR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRzVsZHlCeUtIUm9hWE1zWlNsOU8yTmhjMlVnYlRweVpYUjFjbTRnWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnYm1WM0lISW9kR2hwY3l4bEtYMTljbVYwZFhKdUlHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHNWxkeUJ5S0hSb2FYTXNaU2w5ZlN4NFBYUXJYQ0lnU1hSbGNtRjBiM0pjSWl4UVBXSTlQVzBzYXowaE1TeFNQV1V1Y0hKdmRHOTBlWEJsTEZNOVVsdGtYWHg4VWx0b1hYeDhZaVltVWx0aVhTeFVQVk44ZkUwb1lpa3NRVDFpUDFBL1RTaGNJbVZ1ZEhKcFpYTmNJaWs2VkRwMmIybGtJREFzVGoxY0lrRnljbUY1WENJOVBYUS9VaTVsYm5SeWFXVnpmSHhUT2xNN2FXWW9UaVltS0U4OVppaE9MbU5oYkd3b2JtVjNJR1VwS1N4UElUMDlUMkpxWldOMExuQnliM1J2ZEhsd1pTWW1LR3dvVHl4NExDRXdLU3h1Zkh4ektFOHNaQ2w4ZkdFb1R5eGtMSFlwS1Nrc1VDWW1VeVltVXk1dVlXMWxJVDA5YlNZbUtHczlJVEFzVkQxbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCVExtTmhiR3dvZEdocGN5bDlLU3h1SmlZaFJYeDhJWEFtSmlGckppWlNXMlJkZkh4aEtGSXNaQ3hVS1N4MVczUmRQVlFzZFZ0NFhUMTJMR0lwYVdZb2FqMTdkbUZzZFdWek9sQS9WRHBOS0cwcExHdGxlWE02Wno5VU9rMG9lU2tzWlc1MGNtbGxjenBCZlN4RktXWnZjaWgzSUdsdUlHb3BkeUJwYmlCU2ZIeHBLRklzZHl4cVczZGRLVHRsYkhObElHOG9ieTVRSzI4dVJpb29jSHg4YXlrc2RDeHFLVHR5WlhSMWNtNGdhbjE5TEh0Y0lpNHZYMlY0Y0c5eWRGd2lPak0zTEZ3aUxpOWZhR0Z6WENJNk5EQXNYQ0l1TDE5b2FXUmxYQ0k2TkRFc1hDSXVMMTlwZEdWeUxXTnlaV0YwWlZ3aU9qUTNMRndpTGk5ZmFYUmxjbUYwYjNKelhDSTZOVEFzWENJdUwxOXNhV0p5WVhKNVhDSTZOVElzWENJdUwxOXZZbXBsWTNRdFozQnZYQ0k2TmpFc1hDSXVMMTl5WldSbFptbHVaVndpT2pZM0xGd2lMaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2RjSWpvMk9TeGNJaTR2WDNkcmMxd2lPamd5ZlYwc05EazZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTU3ZG1Gc2RXVTZkQ3hrYjI1bE9pRWhaWDE5ZlN4N2ZWMHNOVEE2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQwTG1WNGNHOXlkSE05ZTMxOUxIdDlYU3cxTVRwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOXZZbXBsWTNRdGEyVjVjMXdpS1N4dlBXVW9YQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSXBPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsTEhRcGUyWnZjaWgyWVhJZ2NpeHBQVzhvWlNrc1lUMXVLR2twTEhNOVlTNXNaVzVuZEdnc2RUMHdPM00rZFRzcGFXWW9hVnR5UFdGYmRTc3JYVjA5UFQxMEtYSmxkSFZ5YmlCeWZYMHNlMXdpTGk5ZmIySnFaV04wTFd0bGVYTmNJam8yTXl4Y0lpNHZYM1J2TFdsdlltcGxZM1JjSWpvM05YMWRMRFV5T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZEM1bGVIQnZjblJ6UFNFd2ZTeDdmVjBzTlRNNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZkV2xrWENJcEtGd2liV1YwWVZ3aUtTeHZQV1VvWENJdUwxOXBjeTF2WW1wbFkzUmNJaWtzYVQxbEtGd2lMaTlmYUdGelhDSXBMR0U5WlNoY0lpNHZYMjlpYW1WamRDMWtjRndpS1M1bUxITTlNQ3gxUFU5aWFtVmpkQzVwYzBWNGRHVnVjMmxpYkdWOGZHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlUQjlMR005SVdVb1hDSXVMMTltWVdsc2Mxd2lLU2htZFc1amRHbHZiaWdwZTNKbGRIVnliaUIxS0U5aWFtVmpkQzV3Y21WMlpXNTBSWGgwWlc1emFXOXVjeWg3ZlNrcGZTa3NiRDFtZFc1amRHbHZiaWhsS1h0aEtHVXNiaXg3ZG1Gc2RXVTZlMms2WENKUFhDSXJJQ3NyY3l4M09udDlmWDBwZlN4bVBXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb0lXOG9aU2twY21WMGRYSnVYQ0p6ZVcxaWIyeGNJajA5ZEhsd1pXOW1JR1UvWlRvb1hDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlHVS9YQ0pUWENJNlhDSlFYQ0lwSzJVN2FXWW9JV2tvWlN4dUtTbDdhV1lvSVhVb1pTa3BjbVYwZFhKdVhDSkdYQ0k3YVdZb0lYUXBjbVYwZFhKdVhDSkZYQ0k3YkNobEtYMXlaWFIxY200Z1pWdHVYUzVwZlN4a1BXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb0lXa29aU3h1S1NsN2FXWW9JWFVvWlNrcGNtVjBkWEp1SVRBN2FXWW9JWFFwY21WMGRYSnVJVEU3YkNobEtYMXlaWFIxY200Z1pWdHVYUzUzZlN4d1BXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQmpKaVpvTGs1RlJVUW1KblVvWlNrbUppRnBLR1VzYmlrbUptd29aU2tzWlgwc2FEMTBMbVY0Y0c5eWRITTllMHRGV1RwdUxFNUZSVVE2SVRFc1ptRnpkRXRsZVRwbUxHZGxkRmRsWVdzNlpDeHZia1p5WldWNlpUcHdmWDBzZTF3aUxpOWZabUZwYkhOY0lqb3pPQ3hjSWk0dlgyaGhjMXdpT2pRd0xGd2lMaTlmYVhNdGIySnFaV04wWENJNk5EWXNYQ0l1TDE5dlltcGxZM1F0WkhCY0lqbzFOU3hjSWk0dlgzVnBaRndpT2pjNWZWMHNOVFE2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZllXNHRiMkpxWldOMFhDSXBMRzg5WlNoY0lpNHZYMjlpYW1WamRDMWtjSE5jSWlrc2FUMWxLRndpTGk5ZlpXNTFiUzFpZFdjdGEyVjVjMXdpS1N4aFBXVW9YQ0l1TDE5emFHRnlaV1F0YTJWNVhDSXBLRndpU1VWZlVGSlBWRTljSWlrc2N6MW1kVzVqZEdsdmJpZ3BlMzBzZFQxY0luQnliM1J2ZEhsd1pWd2lMR005Wm5WdVkzUnBiMjRvS1h0MllYSWdkQ3h5UFdVb1hDSXVMMTlrYjIwdFkzSmxZWFJsWENJcEtGd2lhV1p5WVcxbFhDSXBMRzQ5YVM1c1pXNW5kR2dzYnoxY0lqeGNJaXhoUFZ3aVBsd2lPMlp2Y2loeUxuTjBlV3hsTG1ScGMzQnNZWGs5WENKdWIyNWxYQ0lzWlNoY0lpNHZYMmgwYld4Y0lpa3VZWEJ3Wlc1a1EyaHBiR1FvY2lrc2NpNXpjbU05WENKcVlYWmhjMk55YVhCME9sd2lMSFE5Y2k1amIyNTBaVzUwVjJsdVpHOTNMbVJ2WTNWdFpXNTBMSFF1YjNCbGJpZ3BMSFF1ZDNKcGRHVW9ieXRjSW5OamNtbHdkRndpSzJFclhDSmtiMk4xYldWdWRDNUdQVTlpYW1WamRGd2lLMjhyWENJdmMyTnlhWEIwWENJcllTa3NkQzVqYkc5elpTZ3BMR005ZEM1R08yNHRMVHNwWkdWc1pYUmxJR05iZFYxYmFWdHVYVjA3Y21WMGRYSnVJR01vS1gwN2RDNWxlSEJ2Y25SelBVOWlhbVZqZEM1amNtVmhkR1Y4ZkdaMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUhJN2NtVjBkWEp1SUc1MWJHd2hQVDFsUHloelczVmRQVzRvWlNrc2NqMXVaWGNnY3l4elczVmRQVzUxYkd3c2NsdGhYVDFsS1RweVBXTW9LU3gyYjJsa0lEQTlQVDEwUDNJNmJ5aHlMSFFwZlgwc2Uxd2lMaTlmWVc0dGIySnFaV04wWENJNk1qY3NYQ0l1TDE5a2IyMHRZM0psWVhSbFhDSTZNelFzWENJdUwxOWxiblZ0TFdKMVp5MXJaWGx6WENJNk16VXNYQ0l1TDE5b2RHMXNYQ0k2TkRJc1hDSXVMMTl2WW1wbFkzUXRaSEJ6WENJNk5UWXNYQ0l1TDE5emFHRnlaV1F0YTJWNVhDSTZOekI5WFN3MU5UcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTloYmkxdlltcGxZM1JjSWlrc2J6MWxLRndpTGk5ZmFXVTRMV1J2YlMxa1pXWnBibVZjSWlrc2FUMWxLRndpTGk5ZmRHOHRjSEpwYldsMGFYWmxYQ0lwTEdFOVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVPM0l1WmoxbEtGd2lMaTlmWkdWelkzSnBjSFJ2Y25OY0lpay9UMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1T21aMWJtTjBhVzl1S0dVc2RDeHlLWHRwWmlodUtHVXBMSFE5YVNoMExDRXdLU3h1S0hJcExHOHBkSEo1ZTNKbGRIVnliaUJoS0dVc2RDeHlLWDFqWVhSamFDaHpLWHQ5YVdZb1hDSm5aWFJjSW1sdUlISjhmRndpYzJWMFhDSnBiaUJ5S1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhjSWtGalkyVnpjMjl5Y3lCdWIzUWdjM1Z3Y0c5eWRHVmtJVndpS1R0eVpYUjFjbTVjSW5aaGJIVmxYQ0pwYmlCeUppWW9aVnQwWFQxeUxuWmhiSFZsS1N4bGZYMHNlMXdpTGk5ZllXNHRiMkpxWldOMFhDSTZNamNzWENJdUwxOWtaWE5qY21sd2RHOXljMXdpT2pNekxGd2lMaTlmYVdVNExXUnZiUzFrWldacGJtVmNJam8wTXl4Y0lpNHZYM1J2TFhCeWFXMXBkR2wyWlZ3aU9qYzRmVjBzTlRZNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZiMkpxWldOMExXUndYQ0lwTEc4OVpTaGNJaTR2WDJGdUxXOWlhbVZqZEZ3aUtTeHBQV1VvWENJdUwxOXZZbXBsWTNRdGEyVjVjMXdpS1R0MExtVjRjRzl5ZEhNOVpTaGNJaTR2WDJSbGMyTnlhWEIwYjNKelhDSXBQMDlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWek9tWjFibU4wYVc5dUtHVXNkQ2w3YnlobEtUdG1iM0lvZG1GeUlISXNZVDFwS0hRcExITTlZUzVzWlc1bmRHZ3NkVDB3TzNNK2RUc3BiaTVtS0dVc2NqMWhXM1VySzEwc2RGdHlYU2s3Y21WMGRYSnVJR1Y5ZlN4N1hDSXVMMTloYmkxdlltcGxZM1JjSWpveU55eGNJaTR2WDJSbGMyTnlhWEIwYjNKelhDSTZNek1zWENJdUwxOXZZbXBsWTNRdFpIQmNJam8xTlN4Y0lpNHZYMjlpYW1WamRDMXJaWGx6WENJNk5qTjlYU3cxTnpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOXZZbXBsWTNRdGNHbGxYQ0lwTEc4OVpTaGNJaTR2WDNCeWIzQmxjblI1TFdSbGMyTmNJaWtzYVQxbEtGd2lMaTlmZEc4dGFXOWlhbVZqZEZ3aUtTeGhQV1VvWENJdUwxOTBieTF3Y21sdGFYUnBkbVZjSWlrc2N6MWxLRndpTGk5ZmFHRnpYQ0lwTEhVOVpTaGNJaTR2WDJsbE9DMWtiMjB0WkdWbWFXNWxYQ0lwTEdNOVQySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjanR5TG1ZOVpTaGNJaTR2WDJSbGMyTnlhWEIwYjNKelhDSXBQMk02Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWhsUFdrb1pTa3NkRDFoS0hRc0lUQXBMSFVwZEhKNWUzSmxkSFZ5YmlCaktHVXNkQ2w5WTJGMFkyZ29jaWw3ZldsbUtITW9aU3gwS1NseVpYUjFjbTRnYnlnaGJpNW1MbU5oYkd3b1pTeDBLU3hsVzNSZEtYMTlMSHRjSWk0dlgyUmxjMk55YVhCMGIzSnpYQ0k2TXpNc1hDSXVMMTlvWVhOY0lqbzBNQ3hjSWk0dlgybGxPQzFrYjIwdFpHVm1hVzVsWENJNk5ETXNYQ0l1TDE5dlltcGxZM1F0Y0dsbFhDSTZOalFzWENJdUwxOXdjbTl3WlhKMGVTMWtaWE5qWENJNk5qWXNYQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSTZOelVzWENJdUwxOTBieTF3Y21sdGFYUnBkbVZjSWpvM09IMWRMRFU0T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDlaU2hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJaWtzYnoxbEtGd2lMaTlmYjJKcVpXTjBMV2R2Y0c1Y0lpa3VaaXhwUFh0OUxuUnZVM1J5YVc1bkxHRTlYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JSGRwYm1SdmR5WW1kMmx1Wkc5M0ppWlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN6OVBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aDNhVzVrYjNjcE9sdGRMSE05Wm5WdVkzUnBiMjRvWlNsN2RISjVlM0psZEhWeWJpQnZLR1VwZldOaGRHTm9LSFFwZTNKbGRIVnliaUJoTG5Oc2FXTmxLQ2w5ZlR0MExtVjRjRzl5ZEhNdVpqMW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdZU1ltWENKYmIySnFaV04wSUZkcGJtUnZkMTFjSWowOWFTNWpZV3hzS0dVcFAzTW9aU2s2YnlodUtHVXBLWDE5TEh0Y0lpNHZYMjlpYW1WamRDMW5iM0J1WENJNk5Ua3NYQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSTZOelY5WFN3MU9UcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTl2WW1wbFkzUXRhMlY1Y3kxcGJuUmxjbTVoYkZ3aUtTeHZQV1VvWENJdUwxOWxiblZ0TFdKMVp5MXJaWGx6WENJcExtTnZibU5oZENoY0lteGxibWQwYUZ3aUxGd2ljSEp2ZEc5MGVYQmxYQ0lwTzNJdVpqMVBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGMzeDhablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzRvWlN4dktYMTlMSHRjSWk0dlgyVnVkVzB0WW5WbkxXdGxlWE5jSWpvek5TeGNJaTR2WDI5aWFtVmpkQzFyWlhsekxXbHVkR1Z5Ym1Gc1hDSTZOako5WFN3Mk1EcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzSXVaajFQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6ZlN4N2ZWMHNOakU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmFHRnpYQ0lwTEc4OVpTaGNJaTR2WDNSdkxXOWlhbVZqZEZ3aUtTeHBQV1VvWENJdUwxOXphR0Z5WldRdGEyVjVYQ0lwS0Z3aVNVVmZVRkpQVkU5Y0lpa3NZVDFQWW1wbFkzUXVjSEp2ZEc5MGVYQmxPM1F1Wlhod2IzSjBjejFQWW1wbFkzUXVaMlYwVUhKdmRHOTBlWEJsVDJaOGZHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQmxQVzhvWlNrc2JpaGxMR2twUDJWYmFWMDZYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWlM1amIyNXpkSEoxWTNSdmNpWW1aU0JwYm5OMFlXNWpaVzltSUdVdVkyOXVjM1J5ZFdOMGIzSS9aUzVqYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dVNlpTQnBibk4wWVc1alpXOW1JRTlpYW1WamREOWhPbTUxYkd4OWZTeDdYQ0l1TDE5b1lYTmNJam8wTUN4Y0lpNHZYM05vWVhKbFpDMXJaWGxjSWpvM01DeGNJaTR2WDNSdkxXOWlhbVZqZEZ3aU9qYzNmVjBzTmpJNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZhR0Z6WENJcExHODlaU2hjSWk0dlgzUnZMV2x2WW1wbFkzUmNJaWtzYVQxbEtGd2lMaTlmWVhKeVlYa3RhVzVqYkhWa1pYTmNJaWtvSVRFcExHRTlaU2hjSWk0dlgzTm9ZWEpsWkMxclpYbGNJaWtvWENKSlJWOVFVazlVVDF3aUtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU3gwS1h0MllYSWdjaXh6UFc4b1pTa3NkVDB3TEdNOVcxMDdabTl5S0hJZ2FXNGdjeWx5SVQxaEppWnVLSE1zY2lrbUptTXVjSFZ6YUNoeUtUdG1iM0lvTzNRdWJHVnVaM1JvUG5VN0tXNG9jeXh5UFhSYmRTc3JYU2ttSmloK2FTaGpMSElwZkh4akxuQjFjMmdvY2lrcE8zSmxkSFZ5YmlCamZYMHNlMXdpTGk5ZllYSnlZWGt0YVc1amJIVmtaWE5jSWpveU9DeGNJaTR2WDJoaGMxd2lPalF3TEZ3aUxpOWZjMmhoY21Wa0xXdGxlVndpT2pjd0xGd2lMaTlmZEc4dGFXOWlhbVZqZEZ3aU9qYzFmVjBzTmpNNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZiMkpxWldOMExXdGxlWE10YVc1MFpYSnVZV3hjSWlrc2J6MWxLRndpTGk5ZlpXNTFiUzFpZFdjdGEyVjVjMXdpS1R0MExtVjRjRzl5ZEhNOVQySnFaV04wTG10bGVYTjhmR1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJ1S0dVc2J5bDlmU3g3WENJdUwxOWxiblZ0TFdKMVp5MXJaWGx6WENJNk16VXNYQ0l1TDE5dlltcGxZM1F0YTJWNWN5MXBiblJsY201aGJGd2lPall5ZlYwc05qUTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdHlMbVk5ZTMwdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVjlMSHQ5WFN3Mk5UcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTlsZUhCdmNuUmNJaWtzYnoxbEtGd2lMaTlmWTI5eVpWd2lLU3hwUFdVb1hDSXVMMTltWVdsc2Mxd2lLVHQwTG1WNGNHOXlkSE05Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2owb2J5NVBZbXBsWTNSOGZIdDlLVnRsWFh4OFQySnFaV04wVzJWZExHRTllMzA3WVZ0bFhUMTBLSElwTEc0b2JpNVRLMjR1UmlwcEtHWjFibU4wYVc5dUtDbDdjaWd4S1gwcExGd2lUMkpxWldOMFhDSXNZU2w5ZlN4N1hDSXVMMTlqYjNKbFhDSTZNekFzWENJdUwxOWxlSEJ2Y25SY0lqb3pOeXhjSWk0dlgyWmhhV3h6WENJNk16aDlYU3cyTmpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobExIUXBlM0psZEhWeWJudGxiblZ0WlhKaFlteGxPaUVvTVNabEtTeGpiMjVtYVdkMWNtRmliR1U2SVNneUptVXBMSGR5YVhSaFlteGxPaUVvTkNabEtTeDJZV3gxWlRwMGZYMTlMSHQ5WFN3Mk56cGJablZ1WTNScGIyNG9aU3gwTEhJcGUzUXVaWGh3YjNKMGN6MWxLRndpTGk5ZmFHbGtaVndpS1gwc2Uxd2lMaTlmYUdsa1pWd2lPalF4ZlYwc05qZzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYVhNdGIySnFaV04wWENJcExHODlaU2hjSWk0dlgyRnVMVzlpYW1WamRGd2lLU3hwUFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvYnlobEtTd2hiaWgwS1NZbWJuVnNiQ0U5UFhRcGRHaHliM2NnVkhsd1pVVnljbTl5S0hRclhDSTZJR05oYmlkMElITmxkQ0JoY3lCd2NtOTBiM1I1Y0dVaFhDSXBmVHQwTG1WNGNHOXlkSE05ZTNObGREcFBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMlo4ZkNoY0lsOWZjSEp2ZEc5Zlgxd2lhVzU3ZlQ5bWRXNWpkR2x2YmloMExISXNiaWw3ZEhKNWUyNDlaU2hjSWk0dlgyTjBlRndpS1NoR2RXNWpkR2x2Ymk1allXeHNMR1VvWENJdUwxOXZZbXBsWTNRdFoyOXdaRndpS1M1bUtFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVc1hDSmZYM0J5YjNSdlgxOWNJaWt1YzJWMExESXBMRzRvZEN4YlhTa3NjajBoS0hRZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVNsOVkyRjBZMmdvYnlsN2NqMGhNSDF5WlhSMWNtNGdablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTRnYVNobExIUXBMSEkvWlM1ZlgzQnliM1J2WDE4OWREcHVLR1VzZENrc1pYMTlLSHQ5TENFeEtUcDJiMmxrSURBcExHTm9aV05yT21sOWZTeDdYQ0l1TDE5aGJpMXZZbXBsWTNSY0lqb3lOeXhjSWk0dlgyTjBlRndpT2pNeExGd2lMaTlmYVhNdGIySnFaV04wWENJNk5EWXNYQ0l1TDE5dlltcGxZM1F0WjI5d1pGd2lPalUzZlYwc05qazZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYjJKcVpXTjBMV1J3WENJcExtWXNiejFsS0Z3aUxpOWZhR0Z6WENJcExHazlaU2hjSWk0dlgzZHJjMXdpS1NoY0luUnZVM1J5YVc1blZHRm5YQ0lwTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobExIUXNjaWw3WlNZbUlXOG9aVDF5UDJVNlpTNXdjbTkwYjNSNWNHVXNhU2ttSm00b1pTeHBMSHRqYjI1bWFXZDFjbUZpYkdVNklUQXNkbUZzZFdVNmRIMHBmWDBzZTF3aUxpOWZhR0Z6WENJNk5EQXNYQ0l1TDE5dlltcGxZM1F0WkhCY0lqbzFOU3hjSWk0dlgzZHJjMXdpT2pneWZWMHNOekE2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHQyWVhJZ2JqMWxLRndpTGk5ZmMyaGhjbVZrWENJcEtGd2lhMlY1YzF3aUtTeHZQV1VvWENJdUwxOTFhV1JjSWlrN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnVXMlZkZkh3b2JsdGxYVDF2S0dVcEtYMTlMSHRjSWk0dlgzTm9ZWEpsWkZ3aU9qY3hMRndpTGk5ZmRXbGtYQ0k2TnpsOVhTdzNNVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5bmJHOWlZV3hjSWlrc2J6MWNJbDlmWTI5eVpTMXFjMTl6YUdGeVpXUmZYMXdpTEdrOWJsdHZYWHg4S0c1YmIxMDllMzBwTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2FWdGxYWHg4S0dsYlpWMDllMzBwZlgwc2Uxd2lMaTlmWjJ4dlltRnNYQ0k2TXpsOVhTdzNNanBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5MGJ5MXBiblJsWjJWeVhDSXBMRzg5WlNoY0lpNHZYMlJsWm1sdVpXUmNJaWs3ZEM1bGVIQnZjblJ6UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbWRXNWpkR2x2YmloMExISXBlM1poY2lCcExHRXNjejFUZEhKcGJtY29ieWgwS1Nrc2RUMXVLSElwTEdNOWN5NXNaVzVuZEdnN2NtVjBkWEp1SUhVOE1IeDhkVDQ5WXo5bFAxd2lYQ0k2ZG05cFpDQXdPaWhwUFhNdVkyaGhja052WkdWQmRDaDFLU3hwUERVMU1qazJmSHhwUGpVMk16RTVmSHgxS3pFOVBUMWpmSHdvWVQxekxtTm9ZWEpEYjJSbFFYUW9kU3N4S1NrOE5UWXpNakI4ZkdFK05UY3pORE0vWlQ5ekxtTm9ZWEpCZENoMUtUcHBPbVUvY3k1emJHbGpaU2gxTEhVck1pazZLR2t0TlRVeU9UWThQREV3S1Nzb1lTMDFOak15TUNrck5qVTFNellwZlgxOUxIdGNJaTR2WDJSbFptbHVaV1JjSWpvek1peGNJaTR2WDNSdkxXbHVkR1ZuWlhKY0lqbzNOSDFkTERjek9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYM1J2TFdsdWRHVm5aWEpjSWlrc2J6MU5ZWFJvTG0xaGVDeHBQVTFoZEdndWJXbHVPM1F1Wlhod2IzSjBjejFtZFc1amRHbHZiaWhsTEhRcGUzSmxkSFZ5YmlCbFBXNG9aU2tzWlR3d1AyOG9aU3QwTERBcE9ta29aU3gwS1gxOUxIdGNJaTR2WDNSdkxXbHVkR1ZuWlhKY0lqbzNOSDFkTERjME9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5VFdGMGFDNWpaV2xzTEc4OVRXRjBhQzVtYkc5dmNqdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR2x6VG1GT0tHVTlLMlVwUHpBNktHVStNRDl2T200cEtHVXBmWDBzZTMxZExEYzFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJsdlltcGxZM1JjSWlrc2J6MWxLRndpTGk5ZlpHVm1hVzVsWkZ3aUtUdDBMbVY0Y0c5eWRITTlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJRzRvYnlobEtTbDlmU3g3WENJdUwxOWtaV1pwYm1Wa1hDSTZNeklzWENJdUwxOXBiMkpxWldOMFhDSTZORFI5WFN3M05qcGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTkwYnkxcGJuUmxaMlZ5WENJcExHODlUV0YwYUM1dGFXNDdkQzVsZUhCdmNuUnpQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsUGpBL2J5aHVLR1VwTERrd01EY3hPVGt5TlRRM05EQTVPVEVwT2pCOWZTeDdYQ0l1TDE5MGJ5MXBiblJsWjJWeVhDSTZOelI5WFN3M056cGJablZ1WTNScGIyNG9aU3gwTEhJcGUzWmhjaUJ1UFdVb1hDSXVMMTlrWldacGJtVmtYQ0lwTzNRdVpYaHdiM0owY3oxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1QySnFaV04wS0c0b1pTa3BmWDBzZTF3aUxpOWZaR1ZtYVc1bFpGd2lPak15ZlYwc056ZzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmYVhNdGIySnFaV04wWENJcE8zUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxMSFFwZTJsbUtDRnVLR1VwS1hKbGRIVnliaUJsTzNaaGNpQnlMRzg3YVdZb2RDWW1YQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllvY2oxbExuUnZVM1J5YVc1bktTWW1JVzRvYnoxeUxtTmhiR3dvWlNrcEtYSmxkSFZ5YmlCdk8ybG1LRndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltS0hJOVpTNTJZV3gxWlU5bUtTWW1JVzRvYnoxeUxtTmhiR3dvWlNrcEtYSmxkSFZ5YmlCdk8ybG1LQ0YwSmlaY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppaHlQV1V1ZEc5VGRISnBibWNwSmlZaGJpaHZQWEl1WTJGc2JDaGxLU2twY21WMGRYSnVJRzg3ZEdoeWIzY2dWSGx3WlVWeWNtOXlLRndpUTJGdUozUWdZMjl1ZG1WeWRDQnZZbXBsWTNRZ2RHOGdjSEpwYldsMGFYWmxJSFpoYkhWbFhDSXBmWDBzZTF3aUxpOWZhWE10YjJKcVpXTjBYQ0k2TkRaOVhTdzNPVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBUQXNiejFOWVhSb0xuSmhibVJ2YlNncE8zUXVaWGh3YjNKMGN6MW1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNWNJbE41YldKdmJDaGNJaTVqYjI1allYUW9kbTlwWkNBd1BUMDlaVDljSWx3aU9tVXNYQ0lwWDF3aUxDZ3JLMjRyYnlrdWRHOVRkSEpwYm1jb016WXBLWDE5TEh0OVhTdzRNRHBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5bmJHOWlZV3hjSWlrc2J6MWxLRndpTGk5ZlkyOXlaVndpS1N4cFBXVW9YQ0l1TDE5c2FXSnlZWEo1WENJcExHRTlaU2hjSWk0dlgzZHJjeTFsZUhSY0lpa3NjejFsS0Z3aUxpOWZiMkpxWldOMExXUndYQ0lwTG1ZN2RDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM1poY2lCMFBXOHVVM2x0WW05c2ZId29ieTVUZVcxaWIydzlhVDk3ZlRwdUxsTjViV0p2Ykh4OGUzMHBPMXdpWDF3aVBUMWxMbU5vWVhKQmRDZ3dLWHg4WlNCcGJpQjBmSHh6S0hRc1pTeDdkbUZzZFdVNllTNW1LR1VwZlNsOWZTeDdYQ0l1TDE5amIzSmxYQ0k2TXpBc1hDSXVMMTluYkc5aVlXeGNJam96T1N4Y0lpNHZYMnhwWW5KaGNubGNJam8xTWl4Y0lpNHZYMjlpYW1WamRDMWtjRndpT2pVMUxGd2lMaTlmZDJ0ekxXVjRkRndpT2pneGZWMHNPREU2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHR5TG1ZOVpTaGNJaTR2WDNkcmMxd2lLWDBzZTF3aUxpOWZkMnR6WENJNk9ESjlYU3c0TWpwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVQV1VvWENJdUwxOXphR0Z5WldSY0lpa29YQ0ozYTNOY0lpa3NiejFsS0Z3aUxpOWZkV2xrWENJcExHazlaU2hjSWk0dlgyZHNiMkpoYkZ3aUtTNVRlVzFpYjJ3c1lUMWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJwTEhNOWRDNWxlSEJ2Y25SelBXWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnVXMlZkZkh3b2JsdGxYVDFoSmlacFcyVmRmSHdvWVQ5cE9tOHBLRndpVTNsdFltOXNMbHdpSzJVcEtYMDdjeTV6ZEc5eVpUMXVmU3g3WENJdUwxOW5iRzlpWVd4Y0lqb3pPU3hjSWk0dlgzTm9ZWEpsWkZ3aU9qY3hMRndpTGk5ZmRXbGtYQ0k2TnpsOVhTdzRNenBiWm5WdVkzUnBiMjRvWlN4MExISXBlMXdpZFhObElITjBjbWxqZEZ3aU8zWmhjaUJ1UFdVb1hDSXVMMTloWkdRdGRHOHRkVzV6WTI5d1lXSnNaWE5jSWlrc2J6MWxLRndpTGk5ZmFYUmxjaTF6ZEdWd1hDSXBMR2s5WlNoY0lpNHZYMmwwWlhKaGRHOXljMXdpS1N4aFBXVW9YQ0l1TDE5MGJ5MXBiMkpxWldOMFhDSXBPM1F1Wlhod2IzSjBjejFsS0Z3aUxpOWZhWFJsY2kxa1pXWnBibVZjSWlrb1FYSnlZWGtzWENKQmNuSmhlVndpTEdaMWJtTjBhVzl1S0dVc2RDbDdkR2hwY3k1ZmREMWhLR1VwTEhSb2FYTXVYMms5TUN4MGFHbHpMbDlyUFhSOUxHWjFibU4wYVc5dUtDbDdkbUZ5SUdVOWRHaHBjeTVmZEN4MFBYUm9hWE11WDJzc2NqMTBhR2x6TGw5cEt5czdjbVYwZFhKdUlXVjhmSEkrUFdVdWJHVnVaM1JvUHloMGFHbHpMbDkwUFhadmFXUWdNQ3h2S0RFcEtUcGNJbXRsZVhOY0lqMDlkRDl2S0RBc2NpazZYQ0oyWVd4MVpYTmNJajA5ZEQ5dktEQXNaVnR5WFNrNmJ5Z3dMRnR5TEdWYmNsMWRLWDBzWENKMllXeDFaWE5jSWlrc2FTNUJjbWQxYldWdWRITTlhUzVCY25KaGVTeHVLRndpYTJWNWMxd2lLU3h1S0Z3aWRtRnNkV1Z6WENJcExHNG9YQ0psYm5SeWFXVnpYQ0lwZlN4N1hDSXVMMTloWkdRdGRHOHRkVzV6WTI5d1lXSnNaWE5jSWpveU5peGNJaTR2WDJsMFpYSXRaR1ZtYVc1bFhDSTZORGdzWENJdUwxOXBkR1Z5TFhOMFpYQmNJam8wT1N4Y0lpNHZYMmwwWlhKaGRHOXljMXdpT2pVd0xGd2lMaTlmZEc4dGFXOWlhbVZqZEZ3aU9qYzFmVjBzT0RRNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZaWGh3YjNKMFhDSXBPMjRvYmk1VExGd2lUMkpxWldOMFhDSXNlMk55WldGMFpUcGxLRndpTGk5ZmIySnFaV04wTFdOeVpXRjBaVndpS1gwcGZTeDdYQ0l1TDE5bGVIQnZjblJjSWpvek55eGNJaTR2WDI5aWFtVmpkQzFqY21WaGRHVmNJam8xTkgxZExEZzFPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0OVpTaGNJaTR2WDJWNGNHOXlkRndpS1R0dUtHNHVVeXR1TGtZcUlXVW9YQ0l1TDE5a1pYTmpjbWx3ZEc5eWMxd2lLU3hjSWs5aWFtVmpkRndpTEh0a1pXWnBibVZRY205d1pYSjBlVHBsS0Z3aUxpOWZiMkpxWldOMExXUndYQ0lwTG1aOUtYMHNlMXdpTGk5ZlpHVnpZM0pwY0hSdmNuTmNJam96TXl4Y0lpNHZYMlY0Y0c5eWRGd2lPak0zTEZ3aUxpOWZiMkpxWldOMExXUndYQ0k2TlRWOVhTdzROanBiWm5WdVkzUnBiMjRvWlN4MExISXBlM1poY2lCdVBXVW9YQ0l1TDE5cGN5MXZZbXBsWTNSY0lpa3NiejFsS0Z3aUxpOWZiV1YwWVZ3aUtTNXZia1p5WldWNlpUdGxLRndpTGk5ZmIySnFaV04wTFhOaGNGd2lLU2hjSW1aeVpXVjZaVndpTEdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbWRXNWpkR2x2YmloMEtYdHlaWFIxY200Z1pTWW1iaWgwS1Q5bEtHOG9kQ2twT25SOWZTbDlMSHRjSWk0dlgybHpMVzlpYW1WamRGd2lPalEyTEZ3aUxpOWZiV1YwWVZ3aU9qVXpMRndpTGk5ZmIySnFaV04wTFhOaGNGd2lPalkxZlYwc09EYzZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdDJZWElnYmoxbEtGd2lMaTlmZEc4dGIySnFaV04wWENJcExHODlaU2hjSWk0dlgyOWlhbVZqZEMxbmNHOWNJaWs3WlNoY0lpNHZYMjlpYW1WamRDMXpZWEJjSWlrb1hDSm5aWFJRY205MGIzUjVjR1ZQWmx3aUxHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlHWjFibU4wYVc5dUtHVXBlM0psZEhWeWJpQnZLRzRvWlNrcGZYMHBmU3g3WENJdUwxOXZZbXBsWTNRdFozQnZYQ0k2TmpFc1hDSXVMMTl2WW1wbFkzUXRjMkZ3WENJNk5qVXNYQ0l1TDE5MGJ5MXZZbXBsWTNSY0lqbzNOMzFkTERnNE9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN2RtRnlJRzQ5WlNoY0lpNHZYM1J2TFc5aWFtVmpkRndpS1N4dlBXVW9YQ0l1TDE5dlltcGxZM1F0YTJWNWMxd2lLVHRsS0Z3aUxpOWZiMkpxWldOMExYTmhjRndpS1NoY0ltdGxlWE5jSWl4bWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2J5aHVLR1VwS1gxOUtYMHNlMXdpTGk5ZmIySnFaV04wTFd0bGVYTmNJam8yTXl4Y0lpNHZYMjlpYW1WamRDMXpZWEJjSWpvMk5TeGNJaTR2WDNSdkxXOWlhbVZqZEZ3aU9qYzNmVjBzT0RrNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFsS0Z3aUxpOWZaWGh3YjNKMFhDSXBPMjRvYmk1VExGd2lUMkpxWldOMFhDSXNlM05sZEZCeWIzUnZkSGx3WlU5bU9tVW9YQ0l1TDE5elpYUXRjSEp2ZEc5Y0lpa3VjMlYwZlNsOUxIdGNJaTR2WDJWNGNHOXlkRndpT2pNM0xGd2lMaTlmYzJWMExYQnliM1J2WENJNk5qaDlYU3c1TURwYlpuVnVZM1JwYjI0b1pTeDBMSElwZTMwc2UzMWRMRGt4T2x0bWRXNWpkR2x2YmlobExIUXNjaWw3WENKMWMyVWdjM1J5YVdOMFhDSTdkbUZ5SUc0OVpTaGNJaTR2WDNOMGNtbHVaeTFoZEZ3aUtTZ2hNQ2s3WlNoY0lpNHZYMmwwWlhJdFpHVm1hVzVsWENJcEtGTjBjbWx1Wnl4Y0lsTjBjbWx1WjF3aUxHWjFibU4wYVc5dUtHVXBlM1JvYVhNdVgzUTlVM1J5YVc1bktHVXBMSFJvYVhNdVgyazlNSDBzWm5WdVkzUnBiMjRvS1h0MllYSWdaU3gwUFhSb2FYTXVYM1FzY2oxMGFHbHpMbDlwTzNKbGRIVnliaUJ5UGoxMExteGxibWQwYUQ5N2RtRnNkV1U2ZG05cFpDQXdMR1J2Ym1VNklUQjlPaWhsUFc0b2RDeHlLU3gwYUdsekxsOXBLejFsTG14bGJtZDBhQ3g3ZG1Gc2RXVTZaU3hrYjI1bE9pRXhmU2w5S1gwc2Uxd2lMaTlmYVhSbGNpMWtaV1pwYm1WY0lqbzBPQ3hjSWk0dlgzTjBjbWx1WnkxaGRGd2lPamN5ZlYwc09USTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdGNJblZ6WlNCemRISnBZM1JjSWp0MllYSWdiajFsS0Z3aUxpOWZaMnh2WW1Gc1hDSXBMRzg5WlNoY0lpNHZYMmhoYzF3aUtTeHBQV1VvWENJdUwxOWtaWE5qY21sd2RHOXljMXdpS1N4aFBXVW9YQ0l1TDE5bGVIQnZjblJjSWlrc2N6MWxLRndpTGk5ZmNtVmtaV1pwYm1WY0lpa3NkVDFsS0Z3aUxpOWZiV1YwWVZ3aUtTNUxSVmtzWXoxbEtGd2lMaTlmWm1GcGJITmNJaWtzYkQxbEtGd2lMaTlmYzJoaGNtVmtYQ0lwTEdZOVpTaGNJaTR2WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuWENJcExHUTlaU2hjSWk0dlgzVnBaRndpS1N4d1BXVW9YQ0l1TDE5M2EzTmNJaWtzYUQxbEtGd2lMaTlmZDJ0ekxXVjRkRndpS1N4NVBXVW9YQ0l1TDE5M2EzTXRaR1ZtYVc1bFhDSXBMRzA5WlNoY0lpNHZYMnRsZVc5bVhDSXBMSFk5WlNoY0lpNHZYMlZ1ZFcwdGEyVjVjMXdpS1N4ZlBXVW9YQ0l1TDE5cGN5MWhjbkpoZVZ3aUtTeGlQV1VvWENJdUwxOWhiaTF2WW1wbFkzUmNJaWtzWnoxbEtGd2lMaTlmZEc4dGFXOWlhbVZqZEZ3aUtTeEZQV1VvWENJdUwxOTBieTF3Y21sdGFYUnBkbVZjSWlrc2FqMWxLRndpTGk5ZmNISnZjR1Z5ZEhrdFpHVnpZMXdpS1N4M1BXVW9YQ0l1TDE5dlltcGxZM1F0WTNKbFlYUmxYQ0lwTEU4OVpTaGNJaTR2WDI5aWFtVmpkQzFuYjNCdUxXVjRkRndpS1N4TlBXVW9YQ0l1TDE5dlltcGxZM1F0WjI5d1pGd2lLU3g0UFdVb1hDSXVMMTl2WW1wbFkzUXRaSEJjSWlrc1VEMWxLRndpTGk5ZmIySnFaV04wTFd0bGVYTmNJaWtzYXoxTkxtWXNVajE0TG1Zc1V6MVBMbVlzVkQxdUxsTjViV0p2YkN4QlBXNHVTbE5QVGl4T1BVRW1Ka0V1YzNSeWFXNW5hV1o1TEVrOVhDSndjbTkwYjNSNWNHVmNJaXhWUFhBb1hDSmZhR2xrWkdWdVhDSXBMRU05Y0NoY0luUnZVSEpwYldsMGFYWmxYQ0lwTEV3OWUzMHVjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VzUmoxc0tGd2ljM2x0WW05c0xYSmxaMmx6ZEhKNVhDSXBMRUk5YkNoY0luTjViV0p2YkhOY0lpa3NSRDFzS0Z3aWIzQXRjM2x0WW05c2Mxd2lLU3hIUFU5aWFtVmpkRnRKWFN4TFBWd2lablZ1WTNScGIyNWNJajA5ZEhsd1pXOW1JRlFzV1QxdUxsRlBZbXBsWTNRc2NUMGhXWHg4SVZsYlNWMThmQ0ZaVzBsZExtWnBibVJEYUdsc1pDeDZQV2ttSm1Nb1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z055RTlkeWhTS0h0OUxGd2lZVndpTEh0blpYUTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdVaWgwYUdsekxGd2lZVndpTEh0MllXeDFaVG8zZlNrdVlYMTlLU2t1WVgwcFAyWjFibU4wYVc5dUtHVXNkQ3h5S1h0MllYSWdiajFyS0Vjc2RDazdiaVltWkdWc1pYUmxJRWRiZEYwc1VpaGxMSFFzY2lrc2JpWW1aU0U5UFVjbUpsSW9SeXgwTEc0cGZUcFNMRWc5Wm5WdVkzUnBiMjRvWlNsN2RtRnlJSFE5UWx0bFhUMTNLRlJiU1YwcE8zSmxkSFZ5YmlCMExsOXJQV1VzZEgwc1Z6MUxKaVpjSW5ONWJXSnZiRndpUFQxMGVYQmxiMllnVkM1cGRHVnlZWFJ2Y2o5bWRXNWpkR2x2YmlobEtYdHlaWFIxY201Y0luTjViV0p2YkZ3aVBUMTBlWEJsYjJZZ1pYMDZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJR1VnYVc1emRHRnVZMlZ2WmlCVWZTeEtQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdHlaWFIxY200Z1pUMDlQVWNtSmtvb1JDeDBMSElwTEdJb1pTa3NkRDFGS0hRc0lUQXBMR0lvY2lrc2J5aENMSFFwUHloeUxtVnVkVzFsY21GaWJHVS9LRzhvWlN4VktTWW1aVnRWWFZ0MFhTWW1LR1ZiVlYxYmRGMDlJVEVwTEhJOWR5aHlMSHRsYm5WdFpYSmhZbXhsT21vb01Dd2hNU2w5S1NrNktHOG9aU3hWS1h4OFVpaGxMRlVzYWlneExIdDlLU2tzWlZ0VlhWdDBYVDBoTUNrc2VpaGxMSFFzY2lrcE9sSW9aU3gwTEhJcGZTeFdQV1oxYm1OMGFXOXVLR1VzZENsN1lpaGxLVHRtYjNJb2RtRnlJSElzYmoxMktIUTlaeWgwS1Nrc2J6MHdMR2s5Ymk1c1pXNW5kR2c3YVQ1dk95bEtLR1VzY2oxdVcyOHJLMTBzZEZ0eVhTazdjbVYwZFhKdUlHVjlMQ1E5Wm5WdVkzUnBiMjRvWlN4MEtYdHlaWFIxY200Z2RtOXBaQ0F3UFQwOWREOTNLR1VwT2xZb2R5aGxLU3gwS1gwc1dEMW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMU1MbU5oYkd3b2RHaHBjeXhsUFVVb1pTd2hNQ2twTzNKbGRIVnliaUVvZEdocGN6MDlQVWNtSm04b1FpeGxLU1ltSVc4b1JDeGxLU2ttSmlnaEtIUjhmQ0Z2S0hSb2FYTXNaU2w4ZkNGdktFSXNaU2w4Zkc4b2RHaHBjeXhWS1NZbWRHaHBjMXRWWFZ0bFhTbDhmSFFwZlN4UlBXWjFibU4wYVc5dUtHVXNkQ2w3YVdZb1pUMW5LR1VwTEhROVJTaDBMQ0V3S1N4bElUMDlSM3g4SVc4b1FpeDBLWHg4YnloRUxIUXBLWHQyWVhJZ2NqMXJLR1VzZENrN2NtVjBkWEp1SVhKOGZDRnZLRUlzZENsOGZHOG9aU3hWS1NZbVpWdFZYVnQwWFh4OEtISXVaVzUxYldWeVlXSnNaVDBoTUNrc2NuMTlMRm85Wm5WdVkzUnBiMjRvWlNsN1ptOXlLSFpoY2lCMExISTlVeWhuS0dVcEtTeHVQVnRkTEdrOU1EdHlMbXhsYm1kMGFENXBPeWx2S0VJc2REMXlXMmtySzEwcGZIeDBQVDFWZkh4MFBUMTFmSHh1TG5CMWMyZ29kQ2s3Y21WMGRYSnVJRzU5TEdWbFBXWjFibU4wYVc5dUtHVXBlMlp2Y2loMllYSWdkQ3h5UFdVOVBUMUhMRzQ5VXloeVAwUTZaeWhsS1Nrc2FUMWJYU3hoUFRBN2JpNXNaVzVuZEdnK1lUc3BJVzhvUWl4MFBXNWJZU3NyWFNsOGZISW1KaUZ2S0Vjc2RDbDhmR2t1Y0hWemFDaENXM1JkS1R0eVpYUjFjbTRnYVgwN1MzeDhLRlE5Wm5WdVkzUnBiMjRvS1h0cFppaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1ZDbDBhSEp2ZHlCVWVYQmxSWEp5YjNJb1hDSlRlVzFpYjJ3Z2FYTWdibTkwSUdFZ1kyOXVjM1J5ZFdOMGIzSWhYQ0lwTzNaaGNpQmxQV1FvWVhKbmRXMWxiblJ6TG14bGJtZDBhRDR3UDJGeVozVnRaVzUwYzFzd1hUcDJiMmxrSURBcExIUTlablZ1WTNScGIyNG9jaWw3ZEdocGN6MDlQVWNtSm5RdVkyRnNiQ2hFTEhJcExHOG9kR2hwY3l4VktTWW1ieWgwYUdselcxVmRMR1VwSmlZb2RHaHBjMXRWWFZ0bFhUMGhNU2tzZWloMGFHbHpMR1VzYWlneExISXBLWDA3Y21WMGRYSnVJR2ttSm5FbUpub29SeXhsTEh0amIyNW1hV2QxY21GaWJHVTZJVEFzYzJWME9uUjlLU3hJS0dVcGZTeHpLRlJiU1Ywc1hDSjBiMU4wY21sdVoxd2lMR1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJSFJvYVhNdVgydDlLU3hOTG1ZOVVTeDRMbVk5U2l4bEtGd2lMaTlmYjJKcVpXTjBMV2R2Y0c1Y0lpa3VaajFQTG1ZOVdpeGxLRndpTGk5ZmIySnFaV04wTFhCcFpWd2lLUzVtUFZnc1pTaGNJaTR2WDI5aWFtVmpkQzFuYjNCelhDSXBMbVk5WldVc2FTWW1JV1VvWENJdUwxOXNhV0p5WVhKNVhDSXBKaVp6S0Vjc1hDSndjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaVndpTEZnc0lUQXBMR2d1WmoxbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z1NDaHdLR1VwS1gwcExHRW9ZUzVISzJFdVZ5dGhMa1lxSVVzc2UxTjViV0p2YkRwVWZTazdabTl5S0haaGNpQjBaVDFjSW1oaGMwbHVjM1JoYm1ObExHbHpRMjl1WTJGMFUzQnlaV0ZrWVdKc1pTeHBkR1Z5WVhSdmNpeHRZWFJqYUN4eVpYQnNZV05sTEhObFlYSmphQ3h6Y0dWamFXVnpMSE53YkdsMExIUnZVSEpwYldsMGFYWmxMSFJ2VTNSeWFXNW5WR0ZuTEhWdWMyTnZjR0ZpYkdWelhDSXVjM0JzYVhRb1hDSXNYQ0lwTEhKbFBUQTdkR1V1YkdWdVozUm9QbkpsT3lsd0tIUmxXM0psS3l0ZEtUdG1iM0lvZG1GeUlIUmxQVkFvY0M1emRHOXlaU2tzY21VOU1EdDBaUzVzWlc1bmRHZytjbVU3S1hrb2RHVmJjbVVySzEwcE8yRW9ZUzVUSzJFdVJpb2hTeXhjSWxONWJXSnZiRndpTEh0Y0ltWnZjbHdpT21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCdktFWXNaU3M5WENKY0lpay9SbHRsWFRwR1cyVmRQVlFvWlNsOUxHdGxlVVp2Y2pwbWRXNWpkR2x2YmlobEtYdHBaaWhYS0dVcEtYSmxkSFZ5YmlCdEtFWXNaU2s3ZEdoeWIzY2dWSGx3WlVWeWNtOXlLR1VyWENJZ2FYTWdibTkwSUdFZ2MzbHRZbTlzSVZ3aUtYMHNkWE5sVTJWMGRHVnlPbVoxYm1OMGFXOXVLQ2w3Y1QwaE1IMHNkWE5sVTJsdGNHeGxPbVoxYm1OMGFXOXVLQ2w3Y1QwaE1YMTlLU3hoS0dFdVV5dGhMa1lxSVVzc1hDSlBZbXBsWTNSY0lpeDdZM0psWVhSbE9pUXNaR1ZtYVc1bFVISnZjR1Z5ZEhrNlNpeGtaV1pwYm1WUWNtOXdaWEowYVdWek9sWXNaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eU9sRXNaMlYwVDNkdVVISnZjR1Z5ZEhsT1lXMWxjenBhTEdkbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N6cGxaWDBwTEVFbUptRW9ZUzVUSzJFdVJpb29JVXQ4ZkdNb1puVnVZM1JwYjI0b0tYdDJZWElnWlQxVUtDazdjbVYwZFhKdVhDSmJiblZzYkYxY0lpRTlUaWhiWlYwcGZIeGNJbnQ5WENJaFBVNG9lMkU2WlgwcGZIeGNJbnQ5WENJaFBVNG9UMkpxWldOMEtHVXBLWDBwS1N4Y0lrcFRUMDVjSWl4N2MzUnlhVzVuYVdaNU9tWjFibU4wYVc5dUtHVXBlMmxtS0hadmFXUWdNQ0U5UFdVbUppRlhLR1VwS1h0bWIzSW9kbUZ5SUhRc2NpeHVQVnRsWFN4dlBURTdZWEpuZFcxbGJuUnpMbXhsYm1kMGFENXZPeWx1TG5CMWMyZ29ZWEpuZFcxbGJuUnpXMjhySzEwcE8zSmxkSFZ5YmlCMFBXNWJNVjBzWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2RDWW1LSEk5ZENrc0lYSW1KbDhvZENsOGZDaDBQV1oxYm1OMGFXOXVLR1VzZENsN2FXWW9jaVltS0hROWNpNWpZV3hzS0hSb2FYTXNaU3gwS1Nrc0lWY29kQ2twY21WMGRYSnVJSFI5S1N4dVd6RmRQWFFzVGk1aGNIQnNlU2hCTEc0cGZYMTlLU3hVVzBsZFcwTmRmSHhsS0Z3aUxpOWZhR2xrWlZ3aUtTaFVXMGxkTEVNc1ZGdEpYUzUyWVd4MVpVOW1LU3htS0ZRc1hDSlRlVzFpYjJ4Y0lpa3NaaWhOWVhSb0xGd2lUV0YwYUZ3aUxDRXdLU3htS0c0dVNsTlBUaXhjSWtwVFQwNWNJaXdoTUNsOUxIdGNJaTR2WDJGdUxXOWlhbVZqZEZ3aU9qSTNMRndpTGk5ZlpHVnpZM0pwY0hSdmNuTmNJam96TXl4Y0lpNHZYMlZ1ZFcwdGEyVjVjMXdpT2pNMkxGd2lMaTlmWlhod2IzSjBYQ0k2TXpjc1hDSXVMMTltWVdsc2Mxd2lPak00TEZ3aUxpOWZaMnh2WW1Gc1hDSTZNemtzWENJdUwxOW9ZWE5jSWpvME1DeGNJaTR2WDJocFpHVmNJam8wTVN4Y0lpNHZYMmx6TFdGeWNtRjVYQ0k2TkRVc1hDSXVMMTlyWlhsdlpsd2lPalV4TEZ3aUxpOWZiR2xpY21GeWVWd2lPalV5TEZ3aUxpOWZiV1YwWVZ3aU9qVXpMRndpTGk5ZmIySnFaV04wTFdOeVpXRjBaVndpT2pVMExGd2lMaTlmYjJKcVpXTjBMV1J3WENJNk5UVXNYQ0l1TDE5dlltcGxZM1F0WjI5d1pGd2lPalUzTEZ3aUxpOWZiMkpxWldOMExXZHZjRzVjSWpvMU9TeGNJaTR2WDI5aWFtVmpkQzFuYjNCdUxXVjRkRndpT2pVNExGd2lMaTlmYjJKcVpXTjBMV2R2Y0hOY0lqbzJNQ3hjSWk0dlgyOWlhbVZqZEMxclpYbHpYQ0k2TmpNc1hDSXVMMTl2WW1wbFkzUXRjR2xsWENJNk5qUXNYQ0l1TDE5d2NtOXdaWEowZVMxa1pYTmpYQ0k2TmpZc1hDSXVMMTl5WldSbFptbHVaVndpT2pZM0xGd2lMaTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2RjSWpvMk9TeGNJaTR2WDNOb1lYSmxaRndpT2pjeExGd2lMaTlmZEc4dGFXOWlhbVZqZEZ3aU9qYzFMRndpTGk5ZmRHOHRjSEpwYldsMGFYWmxYQ0k2Tnpnc1hDSXVMMTkxYVdSY0lqbzNPU3hjSWk0dlgzZHJjMXdpT2pneUxGd2lMaTlmZDJ0ekxXUmxabWx1WlZ3aU9qZ3dMRndpTGk5ZmQydHpMV1Y0ZEZ3aU9qZ3hmVjBzT1RNNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0bEtGd2lMaTlmZDJ0ekxXUmxabWx1WlZ3aUtTaGNJbUZ6ZVc1alNYUmxjbUYwYjNKY0lpbDlMSHRjSWk0dlgzZHJjeTFrWldacGJtVmNJam80TUgxZExEazBPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdaU2hjSWk0dlgzZHJjeTFrWldacGJtVmNJaWtvWENKdlluTmxjblpoWW14bFhDSXBmU3g3WENJdUwxOTNhM010WkdWbWFXNWxYQ0k2T0RCOVhTdzVOVHBiWm5WdVkzUnBiMjRvWlN4MExISXBlMlVvWENJdUwyVnpOaTVoY25KaGVTNXBkR1Z5WVhSdmNsd2lLVHRtYjNJb2RtRnlJRzQ5WlNoY0lpNHZYMmRzYjJKaGJGd2lLU3h2UFdVb1hDSXVMMTlvYVdSbFhDSXBMR2s5WlNoY0lpNHZYMmwwWlhKaGRHOXljMXdpS1N4aFBXVW9YQ0l1TDE5M2EzTmNJaWtvWENKMGIxTjBjbWx1WjFSaFoxd2lLU3h6UFZ0Y0lrNXZaR1ZNYVhOMFhDSXNYQ0pFVDAxVWIydGxia3hwYzNSY0lpeGNJazFsWkdsaFRHbHpkRndpTEZ3aVUzUjViR1ZUYUdWbGRFeHBjM1JjSWl4Y0lrTlRVMUoxYkdWTWFYTjBYQ0pkTEhVOU1EdDFQRFU3ZFNzcktYdDJZWElnWXoxelczVmRMR3c5Ymx0alhTeG1QV3dtSm13dWNISnZkRzkwZVhCbE8yWW1KaUZtVzJGZEppWnZLR1lzWVN4aktTeHBXMk5kUFdrdVFYSnlZWGw5ZlN4N1hDSXVMMTluYkc5aVlXeGNJam96T1N4Y0lpNHZYMmhwWkdWY0lqbzBNU3hjSWk0dlgybDBaWEpoZEc5eWMxd2lPalV3TEZ3aUxpOWZkMnR6WENJNk9ESXNYQ0l1TDJWek5pNWhjbkpoZVM1cGRHVnlZWFJ2Y2x3aU9qZ3pmVjBzT1RZNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0bWRXNWpkR2x2YmlCdUtDbDdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2ljMlYwVkdsdFpXOTFkQ0JvWVhNZ2JtOTBJR0psWlc0Z1pHVm1hVzVsWkZ3aUtYMW1kVzVqZEdsdmJpQnZLQ2w3ZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpWTJ4bFlYSlVhVzFsYjNWMElHaGhjeUJ1YjNRZ1ltVmxiaUJrWldacGJtVmtYQ0lwZldaMWJtTjBhVzl1SUdrb1pTbDdhV1lvWmowOVBYTmxkRlJwYldWdmRYUXBjbVYwZFhKdUlITmxkRlJwYldWdmRYUW9aU3d3S1R0cFppZ29aajA5UFc1OGZDRm1LU1ltYzJWMFZHbHRaVzkxZENseVpYUjFjbTRnWmoxelpYUlVhVzFsYjNWMExITmxkRlJwYldWdmRYUW9aU3d3S1R0MGNubDdjbVYwZFhKdUlHWW9aU3d3S1gxallYUmphQ2gwS1h0MGNubDdjbVYwZFhKdUlHWXVZMkZzYkNodWRXeHNMR1VzTUNsOVkyRjBZMmdvZENsN2NtVjBkWEp1SUdZdVkyRnNiQ2gwYUdsekxHVXNNQ2w5ZlgxbWRXNWpkR2x2YmlCaEtHVXBlMmxtS0dROVBUMWpiR1ZoY2xScGJXVnZkWFFwY21WMGRYSnVJR05zWldGeVZHbHRaVzkxZENobEtUdHBaaWdvWkQwOVBXOThmQ0ZrS1NZbVkyeGxZWEpVYVcxbGIzVjBLWEpsZEhWeWJpQmtQV05zWldGeVZHbHRaVzkxZEN4amJHVmhjbFJwYldWdmRYUW9aU2s3ZEhKNWUzSmxkSFZ5YmlCa0tHVXBmV05oZEdOb0tIUXBlM1J5ZVh0eVpYUjFjbTRnWkM1allXeHNLRzUxYkd3c1pTbDlZMkYwWTJnb2RDbDdjbVYwZFhKdUlHUXVZMkZzYkNoMGFHbHpMR1VwZlgxOVpuVnVZM1JwYjI0Z2N5Z3BlMjBtSm1nbUppaHRQU0V4TEdndWJHVnVaM1JvUDNrOWFDNWpiMjVqWVhRb2VTazZkajB0TVN4NUxteGxibWQwYUNZbWRTZ3BLWDFtZFc1amRHbHZiaUIxS0NsN2FXWW9JVzBwZTNaaGNpQmxQV2tvY3lrN2JUMGhNRHRtYjNJb2RtRnlJSFE5ZVM1c1pXNW5kR2c3ZERzcGUyWnZjaWhvUFhrc2VUMWJYVHNySzNZOGREc3BhQ1ltYUZ0MlhTNXlkVzRvS1R0MlBTMHhMSFE5ZVM1c1pXNW5kR2g5YUQxdWRXeHNMRzA5SVRFc1lTaGxLWDE5Wm5WdVkzUnBiMjRnWXlobExIUXBlM1JvYVhNdVpuVnVQV1VzZEdocGN5NWhjbkpoZVQxMGZXWjFibU4wYVc5dUlHd29LWHQ5ZG1GeUlHWXNaQ3h3UFhRdVpYaHdiM0owY3oxN2ZUc2hablZ1WTNScGIyNG9LWHQwY25sN1pqMWNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJ6WlhSVWFXMWxiM1YwUDNObGRGUnBiV1Z2ZFhRNmJuMWpZWFJqYUNobEtYdG1QVzU5ZEhKNWUyUTlYQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWTJ4bFlYSlVhVzFsYjNWMFAyTnNaV0Z5VkdsdFpXOTFkRHB2ZldOaGRHTm9LR1VwZTJROWIzMTlLQ2s3ZG1GeUlHZ3NlVDFiWFN4dFBTRXhMSFk5TFRFN2NDNXVaWGgwVkdsamF6MW1kVzVqZEdsdmJpaGxLWHQyWVhJZ2REMXVaWGNnUVhKeVlYa29ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDMHhLVHRwWmloaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvUGpFcFptOXlLSFpoY2lCeVBURTdjanhoY21kMWJXVnVkSE11YkdWdVozUm9PM0lyS3lsMFczSXRNVjA5WVhKbmRXMWxiblJ6VzNKZE8za3VjSFZ6YUNodVpYY2dZeWhsTEhRcEtTd3hJVDA5ZVM1c1pXNW5kR2g4ZkcxOGZHa29kU2w5TEdNdWNISnZkRzkwZVhCbExuSjFiajFtZFc1amRHbHZiaWdwZTNSb2FYTXVablZ1TG1Gd2NHeDVLRzUxYkd3c2RHaHBjeTVoY25KaGVTbDlMSEF1ZEdsMGJHVTlYQ0ppY205M2MyVnlYQ0lzY0M1aWNtOTNjMlZ5UFNFd0xIQXVaVzUyUFh0OUxIQXVZWEpuZGoxYlhTeHdMblpsY25OcGIyNDlYQ0pjSWl4d0xuWmxjbk5wYjI1elBYdDlMSEF1YjI0OWJDeHdMbUZrWkV4cGMzUmxibVZ5UFd3c2NDNXZibU5sUFd3c2NDNXZabVk5YkN4d0xuSmxiVzkyWlV4cGMzUmxibVZ5UFd3c2NDNXlaVzF2ZG1WQmJHeE1hWE4wWlc1bGNuTTliQ3h3TG1WdGFYUTliQ3h3TG1KcGJtUnBibWM5Wm5WdVkzUnBiMjRvWlNsN2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWNISnZZMlZ6Y3k1aWFXNWthVzVuSUdseklHNXZkQ0J6ZFhCd2IzSjBaV1JjSWlsOUxIQXVZM2RrUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1WENJdlhDSjlMSEF1WTJoa2FYSTlablZ1WTNScGIyNG9aU2w3ZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpY0hKdlkyVnpjeTVqYUdScGNpQnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa1hDSXBmU3h3TG5WdFlYTnJQV1oxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJREI5ZlN4N2ZWMHNPVGM2VzJaMWJtTjBhVzl1S0dVc2RDeHlLWHNvWm5WdVkzUnBiMjRvY2lsN2RtRnlJRzQ5WENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhJL2NqcGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdkMmx1Wkc5M1AzZHBibVJ2ZHpwY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2MyVnNaajl6Wld4bU9uUm9hWE1zYnoxdUxuSmxaMlZ1WlhKaGRHOXlVblZ1ZEdsdFpTWW1UMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9iaWt1YVc1a1pYaFBaaWhjSW5KbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlZ3aUtUNDlNQ3hwUFc4bUptNHVjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxPMmxtS0c0dWNtVm5aVzVsY21GMGIzSlNkVzUwYVcxbFBYWnZhV1FnTUN4MExtVjRjRzl5ZEhNOVpTaGNJaTR2Y25WdWRHbHRaVndpS1N4dktXNHVjbVZuWlc1bGNtRjBiM0pTZFc1MGFXMWxQV2s3Wld4elpTQjBjbmw3WkdWc1pYUmxJRzR1Y21WblpXNWxjbUYwYjNKU2RXNTBhVzFsZldOaGRHTm9LR0VwZTI0dWNtVm5aVzVsY21GMGIzSlNkVzUwYVcxbFBYWnZhV1FnTUgxOUtTNWpZV3hzS0hSb2FYTXNYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUdkc2IySmhiRDluYkc5aVlXdzZYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUhObGJHWS9jMlZzWmpwY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdkMmx1Wkc5M1AzZHBibVJ2ZHpwN2ZTbDlMSHRjSWk0dmNuVnVkR2x0WlZ3aU9qazRmVjBzT1RnNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1hzb1puVnVZM1JwYjI0b1pTeHlLWHNoWm5WdVkzUnBiMjRvY2lsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Wm5WdVkzUnBiMjRnYmlobExIUXNjaXh1S1h0MllYSWdiejFQWW1wbFkzUXVZM0psWVhSbEtDaDBmSHhwS1M1d2NtOTBiM1I1Y0dVcExHRTlibVYzSUdnb2JueDhXMTBwTzNKbGRIVnliaUJ2TGw5cGJuWnZhMlU5WmlobExISXNZU2tzYjMxbWRXNWpkR2x2YmlCdktHVXNkQ3h5S1h0MGNubDdjbVYwZFhKdWUzUjVjR1U2WENKdWIzSnRZV3hjSWl4aGNtYzZaUzVqWVd4c0tIUXNjaWw5ZldOaGRHTm9LRzRwZTNKbGRIVnlibnQwZVhCbE9sd2lkR2h5YjNkY0lpeGhjbWM2Ym4xOWZXWjFibU4wYVc5dUlHa29LWHQ5Wm5WdVkzUnBiMjRnWVNncGUzMW1kVzVqZEdsdmJpQnpLQ2w3ZldaMWJtTjBhVzl1SUhVb1pTbDdXMXdpYm1WNGRGd2lMRndpZEdoeWIzZGNJaXhjSW5KbGRIVnlibHdpWFM1bWIzSkZZV05vS0daMWJtTjBhVzl1S0hRcGUyVmJkRjA5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUhSb2FYTXVYMmx1ZG05clpTaDBMR1VwZlgwcGZXWjFibU4wYVc5dUlHTW9aU2w3ZEdocGN5NWhjbWM5WlgxbWRXNWpkR2x2YmlCc0tIUXBlMloxYm1OMGFXOXVJSElvWlN4dUxHa3NZU2w3ZG1GeUlITTlieWgwVzJWZExIUXNiaWs3YVdZb1hDSjBhSEp2ZDF3aUlUMDljeTUwZVhCbEtYdDJZWElnZFQxekxtRnlaeXhzUFhVdWRtRnNkV1U3Y21WMGRYSnVJR3dnYVc1emRHRnVZMlZ2WmlCalAxQnliMjFwYzJVdWNtVnpiMngyWlNoc0xtRnlaeWt1ZEdobGJpaG1kVzVqZEdsdmJpaGxLWHR5S0Z3aWJtVjRkRndpTEdVc2FTeGhLWDBzWm5WdVkzUnBiMjRvWlNsN2NpaGNJblJvY205M1hDSXNaU3hwTEdFcGZTazZVSEp2YldselpTNXlaWE52YkhabEtHd3BMblJvWlc0b1puVnVZM1JwYjI0b1pTbDdkUzUyWVd4MVpUMWxMR2tvZFNsOUxHRXBmV0VvY3k1aGNtY3BmV1oxYm1OMGFXOXVJRzRvWlN4MEtYdG1kVzVqZEdsdmJpQnVLQ2w3Y21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0c0c2J5bDdjaWhsTEhRc2JpeHZLWDBwZlhKbGRIVnliaUJwUFdrL2FTNTBhR1Z1S0c0c2JpazZiaWdwZlZ3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCbEppWmxMbVJ2YldGcGJpWW1LSEk5WlM1a2IyMWhhVzR1WW1sdVpDaHlLU2s3ZG1GeUlHazdkR2hwY3k1ZmFXNTJiMnRsUFc1OVpuVnVZM1JwYjI0Z1ppaGxMSFFzY2lsN2RtRnlJRzQ5VHp0eVpYUjFjbTRnWm5WdVkzUnBiMjRvYVN4aEtYdHBaaWh1UFQwOWVDbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkhaVzVsY21GMGIzSWdhWE1nWVd4eVpXRmtlU0J5ZFc1dWFXNW5YQ0lwTzJsbUtHNDlQVDFRS1h0cFppaGNJblJvY205M1hDSTlQVDFwS1hSb2NtOTNJR0U3Y21WMGRYSnVJRzBvS1gxbWIzSW9PenNwZTNaaGNpQnpQWEl1WkdWc1pXZGhkR1U3YVdZb2N5bDdhV1lvWENKeVpYUjFjbTVjSWowOVBXbDhmRndpZEdoeWIzZGNJajA5UFdrbUpuTXVhWFJsY21GMGIzSmJhVjA5UFQxMktYdHlMbVJsYkdWbllYUmxQVzUxYkd3N2RtRnlJSFU5Y3k1cGRHVnlZWFJ2Y2x0Y0luSmxkSFZ5Ymx3aVhUdHBaaWgxS1h0MllYSWdZejF2S0hVc2N5NXBkR1Z5WVhSdmNpeGhLVHRwWmloY0luUm9jbTkzWENJOVBUMWpMblI1Y0dVcGUyazlYQ0owYUhKdmQxd2lMR0U5WXk1aGNtYzdZMjl1ZEdsdWRXVjlmV2xtS0Z3aWNtVjBkWEp1WENJOVBUMXBLV052Ym5ScGJuVmxmWFpoY2lCalBXOG9jeTVwZEdWeVlYUnZjbHRwWFN4ekxtbDBaWEpoZEc5eUxHRXBPMmxtS0Z3aWRHaHliM2RjSWowOVBXTXVkSGx3WlNsN2NpNWtaV3hsWjJGMFpUMXVkV3hzTEdrOVhDSjBhSEp2ZDF3aUxHRTlZeTVoY21jN1kyOXVkR2x1ZFdWOWFUMWNJbTVsZUhSY0lpeGhQWFk3ZG1GeUlHdzlZeTVoY21jN2FXWW9JV3d1Wkc5dVpTbHlaWFIxY200Z2JqMU5MR3c3Y2x0ekxuSmxjM1ZzZEU1aGJXVmRQV3d1ZG1Gc2RXVXNjaTV1WlhoMFBYTXVibVY0ZEV4dll5eHlMbVJsYkdWbllYUmxQVzUxYkd4OWFXWW9YQ0p1WlhoMFhDSTlQVDFwS1hJdWMyVnVkRDF5TGw5elpXNTBQV0U3Wld4elpTQnBaaWhjSW5Sb2NtOTNYQ0k5UFQxcEtYdHBaaWh1UFQwOVR5bDBhSEp2ZHlCdVBWQXNZVHR5TG1ScGMzQmhkR05vUlhoalpYQjBhVzl1S0dFcEppWW9hVDFjSW01bGVIUmNJaXhoUFhZcGZXVnNjMlZjSW5KbGRIVnlibHdpUFQwOWFTWW1jaTVoWW5KMWNIUW9YQ0p5WlhSMWNtNWNJaXhoS1R0dVBYZzdkbUZ5SUdNOWJ5aGxMSFFzY2lrN2FXWW9YQ0p1YjNKdFlXeGNJajA5UFdNdWRIbHdaU2w3YmoxeUxtUnZibVUvVURwTk8zWmhjaUJzUFh0MllXeDFaVHBqTG1GeVp5eGtiMjVsT25JdVpHOXVaWDA3YVdZb1l5NWhjbWNoUFQxcktYSmxkSFZ5YmlCc08zSXVaR1ZzWldkaGRHVW1KbHdpYm1WNGRGd2lQVDA5YVNZbUtHRTlkaWw5Wld4elpWd2lkR2h5YjNkY0lqMDlQV011ZEhsd1pTWW1LRzQ5VUN4cFBWd2lkR2h5YjNkY0lpeGhQV011WVhKbktYMTlmV1oxYm1OMGFXOXVJR1FvWlNsN2RtRnlJSFE5ZTNSeWVVeHZZenBsV3pCZGZUc3hJR2x1SUdVbUppaDBMbU5oZEdOb1RHOWpQV1ZiTVYwcExESWdhVzRnWlNZbUtIUXVabWx1WVd4c2VVeHZZejFsV3pKZExIUXVZV1owWlhKTWIyTTlaVnN6WFNrc2RHaHBjeTUwY25sRmJuUnlhV1Z6TG5CMWMyZ29kQ2w5Wm5WdVkzUnBiMjRnY0NobEtYdDJZWElnZEQxbExtTnZiWEJzWlhScGIyNThmSHQ5TzNRdWRIbHdaVDFjSW01dmNtMWhiRndpTEdSbGJHVjBaU0IwTG1GeVp5eGxMbU52YlhCc1pYUnBiMjQ5ZEgxbWRXNWpkR2x2YmlCb0tHVXBlM1JvYVhNdWRISjVSVzUwY21sbGN6MWJlM1J5ZVV4dll6cGNJbkp2YjNSY0luMWRMR1V1Wm05eVJXRmphQ2hrTEhSb2FYTXBMSFJvYVhNdWNtVnpaWFFvSVRBcGZXWjFibU4wYVc5dUlIa29aU2w3YVdZb1pTbDdkbUZ5SUhROVpWdG5YVHRwWmloMEtYSmxkSFZ5YmlCMExtTmhiR3dvWlNrN2FXWW9YQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnWlM1dVpYaDBLWEpsZEhWeWJpQmxPMmxtS0NGcGMwNWhUaWhsTG14bGJtZDBhQ2twZTNaaGNpQnlQUzB4TEc0OVpuVnVZM1JwYjI0Z2J5Z3BlMlp2Y2lnN0t5dHlQR1V1YkdWdVozUm9PeWxwWmloZkxtTmhiR3dvWlN4eUtTbHlaWFIxY200Z2J5NTJZV3gxWlQxbFczSmRMRzh1Wkc5dVpUMGhNU3h2TzNKbGRIVnliaUJ2TG5aaGJIVmxQWFlzYnk1a2IyNWxQU0V3TEc5OU8zSmxkSFZ5YmlCdUxtNWxlSFE5Ym4xOWNtVjBkWEp1ZTI1bGVIUTZiWDE5Wm5WdVkzUnBiMjRnYlNncGUzSmxkSFZ5Ym50MllXeDFaVHAyTEdSdmJtVTZJVEI5ZlhaaGNpQjJMRjg5VDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTeGlQVndpWm5WdVkzUnBiMjVjSWowOWRIbHdaVzltSUZONWJXSnZiRDlUZVcxaWIydzZlMzBzWnoxaUxtbDBaWEpoZEc5eWZIeGNJa0JBYVhSbGNtRjBiM0pjSWl4RlBXSXVkRzlUZEhKcGJtZFVZV2Q4ZkZ3aVFFQjBiMU4wY21sdVoxUmhaMXdpTEdvOVhDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlIUXNkejF5TG5KbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlR0cFppaDNLWEpsZEhWeWJpQjJiMmxrS0dvbUppaDBMbVY0Y0c5eWRITTlkeWtwTzNjOWNpNXlaV2RsYm1WeVlYUnZjbEoxYm5ScGJXVTlhajkwTG1WNGNHOXlkSE02ZTMwc2R5NTNjbUZ3UFc0N2RtRnlJRTg5WENKemRYTndaVzVrWldSVGRHRnlkRndpTEUwOVhDSnpkWE53Wlc1a1pXUlphV1ZzWkZ3aUxIZzlYQ0psZUdWamRYUnBibWRjSWl4UVBWd2lZMjl0Y0d4bGRHVmtYQ0lzYXoxN2ZTeFNQWE11Y0hKdmRHOTBlWEJsUFdrdWNISnZkRzkwZVhCbE8yRXVjSEp2ZEc5MGVYQmxQVkl1WTI5dWMzUnlkV04wYjNJOWN5eHpMbU52Ym5OMGNuVmpkRzl5UFdFc2MxdEZYVDFoTG1ScGMzQnNZWGxPWVcxbFBWd2lSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNWNJaXgzTG1selIyVnVaWEpoZEc5eVJuVnVZM1JwYjI0OVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdaU1ltWlM1amIyNXpkSEoxWTNSdmNqdHlaWFIxY200aElYUW1KaWgwUFQwOVlYeDhYQ0pIWlc1bGNtRjBiM0pHZFc1amRHbHZibHdpUFQwOUtIUXVaR2x6Y0d4aGVVNWhiV1Y4ZkhRdWJtRnRaU2twZlN4M0xtMWhjbXM5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUU5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFpqOVBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMllvWlN4ektUb29aUzVmWDNCeWIzUnZYMTg5Y3l4RklHbHVJR1Y4ZkNobFcwVmRQVndpUjJWdVpYSmhkRzl5Um5WdVkzUnBiMjVjSWlrcExGeHVaUzV3Y205MGIzUjVjR1U5VDJKcVpXTjBMbU55WldGMFpTaFNLU3hsZlN4M0xtRjNjbUZ3UFdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCdVpYY2dZeWhsS1gwc2RTaHNMbkJ5YjNSdmRIbHdaU2tzZHk1aGMzbHVZejFtZFc1amRHbHZiaWhsTEhRc2NpeHZLWHQyWVhJZ2FUMXVaWGNnYkNodUtHVXNkQ3h5TEc4cEtUdHlaWFIxY200Z2R5NXBjMGRsYm1WeVlYUnZja1oxYm1OMGFXOXVLSFFwUDJrNmFTNXVaWGgwS0NrdWRHaGxiaWhtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTRnWlM1a2IyNWxQMlV1ZG1Gc2RXVTZhUzV1WlhoMEtDbDlLWDBzZFNoU0tTeFNXMmRkUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUhSb2FYTjlMRkpiUlYwOVhDSkhaVzVsY21GMGIzSmNJaXhTTG5SdlUzUnlhVzVuUFdaMWJtTjBhVzl1S0NsN2NtVjBkWEp1WENKYmIySnFaV04wSUVkbGJtVnlZWFJ2Y2wxY0luMHNkeTVyWlhselBXWjFibU4wYVc5dUtHVXBlM1poY2lCMFBWdGRPMlp2Y2loMllYSWdjaUJwYmlCbEtYUXVjSFZ6YUNoeUtUdHlaWFIxY200Z2RDNXlaWFpsY25ObEtDa3NablZ1WTNScGIyNGdiaWdwZTJadmNpZzdkQzVzWlc1bmRHZzdLWHQyWVhJZ2NqMTBMbkJ2Y0NncE8ybG1LSElnYVc0Z1pTbHlaWFIxY200Z2JpNTJZV3gxWlQxeUxHNHVaRzl1WlQwaE1TeHVmWEpsZEhWeWJpQnVMbVJ2Ym1VOUlUQXNibjE5TEhjdWRtRnNkV1Z6UFhrc2FDNXdjbTkwYjNSNWNHVTllMk52Ym5OMGNuVmpkRzl5T21nc2NtVnpaWFE2Wm5WdVkzUnBiMjRvWlNsN2FXWW9kR2hwY3k1d2NtVjJQVEFzZEdocGN5NXVaWGgwUFRBc2RHaHBjeTV6Wlc1MFBYUm9hWE11WDNObGJuUTlkaXgwYUdsekxtUnZibVU5SVRFc2RHaHBjeTVrWld4bFoyRjBaVDF1ZFd4c0xIUm9hWE11ZEhKNVJXNTBjbWxsY3k1bWIzSkZZV05vS0hBcExDRmxLV1p2Y2loMllYSWdkQ0JwYmlCMGFHbHpLVndpZEZ3aVBUMDlkQzVqYUdGeVFYUW9NQ2ttSmw4dVkyRnNiQ2gwYUdsekxIUXBKaVloYVhOT1lVNG9LM1F1YzJ4cFkyVW9NU2twSmlZb2RHaHBjMXQwWFQxMktYMHNjM1J2Y0RwbWRXNWpkR2x2YmlncGUzUm9hWE11Wkc5dVpUMGhNRHQyWVhJZ1pUMTBhR2x6TG5SeWVVVnVkSEpwWlhOYk1GMHNkRDFsTG1OdmJYQnNaWFJwYjI0N2FXWW9YQ0owYUhKdmQxd2lQVDA5ZEM1MGVYQmxLWFJvY205M0lIUXVZWEpuTzNKbGRIVnliaUIwYUdsekxuSjJZV3g5TEdScGMzQmhkR05vUlhoalpYQjBhVzl1T21aMWJtTjBhVzl1S0dVcGUyWjFibU4wYVc5dUlIUW9kQ3h1S1h0eVpYUjFjbTRnYVM1MGVYQmxQVndpZEdoeWIzZGNJaXhwTG1GeVp6MWxMSEl1Ym1WNGREMTBMQ0VoYm4xcFppaDBhR2x6TG1SdmJtVXBkR2h5YjNjZ1pUdG1iM0lvZG1GeUlISTlkR2hwY3l4dVBYUm9hWE11ZEhKNVJXNTBjbWxsY3k1c1pXNW5kR2d0TVR0dVBqMHdPeTB0YmlsN2RtRnlJRzg5ZEdocGN5NTBjbmxGYm5SeWFXVnpXMjVkTEdrOWJ5NWpiMjF3YkdWMGFXOXVPMmxtS0Z3aWNtOXZkRndpUFQwOWJ5NTBjbmxNYjJNcGNtVjBkWEp1SUhRb1hDSmxibVJjSWlrN2FXWW9ieTUwY25sTWIyTThQWFJvYVhNdWNISmxkaWw3ZG1GeUlHRTlYeTVqWVd4c0tHOHNYQ0pqWVhSamFFeHZZMXdpS1N4elBWOHVZMkZzYkNodkxGd2labWx1WVd4c2VVeHZZMXdpS1R0cFppaGhKaVp6S1h0cFppaDBhR2x6TG5CeVpYWThieTVqWVhSamFFeHZZeWx5WlhSMWNtNGdkQ2h2TG1OaGRHTm9URzlqTENFd0tUdHBaaWgwYUdsekxuQnlaWFk4Ynk1bWFXNWhiR3g1VEc5aktYSmxkSFZ5YmlCMEtHOHVabWx1WVd4c2VVeHZZeWw5Wld4elpTQnBaaWhoS1h0cFppaDBhR2x6TG5CeVpYWThieTVqWVhSamFFeHZZeWx5WlhSMWNtNGdkQ2h2TG1OaGRHTm9URzlqTENFd0tYMWxiSE5sZTJsbUtDRnpLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJblJ5ZVNCemRHRjBaVzFsYm5RZ2QybDBhRzkxZENCallYUmphQ0J2Y2lCbWFXNWhiR3g1WENJcE8ybG1LSFJvYVhNdWNISmxkanh2TG1acGJtRnNiSGxNYjJNcGNtVjBkWEp1SUhRb2J5NW1hVzVoYkd4NVRHOWpLWDE5Zlgwc1lXSnlkWEIwT21aMWJtTjBhVzl1S0dVc2RDbDdabTl5S0haaGNpQnlQWFJvYVhNdWRISjVSVzUwY21sbGN5NXNaVzVuZEdndE1UdHlQajB3T3kwdGNpbDdkbUZ5SUc0OWRHaHBjeTUwY25sRmJuUnlhV1Z6VzNKZE8ybG1LRzR1ZEhKNVRHOWpQRDEwYUdsekxuQnlaWFltSmw4dVkyRnNiQ2h1TEZ3aVptbHVZV3hzZVV4dlkxd2lLU1ltZEdocGN5NXdjbVYyUEc0dVptbHVZV3hzZVV4dll5bDdkbUZ5SUc4OWJqdGljbVZoYTMxOWJ5WW1LRndpWW5KbFlXdGNJajA5UFdWOGZGd2lZMjl1ZEdsdWRXVmNJajA5UFdVcEppWnZMblJ5ZVV4dll6dzlkQ1ltZER3OWJ5NW1hVzVoYkd4NVRHOWpKaVlvYnoxdWRXeHNLVHQyWVhJZ2FUMXZQMjh1WTI5dGNHeGxkR2x2YmpwN2ZUdHlaWFIxY200Z2FTNTBlWEJsUFdVc2FTNWhjbWM5ZEN4dlAzUm9hWE11Ym1WNGREMXZMbVpwYm1Gc2JIbE1iMk02ZEdocGN5NWpiMjF3YkdWMFpTaHBLU3hyZlN4amIyMXdiR1YwWlRwbWRXNWpkR2x2YmlobExIUXBlMmxtS0Z3aWRHaHliM2RjSWowOVBXVXVkSGx3WlNsMGFISnZkeUJsTG1GeVp6dGNJbUp5WldGclhDSTlQVDFsTG5SNWNHVjhmRndpWTI5dWRHbHVkV1ZjSWowOVBXVXVkSGx3WlQ5MGFHbHpMbTVsZUhROVpTNWhjbWM2WENKeVpYUjFjbTVjSWowOVBXVXVkSGx3WlQ4b2RHaHBjeTV5ZG1Gc1BXVXVZWEpuTEhSb2FYTXVibVY0ZEQxY0ltVnVaRndpS1RwY0ltNXZjbTFoYkZ3aVBUMDlaUzUwZVhCbEppWjBKaVlvZEdocGN5NXVaWGgwUFhRcGZTeG1hVzVwYzJnNlpuVnVZM1JwYjI0b1pTbDdabTl5S0haaGNpQjBQWFJvYVhNdWRISjVSVzUwY21sbGN5NXNaVzVuZEdndE1UdDBQajB3T3kwdGRDbDdkbUZ5SUhJOWRHaHBjeTUwY25sRmJuUnlhV1Z6VzNSZE8ybG1LSEl1Wm1sdVlXeHNlVXh2WXowOVBXVXBjbVYwZFhKdUlIUm9hWE11WTI5dGNHeGxkR1VvY2k1amIyMXdiR1YwYVc5dUxISXVZV1owWlhKTWIyTXBMSEFvY2lrc2EzMTlMRndpWTJGMFkyaGNJanBtZFc1amRHbHZiaWhsS1h0bWIzSW9kbUZ5SUhROWRHaHBjeTUwY25sRmJuUnlhV1Z6TG14bGJtZDBhQzB4TzNRK1BUQTdMUzEwS1h0MllYSWdjajEwYUdsekxuUnllVVZ1ZEhKcFpYTmJkRjA3YVdZb2NpNTBjbmxNYjJNOVBUMWxLWHQyWVhJZ2JqMXlMbU52YlhCc1pYUnBiMjQ3YVdZb1hDSjBhSEp2ZDF3aVBUMDliaTUwZVhCbEtYdDJZWElnYnoxdUxtRnlaenR3S0hJcGZYSmxkSFZ5YmlCdmZYMTBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSnBiR3hsWjJGc0lHTmhkR05vSUdGMGRHVnRjSFJjSWlsOUxHUmxiR1ZuWVhSbFdXbGxiR1E2Wm5WdVkzUnBiMjRvWlN4MExISXBlM0psZEhWeWJpQjBhR2x6TG1SbGJHVm5ZWFJsUFh0cGRHVnlZWFJ2Y2pwNUtHVXBMSEpsYzNWc2RFNWhiV1U2ZEN4dVpYaDBURzlqT25KOUxHdDlmWDBvWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhJL2NqcGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdkMmx1Wkc5M1AzZHBibVJ2ZHpwY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2MyVnNaajl6Wld4bU9uUm9hWE1wZlNrdVkyRnNiQ2gwYUdsekxHVW9YQ0pmY0hKdlkyVnpjMXdpS1N4Y0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdaMnh2WW1Gc1AyZHNiMkpoYkRwY0luVnVaR1ZtYVc1bFpGd2lJVDEwZVhCbGIyWWdjMlZzWmo5elpXeG1PbHdpZFc1a1pXWnBibVZrWENJaFBYUjVjR1Z2WmlCM2FXNWtiM2MvZDJsdVpHOTNPbnQ5S1gwc2UxOXdjbTlqWlhOek9qazJmVjBzT1RrNlcyWjFibU4wYVc5dUtIUXNjaXh1S1hzaFpuVnVZM1JwYjI0b2RDeHVLWHRjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbEppWmxMbUZ0WkQ5bEtGdGRMRzRwT2x3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQnlKaVp5TG1WNGNHOXlkSE0vY2k1bGVIQnZjblJ6UFc0b0tUcDBMblIyTkQxdUtDbDlLSFJvYVhNc1puVnVZM1JwYjI0b0tYdG1kVzVqZEdsdmJpQmxLR1VwZTNKbGRIVnliaUJsYm1OdlpHVlZVa2tvWlNrdWNtVndiR0ZqWlNndkpUSTFXekF0T1YxYk1DMDVYUzluTEdaMWJtTjBhVzl1S0dVcGUzSmxkSFZ5Ymx3aUpWd2lLMlV1YzNWaWMzUnlhVzVuS0RNcGZTbDlablZ1WTNScGIyNGdkQ2gwS1h0MllYSWdjajFjSWx3aU8yUmJkQzVqYUdGeVFYUW9NQ2xkSmlZb2NqMTBMbU5vWVhKQmRDZ3dLU3gwUFhRdWMzVmljM1J5YVc1bktERXBLVHQyWVhJZ2JqMWNJbHdpTEc4OVhDSmNJaXhwUFNFd0xHRTlJVEVzY3owaE1UdGNJaXRjSWowOVBYSS9hVDBoTVRwY0lpNWNJajA5UFhJL0tHODlYQ0l1WENJc2JqMWNJaTVjSWlrNlhDSXZYQ0k5UFQxeVB5aHZQVndpTDF3aUxHNDlYQ0l2WENJcE9sd2lJMXdpUFQwOWNqOG9iejFjSWlOY0lpeHBQU0V4S1RwY0lqdGNJajA5UFhJL0tHODlYQ0k3WENJc2JqMWNJanRjSWl4aFBTRXdMSE05SVRBcE9sd2lQMXdpUFQwOWNqOG9iejFjSWo5Y0lpeHVQVndpSmx3aUxHRTlJVEFwT2x3aUpsd2lQVDA5Y2lZbUtHODlYQ0ltWENJc2JqMWNJaVpjSWl4aFBTRXdLVHRtYjNJb2RtRnlJSFU5VzEwc1l6MTBMbk53YkdsMEtGd2lMRndpS1N4c1BWdGRMR1k5ZTMwc2FEMHdPMmc4WXk1c1pXNW5kR2c3YUNzcktYdDJZWElnZVQxalcyaGRMRzA5Ym5Wc2JEdHBaaWg1TG1sdVpHVjRUMllvWENJNlhDSXBJVDA5TFRFcGUzWmhjaUIyUFhrdWMzQnNhWFFvWENJNlhDSXBPM2s5ZGxzd1hTeHRQWEJoY25ObFNXNTBLSFpiTVYwc01UQXBmV1p2Y2loMllYSWdYejE3ZlR0d1cza3VZMmhoY2tGMEtIa3ViR1Z1WjNSb0xURXBYVHNwWDF0NUxtTm9ZWEpCZENoNUxteGxibWQwYUMweEtWMDlJVEFzZVQxNUxuTjFZbk4wY21sdVp5Z3dMSGt1YkdWdVozUm9MVEVwTzNaaGNpQmlQWHQwY25WdVkyRjBaVHB0TEc1aGJXVTZlU3h6ZFdabWFXTmxjenBmZlR0c0xuQjFjMmdvWWlrc1psdDVYVDFpTEhVdWNIVnphQ2g1S1gxMllYSWdaejFtZFc1amRHbHZiaWgwS1h0bWIzSW9kbUZ5SUhJOVhDSmNJaXgxUFRBc1l6MHdPMk04YkM1c1pXNW5kR2c3WXlzcktYdDJZWElnWmoxc1cyTmRMR1E5ZENobUxtNWhiV1VwTzJsbUtHNTFiR3c5UFQxa2ZIeDJiMmxrSURBOVBUMWtmSHhCY25KaGVTNXBjMEZ5Y21GNUtHUXBKaVl3UFQwOVpDNXNaVzVuZEdoOGZGd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQmtKaVl3UFQwOVQySnFaV04wTG10bGVYTW9aQ2t1YkdWdVozUm9LWFVyS3p0bGJITmxJR2xtS0hJclBXTTlQVDExUDI4NmJueDhYQ0lzWENJc1FYSnlZWGt1YVhOQmNuSmhlU2hrS1NsN1lTWW1LSElyUFdZdWJtRnRaU3RjSWoxY0lpazdabTl5S0haaGNpQndQVEE3Y0R4a0xteGxibWQwYUR0d0t5c3BjRDR3SmlZb2NpczlaaTV6ZFdabWFXTmxjMXRjSWlwY0lsMC9ibng4WENJc1hDSTZYQ0lzWENJc1ppNXpkV1ptYVdObGMxdGNJaXBjSWwwbUptRW1KaWh5S3oxbUxtNWhiV1VyWENJOVhDSXBLU3h5S3oxcFAyVnVZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaGtXM0JkS1M1eVpYQnNZV05sS0M4aEwyY3NYQ0lsTWpGY0lpazZaU2hrVzNCZEtYMWxiSE5sSUdsbUtGd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQmtLWHRoSmlZaFppNXpkV1ptYVdObGMxdGNJaXBjSWwwbUppaHlLejFtTG01aGJXVXJYQ0k5WENJcE8zWmhjaUJvUFNFd08yWnZjaWgyWVhJZ2VTQnBiaUJrS1doOGZDaHlLejFtTG5OMVptWnBZMlZ6VzF3aUtsd2lYVDl1Zkh4Y0lpeGNJanBjSWl4Y0lpa3NhRDBoTVN4eUt6MXBQMlZ1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2g1S1M1eVpYQnNZV05sS0M4aEwyY3NYQ0lsTWpGY0lpazZaU2g1S1N4eUt6MW1Mbk4xWm1acFkyVnpXMXdpS2x3aVhUOWNJajFjSWpwY0lpeGNJaXh5S3oxcFAyVnVZMjlrWlZWU1NVTnZiWEJ2Ym1WdWRDaGtXM2xkS1M1eVpYQnNZV05sS0M4aEwyY3NYQ0lsTWpGY0lpazZaU2hrVzNsZEtYMWxiSE5sSUdFbUppaHlLejFtTG01aGJXVXNjeVltWENKY0lqMDlQV1I4ZkNoeUt6MWNJajFjSWlrcExHNTFiR3doUFdZdWRISjFibU5oZEdVbUppaGtQV1F1YzNWaWMzUnlhVzVuS0RBc1ppNTBjblZ1WTJGMFpTa3BMSElyUFdrL1pXNWpiMlJsVlZKSlEyOXRjRzl1Wlc1MEtHUXBMbkpsY0d4aFkyVW9MeUV2Wnl4Y0lpVXlNVndpS1RwbEtHUXBmWEpsZEhWeWJpQnlmVHR5WlhSMWNtNGdaeTUyWVhKT1lXMWxjejExTEh0d2NtVm1hWGc2Ynl4emRXSnpkR2wwZFhScGIyNDZaMzE5Wm5WdVkzUnBiMjRnY2lobEtYdHBaaWdoS0hSb2FYTWdhVzV6ZEdGdVkyVnZaaUJ5S1NseVpYUjFjbTRnYm1WM0lISW9aU2s3Wm05eUtIWmhjaUJ1UFdVdWMzQnNhWFFvWENKN1hDSXBMRzg5VzI0dWMyaHBablFvS1Ywc2FUMWJYU3hoUFZ0ZExITTlXMTA3Ymk1c1pXNW5kR2crTURzcGUzWmhjaUIxUFc0dWMyaHBablFvS1N4alBYVXVjM0JzYVhRb1hDSjlYQ0lwV3pCZExHdzlkUzV6ZFdKemRISnBibWNvWXk1c1pXNW5kR2dyTVNrc1pqMTBLR01wTzJFdWNIVnphQ2htTG5OMVluTjBhWFIxZEdsdmJpa3NhUzV3ZFhOb0tHWXVjSEpsWm1sNEtTeHZMbkIxYzJnb2JDa3NjejF6TG1OdmJtTmhkQ2htTG5OMVluTjBhWFIxZEdsdmJpNTJZWEpPWVcxbGN5bDlkR2hwY3k1bWFXeHNQV1oxYm1OMGFXOXVLR1VwZTJadmNpaDJZWElnZEQxdld6QmRMSEk5TUR0eVBHRXViR1Z1WjNSb08zSXJLeWw3ZG1GeUlHNDlZVnR5WFR0MEt6MXVLR1VwTEhRclBXOWJjaXN4WFgxeVpYUjFjbTRnZEgwc2RHaHBjeTUyWVhKT1lXMWxjejF6TEhSb2FYTXVkR1Z0Y0d4aGRHVTlaWDFtZFc1amRHbHZiaUJ1S0dVc2RDbDdhV1lvWlQwOVBYUXBjbVYwZFhKdUlUQTdhV1lvWlNZbWRDWW1YQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR1VtSmx3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCMEtYdHBaaWhCY25KaGVTNXBjMEZ5Y21GNUtHVXBJVDA5UVhKeVlYa3VhWE5CY25KaGVTaDBLU2x5WlhSMWNtNGhNVHRwWmloQmNuSmhlUzVwYzBGeWNtRjVLR1VwS1h0cFppaGxMbXhsYm1kMGFDRTlQWFF1YkdWdVozUm9LWEpsZEhWeWJpRXhPMlp2Y2loMllYSWdjajB3TzNJOFpTNXNaVzVuZEdnN2Npc3JLV2xtS0NGdUtHVmJjbDBzZEZ0eVhTa3BjbVYwZFhKdUlURjlaV3h6Wlh0MllYSWdienRtYjNJb2J5QnBiaUJsS1dsbUtIWnZhV1FnTUQwOVBYUmJiMTBtSm5admFXUWdNQ0U5UFdWYmIxMHBjbVYwZFhKdUlURTdabTl5S0c4Z2FXNGdkQ2xwWmloMmIybGtJREE5UFQxbFcyOWRKaVoyYjJsa0lEQWhQVDEwVzI5ZEtYSmxkSFZ5YmlFeE8yWnZjaWh2SUdsdUlHVXBhV1lvSVc0b1pWdHZYU3gwVzI5ZEtTbHlaWFIxY200aE1YMXlaWFIxY200aE1IMXlaWFIxY200aE1YMW1kVzVqZEdsdmJpQnZLR1VwZTNaaGNpQjBQVk4wY21sdVp5aGxLUzV5WlhCc1lXTmxLQzllWEZ4ekszeGNYSE1ySkM5bkxGd2lYQ0lwTG0xaGRHTm9LQzllS0Z0ZU9seGNMejhqWFNzNktUOG9YRnd2WEZ3dktEODZXMTQ2UUYwcUtEODZPbHRlT2tCZEtpay9RQ2svS0NoYlhqcGNYQzgvSTEwcUtTZy9Pam9vWEZ4a0tpa3BQeWtwUHloYlhqOGpYU29wS0Z4Y1AxdGVJMTBxS1Q4b0kxdGNYSE5jWEZOZEtpay9MeWs3Y21WMGRYSnVJSFEvZTJoeVpXWTZkRnN3WFh4OFhDSmNJaXh3Y205MGIyTnZiRHAwV3pGZGZIeGNJbHdpTEdGMWRHaHZjbWwwZVRwMFd6SmRmSHhjSWx3aUxHaHZjM1E2ZEZzelhYeDhYQ0pjSWl4b2IzTjBibUZ0WlRwMFd6UmRmSHhjSWx3aUxIQnZjblE2ZEZzMVhYeDhYQ0pjSWl4d1lYUm9ibUZ0WlRwMFd6WmRmSHhjSWx3aUxITmxZWEpqYURwMFd6ZGRmSHhjSWx3aUxHaGhjMmc2ZEZzNFhYeDhYQ0pjSW4wNmJuVnNiSDFtZFc1amRHbHZiaUJwS0dVc2RDbDdablZ1WTNScGIyNGdjaWhsS1h0MllYSWdkRDFiWFR0eVpYUjFjbTRnWlM1eVpYQnNZV05sS0M5ZUtGeGNMbHhjTGo4b1hGd3ZmQ1FwS1NzdkxGd2lYQ0lwTG5KbGNHeGhZMlVvTDF4Y0x5aGNYQzRvWEZ3dmZDUXBLU3N2Wnl4Y0lpOWNJaWt1Y21Wd2JHRmpaU2d2WEZ3dlhGd3VYRnd1SkM4c1hDSXZMaTR2WENJcExuSmxjR3hoWTJVb0wxeGNMejliWGx4Y0wxMHFMMmNzWm5WdVkzUnBiMjRvWlNsN1hDSXZMaTVjSWowOVBXVS9kQzV3YjNBb0tUcDBMbkIxYzJnb1pTbDlLU3gwTG1wdmFXNG9YQ0pjSWlrdWNtVndiR0ZqWlNndlhseGNMeThzWENJdlhDSTlQVDFsTG1Ob1lYSkJkQ2d3S1Q5Y0lpOWNJanBjSWx3aUtYMXlaWFIxY200Z2REMXZLSFI4ZkZ3aVhDSXBMR1U5YnlobGZIeGNJbHdpS1N4MEppWmxQeWgwTG5CeWIzUnZZMjlzZkh4bExuQnliM1J2WTI5c0tTc29kQzV3Y205MGIyTnZiSHg4ZEM1aGRYUm9iM0pwZEhrL2RDNWhkWFJvYjNKcGRIazZaUzVoZFhSb2IzSnBkSGtwSzNJb2RDNXdjbTkwYjJOdmJIeDhkQzVoZFhSb2IzSnBkSGw4ZkZ3aUwxd2lQVDA5ZEM1d1lYUm9ibUZ0WlM1amFHRnlRWFFvTUNrL2RDNXdZWFJvYm1GdFpUcDBMbkJoZEdodVlXMWxQeWhsTG1GMWRHaHZjbWwwZVNZbUlXVXVjR0YwYUc1aGJXVS9YQ0l2WENJNlhDSmNJaWtyWlM1d1lYUm9ibUZ0WlM1emJHbGpaU2d3TEdVdWNHRjBhRzVoYldVdWJHRnpkRWx1WkdWNFQyWW9YQ0l2WENJcEt6RXBLM1F1Y0dGMGFHNWhiV1U2WlM1d1lYUm9ibUZ0WlNrcktIUXVjSEp2ZEc5amIyeDhmSFF1WVhWMGFHOXlhWFI1Zkh4MExuQmhkR2h1WVcxbFAzUXVjMlZoY21Ob09uUXVjMlZoY21Ob2ZIeGxMbk5sWVhKamFDa3JkQzVvWVhOb09tNTFiR3g5Wm5WdVkzUnBiMjRnWVNobEtYdHlaWFIxY200Z1pTNXpjR3hwZENoY0lpTmNJaWxiTUYxOVpuVnVZM1JwYjI0Z2N5aGxMSFFwZTJsbUtHVW1KbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJsS1dsbUtIWnZhV1FnTUQwOVBYUS9kRDFsTG1sa09sd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQmxMbWxrSmlZb2REMXBLSFFzWlM1cFpDa3NaUzVwWkQxMEtTeEJjbkpoZVM1cGMwRnljbUY1S0dVcEtXWnZjaWgyWVhJZ2NqMHdPM0k4WlM1c1pXNW5kR2c3Y2lzcktYTW9aVnR5WFN4MEtUdGxiSE5sZTF3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCbExpUnlaV1ltSmlobExpUnlaV1k5YVNoMExHVXVKSEpsWmlrcE8yWnZjaWgyWVhJZ2JpQnBiaUJsS1Z3aVpXNTFiVndpSVQwOWJpWW1jeWhsVzI1ZExIUXBmWDFtZFc1amRHbHZiaUIxS0dVcGUyVTlaWHg4WENKbGJsd2lPM1poY2lCMFBVVmJaVjA3Y21WMGRYSnVJR1oxYm1OMGFXOXVLR1VwZTNaaGNpQnlQWFJiWlM1amIyUmxYWHg4WjF0bExtTnZaR1ZkTzJsbUtGd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQnlLWEpsZEhWeWJsd2lWVzVyYm05M2JpQmxjbkp2Y2lCamIyUmxJRndpSzJVdVkyOWtaU3RjSWpvZ1hDSXJTbE5QVGk1emRISnBibWRwWm5rb1pTNXRaWE56WVdkbFVHRnlZVzF6S1R0MllYSWdiajFsTG5CaGNtRnRjenR5WlhSMWNtNGdjaTV5WlhCc1lXTmxLQzljWEhzb1cxNTdmVjBxS1Z4Y2ZTOW5MR1oxYm1OMGFXOXVLR1VzZENsN2RtRnlJSEk5Ymx0MFhUdHlaWFIxY201Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2NueDhYQ0p1ZFcxaVpYSmNJajA5ZEhsd1pXOW1JSEkvY2pwbGZTbDlmV1oxYm1OMGFXOXVJR01vWlN4MExISXNiaXh2S1h0cFppaEZjbkp2Y2k1allXeHNLSFJvYVhNcExIWnZhV1FnTUQwOVBXVXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lUbThnWlhKeWIzSWdZMjlrWlNCemRYQndiR2xsWkRvZ1hDSXJiaWs3ZEdocGN5NXRaWE56WVdkbFBWd2lYQ0lzZEdocGN5NXdZWEpoYlhNOWRDeDBhR2x6TG1OdlpHVTlaU3gwYUdsekxtUmhkR0ZRWVhSb1BYSjhmRndpWENJc2RHaHBjeTV6WTJobGJXRlFZWFJvUFc1OGZGd2lYQ0lzZEdocGN5NXpkV0pGY25KdmNuTTliM3g4Ym5Wc2JEdDJZWElnYVQxdVpYY2dSWEp5YjNJb2RHaHBjeTV0WlhOellXZGxLVHRwWmloMGFHbHpMbk4wWVdOclBXa3VjM1JoWTJ0OGZHa3VjM1JoWTJ0MGNtRmpaU3doZEdocGN5NXpkR0ZqYXlsMGNubDdkR2h5YjNjZ2FYMWpZWFJqYUNocEtYdDBhR2x6TG5OMFlXTnJQV2t1YzNSaFkydDhmR2t1YzNSaFkydDBjbUZqWlgxOVpuVnVZM1JwYjI0Z2JDaGxMSFFwZTJsbUtIUXVjM1ZpYzNSeWFXNW5LREFzWlM1c1pXNW5kR2dwUFQwOVpTbDdkbUZ5SUhJOWRDNXpkV0p6ZEhKcGJtY29aUzVzWlc1bmRHZ3BPMmxtS0hRdWJHVnVaM1JvUGpBbUpsd2lMMXdpUFQwOWRDNWphR0Z5UVhRb1pTNXNaVzVuZEdndE1TbDhmRndpSTF3aVBUMDljaTVqYUdGeVFYUW9NQ2w4ZkZ3aVAxd2lQVDA5Y2k1amFHRnlRWFFvTUNrcGNtVjBkWEp1SVRCOWNtVjBkWEp1SVRGOVpuVnVZM1JwYjI0Z1ppaGxLWHQyWVhJZ2RDeHlMRzQ5Ym1WM0lHZ3NiejE3YzJWMFJYSnliM0pTWlhCdmNuUmxjanBtZFc1amRHbHZiaWhsS1h0eVpYUjFjbTVjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnWlQ5MGFHbHpMbXhoYm1kMVlXZGxLR1VwT2loeVBXVXNJVEFwZlN4aFpHUkdiM0p0WVhRNlpuVnVZM1JwYjI0b0tYdHVMbUZrWkVadmNtMWhkQzVoY0hCc2VTaHVMR0Z5WjNWdFpXNTBjeWw5TEd4aGJtZDFZV2RsT21aMWJtTjBhVzl1S0dVcGUzSmxkSFZ5YmlCbFB5aEZXMlZkZkh3b1pUMWxMbk53YkdsMEtGd2lMVndpS1Zzd1hTa3NJU0ZGVzJWZEppWW9kRDFsTEdVcEtUcDBmU3hoWkdSTVlXNW5kV0ZuWlRwbWRXNWpkR2x2YmlobExIUXBlM1poY2lCeU8yWnZjaWh5SUdsdUlIWXBkRnR5WFNZbUlYUmJkbHR5WFYwbUppaDBXM1piY2wxZFBYUmJjbDBwTzNaaGNpQnVQV1V1YzNCc2FYUW9YQ0l0WENJcFd6QmRPMmxtS0VWYmJsMHBlMFZiWlYwOVQySnFaV04wTG1OeVpXRjBaU2hGVzI1ZEtUdG1iM0lvY2lCcGJpQjBLVndpZFc1a1pXWnBibVZrWENJOVBYUjVjR1Z2WmlCRlcyNWRXM0pkSmlZb1JWdHVYVnR5WFQxMFczSmRLU3hGVzJWZFczSmRQWFJiY2wxOVpXeHpaU0JGVzJWZFBYUXNSVnR1WFQxME8zSmxkSFZ5YmlCMGFHbHpmU3htY21WemFFRndhVHBtZFc1amRHbHZiaWhsS1h0MllYSWdkRDFtS0NrN2NtVjBkWEp1SUdVbUpuUXViR0Z1WjNWaFoyVW9aU2tzZEgwc2RtRnNhV1JoZEdVNlpuVnVZM1JwYjI0b1pTeHZMR2tzWVNsN2RtRnlJSE05ZFNoMEtTeGpQWEkvWm5WdVkzUnBiMjRvWlN4MExHNHBlM0psZEhWeWJpQnlLR1VzZEN4dUtYeDhjeWhsTEhRc2JpbDlPbk1zYkQxdVpYY2dhQ2h1TENnaE1Ta3NZeXhwTEdFcE8xd2ljM1J5YVc1blhDSTlQWFI1Y0dWdlppQnZKaVlvYnoxN0pISmxaanB2ZlNrc2JDNWhaR1JUWTJobGJXRW9YQ0pjSWl4dktUdDJZWElnWmoxc0xuWmhiR2xrWVhSbFFXeHNLR1VzYnl4dWRXeHNMRzUxYkd3c1hDSmNJaWs3Y21WMGRYSnVJV1ltSm1FbUppaG1QV3d1WW1GdVZXNXJibTkzYmxCeWIzQmxjblJwWlhNb1pTeHZLU2tzZEdocGN5NWxjbkp2Y2oxbUxIUm9hWE11YldsemMybHVaejFzTG0xcGMzTnBibWNzZEdocGN5NTJZV3hwWkQxdWRXeHNQVDA5Wml4MGFHbHpMblpoYkdsa2ZTeDJZV3hwWkdGMFpWSmxjM1ZzZERwbWRXNWpkR2x2YmlncGUzWmhjaUJsUFh0OU8zSmxkSFZ5YmlCMGFHbHpMblpoYkdsa1lYUmxMbUZ3Y0d4NUtHVXNZWEpuZFcxbGJuUnpLU3hsZlN4MllXeHBaR0YwWlUxMWJIUnBjR3hsT21aMWJtTjBhVzl1S0dVc2J5eHBMR0VwZTNaaGNpQnpQWFVvZENrc1l6MXlQMloxYm1OMGFXOXVLR1VzZEN4dUtYdHlaWFIxY200Z2NpaGxMSFFzYmlsOGZITW9aU3gwTEc0cGZUcHpMR3c5Ym1WM0lHZ29iaXdvSVRBcExHTXNhU3hoS1R0Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2J5WW1LRzg5ZXlSeVpXWTZiMzBwTEd3dVlXUmtVMk5vWlcxaEtGd2lYQ0lzYnlrc2JDNTJZV3hwWkdGMFpVRnNiQ2hsTEc4c2JuVnNiQ3h1ZFd4c0xGd2lYQ0lwTEdFbUptd3VZbUZ1Vlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1vWlN4dktUdDJZWElnWmoxN2ZUdHlaWFIxY200Z1ppNWxjbkp2Y25NOWJDNWxjbkp2Y25Nc1ppNXRhWE56YVc1blBXd3ViV2x6YzJsdVp5eG1MblpoYkdsa1BUQTlQVDFtTG1WeWNtOXljeTVzWlc1bmRHZ3NabjBzWVdSa1UyTm9aVzFoT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SUc0dVlXUmtVMk5vWlcxaExtRndjR3g1S0c0c1lYSm5kVzFsYm5SektYMHNaMlYwVTJOb1pXMWhPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRzR1WjJWMFUyTm9aVzFoTG1Gd2NHeDVLRzRzWVhKbmRXMWxiblJ6S1gwc1oyVjBVMk5vWlcxaFRXRndPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRzR1WjJWMFUyTm9aVzFoVFdGd0xtRndjR3g1S0c0c1lYSm5kVzFsYm5SektYMHNaMlYwVTJOb1pXMWhWWEpwY3pwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCdUxtZGxkRk5qYUdWdFlWVnlhWE11WVhCd2JIa29iaXhoY21kMWJXVnVkSE1wZlN4blpYUk5hWE56YVc1blZYSnBjenBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJ1TG1kbGRFMXBjM05wYm1kVmNtbHpMbUZ3Y0d4NUtHNHNZWEpuZFcxbGJuUnpLWDBzWkhKdmNGTmphR1Z0WVhNNlpuVnVZM1JwYjI0b0tYdHVMbVJ5YjNCVFkyaGxiV0Z6TG1Gd2NHeDVLRzRzWVhKbmRXMWxiblJ6S1gwc1pHVm1hVzVsUzJWNWQyOXlaRHBtZFc1amRHbHZiaWdwZTI0dVpHVm1hVzVsUzJWNWQyOXlaQzVoY0hCc2VTaHVMR0Z5WjNWdFpXNTBjeWw5TEdSbFptbHVaVVZ5Y205eU9tWjFibU4wYVc5dUtHVXNkQ3h5S1h0cFppaGNJbk4wY21sdVoxd2lJVDEwZVhCbGIyWWdaWHg4SVM5ZVcwRXRXbDByS0Y5YlFTMWFYU3NwS2lRdkxuUmxjM1FvWlNrcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVEyOWtaU0J1WVcxbElHMTFjM1FnWW1VZ1lTQnpkSEpwYm1jZ2FXNGdWVkJRUlZKZlEwRlRSVjlYU1ZSSVgxVk9SRVZTVTBOUFVrVlRYQ0lwTzJsbUtGd2liblZ0WW1WeVhDSWhQWFI1Y0dWdlppQjBmSHgwSlRFaFBUMHdmSHgwUERGbE5DbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkRiMlJsSUc1MWJXSmxjaUJ0ZFhOMElHSmxJR0Z1SUdsdWRHVm5aWElnUGlBeE1EQXdNRndpS1R0cFppaGNJblZ1WkdWbWFXNWxaRndpSVQxMGVYQmxiMllnZGx0bFhTbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSkZjbkp2Y2lCaGJISmxZV1I1SUdSbFptbHVaV1E2SUZ3aUsyVXJYQ0lnWVhNZ1hDSXJkbHRsWFNrN2FXWW9YQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUY5YmRGMHBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lSWEp5YjNJZ1kyOWtaU0JoYkhKbFlXUjVJSFZ6WldRNklGd2lLMTliZEYwclhDSWdZWE1nWENJcmRDazdkbHRsWFQxMExGOWJkRjA5WlN4blcyVmRQV2RiZEYwOWNqdG1iM0lvZG1GeUlHNGdhVzRnUlNsN2RtRnlJRzg5UlZ0dVhUdHZXMlZkSmlZb2IxdDBYVDF2VzNSZGZIeHZXMlZkS1gxOUxISmxjMlYwT21aMWJtTjBhVzl1S0NsN2JpNXlaWE5sZENncExIUm9hWE11WlhKeWIzSTliblZzYkN4MGFHbHpMbTFwYzNOcGJtYzlXMTBzZEdocGN5NTJZV3hwWkQwaE1IMHNiV2x6YzJsdVp6cGJYU3hsY25KdmNqcHVkV3hzTEhaaGJHbGtPaUV3TEc1dmNtMVRZMmhsYldFNmN5eHlaWE52YkhabFZYSnNPbWtzWjJWMFJHOWpkVzFsYm5SVmNtazZZU3hsY25KdmNrTnZaR1Z6T25aOU8zSmxkSFZ5YmlCdkxteGhibWQxWVdkbEtHVjhmRndpWlc1Y0lpa3NiMzFQWW1wbFkzUXVhMlY1YzN4OEtFOWlhbVZqZEM1clpYbHpQV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHVTlUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVN4MFBTRjdkRzlUZEhKcGJtYzZiblZzYkgwdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVW9YQ0owYjFOMGNtbHVaMXdpS1N4eVBWdGNJblJ2VTNSeWFXNW5YQ0lzWENKMGIweHZZMkZzWlZOMGNtbHVaMXdpTEZ3aWRtRnNkV1ZQWmx3aUxGd2lhR0Z6VDNkdVVISnZjR1Z5ZEhsY0lpeGNJbWx6VUhKdmRHOTBlWEJsVDJaY0lpeGNJbkJ5YjNCbGNuUjVTWE5GYm5WdFpYSmhZbXhsWENJc1hDSmpiMjV6ZEhKMVkzUnZjbHdpWFN4dVBYSXViR1Z1WjNSb08zSmxkSFZ5YmlCbWRXNWpkR2x2YmlodktYdHBaaWhjSW05aWFtVmpkRndpSVQxMGVYQmxiMllnYnlZbVhDSm1kVzVqZEdsdmJsd2lJVDEwZVhCbGIyWWdiM3g4Ym5Wc2JEMDlQVzhwZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrOWlhbVZqZEM1clpYbHpJR05oYkd4bFpDQnZiaUJ1YjI0dGIySnFaV04wWENJcE8zWmhjaUJwUFZ0ZE8yWnZjaWgyWVhJZ1lTQnBiaUJ2S1dVdVkyRnNiQ2h2TEdFcEppWnBMbkIxYzJnb1lTazdhV1lvZENsbWIzSW9kbUZ5SUhNOU1EdHpQRzQ3Y3lzcktXVXVZMkZzYkNodkxISmJjMTBwSmlacExuQjFjMmdvY2x0elhTazdjbVYwZFhKdUlHbDlmU2dwS1N4UFltcGxZM1F1WTNKbFlYUmxmSHdvVDJKcVpXTjBMbU55WldGMFpUMW1kVzVqZEdsdmJpZ3BlMloxYm1OMGFXOXVJR1VvS1h0OWNtVjBkWEp1SUdaMWJtTjBhVzl1S0hRcGUybG1LREVoUFQxaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWs5aWFtVmpkQzVqY21WaGRHVWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyNXNlU0JoWTJObGNIUnpJRzl1WlNCd1lYSmhiV1YwWlhJdVhDSXBPM0psZEhWeWJpQmxMbkJ5YjNSdmRIbHdaVDEwTEc1bGR5QmxmWDBvS1Nrc1FYSnlZWGt1YVhOQmNuSmhlWHg4S0VGeWNtRjVMbWx6UVhKeVlYazlablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVYQ0piYjJKcVpXTjBJRUZ5Y21GNVhWd2lQVDA5VDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeTVqWVd4c0tHVXBmU2tzUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbWx1WkdWNFQyWjhmQ2hCY25KaGVTNXdjbTkwYjNSNWNHVXVhVzVrWlhoUFpqMW1kVzVqZEdsdmJpaGxLWHRwWmlodWRXeHNQVDA5ZEdocGN5bDBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlPM1poY2lCMFBVOWlhbVZqZENoMGFHbHpLU3h5UFhRdWJHVnVaM1JvUGo0K01EdHBaaWd3UFQwOWNpbHlaWFIxY200dE1UdDJZWElnYmowd08ybG1LR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZytNU1ltS0c0OVRuVnRZbVZ5S0dGeVozVnRaVzUwYzFzeFhTa3NiaUU5UFc0L2JqMHdPakFoUFQxdUppWnVJVDA5TVM4d0ppWnVJVDA5TFNneEx6QXBKaVlvYmowb2JqNHdmSHd0TVNrcVRXRjBhQzVtYkc5dmNpaE5ZWFJvTG1GaWN5aHVLU2twS1N4dVBqMXlLWEpsZEhWeWJpMHhPMlp2Y2loMllYSWdiejF1UGowd1AyNDZUV0YwYUM1dFlYZ29jaTFOWVhSb0xtRmljeWh1S1N3d0tUdHZQSEk3YnlzcktXbG1LRzhnYVc0Z2RDWW1kRnR2WFQwOVBXVXBjbVYwZFhKdUlHODdjbVYwZFhKdUxURjlLU3hQWW1wbFkzUXVhWE5HY205NlpXNThmQ2hQWW1wbFkzUXVhWE5HY205NlpXNDlablZ1WTNScGIyNG9aU2w3Wm05eUtIWmhjaUIwUFZ3aWRIWTBYM1JsYzNSZlpuSnZlbVZ1WDJ0bGVWd2lPMlV1YUdGelQzZHVVSEp2Y0dWeWRIa29kQ2s3S1hRclBVMWhkR2d1Y21GdVpHOXRLQ2s3ZEhKNWUzSmxkSFZ5YmlCbFczUmRQU0V3TEdSbGJHVjBaU0JsVzNSZExDRXhmV05oZEdOb0tISXBlM0psZEhWeWJpRXdmWDBwTzNaaGNpQmtQWHRjSWl0Y0lqb2hNQ3hjSWlOY0lqb2hNQ3hjSWk1Y0lqb2hNQ3hjSWk5Y0lqb2hNQ3hjSWp0Y0lqb2hNQ3hjSWo5Y0lqb2hNQ3hjSWlaY0lqb2hNSDBzY0QxN1hDSXFYQ0k2SVRCOU8zSXVjSEp2ZEc5MGVYQmxQWHQwYjFOMGNtbHVaenBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUIwYUdsekxuUmxiWEJzWVhSbGZTeG1hV3hzUm5KdmJVOWlhbVZqZERwbWRXNWpkR2x2YmlobEtYdHlaWFIxY200Z2RHaHBjeTVtYVd4c0tHWjFibU4wYVc5dUtIUXBlM0psZEhWeWJpQmxXM1JkZlNsOWZUdDJZWElnYUQxbWRXNWpkR2x2YmlobExIUXNjaXh1TEc4cGUybG1LSFJvYVhNdWJXbHpjMmx1WnoxYlhTeDBhR2x6TG0xcGMzTnBibWROWVhBOWUzMHNkR2hwY3k1bWIzSnRZWFJXWVd4cFpHRjBiM0p6UFdVL1QySnFaV04wTG1OeVpXRjBaU2hsTG1admNtMWhkRlpoYkdsa1lYUnZjbk1wT250OUxIUm9hWE11YzJOb1pXMWhjejFsUDA5aWFtVmpkQzVqY21WaGRHVW9aUzV6WTJobGJXRnpLVHA3ZlN4MGFHbHpMbU52Ykd4bFkzUk5kV3gwYVhCc1pUMTBMSFJvYVhNdVpYSnliM0p6UFZ0ZExIUm9hWE11YUdGdVpHeGxSWEp5YjNJOWREOTBhR2x6TG1OdmJHeGxZM1JGY25KdmNqcDBhR2x6TG5KbGRIVnlia1Z5Y205eUxHNG1KaWgwYUdsekxtTm9aV05yVW1WamRYSnphWFpsUFNFd0xIUm9hWE11YzJOaGJtNWxaRDFiWFN4MGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc0OVcxMHNkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVVMk5vWlcxaGN6MWJYU3gwYUdsekxuTmpZVzV1WldSR2NtOTZaVzVXWVd4cFpHRjBhVzl1UlhKeWIzSnpQVnRkTEhSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVDFjSW5SMk5GOTJZV3hwWkdGMGFXOXVYMmxrWENJc2RHaHBjeTUyWVd4cFpHRjBhVzl1UlhKeWIzSnpTMlY1UFZ3aWRIWTBYM1poYkdsa1lYUnBiMjVmWlhKeWIzSnpYMmxrWENJcExHOG1KaWgwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE05SVRBc2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE05ZTMwc2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3oxN2ZTa3NkR2hwY3k1bGNuSnZjbEpsY0c5eWRHVnlQWEo4ZkhVb1hDSmxibHdpS1N4Y0luTjBjbWx1WjF3aVBUMTBlWEJsYjJZZ2RHaHBjeTVsY25KdmNsSmxjRzl5ZEdWeUtYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltUmxZblZuWENJcE8ybG1LSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6UFh0OUxHVXBabTl5S0haaGNpQnBJR2x1SUdVdVpHVm1hVzVsWkV0bGVYZHZjbVJ6S1hSb2FYTXVaR1ZtYVc1bFpFdGxlWGR2Y21SelcybGRQV1V1WkdWbWFXNWxaRXRsZVhkdmNtUnpXMmxkTG5Oc2FXTmxLREFwZlR0b0xuQnliM1J2ZEhsd1pTNWtaV1pwYm1WTFpYbDNiM0prUFdaMWJtTjBhVzl1S0dVc2RDbDdkR2hwY3k1a1pXWnBibVZrUzJWNWQyOXlaSE5iWlYwOWRHaHBjeTVrWldacGJtVmtTMlY1ZDI5eVpITmJaVjE4ZkZ0ZExIUm9hWE11WkdWbWFXNWxaRXRsZVhkdmNtUnpXMlZkTG5CMWMyZ29kQ2w5TEdndWNISnZkRzkwZVhCbExtTnlaV0YwWlVWeWNtOXlQV1oxYm1OMGFXOXVLR1VzZEN4eUxHNHNieXhwTEdFcGUzWmhjaUJ6UFc1bGR5QmpLR1VzZEN4eUxHNHNieWs3Y21WMGRYSnVJSE11YldWemMyRm5aVDEwYUdsekxtVnljbTl5VW1Wd2IzSjBaWElvY3l4cExHRXBMSE45TEdndWNISnZkRzkwZVhCbExuSmxkSFZ5YmtWeWNtOXlQV1oxYm1OMGFXOXVLR1VwZTNKbGRIVnliaUJsZlN4b0xuQnliM1J2ZEhsd1pTNWpiMnhzWldOMFJYSnliM0k5Wm5WdVkzUnBiMjRvWlNsN2NtVjBkWEp1SUdVbUpuUm9hWE11WlhKeWIzSnpMbkIxYzJnb1pTa3NiblZzYkgwc2FDNXdjbTkwYjNSNWNHVXVjSEpsWm1sNFJYSnliM0p6UFdaMWJtTjBhVzl1S0dVc2RDeHlLWHRtYjNJb2RtRnlJRzQ5WlR0dVBIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFEdHVLeXNwZEdocGN5NWxjbkp2Y25OYmJsMDlkR2hwY3k1bGNuSnZjbk5iYmwwdWNISmxabWw0VjJsMGFDaDBMSElwTzNKbGRIVnliaUIwYUdsemZTeG9MbkJ5YjNSdmRIbHdaUzVpWVc1VmJtdHViM2R1VUhKdmNHVnlkR2xsY3oxbWRXNWpkR2x2YmlobExIUXBlMlp2Y2loMllYSWdjaUJwYmlCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6S1h0MllYSWdiajEwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1VlU1TFRrOVhUbDlRVWs5UVJWSlVXU3g3Y0dGMGFEcHlmU3h5TEZ3aVhDSXNiblZzYkN4bExIUXBMRzg5ZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWh1S1R0cFppaHZLWEpsZEhWeWJpQnZmWEpsZEhWeWJpQnVkV3hzZlN4b0xuQnliM1J2ZEhsd1pTNWhaR1JHYjNKdFlYUTlablZ1WTNScGIyNG9aU3gwS1h0cFppaGNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdaU2w3Wm05eUtIWmhjaUJ5SUdsdUlHVXBkR2hwY3k1aFpHUkdiM0p0WVhRb2NpeGxXM0pkS1R0eVpYUjFjbTRnZEdocGMzMTBhR2x6TG1admNtMWhkRlpoYkdsa1lYUnZjbk5iWlYwOWRIMHNhQzV3Y205MGIzUjVjR1V1Y21WemIyeDJaVkpsWm5NOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmloMmIybGtJREFoUFQxbExpUnlaV1lwZTJsbUtIUTlkSHg4ZTMwc2RGdGxMaVJ5WldaZEtYSmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVEwbFNRMVZNUVZKZlVrVkdSVkpGVGtORkxIdDFjbXh6T2s5aWFtVmpkQzVyWlhsektIUXBMbXB2YVc0b1hDSXNJRndpS1gwc1hDSmNJaXhjSWx3aUxHNTFiR3dzZG05cFpDQXdMR1VwTzNSYlpTNGtjbVZtWFQwaE1DeGxQWFJvYVhNdVoyVjBVMk5vWlcxaEtHVXVKSEpsWml4MEtYMXlaWFIxY200Z1pYMHNhQzV3Y205MGIzUjVjR1V1WjJWMFUyTm9aVzFoUFdaMWJtTjBhVzl1S0dVc2RDbDdkbUZ5SUhJN2FXWW9kbTlwWkNBd0lUMDlkR2hwY3k1elkyaGxiV0Z6VzJWZEtYSmxkSFZ5YmlCeVBYUm9hWE11YzJOb1pXMWhjMXRsWFN4MGFHbHpMbkpsYzI5c2RtVlNaV1p6S0hJc2RDazdkbUZ5SUc0OVpTeHZQVndpWENJN2FXWW9aUzVwYm1SbGVFOW1LRndpSTF3aUtTRTlQUzB4SmlZb2J6MWxMbk4xWW5OMGNtbHVaeWhsTG1sdVpHVjRUMllvWENJalhDSXBLekVwTEc0OVpTNXpkV0p6ZEhKcGJtY29NQ3hsTG1sdVpHVjRUMllvWENJalhDSXBLU2tzWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhSb2FYTXVjMk5vWlcxaGMxdHVYU2w3Y2oxMGFHbHpMbk5qYUdWdFlYTmJibDA3ZG1GeUlHazlaR1ZqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLRzhwTzJsbUtGd2lYQ0k5UFQxcEtYSmxkSFZ5YmlCMGFHbHpMbkpsYzI5c2RtVlNaV1p6S0hJc2RDazdhV1lvWENJdlhDSWhQVDFwTG1Ob1lYSkJkQ2d3S1NseVpYUjFjbTQ3Wm05eUtIWmhjaUJoUFdrdWMzQnNhWFFvWENJdlhDSXBMbk5zYVdObEtERXBMSE05TUR0elBHRXViR1Z1WjNSb08zTXJLeWw3ZG1GeUlIVTlZVnR6WFM1eVpYQnNZV05sS0M5K01TOW5MRndpTDF3aUtTNXlaWEJzWVdObEtDOStNQzluTEZ3aWZsd2lLVHRwWmloMmIybGtJREE5UFQxeVczVmRLWHR5UFhadmFXUWdNRHRpY21WaGEzMXlQWEpiZFYxOWFXWW9kbTlwWkNBd0lUMDljaWx5WlhSMWNtNGdkR2hwY3k1eVpYTnZiSFpsVW1WbWN5aHlMSFFwZlhadmFXUWdNRDA5UFhSb2FYTXViV2x6YzJsdVoxdHVYU1ltS0hSb2FYTXViV2x6YzJsdVp5NXdkWE5vS0c0cExIUm9hWE11YldsemMybHVaMXR1WFQxdUxIUm9hWE11YldsemMybHVaMDFoY0Z0dVhUMXVLWDBzYUM1d2NtOTBiM1I1Y0dVdWMyVmhjbU5vVTJOb1pXMWhjejFtZFc1amRHbHZiaWhsTEhRcGUybG1LRUZ5Y21GNUxtbHpRWEp5WVhrb1pTa3BabTl5S0haaGNpQnlQVEE3Y2p4bExteGxibWQwYUR0eUt5c3BkR2hwY3k1elpXRnlZMmhUWTJobGJXRnpLR1ZiY2wwc2RDazdaV3h6WlNCcFppaGxKaVpjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnWlNsN1hDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlHVXVhV1FtSm13b2RDeGxMbWxrS1NZbWRtOXBaQ0F3UFQwOWRHaHBjeTV6WTJobGJXRnpXMlV1YVdSZEppWW9kR2hwY3k1elkyaGxiV0Z6VzJVdWFXUmRQV1VwTzJadmNpaDJZWElnYmlCcGJpQmxLV2xtS0Z3aVpXNTFiVndpSVQwOWJpbHBaaWhjSW05aWFtVmpkRndpUFQxMGVYQmxiMllnWlZ0dVhTbDBhR2x6TG5ObFlYSmphRk5qYUdWdFlYTW9aVnR1WFN4MEtUdGxiSE5sSUdsbUtGd2lKSEpsWmx3aVBUMDliaWw3ZG1GeUlHODlZU2hsVzI1ZEtUdHZKaVoyYjJsa0lEQTlQVDEwYUdsekxuTmphR1Z0WVhOYmIxMG1Kblp2YVdRZ01EMDlQWFJvYVhNdWJXbHpjMmx1WjAxaGNGdHZYU1ltS0hSb2FYTXViV2x6YzJsdVowMWhjRnR2WFQxdktYMTlmU3hvTG5CeWIzUnZkSGx3WlM1aFpHUlRZMmhsYldFOVpuVnVZM1JwYjI0b1pTeDBLWHRwWmloY0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ1pYeDhYQ0oxYm1SbFptbHVaV1JjSWowOWRIbHdaVzltSUhRcGUybG1LRndpYjJKcVpXTjBYQ0loUFhSNWNHVnZaaUJsZkh4Y0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ1pTNXBaQ2x5WlhSMWNtNDdkRDFsTEdVOWRDNXBaSDFsUFQwOVlTaGxLU3RjSWlOY0lpWW1LR1U5WVNobEtTa3NkR2hwY3k1elkyaGxiV0Z6VzJWZFBYUXNaR1ZzWlhSbElIUm9hWE11YldsemMybHVaMDFoY0Z0bFhTeHpLSFFzWlNrc2RHaHBjeTV6WldGeVkyaFRZMmhsYldGektIUXNaU2w5TEdndWNISnZkRzkwZVhCbExtZGxkRk5qYUdWdFlVMWhjRDFtZFc1amRHbHZiaWdwZTNaaGNpQmxQWHQ5TzJadmNpaDJZWElnZENCcGJpQjBhR2x6TG5OamFHVnRZWE1wWlZ0MFhUMTBhR2x6TG5OamFHVnRZWE5iZEYwN2NtVjBkWEp1SUdWOUxHZ3VjSEp2ZEc5MGVYQmxMbWRsZEZOamFHVnRZVlZ5YVhNOVpuVnVZM1JwYjI0b1pTbDdkbUZ5SUhROVcxMDdabTl5S0haaGNpQnlJR2x1SUhSb2FYTXVjMk5vWlcxaGN5bGxKaVloWlM1MFpYTjBLSElwZkh4MExuQjFjMmdvY2lrN2NtVjBkWEp1SUhSOUxHZ3VjSEp2ZEc5MGVYQmxMbWRsZEUxcGMzTnBibWRWY21selBXWjFibU4wYVc5dUtHVXBlM1poY2lCMFBWdGRPMlp2Y2loMllYSWdjaUJwYmlCMGFHbHpMbTFwYzNOcGJtZE5ZWEFwWlNZbUlXVXVkR1Z6ZENoeUtYeDhkQzV3ZFhOb0tISXBPM0psZEhWeWJpQjBmU3hvTG5CeWIzUnZkSGx3WlM1a2NtOXdVMk5vWlcxaGN6MW1kVzVqZEdsdmJpZ3BlM1JvYVhNdWMyTm9aVzFoY3oxN2ZTeDBhR2x6TG5KbGMyVjBLQ2w5TEdndWNISnZkRzkwZVhCbExuSmxjMlYwUFdaMWJtTjBhVzl1S0NsN2RHaHBjeTV0YVhOemFXNW5QVnRkTEhSb2FYTXViV2x6YzJsdVowMWhjRDE3ZlN4MGFHbHpMbVZ5Y205eWN6MWJYWDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWQmJHdzlablZ1WTNScGIyNG9aU3gwTEhJc2JpeHZLWHQyWVhJZ2FUdHBaaWgwUFhSb2FYTXVjbVZ6YjJ4MlpWSmxabk1vZENrc0lYUXBjbVYwZFhKdUlHNTFiR3c3YVdZb2RDQnBibk4wWVc1alpXOW1JR01wY21WMGRYSnVJSFJvYVhNdVpYSnliM0p6TG5CMWMyZ29kQ2tzZER0MllYSWdZU3h6UFhSb2FYTXVaWEp5YjNKekxteGxibWQwYUN4MVBXNTFiR3dzYkQxdWRXeHNPMmxtS0hSb2FYTXVZMmhsWTJ0U1pXTjFjbk5wZG1VbUptVW1KbHdpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJsS1h0cFppaHBQU0YwYUdsekxuTmpZVzV1WldRdWJHVnVaM1JvTEdWYmRHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1WFNsN2RtRnlJR1k5WlZ0MGFHbHpMblpoYkdsa1lYUmxaRk5qYUdWdFlYTkxaWGxkTG1sdVpHVjRUMllvZENrN2FXWW9aaUU5UFMweEtYSmxkSFZ5YmlCMGFHbHpMbVZ5Y205eWN6MTBhR2x6TG1WeWNtOXljeTVqYjI1allYUW9aVnQwYUdsekxuWmhiR2xrWVhScGIyNUZjbkp2Y25OTFpYbGRXMlpkS1N4dWRXeHNmV2xtS0U5aWFtVmpkQzVwYzBaeWIzcGxiaWhsS1NZbUtHRTlkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVMbWx1WkdWNFQyWW9aU2tzWVNFOVBTMHhLU2w3ZG1GeUlHUTlkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVVMk5vWlcxaGMxdGhYUzVwYm1SbGVFOW1LSFFwTzJsbUtHUWhQVDB0TVNseVpYUjFjbTRnZEdocGN5NWxjbkp2Y25NOWRHaHBjeTVsY25KdmNuTXVZMjl1WTJGMEtIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsWmhiR2xrWVhScGIyNUZjbkp2Y25OYllWMWJaRjBwTEc1MWJHeDlhV1lvZEdocGN5NXpZMkZ1Ym1Wa0xuQjFjMmdvWlNrc1QySnFaV04wTG1selJuSnZlbVZ1S0dVcEtXRTlQVDB0TVNZbUtHRTlkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVMbXhsYm1kMGFDeDBhR2x6TG5OallXNXVaV1JHY205NlpXNHVjSFZ6YUNobEtTeDBhR2x6TG5OallXNXVaV1JHY205NlpXNVRZMmhsYldGekxuQjFjMmdvVzEwcEtTeDFQWFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTmJZVjB1YkdWdVozUm9MSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTmJZVjFiZFYwOWRDeDBhR2x6TG5OallXNXVaV1JHY205NlpXNVdZV3hwWkdGMGFXOXVSWEp5YjNKelcyRmRXM1ZkUFZ0ZE8yVnNjMlY3YVdZb0lXVmJkR2hwY3k1MllXeHBaR0YwWldSVFkyaGxiV0Z6UzJWNVhTbDBjbmw3VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVXNkR2hwY3k1MllXeHBaR0YwWldSVFkyaGxiV0Z6UzJWNUxIdDJZV3gxWlRwYlhTeGpiMjVtYVdkMWNtRmliR1U2SVRCOUtTeFBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlN4MGFHbHpMblpoYkdsa1lYUnBiMjVGY25KdmNuTkxaWGtzZTNaaGJIVmxPbHRkTEdOdmJtWnBaM1Z5WVdKc1pUb2hNSDBwZldOaGRHTm9LSEFwZTJWYmRHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1WFQxYlhTeGxXM1JvYVhNdWRtRnNhV1JoZEdsdmJrVnljbTl5YzB0bGVWMDlXMTE5YkQxbFczUm9hWE11ZG1Gc2FXUmhkR1ZrVTJOb1pXMWhjMHRsZVYwdWJHVnVaM1JvTEdWYmRHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1WFZ0c1hUMTBMR1ZiZEdocGN5NTJZV3hwWkdGMGFXOXVSWEp5YjNKelMyVjVYVnRzWFQxYlhYMTlkbUZ5SUdnOWRHaHBjeTVsY25KdmNuTXViR1Z1WjNSb0xIazlkR2hwY3k1MllXeHBaR0YwWlVKaGMybGpLR1VzZEN4dktYeDhkR2hwY3k1MllXeHBaR0YwWlU1MWJXVnlhV01vWlN4MExHOHBmSHgwYUdsekxuWmhiR2xrWVhSbFUzUnlhVzVuS0dVc2RDeHZLWHg4ZEdocGN5NTJZV3hwWkdGMFpVRnljbUY1S0dVc2RDeHZLWHg4ZEdocGN5NTJZV3hwWkdGMFpVOWlhbVZqZENobExIUXNieWw4ZkhSb2FYTXVkbUZzYVdSaGRHVkRiMjFpYVc1aGRHbHZibk1vWlN4MExHOHBmSHgwYUdsekxuWmhiR2xrWVhSbFNIbHdaWEp0WldScFlTaGxMSFFzYnlsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZHYjNKdFlYUW9aU3gwTEc4cGZIeDBhR2x6TG5aaGJHbGtZWFJsUkdWbWFXNWxaRXRsZVhkdmNtUnpLR1VzZEN4dktYeDhiblZzYkR0cFppaHBLWHRtYjNJb08zUm9hWE11YzJOaGJtNWxaQzVzWlc1bmRHZzdLWHQyWVhJZ2JUMTBhR2x6TG5OallXNXVaV1F1Y0c5d0tDazdaR1ZzWlhSbElHMWJkR2hwY3k1MllXeHBaR0YwWldSVFkyaGxiV0Z6UzJWNVhYMTBhR2x6TG5OallXNXVaV1JHY205NlpXNDlXMTBzZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1VTJOb1pXMWhjejFiWFgxcFppaDVmSHhvSVQwOWRHaHBjeTVsY25KdmNuTXViR1Z1WjNSb0tXWnZjaWc3Y2lZbWNpNXNaVzVuZEdoOGZHNG1KbTR1YkdWdVozUm9PeWw3ZG1GeUlIWTljaVltY2k1c1pXNW5kR2cvWENKY0lpdHlMbkJ2Y0NncE9tNTFiR3dzWHoxdUppWnVMbXhsYm1kMGFEOWNJbHdpSzI0dWNHOXdLQ2s2Ym5Wc2JEdDVKaVlvZVQxNUxuQnlaV1pwZUZkcGRHZ29kaXhmS1Nrc2RHaHBjeTV3Y21WbWFYaEZjbkp2Y25Nb2FDeDJMRjhwZlhKbGRIVnliaUJ1ZFd4c0lUMDlkVDkwYUdsekxuTmpZVzV1WldSR2NtOTZaVzVXWVd4cFpHRjBhVzl1UlhKeWIzSnpXMkZkVzNWZFBYUm9hWE11WlhKeWIzSnpMbk5zYVdObEtITXBPbTUxYkd3aFBUMXNKaVlvWlZ0MGFHbHpMblpoYkdsa1lYUnBiMjVGY25KdmNuTkxaWGxkVzJ4ZFBYUm9hWE11WlhKeWIzSnpMbk5zYVdObEtITXBLU3gwYUdsekxtaGhibVJzWlVWeWNtOXlLSGtwZlN4b0xuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVWnZjbTFoZEQxbWRXNWpkR2x2YmlobExIUXBlMmxtS0Z3aWMzUnlhVzVuWENJaFBYUjVjR1Z2WmlCMExtWnZjbTFoZEh4OElYUm9hWE11Wm05eWJXRjBWbUZzYVdSaGRHOXljMXQwTG1admNtMWhkRjBwY21WMGRYSnVJRzUxYkd3N2RtRnlJSEk5ZEdocGN5NW1iM0p0WVhSV1lXeHBaR0YwYjNKelczUXVabTl5YldGMFhTNWpZV3hzS0c1MWJHd3NaU3gwS1R0eVpYUjFjbTVjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnY254OFhDSnVkVzFpWlhKY0lqMDlkSGx3Wlc5bUlISS9kR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMa1pQVWsxQlZGOURWVk5VVDAwc2UyMWxjM05oWjJVNmNuMHNYQ0pjSWl4Y0lpOW1iM0p0WVhSY0lpeHVkV3hzTEdVc2RDazZjaVltWENKdlltcGxZM1JjSWowOWRIbHdaVzltSUhJL2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxrWlBVazFCVkY5RFZWTlVUMDBzZTIxbGMzTmhaMlU2Y2k1dFpYTnpZV2RsZkh4Y0lqOWNJbjBzY2k1a1lYUmhVR0YwYUh4OFhDSmNJaXh5TG5OamFHVnRZVkJoZEdoOGZGd2lMMlp2Y20xaGRGd2lMRzUxYkd3c1pTeDBLVHB1ZFd4c2ZTeG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVVJsWm1sdVpXUkxaWGwzYjNKa2N6MW1kVzVqZEdsdmJpaGxMSFFzY2lsN1ptOXlLSFpoY2lCdUlHbHVJSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6S1dsbUtGd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUIwVzI1ZEtXWnZjaWgyWVhJZ2J6MTBhR2x6TG1SbFptbHVaV1JMWlhsM2IzSmtjMXR1WFN4cFBUQTdhVHh2TG14bGJtZDBhRHRwS3lzcGUzWmhjaUJoUFc5YmFWMHNjejFoS0dVc2RGdHVYU3gwTEhJcE8ybG1LRndpYzNSeWFXNW5YQ0k5UFhSNWNHVnZaaUJ6Zkh4Y0ltNTFiV0psY2x3aVBUMTBlWEJsYjJZZ2N5bHlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loMkxrdEZXVmRQVWtSZlExVlRWRTlOTEh0clpYazZiaXh0WlhOellXZGxPbk45TEZ3aVhDSXNYQ0pjSWl4dWRXeHNMR1VzZENrdWNISmxabWw0VjJsMGFDaHVkV3hzTEc0cE8ybG1LSE1tSmx3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCektYdDJZWElnZFQxekxtTnZaR1U3YVdZb1hDSnpkSEpwYm1kY0lqMDlkSGx3Wlc5bUlIVXBlMmxtS0NGMlczVmRLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJbFZ1WkdWbWFXNWxaQ0JsY25KdmNpQmpiMlJsSUNoMWMyVWdaR1ZtYVc1bFJYSnliM0lwT2lCY0lpdDFLVHQxUFhaYmRWMTlaV3h6WlZ3aWJuVnRZbVZ5WENJaFBYUjVjR1Z2WmlCMUppWW9kVDEyTGt0RldWZFBVa1JmUTFWVFZFOU5LVHQyWVhJZ1l6MWNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdjeTV0WlhOellXZGxQM011YldWemMyRm5aVHA3YTJWNU9tNHNiV1Z6YzJGblpUcHpMbTFsYzNOaFoyVjhmRndpUDF3aWZTeHNQWE11YzJOb1pXMWhVR0YwYUh4OFhDSXZYQ0lyYmk1eVpYQnNZV05sS0M5K0wyY3NYQ0orTUZ3aUtTNXlaWEJzWVdObEtDOWNYQzh2Wnl4Y0luNHhYQ0lwTzNKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFVzWXl4ekxtUmhkR0ZRWVhSb2ZIeHVkV3hzTEd3c2JuVnNiQ3hsTEhRcGZYMXlaWFIxY200Z2JuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWQ1lYTnBZejFtZFc1amRHbHZiaWhsTEhRc2NpbDdkbUZ5SUc0N2NtVjBkWEp1S0c0OWRHaHBjeTUyWVd4cFpHRjBaVlI1Y0dVb1pTeDBMSElwS1Q5dUxuQnlaV1pwZUZkcGRHZ29iblZzYkN4Y0luUjVjR1ZjSWlrNktHNDlkR2hwY3k1MllXeHBaR0YwWlVWdWRXMG9aU3gwTEhJcEtUOXVMbkJ5WldacGVGZHBkR2dvYm5Wc2JDeGNJblI1Y0dWY0lpazZiblZzYkgwc2FDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVlVlWEJsUFdaMWJtTjBhVzl1S0dVc2RDbDdhV1lvZG05cFpDQXdQVDA5ZEM1MGVYQmxLWEpsZEhWeWJpQnVkV3hzTzNaaGNpQnlQWFI1Y0dWdlppQmxPMjUxYkd3OVBUMWxQM0k5WENKdWRXeHNYQ0k2UVhKeVlYa3VhWE5CY25KaGVTaGxLU1ltS0hJOVhDSmhjbkpoZVZ3aUtUdDJZWElnYmoxMExuUjVjR1U3UVhKeVlYa3VhWE5CY25KaGVTaHVLWHg4S0c0OVcyNWRLVHRtYjNJb2RtRnlJRzg5TUR0dlBHNHViR1Z1WjNSb08yOHJLeWw3ZG1GeUlHazlibHR2WFR0cFppaHBQVDA5Y254OFhDSnBiblJsWjJWeVhDSTlQVDFwSmlaY0ltNTFiV0psY2x3aVBUMDljaVltWlNVeFBUMDlNQ2x5WlhSMWNtNGdiblZzYkgxeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGtsT1ZrRk1TVVJmVkZsUVJTeDdkSGx3WlRweUxHVjRjR1ZqZEdWa09tNHVhbTlwYmloY0lpOWNJaWw5TEZ3aVhDSXNYQ0pjSWl4dWRXeHNMR1VzZENsOUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxSVzUxYlQxbWRXNWpkR2x2YmlobExIUXBlMmxtS0hadmFXUWdNRDA5UFhSYlhDSmxiblZ0WENKZEtYSmxkSFZ5YmlCdWRXeHNPMlp2Y2loMllYSWdjajB3TzNJOGRGdGNJbVZ1ZFcxY0lsMHViR1Z1WjNSb08zSXJLeWw3ZG1GeUlHODlkRnRjSW1WdWRXMWNJbDFiY2wwN2FXWW9iaWhsTEc4cEtYSmxkSFZ5YmlCdWRXeHNmWEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVSVTVWVFY5TlNWTk5RVlJEU0N4N2RtRnNkV1U2WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlFcFRUMDQvU2xOUFRpNXpkSEpwYm1kcFpua29aU2s2Wlgwc1hDSmNJaXhjSWx3aUxHNTFiR3dzWlN4MEtYMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZPZFcxbGNtbGpQV1oxYm1OMGFXOXVLR1VzZEN4eUtYdHlaWFIxY200Z2RHaHBjeTUyWVd4cFpHRjBaVTExYkhScGNHeGxUMllvWlN4MExISXBmSHgwYUdsekxuWmhiR2xrWVhSbFRXbHVUV0Y0S0dVc2RDeHlLWHg4ZEdocGN5NTJZV3hwWkdGMFpVNWhUaWhsTEhRc2NpbDhmRzUxYkd4OU8zWmhjaUI1UFUxaGRHZ3VjRzkzS0RJc0xUVXhLU3h0UFRFdGVUdG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTExYkhScGNHeGxUMlk5Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2oxMExtMTFiSFJwY0d4bFQyWjhmSFF1WkdsMmFYTnBZbXhsUW5rN2FXWW9kbTlwWkNBd1BUMDljaWx5WlhSMWNtNGdiblZzYkR0cFppaGNJbTUxYldKbGNsd2lQVDEwZVhCbGIyWWdaU2w3ZG1GeUlHNDlaUzl5SlRFN2FXWW9iajQ5ZVNZbWJqeHRLWEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVUbFZOUWtWU1gwMVZURlJKVUV4RlgwOUdMSHQyWVd4MVpUcGxMRzExYkhScGNHeGxUMlk2Y24wc1hDSmNJaXhjSWx3aUxHNTFiR3dzWlN4MEtYMXlaWFIxY200Z2JuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWTmFXNU5ZWGc5Wm5WdVkzUnBiMjRvWlN4MEtYdHBaaWhjSW01MWJXSmxjbHdpSVQxMGVYQmxiMllnWlNseVpYUjFjbTRnYm5Wc2JEdHBaaWgyYjJsa0lEQWhQVDEwTG0xcGJtbHRkVzBwZTJsbUtHVThkQzV0YVc1cGJYVnRLWEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVUbFZOUWtWU1gwMUpUa2xOVlUwc2UzWmhiSFZsT21Vc2JXbHVhVzExYlRwMExtMXBibWx0ZFcxOUxGd2lYQ0lzWENJdmJXbHVhVzExYlZ3aUxHNTFiR3dzWlN4MEtUdHBaaWgwTG1WNFkyeDFjMmwyWlUxcGJtbHRkVzBtSm1VOVBUMTBMbTFwYm1sdGRXMHBjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNU9WVTFDUlZKZlRVbE9TVTFWVFY5RldFTk1WVk5KVmtVc2UzWmhiSFZsT21Vc2JXbHVhVzExYlRwMExtMXBibWx0ZFcxOUxGd2lYQ0lzWENJdlpYaGpiSFZ6YVhabFRXbHVhVzExYlZ3aUxHNTFiR3dzWlN4MEtYMXBaaWgyYjJsa0lEQWhQVDEwTG0xaGVHbHRkVzBwZTJsbUtHVStkQzV0WVhocGJYVnRLWEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtIWXVUbFZOUWtWU1gwMUJXRWxOVlUwc2UzWmhiSFZsT21Vc2JXRjRhVzExYlRwMExtMWhlR2x0ZFcxOUxGd2lYQ0lzWENJdmJXRjRhVzExYlZ3aUxHNTFiR3dzWlN4MEtUdHBaaWgwTG1WNFkyeDFjMmwyWlUxaGVHbHRkVzBtSm1VOVBUMTBMbTFoZUdsdGRXMHBjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNU9WVTFDUlZKZlRVRllTVTFWVFY5RldFTk1WVk5KVmtVc2UzWmhiSFZsT21Vc2JXRjRhVzExYlRwMExtMWhlR2x0ZFcxOUxGd2lYQ0lzWENJdlpYaGpiSFZ6YVhabFRXRjRhVzExYlZ3aUxHNTFiR3dzWlN4MEtYMXlaWFIxY200Z2JuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWT1lVNDlablZ1WTNScGIyNG9aU3gwS1h0eVpYUjFjbTVjSW01MWJXSmxjbHdpSVQxMGVYQmxiMllnWlQ5dWRXeHNPbWx6VG1GT0tHVXBQVDA5SVRCOGZHVTlQVDB4THpCOGZHVTlQVDB0S0RFdk1Day9kR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazVWVFVKRlVsOU9UMVJmUVY5T1ZVMUNSVklzZTNaaGJIVmxPbVY5TEZ3aVhDSXNYQ0l2ZEhsd1pWd2lMRzUxYkd3c1pTeDBLVHB1ZFd4c2ZTeG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVk4wY21sdVp6MW1kVzVqZEdsdmJpaGxMSFFzY2lsN2NtVjBkWEp1SUhSb2FYTXVkbUZzYVdSaGRHVlRkSEpwYm1kTVpXNW5kR2dvWlN4MExISXBmSHgwYUdsekxuWmhiR2xrWVhSbFUzUnlhVzVuVUdGMGRHVnliaWhsTEhRc2NpbDhmRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxVM1J5YVc1blRHVnVaM1JvUFdaMWJtTjBhVzl1S0dVc2RDbDdjbVYwZFhKdVhDSnpkSEpwYm1kY0lpRTlkSGx3Wlc5bUlHVS9iblZzYkRwMmIybGtJREFoUFQxMExtMXBia3hsYm1kMGFDWW1aUzVzWlc1bmRHZzhkQzV0YVc1TVpXNW5kR2cvZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGxOVVVrbE9SMTlNUlU1SFZFaGZVMGhQVWxRc2UyeGxibWQwYURwbExteGxibWQwYUN4dGFXNXBiWFZ0T25RdWJXbHVUR1Z1WjNSb2ZTeGNJbHdpTEZ3aUwyMXBia3hsYm1kMGFGd2lMRzUxYkd3c1pTeDBLVHAyYjJsa0lEQWhQVDEwTG0xaGVFeGxibWQwYUNZbVpTNXNaVzVuZEdnK2RDNXRZWGhNWlc1bmRHZy9kR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMbE5VVWtsT1IxOU1SVTVIVkVoZlRFOU9SeXg3YkdWdVozUm9PbVV1YkdWdVozUm9MRzFoZUdsdGRXMDZkQzV0WVhoTVpXNW5kR2g5TEZ3aVhDSXNYQ0l2YldGNFRHVnVaM1JvWENJc2JuVnNiQ3hsTEhRcE9tNTFiR3g5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFUzUnlhVzVuVUdGMGRHVnliajFtZFc1amRHbHZiaWhsTEhRcGUybG1LRndpYzNSeWFXNW5YQ0loUFhSNWNHVnZaaUJsZkh4Y0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ2RDNXdZWFIwWlhKdUppWWhLSFF1Y0dGMGRHVnliaUJwYm5OMFlXNWpaVzltSUZKbFowVjRjQ2twY21WMGRYSnVJRzUxYkd3N2RtRnlJSEk3YVdZb2RDNXdZWFIwWlhKdUlHbHVjM1JoYm1ObGIyWWdVbVZuUlhod0tYSTlkQzV3WVhSMFpYSnVPMlZzYzJWN2RtRnlJRzRzYnoxY0lsd2lMR2s5ZEM1d1lYUjBaWEp1TG0xaGRHTm9LQzllWEZ3dktDNHJLVnhjTHloYmFXMW5YU29wSkM4cE8yay9LRzQ5YVZzeFhTeHZQV2xiTWwwcE9tNDlkQzV3WVhSMFpYSnVMSEk5Ym1WM0lGSmxaMFY0Y0NodUxHOHBmWEpsZEhWeWJpQnlMblJsYzNRb1pTay9iblZzYkRwMGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVUxUlNTVTVIWDFCQlZGUkZVazRzZTNCaGRIUmxjbTQ2ZEM1d1lYUjBaWEp1ZlN4Y0lsd2lMRndpTDNCaGRIUmxjbTVjSWl4dWRXeHNMR1VzZENsOUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRWEp5WVhrOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNKbGRIVnliaUJCY25KaGVTNXBjMEZ5Y21GNUtHVXBQM1JvYVhNdWRtRnNhV1JoZEdWQmNuSmhlVXhsYm1kMGFDaGxMSFFzY2lsOGZIUm9hWE11ZG1Gc2FXUmhkR1ZCY25KaGVWVnVhWEYxWlVsMFpXMXpLR1VzZEN4eUtYeDhkR2hwY3k1MllXeHBaR0YwWlVGeWNtRjVTWFJsYlhNb1pTeDBMSElwZkh4dWRXeHNPbTUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRWEp5WVhsTVpXNW5kR2c5Wm5WdVkzUnBiMjRvWlN4MEtYdDJZWElnY2p0eVpYUjFjbTRnZG05cFpDQXdJVDA5ZEM1dGFXNUpkR1Z0Y3lZbVpTNXNaVzVuZEdnOGRDNXRhVzVKZEdWdGN5WW1LSEk5ZEdocGN5NWpjbVZoZEdWRmNuSnZjaWgyTGtGU1VrRlpYMHhGVGtkVVNGOVRTRTlTVkN4N2JHVnVaM1JvT21VdWJHVnVaM1JvTEcxcGJtbHRkVzA2ZEM1dGFXNUpkR1Z0YzMwc1hDSmNJaXhjSWk5dGFXNUpkR1Z0YzF3aUxHNTFiR3dzWlN4MEtTeDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtISXBLVDl5T25admFXUWdNQ0U5UFhRdWJXRjRTWFJsYlhNbUptVXViR1Z1WjNSb1BuUXViV0Y0U1hSbGJYTW1KaWh5UFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1QlVsSkJXVjlNUlU1SFZFaGZURTlPUnl4N2JHVnVaM1JvT21VdWJHVnVaM1JvTEcxaGVHbHRkVzA2ZEM1dFlYaEpkR1Z0YzMwc1hDSmNJaXhjSWk5dFlYaEpkR1Z0YzF3aUxHNTFiR3dzWlN4MEtTeDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtISXBLVDl5T201MWJHeDlMR2d1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsUVhKeVlYbFZibWx4ZFdWSmRHVnRjejFtZFc1amRHbHZiaWhsTEhRcGUybG1LSFF1ZFc1cGNYVmxTWFJsYlhNcFptOXlLSFpoY2lCeVBUQTdjanhsTG14bGJtZDBhRHR5S3lzcFptOXlLSFpoY2lCdlBYSXJNVHR2UEdVdWJHVnVaM1JvTzI4ckt5bHBaaWh1S0dWYmNsMHNaVnR2WFNrcGUzWmhjaUJwUFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1QlVsSkJXVjlWVGtsUlZVVXNlMjFoZEdOb01UcHlMRzFoZEdOb01qcHZmU3hjSWx3aUxGd2lMM1Z1YVhGMVpVbDBaVzF6WENJc2JuVnNiQ3hsTEhRcE8ybG1LSFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9hU2twY21WMGRYSnVJR2w5Y21WMGRYSnVJRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRWEp5WVhsSmRHVnRjejFtZFc1amRHbHZiaWhsTEhRc2NpbDdhV1lvZG05cFpDQXdQVDA5ZEM1cGRHVnRjeWx5WlhSMWNtNGdiblZzYkR0MllYSWdiaXh2TzJsbUtFRnljbUY1TG1selFYSnlZWGtvZEM1cGRHVnRjeWtwZTJadmNpaHZQVEE3Ynp4bExteGxibWQwYUR0dkt5c3BhV1lvYnp4MExtbDBaVzF6TG14bGJtZDBhQ2w3YVdZb2JqMTBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHVmJiMTBzZEM1cGRHVnRjMXR2WFN4YmIxMHNXMXdpYVhSbGJYTmNJaXh2WFN4eUsxd2lMMXdpSzI4cEtYSmxkSFZ5YmlCdWZXVnNjMlVnYVdZb2RtOXBaQ0F3SVQwOWRDNWhaR1JwZEdsdmJtRnNTWFJsYlhNcGFXWW9YQ0ppYjI5c1pXRnVYQ0k5UFhSNWNHVnZaaUIwTG1Ga1pHbDBhVzl1WVd4SmRHVnRjeWw3YVdZb0lYUXVZV1JrYVhScGIyNWhiRWwwWlcxekppWW9iajEwYUdsekxtTnlaV0YwWlVWeWNtOXlLSFl1UVZKU1FWbGZRVVJFU1ZSSlQwNUJURjlKVkVWTlV5eDdmU3hjSWk5Y0lpdHZMRndpTDJGa1pHbDBhVzl1WVd4SmRHVnRjMXdpTEc1MWJHd3NaU3gwS1N4MGFHbHpMbWhoYm1Sc1pVVnljbTl5S0c0cEtTbHlaWFIxY200Z2JuMWxiSE5sSUdsbUtHNDlkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGxXMjlkTEhRdVlXUmthWFJwYjI1aGJFbDBaVzF6TEZ0dlhTeGJYQ0poWkdScGRHbHZibUZzU1hSbGJYTmNJbDBzY2l0Y0lpOWNJaXR2S1NseVpYUjFjbTRnYm4xbGJITmxJR1p2Y2lodlBUQTdienhsTG14bGJtZDBhRHR2S3lzcGFXWW9iajEwYUdsekxuWmhiR2xrWVhSbFFXeHNLR1ZiYjEwc2RDNXBkR1Z0Y3l4YmIxMHNXMXdpYVhSbGJYTmNJbDBzY2l0Y0lpOWNJaXR2S1NseVpYUjFjbTRnYmp0eVpYUjFjbTRnYm5Wc2JIMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZQWW1wbFkzUTlablZ1WTNScGIyNG9aU3gwTEhJcGUzSmxkSFZ5Ymx3aWIySnFaV04wWENJaFBYUjVjR1Z2WmlCbGZIeHVkV3hzUFQwOVpYeDhRWEp5WVhrdWFYTkJjbkpoZVNobEtUOXVkV3hzT25Sb2FYTXVkbUZzYVdSaGRHVlBZbXBsWTNSTmFXNU5ZWGhRY205d1pYSjBhV1Z6S0dVc2RDeHlLWHg4ZEdocGN5NTJZV3hwWkdGMFpVOWlhbVZqZEZKbGNYVnBjbVZrVUhKdmNHVnlkR2xsY3lobExIUXNjaWw4ZkhSb2FYTXVkbUZzYVdSaGRHVlBZbXBsWTNSUWNtOXdaWEowYVdWektHVXNkQ3h5S1h4OGRHaHBjeTUyWVd4cFpHRjBaVTlpYW1WamRFUmxjR1Z1WkdWdVkybGxjeWhsTEhRc2NpbDhmRzUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxUMkpxWldOMFRXbHVUV0Y0VUhKdmNHVnlkR2xsY3oxbWRXNWpkR2x2YmlobExIUXBlM1poY2lCeUxHNDlUMkpxWldOMExtdGxlWE1vWlNrN2NtVjBkWEp1SUhadmFXUWdNQ0U5UFhRdWJXbHVVSEp2Y0dWeWRHbGxjeVltYmk1c1pXNW5kR2c4ZEM1dGFXNVFjbTl3WlhKMGFXVnpKaVlvY2oxMGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVQwSktSVU5VWDFCU1QxQkZVbFJKUlZOZlRVbE9TVTFWVFN4N2NISnZjR1Z5ZEhsRGIzVnVkRHB1TG14bGJtZDBhQ3h0YVc1cGJYVnRPblF1YldsdVVISnZjR1Z5ZEdsbGMzMHNYQ0pjSWl4Y0lpOXRhVzVRY205d1pYSjBhV1Z6WENJc2JuVnNiQ3hsTEhRcExIUm9hWE11YUdGdVpHeGxSWEp5YjNJb2Npa3BQM0k2ZG05cFpDQXdJVDA5ZEM1dFlYaFFjbTl3WlhKMGFXVnpKaVp1TG14bGJtZDBhRDUwTG0xaGVGQnliM0JsY25ScFpYTW1KaWh5UFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFFrcEZRMVJmVUZKUFVFVlNWRWxGVTE5TlFWaEpUVlZOTEh0d2NtOXdaWEowZVVOdmRXNTBPbTR1YkdWdVozUm9MRzFoZUdsdGRXMDZkQzV0WVhoUWNtOXdaWEowYVdWemZTeGNJbHdpTEZ3aUwyMWhlRkJ5YjNCbGNuUnBaWE5jSWl4dWRXeHNMR1VzZENrc2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2loeUtTay9janB1ZFd4c2ZTeG9MbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTlpYW1WamRGSmxjWFZwY21Wa1VISnZjR1Z5ZEdsbGN6MW1kVzVqZEdsdmJpaGxMSFFwZTJsbUtIWnZhV1FnTUNFOVBYUXVjbVZ4ZFdseVpXUXBabTl5S0haaGNpQnlQVEE3Y2p4MExuSmxjWFZwY21Wa0xteGxibWQwYUR0eUt5c3BlM1poY2lCdVBYUXVjbVZ4ZFdseVpXUmJjbDA3YVdZb2RtOXBaQ0F3UFQwOVpWdHVYU2w3ZG1GeUlHODlkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazlDU2tWRFZGOVNSVkZWU1ZKRlJDeDdhMlY1T201OUxGd2lYQ0lzWENJdmNtVnhkV2x5WldRdlhDSXJjaXh1ZFd4c0xHVXNkQ2s3YVdZb2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lodktTbHlaWFIxY200Z2IzMTljbVYwZFhKdUlHNTFiR3g5TEdndWNISnZkRzkwZVhCbExuWmhiR2xrWVhSbFQySnFaV04wVUhKdmNHVnlkR2xsY3oxbWRXNWpkR2x2YmlobExIUXNjaWw3ZG1GeUlHNDdabTl5S0haaGNpQnZJR2x1SUdVcGUzWmhjaUJwUFhJclhDSXZYQ0lyYnk1eVpYQnNZV05sS0M5K0wyY3NYQ0orTUZ3aUtTNXlaWEJzWVdObEtDOWNYQzh2Wnl4Y0luNHhYQ0lwTEdFOUlURTdhV1lvZG05cFpDQXdJVDA5ZEM1d2NtOXdaWEowYVdWekppWjJiMmxrSURBaFBUMTBMbkJ5YjNCbGNuUnBaWE5iYjEwbUppaGhQU0V3TEc0OWRHaHBjeTUyWVd4cFpHRjBaVUZzYkNobFcyOWRMSFF1Y0hKdmNHVnlkR2xsYzF0dlhTeGJiMTBzVzF3aWNISnZjR1Z5ZEdsbGMxd2lMRzlkTEdrcEtTbHlaWFIxY200Z2JqdHBaaWgyYjJsa0lEQWhQVDEwTG5CaGRIUmxjbTVRY205d1pYSjBhV1Z6S1dadmNpaDJZWElnY3lCcGJpQjBMbkJoZEhSbGNtNVFjbTl3WlhKMGFXVnpLWHQyWVhJZ2RUMXVaWGNnVW1WblJYaHdLSE1wTzJsbUtIVXVkR1Z6ZENodktTWW1LR0U5SVRBc2JqMTBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHVmJiMTBzZEM1d1lYUjBaWEp1VUhKdmNHVnlkR2xsYzF0elhTeGJiMTBzVzF3aWNHRjBkR1Z5YmxCeWIzQmxjblJwWlhOY0lpeHpYU3hwS1NrcGNtVjBkWEp1SUc1OWFXWW9ZU2wwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1tSmloMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRwWFQwaE1DeGtaV3hsZEdVZ2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvYzF0cFhTazdaV3h6WlNCcFppaDJiMmxrSURBaFBUMTBMbUZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6S1h0cFppaDBhR2x6TG5SeVlXTnJWVzVyYm05M2JsQnliM0JsY25ScFpYTW1KaWgwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2MxdHBYVDBoTUN4a1pXeGxkR1VnZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRwWFNrc1hDSmliMjlzWldGdVhDSTlQWFI1Y0dWdlppQjBMbUZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6S1h0cFppZ2hkQzVoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3lZbUtHNDlkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazlDU2tWRFZGOUJSRVJKVkVsUFRrRk1YMUJTVDFCRlVsUkpSVk1zZTJ0bGVUcHZmU3hjSWx3aUxGd2lMMkZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6WENJc2JuVnNiQ3hsTEhRcExuQnlaV1pwZUZkcGRHZ29ieXh1ZFd4c0tTeDBhR2x6TG1oaGJtUnNaVVZ5Y205eUtHNHBLU2x5WlhSMWNtNGdibjFsYkhObElHbG1LRzQ5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsVzI5ZExIUXVZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE1zVzI5ZExGdGNJbUZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6WENKZExHa3BLWEpsZEhWeWJpQnVmV1ZzYzJVZ2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWekppWWhkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmFWMG1KaWgwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpXMmxkUFNFd0tYMXlaWFIxY200Z2JuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWUFltcGxZM1JFWlhCbGJtUmxibU5wWlhNOVpuVnVZM1JwYjI0b1pTeDBMSElwZTNaaGNpQnVPMmxtS0hadmFXUWdNQ0U5UFhRdVpHVndaVzVrWlc1amFXVnpLV1p2Y2loMllYSWdieUJwYmlCMExtUmxjR1Z1WkdWdVkybGxjeWxwWmloMmIybGtJREFoUFQxbFcyOWRLWHQyWVhJZ2FUMTBMbVJsY0dWdVpHVnVZMmxsYzF0dlhUdHBaaWhjSW5OMGNtbHVaMXdpUFQxMGVYQmxiMllnYVNsN2FXWW9kbTlwWkNBd1BUMDlaVnRwWFNZbUtHNDlkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazlDU2tWRFZGOUVSVkJGVGtSRlRrTlpYMHRGV1N4N2EyVjVPbThzYldsemMybHVaenBwZlN4Y0lsd2lMRndpWENJc2JuVnNiQ3hsTEhRcExuQnlaV1pwZUZkcGRHZ29iblZzYkN4dktTNXdjbVZtYVhoWGFYUm9LRzUxYkd3c1hDSmtaWEJsYm1SbGJtTnBaWE5jSWlrc2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lodUtTa3BjbVYwZFhKdUlHNTlaV3h6WlNCcFppaEJjbkpoZVM1cGMwRnljbUY1S0drcEtXWnZjaWgyWVhJZ1lUMHdPMkU4YVM1c1pXNW5kR2c3WVNzcktYdDJZWElnY3oxcFcyRmRPMmxtS0hadmFXUWdNRDA5UFdWYmMxMG1KaWh1UFhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFFrcEZRMVJmUkVWUVJVNUVSVTVEV1Y5TFJWa3NlMnRsZVRwdkxHMXBjM05wYm1jNmMzMHNYQ0pjSWl4Y0lpOWNJaXRoTEc1MWJHd3NaU3gwS1M1d2NtVm1hWGhYYVhSb0tHNTFiR3dzYnlrdWNISmxabWw0VjJsMGFDaHVkV3hzTEZ3aVpHVndaVzVrWlc1amFXVnpYQ0lwTEhSb2FYTXVhR0Z1Wkd4bFJYSnliM0lvYmlrcEtYSmxkSFZ5YmlCdWZXVnNjMlVnYVdZb2JqMTBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHVXNhU3hiWFN4YlhDSmtaWEJsYm1SbGJtTnBaWE5jSWl4dlhTeHlLU2x5WlhSMWNtNGdibjF5WlhSMWNtNGdiblZzYkgwc2FDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkRiMjFpYVc1aGRHbHZibk05Wm5WdVkzUnBiMjRvWlN4MExISXBlM0psZEhWeWJpQjBhR2x6TG5aaGJHbGtZWFJsUVd4c1QyWW9aU3gwTEhJcGZIeDBhR2x6TG5aaGJHbGtZWFJsUVc1NVQyWW9aU3gwTEhJcGZIeDBhR2x6TG5aaGJHbGtZWFJsVDI1bFQyWW9aU3gwTEhJcGZIeDBhR2x6TG5aaGJHbGtZWFJsVG05MEtHVXNkQ3h5S1h4OGJuVnNiSDBzYUM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWQmJHeFBaajFtZFc1amRHbHZiaWhsTEhRc2NpbDdhV1lvZG05cFpDQXdQVDA5ZEM1aGJHeFBaaWx5WlhSMWNtNGdiblZzYkR0bWIzSW9kbUZ5SUc0c2J6MHdPMjg4ZEM1aGJHeFBaaTVzWlc1bmRHZzdieXNyS1h0MllYSWdhVDEwTG1Gc2JFOW1XMjlkTzJsbUtHNDlkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGxMR2tzVzEwc1cxd2lZV3hzVDJaY0lpeHZYU3h5S1NseVpYUjFjbTRnYm4xeVpYUjFjbTRnYm5Wc2JIMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZCYm5sUFpqMW1kVzVqZEdsdmJpaGxMSFFzY2lsN2FXWW9kbTlwWkNBd1BUMDlkQzVoYm5sUFppbHlaWFIxY200Z2JuVnNiRHQyWVhJZ2JpeHZMR2s5VzEwc1lUMTBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZzdkR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpKaVlvYmoxMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TEc4OWRHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1wTzJadmNpaDJZWElnY3owaE1DeDFQVEE3ZFR4MExtRnVlVTltTG14bGJtZDBhRHQxS3lzcGUzUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5WW1LSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTllMzBzZEdocGN5NXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTllMzBwTzNaaGNpQmpQWFF1WVc1NVQyWmJkVjBzYkQxMGFHbHpMbVZ5Y205eWN5NXNaVzVuZEdnc1pqMTBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHVXNZeXhiWFN4YlhDSmhibmxQWmx3aUxIVmRMSElwTzJsbUtHNTFiR3c5UFQxbUppWnNQVDA5ZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvS1h0cFppaDBhR2x6TG1WeWNtOXljejEwYUdsekxtVnljbTl5Y3k1emJHbGpaU2d3TEdFcExIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5bDdabTl5S0haaGNpQmtJR2x1SUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpLVzliWkYwOUlUQXNaR1ZzWlhSbElHNWJaRjA3Wm05eUtIWmhjaUJ3SUdsdUlIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNcGIxdHdYWHg4S0c1YmNGMDlJVEFwTzNNOUlURTdZMjl1ZEdsdWRXVjljbVYwZFhKdUlHNTFiR3g5WmlZbWFTNXdkWE5vS0dZdWNISmxabWw0VjJsMGFDaHVkV3hzTEZ3aVhDSXJkU2t1Y0hKbFptbDRWMmwwYUNodWRXeHNMRndpWVc1NVQyWmNJaWtwZlhKbGRIVnliaUIwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1tSmloMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFc0c2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE05Ynlrc2N6OG9hVDFwTG1OdmJtTmhkQ2gwYUdsekxtVnljbTl5Y3k1emJHbGpaU2hoS1Nrc2RHaHBjeTVsY25KdmNuTTlkR2hwY3k1bGNuSnZjbk11YzJ4cFkyVW9NQ3hoS1N4MGFHbHpMbU55WldGMFpVVnljbTl5S0hZdVFVNVpYMDlHWDAxSlUxTkpUa2NzZTMwc1hDSmNJaXhjSWk5aGJubFBabHdpTEdrc1pTeDBLU2s2ZG05cFpDQXdmU3hvTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlU5dVpVOW1QV1oxYm1OMGFXOXVLR1VzZEN4eUtYdHBaaWgyYjJsa0lEQTlQVDEwTG05dVpVOW1LWEpsZEhWeWJpQnVkV3hzTzNaaGNpQnVMRzhzYVQxdWRXeHNMR0U5VzEwc2N6MTBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZzdkR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpKaVlvYmoxMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TEc4OWRHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1wTzJadmNpaDJZWElnZFQwd08zVThkQzV2Ym1WUFppNXNaVzVuZEdnN2RTc3JLWHQwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1tSmloMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFh0OUxIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFh0OUtUdDJZWElnWXoxMExtOXVaVTltVzNWZExHdzlkR2hwY3k1bGNuSnZjbk11YkdWdVozUm9MR1k5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsTEdNc1cxMHNXMXdpYjI1bFQyWmNJaXgxWFN4eUtUdHBaaWh1ZFd4c1BUMDlaaVltYkQwOVBYUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFDbDdhV1lvYm5Wc2JDRTlQV2twY21WMGRYSnVJSFJvYVhNdVpYSnliM0p6UFhSb2FYTXVaWEp5YjNKekxuTnNhV05sS0RBc2N5a3NkR2hwY3k1amNtVmhkR1ZGY25KdmNpaDJMazlPUlY5UFJsOU5WVXhVU1ZCTVJTeDdhVzVrWlhneE9ta3NhVzVrWlhneU9uVjlMRndpWENJc1hDSXZiMjVsVDJaY0lpeHVkV3hzTEdVc2RDazdhV1lvYVQxMUxIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5bDdabTl5S0haaGNpQmtJR2x1SUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpLVzliWkYwOUlUQXNaR1ZzWlhSbElHNWJaRjA3Wm05eUtIWmhjaUJ3SUdsdUlIUm9hWE11ZFc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNcGIxdHdYWHg4S0c1YmNGMDlJVEFwZlgxbGJITmxJR1ltSm1FdWNIVnphQ2htS1gxeVpYUjFjbTRnZEdocGN5NTBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6SmlZb2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3oxdUxIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6UFc4cExHNTFiR3c5UFQxcFB5aGhQV0V1WTI5dVkyRjBLSFJvYVhNdVpYSnliM0p6TG5Oc2FXTmxLSE1wS1N4MGFHbHpMbVZ5Y205eWN6MTBhR2x6TG1WeWNtOXljeTV6YkdsalpTZ3dMSE1wTEhSb2FYTXVZM0psWVhSbFJYSnliM0lvZGk1UFRrVmZUMFpmVFVsVFUwbE9SeXg3ZlN4Y0lsd2lMRndpTDI5dVpVOW1YQ0lzWVN4bExIUXBLVG9vZEdocGN5NWxjbkp2Y25NOWRHaHBjeTVsY25KdmNuTXVjMnhwWTJVb01DeHpLU3h1ZFd4c0tYMHNhQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZPYjNROVpuVnVZM1JwYjI0b1pTeDBMSElwZTJsbUtIWnZhV1FnTUQwOVBYUXVibTkwS1hKbGRIVnliaUJ1ZFd4c08zWmhjaUJ1TEc4c2FUMTBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZzdkR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpKaVlvYmoxMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TEc4OWRHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1zZEdocGN5NTFibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jejE3ZlN4MGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jejE3ZlNrN2RtRnlJR0U5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsTEhRdWJtOTBMRzUxYkd3c2JuVnNiQ3h5S1N4elBYUm9hWE11WlhKeWIzSnpMbk5zYVdObEtHa3BPM0psZEhWeWJpQjBhR2x6TG1WeWNtOXljejEwYUdsekxtVnljbTl5Y3k1emJHbGpaU2d3TEdrcExIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5WW1LSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITTliaXgwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6MXZLU3h1ZFd4c1BUMDlZU1ltTUQwOVBYTXViR1Z1WjNSb1AzUm9hWE11WTNKbFlYUmxSWEp5YjNJb2RpNU9UMVJmVUVGVFUwVkVMSHQ5TEZ3aVhDSXNYQ0l2Ym05MFhDSXNiblZzYkN4bExIUXBPbTUxYkd4OUxHZ3VjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxTSGx3WlhKdFpXUnBZVDFtZFc1amRHbHZiaWhsTEhRc2JpbDdhV1lvSVhRdWJHbHVhM01wY21WMGRYSnVJRzUxYkd3N1ptOXlLSFpoY2lCdkxHazlNRHRwUEhRdWJHbHVhM011YkdWdVozUm9PMmtyS3lsN2RtRnlJR0U5ZEM1c2FXNXJjMXRwWFR0cFppaGNJbVJsYzJOeWFXSmxaR0o1WENJOVBUMWhMbkpsYkNsN1ptOXlLSFpoY2lCelBXNWxkeUJ5S0dFdWFISmxaaWtzZFQwaE1DeGpQVEE3WXp4ekxuWmhjazVoYldWekxteGxibWQwYUR0akt5c3BhV1lvSVNoekxuWmhjazVoYldWelcyTmRhVzRnWlNrcGUzVTlJVEU3WW5KbFlXdDlhV1lvZFNsN2RtRnlJR3c5Y3k1bWFXeHNSbkp2YlU5aWFtVmpkQ2hsS1N4bVBYc2tjbVZtT214OU8ybG1LRzg5ZEdocGN5NTJZV3hwWkdGMFpVRnNiQ2hsTEdZc1cxMHNXMXdpYkdsdWEzTmNJaXhwWFN4dUtTbHlaWFIxY200Z2IzMTlmWDA3ZG1GeUlIWTllMGxPVmtGTVNVUmZWRmxRUlRvd0xFVk9WVTFmVFVsVFRVRlVRMGc2TVN4QlRsbGZUMFpmVFVsVFUwbE9Sem94TUN4UFRrVmZUMFpmVFVsVFUwbE9Sem94TVN4UFRrVmZUMFpmVFZWTVZFbFFURVU2TVRJc1RrOVVYMUJCVTFORlJEb3hNeXhPVlUxQ1JWSmZUVlZNVkVsUVRFVmZUMFk2TVRBd0xFNVZUVUpGVWw5TlNVNUpUVlZOT2pFd01TeE9WVTFDUlZKZlRVbE9TVTFWVFY5RldFTk1WVk5KVmtVNk1UQXlMRTVWVFVKRlVsOU5RVmhKVFZWTk9qRXdNeXhPVlUxQ1JWSmZUVUZZU1UxVlRWOUZXRU5NVlZOSlZrVTZNVEEwTEU1VlRVSkZVbDlPVDFSZlFWOU9WVTFDUlZJNk1UQTFMRk5VVWtsT1IxOU1SVTVIVkVoZlUwaFBVbFE2TWpBd0xGTlVVa2xPUjE5TVJVNUhWRWhmVEU5T1J6b3lNREVzVTFSU1NVNUhYMUJCVkZSRlVrNDZNakF5TEU5Q1NrVkRWRjlRVWs5UVJWSlVTVVZUWDAxSlRrbE5WVTA2TXpBd0xFOUNTa1ZEVkY5UVVrOVFSVkpVU1VWVFgwMUJXRWxOVlUwNk16QXhMRTlDU2tWRFZGOVNSVkZWU1ZKRlJEb3pNRElzVDBKS1JVTlVYMEZFUkVsVVNVOU9RVXhmVUZKUFVFVlNWRWxGVXpvek1ETXNUMEpLUlVOVVgwUkZVRVZPUkVWT1ExbGZTMFZaT2pNd05DeEJVbEpCV1Y5TVJVNUhWRWhmVTBoUFVsUTZOREF3TEVGU1VrRlpYMHhGVGtkVVNGOU1UMDVIT2pRd01TeEJVbEpCV1Y5VlRrbFJWVVU2TkRBeUxFRlNVa0ZaWDBGRVJFbFVTVTlPUVV4ZlNWUkZUVk02TkRBekxFWlBVazFCVkY5RFZWTlVUMDA2TlRBd0xFdEZXVmRQVWtSZlExVlRWRTlOT2pVd01TeERTVkpEVlV4QlVsOVNSVVpGVWtWT1EwVTZOakF3TEZWT1MwNVBWMDVmVUZKUFVFVlNWRms2TVdVemZTeGZQWHQ5TzJadmNpaDJZWElnWWlCcGJpQjJLVjliZGx0aVhWMDlZanQyWVhJZ1p6MTdTVTVXUVV4SlJGOVVXVkJGT2x3aVNXNTJZV3hwWkNCMGVYQmxPaUI3ZEhsd1pYMGdLR1Y0Y0dWamRHVmtJSHRsZUhCbFkzUmxaSDBwWENJc1JVNVZUVjlOU1ZOTlFWUkRTRHBjSWs1dklHVnVkVzBnYldGMFkyZ2dabTl5T2lCN2RtRnNkV1Y5WENJc1FVNVpYMDlHWDAxSlUxTkpUa2M2SjBSaGRHRWdaRzlsY3lCdWIzUWdiV0YwWTJnZ1lXNTVJSE5qYUdWdFlYTWdabkp2YlNCY0ltRnVlVTltWENJbkxFOU9SVjlQUmw5TlNWTlRTVTVIT2lkRVlYUmhJR1J2WlhNZ2JtOTBJRzFoZEdOb0lHRnVlU0J6WTJobGJXRnpJR1p5YjIwZ1hDSnZibVZQWmx3aUp5eFBUa1ZmVDBaZlRWVk1WRWxRVEVVNkowUmhkR0VnYVhNZ2RtRnNhV1FnWVdkaGFXNXpkQ0J0YjNKbElIUm9ZVzRnYjI1bElITmphR1Z0WVNCbWNtOXRJRndpYjI1bFQyWmNJam9nYVc1a2FXTmxjeUI3YVc1a1pYZ3hmU0JoYm1RZ2UybHVaR1Y0TW4wbkxFNVBWRjlRUVZOVFJVUTZKMFJoZEdFZ2JXRjBZMmhsY3lCelkyaGxiV0VnWm5KdmJTQmNJbTV2ZEZ3aUp5eE9WVTFDUlZKZlRWVk1WRWxRVEVWZlQwWTZYQ0pXWVd4MVpTQjdkbUZzZFdWOUlHbHpJRzV2ZENCaElHMTFiSFJwY0d4bElHOW1JSHR0ZFd4MGFYQnNaVTltZlZ3aUxFNVZUVUpGVWw5TlNVNUpUVlZOT2x3aVZtRnNkV1VnZTNaaGJIVmxmU0JwY3lCc1pYTnpJSFJvWVc0Z2JXbHVhVzExYlNCN2JXbHVhVzExYlgxY0lpeE9WVTFDUlZKZlRVbE9TVTFWVFY5RldFTk1WVk5KVmtVNlhDSldZV3gxWlNCN2RtRnNkV1Y5SUdseklHVnhkV0ZzSUhSdklHVjRZMngxYzJsMlpTQnRhVzVwYlhWdElIdHRhVzVwYlhWdGZWd2lMRTVWVFVKRlVsOU5RVmhKVFZWTk9sd2lWbUZzZFdVZ2UzWmhiSFZsZlNCcGN5Qm5jbVZoZEdWeUlIUm9ZVzRnYldGNGFXMTFiU0I3YldGNGFXMTFiWDFjSWl4T1ZVMUNSVkpmVFVGWVNVMVZUVjlGV0VOTVZWTkpWa1U2WENKV1lXeDFaU0I3ZG1Gc2RXVjlJR2x6SUdWeGRXRnNJSFJ2SUdWNFkyeDFjMmwyWlNCdFlYaHBiWFZ0SUh0dFlYaHBiWFZ0ZlZ3aUxFNVZUVUpGVWw5T1QxUmZRVjlPVlUxQ1JWSTZYQ0pXWVd4MVpTQjdkbUZzZFdWOUlHbHpJRzV2ZENCaElIWmhiR2xrSUc1MWJXSmxjbHdpTEZOVVVrbE9SMTlNUlU1SFZFaGZVMGhQVWxRNlhDSlRkSEpwYm1jZ2FYTWdkRzl2SUhOb2IzSjBJQ2g3YkdWdVozUm9mU0JqYUdGeWN5a3NJRzFwYm1sdGRXMGdlMjFwYm1sdGRXMTlYQ0lzVTFSU1NVNUhYMHhGVGtkVVNGOU1UMDVIT2x3aVUzUnlhVzVuSUdseklIUnZieUJzYjI1bklDaDdiR1Z1WjNSb2ZTQmphR0Z5Y3lrc0lHMWhlR2x0ZFcwZ2UyMWhlR2x0ZFcxOVhDSXNVMVJTU1U1SFgxQkJWRlJGVWs0NlhDSlRkSEpwYm1jZ1pHOWxjeUJ1YjNRZ2JXRjBZMmdnY0dGMGRHVnliam9nZTNCaGRIUmxjbTU5WENJc1QwSktSVU5VWDFCU1QxQkZVbFJKUlZOZlRVbE9TVTFWVFRwY0lsUnZieUJtWlhjZ2NISnZjR1Z5ZEdsbGN5QmtaV1pwYm1Wa0lDaDdjSEp2Y0dWeWRIbERiM1Z1ZEgwcExDQnRhVzVwYlhWdElIdHRhVzVwYlhWdGZWd2lMRTlDU2tWRFZGOVFVazlRUlZKVVNVVlRYMDFCV0VsTlZVMDZYQ0pVYjI4Z2JXRnVlU0J3Y205d1pYSjBhV1Z6SUdSbFptbHVaV1FnS0h0d2NtOXdaWEowZVVOdmRXNTBmU2tzSUcxaGVHbHRkVzBnZTIxaGVHbHRkVzE5WENJc1QwSktSVU5VWDFKRlVWVkpVa1ZFT2x3aVRXbHpjMmx1WnlCeVpYRjFhWEpsWkNCd2NtOXdaWEowZVRvZ2UydGxlWDFjSWl4UFFrcEZRMVJmUVVSRVNWUkpUMDVCVEY5UVVrOVFSVkpVU1VWVE9sd2lRV1JrYVhScGIyNWhiQ0J3Y205d1pYSjBhV1Z6SUc1dmRDQmhiR3h2ZDJWa1hDSXNUMEpLUlVOVVgwUkZVRVZPUkVWT1ExbGZTMFZaT2x3aVJHVndaVzVrWlc1amVTQm1ZV2xzWldRZ0xTQnJaWGtnYlhWemRDQmxlR2x6ZERvZ2UyMXBjM05wYm1kOUlDaGtkV1VnZEc4Z2EyVjVPaUI3YTJWNWZTbGNJaXhCVWxKQldWOU1SVTVIVkVoZlUwaFBVbFE2WENKQmNuSmhlU0JwY3lCMGIyOGdjMmh2Y25RZ0tIdHNaVzVuZEdoOUtTd2diV2x1YVcxMWJTQjdiV2x1YVcxMWJYMWNJaXhCVWxKQldWOU1SVTVIVkVoZlRFOU9SenBjSWtGeWNtRjVJR2x6SUhSdmJ5QnNiMjVuSUNoN2JHVnVaM1JvZlNrc0lHMWhlR2x0ZFcwZ2UyMWhlR2x0ZFcxOVhDSXNRVkpTUVZsZlZVNUpVVlZGT2x3aVFYSnlZWGtnYVhSbGJYTWdZWEpsSUc1dmRDQjFibWx4ZFdVZ0tHbHVaR2xqWlhNZ2UyMWhkR05vTVgwZ1lXNWtJSHR0WVhSamFESjlLVndpTEVGU1VrRlpYMEZFUkVsVVNVOU9RVXhmU1ZSRlRWTTZYQ0pCWkdScGRHbHZibUZzSUdsMFpXMXpJRzV2ZENCaGJHeHZkMlZrWENJc1JrOVNUVUZVWDBOVlUxUlBUVHBjSWtadmNtMWhkQ0IyWVd4cFpHRjBhVzl1SUdaaGFXeGxaQ0FvZTIxbGMzTmhaMlY5S1Z3aUxFdEZXVmRQVWtSZlExVlRWRTlOT2x3aVMyVjVkMjl5WkNCbVlXbHNaV1E2SUh0clpYbDlJQ2g3YldWemMyRm5aWDBwWENJc1EwbFNRMVZNUVZKZlVrVkdSVkpGVGtORk9sd2lRMmx5WTNWc1lYSWdKSEpsWm5NNklIdDFjbXh6ZlZ3aUxGVk9TMDVQVjA1ZlVGSlBVRVZTVkZrNlhDSlZibXR1YjNkdUlIQnliM0JsY25SNUlDaHViM1FnYVc0Z2MyTm9aVzFoS1Z3aWZUdGpMbkJ5YjNSdmRIbHdaVDFQWW1wbFkzUXVZM0psWVhSbEtFVnljbTl5TG5CeWIzUnZkSGx3WlNrc1l5NXdjbTkwYjNSNWNHVXVZMjl1YzNSeWRXTjBiM0k5WXl4akxuQnliM1J2ZEhsd1pTNXVZVzFsUFZ3aVZtRnNhV1JoZEdsdmJrVnljbTl5WENJc1l5NXdjbTkwYjNSNWNHVXVjSEpsWm1sNFYybDBhRDFtZFc1amRHbHZiaWhsTEhRcGUybG1LRzUxYkd3aFBUMWxKaVlvWlQxbExuSmxjR3hoWTJVb0wzNHZaeXhjSW40d1hDSXBMbkpsY0d4aFkyVW9MMXhjTHk5bkxGd2lmakZjSWlrc2RHaHBjeTVrWVhSaFVHRjBhRDFjSWk5Y0lpdGxLM1JvYVhNdVpHRjBZVkJoZEdncExHNTFiR3doUFQxMEppWW9kRDEwTG5KbGNHeGhZMlVvTDM0dlp5eGNJbjR3WENJcExuSmxjR3hoWTJVb0wxeGNMeTluTEZ3aWZqRmNJaWtzZEdocGN5NXpZMmhsYldGUVlYUm9QVndpTDF3aUszUXJkR2hwY3k1elkyaGxiV0ZRWVhSb0tTeHVkV3hzSVQwOWRHaHBjeTV6ZFdKRmNuSnZjbk1wWm05eUtIWmhjaUJ5UFRBN2NqeDBhR2x6TG5OMVlrVnljbTl5Y3k1c1pXNW5kR2c3Y2lzcktYUm9hWE11YzNWaVJYSnliM0p6VzNKZExuQnlaV1pwZUZkcGRHZ29aU3gwS1R0eVpYUjFjbTRnZEdocGMzMDdkbUZ5SUVVOWUzMHNhajFtS0NrN2NtVjBkWEp1SUdvdVlXUmtUR0Z1WjNWaFoyVW9YQ0psYmkxbllsd2lMR2NwTEdvdWRIWTBQV29zYW4wcGZTeDdmVjBzTVRBd09sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Wm5WdVkzUnBiMjRnYmlobEtYdHlaWFIxY200Z1pTWW1aUzVmWDJWelRXOWtkV3hsUDJVNmUxd2laR1ZtWVhWc2RGd2lPbVY5ZlU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHlMRndpWDE5bGMwMXZaSFZzWlZ3aUxIdDJZV3gxWlRvaE1IMHBMSEl1VFdWemMyRm5aVVpoWTNSdmNuazlkbTlwWkNBd08zWmhjaUJ2UFdVb1hDSXVMMjFsYzNOaFoyVXRabUZqZEc5eWVTOU5aWE56WVdkbFJtRmpkRzl5ZVZ3aUtTeHBQVzRvYnlrN2NpNU5aWE56WVdkbFJtRmpkRzl5ZVQxcFcxd2laR1ZtWVhWc2RGd2lYWDBzZTF3aUxpOXRaWE56WVdkbExXWmhZM1J2Y25rdlRXVnpjMkZuWlVaaFkzUnZjbmxjSWpveE1ETjlYU3d4TURFNlcyWjFibU4wYVc5dUtHVXNkQ3h5S1h0Y0luVnpaU0J6ZEhKcFkzUmNJanRtZFc1amRHbHZiaUJ1S0dVcGUzSmxkSFZ5YmlCbEppWmxMbDlmWlhOTmIyUjFiR1UvWlRwN1hDSmtaV1poZFd4MFhDSTZaWDE5VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtISXNYQ0pmWDJWelRXOWtkV3hsWENJc2UzWmhiSFZsT2lFd2ZTa3NjaTVOWlhOellXZGxWSGx3WlQxeUxrMWxjM05oWjJVOWRtOXBaQ0F3TzNaaGNpQnZQV1VvWENKaVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF3Y205MGIzUjVjR1V0YjJaY0lpa3NhVDF1S0c4cExHRTlaU2hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpiR0Z6YzBOaGJHeERhR1ZqYTF3aUtTeHpQVzRvWVNrc2RUMWxLRndpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnlaV0YwWlVOc1lYTnpYQ0lwTEdNOWJpaDFLU3hzUFdVb1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12Y0c5emMybGliR1ZEYjI1emRISjFZM1J2Y2xKbGRIVnlibHdpS1N4bVBXNG9iQ2tzWkQxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJsdWFHVnlhWFJ6WENJcExIQTliaWhrS1N4b1BXVW9YQ0l1TGk5eVpWUklTVTVMVDJKcVpXTjBMMUpsZEdocGJtdFBZbXBsWTNRdWFuTmNJaWtzZVQxdUtHZ3BMRzA5Y2k1TlpYTnpZV2RsUFdaMWJtTjBhVzl1S0dVcGUxeHVablZ1WTNScGIyNGdkQ2hsTEhJc2JpeHZMR0VwZXlnd0xITmJYQ0prWldaaGRXeDBYQ0pkS1NoMGFHbHpMSFFwTzNaaGNpQjFQU2d3TEdaYlhDSmtaV1poZFd4MFhDSmRLU2gwYUdsekxDaDBMbDlmY0hKdmRHOWZYM3g4S0RBc2FWdGNJbVJsWm1GMWJIUmNJbDBwS0hRcEtTNWpZV3hzS0hSb2FYTXBLVHR5WlhSMWNtNGdkUzVwWkQxbExIVXVabkp2YlQxeUxIVXVkRzg5Yml4MUxuUjVjR1U5Ynl4MUxtSnZaSGs5WVN4MWZYSmxkSFZ5Ymlnd0xIQmJYQ0prWldaaGRXeDBYQ0pkS1NoMExHVXBMQ2d3TEdOYlhDSmtaV1poZFd4MFhDSmRLU2gwTEZ0N2EyVjVPbHdpWVhOelpYSjBTV1JsYm5ScGRIbGNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFwZTJsbUtDRmxmSHdoZENsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKdFpYTnpZV2RsTENCMGIydGxiaUIwYnlCaVpTQnlaVzF2ZG1Wa0xDQmhibVFnWVhOelpYSjBaV1JKWkdWdWRHbDBlU0J0ZFhOMElHSmxJSEJ5YjNacFpHVmtYQ0lwTzNaaGNpQnlQWFJvYVhNdVltOWtlVHR5WlhSMWNtNGdjaTVwWkZSdmEyVnVQVzUxYkd3c2NpNWhjM05sY25SbFpFbGtaVzUwYVhSNVBYUXNkR2hwY3k1aWIyUjVQWElzZEdocGMzMTlMSHRyWlhrNlhDSmhaR1JKWkZSdmEyVnVYQ0lzZG1Gc2RXVTZablZ1WTNScGIyNG9aU2w3YVdZb0lXVXBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2liV1Z6YzJGblpTd2dkRzlyWlc0Z2RHOGdZbVVnWVdSa1pXUXNJRzExYzNRZ1ltVWdjSEp2ZG1sa1pXUmNJaWs3ZG1GeUlIUTlkR2hwY3k1aWIyUjVPM0psZEhWeWJpQjBMbWxrVkc5clpXNDlaU3gwYUdsekxtSnZaSGs5ZEN4MGFHbHpmWDBzZTJ0bGVUcGNJbUZrWkVGalkyVnpjMVJ2YTJWdVhDSXNkbUZzZFdVNlpuVnVZM1JwYjI0b1pTbDdhV1lvSVdVcGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWJXVnpjMkZuWlN3Z2RHOXJaVzRnZEc4Z1ltVWdZV1JrWldRc0lHMTFjM1FnWW1VZ2NISnZkbWxrWldSY0lpazdkbUZ5SUhROWRHaHBjeTVpYjJSNU8zSmxkSFZ5YmlCMExtRmpZMlZ6YzFSdmEyVnVQV1VzZEdocGN5NWliMlI1UFhRc2RHaHBjMzE5WFNrc2RIMG9lVnRjSW1SbFptRjFiSFJjSWwwcE8zSXVUV1Z6YzJGblpWUjVjR1U5ZTBOU1JVRlVSVHBjSW1OeVpXRjBaVndpTEZKRlFVUTZYQ0p5WldGa1hDSXNWVkJFUVZSRk9sd2lkWEJrWVhSbFhDSXNSRVZNUlZSRk9sd2laR1ZzWlhSbFhDSXNVMVZDVTBOU1NVSkZPbHdpYzNWaWMyTnlhV0psWENJc1ZVNVRWVUpUUTFKSlFrVTZYQ0oxYm5OMVluTmpjbWxpWlZ3aUxGSkZVMUJQVGxORk9sd2ljbVZ6Y0c5dWMyVmNJaXhHVDFKWFFWSkVPbHdpWm05eWQyRnlaRndpTEVWWVJVTlZWRVU2WENKbGVHVmpkWFJsWENKOU8zSmJYQ0prWldaaGRXeDBYQ0pkUFcxOUxIdGNJaTR1TDNKbFZFaEpUa3RQWW1wbFkzUXZVbVYwYUdsdWEwOWlhbVZqZEM1cWMxd2lPakV3TkN4Y0ltSmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZaMlYwTFhCeWIzUnZkSGx3WlMxdlpsd2lPalVzWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZMnhoYzNORFlXeHNRMmhsWTJ0Y0lqb3hNQ3hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpjbVZoZEdWRGJHRnpjMXdpT2pFeExGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJsdWFHVnlhWFJ6WENJNk1USXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdmNHOXpjMmxpYkdWRGIyNXpkSEoxWTNSdmNsSmxkSFZ5Ymx3aU9qRXpmVjBzTVRBeU9sdG1kVzVqZEdsdmJpaGxMSFFzY2lsN1hDSjFjMlVnYzNSeWFXTjBYQ0k3Wm5WdVkzUnBiMjRnYmlobEtYdHlaWFIxY200Z1pTWW1aUzVmWDJWelRXOWtkV3hsUDJVNmUxd2laR1ZtWVhWc2RGd2lPbVY5ZldaMWJtTjBhVzl1SUc4b1pTbDdkbUZ5SUhROUtEQXNkVnRjSW1SbFptRjFiSFJjSWwwcEtHVXBMbkpsWkhWalpTaG1kVzVqZEdsdmJpaDBMSElwZTNKbGRIVnliaUIwVzJWYmNsMWRQWElzZEgwc2UzMHBPM0psZEhWeWJpZ3dMR0ZiWENKa1pXWmhkV3gwWENKZEtTZ29NQ3gxVzF3aVpHVm1ZWFZzZEZ3aVhTa29aU2t1Y21Wa2RXTmxLR1oxYm1OMGFXOXVLSFFzY2lsN2NtVjBkWEp1SUhSYmNsMDlaVnR5WFN4MGZTeG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGdkRnRsWFgwcEtYMVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvY2l4Y0lsOWZaWE5OYjJSMWJHVmNJaXg3ZG1Gc2RXVTZJVEI5S1N4eUxsVlFSRUZVUlY5UFVFVlNRVlJKVDA0OWNpNUJWRlJTU1VKVlZFVmZWRmxRUlQxeUxsSkZRVk5QVGw5UVNGSkJVMFU5Y2k1U1JWTlFUMDVUUlY5RFQwUkZQWEl1UlhobFkzVjBaVTFsYzNOaFoyVkNiMlI1UFhJdVVtVnpjRzl1YzJWTlpYTnpZV2RsUW05a2VUMXlMa1p2Y25kaGNtUk5aWE56WVdkbFFtOWtlVDF5TGxWd1pHRjBaVTFsYzNOaFoyVkNiMlI1UFhJdVJHVnNaWFJsVFdWemMyRm5aVUp2WkhrOWNpNVNaV0ZrVFdWemMyRm5aVUp2WkhrOWNpNURjbVZoZEdWTlpYTnpZV2RsUW05a2VUMXlMazFsYzNOaFoyVkNiMlI1UFhadmFXUWdNRHQyWVhJZ2FUMWxLRndpWW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5bWNtVmxlbVZjSWlrc1lUMXVLR2twTEhNOVpTaGNJbUpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5dlltcGxZM1F2YTJWNWMxd2lLU3gxUFc0b2N5a3NZejFsS0Z3aVltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOW5aWFF0Y0hKdmRHOTBlWEJsTFc5bVhDSXBMR3c5YmloaktTeG1QV1VvWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZMnhoYzNORFlXeHNRMmhsWTJ0Y0lpa3NaRDF1S0dZcExIQTlaU2hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpjbVZoZEdWRGJHRnpjMXdpS1N4b1BXNG9jQ2tzZVQxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDNCdmMzTnBZbXhsUTI5dWMzUnlkV04wYjNKU1pYUjFjbTVjSWlrc2JUMXVLSGtwTEhZOVpTaGNJbUpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5cGJtaGxjbWwwYzF3aUtTeGZQVzRvZGlrN2NpNUZiblZ0UFc4N2RtRnlJR0k5WlNoY0lpNHVMM0psVkVoSlRrdFBZbXBsWTNRdlVtVjBhR2x1YTA5aWFtVmpkQzVxYzF3aUtTeG5QVzRvWWlrc1JUMXlMazFsYzNOaFoyVkNiMlI1UFdaMWJtTjBhVzl1S0dVcGUyWjFibU4wYVc5dUlIUW9aU3h5TEc0c2J5eHBLWHNvTUN4a1cxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5eDBLVHQyWVhJZ1lUMG9NQ3h0VzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3l3b2RDNWZYM0J5YjNSdlgxOThmQ2d3TEd4YlhDSmtaV1poZFd4MFhDSmRLU2gwS1NrdVkyRnNiQ2gwYUdsektTazdjbVYwZFhKdUlHRXVhV1JVYjJ0bGJqMWxMR0V1WVdOalpYTnpWRzlyWlc0OWNpeGhMbkpsYzI5MWNtTmxQVzRzWVM1elkyaGxiV0U5Ynl4aExtRnpjMlZ5ZEdWa1NXUmxiblJwZEhrOWFTeGhmWEpsZEhWeWJpZ3dMRjliWENKa1pXWmhkV3gwWENKZEtTaDBMR1VwTENnd0xHaGJYQ0prWldaaGRXeDBYQ0pkS1NoMExGdDdhMlY1T2x3aVlXUmtWbWxoWENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlNsN2FXWW9JV1VwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpZG1saElGVlNUQ0IwYnlCaVpTQmhaR1JsWkN3Z2JYVnpkQ0JpWlNCd2NtOTJhV1JsWkZ3aUtUdHlaWFIxY200Z2RHaHBjeTUyYVdFOVpTeDBhR2x6ZlgxZEtTeDBmU2huVzF3aVpHVm1ZWFZzZEZ3aVhTa3NhajBvY2k1RGNtVmhkR1ZOWlhOellXZGxRbTlrZVQxbWRXNWpkR2x2YmlobEtYdG1kVzVqZEdsdmJpQjBLR1VzY2l4dUxHOHNhU3hoTEhNcGUybG1LQ2d3TEdSYlhDSmtaV1poZFd4MFhDSmRLU2gwYUdsekxIUXBMQ0ZsS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWxSb1pTQjJZV3gxWlNCd1lYSmhiV1YwWlhJZ2FYTWdiblZzYkZ3aUtUdDJZWElnZFQwb01DeHRXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXdvZEM1ZlgzQnliM1J2WDE5OGZDZ3dMR3hiWENKa1pXWmhkV3gwWENKZEtTaDBLU2t1WTJGc2JDaDBhR2x6TEc0c2J5eHBMR0VzY3l4aExITXBLVHR5WlhSMWNtNGdkUzUyWVd4MVpUMWxMSEltSmloMUxuQnZiR2xqZVQxeUtTeDFmWEpsZEhWeWJpZ3dMRjliWENKa1pXWmhkV3gwWENKZEtTaDBMR1VwTEhSOUtFVXBMSEl1VW1WaFpFMWxjM05oWjJWQ2IyUjVQV1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb1pTeHlMRzRzYnl4cExHRXNjeXgxS1hzb01DeGtXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXgwS1R0MllYSWdZejBvTUN4dFcxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5d29kQzVmWDNCeWIzUnZYMTk4ZkNnd0xHeGJYQ0prWldaaGRXeDBYQ0pkS1NoMEtTa3VZMkZzYkNoMGFHbHpMR1VzY2l4dUxHOHNhU2twTzNKbGRIVnliaUJoSmlZb1l5NWhkSFJ5YVdKMWRHVTlZU2tzY3lZbUtHTXVZM0pwZEdWeWFXRlRlVzUwWVhnOWN5a3NkU1ltS0dNdVkzSnBkR1Z5YVdFOWRTa3NZMzF5WlhSMWNtNG9NQ3hmVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ3hsS1N4MGZTaEZLU3h5TGtSbGJHVjBaVTFsYzNOaFoyVkNiMlI1UFdaMWJtTjBhVzl1S0dVcGUyWjFibU4wYVc5dUlIUW9aU3h5TEc0c2J5eHBMR0VwZTJsbUtDZ3dMR1JiWENKa1pXWmhkV3gwWENKZEtTaDBhR2x6TEhRcExHNGdhVzV6ZEdGdVkyVnZaaUJCY25KaGVTbDdkbUZ5SUhNOUtEQXNiVnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zS0hRdVgxOXdjbTkwYjE5ZmZId29NQ3hzVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ2twTG1OaGJHd29kR2hwY3l4bExISXNiblZzYkN4dkxHa3BLVHR6TG1Ob2FXeGtjbVZ1VW1WemIzVnlZMlZ6UFc1OVpXeHpaU0IyWVhJZ2N6MG9NQ3h0VzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3l3b2RDNWZYM0J5YjNSdlgxOThmQ2d3TEd4YlhDSmtaV1poZFd4MFhDSmRLU2gwS1NrdVkyRnNiQ2gwYUdsekxHVXNjaXh1TEc4c2FTa3BPM0psZEhWeWJpQmhKaVlvY3k1aGRIUnlhV0oxZEdVOVlTa3NLREFzYlZ0Y0ltUmxabUYxYkhSY0lsMHBLSE1wZlhKbGRIVnliaWd3TEY5YlhDSmtaV1poZFd4MFhDSmRLU2gwTEdVcExIUjlLRVVwTEhJdVZYQmtZWFJsVFdWemMyRm5aVUp2WkhrOVpuVnVZM1JwYjI0b1pTbDdablZ1WTNScGIyNGdkQ2hsTEhJc2JpeHZMR2tzWVN4ektYc29NQ3hrVzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3l4MEtUdDJZWElnZFQwb01DeHRXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXdvZEM1ZlgzQnliM1J2WDE5OGZDZ3dMR3hiWENKa1pXWmhkV3gwWENKZEtTaDBLU2t1WTJGc2JDaDBhR2x6TEdVc2NpeHVMRzhzYVNrcE8zSmxkSFZ5YmlCMUxtRjBkSEpwWW5WMFpUMWhMSFV1ZG1Gc2RXVTljeXgxZlhKbGRIVnliaWd3TEY5YlhDSmtaV1poZFd4MFhDSmRLU2gwTEdVcExDZ3dMR2hiWENKa1pXWmhkV3gwWENKZEtTaDBMRnQ3YTJWNU9sd2lZV1JrUVhSMGNtbGlkWFJsVkhsd1pWd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXBlMlVtSmloMGFHbHpMbUYwZEhKcFluVjBaVlI1Y0dVOVpTbDlmU3g3YTJWNU9sd2lZV1JrVDNCbGNtRjBhVzl1WENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlNsN1pTWW1LSFJvYVhNdWIzQmxjbUYwYVc5dVBXVXBmWDFkS1N4MGZTaEZLU3h5TGtadmNuZGhjbVJOWlhOellXZGxRbTlrZVQxbWRXNWpkR2x2YmlobEtYdG1kVzVqZEdsdmJpQjBLR1VzY2l4dUxHOHNhU3hoS1hzb01DeGtXMXdpWkdWbVlYVnNkRndpWFNrb2RHaHBjeXgwS1R0MllYSWdjejBvTUN4dFcxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5d29kQzVmWDNCeWIzUnZYMTk4ZkNnd0xHeGJYQ0prWldaaGRXeDBYQ0pkS1NoMEtTa3VZMkZzYkNoMGFHbHpMR1VzY2l4dUxHOHNhU2twTzNKbGRIVnliaUJ6TG0xbGMzTmhaMlU5WVN4emZYSmxkSFZ5Ymlnd0xGOWJYQ0prWldaaGRXeDBYQ0pkS1NoMExHVXBMSFI5S0VVcExISXVVbVZ6Y0c5dWMyVk5aWE56WVdkbFFtOWtlVDFtZFc1amRHbHZiaWhsS1h0bWRXNWpkR2x2YmlCMEtHVXNjaXh1TEc4c2FTbDdLREFzWkZ0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc2RDazdkbUZ5SUdFOUtEQXNiVnRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zS0hRdVgxOXdjbTkwYjE5ZmZId29NQ3hzVzF3aVpHVm1ZWFZzZEZ3aVhTa29kQ2twTG1OaGJHd29kR2hwY3l4bExISXNiaWtwTzNKbGRIVnliaUJ2SmlZb1lTNWpiMlJsUFc4c1lTNWtaWE5qY21sd2RHbHZiajFxVzI5ZEtTeHBKaVlvWVM1MllXeDFaVDFwS1N4aGZYSmxkSFZ5Ymlnd0xGOWJYQ0prWldaaGRXeDBYQ0pkS1NoMExHVXBMSFI5S0VVcExISXVSWGhsWTNWMFpVMWxjM05oWjJWQ2IyUjVQV1oxYm1OMGFXOXVLR1VwZTJaMWJtTjBhVzl1SUhRb1pTeHlMRzRzYnl4cExHRXNjeWw3S0RBc1pGdGNJbVJsWm1GMWJIUmNJbDBwS0hSb2FYTXNkQ2s3ZG1GeUlIVTlLREFzYlZ0Y0ltUmxabUYxYkhSY0lsMHBLSFJvYVhNc0tIUXVYMTl3Y205MGIxOWZmSHdvTUN4c1cxd2laR1ZtWVhWc2RGd2lYU2tvZENrcExtTmhiR3dvZEdocGN5eGxMSElzYml4dkxHa3BLVHR5WlhSMWNtNGdkUzV0WlhSb2IyUTlZU3h6SmlZb2N5QnBibk4wWVc1alpXOW1JRUZ5Y21GNVAzVXVjR0Z5WVcxelBYTTZkUzV3WVhKaGJYTTlXM05kS1N4MWZYSmxkSFZ5Ymlnd0xGOWJYQ0prWldaaGRXeDBYQ0pkS1NoMExHVXBMSFI5S0VVcExISXVVa1ZUVUU5T1UwVmZRMDlFUlQxdktIc3hNREE2WENJeE1EQmNJaXd4TURFNlhDSXhNREZjSWl3eU1EQTZYQ0l5TURCY0lpd3lNREU2WENJeU1ERmNJaXd5TURJNlhDSXlNREpjSWl3eU1ETTZYQ0l5TUROY0lpd3lNRFE2WENJeU1EUmNJaXd5TURVNlhDSXlNRFZjSWl3eU1EWTZYQ0l5TURaY0lpd3pNREE2WENJek1EQmNJaXd6TURFNlhDSXpNREZjSWl3ek1ESTZYQ0l6TURKY0lpd3pNRE02WENJek1ETmNJaXd6TURRNlhDSXpNRFJjSWl3ek1EVTZYQ0l6TURWY0lpd3pNRGM2WENJek1EZGNJaXcwTURBNlhDSTBNREJjSWl3ME1ERTZYQ0kwTURGY0lpdzBNREk2WENJME1ESmNJaXcwTURNNlhDSTBNRE5jSWl3ME1EUTZYQ0kwTURSY0lpdzBNRFU2WENJME1EVmNJaXcwTURZNlhDSTBNRFpjSWl3ME1EYzZYQ0kwTURkY0lpdzBNRGc2WENJME1EaGNJaXcwTURrNlhDSTBNRGxjSWl3ME1UQTZYQ0kwTVRCY0lpdzBNVEU2WENJME1URmNJaXcwTVRJNlhDSTBNVEpjSWl3ME1UTTZYQ0kwTVROY0lpdzBNVFE2WENJME1UUmNJaXcwTVRVNlhDSTBNVFZjSWl3ME1UWTZYQ0kwTVRaY0lpdzBNVGM2WENJME1UZGNJaXcwTWpZNlhDSTBNalpjSWl3MU1EQTZYQ0kxTURCY0lpdzFNREU2WENJMU1ERmNJaXcxTURJNlhDSTFNREpjSWl3MU1ETTZYQ0kxTUROY0lpdzFNRFE2WENJMU1EUmNJaXcxTURVNlhDSTFNRFZjSW4wcExISXVVa1ZCVTA5T1gxQklVa0ZUUlQxdktIc3hNREE2WENKRGIyNTBhVzUxWlZ3aUxERXdNVHBjSWxOM2FYUmphR2x1WnlCUWNtOTBiMk52YkhOY0lpd3lNREE2WENKUFMxd2lMREl3TVRwY0lrTnlaV0YwWldSY0lpd3lNREk2WENKQlkyTmxjSFJsWkZ3aUxESXdNenBjSWs1dmJpMUJkWFJvYjNKcGRHRjBhWFpsSUVsdVptOXliV0YwYVc5dVhDSXNNakEwT2x3aVRtOGdRMjl1ZEdWdWRGd2lMREl3TlRwY0lsSmxjMlYwSUVOdmJuUmxiblJjSWl3eU1EWTZYQ0pRWVhKMGFXRnNJRU52Ym5SbGJuUmNJaXd6TURBNlhDSk5kV3gwYVhCc1pTQkRhRzlwWTJWelhDSXNNekF4T2x3aVRXOTJaV1FnVUdWeWJXRnVaVzUwYkhsY0lpd3pNREk2WENKR2IzVnVaRndpTERNd016cGNJbE5sWlNCUGRHaGxjbHdpTERNd05EcGNJazV2ZENCTmIyUnBabWxsWkZ3aUxETXdOVHBjSWxWelpTQlFjbTk0ZVZ3aUxETXdOenBjSWxSbGJYQnZjbUZ5ZVNCU1pXUnBjbVZqZEZ3aUxEUXdNRHBjSWtKaFpDQlNaWEYxWlhOMFhDSXNOREF4T2x3aVZXNWhkWFJvYjNKcGVtVmtYQ0lzTkRBeU9sd2lVR0Y1YldWdWRDQlNaWEYxYVhKbFpGd2lMRFF3TXpwY0lrWnZjbUpwWkdSbGJsd2lMRFF3TkRwY0lrNXZkQ0JHYjNWdVpGd2lMRFF3TlRwY0lrMWxkR2h2WkNCT2IzUWdRV3hzYjNkbFpGd2lMRFF3TmpwY0lrNXZkQ0JCWTJObGNIUmhZbXhsWENJc05EQTNPbHdpVUhKdmVIa2dRWFYwYUdWdWRHbGpZWFJwYjI0Z1VtVnhkV2x5WldSY0lpdzBNRGc2WENKU1pYRjFaWE4wSUZScGJXVnZkWFJjSWl3ME1EazZYQ0pEYjI1bWJHbGpkRndpTERReE1EcGNJa2R2Ym1WY0lpdzBNVEU2WENKTVpXNW5kR2dnVW1WeGRXbHlaV1JjSWl3ME1USTZYQ0pRY21WamIyNWthWFJwYjI0Z1JtRnBiR1ZrWENJc05ERXpPbHdpVUdGNWJHOWhaQ0JVYjI4Z1RHRnlaMlZjSWl3ME1UUTZYQ0pTWlhGMVpYTjBMVlZTU1NCVWIyOGdURzl1WjF3aUxEUXhOVHBjSWxWdWMzVndjRzl5ZEdWa0lFMWxaR2xoSUZSNWNHVmNJaXcwTVRZNlhDSlNZVzVuWlNCT2IzUWdVMkYwYVhObWFXRmliR1ZjSWl3ME1UYzZYQ0pGZUhCbFkzUmhkR2x2YmlCR1lXbHNaV1JjSWl3ME1qWTZYQ0pWY0dkeVlXUmxJRkpsY1hWcGNtVmtYQ0lzTlRBd09sd2lTVzUwWlhKdVlXd2dVMlZ5ZG1WeUlFVnljbTl5WENJc05UQXhPbHdpVG05MElFbHRjR3hsYldWdWRHVmtYQ0lzTlRBeU9sd2lRbUZrSUVkaGRHVjNZWGxjSWl3MU1ETTZYQ0pUWlhKMmFXTmxJRlZ1WVhaaGFXeGhZbXhsWENJc05UQTBPbHdpUjJGMFpYZGhlU0JVYVcxbExXOTFkRndpTERVd05UcGNJa2hVVkZBZ1ZtVnljMmx2YmlCT2IzUWdVM1Z3Y0c5eWRHVmtYQ0o5S1NrN2NpNUJWRlJTU1VKVlZFVmZWRmxRUlQxdktIdFBRa3BGUTFRNlhDSlBRa3BGUTFSY0lpeEJVbEpCV1RwY0lrRlNVa0ZaWENKOUtTeHlMbFZRUkVGVVJWOVBVRVZTUVZSSlQwNDlieWg3UVVSRU9sd2lRVVJFWENJc1VrVk5UMVpGT2x3aVVrVk5UMVpGWENKOUtUdHlXMXdpWkdWbVlYVnNkRndpWFQxRmZTeDdYQ0l1TGk5eVpWUklTVTVMVDJKcVpXTjBMMUpsZEdocGJtdFBZbXBsWTNRdWFuTmNJam94TURRc1hDSmlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMlp5WldWNlpWd2lPalFzWENKaVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyZGxkQzF3Y205MGIzUjVjR1V0YjJaY0lqbzFMRndpWW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5clpYbHpYQ0k2Tml4Y0ltSmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlqYkdGemMwTmhiR3hEYUdWamExd2lPakV3TEZ3aVltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMMk55WldGMFpVTnNZWE56WENJNk1URXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdmFXNW9aWEpwZEhOY0lqb3hNaXhjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OXdiM056YVdKc1pVTnZibk4wY25WamRHOXlVbVYwZFhKdVhDSTZNVE45WFN3eE1ETTZXMloxYm1OMGFXOXVLR1VzZEN4eUtYdGNJblZ6WlNCemRISnBZM1JjSWp0bWRXNWpkR2x2YmlCdUtHVXBlM0psZEhWeWJpQmxKaVpsTGw5ZlpYTk5iMlIxYkdVL1pUcDdYQ0prWldaaGRXeDBYQ0k2WlgxOVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSElzWENKZlgyVnpUVzlrZFd4bFhDSXNlM1poYkhWbE9pRXdmU2tzY2k1SlpFZGxibVZ5WVhSdmNqMTJiMmxrSURBN2RtRnlJRzg5WlNoY0ltSmhZbVZzTFhKMWJuUnBiV1V2Y21WblpXNWxjbUYwYjNKY0lpa3NhVDF1S0c4cExHRTlaU2hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpiR0Z6YzBOaGJHeERhR1ZqYTF3aUtTeHpQVzRvWVNrc2RUMWxLRndpWW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnlaV0YwWlVOc1lYTnpYQ0lwTEdNOWJpaDFLU3hzUFdVb1hDSXVMMDFsYzNOaFoyVXVhbk5jSWlrc1pqMXVLR3dwTEdROVpTaGNJaTR2VFdWemMyRm5aVUp2WkhrdWFuTmNJaWtzY0QxbWRXNWpkR2x2YmlncGUyWjFibU4wYVc5dUlHVW9LWHNvTUN4elcxd2laR1ZtWVhWc2RGd2lYU2tvZEdocGN5eGxLU3gwYUdsekxtMTVSMlZ1WlhKaGRHOXlQU2h1WlhjZ2FDa3VhV1JOWVd0bGNpZ3BmWEpsZEhWeWJpZ3dMR05iWENKa1pXWmhkV3gwWENKZEtTaGxMRnQ3YTJWNU9sd2lZM0psWVhSbFEzSmxZWFJsVFdWemMyRm5aVkpsY1hWbGMzUmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFzY2l4dUtYdHBaaWdoWlh4OElYUjhmQ0Z5S1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW1aeWIyMHNJSFJ2TENCaGJtUWdkbUZzZFdVZ2IyWWdiMkpxWldOMElIUnZJR0psSUdOeVpXRjBaV1FnVFZWVFZDQmlaU0J6Y0dWamFXWnBaV1JjSWlrN2RtRnlJRzg5ZEdocGN5NXRlVWRsYm1WeVlYUnZjaTV1WlhoMEtDa3VkbUZzZFdVc2FUMXVaWGNnWkM1RGNtVmhkR1ZOWlhOellXZGxRbTlrZVNoeUxHNHNLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3BMR0U5Ym1WM0lHWmJYQ0prWldaaGRXeDBYQ0pkS0c4c1pTeDBMR3d1VFdWemMyRm5aVlI1Y0dVdVExSkZRVlJGTEdrcE8zSmxkSFZ5YmlCaGZYMHNlMnRsZVRwY0ltTnlaV0YwWlVadmNuZGhjbVJOWlhOellXZGxVbVZ4ZFdWemRGd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXNkQ3h5S1h0cFppZ2haWHg4SVhSOGZDRnlLWFJvY205M0lHNWxkeUJGY25KdmNpaGNJbVp5YjIwc0lIUnZMQ0JoYm1RZ2JXVnpjMkZuWlNCMGJ5Qm1iM0ozWVhKa0lFMVZVMVFnWW1VZ2MzQmxZMmxtYVdWa1hDSXBPM1poY2lCdVBYUm9hWE11YlhsSFpXNWxjbUYwYjNJdWJtVjRkQ2dwTG5aaGJIVmxMRzg5Ym1WM0lHUXVSbTl5ZDJGeVpFMWxjM05oWjJWQ2IyUjVLQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMSElwTEdrOWJtVjNJR1piWENKa1pXWmhkV3gwWENKZEtHNHNaU3gwTEd3dVRXVnpjMkZuWlZSNWNHVXVSazlTVjBGU1JDeHZLVHR5WlhSMWNtNGdhWDE5TEh0clpYazZYQ0pqY21WaGRHVkVaV3hsZEdWTlpYTnpZV2RsVW1WeGRXVnpkRndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VzZEN4eUxHNHBlMmxtS0NGbGZId2hkQ2wwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0ptY205dElHRnVaQ0IwYnlCd1lYSmhiV1YwWlhKeklFMVZVMVFnWW1VZ2MzQmxZMmxtYVdWa1hDSXBPM1poY2lCdlBYUm9hWE11YlhsSFpXNWxjbUYwYjNJdWJtVjRkQ2dwTG5aaGJIVmxMR2s5Ym1WM0lHUXVSR1ZzWlhSbFRXVnpjMkZuWlVKdlpIa29LSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3NjaXh1TENoMmIybGtJREFwTENoMmIybGtJREFwS1N4aFBXNWxkeUJtVzF3aVpHVm1ZWFZzZEZ3aVhTaHZMR1VzZEN4c0xrMWxjM05oWjJWVWVYQmxMa1JGVEVWVVJTeHBLVHR5WlhSMWNtNGdZWDE5TEh0clpYazZYQ0pqY21WaGRHVlZjR1JoZEdWTlpYTnpZV2RsVW1WeGRXVnpkRndpTEhaaGJIVmxPbVoxYm1OMGFXOXVLR1VzZEN4eUxHNHNieWw3YVdZb0lXVjhmQ0YwZkh3aGNpbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSm1jbTl0TENCaGJtUWdkRzhnWVc1a0lIWmhiSFZsSUUxVlUxUWdZbVVnYzNCbFkybG1hV1ZrWENJcE8zWmhjaUJwUFhSb2FYTXViWGxIWlc1bGNtRjBiM0l1Ym1WNGRDZ3BMblpoYkhWbExHRTlibVYzSUdRdVZYQmtZWFJsVFdWemMyRm5aVUp2Wkhrb0tIWnZhV1FnTUNrc0tIWnZhV1FnTUNrc2Jpd29kbTlwWkNBd0tTd29kbTlwWkNBd0tTeHZMSElwTEhNOWJtVjNJR1piWENKa1pXWmhkV3gwWENKZEtHa3NaU3gwTEd3dVRXVnpjMkZuWlZSNWNHVXVWVkJFUVZSRkxHRXBPM0psZEhWeWJpQnpmWDBzZTJ0bGVUcGNJbU55WldGMFpWSmxZV1JOWlhOellXZGxVbVZ4ZFdWemRGd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXNkQ3h5TEc0cGUybG1LQ0ZsZkh3aGRIeDhJWElwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpWm5KdmJTd2dkRzhnWVc1a0lIUm9aU0J5WlhOdmRYSmpaU0IwYnlCeVpXRmtJR1p5YjIwZ1RWVlRWQ0JpWlNCemNHVmphV1pwWldSY0lpazdkbUZ5SUc4OWRHaHBjeTV0ZVVkbGJtVnlZWFJ2Y2k1dVpYaDBLQ2t1ZG1Gc2RXVXNhVDF1WlhjZ1pDNVNaV0ZrVFdWemMyRm5aVUp2Wkhrb0tIWnZhV1FnTUNrc0tIWnZhV1FnTUNrc2Npd29kbTlwWkNBd0tTd29kbTlwWkNBd0tTeHVMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBLU3hoUFc1bGR5Qm1XMXdpWkdWbVlYVnNkRndpWFNodkxHVXNkQ3hzTGsxbGMzTmhaMlZVZVhCbExsSkZRVVFzYVNrN2NtVjBkWEp1SUdGOWZTeDdhMlY1T2x3aVkzSmxZWFJsVTNWaWMyTnlhV0psVFdWemMyRm5aVkpsY1hWbGMzUmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFzY2lsN2FXWW9JV1Y4ZkNGMGZId2hjaWwwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0ptY205dExDQjBieUJoYm1RZ2RHaGxJSEpsYzI5MWNtTmxJSFJ2SUhOMVluTmpjbWxpWlNCMGJ5Qk5WVk5VSUdKbElITndaV05wWm1sbFpGd2lLVHQyWVhJZ2JqMTBhR2x6TG0xNVIyVnVaWEpoZEc5eUxtNWxlSFFvS1M1MllXeDFaU3h2UFc1bGR5QmtMazFsYzNOaFoyVkNiMlI1S0NoMmIybGtJREFwTENoMmIybGtJREFwTEhJc0tIWnZhV1FnTUNrc0tIWnZhV1FnTUNrcExHazlibVYzSUdaYlhDSmtaV1poZFd4MFhDSmRLRzRzWlN4MExHd3VUV1Z6YzJGblpWUjVjR1V1VTFWQ1UwTlNTVUpGTEc4cE8zSmxkSFZ5YmlCcGZYMHNlMnRsZVRwY0ltTnlaV0YwWlZWdWMzVmljMk55YVdKbFRXVnpjMkZuWlZKbGNYVmxjM1JjSWl4MllXeDFaVHBtZFc1amRHbHZiaWhsTEhRc2NpbDdhV1lvSVdWOGZDRjBmSHdoY2lsMGFISnZkeUJ1WlhjZ1JYSnliM0lvWENKbWNtOXRMQ0IwYnlCaGJtUWdkR2hsSUhKbGMyOTFjbU5sSUhSdklITjFZbk5qY21saVpTQjBieUJOVlZOVUlHSmxJSE53WldOcFptbGxaRndpS1R0MllYSWdiajEwYUdsekxtMTVSMlZ1WlhKaGRHOXlMbTVsZUhRb0tTNTJZV3gxWlN4dlBXNWxkeUJrTGsxbGMzTmhaMlZDYjJSNUtDaDJiMmxrSURBcExDaDJiMmxrSURBcExISXNLSFp2YVdRZ01Da3NLSFp2YVdRZ01Da3BMR2s5Ym1WM0lHWmJYQ0prWldaaGRXeDBYQ0pkS0c0c1pTeDBMR3d1VFdWemMyRm5aVlI1Y0dVdVZVNVRWVUpUUTFKSlFrVXNieWs3Y21WMGRYSnVJR2w5ZlN4N2EyVjVPbHdpWTNKbFlYUmxSWGhsWTNWMFpVMWxjM05oWjJWU1pYRjFaWE4wWENJc2RtRnNkV1U2Wm5WdVkzUnBiMjRvWlN4MExISXNiaWw3YVdZb0lXVjhmQ0YwZkh3aGNpbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSm1jbTl0TENCMGJ5QmhibVFnZEdobElHMWxkR2h2WkNCMGJ5QmxlR1ZqZFhSbElFMVZVMVFnWW1VZ2MzQmxZMmxtYVdWa1hDSXBPM1poY2lCdlBYUm9hWE11YlhsSFpXNWxjbUYwYjNJdWJtVjRkQ2dwTG5aaGJIVmxMR2s5Ym1WM0lHUXVSWGhsWTNWMFpVMWxjM05oWjJWQ2IyUjVLQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMQ2gyYjJsa0lEQXBMSElzYmlrc1lUMXVaWGNnWmx0Y0ltUmxabUYxYkhSY0lsMG9ieXhsTEhRc2JDNU5aWE56WVdkbFZIbHdaUzVGV0VWRFZWUkZMR2twTzNKbGRIVnliaUJoZlgwc2UydGxlVHBjSW1OeVpXRjBaVTFsYzNOaFoyVlNaWE53YjI1elpWd2lMSFpoYkhWbE9tWjFibU4wYVc5dUtHVXNkQ3h5TEc0cGUybG1LQ0YwS1hSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSW5KbGMzQnZibk5sSUVOdlpHVWdUVlZUVkNCaVpTQnpjR1ZqYVdacFpXUmNJaWs3ZG1GeUlHODlibVYzSUdRdVVtVnpjRzl1YzJWTlpYTnpZV2RsUW05a2VTZ29kbTlwWkNBd0tTd29kbTlwWkNBd0tTd29kbTlwWkNBd0tTeDBMSElzYmlrN2NtVjBkWEp1SUc1bGR5Qm1XMXdpWkdWbVlYVnNkRndpWFNobExtbGtMR1V1ZEc4c1pTNW1jbTl0TEd3dVRXVnpjMkZuWlZSNWNHVXVVa1ZUVUU5T1UwVXNieWw5ZlN4N2EyVjVPbHdpWjJWdVpYSmhkR1ZOWlhOellXZGxVbVZ6Y0c5dWMyVmNJaXgyWVd4MVpUcG1kVzVqZEdsdmJpaGxMSFFzY2lsN2FXWW9JV1Y4ZkNGMEtYUm9jbTkzSUc1bGR5QkZjbkp2Y2loY0ltMWxjM05oWjJVZ1lXNWtJSEpsYzNCdmJuTmxJR052WkdVZ1RWVlRWQ0JpWlNCemNHVmphV1pwWldSY0lpazdkbUZ5SUc0OVpTNWliMlI1TEc4OWJpNXBaRlJ2YTJWdUxHazliaTVoWTJObGMzTlViMnRsYml4aFBXNHVjbVZ6YjNWeVkyVXNjejF1WlhjZ1pDNVNaWE53YjI1elpVMWxjM05oWjJWQ2IyUjVLRzhzYVN4aExIUXNjaWtzZFQxMGFHbHpMbTE1UjJWdVpYSmhkRzl5TG01bGVIUW9LUzUyWVd4MVpUdHlaWFIxY200Z2JtVjNJR1piWENKa1pXWmhkV3gwWENKZEtIVXNaUzUwYnl4bExtWnliMjBzYkM1TlpYTnpZV2RsVkhsd1pTNVNSVk5RVDA1VFJTeHpLWDE5WFNrc1pYMG9LU3hvUFhJdVNXUkhaVzVsY21GMGIzSTlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0NsN0tEQXNjMXRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zWlNsOWNtVjBkWEp1S0RBc1kxdGNJbVJsWm1GMWJIUmNJbDBwS0dVc1czdHJaWGs2WENKcFpFMWhhMlZ5WENJc2RtRnNkV1U2YVZ0Y0ltUmxabUYxYkhSY0lsMHViV0Z5YXlobWRXNWpkR2x2YmlCMEtDbDdkbUZ5SUdVN2NtVjBkWEp1SUdsYlhDSmtaV1poZFd4MFhDSmRMbmR5WVhBb1puVnVZM1JwYjI0b2RDbDdabTl5S0RzN0tYTjNhWFJqYUNoMExuQnlaWFk5ZEM1dVpYaDBLWHRqWVhObElEQTZaVDB4TzJOaGMyVWdNVHBwWmlnaEtHVThNV1UyS1NsN2RDNXVaWGgwUFRZN1luSmxZV3Q5Y21WMGRYSnVJSFF1Ym1WNGREMDBMR1VyS3p0allYTmxJRFE2ZEM1dVpYaDBQVEU3WW5KbFlXczdZMkZ6WlNBMk9tTmhjMlZjSW1WdVpGd2lPbkpsZEhWeWJpQjBMbk4wYjNBb0tYMTlMSFFzZEdocGN5bDlLWDFkS1N4bGZTZ3BPM0piWENKa1pXWmhkV3gwWENKZFBYQjlMSHRjSWk0dlRXVnpjMkZuWlM1cWMxd2lPakV3TVN4Y0lpNHZUV1Z6YzJGblpVSnZaSGt1YW5OY0lqb3hNRElzWENKaVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZMnhoYzNORFlXeHNRMmhsWTJ0Y0lqb3hNQ3hjSW1KaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpjbVZoZEdWRGJHRnpjMXdpT2pFeExGd2lZbUZpWld3dGNuVnVkR2x0WlM5eVpXZGxibVZ5WVhSdmNsd2lPakUxZlYwc01UQTBPbHRtZFc1amRHbHZiaWhsTEhRc2NpbDdYQ0oxYzJVZ2MzUnlhV04wWENJN1puVnVZM1JwYjI0Z2JpaGxLWHR5WlhSMWNtNGdaU1ltWlM1ZlgyVnpUVzlrZFd4bFAyVTZlMXdpWkdWbVlYVnNkRndpT21WOWZVOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h5TEZ3aVgxOWxjMDF2WkhWc1pWd2lMSHQyWVd4MVpUb2hNSDBwTEhJdVVtVjBhR2x1YTA5aWFtVmpkRDEyYjJsa0lEQTdkbUZ5SUc4OVpTaGNJbUpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5cWMyOXVMM04wY21sdVoybG1lVndpS1N4cFBXNG9ieWtzWVQxbEtGd2lZbUZpWld3dGNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOc1lYTnpRMkZzYkVOb1pXTnJYQ0lwTEhNOWJpaGhLU3gxUFdVb1hDSmlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNOY0lpa3NZejF1S0hVcExHdzlaU2hjSW5SMk5Gd2lLU3htUFc0b2JDa3NaRDF5TGxKbGRHaHBibXRQWW1wbFkzUTlablZ1WTNScGIyNG9LWHRtZFc1amRHbHZiaUJsS0NsN0tEQXNjMXRjSW1SbFptRjFiSFJjSWwwcEtIUm9hWE1zWlNsOWNtVjBkWEp1S0RBc1kxdGNJbVJsWm1GMWJIUmNJbDBwS0dVc1czdHJaWGs2WENKMllXeHBaR0YwWlZ3aUxIWmhiSFZsT21aMWJtTjBhVzl1S0dVcGUyWmJYQ0prWldaaGRXeDBYQ0pkTG1Ga1pGTmphR1Z0WVNobExtbGtMR1VwTzNaaGNpQjBQV1piWENKa1pXWmhkV3gwWENKZExuWmhiR2xrWVhSbFRYVnNkR2x3YkdVb1NsTlBUaTV3WVhKelpTZ29NQ3hwVzF3aVpHVm1ZWFZzZEZ3aVhTa29kR2hwY3lrcExHVXBPM0psZEhWeWJpQjBMbVZ5Y205eWN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHVXBlMlJsYkdWMFpTQmxMbk4wWVdOcmZTa3NLQ0YwTG5aaGJHbGtmSHgwTG0xcGMzTnBibWN1YkdWdVozUm9QakFwSmlZb1kyOXVjMjlzWlM1M1lYSnVLRndpVDJKcVpXTjBJSFpoYkdsa1lYUnBiMjRnWENJcktIUXVkbUZzYVdRL1hDSnpkV05qWldWa1pXUXNJR0oxZENCelkyaGxiV0VnWTI5dWRHRnBibVZrSUhKbFptVnlaVzVqWlhNNlhDSTZYQ0ptWVdsc1pXUTZYQ0lwTENnd0xHbGJYQ0prWldaaGRXeDBYQ0pkS1NoMExHNTFiR3dzTWlrcExHTnZibk52YkdVdWJHOW5LRndpVDJKcVpXTjBPbHdpTENnd0xHbGJYQ0prWldaaGRXeDBYQ0pkS1NoMGFHbHpMRzUxYkd3c01pa3BLU3gwTG5aaGJHbGtmWDFkS1N4bGZTZ3BPM0piWENKa1pXWmhkV3gwWENKZFBXUjlMSHRjSW1KaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXFjMjl1TDNOMGNtbHVaMmxtZVZ3aU9qRXNYQ0ppWVdKbGJDMXlkVzUwYVcxbEwyaGxiSEJsY25NdlkyeGhjM05EWVd4c1EyaGxZMnRjSWpveE1DeGNJbUpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5amNtVmhkR1ZEYkdGemMxd2lPakV4TEhSMk5EbzVPWDFkZlN4N2ZTeGJNVEF3WFNrb01UQXdLWDBwTzF4dUx5OGpJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlUV1Z6YzJGblpVWmhZM1J2Y25rdWFuTXViV0Z3WEc0aUxDSXZLaXBjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVUZRZ1NXNXZkbUhEcDhPamJ5QmxJRk5wYzNSbGJXRnpJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVsT1JWTkRMVWxFWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZGVlQwSkpVeUJPUlZSWFQxSkxVeUJUVEZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCR1VrRlZUa2hQUmtWU0xVZEZVMFZNVEZORFNFRkdWQ0JhVlZJZ1JrOUZVa1JGVWxWT1J5QkVSVklnUVU1SFJWZEJUa1JVUlU0Z1JrOVNVME5JVlU1SElFVXVWbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJQVWtGT1IwVWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUkdWMWRITmphR1VnVkdWc1pXdHZiU0JCUjF4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCQmNHbDZaV1ZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVkVWRFNFNUpVME5JUlNCVlRrbFdSVkpUU1ZSQlZDQkNSVkpNU1U1Y2JpcGNiaW9nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2Jpb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1S2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaXBjYmlvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpcGNiaW9nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNHFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1S2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVLaW92WEc0dkx5QnBiWEJ2Y25RZ1RXVnpjMkZuWlVaaFkzUnZjbmtnWm5KdmJTQW5MaTR2TGk0dmNtVnpiM1Z5WTJWekwwMWxjM05oWjJWR1lXTjBiM0o1Snp0Y2JseHVMeW9xWEc0Z0tpQkRiR0Z6Y3lCM2FXeHNJR0Z6YXlCMGJ5QjBhR1VnYldWemMyRm5aU0J1YjJSbElHWnZjaUJoWkdSeVpYTnpaWE5jYmlBcUwxeHVZMnhoYzNNZ1FXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0Z2UxeHVJQ0F2S2lCd2NtbDJZWFJsWEc0Z0lGOTFjbXc2SUZWU1RGeHVJQ0JmWW5Wek9pQk5hVzVwUW5WelhHNGdJQ292WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRU55WldGMFpTQmhiaUJCWkdSeVpYTnpJRUZzYkc5allYUnBiMjVjYmlBZ0lDb2dRSEJoY21GdElDQjdWVkpNTGxWU1RIMGdJQ0FnSUNCMWNtd2dMU0IxY213Z1puSnZiU0IzYUc4Z2FYTWdjMlZ1WkdsdVp5QjBhR1VnYldWemMyRm5aVnh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE5hVzVwUW5WemZTQWdJQ0FnSUdKMWN5QXRJRTFwYm1sQ2RYTWdkWE5sWkNCbWIzSWdZV1JrY21WemN5QmhiR3h2WTJGMGFXOXVYRzRnSUNBcUwxeHVJQ0JqYjI1emRISjFZM1J2Y2loMWNtd3NJR0oxY3l3Z2NtVm5hWE4wY25rcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnTHk4Z2JHVjBJRzFsYzNOaFoyVkdZV04wYjNKNUlEMGdibVYzSUUxbGMzTmhaMlZHWVdOMGIzSjVLQ2s3WEc0Z0lDQWdMeTljYmlBZ0lDQXZMeUJmZEdocGN5NWZiV1Z6YzJGblpVWmhZM1J2Y25rZ1BTQnRaWE56WVdkbFJtRmpkRzl5ZVR0Y2JpQWdJQ0JmZEdocGN5NWZkWEpzSUQwZ2RYSnNPMXh1SUNBZ0lGOTBhR2x6TGw5aWRYTWdQU0JpZFhNN1hHNGdJQ0FnWDNSb2FYTXVYM0psWjJsemRISjVJRDBnY21WbmFYTjBjbms3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1oyVjBJSFJvWlNCVlVrd2dkbUZzZFdWY2JpQWdJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0JVYUdVZ2RYSnNJSFpoYkhWbE8xeHVJQ0FnS2k5Y2JpQWdaMlYwSUhWeWJDZ3BJSHNnY21WMGRYSnVJSFJvYVhNdVgzVnliRHNnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCYzJzZ1ptOXlJR055WldGMGFXOXVJRzltSUdFZ2JuVnRZbVZ5SUc5bUlFaDVjR1Z5ZEhrZ1lXUmtjbVZ6YzJWekxDQjBieUIwYUdVZ1pHOXRZV2x1SUcxbGMzTmhaMlVnYm05a1pTNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1JHOXRZV2x1ZlNCa2IyMWhhVzRnTFNCRWIyMWhhVzRnYjJZZ2RHaGxJRzFsYzNOaFoyVWdibTlrWlM1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3Ym5WdFltVnlmU0J1ZFcxaVpYSWdMU0JPZFcxaVpYSWdiMllnWVdSa2NtVnpjMlZ6SUhSdklISmxjWFZsYzNSY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFCeWIyMXBjMlU4U0hsd1pYSjBlVlZTVEQ1OUlDQkJJR3hwYzNRZ2IyWWdTSGx3WlhKMGVWVlNUQ2R6WEc0Z0lDQXFMMXh1SUNCamNtVmhkR1VvWkc5dFlXbHVMQ0J1ZFcxaVpYSXNJR2x1Wm04c0lITmphR1Z0WlN3Z2NtVjFjMlZWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNibHh1SUNBZ0lDQWdhV1lnS0hKbGRYTmxWVkpNS1NCN1hHNWNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgzSmxaMmx6ZEhKNUxtTm9aV05yVW1WbmFYTjBaWEpsWkZWU1RITW9hVzVtYnlrdWRHaGxiaWdvZFhKc2N5a2dQVDRnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hWeWJITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzBGa1pISmxjM05CYkd4dlkyRjBhVzl1SUMwZ0p5QXJJSE5qYUdWdFpTQXJJQ2RkSUMwZ1VtVjFjMlVnVlZKTUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdkbUZzZFdVZ1BTQjdibVYzUVdSa2NtVnpjem9nWm1Gc2MyVXNJR0ZrWkhKbGMzTTZJSFZ5YkhOOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2gyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzBGa1pISmxjM05CYkd4dlkyRjBhVzl1SUMwZ2NtVjFjMlZWVWt4ZElDMGdUMkpxWldOMElDY2dLeUJ5WlhWelpWVlNUQ0FySUNjZ2JtOTBJR1p2ZFc1a0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvSjFWU1RDQk9iM1FnUm05MWJtUW5LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdmU2t1WTJGMFkyZ29LSEpsWVhOdmJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENoeVpXRnpiMjRwTzF4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdmU0JsYkhObElIdGNibHh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZjbVZuYVhOMGNua3VZMmhsWTJ0U1pXZHBjM1JsY21Wa1ZWSk1jeWhwYm1adktTNTBhR1Z1S0NoMWNteHpLU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCcFppQjBhR1Z5WlNCcGN5QmhiSEpsWVdSNUlHRWdWVkpNTENCMGFHVnVJSEpsZEhWeWJuTWdkR2hoZENCVlVrd3NJRzkwYUdWeWQybHpaU0J5WlhGMVpYTjBJR0VnYm1WM0lGVlNURnh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDFjbXh6S1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25XMEZrWkhKbGMzTkJiR3h2WTJGMGFXOXVJQzBnSnlBcklITmphR1Z0WlNBcklDZGRJQzBnVW1WMWMyVWdWVkpNSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCN2JtVjNRV1JrY21WemN6b2dabUZzYzJVc0lHRmtaSEpsYzNNNklIVnliSE45TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDJZV3gxWlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJwWmlCMGFHVnlaU0JwY3lCdWJ5QlZVa3dnYzJGMlpXUWdjbVZ4ZFdWemRDQmhJRzVsZHlCVlVreGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDloYkd4dlkyRjBaVTVsZDBGa1pISmxjM01vWkc5dFlXbHVMQ0J6WTJobGJXVXNJRzUxYldKbGNpa3VkR2hsYmlnb1lXeHNiMk5oZEdWa0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9ZV3hzYjJOaGRHVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBMbU5oZEdOb0tDaHlaV0Z6YjI0cElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtISmxZWE52YmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrdVkyRjBZMmdvS0hKbFlYTnZiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaHlaV0Z6YjI0cE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dVhHNGdJSDFjYmx4dUlDQmZZV3hzYjJOaGRHVk9aWGRCWkdSeVpYTnpLR1J2YldGcGJpd2djMk5vWlcxbExDQnVkVzFpWlhJcElIdGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc1Y2JpQWdJQ0FnSUd4bGRDQnRjMmNnUFNCN1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUNkamNtVmhkR1VuTENCbWNtOXRPaUIwYUdsekxsOTFjbXdzSUhSdk9pQW5aRzl0WVdsdU9pOHZiWE5uTFc1dlpHVXVKeUFySUdSdmJXRnBiaUFySUNjdllXUmtjbVZ6Y3kxaGJHeHZZMkYwYVc5dUp5eGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2UzWmhiSFZsT2lCN0lHNTFiV0psY2pvZ2JuVnRZbVZ5SUgwZ2ZWeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdhV1lnS0hOamFHVnRaU0FoUFQwZ0oyaDVjR1Z5ZENjcElHMXpaeTVpYjJSNUxuTmphR1Z0WlNBOUlITmphR1Z0WlR0Y2JseHVJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RiUVdSa2NtVnpjMEZzYkc5allYUnBiMjRnTFNBbklDc2djMk5vWlcxbElDc2dKMTBnTFNCU1pYRjFaWE4wSUc1bGR5QlZVa3duS1R0Y2JseHVJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1kyaGhibWRsSUhSb2FYTWdjbVZ6Y0c5dWMyVWdUV1Z6YzJGblpTQjFjMmx1WnlCMGFHVWdUV1Z6YzJGblpVWmhZM1J2Y25sY2JpQWdJQ0FnSUhSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaHRjMmNzSUNoeVpYQnNlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY21Wd2JIa3VZbTlrZVM1amIyUmxJRDA5UFNBeU1EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjbVZ6ZFd4MElEMGdlMjVsZDBGa1pISmxjM002SUhSeWRXVXNJR0ZrWkhKbGMzTTZJSEpsY0d4NUxtSnZaSGt1ZG1Gc2RXVXVZV3hzYjJOaGRHVmtmVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGMzVnNkQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbGNHeDVMbUp2WkhrdVpHVnpZeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ2ZTazdYRzVjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZObGJtUWdZU0J5WlhGMVpYTjBJSFJ2SUhSb1pTQmtiMjFoYVc0Z2JXVnpjMkZuWlNCdWIyUmxMQ0IwYnlCa1pXRnNiRzlqWVhSbElHOXVaU0J2Y2lCdGIzSmxJR0ZrWkhKbGMzTmxjMXh1SUNBcUlFQndZWEpoYlNBZ2UwUnZiV0ZwYm4wZ1pHOXRZV2x1SUMwZ1JHOXRZV2x1SUc5bUlIUm9aU0J0WlhOellXZGxJRzV2WkdVdVhHNGdJQ29nUUhCaGNtRnRJQ0I3WVdSa2NtVnpjMlZ6ZlNCaFpHUnlaWE56WlhNZ2RHOGdjbVZ4ZFdWemRDQjBhR1VnWkdWaGJHeHZZMkYwYVc5dVhHNGdJQ29nUUhKbGRIVnlibk1nZTFCeWIyMXBjMlY5SUNCMGFHVWdjbVZ6Y0c5dWMyVWdZbmtnZEdobElHMWxjM05oWjJVZ2JtOWtaVnh1SUNBcUwxeHVJQ0JrWld4bGRHVW9aRzl0WVdsdUxDQmhaR1J5WlhOelpYTXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2JHVjBJRzFsYzNOaFoyVWdQU0I3WEc0Z0lDQWdJQ0IwZVhCbE9pQW5aR1ZzWlhSbEp5d2dabkp2YlRvZ1gzUm9hWE11WDNWeWJDd2dkRzg2SUNka2IyMWhhVzQ2THk5dGMyY3RibTlrWlM0bklDc2daRzl0WVdsdUlDc2dKeTloWkdSeVpYTnpMV0ZzYkc5allYUnBiMjRuTEZ4dUlDQWdJQ0FnWW05a2VUb2dlMk5vYVd4a2NtVnVVbVZ6YjNWeVkyVnpPaUJoWkdSeVpYTnpaWE45WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNWNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvYldWemMyRm5aU3dnS0hKbGNHeDVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R5WlhCc2VTY3NJSEpsY0d4NUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYQnNlUzVpYjJSNUxtTnZaR1VwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENoeVpYQnNlUzVpYjJSNUxtUmxjMk1wTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNibHh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRUZrWkhKbGMzTkJiR3h2WTJGMGFXOXVPMXh1SWl3aUx5b3FYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRkJVSUVsdWIzWmh3NmZEbzI4Z1pTQlRhWE4wWlcxaGN5QlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJKVGtWVFF5MUpSRnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJSVlU5Q1NWTWdUa1ZVVjA5U1MxTWdVMHhjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUmxKQlZVNUlUMFpGVWkxSFJWTkZURXhUUTBoQlJsUWdXbFZTSUVaUFJWSkVSVkpWVGtjZ1JFVlNJRUZPUjBWWFFVNUVWRVZPSUVaUFVsTkRTRlZPUnlCRkxsWmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdUMUpCVGtkRklGTkJYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVJsZFhSelkyaGxJRlJsYkdWcmIyMGdRVWRjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUVhCcGVtVmxYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRlJGUTBoT1NWTkRTRVVnVlU1SlZrVlNVMGxVUVZRZ1FrVlNURWxPWEc0cVhHNHFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0cUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaW9nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNHFYRzRxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0cVhHNHFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2Jpb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUtpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaW9nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2Jpb3FMMXh1WEc0dktpcGNiaW9nUUdGMWRHaHZjaUJ0YVdOaFpXeHdaV1J5YjNOaFFHZHRZV2xzTG1OdmJWeHVLaUJOYVc1cGJXRnNJR2x1ZEdWeVptRmpaU0JoYm1RZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnZEc4Z2MyVnVaQ0JoYm1RZ2NtVmpaV2wyWlNCdFpYTnpZV2RsY3k0Z1NYUWdZMkZ1SUdKbElISmxkWE5sWkNCcGJpQnRZVzU1SUhSNWNHVWdiMllnWTI5dGNHOXVaVzUwY3k1Y2Jpb2dRMjl0Y0c5dVpXNTBjeUIwYUdGMElHNWxaV1FnWVNCdFpYTnpZV2RsSUhONWMzUmxiU0J6YUc5MWJHUWdjbVZqWldsMlpTQjBhR2x6SUdOc1lYTnpJR0Z6SUdFZ1pHVndaVzVrWlc1amVTQnZjaUJsZUhSbGJtUWdhWFF1WEc0cUlFVjRkR1Z1YzJsdmJuTWdjMmh2ZFd4a0lHbHRjR3hsYldWdWRDQjBhR1VnWm05c2JHOTNhVzVuSUhCeWFYWmhkR1VnYldWMGFHOWtjem9nWDI5dVVHOXpkRTFsYzNOaFoyVWdZVzVrSUY5eVpXZHBjM1JsY2tWNGRHVnlibUZzVEdsemRHVnVaWEpjYmlvdlhHNWpiR0Z6Y3lCQ2RYTWdlMXh1SUNBdktpQndjbWwyWVhSbFhHNGdJRjl0YzJkSlpEb2diblZ0WW1WeU8xeHVJQ0JmYzNWaWMyTnlhWEIwYVc5dWN6b2dQSFZ5YkRvZ1RYTm5UR2x6ZEdWdVpYSmJYVDVjYmx4dUlDQmZjbVZ6Y0c5dWMyVlVhVzFsVDNWME9pQnVkVzFpWlhKY2JpQWdYM0psYzNCdmJuTmxRMkZzYkdKaFkydHpPaUE4ZFhKc0sybGtPaUFvYlhObktTQTlQaUIyYjJsa1BseHVYRzRnSUNvdlhHNWNiaUFnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JmZEdocGN5NWZiWE5uU1dRZ1BTQXdPMXh1SUNBZ0lGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpJRDBnZTMwN1hHNWNiaUFnSUNCZmRHaHBjeTVmY21WemNHOXVjMlZVYVcxbFQzVjBJRDBnTlRBd01Ec2dMeTlrWldaaGRXeDBJSFJ2SUROelhHNGdJQ0FnWDNSb2FYTXVYM0psYzNCdmJuTmxRMkZzYkdKaFkydHpJRDBnZTMwN1hHNWNiaUFnSUNCZmRHaHBjeTVmY21WbmFYTjBaWEpGZUhSbGNtNWhiRXhwYzNSbGJtVnlLQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCU1pXZHBjM1JsY2lCc2FYTjBaVzVsY2lCMGJ5QnlaV05sYVhabElHMWxjM05oWjJVZ2QyaGxiaUJjSW0xelp5NTBieUE5UFQwZ2RYSnNYQ0l1WEc0Z0lDb2dVM0JsWTJsaGJDQjFjbXdnWENJcVhDSWdabTl5SUdSbFptRjFiSFFnYkdsemRHVnVaWElnYVhNZ1lXTmpaWEIwWldRZ2RHOGdhVzUwWlhKalpYQjBJR0ZzYkNCdFpYTnpZV2RsY3k1Y2JpQWdLaUJBY0dGeVlXMGdlMVZTVEgwZ2RYSnNJRUZrWkhKbGMzTWdkRzhnYVc1MFpYSmpaWEIwTENCMGFHRWdhWE1nYVc0Z2RHaGxJRzFsYzNOaFoyVWdYQ0owYjF3aVhHNGdJQ29nUUhCaGNtRnRJSHRNYVhOMFpXNWxjbjBnYkdsemRHVnVaWElnYkdsemRHVnVaWEpjYmlBZ0tpQkFjbVYwZFhKdUlIdE5jMmRNYVhOMFpXNWxjbjBnYVc1emRHRnVZMlVnYjJZZ1RYTm5UR2x6ZEdWdVpYSmNiaUFnS2k5Y2JpQWdZV1JrVEdsemRHVnVaWElvZFhKc0xDQnNhWE4wWlc1bGNpa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdhWFJsYlNBOUlHNWxkeUJOYzJkTWFYTjBaVzVsY2loZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWN5d2dkWEpzTENCc2FYTjBaVzVsY2lrN1hHNGdJQ0FnYkdWMElHbDBaVzFNYVhOMElEMGdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iZFhKc1hUdGNiaUFnSUNCcFppQW9JV2wwWlcxTWFYTjBLU0I3WEc0Z0lDQWdJQ0JwZEdWdFRHbHpkQ0E5SUZ0ZE8xeHVJQ0FnSUNBZ1gzUm9hWE11WDNOMVluTmpjbWx3ZEdsdmJuTmJkWEpzWFNBOUlHbDBaVzFNYVhOME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsMFpXMU1hWE4wTG5CMWMyZ29hWFJsYlNrN1hHNGdJQ0FnY21WMGRYSnVJR2wwWlcwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dUV0Z1ZFdGc2JIa2dZV1JrSUdFZ2NtVnpjRzl1YzJVZ2JHbHpkR1Z1WlhJdUlFOXViSGtnYjI1bElHeHBjM1JsYm1WeUlIQmxjaUJ0WlhOellXZGxJRWxFSUhOb2IzVnNaQ0JsZUdsemRDNWNiaUFnSUNvZ1FWUkZUbFJKVDA0c0lIUm9aWEpsSUdseklHNXZJSFJwYldWdmRYUWdabTl5SUhSb2FYTWdiR2x6ZEdWdVpYSXVYRzRnSUNBcUlGUm9aU0JzYVhOMFpXNWxjaUJ6YUc5MWJHUWdZbVVnY21WdGIzWmxaQ0IzYVhSb0lHRWdjbVZ0YjNabFVtVnpjRzl1YzJWTWFYTjBaVzVsY2l3Z1ptRnBiR2x1WnlCMGJ5QmtieUIwYUdseklIZHBiR3dnY21WemRXeDBJR2x1SUdFZ2RXNXlaV3hsWVhObFpDQnRaVzF2Y25rZ2NISnZZbXhsYlM1Y2JpQWdJQ29nUUhCaGNtRnRJSHRWVWt4OUlIVnliQ0JQY21sbmFXNGdZV1JrY21WemN5QnZaaUIwYUdVZ2JXVnpjMkZuWlNCelpXNTBMQ0JjSW0xelp5NW1jbTl0WENJdVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J0YzJkSlpDQk5aWE56WVdkbElFbEVJSFJvWVhRZ2FYTWdjbVYwZFhKdVpXUWdabkp2YlNCMGFHVWdjRzl6ZEUxbGMzTmhaMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJSEpsYzNCdmJuTmxUR2x6ZEdWdVpYSWdRMkZzYkdKaFkyc2dablZ1WTNScGIyNGdabTl5SUhSb1pTQnlaWE53YjI1elpWeHVJQ0FnS2k5Y2JpQWdZV1JrVW1WemNHOXVjMlZNYVhOMFpXNWxjaWgxY213c0lHMXpaMGxrTENCeVpYTndiMjV6WlV4cGMzUmxibVZ5S1NCN1hHNGdJQ0FnZEdocGN5NWZjbVZ6Y0c5dWMyVkRZV3hzWW1GamEzTmJkWEpzSUNzZ2JYTm5TV1JkSUQwZ2NtVnpjRzl1YzJWTWFYTjBaVzVsY2p0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaVzF2ZG1VZ2RHaGxJSEpsYzNCdmJuTmxJR3hwYzNSbGJtVnlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxVlNUSDBnZFhKc0lFOXlhV2RwYmlCaFpHUnlaWE56SUc5bUlIUm9aU0J0WlhOellXZGxJSE5sYm5Rc0lGd2liWE5uTG1aeWIyMWNJaTVjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlHMXpaMGxrSUNCTlpYTnpZV2RsSUVsRUlIUm9ZWFFnYVhNZ2NtVjBkWEp1WldRZ1puSnZiU0IwYUdVZ2NHOXpkRTFsYzNOaFoyVmNiaUFnSUNvdlhHNGdJSEpsYlc5MlpWSmxjM0J2Ym5ObFRHbHpkR1Z1WlhJb2RYSnNMQ0J0YzJkSlpDa2dlMXh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbDl5WlhOd2IyNXpaVU5oYkd4aVlXTnJjMXQxY213Z0t5QnRjMmRKWkYwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZ0YjNabElHRnNiQ0JsZUdsemRHVnVkQ0JzYVhOMFpXNWxjbk1nWm05eUlIUm9aU0JWVWt4Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3VlZKTWZTQjFjbXdnUVdSa2NtVnpjeUJ5WldkcGMzUmxjbVZrWEc0Z0lDQXFMMXh1SUNCeVpXMXZkbVZCYkd4TWFYTjBaVzVsY25OUFppaDFjbXdwSUh0Y2JpQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXQxY214ZE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWhsYkhCbGNpQnRaWFJvYjJRZ2RHOGdZbWx1WkNCc2FYTjBaVzVsY25NZ0tHbHVJR0p2ZEdnZ1pHbHlaV04wYVc5dWN5a2dhVzUwYnlCdmRHaGxjaUJOYVc1cFFuVnpJSFJoY21kbGRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1ZWSk1mU0J2ZFhSVmNtd2dUM1YwWW05MWJtUWdWVkpNTENCeVpXZHBjM1JsY2lCc2FYTjBaVzVsY2lCbWIzSWdkWEpzSUdsdUlHUnBjbVZqZEdsdmJpQmNJblJvYVhNZ0xUNGdkR0Z5WjJWMFhDSmNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1ZWSk1mU0JwYmxWeWJDQkpibUp2ZFc1a0lGVlNUQ3dnY21WbmFYTjBaWElnYkdsemRHVnVaWElnWm05eUlIVnliQ0JwYmlCa2FYSmxZM1JwYjI0Z1hDSjBZWEpuWlhRZ0xUNGdkR2hwYzF3aVhHNGdJQ0FxSUVCd1lYSmhiU0FnZTAxcGJtbENkWE45SUhSaGNtZGxkQ0JVYUdVZ2IzUm9aWElnZEdGeVoyVjBJRTFwYm1sQ2RYTmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1FtOTFibVI5SUdGdUlHOWlhbVZqZENCMGFHRjBJR052Ym5SaGFXNXpJSFJvWlNCd2NtOXdaWEowYVdWeklGdDBhR2x6VEdsemRHVnVaWElzSUhSaGNtZGxkRXhwYzNSbGJtVnlYU0JoYm1RZ2RHaGxJSFZ1WW1sdVpDQnRaWFJvYjJRdVhHNGdJQ0FxTDF4dUlDQmlhVzVrS0c5MWRGVnliQ3dnYVc1VmNtd3NJSFJoY21kbGRDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdkR2hwYzB4cGMzUnVJRDBnWDNSb2FYTXVZV1JrVEdsemRHVnVaWElvYjNWMFZYSnNMQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0IwWVhKblpYUXVjRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHeGxkQ0IwWVhKblpYUk1hWE4wYmlBOUlIUmhjbWRsZEM1aFpHUk1hWE4wWlc1bGNpaHBibFZ5YkN3Z0tHMXpaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ1gzUm9hWE11Y0c5emRFMWxjM05oWjJVb2JYTm5LVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQjBhR2x6VEdsemRHVnVaWEk2SUhSb2FYTk1hWE4wYml4Y2JpQWdJQ0FnSUhSaGNtZGxkRXhwYzNSbGJtVnlPaUIwWVhKblpYUk1hWE4wYml4Y2JpQWdJQ0FnSUhWdVltbHVaRG9nS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUm9hWE5NYVhOMFpXNWxjaTV5WlcxdmRtVW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBZWEpuWlhSTWFYTjBaVzVsY2k1eVpXMXZkbVVvS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ0x5OXdkV0pzYVhOb0lHOXVJR1JsWm1GMWJIUWdiR2x6ZEdWdVpYSnpYRzRnSUY5d2RXSnNhWE5vVDI1RVpXWmhkV3gwS0cxelp5a2dlMXh1SUNBZ0lDOHZhWE1nZEdobGNtVWdZVzU1SUZ3aUtsd2lJQ2hrWldaaGRXeDBLU0JzYVhOMFpXNWxjbk0vWEc0Z0lDQWdiR1YwSUdsMFpXMU1hWE4wSUQwZ2RHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWMxc25LaWRkTzF4dUlDQWdJR2xtSUNocGRHVnRUR2x6ZENrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVmY0hWaWJHbHphRTl1S0dsMFpXMU1hWE4wTENCdGMyY3BPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2Y0hWaWJHbHphQ0J2YmlCaElITjFZbk5qY21sd2RHbHZiaUJzYVhOMExseHVJQ0JmY0hWaWJHbHphRTl1S0dsMFpXMU1hWE4wTENCdGMyY3BJSHRjYmlBZ0lDQnBkR1Z0VEdsemRDNW1iM0pGWVdOb0tDaHpkV0lwSUQwK0lIdGNiaUFnSUNBZ0lITjFZaTVmWTJGc2JHSmhZMnNvYlhObktUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJRjl5WlhOd2IyNXpaVU5oYkd4aVlXTnJLR2x1VFhObkxDQnlaWE53YjI1elpVTmhiR3hpWVdOcktTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dllYVjBiMjFoZEdsaklHMWhibUZuWlcxbGJuUWdiMllnY21WemNHOXVjMlVnYUdGdVpHeGxjbk5jYmlBZ0lDQnBaaUFvY21WemNHOXVjMlZEWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnYkdWMElISmxjM0J2Ym5ObFNXUWdQU0JwYmsxelp5NW1jbTl0SUNzZ2FXNU5jMmN1YVdRN1hHNGdJQ0FnSUNCZmRHaHBjeTVmY21WemNHOXVjMlZEWVd4c1ltRmphM05iY21WemNHOXVjMlZKWkYwZ1BTQnlaWE53YjI1elpVTmhiR3hpWVdOck8xeHVYRzRnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdiR1YwSUhKbGMzQnZibk5sUm5WdUlEMGdYM1JvYVhNdVgzSmxjM0J2Ym5ObFEyRnNiR0poWTJ0elczSmxjM0J2Ym5ObFNXUmRPMXh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdYM1JvYVhNdVgzSmxjM0J2Ym5ObFEyRnNiR0poWTJ0elczSmxjM0J2Ym5ObFNXUmRPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpVWjFiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JsY25KdmNrMXpaeUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lCcGJrMXpaeTVwWkN3Z2RIbHdaVG9nSjNKbGMzQnZibk5sSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIc2dZMjlrWlRvZ05EQTRMQ0JrWlhOak9pQW5VbVZ6Y0c5dWMyVWdkR2x0Wlc5MWRDRW5MQ0IyWVd4MVpUb2dhVzVOYzJjZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWE53YjI1elpVWjFiaWhsY25KdmNrMXpaeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwc0lGOTBhR2x6TGw5eVpYTndiMjV6WlZScGJXVlBkWFFwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUY5dmJsSmxjM0J2Ym5ObEtHMXpaeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnBaaUFvYlhObkxuUjVjR1VnUFQwOUlDZHlaWE53YjI1elpTY3BJSHRjYmlBZ0lDQWdJR3hsZENCeVpYTndiMjV6WlVsa0lEMGdiWE5uTG5SdklDc2diWE5uTG1sa08xeHVJQ0FnSUNBZ2JHVjBJSEpsYzNCdmJuTmxSblZ1SUQwZ1gzUm9hWE11WDNKbGMzQnZibk5sUTJGc2JHSmhZMnR6VzNKbGMzQnZibk5sU1dSZE8xeHVYRzRnSUNBZ0lDQXZMMmxtSUdsMEozTWdZU0J3Y205MmFYTnBiMjVoYkNCeVpYTndiMjV6WlN3Z1pHOXVKM1FnWkdWc1pYUmxJSEpsYzNCdmJuTmxJR3hwYzNSbGJtVnlYRzRnSUNBZ0lDQnBaaUFvYlhObkxtSnZaSGt1WTI5a1pTQStQU0F5TURBcElIdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElGOTBhR2x6TGw5eVpYTndiMjV6WlVOaGJHeGlZV05yYzF0eVpYTndiMjV6WlVsa1hUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hKbGMzQnZibk5sUm5WdUtTQjdYRzRnSUNBZ0lDQWdJSEpsYzNCdmJuTmxSblZ1S0cxelp5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdmVnh1WEc0Z0lDOHZjbVZqWldsMlpTQnRaWE56WVdkbGN5Qm1jbTl0SUdWNGRHVnlibUZzSUdsdWRHVnlabUZqWlZ4dUlDQmZiMjVOWlhOellXZGxLRzF6WnlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JwWmlBb0lWOTBhR2x6TGw5dmJsSmxjM0J2Ym5ObEtHMXpaeWtwSUh0Y2JpQWdJQ0FnSUd4bGRDQnBkR1Z0VEdsemRDQTlJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzIxelp5NTBiMTA3WEc0Z0lDQWdJQ0JwWmlBb2FYUmxiVXhwYzNRcElIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgzQjFZbXhwYzJoUGJpaHBkR1Z0VEdsemRDd2diWE5uS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDl3ZFdKc2FYTm9UMjVFWldaaGRXeDBLRzF6WnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1gyZGxia2xrS0dsdVRYTm5LU0I3WEc0Z0lDQWdMeTlVVDBSUE9pQm9iM2NnWkc4Z2QyVWdiV0Z1WVdkbElHMWxjM05oWjJVZ1NVUW5jejhnVTJodmRXeGtJR2wwSUdKbElHRWdaMnh2WW1Gc0lISjFiblJwYldVZ1kyOTFiblJsY2l3Z2IzSWdjR1Z5SUZWU1RDQmhaR1J5WlhOelAxeHVJQ0FnSUM4dlIyeHZZbUZzSUdOdmRXNTBaWElnZDJsc2JDQnViM1FnZDI5eWF5d2dZbVZqWVhWelpTQjBhR1Z5WlNCM2FXeHNJR0psSUcxMWJIUnBjR3hsSUUxcGJtbENkWE1nYVc1emRHRnVZMlZ6SVZ4dUlDQWdJQzh2VUdWeUlGVlNUQ3dnWTJGdUlHSmxJR0VnYkc5MElHOW1JR1JoZEdFZ2RHOGdiV0ZwYm5SaGFXNGhYRzRnSUNBZ0x5OU5ZWGxpWlNCaElHTnZkVzUwWlhJZ2NHVnlJRTFwYm1sQ2RYTWdhVzV6ZEdGdVkyVXVJRlJvYVhNZ2FYTWdkR2hsSUdGemMzVnRaV1FnYzI5c2RYUnBiMjRnWm05eUlHNXZkeTVjYmlBZ0lDQnBaaUFvSVdsdVRYTm5MbWxrSUh4OElHbHVUWE5uTG1sa0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDl0YzJkSlpDc3JPMXh1SUNBZ0lDQWdhVzVOYzJjdWFXUWdQU0IwYUdsekxsOXRjMmRKWkR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVFpXNWtJRzFsYzNOaFoyVnpJSFJ2SUd4dlkyRnNJR3hwYzNSbGJtVnljeXdnYjNJZ2FXWWdibTkwSUdWNGFYTjBjeUIwYnlCbGVIUmxjbTVoYkNCc2FYTjBaVzVsY25NdVhHNGdJQ29nU1hRbmN5Qm9ZWE1nWVc0Z2IzQjBhVzl1WVd3Z2JXVmphR0Z1YVhOdElHWnZjaUJoZFhSdmJXRjBhV01nYldGdVlXZGxiV1Z1ZENCdlppQnlaWE53YjI1elpTQm9ZVzVrYkdWeWN5NWNiaUFnS2lCVWFHVWdjbVZ6Y0c5dWMyVWdhR0Z1Wkd4bGNpQjNhV3hzSUdKbElIVnVjbVZuYVhOMFpYSmxaQ0JoWm5SbGNpQnlaV05sYVhacGJtY2dkR2hsSUhKbGMzQnZibk5sTENCdmNpQmhablJsY2lCeVpYTndiMjV6WlNCMGFXMWxiM1YwSUNoa1pXWmhkV3gwSUhSdklETnpLUzVjYmlBZ0tpQkFjR0Z5WVcwZ0lIdE5aWE56WVdkbGZTQnRjMmNnVFdWemMyRm5aU0IwYnlCelpXNWtMaUJOWlhOellXZGxJRWxFSUdseklHRjFkRzl0WVhScFkyRnNiSGtnWVdSa1pXUWdkRzhnZEdobElHMWxjM05oWjJVdVhHNGdJQ29nUUhCaGNtRnRJQ0I3Um5WdVkzUnBiMjU5SUhKbGMzQnZibk5sUTJGc2JHSmhZMnNnVDNCMGFXOXVZV3dnY0dGeVlXMWxkR1Z5TENCcFppQjBhR1VnWkdWMlpXeHZjR1Z5SUhkb1lYUW5jeUJoZFhSdmJXRjBhV01nY21WemNHOXVjMlVnYldGdVlXZGxiV1Z1ZEM1Y2JpQWdLaUJBY21WMGRYSnVJSHR1ZFcxaVpYSjlJRkpsZEhWeWJuTWdkR2hsSUcxbGMzTmhaMlVnU1VRc0lHbHVJR05oYzJVZ2FYUWdjMmh2ZFd4a0lHSmxJRzVsWldSbFpDQm1iM0lnYldGdWRXRnNJRzFoYm1GblpXMWxiblFnYjJZZ2RHaGxJSEpsYzNCdmJuTmxJR2hoYm1Sc1pYSXVYRzRnSUNvdlhHNGdJSEJ2YzNSTlpYTnpZV2RsS0dsdVRYTm5MQ0J5WlhOd2IyNXpaVU5oYkd4aVlXTnJLU0I3SUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVG05MElIQjFZbXhwWXlCaGRtRnBiR0ZpYkdVc0lIVnpaV1FnWW5rZ2RHaGxJR05zWVhOeklHVjRkR1Z1YzJsdmJpQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z2RHOGdjSEp2WTJWemN5QnRaWE56WVdkbGN5Qm1jbTl0SUhSb1pTQndkV0pzYVdNZ1hDSndiM04wVFdWemMyRm5aVndpSUhkcGRHaHZkWFFnWVNCeVpXZHBjM1JsY21Wa0lHeHBjM1JsYm1WeUxseHVJQ0FnS2lCVmMyVmtJSFJ2SUhObGJtUWdkR2hsSUcxbGMzTmhaMlVnZEc4Z1lXNGdaWGgwWlhKdVlXd2dhVzUwWlhKbVlXTmxMQ0JzYVd0bElHRWdWMlZpVjI5eWEyVnlMQ0JKUm5KaGJXVXNJR1YwWXk1Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3VFdWemMyRm5aUzVOWlhOellXZGxmU0J0YzJjZ1RXVnpjMkZuWlZ4dUlDQWdLaTljYmlBZ1gyOXVVRzl6ZEUxbGMzTmhaMlVvYlhObktTQjdJQzhxYVcxd2JHVnRaVzUwWVhScGIyNGdkMmxzYkNCelpXNWtJRzFsYzNOaFoyVWdkRzhnWlhoMFpYSnVZV3dnYzNsemRHVnRLaThnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJPYjNRZ2NIVmliR2xqSUdGMllXbHNZV0pzWlN3Z2RYTmxaQ0JpZVNCMGFHVWdZMnhoYzNNZ1pYaDBaVzV6YVc5dUlHbHRjR3hsYldWdWRHRjBhVzl1TENCMGJ5QndjbTlqWlhOeklHRnNiQ0J0WlhOellXZGxjeUIwYUdGMElHVnVkR1Z5SUhSb1pTQk5hVzVwUW5WeklHWnliMjBnWVc0Z1pYaDBaWEp1WVd3Z2FXNTBaWEptWVdObExDQnNhV3RsSUdFZ1YyVmlWMjl5YTJWeUxDQkpSbkpoYldVc0lHVjBZeTVjYmlBZ0lDb2dWR2hwY3lCdFpYUm9iMlFnYVhNZ1kyRnNiR1ZrSUc5dVpTQjBhVzFsSUdsdUlIUm9aU0JqYjI1emRISjFZM1J2Y2lCMGJ5QnlaV2RwYzNSbGNpQmxlSFJsY201aGJDQnNhWE4wWlc1bGNuTXVYRzRnSUNBcUlGUm9aU0JwYlhCc1pXMWxiblJoZEdsdmJpQjNhV3hzSUhCeWIySmhZbXg1SUdOaGJHd2dkR2hsSUZ3aVgyOXVUV1Z6YzJGblpWd2lJRzFsZEdodlpDQjBieUJ3ZFdKc2FYTm9JR2x1SUhSb1pTQnNiMk5oYkNCc2FYTjBaVzVsY25NdVhHNGdJQ0FxSUVSUElFNVBWQ0JqWVd4c0lGd2ljRzl6ZEUxbGMzTmhaMlZjSWl3Z2RHaGxjbVVnYVhNZ1lTQmtZVzVuWlhJZ2RHaGhkQ0IwYUdVZ2JXVnpjMkZuWlNCbGJuUmxjbk1nYVc0Z1lTQmplV05zWlNGY2JpQWdJQ292WEc0Z0lGOXlaV2RwYzNSbGNrVjRkR1Z5Ym1Gc1RHbHpkR1Z1WlhJb0tTQjdJQzhxYVcxd2JHVnRaVzUwWVhScGIyNGdkMmxzYkNCeVpXZHBjM1JsY2lCbGVIUmxjbTVoYkNCc2FYTjBaVzVsY2lCaGJtUWdZMkZzYkNCY0luUm9hWE11WDI5dVRXVnpjMkZuWlNodGMyY3BYQ0lnS2k4Z2ZWeHVYRzU5WEc1Y2JtTnNZWE56SUUxeloweHBjM1JsYm1WeUlIdGNiaUFnTHlvZ2NISnBkbUYwWlZ4dUlDQmZjM1ZpYzJOeWFYQjBhVzl1Y3pvZ1BITjBjbWx1WnpvZ1RYTm5UR2x6ZEdWdVpYSmJYVDQ3WEc0Z0lGOTFjbXc2SUhOMGNtbHVaenRjYmlBZ1gyTmhiR3hpWVdOck9pQW9iWE5uS1NBOVBpQjJiMmxrTzF4dUlDQXFMMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLSE4xWW5OamNtbHdkR2x2Ym5Nc0lIVnliQ3dnWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk1nUFNCemRXSnpZM0pwY0hScGIyNXpPMXh1SUNBZ0lGOTBhR2x6TGw5MWNtd2dQU0IxY213N1hHNGdJQ0FnWDNSb2FYTXVYMk5oYkd4aVlXTnJJRDBnWTJGc2JHSmhZMnM3WEc0Z0lIMWNibHh1SUNCblpYUWdkWEpzS0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmZFhKc095QjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxiVzkyWlNCMGFHbHpJR3hwYzNSbGJtVnlJR1p5YjIwZ2RHaGxJRUoxYzF4dUlDQWdLaTljYmlBZ2NtVnRiM1psS0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JzWlhRZ2MzVmljeUE5SUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elcxOTBhR2x6TGw5MWNteGRPMXh1SUNBZ0lHbG1JQ2h6ZFdKektTQjdYRzRnSUNBZ0lDQnNaWFFnYVc1a1pYZ2dQU0J6ZFdKekxtbHVaR1Y0VDJZb1gzUm9hWE1wTzF4dUlDQWdJQ0FnYzNWaWN5NXpjR3hwWTJVb2FXNWtaWGdzSURFcE8xeHVYRzRnSUNBZ0lDQXZMMmxtSUhSb1pYSmxJR0Z5WlNCdWJ5QnNhWE4wWlc1bGNuTXNJSEpsYlc5MlpTQjBhR1VnYzNWaWMyTnlhWEIwYVc5dUlHVnVkR2x5Wld4NUxseHVJQ0FnSUNBZ2FXWWdLSE4xWW5NdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdSbGJHVjBaU0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1YzF0ZmRHaHBjeTVmZFhKc1hUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1FuVnpPMXh1SWl3aUx5b3FYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRkJVSUVsdWIzWmh3NmZEbzI4Z1pTQlRhWE4wWlcxaGN5QlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJKVGtWVFF5MUpSRnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJSVlU5Q1NWTWdUa1ZVVjA5U1MxTWdVMHhjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUmxKQlZVNUlUMFpGVWkxSFJWTkZURXhUUTBoQlJsUWdXbFZTSUVaUFJWSkVSVkpWVGtjZ1JFVlNJRUZPUjBWWFFVNUVWRVZPSUVaUFVsTkRTRlZPUnlCRkxsWmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdUMUpCVGtkRklGTkJYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVJsZFhSelkyaGxJRlJsYkdWcmIyMGdRVWRjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUVhCcGVtVmxYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRlJGUTBoT1NWTkRTRVVnVlU1SlZrVlNVMGxVUVZRZ1FrVlNURWxPWEc0cVhHNHFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0cUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaW9nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNHFYRzRxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0cVhHNHFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2Jpb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUtpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaW9nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2Jpb3FMMXh1YVcxd2IzSjBJRUoxY3lCbWNtOXRJQ2N1TDBKMWN5YzdYRzVwYlhCdmNuUWdVR2x3Wld4cGJtVWdabkp2YlNBbkxpOVFhWEJsYkdsdVpTYzdYRzVjYmk4cUtseHVLaUJBWVhWMGFHOXlJRzFwWTJGbGJIQmxaSEp2YzJGQVoyMWhhV3d1WTI5dFhHNHFJRTFsYzNOaFoyVWdRbFZUSUVsdWRHVnlabUZqWlNCcGN5QmhiaUJsZUhSbGJuTnBiMjRnYjJZZ2RHaGxJRUoxYzF4dUtpQkpkQ0JrYjJWemJpZDBJSE4xY0hCdmNuUWdkR2hsSUdSbFptRjFiSFFnSnlvbklHeHBjM1JsYm1WeUxDQnBibk4wWldGa0lHbDBJSFZ6WlhNZ2RHaGxJSEpsWjJsemRISjVMbkpsYzI5c2RtVW9MaTRwWEc0cUwxeHVZMnhoYzNNZ1RXVnpjMkZuWlVKMWN5QmxlSFJsYm1SeklFSjFjeUI3WEc0Z0lDOHFJSEJ5YVhaaGRHVmNiaUFnWDNKbFoybHpkSEo1T2lCU1pXZHBjM1J5ZVZ4dUlDQmZabTl5ZDJGeVpITTZJSHNnUEdaeWIyMHRkWEpzUGpvZ2V5Qm1iRG9nVFhOblRHbHpkR1Z1WlhJc0lITmhibVJpYjNoVWIxVnliSE02SUUxaGNDaFRZVzVrWW05NExDQmJkRzh0ZFhKc1hTa3NJSFZ5YkZSdlUyRnVaR0p2ZURvZ2V5QjBieTExY213NklGTmhibVJpYjNnZ2ZTQjlJSDFjYmx4dUlDQmZjR2x3Wld4cGJtVTZJRkJwY0dWc2FXNWxYRzRnSUNvdlhHNWNiaUFnTHk5VVQwUlBPaUJtZFhSMWNtVWdiM0IwYVcxcGVtRjBhVzl1WEc0Z0lDOHZNUzRnYldWemMyRm5aU0JpWVhSamFDQndjbTlqWlhOemFXNW5JSGRwZEdnZ2MyVjBTVzUwWlhKMllXeGNiaUFnTHk4eUxpQnlaWE52YkhabElHUmxabUYxYkhRZ1oyRjBaWGRoZVM5d2NtOTBiM04wZFdJZ2QybDBhQ0J5WldkcGMzUmxjaTV5WlhOdmJIWmxYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jbVZuYVhOMGNua3BJSHRjYmlBZ0lDQnpkWEJsY2lncE8xeHVJQ0FnSUhSb2FYTXVYM0psWjJsemRISjVJRDBnY21WbmFYTjBjbms3WEc0Z0lDQWdkR2hwY3k1ZlptOXlkMkZ5WkhNZ1BTQjdmVHRjYmx4dUlDQWdJSFJvYVhNdVgzQnBjR1ZzYVc1bElEMGdibVYzSUZCcGNHVnNhVzVsS0NobGNuSnZjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMUJKVUVWTVNVNUZMVVZTVWs5U09pQW5MQ0JLVTA5T0xuTjBjbWx1WjJsbWVTaGxjbkp2Y2lrcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUhCcGNHVnNhVzVsS0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmY0dsd1pXeHBibVU3SUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVUc5emRDQmhJRzFsYzNOaFoyVWdabTl5SUhKdmRYUnBibWN1SUVsMElIZHBiR3dnWm1seWMzUWdjMlZoY21Ob0lHWnZjaUJoSUd4cGMzUmxibVZ5TENCcFppQjBhR1Z5WlNCcGN5QnVieUJ2Ym1Vc0lHbDBJSE5sYm1SeklIUnZJR0VnWlhoMFpYSnVZV3dnY205MWRHbHVaeUIxYzJsdVp5QjBhR1VnWDI5dVVHOXpkRTFsYzNOaFoyVXVYRzRnSUNBcUlFVjRkR1Z5Ym1Gc0lISnZkWFJwYm1jZ2RYTmxJSFJvWlNCeVpXZHBjM1J5ZVM1eVpYTnZiSFpsS0M0dUtTQnRaWFJvYjJRZ2RHOGdaR1ZqYVdSbElIUm9aU0JrWlhOMGFXNWhkR2x2YmlCellXNWtZbTk0TGx4dUlDQWdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxmU0JwYmsxelp5QWdJQ0FnSUNBZ0lDQWdJRXBUVDA0Z2QybDBhQ0J0WVc1a1lYUnZjbmtnVFdWemMyRm5aU0J6ZEhKMVkzUjFjbVVnZTJsa0xDQjBlWEJsTENCbWNtOXRMQ0IwYjMxY2JpQWdJQ29nUUhCaGNtRnRJQ0I3UTJGc2JHSmhZMnQ5SUhKbGMzQnZibk5sUTJGc2JHSmhZMnNnVDNCMGFXOXVZV3dnWTJGc2JHSmhZMnNnYVdZZ1lTQnlaWE53YjI1elpTQnBjeUJsZUhCbFkzUmxaQ0JtY205dElIUm9aU0J5WlhGMVpYTjBMaUJCSUhKbGMzQnZibk5sSUhkcGJHd2dZbVVnWVd4M1lYbHpJSE5sYm5Rc0lHVjJaVzRnYVdZZ2FYUWdhWE1nWVNCY0lsUnBiV1Z2ZFhSY0lpNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN2JuVnRZbVZ5ZlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb1pTQk5aWE56WVdkbElHbGtYRzRnSUNBcUwxeHVJQ0J3YjNOMFRXVnpjMkZuWlNocGJrMXpaeXdnY21WemNHOXVjMlZEWVd4c1ltRmpheWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmZkR2hwY3k1ZloyVnVTV1FvYVc1TmMyY3BPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzQnBjR1ZzYVc1bExuQnliMk5sYzNNb2FXNU5jMmNzSUNodGMyY3BJRDArSUh0Y2JseHVJQ0FnSUNBZ1gzUm9hWE11WDNKbGMzQnZibk5sUTJGc2JHSmhZMnNvYVc1TmMyY3NJSEpsYzNCdmJuTmxRMkZzYkdKaFkyc3BPMXh1WEc0Z0lDQWdJQ0JwWmlBb0lWOTBhR2x6TGw5dmJsSmxjM0J2Ym5ObEtHMXpaeWtwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2wwWlcxTWFYTjBJRDBnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5OYmJYTm5MblJ2WFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2wwWlcxTWFYTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OWtieUJ1YjNRZ2NIVmliR2x6YUNCdmJpQmtaV1poZFd4MElHRmtaSEpsYzNNc0lHSmxZMkYxYzJVZ2IyWWdiRzl2Y0dKaFkyc2dZM2xqYkdWY2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmNIVmliR2x6YUU5dUtHbDBaVzFNYVhOMExDQnRjMmNwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZhV1lnZEdobGNtVWdhWE1nYm04Z2JHbHpkR1Z1WlhJc0lITmxibVFnZEc4Z1pYaDBaWEp1WVd3Z2FXNTBaWEptWVdObFhHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyOXVVRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHbHVUWE5uTG1sa08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUZrWkhNZ1lXNGdaWGgwWlhKdVlXd2djSFZpYkdsemFDQmhaR1J5WlhOeklHeHBjM1JsYm1WeUxpQkZkbVZ5ZVNCdFpYTnpZV2RsSUdadmNpQjBhR1VnWVdSa2NtVnpjeUIzYVd4c0lHSmxJR1p2Y25kaGNtUmxaQ0IwYnlCMGFHVWdaWGgwWlhKdVlXd2djbTkxZEdsdVp5QmllU0JmYjI1UWIzTjBUV1Z6YzJGblpTNWNiaUFnSUNvZ1ZHaHBjeUJ0WldGdWN5d2daWFpsYmlCcFppQjBhR1Z5WlNCcGN5QmhJR3hwYzNSbGJtVnlJR1p2Y2lCMGFHVWdZV1JrY21WemN5d2dhWFFnZDJsc2JDQmhiSE52SUhObGJtUWdkR2hsSUcxbGMzTmhaMlVnZEc4Z2RHaGxJR1Y0ZEdWeWJtRnNJSEp2ZFhScGJtY3VYRzRnSUNBcUlFQndZWEpoYlNCN1ZWSk1mU0JtY205dElGQjFZbXhwYzJnZ1lXUmtjbVZ6Y3k1Y2JpQWdJQ292WEc0Z0lHRmtaRkIxWW14cGMyZ29abkp2YlNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0F2TDNabGNtbG1lU0JwWmlCbWIzSjNZWEprSUdWNGFYTjBYRzRnSUNBZ2JHVjBJSEpsWmtOdmRXNTBJRDBnWDNSb2FYTXVYMlp2Y25kaGNtUnpXMlp5YjIxZE8xeHVJQ0FnSUdsbUlDZ2hjbVZtUTI5MWJuUXBJSHRjYmlBZ0lDQWdJR3hsZENCbWIzSjNZWEprVEdsemRHVnVaWElnUFNCZmRHaHBjeTVoWkdSTWFYTjBaVzVsY2lobWNtOXRMQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZE5RaTFRVlVKTVNWTklPaUFvSUNjZ0t5Qm1jbTl0SUNzZ0p5QXBKeWs3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDl2YmxCdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ2NtVm1RMjkxYm5RZ1BTQjdYRzRnSUNBZ0lDQWdJR052ZFc1MFpYSTZJREFzWEc0Z0lDQWdJQ0FnSUdac09pQm1iM0ozWVhKa1RHbHpkR1Z1WlhJc1hHNGdJQ0FnSUNBZ0lISmxiVzkyWlRvZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5MWJuUmxjaTB0TzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTnZkVzUwWlhJZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVptd3VjbVZ0YjNabEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnWDNSb2FYTXVYMlp2Y25kaGNtUnpXMlp5YjIxZE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNCZmRHaHBjeTVmWm05eWQyRnlaSE5iWm5KdmJWMGdQU0J5WldaRGIzVnVkRHRjYmlBZ0lIMWNibHh1SUNBZ2NtVm1RMjkxYm5RdVkyOTFiblJsY2lzck8xeHVJQ0FnY21WMGRYSnVJSEpsWmtOdmRXNTBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGa1pITWdZU0JtYjNKM1lYSmtJR3hwYzNSbGJtVnlJR1p2Y2lCaElHMWxjM05oWjJVZ1pHVnpkR2x1WVhScGIyNHVJRVYyWlhKNUlHMWxjM05oWjJVZ2NtVmhZMmhwYm1jZ1lXNGdZV1JrY21WemN5QjNhV3hzSUdKbElHRnNjMjhnYzJWdWRDQjBieUIwYUdVZ1ptOXlkMkZ5WkNCaFpHUnlaWE56TGx4dUlDQWdLaUJBY0dGeVlXMGdlMVZTVEgwZ1puSnZiU0JOWlhOellXZGxJR1JsYzNScGJtRjBhVzl1TENCcGRDZHpJR0ZqZEhWaGJHeDVJSFJvWlNCbWFXVnNaQ0JjSW5SdlhDSWdiMllnZEdobElHMWxjM05oWjJVdVhHNGdJQ0FxSUVCd1lYSmhiU0I3VlZKTWZTQjBieUFnSUVadmNuZGhjbVFnWVdSa2NtVnpjeTVjYmlBZ0lDb3ZYRzRnSUNCaFpHUkdiM0ozWVhKa0tHWnliMjBzSUhSdktTQjdYRzRnSUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbUZrWkV4cGMzUmxibVZ5S0daeWIyMHNJQ2h0YzJjcElEMCtJSHRjYmlBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblRVSXRSazlTVjBGU1JEb2dLQ0FuSUNzZ1puSnZiU0FySUNjZ2RHOGdKeUFySUhSdklDc2dKeUFwSnlrN1hHNGdJQ0FnSUNBZ1gzUm9hWE11Wm05eWQyRnlaQ2gwYnl3Z2JYTm5LVHRjYmlBZ0lDQWdmU2s3WEc0Z0lDQjlYRzVjYmlBZ0lDOHFLbHh1SUNBZ0lDb2dTblZ6ZENCbWIzSjNZWEprSjNNZ1lTQnRaWE56WVdkbElIUnZJSFJvWlNCbWIzSjNZWEprSUdGa1pISmxjM011SUV4cGMzUmxibVZ5Y3lCemFHOTFiR1FnWW1VZ1lYWmhhV3hoWW14bElHWnZjaUIwYUdVZ1ptOXlkMkZ5WkNCaFpHUnlaWE56TGx4dUlDQWdJQ29nUUhCaGNtRnRJQ0I3VlZKTWZTQjFjbXdnUm05eWQyRnlaQ0JoWkdSeVpYTnpMbHh1SUNBZ0lDb2dRSEJoY21GdElDQjdUV1Z6YzJGblpYMGdiWE5uSUUxbGMzTmhaMlVnZEc4Z1ptOXlkMkZ5WkZ4dUlDQWdJQ292WEc0Z0lDQm1iM0ozWVhKa0tIVnliQ3dnYlhObktTQjdYRzRnSUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNBZ2JHVjBJR2wwWlcxTWFYTjBJRDBnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5OYmRYSnNYVHRjYmlBZ0lDQWdhV1lnS0dsMFpXMU1hWE4wS1NCN1hHNGdJQ0FnSUNBZ1gzUm9hWE11WDNCMVlteHBjMmhQYmlocGRHVnRUR2x6ZEN3Z2JYTm5LVHRjYmlBZ0lDQWdmVnh1SUNBZ2ZWeHVYRzRnSUNBdkwyUmxabUYxYkhRZ2NtOTFkR1VzSUdsbUlIUm9aWEpsSUdGeVpTQnVieUJzYVhOMFpXNWxjbk1nWVhaaGFXeGhZbXhsSUdadmNpQmhJRzFsYzNOaFoyVWdaR1Z6ZEdsdVlYUnBiMjR1WEc0Z0lDQmZiMjVRYjNOMFRXVnpjMkZuWlNodGMyY3BJSHRjYmlBZ0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lDQXZMM0psYzI5c2RtVWdaWGgwWlhKdVlXd2djSEp2ZEc5emRIVmlMaTR1WEc0Z0lDQWdJRjkwYUdsekxsOXlaV2RwYzNSeWVTNXlaWE52YkhabEtHMXpaeTUwYnlrdWRHaGxiaWdvY205MWRHVXBJRDArSUh0Y2JpQWdJQ0FnSUNCZmRHaHBjeTVtYjNKM1lYSmtLSEp2ZFhSbExDQnRjMmNwTzF4dUlDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsS1NCN1hHNGdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMUpGVTA5TVZrVXRSVkpTVDFJNklDY3NJR1VwTzF4dUlDQWdJQ0I5S1R0Y2JpQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1RXVnpjMkZuWlVKMWN6dGNiaUlzSWk4cUtseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRUZ3YVhwbFpWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh1S2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUtseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1S2x4dUtpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0cUtpOWNibHh1THlvcVhHNHFJRUJoZFhSb2IzSWdiV2xqWVdWc2NHVmtjbTl6WVVCbmJXRnBiQzVqYjIxY2Jpb2dVMlZ4ZFdWdVkybGhiQ0J3Y205alpYTnpiM0lnYjJZZ2JXVjBhRzlrY3k0Z1UybHRhV3hoY2lCMGJ5Qm9iM2NnVTJWeGRXVnVkR2xoYkNCUWNtOXRhWE5sSjNNZ2QyOXlheXdnWW5WMElHSmxkSFJsY2lCbWFYUWdabTl5SUcxbGMzTmhaMlVnY0hKdlkyVnpjMmx1Wnk1Y2Jpb2dUbTl5YldGc0lIVnpaU0JtYjNJZ2RHaHBjeXdnYVhNZ2RHOGdhVzUwWlhKalpYQjBJR0ZzYkNCdFpYTnpZV2RsY3lCM2FYUm9JR052Ym1acFozVnlaV1FnYUdGdVpHeGxjbk1zSUdGdVpDQmhZM1FnWVdOamIzSmthVzVuYkhrdVhHNHFMMXh1WTJ4aGMzTWdVR2x3Wld4cGJtVWdlMXh1SUNBdktpQndkV0pzYVdOY2JpQWdJQ0JvWVc1a2JHVnljem9nS0NoUWFYQmxRMjl1ZEdWNGRDa2dQVDRnZG05cFpDbGJYVnh1SUNBZ0lHOXVSbUZwYkRvZ0tHVnljbTl5S1NBOVBpQjJiMmxrWEc0Z0lDb3ZYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9YMjl1Um1GcGJDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCZmRHaHBjeTVvWVc1a2JHVnljeUE5SUZ0ZE8xeHVJQ0FnSUY5MGFHbHpMbTl1Um1GcGJDQTlJRjl2YmtaaGFXdzdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1elpYSjBJR0VnYldWemMyRm5aU0JwYmlCMGFHVWdjR2x3Wld4cGJtVWdjWFZsZFdVdUlFRnNiQ0J0WlhOellXZGxjeUJoY21VZ2QzSmhjSEJsWkNCM2FYUm9JR0VnVUdsd1pVTnZiblJsZUhRdVhHNGdJQ0FxSUVCd1lYSmhiU0FnZTAxbGMzTmhaMlY5SUcxelp5QWdJQ0FnSUNCTlpYTnpZV2RsSUdadmNpQjBhR1VnY1hWbGRXVmNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1EyRnNiR0poWTJ0OUlHOXVSR1ZzYVhabGNpQlhhR1Z1SUcxbGMzTmhaMlVnYVhNZ1ptbHVhWE5vWldRZ2NISnZZMlZ6YzJsdVp5Qm1jbTl0SUdGc2JDQm9ZVzVrYkdWeWN5d2dhWFFnZDJsc2JDQmlaU0JrWld4cGRtVnlaV1FnYVc0Z2RHaHBjeUJqWVd4c1ltRmpheTVjYmlBZ0lDb3ZYRzRnSUhCeWIyTmxjM01vYlhObkxDQnZia1JsYkdsMlpYSXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2FXWWdLRjkwYUdsekxtaGhibVJzWlhKekxteGxibWQwYUNBK0lEQXBJSHRjYmlBZ0lDQWdJR3hsZENCcGRHVnlJRDBnYm1WM0lFbDBaWEpoZEc5eUtGOTBhR2x6TG1oaGJtUnNaWEp6S1R0Y2JpQWdJQ0FnSUdsMFpYSXVibVY0ZENodVpYY2dVR2x3WlVOdmJuUmxlSFFvWDNSb2FYTXNJR2wwWlhJc0lHMXpaeXdnYjI1RVpXeHBkbVZ5S1NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJRzl1UkdWc2FYWmxjaWh0YzJjcE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlvZ1FHRjFkR2h2Y2lCdGFXTmhaV3h3WldSeWIzTmhRR2R0WVdsc0xtTnZiVnh1S2lCWGNtRndjR1Z5SUdGeWIzVnVaQ0JoSUcxbGMzTmhaMlVnZEdoaGRDQmhaR1J6SUdGamRHbHZibk1nZEdoaGRDQmpZVzRnWW1VZ1ptbHlaV1FnWW5rZ1lXNTVJR2x1ZEdWeVkyVndkRzl5SUdoaGJtUnNaWEl1WEc0cUlGUm9aU0JRYVhCbGJHbHVaU0JwY3lCaGMzbHVZMmh5YjI1dmRYTXNJSE52SUdGdUlHaGhibVJzWlhJZ2MyaHZkV3hrSUdGc2QyRjVjeUJqWVd4c0lHRnVJR0ZqZEdsdmJpd2dkR2hsSUdSbFptRjFiSFFnYjI1bElHbHpJRndpYm1WNGRDZ3BYQ0pjYmlvdlhHNWpiR0Z6Y3lCUWFYQmxRMjl1ZEdWNGRDQjdYRzRnSUM4cUlIQnlhWFpoZEdWY2JpQWdJQ0JmYVc1VGRHOXdPaUJpYjI5c1pXRnVYRzVjYmlBZ0lDQmZjR2x3Wld4cGJtVTZJRkJwY0dWc2FXNWxYRzRnSUNBZ1gybDBaWEk2SUVsMFpYSmhkRzl5WEc0Z0lDQWdYMjF6WnpvZ1RXVnpjMkZuWlZ4dUlDQXFMMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLSEJwY0dWc2FXNWxMQ0JwZEdWeUxDQnRjMmNzSUc5dVJHVnNhWFpsY2lrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZhVzVUZEc5d0lEMGdabUZzYzJVN1hHNWNiaUFnSUNCZmRHaHBjeTVmY0dsd1pXeHBibVVnUFNCd2FYQmxiR2x1WlR0Y2JpQWdJQ0JmZEdocGN5NWZhWFJsY2lBOUlHbDBaWEk3WEc0Z0lDQWdYM1JvYVhNdVgyMXpaeUE5SUcxelp6dGNiaUFnSUNCZmRHaHBjeTVmYjI1RVpXeHBkbVZ5SUQwZ2IyNUVaV3hwZG1WeU8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUhCcGNHVnNhVzVsS0NrZ2V5QnlaWFIxY200Z2RHaHBjeTVmY0dsd1pXeHBibVU3SUgxY2JseHVJQ0JuWlhRZ2JYTm5LQ2tnZXlCeVpYUjFjbTRnZEdocGN5NWZiWE5uT3lCOVhHNGdJSE5sZENCdGMyY29hVzVOYzJjcElIc2dkR2hwY3k1ZmJYTm5JRDBnYVc1TmMyYzdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVSEp2WTJWbFpDQjBieUIwYUdVZ2JtVjRkQ0JwYm5SbGNtTmxjSFJ2Y2lCb1lXNWtiR1Z5TENCMWJteGxjM01nZEdobGNtVWdkMkZ6SUdGdUlHVnljbTl5TGlCSlppQnBkQ2R6SUhSb1pTQnNZWE4wSUc5dVpTd2djSEp2WTJWbFpDQjBieUJ2YmtSbGJHbDJaWElnYUdGdVpHeGxjaTVjYmlBZ0lDb3ZYRzRnSUc1bGVIUW9LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHbG1JQ2doWDNSb2FYTXVYMmx1VTNSdmNDa2dlMXh1SUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbDlwZEdWeUxtaGhjMDVsZUhRcElIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgybDBaWEl1Ym1WNGRDaGZkR2hwY3lrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmYjI1RVpXeHBkbVZ5S0Y5MGFHbHpMbDl0YzJjcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlFjbTlqWldWa0lHUnBjbVZqZEd4NUlIUnZJSFJvWlNCdmJrUmxiR2wyWlhJZ2FHRnVaR3hsY2l3Z2RXNXNaWE56SUhSb1pYSmxJSGRoY3lCaGJpQmxjbkp2Y2k1Y2JpQWdJQ292WEc0Z0lHUmxiR2wyWlhJb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JwWmlBb0lWOTBhR2x6TGw5cGJsTjBiM0FwSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlwYmxOMGIzQWdQU0IwY25WbE8xeHVJQ0FnSUNBZ1gzUm9hWE11WDI5dVJHVnNhWFpsY2loZmRHaHBjeTVmYlhObktUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dUV0Z5YXlCMGFHVWdZMjl1ZEdWNGRDQjNhWFJvSUdGdUlHVnljbTl5SUdGdVpDQndjbTlqWldWa0lIUnZJSFJvWlNCdmJrWmhhV3dnYUdGdVpHeGxjaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdXM1I1Y0dWZGZTQmxjbkp2Y2lCYlpHVnpZM0pwY0hScGIyNWRYRzRnSUNBcUwxeHVJQ0JtWVdsc0tHVnljbTl5S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR2xtSUNnaFgzUm9hWE11WDJsdVUzUnZjQ2tnZTF4dUlDQWdJQ0FnWDNSb2FYTXVYMmx1VTNSdmNDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNCcFppQW9YM1JvYVhNdVgzQnBjR1ZzYVc1bExtOXVSbUZwYkNrZ2UxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmNHbHdaV3hwYm1VdWIyNUdZV2xzS0dWeWNtOXlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1WTJ4aGMzTWdTWFJsY21GMGIzSWdlMXh1SUNBdktpQndjbWwyWVhSbFhHNGdJQ0FnWDJsdVpHVjRPaUJ1ZFcxaVpYSmNiaUFnSUNCZllYSnlZWGs2SUZ0ZFhHNGdJQ292WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvWVhKeVlYa3BJSHRjYmlBZ0lDQjBhR2x6TGw5cGJtUmxlQ0E5SUMweE8xeHVJQ0FnSUhSb2FYTXVYMkZ5Y21GNUlEMGdZWEp5WVhrN1hHNGdJSDFjYmx4dUlDQm5aWFFnYUdGelRtVjRkQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFXNWtaWGdnUENCMGFHbHpMbDloY25KaGVTNXNaVzVuZEdnZ0xTQXhPMXh1SUNCOVhHNWNiaUFnWjJWMElHNWxlSFFvS1NCN1hHNGdJQ0FnZEdocGN5NWZhVzVrWlhnckt6dGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZZWEp5WVhsYmRHaHBjeTVmYVc1a1pYaGRPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRkJwY0dWc2FXNWxPMXh1SWl3aUx5b3FYRzRxSUVOc1lYTnpJSGRwZEdnZ2RHaGxJR055ZVhCMGIyZHlZWEJvYVdNZ1puVnVZM1JwYjI1eklHWnZjaUIwYUdVZ1lYVjBhR1Z1ZEdsallYUnBiMjRnY0hKdmRHOWpiMnhjYmlwY2Jpb3ZYRzVqYkdGemN5QkRjbmx3ZEc4Z2UxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJR1Z1WTI5a1pTQmhJR0o1ZEdWQmNuSmhlU0IyWVd4MVpTQnBiaUJpWVhObElEWTBJR1Z1WTI5a1pWeHVJQ0FxSUVCd1lYSmhiU0FnSUh0aWVYUmxRWEp5WVhsOUlDQWdJSFpoYkhWbElDQWdJR0o1ZEdWQmNuSmhlU0IyWVd4MVpWeHVJQ0FxSUVCeVpYUjFjbTRnSUh0emRISnBibWQ5SUNBZ1pXNWpiMlJsWkNCMllXeDFaVnh1SUNBcUwxeHVJQ0JsYm1OdlpHVW9kbUZzZFdVcElIdGNiaUFnSUNCeVpYUjFjbTRnWW5SdllTaDJZV3gxWlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQmtaV052WkdVZ1lTQmlZWE5sTmpRZ2RtRnNkV1VnYVc0Z1lTQnVaWGNnVldsdWREaEJjbkpoZVZ4dUlDQXFJRUJ3WVhKaGJTQWdJSHR6ZEhKcGJtZDlJQ0FnSUhaaGJIVmxJQ0FnSUhaaGJIVmxJR1Z1WTI5a1pXUWdhVzRnWW1GelpTQTJORnh1SUNBcUlFQnlaWFIxY200Z0lIdGllWFJsUVhKeVlYbDlJR1JsWTI5a1pXUldZV3gxWlZ4dUlDQXFMMXh1SUNCa1pXTnZaR1VvZG1Gc2RXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRlZwYm5RNFFYSnlZWGtvU2xOUFRpNXdZWEp6WlNnbld5Y2dLeUJoZEc5aUtIWmhiSFZsS1NBcklDZGRKeWtwTzF4dUlDQjlYRzVjYmlBZ1pXNWpjbmx3ZEZKVFFTaHdkV0pMWlhrc0lHUmhkR0VwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdYM1JvYVhNdVgybHRjRzl5ZEZKVFFXVnVZM0o1Y0hSTFpYa29ibVYzSUZWcGJuUTRRWEp5WVhrb2NIVmlTMlY1S1NrdWRHaGxiaWhtZFc1amRHbHZiaWh3ZFdKc2FXTkxaWGtwSUh0Y2JseHVJQ0FnSUNBZ0lDQmpjbmx3ZEc4dWMzVmlkR3hsTG1WdVkzSjVjSFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUNkU1UwRXRUMEZGVUNkY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndkV0pzYVdOTFpYa3NJQzh2Wm5KdmJTQm5aVzVsY21GMFpVdGxlU0J2Y2lCcGJYQnZjblJMWlhrZ1lXSnZkbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0VnTHk5QmNuSmhlVUoxWm1abGNpQnZaaUJrWVhSaElIbHZkU0IzWVc1MElIUnZJR1Z1WTNKNWNIUmNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaGxibU55ZVhCMFpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkwzSmxkSFZ5Ym5NZ1lXNGdRWEp5WVhsQ2RXWm1aWElnWTI5dWRHRnBibWx1WnlCMGFHVWdaVzVqY25sd2RHVmtJR1JoZEdGY2JpQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkamNubHdkRzh0Wlc1amNubHdkRkpUUVNjc0lHNWxkeUJWYVc1ME9FRnljbUY1S0dWdVkzSjVjSFJsWkNrcE8xeHVJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9ibVYzSUZWcGJuUTRRWEp5WVhrb1pXNWpjbmx3ZEdWa0tTazdYRzVjYmlBZ0lDQWdJQ0FnZlNrdVkyRjBZMmdvWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxbGJtTnllWEIwVWxOQkp5d2daWEp5S1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdmU2s3WEc1Y2JpQWdmVnh1WEc0Z0lHUmxZM0o1Y0hSU1UwRW9jSEpwZGt0bGVTd2daR0YwWVNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0JmZEdocGN5NWZhVzF3YjNKMFVsTkJaR1ZqY25sd2RFdGxlU2h3Y21sMlMyVjVLUzUwYUdWdUtHWjFibU4wYVc5dUtIQnlhWFpoZEdWTFpYa3BJSHRjYmx4dUlDQWdJQ0FnSUNCamNubHdkRzh1YzNWaWRHeGxMbVJsWTNKNWNIUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJQ2RTVTBFdFQwRkZVQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtbDJZWFJsUzJWNUxDQXZMMlp5YjIwZ1oyVnVaWEpoZEdWTFpYa2diM0lnYVcxd2IzSjBTMlY1SUdGaWIzWmxYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhJQzh2UVhKeVlYbENkV1ptWlhJZ2IyWWdkR2hsSUdSaGRHRmNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaGtaV055ZVhCMFpXUXBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JrWldOeWVYQjBaV1JFWVhSaElEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1pHVmpjbmx3ZEdWa0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MWtaV055ZVhCMFVsTkJKeXdnWkdWamNubHdkR1ZrUkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2hrWldOeWVYQjBaV1JFWVhSaEtUdGNibHh1SUNBZ0lDQWdJQ0I5S1M1allYUmphQ2htZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFdSbFkzSjVjSFJTVTBFbkxDQmxjbklwTzF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0J6YVdkdVVsTkJLSEJ5YVhaTFpYa3NJR1JoZEdFcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnWDNSb2FYTXVYMmx0Y0c5eWRGSlRRWE5wWjI1TFpYa29jSEpwZGt0bGVTa3VkR2hsYmlobWRXNWpkR2x2Ymlod2NtbDJZWFJsUzJWNUtTQjdYRzVjYmlBZ0lDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNXphV2R1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblVsTkJVMU5CTFZCTFExTXhMWFl4WHpVblhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSEpwZG1GMFpVdGxlU3dnTHk5bWNtOXRJR2RsYm1WeVlYUmxTMlY1SUc5eUlHbHRjRzl5ZEV0bGVTQmhZbTkyWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgzVjBaamhGYm1OdlpHVW9aR0YwWVNrZ0x5OUJjbkpoZVVKMVptWmxjaUJ2WmlCa1lYUmhJSGx2ZFNCM1lXNTBJSFJ2SUhOcFoyNWNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHphV2R1WVhSMWNtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkwzSmxkSFZ5Ym5NZ1lXNGdRWEp5WVhsQ2RXWm1aWElnWTI5dWRHRnBibWx1WnlCMGFHVWdjMmxuYm1GMGRYSmxYRzRnSUNBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxYTnBaMjVTVTBFbkxDQnVaWGNnVldsdWREaEJjbkpoZVNoemFXZHVZWFIxY21VcEtUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzVsZHlCVmFXNTBPRUZ5Y21GNUtITnBaMjVoZEhWeVpTa3BPMXh1WEc0Z0lDQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dGMybG5ibEpUUVNjc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnZG1WeWFXWjVVbE5CS0hCMVlrdGxlU3dnWkdGMFlTd2djMmxuYm1GMGRYSmxLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5cGJYQnZjblJTVTBGMlpYSnBabmxMWlhrb2NIVmlTMlY1S1M1MGFHVnVLR1oxYm1OMGFXOXVLSEIxWW14cFkwdGxlU2tnZTF4dVhHNGdJQ0FnSUNBZ0lHTnllWEIwYnk1emRXSjBiR1V1ZG1WeWFXWjVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUFuVWxOQlUxTkJMVkJMUTFNeExYWXhYelVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NIVmliR2xqUzJWNUxDQXZMMlp5YjIwZ1oyVnVaWEpoZEdWTFpYa2diM0lnYVcxd2IzSjBTMlY1SUdGaWIzWmxYRzRnSUNBZ0lDQWdJQ0FnSUNCemFXZHVZWFIxY21Vc0lDOHZRWEp5WVhsQ2RXWm1aWElnYjJZZ2RHaGxJSE5wWjI1aGRIVnlaVnh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDNWMFpqaEZibU52WkdVb1pHRjBZU2tnTHk5QmNuSmhlVUoxWm1abGNpQnZaaUIwYUdVZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLR2x6ZG1Gc2FXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkwzSmxkSFZ5Ym5NZ1lTQmliMjlzWldGdUlHOXVJSGRvWlhSb1pYSWdkR2hsSUhOcFoyNWhkSFZ5WlNCcGN5QjBjblZsSUc5eUlHNXZkRnh1SUNBZ0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MTJaWEpwWm5sU1UwRW5MQ0JwYzNaaGJHbGtLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0dsemRtRnNhV1FwTzF4dVhHNGdJQ0FnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRkbVZ5YVdaNVVsTkJKeXdnWlhKeUtUdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmxibU55ZVhCMFFVVlRLR3RsZVN3Z1pHRjBZU3dnYVhZcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnWDNSb2FYTXVYMmx0Y0c5eWRFRkZVMnRsZVNoclpYa3BMblJvWlc0b1puVnVZM1JwYjI0b1lXVnpTMlY1S1NCN1hHNWNiaUFnSUNBZ0lDQWdZM0o1Y0hSdkxuTjFZblJzWlM1bGJtTnllWEIwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnVZVzFsT2lBblFVVlRMVU5DUXljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dlJHOXVKM1FnY21VdGRYTmxJR2x1YVhScFlXeHBlbUYwYVc5dUlIWmxZM1J2Y25NaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dlFXeDNZWGx6SUdkbGJtVnlZWFJsSUdFZ2JtVjNJR2wySUdWMlpYSjVJSFJwYldVZ2VXOTFjaUJsYm1OeWVYQjBJVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkam9nYVhaY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaWE5MWlhrc0lDOHZabkp2YlNCblpXNWxjbUYwWlV0bGVTQnZjaUJwYlhCdmNuUkxaWGtnWVdKdmRtVmNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDkxZEdZNFJXNWpiMlJsS0dSaGRHRXBJQzh2UVhKeVlYbENkV1ptWlhJZ2IyWWdaR0YwWVNCNWIzVWdkMkZ1ZENCMGJ5QmxibU55ZVhCMFhHNGdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b1pXNWpjbmx3ZEdWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUdGdUlFRnljbUY1UW5WbVptVnlJR052Ym5SaGFXNXBibWNnZEdobElHVnVZM0o1Y0hSbFpDQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMV1Z1WTNKNWNIUkJSVk1uTENCdVpYY2dWV2x1ZERoQmNuSmhlU2hsYm1OeWVYQjBaV1FwS1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHNWxkeUJWYVc1ME9FRnljbUY1S0dWdVkzSjVjSFJsWkNrcE8xeHVYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkamNubHdkRzh0Wlc1amNubHdkRUZGVXljc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWkdWamNubHdkRUZGVXloclpYa3NJR1JoZEdFc0lHbDJLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5cGJYQnZjblJCUlZOclpYa29hMlY1S1M1MGFHVnVLR1oxYm1OMGFXOXVLR0ZsYzB0bGVTa2dlMXh1WEc0Z0lDQWdJQ0FnSUdOeWVYQjBieTV6ZFdKMGJHVXVaR1ZqY25sd2RDaGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dKMEZGVXkxRFFrTW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkam9nYVhaY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaWE5MWlhrc0lDOHZabkp2YlNCblpXNWxjbUYwWlV0bGVTQnZjaUJwYlhCdmNuUkxaWGtnWVdKdmRtVmNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRWdMeTlCY25KaGVVSjFabVpsY2lCdlppQjBhR1VnWkdGMFlWeHVJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQzUwYUdWdUtHWjFibU4wYVc5dUtHUmxZM0o1Y0hSbFpDa2dlMXh1WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR1JsWTI5a1pXUkVZWFJoSUQwZ1gzUm9hWE11WDNWMFpqaEVaV052WkdVb2JtVjNJRlZwYm5RNFFYSnlZWGtvWkdWamNubHdkR1ZrS1NrN1hHNGdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFdSbFkzSjVjSFJCUlZNbkxDQmtaV052WkdWa1JHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoa1pXTnZaR1ZrUkdGMFlTazdYRzVjYmlBZ0lDQWdJQ0FnZlNrdVkyRjBZMmdvWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxa1pXTnllWEIwUVVWVEp5d2daWEp5S1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCamNtVmhkR1Z6SUdFZ2FHRnphQ0IxYzJsdVp5QjBhR1VnU0UxQlF5QmhiR2R2Y21sMGFHMWNiaUFnS2lCQWNHRnlZVzBnSUh0aWVYUmxRWEp5WVhsOUlDQWdJR3RsZVNBZ0lDQWdJQ0JyWlhrZ2RHOGdZbVVnZFhObFpDQnBiaUIwYUdVZ2FHMWhZMXh1SUNBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ0lDQWdJQ0JrWVhSaElDQWdJQ0FnSUdsdVptOXliV0YwYVc5dUlIUnZJR0psSUdoaGMyaGxaRnh1SUNBcUlFQnlaWFIxY200Z0lIdGllWFJsUVhKeVlYbDlJQ0FnYzJsbmJtRjBkWEpsSUNCeVpYTjFiSFJwYm1jZ2FHRnphRnh1SUNBcUwxeHVJQ0JvWVhOb1NFMUJReWhyWlhrc0lHUmhkR0VwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNjbVZxWldOMEtTQjdYRzVjYmlBZ0lDQWdJRjkwYUdsekxsOXBiWEJ2Y25SSVRVRkRhMlY1S0d0bGVTa3VkR2hsYmlobWRXNWpkR2x2Ymlob2JXRmpTMlY1S1NCN1hHNWNiaUFnSUNBZ0lDQWdZM0o1Y0hSdkxuTjFZblJzWlM1emFXZHVLRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtRnRaVG9nSjBoTlFVTW5YRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdodFlXTkxaWGtzSUM4dlpuSnZiU0JuWlc1bGNtRjBaVXRsZVNCdmNpQnBiWEJ2Y25STFpYa2dZV0p2ZG1WY2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDNWMFpqaEZibU52WkdVb1pHRjBZU2tnTHk5QmNuSmhlVUoxWm1abGNpQnZaaUJrWVhSaElIbHZkU0IzWVc1MElIUnZJSE5wWjI1Y2JpQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXVkR2hsYmlobWRXNWpkR2x2YmloemFXZHVZWFIxY21VcElIdGNiaUFnSUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dGFHRnphRWhOUVVNbkxDQnphV2R1WVhSMWNtVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OXlaWFIxY201eklHRnVJRUZ5Y21GNVFuVm1abVZ5SUdOdmJuUmhhVzVwYm1jZ2RHaGxJSE5wWjI1aGRIVnlaVnh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYm1WM0lGVnBiblE0UVhKeVlYa29jMmxuYm1GMGRYSmxLU2s3WEc1Y2JpQWdJQ0FnSUNBZ2ZTa3VZMkYwWTJnb1puVnVZM1JwYjI0b1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MW9ZWE5vU0UxQlF5Y3NJR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUIyWlhKcFptbGxjeUJoYmlCb1lYTm9JSFZ6YVc1bklIUm9aU0JJVFVGRElHRnNaMjl5YVhSb2JWeHVJQ0FxSUVCd1lYSmhiU0FnZTJKNWRHVkJjbkpoZVgwZ0lDQWdhMlY1SUNBZ0lDQWdJR3RsZVNCMGJ5QmlaU0IxYzJWa0lHbHVJSFJvWlNCb2JXRmpYRzRnSUNvZ1FIQmhjbUZ0SUNCN2MzUnlhVzVuZlNBZ0lDQWdJR1JoZEdFZ0lDQWdJQ0FnYVc1bWIzSnRZWFJwYjI0Z2RHOGdZbVVnYUdGemFHVmtJSFJ2SUdOdmJYQmhjbVZjYmlBZ0tpQkFjR0Z5WVcwZ0lIdGllWFJsUVhKeVlYbDlJQ0J6YVdkdVlYUjFjbVVnSUNCb1lYTm9JSFJ2SUdOdmJYQmhjbVVnZDJsMGFDQjBhR1VnY21WalpXbDJaV1FnWkdGMFlWeHVJQ0FxSUVCeVpYUjFjbTRnSUh0aWIyOXNaV0Z1ZlNBZ0lHbHpkbUZzYVdRZ0lDQWdJR0p2YjJ4bFlXNGdjMkY1YVc1bklHbG1JSFJvWlNCa1lYUmhJR052Y25KbGMzQnZibVJ6SUhSdklIUm9aU0JvWVhOb0lISmxZMlZwZG1Wa1hHNGdJQ292WEc0Z0lIWmxjbWxtZVVoTlFVTW9hMlY1TENCa1lYUmhMQ0J6YVdkdVlYUjFjbVVwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNjbVZxWldOMEtTQjdYRzVjYmlBZ0lDQWdJRjkwYUdsekxsOXBiWEJ2Y25SSVRVRkRhMlY1S0d0bGVTa3VkR2hsYmlobWRXNWpkR2x2Ymlob2JXRmpTMlY1S1NCN1hHNWNiaUFnSUNBZ0lDQWdZM0o1Y0hSdkxuTjFZblJzWlM1MlpYSnBabmtvWEc0Z0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dKMGhOUVVNblhHNGdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNCb2JXRmpTMlY1TENBdkwyWnliMjBnWjJWdVpYSmhkR1ZMWlhrZ2IzSWdhVzF3YjNKMFMyVjVJR0ZpYjNabFhHNGdJQ0FnSUNBZ0lDQWdjMmxuYm1GMGRYSmxMQ0F2TDBGeWNtRjVRblZtWm1WeUlHOW1JSFJvWlNCemFXZHVZWFIxY21WY2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmRYUm1PRVZ1WTI5a1pTaGtZWFJoS1NBdkwwRnljbUY1UW5WbVptVnlJRzltSUhSb1pTQmtZWFJoWEc0Z0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvYVhOMllXeHBaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZjbVYwZFhKdWN5QmhJR0p2YjJ4bFlXNGdiMjRnZDJobGRHaGxjaUIwYUdVZ2MybG5ibUYwZFhKbElHbHpJSFJ5ZFdVZ2IzSWdibTkwWEc0Z0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMWFpsY21sbWVVaE5RVU1uTENCcGMzWmhiR2xrS1R0Y2JpQWdJQ0FnSUNBZ0lDQW9hWE4yWVd4cFpDa2dQeUJ5WlhOdmJIWmxLR2x6ZG1Gc2FXUXBJRG9nY21WcVpXTjBLR2x6ZG1Gc2FXUXBPMXh1WEc0Z0lDQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9KMk55ZVhCMGJ5MTJaWEpwWm5sSVRVRkRKeXdnWlhKeUtUdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1oyVnVaWEpoZEdWeklHRWdVbE5CSUhCMVlteHBZeTl3Y21sMllYUmxJR3RsZVNCd1lXbHlJSGRwZEdnZ1lTQnRiMlIxYkhWeklHeGxibWQwYUNCdlppQXlNRFE0SUdKcGRITmNiaUFnS2lCQWNtVjBkWEp1SUNCN1NsTlBUbjBnSUNCclpYbFFZV2x5SUNBZ0lHcHpiMjRnWTI5dWRHRnBibWx1WnlCMGFHVWdjSFZpYkdsaklHRnVaQ0J3Y21sMllYUmxJR3RsZVhOY2JpQWdLaTljYmlBZ1oyVnVaWEpoZEdWU1UwRkxaWGxRWVdseUtDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnYkdWMElHdGxlVkJoYVhJZ1BTQjdmVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR055ZVhCMGJ5NXpkV0owYkdVdVoyVnVaWEpoZEdWTFpYa29YRzRnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJRzVoYldVNklDZFNVMEV0VUZOVEp5eGNiaUFnSUNBZ0lDQWdiVzlrZFd4MWMweGxibWQwYURvZ01qQTBPQ3dnTHk5allXNGdZbVVnTVRBeU5Dd2dNakEwT0N3Z2IzSWdOREE1Tmx4dUlDQWdJQ0FnSUNCd2RXSnNhV05GZUhCdmJtVnVkRG9nYm1WM0lGVnBiblE0UVhKeVlYa29XekI0TURFc0lEQjRNREFzSURCNE1ERmRLU3hjYmlBZ0lDQWdJQ0FnYUdGemFEb2dlMjVoYldVNklDZFRTRUV0TWpVMkozMGdMeTlqWVc0Z1ltVWdKMU5JUVMweEp5d2dKMU5JUVMweU5UWW5MQ0FuVTBoQkxUTTROQ2NzSUc5eUlDZFRTRUV0TlRFeUoxeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIUnlkV1VzSUM4dmQyaGxkR2hsY2lCMGFHVWdhMlY1SUdseklHVjRkSEpoWTNSaFlteGxJQ2hwTG1VdUlHTmhiaUJpWlNCMWMyVmtJR2x1SUdWNGNHOXlkRXRsZVNsY2JpQWdJQ0FnSUZzbmMybG5iaWNzSUNkMlpYSnBabmtuWFNBdkwyTmhiaUJpWlNCaGJua2dZMjl0WW1sdVlYUnBiMjRnYjJZZ0ozTnBaMjRuSUdGdVpDQW5kbVZ5YVdaNUoxeHVYRzRnSUNBZ0lDQXBMblJvWlc0b1puVnVZM1JwYjI0b2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUM4dmNtVjBkWEp1Y3lCaElHdGxlWEJoYVhJZ2IySnFaV04wWEc0Z0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29hMlY1S1R0Y2JseHVJQ0FnSUNBZ0lDQmpjbmx3ZEc4dWMzVmlkR3hsTG1WNGNHOXlkRXRsZVNoY2JpQWdJQ0FnSUNBZ0lDQW5jM0JyYVNjc0lDOHZZMkZ1SUdKbElDZHFkMnNuSUNod2RXSnNhV01nYjNJZ2NISnBkbUYwWlNrc0lDZHpjR3RwSnlBb2NIVmliR2xqSUc5dWJIa3BMQ0J2Y2lBbmNHdGpjemduSUNod2NtbDJZWFJsSUc5dWJIa3BYRzRnSUNBZ0lDQWdJQ0FnYTJWNUxuQjFZbXhwWTB0bGVTQXZMMk5oYmlCaVpTQmhJSEIxWW14cFkwdGxlU0J2Y2lCd2NtbDJZWFJsUzJWNUxDQmhjeUJzYjI1bklHRnpJR1Y0ZEhKaFkzUmhZbXhsSUhkaGN5QjBjblZsWEc0Z0lDQWdJQ0FnSUNrdWRHaGxiaWhtZFc1amRHbHZiaWh3ZFdKc2FXTkxaWGtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMM0psZEhWeWJuTWdkR2hsSUdWNGNHOXlkR1ZrSUd0bGVTQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ2EyVjVVR0ZwY2k1d2RXSnNhV01nSUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvY0hWaWJHbGpTMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kzSjVjSFJ2TG5OMVluUnNaUzVsZUhCdmNuUkxaWGtvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5jR3RqY3pnbkxDQXZMMk5oYmlCaVpTQW5hbmRySnlBb2NIVmliR2xqSUc5eUlIQnlhWFpoZEdVcExDQW5jM0JyYVNjZ0tIQjFZbXhwWXlCdmJteDVLU3dnYjNJZ0ozQnJZM000SnlBb2NISnBkbUYwWlNCdmJteDVLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2EyVjVMbkJ5YVhaaGRHVkxaWGtnTHk5allXNGdZbVVnWVNCd2RXSnNhV05MWlhrZ2IzSWdjSEpwZG1GMFpVdGxlU3dnWVhNZ2JHOXVaeUJoY3lCbGVIUnlZV04wWVdKc1pTQjNZWE1nZEhKMVpWeHVJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRvY0hKcGRtRjBaVXRsZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR3RsZVZCaGFYSXVjSEpwZG1GMFpTQWdQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHdjbWwyWVhSbFMyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2RqY25sd2RHOHRaMlZ1WlhKaGRHVlNVMEZMWlhsUVlXbHlKeXdnYTJWNVVHRnBjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHdGxlVkJoYVhJcE8xeHVYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtHVnljaWs3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJIWlc1bGNtRjBaWE1nWVNBeE1qZ2dZbWwwSUhKaGJtUnZiU0IyWVd4MVpTNWNiaUFnS2lCQWNtVjBkWEp1SUh0aWVYUmxRWEp5WVhsOUlDQmhjbkpoZVNBZ0lDQnlZVzVrYjIwZ2RtRnNkV1ZjYmlBZ0tpOWNiaUFnWjJWdVpYSmhkR1ZKVmlncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHRnljbUY1SUQwZ2JtVjNJQ0JWYVc1ME9FRnljbUY1S0RFMktUdGNiaUFnSUNCamNubHdkRzh1WjJWMFVtRnVaRzl0Vm1Gc2RXVnpLR0Z5Y21GNUtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCaGNuSmhlVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUVkbGJtVnlZWFJsY3lCaElESTFOaUJpYVhRZ2NtRnVaRzl0SUhaaGJIVmxMaUF6TWlCaWFYUnpJR0Z5WlNCbGVIUnlZWFJsWkNCbWNtOXRJSFJvWlNCdFlXTm9hVzVsSUhScGJXVXNYRzRnSUNvZ2RHaGxJSEpsYldGcGJtbHVaeUJoY21VZ1oyVnVaWEpoZEdWa0lISmhibVJ2Yld4NVhHNGdJQ29nUUhKbGRIVnliaUI3WW5sMFpVRnljbUY1ZlNBZ1lYSnlZWGtnSUNBZ2NtRnVaRzl0SUhaaGJIVmxYRzRnSUNvdlhHNGdJR2RsYm1WeVlYUmxVbUZ1Wkc5dEtDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdZWEp5WVhrZ1BTQnVaWGNnSUZWcGJuUTRRWEp5WVhrb016SXBPMXh1SUNBZ0lHTnllWEIwYnk1blpYUlNZVzVrYjIxV1lXeDFaWE1vWVhKeVlYa3BPMXh1WEc0Z0lDQWdiR1YwSUdSaGRHVWdQU0JFWVhSbExtNXZkeWdwTzF4dUlDQWdJR3hsZENCa1lYUmxSVzVqYjJSbFpDQTlJRjkwYUdsekxsOTFkR1k0Ulc1amIyUmxLR1JoZEdVcE8xeHVYRzRnSUNBZ0x5OWxlSFJ5WVdOMElIUm9aU0JzWldGemRDQnphV2R1YVdacFkyRnVkQ0EwSUdKNWRHVnpJR2x1SUhSb1pTQmtZWFJsWEc0Z0lDQWdiR1YwSUdacGJtRnNSR0YwWlNBOUlHUmhkR1ZGYm1OdlpHVmtMbk5zYVdObEtHUmhkR1ZGYm1OdlpHVmtMbXhsYm1kMGFDQXRJRFFzSUdSaGRHVkZibU52WkdWa0xteGxibWQwYUNrN1hHNWNiaUFnSUNBdkx5QmhaR1FnYVc0Z2RHaGxJR1pwY25OMElEUWdZbmwwWlhNZ2IyWWdkR2hsSUdGeWNtRjVJSFJvWlNCaWVYUmxjeUJsZUhSeVlXTjBaV1FnY0hKbGRtbHZkWE5zZVR0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SURRN0lHa3JLeWtnZXlCaGNuSmhlVnRwWFNBOUlHWnBibUZzUkdGMFpWdHBYVHNnZlZ4dUlDQWdJSEpsZEhWeWJpQmhjbkpoZVR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlHZGxibVZ5WVhSbGN5QmhJSEJ5WlcxaGMzUmxjaUJ6WldOeVpYUWdLRkJOVXlrZ2IyWWdORGdnWW5sMFpYTWdLRE00TkNCaWFYUnpLU0J5WVc1a2IyMXNlVnh1SUNBcUlFQnlaWFIxY200Z2UySjVkR1ZCY25KaGVYMGdJR0Z5Y21GNUlDQWdJSEJ5WlcxaGMzUmxjaUJ6WldOeVpYUWdhMlY1WEc0Z0lDb3ZYRzRnSUdkbGJtVnlZWFJsVUUxVEtDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdZWEp5WVhrZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNnME9DazdYRzRnSUNBZ1kzSjVjSFJ2TG1kbGRGSmhibVJ2YlZaaGJIVmxjeWhoY25KaGVTazdYRzRnSUNBZ2NtVjBkWEp1SUdGeWNtRjVPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nWjJWdVpYSmhkR1Z6SUdFZ2JXRnpkR1Z5UzJWNUlITmxZM0psZENBb1VFMVRLU0J2WmlBME9DQmllWFJsY3lBb016ZzBJR0pwZEhNcElIVnphVzVuSUhSb1pTQndjbVZ0WVhOMFpYSWdjMlZqY21WMElHRnVaRnh1SUNBcUlIUjNieUJ5WVc1a2IyMXpYRzRnSUNvZ1FISmxkSFZ5YmlCN1lubDBaVUZ5Y21GNWZTQWdZWEp5WVhrZ0lDQWdiV0Z6ZEdWeUlITmxZM0psZENCclpYa2dkMmwwYUNBME9DQmllWFJsYzF4dUlDQXFMMXh1SUNCblpXNWxjbUYwWlUxaGMzUmxjbE5sWTNKbGRDaG9iV0ZqUzJWNUxDQmtZWFJoS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR3hsZENCclpYa2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTZzBPQ2s3WEc0Z0lDQWdJQ0JzWlhRZ2MyVmxaQ0E5SUdSaGRHRTdYRzVjYmlBZ0lDQWdJRjkwYUdsekxsOWthV2RsYzNRb2FHMWhZMHRsZVNrdWRHaGxiaWdvWkdsblpYTjBaV1JMWlhrcElEMCtJSHRjYmx4dUlDQWdJQ0FnSUNCZmRHaHBjeTVvWVhOb1NFMUJReWhrYVdkbGMzUmxaRXRsZVN3Z2MyVmxaQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaHJaWGx3WVhKME1Da2dlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OWpiM0I1SUhSb1pTQm1hWEp6ZENBek1pQmllWFJsY3lCcGJuUnZJSFJvWlNCclpYbGNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SURNeU95QnBLeXNwSUhzZ2EyVjVXMmxkSUQwZ2EyVjVjR0Z5ZERCYmFWMDdJSDFjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVhR0Z6YUVoTlFVTW9aR2xuWlhOMFpXUkxaWGtzSUhObFpXUWdLeUJyWlhsd1lYSjBNQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmloclpYbHdZWEowTVNrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnTHk5amIzQjVJSFJvWlNCbWFYSnpkQ0F4TmlCaWVYUmxjeUIwYnlCMGFHVWdhMlY1SUhKbGJXRnBibWx1WnlBeE5pQmllWFJsYzF4dUlDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dNVFk3SUdrckt5a2dleUJyWlhsYmFTQXJJRE15WFNBOUlHdGxlWEJoY25ReFcybGRPeUI5WEc0Z0lDQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMV2RsYm1WeVlYUmxUV0Z6ZEdWeVUyVmpjbVYwSnl3Z2EyVjVLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0d0bGVTazdYRzVjYmlBZ0lDQWdJQ0FnZlNrdVkyRjBZMmdvWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxblpXNWxjbUYwWlUxaGMzUmxjbE5sWTNKbGRDY3NJR1Z5Y2lrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUdkbGJtVnlZWFJsY3lCaWIzUm9JSFZ6WlhKeklFMUJReUJoYm1RZ1pXNWpjbmx3ZEdsdmJpQnJaWGx6TGlCblpXNWxjbUYwWlNCaGN5QnZkWFJ3ZFhRZ1lXNGdZWEp5WVhsY2JpQWdLaUIzYVhSb0lEUWdZbmwwWlVGeWNtRjVJR1ZoWTJnZ2QybDBhQ0F6TWlCaWVYUmxjMXh1SUNBcUlFQndZWEpoYlNBZ2UySjVkR1ZCY25KaGVYMGdJQ0FnSUNBZ0lITmxZM0psZENBZ0lDQWdJQ0J6WldOeVpYUWdkRzhnWW1VZ2RYTmxaQ0JwYmlCMGFHVWdTRTFCUXlCbWRXNWpkR2x2Ymx4dUlDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJQ0FnSUNBZ0lDQWdJR1JoZEdFZ0lDQWdJQ0FnSUNCcGJtWnZjbTFoZEdsdmJpQjBieUJpWlNCMWMyVmtJR0Z6SUhObFpXUmNiaUFnS2lCQWNtVjBkWEp1SUh0QmNuSmhlVHhpZVhSbFFYSnlZWGsrZlNCclpYa2dJQ0FnSUNBZ0lDQWdZWEp5WVhrZ2QybDBhQ0IwYUdVZ2FXNW1iM0p0WVhScGIyNGdkRzhnWjJWdVpYSmhkR1VnYTJWNWMxeHVJQ0FxTDF4dUlDQm5aVzVsY21GMFpVdGxlWE1vYUcxaFkwdGxlU3dnWkdGMFlTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNWNiaUFnSUNBZ0lHeGxkQ0JyWlhrZ1BTQmJYVHRjYmlBZ0lDQWdJR3hsZENCelpXVmtJRDBnWkdGMFlUdGNibHh1SUNBZ0lDQWdMeThnYVhSbGNtRjBaU0EwSUhScGJXVnpJSFJ2SUc5aWRHRnBiaUJoSURFd01qUWdhMlY1SUhOcGVtVmNiaUFnSUNBZ0lGOTBhR2x6TG1oaGMyaElUVUZES0dodFlXTkxaWGtzSUhObFpXUXBMblJvWlc0b1puVnVZM1JwYjI0b2EyVjVjR0Z5ZERBcElIdGNiaUFnSUNBZ0lDQWdhMlY1TG5CMWMyZ29hMlY1Y0dGeWREQXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdWFHRnphRWhOUVVNb2FHMWhZMHRsZVN3Z2MyVmxaQ0FySUd0bGVYQmhjblF3S1R0Y2JseHVJQ0FnSUNBZ2ZTa3VkR2hsYmlobWRXNWpkR2x2YmloclpYbHdZWEowTVNrZ2UxeHVJQ0FnSUNBZ0lDQnJaWGt1Y0hWemFDaHJaWGx3WVhKME1TazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1b1lYTm9TRTFCUXlob2JXRmpTMlY1TENCelpXVmtJQ3NnYTJWNWNHRnlkREVwTzF4dVhHNGdJQ0FnSUNCOUtTNTBhR1Z1S0daMWJtTjBhVzl1S0d0bGVYQmhjblF5S1NCN1hHNGdJQ0FnSUNBZ0lHdGxlUzV3ZFhOb0tHdGxlWEJoY25ReUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1oaGMyaElUVUZES0dodFlXTkxaWGtzSUhObFpXUWdLeUJyWlhsd1lYSjBNaWs3WEc1Y2JpQWdJQ0FnSUgwcExuUm9aVzRvWm5WdVkzUnBiMjRvYTJWNWNHRnlkRE1wSUh0Y2JpQWdJQ0FnSUNBZ2EyVjVMbkIxYzJnb2EyVjVjR0Z5ZERNcE8xeHVYRzRnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyTnllWEIwYnkxblpXNWxjbUYwWlV0bGVYTW5MQ0JyWlhrcE8xeHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtHdGxlU2s3WEc1Y2JpQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZGpjbmx3ZEc4dFoyVnVaWEpoZEdWTFpYbHpKeXdnWlhKeUtUdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtHVnljaWs3WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWhvYldGalMyVjVMQ0JrWVhSaEtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJRjlwYlhCdmNuUlNVMEZ6YVdkdVMyVjVLSEJ5YVhaTFpYa3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ1kzSjVjSFJ2TG5OMVluUnNaUzVwYlhCdmNuUkxaWGtvWEc0Z0lDQWdJQ0FnSUNBZ0ozQnJZM000Snl3Z0x5OWpZVzRnWW1VZ0oycDNheWNnS0hCMVlteHBZeUJ2Y2lCd2NtbDJZWFJsS1N3Z0ozTndhMmtuSUNod2RXSnNhV01nYjI1c2VTa3NJRzl5SUNkd2EyTnpPQ2NnS0hCeWFYWmhkR1VnYjI1c2VTbGNiaUFnSUNBZ0lDQWdJQ0J3Y21sMlMyVjVMRnh1SUNBZ0lDQWdJQ0FnSUhzZ0lDQXZMM1JvWlhObElHRnlaU0IwYUdVZ1lXeG5iM0pwZEdodElHOXdkR2x2Ym5OY2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklDZFNVMEZUVTBFdFVFdERVekV0ZGpGZk5TY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCb1lYTm9PaUI3Ym1GdFpUb2dKMU5JUVMweU5UWW5mU0F2TDJOaGJpQmlaU0FuVTBoQkxURW5MQ0FuVTBoQkxUSTFOaWNzSUNkVFNFRXRNemcwSnl3Z2IzSWdKMU5JUVMwMU1USW5YRzRnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQjBjblZsTENBdkwzZG9aWFJvWlhJZ2RHaGxJR3RsZVNCcGN5QmxlSFJ5WVdOMFlXSnNaU0FvYVM1bExpQmpZVzRnWW1VZ2RYTmxaQ0JwYmlCbGVIQnZjblJMWlhrcFhHNGdJQ0FnSUNBZ0lDQWdXeWR6YVdkdUoxMGdMeThuZG1WeWFXWjVKeUJtYjNJZ2NIVmliR2xqSUd0bGVTQnBiWEJ2Y25Rc0lDZHphV2R1SnlCbWIzSWdjSEpwZG1GMFpTQnJaWGtnYVcxd2IzSjBjMXh1SUNBZ0lDQWdLVnh1SUNBZ0lDQWdMblJvWlc0b1puVnVZM1JwYjI0b2NISnBkbUYwWlV0bGVTa2dlMXh1SUNBZ0lDQWdJQ0F2TDNKbGRIVnlibk1nWVNCd2RXSnNhV05MWlhrZ0tHOXlJSEJ5YVhaaGRHVkxaWGtnYVdZZ2VXOTFJR0Z5WlNCcGJYQnZjblJwYm1jZ1lTQndjbWwyWVhSbElHdGxlU2xjYmlBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25ZM0o1Y0hSdkxWOXBiWEJ2Y25SU1UwRnphV2R1UzJWNUp5d2djSEpwZG1GMFpVdGxlU2s3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvY0hKcGRtRjBaVXRsZVNrN1hHNWNiaUFnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RqY25sd2RHOHRYMmx0Y0c5eWRGSlRRWE5wWjI1TFpYa25MQ0JsY25JcE8xeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1gybHRjRzl5ZEZKVFFYWmxjbWxtZVV0bGVTaHdkV0pMWlhrcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNXBiWEJ2Y25STFpYa29YRzRnSUNBZ0lDQWdJQ0FnSjNOd2Eya25MQ0F2TDJOaGJpQmlaU0FuYW5kckp5QW9jSFZpYkdsaklHOXlJSEJ5YVhaaGRHVXBMQ0FuYzNCcmFTY2dLSEIxWW14cFl5QnZibXg1S1N3Z2IzSWdKM0JyWTNNNEp5QW9jSEpwZG1GMFpTQnZibXg1S1Z4dUlDQWdJQ0FnSUNBZ0lIQjFZa3RsZVN4Y2JpQWdJQ0FnSUNBZ0lDQjdJQ0FnTHk5MGFHVnpaU0JoY21VZ2RHaGxJR0ZzWjI5eWFYUm9iU0J2Y0hScGIyNXpYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUFuVWxOQlUxTkJMVkJMUTFNeExYWXhYelVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z6YURvZ2UyNWhiV1U2SUNkVFNFRXRNalUySjMwZ0x5OWpZVzRnWW1VZ0oxTklRUzB4Snl3Z0oxTklRUzB5TlRZbkxDQW5VMGhCTFRNNE5DY3NJRzl5SUNkVFNFRXROVEV5SjF4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnZEhKMVpTd2dMeTkzYUdWMGFHVnlJSFJvWlNCclpYa2dhWE1nWlhoMGNtRmpkR0ZpYkdVZ0tHa3VaUzRnWTJGdUlHSmxJSFZ6WldRZ2FXNGdaWGh3YjNKMFMyVjVLVnh1SUNBZ0lDQWdJQ0FnSUZzbmRtVnlhV1o1SjEwZ0x5OG5kbVZ5YVdaNUp5Qm1iM0lnY0hWaWJHbGpJR3RsZVNCcGJYQnZjblFzSUNkemFXZHVKeUJtYjNJZ2NISnBkbUYwWlNCclpYa2dhVzF3YjNKMGMxeHVJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0xuUm9aVzRvWm5WdVkzUnBiMjRvY0hWaWJHbGpTMlY1S1NCN1hHNGdJQ0FnSUNBZ0lDOHZjbVYwZFhKdWN5QmhJSEIxWW14cFkwdGxlU0FvYjNJZ2NISnBkbUYwWlV0bGVTQnBaaUI1YjNVZ1lYSmxJR2x0Y0c5eWRHbHVaeUJoSUhCeWFYWmhkR1VnYTJWNUtWeHVJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkamNubHdkRzh0WDJsdGNHOXlkRkpUUVhabGNtbG1lVXRsZVNjc0lIQjFZbXhwWTB0bGVTazdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9jSFZpYkdsalMyVjVLVHRjYmx4dUlDQWdJQ0FnZlNrdVkyRjBZMmdvWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0oyTnllWEIwYnkxZmFXMXdiM0owVWxOQmRtVnlhV1o1UzJWNUp5d2daWEp5S1R0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUY5cGJYQnZjblJTVTBGbGJtTnllWEIwUzJWNUtIQjFZa3RsZVNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0JqY25sd2RHOHVjM1ZpZEd4bExtbHRjRzl5ZEV0bGVTaGNiaUFnSUNBZ0lDQWdJQ0FuYzNCcmFTY3NJQzh2WTJGdUlHSmxJQ2RxZDJzbklDaHdkV0pzYVdNZ2IzSWdjSEpwZG1GMFpTa3NJQ2R6Y0d0cEp5QW9jSFZpYkdsaklHOXViSGtwTENCdmNpQW5jR3RqY3pnbklDaHdjbWwyWVhSbElHOXViSGtwWEc0Z0lDQWdJQ0FnSUNBZ2NIVmlTMlY1TEZ4dUlDQWdJQ0FnSUNBZ0lIc2dJQ0F2TDNSb1pYTmxJR0Z5WlNCMGFHVWdZV3huYjNKcGRHaHRJRzl3ZEdsdmJuTmNiaUFnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJQ2RTVTBFdFQwRkZVQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9ZWE5vT2lCN2JtRnRaVG9nSjFOSVFTMHlOVFluZlNBdkwyTmhiaUJpWlNBblUwaEJMVEVuTENBblUwaEJMVEkxTmljc0lDZFRTRUV0TXpnMEp5d2diM0lnSjFOSVFTMDFNVEluWEc0Z0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0IwY25WbExDQXZMM2RvWlhSb1pYSWdkR2hsSUd0bGVTQnBjeUJsZUhSeVlXTjBZV0pzWlNBb2FTNWxMaUJqWVc0Z1ltVWdkWE5sWkNCcGJpQmxlSEJ2Y25STFpYa3BYRzRnSUNBZ0lDQWdJQ0FnV3lkbGJtTnllWEIwSjEwZ0x5OG5aVzVqY25sd2RDY2diM0lnSjNkeVlYQkxaWGtuSUdadmNpQndkV0pzYVdNZ2EyVjVJR2x0Y0c5eWRDQnZjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZKMlJsWTNKNWNIUW5JRzl5SUNkMWJuZHlZWEJMWlhrbklHWnZjaUJ3Y21sMllYUmxJR3RsZVNCcGJYQnZjblJ6WEc0Z0lDQWdJQ0FwWEc0Z0lDQWdJQ0F1ZEdobGJpaG1kVzVqZEdsdmJpaHdkV0pzYVdOTFpYa3BJSHRjYmlBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUdFZ2NIVmliR2xqUzJWNUlDaHZjaUJ3Y21sMllYUmxTMlY1SUdsbUlIbHZkU0JoY21VZ2FXMXdiM0owYVc1bklHRWdjSEpwZG1GMFpTQnJaWGtwWEc0Z0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MWZhVzF3YjNKMFVsTkJaVzVqY25sd2RFdGxlU2NzSUhCMVlteHBZMHRsZVNrN1hHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2NIVmliR2xqUzJWNUtUdGNibHh1SUNBZ0lDQWdmU2t1WTJGMFkyZ29ablZ1WTNScGIyNG9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjJOeWVYQjBieTFmYVcxd2IzSjBVbE5CWlc1amNubHdkRXRsZVNjc0lHVnljaWs3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JmYVcxd2IzSjBVbE5CWkdWamNubHdkRXRsZVNod2NtbDJTMlY1S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR055ZVhCMGJ5NXpkV0owYkdVdWFXMXdiM0owUzJWNUtGeHVJQ0FnSUNBZ0lDQWdJQ2R3YTJOek9DY3NJQzh2WTJGdUlHSmxJQ2RxZDJzbklDaHdkV0pzYVdNZ2IzSWdjSEpwZG1GMFpTa3NJQ2R6Y0d0cEp5QW9jSFZpYkdsaklHOXViSGtwTENCdmNpQW5jR3RqY3pnbklDaHdjbWwyWVhSbElHOXViSGtwWEc0Z0lDQWdJQ0FnSUNBZ2NISnBka3RsZVN4Y2JpQWdJQ0FnSUNBZ0lDQjdJQ0FnTHk5MGFHVnpaU0JoY21VZ2RHaGxJR0ZzWjI5eWFYUm9iU0J2Y0hScGIyNXpYRzRnSUNBZ0lDQWdJQ0FnSUNCdVlXMWxPaUFuVWxOQkxVOUJSVkFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z6YURvZ2UyNWhiV1U2SUNkVFNFRXRNalUySjMwZ0x5OWpZVzRnWW1VZ0oxTklRUzB4Snl3Z0oxTklRUzB5TlRZbkxDQW5VMGhCTFRNNE5DY3NJRzl5SUNkVFNFRXROVEV5SjF4dUlDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnZEhKMVpTd2dMeTkzYUdWMGFHVnlJSFJvWlNCclpYa2dhWE1nWlhoMGNtRmpkR0ZpYkdVZ0tHa3VaUzRnWTJGdUlHSmxJSFZ6WldRZ2FXNGdaWGh3YjNKMFMyVjVLVnh1SUNBZ0lDQWdJQ0FnSUZzblpHVmpjbmx3ZENkZElDOHZKMlZ1WTNKNWNIUW5JRzl5SUNkM2NtRndTMlY1SnlCbWIzSWdjSFZpYkdsaklHdGxlU0JwYlhCdmNuUWdiM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeWRrWldOeWVYQjBKeUJ2Y2lBbmRXNTNjbUZ3UzJWNUp5Qm1iM0lnY0hKcGRtRjBaU0JyWlhrZ2FXMXdiM0owYzF4dUlDQWdJQ0FnS1Z4dUlDQWdJQ0FnTG5Sb1pXNG9ablZ1WTNScGIyNG9jSEpwZG1GMFpVdGxlU2tnZTF4dUlDQWdJQ0FnSUNBdkwzSmxkSFZ5Ym5NZ1lTQndkV0pzYVdOTFpYa2dLRzl5SUhCeWFYWmhkR1ZMWlhrZ2FXWWdlVzkxSUdGeVpTQnBiWEJ2Y25ScGJtY2dZU0J3Y21sMllYUmxJR3RsZVNsY2JpQWdJQ0FnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduWTNKNWNIUnZMVjlwYlhCdmNuUlNVMEZrWldOeWVYQjBTMlY1Snl3Z2NISnBkbUYwWlV0bGVTazdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9jSEpwZG1GMFpVdGxlU2s3WEc1Y2JpQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtDZGpjbmx3ZEc4dFgybHRjRzl5ZEZKVFFXUmxZM0o1Y0hSTFpYa25MQ0JsY25JcE8xeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1kyOXVZMkYwVUUxVGQybDBhRkpoYm1SdmJYTW9jRzF6TENCMGIxSmhibVJ2YlN3Z1puSnZiVkpoYm1SdmJTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCc1pYUWdabWx1WVd4TFpYa2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHdiWE11YkdWdVozUm9JQ3NnZEc5U1lXNWtiMjB1YkdWdVozUm9JQ3NnWm5KdmJWSmhibVJ2YlM1c1pXNW5kR2dwTzF4dVhHNGdJQ0FnTHk4Z1lXUmtJRkJ5WlcxaGMzUmxja3RsZVZ4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnY0cxekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JtYVc1aGJFdGxlVnRwWFNBOUlIQnRjMXRwWFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2TDJGa1pDQjBieUJ5WVc1a2IyMWNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIUnZVbUZ1Wkc5dExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JtYVc1aGJFdGxlVnRwSUNzZ2NHMXpMbXhsYm1kMGFGMGdQU0J3YlhOYmFWMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OWhaR1FnWm5KdmJTQnlZVzVrYjIxY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdaeWIyMVNZVzVrYjIwdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJR1pwYm1Gc1MyVjVXMmtnS3lCd2JYTXViR1Z1WjNSb0lDc2dkRzlTWVc1a2IyMHViR1Z1WjNSb1hTQTlJSEJ0YzF0cFhUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWm1sdVlXeExaWGs3WEc0Z0lIMWNibHh1SUNCZloyVnVaWEpoZEdVeU5UWmlhWFJMWlhrb0tTQjdYRzRnSUNBZ2JHVjBJR0Z5Y21GNUlEMGdibVYzSUNCVmFXNTBPRUZ5Y21GNUtETXlLVHRjYmlBZ0lDQmpjbmx3ZEc4dVoyVjBVbUZ1Wkc5dFZtRnNkV1Z6S0dGeWNtRjVLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQmhjbkpoZVR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlHbHRjRzl5ZEhNZ2RHaGxJSE5sWTNKbGRDQjBieUIwYUdVZ1NFMUJReUJtZFc1amRHbHZibHh1SUNBcUlFQndZWEpoYlNBZ2UySjVkR1ZCY25KaGVYMGdJQ0JoY25KaGVVSjFabVpsY2lBZ0lDQWdZbmwwWlhNZ2RHOGdhVzF3YjNKMElHRnpJR3RsZVZ4dUlDQXFJRUJ5WlhSMWNtNGdlMHBUVDA1OUlDQWdJQ0FnSUd0bGVTQWdJQ0FnSUNBZ0lDQWdJQ0FnYTJWNUlISmxZV1I1SUhSdklHSmxJSFZ6WldRZ2FXNGdkR2hsSUVoTlFVTWdZM0o1Y0hSdlozSmhjR2hwWXlCbWRXNWpkR2x2Ymx4dUlDQXFMMXh1SUNCZmFXMXdiM0owU0UxQlEydGxlU2hoY25KaGVVSjFabVpsY2lrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc1Y2JpQWdJQ0FnSUY5MGFHbHpMbDlrYVdkbGMzUW9ZWEp5WVhsQ2RXWm1aWElwTG5Sb1pXNG9LR3RsZVNrZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUdOeWVYQjBieTV6ZFdKMGJHVXVhVzF3YjNKMFMyVjVLRnh1SUNBZ0lDQWdJQ0FuY21GM0p5d2dMeTlqWVc0Z1ltVWdKMnAzYXljZ2IzSWdKM0poZHlkY2JpQWdJQ0FnSUNBZ2EyVjVMRnh1SUNBZ0lDQWdJQ0I3SUNBZ0x5OTBhR2x6SUdseklIUm9aU0JoYkdkdmNtbDBhRzBnYjNCMGFXOXVjMXh1SUNBZ0lDQWdJQ0FnSUc1aGJXVTZJQ2RJVFVGREp5eGNiaUFnSUNBZ0lDQWdJQ0JvWVhOb09pQjdibUZ0WlRvZ0oxTklRUzB5TlRZbmZTd2dMeTlqWVc0Z1ltVWdKMU5JUVMweEp5d2dKMU5JUVMweU5UWW5MQ0FuVTBoQkxUTTROQ2NzSUc5eUlDZFRTRUV0TlRFeUoxeHVJQ0FnSUNBZ0lDQWdJR3hsYm1kMGFEb2dNalUySUM4dmIzQjBhVzl1WVd3c0lHbG1JSGx2ZFNCM1lXNTBJSGx2ZFhJZ2EyVjVJR3hsYm1kMGFDQjBieUJrYVdabVpYSWdabkp2YlNCMGFHVWdhR0Z6YUNCbWRXNWpkR2x2YmlkeklHSnNiMk5ySUd4bGJtZDBhRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCMGNuVmxMQ0F2TDNkb1pYUm9aWElnZEdobElHdGxlU0JwY3lCbGVIUnlZV04wWVdKc1pTQW9hUzVsTGlCallXNGdZbVVnZFhObFpDQnBiaUJsZUhCdmNuUkxaWGtwWEc0Z0lDQWdJQ0FnSUZzbmMybG5iaWNzSUNkMlpYSnBabmtuWFNBdkwyTmhiaUJpWlNCaGJua2dZMjl0WW1sdVlYUnBiMjRnYjJZZ0ozTnBaMjRuSUdGdVpDQW5kbVZ5YVdaNUoxeHVJQ0FnSUNBZ0lDQXBMblJvWlc0b1puVnVZM1JwYjI0b2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OXlaWFIxY201eklIUm9aU0J6ZVcxdFpYUnlhV01nYTJWNVhHNGdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFY5cGJYQnZjblJJVFVGRGEyVjVKeXdnYTJWNUtUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJQzVqWVhSamFDaG1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJRjlrYVdkbGMzUW9kbUZzZFdVcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNWthV2RsYzNRb1hHNGdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtRnRaVG9nSjFOSVFTMHlOVFluWEc0Z0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0IyWVd4MVpTQXZMMVJvWlNCa1lYUmhJSGx2ZFNCM1lXNTBJSFJ2SUdoaGMyZ2dZWE1nWVc0Z1FYSnlZWGxDZFdabVpYSmNiaUFnSUNBZ0lDbGNiaUFnSUNBZ0lDNTBhR1Z1S0daMWJtTjBhVzl1S0doaGMyZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk5eVpYUjFjbTV6SUhSb1pTQm9ZWE5vSUdGeklHRnVJRUZ5Y21GNVFuVm1abVZ5WEc0Z0lDQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMk55ZVhCMGJ5MWthV2RsYzNRbkxDQnVaWGNnVldsdWREaEJjbkpoZVNob1lYTm9LU2s3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvYm1WM0lGVnBiblE0UVhKeVlYa29hR0Z6YUNrcE8xeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDNWpZWFJqYUNobWRXNWpkR2x2YmlobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGxjbklwTzF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCZmFXMXdiM0owUVVWVGEyVjVLR0Z5Y21GNVFuVm1abVZ5S1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnWTNKNWNIUnZMbk4xWW5Sc1pTNXBiWEJ2Y25STFpYa29YRzRnSUNBZ0lDQWdJQ0FnSjNKaGR5Y3NJQzh2WTJGdUlHSmxJQ2RxZDJzbklHOXlJQ2R5WVhjblhHNGdJQ0FnSUNBZ0lDQWdZWEp5WVhsQ2RXWm1aWElzWEc0Z0lDQWdJQ0FnSUNBZ2V5QWdJQzh2ZEdocGN5QnBjeUIwYUdVZ1lXeG5iM0pwZEdodElHOXdkR2x2Ym5OY2JpQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklDZEJSVk10UTBKREoxeHVJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ2RISjFaU3dnTHk5M2FHVjBhR1Z5SUhSb1pTQnJaWGtnYVhNZ1pYaDBjbUZqZEdGaWJHVWdLR2t1WlM0Z1kyRnVJR0psSUhWelpXUWdhVzRnWlhod2IzSjBTMlY1S1Z4dUlDQWdJQ0FnSUNBZ0lGc25aVzVqY25sd2RDY3NJQ2RrWldOeWVYQjBKMTBnTHk5allXNGdZbVVnSjJWdVkzSjVjSFFuTENBblpHVmpjbmx3ZENjc0lDZDNjbUZ3UzJWNUp5d2diM0lnSjNWdWQzSmhjRXRsZVNkY2JpQWdJQ0FnSUNsY2JpQWdJQ0FnSUM1MGFHVnVLR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQXZMM0psZEhWeWJuTWdkR2hsSUhONWJXMWxkSEpwWXlCclpYbGNiaUFnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblkzSjVjSFJ2TFdsdGNHOXlkRUZGVTJ0bGVTY3NJR3RsZVNrN1hHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2EyVjVLVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1WTJGMFkyZ29ablZ1WTNScGIyNG9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjJOeWVYQjBieTFwYlhCdmNuUkJSVk5yWlhrbkxDQmxjbklwTzF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWDNWMFpqaEZibU52WkdVb2N5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dWR1Y0ZEVWdVkyOWtaWElvSjNWMFppMDRKeWt1Wlc1amIyUmxLSE1wTzF4dUlDQjlYRzVjYmlBZ1gzVjBaamhFWldOdlpHVW9jeWtnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVkdWNGRFUmxZMjlrWlhJb0ozVjBaaTA0SnlrdVpHVmpiMlJsS0hNcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFTnllWEIwYnp0Y2JpSXNJaThxS2x4dUtpQm1ZV3RsSUdOc1lYTnpJR1p2Y2lCMGFHVWdaM1ZwSUhSdklITmxiR1ZqZENCMGFHVWdhV1JsYm5ScGRIa3NYRzRxSUZSUFJFOGdjbVZ3YkdGalpTQjNhWFJvSUhSb1pTQndjbTl3WlhJZ2FXUmxiblJwZEhrZ1IxVkpYRzRxWEc0cUwxeHVZMnhoYzNNZ1IzVnBSbUZyWlNCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2RYSnNMQ0J0WlhOellXZGxRblZ6S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJRjkwYUdsekxsOTFjbXdnUFNCMWNtdzdYRzRnSUNBZ1gzUm9hWE11WDNkaGFYUlVhVzFsSUQwZ01UQXdNREE3WEc0Z0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTWdQU0J0WlhOellXZGxRblZ6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11WVdSa1RHbHpkR1Z1WlhJb1gzUm9hWE11WDNWeWJDd2diWE5uSUQwK0lIdGNibHh1SUNBZ0lDQWdiR1YwSUdsa1pXNTBhWFJwWlhNZ1BTQnRjMmN1WW05a2VTNTJZV3gxWlM1cFpHVnVkR2wwYVdWek8xeHVJQ0FnSUNBZ2JHVjBJR2xrY0hNZ1BTQnRjMmN1WW05a2VTNTJZV3gxWlM1cFpIQnpPMXh1WEc0Z0lDQWdJQ0JzWlhRZ2RtRnNkV1U3WEc1Y2JpQWdJQ0FnSUdsbUlDaHBaR1Z1ZEdsMGFXVnpXekJkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0I3ZEhsd1pUb2dKMmxrWlc1MGFYUjVKeXdnZG1Gc2RXVTZJR2xrWlc1MGFYUnBaWE5iTUYwc0lHTnZaR1U2SURJd01IMDdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlIdDBlWEJsT2lBbmFXUndKeXdnZG1Gc2RXVTZJR2xrY0hOYk1GMHNJR052WkdVNklESXdNSDA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUd4bGRDQnlaWEJzZVUxelp5QTlJSHRwWkRvZ2JYTm5MbWxrTENCMGVYQmxPaUFuY21WemNHOXVjMlVuTENCMGJ6b2diWE5uTG1aeWIyMHNJR1p5YjIwNklHMXpaeTUwYnl3Z1ltOWtlVG9nZG1Gc2RXVjlPMXh1WEc0Z0lDQWdJQ0F2THlCMGJ5QjBaWE4wSUc5dUlIUm9aU0JwWkdWdWRHbDBlU0J6YVdSbElIUm9aU0JzYVhOMFpXNWxjaUIzYVhSb2IzVjBJSFJvWlNCMGFXMWxiM1YwWEc0Z0lDQWdJQ0F2THlCallXNGdjbVZ3Y21WelpXNTBJSFJvWlNCMGFXMWxJSFJvWlNCMWMyVnlJSFJoYTJWeklIUnZJR05vYjI5elpTQmhibVFnYVdSbGJuUnBkSGxjYmlBZ0lDQWdJR2xtSUNodGMyY3VZbTlrZVM1MllXeDFaU0E5UFQwZ0ozZGhhWFFuS1NCN1hHNWNiaUFnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2NtVndiSGxOYzJjcE8xeHVJQ0FnSUNBZ0lDQjlMQ0JmZEdocGN5NWZkMkZwZEZScGJXVXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvY21Wd2JIbE5jMmNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1IzVnBSbUZyWlR0Y2JpSXNJaThxS2x4dUtpQlVhR1VnU1dSbGJuUnBkSGtnUkdGMFlTQk5iMlJsYkNCcGN5QjFjMlZrSUhSdklHMXZaR1ZzSUhSb1pTQnlaVlJJU1U1TElGVnpaWElnWlc1MGFYUjVMaUJVYUdVZ1NXUmxiblJwZEhrZ1pHRjBZU0J0YjJSbGJDQnBjeUJvWVc1a2JHVmtJR0o1SUVsa1pXNTBhWFI1SUUxaGJtRm5aVzFsYm5RZ1puVnVZM1JwYjI1aGJHbDBlUzVjYmlwY2Jpb3ZYRzVqYkdGemN5QkpaR1Z1ZEdsMGVTQjdYRzVjYmlBZ1kyOXVjM1J5ZFdOMGIzSW9aM1ZwWkN3Z2RIbHdaU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmZkR2hwY3k1bmRXbGtJRDBnWjNWcFpEdGNiaUFnSUNCZmRHaHBjeTUwZVhCbElEMGdkSGx3WlR0Y2JpQWdJQ0JmZEdocGN5NXBaR1Z1ZEdsbWFXVnljMHhwYzNRZ1BTQjdmVHRjYmx4dUlDQjlYRzVjYmlBZ1lXUmtTV1JsYm5ScGRIa29hV1JsYm5ScFptbGxjaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJR2xrWlc1MGFYUjVTVzVtYjNKdFlYUnBiMjRnUFNCN1hHNGdJQ0FnSUNCcFpFRnpjMlZ5ZEdsdmJqb2dKeWNzWEc0Z0lDQWdJQ0J6WlhKMmFXTmxRV1JrY21WemN6b2dKeWNzWEc0Z0lDQWdJQ0JoZFhSb1pXNTBhV05oZEdsdmJrUmhkR0U2SUNjbkxGeHVJQ0FnSUNBZ1lYVjBhRzl5YVhOaGRHbHZia1JoZEdFNklDY25MRnh1SUNBZ0lDQWdkWE5sY2xCeWIyWnBiR1U2SUNjblhHNGdJQ0FnZlR0Y2JpQWdJQ0JmZEdocGN5NXBaR1Z1ZEdsbWFXVnljMHhwYzNSYmFXUmxiblJwWm1sbGNsMGdQU0JwWkdWdWRHbDBlVWx1Wm05eWJXRjBhVzl1TzF4dUlDQjlYRzVjYmlBZ1lXUmtTV1JCYzNObGNuUnBiMjRvYVdSbGJuUnBabWxsY2l3Z1lYTnpaWEowYVc5dUxDQnBaSEFzSUhOamIzQmxLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHeGxkQ0J1WlhkSlpFRnpjMlZ5ZEdsdmJpQTlJRzVsZHlCSlpFRnpjMlZ5ZEdsdmJpaGhjM05sY25ScGIyNHNJR2xrY0N3Z2MyTnZjR1VwTzF4dVhHNGdJQ0FnWDNSb2FYTXVhV1JCYzNObGNuUnBiMjVNYVhOMExuQjFjMmdvYm1WM1NXUkJjM05sY25ScGIyNHBPMXh1SUNCOVhHNTlYRzVjYm1Oc1lYTnpJRWxrUVhOelpYSjBhVzl1SUh0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2loaGMzTmxjblJwYjI0c0lHbGtjQ3dnYzJOdmNHVXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1gzUm9hWE11WVhOelpYSjBhVzl1SUQwZ1lYTnpaWEowYVc5dU8xeHVJQ0FnSUY5MGFHbHpMbWxrY0NBOUlHbGtjRHRjYmlBZ0lDQmZkR2hwY3k1elkyOXdaU0E5SUhOamIzQmxPMXh1SUNCOVhHNWNibjFjYmx4dVkyeGhjM01nU1dSV1lXeHBaR0YwYVc5dUlIdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaHBaR1Z1ZEdsMGVTd2dZMjl1ZEdWdWRITXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUY5MGFHbHpMbWxrWlc1MGFYUjVJRDBnYVdSbGJuUnBkSGs3WEc0Z0lDQWdYM1JvYVhNdVkyOXVkR1Z1ZEhNZ1BTQmpiMjUwWlc1MGN6dGNiaUFnZlZ4dVhHNGdJSFpoYkdsa1lYUmxjeWhwWkdWdWRHbDBlU3dnWTI5dWRHVnVkSE1wSUh0Y2JpQWdJQ0F2TDFSUFJFOGdhVzF3YkdWdFpXNTBJSFJvWlNCc2IyZHBZMXh1WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnU1dSbGJuUnBkSGs3WEc0aUxDSmNibWx0Y0c5eWRDQjdaR2wyYVdSbFZWSk1MQ0JuWlhSVmMyVnlWVkpNUm5KdmJVVnRZV2xzTENCblpYUlZjMlZ5UlcxaGFXeEdjbTl0VlZKTUxDQnBjMFJoZEdGUFltcGxZM1JWVWt3c0lHTnZiblpsY25SVWIxVnpaWEpWVWt4OUlHWnliMjBnSnk0dUwzVjBhV3h6TDNWMGFXeHpMbXB6Snp0Y2JtbHRjRzl5ZENCSlpHVnVkR2wwZVNCbWNtOXRJQ2N1TDBsa1pXNTBhWFI1Snp0Y2JtbHRjRzl5ZENCRGNubHdkRzhnWm5KdmJTQW5MaTlEY25sd2RHOG5PMXh1YVcxd2IzSjBJRWQxYVVaaGEyVWdabkp2YlNBbkxpOUhkV2xHWVd0bEp6dGNibHh1THlvcVhHNHFYRzRxSUZSb1pTQkpaR1Z1ZEdsMGVTQk5iMlIxYkdVZ0tFbGtJRTF2WkhWc1pTa2dhWE1nZEdobElHTnZiWEJ2Ym1WdWRDQnlaWE53YjI1emFXSnNaU0JtYjNJZ2FHRnVaR3hwYm1jZ2RHaGxYRzRxSUhWelpYSWdhV1JsYm5ScGRIa2dZVzVrSUhSb1pTQmhjM052WTJsaGRHbHZiaUJ2WmlCMGFHbHpJR2xrWlc1MGFYUjVJSGRwZEdnZ2RHaGxJRWg1Y0dWeWRIa2dhVzV6ZEdGdVkyVnpMRnh1S2lCcGJpQnZjbVJsY2lCMGJ5QnRZV3RsSUVoNWNHVnlkSGtnYVc1emRHRnVZMlZ6SUdsa1pXNTBhV1pwWVdKc1pTNGdWR2hsSUdsa1pXNTBhWFI1SUdsdUlIUm9aU0J5WlZSSVNVNUxJSEJ5YjJwbFkzUmNiaW9nYVhNZ2JtOTBJR1pwZUdWa0lIUnZJR0VnZFc1cGNYVmxJRWxrWlc1MGFYUjVJRk5sY25acFkyVWdVSEp2ZG1sa1pYSXNJR0oxZENCdlluUmhhVzVsWkNCMGFISnZkV2RvSUhObGRtVnlZV3hjYmlvZ1pHbG1abVZ5Wlc1MElFbGtaVzUwYVhSNUlITnZkWEpqWlhNdUlGZHBkR2dnZEdocGN5QmhjSEJ5YjJGamFDd2dkR2hsSUVsa0lFMXZaSFZzWlNCd2NtOTJhV1JsY3lCMGJ5QjBhR1VnZFhObGNpQjBhR1ZjYmlvZ2IzQjBhVzl1SUhSdklHTm9iMjl6WlNCMGFHVWdjSEpsWm1WeWNtVmtJRzFsZEdodlpDQm1iM0lnWVhWMGFHVnVkR2xqWVhScGIyNHVYRzRxSUZSb2FYTWdiVzlrZFd4bElIZHBiR3dnZEdoMWN5QmhZbXhsSUhSdklITjFjSEJ2Y25RZ2JYVnNkR2x3YkdVZ1NXUmxiblJwZEhrZ1lXTnhkV2x6YVhScGIyNGdiV1YwYUc5a2N5eGNiaW9nYzNWamFDQmhjeUJQY0dWdVNVUWdZMjl1Ym1WamRDQXhMakFzSUV0bGNtSmxjbTl6SUZONWMzUmxiU3dnYjNJZ1lYVjBhR1Z1ZEdsallYUnBiMjRnZEdoeWIzVm5hQ0J6YldGeWRDQmpZWEprY3k1Y2Jpb2dSbTl5SUdWNFlXMXdiR1VzSUdFZ2RYTmxjaUIzYVhSb0lHRWdSMjl2WjJ4bElHRmpZMjkxYm5RZ1kyRnVJSFZ6WlNCMGFHVWdSMjl2WjJ4bElHRnpJR0Z1SUVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5SUhSdklIQnliM1pwWkdVZ1NXUmxiblJwZEhrZ1ZHOXJaVzV6TEZ4dUtpQWdkMmhwWTJnZ1kyRnVJR0psSUhWelpXUWdZbmtnZEdobElFbGtaVzUwYVhSNUlFMXZaSFZzWlNCMGJ5QmhjM052WTJsaGRHVWdhWFFnZDJsMGFDQmhJRWg1Y0dWeWRIa2dhVzV6ZEdGdVkyVXVYRzRxWEc0cUlGUm9aU0JKWkdWdWRHbDBlU0JOYjJSMWJHVWdkWE5sY3lCaElHNXZaR1VnY0dGamEyRm5aU3dnZEdobElFaGxiR3h2U2xNc0lIZG9hV05vSUdseklHRWdZMnhwWlc1MExYTnBaR1VnU21GMllWTmpjbWx3ZENCQlVFa2dabTl5SUdGMWRHaGxiblJwWTJGMGFXOXVYRzRxSUhSb1lYUWdabUZqYVd4cGRHRjBaWE1nZEdobElISmxjWFZsYzNSeklHWnZjaUIwYUdVZ1QzQmxia2xFSUdOdmJtNWxZM1FnY0hKdmRHOWpiMnd1SUZSb2FYTWdiV1YwYUc5a0lHRnNiRzkzY3lCbWIzSWdjMjl0WlNCaFluTjBjbUZqZEdsdmJseHVLaUIzYUdWdUlHMWhhMmx1WnlCeVpYRjFaWE4wY3lCbWIzSWdaR2xtWm1WeVpXNTBJRWxrWlc1MGFYUjVJRkJ5YjNacFpHVnljeXdnYzNWamFDQmhjeUJQY0dWdVNVUWdZMjl1Ym1WamRDQjFjMlZrSUdKNUlFZHZiMmRzWlN3Z1JtRmpaV0p2YjJzc0lFMXBZM0p2YzI5bWRDd2dabTl5SUdWNFlXMXdiR1V1WEc0cVhHNHFJRmRvWlc0Z1lTQnlaWEYxWlhOMElHWnZjaUJoSUhWelpYSWdhV1JsYm5ScGRIa2dhWE1nYldGa1pTQjFjMmx1WnlCMGFHVWdiV1YwYUc5a0lHeHZaMmx1VjJsMGFGSlFLR2xrWlc1MGFXWnBaWElzSUhOamIzQmxLU3hjYmlvZ2RHaHBjeUJ0WlhSb2IyUWdkMmxzYkNCaGJtRnNlWE5sSUhSb1pTQkpaR1Z1ZEdsMGVTQlFjbTkyYVdSbGNpQmphRzl6Wlc0Z2RHOGdiMkowWVdsdUlHRnVJR2xrWlc1MGFYUjVJR0Z1WkNCM2FXeHNJSFZ6WlNCMGFHVWdTR1ZzYkc5S1V5QnViMlJsSUhCaFkydGhaMlZjYmlvZ2QybDBhQ0IwYUdVZ2MyVnNaV04wWldRZ1NXUmxiblJwZEhrZ1VISnZkbWxrWlhJZ1lXNWtJR2xrWlc1MGFYUjVJSE5qYjNCbExpQkJablJsY2lCMGFHVWdTR1ZzYkc5S1V5QnlaWEYxWlhOMElHWnZjaUJoYmlCQlkyTmxjM01nVkc5clpXNWNiaW9nZEc4Z2RHaGxJRWxrWlc1MGFYUjVJRkJ5YjNacFpHVnljeXdnZEdobElIVnpaWElnZDJsc2JDQmlaU0J3Y205dGNIUmxaQ0IwYnlCaGRYUm9aVzUwYVdOaGRHVWdkRzkzWVhKa2N5QjBhR1VnU1dSbGJuUnBkSGtnVUhKdmRtbGtaWEl1WEc0cUlGVndiMjRnY21WalpXbDJhVzVuSUhSb1pTQkJZMk5sYzNNZ1ZHOXJaVzRzSUhSb2FYTWdkRzlyWlc0Z2FYTWdkbUZzYVdSaGRHVmtJSGRwZEdnZ1lTQlNSVk5VWm5Wc0lIZGxZaUJ6WlhKMmFXTmxJSEpsY1hWbGMzUWdkRzhnWVc0Z1pXNWtjRzlwYm5SY2Jpb2diMjRnZEdobElFbGtaVzUwYVhSNUlGQnliM1pwWkdWeUlFRjFkR2h2Y21sNllYUnBiMjRnVTJWeWRtVnlMQ0JoYm1RZ1lXWjBaWElnZEdobElIWmhiR2xrWVhScGIyNGdhWE1nWkc5dVpTeGNiaW9nWVc0Z1NVUWdkRzlyWlc0Z2FYTWdiMkowWVdsdVpXUWdkMmwwYUNCMGFHVWdhVzVtYjNKdFlYUnBiMjRnWVdOamIzSmthVzVuSUhSdklIUm9aU0J6WTI5d1pTQnlaWEYxYVhKbFpDNWNiaW9nVkdocGN5QkpSQ0IwYjJ0bGJpQnBjeUIwYUdWdUlIQnlaWE5sY25abFpDQnBiaUIwYUdseklHMXZaSFZzWlNCMGFHRjBJR05oYmlCdlluUmhhVzVsWkNCMGFISnZkV2RvSUhSb1pTQm5aWFJKWkdWdWRHbDBhV1Z6S0NsY2Jpb2dZVzVrSUdseklIQmhjM05sWkNCaGN5QnlaWFIxY200Z2RtRnNkV1VnYjJZZ2RHaGxJR3h2WjJsdVYybDBhRkpRSUdaMWJtTjBhVzl1TGlCVWFHVWdiV1YwYUc5a2N5Qm5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJpQmhibVFnZG1Gc2FXUmhkR1ZCYzNObGNuUnBiMjRnYUdGMlpTQnViM1FnZVdWMElHSmxaVzRnWkdWMlpXeHZjR1ZrTGx4dUtseHVLaTljYm1Oc1lYTnpJRWxrWlc1MGFYUjVUVzlrZFd4bElIdGNibHh1SUNBdktpcGNiaUFnS2lCVWFHbHpJR2x6SUhSb1pTQmpiMjV6ZEhKMVkzUnZjaUIwYnlCcGJtbDBhV0ZzYVhObElIUm9aU0JKWkdWdWRHbDBlU0JOYjJSMWJHVWdhWFFnWkc5bGN5QnViM1FnY21WeGRXbHlaU0JoYm5rZ2FXNXdkWFF1WEc0Z0lDb3ZYRzRnSUdOdmJuTjBjblZqZEc5eUtISjFiblJwYldWVlVrd3NJSEoxYm5ScGJXVkRZWEJoWW1sc2FYUnBaWE1zSUhOMGIzSmhaMlZOWVc1aFoyVnlLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHbG1JQ2doY25WdWRHbHRaVlZTVENrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkeWRXNTBhVzFsVlZKTUlHbHpJRzFwYzNOcGJtY3VKeWs3WEc0Z0lDQWdhV1lnS0NGemRHOXlZV2RsVFdGdVlXZGxjaWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R6ZEc5eVlXZGxUV0Z1WVdkbGNpQnBjeUJ0YVhOemFXNW5KeWs3WEc1Y2JpQWdJQ0JmZEdocGN5NWZjblZ1ZEdsdFpWVlNUQ0E5SUhKMWJuUnBiV1ZWVWt3N1hHNGdJQ0FnWDNSb2FYTXVjM1J2Y21GblpVMWhibUZuWlhJZ1BTQnpkRzl5WVdkbFRXRnVZV2RsY2p0Y2JpQWdJQ0JmZEdocGN5NWZhV1J0VlZKTUlEMGdYM1JvYVhNdVgzSjFiblJwYldWVlVrd2dLeUFuTDJsa2JTYzdYRzRnSUNBZ1gzUm9hWE11WDJkMWFWVlNUQ0E5SUY5MGFHbHpMbDl5ZFc1MGFXMWxWVkpNSUNzZ0p5OXBaR1Z1ZEdsMGVTMW5kV2tuTzF4dUlDQWdJRjkwYUdsekxuSjFiblJwYldWRFlYQmhZbWxzYVhScFpYTWdQU0J5ZFc1MGFXMWxRMkZ3WVdKcGJHbDBhV1Z6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMlJ2YldGcGJpQTlJR1JwZG1sa1pWVlNUQ2hmZEdocGN5NWZjblZ1ZEdsdFpWVlNUQ2t1Wkc5dFlXbHVPMXh1WEc0Z0lDQWdMeTkwYnlCemRHOXlaU0JwZEdWdGN5QjNhWFJvSUhSb2FYTWdabTl5YldGME9pQjdhV1JsYm5ScGRIazZJR2xrWlc1MGFYUjVWVkpNTENCMGIydGxiam9nZEc5clpXNUpSSDFjYmlBZ0lDQmZkR2hwY3k1cFpHVnVkR2wwYVdWeklEMGdXMTA3WEc0Z0lDQWdYM1JvYVhNdVpXMWhhV3h6VEdsemRDQTlJRnRkTzF4dUlDQWdJR3hsZENCdVpYZEpaR1Z1ZEdsMGVTQTlJRzVsZHlCSlpHVnVkR2wwZVNnblozVnBaQ2NzSjBoVlRVRk9KeWs3WEc0Z0lDQWdYM1JvYVhNdWFXUmxiblJwZEhrZ1BTQnVaWGRKWkdWdWRHbDBlVHRjYmlBZ0lDQmZkR2hwY3k1amNubHdkRzhnUFNCdVpYY2dRM0o1Y0hSdktDazdYRzVjYmlBZ0lDQXZMM04wYjNKbGN5QjBhR1VnWVhOemIyTnBZWFJwYjI0Z2IyWWdkR2hsSUdSaGRHRlBZbXBsWTNRZ1lXNWtJSFJvWlNCSWVYQmxjblI1SUhKbFoybHpkR1Z5WldRZ2QybDBhR2x1WEc0Z0lDQWdYM1JvYVhNdVpHRjBZVTlpYW1WamRITkpaR1Z1ZEdsMGVTQTlJSHQ5TzF4dVhHNGdJQ0FnTHk4Z2FHRnphRlJoWW14bElIUnZJSE4wYjNKbElHRnNiQ0IwYUdVZ1kzSjVjSFJ2SUdsdVptOXliV0YwYVc5dUlHSmxkSGRsWlc0Z2RIZHZJR2g1Y0dWeWRHbGxjMXh1SUNBZ0lGOTBhR2x6TG1Ob1lYUkxaWGx6SUQwZ2UzMDdYRzVjYmlBZ0lDQXZMeUJvWVhOb1ZHRmliR1VnZEc4Z2MzUnZjbVVnZEdobElITjViVzFsZEhKcFl5QnJaWGx6SUhSdklHSmxJSFZ6WldRZ2FXNGdkR2hsSUdOb1lYUWdaM0p2ZFhCY2JpQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBVMlZ6YzJsdmJrdGxlWE1nUFNCN2ZUdGNibHh1SUNBZ0lDOHZabUZwYkhOaFptVWdkRzhnWlc1aFlteGxMMlJwYzJGaWJHVWdZV3hzSUhSb1pTQmpjbWx3ZEc5bmNtRndhR2xqSUdaMWJtTjBhVzl1YzF4dUlDQWdJRjkwYUdsekxtbHpWRzlWYzJWRmJtTnllWEIwYVc5dUlEMGdkSEoxWlR0Y2JseHVJQ0FnSUM4dklIWmhjbWxoWW14bElIUnZJR3R1YjNjZ2FXWWdkR2hsSUVkVlNTQnBjeUJrWlhCc2IzbGxaQ0IwYnlCamFHOXZjMlVnZEdobElHbGtaVzUwYVhSNUxpQnBaaUIwYUdVZ2NtVmhiQ0JIVlVrZ2FYTWdibTkwSUdSbGNHeHZlV1ZrTENCaElHWmhhMlVnWjNWcElHbHpJR1JsY0d4dmVXVmtJR2x1YzNSbFlXUXVYRzRnSUNBZ1gzUm9hWE11WjNWcFJHVndiRzk1WldRZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUM4dklIWmxjbWxtYVdOaGRHbHZiaUJ2WmlCdWIyUmxTbE1zSUdGdVpDQnBiaUJqWVhObElHbDBJR2x6SUc1dlpHVktVeUIwYUdWdUlHUnBjMkZpYkdVZ1pXNWpjbmx3ZEdsdmJseHVJQ0FnSUM4dklGUlBSRThnYVcxd2NtOTJaU0JzWVhSbGNpd2dkR2hwY3lCbGVHbHpkSE1nWW1WallYVnpaU0IwYUdVZ1kzSjVjSFJ2SUd4cFlpQjFjMlZ6SUdKeWIzZHpaWElnWTNKNWNIUnZaM0poY0docFl5QnRaWFJvYjJSelhHNGdJQ0FnTHk5ZmRHaHBjeTVwYzFSdlZYTmxSVzVqY25sd2RHbHZiaUE5SUNoM2FXNWtiM2NwSUQ4Z2RISjFaU0E2SUdaaGJITmxPMXh1WEc0Z0lDQWdYM1JvYVhNdVgyeHZZV1JKWkdWdWRHbDBhV1Z6S0NrN1hHNWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJSEpsZEhWeWJpQjBhR1VnYldWemMyRm5aVUoxY3lCcGJpQjBhR2x6SUZKbFoybHpkSEo1WEc0Z0lDb2dRSEJoY21GdElIdE5aWE56WVdkbFFuVnpmU0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVUoxYzF4dUlDQXFMMXh1SUNCblpYUWdiV1Z6YzJGblpVSjFjeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVmYldWemMyRm5aVUoxY3p0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGTmxkQ0IwYUdVZ2JXVnpjMkZuWlVKMWN5QnBiaUIwYUdseklGSmxaMmx6ZEhKNVhHNGdJQ29nUUhCaGNtRnRJSHROWlhOellXZGxRblZ6ZlNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlVKMWMxeHVJQ0FxTDF4dUlDQnpaWFFnYldWemMyRm5aVUoxY3lodFpYTnpZV2RsUW5WektTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeUE5SUcxbGMzTmhaMlZDZFhNN1hHNWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJSEpsZEhWeWJpQjBhR1VnY21WbmFYTjBjbmtnYVc0Z2RHaHBjeUJwWkUxdlpIVnNaVnh1SUNBcUlFQndZWEpoYlNCN2NtVm5hWE4wY25sOUlDQWdJQ0FnSUNBZ0lDQnlaV2RwYzNSeWVWeHVJQ0FxTDF4dUlDQm5aWFFnY21WbmFYTjBjbmtvS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z1gzUm9hWE11WDNKbFoybHpkSEo1TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1UyVjBJSFJvWlNCeVpXZHBjM1J5ZVNCcGJpQjBhR2x6SUdsa1RXOWtkV3hsWEc0Z0lDb2dRSEJoY21GdElIdHlaV2RwYzNSeWVYMGdJQ0FnSUhKbFoxeHVJQ0FxTDF4dUlDQnpaWFFnY21WbmFYTjBjbmtvY21WbmFYTjBjbmtwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lGOTBhR2x6TGw5eVpXZHBjM1J5ZVNBOUlISmxaMmx6ZEhKNU8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dSblZ1WTNScGIyNGdkRzhnY21WMGRYSnVJR0ZzYkNCMGFHVWdhV1JsYm5ScGRHbGxjeUJ5WldkcGMzUmxjbVZrSUhkcGRHaHBiaUJoSUhObGMzTnBiMjRnWW5rZ1lTQjFjMlZ5TGx4dUlDQXFJRlJvWlhObElHbGtaVzUwYVhScFpYTWdZWEpsSUhKbGRIVnlibVZrSUdsdUlHRnVJR0Z5Y21GNUlHTnZiblJoYVc1cGJtY2dZU0JLVTA5T0lIQmhZMnRoWjJVZ1ptOXlJR1ZoWTJnZ2RYTmxjaUJwWkdWdWRHbDBlUzVjYmlBZ0tpQkFjbVYwZFhKdUlIdEJjbkpoZVR4SlpHVnVkR2wwYVdWelBuMGdJQ0FnSUNBZ0lDQkpaR1Z1ZEdsMGFXVnpYRzRnSUNvdlhHNGdJR2RsZEVsa1pXNTBhWFJwWlhNb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdWFXUmxiblJwZEdsbGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJR2RsZEhNZ1lXeHNJSFJvWlNCcGJtWnZjbTFoZEdsdmJpQm1jbTl0SUdFZ1oybDJaVzRnZFhObGNsVlNURnh1SUNBcUlFQndZWEpoYlNBZ2UxTjBjbWx1WjMwZ0lIVnpaWEpWVWt3Z0lDQWdJSFZ6WlhJZ2RYSnNYRzRnSUNvZ1FISmxkSFZ5YmlCN1NsTlBUbjBnSUNBZ2FXUmxiblJwZEhrZ0lDQWdhV1JsYm5ScGRIa2dZblZ1Wkd4bElHWnliMjBnZEdobElIVnpaWEpWVWt4Y2JpQWdLaTljYmlBZ1oyVjBTV1JsYm5ScGRIa29kWE5sY2xWU1RDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCbWIzSWdLR3hsZENCcGJtUmxlQ0JwYmlCZmRHaHBjeTVwWkdWdWRHbDBhV1Z6S1NCN1hHNWNiaUFnSUNBZ0lHeGxkQ0JwWkdWdWRHbDBlU0E5SUY5MGFHbHpMbWxrWlc1MGFYUnBaWE5iYVc1a1pYaGRPMXh1SUNBZ0lDQWdhV1lnS0dsa1pXNTBhWFI1TG1sa1pXNTBhWFI1SUQwOVBTQjFjMlZ5VlZKTUtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBaR1Z1ZEdsMGVUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMGFISnZkeUFuYVdSbGJuUnBkSGtnYm05MElHWnZkVzVrSnp0Y2JpQWdmVnh1WEc0Z0lGOXNiMkZrU1dSbGJuUnBkR2xsY3lncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU2tnUFQ0Z2UxeHVYRzRnSUNBZ0lDQmZkR2hwY3k1emRHOXlZV2RsVFdGdVlXZGxjaTVuWlhRb0oybGtUVzlrZFd4bE9tbGtaVzUwYVhScFpYTW5LUzUwYUdWdUtDaHBaR1Z1ZEdsMGFXVnpLU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dsa1pXNTBhWFJwWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NXBaR1Z1ZEdsMGFXVnpJRDBnYVdSbGJuUnBkR2xsY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtDazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdSbGNHeHZlVWRWU1NncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJRjkwYUdsekxtZDFhVVJsY0d4dmVXVmtJRDBnZEhKMVpUdGNiaUFnZlZ4dVhHNGdJR2RsZEVsa1pXNTBhWFI1VDJaSWVYQmxjblI1S0doNWNHVnlkSGxWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnYkdWMElITndiR2wwVlZKTUlEMGdhSGx3WlhKMGVWVlNUQzV6Y0d4cGRDZ25PaTh2SnlrN1hHNGdJQ0FnSUNCcFppQW9jM0JzYVhSVlVreGJNRjBnSVQwOUlDZG9lWEJsY25SNUp5a2dlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZaMlYwU0hsd1pYSjBlVVp5YjIxRVlYUmhUMkpxWldOMEtHaDVjR1Z5ZEhsVlVrd3BMblJvWlc0b0tISmxkSFZ5Ym1Wa1NIbHdaWEowZVZWU1RDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0IxYzJWeVZWSk1JRDBnWDNSb2FYTXVjbVZuYVhOMGNua3VaMlYwU0hsd1pYSjBlVTkzYm1WeUtISmxkSFZ5Ym1Wa1NIbHdaWEowZVZWU1RDazdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIVnpaWEpWVWt3cElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FXNWtaWGdnYVc0Z1gzUm9hWE11YVdSbGJuUnBkR2xsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JsYm5ScGRIa2dQU0JmZEdocGN5NXBaR1Z1ZEdsMGFXVnpXMmx1WkdWNFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2xrWlc1MGFYUjVMbWxrWlc1MGFYUjVJRDA5UFNCMWMyVnlWVkpNS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMyOXNkbVVvYVdSbGJuUnBkSGt1YldWemMyRm5aVWx1Wm04cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaV3BsWTNRb0oyNXZJR2xrWlc1MGFYUjVJSGRoY3lCbWIzVnVaQ0FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYkdWMElIVnpaWEpWVWt3Z1BTQmZkR2hwY3k1eVpXZHBjM1J5ZVM1blpYUkllWEJsY25SNVQzZHVaWElvYUhsd1pYSjBlVlZTVENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gxYzJWeVZWSk1LU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBibVJsZUNCcGJpQmZkR2hwY3k1cFpHVnVkR2wwYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JsYm5ScGRIa2dQU0JmZEdocGN5NXBaR1Z1ZEdsMGFXVnpXMmx1WkdWNFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBaR1Z1ZEdsMGVTNXBaR1Z1ZEdsMGVTQTlQVDBnZFhObGNsVlNUQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTaHBaR1Z1ZEdsMGVTNXRaWE56WVdkbFNXNW1ieWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpXcGxZM1FvSjI1dklHbGtaVzUwYVhSNUlIZGhjeUJtYjNWdVpDNG5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1oyVjBTV1JsYm5ScGRHbGxjMVJ2UTJodmIzTmxLQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJR2xrWlc1MGFYUnBaWE1nUFNCZmRHaHBjeTVsYldGcGJITk1hWE4wTzF4dUlDQWdJR3hsZENCcFpIQnpJRDBnV3lkbmIyOW5iR1V1WTI5dEp5d2dKMjFwWTNKdmMyOW1kQzVqYjIwbkxDQW5iM0poYm1kbExtWnlKMTA3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdlMmxrWlc1MGFYUnBaWE02SUdsa1pXNTBhWFJwWlhNc0lHbGtjSE02SUdsa2NITjlPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUm5WdVkzUnBiMjRnZEc4Z2NtVjBkWEp1SUdGc2JDQjBhR1VnZFhObGNuTWdWVkpNY3lCeVpXZHBjM1JsY21Wa0lIZHBkR2hwYmlCaElITmxjM05wYjI1Y2JpQWdLaUJVYUdWelpTQjFjMlZ5Y3lCVlVreHpJR0Z5WlNCeVpYUjFjbTVsWkNCcGJpQmhiaUJoY25KaGVTQnZaaUJ6ZEhKcGJtZHpMbHh1SUNBcUlFQndZWEpoYlNBZ2UwSnZiMnhsWVc1OUlDQmxiV0ZwYkVadmNtMWhkQ0FvVDNCMGFXOXVZV3dwSUNBZ1ltOXZiR1ZoYmlCMGJ5QnBibVJwWTJGMFpTQjBieUJ5WlhSMWNtNGdhVzRnWlcxaGFXd2dabTl5YldGMFhHNGdJQ29nUUhKbGRIVnliaUI3UVhKeVlYazhVM1J5YVc1blBuMGdJQ0FnSUNBZ0lDQjFjMlZ5YzF4dUlDQXFMMXh1SUNCblpYUlZjMlZ5YzBsRWN5aGxiV0ZwYkVadmNtMWhkQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJSFZ6WlhKeklEMGdXMTA3WEc1Y2JpQWdJQ0F2TDJsbUlISmxjWFZsYzNRZ1kyOXRaWE1nZDJsMGFDQjBhR1VnWlcxaGFXeEdiM0p0WVhRZ2IzQjBhVzl1TENCMGFHVnVJR052Ym5abGNuUWdkWEpzSUhSdklHVnRZV2xzSUdadmNtMWhkRnh1SUNBZ0lHeGxkQ0JqYjI1MlpYSjBaWElnUFNBb1pXMWhhV3hHYjNKdFlYUXBJRDhnWjJWMFZYTmxja1Z0WVdsc1JuSnZiVlZTVENBNklDaDJZV3gxWlNrZ1BUNGdlM0psZEhWeWJpQjJZV3gxWlR0OU8xeHVYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FXNWtaWGdnYVc0Z1gzUm9hWE11YVdSbGJuUnBkR2xsY3lrZ2UxeHVJQ0FnSUNBZ2JHVjBJR2xrWlc1MGFYUjVJRDBnWDNSb2FYTXVhV1JsYm5ScGRHbGxjMXRwYm1SbGVGMDdYRzRnSUNBZ0lDQjFjMlZ5Y3k1d2RYTm9LR052Ym5abGNuUmxjaWhwWkdWdWRHbDBlUzVwWkdWdWRHbDBlU2twTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RYTmxjbk03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCR2RXNWpkR2x2YmlCMGJ5QnlaWFIxY200Z2RHaGxJSE5sYkdWamRHVmtJRWxrWlc1MGFYUjVJSGRwZEdocGJpQmhJSE5sYzNOcGIyNWNiaUFnS2lCQWNtVjBkWEp1SUh0SlpHVnVkR2wwZVgwZ0lDQWdJQ0FnSUdsa1pXNTBhWFI1SUNBZ0lDQWdJQ0FnYVdSbGJuUnBkSGxjYmlBZ0tpOWNiaUFnWjJWMFEzVnljbVZ1ZEVsa1pXNTBhWFI1S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1OMWNuSmxiblJKWkdWdWRHbDBlVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUVaMWJtTjBhVzl1SUhSdklITmxkQ0IwYUdVZ1kzVnljbVZ1ZENCSlpHVnVkR2wwZVNCM2FYUm9JR0VnWjJsMlpXNGdTV1JsYm5ScGRIbGNiaUFnS2lCQWNHRnlZVzBnZTBsa1pXNTBhWFI1ZlNBZ0lDQWdJQ0FnYVdSbGJuUnBkSGtnSUNBZ0lDQWdJQ0JwWkdWdWRHbDBlVnh1SUNBcUwxeHVJQ0J6WlhSRGRYSnlaVzUwU1dSbGJuUnBkSGtvYVdSbGJuUnBkSGtwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lGOTBhR2x6TG1OMWNuSmxiblJKWkdWdWRHbDBlU0E5SUdsa1pXNTBhWFI1TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHOGdjbVZ0YjNabElHRnVJR2xrWlc1MGFYUjVJR1p5YjIwZ2RHaGxJRWxrWlc1MGFYUnBaWE1nWVhKeVlYbGNiaUFnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnSUNBZ2RYTmxja2xFSUNBZ0lDQWdkWE5sY2tsRVhHNGdJQ292WEc0Z0lHUmxiR1YwWlVsa1pXNTBhWFI1S0hWelpYSkpSQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnNaWFFnZFhObGNsVlNUQ0E5SUdOdmJuWmxjblJVYjFWelpYSlZVa3dvZFhObGNrbEVLVHRjYmx4dUlDQWdJR1p2Y2lBb2JHVjBJR2xrWlc1MGFYUjVJR2x1SUY5MGFHbHpMbWxrWlc1MGFYUnBaWE1wSUh0Y2JpQWdJQ0FnSUdsbUlDaGZkR2hwY3k1cFpHVnVkR2wwYVdWelcybGtaVzUwYVhSNVhTNXBaR1Z1ZEdsMGVTQTlQVDBnZFhObGNsVlNUQ2tnZTF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVwWkdWdWRHbDBhV1Z6TG5Od2JHbGpaU2hwWkdWdWRHbDBlU3dnTVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHOGdkVzV5WldkcGMzUmxjaUJoYmlCcFpHVnVkR2wwZVNCbWNtOXRJSFJvWlNCbGJXRnBiSE5NYVhOMElHRnljbUY1SUdGdVpDQnViM1FnYzJodmR5QnBiaUIwYnlCMGFHVWdSMVZKWEc0Z0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlDQWdJR1Z0WVdsc0lDQWdJQ0FnWlcxaGFXeGNiaUFnS2k5Y2JpQWdkVzV5WldkcGMzUmxja2xrWlc1MGFYUjVLR1Z0WVdsc0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUdadmNpQW9iR1YwSUdVZ2FXNGdYM1JvYVhNdVpXMWhhV3h6VEdsemRDa2dlMXh1SUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbVZ0WVdsc2MweHBjM1JiWlYwZ1BUMDlJR1Z0WVdsc0tTQjdYRzRnSUNBZ0lDQWdJRjkwYUdsekxtVnRZV2xzYzB4cGMzUXVjM0JzYVdObEtHVXNJREVwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUVaMWJtTjBhVzl1SUhSb1lYUWdjbVZ6YjJ4MlpTQmhibVFnWTNKbFlYUmxJSFJvWlNCa2IyMWhhVzVWVWt3Z2FXNGdZMkZ6WlNCcGRDQnBjeUJ3Y205MmFXUmxaQ0J2Ym1VdUlFbG1JRzV2ZEN3Z2NtVnpiMngyWlNCMGFHVWdaR1ZtWVhWc2RDQmtiMjFoYVc1VlVreGNiaUFnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnSUNBZ0lHbGtjRVJ2YldGcGJpQWdJQ0FnYVdSd1JHOXRZV2x1SUNoUGNIUnBiMjVoYkNsY2JpQWdLaTljYmlBZ1gzSmxjMjlzZG1WRWIyMWhhVzRvYVdSd1JHOXRZV2x1S1NCN1hHNGdJQ0FnYVdZZ0tDRnBaSEJFYjIxaGFXNHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW5aRzl0WVdsdUxXbGtjRG92TDJkdmIyZHNaUzVqYjIwbk8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMlJ2YldGcGJpMXBaSEE2THk4bklDc2dhV1J3Ukc5dFlXbHVPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRVoxYm1OMGFXOXVJSFJvWVhRZ2MyVnVaSE1nWVNCeVpYRjFaWE4wSUhSdklIUm9aU0JIVlVrZ2RYTnBibWNnYldWemMyRm5aWE11SUZObGJtUnpJR0ZzYkNCcFpHVnVkR2wwYVdWeklISmxaMmx6ZEdWeVpXUWdZVzVrWEc0Z0lDb2dkR2hsSUVsa2NITWdjM1Z3Y0c5eWRHVmtMQ0JoYm1RZ2NtVjBkWEp1SUhSb1pTQnBaR1Z1ZEdsMGVTOXBaSEFnY21WalpXbDJaV1FnWW5rZ2RHaGxJRWRWU1Z4dUlDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrOGFXUmxiblJwZEhrK2ZTQWdhV1JsYm5ScGRHbGxjeUFnSUNBZ0lHeHBjM1FnYjJZZ2FXUmxiblJwZEdscFpYTmNiaUFnS2lCQWNHRnlZVzBnZTBGeWNtRjVQRk4wY21sdVp6NTlJQ0FnSUdsa2NITWdJQ0FnSUNBZ0lDQWdJQ0JzYVhOMElHOW1JR2xrY0hNZ2RHOGdZWFYwYUdWdWRHbGpZWFJsWEc0Z0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdJQ0FnSUNBZ0lDQnlaWFIxY201eklHRWdZMmh2YzJWdUlHbGtaVzUwYVhSNUlHOXlJR2xrY0Z4dUlDQXFMMXh1SUNCeVpYRjFaWE4wU1dSbGJuUnBkSGxVYjBkVlNTaHBaR1Z1ZEdsMGFXVnpMQ0JwWkhCektTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNBdkwyTnZibVJwZEdsdmJpQjBieUJqYUdWamF5QnBaaUIwYUdVZ2NtVmhiQ0JIVlVrZ2FYTWdaR1Z3Ykc5NVpXUXVJRWxtSUc1dmRDd2daR1Z3Ykc5NWN5QmhJR1poYTJVZ1ozVnBYRzRnSUNBZ0lDQnBaaUFvWDNSb2FYTXVaM1ZwUkdWd2JHOTVaV1FnUFQwOUlHWmhiSE5sS1NCN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUdkMWFVWmhhMlVnUFNCdVpYY2dSM1ZwUm1GclpTaGZkR2hwY3k1ZlozVnBWVkpNTENCZmRHaHBjeTVmYldWemMyRm5aVUoxY3lrN1hHNGdJQ0FnSUNBZ0lGOTBhR2x6TG1kMWFVWmhhMlVnUFNCbmRXbEdZV3RsTzF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVuZFdsRVpYQnNiM2xsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUd4bGRDQnRaWE56WVdkbElEMGdlM1I1Y0dVNkoyTnlaV0YwWlNjc0lIUnZPaUJmZEdocGN5NWZaM1ZwVlZKTUxDQm1jbTl0T2lCZmRHaHBjeTVmYVdSdFZWSk1MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3ZG1Gc2RXVTZJSHRwWkdWdWRHbDBhV1Z6T2lCcFpHVnVkR2wwYVdWekxDQnBaSEJ6T2lCcFpIQnpmWDE5TzF4dVhHNGdJQ0FnSUNCc1pYUWdhV1FnUFNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRaWE56WVdkbEtUdGNibHh1SUNBZ0lDQWdMeTloWkdRZ2JHbHpkR1Z1WlhJZ2QybDBhRzkxZENCMGFXMXZkWFJjYmlBZ0lDQWdJRjkwYUdsekxsOXRaWE56WVdkbFFuVnpMbUZrWkZKbGMzQnZibk5sVEdsemRHVnVaWElvWDNSb2FYTXVYMmxrYlZWU1RDd2dhV1FzSUcxelp5QTlQaUI3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG5KbGJXOTJaVkpsYzNCdmJuTmxUR2x6ZEdWdVpYSW9YM1JvYVhNdVgybGtiVlZTVEN3Z2FXUXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHRjMmN1WW05a2VTNWpiMlJsSUQwOVBTQXlNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnYzJWc1pXTjBaV1JKWkdWdWRHbDBlU0E5SUcxelp5NWliMlI1TzF4dVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjNObGJHVmpkR1ZrU1dSbGJuUnBkSGs2SUNjc0lITmxiR1ZqZEdWa1NXUmxiblJwZEhrdWRtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2MyVnNaV04wWldSSlpHVnVkR2wwZVNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZGxjbkp2Y2lCdmJpQnlaWEYxWlhOMGFXNW5JR0Z1SUdsa1pXNTBhWFI1SUhSdklIUm9aU0JIVlVrbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCdmNHVnVVRzl3ZFhBb2RYSnNjbVZqWldsMlpXUXBJSHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNWNiaUFnSUNBZ0lHeGxkQ0IzYVc0Z1BTQjNhVzVrYjNjdWIzQmxiaWgxY214eVpXTmxhWFpsWkN3Z0oyOXdaVzVKUkhKbGNYVmxjM1FuTENBbmQybGtkR2c5T0RBd0xDQm9aV2xuYUhROU5qQXdKeWs3WEc0Z0lDQWdJQ0JwWmlBb2QybHVaRzkzTG1OdmNtUnZkbUVwSUh0Y2JpQWdJQ0FnSUNBZ2QybHVMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMnh2WVdSemRHRnlkQ2NzSUdaMWJtTjBhVzl1S0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2RYSnNJRDBnWlM1MWNtdzdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHTnZaR1VnUFNBdlhGd21ZMjlrWlQwb0xpc3BKQzh1WlhobFl5aDFjbXdwTzF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0JsY25KdmNpQTlJQzljWENabGNuSnZjajBvTGlzcEpDOHVaWGhsWXloMWNtd3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR052WkdVZ2ZId2daWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJpNWpiRzl6WlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2gxY213cE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCc1pYUWdjRzlzYkZScGJXVnlJRDBnYzJWMFNXNTBaWEoyWVd3b1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDNhVzR1WTJ4dmMyVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25VMjl0WlNCbGNuSnZjaUJ2WTJOMWNtVmtJSGRvWlc0Z2RISjVhVzVuSUhSdklHZGxkQ0JwWkdWdWRHbDBlUzRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4bFlYSkpiblJsY25aaGJDaHdiMnhzVkdsdFpYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kMmx1TG1SdlkzVnRaVzUwTGxWU1RDNXBibVJsZUU5bUtDZHBaRjkwYjJ0bGJpY3BJQ0U5UFNBdE1TQjhmQ0IzYVc0dVpHOWpkVzFsYm5RdVZWSk1MbWx1WkdWNFQyWW9iRzlqWVhScGIyNHViM0pwWjJsdUtTQWhQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG1Oc1pXRnlTVzUwWlhKMllXd29jRzlzYkZScGJXVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhWeWJDQTlJQ0FnZDJsdUxtUnZZM1Z0Wlc1MExsVlNURHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IzYVc0dVkyeHZjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2gxY213cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvWlNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TENBMU1EQXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUm5WdVkzUnBiMjRnZEdoaGRDQm1aWFJqYUNCaGJpQnBaR1Z1ZEdsMGVVRnpjMlZ5ZEdsdmJpQm1jbTl0SUdFZ2RYTmxjaTVjYmlBZ0tseHVJQ0FxSUVCeVpYUjFjbTRnZTBsa1FYTnpaWEowYVc5dWZTQWdJQ0FnSUNBZ0lDQWdJQ0FnU1dSQmMzTmxjblJwYjI1Y2JpQWdLaTljYmlBZ1oyVjBTV1JsYm5ScGRIbEJjM05sY25ScGIyNG9hV1JsYm5ScFptbGxjaXdnYjNKcFoybHVMQ0IxYzJWeWJtRnRaVWhwYm5Rc0lHbGtjRVJ2YldGcGJpa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN4eVpXcGxZM1FwSUh0Y2JseHVJQ0FnSUNBZ0x5OURTRVZEU3lCM2FHVjBhR1Z5SUdseklHSnliM2R6WlhJZ1pXNTJhWEp2Ym0xbGJuUWdiM0lnYm05a1pXcHpYRzRnSUNBZ0lDQXZMMmxtSUdsMElHbHpJR0p5YjNkelpYSXNJSFJvWlc0Z1kzSmxZWFJsSUdFZ1ptRnJaU0JwWkdWdWRHbDBlVnh1WEc0Z0lDQWdJQ0JmZEdocGN5NXlkVzUwYVcxbFEyRndZV0pwYkdsMGFXVnpMbWx6UVhaaGFXeGhZbXhsS0NkaWNtOTNjMlZ5SnlrdWRHaGxiaWdvY21WemRXeDBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R5ZFc1MGFXMWxJR0p5YjNkelpYSWdhV1JsYm5ScGRIa2dZV054ZFdsemFYUnBiMjRnSnl3Z2NtVnpkV3gwS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVhKbGMzVnNkQ2tnY21WMGRYSnVPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnBaR1Z1ZEdsMGFXVnpTVzVtYnlBOUlGOTBhR2x6TG1kbGRFbGtaVzUwYVhScFpYTlViME5vYjI5elpTZ3BPMXh1WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbkpsY1hWbGMzUkpaR1Z1ZEdsMGVWUnZSMVZKS0dsa1pXNTBhWFJwWlhOSmJtWnZMbWxrWlc1MGFYUnBaWE1zSUdsa1pXNTBhWFJwWlhOSmJtWnZMbWxrY0hNcExuUm9aVzRvZG1Gc2RXVWdQVDRnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0haaGJIVmxMblI1Y0dVZ1BUMDlJQ2RwWkdWdWRHbDBlU2NwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTm9iM05sYmtsRUlEMGdaMlYwVlhObGNsVlNURVp5YjIxRmJXRnBiQ2gyWVd4MVpTNTJZV3gxWlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklISmxkSFZ5Ym5NZ2RHaGxJR2xrWlc1MGFYUjVJR2x1Wm04Z1puSnZiU0IwYUdVZ1kyaHZjMlZ1SUdsa1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUdsdUlGOTBhR2x6TG1sa1pXNTBhWFJwWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRjkwYUdsekxtbGtaVzUwYVhScFpYTmJhVjB1YVdSbGJuUnBkSGtnUFQwOUlHTm9iM05sYmtsRUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjMjlzZG1Vb1gzUm9hWE11YVdSbGJuUnBkR2xsYzF0cFhTNXRaWE56WVdkbFNXNW1ieWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duYm04Z2FXUmxiblJwZEhrZ2QyRnpJR1p2ZFc1a0lDNG5LVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIWmhiSFZsTG5SNWNHVWdQVDA5SUNkcFpIQW5LU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTmhiR3hIWlc1bGNtRjBaVTFsZEdodlpITW9kbUZzZFdVdWRtRnNkV1VzSUc5eWFXZHBiaWt1ZEdobGJpZ29kbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBb1pYSnlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkbGNuSnZjaUJ2YmlCSFZVa2djbVZqWldsMlpXUWdiV1Z6YzJGblpTNG5LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdmU2t1WTJGMFkyZ29aWEp5YjNJZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblJYSnliM0lnYjI0Z2FXUmxiblJwZEhrZ1lXTnhkV2x6YVhScGIyNGdKeXdnWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJRjkwYUdsekxuSjFiblJwYldWRFlYQmhZbWxzYVhScFpYTXVhWE5CZG1GcGJHRmliR1VvSjI1dlpHVW5LUzUwYUdWdUtDaHlaWE4xYkhRcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyNXZaR1VnYVdSbGJuUnBkSGtnWVdOeGRXbHphWFJwYjI0Z0p5d2djbVZ6ZFd4MEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYSmxjM1ZzZENrZ2NtVjBkWEp1TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hmZEdocGN5NWpkWEp5Wlc1MFNXUmxiblJwZEhrZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZWRTlFVHlCMlpYSnBabmtnZDJobGRHaGxjaUIwYUdVZ2RHOXJaVzRnYVhNZ2MzUnBiR3dnZG1Gc2FXUWdiM0lnYm05MExseHVJQ0FnSUNBZ0lDQWdJQzh2SUhOb2IzVnNaQ0JpWlNCdVpXVmtaV1FnZEc4Z2JXRnJaU0JtZFhKMGFHVnlJSEpsY1hWbGMzUnpMQ0IwYnlCdlluUmhhVzRnWVNCMllXeHBaQ0IwYjJ0bGJseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE52YkhabEtGOTBhR2x6TG1OMWNuSmxiblJKWkdWdWRHbDBlU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMmRsZEVsa1pXNTBhWFI1UVhOelpYSjBhVzl1SUdadmNpQnViMlJsYW5NbktUdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NtRnVaRzl0VG5WdFltVnlJRDBnVFdGMGFDNW1iRzl2Y2lnb1RXRjBhQzV5WVc1a2IyMG9LU0FxSURFd01EQXdLU0FySURFcE8xeHVJQ0FnSUNBZ0lDQWdJR3hsZENCcFpHVnVkR2wwZVVKMWJtUnNaU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0Z6YzJWeWRHbHZiam9nSjJGemMyVnlkR2x2Ymljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkhBNkoyNXZaR1ZxY3ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxYzJWeVVISnZabWxzWlRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRtRjBZWEk2SUNkb2RIUndjem92TDJ4b015NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjB2TFZkaFEzSnFWazFOVmkxUkwwRkJRVUZCUVVGQlFVRkpMMEZCUVVGQlFVRkJRVUZ6THpoUGJGWnhRM0JUUWpsakwzQm9iM1J2TG1wd1p5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnVPaUFuZEdWemRDQnViMlJsYW5NbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVnlibUZ0WlRvZ0oyNXZaR1ZxY3kwbklDc2djbUZ1Wkc5dFRuVnRZbVZ5SUNzZ0owQnViMlJsYW5NdVkyOXRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sY2xWU1REb2dKM1Z6WlhJNkx5OXViMlJsYW5NdVkyOXRMMjV2WkdWcWN5MG5JQ3NnY21GdVpHOXRUblZ0WW1WeVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5ZlR0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amRYSnlaVzUwU1dSbGJuUnBkSGtnUFNCcFpHVnVkR2wwZVVKMWJtUnNaVHRjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVwWkdWdWRHbDBhV1Z6TG5CMWMyZ29hV1JsYm5ScGRIbENkVzVrYkdVcE8xeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuTjBiM0poWjJWTllXNWhaMlZ5TG5ObGRDZ25hV1JOYjJSMWJHVTZhV1JsYm5ScGRHbGxjeWNzSURBc0lGOTBhR2x6TG1sa1pXNTBhWFJwWlhNcExuUm9aVzRvS0NrZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpiMngyWlNocFpHVnVkR2wwZVVKMWJtUnNaU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZlNrdVkyRjBZMmdvWlhKeWIzSWdQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25SWEp5YjNJZ2IyNGdhV1JsYm5ScGRIa2dZV054ZFdsemFYUnBiMjRnSnl3Z1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeWIzSXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCallXeHNSMlZ1WlhKaGRHVk5aWFJvYjJSektHbGtjQ3dnYjNKcFoybHVLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc1Y2JpQWdJQ0FnSUd4bGRDQndkV0pzYVdOTFpYazdYRzRnSUNBZ0lDQnNaWFFnZFhObGNtdGxlVkJoYVhJN1hHNWNiaUFnSUNBZ0lDOHZaMlZ1WlhKaGRHVnpJSFJvWlNCU1UwRWdhMlY1SUhCaGFYSmNiaUFnSUNBZ0lGOTBhR2x6TG1OeWVYQjBieTVuWlc1bGNtRjBaVkpUUVV0bGVWQmhhWElvS1M1MGFHVnVLR1oxYm1OMGFXOXVLR3RsZVZCaGFYSXBJSHRjYmx4dUlDQWdJQ0FnSUNCd2RXSnNhV05MWlhrZ1BTQmlkRzloS0d0bGVWQmhhWEl1Y0hWaWJHbGpLVHRjYmlBZ0lDQWdJQ0FnZFhObGNtdGxlVkJoYVhJZ1BTQnJaWGxRWVdseU8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11WjJWdVpYSmhkR1ZCYzNObGNuUnBiMjRvY0hWaWJHbGpTMlY1TENCdmNtbG5hVzRzSUNjbkxDQjFjMlZ5YTJWNVVHRnBjaXdnYVdSd0tUdGNibHh1SUNBZ0lDQWdmU2t1ZEdobGJpaG1kVzVqZEdsdmJpaDFjbXdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbWRsYm1WeVlYUmxRWE56WlhKMGFXOXVLSEIxWW14cFkwdGxlU3dnYjNKcFoybHVMQ0IxY213c0lIVnpaWEpyWlhsUVlXbHlMQ0JwWkhBcE8xeHVYRzRnSUNBZ0lDQjlLUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duUlhKeWIzSWdiMjRnYjJKMFlXbHVhVzVuSUVsa1pXNTBhWFI1SnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBMbU5oZEdOb0tHWjFibU4wYVc5dUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aGxjbklwTzF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnYzJWdVpFZGxibVZ5WVhSbFRXVnpjMkZuWlNoamIyNTBaVzUwY3l3Z2IzSnBaMmx1TENCMWMyVnlibUZ0WlVocGJuUXNJR2xrY0VSdmJXRnBiaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJR1J2YldGcGJpQTlJRjkwYUdsekxsOXlaWE52YkhabFJHOXRZV2x1S0dsa2NFUnZiV0ZwYmlrN1hHNGdJQ0FnYkdWMElHMWxjM05oWjJVN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1SUNBZ0lDQWdiV1Z6YzJGblpTQTlJSHQwZVhCbE9pZGxlR1ZqZFhSbEp5d2dkRzg2SUdSdmJXRnBiaXdnWm5KdmJUb2dYM1JvYVhNdVgybGtiVlZTVEN3Z1ltOWtlVG9nZTNKbGMyOTFjbU5sT2lBbmFXUmxiblJwZEhrbkxDQnRaWFJvYjJRNklDZG5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJpY3NJSEJoY21GdGN6b2dlMk52Ym5SbGJuUnpPaUJqYjI1MFpXNTBjeXdnYjNKcFoybHVPaUJ2Y21sbmFXNHNJSFZ6WlhKdVlXMWxTR2x1ZERvZ2RYTmxjbTVoYldWSWFXNTBmWDE5TzF4dUlDQWdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnNaWFFnY21WemRXeDBJRDBnY21WekxtSnZaSGt1ZG1Gc2RXVTdYRzVjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WlhOMWJIUXBPMXh1WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lITjBiM0psU1dSbGJuUnBkSGtvY21WemRXeDBMQ0JyWlhsUVlXbHlLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEc1Y2JpQWdJQ0FnSUd4bGRDQnpjR3hwZEdWa1FYTnpaWEowYVc5dUlEMGdjbVZ6ZFd4MExtRnpjMlZ5ZEdsdmJpNXpjR3hwZENnbkxpY3BPMXh1SUNBZ0lDQWdiR1YwSUdGemMyVnlkR2x2YmxCaGNuTmxaRHRjYmx4dUlDQWdJQ0FnTHk5MlpYSnBabmtnYVdZZ2RHaGxJSFJ2YTJWdUlHTnZiblJoYVc1eklIUm9aU0F6SUdOdmJYQnZibVZ1ZEhNc0lHOXlJR3AxYzNRZ2RHaGxJR0Z6YzJWeWRHbHZibHh1SUNBZ0lDQWdhV1lnS0hOd2JHbDBaV1JCYzNObGNuUnBiMjViTVYwcElIdGNiaUFnSUNBZ0lDQWdZWE56WlhKMGFXOXVVR0Z5YzJWa0lEMGdTbE5QVGk1d1lYSnpaU2hoZEc5aUtITndiR2wwWldSQmMzTmxjblJwYjI1Yk1WMHBLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzVjYmlBZ0lDQWdJQ0FnWVhOelpYSjBhVzl1VUdGeWMyVmtJRDBnU2xOUFRpNXdZWEp6WlNoaGRHOWlLSEpsYzNWc2RDNWhjM05sY25ScGIyNHBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR3hsZENCcFpGUnZhMlZ1TzF4dVhHNGdJQ0FnSUNBdkwxUlBSRThnY21WdGIzWmxJSFJvWlNCMlpYSnBabWxqWVhScGIyNGdZVzVrSUhKbGJXOTJaU0IwYUdVZ2RHOXJaVzVKUkVwVFQwNGdabkp2YlNCMGFHVWdaMjl2WjJ4bElHbGtjRkJ5YjNoNU8xeHVJQ0FnSUNBZ2FXWWdLR0Z6YzJWeWRHbHZibEJoY25ObFpDNTBiMnRsYmtsRVNsTlBUaWtnZTF4dUlDQWdJQ0FnSUNCcFpGUnZhMlZ1SUQwZ1lYTnpaWEowYVc5dVVHRnljMlZrTG5SdmEyVnVTVVJLVTA5T08xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2FXUlViMnRsYmlBOUlHRnpjMlZ5ZEdsdmJsQmhjbk5sWkR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2JHVjBJR1Z0WVdsc0lEMGdhV1JVYjJ0bGJpNWxiV0ZwYkNCOGZDQnBaRlJ2YTJWdUxuTjFZanRjYmx4dUlDQWdJQ0FnYkdWMElHbGtaVzUwYVdacFpYSWdQU0JuWlhSVmMyVnlWVkpNUm5KdmJVVnRZV2xzS0dWdFlXbHNLVHRjYmx4dUlDQWdJQ0FnY21WemRXeDBMbWxrWlc1MGFYUjVJRDBnYVdSbGJuUnBabWxsY2p0Y2JseHVJQ0FnSUNBZ1gzUm9hWE11YVdSbGJuUnBkSGt1WVdSa1NXUmxiblJwZEhrb2NtVnpkV3gwS1R0Y2JseHVJQ0FnSUNBZ0x5OGdZMmhsWTJzZ2FXWWdaWGhwYzNSeklHRnVlU0JwYm1adlZHOXJaVzRnYVc0Z2RHaGxJSEpsYzNWc2RDQnlaV05sYVhabFpGeHVJQ0FnSUNBZ2JHVjBJR2x1Wm05VWIydGxiaUE5SUNoeVpYTjFiSFF1YVc1bWIxUnZhMlZ1S1NBL0lISmxjM1ZzZEM1cGJtWnZWRzlyWlc0Z09pQjdmVHRjYmx4dUlDQWdJQ0FnYkdWMElHTnZiVzF2Yms1aGJXVWdQU0JwWkZSdmEyVnVMbTVoYldVZ2ZId2daVzFoYVd3dWMzVmljM1J5YVc1bktEQXNJR1Z0WVdsc0xtbHVaR1Y0VDJZb0owQW5LU2s3WEc0Z0lDQWdJQ0JzWlhRZ2RYTmxjbEJ5YjJacGJHVkNkVzVrYkdVZ1BTQjdkWE5sY201aGJXVTZJR1Z0WVdsc0xDQmpiam9nWTI5dGJXOXVUbUZ0WlN3Z1lYWmhkR0Z5T2lCcGJtWnZWRzlyWlc0dWNHbGpkSFZ5WlN3Z2JHOWpZV3hsT2lCcGJtWnZWRzlyWlc0dWJHOWpZV3hsTENCMWMyVnlWVkpNT2lCcFpHVnVkR2xtYVdWeWZUdGNibHh1SUNBZ0lDQWdMeTlqY21WaGRHbHZiaUJ2WmlCaElHNWxkeUJLVTA5T0lIZHBkR2dnZEdobElHbGtaVzUwYVhSNUlIUnZJSE5sYm1RZ2RtbGhJRzFsYzNOaFoyVnpYRzRnSUNBZ0lDQnNaWFFnYm1WM1NXUmxiblJwZEhrZ1BTQjdkWE5sY2xCeWIyWnBiR1U2SUhWelpYSlFjbTltYVd4bFFuVnVaR3hsTENCcFpIQTZJSEpsYzNWc2RDNXBaSEF1Wkc5dFlXbHVMQ0JoYzNObGNuUnBiMjQ2SUhKbGMzVnNkQzVoYzNObGNuUnBiMjU5TzF4dUlDQWdJQ0FnY21WemRXeDBMbTFsYzNOaFoyVkpibVp2SUQwZ2JtVjNTV1JsYm5ScGRIazdYRzRnSUNBZ0lDQnlaWE4xYkhRdWEyVjVVR0ZwY2lBOUlHdGxlVkJoYVhJN1hHNWNiaUFnSUNBZ0lGOTBhR2x6TG1OMWNuSmxiblJKWkdWdWRHbDBlU0E5SUc1bGQwbGtaVzUwYVhSNU8xeHVYRzRnSUNBZ0lDQXZMM1psY21sbWVTQnBaaUIwYUdVZ2FXUWdZV3h5WldGa2VTQmxlR2x6ZEhNdUlFbG1JR0ZzY21WaFpIa2daWGhwYzNSeklIUm9aVzRnWkc4Z2JtOTBJR0ZrWkNCMGJ5QjBhR1VnYVdSbGJuUnBkR2xsY3lCc2FYTjBPMXh1SUNBZ0lDQWdiR1YwSUdsa1FXeHlaV0ZrZVVWNGFYTjBjeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdiR1YwSUc5c1pFbGtPMXh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhV1JsYm5ScGRIa2dhVzRnWDNSb2FYTXVhV1JsYm5ScGRHbGxjeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9YM1JvYVhNdWFXUmxiblJwZEdsbGMxdHBaR1Z1ZEdsMGVWMHVhV1JsYm5ScGRIa2dQVDA5SUhKbGMzVnNkQzVwWkdWdWRHbDBlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbGtRV3h5WldGa2VVVjRhWE4wY3lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2IyeGtTV1FnUFNCZmRHaHBjeTVwWkdWdWRHbDBhV1Z6VzJsa1pXNTBhWFI1WFM1dFpYTnpZV2RsU1c1bWJ6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2FXUkJiSEpsWVdSNVJYaHBjM1J6S1NCN1hHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2IyeGtTV1FwTzF4dUlDQWdJQ0FnSUNCc1pYUWdaWGhwYzNSeklEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lDQWdMeTlqYUdWamF5QnBaaUIwYUdVZ2FXUmxiblJwZEhrZ1pYaHBjM1J6SUdsdUlHVnRZV2xzVEdsemRDd2dhV1lnYm05MElHRmtaQ0JwZEZ4dUlDQWdJQ0FnSUNBdkwxUm9hWE1nYVhNZ2RYTmxablZzSUdsbUlHRnVJR2xrWlc1MGFYUjVJSGRoY3lCd2NtVjJhVzkxYzJ4NUlISmxaMmx6ZEdWeVpXUWdZblYwSUhkaGN5QnNZWFJsY2lCMWJuSmxaMmx6ZEdWeVpXUmNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0JwYmlCZmRHaHBjeTVsYldGcGJITk1hWE4wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbVZ0WVdsc2MweHBjM1JiYVYwZ1BUMDlJR1Z0WVdsc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGVHbHpkSE1nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNnaFpYaHBjM1J6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVpXMWhhV3h6VEdsemRDNXdkWE5vS0dWdFlXbHNLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVsYldGcGJITk1hWE4wTG5CMWMyZ29aVzFoYVd3cE8xeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1cFpHVnVkR2wwYVdWekxuQjFjMmdvY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVjM1J2Y21GblpVMWhibUZuWlhJdWMyVjBLQ2RwWkUxdlpIVnNaVHBwWkdWdWRHbDBhV1Z6Snl3Z01Dd2dYM1JvYVhNdWFXUmxiblJwZEdsbGN5a3VkR2hsYmlnb0tTQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHNWxkMGxrWlc1MGFYUjVLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRkpsY1hWbGMzUnpJSFJvWlNCSlpIQlFjbTk0ZVNCbWNtOXRJR0VnWjJsMlpXNGdSRzl0WVdsdUlHWnZjaUJoYmlCcFpHVnVkR2wwZVVGemMyVnlkR2x2Ymx4dUlDQXFYRzRnSUNvZ1FIQmhjbUZ0SUNCN1JFOU5VM1J5YVc1bmZTQmpiMjUwWlc1MGN5QWdJQ0FnWTI5dWRHVnVkSE5jYmlBZ0tpQkFjR0Z5WVcwZ0lIdEVUMDFUZEhKcGJtZDlJRzl5YVdkcGJpQWdJQ0FnSUNCdmNtbG5hVzVjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEVUMDFUZEhKcGJtZDlJSFZ6WlhKdVlXMWxTR2x1ZENCMWMyVnlibUZ0WlVocGJuUmNiaUFnS2lCQWNHRnlZVzBnSUh0S1UwOU9mU0FnSUNBZ0lHdGxlVkJoYVhJZ0lDQWdJQ0FnZFhObGNpQnJaWGxRWVdseVhHNGdJQ29nUUhKbGRIVnliaUI3U1dSQmMzTmxjblJwYjI1OUlDQWdJQ0FnSUNBZ0lDQWdJQ0JKWkVGemMyVnlkR2x2Ymx4dUlDQXFMMXh1SUNCblpXNWxjbUYwWlVGemMyVnlkR2x2YmloamIyNTBaVzUwY3l3Z2IzSnBaMmx1TENCMWMyVnlibUZ0WlVocGJuUXNJR3RsZVZCaGFYSXNJR2xrY0VSdmJXRnBiaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduWjJWdVpYSmhkR1ZCYzNObGNuUnBiMjRuS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCZmRHaHBjeTV6Wlc1a1IyVnVaWEpoZEdWTlpYTnpZV2RsS0dOdmJuUmxiblJ6TENCdmNtbG5hVzRzSUhWelpYSnVZVzFsU0dsdWRDd2dhV1J3Ukc5dFlXbHVLUzUwYUdWdUtDaHlaWE4xYkhRcElEMCtJSHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6ZFd4MExteHZaMmx1VlhKc0tTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV2Y0dWdVVHOXdkWEFvY21WemRXeDBMbXh2WjJsdVZYSnNLUzUwYUdWdUtDaDJZV3gxWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTd2dLR1Z5Y2lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZ6ZFd4MEtTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV6ZEc5eVpVbGtaVzUwYVhSNUtISmxjM1ZzZEN3Z2EyVjVVR0ZwY2lrdWRHaGxiaWdvZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJSDBzSUNobGNuSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaGxjbklwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkbGNuSnZjaUJ2YmlCdlluUmhhVzVwYm1jZ2FXUmxiblJwZEhrZ2FXNW1iM0p0WVhScGIyNG5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRTlVU0VWU0lGVlRSVkluVXlCSlJFVk9WRWxVV1Z4dUlDQXFMMXh1WEc0Z0lDOHFLbHh1SUNBcUlGSmxjWFZsYzNSeklIUm9aU0JKWkhCUWNtOTRlU0JtY205dElHRWdaMmwyWlc0Z1JHOXRZV2x1SUhSdklIWmhiR2xrWVhSbElHRnVJRWxrWlc1MGFYUjVRWE56WlhKMGFXOXVYRzRnSUNvZ1VtVjBkWEp1Y3lCaElIQnliMjFwYzJVZ2QybDBhQ0IwYUdVZ2NtVnpkV3gwSUdaeWIyMGdkR2hsSUhaaGJHbGtZWFJwYjI0dVhHNGdJQ29nUUhCaGNtRnRJQ0I3UkU5TlUzUnlhVzVuZlNCaGMzTmxjblJwYjI1Y2JpQWdLaUJBY0dGeVlXMGdJSHRFVDAxVGRISnBibWQ5SUc5eWFXZHBiaUFnSUNBZ0lDQnZjbWxuYVc1Y2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0FnSUNBZ0lDQWdJRkJ5YjIxcGMyVWdJQ0FnSUNBZ0lDQndjbTl0YVhObElIZHBkR2dnZEdobElISmxjM1ZzZENCbWNtOXRJSFJvWlNCMllXeHBaR0YwYVc5dVhHNGdJQ292WEc0Z0lIWmhiR2xrWVhSbFFYTnpaWEowYVc5dUtHRnpjMlZ5ZEdsdmJpd2diM0pwWjJsdUxDQnBaSEJFYjIxaGFXNHBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2JHVjBJR1J2YldGcGJpQTlJRjkwYUdsekxsOXlaWE52YkhabFJHOXRZV2x1S0dsa2NFUnZiV0ZwYmlrN1hHNWNiaUFnSUNCc1pYUWdiV1Z6YzJGblpTQTlJSHQwZVhCbE9pZGxlR1ZqZFhSbEp5d2dkRzg2SUdSdmJXRnBiaXdnWm5KdmJUb2dYM1JvYVhNdVgybGtiVlZTVEN3Z1ltOWtlVG9nZTNKbGMyOTFjbU5sT2lBbmFXUmxiblJwZEhrbkxDQnRaWFJvYjJRNklDZDJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYSmhiWE02SUh0aGMzTmxjblJwYjI0NklHRnpjMlZ5ZEdsdmJpd2diM0pwWjJsdU9pQnZjbWxuYVc1OWZYMDdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0WlhOellXZGxMQ0FvY21WemRXeDBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUXVZbTlrZVM1amIyUmxJRDA5UFNBeU1EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGMzVnNkQzVpYjJSNUxuWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0oyVnljbTl5Snl3Z2NtVnpkV3gwTG1KdlpIa3VZMjlrWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWlc1amNubHdkRTFsYzNOaFoyVW9iV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25aVzVqY25sd2RDQnRaWE56WVdkbElDY3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdiR1YwSUdselNHRnVaRk5vWVd0bFZIbHdaU0E5SUcxbGMzTmhaMlV1ZEhsd1pTQTlQVDBnSjJoaGJtUnphR0ZyWlNjN1hHNWNiaUFnSUNBZ0lDOHZhV1lnYVhNZ2JtOTBJSFJ2SUdGd2NHeDVJR1Z1WTNKNWNIUnBiMjRzSUhSb1pXNGdjbVYwZFhKdWN5QnlaWE52YkhabFhHNGdJQ0FnSUNCcFppQW9JVjkwYUdsekxtbHpWRzlWYzJWRmJtTnllWEIwYVc5dUlDWW1JQ0ZwYzBoaGJtUlRhR0ZyWlZSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyVnVZM0o1Y0hScGIyNGdaR2x6WVdKc1pXUW5LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzI5c2RtVW9iV1Z6YzJGblpTazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2VkU5RVR5QnlaVzF2ZG1VZ2RHaHBjeUJzYjJkcFl5QmhibVFnYlc5MlpTQnBkQ0IwYnlCaElIVjBhV3dnWm5WdVkzUnBiMjVjYmlBZ0lDQWdJR3hsZENCemNHeHBkR1ZrVkc5VlVrd2dQU0J0WlhOellXZGxMblJ2TG5Od2JHbDBLQ2N2SnlrN1hHNGdJQ0FnSUNCc1pYUWdaR0YwWVU5aWFtVmpkRlZTVENBOUlITndiR2wwWldSVWIxVlNURnN3WFNBcklDY3ZMeWNnS3lCemNHeHBkR1ZrVkc5VlVreGJNbDBnS3lBbkx5Y2dLeUJ6Y0d4cGRHVmtWRzlWVWt4Yk0xMDdYRzRnSUNBZ0lDQnBaaUFvYzNCc2FYUmxaRlJ2VlZKTUxteGxibWQwYUNBK0lEWXBJSHRjYmlBZ0lDQWdJQ0FnWkdGMFlVOWlhbVZqZEZWU1RDQTlJSE53YkdsMFpXUlViMVZTVEZzd1hTQXJJQ2N2THljZ0t5QnpjR3hwZEdWa1ZHOVZVa3hiTWwwZ0t5QW5MeWNnS3lCemNHeHBkR1ZrVkc5VlVreGJNMTBnS3lBbkx5Y2dLeUJ6Y0d4cGRHVmtWRzlWVWt4Yk5GMDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR3hsZENCcGMxUnZSR0YwWVU5aWFtVmpkQ0E5SUdselJHRjBZVTlpYW1WamRGVlNUQ2hrWVhSaFQySnFaV04wVlZKTUtUdGNiaUFnSUNBZ0lHeGxkQ0JwYzBaeWIyMUllWEJsY25SNUlEMGdaR2wyYVdSbFZWSk1LRzFsYzNOaFoyVXVabkp2YlNrdWRIbHdaU0E5UFQwZ0oyaDVjR1Z5ZEhrbk8xeHVJQ0FnSUNBZ2JHVjBJR2x6Vkc5SWVYQmxjblI1SUQwZ1pHbDJhV1JsVlZKTUtHMWxjM05oWjJVdWRHOHBMblI1Y0dVZ1BUMDlJQ2RvZVhCbGNuUjVKenRjYmx4dUlDQWdJQ0FnYVdZZ0tHMWxjM05oWjJVdWRIbHdaU0E5UFQwZ0ozVndaR0YwWlNjcElIdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0dselJuSnZiVWg1Y0dWeWRIa2dKaVlnYVhOVWIwaDVjR1Z5ZEhrcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhWelpYSlZVa3dnUFNCZmRHaHBjeTVmY21WbmFYTjBjbmt1WjJWMFNIbHdaWEowZVU5M2JtVnlLRzFsYzNOaFoyVXVabkp2YlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gxYzJWeVZWSk1LU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJqYUdWamF5QnBaaUJsZUdsemRITWdZVzU1SUd0bGVYTWdZbVYwZDJWbGJpQjBkMjhnZFhObGNuTmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1kyaGhkRXRsZVhNZ1BTQmZkR2hwY3k1amFHRjBTMlY1YzF0dFpYTnpZV2RsTG1aeWIyMGdLeUFuUEMwK0p5QXJJRzFsYzNOaFoyVXVkRzlkTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doWTJoaGRFdGxlWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpJRDBnWDNSb2FYTXVYMjVsZDBOb1lYUkRjbmx3ZEc4b2JXVnpjMkZuWlN3Z2RYTmxjbFZTVENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblkzSmxZWFJsUTJoaGRFdGxlU0JsYm1OeWVYQjBKeXdnYldWemMyRm5aUzVtY205dElDc2diV1Z6YzJGblpTNTBieWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amFHRjBTMlY1YzF0dFpYTnpZV2RsTG1aeWIyMGdLeUFuUEMwK0p5QXJJRzFsYzNOaFoyVXVkRzlkSUQwZ1kyaGhkRXRsZVhNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxMbUp2WkhrdWFHRnVaSE5vWVd0bFVHaGhjMlVnUFNBbmMzUmhjblJJWVc1a1UyaGhhMlVuTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGphR0YwUzJWNWN5NWhkWFJvWlc1MGFXTmhkR1ZrSUNZbUlDRnBjMGhoYm1SVGFHRnJaVlI1Y0dVcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2wySUQwZ1gzUm9hWE11WTNKNWNIUnZMbWRsYm1WeVlYUmxTVllvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTnllWEIwYnk1bGJtTnllWEIwUVVWVEtHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVVp5YjIxVFpYTnphVzl1UzJWNUxDQnRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXNJR2wyS1M1MGFHVnVLR1Z1WTNKNWNIUmxaRlpoYkhWbElEMCtJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1ptbHNkR1Z5WldSTlpYTnpZV2RsSUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2JXVnpjMkZuWlN3Z2JXVnpjMkZuWlM1aWIyUjVMblpoYkhWbElDc2dhWFlzSUdOb1lYUkxaWGx6TG1oNWNHVnlkSGxHY205dExtMWxjM05oWjJWSmJtWnZLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWpjbmx3ZEc4dWFHRnphRWhOUVVNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlVoaGMyaExaWGtzSUdacGJIUmxjbVZrVFdWemMyRm5aU2t1ZEdobGJpaG9ZWE5vSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkeVpYTjFiSFFnYjJZZ2FHRnphQ0FuTENCb1lYTm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCN2FYWTZJRjkwYUdsekxtTnllWEIwYnk1bGJtTnZaR1VvYVhZcExDQjJZV3gxWlRvZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaGxibU55ZVhCMFpXUldZV3gxWlNrc0lHaGhjMmc2SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb2FHRnphQ2w5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNBOUlFcFRUMDR1YzNSeWFXNW5hV1o1S0haaGJIVmxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsbUlHbHpJR0VnYUdGdVpITm9ZV3RsSUcxbGMzTmhaMlVzSUdwMWMzUWdjbVZ6YjJ4MlpTQnBkRnh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FYTklZVzVrVTJoaGEyVlVlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJsYkhObExDQnpkR0Z5ZEhNZ1lTQnVaWGNnYUdGdVpITm9ZV3RsSUhCeWIzUnZZMjlzWEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWtiMGhoYm1SVGFHRnJaVkJvWVhObEtHMWxjM05oWjJVc0lHTm9ZWFJMWlhsektTNTBhR1Z1S0daMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTm9ZWFJMWlhselcyMWxjM05oWjJVdVpuSnZiU0FySUNjOExUNG5JQ3NnYldWemMyRm5aUzUwYjEwZ1BTQjJZV3gxWlM1amFHRjBTMlY1Y3p0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaDJZV3gxWlM1dFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RsYm1OeWVYQjBJR2hoYm1SemFHRnJaU0J3Y205MGIyTnZiQ0J3YUdGelpTQW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQXZMMmxtSUdaeWIyMGdhSGx3WlhKMGVTQjBieUJoSUdSaGRHRlBZbXBsWTNSVlVreGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5HY205dFNIbHdaWEowZVNBbUppQnBjMVJ2UkdGMFlVOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduWkdGMFlVOWlhbVZqZENCMllXeDFaU0IwYnlCbGJtTnllWEIwT2lBbkxDQnRaWE56WVdkbExtSnZaSGt1ZG1Gc2RXVXBPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmtZWFJoVDJKcVpXTjBTMlY1SUQwZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEZObGMzTnBiMjVMWlhselcyUmhkR0ZQWW1wbFkzUlZVa3hkTzF4dVhHNGdJQ0FnSUNBZ0lDOHZhV1lnYm04Z2EyVjVJR1Y0YVhOMGN5d2dZM0psWVhSbElHRWdibVYzSUc5dVpTQnBaaUJwY3lCMGFHVWdjbVZ3YjNKMFpYSWdiMllnWkdGMFlVOWlhbVZqZEZ4dUlDQWdJQ0FnSUNCcFppQW9JV1JoZEdGUFltcGxZM1JMWlhrcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2FYTkllWEJsY25SNVVtVndiM0owWlhJZ1BTQmZkR2hwY3k1eVpXZHBjM1J5ZVM1blpYUlNaWEJ2Y25SbGNsVlNURk41Ym1Ob2IyNXZkWE1vWkdGMFlVOWlhbVZqZEZWU1RDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QnBaaUIwYUdVZ2FIbHdaWEowZVNCcGN5QjBhR1VnY21Wd2IzSjBaWElnYjJZZ2RHaGxJR1JoZEdGUFltcGxZM1FnZEdobGJpQm5aVzVsY21GMFpYTWdZU0J6WlhOemFXOXVJR3RsZVZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzBoNWNHVnlkSGxTWlhCdmNuUmxjaUFtSmlCcGMwaDVjR1Z5ZEhsU1pYQnZjblJsY2lBOVBUMGdiV1Z6YzJGblpTNW1jbTl0S1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnpaWE56YVc5dVMyVjVJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFVtRnVaRzl0S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBVMlZ6YzJsdmJrdGxlWE5iWkdGMFlVOWlhbVZqZEZWU1RGMGdQU0I3YzJWemMybHZia3RsZVRvZ2MyVnpjMmx2Ymt0bGVTd2dhWE5VYjBWdVkzSjVjSFE2SUhSeWRXVjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBTMlY1SUQwZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEZObGMzTnBiMjVMWlhselcyUmhkR0ZQWW1wbFkzUlZVa3hkTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dlkyaGxZMnNnYVdZZ2RHaGxjbVVnYVhNZ1lXeHlaV0ZrZVNCaElITmxjM05wYjI0Z2EyVjVJR1p2Y2lCMGFHVWdZMmhoZENCeWIyOXRYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhUMkpxWldOMFMyVjVLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJoYm1RZ2FXWWdhWE1nZEc4Z1lYQndiSGtnWlc1amNubHdkR2x2Yml3Z1pXNWpjbmx3ZENCMGFHVWdiV1Z6YzJGblpYTmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVTlpYW1WamRFdGxlUzVwYzFSdlJXNWpjbmx3ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFNWWW9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkzSjVjSFJCUlZNb1pHRjBZVTlpYW1WamRFdGxlUzV6WlhOemFXOXVTMlY1TENCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtFcFRUMDR1YzNSeWFXNW5hV1o1S0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrcExDQnBkaWt1ZEdobGJpaGxibU55ZVhCMFpXUldZV3gxWlNBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdacGJIUmxjbVZrVFdWemMyRm5aU0E5SUY5MGFHbHpMbDltYVd4MFpYSk5aWE56WVdkbFZHOUlZWE5vS0cxbGMzTmhaMlVzSUcxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNBcklHbDJMQ0JrWVhSaFQySnFaV04wUzJWNUxuTmxjM05wYjI1TFpYa3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTnllWEIwYnk1b1lYTm9TRTFCUXloa1lYUmhUMkpxWldOMFMyVjVMbk5sYzNOcGIyNUxaWGtzSUdacGJIUmxjbVZrVFdWemMyRm5aU2t1ZEdobGJpaG9ZWE5vSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0Nkb1lYTm9JQ2NzSUdoaGMyZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHNWxkMVpoYkhWbElEMGdlM1poYkhWbE9pQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR1Z1WTNKNWNIUmxaRlpoYkhWbEtTd2dhWFk2SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb2FYWXBMQ0JvWVhOb09pQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR2hoYzJncGZUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1MllXeDFaU0E5SUVwVFQwNHVjM1J5YVc1bmFXWjVLRzVsZDFaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdhV1lnYm05MExDQnFkWE4wSUhObGJtUWdkR2hsSUcxbGMzTmhaMlZjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEdGeWRDQjBhR1VnWjJWdVpYSmhkR2x2YmlCdlppQmhJRzVsZHlCelpYTnphVzl1SUV0bGVWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25abUZwYkdWa0lIUnZJR1JsWTNKNWNIUWdiV1Z6YzJGblpTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCa1pXTnllWEIwVFdWemMyRm5aU2h0WlhOellXZGxLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RrWldOeWVYQjBJRzFsYzNOaFoyVWdKeWs3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2FYTklZVzVrVTJoaGEyVlVlWEJsSUQwZ2JXVnpjMkZuWlM1MGVYQmxJRDA5UFNBbmFHRnVaSE5vWVd0bEp6dGNibHh1SUNBZ0lDQWdMeTlwWmlCcGN5QnViM1FnZEc4Z1lYQndiSGtnWlc1amNubHdkR2x2Yml3Z2RHaGxiaUJ5WlhSMWNtNXpJSEpsYzI5c2RtVmNiaUFnSUNBZ0lHbG1JQ2doWDNSb2FYTXVhWE5VYjFWelpVVnVZM0o1Y0hScGIyNGdKaVlnSVdselNHRnVaRk5vWVd0bFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25aR1ZqY25sd2RHbHZiaUJrYVhOaFlteGxaQ2NwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemIyeDJaU2h0WlhOellXZGxLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk5VVQwUlBJSEpsYlc5MlpTQjBhR2x6SUd4dloybGpJR0Z1WkNCdGIzWmxJR2wwSUhSdklHRWdkWFJwYkNCbWRXNWpkR2x2Ymx4dVhHNGdJQ0FnSUNCc1pYUWdjM0JzYVhSbFpGUnZWVkpNSUQwZ2JXVnpjMkZuWlM1MGJ5NXpjR3hwZENnbkx5Y3BPMXh1SUNBZ0lDQWdiR1YwSUdSaGRHRlBZbXBsWTNSVlVrd2dQU0J6Y0d4cGRHVmtWRzlWVWt4Yk1GMGdLeUFuTHk4bklDc2djM0JzYVhSbFpGUnZWVkpNV3pKZElDc2dKeThuSUNzZ2MzQnNhWFJsWkZSdlZWSk1Xek5kTzF4dUlDQWdJQ0FnYVdZZ0tITndiR2wwWldSVWIxVlNUQzVzWlc1bmRHZ2dQaUEyS1NCN1hHNGdJQ0FnSUNBZ0lHUmhkR0ZQWW1wbFkzUlZVa3dnUFNCemNHeHBkR1ZrVkc5VlVreGJNRjBnS3lBbkx5OG5JQ3NnYzNCc2FYUmxaRlJ2VlZKTVd6SmRJQ3NnSnk4bklDc2djM0JzYVhSbFpGUnZWVkpNV3pOZElDc2dKeThuSUNzZ2MzQnNhWFJsWkZSdlZWSk1XelJkTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCc1pYUWdhWE5VYjBSaGRHRlBZbXBsWTNRZ1BTQnBjMFJoZEdGUFltcGxZM1JWVWt3b1pHRjBZVTlpYW1WamRGVlNUQ2s3WEc0Z0lDQWdJQ0JzWlhRZ2FYTkdjbTl0U0hsd1pYSjBlU0E5SUdScGRtbGtaVlZTVENodFpYTnpZV2RsTG1aeWIyMHBMblI1Y0dVZ1BUMDlJQ2RvZVhCbGNuUjVKenRjYmlBZ0lDQWdJR3hsZENCcGMxUnZTSGx3WlhKMGVTQTlJR1JwZG1sa1pWVlNUQ2h0WlhOellXZGxMblJ2S1M1MGVYQmxJRDA5UFNBbmFIbHdaWEowZVNjN1hHNWNiaUFnSUNBZ0lHbG1JQ2h0WlhOellXZGxMblI1Y0dVZ1BUMDlJQ2QxY0dSaGRHVW5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dmFYTWdhWE1nYUhsd1pYSjBlU0IwYnlCb2VYQmxjblI1SUdOdmJXMTFibWxqWVhScGIyNWNiaUFnSUNBZ0lHbG1JQ2hwYzBaeWIyMUllWEJsY25SNUlDWW1JR2x6Vkc5SWVYQmxjblI1S1NCN1hHNGdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjJSbFkzSjVjSFFnYUhsd1pYSjBlU0IwYnlCb2VYQmxjblI1SnlrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IxYzJWeVZWSk1JRDBnWDNSb2FYTXVYM0psWjJsemRISjVMbWRsZEVoNWNHVnlkSGxQZDI1bGNpaHRaWE56WVdkbExuUnZLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnpaWEpWVWt3cElIdGNibHh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmphR0YwUzJWNWN5QTlJRjkwYUdsekxtTm9ZWFJMWlhselcyMWxjM05oWjJVdWRHOGdLeUFuUEMwK0p5QXJJRzFsYzNOaFoyVXVabkp2YlYwN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGamFHRjBTMlY1Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE1nUFNCZmRHaHBjeTVmYm1WM1EyaGhkRU55ZVhCMGJ5aHRaWE56WVdkbExDQjFjMlZ5VlZKTUxDQW5aR1ZqY25sd2RDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTJoaGRFdGxlWE5iYldWemMyRm5aUzUwYnlBcklDYzhMVDRuSUNzZ2JXVnpjMkZuWlM1bWNtOXRYU0E5SUdOb1lYUkxaWGx6TzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGphR0YwUzJWNWN5NWhkWFJvWlc1MGFXTmhkR1ZrSUNZbUlDRnBjMGhoYm1SVGFHRnJaVlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjJZV3gxWlNBOUlFcFRUMDR1Y0dGeWMyVW9iV1Z6YzJGblpTNWliMlI1TG5aaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwZGlBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9kbUZzZFdVdWFYWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1JoZEdFZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSFpoYkhWbExuWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb1lYTm9JRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNoMllXeDFaUzVvWVhOb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU55ZVhCMGJ5NWtaV055ZVhCMFFVVlRLR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVZSdlUyVnpjMmx2Ymt0bGVTd2daR0YwWVN3Z2FYWXBMblJvWlc0b1pHVmpjbmx3ZEdWa1JHRjBZU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGtaV055ZVhCMFpXUWdkbUZzZFdVZ0p5d2daR1ZqY25sd2RHVmtSR0YwWVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNBOUlHUmxZM0o1Y0hSbFpFUmhkR0U3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHWnBiSFJsY21Wa1RXVnpjMkZuWlNBOUlGOTBhR2x6TGw5bWFXeDBaWEpOWlhOellXZGxWRzlJWVhOb0tHMWxjM05oWjJVc0lHUmxZM0o1Y0hSbFpFUmhkR0VnS3lCcGRpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVkzSjVjSFJ2TG5abGNtbG1lVWhOUVVNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVWRzlJWVhOb1MyVjVMQ0JtYVd4MFpYSmxaRTFsYzNOaFoyVXNJR2hoYzJncExuUm9aVzRvY21WemRXeDBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2R5WlhOMWJIUWdiMllnYUdGemFDQjJaWEpwWm1sallYUnBiMjRoSUNjc0lISmxjM1ZzZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1aWIyUjVMbUZ6YzJWeWRHVmtTV1JsYm5ScGRIa2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselNHRnVaRk5vWVd0bFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyUnZTR0Z1WkZOb1lXdGxVR2hoYzJVb2JXVnpjMkZuWlN3Z1kyaGhkRXRsZVhNcExuUm9aVzRvWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDJsbUlHbDBJSGRoY3lCemRHRnlkR1ZrSUdKNUlHUnZUWFYwZFdGc1FYVjBhR1Z1ZEdsallYUnBiMjRnZEdobGJpQmxibVJ6SUhSb1pTQndjbTkwYjJOdmJGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ1BUMDlJQ2RvWVc1a1UyaGhhMlZGYm1RbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZGtaV055ZVhCMElHaGhibVJ6YUdGclpTQndjbTkwYjJOdmJDQndhR0Z6WlNBbktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJwWmlCM1lYTWdjM1JoY25SbFpDQmllU0JoSUcxbGMzTmhaMlVzSUhSb1pXNGdjbVZ6Wlc1a0lIUm9ZWFFnYldWemMyRm5aVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1Ob1lYUkxaWGx6VzIxbGMzTmhaMlV1ZEc4Z0t5QW5QQzArSnlBcklHMWxjM05oWjJVdVpuSnZiVjBnUFNCMllXeDFaUzVqYUdGMFMyVjVjenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNoMllXeDFaUzV0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMlJsWTNKNWNIUWdhR0Z1WkhOb1lXdGxJSEJ5YjNSdlkyOXNJSEJvWVhObElDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkM2NtOXVaeUJ0WlhOellXZGxJR1J2SUdSbFkzSjVjSFFuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RsY25KdmNpQnZiaUJrWldOeWVYQjBJRzFsYzNOaFoyVW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZhV1lnWm5KdmJTQm9lWEJsY25SNUlIUnZJR0VnWkdGMFlVOWlhbVZqZEZWU1RGeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBjMFp5YjIxSWVYQmxjblI1SUNZbUlHbHpWRzlFWVhSaFQySnFaV04wS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RrWVhSaFQySnFaV04wSUhaaGJIVmxJSFJ2SUdSbFkzSjVjSFE2SUNjc0lHMWxjM05oWjJVdVltOWtlU2s3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR1JoZEdGUFltcGxZM1JMWlhrZ1BTQmZkR2hwY3k1a1lYUmhUMkpxWldOMFUyVnpjMmx2Ymt0bGVYTmJaR0YwWVU5aWFtVmpkRlZTVEYwN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dSaGRHRlBZbXBsWTNSTFpYa3BJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZZMmhsWTJzZ2FXWWdhWE1nZEc4Z1lYQndiSGtnWlc1amNubHdkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaFQySnFaV04wUzJWNUxtbHpWRzlGYm1OeWVYQjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0dGeWMyVmtWbUZzZFdVZ1BTQktVMDlPTG5CaGNuTmxLRzFsYzNOaFoyVXVZbTlrZVM1MllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVhZZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEJoY25ObFpGWmhiSFZsTG1sMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQmxibU55ZVhCMFpXUldZV3gxWlNBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9jR0Z5YzJWa1ZtRnNkV1V1ZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2hoYzJnZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEJoY25ObFpGWmhiSFZsTG1oaGMyZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amNubHdkRzh1WkdWamNubHdkRUZGVXloa1lYUmhUMkpxWldOMFMyVjVMbk5sYzNOcGIyNUxaWGtzSUdWdVkzSjVjSFJsWkZaaGJIVmxMQ0JwZGlrdWRHaGxiaWhrWldOeWVYQjBaV1JXWVd4MVpTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCd1lYSnpaV1JXWVd4MVpTQTlJRXBUVDA0dWNHRnljMlVvWVhSdllpaGtaV055ZVhCMFpXUldZV3gxWlNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25aR1ZqY25sd2RHVmtJRlpoYkhWbExDY3NJSEJoY25ObFpGWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsSUQwZ2NHRnljMlZrVm1Gc2RXVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdacGJIUmxjbVZrVFdWemMyRm5aU0E5SUY5MGFHbHpMbDltYVd4MFpYSk5aWE56WVdkbFZHOUlZWE5vS0cxbGMzTmhaMlVzSUhCaGNuTmxaRlpoYkhWbElDc2dhWFlwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbU55ZVhCMGJ5NTJaWEpwWm5sSVRVRkRLR1JoZEdGUFltcGxZM1JMWlhrdWMyVnpjMmx2Ymt0bGVTd2dabWxzZEdWeVpXUk5aWE56WVdkbExDQm9ZWE5vS1M1MGFHVnVLSEpsYzNWc2RDQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5amIyNXpiMnhsTG14dlp5Z25jbVZ6ZFd4MElHOW1JR2hoYzJnZ2RtVnlhV1pwWTJGMGFXOXVJU0FuTENCeVpYTjFiSFFwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1aWIyUjVMbUZ6YzJWeWRHVmtTV1JsYm5ScGRIa2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2TDJsbUlHNXZkQ3dnYW5WemRDQnlaWFIxY200Z2RHaGxJRzFsYzNOaFoyVmNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1aWIyUjVMbUZ6YzJWeWRHVmtTV1JsYm5ScGRIa2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J0WlhOellXZGxMbUp2WkhrdVlYTnpaWEowWldSSlpHVnVkR2wwZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2Y21WcVpXTjBLQ2R1YnlCelpYTnphVzl1UzJWNUlHWnZjaUJqYUdGMElISnZiMjBnWm05MWJtUW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvSjNkeWIyNW5JRzFsYzNOaFoyVWdkRzhnWkdWamNubHdkQ2NwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmtiMDExZEhWaGJFRjFkR2hsYm5ScFkyRjBhVzl1S0hObGJtUmxjaXdnY21WalpXbDJaWElwSUh0Y2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnblpHOU5kWFIxWVd4QmRYUm9aVzUwYVdOaGRHbHZiam9nSnl3Z2MyVnVaR1Z5TENCeVpXTmxhWFpsY2lrN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnNaWFFnWkdGMFlVOWlhbVZqZEZWU1REdGNibHh1SUNBZ0lDOHZJR05vWldOcklHbG1JSFJvWlNCelpXNWtaWElnYVhNZ1lTQmtZWFJoVDJKcVpXTjBJR0Z1WkNCcFppQnpieUJ6ZEc5eVpYTWdkR2hoZENCMllXeDFaVnh1SUNBZ0lHeGxkQ0J5WlhCdmNuUmxjbFZTVENBOUlGOTBhR2x6TG5KbFoybHpkSEo1TG1kbGRGSmxjRzl5ZEdWeVZWSk1VM2x1WTJodmJtOTFjeWh6Wlc1a1pYSXBPMXh1SUNBZ0lHbG1JQ2h5WlhCdmNuUmxjbFZTVENrZ2UxeHVJQ0FnSUNBZ1pHRjBZVTlpYW1WamRGVlNUQ0E5SUhObGJtUmxjanRjYmlBZ0lDQWdJSE5sYm1SbGNpQTlJSEpsY0c5eWRHVnlWVkpNTzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCdGMyY2dQU0I3WEc0Z0lDQWdJQ0IwYnpvZ2NtVmpaV2wyWlhJc1hHNGdJQ0FnSUNCbWNtOXRPaUJ6Wlc1a1pYSXNYRzRnSUNBZ0lDQmpZV3hzWW1GamF6b2dkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdZbTlrZVRvZ2UyaGhibVJ6YUdGclpWQm9ZWE5sT2lBbmMzUmhjblJJWVc1a1UyaGhhMlVuTENCcFoyNXZjbVU2SUNkcFoyNXZjbVZOWlhOellXZGxKMzFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1WEc0Z0lDQWdJQ0JwWmlBb0lYTmxibVJsY2lCOGZDQWhjbVZqWldsMlpYSXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYW1WamRDZ25jMlZ1WkdWeUlHOXlJSEpsWTJWcGRtVnlJRzFwYzNOcGJtY2diMjRnWkc5TmRYUjFZV3hCZFhSb1pXNTBhV05oZEdsdmJpY3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ1kyaGhkRXRsZVhNZ1BTQmZkR2hwY3k1amFHRjBTMlY1YzF0elpXNWtaWElnS3lBblBDMCtKeUFySUhKbFkyVnBkbVZ5WFR0Y2JpQWdJQ0FnSUd4bGRDQjFjMlZ5VlZKTUlEMGdYM1JvYVhNdVgzSmxaMmx6ZEhKNUxtZGxkRWg1Y0dWeWRIbFBkMjVsY2loelpXNWtaWElwTzF4dVhHNGdJQ0FnSUNCcFppQW9kWE5sY2xWU1RDa2dlMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZMmhoZEV0bGVYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QmpZV3hzWW1GamF5QjBieUJ5WlhOdmJIWmxJSGRvWlc0Z1ptbHVhWE5vSUhSb1pTQnRkWFIxWVd3Z1lYVjBhR1Z1ZEdsallYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjbVZ6YjJ4MlpXUWdQU0JtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMk5oYkd4aVlXTnJJSFpoYkhWbE9pY3NJSFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdiWE5uTG1OaGJHeGlZV05ySUQwZ2NtVnpiMngyWldRN1hHNGdJQ0FnSUNBZ0lDQWdiWE5uTG1SaGRHRlBZbXBsWTNSVlVrd2dQU0JrWVhSaFQySnFaV04wVlZKTU8xeHVYRzRnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE1nUFNCZmRHaHBjeTVmYm1WM1EyaGhkRU55ZVhCMGJ5aHRjMmNzSUhWelpYSlZVa3dwTzF4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1Ob1lYUkxaWGx6VzNObGJtUmxjaUFySUNjOExUNG5JQ3NnY21WalpXbDJaWEpkSUQwZ1kyaGhkRXRsZVhNN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb1kyaGhkRXRsZVhNdVlYVjBhR1Z1ZEdsallYUmxaQ2tnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhOMFlYSjBVMlZ6YzJsdmJrdGxlVVY0WTJoaGJtZGxJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkRzg2SUhObGJtUmxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnliMjA2SUhKbFkyVnBkbVZ5WEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVrWVhSaFQySnFaV04wVlZKTUlEMGdaR0YwWVU5aWFtVmpkRlZTVER0Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmMyVnVaRkpsY0c5eWRHVnlVMlZ6YzJsdmJrdGxlU2h6ZEdGeWRGTmxjM05wYjI1TFpYbEZlR05vWVc1blpTd2dZMmhoZEV0bGVYTXBMblJvWlc0b2RtRnNkV1VnUFQ0Z2UxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaDJZV3gxWlM1dFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9KMlY0WTJoaGJtZGxJRzltSUdOb1lYUWdjMlZ6YzJsdmJrdGxlU0JwYm1sMGFXRjBaV1FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5a2IwaGhibVJUYUdGclpWQm9ZWE5sS0cxelp5d2dZMmhoZEV0bGVYTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9KMlZ5Y205eUlHOXVJR1J2VFhWMGRXRnNRWFYwYUdWdWRHbGpZWFJwYjI0bktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNCOVhHNWNiaUFnWDJSdlNHRnVaRk5vWVd0bFVHaGhjMlVvYldWemMyRm5aU3dnWTJoaGRFdGxlWE1wSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnbmFHRnVaSE5vWVd0bFZIbHdaU2NwTzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzY21WcVpXTjBLU0I3WEc1Y2JpQWdJQ0FnSUd4bGRDQm9ZVzVrYzJoaGEyVlVlWEJsSUQwZ2JXVnpjMkZuWlM1aWIyUjVMbWhoYm1SemFHRnJaVkJvWVhObE8xeHVJQ0FnSUNBZ2JHVjBJR2wyTzF4dUlDQWdJQ0FnYkdWMElHaGhjMmc3WEc0Z0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCN2ZUdGNiaUFnSUNBZ0lHeGxkQ0JtYVd4MFpYSmxaRTFsYzNOaFoyVTdYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tHaGhibVJ6YUdGclpWUjVjR1VwSUh0Y2JseHVJQ0FnSUNBZ0lDQmpZWE5sSUNkemRHRnlkRWhoYm1SVGFHRnJaU2M2WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTVtY205dFVtRnVaRzl0SUQwZ1gzUm9hWE11WTNKNWNIUnZMbWRsYm1WeVlYUmxVbUZ1Wkc5dEtDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjM1JoY25SSVlXNWtVMmhoYTJWTmMyY2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmFHRnVaSE5vWVd0bEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhSdk9pQnRaWE56WVdkbExuUnZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1puSnZiVG9nYldWemMyRm5aUzVtY205dExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYzJoaGEyVlFhR0Z6WlRvZ0ozTmxibVJsY2tobGJHeHZKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9ZMmhoZEV0bGVYTXVhMlY1Y3k1bWNtOXRVbUZ1Wkc5dEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YUdGdVpITm9ZV3RsU0dsemRHOXllUzV6Wlc1a1pYSklaV3hzYnlBOUlGOTBhR2x6TGw5bWFXeDBaWEpOWlhOellXZGxWRzlJWVhOb0tITjBZWEowU0dGdVpGTm9ZV3RsVFhObkxDQjFibVJsWm1sdVpXUXNJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdsbUlIZGhjeUIwYUdVZ1pXNWpjbmx3ZENCbWRXNWpkR2x2YmlCdmNpQjBhR1VnYlhWMGRXRnNJR0YxZEdobGJuUnBZMkYwYVc5dUlIUm9ZWFFnY21WeGRXVnpkQ0IwYUdWY2JpQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEdGeWRDQnZaaUIwYUdVZ2FHRnVaRk5vWVd0bFVHaGhjMlV1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR05vWVhSTFpYbHpMbWx1YVhScFlXeE5aWE56WVdkbEtTQjdjbVZ6YjJ4MlpTaDdiV1Z6YzJGblpUb2djM1JoY25SSVlXNWtVMmhoYTJWTmMyY3NJR05vWVhSTFpYbHpPaUJqYUdGMFMyVjVjMzBwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NWphR0YwUzJWNWMxdHRaWE56WVdkbExtWnliMjBnS3lBblBDMCtKeUFySUcxbGMzTmhaMlV1ZEc5ZElEMGdZMmhoZEV0bGVYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHpkR0Z5ZEVoaGJtUlRhR0ZyWlUxelp5azdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCallYTmxJQ2R6Wlc1a1pYSklaV3hzYnljNlhHNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmMyVnVaR1Z5U0dWc2JHOG5LVHRjYmlBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1b1lXNWtjMmhoYTJWSWFYTjBiM0o1TG5ObGJtUmxja2hsYkd4dklEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29iV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YTJWNWN5NW1jbTl0VW1GdVpHOXRJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNodFpYTnpZV2RsTG1KdlpIa3VkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbXRsZVhNdWRHOVNZVzVrYjIwZ1BTQmZkR2hwY3k1amNubHdkRzh1WjJWdVpYSmhkR1ZTWVc1a2IyMG9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J6Wlc1a1pYSklaV3hzYjAxelp5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkb1lXNWtjMmhoYTJVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc4NklHMWxjM05oWjJVdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnliMjA2SUcxbGMzTmhaMlV1ZEc4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJ6YUdGclpWQm9ZWE5sT2lBbmNtVmpaV2wyWlhKSVpXeHNieWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQmZkR2hwY3k1amNubHdkRzh1Wlc1amIyUmxLR05vWVhSTFpYbHpMbXRsZVhNdWRHOVNZVzVrYjIwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvWVc1a2MyaGhhMlZJYVhOMGIzSjVMbkpsWTJWcGRtVnlTR1ZzYkc4Z1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHpaVzVrWlhKSVpXeHNiMDF6Wnl3Z2RXNWtaV1pwYm1Wa0xDQmphR0YwUzJWNWN5NW9lWEJsY25SNVJuSnZiUzV0WlhOellXZGxTVzVtYnlrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDdiV1Z6YzJGblpUb2djMlZ1WkdWeVNHVnNiRzlOYzJjc0lHTm9ZWFJMWlhsek9pQmphR0YwUzJWNWMzMHBPMXh1WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZHlaV05sYVhabGNraGxiR3h2SnpwY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkeVpXTmxhWFpsY2tobGJHeHZKeWs3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWFHRnVaSE5vWVd0bFNHbHpkRzl5ZVM1eVpXTmxhWFpsY2tobGJHeHZJRDBnWDNSb2FYTXVYMlpwYkhSbGNrMWxjM05oWjJWVWIwaGhjMmdvYldWemMyRm5aU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1MllXeHBaR0YwWlVGemMyVnlkR2x2YmlodFpYTnpZV2RsTG1KdlpIa3VhV1JsYm5ScGRIa3VZWE56WlhKMGFXOXVMQ0IxYm1SbFptbHVaV1FzSUcxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTNXBaSEFwTG5Sb1pXNG9LSFpoYkhWbEtTQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2VkU5RVR5QnlaVzF2ZG1VZ2JHRjBaWElnZEdocGN5QjJaWEpwWm1sallYUnBiMjRnWVhNZ2MyOXZiaUJoY3lCaGJHd2dkR2hsSUVsa1VDQndjbTk0ZVNCaGNtVWdkWEJrWVhSbFpDQnBiaUIwYUdVZ1pYaGhiWEJzWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdWdVkyOWtaV1J3ZFdKc2FXTkxaWGtnUFNBb2RIbHdaVzltSUhaaGJIVmxMbU52Ym5SbGJuUnpJRDA5UFNBbmMzUnlhVzVuSnlrZ1B5QjJZV3gxWlM1amIyNTBaVzUwY3lBNklIWmhiSFZsTG1OdmJuUmxiblJ6TG01dmJtTmxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY21WalpXbDJaWEpRZFdKc2FXTkxaWGtnUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtHVnVZMjlrWldSd2RXSnNhV05MWlhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIQnlaVzFoYzNSbGNsTmxZM0psZENBOUlGOTBhR2x6TG1OeWVYQjBieTVuWlc1bGNtRjBaVkJOVXlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElIUnZVbUZ1Wkc5dElEMGdiV1Z6YzJGblpTNWliMlI1TG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWFIbHdaWEowZVZSdkxtRnpjMlZ5ZEdsdmJpQTlJRzFsYzNOaFoyVXVZbTlrZVM1cFpHVnVkR2wwZVM1aGMzTmxjblJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvZVhCbGNuUjVWRzh1Y0hWaWJHbGpTMlY1SUQwZ2NtVmpaV2wyWlhKUWRXSnNhV05MWlhrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvZVhCbGNuUjVWRzh1ZFhObGNrbEVJQ0FnSUQwZ2RtRnNkV1V1WTI5dWRHVnVkSE11WlcxaGFXdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1clpYbHpMblJ2VW1GdVpHOXRJQ0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2RHOVNZVzVrYjIwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YTJWNWN5NXdjbVZ0WVhOMFpYSkxaWGtnUFNCd2NtVnRZWE4wWlhKVFpXTnlaWFE3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCamIyNWpZWFJMWlhrZ1BTQmZkR2hwY3k1amNubHdkRzh1WTI5dVkyRjBVRTFUZDJsMGFGSmhibVJ2YlhNb2NISmxiV0Z6ZEdWeVUyVmpjbVYwTENCamFHRjBTMlY1Y3k1clpYbHpMblJ2VW1GdVpHOXRMQ0JqYUdGMFMyVjVjeTVyWlhsekxtWnliMjFTWVc1a2IyMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11WTNKNWNIUnZMbWRsYm1WeVlYUmxUV0Z6ZEdWeVUyVmpjbVYwS0dOdmJtTmhkRXRsZVN3Z0oyMWxjM05oWjJWSWFYTjBiM0pwWXljZ0t5QmphR0YwUzJWNWN5NXJaWGx6TG5SdlVtRnVaRzl0SUNzZ1kyaGhkRXRsZVhNdWEyVjVjeTVtY205dFVtRnVaRzl0S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5blpXNWxjbUYwWlNCMGFHVWdiV0Z6ZEdWeUlHdGxlVnh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvS0cxaGMzUmxja3RsZVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTV0WVhOMFpYSkxaWGtnUFNCdFlYTjBaWEpMWlhrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWTFpYbHpLRzFoYzNSbGNrdGxlU3dnSjJ0bGVTQmxlSEJoYm5OcGIyNG5JQ3NnWTJoaGRFdGxlWE11YTJWNWN5NTBiMUpoYm1SdmJTQXJJR05vWVhSTFpYbHpMbXRsZVhNdVpuSnZiVkpoYm1SdmJTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZaMlZ1WlhKaGRHVWdkR2hsSUhONWJXMWxkSEpwWXlCaGJtUWdhR0Z6YUNCclpYbHpYRzRnSUNBZ0lDQWdJQ0FnZlNrdWRHaGxiaWdvYTJWNWN5a2dQVDRnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsVWIxTmxjM05wYjI1TFpYa2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHJaWGx6V3pCZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG10bGVYTXVhSGx3WlhKMGVVWnliMjFUWlhOemFXOXVTMlY1SUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvYTJWNWMxc3hYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxVYjBoaGMyaExaWGtnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2hyWlhseld6SmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVVp5YjIxSVlYTm9TMlY1SUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvYTJWNWMxc3pYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBkaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NW5aVzVsY21GMFpVbFdLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlM1cGRpQTlJRjkwYUdsekxtTnllWEIwYnk1bGJtTnZaR1VvYVhZcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiV1Z6YzJGblpWTjBjblZqZEhWeVpTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyaGhibVJ6YUdGclpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUJ0WlhOellXZGxMbVp5YjIwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdaeWIyMDZJRzFsYzNOaFoyVXVkRzhzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9ZVzVrYzJoaGEyVlFhR0Z6WlRvZ0ozTmxibVJsY2tObGNuUnBabWxqWVhSbEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCb1lYTm9JSFJvWlNCMllXeDFaU0JoYm1RZ2RHaGxJR2wyWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3gwWlhKbFpFMWxjM05oWjJVZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHRaWE56WVdkbFUzUnlkV04wZFhKbExDQW5iMnNuSUNzZ2FYWXNJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dWFHRnphRWhOUVVNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlVoaGMyaExaWGtzSUdacGJIUmxjbVZrVFdWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlnb2FHRnphQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVXVhR0Z6YUNBOUlGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9hR0Z6YUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dlpXNWpjbmx3ZENCMGFHVWdaR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1OeWVYQjBieTVsYm1OeWVYQjBRVVZUS0dOb1lYUkxaWGx6TG10bGVYTXVhSGx3WlhKMGVVWnliMjFUWlhOemFXOXVTMlY1TENBbmIyc25MQ0JwZGlrN1hHNGdJQ0FnSUNBZ0lDQWdmU2t1ZEdobGJpZ29aVzVqY25sd2RHVmtSR0YwWVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1V1YzNsdFpYUnlhV05GYm1OeWVYQjBhVzl1SUQwZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaGxibU55ZVhCMFpXUkVZWFJoS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtTnllWEIwYnk1bGJtTnllWEIwVWxOQktHTm9ZWFJMWlhsekxtaDVjR1Z5ZEhsVWJ5NXdkV0pzYVdOTFpYa3NJR05vWVhSTFpYbHpMbXRsZVhNdWNISmxiV0Z6ZEdWeVMyVjVLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lIMHBMblJvWlc0b0tHVnVZM0o1Y0hSbFpGWmhiSFZsS1NBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsTG1GemMzbHRaWFJ5YVdORmJtTnllWEIwYVc5dUlEMGdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkyOWtaU2hsYm1OeWVYQjBaV1JXWVd4MVpTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J0WlhOellXZGxVM1J5ZFdOMGRYSmxJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5hR0Z1WkhOb1lXdGxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzg2SUcxbGMzTmhaMlV1Wm5KdmJTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1puSnZiVG9nYldWemMyRm5aUzUwYnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWW05a2VUb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoYm1SemFHRnJaVkJvWVhObE9pQW5jMlZ1WkdWeVEyVnlkR2xtYVdOaGRHVW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRaWE56WVdkbFZHOUlZWE5vSUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2JXVnpjMkZuWlZOMGNuVmpkSFZ5WlN3Z1kyaGhkRXRsZVhNdWEyVjVjeTV3Y21WdFlYTjBaWEpMWlhrc0lHTm9ZWFJMWlhsekxtaDVjR1Z5ZEhsR2NtOXRMbTFsYzNOaFoyVkpibVp2S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRjkwYUdsekxtTnllWEIwYnk1emFXZHVVbE5CS0dOb1lYUkxaWGx6TG1oNWNHVnlkSGxHY205dExuQnlhWFpoZEdWTFpYa3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtHTm9ZWFJMWlhsekxtaGhibVJ6YUdGclpVaHBjM1J2Y25rcElDc2dTbE5QVGk1emRISnBibWRwWm5rb2JXVnpjMkZuWlZSdlNHRnphQ2twTzF4dVhHNGdJQ0FnSUNBZ0lDQWdmU2t1ZEdobGJpaHphV2R1WVhSMWNtVWdQVDRnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNXphV2R1WVhSMWNtVWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpXNWpiMlJsS0hOcFoyNWhkSFZ5WlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlaV05sYVhabGNraGxiR3h2VFhObklEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmFHRnVaSE5vWVd0bEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHODZJRzFsYzNOaFoyVXVabkp2YlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJUb2diV1Z6YzJGblpTNTBieXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZbTlrZVRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhibVJ6YUdGclpWQm9ZWE5sT2lBbmMyVnVaR1Z5UTJWeWRHbG1hV05oZEdVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCaWRHOWhLRXBUVDA0dWMzUnlhVzVuYVdaNUtIWmhiSFZsS1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9ZWFJMWlhsekxtaGhibVJ6YUdGclpVaHBjM1J2Y25rdWMyVnVaR1Z5UTJWeWRHbG1hV05oZEdVZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHlaV05sYVhabGNraGxiR3h2VFhObkxDQW5iMnNuSUNzZ2FYWXNJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoN2JXVnpjMkZuWlRvZ2NtVmpaV2wyWlhKSVpXeHNiMDF6Wnl3Z1kyaGhkRXRsZVhNNklHTm9ZWFJMWlhsemZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNCOUxDQmxjbkp2Y2lBOVBpQnlaV3BsWTNRb1pYSnliM0lwS1R0Y2JseHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuYzJWdVpHVnlRMlZ5ZEdsbWFXTmhkR1VuT2x4dVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjNObGJtUmxja05sY25ScFptbGpZWFJsSnlrN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhKbFkyVnBkbVZrVm1Gc2RXVWdQU0JLVTA5T0xuQmhjbk5sS0dGMGIySW9iV1Z6YzJGblpTNWliMlI1TG5aaGJIVmxLU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1MllXeHBaR0YwWlVGemMyVnlkR2x2YmlodFpYTnpZV2RsTG1KdlpIa3VhV1JsYm5ScGRIa3VZWE56WlhKMGFXOXVMQ0IxYm1SbFptbHVaV1FzSUcxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTNXBaSEFwTG5Sb1pXNG9LSFpoYkhWbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWlc1amNubHdkR1ZrVUUxVElEMGdYM1JvYVhNdVkzSjVjSFJ2TG1SbFkyOWtaU2h5WldObGFYWmxaRlpoYkhWbExtRnpjM2x0WlhSeWFXTkZibU55ZVhCMGFXOXVLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeTlVVDBSUElISmxiVzkyWlNCc1lYUmxjaUIwYUdseklIWmxjbWxtYVdOaGRHbHZiaUJoY3lCemIyOXVJR0Z6SUdGc2JDQjBhR1VnU1dSUUlIQnliM2g1SUdGeVpTQjFjR1JoZEdWa0lHbHVJSFJvWlNCbGVHRnRjR3hsWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWlc1amIyUmxaSEIxWW14cFkwdGxlU0E5SUNoMGVYQmxiMllnZG1Gc2RXVXVZMjl1ZEdWdWRITWdQVDA5SUNkemRISnBibWNuS1NBL0lIWmhiSFZsTG1OdmJuUmxiblJ6SURvZ2RtRnNkV1V1WTI5dWRHVnVkSE11Ym05dVkyVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J6Wlc1a1pYSlFkV0pzYVdOTFpYa2dQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0dWdVkyOWtaV1J3ZFdKc2FXTkxaWGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhSGx3WlhKMGVWUnZMbUZ6YzJWeWRHbHZiaUE5SUcxbGMzTmhaMlV1WW05a2VTNXBaR1Z1ZEdsMGVTNWhjM05sY25ScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCamFHRjBTMlY1Y3k1b2VYQmxjblI1Vkc4dWNIVmliR2xqUzJWNUlEMGdjMlZ1WkdWeVVIVmliR2xqUzJWNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YUhsd1pYSjBlVlJ2TG5WelpYSkpSQ0FnSUNBOUlIWmhiSFZsTG1OdmJuUmxiblJ6TG1WdFlXbHNPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11WTNKNWNIUnZMbVJsWTNKNWNIUlNVMEVvWTJoaGRFdGxlWE11YUhsd1pYSjBlVVp5YjIwdWNISnBkbUYwWlV0bGVTd2daVzVqY25sd2RHVmtVRTFUS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJSDBzSUNobGNuSnZjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZEZjbkp2Y2lCa2RYSnBibWNnWVhWMGFHVnVkR2xqWVhScGIyNGdiMllnYVdSbGJuUnBkSGtuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk5dlluUmhhVzRnZEdobElGQnlaVzFoYzNSbGNrdGxlU0IxYzJsdVp5QjBhR1VnY0hKcGRtRjBaU0JyWlhsY2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtIQnRjeUE5UGlCN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG10bGVYTXVjSEpsYldGemRHVnlTMlY1SUQwZ2JtVjNJRlZwYm5RNFFYSnlZWGtvY0cxektUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSE5wWjI1aGRIVnlaU0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2NtVmpaV2wyWldSV1lXeDFaUzV6YVdkdVlYUjFjbVVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NtVmpaV2wyWldSdGMyZFViMGhoYzJnZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHRaWE56WVdkbExDQmphR0YwUzJWNWN5NXJaWGx6TG5CeVpXMWhjM1JsY2t0bGVTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVkbVZ5YVdaNVVsTkJLR05vWVhSTFpYbHpMbWg1Y0dWeWRIbFVieTV3ZFdKc2FXTkxaWGtzSUVwVFQwNHVjM1J5YVc1bmFXWjVLR05vWVhSTFpYbHpMbWhoYm1SemFHRnJaVWhwYzNSdmNua3BJQ3NnU2xOUFRpNXpkSEpwYm1kcFpua29jbVZqWldsMlpXUnRjMmRVYjBoaGMyZ3BMQ0J6YVdkdVlYUjFjbVVwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCMllXeHBaR0YwWlhNZ2RHaGxJSE5wWjI1aGRIVnlaU0J5WldObGFYWmxaRnh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvYzJsbmJsWmhiR2xrWVhScGIyNVNaWE4xYkhRZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduYzJsbmJtRjBkWEpsSUhaaGJHbGtZWFJwYjI0Z2NtVnpkV3gwSUNjc0lITnBaMjVXWVd4cFpHRjBhVzl1VW1WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JqYjI1allYUkxaWGtnUFNCZmRHaHBjeTVqY25sd2RHOHVZMjl1WTJGMFVFMVRkMmwwYUZKaGJtUnZiWE1vWTJoaGRFdGxlWE11YTJWNWN5NXdjbVZ0WVhOMFpYSkxaWGtzSUdOb1lYUkxaWGx6TG10bGVYTXVkRzlTWVc1a2IyMHNJR05vWVhSTFpYbHpMbXRsZVhNdVpuSnZiVkpoYm1SdmJTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVaMlZ1WlhKaGRHVk5ZWE4wWlhKVFpXTnlaWFFvWTI5dVkyRjBTMlY1TENBbmJXVnpjMkZuWlVocGMzUnZjbWxqSnlBcklHTm9ZWFJMWlhsekxtdGxlWE11ZEc5U1lXNWtiMjBnS3lCamFHRjBTMlY1Y3k1clpYbHpMbVp5YjIxU1lXNWtiMjBwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCblpXNWxjbUYwWlhNZ2RHaGxJRzFoYzNSbGNpQnJaWGx6SUdaeWIyMGdkR2hsSUZCeVpXMWhjM1JsY2lCclpYa2dZVzVrSUhSb1pTQnlZVzVrYjIxelhHNGdJQ0FnSUNBZ0lDQWdmU2t1ZEdobGJpaHRZWE4wWlhKTFpYa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhMlY1Y3k1dFlYTjBaWEpMWlhrZ1BTQnRZWE4wWlhKTFpYazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVqY25sd2RHOHVaMlZ1WlhKaGRHVkxaWGx6S0cxaGMzUmxja3RsZVN3Z0oydGxlU0JsZUhCaGJuTnBiMjRuSUNzZ1kyaGhkRXRsZVhNdWEyVjVjeTUwYjFKaGJtUnZiU0FySUdOb1lYUkxaWGx6TG10bGVYTXVabkp2YlZKaGJtUnZiU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdkbGJtVnlZWFJsY3lCMGFHVWdjM2x0YldWMGNtbGpJR3RsZVhNZ2RHOGdZbVVnZFhObFpDQnBiaUIwYUdVZ2MzbHRiV1YwY21saklHVnVZM0o1Y0hScGIyNWNiaUFnSUNBZ0lDQWdJQ0I5S1M1MGFHVnVLR3RsZVhNZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlZObGMzTnBiMjVMWlhrZ1BTQnVaWGNnVldsdWREaEJjbkpoZVNoclpYbHpXekJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVZSdlUyVnpjMmx2Ymt0bGVTQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHdGxlWE5iTVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVJuSnZiVWhoYzJoTFpYa2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHJaWGx6V3pKZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG10bGVYTXVhSGx3WlhKMGVWUnZTR0Z6YUV0bGVTQTlJRzVsZHlCVmFXNTBPRUZ5Y21GNUtHdGxlWE5iTTEwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhZZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEpsWTJWcGRtVmtWbUZzZFdVdWFYWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1JoZEdFZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSEpsWTJWcGRtVmtWbUZzZFdVdWMzbHRaWFJ5YVdORmJtTnllWEIwYVc5dUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV055ZVhCMFFVVlRLR05vWVhSTFpYbHpMbXRsZVhNdWFIbHdaWEowZVZSdlUyVnpjMmx2Ymt0bGVTd2daR0YwWVN3Z2FYWXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmloa1pXTnllWEIwWldSRVlYUmhJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyUmxZM0o1Y0hSbFpFUmhkR0VuTENCa1pXTnllWEIwWldSRVlYUmhLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhoZEV0bGVYTXVhR0Z1WkhOb1lXdGxTR2x6ZEc5eWVTNXpaVzVrWlhKRFpYSjBhV1pwWTJGMFpTQTlJRjkwYUdsekxsOW1hV3gwWlhKTlpYTnpZV2RsVkc5SVlYTm9LRzFsYzNOaFoyVXNJR1JsWTNKNWNIUmxaRVJoZEdFZ0t5QnBkaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb1lYTm9VbVZqWldsMlpXUWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0hKbFkyVnBkbVZrVm1Gc2RXVXVhR0Z6YUNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdacGJIUmxjbVZrVFdWemMyRm5aU0E5SUY5MGFHbHpMbDltYVd4MFpYSk5aWE56WVdkbFZHOUlZWE5vS0cxbGMzTmhaMlVzSUdSbFkzSjVjSFJsWkVSaGRHRWdLeUJwZGlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWpjbmx3ZEc4dWRtVnlhV1o1U0UxQlF5aGphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxVYjBoaGMyaExaWGtzSUdacGJIUmxjbVZrVFdWemMyRm5aU3dnYUdGemFGSmxZMlZwZG1Wa0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvZG1WeWFXWnBaV1JJWVhOb0lDQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0ozSmxjM1ZzZENCdlppQm9ZWE5vSUhabGNtbG1hV05oZEdsdmJpQW5MQ0IyWlhKcFptbGxaRWhoYzJncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmxZMlZwZG1WeVJtbHVhWE5vWldSTlpYTnpZV2RsSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuYUdGdVpITm9ZV3RsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc4NklHMWxjM05oWjJVdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlRvZ2JXVnpjMkZuWlM1MGJ5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJtUnphR0ZyWlZCb1lYTmxPaUFuY21WalpXbDJaWEpHYVc1cGMyaGxaRTFsYzNOaFoyVW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwZGlBOUlGOTBhR2x6TG1OeWVYQjBieTVuWlc1bGNtRjBaVWxXS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNXBkaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb2FYWXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1hV3gwWlhKbFpFMWxjM05oWjJVZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHlaV05sYVhabGNrWnBibWx6YUdWa1RXVnpjMkZuWlN3Z0oyOXJJU2NnS3lCcGRpd2dZMmhoZEV0bGVYTXVhSGx3WlhKMGVVWnliMjB1YldWemMyRm5aVWx1Wm04cE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWDNSb2FYTXVZM0o1Y0hSdkxtaGhjMmhJVFVGREtHTm9ZWFJMWlhsekxtdGxlWE11YUhsd1pYSjBlVVp5YjIxSVlYTm9TMlY1TENCeVpXTmxhWFpsY2tacGJtbHphR1ZrVFdWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlob1lYTm9JRDArSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVXVhR0Z6YUNBOUlGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9hR0Z6YUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVkzSjVjSFJ2TG1WdVkzSjVjSFJCUlZNb1kyaGhkRXRsZVhNdWEyVjVjeTVvZVhCbGNuUjVSbkp2YlZObGMzTnBiMjVMWlhrc0lDZHZheUVuTENCcGRpazdYRzVjYmlBZ0lDQWdJQ0FnSUNCOUtTNTBhR1Z1S0dWdVkzSjVjSFJsWkZaaGJIVmxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbExuWmhiSFZsSUQwZ1gzUm9hWE11WTNKNWNIUnZMbVZ1WTI5a1pTaGxibU55ZVhCMFpXUldZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2NtVmpaV2wyWlhKR2FXNXBjMmhsWkUxbGMzTmhaMlVnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RvWVc1a2MyaGhhMlVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnpvZ2JXVnpjMkZuWlM1bWNtOXRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jbTl0T2lCdFpYTnpZV2RsTG5SdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGdVpITm9ZV3RsVUdoaGMyVTZJQ2R5WldObGFYWmxja1pwYm1semFHVmtUV1Z6YzJGblpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHSjBiMkVvU2xOUFRpNXpkSEpwYm1kcFpua29kbUZzZFdVcEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYUdGMFMyVjVjeTVvWVc1a2MyaGhhMlZJYVhOMGIzSjVMbkpsWTJWcGRtVnlSbWx1YVhOb1pXUk5aWE56WVdkbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29jbVZqWldsMlpYSkdhVzVwYzJobFpFMWxjM05oWjJVc0lDZHZheUVuSUNzZ2FYWXNJR05vWVhSTFpYbHpMbWg1Y0dWeWRIbEdjbTl0TG0xbGMzTmhaMlZKYm1adktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1lYUkxaWGx6TG1GMWRHaGxiblJwWTJGMFpXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2g3YldWemMyRm5aVG9nY21WalpXbDJaWEpHYVc1cGMyaGxaRTFsYzNOaFoyVXNJR05vWVhSTFpYbHpPaUJqYUdGMFMyVjVjMzBwTzF4dUlDQWdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZHlaV05sYVhabGNrWnBibWx6YUdWa1RXVnpjMkZuWlNjNlhHNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNtVmpaV2wyWlhKR2FXNXBjMmhsWkUxbGMzTmhaMlVuS1R0Y2JpQWdJQ0FnSUNBZ0lDQmphR0YwUzJWNWN5NWhkWFJvWlc1MGFXTmhkR1ZrSUQwZ2RISjFaVHRjYmx4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ1NsTlBUaTV3WVhKelpTaGhkRzlpS0cxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlNrcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVhZZ1BTQmZkR2hwY3k1amNubHdkRzh1WkdWamIyUmxLSFpoYkhWbExtbDJLVHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaR0YwWVNBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9kbUZzZFdVdWRtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lHaGhjMmdnUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtIWmhiSFZsTG1oaGMyZ3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTNKNWNIUnZMbVJsWTNKNWNIUkJSVk1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVZHOVRaWE56YVc5dVMyVjVMQ0JrWVhSaExDQnBkaWt1ZEdobGJpaGtaV055ZVhCMFpXUkVZWFJoSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGtaV055ZVhCMFpXUkVZWFJoSnl3Z1pHVmpjbmx3ZEdWa1JHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmphR0YwUzJWNWN5NW9ZVzVrYzJoaGEyVklhWE4wYjNKNUxuSmxZMlZwZG1WeVJtbHVhWE5vWldSTlpYTnpZV2RsSUQwZ1gzUm9hWE11WDJacGJIUmxjazFsYzNOaFoyVlViMGhoYzJnb2JXVnpjMkZuWlN3Z1pHVmpjbmx3ZEdWa1JHRjBZU0FySUdsMktUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1pwYkhSbGNtVmtUV1Z6YzJGblpTQTlJRjkwYUdsekxsOW1hV3gwWlhKTlpYTnpZV2RsVkc5SVlYTm9LRzFsYzNOaFoyVXNJR1JoZEdFZ0t5QnBkaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1amNubHdkRzh1ZG1WeWFXWjVTRTFCUXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbFViMGhoYzJoTFpYa3NJR1pwYkhSbGNtVmtUV1Z6YzJGblpTd2dhR0Z6YUNrdWRHaGxiaWh5WlhOMWJIUWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmFHRnphQ0J5WlhOMWJIUW5MQ0J5WlhOMWJIUXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOb1pXTnJJR2xtSUhSb1pYSmxJSGRoY3lCaGJpQnBibWwwYVdGc0lHMWxjM05oWjJVZ2RHaGhkQ0IzWVhNZ1lteHZZMnRsWkNCaGJtUWdjMlZ1WkNCcGRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZMmhoZEV0bGVYTXVhVzVwZEdsaGJFMWxjM05oWjJVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVc1cGRHbGhiRTFsYzNOaFoyVWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuWTNKbFlYUmxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdk9pQnRaWE56WVdkbExtWnliMjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRPaUJ0WlhOellXZGxMblJ2TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1kyaGhkRXRsZVhNdWFXNXBkR2xoYkUxbGMzTmhaMlV1WW05a2VTNTJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSHR0WlhOellXZGxPaUJwYm1sMGFXRnNUV1Z6YzJGblpTd2dZMmhoZEV0bGVYTTZJR05vWVhSTFpYbHpmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwzTmxibVJ6SUhSb1pTQnpaWE56YVc5dVMyVjVJSFJ2SUhSb1pTQnpkV0p6WTNKcFltVnlJR2g1Y0dWeWRIbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYzJWdVpGSmxjRzl5ZEdWeVUyVnpjMmx2Ymt0bGVTaHRaWE56WVdkbExDQmphR0YwUzJWNWN5a3VkR2hsYmloMllXeDFaU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKM0psY0c5eWRHVnlVMlZ6YzJsdmJrdGxlU2M2WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduY21Wd2IzSjBaWEpUWlhOemFXOXVTMlY1SnlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2RtRnNkV1ZKVm1GdVpFaGhjMmdnUFNCS1UwOU9MbkJoY25ObEtHRjBiMklvYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsS1NrN1hHNGdJQ0FnSUNBZ0lDQWdhR0Z6YUNBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9kbUZzZFdWSlZtRnVaRWhoYzJndWFHRnphQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2FYWWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0haaGJIVmxTVlpoYm1SSVlYTm9MbWwyS1R0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWlc1amNubHdkR1ZrVm1Gc2RXVWdQU0JmZEdocGN5NWpjbmx3ZEc4dVpHVmpiMlJsS0haaGJIVmxTVlpoYm1SSVlYTm9MblpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NHRnljMlZrVm1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElITmxjM05wYjI1TFpYazdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUlZVa3c3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEpsWTJWcGRtVnlRV05yYm05M2JHVmtaMlZOYzJjN1hHNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblczSmxjRzl5ZEdWeVUyVnpjMmx2Ymt0bGVWMGdMU0JrWldOeWVYQjBRVVZUT2lBbkxDQmphR0YwUzJWNWN5NXJaWGx6TG1oNWNHVnlkSGxVYjFObGMzTnBiMjVMWlhrc0lHVnVZM0o1Y0hSbFpGWmhiSFZsTENCcGRpazdYRzVjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqY25sd2RFRkZVeWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsVWIxTmxjM05wYjI1TFpYa3NJR1Z1WTNKNWNIUmxaRlpoYkhWbExDQnBkaWt1ZEdobGJpaGtaV055ZVhCMFpXUldZV3gxWlNBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhjbk5sWkZaaGJIVmxJRDBnU2xOUFRpNXdZWEp6WlNoa1pXTnllWEIwWldSV1lXeDFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWE56YVc5dVMyVjVJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtUmxZMjlrWlNod1lYSnpaV1JXWVd4MVpTNTJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFQySnFaV04wVlZKTUlEMGdjR0Z5YzJWa1ZtRnNkV1V1WkdGMFlVOWlhbVZqZEZWU1REdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJRzFsYzNOaFoyVlViMGhoYzJnZ1BTQmZkR2hwY3k1ZlptbHNkR1Z5VFdWemMyRm5aVlJ2U0dGemFDaHRaWE56WVdkbExDQmtaV055ZVhCMFpXUldZV3gxWlNBcklHbDJLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1OeWVYQjBieTUyWlhKcFpubElUVUZES0dOb1lYUkxaWGx6TG10bGVYTXVhSGx3WlhKMGVWUnZTR0Z6YUV0bGVTd2diV1Z6YzJGblpWUnZTR0Z6YUN3Z2FHRnphQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHaGhjMmhTWlhOMWJIUWdQVDRnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZG9ZWE5vSUhOMVkyTmxjM05tZFd4c2VTQjJZV3hwWkdGMFpXUWdKeXdnYUdGemFGSmxjM1ZzZENrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbVJoZEdGUFltcGxZM1JUWlhOemFXOXVTMlY1YzF0a1lYUmhUMkpxWldOMFZWSk1YU0E5SUNCN2MyVnpjMmx2Ymt0bGVUb2djMlZ6YzJsdmJrdGxlU3dnYVhOVWIwVnVZM0o1Y0hRNklIUnlkV1Y5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwZGlBOUlGOTBhR2x6TG1OeWVYQjBieTVuWlc1bGNtRjBaVWxXS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpTNXBkaUE5SUY5MGFHbHpMbU55ZVhCMGJ5NWxibU52WkdVb2FYWXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11WTNKNWNIUnZMbVZ1WTNKNWNIUkJSVk1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVJuSnZiVk5sYzNOcGIyNUxaWGtzSUNkdmF5RWhKeXdnYVhZcE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTG5Sb1pXNG9aVzVqY25sd2RHVmtWbUZzZFdVZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV05sYVhabGNrRmphMjV2ZDJ4bFpHZGxUWE5uSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuYUdGdVpITm9ZV3RsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc4NklHMWxjM05oWjJVdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdabkp2YlRvZ2JXVnpjMkZuWlM1MGJ5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGJtUnphR0ZyWlZCb1lYTmxPaUFuY21WalpXbDJaWEpCWTJ0dWIzZHNaV1JuWlNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVdWRtRnNkV1VnUFNCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtHVnVZM0o1Y0hSbFpGWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdFpYTnpZV2RsVkc5SVlYTm9JRDBnWDNSb2FYTXVYMlpwYkhSbGNrMWxjM05oWjJWVWIwaGhjMmdvY21WalpXbDJaWEpCWTJ0dWIzZHNaV1JuWlUxelp5d2dKMjlySVNFbklDc2dhWFlzSUdOb1lYUkxaWGx6TG1oNWNHVnlkSGxHY205dExtMWxjM05oWjJWSmJtWnZLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1OeWVYQjBieTVvWVhOb1NFMUJReWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsR2NtOXRTR0Z6YUV0bGVTd2diV1Z6YzJGblpWUnZTR0Z6YUNrN1hHNGdJQ0FnSUNBZ0lDQWdmU2t1ZEdobGJpaG9ZWE5vWldSTlpYTnpZV2RsSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQm1hVzVoYkZaaGJIVmxJRDBnWW5SdllTaEtVMDlPTG5OMGNtbHVaMmxtZVNoN2RtRnNkV1U2SUhaaGJIVmxMblpoYkhWbExDQm9ZWE5vT2lCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtHaGhjMmhsWkUxbGMzTmhaMlVwTENCcGRqb2dkbUZzZFdVdWFYWjlLU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsWTJWcGRtVnlRV05yYm05M2JHVmtaMlZOYzJjdVltOWtlUzUyWVd4MVpTQTlJR1pwYm1Gc1ZtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtIdHRaWE56WVdkbE9pQnlaV05sYVhabGNrRmphMjV2ZDJ4bFpHZGxUWE5uTENCamFHRjBTMlY1Y3pvZ1kyaGhkRXRsZVhOOUtUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuY21WalpXbDJaWEpCWTJ0dWIzZHNaV1JuWlNjNlhHNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNtVmpaV2wyWlhKQlkydHViM2RzWldSblpTY3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEpsWTJWcGRtVmtkbUZzZFdWSlZtRnVaRWhoYzJnZ1BTQktVMDlPTG5CaGNuTmxLR0YwYjJJb2JXVnpjMkZuWlM1aWIyUjVMblpoYkhWbEtTazdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElISmxZMlZwZG1Wa1NHRnphQ0E5SUY5MGFHbHpMbU55ZVhCMGJ5NWtaV052WkdVb2NtVmpaV2wyWldSMllXeDFaVWxXWVc1a1NHRnphQzVvWVhOb0tUdGNiaUFnSUNBZ0lDQWdJQ0JwZGlBOUlGOTBhR2x6TG1OeWVYQjBieTVrWldOdlpHVW9jbVZqWldsMlpXUjJZV3gxWlVsV1lXNWtTR0Z6YUM1cGRpazdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElISmxZMlZwZG1Wa1JXNWpjbmx3ZEdWa1ZtRnNkV1VnUFNCZmRHaHBjeTVqY25sd2RHOHVaR1ZqYjJSbEtISmxZMlZwZG1Wa2RtRnNkV1ZKVm1GdVpFaGhjMmd1ZG1Gc2RXVXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WTNKNWNIUnZMbVJsWTNKNWNIUkJSVk1vWTJoaGRFdGxlWE11YTJWNWN5NW9lWEJsY25SNVZHOVRaWE56YVc5dVMyVjVMQ0J5WldObGFYWmxaRVZ1WTNKNWNIUmxaRlpoYkhWbExDQnBkaWt1ZEdobGJpaGtaV055ZVhCMFpXUldZV3gxWlNBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JtYVd4MFpYSmxaRTFsYzNOaFoyVWdQU0JmZEdocGN5NWZabWxzZEdWeVRXVnpjMkZuWlZSdlNHRnphQ2h0WlhOellXZGxMQ0JrWldOeWVYQjBaV1JXWVd4MVpTQXJJR2wyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmZkR2hwY3k1amNubHdkRzh1ZG1WeWFXWjVTRTFCUXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbFViMGhoYzJoTFpYa3NJR1pwYkhSbGNtVmtUV1Z6YzJGblpTd2djbVZqWldsMlpXUklZWE5vS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLUzUwYUdWdUtHaGhjMmhTWlhOMWJIUWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnbmFHRnphRkpsYzNWc2RDQW5MQ0JvWVhOb1VtVnpkV3gwS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTmhiR3hpWVdOcklEMGdZMmhoZEV0bGVYTXVZMkZzYkdKaFkyczdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheWduYUdGdVpGTm9ZV3RsUlc1a0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2RvWVc1a1UyaGhhMlZGYm1RbktUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb2JXVnpjMkZuWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQmZjMlZ1WkZKbGNHOXlkR1Z5VTJWemMybHZia3RsZVNodFpYTnpZV2RsTENCamFHRjBTMlY1Y3lrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdiR1YwSUhObGMzTnBiMjVMWlhsQ2RXNWtiR1VnUFNCZmRHaHBjeTVrWVhSaFQySnFaV04wVTJWemMybHZia3RsZVhOYlkyaGhkRXRsZVhNdVpHRjBZVTlpYW1WamRGVlNURjA3WEc0Z0lDQWdiR1YwSUhKbGNHOXlkR1Z5VTJWemMybHZia3RsZVUxelp6dGNiaUFnSUNCc1pYUWdkbUZzZFdWVWIwVnVZM0o1Y0hRN1hHNGdJQ0FnYkdWMElITmxjM05wYjI1TFpYazdYRzRnSUNBZ2JHVjBJR2wyTzF4dUlDQWdJR3hsZENCMllXeDFaU0E5SUh0OU8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQXZMMmxtSUhSb1pYSmxJR2x6SUc1dmRDQjVaWFFnWVNCelpYTnphVzl1SUV0bGVTd2daMlZ1WlhKaGRHVnpJR0VnYm1WM0lHOXVaVnh1SUNBZ0lDQWdhV1lnS0NGelpYTnphVzl1UzJWNVFuVnVaR3hsS1NCN1hHNGdJQ0FnSUNBZ0lITmxjM05wYjI1TFpYa2dQU0JmZEdocGN5NWpjbmx3ZEc4dVoyVnVaWEpoZEdWU1lXNWtiMjBvS1R0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WkdGMFlVOWlhbVZqZEZObGMzTnBiMjVMWlhselcyTm9ZWFJMWlhsekxtUmhkR0ZQWW1wbFkzUlZVa3hkSUQwZ2UzTmxjM05wYjI1TFpYazZJSE5sYzNOcGIyNUxaWGtzSUdselZHOUZibU55ZVhCME9pQjBjblZsZlR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhObGMzTnBiMjVMWlhrZ1BTQnpaWE56YVc5dVMyVjVRblZ1Wkd4bExuTmxjM05wYjI1TFpYazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFpoYkhWbFZHOUZibU55ZVhCMElEMGdTbE5QVGk1emRISnBibWRwWm5rb2UzWmhiSFZsT2lCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtITmxjM05wYjI1TFpYa3BMQ0JrWVhSaFQySnFaV04wVlZKTU9pQmphR0YwUzJWNWN5NWtZWFJoVDJKcVpXTjBWVkpNZlNrN1hHNWNiaUFnSUNBZ0lHbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtZGxibVZ5WVhSbFNWWW9LVHRjYmlBZ0lDQWdJSFpoYkhWbExtbDJJRDBnWDNSb2FYTXVZM0o1Y0hSdkxtVnVZMjlrWlNocGRpazdYRzRnSUNBZ0lDQmZkR2hwY3k1amNubHdkRzh1Wlc1amNubHdkRUZGVXloamFHRjBTMlY1Y3k1clpYbHpMbWg1Y0dWeWRIbEdjbTl0VTJWemMybHZia3RsZVN3Z2RtRnNkV1ZVYjBWdVkzSjVjSFFzSUdsMktTNTBhR1Z1S0dWdVkzSjVjSFJsWkZaaGJIVmxJRDArSUh0Y2JseHVJQ0FnSUNBZ0lDQnlaWEJ2Y25SbGNsTmxjM05wYjI1TFpYbE5jMmNnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyaGhibVJ6YUdGclpTY3NYRzRnSUNBZ0lDQWdJQ0FnZEc4NklHMWxjM05oWjJVdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNCbWNtOXRPaUJ0WlhOellXZGxMblJ2TEZ4dUlDQWdJQ0FnSUNBZ0lHSnZaSGs2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYm1SemFHRnJaVkJvWVhObE9pQW5jbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCZmRHaHBjeTVqY25sd2RHOHVaVzVqYjJSbEtHVnVZM0o1Y0hSbFpGWmhiSFZsS1Z4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdabWxzZEdWeVpXUk5aWE56WVdkbElEMGdYM1JvYVhNdVgyWnBiSFJsY2sxbGMzTmhaMlZVYjBoaGMyZ29jbVZ3YjNKMFpYSlRaWE56YVc5dVMyVjVUWE5uTENCMllXeDFaVlJ2Ulc1amNubHdkQ0FySUdsMkxDQmphR0YwUzJWNWN5NW9lWEJsY25SNVJuSnZiUzV0WlhOellXZGxTVzVtYnlrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGOTBhR2x6TG1OeWVYQjBieTVvWVhOb1NFMUJReWhqYUdGMFMyVjVjeTVyWlhsekxtaDVjR1Z5ZEhsR2NtOXRTR0Z6YUV0bGVTd2dabWxzZEdWeVpXUk5aWE56WVdkbEtUdGNiaUFnSUNBZ0lIMHBMblJvWlc0b2FHRnphR1ZrVFdWemMyRm5aU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUhaaGJIVmxWMmwwYUVoaGMyZ2dQU0JpZEc5aEtFcFRUMDR1YzNSeWFXNW5hV1o1S0h0MllXeDFaVG9nY21Wd2IzSjBaWEpUWlhOemFXOXVTMlY1VFhObkxtSnZaSGt1ZG1Gc2RXVXNJR2hoYzJnNklGOTBhR2x6TG1OeWVYQjBieTVsYm1OdlpHVW9hR0Z6YUdWa1RXVnpjMkZuWlNrc0lHbDJPaUIyWVd4MVpTNXBkbjBwS1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWEJ2Y25SbGNsTmxjM05wYjI1TFpYbE5jMmN1WW05a2VTNTJZV3gxWlNBOUlIWmhiSFZsVjJsMGFFaGhjMmc3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvZTIxbGMzTmhaMlU2SUhKbGNHOXlkR1Z5VTJWemMybHZia3RsZVUxelp5d2dZMmhoZEV0bGVYTTZJR05vWVhSTFpYbHpmU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlISmxkSFZ5Ym5NZ2RHaGxJSEpsY0c5eWRHVnlJR0Z6YzI5amFXRjBaV1FnZEc4Z2RHaGxJR1JoZEdGUFltcGxZM1FnVlZKTVhHNGdJQ29nUUhCaGNtRnRJQ0FnZTFOMGNtbHVaMzBnSUNCa1lYUmhUMkpxWldOMFZWSk1JQ0FnSUNBZ0lDQWdaR0YwWVU5aWFtVmpkQ0IxY214Y2JpQWdLaUJBY21WMGRYSnVJQ0FnZTFOMGNtbHVaMzBnSUhKbGNHOXlkR1Z5SUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVDJKcVpXTjBJSFZ5YkNCeVpYQnZjblJsY2x4dUlDQXFMMXh1SUNCZloyVjBTSGx3WlhKMGVVWnliMjFFWVhSaFQySnFaV04wS0dSaGRHRlBZbXBsWTNSVlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQXZMMVJQUkU4Z2NtVnRiM1psSUhSb2FYTWdiRzluYVdNZ1lXNWtJRzF2ZG1VZ2FYUWdkRzhnWVNCMWRHbHNJR1oxYm1OMGFXOXVYRzVjYmlBZ0lDQWdJR3hsZENCemNHeHBkR1ZrVlZKTUlEMGdaR0YwWVU5aWFtVmpkRlZTVEM1emNHeHBkQ2duTHljcE8xeHVJQ0FnSUNBZ2JHVjBJR1pwYm1Gc1ZWSk1JRDBnYzNCc2FYUmxaRlZTVEZzd1hTQXJJQ2N2THljZ0t5QnpjR3hwZEdWa1ZWSk1XekpkSUNzZ0p5OG5JQ3NnYzNCc2FYUmxaRlZTVEZzelhUdGNiaUFnSUNBZ0lHbG1JQ2h6Y0d4cGRHVmtWVkpNTG14bGJtZDBhQ0ErSURZcElIdGNiaUFnSUNBZ0lDQWdabWx1WVd4VlVrd2dQU0J6Y0d4cGRHVmtWVkpNV3pCZElDc2dKeTh2SnlBcklITndiR2wwWldSVlVreGJNbDBnS3lBbkx5Y2dLeUJ6Y0d4cGRHVmtWVkpNV3pOZElDc2dKeThuSUNzZ2MzQnNhWFJsWkZWU1RGczBYVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z1kyaGxZMnNnYVdZZ2FYTWdkR2hsSUdOeVpXRjBiM0lnYjJZZ2RHaGxJR2g1Y0dWeWRIbGNiaUFnSUNBZ0lHeGxkQ0J5WlhCdmNuUmxjbFZTVENBOUlGOTBhR2x6TG5KbFoybHpkSEo1TG1kbGRGSmxjRzl5ZEdWeVZWSk1VM2x1WTJodmJtOTFjeWhtYVc1aGJGVlNUQ2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaHlaWEJ2Y25SbGNsVlNUQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGNHOXlkR1Z5VlZKTUtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDOHZJR05vWldOcklHbG1JSFJvWlhKbElHbHpJR0ZzY21WaFpIa2dZVzRnWVhOemIyTnBZWFJwYjI0Z1puSnZiU0JoYmlCb2VYQmxjblI1VlZKTUlIUnZJSFJvWlNCa1lYUmhUMkpxWldOMFhHNGdJQ0FnSUNBZ0lHeGxkQ0J6ZEc5eVpXUlNaWEJ2Y25SbGNsVlNUQ0E5SUY5MGFHbHpMbVJoZEdGUFltcGxZM1J6U1dSbGJuUnBkSGxiWm1sdVlXeFZVa3hkTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6ZEc5eVpXUlNaWEJ2Y25SbGNsVlNUQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2MzUnZjbVZrVW1Wd2IzSjBaWEpWVWt3cE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUdOb1pXTnJJR2xtSUhSb1pYSmxJR2x6SUdGdWVTQm9lWEJsY25SNUlIUm9ZWFFnYzNWaWMyTnlhV0psWkNCMGFHVWdaR0YwWVU5aWFtVmpkRlZTVEZ4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J6ZFdKelkzSnBZbVZ5U0hsd1pYSjBlU0E5SUY5MGFHbHpMbkpsWjJsemRISjVMbWRsZEVSaGRHRlBZbXBsWTNSVGRXSnpZM0pwWW1WeVNIbHdaWEowZVNoa1lYUmhUMkpxWldOMFZWSk1LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZFdKelkzSnBZbVZ5U0hsd1pYSjBlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHpkV0p6WTNKcFltVnlTSGx3WlhKMGVTazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYzJWaGNtTm9JR2x1SUdSdmJXRnBiaUJ5WldkcGMzUnllU0JtYjNJZ2RHaGxJR2g1Y0dWeWRIa2dZWE56YjJOcFlYUmxaQ0IwYnlCMGFHVWdaR0YwWVU5aWFtVmpkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMlZoY21Ob0lHbHVJR05oYzJVZ2FYTWdZU0J6ZFdKelkzSnBZbVZ5SUhkb2J5QjNZVzUwY3lCMGJ5QnJibTkzSUhSb1pTQnlaWEJ2Y25SbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNua3VaR2x6WTI5MlpYSkVZWFJoVDJKcVpXTjBVR1Z5VlZKTUtHWnBibUZzVlZKTUxDQnpjR3hwZEdWa1ZWSk1XekpkS1M1MGFHVnVLR1JoZEdGUFltcGxZM1FnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVrWVhSaFQySnFaV04wYzBsa1pXNTBhWFI1VzJacGJtRnNWVkpNWFNBOUlHUmhkR0ZQWW1wbFkzUXVjbVZ3YjNKMFpYSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb1pHRjBZVTlpYW1WamRDNXlaWEJ2Y25SbGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQmxjbklnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1ptbHNkR1Z5SUhSb1pTQnRaWE56WVdkbGN5QjBieUJvWVhOb0xDQmllU0J5WlcxdmRtbHVaeUJ6YjIxbElHWnBaV3hrY3lCdWIzUWdaMlZ1WlhKaGRHVmtJR0o1SUhSb1pTQnlkVzUwYVcxbElHTnZjbVZjYmlBZ0tpQkFjR0Z5WVcwZ2UwMWxjM05oWjJWOUlDQnRaWE56WVdkbElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpWeHVJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0FnWkdWamNubHdkR1ZrVm1Gc2RXVWdLRTl3ZEdsdmJtRnNLU0FnSUNCMllXeDFaU0JtY205dElHSnZaSGt1ZG1Gc2RXVWdhVzRnWTJGelpTQnBkQ0J2Y21sbmFXNWhiR3g1SUdOdmJXVnpJR1Z1WTNKNWNIUmxaRnh1SUNBcUlFQndZWEpoYlNCN1NsTlBUbjBnSUdsa1pXNTBhWFI1S0U5d2RHbHZibUZzS1NBZ0lDQmhaR1FnZEdobElHaDVjR1Z5ZEhrZ2FXUmxiblJwZEhrZ1lYTnpiMk5wWVhSbFpDQnBiaUJqWVhObElHbHpJRzV2ZENCaFpHUmxaQ0IwYnlCMGFHVWdhVzVwZEdsaGJDQnRaWE56WVdkbFhHNGdJQ29nUUhKbGRIVnliaUI3VFdWemMyRm5aWDBnSUc1bGR5QnRaWE56WVdkbElHWnBiSFJsY21Wa1hHNGdJQ292WEc0Z0lGOW1hV3gwWlhKTlpYTnpZV2RsVkc5SVlYTm9LRzFsYzNOaFoyVXNJR1JsWTNKNWNIUmxaRlpoYkhWbExDQnBaR1Z1ZEdsMGVTa2dlMXh1WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUcxbGMzTmhaMlV1ZEhsd1pTeGNiaUFnSUNBZ0lHWnliMjA2SUcxbGMzTmhaMlV1Wm5KdmJTeGNiaUFnSUNBZ0lIUnZPaUFnSUcxbGMzTmhaMlV1ZEc4c1hHNGdJQ0FnSUNCaWIyUjVPaUI3WEc0Z0lDQWdJQ0FnSUdsa1pXNTBhWFI1T2lCcFpHVnVkR2wwZVNCOGZDQnRaWE56WVdkbExtSnZaSGt1YVdSbGJuUnBkSGtzWEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUJrWldOeWVYQjBaV1JXWVd4MVpTQjhmQ0J0WlhOellXZGxMbUp2WkhrdWRtRnNkV1VzWEc0Z0lDQWdJQ0FnSUdoaGJtUnphR0ZyWlZCb1lYTmxPaUJ0WlhOellXZGxMbUp2WkhrdWFHRnVaSE5vWVd0bFVHaGhjMlZjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nWjJWdVpYSmhkR1Z6SUhSb1pTQnBibWwwYVdGc0lITjBjblZqZEhWeVpTQm1iM0lnZEdobElHdGxlWE1nWW1WMGQyVmxiaUIwZDI4Z2RYTmxjbk5jYmlBZ0tpQkFjR0Z5WVcwZ2UwcFRUMDU5SUNBZ0lHMWxjM05oWjJVZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1YVhScFlXd2diV1Z6YzJGblpTQjBhR0YwSUhSeWFXZG5aWEp6SUhSb1pTQnRkWFIxWVd3Z1lYVjBhR1Z1ZEdsallYUnBiMjVjYmlBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ0lIVnpaWEpWVWt3Z0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlhKVlVreGNiaUFnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUhKbFkyVnBkbVZ5S0U5d2RHbHZibUZzS1NBZ2FXNWthV05oZEdWeklHbG1JR2x6SUhSb1pTQnpaVzVrWlhJZ2IzSWdkR2hsSUhKbFkyVnBkbVZ5SUhSb1lYUWdZM0psWVhSbGN5QmhJRzVsZHlCamFHRjBJR055ZVhCMGIxeHVJQ0FxSUVCeVpYUjFjbTRnZTBwVFQwNTlJRzVsZDBOb1lYUkRjbmx3ZEc4Z0lHNWxkeUJLVTA5T0lITjBjblZqZEhWeVpTQm1iM0lnZEdobElHTm9ZWFFnWTNKNWNIUnZYRzRnSUNvdlhHNGdJRjl1WlhkRGFHRjBRM0o1Y0hSdktHMWxjM05oWjJVc0lIVnpaWEpWVWt3c0lISmxZMlZwZG1WeUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dlkyaGxZMnNnZDJobGRHaGxjaUJwY3lCMGFHVWdjMlZ1WkdWeUlHOXlJSFJvWlNCeVpXTmxhWFpsY2lCMGJ5QmpjbVZoZEdVZ1lTQnVaWGNnWTJoaGRFTnllWEIwYjF4dUlDQWdJQzh2ZEc4Z2JXRnVkR0ZwYmlCamIyNXphWE4wWlc1amVTQnZiaUIwYUdVZ2EyVjVjeUJwWmlCMGFHVWdjbVZqWldsMlpYSWdZM0psWVhSbElHRWdibVYzSUdOb1lYUkRjbmx3ZEc4c1hHNGdJQ0FnTHk5MGFHVnVJR2x1ZG1WeWRDQjBhR1VnWm1sbGJHUnpYRzRnSUNBZ2JHVjBJR1p5YjIwZ1BTQW9jbVZqWldsMlpYSXBJRDhnYldWemMyRm5aUzUwYnlBNklHMWxjM05oWjJVdVpuSnZiVHRjYmlBZ0lDQnNaWFFnZEc4Z1BTQW9jbVZqWldsMlpYSXBJRDhnYldWemMyRm5aUzVtY205dElEb2diV1Z6YzJGblpTNTBienRjYmx4dUlDQWdJR3hsZENCMWMyVnlTVzVtYnlBOUlGOTBhR2x6TG1kbGRFbGtaVzUwYVhSNUtIVnpaWEpWVWt3cE8xeHVYRzRnSUNBZ2JHVjBJRzVsZDBOb1lYUkRjbmx3ZEc4Z1BWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUdoNWNHVnlkSGxHY205dE9seHVJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQm9lWEJsY25SNU9pQm1jbTl0TEZ4dUlDQWdJQ0FnSUNCMWMyVnlTVVE2SUhWelpYSkpibVp2TG0xbGMzTmhaMlZKYm1adkxuVnpaWEpRY205bWFXeGxMblZ6WlhKdVlXMWxMRnh1SUNBZ0lDQWdJQ0J3Y21sMllYUmxTMlY1T2lCMWMyVnlTVzVtYnk1clpYbFFZV2x5TG5CeWFYWmhkR1VzWEc0Z0lDQWdJQ0FnSUhCMVlteHBZMHRsZVRvZ2RYTmxja2x1Wm04dWEyVjVVR0ZwY2k1d2RXSnNhV01zWEc0Z0lDQWdJQ0FnSUdGemMyVnlkR2x2YmpvZ2RYTmxja2x1Wm04dVlYTnpaWEowYVc5dUxGeHVJQ0FnSUNBZ0lDQnRaWE56WVdkbFNXNW1iem9nZFhObGNrbHVabTh1YldWemMyRm5aVWx1Wm05Y2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCb2VYQmxjblI1Vkc4NlhHNGdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lHaDVjR1Z5ZEhrNklIUnZMRnh1SUNBZ0lDQWdJQ0IxYzJWeVNVUTZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJQ0FnY0hWaWJHbGpTMlY1T2lCMWJtUmxabWx1WldRc1hHNGdJQ0FnSUNBZ0lHRnpjMlZ5ZEdsdmJqb2dkVzVrWldacGJtVmtYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdhMlY1Y3pwY2JpQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2FIbHdaWEowZVZSdlUyVnpjMmx2Ymt0bGVUb2dkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdJQ0JvZVhCbGNuUjVSbkp2YlZObGMzTnBiMjVMWlhrNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lDQWdhSGx3WlhKMGVWUnZTR0Z6YUV0bGVUb2dkVzVrWldacGJtVmtMRnh1SUNBZ0lDQWdJQ0JvZVhCbGNuUjVSbkp2YlVoaGMyaExaWGs2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ2RHOVNZVzVrYjIwNklIVnVaR1ZtYVc1bFpDeGNiaUFnSUNBZ0lDQWdabkp2YlZKaGJtUnZiVG9nZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnSUNCd2NtVnRZWE4wWlhKTFpYazZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJQ0FnYldGemRHVnlTMlY1T2lCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCb1lXNWtjMmhoYTJWSWFYTjBiM0o1T2lCN1hHNGdJQ0FnSUNBZ0lITmxibVJsY2tobGJHeHZPaUIxYm1SbFptbHVaV1FzWEc0Z0lDQWdJQ0FnSUhKbFkyVnBkbVZ5U0dWc2JHODZJSFZ1WkdWbWFXNWxaQ3hjYmlBZ0lDQWdJQ0FnYzJWdVpHVnlRMlZ5ZEdsbWFXTmhkR1U2SUhWdVpHVm1hVzVsWkN4Y2JpQWdJQ0FnSUNBZ2NtVmpaV2wyWlhKR2FXNXBjMmhsWkUxbGMzTmhaMlU2SUhWdVpHVm1hVzVsWkZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUdsdWFYUnBZV3hOWlhOellXZGxPaUFvYldWemMyRm5aUzVpYjJSNUxtbG5ibTl5WlNrZ1B5QjFibVJsWm1sdVpXUWdPaUJ0WlhOellXZGxMRnh1SUNBZ0lDQWdZMkZzYkdKaFkyczZJRzFsYzNOaFoyVXVZMkZzYkdKaFkyc3NYRzRnSUNBZ0lDQmhkWFJvWlc1MGFXTmhkR1ZrT2lCbVlXeHpaU3hjYmlBZ0lDQWdJR1JoZEdGUFltcGxZM1JWVWt3NklHMWxjM05oWjJVdVpHRjBZVTlpYW1WamRGVlNURnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNRMmhoZEVOeWVYQjBienRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JKWkdWdWRHbDBlVTF2WkhWc1pUdGNiaUlzSW1Oc1lYTnpJRUZqZEdsdmJuTlRaWEoyYVdObElIdGNibHh1SUNCamIyNXpkSEoxWTNSdmNpaGpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RHaHBjeTVqYjI1MFpYaDBJRDBnWTI5dWRHVjRkRHRjYmlBZ2ZWeHVYRzRnSUdWdVptOXlZMlZRYjJ4cFkybGxjeWh0WlhOellXZGxMQ0JwYzBsdVkyOXRhVzVuVFdWemMyRm5aU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmx4dUlDQWdJQ0FnYkdWMElIQnZiR2xqYVdWeklEMGdYM1JvYVhNdVkyOXVkR1Y0ZEM1blpYUlFiMnhwWTJsbGN5aHRaWE56WVdkbExDQnBjMGx1WTI5dGFXNW5UV1Z6YzJGblpTazdYRzVjYmlBZ0lDQWdJR2xtSUNod2IyeHBZMmxsY3lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHdiMnhwWTJsbGN5NXpaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZM2tnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhCdmJHbGphV1Z6TG5ObGNuWnBZMlZRY205MmFXUmxjbEJ2YkdsamVTNWxibVp2Y21ObFFXTjBhVzl1Y3loZmRHaHBjeTVqYjI1MFpYaDBMQ0J0WlhOellXZGxLUzUwYUdWdUtHMWxjM05oWjJWeklEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2JXVnpjMkZuWlhNcE8xeHVJQ0FnSUNBZ0lDQWdJSDBzSUNobGNuSnZjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y205eUtUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvY0c5c2FXTnBaWE11ZFhObGNsQnZiR2xqZVNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndiMnhwWTJsbGN5NTFjMlZ5VUc5c2FXTjVMbVZ1Wm05eVkyVkJZM1JwYjI1ektGOTBhR2x6TG1OdmJuUmxlSFFzSUcxbGMzTmhaMlVwTG5Sb1pXNG9iV1Z6YzJGblpYTWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNJQ2hsY25KdmNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvVzIxbGMzTmhaMlZkS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9XMjFsYzNOaFoyVmRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdadmNuZGhjbVJVYjBsRUtHMWxjM05oWjJVc0lHVnRZV2xzS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnBaaUFvSVY5MGFHbHpMbU52Ym5SbGVIUXVjblZ1ZEdsdFpWSmxaMmx6ZEhKNUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oyWnZjbmRoY21RZ2JXVnpjMkZuWlNCMGJ5Qm5hWFpsYmlCSlJDQnBjeUIxYm5OMWNIQnZjblJsWkNCcGJpQjBhR2x6SUdWdWRtbHliMjV0Wlc1MEp5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tGOTBhR2x6TG1OdmJuUmxlSFF1Y25WdWRHbHRaVkpsWjJsemRISjVMbWg1Y0dWeWRHbGxjMHhwYzNSYk1GMHVhSGx3WlhKMGVWVlNUQ0E5UFQwZ2JXVnpjMkZuWlM1MGJ5a2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2MzQnNhWFJVYnlBOUlDaHRaWE56WVdkbExuUnZLUzV6Y0d4cGRDZ25PaTh2SnlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6Y0d4cGRGUnZXekJkSUNFOVBTQW5jblZ1ZEdsdFpTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYjI1MFpYaDBMbkoxYm5ScGJXVlNaV2RwYzNSeWVTNWthWE5qYjNabGNraDVjR1Z5ZEhsUVpYSlZjMlZ5S0dWdFlXbHNLUzUwYUdWdUtISmxjM1ZzZENBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG5SdklEMGdjbVZ6ZFd4MExtaDVjR1Z5ZEhsVlVrdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG1KdlpIa3VkbWxoSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1OdmJuUmxlSFF1Y25WdWRHbHRaVkpsWjJsemRISjVMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJSDBzSUNobGNuSnZjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y205eUtUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdabTl5ZDJGeVpGUnZTSGx3WlhKMGVTaHRaWE56WVdkbExDQm9lWEJsY25SNVZWSk1LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCcFppQW9JVjkwYUdsekxtTnZiblJsZUhRdWNuVnVkR2x0WlZKbFoybHpkSEo1S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJadmNuZGhjbVFnYldWemMyRm5aU0IwYnlCbmFYWmxiaUJKUkNCcGN5QjFibk4xY0hCdmNuUmxaQ0JwYmlCMGFHbHpJR1Z1ZG1seWIyNXRaVzUwSnlrN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1VcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoZmRHaHBjeTVqYjI1MFpYaDBMbkoxYm5ScGJXVlNaV2RwYzNSeWVTNW9lWEJsY25ScFpYTk1hWE4wV3pCZExtaDVjR1Z5ZEhsVlVrd2dQVDA5SUcxbGMzTmhaMlV1ZEc4cElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhOd2JHbDBWRzhnUFNBb2JXVnpjMkZuWlM1MGJ5a3VjM0JzYVhRb0p6b3ZMeWNwTzF4dUlDQWdJQ0FnSUNCcFppQW9jM0JzYVhSVWIxc3dYU0FoUFQwZ0ozSjFiblJwYldVbktTQjdYRzRnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzUwYnlBOUlHaDVjR1Z5ZEhsVlVrdzdYRzRnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzVpYjJSNUxuWnBZU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxtTnZiblJsZUhRdWNuVnVkR2x0WlZKbFoybHpkSEo1TGw5dFpYTnpZV2RsUW5WekxuQnZjM1JOWlhOellXZGxLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCelpXNWtRWFYwYjIxaGRHbGpUV1Z6YzJGblpTaHRaWE56WVdkbExDQjBaWGgwS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXBJRDArSUh0Y2JpQWdJQ0FnSUd4bGRDQmhkWFJ2YldGMGFXTk5aWE56WVdkbElEMGdlMXh1SUNBZ0lDQWdJQ0JtY205dE9pQnRaWE56WVdkbExuUnZMRnh1SUNBZ0lDQWdJQ0IwYnpvZ2JXVnpjMkZuWlM1bWNtOXRMRnh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJSFJsZUhSY2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdkSGx3WlRvZ2JXVnpjMkZuWlM1MGVYQmxYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lGOTBhR2x6TG1OdmJuUmxlSFF1Y25WdWRHbHRaVkpsWjJsemRISjVMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHRjFkRzl0WVhScFkwMWxjM05oWjJVcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdRV04wYVc5dWMxTmxjblpwWTJVN1hHNGlMQ0pqYkdGemN5QlBjR1Z5WVhSdmNuTWdlMXh1WEc0Z0lHRnVaQ2h3WVhKaGJYTXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NHRnlZVzF6V3pCZElDWW1JSEJoY21GdGMxc3hYVHRjYmlBZ2ZWeHVYRzRnSUdKbGRIZGxaVzRvY0dGeVlXMXpLU0I3WEc0Z0lDQWdiR1YwSUhOMFlYSjBJRDBnY0dGeWMyVkpiblFvY0dGeVlXMXpXekJkV3pCZEtUdGNiaUFnSUNCc1pYUWdaVzVrSUQwZ2NHRnljMlZKYm5Rb2NHRnlZVzF6V3pCZFd6RmRLVHRjYmlBZ0lDQnNaWFFnYm05M0lEMGdjR0Z5WVcxeld6RmRPMXh1WEc0Z0lDQWdhV1lnS0dWdVpDQThJSE4wWVhKMEtTQjdYRzRnSUNBZ0lDQnViM2NnUFNBb2JtOTNJRHdnYzNSaGNuUXBJRDhnYm05M0lDczlJREkwTURBZ09pQnViM2M3WEc0Z0lDQWdJQ0JsYm1RZ0t6MGdNalF3TUR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdLRzV2ZHlBK0lITjBZWEowSUNZbUlHNXZkeUE4SUdWdVpDazdYRzRnSUgxY2JseHVJQ0JsY1hWaGJITW9jR0Z5WVcxektTQjdYRzRnSUNBZ2NtVjBkWEp1SUZOMGNtbHVaeWh3WVhKaGJYTmJNRjBwSUQwOVBTQW5LaWNnZkh3Z1UzUnlhVzVuS0hCaGNtRnRjMXN3WFNrZ1BUMDlJRk4wY21sdVp5aHdZWEpoYlhOYk1WMHBPMXh1SUNCOVhHNWNiaUFnWjNKbFlYUmxjbFJvWVc0b2NHRnlZVzF6S1NCN1hHNGdJQ0FnY21WMGRYSnVJSEJoY21GdGMxc3hYU0ErSUhCaGNtRnRjMXN3WFR0Y2JpQWdmVnh1WEc0Z0lHbHVLSEJoY21GdGN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCd1lYSmhiWE5iTUYwdWFXNWtaWGhQWmlod1lYSmhiWE5iTVYwcElENGdMVEU3WEc0Z0lIMWNibHh1SUNCc1pYTnpWR2hoYmlod1lYSmhiWE1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjR0Z5WVcxeld6RmRJRHdnY0dGeVlXMXpXekJkTzF4dUlDQjlYRzVjYmlBZ2JtOTBLSEJoY21GdGN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlBaGNHRnlZVzF6V3pCZE8xeHVJQ0I5WEc1Y2JpQWdiM0lvY0dGeVlXMXpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQmhjbUZ0YzFzd1hTQjhmQ0J3WVhKaGJYTmJNVjA3WEc0Z0lIMWNibHh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCUGNHVnlZWFJ2Y25NN1hHNGlMQ0pwYlhCdmNuUWdUM0JsY21GMGIzSnpJR1p5YjIwZ0p5NHZUM0JsY21GMGIzSnpKenRjYmx4dUx5b3FYRzRxSUZSb1pTQlFiMnhwWTNrZ1JHVmphWE5wYjI0Z1VHOXBiblFnS0ZCRVVDa2daR1ZqYVdSbGN5QnBaaUJoSUcxbGMzTmhaMlVnYVhNZ2RHOGdZbVVnWVhWMGFHOXlhWE5sWkNCaWVTQmphR1ZqYTJsdVp5QmhJSE5sZENCdlpseHVLaUJ3YjJ4cFkybGxjeTRnVkdobElISmxjMjkxY21ObElIUnZJR0psSUhabGNtbG1hV1ZrSUdseklITndaV05wWm1sbFpDQnBiaUIwYUdVZ1ptbHljM1FnZDI5eVpDQnZaaUIwYUdVZ0oyTnZibVJwZEdsdmJpY2dabWxsYkdRZ2IyWmNiaW9nWVNCUWIyeHBZM2tnYjJKcVpXTjBMaUJVYUdVZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRnZEdoaGRDQjJaWEpwWm1sbGN5QnBaaUIwYUdVZ2JXVnpjMkZuWlNCcGN5QmpiMjF3YkdsaGJuUWdkMmwwYUNCaElIQnZiR2xqZVNCcGMxeHVLaUJ6Y0dWamFXWnBaV1FnYVc0Z1lTQm9ZWE5vZEdGaWJHVWdkRzhnWVd4c2IzY2daSGx1WVcxcFl5QmtaV1pwYm1sMGFXOXVJRzltSUhSb1pTQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z2NISnZkbWxrYVc1blhHNHFJR1Y0ZEdWdWMybGlhV3hwZEhrZ2RHOGdkR2hsSUZCdmJHbGplU0JGYm1kcGJtVWdablZ1WTNScGIyNWhiR2wwYVdWekxseHVLaTljYm1Oc1lYTnpJRkJFVUNCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDQTlJR052Ym5SbGVIUTdYRzRnSUNBZ2RHaHBjeTV2Y0dWeVlYUnZjbk1nUFNCdVpYY2dUM0JsY21GMGIzSnpLQ2s3WEc0Z0lIMWNibHh1SUNCbGRtRnNkV0YwWlZCdmJHbGphV1Z6S0cxbGMzTmhaMlVzSUdselNXNWpiMjFwYm1kTlpYTnpZV2RsS1NCN1hHNGdJQ0FnYkdWMElIQnZiR2xqYVdWeklEMGdkR2hwY3k1amIyNTBaWGgwTG1kbGRGQnZiR2xqYVdWektHMWxjM05oWjJVc0lHbHpTVzVqYjIxcGJtZE5aWE56WVdkbEtUdGNiaUFnSUNCc1pYUWdjbVZ6ZFd4MElEMGdKMDV2ZENCQmNIQnNhV05oWW14bEp6dGNibHh1SUNBZ0lHbG1JQ2h3YjJ4cFkybGxjeUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQjBhR2x6TG1WMllXeDFZWFJsVUc5c2FXTjVLRzFsYzNOaFoyVXNJSEJ2YkdsamFXVnpMbk5sY25acFkyVlFjbTkyYVdSbGNsQnZiR2xqZVN3Z2FYTkpibU52YldsdVowMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQjhmQ0J5WlhOMWJIUWdQVDA5SUNkT2IzUWdRWEJ3YkdsallXSnNaU2NwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFZ6WlhKU1pYTjFiSFFnUFNCMGFHbHpMbVYyWVd4MVlYUmxVRzlzYVdONUtHMWxjM05oWjJVc0lIQnZiR2xqYVdWekxuVnpaWEpRYjJ4cFkza3NJR2x6U1c1amIyMXBibWROWlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIVnpaWEpTWlhOMWJIUWdJVDA5SUNkT2IzUWdRWEJ3YkdsallXSnNaU2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQjFjMlZ5VW1WemRXeDBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdmVnh1WEc0Z0lHVjJZV3gxWVhSbFVHOXNhV041S0cxbGMzTmhaMlVzSUhCdmJHbGplU3dnYVhOSmJtTnZiV2x1WnlrZ2UxeHVJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQW5UbTkwSUVGd2NHeHBZMkZpYkdVbk8xeHVJQ0FnSUdsbUlDaHdiMnhwWTNrcElIdGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlIQnZiR2xqZVM1bGRtRnNkV0YwWlZKMWJHVnpLSFJvYVhNdVkyOXVkR1Y0ZEN3Z2JXVnpjMkZuWlN3Z2FYTkpibU52YldsdVp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ2ZWeHVYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZCRVVEdGNiaUlzSW1sdGNHOXlkQ0JCWTNScGIyNXpVMlZ5ZG1salpTQm1jbTl0SUNjdUwwRmpkR2x2Ym5OVFpYSjJhV05sSnp0Y2JtbHRjRzl5ZENCUVJGQWdabkp2YlNBbkxpOVFSRkFuTzF4dWFXMXdiM0owSUZCdmJHbGplU0JtY205dElDY3VMMUJ2YkdsamVTYzdYRzVjYm1Oc1lYTnpJRkJGVUNCN1hHNWNiaUFnTHlvcVhHNGdJQ29nUTNKbFlYUmxjeUJoSUZCdmJHbGplU0JGYm1admNtTmxiV1Z1ZENCUWIybHVkQ0FvVUVWUUtTQnBibk4wWVc1alpWeHVJQ0FxSUVCd1lYSmhiU0FnSUNCN1QySnFaV04wZlNBZ0lDQmpiMjUwWlhoMFhHNGdJQ292WEc0Z0lHTnZibk4wY25WamRHOXlLR052Ym5SbGVIUXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1gzUm9hWE11Y0dSd0lEMGdibVYzSUZCRVVDaGpiMjUwWlhoMEtUdGNiaUFnSUNCZmRHaHBjeTVoWTNScGIyNXpVMlZ5ZG1salpTQTlJRzVsZHlCQlkzUnBiMjV6VTJWeWRtbGpaU2hqYjI1MFpYaDBLVHRjYmlBZ0lDQmZkR2hwY3k1amIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZER0Y2JpQWdJQ0JqYjI1MFpYaDBMbkJsY0NBOUlGOTBhR2x6TzF4dVhHNGdJQ0FnTHk5VVQwUlBJSE5vYjNWc1pDQmlaU0JoWkdSbFpDQmhJSFJ5YVdkblpYSWdkRzhnZG1WeWFXWjVJSGRvWlc0Z2RHaGxJR3h2WVdSRGIyNW1hV2QxY21GMGFXOXVjeUJwY3lCemRXTmpaWE56Wm5Wc2JIa2dZMjl0Y0d4bGRHVmtYRzRnSUNBZ1kyOXVkR1Y0ZEM1c2IyRmtRMjl1Wm1sbmRYSmhkR2x2Ym5Nb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRUZrWkhNZ1lTQndiMnhwWTNrZ2RHOGdkR2hsSUZCdmJHbGplU0JGYm1admNtTmxiV1Z1ZENCUWIybHVkQ0FvVUVWUUtTNGdWR2hsSUhCdmJHbGplU0JqWVc0Z1ltVWdZM0psWVhSbFpDQmllU0IwYUdVZ2MyVnlkbWxqWlZ4dUlDQXFJSEJ5YjNacFpHVnlJRzl5SUdKNUlIUm9aU0IxYzJWeUxseHVJQ0FxSUVCd1lYSmhiU0FnSUNCN1UzUnlhVzVuZlNBZ0lDQnpiM1Z5WTJWY2JpQWdLaUJBY0dGeVlXMGdJQ0FnZTFOMGNtbHVaMzBnSUNBZ2EyVjVYRzRnSUNvZ1FIQmhjbUZ0SUNBZ0lIdFBZbXBsWTNSOUlDQWdJSEJ2YkdsamVWeHVJQ0FxTDF4dUlDQmhaR1JRYjJ4cFkza29jMjkxY21ObExDQnJaWGtzSUhCdmJHbGplU3dnWTI5dFltbHVhVzVuUVd4bmIzSnBkR2h0S1NCN1hHNGdJQ0FnYVdZZ0tDRnpiM1Z5WTJVcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmMyOTFjbU5sSUdseklHNXZkQ0JrWldacGJtVmtKeWs3WEc0Z0lDQWdhV1lnS0NGclpYa3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25hMlY1SUdseklHNXZkQ0JrWldacGJtVmtKeWs3WEc1Y2JpQWdJQ0JwWmlBb2NHOXNhV041SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEJ2YkdsamVTQTlJRzVsZHlCUWIyeHBZM2tvYTJWNUxDQmJYU3dnVzEwc0lHTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hLSEJ2YkdsamVTQnBibk4wWVc1alpXOW1JRkJ2YkdsamVTa3BJSHRjYmlBZ0lDQWdJQ0FnY0c5c2FXTjVJRDBnYm1WM0lGQnZiR2xqZVNod2IyeHBZM2t1YTJWNUxDQndiMnhwWTNrdWNuVnNaWE1zSUhCdmJHbGplUzVoWTNScGIyNXpMQ0J3YjJ4cFkza3VZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkMmwwWTJnZ0tITnZkWEpqWlNrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0FuVTBWU1ZrbERSVjlRVWs5V1NVUkZVaWM2WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDNXpZWFpsVUc5c2FXTnBaWE1vYzI5MWNtTmxMQ0J3YjJ4cFkza3NJR3RsZVNrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnWTJGelpTQW5WVk5GVWljNlhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dWRHVjRkQzUxYzJWeVVHOXNhV05wWlhOYmEyVjVYU0E5SUhCdmJHbGplVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwWlhoMExuTmhkbVZRYjJ4cFkybGxjeWh6YjNWeVkyVXBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lIUm9jbTkzSUVWeWNtOXlLQ2RWYm10dWIzZHVJSEJ2YkdsamVTQnpiM1Z5WTJVNklDY2dLeUJ6YjNWeVkyVXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR0YxZEdodmNtbHpaU2h0WlhOellXZGxLU0I3WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSnkwdExTQlFiMnhwWTNrZ1JXNW5hVzVsSUMwdExTY3BPMXh1SUNBZ0lHTnZibk52YkdVdWJHOW5LRzFsYzNOaFoyVXBPMXh1SUNBZ0lHbG1JQ2doYldWemMyRm5aU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R0WlhOellXZGxJR2x6SUc1dmRDQmtaV1pwYm1Wa0p5azdYRzRnSUNBZ2FXWWdLQ0Z0WlhOellXZGxMbVp5YjIwcElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmJXVnpjMkZuWlM1bWNtOXRJR2x6SUc1dmRDQmtaV1pwYm1Wa0p5azdYRzRnSUNBZ2FXWWdLQ0Z0WlhOellXZGxMblJ2S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjIxbGMzTmhaMlV1ZEc4Z2FYTWdibTkwSUdSbFptbHVaV1FuS1R0Y2JpQWdJQ0JwWmlBb0lXMWxjM05oWjJVdWRIbHdaU2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R0WlhOellXZGxMblI1Y0dVZ2FYTWdibTkwSUdSbFptbHVaV1FuS1R0Y2JpQWdJQ0J0WlhOellXZGxMbUp2WkhrZ1BTQnRaWE56WVdkbExtSnZaSGtnZkh3Z2UzMDdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dVhHNGdJQ0FnSUNCdFpYTnpZV2RsTG1KdlpIa2dQU0J0WlhOellXZGxMbUp2WkhrZ2ZId2dlMzA3WEc0Z0lDQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lDQWdiR1YwSUhKbGMzVnNkRHRjYmlBZ0lDQWdJR2xtSUNoZmRHaHBjeTVmYVhOVWIxWmxjbWxtZVNodFpYTnpZV2RsS1NrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYVhOSmJtTnZiV2x1WnlBOUlGOTBhR2x6TGw5cGMwbHVZMjl0YVc1blRXVnpjMkZuWlNodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WTI5dWRHVjRkQzV3Y21Wd1lYSmxSbTl5UlhaaGJIVmhkR2x2YmlodFpYTnpZV2RsTENCcGMwbHVZMjl0YVc1bktTNTBhR1Z1S0cxbGMzTmhaMlVnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJRjkwYUdsekxuQmtjQzVsZG1Gc2RXRjBaVkJ2YkdsamFXVnpLRzFsYzNOaFoyVXNJR2x6U1c1amIyMXBibWNwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUNkT2IzUWdRWEJ3YkdsallXSnNaU2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJRjkwYUdsekxtTnZiblJsZUhRdVpHVm1ZWFZzZEVKbGFHRjJhVzkxY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1aGRYUm9JRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1GamRHbHZibk5UWlhKMmFXTmxMbVZ1Wm05eVkyVlFiMnhwWTJsbGN5aHRaWE56WVdkbExDQnBjMGx1WTI5dGFXNW5LUzUwYUdWdUtHMWxjM05oWjJWeklEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dhVzRnYldWemMyRm5aWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aU0E5SUcxbGMzTmhaMlZ6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVqYjI1MFpYaDBMbkJ5WlhCaGNtVlViMFp2Y25kaGNtUW9iV1Z6YzJGblpTd2dhWE5KYm1OdmJXbHVaeXdnY21WemRXeDBLUzUwYUdWdUtHMWxjM05oWjJVZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVdVltOWtlUzVoZFhSb0lEMGdLRzFsYzNOaFoyVXVZbTlrZVM1aGRYUm9JRDA5UFNCMWJtUmxabWx1WldRcElEOGdkSEoxWlNBNklHMWxjM05oWjJVdVltOWtlUzVoZFhSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdWeWNtOXlUV1Z6YzJGblpTQTlJSHNnWW05a2VUb2dleUJqYjJSbE9pQTBNRE1zSUdSbGMyTnlhWEIwYVc5dU9pQW5RbXh2WTJ0bFpDQmllU0J3YjJ4cFkza25JSDBzSUdaeWIyMDZJRzFsYzNOaFoyVXVkRzhzSUhSdk9pQnRaWE56WVdkbExtWnliMjBzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSnZjazFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dnS0dWeWNtOXlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNtOXlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlN3Z0tHVnljbTl5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlMQ0FvWlhKeWIzSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlGOTBhR2x6TG1OdmJuUmxlSFF1WkdWbVlYVnNkRUpsYUdGMmFXOTFjanRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjM1ZzZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVZbTlrZVM1aGRYUm9JRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaWEp5YjNKTlpYTnpZV2RsSUQwZ2V5QmliMlI1T2lCN0lHTnZaR1U2SURRd015d2daR1Z6WTNKcGNIUnBiMjQ2SUNkQ2JHOWphMlZrSUdKNUlIQnZiR2xqZVNjZ2ZTd2dabkp2YlRvZ2JXVnpjMkZuWlM1MGJ5d2dkRzg2SUcxbGMzTmhaMlV1Wm5KdmJTd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5QjlPMXh1SUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25KdmNrMWxjM05oWjJVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0JoZFhSb2IzSnBjMlZUZVc1aktHMWxjM05oWjJVcElIdGNiaUFnSUNCc1pYUWdjbVZ6ZFd4ME8xeHVJQ0FnSUcxbGMzTmhaMlV1WW05a2VTQTlJRzFsYzNOaFoyVXVZbTlrZVNCOGZDQjdmVHRjYmlBZ0lDQnBaaUFvZEdocGN5NWZhWE5VYjFabGNtbG1lU2h0WlhOellXZGxLU2tnZTF4dUlDQWdJQ0FnYkdWMElHbHpTVzVqYjIxcGJtY2dQU0IwYUdsekxsOXBjMGx1WTI5dGFXNW5UV1Z6YzJGblpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lHMWxjM05oWjJVZ1BTQjBhR2x6TG1OdmJuUmxlSFF1Y0hKbGNHRnlaVVp2Y2tWMllXeDFZWFJwYjI0b2JXVnpjMkZuWlN3Z2FYTkpibU52YldsdVp5azdYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQjBhR2x6TG5Ca2NDNWxkbUZzZFdGMFpWQnZiR2xqYVdWektHMWxjM05oWjJVc0lHbHpTVzVqYjIxcGJtY3BPMXh1SUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ0E5UFQwZ0owNXZkQ0JCY0hCc2FXTmhZbXhsSnlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQjBhR2x6TG1OdmJuUmxlSFF1WkdWbVlYVnNkRUpsYUdGMmFXOTFjanRjYmlBZ0lDQWdJQ0FnYldWemMyRm5aUzVpYjJSNUxtRjFkR2dnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFJvYVhNdVlXTjBhVzl1YzFObGNuWnBZMlV1Wlc1bWIzSmpaVkJ2YkdsamFXVnpLRzFsYzNOaFoyVXNJR2x6U1c1amIyMXBibWNwTzF4dUlDQWdJQ0FnYldWemMyRm5aU0E5SUhSb2FYTXVZMjl1ZEdWNGRDNXdjbVZ3WVhKbFZHOUdiM0ozWVhKa0tHMWxjM05oWjJVc0lHbHpTVzVqYjIxcGJtY3NJSEpsYzNWc2RDazdYRzRnSUNBZ0lDQnBaaUFvY21WemRXeDBLU0I3WEc0Z0lDQWdJQ0FnSUcxbGMzTmhaMlV1WW05a2VTNWhkWFJvSUQwZ0tHMWxjM05oWjJVdVltOWtlUzVoZFhSb0lEMDlQU0IxYm1SbFptbHVaV1FwSUQ4Z2RISjFaU0E2SUcxbGMzTmhaMlV1WW05a2VTNWhkWFJvTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVnpkV3gwSUQwZ2RHaHBjeTVqYjI1MFpYaDBMbVJsWm1GMWJIUkNaV2hoZG1sdmRYSTdYRzRnSUNBZ0lDQnBaaUFvY21WemRXeDBLU0I3WEc0Z0lDQWdJQ0FnSUcxbGMzTmhaMlV1WW05a2VTNWhkWFJvSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRjlwYzBsdVkyOXRhVzVuVFdWemMyRm5aU2h0WlhOellXZGxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlDaHRaWE56WVdkbExtSnZaSGtnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUJ0WlhOellXZGxMbUp2WkhrdWFXUmxiblJwZEhrZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnUHlCMGNuVmxJRG9nWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJKWkdWdWRHbG1hV1Z6SUhSb1pTQnRaWE56WVdkbGN5QjBieUJpWlNCMlpYSnBabWxsWkNCaWVTQjBhR1VnVUc5c2FXTjVJRVZ1WjJsdVpWeHVJQ0FxSUVCd1lYSmhiU0FnSUNCN1RXVnpjMkZuWlgwZ0lDQnRaWE56WVdkbFhHNGdJQ29nUUhKbGRIVnlibk1nSUh0aWIyOXNaV0Z1ZlNBZ0lISmxkSFZ5Ym5NZ2RISjFaU0JwWmlCMGFHVWdiV1Z6YzJGblpTQnlaWEYxYVhKbGN5QmxibU55ZVhCMGFXOXVMMlJsWTNKNWNIUnBiMjVjYmlBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjNJZ2FXWWdhWFJ6SUhSNWNHVWdaWEYxWVd4eklDZG9ZVzVrYzJoaGEyVW5PeUJtWVd4elpTQnZkR2hsY25kcGMyVmNiaUFnS2k5Y2JpQWdYMmx6Vkc5V1pYSnBabmtvYldWemMyRm5aU2tnZTF4dUlDQWdJR3hsZENCelkyaGxiV0Z6Vkc5SloyNXZjbVVnUFNCYkoyUnZiV0ZwYmljc0lDZGtiMjFoYVc0dGFXUndKeXdnSjJkc2IySmhiQ2NzSUNkb2VYQmxjblI1TFhKMWJuUnBiV1VuTENBbmNuVnVkR2x0WlNkZE8xeHVJQ0FnSUd4bGRDQnpjR3hwZEVaeWIyMGdQU0FvYldWemMyRm5aUzVtY205dEtTNXpjR3hwZENnbk9pOHZKeWs3WEc0Z0lDQWdiR1YwSUdaeWIyMVRZMmhsYldFZ1BTQnpjR3hwZEVaeWIyMWJNRjA3WEc0Z0lDQWdiR1YwSUhOd2JHbDBWRzhnUFNBb2JXVnpjMkZuWlM1MGJ5a3VjM0JzYVhRb0p6b3ZMeWNwTzF4dUlDQWdJR3hsZENCMGIxTmphR1Z0WVNBOUlDQnpjR3hwZEZSdld6QmRPMXh1WEc0Z0lDQWdhV1lnS0cxbGMzTmhaMlV1Wm5KdmJTQTlQVDBnWm5KdmJWTmphR1Z0WVNCOGZDQnRaWE56WVdkbExuUnZJRDA5UFNCMGIxTmphR1Z0WVNCOGZDQnRaWE56WVdkbExuUjVjR1VnUFQwOUlDZHlaV0ZrSnlCOGZDQnRaWE56WVdkbExuUjVjR1VnUFQwOUlDZHlaWE53YjI1elpTY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITmphR1Z0WVhOVWIwbG5ibTl5WlM1cGJtUmxlRTltS0daeWIyMVRZMmhsYldFcElEMDlQU0F0TVNCOGZDQnpZMmhsYldGelZHOUpaMjV2Y21VdWFXNWtaWGhQWmloMGIxTmphR1Z0WVNrZ1BUMDlJQzB4TzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKbGJXOTJaVkJ2YkdsamVTaHpiM1Z5WTJVc0lHdGxlU2tnZTF4dUlDQWdJR2xtSUNnaGMyOTFjbU5sS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjNOdmRYSmpaU0JwY3lCdWIzUWdaR1ZtYVc1bFpDY3BPMXh1SUNBZ0lHbG1JQ2h6YjNWeVkyVWdJVDA5SUNjcUp5QW1KaUFoYTJWNUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oydGxlU0JwY3lCdWIzUWdaR1ZtYVc1bFpDY3BPMXh1WEc0Z0lDQWdjM2RwZEdOb0lDaHpiM1Z5WTJVcElIdGNiaUFnSUNBZ0lHTmhjMlVnSnlvbk9seHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUmxlSFF1YzJWeWRtbGpaVkJ5YjNacFpHVnlVRzlzYVdONUlEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1ZEdWNGRDNTFjMlZ5VUc5c2FXTnBaWE1nUFNCN2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNTBaWGgwTG1GamRHbDJaVlZ6WlhKUWIyeHBZM2tnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dWRHVjRkQzV6WVhabFVHOXNhV05wWlhNb0oxVlRSVkluS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1MFpYaDBMbk5oZG1WUWIyeHBZMmxsY3lnblUwVlNWa2xEUlY5UVVrOVdTVVJGVWljcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUmxlSFF1YzJGMlpVRmpkR2wyWlZCdmJHbGplU2dwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJR05oYzJVZ0oxTkZVbFpKUTBWZlVGSlBWa2xFUlZJbk9seHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVqYjI1MFpYaDBMbk5sY25acFkyVlFjbTkyYVdSbGNsQnZiR2xqZVZ0clpYbGRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJsZUhRdWMyRjJaVkJ2YkdsamFXVnpLQ2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdZMkZ6WlNBblZWTkZVaWM2WEc0Z0lDQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxtTnZiblJsZUhRdWRYTmxjbEJ2YkdsamFXVnpXMnRsZVYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hyWlhrZ1BUMDlJSFJvYVhNdVkyOXVkR1Y0ZEM1aFkzUnBkbVZWYzJWeVVHOXNhV041S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNTBaWGgwTG1GamRHbDJaVlZ6WlhKUWIyeHBZM2tnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNTBaWGgwTG5OaGRtVkJZM1JwZG1WUWIyeHBZM2tvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJuUmxlSFF1YzJGMlpWQnZiR2xqYVdWektDZFZVMFZTSnlrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dSWEp5YjNJb0oxVnVhMjV2ZDI0Z2NHOXNhV041SUhOdmRYSmpaVG9nSnlBcklITnZkWEpqWlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VFVlFPMXh1SWl3aWFXMXdiM0owSUVGc2JHOTNUM1psY25KcFpHVnpJR1p5YjIwZ0p5NHZZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRjeTlCYkd4dmQwOTJaWEp5YVdSbGN5YzdYRzVwYlhCdmNuUWdRbXh2WTJ0UGRtVnljbWxrWlhNZ1puSnZiU0FuTGk5amIyMWlhVzVwYm1kQmJHZHZjbWwwYUcxekwwSnNiMk5yVDNabGNuSnBaR1Z6Snp0Y2JtbHRjRzl5ZENCR2FYSnpkRUZ3Y0d4cFkyRmliR1VnWm5KdmJTQW5MaTlqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzF6TDBacGNuTjBRWEJ3YkdsallXSnNaU2M3WEc1cGJYQnZjblFnVW5Wc1pTQm1jbTl0SUNjdUwxSjFiR1VuTzF4dVhHNWpiR0Z6Y3lCUWIyeHBZM2tnZTF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0d0bGVTd2djblZzWlhNc0lHRmpkR2x2Ym5Nc0lHTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTa2dlMXh1SUNBZ0lHbG1JQ2doYTJWNUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oydGxlU0JwY3lCdWIzUWdaR1ZtYVc1bFpDY3BPMXh1SUNBZ0lHbG1JQ2doWVdOMGFXOXVjeWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RoWTNScGIyNXpJR0Z5WlNCdWIzUWdaR1ZtYVc1bFpDY3BPMXh1WEc0Z0lDQWdkR2hwY3k1aFkzUnBiMjV6SUQwZ1lXTjBhVzl1Y3p0Y2JpQWdJQ0IwYUdsekxtdGxlU0E5SUd0bGVUdGNiaUFnSUNCMGFHbHpMbDl6WlhSU2RXeGxjeWh5ZFd4bGN5azdYRzRnSUNBZ2RHaHBjeTVmYzJWMFEyOXRZbWx1YVc1blFXeG5iM0pwZEdodEtHTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTazdYRzRnSUgxY2JseHVJQ0JoWkdSQlkzUnBiMjRvYldWMGFHOWtMQ0J3WVhKaGJTa2dlMXh1SUNBZ0lIUm9hWE11WVdOMGFXOXVjeTV3ZFhOb0tIc2diV1YwYUc5a09pQnRaWFJvYjJRc0lIQmhjbUZ0T2lCd1lYSmhiU0I5S1R0Y2JpQWdmVnh1WEc0Z0lHTnlaV0YwWlZKMWJHVW9aR1ZqYVhOcGIyNHNJR052Ym1ScGRHbHZiaXdnYzJOdmNHVXNJSFJoY21kbGRDd2djSEpwYjNKcGRIa3BJSHRjYmlBZ0lDQnBaaUFvY0hKcGIzSnBkSGtnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdjSEpwYjNKcGRIa2dQU0IwYUdsekxtZGxkRXhoYzNSUWNtbHZjbWwwZVNncElDc2dNVHRjYmlBZ0lDQjlYRzRnSUNBZ2JHVjBJSEoxYkdVZ1BTQnVaWGNnVW5Wc1pTaGtaV05wYzJsdmJpd2dZMjl1WkdsMGFXOXVMQ0J6WTI5d1pTd2dkR0Z5WjJWMExDQndjbWx2Y21sMGVTazdYRzRnSUNBZ2RHaHBjeTV5ZFd4bGN5NXdkWE5vS0hKMWJHVXBPMXh1SUNCOVhHNWNiaUFnWkdWc1pYUmxVblZzWlNoeWRXeGxLU0I3WEc0Z0lDQWdiR1YwSUdsdVpHVjRWRzlTWlcxdmRtVWdQU0IwYUdsekxuSjFiR1Z6TG1sdVpHVjRUMllvY25Wc1pTazdYRzRnSUNBZ2RHaHBjeTV5ZFd4bGN5NXpjR3hwWTJVb2FXNWtaWGhVYjFKbGJXOTJaU3dnTVNrN1hHNGdJSDFjYmx4dUlDQmxibVp2Y21ObFFXTjBhVzl1Y3loamIyNTBaWGgwTENCdFpYTnpZV2RsS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0J5WlhOMWJIUnpJRDBnVzEwN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1aFkzUnBiMjV6TG14bGJtZDBhQ0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUdsdUlIUm9hWE11WVdOMGFXOXVjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0JqYjI1MFpYaDBMbkJsY0M1aFkzUnBiMjV6VTJWeWRtbGpaVnQwYUdsekxtRmpkR2x2Ym5OYmFWMHViV1YwYUc5a1hTaHRaWE56WVdkbExDQjBhR2x6TG1GamRHbHZibk5iYVYwdWNHRnlZVzBwTzF4dUlDQWdJQ0FnSUNBZ0lISmxjM1ZzZEhNdWNIVnphQ2h5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUZCeWIyMXBjMlV1WVd4c0tISmxjM1ZzZEhNcExuUm9aVzRvS0cxbGMzTmhaMlZ6S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h0WlhOellXZGxjeWs3WEc0Z0lDQWdJQ0FnSUgwc0lHVnljbTl5SUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9XMjFsYzNOaFoyVmRLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdWMllXeDFZWFJsVW5Wc1pYTW9ZMjl1ZEdWNGRDd2diV1Z6YzJGblpTd2dhWE5KYm1OdmJXbHVaeWtnZTF4dUlDQWdJR3hsZENCeVpYTjFiSFJ6SUQwZ1cxMDdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQnBiaUIwYUdsekxuSjFiR1Z6S1NCN1hHNGdJQ0FnSUNCeVpYTjFiSFJ6TG5CMWMyZ29kR2hwY3k1eWRXeGxjMXRwWFM1bGRtRnNkV0YwWlNoamIyNTBaWGgwTENCdFpYTnpZV2RsTENCcGMwbHVZMjl0YVc1bktTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRMbU52YldKcGJtVW9jbVZ6ZFd4MGN5azdYRzRnSUgxY2JseHVJQ0JuWlhSTVlYTjBVSEpwYjNKcGRIa29LU0I3WEc0Z0lDQWdiR1YwSUhCeWFXOXlhWFJwWlhNZ1BTQmJYVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbkoxYkdWekxteGxibWQwYUNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnWm05eUlDaHNaWFFnYVNCcGJpQjBhR2x6TG5KMWJHVnpLU0I3WEc0Z0lDQWdJQ0FnSUhCeWFXOXlhWFJwWlhNdWNIVnphQ2gwYUdsekxuSjFiR1Z6VzJsZExuQnlhVzl5YVhSNUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbTFoZUM1aGNIQnNlU2hOWVhSb0xDQndjbWx2Y21sMGFXVnpLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUMweE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHZGxkRkoxYkdWQ2VWQnlhVzl5YVhSNUtIQnlhVzl5YVhSNUtTQjdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQnBiaUIwYUdsekxuSjFiR1Z6S1NCN1hHNGdJQ0FnSUNCcFppQW9VM1J5YVc1bktIUm9hWE11Y25Wc1pYTmJhVjB1Y0hKcGIzSnBkSGtwSUQwOVBTQlRkSEpwYm1jb2NISnBiM0pwZEhrcEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KMWJHVnpXMmxkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQjBhSEp2ZHlCRmNuSnZjaWduVW5Wc1pTQjNhWFJvSUhCeWFXOXlhWFI1SUNjZ0t5QndjbWx2Y21sMGVTQXJJQ2NnWkc5bGN5QnViM1FnWlhocGMzUWhKeWs3WEc0Z0lIMWNibHh1SUNCZmMyVjBRMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRLR052YldKcGJtbHVaMEZzWjI5eWFYUm9iU2tnZTF4dUlDQWdJR2xtSUNnaFkyOXRZbWx1YVc1blFXeG5iM0pwZEdodEtTQjdYRzRnSUNBZ0lDQmpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMGdQU0FuWW14dlkydFBkbVZ5Y21sa1pYTW5PMXh1SUNBZ0lIMWNiaUFnSUNCemQybDBZMmdnS0dOdmJXSnBibWx1WjBGc1oyOXlhWFJvYlNrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0FuWW14dlkydFBkbVZ5Y21sa1pYTW5PbHh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTQTlJRzVsZHlCQ2JHOWphMDkyWlhKeWFXUmxjeWdwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJR05oYzJVZ0oyRnNiRzkzVDNabGNuSnBaR1Z6SnpwY2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzBnUFNCdVpYY2dRV3hzYjNkUGRtVnljbWxrWlhNb0tUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2RtYVhKemRFRndjR3hwWTJGaWJHVW5PbHh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTQTlJRzVsZHlCR2FYSnpkRUZ3Y0d4cFkyRmliR1VvS1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0IwYUhKdmR5QkZjbkp2Y2lnblZXNXJibTkzYmlCaGJHZHZjbWwwYUcwNklDY2dLeUJqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzBwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUY5elpYUlNkV3hsY3loeWRXeGxjeWtnZTF4dUlDQWdJSFJvYVhNdWNuVnNaWE1nUFNCYlhUdGNibHh1SUNBZ0lHWnZjaUFvYkdWMElHa2dhVzRnY25Wc1pYTXBJSHRjYmlBZ0lDQWdJR3hsZENCeWRXeGxJRDBnY25Wc1pYTmJhVjA3WEc0Z0lDQWdJQ0JwWmlBb2NuVnNaUzV3Y21sdmNtbDBlU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSEoxYkdVdWNISnBiM0pwZEhrZ1BTQjBhR2x6TG1kbGRFeGhjM1JRY21sdmNtbDBlU2dwSUNzZ01UdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2doS0hKMWJHVWdhVzV6ZEdGdVkyVnZaaUJTZFd4bEtTa2dlMXh1SUNBZ0lDQWdJQ0J5ZFd4bElEMGdibVYzSUZKMWJHVW9jblZzWlM1a1pXTnBjMmx2Yml3Z2NuVnNaUzVqYjI1a2FYUnBiMjRzSUhKMWJHVXVjMk52Y0dVc0lISjFiR1V1ZEdGeVoyVjBMQ0J5ZFd4bExuQnlhVzl5YVhSNUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIUm9hWE11Y25Wc1pYTXVjSFZ6YUNoeWRXeGxLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0J6YjNKMFVuVnNaWE1vS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNuVnNaWE11YzI5eWRDaG1kVzVqZEdsdmJpaGhMQ0JpS1NCN1hHNGdJQ0FnSUNCc1pYUWdlQ0E5SUdFdWNISnBiM0pwZEhrN0lHeGxkQ0I1SUQwZ1lpNXdjbWx2Y21sMGVUdGNiaUFnSUNBZ0lISmxkSFZ5YmlBb0tIZ2dQQ0I1S1NBL0lDMHhJRG9nS0NoNElENGdlU2tnUHlBeElEb2dNQ2twTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VHOXNhV041TzF4dUlpd2lhVzF3YjNKMElIdGthWFpwWkdWRmJXRnBiQ3dnWkdsMmFXUmxWVkpNTENCcGMwUmhkR0ZQWW1wbFkzUlZVa3g5SUdaeWIyMGdKeTR1TDNWMGFXeHpMM1YwYVd4ekp6dGNibHh1WTJ4aGMzTWdVbVZVYUdsdWEwTjBlQ0I3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnZEdocGN5NWtaV1poZFd4MFFtVm9ZWFpwYjNWeUlEMGdkSEoxWlR0Y2JpQWdJQ0IwYUdsekxtZHliM1Z3Y3lBOUlIdDlPMXh1SUNCOVhHNWNiaUFnWjJWMElITmphR1Z0WlNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZjMk5vWlcxbE8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUdSaGRHVW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJSaGRHVTdYRzRnSUgxY2JseHVJQ0JuWlhRZ1pHOXRZV2x1S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWtiMjFoYVc0N1hHNGdJSDFjYmx4dUlDQm5aWFFnZEhsd1pTZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZEhsd1pUdGNiaUFnZlZ4dVhHNGdJR2RsZENCemIzVnlZMlVvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTnZkWEpqWlR0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0IwYVcxbEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwYVcxbE8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUhkbFpXdGtZWGtvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzZGxaV3RrWVhrN1hHNGdJSDFjYmx4dUlDQnpaWFFnYzJOb1pXMWxLSEJoY21GdGN5a2dlMXh1SUNBZ0lHeGxkQ0JtY205dElEMGdjR0Z5WVcxekxtMWxjM05oWjJVdVpuSnZiVHRjYmlBZ0lDQnBaaUFvYVhORVlYUmhUMkpxWldOMFZWSk1LR1p5YjIwcEtTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5elkyaGxiV1VnUFNCa2FYWnBaR1ZWVWt3b1puSnZiU2t1ZEhsd1pUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NWZjMk5vWlcxbElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSE5sZENCa1lYUmxLRzV2ZHlrZ2UxeHVJQ0FnSUd4bGRDQmtZWFJsSUQwZ2JtVjNJRVJoZEdVb0tUdGNiaUFnSUNCc1pYUWdaR0Y1SUQwZ1UzUnlhVzVuS0dSaGRHVXVaMlYwUkdGMFpTZ3BLVHRjYmlBZ0lDQnBaaUFvWkdGNUxteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnWkdGNUlEMGdKekFuSUNzZ1pHRjVPMXh1SUNBZ0lIMWNiaUFnSUNCc1pYUWdiVzl1ZEdnZ1BTQlRkSEpwYm1jb1pHRjBaUzVuWlhSTmIyNTBhQ2dwSUNzZ01TazdYRzRnSUNBZ2FXWWdLRzF2Ym5Sb0xteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnYlc5dWRHZ2dQU0FuTUNjZ0t5QnRiMjUwYUR0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1ZlpHRjBaU0E5SUdSaGVTQXJJQ2N2SnlBcklHMXZiblJvSUNzZ0p5OG5JQ3NnWkdGMFpTNW5aWFJHZFd4c1dXVmhjaWdwTzF4dUlDQjlYRzVjYmlBZ2MyVjBJR1J2YldGcGJpaHdZWEpoYlhNcElIdGNiaUFnSUNCcFppQW9jR0Z5WVcxekxtMWxjM05oWjJVdVltOWtlUzVwWkdWdWRHbDBlU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5a2IyMWhhVzRnUFNCa2FYWnBaR1ZGYldGcGJDaHdZWEpoYlhNdWJXVnpjMkZuWlM1aWIyUjVMbWxrWlc1MGFYUjVMblZ6WlhKUWNtOW1hV3hsTG5WelpYSnVZVzFsS1M1a2IyMWhhVzQ3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYzJWMElIUjVjR1VvY0dGeVlXMXpLU0I3WEc0Z0lDQWdiR1YwSUcxbGMzTmhaMlVnUFNCd1lYSmhiWE11YldWemMyRm5aVHRjYmlBZ0lDQnBaaUFvYldWemMyRm5aUzVpYjJSNUxuWmhiSFZsSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzUjVjR1VnUFNCdFpYTnpZV2RsTG1KdlpIa3VkbUZzZFdVdWNtVnpiM1Z5WTJWVWVYQmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSE5sZENCemIzVnlZMlVvY0dGeVlXMXpLU0I3WEc0Z0lDQWdhV1lnS0hCaGNtRnRjeTV0WlhOellXZGxMbUp2WkhrdWFXUmxiblJwZEhrZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZjMjkxY21ObElEMGdjR0Z5WVcxekxtMWxjM05oWjJVdVltOWtlUzVwWkdWdWRHbDBlUzUxYzJWeVVISnZabWxzWlM1MWMyVnlibUZ0WlR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCelpYUWdkR2x0WlNodWIzY3BJSHRjYmlBZ0lDQnViM2NnUFNCdVpYY2dSR0YwWlNncE8xeHVJQ0FnSUd4bGRDQnRhVzUxZEdWeklEMGdVM1J5YVc1bktHNXZkeTVuWlhSTmFXNTFkR1Z6S0NrcE8xeHVJQ0FnSUdsbUlDaHRhVzUxZEdWekxteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnYldsdWRYUmxjeUE5SUNjd0p5QXJJRzFwYm5WMFpYTTdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVYM1JwYldVZ1BTQndZWEp6WlVsdWRDaFRkSEpwYm1jb2JtOTNMbWRsZEVodmRYSnpLQ2twSUNzZ2JXbHVkWFJsY3lrN1hHNGdJSDFjYmx4dUlDQnpaWFFnZDJWbGEyUmhlU2h1YjNjcElIdGNiaUFnSUNCMGFHbHpMbDkzWldWclpHRjVJRDBnVTNSeWFXNW5LRzVsZHlCRVlYUmxLQ2t1WjJWMFJHRjVLQ2twTzF4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VtVlVhR2x1YTBOMGVEdGNiaUlzSW1sdGNHOXlkQ0JCWkhaaGJtTmxaRU52Ym1ScGRHbHZiaUJtY205dElDY3VMMk52Ym1ScGRHbHZibk12UVdSMllXNWpaV1JEYjI1a2FYUnBiMjRuTzF4dWFXMXdiM0owSUVOdmJtUnBkR2x2YmlCbWNtOXRJQ2N1TDJOdmJtUnBkR2x2Ym5NdlEyOXVaR2wwYVc5dUp6dGNibWx0Y0c5eWRDQjdaMlYwVlhObGNrVnRZV2xzUm5KdmJWVlNUQ3dnYVhORVlYUmhUMkpxWldOMFZWSk1MQ0J5WlcxdmRtVlFZWFJvUm5KdmJWVlNUSDBnWm5KdmJTQW5MaTR2ZFhScGJITXZkWFJwYkhNbk8xeHVhVzF3YjNKMElGTjFZbk5qY21sd2RHbHZia052Ym1ScGRHbHZiaUJtY205dElDY3VMMk52Ym1ScGRHbHZibk12UVdSMllXNWpaV1JEYjI1a2FYUnBiMjRuTzF4dVhHNWpiR0Z6Y3lCU2RXeGxJSHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWhrWldOcGMybHZiaXdnWTI5dVpHbDBhVzl1TENCelkyOXdaU3dnZEdGeVoyVjBMQ0J3Y21sdmNtbDBlU2tnZTF4dUlDQWdJSFJvYVhNdVpHVmphWE5wYjI0Z1BTQmtaV05wYzJsdmJqdGNiaUFnSUNCMGFHbHpMbk5sZEVOdmJtUnBkR2x2YmloamIyNWthWFJwYjI0cE8xeHVJQ0FnSUhSb2FYTXVjSEpwYjNKcGRIa2dQU0J3Y21sdmNtbDBlVHRjYmlBZ0lDQjBhR2x6TG5OamIzQmxJRDBnYzJOdmNHVTdYRzRnSUNBZ2RHaHBjeTUwWVhKblpYUWdQU0IwWVhKblpYUTdYRzRnSUgxY2JseHVJQ0J6WlhSRGIyNWthWFJwYjI0b1kyOXVaR2wwYVc5dUtTQjdYRzRnSUNBZ2FXWWdLQ0VvWTI5dVpHbDBhVzl1SUdsdWMzUmhibU5sYjJZZ1EyOXVaR2wwYVc5dUlIeDhJR052Ym1ScGRHbHZiaUJwYm5OMFlXNWpaVzltSUZOMVluTmpjbWx3ZEdsdmJrTnZibVJwZEdsdmJpQjhmQ0JqYjI1a2FYUnBiMjRnYVc1emRHRnVZMlZ2WmlCQlpIWmhibU5sWkVOdmJtUnBkR2x2YmlrcElIdGNiaUFnSUNBZ0lHeGxkQ0JoZEhSeWFXSjFkR1VnUFNCamIyNWthWFJwYjI0dVlYUjBjbWxpZFhSbE8xeHVJQ0FnSUNBZ2MzZHBkR05vSUNoaGRIUnlhV0oxZEdVcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmMzVmljMk55YVhCMGFXOXVKenBjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym1ScGRHbHZiaUE5SUc1bGR5QlRkV0p6WTNKcGNIUnBiMjVEYjI1a2FYUnBiMjRvWTI5dVpHbDBhVzl1TG1GMGRISnBZblYwWlN3Z1kyOXVaR2wwYVc5dUxtOXdaWEpoZEc5eUxDQmpiMjVrYVhScGIyNHVjR0Z5WVcxektUdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdZMkZ6WlNCMWJtUmxabWx1WldRNlhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNWthWFJwYjI0Z1BTQnVaWGNnUVdSMllXNWpaV1JEYjI1a2FYUnBiMjRvWTI5dVpHbDBhVzl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtUnBkR2x2YmlBOUlHNWxkeUJEYjI1a2FYUnBiMjRvWTI5dVpHbDBhVzl1TG1GMGRISnBZblYwWlN3Z1kyOXVaR2wwYVc5dUxtOXdaWEpoZEc5eUxDQmpiMjVrYVhScGIyNHVjR0Z5WVcxektUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NWpiMjVrYVhScGIyNGdQU0JqYjI1a2FYUnBiMjQ3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWlhaaGJIVmhkR1VvWTI5dWRHVjRkQ3dnYldWemMyRm5aU3dnYVhOSmJtTnZiV2x1WnlrZ2UxeHVJQ0FnSUd4bGRDQm1hV1ZzWkNBOUlDaHBjMGx1WTI5dGFXNW5LU0EvSUcxbGMzTmhaMlV1ZEc4Z09pQnRaWE56WVdkbExtWnliMjA3WEc0Z0lDQWdiR1YwSUdoNWNHVnlkSGxPWVcxbE8xeHVJQ0FnSUhOM2FYUmphQ0FvZEdocGN5NXpZMjl3WlNrZ2UxeHVJQ0FnSUNBZ1kyRnpaU0FuWjJ4dlltRnNKenBjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJR05oYzJVZ0oyaDVjR1Z5ZEhrbk9seHVJQ0FnSUNBZ0lDQnBaaUFvYVhORVlYUmhUMkpxWldOMFZWSk1LR1pwWld4a0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnlaWEJ2Y25SbGNpQTlJR052Ym5SbGVIUXVjblZ1ZEdsdFpWSmxaMmx6ZEhKNUxtZGxkRkpsY0c5eWRHVnlWVkpNVTNsdVkyaHZibTkxY3loeVpXMXZkbVZRWVhSb1JuSnZiVlZTVENobWFXVnNaQ2twTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h5WlhCdmNuUmxjaUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCb2VYQmxjblI1VG1GdFpTQTlJR052Ym5SbGVIUXVjblZ1ZEdsdFpWSmxaMmx6ZEhKNUxtZGxkRWg1Y0dWeWRIbE9ZVzFsS0hKbGNHOXlkR1Z5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnBaV3hrTG5Od2JHbDBLQ2M2THk4bktWc3dYU0E5UFQwZ0oyaDVjR1Z5ZEhrbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCb2VYQmxjblI1VG1GdFpTQTlJR052Ym5SbGVIUXVjblZ1ZEdsdFpWSmxaMmx6ZEhKNUxtZGxkRWg1Y0dWeWRIbE9ZVzFsS0hKbGJXOTJaVkJoZEdoR2NtOXRWVkpNS0dacFpXeGtLU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNob2VYQmxjblI1VG1GdFpTQTlQVDBnZEdocGN5NTBZWEpuWlhRcElIdGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuVG05MElFRndjR3hwWTJGaWJHVW5PMXh1WEc0Z0lDQWdJQ0JqWVhObElDZHBaR1Z1ZEdsMGVTYzZYRzRnSUNBZ0lDQWdJR3hsZENCdmQyNWxjanRjYmx4dUlDQWdJQ0FnSUNCcFppQW9hWE5FWVhSaFQySnFaV04wVlZKTUtHWnBaV3hrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR3hsZENCeVpYQnZjblJsY2lBOUlHTnZiblJsZUhRdWNuVnVkR2x0WlZKbFoybHpkSEo1TG1kbGRGSmxjRzl5ZEdWeVZWSk1VM2x1WTJodmJtOTFjeWh5WlcxdmRtVlFZWFJvUm5KdmJWVlNUQ2htYVdWc1pDa3BPMXh1SUNBZ0lDQWdJQ0FnSUc5M2JtVnlJRDBnWTI5dWRHVjRkQzV5ZFc1MGFXMWxVbVZuYVhOMGNua3VaMlYwU0hsd1pYSjBlVTkzYm1WeUtISmxjRzl5ZEdWeUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1ptbGxiR1F1YzNCc2FYUW9Kem92THljcFd6QmRJRDA5UFNBbmFIbHdaWEowZVNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5M2JtVnlJRDBnWTI5dWRHVjRkQzV5ZFc1MGFXMWxVbVZuYVhOMGNua3VaMlYwU0hsd1pYSjBlVTkzYm1WeUtISmxiVzkyWlZCaGRHaEdjbTl0VlZKTUtHWnBaV3hrS1NrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHZkMjVsY2lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IzZHVaWElnUFNCblpYUlZjMlZ5UlcxaGFXeEdjbTl0VlZKTUtHOTNibVZ5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYjNkdVpYSWdQVDA5SUhSb2FYTXVkR0Z5WjJWMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSjA1dmRDQkJjSEJzYVdOaFlteGxKenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NWpiMjVrYVhScGIyNHVhWE5CY0hCc2FXTmhZbXhsS0dOdmJuUmxlSFFzSUcxbGMzTmhaMlVzSUhSb2FYTXVjMk52Y0dVc0lIUm9hWE11ZEdGeVoyVjBLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHVmphWE5wYjI0N1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW5UbTkwSUVGd2NHeHBZMkZpYkdVbk8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCU2RXeGxPMXh1SWl3aUx5b3FYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRkJVSUVsdWIzWmh3NmZEbzI4Z1pTQlRhWE4wWlcxaGN5QlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJKVGtWVFF5MUpSRnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJSVlU5Q1NWTWdUa1ZVVjA5U1MxTWdVMHhjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUmxKQlZVNUlUMFpGVWkxSFJWTkZURXhUUTBoQlJsUWdXbFZTSUVaUFJWSkVSVkpWVGtjZ1JFVlNJRUZPUjBWWFFVNUVWRVZPSUVaUFVsTkRTRlZPUnlCRkxsWmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdUMUpCVGtkRklGTkJYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVJsZFhSelkyaGxJRlJsYkdWcmIyMGdRVWRjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUVhCcGVtVmxYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRlJGUTBoT1NWTkRTRVVnVlU1SlZrVlNVMGxVUVZRZ1FrVlNURWxPWEc0cVhHNHFJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pTQmNJa3hwWTJWdWMyVmNJaWs3WEc0cUlIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVWdkMmwwYUNCMGFHVWdUR2xqWlc1elpTNWNiaW9nV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNHFYRzRxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0cVhHNHFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl3Z2MyOW1kSGRoY21WY2Jpb2daR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc0Z1hDSkJVeUJKVTF3aUlFSkJVMGxUTEZ4dUtpQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGtnUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNWNiaW9nVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVWdjM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpGeHVLaUJzYVcxcGRHRjBhVzl1Y3lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2Jpb3FMMXh1WEc0dktpcGNiaW9nUUdGMWRHaHZjaUJCYm1FZ1EyRnNaR1ZwY21FZ1BHRnVZUzVqWVd4a1pXbHlZVUIwWldOdWFXTnZMblZzYVhOaWIyRXVjSFErWEc0cUlFQmpiR0Z6YzJSbGMyTWdRMnhoYzNNZ2RHOGdZMjl0WW1sdVpTQjBhR1VnWVhWMGFHOXlhWHBoZEdsdmJpQmtaV05wYzJsdmJuTWdkR2hoZENCeVpYTjFiSFFnWm5KdmJTQnlkV3hsY3lCbGRtRnNkV0YwYVc5dUxseHVLaTljYm1Oc1lYTnpJRUZzYkc5M1QzWmxjbkpwWkdWeklIdGNibHh1SUNBdktpcGNiaUFnS2lCSGFYWmxiaUJoYmlCaGNuSmhlU0J2WmlCcGJtUnBkbWxrZFdGc0lHRjFkR2h2Y21sNllYUnBiMjRnWkdWamFYTnBiMjV6TENCd2NtbHZjbWwwYVhwbGN5QmhJSEJ2YzJsMGFYWmxJRzl1WlM1Y2JpQWdLaUJBY0dGeVlXMGdJQ0FnZTJKdmIyeGxZVzViWFgwZ0lDQmtaV05wYzJsdmJuTmNiaUFnS2lCQWNtVjBkWEp1Y3lBZ2UySnZiMnhsWVc1OVhHNGdJQ292WEc0Z0lHTnZiV0pwYm1Vb1pHVmphWE5wYjI1ektTQjdYRzRnSUNBZ2FXWWdLR1JsWTJsemFXOXVjeTVwYm1SbGVFOW1LSFJ5ZFdVcElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdsbUlDaGtaV05wYzJsdmJuTXVhVzVrWlhoUFppaG1ZV3h6WlNrZ0lUMDlJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW5UbTkwSUVGd2NHeHBZMkZpYkdVbk8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFRnNiRzkzVDNabGNuSnBaR1Z6TzF4dUlpd2lMeW9xWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZCVUlFbHViM1podzZmRG8yOGdaU0JUYVhOMFpXMWhjeUJUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCSlRrVlRReTFKUkZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUlZVOUNTVk1nVGtWVVYwOVNTMU1nVTB4Y2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JsSkJWVTVJVDBaRlVpMUhSVk5GVEV4VFEwaEJSbFFnV2xWU0lFWlBSVkpFUlZKVlRrY2dSRVZTSUVGT1IwVlhRVTVFVkVWT0lFWlBVbE5EU0ZWT1J5QkZMbFpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVDFKQlRrZEZJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVSbGRYUnpZMmhsSUZSbGJHVnJiMjBnUVVkY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1FYQnBlbVZsWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZSRlEwaE9TVk5EU0VVZ1ZVNUpWa1ZTVTBsVVFWUWdRa1ZTVEVsT1hHNHFYRzRxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNHFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRxWEc0cUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNHFYRzRxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5d2djMjltZEhkaGNtVmNiaW9nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1S2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaW9xTDF4dVhHNHZLaXBjYmlvZ1FHRjFkR2h2Y2lCQmJtRWdRMkZzWkdWcGNtRWdQR0Z1WVM1allXeGtaV2x5WVVCMFpXTnVhV052TG5Wc2FYTmliMkV1Y0hRK1hHNHFJRUJqYkdGemMyUmxjMk1nUTJ4aGMzTWdkRzhnWTI5dFltbHVaU0IwYUdVZ1lYVjBhRzl5YVhwaGRHbHZiaUJrWldOcGMybHZibk1nZEdoaGRDQnlaWE4xYkhRZ1puSnZiU0J5ZFd4bGN5QmxkbUZzZFdGMGFXOXVMbHh1S2k5Y2JtTnNZWE56SUVKc2IyTnJUM1psY25KcFpHVnpJSHRjYmx4dUlDQXZLaXBjYmlBZ0tpQkhhWFpsYmlCaGJpQmhjbkpoZVNCdlppQnBibVJwZG1sa2RXRnNJR0YxZEdodmNtbHpZWFJwYjI0Z1pHVmphWE5wYjI1ekxDQndjbWx2Y21sMGFYTmxjeUJoSUc1bFoyRjBhWFpsSUc5dVpTNWNiaUFnS2lCQWNHRnlZVzBnSUNBZ2UySnZiMnhsWVc1YlhYMGdJQ0JrWldOcGMybHZibk5jYmlBZ0tpQkFjbVYwZFhKdWN5QWdlMkp2YjJ4bFlXNTlYRzRnSUNvdlhHNGdJR052YldKcGJtVW9aR1ZqYVhOcGIyNXpLU0I3WEc0Z0lDQWdhV1lnS0dSbFkybHphVzl1Y3k1cGJtUmxlRTltS0daaGJITmxLU0FoUFQwZ0xURXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdhV1lnS0dSbFkybHphVzl1Y3k1cGJtUmxlRTltS0hSeWRXVXBJQ0U5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuVG05MElFRndjR3hwWTJGaWJHVW5PMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRUpzYjJOclQzWmxjbkpwWkdWek8xeHVJaXdpTHlvcVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGQlVJRWx1YjNaaHc2ZkRvMjhnWlNCVGFYTjBaVzFoY3lCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkpUa1ZUUXkxSlJGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlJWVTlDU1ZNZ1RrVlVWMDlTUzFNZ1UweGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSbEpCVlU1SVQwWkZVaTFIUlZORlRFeFRRMGhCUmxRZ1dsVlNJRVpQUlZKRVJWSlZUa2NnUkVWU0lFRk9SMFZYUVU1RVZFVk9JRVpQVWxORFNGVk9SeUJGTGxaY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1QxSkJUa2RGSUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGUkZRMGhPU1ZORFNFVWdWVTVKVmtWU1UwbFVRVlFnUWtWU1RFbE9YRzRxWEc0cUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2Jpb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0cVhHNHFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRxWEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1S2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2Jpb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4dUtpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlvcUwxeHVYRzR2S2lwY2Jpb2dRR0YxZEdodmNpQkJibUVnUTJGc1pHVnBjbUVnUEdGdVlTNWpZV3hrWldseVlVQjBaV051YVdOdkxuVnNhWE5pYjJFdWNIUStYRzRxSUVCamJHRnpjMlJsYzJNZ1EyeGhjM01nZEc4Z1kyOXRZbWx1WlNCMGFHVWdZWFYwYUc5eWFYcGhkR2x2YmlCa1pXTnBjMmx2Ym5NZ2RHaGhkQ0J5WlhOMWJIUWdabkp2YlNCeWRXeGxjeUJsZG1Gc2RXRjBhVzl1TGx4dUtpOWNibU5zWVhOeklFWnBjbk4wUVhCd2JHbGpZV0pzWlNCN1hHNWNiaUFnTHlvcVhHNGdJQ29nUjJsMlpXNGdZVzRnWVhKeVlYa2diMllnYVc1a2FYWnBaSFZoYkNCaGRYUm9iM0pwYzJGMGFXOXVJR1JsWTJsemFXOXVjeXdnY21WMGRYSnVjeUIwYUdVZ1ptbHljM1FnYjI1bElHUnBabVpsY21WdWRDQm1jbTl0SUNkT2IzUWdRWEJ3YkdsallXSnNaU2NzSUdWcGRHaGxjaUJ3YjNOcGRHbDJaU0J2Y2lCdVpXZGhkR2wyWlM1Y2JpQWdLaUJBY0dGeVlXMGdJQ0FnZTJKdmIyeGxZVzViWFgwZ0lDQWdJR1JsWTJsemFXOXVjMXh1SUNBcUlFQnlaWFIxY201eklDQjdZbTl2YkdWaGJuMWNiaUFnS2k5Y2JpQWdZMjl0WW1sdVpTaGtaV05wYzJsdmJuTXBJSHRjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJR2x1SUdSbFkybHphVzl1Y3lrZ2UxeHVJQ0FnSUNBZ2FXWWdLR1JsWTJsemFXOXVjMXRwWFNBaFBUMGdKMDV2ZENCQmNIQnNhV05oWW14bEp5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaR1ZqYVhOcGIyNXpXMmxkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z0owNXZkQ0JCY0hCc2FXTmhZbXhsSnp0Y2JpQWdmVnh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFWnBjbk4wUVhCd2JHbGpZV0pzWlR0Y2JpSXNJbWx0Y0c5eWRDQkRiMjVrYVhScGIyNGdabkp2YlNBbkxpOURiMjVrYVhScGIyNG5PMXh1YVcxd2IzSjBJRTl3WlhKaGRHOXljeUJtY205dElDY3VMaTlQY0dWeVlYUnZjbk1uTzF4dWFXMXdiM0owSUZOMVluTmpjbWx3ZEdsdmJrTnZibVJwZEdsdmJpQm1jbTl0SUNjdUwxTjFZbk5qY21sd2RHbHZia052Ym1ScGRHbHZiaWM3WEc1Y2JtTnNZWE56SUVGa2RtRnVZMlZrUTI5dVpHbDBhVzl1SUh0Y2JseHVJQ0JqYjI1emRISjFZM1J2Y2loamIyNWthWFJwYjI0cElIdGNiaUFnSUNCMGFHbHpMbTl3WlhKaGRHOXljeUE5SUc1bGR5QlBjR1Z5WVhSdmNuTW9LVHRjYmlBZ0lDQnBaaUFvWTI5dVpHbDBhVzl1TG05d1pYSmhkRzl5Y3lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0JqYjI1a2FYUnBiMjRnUFNCamIyNWthWFJwYjI0dVkyOXVaR2wwYVc5dU8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1a2FYUnBiMjRnUFNCMGFHbHpMbUoxYVd4a1EyOXVaR2wwYVc5dUtHTnZibVJwZEdsdmJpazdYRzRnSUNBZ2RHaHBjeTVqYjI1a2FYUnBiMjRnUFNCamIyNWthWFJwYjI0N1hHNGdJSDFjYmx4dUlDQmlkV2xzWkVOdmJtUnBkR2x2YmloamIyNWthWFJwYjI0cElIdGNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoamIyNWthWFJwYjI1Yk1WMHBLU0I3WEc0Z0lDQWdJQ0JqYjI1a2FYUnBiMjViTVYwZ1BTQjBhR2x6TG1KMWFXeGtRMjl1WkdsMGFXOXVLR052Ym1ScGRHbHZibHN4WFNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNoamIyNWthWFJwYjI1Yk1WMHVZWFIwY21saWRYUmxJRDA5UFNBbmMzVmljMk55YVhCMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNCamIyNWthWFJwYjI1Yk1WMGdQU0J1WlhjZ1UzVmljMk55YVhCMGFXOXVRMjl1WkdsMGFXOXVLR052Ym1ScGRHbHZibHN4WFM1aGRIUnlhV0oxZEdVc0lHTnZibVJwZEdsdmJsc3hYUzV2Y0dWeVlYUnZjaXdnWTI5dVpHbDBhVzl1V3pGZExuQmhjbUZ0Y3lrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCamIyNWthWFJwYjI1Yk1WMGdQU0J1WlhjZ1EyOXVaR2wwYVc5dUtHTnZibVJwZEdsdmJsc3hYUzVoZEhSeWFXSjFkR1VzSUdOdmJtUnBkR2x2YmxzeFhTNXZjR1Z5WVhSdmNpd2dZMjl1WkdsMGFXOXVXekZkTG5CaGNtRnRjeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dOdmJtUnBkR2x2YmxzeVhTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoamIyNWthWFJwYjI1Yk1sMHBLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJtUnBkR2x2YmxzeVhTQTlJSFJvYVhNdVluVnBiR1JEYjI1a2FYUnBiMjRvWTI5dVpHbDBhVzl1V3pKZEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjI1a2FYUnBiMjViTWwwdVlYUjBjbWxpZFhSbElEMDlQU0FuYzNWaWMyTnlhWEIwYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJtUnBkR2x2YmxzeVhTQTlJRzVsZHlCVGRXSnpZM0pwY0hScGIyNURiMjVrYVhScGIyNG9ZMjl1WkdsMGFXOXVXekpkTG1GMGRISnBZblYwWlN3Z1kyOXVaR2wwYVc5dVd6SmRMbTl3WlhKaGRHOXlMQ0JqYjI1a2FYUnBiMjViTWwwdWNHRnlZVzF6S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjVrYVhScGIyNWJNbDBnUFNCdVpYY2dRMjl1WkdsMGFXOXVLR052Ym1ScGRHbHZibHN5WFM1aGRIUnlhV0oxZEdVc0lHTnZibVJwZEdsdmJsc3lYUzV2Y0dWeVlYUnZjaXdnWTI5dVpHbDBhVzl1V3pKZExuQmhjbUZ0Y3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJR052Ym1ScGRHbHZianRjYmlBZ2ZWeHVYRzRnSUdselFYQndiR2xqWVdKc1pTaGpiMjUwWlhoMExDQnRaWE56WVdkbExDQnpZMjl3WlN3Z2RHRnlaMlYwTENCdmNHVnlZWFJ2Y2l3Z2JHVm1kQ3dnY21sbmFIUXBJSHRjYmlBZ0lDQnBaaUFvSVc5d1pYSmhkRzl5S1NCN1hHNGdJQ0FnSUNCdmNHVnlZWFJ2Y2lBOUlIUm9hWE11WTI5dVpHbDBhVzl1V3pCZE8xeHVJQ0FnSUNBZ2JHVm1kQ0E5SUhSb2FYTXVZMjl1WkdsMGFXOXVXekZkTzF4dUlDQWdJQ0FnY21sbmFIUWdQU0IwYUdsekxtTnZibVJwZEdsdmJsc3lYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjNhR2xzWlNBb0lTaHNaV1owSUdsdWMzUmhibU5sYjJZZ1EyOXVaR2wwYVc5dUtTQW1JQ0VvYkdWbWRDQnBibk4wWVc1alpXOW1JRk4xWW5OamNtbHdkR2x2YmtOdmJtUnBkR2x2YmlrZ0ppQW9kSGx3Wlc5bUlHeGxablFnSVQwOUlDZGliMjlzWldGdUp5a3BJSHRjYmlBZ0lDQWdJR3hsWm5RZ1BTQjBhR2x6TG1selFYQndiR2xqWVdKc1pTaGpiMjUwWlhoMExDQnRaWE56WVdkbExDQnpZMjl3WlN3Z2RHRnlaMlYwTENCc1pXWjBXekJkTENCc1pXWjBXekZkTENCc1pXWjBXekpkS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hKcFoyaDBJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lIZG9hV3hsSUNnaEtISnBaMmgwSUdsdWMzUmhibU5sYjJZZ1EyOXVaR2wwYVc5dUtTQW1JQ0VvY21sbmFIUWdhVzV6ZEdGdVkyVnZaaUJUZFdKelkzSnBjSFJwYjI1RGIyNWthWFJwYjI0cElDWWdLSFI1Y0dWdlppQnlhV2RvZENBaFBUMGdKMkp2YjJ4bFlXNG5LU2tnZTF4dUlDQWdJQ0FnSUNCeWFXZG9kQ0E5SUhSb2FYTXVhWE5CY0hCc2FXTmhZbXhsS0dOdmJuUmxlSFFzSUcxbGMzTmhaMlVzSUhOamIzQmxMQ0IwWVhKblpYUXNJSEpwWjJoMFd6QmRMQ0J5YVdkb2RGc3hYU3dnY21sbmFIUmJNbDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCeVpYTjFiSFJNWldaMElEMGdLSFI1Y0dWdlppQnNaV1owSUQwOVBTQW5ZbTl2YkdWaGJpY3BJRDhnYkdWbWRDQTZJR3hsWm5RdWFYTkJjSEJzYVdOaFlteGxLR052Ym5SbGVIUXNJRzFsYzNOaFoyVXNJSE5qYjNCbExDQjBZWEpuWlhRcE8xeHVJQ0FnSUd4bGRDQnlaWE4xYkhSU2FXZG9kRHRjYmlBZ0lDQnBaaUFvY21sbmFIUWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2NtVnpkV3gwVW1sbmFIUWdQU0FvZEhsd1pXOW1JSEpwWjJoMElEMDlQU0FuWW05dmJHVmhiaWNwSUQ4Z2NtbG5hSFFnT2lCeWFXZG9kQzVwYzBGd2NHeHBZMkZpYkdVb1kyOXVkR1Y0ZEN3Z2JXVnpjMkZuWlN3Z2MyTnZjR1VzSUhSaGNtZGxkQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl3WlhKaGRHOXljMXR2Y0dWeVlYUnZjbDBvVzNKbGMzVnNkRXhsWm5Rc0lISmxjM1ZzZEZKcFoyaDBYU2s3WEc0Z0lIMWNibHh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCQlpIWmhibU5sWkVOdmJtUnBkR2x2Ymp0Y2JpSXNJaThxS2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUVZDQkpibTkyWWNPbnc2TnZJR1VnVTJsemRHVnRZWE1nVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1NVNUZVME10U1VSY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VWVlBRa2xUSUU1RlZGZFBVa3RUSUZOTVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFWlNRVlZPU0U5R1JWSXRSMFZUUlV4TVUwTklRVVpVSUZwVlVpQkdUMFZTUkVWU1ZVNUhJRVJGVWlCQlRrZEZWMEZPUkZSRlRpQkdUMUpUUTBoVlRrY2dSUzVXWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFRndhWHBsWlZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCVVJVTklUa2xUUTBoRklGVk9TVlpGVWxOSlZFRlVJRUpGVWt4SlRseHVLbHh1S2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0cUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1S2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVLbHh1S2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNiaW9nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0cUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRxS2k5Y2JseHVhVzF3YjNKMElFOXdaWEpoZEc5eWN5Qm1jbTl0SUNjdUxpOVBjR1Z5WVhSdmNuTW5PMXh1WEc0dktpcGNiaW9nUUdGMWRHaHZjaUJCYm1FZ1EyRnNaR1ZwY21FZ1BHRnVZUzVqWVd4a1pXbHlZVUIwWldOdWFXTnZMblZzYVhOaWIyRXVjSFErWEc0cUlFQmpiR0Z6YzJSbGMyTWdRMnhoYzNNZ2RHOGdjbVZ3Y21WelpXNTBJR0VnWTI5dVpHbDBhVzl1SUdGdVpDQmxkbUZzZFdGMFpTQnBkSE1nWVhCd2JHbGpZV0pwYkdsMGVTNWNiaW92WEc1amJHRnpjeUJEYjI1a2FYUnBiMjRnZTF4dVhHNGdJQzhxS2x4dUlDQXFJRU55WldGMFpYTWdZU0J1WlhjZ1EyOXVaR2wwYVc5dUxseHVJQ0FxSUVCamJHRnpjMXh1SUNBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ0lHRjBkSEpwWW5WMFpWeHVJQ0FxSUVCd1lYSmhiU0FnZTNOMGNtbHVaMzBnSUc5d1pYSmhkRzl5WEc0Z0lDb2dRSEJoY21GdElDQjdLbjBnSUNBZ0lDQWdjR0Z5WVcxelhHNGdJQ292WEc0Z0lHTnZibk4wY25WamRHOXlLR0YwZEhKcFluVjBaU3dnYjNCbGNtRjBiM0lzSUhCaGNtRnRjeWtnZTF4dUlDQWdJSFJvYVhNdVlYUjBjbWxpZFhSbElEMGdZWFIwY21saWRYUmxPMXh1SUNBZ0lIUm9hWE11YjNCbGNtRjBiM0lnUFNCdmNHVnlZWFJ2Y2p0Y2JpQWdJQ0IwYUdsekxuQmhjbUZ0Y3lBOUlIQmhjbUZ0Y3p0Y2JpQWdJQ0IwYUdsekxtOXdaWEpoZEc5eWN5QTlJRzVsZHlCUGNHVnlZWFJ2Y25Nb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRlpsY21sbWFXVnpJR2xtSUhSb1pTQmpiMjVrYVhScGIyNGdhWE1nWVhCd2JHbGpZV0pzWlNCMGJ5QjBhR1VnYldWemMyRm5aUzRnUm1seWMzUXNJSFJvWlNCemVYTjBaVzBnZG1Gc2RXVWdkR2hoZENCamIzSnlaWE53YjI1a2N5QjBieUIwYUdVZ1lYUjBjbWxpZFhSbElHbHpJSEpsZEhKcFpYWmxaRHNnZEdobGJpd2dkR2hoZENCMllXeDFaU0JwY3lCamIyMXdZWEpsWkNCM2FYUm9JSFJvWlNCd1lYSmhiV1YwWlhJZ2MzQmxZMmxtYVdWa0lHbHVJSFJvWlNCamIyNWthWFJwYjI0Z1lua2daWGhsWTNWMGFXNW5JSFJvWlNCdmNHVnlZWFJ2Y2lCcGJYQnNaVzFsYm5SaGRHbHZiaTRnU1dZZ2RHaGxJRzl3WlhKaGRHOXlJR2x6SUNkcGJpY2dZVzVrSUhSb1pTQnVZVzFsSUc5bUlHRWdaM0p2ZFhBZ2FYTWdaMmwyWlc0c0lIUm9aVzRnZEdobElHRnljbUY1SUdodmJHUnBibWNnZEdobElHMWxiV0psY25NZ2IyWWdkR2hsSUdkeWIzVndJR2x6SUhKbGRISnBaWFpsWkNCaVpXWnZjbVVnZEdobElHTnZiWEJoY21semIyNHVYRzRnSUNvZ1FIQmhjbUZ0SUNCN1QySnFaV04wZlNBZ0lDQmpiMjUwWlhoMElDQWdaVzUyYVhKdmJtMWxiblFnZDJobGNtVWdkR2hsSUZCdmJHbGplU0JGYm1kcGJtVWdhWE1nWW1WcGJtY2dkWE5sWkZ4dUlDQXFJRUJ3WVhKaGJTQWdlMDlpYW1WamRIMGdJQ0FnYldWemMyRm5aVnh1SUNBcUwxeHVJQ0JwYzBGd2NHeHBZMkZpYkdVb1kyOXVkR1Y0ZEN3Z2JXVnpjMkZuWlNrZ2UxeHVJQ0FnSUdOdmJuUmxlSFJiZEdocGN5NWhkSFJ5YVdKMWRHVmRJRDBnZXlCdFpYTnpZV2RsT2lCdFpYTnpZV2RsSUgwN1hHNGdJQ0FnYkdWMElIWmhiSFZsSUQwZ1kyOXVkR1Y0ZEZ0MGFHbHpMbUYwZEhKcFluVjBaVjA3WEc0Z0lDQWdiR1YwSUhSbGJYQlFZWEpoYlR0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG05d1pYSmhkRzl5SUQwOVBTQW5hVzRuS1NCN1hHNGdJQ0FnSUNCcFppQW9JU2hCY25KaGVTNXBjMEZ5Y21GNUtIUm9hWE11Y0dGeVlXMXpLU2twSUh0Y2JpQWdJQ0FnSUNBZ2RHVnRjRkJoY21GdElEMGdZMjl1ZEdWNGRDNW5aWFJIY205MWNDaDBhR2x6TG5CaGNtRnRjeXdnYldWemMyRm5aUzUwYnlrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl3WlhKaGRHOXljMXQwYUdsekxtOXdaWEpoZEc5eVhTaGJkR1Z0Y0ZCaGNtRnRMQ0IyWVd4MVpWMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTl3WlhKaGRHOXljMXQwYUdsekxtOXdaWEpoZEc5eVhTaGJkR2hwY3k1d1lYSmhiWE1zSUhaaGJIVmxYU2s3WEc0Z0lIMWNibHh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRGIyNWthWFJwYjI0N1hHNGlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNWNibWx0Y0c5eWRDQkRiMjVrYVhScGIyNGdabkp2YlNBbkxpOURiMjVrYVhScGIyNG5PMXh1WEc0dktpcGNiaW9nUUdGMWRHaHZjaUJCYm1FZ1EyRnNaR1ZwY21FZ1BHRnVZUzVqWVd4a1pXbHlZVUIwWldOdWFXTnZMblZzYVhOaWIyRXVjSFErWEc0cUlFQmpiR0Z6YzJSbGMyTWdRMnhoYzNNZ2RHOGdjbVZ3Y21WelpXNTBJR0VnYzNWaWMyTnlhWEIwYVc5dUlHTnZibVJwZEdsdmJpQmhibVFnWlhaaGJIVmhkR1VnYVhSeklHRndjR3hwWTJGaWFXeHBkSGt1WEc0cUwxeHVZMnhoYzNNZ1UzVmljMk55YVhCMGFXOXVRMjl1WkdsMGFXOXVJR1Y0ZEdWdVpITWdRMjl1WkdsMGFXOXVJSHRjYmx4dUlDQXZLaXBjYmlBZ0tpQkRjbVZoZEdWeklHRWdibVYzSUZOMVluTmpjbWx3ZEdsdmJrTnZibVJwZEdsdmJpNWNiaUFnS2lCQVkyeGhjM05jYmlBZ0tpQkFjR0Z5WVcwZ0lIdHpkSEpwYm1kOUlDQmhkSFJ5YVdKMWRHVmNiaUFnS2lCQWNHRnlZVzBnSUh0emRISnBibWQ5SUNCdmNHVnlZWFJ2Y2x4dUlDQXFJRUJ3WVhKaGJTQWdleXA5SUNBZ0lDQWdJSEJoY21GdGMxeHVJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWhoZEhSeWFXSjFkR1VzSUc5d1pYSmhkRzl5TENCd1lYSmhiWE1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaGhkSFJ5YVdKMWRHVXNJRzl3WlhKaGRHOXlMQ0J3WVhKaGJYTXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVm1WeWFXWnBaWE1nYVdZZ2RHaGxJSE4xWW5OamNtbHdkR2x2YmlCamIyNWthWFJwYjI0Z2FYTWdZWEJ3YkdsallXSnNaU0IwYnlCMGFHVWdiV1Z6YzJGblpTNGdSbWx5YzNRc0lIWmxjbWxtYVdWeklHbG1JSFJvWlNCdFpYTnpZV2RsSUdseklHOW1JSFJvWlNCemRXSnpZM0pwY0hScGIyNGdkSGx3WlRzZ2MyVmpiMjVrTENCMlpYSnBabWxsY3lCcFppQjBhR1VnYldWemMyRm5aU0JwY3lCbWNtOXRJR0VnY21WdGIzUmxJSEoxYm5ScGJXVWdkRzhnWjNWaGNtRnVkR1ZsSUhSb1lYUWdkR2hsSUhOMVluTmpjbWx3ZEdsdmJpQnBjeUJpWldsdVp5QjJZV3hwWkdGMFpXUWdhVzRnZEdobElHUmxjM1JwYm1GMGFXOXVJSEoxYm5ScGJXVTdJSFJvYVhKa0xDQjJaWEpwWm1sbGN5QnBaaUIwYUdVZ2MzVmljMk55YVhCMGFXOXVJSEJ5WldabGNtVnVZMlVnYVhNZ2JXVjBMbHh1SUNBcUlFQndZWEpoYlNBZ2UwOWlhbVZqZEgwZ0lDQWdZMjl1ZEdWNGRDQWdJR1Z1ZG1seWIyNXRaVzUwSUhkb1pYSmxJSFJvWlNCUWIyeHBZM2tnUlc1bmFXNWxJR2x6SUdKbGFXNW5JSFZ6WldSY2JpQWdLaUJBY0dGeVlXMGdJSHRQWW1wbFkzUjlJQ0FnSUcxbGMzTmhaMlZjYmlBZ0tpOWNiaUFnYVhOQmNIQnNhV05oWW14bEtHTnZiblJsZUhRc0lHMWxjM05oWjJVcElIdGNiaUFnSUNCc1pYUWdhWE5UZFdKelkzSnBjSFJwYjI0Z1BTQnRaWE56WVdkbExuUjVjR1VnUFQwOUlDZHpkV0p6WTNKcFltVW5PMXh1SUNBZ0lHeGxkQ0JwYzBaeWIyMVNaVzF2ZEdWVFRTQTlJR052Ym5SbGVIUXVhWE5HY205dFVtVnRiM1JsVTAwb2JXVnpjMkZuWlM1bWNtOXRLVHRjYmlBZ0lDQnBaaUFvYVhOVGRXSnpZM0pwY0hScGIyNGdKaUJwYzBaeWIyMVNaVzF2ZEdWVFRTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITjFjR1Z5TG1selFYQndiR2xqWVdKc1pTaGpiMjUwWlhoMExDQnRaWE56WVdkbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGTjFZbk5qY21sd2RHbHZia052Ym1ScGRHbHZianRjYmlJc0ltbHRjRzl5ZENCQmJHeHZkMDkyWlhKeWFXUmxjeUJtY205dElDY3VMaTlqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzF6TDBGc2JHOTNUM1psY25KcFpHVnpKenRjYm1sdGNHOXlkQ0JDYkc5amEwOTJaWEp5YVdSbGN5Qm1jbTl0SUNjdUxpOWpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMXpMMEpzYjJOclQzWmxjbkpwWkdWekp6dGNibWx0Y0c5eWRDQjdaR2wyYVdSbFZWSk1MQ0JuWlhSVmMyVnlSVzFoYVd4R2NtOXRWVkpNTENCcGMwUmhkR0ZQWW1wbFkzUlZVa3g5SUdaeWIyMGdKeTR1THk0dUwzVjBhV3h6TDNWMGFXeHpKenRjYm1sdGNHOXlkQ0JHYVhKemRFRndjR3hwWTJGaWJHVWdabkp2YlNBbkxpNHZZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRjeTlHYVhKemRFRndjR3hwWTJGaWJHVW5PMXh1YVcxd2IzSjBJRkpsVkdocGJtdERkSGdnWm5KdmJTQW5MaTR2VW1WVWFHbHVhME4wZUNjN1hHNWNibU5zWVhOeklGSjFiblJwYldWRGIzSmxRM1I0SUdWNGRHVnVaSE1nVW1WVWFHbHVhME4wZUNCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2FXUk5iMlIxYkdVc0lISjFiblJwYldWU1pXZHBjM1J5ZVN3Z2MzUnZjbUZuWlUxaGJtRm5aWElwSUh0Y2JpQWdJQ0J6ZFhCbGNpZ3BPMXh1SUNBZ0lIUm9hWE11YVdSTmIyUjFiR1VnUFNCcFpFMXZaSFZzWlR0Y2JpQWdJQ0IwYUdsekxuSjFiblJwYldWU1pXZHBjM1J5ZVNBOUlISjFiblJwYldWU1pXZHBjM1J5ZVR0Y2JpQWdJQ0IwYUdsekxtRmpkR2wyWlZWelpYSlFiMnhwWTNrZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ2RHaHBjeTV6WlhKMmFXTmxVSEp2ZG1sa1pYSlFiMnhwWTNrZ1BTQjdmVHRjYmlBZ0lDQjBhR2x6TG5WelpYSlFiMnhwWTJsbGN5QTlJSHQ5TzF4dUlDQWdJSFJvYVhNdWMzUnZjbUZuWlUxaGJtRm5aWElnUFNCemRHOXlZV2RsVFdGdVlXZGxjanRjYmlBZ2ZWeHVYRzRnSUdkbGRDQnpkV0p6WTNKcGNIUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTjFZbk5qY21sd2RHbHZianRjYmlBZ2ZWeHVYRzRnSUhObGRDQnpkV0p6WTNKcGNIUnBiMjRvY0dGeVlXMXpLU0I3WEc0Z0lDQWdkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVJRDBnY0dGeVlXMXpMbTFsYzNOaFoyVXVZbTlrZVM1emRXSnpZM0pwWW1WeU8xeHVJQ0I5WEc1Y2JpQWdiRzloWkVOdmJtWnBaM1Z5WVhScGIyNXpLQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dVhHNGdJQ0FnSUNCZmRHaHBjeTV6ZEc5eVlXZGxUV0Z1WVdkbGNpNW5aWFFvSjNKbGRHaHBibXM2WVdOMGFYWmxVRzlzYVdONUp5a3VkR2hsYmlnb2RtRnNkV1VwSUQwK0lIdGNiaUFnSUNBZ0lDQWdYM1JvYVhNdVlXTjBhWFpsVlhObGNsQnZiR2xqZVNBOUlIWmhiSFZsTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTV6ZEc5eVlXZGxUV0Z1WVdkbGNpNW5aWFFvSjNKbGRHaHBibXM2WjNKdmRYQnpKeWs3WEc0Z0lDQWdJQ0I5S1M1MGFHVnVLQ2huY205MWNFbHVabThwSUQwK0lIdGNiaUFnSUNBZ0lDQWdiR1YwSUdkeWIzVndjeUE5SUdkeWIzVndTVzVtYnp0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WjNKdmRYQnpJRDBnS0dkeWIzVndjeUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQS9JSHQ5SURvZ1ozSnZkWEJ6TzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTV6ZEc5eVlXZGxUV0Z1WVdkbGNpNW5aWFFvSjNKbGRHaHBibXM2YzNCUWIyeHBZMmxsY3ljcE8xeHVJQ0FnSUNBZ2ZTa3VkR2hsYmlnb2NHOXNhV05wWlhOSmJtWnZLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6Y0ZCdmJHbGphV1Z6SUQwZ2NHOXNhV05wWlhOSmJtWnZPMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NXpaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZM2tnUFNBb2MzQlFiMnhwWTJsbGN5QTlQVDBnZFc1a1pXWnBibVZrS1NBL0lIdDlJRG9nYzNCUWIyeHBZMmxsY3p0Y2JseHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmJHOWhaRlZ6WlhKUWIyeHBZMmxsY3lncExuUm9aVzRvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUhCeVpYQmhjbVZHYjNKRmRtRnNkV0YwYVc5dUtHMWxjM05oWjJVc0lHbHpTVzVqYjIxcGJtY3BJSHRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dVhHNGdJQ0FnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnYVdZZ0tHbHpTVzVqYjIxcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGOTBhR2x6TGw5cGMxUnZRM2x3YUdWeVRXOWtkV3hsS0cxbGMzTmhaMlVwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWFXUk5iMlIxYkdVdVpHVmpjbmx3ZEUxbGMzTmhaMlVvYldWemMyRm5aU2t1ZEdobGJpaG1kVzVqZEdsdmJpaHRaWE56WVdkbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkttbG1JQ2h0WlhOellXZGxMblI1Y0dVZ1BUMDlJQ2QxY0dSaGRHVW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOXBjMVpoYkdsa1ZYQmtZWFJsS0cxbGMzTmhaMlVwTG5Sb1pXNG9iV1Z6YzJGblpTQTlQaUI3S2k5Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9iV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnZlN3Z0tHVnljbTl5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5cDlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvYldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLaTljYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLRzFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb1gzUm9hWE11WDJselZHOVRaWFJKUkNodFpYTnpZV2RsS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOW5aWFJKWkdWdWRHbDBlU2h0WlhOellXZGxLUzUwYUdWdUtHbGtaVzUwYVhSNUlEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVdVltOWtlUzVwWkdWdWRHbDBlU0E5SUdsa1pXNTBhWFI1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5TENBb1pYSnliM0lwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25KdmNpazdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCblpYUlFiMnhwWTJsbGN5aHRaWE56WVdkbExDQnBjMGx1WTI5dGFXNW5UV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkQ0J3YjJ4cFkybGxjeUE5SUh0OU8xeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVlXTjBhWFpsVlhObGNsQnZiR2xqZVNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0J3YjJ4cFkybGxjeTUxYzJWeVVHOXNhV041SUQwZ2RHaHBjeTUxYzJWeVVHOXNhV05wWlhOYmRHaHBjeTVoWTNScGRtVlZjMlZ5VUc5c2FXTjVYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQndiMnhwWTJsbGN5NXpaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZM2tnUFNCMGFHbHpMbWRsZEZObGNuWnBZMlZRY205MmFXUmxjbEJ2YkdsamVTaHRaWE56WVdkbExDQnBjMGx1WTI5dGFXNW5UV1Z6YzJGblpTazdYRzVjYmlBZ0lDQnlaWFIxY200Z2NHOXNhV05wWlhNN1hHNGdJSDFjYmx4dUlDQmZhWE5XWVd4cFpGVndaR0YwWlNodFpYTnpZV2RsS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHMWxjM05oWjJVdVpuSnZiUzV6Y0d4cGRDZ25PaTh2SnlrdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NXBaRTF2WkhWc1pTNWZaMlYwU0hsd1pYSjBlVVp5YjIxRVlYUmhUMkpxWldOMEtHMWxjM05oWjJVdVpuSnZiU2t1ZEdobGJpaG9lWEJsY25SNVZWSk1JRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUhsd1pYSjBlVlZTVENBOVBUMGdiV1Z6YzJGblpTNWliMlI1TG5OdmRYSmpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkVWFHVWdjMjkxY21ObElHOW1JSFJvWlNCdFpYTnpZV2RsSUdseklHNXZkQ0IyWVd4cFpDNG5LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHNJQ2hsY25KdmNpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSnZjaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lIQnlaWEJoY21WVWIwWnZjbmRoY21Rb2JXVnpjMkZuWlN3Z2FYTkpibU52YldsdVp5d2djbVZ6ZFd4MEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLR2x6U1c1amIyMXBibWNnSmlCeVpYTjFiSFFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2x6VTNWaWMyTnlhWEIwYVc5dUlEMGdiV1Z6YzJGblpTNTBlWEJsSUQwOVBTQW5jM1ZpYzJOeWFXSmxKenRjYmlBZ0lDQWdJQ0FnYkdWMElHbHpSbkp2YlZKbGJXOTBaVk5OSUQwZ1gzUm9hWE11YVhOR2NtOXRVbVZ0YjNSbFUwMG9iV1Z6YzJGblpTNW1jbTl0S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6VTNWaWMyTnlhWEIwYVc5dUlDWWdhWE5HY205dFVtVnRiM1JsVTAwcElIdGNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWtiMDExZEhWaGJFRjFkR2hsYm5ScFkyRjBhVzl1S0cxbGMzTmhaMlVwTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnSUNCOUxDQW9aWEp5YjNJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSnZjaWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGOTBhR2x6TGw5cGMxUnZRM2x3YUdWeVRXOWtkV3hsS0cxbGMzTmhaMlVwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWFXUk5iMlIxYkdVdVpXNWpjbmx3ZEUxbGMzTmhaMlVvYldWemMyRm5aU2t1ZEdobGJpZ29iV1Z6YzJGblpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0I5TENBb1pYSnliM0lwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25KdmNpazdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWkc5TmRYUjFZV3hCZFhSb1pXNTBhV05oZEdsdmJpaHRaWE56WVdkbEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2RHOGdQU0J0WlhOellXZGxMblJ2TG5Od2JHbDBLQ2N2SnlrN1hHNGdJQ0FnSUNCc1pYUWdjM1ZpYzBsdVpHVjRJRDBnZEc4dWFXNWtaWGhQWmlnbmMzVmljMk55YVhCMGFXOXVKeWs3WEc0Z0lDQWdJQ0JzWlhRZ2FYTkVZWFJoVDJKcVpXTjBVM1ZpYzJOeWFYQjBhVzl1SUQwZ2MzVmljMGx1WkdWNElDRTlQU0F0TVR0Y2JpQWdJQ0FnSUd4bGRDQnBjMFp5YjIxU1pXMXZkR1ZUVFNBOUlGOTBhR2x6TG1selJuSnZiVkpsYlc5MFpWTk5LRzFsYzNOaFoyVXVabkp2YlNrN1hHNGdJQ0FnSUNCcFppQW9hWE5FWVhSaFQySnFaV04wVTNWaWMyTnlhWEIwYVc5dUlDWWdhWE5HY205dFVtVnRiM1JsVTAwcElIdGNiaUFnSUNBZ0lDQWdkRzh1Y0c5d0tDazdYRzRnSUNBZ0lDQWdJR3hsZENCa1lYUmhUMkpxWldOMFZWSk1JRDBnZEc5Yk1GMGdLeUFuTHk4bklDc2dkRzliTWwwZ0t5QW5MeWNnS3lCMGIxc3pYVHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVhV1JOYjJSMWJHVXVaRzlOZFhSMVlXeEJkWFJvWlc1MGFXTmhkR2x2Ymloa1lYUmhUMkpxWldOMFZWSk1MQ0J0WlhOellXZGxMbUp2WkhrdWMzVmljMk55YVdKbGNpa3VkR2hsYmlnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11Y25WdWRHbHRaVkpsWjJsemRISjVMbkpsWjJsemRHVnlVM1ZpYzJOeWFXSmxjaWhrWVhSaFQySnFaV04wVlZKTUxDQnRaWE56WVdkbExtSnZaSGt1YzNWaWMyTnlhV0psY2lrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTZ3BPMXh1SUNBZ0lDQWdJQ0I5TENBb1pYSnliM0lwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5YjNJcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdkbGRFMTVSVzFoYVd4ektDa2dlMXh1SUNBZ0lHeGxkQ0JwWkdWdWRHbDBhV1Z6SUQwZ2RHaHBjeTVwWkUxdlpIVnNaUzVuWlhSSlpHVnVkR2wwYVdWektDazdYRzRnSUNBZ2JHVjBJR1Z0WVdsc2N5QTlJRnRkTzF4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNCcGJpQnBaR1Z1ZEdsMGFXVnpLU0I3WEc0Z0lDQWdJQ0JsYldGcGJITXVjSFZ6YUNoblpYUlZjMlZ5UlcxaGFXeEdjbTl0VlZKTUtHbGtaVzUwYVhScFpYTmJhVjB1YVdSbGJuUnBkSGtwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdaVzFoYVd4ek8xeHVJQ0I5WEc1Y2JpQWdaMlYwVFhsSWVYQmxjblJwWlhNb0tTQjdYRzRnSUNBZ2JHVjBJR2g1Y0dWeWRHbGxjeUE5SUhSb2FYTXVjblZ1ZEdsdFpWSmxaMmx6ZEhKNUxtaDVjR1Z5ZEdsbGMweHBjM1E3WEc0Z0lDQWdiR1YwSUdoNWNHVnlkR2xsYzA1aGJXVnpJRDBnVzEwN1hHNWNiaUFnSUNCbWIzSWdLR3hsZENCcElHbHVJR2g1Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnYkdWMElHaDVjR1Z5ZEhsT1lXMWxJRDBnYUhsd1pYSjBhV1Z6VzJsZExtOWlhbVZqZEU1aGJXVTdYRzRnSUNBZ0lDQnBaaUFvYUhsd1pYSjBhV1Z6VG1GdFpYTXVhVzVrWlhoUFppaG9lWEJsY25SNVRtRnRaU2tnUFQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0FnSUdoNWNHVnlkR2xsYzA1aGJXVnpMbkIxYzJnb2FIbHdaWEowZVU1aGJXVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCb2VYQmxjblJwWlhOT1lXMWxjenRjYmlBZ2ZWeHVYRzRnSUdkbGRGTmxjblpwWTJWUWNtOTJhV1JsY2xCdmJHbGplU2h0WlhOellXZGxMQ0JwYzBsdVkyOXRhVzVuS1NCN1hHNGdJQ0FnYkdWMElIQnZiR2xqZVR0Y2JseHVJQ0FnSUdsbUlDaHBjMGx1WTI5dGFXNW5LU0I3WEc0Z0lDQWdJQ0JzWlhRZ2RHOUllWEJsY25SNUlEMGdkR2hwY3k1eWRXNTBhVzFsVW1WbmFYTjBjbmt1WjJWMFNIbHdaWEowZVU1aGJXVW9iV1Z6YzJGblpTNTBieWs3WEc0Z0lDQWdJQ0J3YjJ4cFkza2dQU0IwYUdsekxuTmxjblpwWTJWUWNtOTJhV1JsY2xCdmJHbGplVnQwYjBoNWNHVnlkSGxkTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnNaWFFnWm5KdmJVaDVjR1Z5ZEhrZ1BTQjBhR2x6TG5KMWJuUnBiV1ZTWldkcGMzUnllUzVuWlhSSWVYQmxjblI1VG1GdFpTaHRaWE56WVdkbExtWnliMjBwTzF4dUlDQWdJQ0FnY0c5c2FXTjVJRDBnZEdocGN5NXpaWEoyYVdObFVISnZkbWxrWlhKUWIyeHBZM2xiWm5KdmJVaDVjR1Z5ZEhsZE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjRzlzYVdONU8xeHVJQ0I5WEc1Y2JpQWdhWE5HY205dFVtVnRiM1JsVTAwb1puSnZiU2tnZTF4dUlDQWdJR3hsZENCemNHeHBkRVp5YjIwZ1BTQm1jbTl0TG5Od2JHbDBLQ2M2THk4bktUdGNiaUFnSUNCeVpYUjFjbTRnYzNCc2FYUkdjbTl0V3pCZElEMDlQU0FuY25WdWRHbHRaU2NnSmlZZ1puSnZiU0FoUFQwZ2RHaHBjeTV5ZFc1MGFXMWxVbVZuYVhOMGNua3VjblZ1ZEdsdFpWVlNUQ0FySUNjdmMyMG5PMXh1SUNCOVhHNWNiaUFnWDJselZHOVRaWFJKUkNodFpYTnpZV2RsS1NCN1hHNGdJQ0FnYkdWMElITmphR1Z0WVhOVWIwbG5ibTl5WlNBOUlGc25aRzl0WVdsdUxXbGtjQ2NzSUNkeWRXNTBhVzFsSnl3Z0oyUnZiV0ZwYmlkZE8xeHVJQ0FnSUd4bGRDQnpjR3hwZEVaeWIyMGdQU0FvYldWemMyRm5aUzVtY205dEtTNXpjR3hwZENnbk9pOHZKeWs3WEc0Z0lDQWdiR1YwSUdaeWIyMVRZMmhsYldFZ1BTQnpjR3hwZEVaeWIyMWJNRjA3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjMk5vWlcxaGMxUnZTV2R1YjNKbExtbHVaR1Y0VDJZb1puSnZiVk5qYUdWdFlTa2dQVDA5SUMweE8xeHVJQ0I5WEc1Y2JpQWdaMlYwVlZKTUtIVnliQ2tnZTF4dUlDQWdJR3hsZENCemNHeHBkRlZTVENBOUlIVnliQzV6Y0d4cGRDZ25MeWNwTzF4dUlDQWdJSEpsZEhWeWJpQnpjR3hwZEZWU1RGc3dYU0FySUNjdkx5Y2dLeUJ6Y0d4cGRGVlNURnN5WFNBcklDY3ZKeUFySUhOd2JHbDBWVkpNV3pOZE8xeHVJQ0I5WEc1Y2JpQWdYMmRsZEVsa1pXNTBhWFI1S0cxbGMzTmhaMlVwSUh0Y2JpQWdJQ0JwWmlBb2JXVnpjMkZuWlM1MGVYQmxJRDA5UFNBbmRYQmtZWFJsSnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhV1JOYjJSMWJHVXVaMlYwU1dSbGJuUnBkSGxQWmtoNWNHVnlkSGtvYldWemMyRm5aUzVpYjJSNUxuTnZkWEpqWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHMWxjM05oWjJVdWRIbHdaU0E5UFQwZ0ozSmxjM0J2Ym5ObEp5QW1KaUJ0WlhOellXZGxMbUp2WkhrdWMyOTFjbU5sSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1sa1RXOWtkV3hsTG1kbGRFbGtaVzUwYVhSNVQyWkllWEJsY25SNUtHMWxjM05oWjJVdVltOWtlUzV6YjNWeVkyVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hrYVhacFpHVlZVa3dvYldWemMyRm5aUzVtY205dEtTNTBlWEJsSUQwOVBTQW5hSGx3WlhKMGVTY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1sa1RXOWtkV3hsTG1kbGRFbGtaVzUwYVhSNVQyWkllWEJsY25SNUtHMWxjM05oWjJVdVpuSnZiU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWxrVFc5a2RXeGxMbWRsZEVsa1pXNTBhWFI1VDJaSWVYQmxjblI1S0hSb2FYTXVaMlYwVlZKTUtHMWxjM05oWjJVdVpuSnZiU2twTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUVsa1pXNTBhV1pwWlhNZ2RHaGxJRzFsYzNOaFoyVnpJSFJ2SUdKbElHWnZjbmRoY21SbFpDQjBieUIwYUdVZ1NXUmxiblJwZEhrZ1RXOWtkV3hsSUdadmNseHVJQ0FxSUdWdVkzSjVjSFJwYjI0dlpHVmpjbmx3ZEdsdmJpQmhibVFnYVc1MFpXZHlhWFI1SUhaaGJHbGtZWFJwYjI0dVhHNGdJQ29nUUhCaGNtRnRJSHROWlhOellXZGxmU0FnSUNCdFpYTnpZV2RsWEc0Z0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlJQ0J5WlhSMWNtNXpJSFJ5ZFdVZ2FXWWdkR2hsSUcxbGMzTmhaMlVnY21WeGRXbHlaWE1nWlc1amNubHdkR2x2Ymk5a1pXTnllWEIwYVc5dVhHNGdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNpQnBaaUJwZEhNZ2RIbHdaU0JsY1hWaGJITWdKMmhoYm1SemFHRnJaU2M3SUdaaGJITmxJRzkwYUdWeWQybHpaVnh1SUNBcUwxeHVJQ0JmYVhOVWIwTjVjR2hsY2sxdlpIVnNaU2h0WlhOellXZGxLU0I3WEc0Z0lDQWdiR1YwSUdselEzSmxZWFJsSUQwZ2JXVnpjMkZuWlM1MGVYQmxJRDA5UFNBblkzSmxZWFJsSnp0Y2JpQWdJQ0JzWlhRZ2FYTkdjbTl0U0hsd1pYSjBlU0E5SUdScGRtbGtaVlZTVENodFpYTnpZV2RsTG1aeWIyMHBMblI1Y0dVZ1BUMDlJQ2RvZVhCbGNuUjVKenRjYmlBZ0lDQnNaWFFnYVhOVWIwaDVjR1Z5ZEhrZ1BTQmthWFpwWkdWVlVrd29iV1Z6YzJGblpTNTBieWt1ZEhsd1pTQTlQVDBnSjJoNWNHVnlkSGtuTzF4dUlDQWdJR3hsZENCcGMxUnZSR0YwWVU5aWFtVmpkQ0E5SUdselJHRjBZVTlpYW1WamRGVlNUQ2h0WlhOellXZGxMblJ2S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUFvYVhORGNtVmhkR1VnSmlZZ2FYTkdjbTl0U0hsd1pYSjBlU0FtSmlCcGMxUnZTSGx3WlhKMGVTa2dmSHdnS0dselEzSmxZWFJsSUNZbUlHbHpSbkp2YlVoNWNHVnlkSGtnSmlZZ2FYTlViMFJoZEdGUFltcGxZM1FwSUh4OElHMWxjM05oWjJVdWRIbHdaU0E5UFQwZ0oyaGhibVJ6YUdGclpTY2dmSHdnYldWemMyRm5aUzUwZVhCbElEMDlQU0FuZFhCa1lYUmxKenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUVOeVpXRjBaWE1nWVNCbmNtOTFjQ0IzYVhSb0lIUm9aU0JuYVhabGJpQnVZVzFsTGx4dUlDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJR2R5YjNWd1RtRnRaVnh1SUNBcUwxeHVJQ0JmYkc5aFpGVnpaWEpRYjJ4cFkybGxjeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2JseHVJQ0FnSUNBZ1gzUm9hWE11YzNSdmNtRm5aVTFoYm1GblpYSXVaMlYwS0NkeVpYUm9hVzVyT25WelpYSlFiMnhwWTJsbGN5Y3BMblJvWlc0b0tIWmhiSFZsS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR3hsZENCd2IyeHBZMmxsY3lBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNCcFppQW9jRzlzYVdOcFpYTWdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnYVc0Z2NHOXNhV05wWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR1Z3TG1Ga1pGQnZiR2xqZVNnblZWTkZVaWNzSUdrc0lIQnZiR2xqYVdWelcybGRLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTZ3BPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdmVnh1WEc0Z0lGOW5aWFJNWVhOMFEyOXRjRzl1Wlc1MFQyWlZVa3dvZFhKc0tTQjdYRzRnSUNBZ2JHVjBJSE53YkdsMElEMGdkWEpzTG5Od2JHbDBLQ2N2SnlrN1hHNGdJQ0FnY21WMGRYSnVJSE53YkdsMFczTndiR2wwTG14bGJtZDBhQ0F0SURGZE8xeHVJQ0I5WEc1Y2JpQWdYMmRsZEZCdmJHbGphV1Z6U2xOUFRpaHdiMnhwWTJsbGN5a2dlMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dhVzRnY0c5c2FXTnBaWE1wSUh0Y2JpQWdJQ0FnSUd4bGRDQmpiMjFpYVc1cGJtZEJiR2R2Y21sMGFHMGdQU0J3YjJ4cFkybGxjMXRwWFM1amIyMWlhVzVwYm1kQmJHZHZjbWwwYUcwN1hHNGdJQ0FnSUNCcFppQW9ZMjl0WW1sdWFXNW5RV3huYjNKcGRHaHRJR2x1YzNSaGJtTmxiMllnUW14dlkydFBkbVZ5Y21sa1pYTXBJSHRjYmlBZ0lDQWdJQ0FnY0c5c2FXTnBaWE5iYVYwdVkyOXRZbWx1YVc1blFXeG5iM0pwZEdodElEMGdKMkpzYjJOclQzWmxjbkpwWkdWekp6dGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYjIxaWFXNXBibWRCYkdkdmNtbDBhRzBnYVc1emRHRnVZMlZ2WmlCQmJHeHZkMDkyWlhKeWFXUmxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIQnZiR2xqYVdWelcybGRMbU52YldKcGJtbHVaMEZzWjI5eWFYUm9iU0E5SUNkaGJHeHZkMDkyWlhKeWFXUmxjeWM3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR052YldKcGJtbHVaMEZzWjI5eWFYUm9iU0JwYm5OMFlXNWpaVzltSUVacGNuTjBRWEJ3YkdsallXSnNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjRzlzYVdOcFpYTmJhVjB1WTI5dFltbHVhVzVuUVd4bmIzSnBkR2h0SUQwZ0oyWnBjbk4wUVhCd2JHbGpZV0pzWlNjN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmJHbGphV1Z6VzJsZExtTnZiV0pwYm1sdVowRnNaMjl5YVhSb2JTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnY0c5c2FXTnBaWE03WEc0Z0lIMWNibHh1SUNCellYWmxRV04wYVhabFVHOXNhV041S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1gzUm9hWE11YzNSdmNtRm5aVTFoYm1GblpYSXVjMlYwS0NkeVpYUm9hVzVyT21GamRHbDJaVkJ2YkdsamVTY3NJREFzSUhSb2FYTXVZV04wYVhabFZYTmxjbEJ2YkdsamVTa3VkR2hsYmlnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjMkYyWlVkeWIzVndjeWdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbk4wYjNKaFoyVk5ZVzVoWjJWeUxuTmxkQ2duY21WMGFHbHVhenBuY205MWNITW5MQ0F3TENCMGFHbHpMbWR5YjNWd2N5a3VkR2hsYmlnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdjMkYyWlZCdmJHbGphV1Z6S0hOdmRYSmpaU3dnY0c5c2FXTjVMQ0JyWlhrcElIdGNiaUFnSUNCc1pYUWdjRzlzYVdOcFpYTktjMjl1TzF4dVhHNGdJQ0FnYzNkcGRHTm9JQ2h6YjNWeVkyVXBJSHRjYmlBZ0lDQWdJR05oYzJVZ0oxVlRSVkluT2x4dUlDQWdJQ0FnSUNCd2IyeHBZMmxsYzBwemIyNGdQU0JLVTA5T0xuTjBjbWx1WjJsbWVTaDBhR2x6TG5WelpYSlFiMnhwWTJsbGN5azdYRzRnSUNBZ0lDQWdJSEJ2YkdsamFXVnpTbk52YmlBOUlIUm9hWE11WDJkbGRGQnZiR2xqYVdWelNsTlBUaWhLVTA5T0xuQmhjbk5sS0hCdmJHbGphV1Z6U25OdmJpa3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBiM0poWjJWTllXNWhaMlZ5TG5ObGRDZ25jbVYwYUdsdWF6cDFjMlZ5VUc5c2FXTnBaWE1uTENBd0xDQndiMnhwWTJsbGMwcHpiMjRwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJR05oYzJVZ0oxTkZVbFpKUTBWZlVGSlBWa2xFUlZJbk9seHVJQ0FnSUNBZ0lDQnBaaUFvY0c5c2FXTjVJQ0U5UFNCMWJtUmxabWx1WldRZ0ppQnJaWGtnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ5ZG1salpWQnliM1pwWkdWeVVHOXNhV041VzJ0bGVWMGdQU0J3YjJ4cFkzazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY0c5c2FXTnBaWE5LYzI5dUlEMGdTbE5QVGk1emRISnBibWRwWm5rb2RHaHBjeTV6WlhKMmFXTmxVSEp2ZG1sa1pYSlFiMnhwWTNrcE8xeHVJQ0FnSUNBZ0lDQndiMnhwWTJsbGMwcHpiMjRnUFNCMGFHbHpMbDluWlhSUWIyeHBZMmxsYzBwVFQwNG9TbE5QVGk1d1lYSnpaU2h3YjJ4cFkybGxjMHB6YjI0cEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRHOXlZV2RsVFdGdVlXZGxjaTV6WlhRb0ozSmxkR2hwYm1zNmMzQlFiMnhwWTJsbGN5Y3NJREFzSUhCdmJHbGphV1Z6U25OdmJpazdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ2RHaHliM2NnUlhKeWIzSW9KMVZ1YTI1dmQyNGdjRzlzYVdONUlITnZkWEpqWlRvZ0p5QXJJSE52ZFhKalpTazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdaMlYwUjNKdmRYQnpUbUZ0WlhNb0tTQjdYRzRnSUNBZ2JHVjBJRzE1UjNKdmRYQnpJRDBnZEdocGN5NW5jbTkxY0hNN1hHNGdJQ0FnYkdWMElHZHliM1Z3YzA1aGJXVnpJRDBnVzEwN1hHNGdJQ0FnYVdZZ0tHMTVSM0p2ZFhCeklDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdkeWIzVndUbUZ0WlNCcGJpQnRlVWR5YjNWd2N5a2dlMXh1SUNBZ0lDQWdJQ0JuY205MWNITk9ZVzFsY3k1d2RYTm9LR2R5YjNWd1RtRnRaU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbmNtOTFjSE5PWVcxbGN6dGNiaUFnZlZ4dVhHNGdJR2RsZEVkeWIzVndLR2R5YjNWd1RtRnRaU3dnWkdWemRHbHVZWFJwYjI0cElIdGNiaUFnSUNCc1pYUWdiV1Z0WW1WeWN5QTlJRnRkTzF4dVhHNGdJQ0FnYVdZZ0tHZHliM1Z3VG1GdFpTQTlQVDBnSjNCeVpXRjFkR2h2Y21selpXUW5LU0I3WEc0Z0lDQWdJQ0JzWlhRZ1pHRjBZVTlpYW1WamRGVlNUQ0E5SUdSbGMzUnBibUYwYVc5dUxuTndiR2wwS0Njdkp5azdYRzRnSUNBZ0lDQmtZWFJoVDJKcVpXTjBWVkpNTG5CdmNDZ3BPMXh1SUNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZTVENBOUlHUmhkR0ZQWW1wbFkzUlZVa3hiTUYwZ0t5QW5MeThuSUNzZ1pHRjBZVTlpYW1WamRGVlNURnN5WFR0Y2JpQWdJQ0FnSUcxbGJXSmxjbk1nUFNCMGFHbHpMbkoxYm5ScGJXVlNaV2RwYzNSeWVTNW5aWFJRY21WQmRYUm9VM1ZpYzJOeWFXSmxjbk1vWkdGMFlVOWlhbVZqZEZWU1RDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG1keWIzVndjMXRuY205MWNFNWhiV1ZkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnYldWdFltVnljeUE5SUhSb2FYTXVaM0p2ZFhCelcyZHliM1Z3VG1GdFpWMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUcxbGJXSmxjbk03WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCRGNtVmhkR1Z6SUdFZ1ozSnZkWEFnZDJsMGFDQjBhR1VnWjJsMlpXNGdibUZ0WlM1Y2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0JuY205MWNFNWhiV1ZjYmlBZ0tpOWNiaUFnWTNKbFlYUmxSM0p2ZFhBb1ozSnZkWEJPWVcxbEtTQjdYRzRnSUNBZ2RHaHBjeTVuY205MWNITmJaM0p2ZFhCT1lXMWxYU0E5SUZ0ZE8xeHVJQ0FnSUhSb2FYTXVjMkYyWlVkeWIzVndjeWdwTzF4dUlDQjlYRzVjYmlBZ1pHVnNaWFJsUjNKdmRYQW9aM0p2ZFhCT1lXMWxLU0I3WEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11WjNKdmRYQnpXMmR5YjNWd1RtRnRaVjA3WEc0Z0lDQWdkR2hwY3k1ellYWmxSM0p2ZFhCektDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJCWkdSeklIUm9aU0JuYVhabGJpQjFjMlZ5SUdWdFlXbHNJSFJ2SUhSb1pTQm5jbTkxY0NCM2FYUm9JSFJvWlNCbmFYWmxiaUJ1WVcxbExseHVJQ0FxSUVCd1lYSmhiU0FnZTFOMGNtbHVaMzBnSUhWelpYSkZiV0ZwYkZ4dUlDQXFJRUJ3WVhKaGJTQWdlMU4wY21sdVozMGdJR2R5YjNWd1RtRnRaVnh1SUNBcUwxeHVJQ0JoWkdSVWIwZHliM1Z3S0dkeWIzVndUbUZ0WlN3Z2RYTmxja1Z0WVdsc0tTQjdYRzRnSUNBZ2JHVjBJRzE1UjNKdmRYQnpJRDBnZEdocGN5NW5jbTkxY0hNN1hHNGdJQ0FnYVdZZ0tHMTVSM0p2ZFhCelcyZHliM1Z3VG1GdFpWMGdJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2FXWWdLRzE1UjNKdmRYQnpXMmR5YjNWd1RtRnRaVjB1YVc1a1pYaFBaaWgxYzJWeVJXMWhhV3dwSUQwOVBTQXRNU2tnZTF4dUlDQWdJQ0FnSUNCdGVVZHliM1Z3YzF0bmNtOTFjRTVoYldWZExuQjFjMmdvZFhObGNrVnRZV2xzS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WVhabFIzSnZkWEJ6S0NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvY205M0lFVnljbTl5S0NkSGNtOTFjQ0JjSWljZ0t5Qm5jbTkxY0U1aGJXVWdLeUFuWENJZ1pHOWxjeUJ1YjNRZ1pYaHBjM1FoSnlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVnRiM1psUm5KdmJVZHliM1Z3S0dkeWIzVndUbUZ0WlN3Z2RYTmxja1Z0WVdsc0tTQjdYRzRnSUNBZ2JHVjBJR2R5YjNWd0lEMGdkR2hwY3k1bmNtOTFjSE5iWjNKdmRYQk9ZVzFsWFR0Y2JseHVJQ0FnSUdkeWIzVndMbk53YkdsalpTaG5jbTkxY0M1cGJtUmxlRTltS0hWelpYSkZiV0ZwYkNrc0lERXBPMXh1SUNBZ0lIUm9hWE11YzJGMlpVZHliM1Z3Y3lncE8xeHVJQ0I5WEc1Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVblZ1ZEdsdFpVTnZjbVZEZEhnN1hHNGlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNXBiWEJ2Y25RZ1VtVm5hWE4wY25sRVlYUmhUVzlrWld3Z1puSnZiU0FuTGk5U1pXZHBjM1J5ZVVSaGRHRk5iMlJsYkNjN1hHNWNiaThxS2x4dUtpQWdJRUJoZFhSb2IzSTZJRWRwYkNCRWFXRnpJQ2huYVd3dVpHbGhjMEIwWldOdWFXTnZMblZzYVhOaWIyRXVjSFFwWEc0cUlDQWdTSGx3WlhKMGVVbHVjM1JoYm1ObElFUmhkR0VnVFc5a1pXd2dkWE5sWkNCMGJ5QnRiMlJsYkNCcGJuTjBZVzVqWlhNZ2IyWWdTSGx3WlhKMGFXVnpJSEoxYm01cGJtY2dhVzRnWkdWMmFXTmxjeUJoYm1RZ2MyVnlkbVZ5Y3k1Y2Jpb3ZYRzVqYkdGemN5QkllWEJsY25SNVNXNXpkR0Z1WTJVZ1pYaDBaVzVrY3lCU1pXZHBjM1J5ZVVSaGRHRk5iMlJsYkNCN1hHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2FXUXNJSFZ5YkN3Z1pHVnpZM0pwY0hSdmNsVlNUQ3hrWlhOamNtbHdkRzl5TENCb2VYQmxjblI1VlZKTUxDQjFjMlZ5TENCbmRXbGtMQ0J5ZFc1MGFXMWxMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdjM1Z3WlhJb2FXUXNJSFZ5YkN3Z1pHVnpZM0pwY0hSdmNsVlNUQ2s3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCZmRHaHBjeTVmWkdWelkzSnBjSFJ2Y2lBOUlHUmxjMk55YVhCMGIzSTdYRzRnSUNBZ1gzUm9hWE11WDJoNWNHVnlkSGxWVWt3Z1BTQm9lWEJsY25SNVZWSk1PMXh1SUNBZ0lGOTBhR2x6TGw5MWMyVnlJRDBnZFhObGNqdGNiaUFnSUNCZmRHaHBjeTVmWjNWcFpDQTlJR2QxYVdRN1hHNGdJQ0FnWDNSb2FYTXVYM0oxYm5ScGJXVWdQU0J5ZFc1MGFXMWxPMXh1SUNBZ0lGOTBhR2x6TGw5amIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZER0Y2JpQWdmVnh1WEc0Z0lITmxkQ0IxYzJWeUtHbGtaVzUwYVhSNUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JmZEdocGN5NTFjMlZ5SUQwZ2FXUmxiblJwZEhrN1hHNGdJSDFjYmx4dUlDQm5aWFFnZFhObGNpZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZkWE5sY2p0Y2JpQWdmVnh1WEc0Z0lHZGxkQ0JvZVhCbGNuUjVWVkpNS0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdjbVYwZFhKdUlGOTBhR2x6TGw5b2VYQmxjblI1VlZKTU8xeHVJQ0I5WEc1Y2JpQWdaMlYwSUdSbGMyTnlhWEIwYjNJb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVgyUmxjMk55YVhCMGIzSTdYRzRnSUgxY2JseHVJQ0JuWlhRZ2IySnFaV04wVG1GdFpTZ3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZaR1Z6WTNKcGNIUnZjaTVmYjJKcVpXTjBUbUZ0WlR0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCSWVYQmxjblI1U1c1emRHRnVZMlU3WEc0aUxDSXZLaXBjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVUZRZ1NXNXZkbUhEcDhPamJ5QmxJRk5wYzNSbGJXRnpJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVsT1JWTkRMVWxFWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZGVlQwSkpVeUJPUlZSWFQxSkxVeUJUVEZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCR1VrRlZUa2hQUmtWU0xVZEZVMFZNVEZORFNFRkdWQ0JhVlZJZ1JrOUZVa1JGVWxWT1J5QkVSVklnUVU1SFJWZEJUa1JVUlU0Z1JrOVNVME5JVlU1SElFVXVWbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJQVWtGT1IwVWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnUkdWMWRITmphR1VnVkdWc1pXdHZiU0JCUjF4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCQmNHbDZaV1ZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVkVWRFNFNUpVME5JUlNCVlRrbFdSVkpUU1ZSQlZDQkNSVkpNU1U1Y2JpcGNiaW9nVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxJRndpVEdsalpXNXpaVndpS1R0Y2Jpb2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaU0IzYVhSb0lIUm9aU0JNYVdObGJuTmxMbHh1S2lCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaXBjYmlvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpcGNiaW9nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxDQnpiMlowZDJGeVpWeHVLaUJrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc1hHNHFJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1NCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMbHh1S2lCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aU0J6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtYRzRxSUd4cGJXbDBZWFJwYjI1eklIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVLaW92WEc1cGJYQnZjblFnUVdSa2NtVnpjMEZzYkc5allYUnBiMjRnWm5KdmJTQW5MaTR2WVd4c2IyTmhkR2x2Ymk5QlpHUnlaWE56UVd4c2IyTmhkR2x2YmljN1hHNXBiWEJ2Y25RZ1NIbHdaWEowZVVsdWMzUmhibU5sSUdaeWIyMGdKeTR2U0hsd1pYSjBlVWx1YzNSaGJtTmxKenRjYmx4dWFXMXdiM0owSUh0TlpYTnpZV2RsUm1GamRHOXllWDBnWm5KdmJTQW5jMlZ5ZG1salpTMW1jbUZ0WlhkdmNtc3ZaR2x6ZEM5TlpYTnpZV2RsUm1GamRHOXllU2M3WEc1cGJYQnZjblFnZTJScGRtbGtaVlZTVEgwZ1puSnZiU0FuTGk0dmRYUnBiSE12ZFhScGJITXVhbk1uTzF4dVhHNWpiMjV6ZENCVFZFRlVWVk1nUFNCN0lFUkZVRXhQV1VWRU9pQW5aR1Z3Ykc5NVpXUW5MQ0JRVWs5SFVrVlRVem9nSjJsdUxYQnliMmR5WlhOekp5QjlPMXh1WEc0dkttbHRjRzl5ZENCSlpHVnVkR2wwZVUxaGJtRm5aWElnWm5KdmJTQW5MaTlKWkdWdWRHbDBlVTFoYm1GblpYSW5PMXh1YVcxd2IzSjBJRVJwYzJOdmRtVnllU0JtY205dElDY3VMMFJwYzJOdmRtVnllU2M3S2k5Y2JseHVMeW9xWEc0cUlGSjFiblJwYldVZ1VtVm5hWE4wY25rZ1NXNTBaWEptWVdObFhHNHFMMXh1WTJ4aGMzTWdVbVZuYVhOMGNua2dlMXh1WEc0Z0lDOHFLbHh1SUNBcUlGUnZJR2x1YVhScFlXeHBjMlVnZEdobElGSjFiblJwYldVZ1VtVm5hWE4wY25rZ2QybDBhQ0IwYUdVZ1VuVnVkR2x0WlZWU1RDQjBhR0YwSUhkcGJHd2dZbVVnZEdobElHSmhjMmx6SUhSdklHUmxjbWwyWlNCMGFHVWdhVzUwWlhKdVlXd2djblZ1ZEdsdFpTQmhaR1J5WlhOelpYTWdkMmhsYmlCaGJHeHZZMkYwYVc1bklHRmtaSEpsYzNObGN5QjBieUJwYm5SbGNtNWhiQ0J5ZFc1MGFXMWxJR052YlhCdmJtVnVkQzRnU1c0Z1lXUmthWFJwYjI0c0lIUm9aU0JTWldkcGMzUnllU0JrYjIxaGFXNGdZbUZqYXkxbGJtUWdkRzhnWW1VZ2RYTmxaQ0IwYnlCeVpXMXZkR1ZzZVNCeVpXZHBjM1JsY2lCU2RXNTBhVzFsSUdOdmJYQnZibVZ1ZEhNc0lHbHpJR0ZzYzI4Z2NHRnpjMlZrSUdGeklHbHVjSFYwSUhCaGNtRnRaWFJsY2k1Y2JpQWdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxRblZ6ZlNBZ0lDQWdJQ0FnSUNCdGMyZGlkWE1nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiWE5uWW5WelhHNGdJQ29nUUhCaGNtRnRJQ0I3U0hsd1pYSjBlVkoxYm5ScGJXVlZVa3g5SUNBZ2NuVnVkR2x0WlZWU1RDQWdJQ0FnSUNBZ0lDQWdJSEoxYm5ScGJXVlZVa3hjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEJjSEJUWVc1a1ltOTRmU0FnSUNBZ0lDQWdJQ0JoY0hCVFlXNWtZbTk0SUNBZ0lDQWdJQ0FnSUNBZ1lYQndVMkZ1WkdKdmVGeHVJQ0FxSUVCd1lYSmhiU0FnZTNKMWJuUnBiV1ZEWVhSaGJHOW5kV1Y5SUNBZ0lISjFiblJwYldWRFlYUmhiRzluZFdVZ0lDQWdJQ0J5ZFc1MGFXMWxRMkYwWVd4dlozVmxYRzRnSUNvZ1FIQmhjbUZ0SUNCN1JHOXRZV2x1VlZKTWZTQWdJQ0FnSUNBZ0lDQWdjbVZ0YjNSbFVtVm5hWE4wY25rZ0lDQWdJQ0FnSUhKbGJXOTBaVkpsWjJsemRISjVYRzRnSUNvZ1FIQmhjbUZ0SUNCN2MzUnZjbUZuWlUxaGJtRm5aWEo5SUNBZ0lDQWdjM1J2Y21GblpVMWhibUZuWlhKY2JpQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jblZ1ZEdsdFpWVlNUQ3dnWVhCd1UyRnVaR0p2ZUN3Z2FXUmxiblJwZEhsTmIyUjFiR1VzSUhKMWJuUnBiV1ZEWVhSaGJHOW5kV1VzSUhKMWJuUnBiV1ZEWVhCaFltbHNhWFJwWlhNc0lITjBiM0poWjJWTllXNWhaMlZ5TENCeVpXMXZkR1ZTWldkcGMzUnllU2tnZTF4dVhHNGdJQ0FnTHk4Z2FHOTNJSE52YldVZ1puVnVZM1JwYjI1eklISmxZMlZwZG1VZ2RHaGxJSEJoY21GdFpYUmxjbk1nWm05eUlHVjRZVzF3YkdVNlhHNGdJQ0FnTHk4Z2JtVjNJRkpsWjJsemRISjVLQ2RvZVhCbGNuUjVMWEoxYm5ScGJXVTZMeTl6Y0RFdk1USXpKeXdnWVhCd1UyRnVaR0p2ZUN3Z2FXUk5iMlIxYkdVc0lISmxiVzkwWlZKbFoybHpkSEo1S1R0Y2JpQWdJQ0F2THlCeVpXZHBjM1J5ZVM1eVpXZHBjM1JsY2xOMGRXSW9jMkZ1WkdKdmVDd2dKM053TVNjcE8xeHVJQ0FnSUM4dklISmxaMmx6ZEhKNUxuSmxaMmx6ZEdWeVNIbHdaWEowZVNoellXNWtRbTk0TENBbmFIbHdaWEowZVMxeWRXNTBhVzFsT2k4dmMzQXhMekV5TXljcE8xeHVJQ0FnSUM4dklISmxaMmx6ZEhKNUxuSmxjMjlzZG1Vb0oyaDVjR1Z5ZEhrdGNuVnVkR2x0WlRvdkwzTndNUzh4TWpNbktUdGNibHh1SUNBZ0lHbG1JQ2doY25WdWRHbHRaVlZTVENrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkeWRXNTBhVzFsVlZKTUlHbHpJRzFwYzNOcGJtY3VKeWs3WEc0Z0lDQWdhV1lnS0NGemRHOXlZV2RsVFdGdVlXZGxjaWtnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2R6ZEc5eVlXZGxUV0Z1WVdkbGNpQnBjeUJ0YVhOemFXNW5MaWNwTzF4dUlDQWdJQzhxYVdZZ0tDRnlaVzF2ZEdWU1pXZHBjM1J5ZVNrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkeVpXMXZkR1ZTWldkcGMzUnllU0JwY3lCdGFYTnphVzVuSnlrN0tpOWNibHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCZmRHaHBjeTV5WldkcGMzUnllVlZTVENBOUlISjFiblJwYldWVlVrd2dLeUFuTDNKbFoybHpkSEo1THljN1hHNGdJQ0FnWDNSb2FYTXVZWEJ3VTJGdVpHSnZlQ0E5SUdGd2NGTmhibVJpYjNnN1hHNGdJQ0FnWDNSb2FYTXVjblZ1ZEdsdFpWVlNUQ0E5SUhKMWJuUnBiV1ZWVWt3N1hHNGdJQ0FnWDNSb2FYTXVjblZ1ZEdsdFpVTmhkR0ZzYjJkMVpTQTlJSEoxYm5ScGJXVkRZWFJoYkc5bmRXVTdYRzRnSUNBZ1gzUm9hWE11Y21WdGIzUmxVbVZuYVhOMGNua2dQU0J5WlcxdmRHVlNaV2RwYzNSeWVUdGNiaUFnSUNCZmRHaHBjeTVwWkUxdlpIVnNaU0E5SUdsa1pXNTBhWFI1VFc5a2RXeGxPMXh1SUNBZ0lGOTBhR2x6TG5OMGIzSmhaMlZOWVc1aFoyVnlJRDBnYzNSdmNtRm5aVTFoYm1GblpYSTdYRzRnSUNBZ1gzUm9hWE11Y25WdWRHbHRaVU5oY0dGaWFXeHBkR2xsY3lBOUlISjFiblJwYldWRFlYQmhZbWxzYVhScFpYTTdYRzRnSUNBZ1gzUm9hWE11YVdSbGJuUnBabWxsY2lBOUlFMWhkR2d1Wm14dmIzSW9LRTFoZEdndWNtRnVaRzl0S0NrZ0tpQXhNREF3TUNrZ0t5QXhLVHRjYmx4dUlDQWdJQzh2SUhSb1pTQmxlSEJwY21WeklHbHVJRE0yTURBc0lISmxjSEpsYzJWdWRITWdNU0JvYjNWeVhHNGdJQ0FnTHk5MGFHVWdaWGh3YVhKbGN5QnBjeUJwYmlCelpXTnZibVJ6TENCMWJtbDBJRzltSUcxbFlYTjFjbVVnY21WalpXbDJaV1FnWW5rZ2RHaGxJR1J2YldGcGJpQnlaV2RwYzNSeWVWeHVJQ0FnSUY5MGFHbHpMbVY0Y0dseVpYTlVhVzFsSUQwZ016WXdNRHRjYmx4dUlDQWdJRjkwYUdsekxtaDVjR1Z5ZEdsbGMweHBjM1JVYjFKbGJXOTJaU0E5SUh0OU8xeHVJQ0FnSUY5MGFHbHpMbWg1Y0dWeWRHbGxjMHhwYzNRZ1BTQmJYVHRjYmlBZ0lDQmZkR2hwY3k1d2NtOTBiM04wZFdKelRHbHpkQ0E5SUh0OU8xeHVJQ0FnSUY5MGFHbHpMbWxrY0ZCeWIzaDVUR2x6ZENBOUlIdDlPMXh1SUNBZ0lGOTBhR2x6TG1SaGRHRlBZbXBsWTNSTWFYTjBJRDBnZTMwN1hHNGdJQ0FnWDNSb2FYTXVjM1ZpYzJOeWFXSmxaRVJoZEdGUFltcGxZM1JNYVhOMElEMGdlMzA3WEc0Z0lDQWdYM1JvYVhNdWMyRnVaR0p2ZUdWelRHbHpkQ0E5SUh0ellXNWtZbTk0T2lCN2ZTd2dZWEJ3VTJGdVpHSnZlRG9nZTMwZ2ZUdGNiaUFnSUNCZmRHaHBjeTV3WlhCTWFYTjBJRDBnZTMwN1hHNWNiaUFnSUNCZmRHaHBjeTVmWkc5dFlXbHVJRDBnWkdsMmFXUmxWVkpNS0Y5MGFHbHpMbkpsWjJsemRISjVWVkpNS1M1a2IyMWhhVzQ3WEc0Z0lDQWdYM1JvYVhNdWMyRnVaR0p2ZUdWelRHbHpkQzVoY0hCVFlXNWtZbTk0VzNKMWJuUnBiV1ZWVWt4ZElEMGdZWEJ3VTJGdVpHSnZlRHRjYmlBZ0lDQnNaWFFnYlhOblJtRmpkRzl5ZVNBOUlHNWxkeUJOWlhOellXZGxSbUZqZEc5eWVTZ25abUZzYzJVbkxDQW5lMzBuS1R0Y2JpQWdJQ0JmZEdocGN5NXRaWE56WVdkbFJtRmpkRzl5ZVNBOUlHMXpaMFpoWTNSdmNuazdYRzRnSUgxY2JseHVJQ0J6WlhRZ2JHOWhaR1Z5S0d4dllXUmxjaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ1gzUm9hWE11WDJ4dllXUmxjaUE5SUd4dllXUmxjanRjYmlBZ2ZWeHVYRzRnSUdkbGRDQnNiMkZrWlhJb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVgyeHZZV1JsY2p0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlISmxkSFZ5YmlCMGFHVWdiV1Z6YzJGblpVSjFjeUJwYmlCMGFHbHpJRkpsWjJsemRISjVYRzRnSUNvZ1FIQmhjbUZ0SUh0TlpYTnpZV2RsUW5WemZTQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpVSjFjMXh1SUNBcUwxeHVJQ0JuWlhRZ2JXVnpjMkZuWlVKMWN5Z3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NWZiV1Z6YzJGblpVSjFjenRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZObGRDQjBhR1VnYldWemMyRm5aVUoxY3lCcGJpQjBhR2x6SUZKbFoybHpkSEo1WEc0Z0lDb2dRSEJoY21GdElIdE5aWE56WVdkbFFuVnpmU0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVUoxYzF4dUlDQXFMMXh1SUNCelpYUWdiV1Z6YzJGblpVSjFjeWh0WlhOellXZGxRblZ6S1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5QTlJRzFsYzNOaFoyVkNkWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTVoWkdSTWFYTjBaVzVsY2loZmRHaHBjeTV5WldkcGMzUnllVlZTVEN3Z1puVnVZM1JwYjI0b2JYTm5LU0I3WEc1Y2JpQWdJQ0FnSUd4bGRDQjFjMlZ5VlhKc0lEMGdYM1JvYVhNdVgyZGxkRWxrWlc1MGFYUjVRWE56YjJOcFlYUmxaQ2h0YzJjdVltOWtlUzV5WlhOdmRYSmpaU3dnYlhObkxtSnZaSGt1WTNKcGRHVnlhV0VwTzF4dVhHNGdJQ0FnSUNCc1pYUWdjbVZ3YkhrZ1BTQjdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnZEc4NklHMXpaeTVtY205dExDQm1jbTl0T2lCdGMyY3VkRzhzSUdKdlpIazZJSHR5WlhOdmRYSmpaVG9nZFhObGNsVnliSDE5TzF4dUlDQWdJQ0FnY21Wd2JIa3VZbTlrZVM1amIyUmxJRDBnS0hWelpYSlZjbXdwSUQ4Z01qQXdJRG9nTkRBME8xeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h5WlhCc2VTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQXZMeUJoYkhOdklITmxkQ0IxY0NCdFpYTnpZV2RsUW5WeklHbHVJSFJvWlNCSlpHVnVkR2wwZVUxdlpIVnNaU0JqYjIxd2IyNWxiblJjYmlBZ0lDQXZMeUJVVDBSUElISmxaR1ZtYVc1bElHRWdZbVYwZEdWeUlIZGhlU0IwYnlCaFpHUWdkR2hsSUcxbGMzTmhaMlZDZFhNZ2FXNGdkR2hsSUVsa1RXOWtkV3hsWEc0Z0lDQWdYM1JvYVhNdWFXUk5iMlIxYkdVdWJXVnpjMkZuWlVKMWN5QTlJRzFsYzNOaFoyVkNkWE03WEc1Y2JpQWdJQ0F2THlCSmJuTjBZV3hzSUVGa1pISmxjM05CYkd4dlkyRjBhVzl1WEc0Z0lDQWdiR1YwSUdGa1pISmxjM05CYkd4dlkyRjBhVzl1SUQwZ2JtVjNJRUZrWkhKbGMzTkJiR3h2WTJGMGFXOXVLRjkwYUdsekxuSmxaMmx6ZEhKNVZWSk1MQ0J0WlhOellXZGxRblZ6TENCZmRHaHBjeWs3WEc0Z0lDQWdYM1JvYVhNdVlXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0Z1BTQmhaR1J5WlhOelFXeHNiMk5oZEdsdmJqdGNibHh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nWm5WdVkzUnBiMjRnZEc4Z2NtVnhkV1Z6ZENCaFltOTFkQ0IxYzJWeWN5QnlaV2RwYzNSbGNtVmtJR2x1SUdSdmJXRnBiaUJ5WldkcGMzUnllU3dnWVc1a1hHNGdJQ29nY21WMGRYSnVJSFJvWlNCc1lYTjBJR2g1Y0dWeWRIa2dhVzV6ZEdGdVkyVWdjbVZuYVhOMFpYSmxaQ0JpZVNCMGFHVWdkWE5sY2k1Y2JpQWdLaUJBY0dGeVlXMGdJSHRsYldGcGJIMGdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdFlXbHNYRzRnSUNvZ1FIQmhjbUZ0SUNCN1pHOXRZV2x1ZlNBZ0lDQWdJQ0FnSUNBZ0lHUnZiV0ZwYmlBb1QzQjBhVzl1WVd3cFhHNGdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnSUNBZ0lDQWdJQ0FnVUhKdmJXbHpaVnh1SUNBcUwxeHVYRzRnSUM4dklGUlBSRTg2SUdsdGNHeGxiV1Z1ZENCaElHTmhZMmhsSUhONWMzUmxiVnh1SUNCa2FYTmpiM1psY2toNWNHVnlkSGxRWlhKVmMyVnlLR1Z0WVdsc0xDQmtiMjFoYVc0cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCaFkzUnBkbVZFYjIxaGFXNDdYRzVjYmlBZ0lDQnBaaUFvSVdSdmJXRnBiaWtnZTF4dUlDQWdJQ0FnWVdOMGFYWmxSRzl0WVdsdUlEMGdYM1JvYVhNdVgyUnZiV0ZwYmp0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdZV04wYVhabFJHOXRZV2x1SUQwZ1pHOXRZV2x1TzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCcFpHVnVkR2wwZVZWU1RDQTlJQ2QxYzJWeU9pOHZKeUFySUdWdFlXbHNMbk4xWW5OMGNtbHVaeWhsYldGcGJDNXBibVJsZUU5bUtDZEFKeWtnS3lBeExDQmxiV0ZwYkM1c1pXNW5kR2dwSUNzZ0p5OG5JQ3NnWlcxaGFXd3VjM1ZpYzNSeWFXNW5LREFzSUdWdFlXbHNMbWx1WkdWNFQyWW9KMEFuS1NrN1hHNWNiaUFnSUNBdkx5QnRaWE56WVdkbElIUnZJSEYxWlhKNUlHUnZiV0ZwYmlCeVpXZHBjM1J5ZVN3Z1lYTnJhVzVuSUdadmNpQmhJSFZ6WlhJZ2FIbHdaWEowZVM1Y2JpQWdJQ0JzWlhRZ2JXVnpjMkZuWlNBOUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUNkeVpXRmtKeXdnWm5KdmJUb2dYM1JvYVhNdWNtVm5hWE4wY25sVlVrd3NJSFJ2T2lBblpHOXRZV2x1T2k4dmNtVm5hWE4wY25rdUp5QXJJR0ZqZEdsMlpVUnZiV0ZwYmlBcklDY3ZKeXdnWW05a2VUb2dleUJ5WlhOdmRYSmpaVG9nYVdSbGJuUnBkSGxWVWt4OVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZE5aWE56WVdkbE9pQW5MQ0J0WlhOellXZGxMQ0JoWTNScGRtVkViMjFoYVc0c0lHbGtaVzUwYVhSNVZWSk1LVHRjYmx4dUlDQWdJQzh2WTI5dWMyOXNaUzVzYjJjb0oyMWxjM05oWjJVZ1VrVkJSQ2NzSUcxbGMzTmhaMlVwTzF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmx4dUlDQWdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkdFpYTnpZV2RsSUhKbGNHeDVKeXdnY21Wd2JIa3BPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQm9lWEJsY25SNU8xeHVJQ0FnSUNBZ0lDQnNaWFFnYlc5emRGSmxZMlZ1ZER0Y2JpQWdJQ0FnSUNBZ2JHVjBJR3hoYzNSSWVYQmxjblI1TzF4dUlDQWdJQ0FnSUNCc1pYUWdkbUZzZFdVZ1BTQnlaWEJzZVM1aWIyUjVMblpoYkhWbE8xeHVYRzRnSUNBZ0lDQWdJR1p2Y2lBb2FIbHdaWEowZVNCcGJpQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXeDFaVnRvZVhCbGNuUjVYUzVzWVhOMFRXOWthV1pwWldRZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cxdmMzUlNaV05sYm5RZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J0YjNOMFVtVmpaVzUwSUQwZ2JtVjNJRVJoZEdVb2RtRnNkV1ZiYUhsd1pYSjBlVjB1YkdGemRFMXZaR2xtYVdWa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHRnpkRWg1Y0dWeWRIa2dQU0JvZVhCbGNuUjVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHaDVjR1Z5ZEhsRVlYUmxJRDBnYm1WM0lFUmhkR1VvZG1Gc2RXVmJhSGx3WlhKMGVWMHViR0Z6ZEUxdlpHbG1hV1ZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMXZjM1JTWldObGJuUXVaMlYwVkdsdFpTZ3BJRHdnYUhsd1pYSjBlVVJoZEdVdVoyVjBWR2x0WlNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzl6ZEZKbFkyVnVkQ0E5SUdoNWNHVnlkSGxFWVhSbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGhjM1JJZVhCbGNuUjVJRDBnYUhsd1pYSjBlVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RNWVhOMElFaDVjR1Z5ZEhrNklDY3NJR3hoYzNSSWVYQmxjblI1TENCdGIzTjBVbVZqWlc1MEtUdGNibHh1SUNBZ0lDQWdJQ0JzWlhRZ2FIbHdaWEowZVZWU1RDQTlJR3hoYzNSSWVYQmxjblI1TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hvZVhCbGNuUjVWVkpNSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WcVpXTjBLQ2RWYzJWeUlFaDVjR1Z5ZEhrZ2JtOTBJR1p2ZFc1a0p5azdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCc1pYUWdhV1JRWVdOcllXZGxJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lHbGtPaUJsYldGcGJDeGNiaUFnSUNBZ0lDQWdJQ0JrWlhOamNtbHdkRzl5T2lCMllXeDFaVnRvZVhCbGNuUjVWVkpNWFM1a1pYTmpjbWx3ZEc5eUxGeHVJQ0FnSUNBZ0lDQWdJR2g1Y0dWeWRIbFZVa3c2SUdoNWNHVnlkSGxWVWt4Y2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblBUMDlQaUJvZVhCbGNuUjVSR2x6WTI5MlpYSjVJRzFsYzNOaFoyVkNkVzVrYkdVNklDY3NJR2xrVUdGamEyRm5aU2s3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvYVdSUVlXTnJZV2RsS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYMmRsZEVsa1pXNTBhWFI1UVhOemIyTnBZWFJsWkNoMGVYQmxMQ0JvZVhCbGNuUjVWVkpNS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR1p2Y2lBb2JHVjBJR2g1Y0dWeWRIa2dhVzRnWDNSb2FYTXVhSGx3WlhKMGFXVnpUR2x6ZENrZ2UxeHVJQ0FnSUNBZ2JHVjBJSFpoYkhWbElEMGdYM1JvYVhNdWFIbHdaWEowYVdWelRHbHpkRnRvZVhCbGNuUjVYVHRjYmlBZ0lDQWdJR2xtSUNoMllXeDFaUzVmYUhsd1pYSjBlVlZTVENBOVBUMGdhSGx3WlhKMGVWVlNUQ2tnZTF4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0hSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCallYTmxJQ2QxYzJWeWJtRnRaU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1V1WDNWelpYSXVkWE5sY201aGJXVTdYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQW5ZMjRuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTGw5MWMyVnlMbU51TzF4dUlDQWdJQ0FnSUNBZ0lHTmhjMlVnSjJ4dlkyRnNaU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1V1WDNWelpYSXViRzlqWVd4bE8xeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyRjJZWFJoY2ljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkbUZzZFdVdVgzVnpaWEl1WVhaaGRHRnlPMXh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM1Z6WlhKVlVrd25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhaaGJIVmxMbDkxYzJWeUxuVnpaWEpWVWt3N1hHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbkxpYzZYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZG1Gc2RXVXVYM1Z6WlhJN1hHNGdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFuSnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdKeWM3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCeGRXVnllU0IwYUdVZ1pHOXRZV2x1SUhKbFoybHpkSEo1SUdadmNpQnBibVp2Y20xaGRHbHZiaUJtY205dElHRWdaR0YwWVU5aWFtVmpkQ0JWVWt4Y2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnZFhKc0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVU5aWFtVmpkQ0JWVWt4Y2JpQWdLaUJBY21WMGRYSnVJSHRLVTA5T2ZTQWdJQ0FnWkdGMFlVOWlhbVZqZENBZ0lDQWdaR0YwWVNCdlltcGxZM1JjYmlBZ0tpOWNiaUFnWkdselkyOTJaWEpFWVhSaFQySnFaV04wVUdWeVZWSk1LSFZ5YkN3Z1pHOXRZV2x1S1NCN1hHNWNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCc1pYUWdZV04wYVhabFJHOXRZV2x1TzF4dVhHNGdJQ0FnSUNCcFppQW9JV1J2YldGcGJpa2dlMXh1SUNBZ0lDQWdJQ0JoWTNScGRtVkViMjFoYVc0Z1BTQmZkR2hwY3k1ZlpHOXRZV2x1TzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWVdOMGFYWmxSRzl0WVdsdUlEMGdaRzl0WVdsdU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnNaWFFnYlhObklEMGdlMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQW5jbVZoWkNjc0lHWnliMjA2SUY5MGFHbHpMbkpsWjJsemRISjVWVkpNTENCMGJ6b2dKMlJ2YldGcGJqb3ZMM0psWjJsemRISjVMaWNnS3lCaFkzUnBkbVZFYjIxaGFXNGdLeUFuTHljc0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklIVnliQ0I5WEc0Z0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRjMmNzSUNoeVpYQnNlU2tnUFQ0Z2UxeHVYRzRnSUNBZ0lDQWdJR3hsZENCa1lYUmhUMkpxWldOMElEMGdjbVZ3YkhrdVltOWtlUzUyWVd4MVpUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZVTlpYW1WamRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvWkdGMFlVOWlhbVZqZENrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZEVZWFJoVDJKcVpXTjBJRzV2ZENCbWIzVnVaQ2NwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRlJvYVhNZ1puVnVZM1JwYjI0Z2FYTWdkWE5sWkNCMGJ5QnlaWFIxY200Z2RHaGxJSE5oYm1SaWIzZ2dhVzV6ZEdGdVkyVWdkMmhsY21VZ2RHaGxJRUZ3Y0d4cFkyRjBhVzl1SUdseklHVjRaV04xZEdsdVp5NGdTWFFnYVhNZ1lYTnpkVzFsWkNCMGFHVnlaU0JwY3lCcWRYTjBJRzl1WlNCQmNIQWdjR1Z5SUZKMWJuUnBiV1VnYVc1emRHRnVZMlV1WEc0Z0lDb3ZYRzRnSUdkbGRFRndjRk5oYm1SaWIzZ29LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCeVpYUjFjbTRnWDNSb2FYTXVZWEJ3VTJGdVpHSnZlRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZSb2FYTWdablZ1WTNScGIyNGdjbVYwZFhKdWN5QjBhR1VnZFhObGNpQmhjM052WTJsaGRHVmtJSFJ2SUhSb1pTQm9lWEJsY25SNUlGVlNURnh1SUNBcUlFQndZWEpoYlNBZ0lDQjdVM1J5YVc1bmZTQWdJQ0JvZVhCbGNuUjVWVkpNSUNBZ0lDQWdhSGx3WlhKMGVTQlZVa3hjYmlBZ0tpQkFjbVYwZFhKdUlDQWdlMU4wY21sdVozMGdJQ0FnZFhObGNsVlNUQ0FnSUNBZ0lDQWdJSFZ6WlhJZ1ZWSk1YRzRnSUNvdlhHNGdJR2RsZEVoNWNHVnlkSGxQZDI1bGNpaG9lWEJsY25SNVZWSk1LU0I3WEc1Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0IxYzJWeVZWSk1PMXh1WEc0Z0lDQWdabTl5SUNoc1pYUWdhVzVrWlhnZ2FXNGdYM1JvYVhNdWFIbHdaWEowYVdWelRHbHpkQ2tnZTF4dUlDQWdJQ0FnYkdWMElHaDVjR1Z5ZEhrZ1BTQmZkR2hwY3k1b2VYQmxjblJwWlhOTWFYTjBXMmx1WkdWNFhUdGNiaUFnSUNBZ0lHbG1JQ2hvZVhCbGNuUjVMbWg1Y0dWeWRIbFZVa3dnUFQwOUlHaDVjR1Z5ZEhsVlVrd3BJSHRjYmlBZ0lDQWdJQ0FnZFhObGNsVlNUQ0E5SUdoNWNHVnlkSGt1ZFhObGNpNTFjMlZ5VlZKTU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkWE5sY2xWU1REdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJSEpsZEhWeWJuTWdkR2hsSUdoNWNHVnlkSGtnVG1GdFpTQm1jbTl0SUdFZ1oybDJaVzRnZFhKc0xpQlVhR2x6SUhWeWJDQmpiM1ZzWkNCaVpTQm1jbTl0SUdFZ1pHRjBZVTlpYW1WamRDQnZjaUJvZVhCbGNuUjVYRzRnSUNvZ1FIQmhjbUZ0SUNBZ0lIdFRkSEpwYm1kOUlDQWdJSFZ5YkNBZ0lDQWdJR2g1Y0dWeWRIa2diM0lnWkdGMFlVOWlhbVZqZENCVlVreGNiaUFnS2lCQWNtVjBkWEp1SUNBZ2UxTjBjbWx1WjMwZ0lDQWdhSGx3WlhKMGVVNWhiV1VnSUNBZ0lHaDVjR1Z5ZEhrZ1RtRnRaVnh1SUNBcUwxeHVJQ0JuWlhSSWVYQmxjblI1VG1GdFpTaDFjbXdwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdselNIbHdaWEowZVZWU1RDQTlJR1JwZG1sa1pWVlNUQ2gxY213cExuUjVjR1VnUFQwOUlDZG9lWEJsY25SNUp6dGNibHh1SUNBZ0lDOHZkbUZzZFdVZ2RHOGdZbVVnY21WMGRYSnVaV1FnYVc0Z2RHaGxJR1Z1WkZ4dUlDQWdJR3hsZENCb2VYQmxjblI1VG1GdFpUdGNibHh1SUNBZ0lDOHZhV1lnYVhNZ2JtOTBJR0Z1SUdoNWNHVnlkSGtzSUdOb1pXTnJJR2xtSUdseklHRWdaR0YwWVU5aWFtVmpkQ0JoYm1RZ2IySjBZV2x1SUdocGN5QnlaWEJ2Y25SbGNseHVJQ0FnSUd4bGRDQm9lWEJsY25SNVZWSk1JRDBnS0dselNIbHdaWEowZVZWU1RDa2dQeUJvZVhCbGNuUjVWVkpNSUQwZ2RYSnNJRG9nWDNSb2FYTXVaMlYwVW1Wd2IzSjBaWEpWVWt4VGVXNWphRzl1YjNWektIVnliQ2s3WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwYm1SbGVDQnBiaUJmZEdocGN5NW9lWEJsY25ScFpYTk1hWE4wS1NCN1hHNGdJQ0FnSUNCc1pYUWdhSGx3WlhKMGVTQTlJRjkwYUdsekxtaDVjR1Z5ZEdsbGMweHBjM1JiYVc1a1pYaGRPMXh1SUNBZ0lDQWdhV1lnS0doNWNHVnlkSGt1YUhsd1pYSjBlVlZTVENBOVBUMGdhSGx3WlhKMGVWVlNUQ2tnZTF4dUlDQWdJQ0FnSUNCb2VYQmxjblI1VG1GdFpTQTlJR2g1Y0dWeWRIa3ViMkpxWldOMFRtRnRaVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJvZVhCbGNuUjVUbUZ0WlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlHWjFibU4wYVc5dUlIUnZJSEpsZEhWeWJpQjBhR1VnY21Wd2IzSjBaWEpWVWt3Z1lYTnpiMk5wWVhSbFpDQjNhWFJvSUhSb1pTQmtZWFJoYjJKcVpXTjBJRlZTVEZ4dUlDQXFJRUJ3WVhKaGJTQWdJQ0I3VTNSeWFXNW5mU0FnSUNBZ1pHRjBZVTlpYW1WamRGVlNUQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1YRzRnSUNvZ1FISmxkSFZ5YmlBZ0lIdFRkSEpwYm1kOUlDQWdJQ0J5WlhCdmNuUmxjbFZTVENBZ0lDQWdJSEpsY0c5eWRHVnlWVkpNWEc0Z0lDb3ZYRzRnSUdkbGRGSmxjRzl5ZEdWeVZWSk1LR1JoZEdGUFltcGxZM1JWVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHUmhkR0ZQWW1wbFkzUWdQU0JmZEdocGN5NWtZWFJoVDJKcVpXTjBUR2x6ZEZ0a1lYUmhUMkpxWldOMFZWSk1YVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQWdJR2xtSUNoa1lYUmhUMkpxWldOMEtTQjdYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9aR0YwWVU5aWFtVmpkQzV5WlhCdmNuUmxjaWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9KMDV2SUhKbGNHOXlkR1Z5SUhkaGN5Qm1iM1Z1WkNjcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dablZ1WTNScGIyNGdkRzhnY21WMGRYSnVJSFJvWlNCeVpYQnZjblJsY2xWU1RDQmhjM052WTJsaGRHVmtJSGRwZEdnZ2RHaGxJR1JoZEdGdlltcGxZM1FnVlZKTUxpQnVieUJ3Y205dGFYTmxJSEpsZEhWeWJtVmtYRzRnSUNvZ1FIQmhjbUZ0SUNBZ0lIdFRkSEpwYm1kOUlDQWdJQ0JrWVhSaFQySnFaV04wVlZKTUlDQWdJR1JoZEdGUFltcGxZM1JWVWt4Y2JpQWdLaUJBY21WMGRYSnVJQ0FnZTFOMGNtbHVaMzBnSUNBZ0lISmxjRzl5ZEdWeVZWSk1JQ0FnSUNBZ2NtVndiM0owWlhKVlVreGNiaUFnS2k5Y2JpQWdaMlYwVW1Wd2IzSjBaWEpWVWt4VGVXNWphRzl1YjNWektHUmhkR0ZQWW1wbFkzUlZVa3dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdiR1YwSUdSaGRHRlBZbXBsWTNRZ1BTQmZkR2hwY3k1a1lYUmhUMkpxWldOMFRHbHpkRnRrWVhSaFQySnFaV04wVlZKTVhUdGNibHh1SUNBZ0lISmxkSFZ5YmlBb1pHRjBZVTlpYW1WamRDa2dQeUJrWVhSaFQySnFaV04wTG5KbGNHOXlkR1Z5SURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2djbVYwZFhKdWN5QjBhR1VnYUhsd1pYSjBlU0JWVWt3Z2RHaGhkQ0J6ZFdKelkzSnBZbVZrSUhSb1pTQmtZWFJoVDJKcVpXTjBYRzRnSUNvZ1FIQmhjbUZ0SUNBZ0lIdFRkSEpwYm1kOUlDQWdJQ0IxY213Z0lDQWdJQ0FnSUNBZ0lDQjFjbXdnWm05eWJXRjBYRzRnSUNvZ1FISmxkSFZ5YmlBZ0lIdFRkSEpwYm1kOUlDQWdJRWg1Y0dWeWRIa2dWVkpNSUhOMVluTmpjbWxpWldRZ2RHOGdkR2hsSUZWU1RGeHVJQ0FxTDF4dUlDQm5aWFJFWVhSaFQySnFaV04wVTNWaWMyTnlhV0psY2toNWNHVnlkSGtvZFhKc0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJmZEdocGN5NXpkV0p6WTNKcFltVmtSR0YwWVU5aWFtVmpkRXhwYzNSYmRYSnNYVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUhKbFoybHpkR1Z5SUdFZ1pHVnphWEpsWkNCa1lYUmhUMkpxWldOMElIUnZJSE4xWW5OamNtbGlaVnh1SUNBcUlFQndZWEpoYlNBZ0lDQjdVM1J5YVc1bmZTQWdJQ0JrWVhSaFQySnFaV04wVlZKTUlDQWdJQ0FnWkdGMFlVOWlhbVZqZENCVlVreGNiaUFnS2k5Y2JpQWdjbVZuYVhOMFpYSlRkV0p6WTNKcFltVmtSR0YwWVU5aWFtVmpkQ2hrWVhSaFQySnFaV04wVlZKTUxDQm9lWEJsY25SNVZWSk1LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCcFppQW9YM1JvYVhNdWMzVmljMk55YVdKbFpFUmhkR0ZQWW1wbFkzUk1hWE4wVzJSaGRHRlBZbXBsWTNSVlVreGRJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lGOTBhR2x6TG5OMVluTmpjbWxpWldSRVlYUmhUMkpxWldOMFRHbHpkRnRrWVhSaFQySnFaV04wVlZKTVhTQTlJR2g1Y0dWeWRIbFZVa3c3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nUm5WdVkzUnBiMjRnZEc4Z2NtVjBkWEp1SUhSb1pTQnNhWE4wSUc5bUlIQnlaU0JoZFhSb2IzSnBjMlZrSUhWelpYSnpJSEpsWTJWcGRtVmtJR2x1SUhSb1pTQmpjbVZoZEdsdmJpQnZaaUJoSUdSaGRHRWdiMkpxWldOMFhHNGdJQ29nUUhCaGNtRnRJQ0FnSUh0VGRISnBibWQ5SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVTlpYW1WamRGVlNUQ0FnSUNCa1lYUmhUMkpxWldOMFZWSk1YRzRnSUNvZ1FISmxkSFZ5YmlBZ0lIdEJjbkpoZVR4VGRISnBibWMrZlNBZ0lDQWdjSEpsUVhWMGFDQWdJQ0FnSUNBZ0lFeHBjM1FnYjJZZ2NISmxJR0YxZEdodmNtbHpaV1FnZFhObGNuTmNiaUFnS2k5Y2JpQWdaMlYwVUhKbFFYVjBhRk4xWW5OamNtbGlaWEp6S0dSaGRHRlBZbXBsWTNSVlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQmtZWFJoVDJKcVpXTjBJRDBnWDNSb2FYTXVaR0YwWVU5aWFtVmpkRXhwYzNSYlpHRjBZVTlpYW1WamRGVlNURjA3WEc0Z0lDQWdiR1YwSUhCeVpVRjFkR2dnUFNCYlhUdGNibHh1SUNBZ0lHbG1JQ2hrWVhSaFQySnFaV04wS1NCN1hHNGdJQ0FnSUNCd2NtVkJkWFJvSUQwZ1pHRjBZVTlpYW1WamRDNXdjbVZCZFhSb08xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjSEpsUVhWMGFEdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJSE5sYm1RZ2NtVnhkV1Z6ZEhNZ2RHOGdkVzV5WldkcGMzUmxjaUJoYkd3Z2FIbHdaWEowYVdWeklISmxaMmx6ZEdWeVpXUWdhVzRnWkc5dFlXbHVJSEpsWjJsemRISjVYRzRnSUNvZ1FISmxkSFZ5YmlBZ0lIdFFjbTl0YVhObGZTQWdJQ0FnY21WMGRYSnVJR0VnY0hKdmJXbHpaU0JwWmlCMGFHVWdjbVZ6ZFd4MElHOW1JSFZ1Y21WbmFYTjBjbUYwYVc5dUlHRnNiQ0JvZVhCbGNuUnBaWE5jYmlBZ0tpOWNiaUFnZFc1eVpXZHBjM1JsY2tGc2JFaDVjR1Z5ZEdsbGN5Z3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2JHVjBJSFZ1Y21WbmFYTjBaWEpTWlhOMWJIUnpJRDBnVzEwN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN4eVpXcGxZM1FwSUh0Y2JseHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FXNWtaWGdnYVc0Z1gzUm9hWE11YUhsd1pYSjBhV1Z6VEdsemRDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FIbHdaWEowZVNBOUlGOTBhR2x6TG1oNWNHVnlkR2xsYzB4cGMzUmJhVzVrWlhoZE8xeHVJQ0FnSUNBZ0lDQnNaWFFnY21WemRXeDBJRDBnWDNSb2FYTXVkVzV5WldkcGMzUmxja2g1Y0dWeWRIbEpibk4wWVc1alpTaG9lWEJsY25SNUxuVnpaWEl1ZFhObGNsVlNUQ3dnYUhsd1pYSjBlUzVvZVhCbGNuUjVWVkpNS1R0Y2JpQWdJQ0FnSUNBZ2RXNXlaV2RwYzNSbGNsSmxjM1ZzZEhNdWNIVnphQ2h5WlhOMWJIUXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JRY205dGFYTmxMbUZzYkNoMWJuSmxaMmx6ZEdWeVVtVnpkV3gwY3lrdWRHaGxiaWdvS1NBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2duYzNWalkyVnpjMloxYkd4NUlIVnVjbVZuYVhOMFpYSmxaQ0JoYkd3Z2FIbHdaWEowYVdWekp5azdYRzRnSUNBZ0lDQjlMQ0JsY25KdmNpQTlQaUI3SUhKbGFtVmpkQ2hsY25KdmNpazdmU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lBZ1puVnVZM1JwYjI0Z2RHOGdkVzV5WldkcGMzUmxjaUJoYmlCb2VYQmxjblI1U1c1emRHRnVZMlVnYVc0Z2RHaGxJRVJ2YldGcGJpQlNaV2RwYzNSeWVWeHVJQ0FxSUNCQWNHRnlZVzBnSUNCN1UzUnlhVzVuZlNBZ0lDQWdJSFZ6WlhJZ0lDQWdJQ0FnSUhWelpYSWdkWEpzWEc0Z0lDb2dJRUJ3WVhKaGJTQWdJSHRUZEhKcGJtZDlJQ0FnSUNBZ2FIbHdaWEowZVVsdWMzUmhibU5sSUNBZ1NIbHdaWEowZVVsdWMyNTBZVzVqWlNCMWNteGNiaUFnS2x4dUlDQXFMMXh1SUNCMWJuSmxaMmx6ZEdWeVNIbHdaWEowZVVsdWMzUmhibU5sS0hWelpYSXNJR2g1Y0dWeWRIbEpibk4wWVc1alpTa2dlMXh1SUNBZ0lDOHZWRTlFVHlCM2IzSnJhVzVuSUdKMWRDQjBhR1VnZFhObGNseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JzWlhRZ2JXVnpjMkZuWlNBOUlIc2dkSGx3WlRvZ0oyUmxiR1YwWlNjc0lHWnliMjA2SUY5MGFHbHpMbkpsWjJsemRISjVWVkpNTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiem9nSjJSdmJXRnBiam92TDNKbFoybHpkSEo1TGljZ0t5QmZkR2hwY3k1ZlpHOXRZV2x1SUNzZ0p5OG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3SUhaaGJIVmxPaUI3ZFhObGNqb2dkWE5sY2l3Z2RYSnNPaUJvZVhCbGNuUjVTVzV6ZEdGdVkyVWdmWDE5TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE11Y0c5emRFMWxjM05oWjJVb2JXVnpjMkZuWlN3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduZFc1eVpXZHBjM1JsY2lCb2VYQmxjblI1SUZKbGNHeDVKeXdnY21Wd2JIa3BPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nSUdaMWJtTjBhVzl1SUhSdklHUmxiR1YwWlNCaGJpQmtZWFJoVDJKcVpXTjBTVzV6ZEdGdVkyVWdhVzRnZEdobElFUnZiV0ZwYmlCU1pXZHBjM1J5ZVZ4dUlDQXFJQ0JBY0dGeVlXMGdJQ0I3VTNSeWFXNW5mU0FnSUNCdVlXMWxJQ0FnSUNBZ1JHRjBZVTlpYW1WamRFNWhiV1ZjYmlBZ0tpOWNiaUFnWkdWc1pYUmxSR0YwWVU5aWFtVmpkRWx1YzNSaGJtTmxLRzVoYldVcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHMWxjM05oWjJVZ1BTQjdJSFI1Y0dVNklDZGtaV3hsZEdVbkxDQm1jbTl0T2lCZmRHaHBjeTV5WldkcGMzUnllVlZTVEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzg2SUNka2IyMWhhVzQ2THk5eVpXZHBjM1J5ZVM0bklDc2dYM1JvYVhNdVgyUnZiV0ZwYmlBcklDY3ZKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ltOWtlVG9nZXlCMllXeDFaVG9nZTI1aGJXVTZJRzVoYldWOWZYMDdYRzVjYmlBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NXdiM04wVFdWemMyRm5aU2h0WlhOellXZGxMQ0FvY21Wd2JIa3BJRDArSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZDFibkpsWjJsemRHVnlJR1JoZEdGUFltcGxZM1FnVW1Wd2JIa25MQ0J5WlhCc2VTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJHZFc1amRHbHZiaUIwYnlCMWNHUmhkR1VnWVc0Z1NIbHdaWEowZVZ4dUlDQXFMMXh1SUNCMWNHUmhkR1ZJZVhCbGNuUjVTVzV6ZEdGdVkyVW9jbVZ6YjNWeVkyVXNJSFpoYkhWbEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUd4bGRDQnRaWE56WVdkbElEMGdleUIwZVhCbE9pQW5WVkJFUVZSRkp5d2dabkp2YlRvZ1gzUm9hWE11Y21WbmFYTjBjbmxWVWt3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2T2lBblpHOXRZV2x1T2k4dmNtVm5hWE4wY25rdUp5QXJJRjkwYUdsekxsOWtiMjFoYVc0Z0t5QW5MeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklISmxjMjkxY21ObExDQjJZV3gxWlRvZ2RtRnNkV1Y5ZlR0Y2JseHVJQ0FnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG5CdmMzUXVjRzl6ZEUxbGMzTmhaMlVvYldWemMyRm5aU3dnS0hKbGNHeDVLU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25WWEJrWVhSbFpDQm9lWEJsY25SNUlISmxjR3g1Snl3Z2NtVndiSGtwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ2NtVm5hWE4wWlhJZ1lTQnVaWGNnYzNWaWMyTnlhV0psY2lCcGJpQjBhR1VnWkdGMFlVOWlhbVZqZENCeVpXZHBjM1JsY21Wa1hHNGdJQ29nUUhCaGNtRnRJQ0I3VTNSeWFXNW5mU0FnSUdSaGRHRlBZbXBsWTNSVlVrd2dJQ0FnWkdGMFlVOWlhbVZqZENCVlVreGNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ2MzVmljMk55YVdKbGNsVlNUQ0FnSUNCemRXSnpZM0pwWW1WeUlGVlNURnh1SUNBcUwxeHVJQ0J5WldkcGMzUmxjbE4xWW5OamNtbGlaWElvWkdGMFlVOWlhbVZqZEZWU1RDd2djM1ZpYzJOeWFXSmxjbFZTVENrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdiR1YwSUdSaGRHRlBZbXBsWTNRZ1BTQmZkR2hwY3k1a1lYUmhUMkpxWldOMFRHbHpkRnRrWVhSaFQySnFaV04wVlZKTVhUdGNibHh1SUNBZ0lHbG1JQ2hrWVhSaFQySnFaV04wS1NCN1hHNGdJQ0FnSUNCa1lYUmhUMkpxWldOMExuTjFZbk5qY21saVpYSnpMbkIxYzJnb2MzVmljMk55YVdKbGNsVlNUQ2s3WEc0Z0lDQWdJQ0JmZEdocGN5NWtZWFJoVDJKcVpXTjBUR2x6ZEZ0a1lYUmhUMkpxWldOMFZWSk1YU0E5SUdSaGRHRlBZbXBsWTNRN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1oyVjBJSFJvWlNCemRXSnpZM0pwWW1WeWN5QnlaV2RwYzNSbGNtVmtJSGRwZEdocGJpQmhJR1JoZEdGUFltcGxZM1JjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRkSEpwYm1kOUlDQWdJQ0FnSUNBZ0lHUmhkR0ZQWW1wbFkzUlZVa3dnSUNBZ1pHRjBZVTlpYW1WamRDQlZVa3hjYmlBZ0tpQkFjR0Z5WVcwZ0lIdEJjbkpoZVR4VGRISnBibWMrZlNBZ0lGTjFZbk4wY21saVpYSnpJRXhwYzNSY2JpQWdLaTljYmlBZ1oyVjBSR0YwWVU5aWFtVmpkRk4xWW5OamNtbGlaWEp6S0dSaGRHRlBZbXBsWTNSVlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQmtZWFJoVDJKcVpXTjBJRDBnWDNSb2FYTXVaR0YwWVU5aWFtVmpkRXhwYzNSYlpHRjBZVTlpYW1WamRGVlNURjA3WEc1Y2JpQWdJQ0JwWmlBb1pHRjBZVTlpYW1WamRDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHUmhkR0ZQWW1wbFkzUXVjM1ZpYzJOeWFXSmxjbk03WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9jbTkzSUNkT2J5QmtZWFJoVDJKcVpXTjBJSGRoY3lCbWIzVnVaQ2M3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVkc4Z2NtVm5hWE4wWlhJZ1lTQnVaWGNnUkdGMFlTQlBZbXBsWTNRZ2FXNGdkR2hsSUhKMWJuUnBiV1VnZDJocFkyZ2djbVYwZFhKdWN5QjBhR1VnWkdGMFlVOWlhbVZqZEZWU1RDQmhiR3h2WTJGMFpXUWdkRzhnZEdobElHNWxkeUJFWVhSaElFOWlhbVZqZEM1Y2JpQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJQ0FnSUNBZ2FXUmxiblJwWm1sbGNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGtaVzUwYVdacFpYSmNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdaR0YwWVU5aWFtVmpkSE5qYUdWdFlTQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGUFltcGxZM1J6WTJobGJXRmNiaUFnS2lCQWNHRnlZVzBnSUh0VGRISnBibWQ5SUNBZ0lDQWdaR0YwWVU5aWFtVmpkRlZ5YkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGUFltcGxZM1JWY214Y2JpQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdJQ0FnSUNCa1lYUmhUMkpxWldOMFVtVndiM0owWlhJZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZQWW1wbFkzUlNaWEJ2Y25SbGNseHVJQ0FxSUVCd1lYSmhiU0FnZTBGeWNtRjVmU0FnSUNBZ2NtVnpiM1Z5WTJWeklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVU5aWFtVmpkQ0J5WlhOdmRYSmpaWE5jYmlBZ0tpQkFjR0Z5WVcwZ0lIdEJjbkpoZVgwZ0lDQWdJR0YxZEdodmNtbHpaU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4cGMzUWdiMllnY0hKbElHRjFkR2h2Y21selpXUWdZWFYwYUc5eWFYTmxaQ0JKUkhOY2JpQWdLaTljYmlBZ2NtVm5hWE4wWlhKRVlYUmhUMkpxWldOMEtHbGtaVzUwYVdacFpYSXNJR1JoZEdGUFltcGxZM1J6WTJobGJXRXNJR1JoZEdGUFltcGxZM1JWY213c0lHUmhkR0ZQWW1wbFkzUlNaWEJ2Y25SbGNpd2djbVZ6YjNWeVkyVnpMQ0JoWkdSeVpYTnpWVkpNTENCaGRYUm9iM0pwYzJVcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCc1pYUWdaR0YwWVZOamFHVnRaU0E5SUZ0ZE8xeHVJQ0FnSUNBZ2JHVjBJR1pwYkhSbGNtVmtSR0YwWVZOamFHVnRaU0E5SUdSaGRHRlBZbXBsWTNSVmNtd3VjM0JzYVhRb0p6b25LVHRjYmlBZ0lDQWdJR1JoZEdGVFkyaGxiV1V1Y0hWemFDaG1hV3gwWlhKbFpFUmhkR0ZUWTJobGJXVmJNRjBwTzF4dVhHNGdJQ0FnSUNCZmRHaHBjeTV6ZEc5eVlXZGxUV0Z1WVdkbGNpNW5aWFFvSjNKbFoybHpkSEo1T2tSaGRHRlBZbXBsWTNSVlVreHpKeWt1ZEdobGJpZ29kWEpzYzB4cGMzUXBJRDArSUh0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVhWeWJITk1hWE4wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkWEpzYzB4cGMzUWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2ZFhCa1lYUmxJSFJvWlNCc2FYTjBJSGRwZEdnZ2RHaGxJRzVsZHlCbGJHVnRaVzUwYzF4dUlDQWdJQ0FnSUNCMWNteHpUR2x6ZEZ0cFpHVnVkR2xtYVdWeUlDc2daR0YwWVU5aWFtVmpkSE5qYUdWdFlTQXJJSEpsYzI5MWNtTmxjeUFySUdSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2wwZ1BTQmhaR1J5WlhOelZWSk1MbUZrWkhKbGMzTTdYRzVjYmlBZ0lDQWdJQ0FnTHk5dFpYTnpZV2RsSUhSdklISmxaMmx6ZEdWeUlIUm9aU0J1WlhjZ2FIbHdaWEowZVN3Z2QybDBhR2x1SUhSb1pTQmtiMjFoYVc0Z2NtVm5hWE4wY25sY2JpQWdJQ0FnSUNBZ2JHVjBJRzFsYzNOaFoyVldZV3gxWlNBOUlIdHVZVzFsT2lCcFpHVnVkR2xtYVdWeUxDQnlaWE52ZFhKalpYTTZJSEpsYzI5MWNtTmxjeXdnWkdGMFlWTmphR1Z0WlhNNklHUmhkR0ZUWTJobGJXVXNJSE5qYUdWdFlUb2daR0YwWVU5aWFtVmpkSE5qYUdWdFlTd2dkWEpzT2lCa1lYUmhUMkpxWldOMFZYSnNMQ0JsZUhCcGNtVnpPaUJmZEdocGN5NWxlSEJwY21WelZHbHRaU3dnY21Wd2IzSjBaWEk2SUdSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2l3Z2NISmxRWFYwYURvZ1lYVjBhRzl5YVhObExDQnpkV0p6WTNKcFltVnljem9nVzExOU8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCdFpYTnpZV2RsTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hoWkdSeVpYTnpWVkpNTG01bGQwRmtaSEpsYzNNcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHlaV2RwYzNSbGNtbHVaeUJ1WlhjZ1pHRjBZU0J2WW1wbFkzUWdWVkpNSnl3Z1pHRjBZVTlpYW1WamRGVnliQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbElEMGdlM1I1Y0dVNkoyTnlaV0YwWlNjc0lHWnliMjA2SUY5MGFHbHpMbkpsWjJsemRISjVWVkpNTENCMGJ6b2dKMlJ2YldGcGJqb3ZMM0psWjJsemRISjVMaWNnS3lCZmRHaHBjeTV5WldkcGMzUnllVVJ2YldGcGJpQXJJQ2N2Snl3Z1ltOWtlVG9nZTNaaGJIVmxPaUJ0WlhOellXZGxWbUZzZFdVc0lIQnZiR2xqZVRvZ0ozQnZiR2xqZVNkOWZUdGNibHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KM0psWjJsemRHVnlhVzVuSUhCeVpYWnBiM1Z6YkhrZ2NtVm5hWE4wWlhKbFpDQmtZWFJoSUc5aWFtVmpkQ0JWVWt3bkxDQmtZWFJoVDJKcVpXTjBWWEpzS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzhxYldWemMyRm5aVlpoYkhWbElEMGdlMjVoYldVNklHbGtaVzUwYVdacFpYSXNJSEpsYzI5MWNtTmxjem9nY21WemIzVnlZMlZ6TENCa1lYUmhVMk5vWlcxbGN6b2daR0YwWVZOamFHVnRaU3dnYzJOb1pXMWhPaUJrWVhSaFQySnFaV04wYzJOb1pXMWhMQ0IxY213NklHUmhkR0ZQWW1wbFkzUlZjbXdzSUdWNGNHbHlaWE02SUY5MGFHbHpMbVY0Y0dseVpYTlVhVzFsTENCeVpYQnZjblJsY2pvZ1pHRjBZVTlpYW1WamRGSmxjRzl5ZEdWeUxDQndjbVZCZFhSb09pQmhkWFJvYjNKcGMyVXNJSE4xWW5OamNtbGlaWEp6T2lCYlhYMDdYRzVjYmlBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsSUQwZ2UzUjVjR1U2SjJOeVpXRjBaU2NzSUdaeWIyMDZJRjkwYUdsekxuSmxaMmx6ZEhKNVZWSk1MQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwzSmxaMmx6ZEhKNUxpY2dLeUJmZEdocGN5NXlaV2RwYzNSeWVVUnZiV0ZwYmlBcklDY3ZKeXdnWW05a2VUb2dlM1poYkhWbE9pQnRaWE56WVdkbFZtRnNkV1VzSUhCdmJHbGplVG9nSjNCdmJHbGplU2Q5ZlRzcUwxeHVYRzRnSUNBZ0lDQWdJQ0FnYldWemMyRm5aU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZDFjR1JoZEdVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc4NklDZGtiMjFoYVc0Nkx5OXlaV2RwYzNSeWVTNG5JQ3NnWDNSb2FYTXVjbVZuYVhOMGNubEViMjFoYVc0Z0t5QW5MeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1jbTl0T2lCZmRHaHBjeTV5WldkcGMzUnllVlZTVEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p2WkhrNklIdHlaWE52ZFhKalpUb2daR0YwWVU5aWFtVmpkRlZ5YkN3Z2RtRnNkV1U2SUNkc2FYWmxKeXdnWVhSMGNtbGlkWFJsT2lBbmMzUmhkSFZ6SjMxY2JpQWdJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmZkR2hwY3k1a1lYUmhUMkpxWldOMFRHbHpkRnRrWVhSaFQySnFaV04wVlhKc1hTQTlJRzFsYzNOaFoyVldZV3gxWlR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJ6ZEdWd0lIUnZJRzlpZEdGcGJpQjBhR1VnYkdsemRDQnZaaUJoYkd3Z1ZWSk1JSEpsWjJsemRHVnlaV1FnZEc4Z2RYQmtZWFJsWkNCM2FYUm9JSFJvWlNCdVpYY2diMjVsTGx4dUlDQWdJQ0FnSUNCZmRHaHBjeTV6ZEc5eVlXZGxUV0Z1WVdkbGNpNXpaWFFvSjNKbFoybHpkSEo1T2tSaGRHRlBZbXBsWTNSVlVreHpKeXdnTUN3Z2RYSnNjMHhwYzNRcExuUm9aVzRvS0NrZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5cHNaWFFnYldWemMyRm5aU0E5SUY5MGFHbHpMbTFsYzNOaFoyVkdZV04wYjNKNUxtTnlaV0YwWlVOeVpXRjBaVTFsYzNOaFoyVlNaWEYxWlhOMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNubFZVa3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5aRzl0WVdsdU9pOHZjbVZuYVhOMGNua3VKeUFySUY5MGFHbHpMbkpsWjJsemRISjVSRzl0WVdsdUlDc2dKeThuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpWWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKM0J2YkdsamVTZGNiaUFnSUNBZ0lDQWdJQ0FwT3lvdlhHNWNiaUFnSUNBZ0lDQWdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsTENBb2NtVndiSGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDYzlQVDArSUhKbFoybHpkR1Z5UkdGMFlVOWlhbVZqZENCU1pYQnNlVG9nSnl3Z2NtVndiSGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9KMjlySnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0oyVnljbTl5SUc5dUlISmxaMmx6ZEdWeUlFUmhkR0ZQWW1wbFkzUW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUY5blpYUlNaWE52ZFhKalpYTkJibVJUWTJobGJXVnpLR1JsYzJOeWFYQjBiM0lwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBQVDRnZTF4dVhHNGdJQ0FnSUNCc1pYUWdjbVZ6YjNWeVkyVnpPMXh1WEc0Z0lDQWdJQ0F2THlCamFHVmpheUJwWmlCMGFHVWdhSGx3WlhKMGVTQnlaWE52ZFhKalpYTWdhWE1nWVNCMlpXTjBiM0lnYjNJZ1lTQnpkSEpwYm1kY2JpQWdJQ0FnSUM4dklGUlBSRThnWkdWc1pYUmxJR3hoZEdWeUlIZG9aVzRnWTJGMFlXeHZaM1ZsSUdseklHWnBlR1ZrWEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUNoa1pYTmpjbWx3ZEc5eUxtaDVjR1Z5ZEhsVWVYQmxLU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdjbVZ6YjNWeVkyVnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lISmxjMjkxY21ObGN5NXdkWE5vS0dSbGMyTnlhWEIwYjNJdWFIbHdaWEowZVZSNWNHVXBPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjbVZ6YjNWeVkyVnpJRDBnWkdWelkzSnBjSFJ2Y2k1b2VYQmxjblI1Vkhsd1pUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdiR1YwSUdSbGMyTnlhWEIwYjNKRVlYUmhVMk5vWlcxaElEMGdaR1Z6WTNKcGNIUnZjaTVrWVhSaFQySnFaV04wY3p0Y2JpQWdJQ0FnSUd4bGRDQmtZWFJoVTJOb1pXMWhjMEZ5Y21GNUlEMGdXMTA3WEc1Y2JpQWdJQ0FnSUM4dmRHaHBjeUIzYVd4c0lHTnlaV0YwWlNCaElHRnljbUY1SUhkcGRHZ2dZU0JRY205dGFYTmxJR2x1SUdWaFkyZ2djRzl6YVhScGIyNWNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHbHVaR1Y0SUdsdUlHUmxjMk55YVhCMGIzSkVZWFJoVTJOb1pXMWhLU0I3WEc0Z0lDQWdJQ0FnSUdSaGRHRlRZMmhsYldGelFYSnlZWGt1Y0hWemFDaGZkR2hwY3k1eWRXNTBhVzFsUTJGMFlXeHZaM1ZsTG1kbGRFUmhkR0ZUWTJobGJXRkVaWE5qY21sd2RHOXlLR1JsYzJOeWFYQjBiM0pFWVhSaFUyTm9aVzFoVzJsdVpHVjRYU2twTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QmhjeUJ6YjI5dUlHRnpJSFJvWlNCd2NtVjJhVzkxY3lCaGNuSmhlU0JwY3lCamIyMXdiR1YwWldRc0lIUm9hWE1nZDJsc2JDQjNZV2wwSUdadmNpQjBhR1VnY21WemIyeDJaU0J2WmlCaGJHd2djSEp2YldselpYTWdhVzRnZEdobElHRnljbUY1WEc0Z0lDQWdJQ0JRY205dGFYTmxMbUZzYkNoa1lYUmhVMk5vWlcxaGMwRnljbUY1S1M1MGFHVnVLR1oxYm1OMGFXOXVLR1JoZEdGVFkyaGxiV0Z6S1NCN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUdacGJIUmxjbVZrUkdGMFlWTmphR1Z0WVhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVc1a1pYZ2dhVzRnWkdGMFlWTmphR1Z0WVhNcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZVk5qYUdWdFlTQTlJR1JoZEdGVFkyaGxiV0Z6VzJsdVpHVjRYVHRjYmlBZ0lDQWdJQ0FnSUNCbWFXeDBaWEpsWkVSaGRHRlRZMmhsYldGekxuQjFjMmdvWkdGMFlWTmphR1Z0WVM1emIzVnlZMlZRWVdOcllXZGxMbk52ZFhKalpVTnZaR1V1Y0hKdmNHVnlkR2xsY3k1elkyaGxiV1V1WTI5dWMzUmhiblFwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjBoNWNHVnlkSGtnVTJOb1pXMWhjeWNzSUdacGJIUmxjbVZrUkdGMFlWTmphR1Z0WVhNcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduU0hsd1pYSjBlU0J5WlhOdmRYSmpaWE1uTENCeVpYTnZkWEpqWlhNcE8xeHVYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9lM0psYzI5MWNtTmxjem9nY21WemIzVnlZMlZ6TENCa1lYUmhVMk5vWlcxaE9pQm1hV3gwWlhKbFpFUmhkR0ZUWTJobGJXRnpmU2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlHMWxkR2h2WkNCMGFHRjBJSEpsZEhWeWJuTWdjSEpsZG1sdmRYTnNlU0J5WldkcGMzUmxjbVZrSUVoNWNHVnlkSGtnYjNJZ1JHRjBZVTlpYW1WamRITWdWVkpNVXl3Z1ptOXlJR2RwZG1WdUlHTm9ZWEpoWTNSbGNtbHpkR2xqYzF4dUlDQXFJRUJ3WVhKaGJTQWdlMHBUVDA1OUlDQWdJQ0FnSUNCcGJtWnZJQ0FnSUNBZ0lDQWdJQ0J2WW1wbFkzUWdiM0lnYUhsd1pYSjBlU0JqYUdGeVlYUmxjbWx6ZEdsamN5QnBibVp2WEc0Z0lDb2dRSEpsZEhWeWJpQjdZV1JrY21WemMxVlNUSDBnSUdGa1pISmxjM05WVWt3Z0lDQWdJSEpsZEhWeWJpQjBhR1VnVlZKTUlHbG1JSFJvWlhKbElHbHpJR0Z1ZVNCd2NtVjJhVzkxYzNrZ2NtVm5hWE4wWlhKbFpDQlZVa3dzSUhKbGRIVnliaUIxYm1SbFptbHVaV1FnYjNSb1pYSjNhWE5sWEc0Z0lDb3ZYRzRnSUdOb1pXTnJVbVZuYVhOMFpYSmxaRlZTVEhNb2FXNW1ieWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dVhHNGdJQ0FnSUNCc1pYUWdiMkpxWldOMFZIbHdaU0E5SUNocGJtWnZMbkpsY0c5eWRHVnlLU0EvSUNkeVpXZHBjM1J5ZVRwRVlYUmhUMkpxWldOMFZWSk1jeWNnT2lBbmNtVm5hWE4wY25rNlNIbHdaWEowZVZWU1RITW5PMXh1WEc0Z0lDQWdJQ0JmZEdocGN5NXpkRzl5WVdkbFRXRnVZV2RsY2k1blpYUW9iMkpxWldOMFZIbHdaU2t1ZEdobGJpZ29kWEpzYzB4cGMzUXBJRDArSUh0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVhWeWJITk1hWE4wS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkWEpzYzB4cGMzUWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNodlltcGxZM1JVZVhCbElEMDlQU0FuY21WbmFYTjBjbms2U0hsd1pYSjBlVlZTVEhNbktTQjdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMmRsZEZKbGMyOTFjbU5sYzBGdVpGTmphR1Z0WlhNb2FXNW1ieWt1ZEdobGJpZ29kbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gxY214elRHbHpkRnQyWVd4MVpTNXlaWE52ZFhKalpYTWdLeUIyWVd4MVpTNWtZWFJoVTJOb1pXMWhYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNtVjFjMkZuWlNCdlppQm9lWEJsY25SNUlGVlNUQ2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTaDFjbXh6VEdsemRGdDJZV3gxWlM1eVpYTnZkWEpqWlhNZ0t5QjJZV3gxWlM1a1lYUmhVMk5vWlcxaFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmJtOGdhSGx3WlhKMGVTQlZVa3dnZDJGeklIQnlaWFpwYjNWemJIa2djbVZuYVhOMFpYSmxaQ0FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzI5c2RtVW9kVzVrWldacGJtVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJR3hsZENCamFHRnlZV04wWlhKcGMzUnBZM01nUFNCcGJtWnZMbTVoYldVZ0t5QnBibVp2TG5OamFHVnRZU0FySUdsdVptOHVjbVZ6YjNWeVkyVnpJQ3NnYVc1bWJ5NXlaWEJ2Y25SbGNqdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDFjbXh6VEdsemRGdGphR0Z5WVdOMFpYSnBjM1JwWTNOZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25jbVYxYzJGblpTQnZaaUJrWVhSaFQySnFaV04wSUZWU1RDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMyOXNkbVVvZFhKc2MweHBjM1JiWTJoaGNtRmpkR1Z5YVhOMGFXTnpYU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkdWJ5QmtZWFJoVDJKcVpXTjBJRlZTVENCM1lYTWdjSEpsZG1sdmRYTnNlU0J5WldkcGMzUmxjbVZrSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6YjJ4MlpTaDFibVJsWm1sdVpXUXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1ZHOGdjbVZuYVhOMFpYSWdZU0J1WlhjZ1NIbHdaWEowZVNCcGJpQjBhR1VnY25WdWRHbHRaU0IzYUdsamFDQnlaWFIxY201eklIUm9aU0JJZVhCbGNuUjVWVkpNSUdGc2JHOWpZWFJsWkNCMGJ5QjBhR1VnYm1WM0lFaDVjR1Z5ZEhrdVhHNGdJQ29nUUhCaGNtRnRJQ0I3VTJGdVpHSnZlSDBnSUNBZ0lDQWdJQ0FnSUNBZ2MyRnVaR0p2ZUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5oYm1SaWIzaGNiaUFnS2lCQWNHRnlZVzBnSUh0SWVYQmxjblI1UTJGMFlXeHZaM1ZsVlZKTWZTQkllWEJsY25SNVEyRjBZV3h2WjNWbFZWSk1JQ0FnWkdWelkzSnBjSFJ2Y2x4dUlDQXFJRUJ5WlhSMWNtNGdlMGg1Y0dWeWRIbFZVa3g5SUNBZ0lDQWdJQ0FnSUVoNWNHVnlkSGxWVWt4Y2JpQWdLaTljYmlBZ2NtVm5hWE4wWlhKSWVYQmxjblI1S0hOaGJtUmliM2dzSUdSbGMyTnlhWEIwYjNKVlVrd3NJR1JsYzJOeWFYQjBiM0lzSUdGa1pISmxjM05WVWt3cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHaDVjR1Z5ZEhsRFlYQmhZbWxzYVhScFpYTTdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzVjYmlBZ0lDQWdJQzh2WVhOemRXMXBibWNnWkdWelkzSnBjSFJ2Y2lCamIyMWxJR2x1SUhSb2FYTWdabTl5YldGMExDQjBhR1VnYzJWeWRtbGpaUzF3Y205MmFXUmxjaTFrYjIxaGFXNGdkWEpzSUdseklISmxkSEpwWlhabFpDQmllU0JoSUhOd2JHbDBJR2x1YzNSeWRXTjBhVzl1WEc0Z0lDQWdJQ0F2TDJoNWNHVnlkSGt0WTJGMFlXeHZaM1ZsT2k4dlBITmxjblpwWTJVdGNISnZkbWxrWlhJdFpHOXRZV2x1UGk4OFkyRjBZV3h2WjNWbExXOWlhbVZqZEMxcFpHVnVkR2xtYVdWeVBseHVJQ0FnSUNBZ2JHVjBJR1J2YldGcGJsVnliQ0E5SUdScGRtbGtaVlZTVENoa1pYTmpjbWx3ZEc5eVZWSk1LUzVrYjIxaGFXNDdYRzVjYmlBZ0lDQWdJR2xtSUNoa2IyMWhhVzVWY213dWFXNWpiSFZrWlhNb0oyTmhkR0ZzYjJkMVpTY3BLU0I3WEc0Z0lDQWdJQ0FnSUdSdmJXRnBibFZ5YkNBOUlHUnZiV0ZwYmxWeWJDNXlaWEJzWVdObEtDZGpZWFJoYkc5bmRXVXVKeXdnSnljcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmZkR2hwY3k1cFpFMXZaSFZzWlM1blpYUkpaR1Z1ZEdsMGVVRnpjMlZ5ZEdsdmJpZ3BMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0IxYzJWeVVISnZabWxzWlNBOUlISmxjM1ZzZEM1MWMyVnlVSEp2Wm1sc1pUdGNiaUFnSUNBZ0lDQWdiR1YwSUdsa1pXNTBhWFI1VlZKTUlEMGdkWE5sY2xCeWIyWnBiR1V1ZFhObGNsVlNURHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9YM1JvYVhNdVgyMWxjM05oWjJWQ2RYTWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25UV1Z6YzJGblpVSjFjeUJ1YjNRZ1ptOTFibVFnYjI0Z2NtVm5hWE4wWlhKVGRIVmlKeWs3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OWpZV3hzSUdOb1pXTnJJR2xtSUhSb1pTQndjbTkwYjNOMGRXSWdaWGhwYzNSY2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1eVpYTnZiSFpsS0Nkb2VYQmxjblI1TFhKMWJuUnBiV1U2THk4bklDc2daRzl0WVdsdVZYSnNLUzUwYUdWdUtHWjFibU4wYVc5dUtDa2dlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzUm9hWE11YzNSdmNtRm5aVTFoYm1GblpYSXVaMlYwS0NkeVpXZHBjM1J5ZVRwSWVYQmxjblI1VlZKTWN5Y3BPMXh1SUNBZ0lDQWdJQ0FnSUgwcExuUm9aVzRvS0hWeWJITk1hWE4wS1NBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5blpYUlNaWE52ZFhKalpYTkJibVJUWTJobGJXVnpLR1JsYzJOeWFYQjBiM0lwTG5Sb1pXNG9LSFpoYkhWbEtTQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYUhsd1pYSjBlVU5oY0dGaWFXeHBkR2xsY3lBOUlIWmhiSFZsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkWEpzYzB4cGMzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY214elRHbHpkQ0E5SUh0OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNjMHhwYzNSYmFIbHdaWEowZVVOaGNHRmlhV3hwZEdsbGN5NXlaWE52ZFhKalpYTWdLeUJvZVhCbGNuUjVRMkZ3WVdKcGJHbDBhV1Z6TG1SaGRHRlRZMmhsYldGZElEMGdZV1JrY21WemMxVlNUQzVoWkdSeVpYTnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1emRHOXlZV2RsVFdGdVlXZGxjaTV6WlhRb0ozSmxaMmx6ZEhKNU9raDVjR1Z5ZEhsVlVreHpKeXdnTUN3Z2RYSnNjMHhwYzNRcExuUm9aVzRvS0NrZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVjbVZuYVhOMGNubEViMjFoYVc0Z1BTQmtiMjFoYVc1VmNtdzdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2TDJOb1pXTnJJSGRvWlhSb1pYSWdkR2hsSUhKbFkyVnBkbVZrSUhOaGJtSnZlQ0JsSUVGd2NHeHBZMkYwYVc5dVUyRnVaR0p2ZUNCdmNpQmhJRzV2Y20xaGJDQnpZVzVrWW05NFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE5oYm1SaWIzZ3VkSGx3WlNBOVBUMGdKMkZ3Y0NjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuTmhibVJpYjNobGMweHBjM1F1WVhCd1UyRnVaR0p2ZUZ0aFpHUnlaWE56VlZKTUxtRmtaSEpsYzNOYk1GMWRJRDBnYzJGdVpHSnZlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hOaGJtUmliM2d1ZEhsd1pTQTlQVDBnSjI1dmNtMWhiQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5OaGJtUmliM2hsYzB4cGMzUXVjMkZ1WkdKdmVGdGhaR1J5WlhOelZWSk1MbUZrWkhKbGMzTmJNRjFkSUQwZ2MyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkWGNtOXVaeUJUWVc1a1ltOTRWSGx3WlNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCb2VYQmxjblI1SUQwZ2JtVjNJRWg1Y0dWeWRIbEpibk4wWVc1alpTaGZkR2hwY3k1cFpHVnVkR2xtYVdWeUxDQmZkR2hwY3k1eVpXZHBjM1J5ZVZWU1RDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtaWE5qY21sd2RHOXlWVkpNTENCa1pYTmpjbWx3ZEc5eUxDQmhaR1J5WlhOelZWSk1MbUZrWkhKbGMzTmJNRjBzSUhWelpYSlFjbTltYVd4bEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2g1Y0dWeWRIa3VYM0psYzI5MWNtTmxjeUE5SUdoNWNHVnlkSGxEWVhCaFltbHNhWFJwWlhNdWNtVnpiM1Z5WTJWek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaDVjR1Z5ZEhrdVgyUmhkR0ZUWTJobGJXVnpJRDBnYUhsd1pYSjBlVU5oY0dGaWFXeHBkR2xsY3k1a1lYUmhVMk5vWlcxaE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG1oNWNHVnlkR2xsYzB4cGMzUXVjSFZ6YUNob2VYQmxjblI1S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZiV1Z6YzJGblpTQjBieUJ5WldkcGMzUmxjaUIwYUdVZ2JtVjNJR2g1Y0dWeWRIa3NJSGRwZEdocGJpQjBhR1VnWkc5dFlXbHVJSEpsWjJsemRISjVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcxbGMzTmhaMlZXWVd4MVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYldWemMyRm5aVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGhaR1J5WlhOelZWSk1MbTVsZDBGa1pISmxjM01wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R5WldkcGMzUmxjbWx1WnlCdVpYY2dTSGx3WlhKMGVTQlZVa3duTENCaFpHUnlaWE56VlZKTUxtRmtaSEpsYzNOYk1GMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsVm1Gc2RXVWdQU0I3ZFhObGNqb2dhV1JsYm5ScGRIbFZVa3dzSUNCa1pYTmpjbWx3ZEc5eU9pQmtaWE5qY21sd2RHOXlWVkpNTENCMWNtdzZJR0ZrWkhKbGMzTlZVa3d1WVdSa2NtVnpjMXN3WFN3Z1pYaHdhWEpsY3pvZ1gzUm9hWE11Wlhod2FYSmxjMVJwYldVc0lISmxjMjkxY21ObGN6b2dhSGx3WlhKMGVVTmhjR0ZpYVd4cGRHbGxjeTV5WlhOdmRYSmpaWE1zSUdSaGRHRlRZMmhsYldWek9pQm9lWEJsY25SNVEyRndZV0pwYkdsMGFXVnpMbVJoZEdGVFkyaGxiV0Y5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbElEMGdlM1I1Y0dVNkoyTnlaV0YwWlNjc0lHWnliMjA2SUY5MGFHbHpMbkpsWjJsemRISjVWVkpNTENCMGJ6b2dKMlJ2YldGcGJqb3ZMM0psWjJsemRISjVMaWNnS3lCZmRHaHBjeTV5WldkcGMzUnllVVJ2YldGcGJpQXJJQ2N2Snl3Z1ltOWtlVG9nZTNaaGJIVmxPaUJ0WlhOellXZGxWbUZzZFdVc0lIQnZiR2xqZVRvZ0ozQnZiR2xqZVNkOWZUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbmNtVm5hWE4wWlhKcGJtY2djSEpsZG1sdmRYTnNlU0J5WldkcGMzUmxjbVZrSUVoNWNHVnlkSGtnVlZKTUp5d2dZV1JrY21WemMxVlNUQzVoWkdSeVpYTnpXekJkS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpTQTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0MGVYQmxPaUFuZFhCa1lYUmxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZPaUFuWkc5dFlXbHVPaTh2Y21WbmFYTjBjbmt1SnlBcklGOTBhR2x6TG5KbFoybHpkSEo1Ukc5dFlXbHVJQ3NnSnk4bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJUb2dYM1JvYVhNdWNtVm5hWE4wY25sVlVrd3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3Y21WemIzVnlZMlU2SUdGa1pISmxjM05WVWt3dVlXUmtjbVZ6YzFzd1hTOHFMQ0IyWVd4MVpUb2dKMnhwZG1VbkxDQmhkSFJ5YVdKMWRHVTZJQ2R6ZEdGMGRYTW5LaTk5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4cWJHVjBJRzFsYzNOaFoyVWdQU0JmZEdocGN5NXRaWE56WVdkbFJtRmpkRzl5ZVM1amNtVmhkR1ZEY21WaGRHVk5aWE56WVdkbFVtVnhkV1Z6ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5KbFoybHpkSEo1VlZKTUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMlJ2YldGcGJqb3ZMM0psWjJsemRISjVMaWNnS3lCZmRHaHBjeTV5WldkcGMzUnllVVJ2YldGcGJpQXJJQ2N2Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJWV1lXeDFaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkd2IyeHBZM2tuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1RzcUwxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdVgyMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYldWemMyRm5aU3dnS0hKbGNHeDVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduUFQwOVBpQlNaV2RwYzNSbGNraDVjR1Z5ZEhrZ1VtVndiSGs2SUNjc0lISmxjR3g1S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb1lXUmtjbVZ6YzFWU1RDNWhaR1J5WlhOeld6QmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblJtRnBiR1ZrSUhSdklISmxaMmx6ZEdWeUlHRnVJRWg1Y0dWeWRIa25LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2ZEdsdFpYSWdkRzhnYTJWbGNDQjBhR1VnY21WbmFYTjBjbUYwYVc5dUlHRnNhWFpsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaGxJSFJwYldVZ2FYTWdaR1ZtYVc1bFpDQmllU0JoSUd4cGRIUnNaU0JzWlhOeklIUm9ZVzRnYUdGc1ppQnZaaUIwYUdVZ1pYaHdhWEpsY3lCMGFXMWxJR1JsWm1sdVpXUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYTJWbGNFRnNhWFpsVkdsdFpYSWdQU0J6WlhSSmJuUmxjblpoYkNobWRXNWpkR2x2YmlncElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHlwc1pYUWdiV1Z6YzJGblpTQTlJRjkwYUdsekxtMWxjM05oWjJWR1lXTjBiM0o1TG1OeVpXRjBaVU55WldGMFpVMWxjM05oWjJWU1pYRjFaWE4wS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1eVpXZHBjM1J5ZVZWU1RDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJSdmJXRnBiam92TDNKbFoybHpkSEo1TGljZ0t5QmZkR2hwY3k1eVpXZHBjM1J5ZVVSdmJXRnBiaUFySUNjdkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVlpoYkhWbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuY0c5c2FXTjVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1RzcUwxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2JXVnpjMkZuWlNBOUlIdDBlWEJsT2lkMWNHUmhkR1VuTENCbWNtOXRPaUJmZEdocGN5NXlaV2RwYzNSeWVWVlNUQ3dnZEc4NklDZGtiMjFoYVc0Nkx5OXlaV2RwYzNSeWVTNG5JQ3NnWDNSb2FYTXVjbVZuYVhOMGNubEViMjFoYVc0Z0t5QW5MeWNzSUdKdlpIazZJSHNnY21WemIzVnlZMlU2SUdGa1pISmxjM05WVWt3dVlXUmtjbVZ6YzFzd1hYMTlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRaWE56WVdkbExDQW9jbVZ3YkhrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KejA5UFQ0Z1MyVmxjRUZzYVhabElGSmxjR3g1T2lBbkxDQnlaWEJzZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TENnb0tGOTBhR2x6TG1WNGNHbHlaWE5VYVcxbElDOGdNUzR4S1NBdklESXBJQ29nTVRBd01Da3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1oxYm1OMGFXOXVLSEpsWVhOdmJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkQlpHUnlaWE56SUZKbFlYTnZiam9nSnl3Z2NtVmhjMjl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvY21WaGMyOXVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU3dnWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDZ25SbUZwYkdWa0lIUnZJRzlpZEdGcGJpQmhiaUJwWkdWdWRHbDBlU2NzSUdWeWNpazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZSdklIVnVjbVZuYVhOMFpYSWdZU0J3Y21WMmFXOTFjMng1SUhKbFoybHpkR1Z5WldRZ1NIbHdaWEowZVZ4dUlDQXFJRUJ3WVhKaGJTQWdlMGg1Y0dWeWRIbFZVa3g5SUNBZ0lDQWdJQ0FnSUVoNWNHVnlkSGxWVWt3Z2RYSnNJQ0FnSUNBZ0lDQjFjbXhjYmlBZ0tpOWNiaUFnZFc1eVpXZHBjM1JsY2toNWNHVnlkSGtvZFhKc0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCc1pYUWdabTkxYm1RZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUd4bGRDQnBibVJsZUNBOUlEQTdYRzVjYmlBZ0lDQWdJR1p2Y2x4MEtHbHVaR1Y0SUQwZ01Ec2dhVzVrWlhnZ1BDQmZkR2hwY3k1b2VYQmxjblJwWlhOTWFYTjBMbXhsYm1kMGFEc2dhVzVrWlhnckt5a2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FIbHdaWEowZVNBOUlGOTBhR2x6TG1oNWNHVnlkR2xsYzB4cGMzUmJhVzVrWlhoZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYUhsd1pYSjBlU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHaDVjR1Z5ZEhrdWFIbHdaWEowZVZWU1RDQTlQVDBnZFhKc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzVnVaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0dadmRXNWtJRDA5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvSjBoNWNHVnlkSGtnYm05MElHWnZkVzVrSnlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnWDNSb2FYTXVhSGx3WlhKMGFXVnpUR2x6ZEZ0cGJtUmxlRjA3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvSjBoNWNHVnlkSGtnYzNWalkyVnpjMloxYkd4NUlHUmxiR1YwWldRbktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVkc4Z1pHbHpZMjkyWlhJZ2NISnZkRzlqYjJ3Z2MzUjFZbk1nWVhaaGFXeGhZbXhsSUdsdUlIUm9aU0J5ZFc1MGFXMWxJR1p2Y2lCaElHTmxjblJoYVc0Z1pHOXRZV2x1TGlCSlppQmhkbUZwYkdGaWJHVXNJR2wwSUhKbGRIVnlibk1nZEdobElISjFiblJwYldVZ2RYSnNJR1p2Y2lCMGFHVWdjSEp2ZEc5amIyd2djM1IxWWlCMGFHRjBJR052Ym01bFkzUnpJSFJ2SUhSb1pTQnlaWEYxWlhOMFpXUWdaRzl0WVdsdUxpQlNaWEYxYVhKbFpDQmllU0IwYUdVZ2NuVnVkR2x0WlNCQ1ZWTWdkRzhnY205MWRHVWdiV1Z6YzJGblpYTWdkRzhnY21WdGIzUmxJSE5sY25abGNuTWdiM0lnY0dWbGNuTWdLR1J2SUhkbElHNWxaV1FnYzI5dFpYUm9hVzVuSUhOcGJXbHNZWElnWm05eUlFaDVjR1Z5ZEdsbGN6OHBMbHh1SUNBcUlFQndZWEpoYlNBZ2UwUnZiV0ZwYmxWU1RIMGdJQ0FnSUNBZ0lDQWdJRVJ2YldGcGJsVlNUQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJGeHVJQ0FxSUVCeVpYUjFjbTRnZTFKMWJuUnBiV1ZWVWt4OUlDQWdJQ0FnSUNBZ0lDQlNkVzUwYVcxbFZWSk1YRzRnSUNvdlhHNGdJR1JwYzJOdmRtVnlVSEp2ZEc5emRIVmlLSFZ5YkNrZ2UxeHVJQ0FnSUdsbUlDZ2hkWEpzS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFCaGNtRnRaWFJsY2lCMWNtd2dibVZsWkdWa0p5azdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dVhHNGdJQ0FnSUNCc1pYUWdaR2wyYVdSbFpGVlNUQ0E5SUdScGRtbGtaVlZTVENoMWNtd3BPMXh1SUNBZ0lDQWdiR1YwSUdSdmJXRnBibFZTVENBOUlHUnBkbWxrWldSVlVrd3VaRzl0WVdsdU8xeHVYRzRnSUNBZ0lDQnBaaUFvWDNSb2FYTXVjSEp2ZEc5emRIVmljMHhwYzNRdWFHRnpUM2R1VUhKdmNHVnlkSGtvWkc5dFlXbHVWVkpNS1NBbUppQmZkR2hwY3k1d2NtOTBiM04wZFdKelRHbHpkRnRrYjIxaGFXNVZVa3hkTG5OMFlYUjFjeUE5UFQwZ1UxUkJWRlZUTGtSRlVFeFBXVVZFS1NCN1hHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb1gzUm9hWE11Y0hKdmRHOXpkSFZpYzB4cGMzUmJaRzl0WVdsdVZWSk1YU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NXdjbTkwYjNOMGRXSnpUR2x6ZEZ0a2IyMWhhVzVWVWt4ZElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUhOMFlYUjFjem9nVTFSQlZGVlRMbEJTVDBkU1JWTlRYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0NkeVpYRjFaWE4wVlhCa1lYUmxJR052ZFd4a2JseGNKM1FnWjJWMElIUm9aU0JRY205MGIzTjBkV0pWVWt3bktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZSdklISmxaMmx6ZEdWeUlHRWdibVYzSUZCeWIzUnZZMjlzSUZOMGRXSWdhVzRnZEdobElISjFiblJwYldVZ2FXNWpiSFZrYVc1bklHRnpJR2x1Y0hWMElIQmhjbUZ0WlhSbGNuTWdkR2hsSUdaMWJtTjBhVzl1SUhSdklIQnZjM1JOWlhOellXZGxMQ0IwYUdVZ1JHOXRZV2x1VlZKTUlIUm9ZWFFnYVhNZ1kyOXVibVZqZEdWa0lIZHBkR2dnZEdobElITjBkV0lzSUhkb2FXTm9JSEpsZEhWeWJuTWdkR2hsSUZKMWJuUnBiV1ZWVWt3Z1lXeHNiMk5oZEdWa0lIUnZJSFJvWlNCdVpYY2dVSEp2ZEc5amIyeFRkSFZpTGx4dUlDQWdLaUJBY0dGeVlXMGdlMU5oYm1SaWIzaDlJQ0FnSUNBZ0lDQlRZVzVrWW05NFhHNGdJQ0FxSUVCd1lYSmhiU0FnZTBSdmJXRnBibFZTVEgwZ0lDQWdJRVJ2YldGcGJsVlNUQ0J6WlhKMmFXTmxJSEJ5YjNacFpHVnlJR1J2YldGcGJseHVJQ0FnS2lCQWNtVjBkWEp1SUh0U2RXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTWZWeHVJQ0FnS2k5Y2JpQWdjbVZuYVhOMFpYSlRkSFZpS0hOaGJtUmliM2dzSUdSdmJXRnBibFZTVENrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3h5WldwbFkzUXBJSHRjYmx4dUlDQWdJQ0FnYkdWMElISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrdzdYRzVjYmlBZ0lDQWdJQzh2WTJobFkyc2dhV1lnYldWemMyRm5aVUoxY3lCcGN5QnlaV2RwYzNSbGNtVmtJR2x1SUhKbFoybHpkSEo1SUc5eUlHNXZkRnh1SUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbDl0WlhOellXZGxRblZ6SUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLQ2ROWlhOellXZGxRblZ6SUc1dmRDQm1iM1Z1WkNCdmJpQnlaV2RwYzNSbGNsTjBkV0luS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OVVUMFJQSUdsdGNHeGxiV1Z1ZENCaElIVnVhWEYxWlNCdWRXMWlaWElnWm05eUlIUm9aU0J3Y205MGIzTjBkV0pWVWt4Y2JpQWdJQ0FnSUdsbUlDZ2haRzl0WVdsdVZWSk1MbWx1WkdWNFQyWW9KMjF6WnkxdWIyUmxMaWNwS1NCN1hHNGdJQ0FnSUNBZ0lHUnZiV0ZwYmxWU1RDQTlJR1J2YldGcGJsVlNUQzV6ZFdKemRISnBibWNvWkc5dFlXbHVWVkpNTG1sdVpHVjRUMllvSnk0bktTQXJJREVwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTUlEMGdKMjF6WnkxdWIyUmxMaWNnS3lCa2IyMWhhVzVWVWt3Z0t5QW5MM0J5YjNSdmMzUjFZaThuSUNzZ1RXRjBhQzVtYkc5dmNpZ29UV0YwYUM1eVlXNWtiMjBvS1NBcUlERXdNREF3S1NBcklERXBPMXh1WEc0Z0lDQWdJQ0F2THlCVVQwUlBPaUJQY0hScGJXbDZaU0IwYUdselhHNGdJQ0FnSUNBdkx5QlFjbTk0ZVR0Y2JpQWdJQ0FnSUY5MGFHbHpMbkJ5YjNSdmMzUjFZbk5NYVhOMFcyUnZiV0ZwYmxWU1RGMGdQU0I3WEc0Z0lDQWdJQ0FnSUhWeWJEb2djblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ3hjYmlBZ0lDQWdJQ0FnYzNSaGRIVnpPaUJUVkVGVVZWTXVSRVZRVEU5WlJVUmNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQzh2SUY5MGFHbHpMbkJ5YjNSdmMzUjFZbk5NYVhOMFcyUnZiV0ZwYmxWU1RGMGdQU0J5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNTzF4dUlDQWdJQ0FnWDNSb2FYTXVjMkZ1WkdKdmVHVnpUR2x6ZEM1ellXNWtZbTk0VzNKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt4ZElEMGdjMkZ1WkdKdmVEdGNibHh1SUNBZ0lDQWdMeThnYzJGdVpHSnZlQzVoWkdSTWFYTjBaVzVsY2lnbktpY3NJR1oxYm1OMGFXOXVLRzF6WnlrZ2UxeHVJQ0FnSUNBZ0x5OGdJQ0JmZEdocGN5NWZiV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodGMyY3BPMXh1SUNBZ0lDQWdMeThnZlNrN1hHNWNiaUFnSUNBZ0lISmxjMjlzZG1Vb2NuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDazdYRzVjYmlBZ0lDQWdJRjkwYUdsekxsOXRaWE56WVdkbFFuVnpMbUZrWkV4cGMzUmxibVZ5S0hKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3Z0t5QW5MM04wWVhSMWN5Y3NJQ2h0YzJjcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHMXpaeTV5WlhOdmRYSmpaU0E5UFQwZ2JYTm5MblJ2SUNzZ0p5OXpkR0YwZFhNbktTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxSjFiblJwYldWUWNtOTBiM04wZFdKVlVrd3ZjM1JoZEhWeklHMWxjM05oWjJVNklDY3NJRzF6Wnk1aWIyUjVMblpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGUnZJSFZ1Y21WbmFYTjBaWElnWVNCd2NtVjJhVzkxYzJ4NUlISmxaMmx6ZEdWeVpXUWdjSEp2ZEc5amIyd2djM1IxWWx4dUlDQXFJRUJ3WVhKaGJTQWdlMGg1Y0dWeWRIbFNkVzUwYVcxbFZWSk1mU0FnSUVoNWNHVnlkSGxTZFc1MGFXMWxWVkpNSUNBZ0lDQm9lWEJsY25SNVVuVnVkR2x0WlZWU1RGeHVJQ0FxTDF4dUlDQjFibkpsWjJsemRHVnlVM1IxWWlob2VYQmxjblI1VW5WdWRHbHRaVlZTVENrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc1Y2JpQWdJQ0FnSUdsbUlDaGZkR2hwY3k1d2NtOTBiM04wZFdKelRHbHpkQzVvWVhOUGQyNVFjbTl3WlhKMGVTaG9lWEJsY25SNVVuVnVkR2x0WlZWU1RDa3BJSHRjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJRjkwYUdsekxuQnliM1J2YzNSMVluTk1hWE4wVzJoNWNHVnlkSGxTZFc1MGFXMWxWVkpNWFR0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNnblVISnZkRzl6ZEhWaVZWSk1JSEpsYlc5MlpXUW5LVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDZ25SWEp5YjNJZ2IyNGdkVzV5WldkcGMzUmxjbE4wZFdJNklFaDVjR1Z5ZEhrZ2JtOTBJR1p2ZFc1a0p5azdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVkc4Z2NtVm5hWE4wWlhJZ1lTQnVaWGNnU1dSbGJuUnBkSGtnVUhKdmRtbGtaWElnY0hKdmVIa2dhVzRnZEdobElISjFiblJwYldVZ2FXNWpiSFZrYVc1bklHRnpJR2x1Y0hWMElIQmhjbUZ0WlhSbGNuTWdkR2hsSUdaMWJtTjBhVzl1SUhSdklIQnZjM1JOWlhOellXZGxMQ0IwYUdVZ1JHOXRZV2x1VlZKTUlIUm9ZWFFnYVhNZ1kyOXVibVZqZEdWa0lIZHBkR2dnZEdobElITjBkV0lzSUhkb2FXTm9JSEpsZEhWeWJuTWdkR2hsSUZKMWJuUnBiV1ZWVWt3Z1lXeHNiMk5oZEdWa0lIUnZJSFJvWlNCdVpYY2dVSEp2ZEc5amIyeFRkSFZpTGx4dUlDQWdLaUJBY0dGeVlXMGdlMU5oYm1SaWIzaDlJQ0FnSUNBZ0lDQlRZVzVrWW05NFhHNGdJQ0FxSUVCd1lYSmhiU0FnZTBSdmJXRnBibFZTVEgwZ0lDQWdJRVJ2YldGcGJsVlNUQ0J6WlhKMmFXTmxJSEJ5YjNacFpHVnlJR1J2YldGcGJseHVJQ0FnS2lCQWNtVjBkWEp1SUh0U2RXNTBhVzFsU1dSd1VISnZlSGxWVWt4OVhHNGdJQ0FxTDF4dUlDQnlaV2RwYzNSbGNrbGtjRkJ5YjNoNUtITmhibVJpYjNnc0lHUnZiV0ZwYmxWU1RDa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN4eVpXcGxZM1FwSUh0Y2JseHVJQ0FnSUNBZ2JHVjBJR2xrY0ZCeWIzaDVVM1IxWWxWU1REdGNibHh1SUNBZ0lDQWdMeTlqYUdWamF5QnBaaUJ0WlhOellXZGxRblZ6SUdseklISmxaMmx6ZEdWeVpXUWdhVzRnY21WbmFYTjBjbmtnYjNJZ2JtOTBYRzRnSUNBZ0lDQnBaaUFvWDNSb2FYTXVYMjFsYzNOaFoyVkNkWE1nUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9KMDFsYzNOaFoyVkNkWE1nYm05MElHWnZkVzVrSUc5dUlISmxaMmx6ZEdWeVUzUjFZaWNwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFpIQlFjbTk0ZVZOMGRXSlZVa3dnUFNBblpHOXRZV2x1TFdsa2NEb3ZMeWNnS3lCa2IyMWhhVzVWVWt3Z0t5QW5MM04wZFdJdkp5QXJJRTFoZEdndVpteHZiM0lvS0UxaGRHZ3VjbUZ1Wkc5dEtDa2dLaUF4TURBd01Da2dLeUF4S1R0Y2JseHVJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1QzQjBhVzFwZW1VZ2RHaHBjMXh1SUNBZ0lDQWdYM1JvYVhNdWFXUndVSEp2ZUhsTWFYTjBXMlJ2YldGcGJsVlNURjBnUFNCN1hHNGdJQ0FnSUNBZ0lIVnliRG9nYVdSd1VISnZlSGxUZEhWaVZWSk1MRnh1SUNBZ0lDQWdJQ0J6ZEdGMGRYTTZJRk5VUVZSVlV5NVFVazlIVWtWVFUxeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdYM1JvYVhNdWMyRnVaR0p2ZUdWelRHbHpkQzV6WVc1a1ltOTRXMmxrY0ZCeWIzaDVVM1IxWWxWU1RGMGdQU0J6WVc1a1ltOTRPMXh1WEc0Z0lDQWdJQ0F2THlCellXNWtZbTk0TG1Ga1pFeHBjM1JsYm1WeUtDY3FKeXdnWm5WdVkzUnBiMjRvYlhObktTQjdYRzRnSUNBZ0lDQXZMeUFnSUY5MGFHbHpMbDl0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lDQWdJQ0F2THlCOUtUdGNibHh1SUNBZ0lDQWdjbVZ6YjJ4MlpTaHBaSEJRY205NGVWTjBkV0pWVWt3cE8xeHVYRzRnSUNBZ0lDQmZkR2hwY3k1ZmJXVnpjMkZuWlVKMWN5NWhaR1JNYVhOMFpXNWxjaWhwWkhCUWNtOTRlVk4wZFdKVlVrd2dLeUFuTDNOMFlYUjFjeWNzSUNodGMyY3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzF6Wnk1eVpYTnZkWEpqWlNBOVBUMGdiWE5uTG5SdklDc2dKeTl6ZEdGMGRYTW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMmxrY0ZCeWIzaDVVM1IxWWxWU1RDOXpkR0YwZFhNZ2JXVnpjMkZuWlRvZ0p5d2diWE5uTG1KdlpIa3VkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FxSUZSdklHUnBjMk52ZG1WeUlHbGtjRkJ5YjNoNUlITjBkV0p6SUdGMllXbHNZV0pzWlNCcGJpQjBhR1VnY25WdWRHbHRaU0JtYjNJZ1lTQmpaWEowWVdsdUlHUnZiV0ZwYmk0Z1NXWWdZWFpoYVd4aFlteGxMQ0JwZENCeVpYUjFjbTV6SUhSb1pTQnlkVzUwYVcxbElIVnliQ0JtYjNJZ2RHaGxJR2xrY0ZCeWIzaDVJSE4wZFdJZ2RHaGhkQ0JqYjI1dVpXTjBjeUIwYnlCMGFHVWdjbVZ4ZFdWemRHVmtJR1J2YldGcGJpNGdVbVZ4ZFdseVpXUWdZbmtnZEdobElISjFiblJwYldVZ1FsVlRJSFJ2SUhKdmRYUmxJRzFsYzNOaFoyVnpJSFJ2SUhKbGJXOTBaU0J6WlhKMlpYSnpJRzl5SUhCbFpYSnpYRzRnSUNvZ1FIQmhjbUZ0SUNCN1JHOXRZV2x1VlZKTWZTQWdJQ0FnSUNBZ0lDQWdSRzl0WVdsdVZWSk1JQ0FnSUNBZ0lDQWdJQ0FnZFhKc1hHNGdJQ29nUUhKbGRIVnliaUI3VW5WdWRHbHRaVlZTVEgwZ0lDQWdJQ0FnSUNBZ0lGSjFiblJwYldWVlVrd2dJQ0FnSUNBZ0lDQnBaSEJRY205NGVWVnliRnh1SUNBcUwxeHVJQ0JrYVhOamIzWmxja2xrY0ZCeWIzaDVLSFZ5YkNrZ2UxeHVJQ0FnSUdsbUlDZ2hkWEpzS1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFCaGNtRnRaWFJsY2lCMWNtd2dibVZsWkdWa0p5azdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JseHVJQ0FnSUNBZ2JHVjBJR1JwZG1sa1pXUlZVa3dnUFNCa2FYWnBaR1ZWVWt3b2RYSnNLVHRjYmlBZ0lDQWdJR3hsZENCa2IyMWhhVzVWVWt3Z1BTQmthWFpwWkdWa1ZWSk1MbVJ2YldGcGJqdGNibHh1SUNBZ0lDQWdhV1lnS0Y5MGFHbHpMbWxrY0ZCeWIzaDVUR2x6ZEM1b1lYTlBkMjVRY205d1pYSjBlU2hrYjIxaGFXNVZVa3dwSUNZbUlGOTBhR2x6TG1sa2NGQnliM2g1VEdsemRGdGtiMjFoYVc1VlVreGRMbk4wWVhSMWN5QTlQVDBnVTFSQlZGVlRMa1JGVUV4UFdVVkVLU0I3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvWDNSb2FYTXVhV1J3VUhKdmVIbE1hWE4wVzJSdmJXRnBibFZTVEYwcE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1QzQjBhVzFwZW1VZ2RHaHBjMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NXBaSEJRY205NGVVeHBjM1JiWkc5dFlXbHVWVkpNWFNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMGRYTTZJRk5VUVZSVlV5NVFVazlIVWtWVFUxeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9KM0psY1hWbGMzUlZjR1JoZEdVZ1kyOTFiR1J1WEZ3bmRDQm5aWFFnZEdobElHbGtjRkJ5YjNoNVZWSk1KeWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc1Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGUnZJSEpsWjJsemRHVnlJR0VnYm1WM0lGQnZiR2xqZVNCRmJtWnZjbU5sY2lCcGJpQjBhR1VnY25WdWRHbHRaU0JwYm1Oc2RXUnBibWNnWVhNZ2FXNXdkWFFnY0dGeVlXMWxkR1Z5Y3lCMGFHVWdablZ1WTNScGIyNGdkRzhnY0c5emRFMWxjM05oWjJVc0lIUm9aU0JJZVhCbGNuUjVWVkpNSUdGemMyOWphV0YwWldRZ2QybDBhQ0IwYUdVZ1VFVlFMQ0IzYUdsamFDQnlaWFIxY201eklIUm9aU0JTZFc1MGFXMWxWVkpNSUdGc2JHOWpZWFJsWkNCMGJ5QjBhR1VnYm1WM0lGQnZiR2xqZVNCRmJtWnZjbU5sY2lCamIyMXdiMjVsYm5RdVhHNGdJQ29nUUhCaGNtRnRJQ0I3VFdWemMyRm5aUzVOWlhOellXZGxmU0J3YjNOMFRXVnpjMkZuWlNCd2IzTjBUV1Z6YzJGblpWeHVJQ0FxSUVCd1lYSmhiU0FnZTBoNWNHVnlkSGxWVWt4OUlDQWdJQ0FnSUNBZ0lFaDVjR1Z5ZEhsVlVrd2dJQ0FnSUNBZ0lDQWdJQ0JvZVhCbGNuUjVYRzRnSUNvZ1FISmxkSFZ5YmlCN1NIbHdaWEowZVZKMWJuUnBiV1ZWVWt4OUlDQWdTSGx3WlhKMGVWSjFiblJwYldWVlVreGNiaUFnS2k5Y2JpQWdjbVZuYVhOMFpYSlFSVkFvY0c5emRFMWxjM05oWjJVc0lHaDVjR1Z5ZEhrcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0F2TDFSUFJFOGdZMmhsWTJzZ2QyaGhkQ0J3WVhKaGJXVjBaWElnYVc0Z2RHaGxJSEJ2YzNSTlpYTnpZV2RsSUhSb1pTQndaWEFnYVhNdVhHNGdJQ0FnSUNCZmRHaHBjeTV3WlhCTWFYTjBXMmg1Y0dWeWRIbGRJRDBnY0c5emRFMWxjM05oWjJVN1hHNGdJQ0FnSUNCeVpYTnZiSFpsS0NkUVJWQWdjbVZuYVhOMFpYSmxaQ0IzYVhSb0lITjFZMk5sYzNNbktUdGNiaUFnSUNCOUtUdGNibHh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVkc4Z2RXNXlaV2RwYzNSbGNpQmhJSEJ5WlhacGIzVnpiSGtnY21WbmFYTjBaWEpsWkNCd2NtOTBiMk52YkNCemRIVmlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1NIbHdaWEowZVZKMWJuUnBiV1ZWVWt4OUlDQWdTSGx3WlhKMGVWSjFiblJwYldWVlVrd2dJQ0FnSUVoNWNHVnlkSGxTZFc1MGFXMWxWVkpNWEc0Z0lDb3ZYRzRnSUhWdWNtVm5hWE4wWlhKUVJWQW9TSGx3WlhKMGVWSjFiblJwYldWVlVrd3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc2NtVnFaV04wS1NCN1hHNWNiaUFnSUNBZ0lHeGxkQ0J5WlhOMWJIUWdQU0JmZEdocGN5NXdaWEJNYVhOMFcwaDVjR1Z5ZEhsU2RXNTBhVzFsVlZKTVhUdGNibHh1SUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDZ25VR1Z3SUU1dmRDQm1iM1Z1WkM0bktUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb0oxQkZVQ0J6ZFdOalpYTnpablZzYkhrZ2NtVnRiM1psWkM0bktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ29nVkc4Z2NtVmpaV2wyWlNCemRHRjBkWE1nWlhabGJuUnpJR1p5YjIwZ1kyOXRjRzl1Wlc1MGN5QnlaV2RwYzNSbGNtVmtJR2x1SUhSb1pTQlNaV2RwYzNSeWVTNWNiaUFnS2lCQWNHRnlZVzBnSUh0TlpYTnpZV2RsTGsxbGMzTmhaMlY5SUNBZ0lDQk5aWE56WVdkbExrMWxjM05oWjJVZ0lDQWdJQ0FnWlhabGJuUmNiaUFnS2k5Y2JpQWdiMjVGZG1WdWRDaGxkbVZ1ZENrZ2UxeHVJQ0FnSUM4dklGUlBSRThnWW05a2VTNHVMbHh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R2YmtWMlpXNTBKeWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVWJ5QmthWE5qYjNabGNpQnpZVzVrWW05NFpYTWdZWFpoYVd4aFlteGxJR2x1SUhSb1pTQnlkVzUwYVcxbElHWnZjaUJoSUdObGNuUmhhVzRnWkc5dFlXbHVMaUJTWlhGMWFYSmxaQ0JpZVNCMGFHVWdjblZ1ZEdsdFpTQlZRU0IwYnlCaGRtOXBaQ0J0YjNKbElIUm9ZVzRnYjI1bElITmhibVJpYjNnZ1ptOXlJSFJvWlNCellXMWxJR1J2YldGcGJpNWNiaUFnS2lCQWNHRnlZVzBnSUh0RWIyMWhhVzVWVWt4OUlFUnZiV0ZwYmxWU1RDQjFjbXhjYmlBZ0tpQkFjbVYwZFhKdUlIdFNkVzUwYVcxbFUyRnVaR0p2ZUgwZ0lDQWdJQ0FnSUNBZ0lGSjFiblJwYldWVFlXNWtZbTk0WEc0Z0lDb3ZYRzRnSUdkbGRGTmhibVJpYjNnb2RYSnNLU0I3WEc0Z0lDQWdhV1lnS0NGMWNtd3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VR0Z5WVcxbGRHVnlJSFZ5YkNCdVpXVmtaV1FuS1R0Y2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnbloyVjBVMkZ1WkdKdmVEb2dKeXdnZFhKc0tUdGNibHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzY21WcVpXTjBLU0I3WEc1Y2JpQWdJQ0FnSUd4bGRDQnlaWEYxWlhOME8xeHVYRzRnSUNBZ0lDQXZMMlpwY25OMElIUnllU0IwYnlCbWFXNWtJSFJvWlNCMWNtd2dhVzRnZEdobElHRndjRk5oYm1SaWIzZ2diR2x6ZEZ4dUlDQWdJQ0FnY21WeGRXVnpkQ0E5SUY5MGFHbHpMbk5oYm1SaWIzaGxjMHhwYzNRdVlYQndVMkZ1WkdKdmVGdDFjbXhkTzF4dVhHNGdJQ0FnSUNBdkwybG1JRzV2SUdGd2NGTmhibVJpYjNnZ2QyRnpJR1p2ZFc1a0xDQjBjbmtnZEc4Z2MyVmhjbU5vSUdsdUlIUm9aU0J1YjNKdFlXd2djMkZ1WkdKdmVHVnpJR3hwYzNSY2JpQWdJQ0FnSUdsbUlDZ2hjbVZ4ZFdWemRDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBJRDBnWDNSb2FYTXVjMkZ1WkdKdmVHVnpUR2x6ZEM1ellXNWtZbTk0VzNWeWJGMDdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnlaWEYxWlhOMEtTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdaRzl0WVdsdUlEMGdaR2wyYVdSbFZWSk1LSFZ5YkNrdVpHOXRZV2x1TzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnYzJWaGNtTm9JR2x1SUhSb1pTQnpZVzVrWW05NFpYTWdiR2x6ZENCbWIzSWdZU0JsYm5SeWVTQmpiMjUwWVdsdWFXNW5JSFJvWlNCa2IyMWhhVzRnWjJsMlpXNWNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0J6WVc1a1ltOTRJR2x1SUY5MGFHbHpMbk5oYm1SaWIzaGxjMHhwYzNRdWMyRnVaR0p2ZUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmhibVJpYjNndWFXNWpiSFZrWlhNb1pHOXRZV2x1S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFaWE4wSUQwZ1gzUm9hWE11YzJGdVpHSnZlR1Z6VEdsemRDNXpZVzVrWW05NFczTmhibVJpYjNoZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLQ0Z5WlhGMVpYTjBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2duYm04Z2MyRnVaR0p2ZUNCbWIzVnVaQ0JtYjNJNklDY2dLeUIxY213cE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYRjFaWE4wS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWRzhnZG1WeWFXWjVJR2xtSUhOdmRYSmpaU0JwY3lCMllXeHBaQ0JoYm1RZ2RHOGdjbVZ6YjJ4MlpTQjBZWEpuWlhRZ2NuVnVkR2x0WlNCMWNtd2dZV1JrY21WemN5QnBaaUJ1WldWa1pXUWdLR1ZuSUhCeWIzUnZjM1IxWWlCeWRXNTBhVzFsSUhWeWJDQnBiaUJqWVhObElIUm9aU0J0WlhOellXZGxJR2x6SUhSdklHSmxJR1JwYzNCaGRHTm9aV1FnZEc4Z1lTQnlaVzF2ZEdVZ1pXNWtjRzlwYm5RcExseHVJQ0FxSUVCd1lYSmhiU0FnZTFWU1RDNVZVa3g5SUNCMWNtd2dJQ0FnSUNBZ2RYSnNYRzRnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlR4VlVrd3VWVkpNUG4wZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlVnUEZWU1RDNVZVa3crWEc0Z0lDb3ZYRzRnSUhKbGMyOXNkbVVvZFhKc0tTQjdYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KM0psYzI5c2RtVWdKeUFySUhWeWJDazdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzVjYmlBZ0lDQWdJQzh2YzNCc2FYUWdkR2hsSUhWeWJDQjBieUJtYVc1a0lIUm9aU0JrYjIxaGFXNVZVa3d1SUdSbFlXeHpJSGRwZEdnZ2RHaGxJSFZ5YkNCbWIzSWdaWGhoYlhCc1pTQmhjenBjYmlBZ0lDQWdJQzh2WENKb2VYQmxjblI1TFhKMWJuUnBiV1U2THk5emNERXZjSEp2ZEc5emRIVmlMekV5TTF3aUxGeHVJQ0FnSUNBZ2JHVjBJR1JwZG1sa1pXUlZVa3dnUFNCa2FYWnBaR1ZWVWt3b2RYSnNLVHRjYmlBZ0lDQWdJR3hsZENCa2IyMWhhVzVWY213Z1BTQmthWFpwWkdWa1ZWSk1MbVJ2YldGcGJqdGNiaUFnSUNBZ0lHeGxkQ0IwZVhCbElEMGdaR2wyYVdSbFpGVlNUQzUwZVhCbE8xeHVYRzRnSUNBZ0lDQXZMeUJ5WlhOdmJIWmxJSFJvWlNCa2IyMWhhVzRnY0hKdmRHOXpkSFZpSUdsdUlHTmhjMlVnYjJZZ1lTQnRaWE56WVdkbElIUnZJR2RzYjJKaGJDQnlaV2RwYzNSeWVWeHVJQ0FnSUNBZ2FXWWdLSFZ5YkM1cGJtTnNkV1JsY3lnbloyeHZZbUZzT2k4dmNtVm5hWE4wY25rbktTa2dlMXh1SUNBZ0lDQWdJQ0JrYjIxaGFXNVZjbXdnUFNCZmRHaHBjeTVmWkc5dFlXbHVPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb0lXUnZiV0ZwYmxWeWJDNXBibVJsZUU5bUtDZHRjMmN0Ym05a1pTNG5LU0I4ZkNBaFpHOXRZV2x1VlhKc0xtbHVaR1Y0VDJZb0ozSmxaMmx6ZEhKNUxpY3BLU0I3WEc0Z0lDQWdJQ0FnSUdSdmJXRnBibFZ5YkNBOUlHUnZiV0ZwYmxWeWJDNXpkV0p6ZEhKcGJtY29aRzl0WVdsdVZYSnNMbWx1WkdWNFQyWW9KeTRuS1NBcklERXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ2NtVm5hWE4wY21Wa1EyOXRjRzl1Wlc1ME8xeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2RrYjIxaGFXNHRhV1J3SnlrZ2UxeHVJQ0FnSUNBZ0lDQnlaV2RwYzNSeVpXUkRiMjF3YjI1bGJuUWdJRDBnWDNSb2FYTXVhV1J3VUhKdmVIbE1hWE4wTG1oaGMwOTNibEJ5YjNCbGNuUjVLR1J2YldGcGJsVnliQ2tnUHlCZmRHaHBjeTVwWkhCUWNtOTRlVXhwYzNSYlpHOXRZV2x1VlhKc1hTQTZJR1poYkhObE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtVm5hWE4wY21Wa1EyOXRjRzl1Wlc1MElDQTlJRjkwYUdsekxuQnliM1J2YzNSMVluTk1hWE4wTG1oaGMwOTNibEJ5YjNCbGNuUjVLR1J2YldGcGJsVnliQ2tnUHlCZmRHaHBjeTV3Y205MGIzTjBkV0p6VEdsemRGdGtiMjFoYVc1VmNteGRJRG9nWm1Gc2MyVTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoeVpXZHBjM1J5WldSRGIyMXdiMjVsYm5RZ0ppWWdjbVZuYVhOMGNtVmtRMjl0Y0c5dVpXNTBMbWhoYzA5M2JsQnliM0JsY25SNUtDZHpkR0YwZFhNbktTQW1KaUJ5WldkcGMzUnlaV1JEYjIxd2IyNWxiblF1YzNSaGRIVnpJRDA5UFNCVFZFRlVWVk11UkVWUVRFOVpSVVFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RTWlhOdmJIWmxaRG9nSnl3Z2NtVm5hWE4wY21Wa1EyOXRjRzl1Wlc1MExuVnliQ2s3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21WbmFYTjBjbVZrUTI5dGNHOXVaVzUwTG5WeWJDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQVDBnSjJSdmJXRnBiaTFwWkhBbktTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1gzUm9hWE11ZEhKcFoyZGxjaWduY25WdWRHbHRaVHBzYjJGa1NXUndVSEp2ZUhrbkxDQmtiMjFoYVc1VmNtd3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJ4dllXUmxjaTVzYjJGa1NXUndVSEp2ZUhrb1pHOXRZV2x1VlhKc0tTNTBhR1Z1S0NoeVpYTjFiSFFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFoybHpkSEpsWkVOdmJYQnZibVZ1ZENBZ1BTQmZkR2hwY3k1cFpIQlFjbTk0ZVV4cGMzUmJaRzl0WVdsdVZYSnNYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVW1WemIyeDJaV1FnU1VSUVVISnZlSGs2SUNjc0lISmxaMmx6ZEhKbFpFTnZiWEJ2Ym1WdWRDd2djbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbWxrY0ZCeWIzaDVUR2x6ZEZ0a2IyMWhhVzVWY214ZExuTjBZWFIxY3lBOUlGTlVRVlJWVXk1RVJWQk1UMWxGUkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9jbVZuYVhOMGNtVmtRMjl0Y0c5dVpXNTBMblZ5YkNrN1hHNGdJQ0FnSUNBZ0lDQWdmU2t1WTJGMFkyZ29LSEpsWVhOdmJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNWxjbkp2Y2lnblJYSnliM0lnY21WemIyeDJhVzVuSUVsRVVGQnliM2g1T2lBbkxDQnlaV0Z6YjI0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLSEpsWVhOdmJpazdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCZmRHaHBjeTUwY21sbloyVnlLQ2R5ZFc1MGFXMWxPbXh2WVdSVGRIVmlKeXdnWkc5dFlXbHVWWEpzS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOXNiMkZrWlhJdWJHOWhaRk4wZFdJb1pHOXRZV2x1VlhKc0tTNTBhR1Z1S0NoeVpYTjFiSFFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbFoybHpkSEpsWkVOdmJYQnZibVZ1ZENBZ1BTQmZkR2hwY3k1d2NtOTBiM04wZFdKelRHbHpkRnRrYjIxaGFXNVZjbXhkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkU1pYTnZiSFpsWkNCUWNtOTBiM04wZFdJNklDY3NJSEpsWjJsemRISmxaRU52YlhCdmJtVnVkQ3dnY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5CeWIzUnZjM1IxWW5OTWFYTjBXMlJ2YldGcGJsVnliRjB1YzNSaGRIVnpJRDBnVTFSQlZGVlRMa1JGVUV4UFdVVkVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpXZHBjM1J5WldSRGIyMXdiMjVsYm5RdWRYSnNLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtTNWpZWFJqYUNnb2NtVmhjMjl1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RGY25KdmNpQnlaWE52YkhacGJtY2dVSEp2ZEc5emRIVmlPaUFuTENCeVpXRnpiMjRwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtISmxZWE52YmlrN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JTWldkcGMzUnllVHRjYmlJc0lpOHFLbHh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJRVkNCSmJtOTJZY09udzZOdklHVWdVMmx6ZEdWdFlYTWdVMEZjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnU1U1RlUwTXRTVVJjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVVZWUFFrbFRJRTVGVkZkUFVrdFRJRk5NWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVaU1FWVk9TRTlHUlZJdFIwVlRSVXhNVTBOSVFVWlVJRnBWVWlCR1QwVlNSRVZTVlU1SElFUkZVaUJCVGtkRlYwRk9SRlJGVGlCR1QxSlRRMGhWVGtjZ1JTNVdYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRTlTUVU1SFJTQlRRVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJFWlhWMGMyTm9aU0JVWld4bGEyOXRJRUZIWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVGd2FYcGxaVnh1S2lCRGIzQjVjbWxuYUhRZ01qQXhOaUJVUlVOSVRrbFRRMGhGSUZWT1NWWkZVbE5KVkVGVUlFSkZVa3hKVGx4dUtseHVLaUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVWdYQ0pNYVdObGJuTmxYQ0lwTzF4dUtpQjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVYRzRxSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVLbHh1S2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUtseHVLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc0lITnZablIzWVhKbFhHNHFJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl4Y2Jpb2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVYRzRxSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUmNiaW9nYkdsdGFYUmhkR2x2Ym5NZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNHFLaTljYmk4cUtseHVLaUFnSUVCaGRYUm9iM0k2SUVkcGJDQkVhV0Z6SUNobmFXd3VaR2xoYzBCMFpXTnVhV052TG5Wc2FYTmliMkV1Y0hRcFhHNHFJQ0FnVW1WbmFYTjBjbmtnUkdGMFlTQk5iMlJsYkNCcGJtTnNkV1JsY3lCaGJHd2dUMkpxWldOMGN5QjBieUJpWlNCb1lXNWtiR1ZrSUdKNUlIUm9aU0JTWldkcGMzUnllU0JtZFc1amRHbHZibUZzYVhSNUlHbHVZMngxWkdsdVoxeHVLaTljYm1Oc1lYTnpJRkpsWjJsemRISjVSR0YwWVUxdlpHVnNJSHRjYmx4dUlDQmpiMjV6ZEhKMVkzUnZjaWhwWkN3Z2RYSnNMQ0JrWlhOamNtbHdkRzl5VlZKTUxDQnpkR0Z5ZEdsdVoxUnBiV1VzSUd4aGMzUk5iMlJwWm1sbFpDd2djM1JoZEhWekxDQnpkSFZpY3l3Z2MzUjFZbk5EYjI1bWFXZDFjbUYwYVc5dUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDlwWkNBOUlHbGtPMXh1SUNBZ0lGOTBhR2x6TGw5MWNtd2dQU0IxY213N1hHNGdJQ0FnWDNSb2FYTXVYMlJsYzJOeWFYQjBiM0pWVWt3Z1BTQmtaWE5qY21sd2RHOXlWVkpNTzF4dUlDQWdJRjkwYUdsekxsOXpkR0Z5ZEdsdVoxUnBiV1VnUFNCemRHRnlkR2x1WjFScGJXVTdYRzRnSUNBZ1gzUm9hWE11WDJ4aGMzUk5iMlJwWm1sbFpDQTlJR3hoYzNSTmIyUnBabWxsWkR0Y2JpQWdJQ0JmZEdocGN5NWZjM1JoZEhWeklEMGdjM1JoZEhWek8xeHVJQ0FnSUY5MGFHbHpMbDl6ZEhWaWN5QTlJSE4wZFdKek8xeHVJQ0FnSUY5MGFHbHpMbDl6ZEhWaWMwTnZibVpwWjNWeVlYUnBiMjRnUFNCemRIVmljME52Ym1acFozVnlZWFJwYjI0N1hHNGdJSDFjYmx4dUlDQm5aWFFnYVdRb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVgybGtPMXh1SUNCOVhHNWNiaUFnWjJWMElIVnliQ2dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lISmxkSFZ5YmlCZmRHaHBjeTVmZFhKc08xeHVJQ0I5WEc1Y2JpQWdaMlYwSUdSbGMyTnlhWEIwYjNJb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0J5WlhSMWNtNGdYM1JvYVhNdVgyUmxjMk55YVhCMGIzSlZVa3c3WEc0Z0lIMWNibHh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCU1pXZHBjM1J5ZVVSaGRHRk5iMlJsYkR0Y2JpSXNJbWx0Y0c5eWRDQjdaR2wyYVdSbFZWSk1MQ0JuWlhSRGIyNW1hV2QxY21GMGFXOXVVbVZ6YjNWeVkyVnpMQ0JpZFdsc1pGVlNUSDBnWm5KdmJTQW5MaTR2ZFhScGJITXZkWFJwYkhNbk8xeHVYRzVqYkdGemN5QkVaWE5qY21sd2RHOXljeUI3WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY25WdWRHbHRaVlZTVEN3Z1kyRjBZV3h2WjNWbExDQnlkVzUwYVcxbFEyOXVabWxuZFhKaGRHbHZiaWtnZTF4dUlDQWdJR2xtSUNnaGNuVnVkR2x0WlZWU1RDa2dkR2h5YjNjZ1JYSnliM0lvSjFSb1pTQmtaWE5qY21sd2RHOXlJRzVsWldRZ2RHOGdhMjV2ZHlCMGFHVWdjblZ1ZEdsdFpTQjFjbXdnZEc4Z1ltVWdkWE5sWkNjcE8xeHVJQ0FnSUdsbUlDZ2hZMkYwWVd4dlozVmxLU0IwYUhKdmR5QkZjbkp2Y2lnblZHaGxJR1JsYzJOeWFYQjBiM0lnYm1WbFpITWdkR2hsSUdOaGRHRnNiMmQxWlNCcGJuTjBZVzVqWlNjcE8xeHVJQ0FnSUdsbUlDZ2hjblZ1ZEdsdFpVTnZibVpwWjNWeVlYUnBiMjRwSUhSb2NtOTNJRVZ5Y205eUtDZFVhR1VnWkdWelkzSnBjSFJ2Y2lCdVpXVmtjeUIwYUdVZ2NuVnVkR2x0WlNCamIyNW1hV2QxY21GMGFXOXVKeWs3WEc1Y2JpQWdJQ0IwYUdsekxuSjFiblJwYldWRGIyNW1hV2QxY21GMGFXOXVJRDBnY25WdWRHbHRaVU52Ym1acFozVnlZWFJwYjI0N1hHNGdJQ0FnZEdocGN5NXlkVzUwYVcxbFZWSk1JRDBnY25WdWRHbHRaVlZTVER0Y2JpQWdJQ0IwYUdsekxtTmhkR0ZzYjJkMVpTQTlJR05oZEdGc2IyZDFaVHRjYmlBZ2ZWeHVYRzRnSUdkbGRFaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlDaG9lWEJsY25SNVZWSk1LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTJGMFlXeHZaM1ZsTG1kbGRFaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtHaDVjR1Z5ZEhsVlVrd3BPMXh1SUNCOVhHNWNiaUFnWjJWMFUzUjFZa1JsYzJOeWFYQjBiM0lnS0hOMGRXSlZVa3dwSUh0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzVjYmlBZ0lDQWdJR3hsZENCa2FYWnBaR1ZrVlZKTUlEMGdaR2wyYVdSbFZWSk1LSE4wZFdKVlVrd3BPMXh1SUNBZ0lDQWdiR1YwSUdSdmJXRnBiaUE5SUdScGRtbGtaV1JWVWt3dVpHOXRZV2x1TzF4dUlDQWdJQ0FnYkdWMElIQnliM1J2YzNSMVlpQTlJR1JwZG1sa1pXUlZVa3d1YVdSbGJuUnBkSGs3WEc0Z0lDQWdJQ0JzWlhRZ2NISnZkRzlUZEhWaVZWSk1PMXh1WEc0Z0lDQWdJQ0JzWlhRZ2IzSnBaMmx1UkdsMmFXUmxaRlZTVENBOUlHUnBkbWxrWlZWU1RDaDBhR2x6TG5KMWJuUnBiV1ZWVWt3cE8xeHVJQ0FnSUNBZ2JHVjBJRzl5YVdkcGJrUnZiV0ZwYmlBOUlHOXlhV2RwYmtScGRtbGtaV1JWVWt3dVpHOXRZV2x1TzF4dVhHNGdJQ0FnSUNCcFppQW9JV1J2YldGcGJpa2dlMXh1SUNBZ0lDQWdJQ0JrYjIxaGFXNGdQU0JwWkhCUWNtOTRlVlZTVER0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLQ0Z3Y205MGIzTjBkV0lwSUh0Y2JpQWdJQ0FnSUNBZ2NISnZkRzl6ZEhWaUlEMGdKMlJsWm1GMWJIUW5PMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdjSEp2ZEc5emRIVmlJRDBnY0hKdmRHOXpkSFZpTG5OMVluTjBjbWx1Wnlod2NtOTBiM04wZFdJdWJHRnpkRWx1WkdWNFQyWW9KeThuS1NBcklERXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J3Y205MGIxTjBkV0pWVWt3Z1BTQmlkV2xzWkZWU1RDaDBhR2x6TG5KMWJuUnBiV1ZEYjI1bWFXZDFjbUYwYVc5dUxDQW5ZMkYwWVd4dlozVmxWVkpNY3ljc0lDZHdjbTkwYjJOdmJITjBkV0luTENCd2NtOTBiM04wZFdJcE8xeHVJQ0FnSUNBZ2FXWWdLR1J2YldGcGJpQWhQVDBnZEdocGN5NXlkVzUwYVcxbFEyOXVabWxuZFhKaGRHbHZiaTVrYjIxaGFXNHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnpkSFZpVlZKTUxtbHVaR1Y0VDJZb0oyaDBkSEJ6SnlrZ2ZId2dJWE4wZFdKVlVrd3VhVzVrWlhoUFppZ25hSGx3WlhKMGVTMWpZWFJoYkc5bmRXVW5LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIQnliM1J2VTNSMVlsVlNUQ0E5SUhOMGRXSlZVa3c3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJVVDBSUE9pQmphR1ZqYXlCb2IzY2dkRzhnYkc5aFpDQm1iM0p0SUdScFptWmxjbVZ1ZENCamIyNW1hV2QxY21GMGFXOXVJR1J2YldGcGJseHVJQ0FnSUNBZ0lDQWdJR3hsZENCeVpYTnZkWEpqWlNBOUlHZGxkRU52Ym1acFozVnlZWFJwYjI1U1pYTnZkWEpqWlhNb2RHaHBjeTV5ZFc1MGFXMWxRMjl1Wm1sbmRYSmhkR2x2Yml3Z0oyTmhkR0ZzYjJkMVpWVlNUSE1uTENBbmNISnZkRzlqYjJ4emRIVmlKeWs3WEc0Z0lDQWdJQ0FnSUNBZ2NISnZkRzlUZEhWaVZWSk1JRDBnY21WemIzVnlZMlV1Y0hKbFptbDRJQ3NnWkc5dFlXbHVJQ3NnY21WemIzVnlZMlV1YzNWbVptbDRJQ3NnY0hKdmRHOXpkSFZpTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RNYjJGa0lGQnliM1J2WTI5c1UzUjFZaUJtYjNJZ1pHOXRZV2x1TENBbklDc2daRzl0WVdsdUlDc2dKeUE2SUNjc0lIQnliM1J2VTNSMVlsVlNUQ2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1allYUmhiRzluZFdVdVoyVjBVM1IxWWtSbGMyTnlhWEIwYjNJb2NISnZkRzlUZEhWaVZWSk1LUzUwYUdWdUtDaHlaWE4xYkhRcElEMCtJSHRjYmx4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGMzVnNkQ2s3WEc1Y2JpQWdJQ0FnSUgwcExtTmhkR05vS0NobGNuSnZjaWtnUFQ0Z2UxeHVYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkRmNuSnZjam9nSnl3Z1pYSnliM0lwTzF4dVhHNGdJQ0FnSUNBZ0lIQnliM1J2YzNSMVlpQTlJR1J2YldGcGJqdGNiaUFnSUNBZ0lDQWdaRzl0WVdsdUlEMGdiM0pwWjJsdVJHOXRZV2x1TzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J5WlhOdmRYSmpaU0E5SUdkbGRFTnZibVpwWjNWeVlYUnBiMjVTWlhOdmRYSmpaWE1vZEdocGN5NXlkVzUwYVcxbFEyOXVabWxuZFhKaGRHbHZiaXdnSjJOaGRHRnNiMmQxWlZWU1RITW5MQ0FuY0hKdmRHOWpiMnh6ZEhWaUp5azdYRzRnSUNBZ0lDQWdJSEJ5YjNSdlUzUjFZbFZTVENBOUlISmxjMjkxY21ObExuQnlaV1pwZUNBcklHUnZiV0ZwYmlBcklISmxjMjkxY21ObExuTjFabVpwZUNBcklIQnliM1J2YzNSMVlqdGNibHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblJtRnNiR0poWTJzZ0xUNGdURzloWkNCUWNtOTBiMk52YkhOMGRXSWdabTl5SUdSdmJXRnBiaXdnSnlBcklHUnZiV0ZwYmlBcklDY2dPaUFuTENCd2NtOTBiM04wZFdJcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqWVhSaGJHOW5kV1V1WjJWMFUzUjFZa1JsYzJOeWFYQjBiM0lvY0hKdmRHOVRkSFZpVlZKTUtUdGNiaUFnSUNBZ0lIMHBMblJvWlc0b0tISmxjM1ZzZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsYzNWc2RDazdYRzRnSUNBZ0lDQjlLUzVqWVhSamFDZ29jbVZoYzI5dUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WldGemIyNHBPMXh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lHZGxkRWxrY0ZCeWIzaDVSR1Z6WTNKcGNIUnZjaWhwWkhCUWNtOTRlVlZTVENrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzVjYmlBZ0lDQWdJR3hsZENCa2FYWnBaR1ZrVlZKTUlEMGdaR2wyYVdSbFZWSk1LR2xrY0ZCeWIzaDVWVkpNS1R0Y2JpQWdJQ0FnSUd4bGRDQmtiMjFoYVc0Z1BTQmthWFpwWkdWa1ZWSk1MbVJ2YldGcGJqdGNiaUFnSUNBZ0lHeGxkQ0JwWkhCd2NtOTRlU0E5SUdScGRtbGtaV1JWVWt3dWFXUmxiblJwZEhrN1hHNWNiaUFnSUNBZ0lHeGxkQ0J2Y21sbmFXNUVhWFpwWkdWa1ZWSk1JRDBnWkdsMmFXUmxWVkpNS0hSb2FYTXVjblZ1ZEdsdFpWVlNUQ2s3WEc0Z0lDQWdJQ0JzWlhRZ2IzSnBaMmx1Ukc5dFlXbHVJRDBnYjNKcFoybHVSR2wyYVdSbFpGVlNUQzVrYjIxaGFXNDdYRzVjYmlBZ0lDQWdJR2xtSUNnaFpHOXRZV2x1S1NCN1hHNGdJQ0FnSUNBZ0lHUnZiV0ZwYmlBOUlHbGtjRkJ5YjNoNVZWSk1PMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb1pHOXRZV2x1SUQwOVBTQnZjbWxuYVc1RWIyMWhhVzRnZkh3Z0lXbGtjSEJ5YjNoNUtTQjdYRzRnSUNBZ0lDQWdJR2xrY0hCeWIzaDVJRDBnSjJSbFptRjFiSFFuTzF4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdSd2NISnZlSGtnUFNCcFpIQndjbTk0ZVM1emRXSnpkSEpwYm1jb2FXUndjSEp2ZUhrdWJHRnpkRWx1WkdWNFQyWW9KeThuS1NBcklERXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ2NtVnpiM1Z5WTJVZ1BTQm5aWFJEYjI1bWFXZDFjbUYwYVc5dVVtVnpiM1Z5WTJWektIUm9hWE11Y25WdWRHbHRaVU52Ym1acFozVnlZWFJwYjI0c0lDZGpZWFJoYkc5bmRXVlZVa3h6Snl3Z0oybGtjRkJ5YjNoNUp5azdYRzVjYmlBZ0lDQWdJR2xrY0ZCeWIzaDVWVkpNSUQwZ2NtVnpiM1Z5WTJVdWNISmxabWw0SUNzZ1pHOXRZV2x1SUNzZ2NtVnpiM1Z5WTJVdWMzVm1abWw0SUNzZ2FXUndjSEp2ZUhrN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25URzloWkNCSlpIQWdVSEp2ZUhrZ1ptOXlJR1J2YldGcGJpd2dKeUFySUdSdmJXRnBiaUFySUNjZ09pQW5MQ0JwWkhCUWNtOTRlVlZTVENrN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpZWFJoYkc5bmRXVXVaMlYwU1dSd1VISnZlSGxFWlhOamNtbHdkRzl5S0dsa2NGQnliM2g1VlZKTUtTNTBhR1Z1S0NoeVpYTjFiSFFwSUQwK0lIdGNibHh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsYzNWc2RDazdYRzVjYmlBZ0lDQWdJSDBwTG1OaGRHTm9LQ2dwSUQwK0lIdGNibHh1SUNBZ0lDQWdJQ0JwWkhCd2NtOTRlU0E5SUdSdmJXRnBianRjYmlBZ0lDQWdJQ0FnWkc5dFlXbHVJRDBnYjNKcFoybHVSRzl0WVdsdU8xeHVYRzRnSUNBZ0lDQWdJR2xrY0ZCeWIzaDVWVkpNSUQwZ1luVnBiR1JWVWt3b2RHaHBjeTV5ZFc1MGFXMWxRMjl1Wm1sbmRYSmhkR2x2Yml3Z0oyTmhkR0ZzYjJkMVpWVlNUSE1uTENBbmFXUndVSEp2ZUhrbkxDQnBaSEJ3Y205NGVTazdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oweHZZV1FnU1dSd0lGQnliM2g1SUdadmNpQmtiMjFoYVc0c0lDY2dLeUJrYjIxaGFXNGdLeUFuSURvZ0p5d2dhV1J3VUhKdmVIbFZVa3dwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpZWFJoYkc5bmRXVXVaMlYwU1dSd1VISnZlSGxFWlhOamNtbHdkRzl5S0dsa2NGQnliM2g1VlZKTUtUdGNiaUFnSUNBZ0lIMHBMblJvWlc0b0tISmxjM1ZzZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsYzNWc2RDazdYRzRnSUNBZ0lDQjlLUzVqWVhSamFDZ29jbVZoYzI5dUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2h5WldGemIyNHBPMXh1SUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRVpYTmpjbWx3ZEc5eWN6dGNiaUlzSW1sdGNHOXlkQ0I3WkdsMmFXUmxWVkpNTENCbGJYQjBlVTlpYW1WamRIMGdabkp2YlNBbkxpNHZkWFJwYkhNdmRYUnBiSE1uTzF4dWFXMXdiM0owSUVSbGMyTnlhWEIwYjNKeklHWnliMjBnSnk0dlJHVnpZM0pwY0hSdmNuTW5PMXh1YVcxd2IzSjBJRUZrWkhKbGMzTkJiR3h2WTJGMGFXOXVJR1p5YjIwZ0p5NHVMMkZzYkc5allYUnBiMjR2UVdSa2NtVnpjMEZzYkc5allYUnBiMjRuTzF4dVhHNWpiR0Z6Y3lCTWIyRmtaWElnZTF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0hKMWJuUnBiV1ZEYjI1bWFXZDFjbUYwYVc5dUtTQjdYRzRnSUNBZ2FXWWdLQ0Z5ZFc1MGFXMWxRMjl1Wm1sbmRYSmhkR2x2YmlrZ2RHaHliM2NnUlhKeWIzSW9KMVJvWlNCa1pYTmpjbWx3ZEc5eUlHNWxaV1FnZEc4Z2EyNXZkeUIwYUdVZ2NuVnVkR2x0WlNCamIyNW1hV2QxY21GMGFXOXVKeWs3WEc0Z0lDQWdkR2hwY3k1eWRXNTBhVzFsUTI5dVptbG5kWEpoZEdsdmJpQTlJSEoxYm5ScGJXVkRiMjVtYVdkMWNtRjBhVzl1TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmxkQ0J5ZFc1MGFXMWxJSFZ5YkZ4dUlDQWdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZDlJSFpoYkhWbElISjFiblJwYldWVlVreGNiaUFnSUNvdlhHNGdJSE5sZENCeWRXNTBhVzFsVlZKTUtIWmhiSFZsS1NCN1hHNGdJQ0FnZEdocGN5NWZjblZ1ZEdsdFpWVlNUQ0E5SUhaaGJIVmxPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVkbGRDQnlkVzUwYVcxbElIVnliRnh1SUNBZ0tpQkFjbVYwZFhKdUlIdHpkSEpwYm1kOUlIWmhiSFZsSUhKMWJuUnBiV1ZWVWt4Y2JpQWdJQ292WEc0Z0lHZGxkQ0J5ZFc1MGFXMWxWVkpNS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXlkVzUwYVcxbFZWSk1PMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZObGRDQlNaV2RwYzNSeWVTQmpiMjF3YjI1bGJuUmNiaUFnSUNvZ1FIQmhjbUZ0SUNCN1VtVm5hWE4wY25sOUlIWmhiSFZsSUZKbFoybHpkSEo1SUVOdmJYQnZibVZ1ZEZ4dUlDQWdLaTljYmlBZ2MyVjBJSEpsWjJsemRISjVLSFpoYkhWbEtTQjdYRzRnSUNBZ2RHaHBjeTVmY21WbmFYTjBjbmtnUFNCMllXeDFaVHRjYmx4dUlDQWdJQzh2SUVsdWMzUmhiR3dnUVdSa2NtVnpjMEZzYkc5allYUnBiMjVjYmlBZ0lDQnNaWFFnWVdSa2NtVnpjMEZzYkc5allYUnBiMjRnUFNCdVpYY2dRV1JrY21WemMwRnNiRzlqWVhScGIyNG9kR2hwY3k1ZmNuVnVkR2x0WlZWU1RDd2dkR2hwY3k1ZmJXVnpjMkZuWlhOQ2RYTXNJSFJvYVhNdVgzSmxaMmx6ZEhKNUtUdGNiaUFnSUNCMGFHbHpMbDloWkdSeVpYTnpRV3hzYjJOaGRHbHZiaUE5SUdGa1pISmxjM05CYkd4dlkyRjBhVzl1TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFZGxkQ0JTWldkcGMzUnllU0JqYjIxd2IyNWxiblJjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVbVZuYVhOMGNubDlJRkpsWjJsemRISjVJR052YlhCdmJtVnVkRnh1SUNBZ0tpOWNiaUFnWjJWMElISmxaMmx6ZEhKNUtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WldkcGMzUnllVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUWdVblZ1ZEdsdFpTQkRZWFJoYkc5bmRXVWdRMjl0Y0c5dVpXNTBYRzRnSUNBcUlFQndZWEpoYlNBZ2UxSjFiblJwYldWRFlYUmhiRzluZFdWOUlIWmhiSFZsSUhKMWJuUnBiV1VnWTJGMFlXeHZaM1ZsSUdOdmJYQnZibVZ1ZEZ4dUlDQWdLaTljYmlBZ2MyVjBJSEoxYm5ScGJXVkRZWFJoYkc5bmRXVW9kbUZzZFdVcElIdGNiaUFnSUNCMGFHbHpMbDl5ZFc1MGFXMWxRMkYwWVd4dlozVmxJRDBnZG1Gc2RXVTdYRzVjYmlBZ0lDQjBhR2x6TG1SbGMyTnlhWEIwYjNKeklEMGdibVYzSUVSbGMyTnlhWEIwYjNKektIUm9hWE11WDNKMWJuUnBiV1ZWVWt3c0lIWmhiSFZsTENCMGFHbHpMbkoxYm5ScGJXVkRiMjVtYVdkMWNtRjBhVzl1S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFFnVW5WdWRHbHRaU0JEWVhSaGJHOW5kV1VnWTI5dGNHOXVaVzUwWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMUoxYm5ScGJXVkRZWFJoYkc5bmRXVjlJRkoxYm5ScGJXVWdRMkYwWVd4dlozVmxJR052YlhCdmJtVnVkRnh1SUNBZ0tpOWNiaUFnWjJWMElISjFiblJwYldWRFlYUmhiRzluZFdVb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM0oxYm5ScGJXVkRZWFJoYkc5bmRXVTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWMElFMWxjM05oWjJVZ1FuVnpJR052YlhCdmJtVnVkRnh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdE5aWE56WVdkbFFuVnpmU0IyWVd4MVpTQk5aWE56WVdkbElHSjFjeUJqYjIxd2IyNWxiblJjYmlBZ0lDb3ZYRzRnSUhObGRDQnRaWE56WVdkbFFuVnpLSFpoYkhWbEtTQjdYRzRnSUNBZ2RHaHBjeTVmYldWemMyRm5aWE5DZFhNZ1BTQjJZV3gxWlR0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkhaWFFnVFdWemMyRm5aU0JDZFhNZ1kyOXRjRzl1Wlc1MFhHNGdJQ0FxSUVCeVpYUjFjbTRnZTAxbGMzTmhaMlZDZFhOOUlFMWxjM05oWjJVZ1FuVnpJR052YlhCdmJtVnVkRnh1SUNBZ0tpOWNiaUFnWjJWMElHMWxjM05oWjJWQ2RYTW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDIxbGMzTmhaMlZ6UW5Wek8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5sZENCU2RXNTBhVzFsSUVaaFkzUnZjbmtnWTI5dGNHOXVaVzUwWEc0Z0lDQXFJRUJ3WVhKaGJTQWdlM0oxYm5ScGJXVkdZV04wYjNKNWZTQjJZV3gxWlNCR1lXTjBiM0o1SUdsdVkyeDFaR1Z6SUhSb1pTQnpjR1ZqYVdacFl5QnBiWEJzWlcxbGJuUmhkR2x2Ym5NZ1ptOXlJR1ZoWTJnZ1pXNTJhWEp2Ym0xbGJuUmNiaUFnSUNvdlhHNGdJSE5sZENCeWRXNTBhVzFsUm1GamRHOXllU2gyWVd4MVpTa2dlMXh1SUNBZ0lIUm9hWE11WDNKMWJuUnBiV1ZHWVdOMGIzSjVJRDBnZG1Gc2RXVTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUjJWMElGSjFiblJwYldVZ1JtRmpkRzl5ZVNCamIyMXdiMjVsYm5SY2JpQWdJQ29nUUhKbGRIVnliaUI3Y25WdWRHbHRaVVpoWTNSdmNubDlJRkoxYm5ScGJXVWdSbUZqZEc5eWVTQmpiMjF3YjI1bGJuUmNiaUFnSUNvdlhHNGdJR2RsZENCeWRXNTBhVzFsUm1GamRHOXllU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmNuVnVkR2x0WlVaaFkzUnZjbms3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCRVpYQnNiM2tnU0hsd1pYSjBlU0JtY205dElFTmhkR0ZzYjJkMVpTQlZVa3hjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFZVa3d1U0hsd1pYSjBlVU5oZEdGc2IyZDFaVlZTVEgwZ0lDQWdhSGx3WlhKMGVTQm9lWEJsY25SNVJHVnpZM0pwY0hSdmNpQjFjbXc3WEc0Z0lDb3ZYRzRnSUd4dllXUkllWEJsY25SNUtHaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eVZWSk1LU0I3WEc1Y2JpQWdJQ0JwWmlBb0lYUm9hWE11WDNKbFlXUjVWRzlWYzJVb0tTa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJR2xtSUNnaGFIbHdaWEowZVVSbGMyTnlhWEIwYjNKVlVrd3BJSFJvY205M0lHNWxkeUJGY25KdmNpZ25TSGx3WlhKMGVTQmtaWE5qY21sd2RHOXlJSFZ5YkNCd1lYSmhiV1YwWlhJZ2FYTWdibVZsWkdWa0p5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dVhHNGdJQ0FnSUNCc1pYUWdYMmg1Y0dWeWRIbFZVa3c3WEc0Z0lDQWdJQ0JzWlhRZ1gyaDVjR1Z5ZEhsVFlXNWtZbTk0TzF4dUlDQWdJQ0FnYkdWMElGOW9lWEJsY25SNVJHVnpZM0pwY0hSdmNqdGNiaUFnSUNBZ0lHeGxkQ0JmYUhsd1pYSjBlVk52ZFhKalpWQmhZMnRoWjJVN1hHNGdJQ0FnSUNCc1pYUWdhR0YyWlVWeWNtOXlJRDBnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJR3hsZENCbGNuSnZjbEpsWVhOdmJpQTlJQ2h5WldGemIyNHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduVTI5dFpYUm9hVzVuSUdaaGFXeGxaQ0J2YmlCMGFHVWdaR1Z3Ykc5NUlHaDVjR1Z5ZEhrNklDY3NJSEpsWVhOdmJpazdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDaHlaV0Z6YjI0cE8xeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdiR1YwSUdoaGJtUnNaVVZ5Y205eUlEMGdLSEpsWVhOdmJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNCb1lYWmxSWEp5YjNJZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvY21WaGMyOXVLVHRjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUM4dklFZGxkQ0JJZVhCbGNuUjVJR1JsYzJOeWFYQjBiM0pjYmlBZ0lDQWdJQzh2SUZSUFJFODZJSFJvWlNCeVpYRjFaWE4wSUUxdlpIVnNaU0J6YUc5MWJHUWdZbVVnWTJoaGJtZGxaQ3hjYmlBZ0lDQWdJQzh2SUdKbFkyRjFjMlVnWVhRZ2RHaHBjeUJ0YjIxbGJuUWdhWFFnYVhNZ2FXNWpiMjF3WVhScFlteGxJSGRwZEdnZ2JtOWtaV3B6TzF4dUlDQWdJQ0FnTHk4Z1VISnZZbUZpYkhrZ2QyVWdibVZsWkNCMGJ5QndZWE56SUdFZ1ptRmpkRzl5ZVNCc2FXdGxJSGRsSUdSdklHWnZjaUJ6WVc1a1ltOTRaWE03WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTQkllWEJsY25SNUlDMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFNjcE8xeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RIWlhRZ2FIbHdaWEowZVNCa1pYTmpjbWx3ZEc5eUlHWnZjaUE2Snl3Z2FIbHdaWEowZVVSbGMyTnlhWEIwYjNKVlVrd3BPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WkdWelkzSnBjSFJ2Y25NdVoyVjBTSGx3WlhKMGVVUmxjMk55YVhCMGIzSW9hSGx3WlhKMGVVUmxjMk55YVhCMGIzSlZVa3dwWEc0Z0lDQWdJQ0F1ZEdobGJpZ29hSGx3WlhKMGVVUmxjMk55YVhCMGIzSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdZWFFnZEdocGN5QndiMmx1ZEN3Z2QyVWdhR0YyWlNCamIyMXdiR1YwWldRZ1hDSnpkR1Z3SURJZ1lXNWtJRE5jSWlCaGN5QnphRzkzYmlCcGJpQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMW9lWEJsY25SNUxtMWtYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbk1Ub2djbVYwZFhKdUlHaDVjR1Z5ZEhrZ1pHVnpZM0pwY0hSdmNpY3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHaDVjR1Z5ZEhrZ1kyOXVkR0ZwYm5NZ2RHaGxJR1oxYkd3Z2NHRjBhQ0J2WmlCMGFHVWdZMkYwWVd4dlozVmxJRlZTVEN3Z1pTNW5MbHh1SUNBZ0lDQWdJQ0F2THlCallYUmhiRzluZFdVdWNtVjBhR2x1YXk1bGRTOHVkMlZzYkMxcmJtOTNiaTh1TGk0dUxpNHVMaTR1WEc0Z0lDQWdJQ0FnSUY5b2VYQmxjblI1UkdWelkzSnBjSFJ2Y2lBOUlHaDVjR1Z5ZEhsRVpYTmpjbWx3ZEc5eU8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCemIzVnlZMlZRWVdOcllXZGxWVkpNSUQwZ2FIbHdaWEowZVVSbGMyTnlhWEIwYjNJdWMyOTFjbU5sVUdGamEyRm5aVlZTVER0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYzI5MWNtTmxVR0ZqYTJGblpWVlNUQ0E5UFQwZ0p5OXpiM1Z5WTJWUVlXTnJZV2RsSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm9lWEJsY25SNVJHVnpZM0pwY0hSdmNpNXpiM1Z5WTJWUVlXTnJZV2RsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnUjJWMElIUm9aU0JvZVhCbGNuUjVJSE52ZFhKalpTQmpiMlJsWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSjFiblJwYldWRFlYUmhiRzluZFdVdVoyVjBVMjkxY21ObFVHRmphMkZuWlVaeWIyMVZVa3dvYzI5MWNtTmxVR0ZqYTJGblpWVlNUQ2s3WEc0Z0lDQWdJQ0I5TENCb1lXNWtiR1ZGY25KdmNpbGNiaUFnSUNBZ0lDNTBhR1Z1S0NoemIzVnlZMlZRWVdOcllXZGxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hvWVhabFJYSnliM0lwSUhKbGRIVnliaUJtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p6STZJSEpsZEhWeWJpQm9lWEJsY25SNUlITnZkWEpqWlNCamIyUmxKeWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdZWFFnZEdocGN5QndiMmx1ZEN3Z2QyVWdhR0YyWlNCamIyMXdiR1YwWldRZ1hDSnpkR1Z3SURRZ1lXNWtJRFZjSWlCaGN5QnphRzkzYmlCcGJpQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMW9lWEJsY25SNUxtMWtYRzVjYmlBZ0lDQWdJQ0FnWDJoNWNHVnlkSGxUYjNWeVkyVlFZV05yWVdkbElEMGdjMjkxY21ObFVHRmphMkZuWlR0Y2JseHVJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0F2THlCemRHVndjeUEySUMwdElEa2dZWEpsSUhOcmFYQndaV1F1WEc0Z0lDQWdJQ0FnSUM4dklGUlBSRTg2SUc5dUlISmxiR1ZoYzJVZ2IyWWdZMjl5WlNBd0xqSTdYRzRnSUNBZ0lDQWdJQzh2SUZSUFJFODZJRkJ5YjIxcGMyVWdkRzhnWTJobFkyc2dkR2hsSUhCdmJHbGplU0JsYm1kcGJtVmNibHh1SUNBZ0lDQWdJQ0F2THlCdGIyTnJMWFZ3SUdOdlpHVTdYRzRnSUNBZ0lDQWdJQzh2SUhSbGJYQnZjbUZ5ZVNCamIyUmxMQ0J2Ym14NVhHNGdJQ0FnSUNBZ0lHeGxkQ0J3YjJ4cFkza2dQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndiMnhwWTNrN1hHNGdJQ0FnSUNCOUxDQm9ZVzVrYkdWRmNuSnZjaWxjYmlBZ0lDQWdJQzUwYUdWdUtDaHdiMnhwWTNsU1pYTjFiSFFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0doaGRtVkZjbkp2Y2lrZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p6TTZJSEpsZEhWeWJpQndiMnhwWTNrZ1pXNW5hVzVsSUhKbGMzVnNkQ2NnS3lCd2IyeHBZM2xTWlhOMWJIUXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnTmlCMGJ5QTVJRzltSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFdoNWNHVnlkSGt1YldRZ2NtbG5hSFFnYm05M0xseHVJQ0FnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdJQ0F2THlCVGRHVndjeUEySUMwdElEbGNiaUFnSUNBZ0lDQWdMeThnUVhNZ1lTQnlaWE4xYkhRZ2IyWWdkR2hsSUhOcGNIQmxaQ0J6ZEdWd2N5d2dkMlVnYTI1dmR5QmhkQ0IwYUdseklIQnZhVzUwSUdsbUlIZGxJR1Y0WldOMWRHVmNiaUFnSUNBZ0lDQWdMeThnYVc1VFlXMWxVMkZ1WkdKdmVDQnZjaUJ1YjNRdVhHNGdJQ0FnSUNBZ0lDOHZYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1JtOXlJSFJsYzNScGJtY3NJR3AxYzNRZ1lYTnpkVzFsSUhkbElHVjRaV04xZEdVZ2FXNGdjMkZ0WlNCVFlXNWtZbTk0TGx4dUlDQWdJQ0FnSUNCc1pYUWdhVzVUWVcxbFUyRnVaR0p2ZUNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUd4bGRDQnpZVzVrWW05NE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNocGJsTmhiV1ZUWVc1a1ltOTRLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIwYUdseklHUnZiaWQwSUc1bFpXUWdZbVVnWVNCUWNtOXRhWE5sTzF4dUlDQWdJQ0FnSUNBZ0lITmhibVJpYjNnZ1BTQjBhR2x6TG5KbFoybHpkSEo1TG1kbGRFRndjRk5oYm1SaWIzZ29LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJSGRsSUdoaGRtVWdZMjl0Y0d4bGRHVmtJSE4wWlhBZ01URWdhR1Z5WlM1Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJR3hsZENCa2IyMWhhVzRnUFNCa2FYWnBaR1ZWVWt3b2FIbHdaWEowZVVSbGMyTnlhWEIwYjNKVlVrd3BMbVJ2YldGcGJqdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklHZGxkRk5oYm1SaWIzZ3NJSFJvYVhNZ2QybHNiQ0J5WlhSMWNtNGdZU0J3Y205dGFYTmxPMXh1SUNBZ0lDQWdJQ0FnSUhOaGJtUmliM2dnUFNCMGFHbHpMbkpsWjJsemRISjVMbWRsZEZOaGJtUmliM2dvWkc5dFlXbHVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJSFJvYVhNZ2QybHNiQ0J5WlhSMWNtNGdkR2hsSUhOaGJtUmliM2dnYjNJZ2IyNWxJSEJ5YjIxcGMyVWdkRzhnWjJWMFUyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOaGJtUmliM2c3WEc0Z0lDQWdJQ0I5TENCb1lXNWtiR1ZGY25KdmNpbGNiaUFnSUNBZ0lDNTBhR1Z1S0NoellXNWtZbTk0S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNob1lYWmxSWEp5YjNJcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDYzBPaUJ5WlhSMWNtNGdkR2hsSUhOaGJtUmliM2duTENCellXNWtZbTk0S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJTWlhSMWNtNGdkR2hsSUhOaGJtUmliM2dnYVc1a1pYQmxiblJsYkhrZ2FXWWdhWFFnY25WdWJtbHVaeUJwYmlCMGFHVWdjMkZ0WlNCellXNWtZbTk0SUc5eUlHNXZkRnh1SUNBZ0lDQWdJQ0F2THlCM1pTQm9ZWFpsSUdOdmJYQnNaWFJsWkNCemRHVndJREUwSUdobGNtVXVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpZVzVrWW05NE8xeHVJQ0FnSUNBZ2ZTd2dLSEpsWVhOdmJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9hR0YyWlVWeWNtOXlLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSnpRdU1Ub2dWSEo1SUhSdklISmxaMmx6ZEdWeUlHRWdibVYzSUhOaGJtUmliM2duS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJqYUdWamF5QnBaaUIwYUdVZ2MyRnVaR0p2ZUNCcGN5QnlaV2RwYzNSbFpDQm1iM0lnZEdocGN5Qm9lWEJsY25SNUlHUmxjMk55YVhCMGIzSWdkWEpzTzF4dUlDQWdJQ0FnSUNBdkx5Qk5ZV3RsSUZOMFpYQnpJSGg0ZUNBdExTMGdlSGg0WEc0Z0lDQWdJQ0FnSUM4dklFbHVjM1JoYm5ScFlYUmxJSFJvWlNCVFlXNWtZbTk0WEc0Z0lDQWdJQ0FnSUd4bGRDQnpZVzVrWW05NElEMGdkR2hwY3k1ZmNuVnVkR2x0WlVaaFkzUnZjbmt1WTNKbFlYUmxVMkZ1WkdKdmVDZ3BPMXh1WEc0Z0lDQWdJQ0FnSUhOaGJtUmliM2d1WVdSa1RHbHpkR1Z1WlhJb0p5b25MQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpZVzVrWW05NE8xeHVJQ0FnSUNBZ2ZTd2dhR0Z1Wkd4bFJYSnliM0lwWEc0Z0lDQWdJQ0F1ZEdobGJpZ29jMkZ1WkdKdmVDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9hR0YyWlVWeWNtOXlLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTlRvZ2NtVjBkWEp1SUhOaGJtUmliM2dnWVc1a0lISmxaMmx6ZEdWeUp5azdYRzVjYmlBZ0lDQWdJQ0FnWDJoNWNHVnlkSGxUWVc1a1ltOTRJRDBnYzJGdVpHSnZlRHRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdiblZ0WW1WeVQyWkJaR1J5WlhOelpYTWdQU0F4TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZV1JrY21WemMwRnNiRzlqWVhScGIyNHVZM0psWVhSbEtIUm9hWE11WDNKbFoybHpkSEo1TGw5a2IyMWhhVzRzSUc1MWJXSmxjazltUVdSa2NtVnpjMlZ6TENCZmFIbHdaWEowZVVSbGMyTnlhWEIwYjNJc0lDZG9lWEJsY25SNUp5azdYRzRnSUNBZ0lDQjlMQ0JvWVc1a2JHVkZjbkp2Y2lsY2JpQWdJQ0FnSUM1MGFHVnVLQ2hoWkdSeVpYTnpaWE1wSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0doaGRtVkZjbkp2Y2lrZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p6WTZJSEpsZEhWeWJpQjBhR1VnWVdSa2NtVnpjMlZ6SUdadmNpQjBhR1VnYUhsd1pYSjBlU2NwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRkpsWjJsemRHVnlJR2g1Y0dWeWRIbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y21WbmFYTjBjbmt1Y21WbmFYTjBaWEpJZVhCbGNuUjVLRjlvZVhCbGNuUjVVMkZ1WkdKdmVDd2dhSGx3WlhKMGVVUmxjMk55YVhCMGIzSlZVa3dzSUY5b2VYQmxjblI1UkdWelkzSnBjSFJ2Y2l3Z1lXUmtjbVZ6YzJWektUdGNiaUFnSUNBZ0lIMHNJR2hoYm1Sc1pVVnljbTl5S1Z4dUlDQWdJQ0FnTG5Sb1pXNG9LR2g1Y0dWeWRIbFZVa3dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0doaGRtVkZjbkp2Y2lrZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p6YzZJRWg1Y0dWeWRIa2dkWEpzTENCaFpuUmxjaUJ5WldkcGMzUmxjaUJvZVhCbGNuUjVKeXdnYUhsd1pYSjBlVlZTVENrN1hHNWNiaUFnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQXhOaUJ2WmlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxb2VYQmxjblI1TG0xa0lISnBaMmgwSUc1dmR5NWNiaUFnSUNBZ0lDQWdYMmg1Y0dWeWRIbFZVa3dnUFNCb2VYQmxjblI1VlZKTU8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVWNGRHVnVaQ0J2Y21sbmFXNWhiQ0JvZVhCbGNuUjVJR052Ym1acFozVnlZWFJwYjI0N1hHNGdJQ0FnSUNBZ0lHeGxkQ0JqYjI1bWFXZDFjbUYwYVc5dUlEMGdlMzA3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2haVzF3ZEhsUFltcGxZM1FvWDJoNWNHVnlkSGxFWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVhScGIyNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlYUnBiMjRnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCS1UwOU9MbkJoY25ObEtGOW9lWEJsY25SNVJHVnpZM0pwY0hSdmNpNWpiMjVtYVdkMWNtRjBhVzl1S1NrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhkR2x2YmlBOUlGOW9lWEJsY25SNVJHVnpZM0pwY0hSdmNpNWpiMjVtYVdkMWNtRjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1bWFXZDFjbUYwYVc5dUxuSjFiblJwYldWVlVrd2dQU0IwYUdsekxsOXlkVzUwYVcxbFZWSk1PMXh1WEc0Z0lDQWdJQ0FnSUM4dklGZGxJSGRwYkd3Z1pHVndiRzk1SUhSb1pTQmpiMjF3YjI1bGJuUWdMU0J6ZEdWd0lERTNJRzltSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFdoNWNHVnlkSGt1YldRZ2NtbG5hSFFnYm05M0xseHVYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlGOW9lWEJsY25SNVUyRnVaR0p2ZUM1a1pYQnNiM2xEYjIxd2IyNWxiblFvWDJoNWNHVnlkSGxUYjNWeVkyVlFZV05yWVdkbExuTnZkWEpqWlVOdlpHVXNJRjlvZVhCbGNuUjVWVkpNTENCamIyNW1hV2QxY21GMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0owVnljbTl5SUc5dUlHUmxjR3h2ZVNCamIyMXdiMjVsYm5RNkp5d2daU2s3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0dVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlMQ0JvWVc1a2JHVkZjbkp2Y2lsY2JpQWdJQ0FnSUM1MGFHVnVLQ2hrWlhCc2IzbERiMjF3YjI1bGJuUlRkR0YwZFhNcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHaGhkbVZGY25KdmNpa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9Kemc2SUVSbGNHeHZlU0JqYjIxd2IyNWxiblFnYzNSaGRIVnpJR1p2Y2lCb2VYQmxjblI1T2lBbkxDQmtaWEJzYjNsRGIyMXdiMjVsYm5SVGRHRjBkWE1wTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJSGRsSUdoaGRtVWdZMjl0Y0d4bGRHVmtJSE4wWlhBZ01Ua2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RhSGx3WlhKMGVTNXRaQ0J5YVdkb2RDQnViM2N1WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRV1JrSUhSb1pTQnRaWE56WVdkbElHSjFjeUJzYVhOMFpXNWxjaUIwYnlCMGFHVWdZWEJ3VTJGdVpHSnZlQ0J2Y2lCb2VYQmxjblJUWVc1a1ltOTRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMWxjM05oWjJWQ2RYTXVZV1JrVEdsemRHVnVaWElvWDJoNWNHVnlkSGxWVWt3c0lDaHRjMmNwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JmYUhsd1pYSjBlVk5oYm1SaWIzZ3VjRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NBeU1DQnZaaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzFvZVhCbGNuUjVMbTFrSUhKcFoyaDBJRzV2ZHk1Y2JpQWdJQ0FnSUNBZ2JHVjBJR2g1Y0dWeWRIa2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NuVnVkR2x0WlVoNWNHVnlkSGxWVWt3NklGOW9lWEJsY25SNVZWSk1MRnh1SUNBZ0lDQWdJQ0FnSUhOMFlYUjFjem9nWkdWd2JHOTVRMjl0Y0c5dVpXNTBVM1JoZEhWelhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2hvZVhCbGNuUjVLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SURJeElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxXaDVjR1Z5ZEhrdWJXUWdjbWxuYUhRZ2JtOTNMbHh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTQkZUa1FnTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRKeWs3WEc0Z0lDQWdJQ0I5TENCb1lXNWtiR1ZGY25KdmNpbGNiaUFnSUNBZ0lDNWpZWFJqYUNobGNuSnZjbEpsWVhOdmJpazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJFWlhCc2Iza2dVM1IxWWlCbWNtOXRJRU5oZEdGc2IyZDFaU0JWVWt3Z2IzSWdaRzl0WVdsdUlIVnliRnh1SUNBcUlFQndZWEpoYlNBZ2UxVlNUQzVWVWt4OUlDQWdJQ0JrYjIxaGFXNGdJQ0FnSUNBZ0lDQWdaRzl0WVdsdVhHNGdJQ292WEc0Z0lHeHZZV1JUZEhWaUtIQnliM1J2YzNSMVlsVlNUQ2tnZTF4dVhHNGdJQ0FnYVdZZ0tDRjBhR2x6TGw5eVpXRmtlVlJ2VlhObEtDa3BJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0JwWmlBb0lYQnliM1J2YzNSMVlsVlNUQ2tnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RRY205MGIxTjBkV0lnWkdWelkzSnBjSFJ2Y2lCMWNtd2djR0Z5WVcxbGRHVnlJR2x6SUc1bFpXUmxaQ2NwTzF4dVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUQwK0lIdGNibHh1SUNBZ0lDQWdiR1YwSUdSdmJXRnBiaUE5SUdScGRtbGtaVlZTVENod2NtOTBiM04wZFdKVlVrd3BMbVJ2YldGcGJqdGNibHh1SUNBZ0lDQWdhV1lnS0NGa2IyMWhhVzRwSUh0Y2JpQWdJQ0FnSUNBZ1pHOXRZV2x1SUQwZ2NISnZkRzl6ZEhWaVZWSk1PMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ1gzTjBkV0pUWVc1a1ltOTRPMXh1SUNBZ0lDQWdiR1YwSUY5emRIVmlSR1Z6WTNKcGNIUnZjanRjYmlBZ0lDQWdJR3hsZENCZmNuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1REdGNiaUFnSUNBZ0lHeGxkQ0JmYzNSMVlsTnZkWEpqWlZCaFkydGhaMlU3WEc0Z0lDQWdJQ0JzWlhRZ2FHRjJaVVZ5Y205eUlEMGdabUZzYzJVN1hHNWNiaUFnSUNBZ0lHeGxkQ0JsY25KdmNsSmxZWE52YmlBOUlDaHlaV0Z6YjI0cElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25VMjl0WlhSb2FXNW5JR1poYVd4bFpDQnZiaUIwYUdVZ1pHVndiRzk1SUc5bUlIQnliM1J2WTI5c2MzUjFZam9nSnl3Z2NtVmhjMjl1S1R0Y2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0hKbFlYTnZiaWs3WEc0Z0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNCc1pYUWdhR0Z1Wkd4bFJYSnliM0lnUFNBb2NtVmhjMjl1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR2hoZG1WRmNuSnZjaUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDaHlaV0Z6YjI0cE8xeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdMeThnUkdselkyOTJaWElnVUhKdmRHOWpiMndnVTNSMVlseHVJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2N0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0SUZCeWIzUnZVM1IxWWlBdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMxY1hHNG5LVHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblJHbHpZMjkyWlhJZ2IzSWdRM0psWVhSbElHRWdibVYzSUZCeWIzUnZVM1IxWWlCbWIzSWdaRzl0WVdsdU9pQW5MQ0JrYjIxaGFXNHBPMXh1SUNBZ0lDQWdkR2hwY3k1eVpXZHBjM1J5ZVM1a2FYTmpiM1psY2xCeWIzUnZjM1IxWWloa2IyMWhhVzRwTG5Sb1pXNG9LSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdMeThnU1hNZ2NtVm5hWE4wWldRL1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduTVM0Z1VISnZkRzhnVTNSMVlpQkVhWE5qYjNabGNtVmtJR1p2Y2lBbkxDQmtiMjFoYVc0c0lDYzZJQ2NzSUhKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3cE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdNaUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzF3Y205MGIzTjBkV0l1YldSY2JseHVJQ0FnSUNBZ0lDQXZMeUJVVDBSUE9pQkRhR1ZqYXlCcFppQjBhR1VnYzNSaGRIVnpJR2x6SUhOaGRtVmtJR2x1SUhSb1pTQnpkR0YwZFhNZ2IyWWdjMkZ1WkdKdmVEdGNiaUFnSUNBZ0lDQWdMeThnYkdWMElITjBkV0lnUFNCN1hHNGdJQ0FnSUNBZ0lDOHZJQ0FnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVERvZ2NuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDeGNiaUFnSUNBZ0lDQWdMeThnSUNCemRHRjBkWE02SUNka1pYQnNiM2xsWkNkY2JpQWdJQ0FnSUNBZ0x5OGdmVHRjYmlBZ0lDQWdJQ0FnYkdWMElITjBkV0lnUFNCMGFHbHpMbkpsWjJsemRISjVMbkJ5YjNSdmMzUjFZbk5NYVhOMFcyUnZiV0ZwYmwwN1hHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2MzUjFZaWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25MUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMU0JGVGtRZ0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdFhGeHVKeWs3WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnTG1OaGRHTm9LQ2h5WldGemIyNHBJRDArSUh0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJwY3lCdWIzUWdjbVZuYVhOMFpXUS9YRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbk1TNGdVSEp2ZEc4Z1UzUjFZaUJ1YjNRZ1ptOTFibVFnSnlBcklISmxZWE52YmlrN1hHNWNiaUFnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQXpJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4dVhHNGdJQ0FnSUNBZ0lDOHZJSGRsSUc1bFpXUWdkRzhnWjJWMElGQnliM1J2VTNSMVlpQmtaWE5qY21sd2RHOXlJSE4wWlhBZ05DQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmlBZ0lDQWdJQ0FnZEdocGN5NWtaWE5qY21sd2RHOXljeTVuWlhSVGRIVmlSR1Z6WTNKcGNIUnZjaWh3Y205MGIzTjBkV0pWVWt3cFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0NoemRIVmlSR1Z6WTNKcGNIUnZjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNob1lYWmxSWEp5YjNJcElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9Kekl1SUhKbGRIVnliaUIwYUdVZ1VISnZkRzlUZEhWaUlHUmxjMk55YVhCMGIzSW5LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJSGRsSUdoaGRtVWdZMjl0Y0d4bGRHVmtJSE4wWlhBZ05TQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmlBZ0lDQWdJQ0FnSUNCZmMzUjFZa1JsYzJOeWFYQjBiM0lnUFNCemRIVmlSR1Z6WTNKcGNIUnZjanRjYmx4dUlDQWdJQ0FnSUNBZ0lHeGxkQ0J6YjNWeVkyVlFZV05yWVdkbFZWSk1JRDBnYzNSMVlrUmxjMk55YVhCMGIzSXVjMjkxY21ObFVHRmphMkZuWlZWU1REdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHpiM1Z5WTJWUVlXTnJZV2RsVlZKTUlEMDlQU0FuTDNOdmRYSmpaVkJoWTJ0aFoyVW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzUjFZa1JsYzJOeWFYQjBiM0l1YzI5MWNtTmxVR0ZqYTJGblpUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIzWlNCdVpXVmtJSFJ2SUdkbGRDQlFjbTkwYjFOMGRXSWdVMjkxY21ObElHTnZaR1VnWm5KdmJTQmtaWE5qY21sd2RHOXlJQzBnYzNSbGNDQTJJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkoxYm5ScGJXVkRZWFJoYkc5bmRXVXVaMlYwVTI5MWNtTmxVR0ZqYTJGblpVWnliMjFWVWt3b2MyOTFjbU5sVUdGamEyRm5aVlZTVENrN1hHNGdJQ0FnSUNBZ0lIMHNJR2hoYm1Sc1pVVnljbTl5S1Z4dUlDQWdJQ0FnSUNBdVkyRjBZMmdvWlhKeWIzSlNaV0Z6YjI0cFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0NoemRIVmlVMjkxY21ObFVHRmphMkZuWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWFpsUlhKeWIzSXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpNdUlISmxkSFZ5YmlCMGFHVWdVSEp2ZEc5VGRIVmlJRk52ZFhKalpTQkRiMlJsSnlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCM1pTQm9ZWFpsSUdOdmJYQnNaWFJsWkNCemRHVndJRGNnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hHNWNiaUFnSUNBZ0lDQWdJQ0JmYzNSMVlsTnZkWEpqWlZCaFkydGhaMlVnUFNCemRIVmlVMjkxY21ObFVHRmphMkZuWlR0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUZSUFJFODZJRU5vWldOcklHOXVJRkJGVUNBb2NHOXNhV041SUVWdVoybHVaU2tnYVdZZ2QyVWdibVZsWkNCMGFHVWdjMkZ1WkdKdmVDQmhibVFnWTJobFkyc2dhV1lnZEdobElGTmhibVJpYjNnZ1JtRmpkRzl5ZVNCb1lYWmxJSFJvWlNCamIyNTBaWGgwSUhOaGJtUmliM2c3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEJ2YkdsamVTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIQnZiR2xqZVR0Y2JpQWdJQ0FnSUNBZ2ZTd2dhR0Z1Wkd4bFJYSnliM0lwWEc0Z0lDQWdJQ0FnSUM1MGFHVnVLQ2h3YjJ4cFkza3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGMlpVVnljbTl5S1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjBhR2x6SUhkcGJHd2djbVYwZFhKdUlIUm9aU0J6WVc1a1ltOTRJRzl5SUc5dVpTQndjbTl0YVhObElIUnZJR2RsZEZOaGJtUmliM2c3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZuYVhOMGNua3VaMlYwVTJGdVpHSnZlQ2hrYjIxaGFXNHBPMXh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBdWRHaGxiaWdvYzNSMVlsTmhibVJpYjNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hR0YyWlVWeWNtOXlLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NjMExpQnBaaUIwYUdVZ2MyRnVaR0p2ZUNCcGN5QnlaV2RwYzNSbGNtVmtJSFJvWlc0Z2NtVjBkWEp1SUhSb1pTQnpZVzVrWW05NElDY3NJSE4wZFdKVFlXNWtZbTk0S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdlSGg0SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2WTI5eVpTMW1jbUZ0WlhkdmNtc3ZZbXh2WWk5dFlYTjBaWEl2Wkc5amN5OXpjR1ZqY3k5eWRXNTBhVzFsTDJSNWJtRnRhV010ZG1sbGR5OWlZWE5wWTNNdlpHVndiRzk1TFhCeWIzUnZjM1IxWWk1dFpGeHVYRzRnSUNBZ0lDQWdJQ0FnWDNOMGRXSlRZVzVrWW05NElEMGdjM1IxWWxOaGJtUmliM2c3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOMGRXSlRZVzVrWW05NE8xeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0F1WTJGMFkyZ29LSEpsWVhOdmJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hvWVhabFJYSnliM0lwSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p6VXVJRk5oYm1SaWIzZ2dkMkZ6SUc1dmRDQm1iM1Z1WkN3Z1kzSmxZWFJwYm1jZ1lTQnVaWGNnYjI1bElDY3NJSEpsWVhOdmJpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCcFppQjBhR1VnYzJGdVpHSnZlQ0JwY3lCeVpXZHBjM1JsWkNCbWIzSWdkR2hwY3lCemRIVmlJR1JsYzJOeWFYQjBiM0lnZFhKc08xeHVJQ0FnSUNBZ0lDQWdJQzh2SUUxaGEyVWdVM1JsY0hNZ2VIaDRJQzB0TFNCNGVIaGNiaUFnSUNBZ0lDQWdJQ0F2THlCSmJuTjBZVzUwYVdGMFpTQjBhR1VnVTJGdVpHSnZlRnh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnpZVzVrWW05NElEMGdkR2hwY3k1ZmNuVnVkR2x0WlVaaFkzUnZjbmt1WTNKbFlYUmxVMkZ1WkdKdmVDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUhOaGJtUmliM2d1WVdSa1RHbHpkR1Z1WlhJb0p5b25MQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iWE5uS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCellXNWtZbTk0TzF4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXVkR2hsYmlnb2MyRnVaR0p2ZUNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWFpsUlhKeWIzSXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpZdUlISmxkSFZ5YmlCMGFHVWdjMkZ1WkdKdmVDQnBibk4wWVc1alpTQmhibVFnY21WbmFYTjBaWEluTENCellXNWtZbTk0TENBbmRHOGdaRzl0WVdsdUlDY3NJR1J2YldGcGJpazdYRzVjYmlBZ0lDQWdJQ0FnSUNCZmMzUjFZbE5oYm1SaWIzZ2dQU0J6WVc1a1ltOTRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkMlVnYm1WbFpDQnlaV2RwYzNSbGNpQnpkSFZpSUc5dUlISmxaMmx6ZEhKNUlDMGdjM1JsY0NCNGVIZ2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZuYVhOMGNua3VjbVZuYVhOMFpYSlRkSFZpS0Y5emRIVmlVMkZ1WkdKdmVDd2daRzl0WVdsdUtUdGNiaUFnSUNBZ0lDQWdmU3dnYUdGdVpHeGxSWEp5YjNJcFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0NoeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2hoZG1WRmNuSnZjaWtnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbk55NGdjbVYwZFhKdUlIUm9aU0J5ZFc1MGFXMWxJSEJ5YjNSdmMzUjFZaUIxY213NklDY3NJSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQjRlSGdnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzlqYjNKbExXWnlZVzFsZDI5eWF5OWliRzlpTDIxaGMzUmxjaTlrYjJOekwzTndaV056TDNKMWJuUnBiV1V2WkhsdVlXMXBZeTEyYVdWM0wySmhjMmxqY3k5a1pYQnNiM2t0Y0hKdmRHOXpkSFZpTG0xa1hHNWNiaUFnSUNBZ0lDQWdJQ0JmY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENBOUlISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrdzdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QkZlSFJsYm1RZ2IzSnBaMmx1WVd3Z2FIbHdaWEowZVNCamIyNW1hV2QxY21GMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmpiMjVtYVdkMWNtRjBhVzl1SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmxiWEIwZVU5aWFtVmpkQ2hmYzNSMVlrUmxjMk55YVhCMGIzSXVZMjl1Wm1sbmRYSmhkR2x2YmlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibVpwWjNWeVlYUnBiMjRnUFNCUFltcGxZM1F1WVhOemFXZHVLSHQ5TENCS1UwOU9MbkJoY25ObEtGOXpkSFZpUkdWelkzSnBjSFJ2Y2k1amIyNW1hV2QxY21GMGFXOXVLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFozVnlZWFJwYjI0Z1BTQmZjM1IxWWtSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjVtYVdkMWNtRjBhVzl1TG5KMWJuUnBiV1ZWVWt3Z1BTQjBhR2x6TGw5eWRXNTBhVzFsVlZKTU8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JHVndiRzk1SUVOdmJYQnZibVZ1ZENCemRHVndJSGg0ZUZ4dUlDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1gzTjBkV0pUWVc1a1ltOTRMbVJsY0d4dmVVTnZiWEJ2Ym1WdWRDaGZjM1IxWWxOdmRYSmpaVkJoWTJ0aFoyVXVjMjkxY21ObFEyOWtaU3dnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVEN3Z1kyOXVabWxuZFhKaGRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduUlhKeWIzSWdiMjRnWkdWd2JHOTVJR052YlhCdmJtVnVkRG9uTENCbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzSUdoaGJtUnNaVVZ5Y205eUtWeHVJQ0FnSUNBZ0lDQXVkR2hsYmlnb1pHVndiRzk1UTI5dGNHOXVaVzUwVTNSaGRIVnpLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0doaGRtVkZjbkp2Y2lrZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25PRG9nY21WMGRYSnVJR1JsY0d4dmVTQmpiMjF3YjI1bGJuUWdabTl5SUhOaGJtUmliM2dnYzNSaGRIVnpPaUFuTENCa1pYQnNiM2xEYjIxd2IyNWxiblJUZEdGMGRYTXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkMlVnYUdGMlpTQmpiMjF3YkdWMFpXUWdjM1JsY0NCNGVIZ2dhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJCWkdRZ2RHaGxJRzFsYzNOaFoyVWdZblZ6SUd4cGMzUmxibVZ5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV0WlhOellXZGxRblZ6TG1Ga1pFeHBjM1JsYm1WeUtGOXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1MQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZjM1IxWWxOaGJtUmliM2d1Y0c5emRFMWxjM05oWjJVb2JYTm5LVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnZUhoNElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxYQnliM1J2YzNSMVlpNXRaRnh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnpkSFZpSUQwZ2RHaHBjeTV5WldkcGMzUnllUzV3Y205MGIzTjBkV0p6VEdsemRGdGtiMjFoYVc1ZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z0x5OGdURzloWkNCVGRIVmlJR1oxYm1OMGFXOXVJSEpsYzI5c2RtVmtJSGRwZEdnZ2MzVmpZMlZ6Y3p0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJzWlhRZ2MzUjFZaUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUFnSUhKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3NklGOXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1MRnh1SUNBZ0lDQWdJQ0FnSUM4dklDQWdjM1JoZEhWek9pQmtaWEJzYjNsRGIyMXdiMjVsYm5SVGRHRjBkWE5jYmlBZ0lDQWdJQ0FnSUNBdkx5QjlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMFJsY0d4dmVXVmtPaUFuTENCemRIVmlMQ0JrYjIxaGFXNHNJSFJvYVhNdWNtVm5hWE4wY25rdWNISnZkRzl6ZEhWaWMweHBjM1FwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHpkSFZpS1R0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnkwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwZ1JVNUVJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnhjYmljcE8xeHVYRzRnSUNBZ0lDQWdJSDBzSUdoaGJtUnNaVVZ5Y205eUtWeHVJQ0FnSUNBZ0lDQXVZMkYwWTJnb1pYSnliM0pTWldGemIyNHBPMXh1WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUgwcE8xeHVYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJFWlhCc2Iza2dhV1J3VUhKdmVIa2dabkp2YlNCRFlYUmhiRzluZFdVZ1ZWSk1JRzl5SUdSdmJXRnBiaUIxY214Y2JpQWdLaUJBY0dGeVlXMGdJSHRWVWt3dVZWSk1mU0FnSUNBZ1pHOXRZV2x1SUNBZ0lDQWdJQ0FnSUdSdmJXRnBibHh1SUNBcUwxeHVJQ0JzYjJGa1NXUndVSEp2ZUhrb2FXUndVSEp2ZUhsVlVrd3BJSHRjYmx4dUlDQWdJR2xtSUNnaGRHaHBjeTVmY21WaFpIbFViMVZ6WlNncEtTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdhV1lnS0NGcFpIQlFjbTk0ZVZWU1RDa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZEpaSEJRY205NGVTQmtaWE5qY21sd2RHOXlJSFZ5YkNCd1lYSmhiV1YwWlhJZ2FYTWdibVZsWkdWa0p5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dVhHNGdJQ0FnSUNCc1pYUWdaRzl0WVdsdUlEMGdaR2wyYVdSbFZWSk1LR2xrY0ZCeWIzaDVWVkpNS1M1a2IyMWhhVzQ3WEc1Y2JpQWdJQ0FnSUdsbUlDZ2haRzl0WVdsdUtTQjdYRzRnSUNBZ0lDQWdJR1J2YldGcGJpQTlJR2xrY0ZCeWIzaDVWVkpNTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCc1pYUWdYM0J5YjNoNVUyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUd4bGRDQmZjSEp2ZUhsRVpYTmpjbWx3ZEc5eU8xeHVJQ0FnSUNBZ2JHVjBJRjl5ZFc1MGFXMWxTV1J3VUhKdmVIbFZVa3c3WEc0Z0lDQWdJQ0JzWlhRZ1gzQnliM2g1VTI5MWNtTmxVR0ZqYTJGblpUdGNiaUFnSUNBZ0lHeGxkQ0JvWVhabFJYSnliM0lnUFNCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnYkdWMElHVnljbTl5VW1WaGMyOXVJRDBnS0hKbFlYTnZiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkVGIyMWxkR2hwYm1jZ1ptRnBiR1ZrSUc5dUlIUm9aU0JrWlhCc2Iza2diMllnU1dSd1VISnZlSGs2SUNjc0lISmxZWE52YmlrN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENoeVpXRnpiMjRwTzF4dUlDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ2JHVjBJR2hoYm1Sc1pVVnljbTl5SUQwZ0tISmxZWE52YmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JvWVhabFJYSnliM0lnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9jbVZoYzI5dUtUdGNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQzh2SUVScGMyTnZkbVZ5SUVsRVVGQnliM2g1WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMGdTVVJRSUZCeWIzaDVJRVJsY0d4dmVTQXRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMWNYRzRuS1R0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25SR2x6WTI5MlpYSWdiM0lnUTNKbFlYUmxJR0VnYm1WM0lFbGtjRkJ5YjNoNUlHWnZjaUJrYjIxaGFXNHZWVkpNT2lBbkxDQmtiMjFoYVc0cE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZuYVhOMGNua3VaR2x6WTI5MlpYSkpaSEJRY205NGVTaGtiMjFoYVc0cFhHNGdJQ0FnSUNBdWRHaGxiaWdvY25WdWRHbHRaVWxrY0ZCeWIzaDVWVkpNS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQzh2SUVseklISmxaMmx6ZEdWa1AxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpFdUlFbEVVRkJ5YjNoNUlFUnBjMk52ZG1WeVpXUTZJQ2NzSUhKMWJuUnBiV1ZKWkhCUWNtOTRlVlZTVENrN1hHNWNiaUFnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQXlJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JwWkhCUWNtOTRlU0E5SUhSb2FYTXVjbVZuYVhOMGNua3VhV1J3VUhKdmVIbE1hWE4wVzJSdmJXRnBibDA3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZEVaWEJzYjNsbFpEb2dKeXdnYVdSd1VISnZlSGtwTzF4dVhHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2FXUndVSEp2ZUhrcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnkwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwZ1JVNUVJQzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMVnhjYmljcE8xeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDNWpZWFJqYUNnb2NtVmhjMjl1S1NBOVBpQjdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2FYTWdibTkwSUhKbFoybHpkR1ZrUDF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KekV1SUVsa2NGQnliM2g1SUc1dmRDQm1iM1Z1WkRvbkxDQnlaV0Z6YjI0cE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhkbElHaGhkbVVnWTI5dGNHeGxkR1ZrSUhOMFpYQWdNeUJvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzF3Y205MGIzTjBkV0l1YldSY2JseHVJQ0FnSUNBZ0lDQXZMeUIzWlNCdVpXVmtJSFJ2SUdkbGRDQlFjbTkwYjFOMGRXSWdaR1Z6WTNKcGNIUnZjaUJ6ZEdWd0lEUWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMM0psVkVoSlRrc3RjSEp2YW1WamRDOWpiM0psTFdaeVlXMWxkMjl5YXk5aWJHOWlMMjFoYzNSbGNpOWtiMk56TDNOd1pXTnpMM0oxYm5ScGJXVXZaSGx1WVcxcFl5MTJhV1YzTDJKaGMybGpjeTlrWlhCc2Iza3RjSEp2ZEc5emRIVmlMbTFrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1Z6WTNKcGNIUnZjbk11WjJWMFNXUndVSEp2ZUhsRVpYTmpjbWx3ZEc5eUtHbGtjRkJ5YjNoNVZWSk1LVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpZ29jSEp2ZUhsRVpYTmpjbWx3ZEc5eUtTQTlQaUI3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpJdUlGSmxkSFZ5YmlCMGFHVWdTVVJRVUhKdmVIa2daR1Z6WTNKcGNIUnZjaWNwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnZDJVZ2FHRjJaU0JqYjIxd2JHVjBaV1FnYzNSbGNDQTFJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl5WlZSSVNVNUxMWEJ5YjJwbFkzUXZZMjl5WlMxbWNtRnRaWGR2Y21zdllteHZZaTl0WVhOMFpYSXZaRzlqY3k5emNHVmpjeTl5ZFc1MGFXMWxMMlI1Ym1GdGFXTXRkbWxsZHk5aVlYTnBZM012WkdWd2JHOTVMWEJ5YjNSdmMzUjFZaTV0WkZ4dUlDQWdJQ0FnSUNBZ0lGOXdjbTk0ZVVSbGMyTnlhWEIwYjNJZ1BTQndjbTk0ZVVSbGMyTnlhWEIwYjNJN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2MyOTFjbU5sVUdGamEyRm5aVlZTVENBOUlIQnliM2g1UkdWelkzSnBjSFJ2Y2k1emIzVnlZMlZRWVdOcllXZGxWVkpNTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOdmRYSmpaVkJoWTJ0aFoyVlZVa3dnUFQwOUlDY3ZjMjkxY21ObFVHRmphMkZuWlNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y205NGVVUmxjMk55YVhCMGIzSXVjMjkxY21ObFVHRmphMkZuWlR0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0J1WldWa0lIUnZJR2RsZENCUWNtOTBiMU4wZFdJZ1UyOTFjbU5sSUdOdlpHVWdabkp2YlNCa1pYTmpjbWx3ZEc5eUlDMGdjM1JsY0NBMklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdlkyOXlaUzFtY21GdFpYZHZjbXN2WW14dllpOXRZWE4wWlhJdlpHOWpjeTl6Y0dWamN5OXlkVzUwYVcxbEwyUjVibUZ0YVdNdGRtbGxkeTlpWVhOcFkzTXZaR1Z3Ykc5NUxYQnliM1J2YzNSMVlpNXRaRnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSjFiblJwYldWRFlYUmhiRzluZFdVdVoyVjBVMjkxY21ObFVHRmphMkZuWlVaeWIyMVZVa3dvYzI5MWNtTmxVR0ZqYTJGblpWVlNUQ2s3WEc0Z0lDQWdJQ0FnSUgwc0lHaGhibVJzWlVWeWNtOXlLVnh1SUNBZ0lDQWdJQ0F1ZEdobGJpZ29jMjkxY21ObFVHRmphMkZuWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWFpsUlhKeWIzSXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSnpNdUlISmxkSFZ5YmlCMGFHVWdTVVJRVUhKdmVIa2djMjkxY21ObElIQmhZMnRoWjJVbktUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklIZGxJR2hoZG1VZ1kyOXRjR3hsZEdWa0lITjBaWEFnTnlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdmNtVlVTRWxPU3kxd2NtOXFaV04wTDJOdmNtVXRabkpoYldWM2IzSnJMMkpzYjJJdmJXRnpkR1Z5TDJSdlkzTXZjM0JsWTNNdmNuVnVkR2x0WlM5a2VXNWhiV2xqTFhacFpYY3ZZbUZ6YVdOekwyUmxjR3h2ZVMxd2NtOTBiM04wZFdJdWJXUmNibHh1SUNBZ0lDQWdJQ0FnSUY5d2NtOTRlVk52ZFhKalpWQmhZMnRoWjJVZ1BTQnpiM1Z5WTJWUVlXTnJZV2RsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeThnVkU5RVR6b2dRMmhsWTJzZ2IyNGdVRVZRSUNod2IyeHBZM2tnUlc1bmFXNWxLU0JwWmlCM1pTQnVaV1ZrSUhSb1pTQnpZVzVrWW05NElHRnVaQ0JqYUdWamF5QnBaaUIwYUdVZ1UyRnVaR0p2ZUNCR1lXTjBiM0o1SUdoaGRtVWdkR2hsSUdOdmJuUmxlSFFnYzJGdVpHSnZlRHRjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjRzlzYVdONUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHOXNhV041TzF4dUlDQWdJQ0FnSUNCOUxDQm9ZVzVrYkdWRmNuSnZjaWxjYmlBZ0lDQWdJQ0FnTG5Sb1pXNG9LSEJ2YkdsamVTa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hvWVhabFJYSnliM0lwSUhKbGRIVnliaUJtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklIUm9hWE1nZDJsc2JDQnlaWFIxY200Z2RHaGxJSE5oYm1SaWIzZ2diM0lnYjI1bElIQnliMjFwYzJVZ2RHOGdaMlYwVTJGdVpHSnZlRHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlaV2RwYzNSeWVTNW5aWFJUWVc1a1ltOTRLR1J2YldGcGJpazdYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUM1MGFHVnVLQ2h3Y205NGVWTmhibVJpYjNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hR0YyWlVWeWNtOXlLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NjMExpQnBaaUIwYUdVZ2MyRnVaR0p2ZUNCcGN5QnlaV2RwYzNSbGNtVmtJSFJvWlc0Z2NtVjBkWEp1SUhSb1pTQnpZVzVrWW05NEp5d2djSEp2ZUhsVFlXNWtZbTk0S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJRjl3Y205NGVWTmhibVJpYjNnZ1BTQndjbTk0ZVZOaGJtUmliM2c3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCeWIzaDVVMkZ1WkdKdmVEdGNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnTG1OaGRHTm9LQ2h5WldGemIyNHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGMlpVVnljbTl5S1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDYzFMaUJUWVc1a1ltOTRJSGRoY3lCdWIzUWdabTkxYm1Rc0lHTnlaV0YwYVc1bklHRWdibVYzSUc5dVpTY3NJSEpsWVhOdmJpazdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCcFppQjBhR1VnYzJGdVpHSnZlQ0JwY3lCeVpXZHBjM1JsWkNCbWIzSWdkR2hwY3lCd2NtOTRlU0JrWlhOamNtbHdkRzl5SUhWeWJEdGNiaUFnSUNBZ0lDQWdJQ0F2THlCTllXdGxJRk4wWlhCeklIaDRlQ0F0TFMwZ2VIaDRYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1NXNXpkR0Z1ZEdsaGRHVWdkR2hsSUZOaGJtUmliM2hjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjMkZ1WkdKdmVDQTlJSFJvYVhNdVgzSjFiblJwYldWR1lXTjBiM0o1TG1OeVpXRjBaVk5oYm1SaWIzZ29LVHRjYmlBZ0lDQWdJQ0FnSUNCellXNWtZbTk0TG1Ga1pFeHBjM1JsYm1WeUtDY3FKeXdnS0cxelp5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dFpYTnpZV2RsUW5WekxuQnZjM1JOWlhOellXZGxLRzF6WnlrN1hHNGdJQ0FnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyRnVaR0p2ZUR0Y2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdMblJvWlc0b0tITmhibVJpYjNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9hR0YyWlVWeWNtOXlLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NjMkxpQnlaWFIxY200Z2RHaGxJSE5oYm1SaWIzZ2dhVzV6ZEdGdVkyVWdZVzVrSUhKbFoybHpkR1Z5Snl3Z2MyRnVaR0p2ZUN3Z0ozUnZJR1J2YldGcGJpQW5MQ0JrYjIxaGFXNHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ1gzQnliM2g1VTJGdVpHSnZlQ0E5SUhOaGJtUmliM2c3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIzWlNCdVpXVmtJSEpsWjJsemRHVnlJSE4wZFdJZ2IyNGdjbVZuYVhOMGNua2dMU0J6ZEdWd0lIaDRlQ0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzF3Y205MGIzTjBkV0l1YldSY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WldkcGMzUnllUzV5WldkcGMzUmxja2xrY0ZCeWIzaDVLSE5oYm1SaWIzZ3NJR1J2YldGcGJpazdYRzRnSUNBZ0lDQWdJSDBzSUdoaGJtUnNaVVZ5Y205eUtWeHVJQ0FnSUNBZ0lDQXVkR2hsYmlnb2NuVnVkR2x0WlVsa2NGQnliM2g1VlZKTUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2hoZG1WRmNuSnZjaWtnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbk55NGdVbVYwZFhKdUlIUm9aU0J5ZFc1MGFXMWxJRWxrY0NCUWNtOTRlU0JWVWt3NklDY3NJSEoxYm5ScGJXVkpaSEJRY205NGVWVlNUQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUIzWlNCb1lYWmxJR052YlhCc1pYUmxaQ0J6ZEdWd0lIaDRlQ0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Y21WVVNFbE9TeTF3Y205cVpXTjBMMk52Y21VdFpuSmhiV1YzYjNKckwySnNiMkl2YldGemRHVnlMMlJ2WTNNdmMzQmxZM012Y25WdWRHbHRaUzlrZVc1aGJXbGpMWFpwWlhjdlltRnphV056TDJSbGNHeHZlUzF3Y205MGIzTjBkV0l1YldSY2JseHVJQ0FnSUNBZ0lDQWdJRjl5ZFc1MGFXMWxTV1J3VUhKdmVIbFZVa3dnUFNCeWRXNTBhVzFsU1dSd1VISnZlSGxWVWt3N1hHNWNiaUFnSUNBZ0lDQWdJQ0F2THlCRmVIUmxibVFnYjNKcFoybHVZV3dnYUhsd1pYSjBlU0JqYjI1bWFXZDFjbUYwYVc5dU8xeHVJQ0FnSUNBZ0lDQWdJR3hsZENCamIyNW1hV2QxY21GMGFXOXVJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0NGbGJYQjBlVTlpYW1WamRDaGZjSEp2ZUhsRVpYTmpjbWx3ZEc5eUxtTnZibVpwWjNWeVlYUnBiMjRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNW1hV2QxY21GMGFXOXVJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3dnU2xOUFRpNXdZWEp6WlNoZmNISnZlSGxFWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVhScGIyNHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1Wm1sbmRYSmhkR2x2YmlBOUlGOXdjbTk0ZVVSbGMyTnlhWEIwYjNJdVkyOXVabWxuZFhKaGRHbHZianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaGRHbHZiaTV5ZFc1MGFXMWxWVkpNSUQwZ2RHaHBjeTVmY25WdWRHbHRaVlZTVER0Y2JseHVJQ0FnSUNBZ0lDQWdJQzh2SUVSbGNHeHZlU0JEYjIxd2IyNWxiblFnYzNSbGNDQjRlSGhjYmlBZ0lDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5d2NtOTRlVk5oYm1SaWIzZ3VaR1Z3Ykc5NVEyOXRjRzl1Wlc1MEtGOXdjbTk0ZVZOdmRYSmpaVkJoWTJ0aFoyVXVjMjkxY21ObFEyOWtaU3dnY25WdWRHbHRaVWxrY0ZCeWIzaDVWVkpNTENCamIyNW1hV2QxY21GMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RGY25KdmNpQnZiaUJrWlhCc2Iza2dZMjl0Y0c5dVpXNTBPaWNzSUdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU3dnYUdGdVpHeGxSWEp5YjNJcFhHNGdJQ0FnSUNBZ0lDNTBhR1Z1S0Noa1pYQnNiM2xEYjIxd2IyNWxiblJUZEdGMGRYTXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGMlpVVnljbTl5S1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDYzRPaUJ5WlhSMWNtNGdaR1Z3Ykc5NUlHTnZiWEJ2Ym1WdWRDQm1iM0lnYzJGdVpHSnZlQ0J6ZEdGMGRYTTZJQ2NzSUdSbGNHeHZlVU52YlhCdmJtVnVkRk4wWVhSMWN5azdYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5QjNaU0JvWVhabElHTnZiWEJzWlhSbFpDQnpkR1Z3SUhoNGVDQm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZjbVZVU0VsT1N5MXdjbTlxWldOMEwyTnZjbVV0Wm5KaGJXVjNiM0pyTDJKc2IySXZiV0Z6ZEdWeUwyUnZZM012YzNCbFkzTXZjblZ1ZEdsdFpTOWtlVzVoYldsakxYWnBaWGN2WW1GemFXTnpMMlJsY0d4dmVTMXdjbTkwYjNOMGRXSXViV1JjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRUZrWkNCMGFHVWdiV1Z6YzJGblpTQmlkWE1nYkdsemRHVnVaWEpjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbTFsYzNOaFoyVkNkWE11WVdSa1RHbHpkR1Z1WlhJb1gzSjFiblJwYldWSlpIQlFjbTk0ZVZWU1RDd2dLRzF6WnlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzQnliM2g1VTJGdVpHSnZlQzV3YjNOMFRXVnpjMkZuWlNodGMyY3BPMXh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2QyVWdhR0YyWlNCamIyMXdiR1YwWldRZ2MzUmxjQ0I0ZUhnZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzSmxWRWhKVGtzdGNISnZhbVZqZEM5amIzSmxMV1p5WVcxbGQyOXlheTlpYkc5aUwyMWhjM1JsY2k5a2IyTnpMM053WldOekwzSjFiblJwYldVdlpIbHVZVzFwWXkxMmFXVjNMMkpoYzJsamN5OWtaWEJzYjNrdGNISnZkRzl6ZEhWaUxtMWtYRzVjYmlBZ0lDQWdJQ0FnSUNBdkx5Qk1iMkZrSUZOMGRXSWdablZ1WTNScGIyNGdjbVZ6YjJ4MlpXUWdkMmwwYUNCemRXTmpaWE56TzF4dUlDQWdJQ0FnSUNBZ0lDOHZJR3hsZENCcFpIQlFjbTk0ZVNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0F2THlBZ0lISjFiblJwYldWSlpIQlFjbTk0ZVZWU1REb2dYM0oxYm5ScGJXVkpaSEJRY205NGVWVlNUQ3hjYmlBZ0lDQWdJQ0FnSUNBdkx5QWdJSE4wWVhSMWN6b2daR1Z3Ykc5NVEyOXRjRzl1Wlc1MFUzUmhkSFZ6WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdmVHRjYmx4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WbmFYTjBjbmt1YVdSd1VISnZlSGxNYVhOMFcyUnZiV0ZwYmwwdWMzUmhkSFZ6SUQwZ0oyUmxjR3h2ZVdWa0p6dGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2FXUndVSEp2ZUhrZ1BTQjBhR2x6TG5KbFoybHpkSEo1TG1sa2NGQnliM2g1VEdsemRGdGtiMjFoYVc1ZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0owUmxjR3h2ZVdWa09pQW5MQ0JwWkhCUWNtOTRlU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHbGtjRkJ5YjNoNUtUdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0p5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMGdSVTVFSUMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4Y2JpY3BPMXh1WEc0Z0lDQWdJQ0FnSUgwc0lHaGhibVJzWlVWeWNtOXlLVnh1SUNBZ0lDQWdJQ0F1WTJGMFkyZ29aWEp5YjNKU1pXRnpiMjRwTzF4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzh2SUVOb1pXTnJJR2xtSUhSb1pTQnNiMkZrWlhJZ2FYTWdjbVZoWkhrZ2RHOGdiRzloWkNCaGJHd2dZMjl0Y0c5dVpXNTBjMXh1SUNCZmNtVmhaSGxVYjFWelpTZ3BJSHRjYmx4dUlDQWdJR3hsZENCemRHRjBkWE1nUFNCbVlXeHpaVHRjYmx4dUlDQWdJR2xtSUNnaGRHaHBjeTVmY25WdWRHbHRaVlZTVENrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVWFHVWdiRzloWkdWeUlHNWxaV1FnZEdobElISjFiblJwYldVZ2RYSnNJR0ZrWkhKbGMzTW5LVHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVYMjFsYzNOaFoyVnpRblZ6S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFSb1pTQnNiMkZrWlhJZ2JtVmxaQ0IwYUdVZ2JXVnpjMkZuWlVKMWN5QmpiMjF3YjI1bGJuUW5LVHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVYM0oxYm5ScGJXVkRZWFJoYkc5bmRXVXBJSFJvY205M0lHNWxkeUJGY25KdmNpZ25WR2hsSUd4dllXUmxjaUJ1WldWa0lIUm9aU0J5ZFc1MGFXMWxRMkYwWVd4dlozVmxJR052YlhCdmJtVnVkQ2NwTzF4dUlDQWdJR2xtSUNnaGRHaHBjeTVmY21WbmFYTjBjbmtwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVkdobElHeHZZV1JsY2lCdVpXVmtJSFJvWlNCeVpXZHBjM1J5ZVNCamIyMXdiMjVsYm5RbktUdGNiaUFnSUNCcFppQW9JWFJvYVhNdVgzSjFiblJwYldWR1lXTjBiM0o1S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFSb1pTQnNiMkZrWlhJZ2JtVmxaQ0IwYUdVZ2NuVnVkR2x0WlNCbVlXTjBiM0o1SUdOdmJYQnZibVZ1ZENjcE8xeHVYRzRnSUNBZ2MzUmhkSFZ6SUQwZ2RISjFaVHRjYmlBZ0lDQnlaWFIxY200Z2MzUmhkSFZ6TzF4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1RHOWhaR1Z5TzF4dUlpd2lMeW9xWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZCVUlFbHViM1podzZmRG8yOGdaU0JUYVhOMFpXMWhjeUJUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCSlRrVlRReTFKUkZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUlZVOUNTVk1nVGtWVVYwOVNTMU1nVTB4Y2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JsSkJWVTVJVDBaRlVpMUhSVk5GVEV4VFEwaEJSbFFnV2xWU0lFWlBSVkpFUlZKVlRrY2dSRVZTSUVGT1IwVlhRVTVFVkVWT0lFWlBVbE5EU0ZWT1J5QkZMbFpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVDFKQlRrZEZJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVSbGRYUnpZMmhsSUZSbGJHVnJiMjBnUVVkY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1FYQnBlbVZsWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZSRlEwaE9TVk5EU0VVZ1ZVNUpWa1ZTVTBsVVFWUWdRa1ZTVEVsT1hHNHFYRzRxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNHFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRxWEc0cUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNHFYRzRxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5d2djMjltZEhkaGNtVmNiaW9nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1S2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaW9xTDF4dVhHNXBiWEJ2Y25RZ0oySmhZbVZzTFhCdmJIbG1hV3hzSnp0Y2JseHVMeTlOWVdsdUlHUmxjR1Z1WkdWamFXVnpYRzVwYlhCdmNuUWdVbVZuYVhOMGNua2dabkp2YlNBbkxpNHZjbVZuYVhOMGNua3ZVbVZuYVhOMGNua25PMXh1YVcxd2IzSjBJRWxrWlc1MGFYUjVUVzlrZFd4bElHWnliMjBnSnk0dUwybGtaVzUwYVhSNUwwbGtaVzUwYVhSNVRXOWtkV3hsSnp0Y2JtbHRjRzl5ZENCUVJWQWdabkp2YlNBbkxpNHZjRzlzYVdONUwxQkZVQ2M3WEc1cGJYQnZjblFnVFdWemMyRm5aVUoxY3lCbWNtOXRJQ2N1TGk5aWRYTXZUV1Z6YzJGblpVSjFjeWM3WEc1cGJYQnZjblFnZXlCblpXNWxjbUYwWlVkVlNVUWdmU0JtY205dElDY3VMaTkxZEdsc2N5OTFkR2xzY3ljN1hHNWNibWx0Y0c5eWRDQk1iMkZrWlhJZ1puSnZiU0FuTGk5TWIyRmtaWEluTzF4dWFXMXdiM0owSUhzZ2NuVnVkR2x0WlVOdmJtWnBaM1Z5WVhScGIyNGdmU0JtY205dElDY3VMM0oxYm5ScGJXVkRiMjVtYVdkMWNtRjBhVzl1Snp0Y2JpOHZJR2x0Y0c5eWRDQkhjbUZ3YUVOdmJtNWxZM1J2Y2lCbWNtOXRJQ2N1TGk5bmNtRndhR052Ym01bFkzUnZjaTlIY21Gd2FFTnZibTVsWTNSdmNpYzdYRzVjYm1sdGNHOXlkQ0JUZVc1amFHVnlUV0Z1WVdkbGNpQm1jbTl0SUNjdUxpOXplVzVqYUdWeUwxTjVibU5vWlhKTllXNWhaMlZ5Snp0Y2JtbHRjRzl5ZENCU2RXNTBhVzFsUTI5eVpVTjBlQ0JtY205dElDY3VMaTl3YjJ4cFkza3ZZMjl1ZEdWNGRDOVNkVzUwYVcxbFEyOXlaVU4wZUNjN1hHNHZLaXBjYmlBcUlGSjFiblJwYldVZ1ZYTmxjaUJCWjJWdWRDQkpiblJsY21aaFkyVWdkMmxzYkNCd2NtOWpaWE56SUdGc2JDQjBhR1VnWkdWd1pXNWtaV05wWlhNZ2IyWWdkR2hsSUdOdmNtVWdjblZ1ZEdsdFpUdGNiaUFxSUVCaGRYUm9iM0lnVm1sMGIzSWdVMmxzZG1FZ1czWnBkRzl5TFhRdGMybHNkbUZBZEdWc1pXTnZiUzV3ZEYxY2JpQXFJRUIyWlhKemFXOXVJREF1TkM0d1hHNGdLbHh1SUNvZ1FIQnliM0JsY25SNUlIdHlkVzUwYVcxbFJtRmpkRzl5ZVgwZ2NuVnVkR2x0WlVaaFkzUnZjbmtnTFNCVGNHVmphV1pwWXlCcGJYQnNaVzFsYm5SaGRHbHZiaUJtYjNJZ1lXeHNJR1Z1ZG1seWIyNXRaVzUwY3p0Y2JpQXFJRUJ3Y205d1pYSjBlU0I3VW5WdWRHbHRaVU5oZEdGc2IyZDFaWDBnY25WdWRHbHRaVU5oZEdGc2IyZDFaU0F0SUVOaGRHRnNiMmQxWlNCdlppQmpiMjF3YjI1bGJuUnpJR05oYmlCaVpTQnBibk4wWVd4c1pXUTdYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzSjFiblJwYldWVlVreDlJSEoxYm5ScGJXVlZVa3dnTFNCVWFHbHpJR2xrWlc1MGFXWjVJSFJvWlNCamIzSmxJSEoxYm5ScGJXVXNJSE5vYjNWc1pDQmlaU0IxYm1seGRXVTdYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UwbGtaVzUwYVhSNVRXOWtkV3hsZlNCcFpHVnVkR2wwZVUxdlpIVnNaU0F0SUVsa1pXNTBhWFI1SUUxdlpIVnNaVHRjYmlBcUlFQndjbTl3WlhKMGVTQjdVRVZRZlNCd2IyeHBZM2xGYm1kcGJtVWdMU0JRYjJ4cFkza2dSVzVuYVc1bElFMXZaSFZzWlR0Y2JpQXFJRUJ3Y205d1pYSjBlU0I3VW1WbmFYTjBjbmw5SUhKbFoybHpkSEo1SUMwZ1VtVm5hWE4wY25rZ1RXOWtkV3hsTzF4dUlDb2dRSEJ5YjNCbGNuUjVJSHROWlhOellXZGxRblZ6ZlNCdFpYTnpZV2RsUW5WeklDMGdUV1Z6YzJGblpTQkNkWE1nYVhNZ2RYTmxaQ0JzYVd0bElHRWdjbTkxZEdWeUlIUnZJSEpsWkdseVpXTjBJSFJvWlNCdFpYTnpZV2RsY3lCbWNtOXRJRzl1WlNCamIyMXdiMjVsYm5RZ2RHOGdiM1JvWlhJb2N5bGNiaUFxSUVCd2NtOXdaWEowZVNCN1IzSmhjR2hEYjI1dVpXTjBiM0o5SUdkeVlYQm9RMjl1Ym1WamRHOXlJQzBnUjNKaGNHZ2dRMjl1Ym1WamRHOXlJR2hoYm1Sc2FXNW5JRWRWU1VRZ1lXNWtJR052Ym5SaFkzUnpYRzRnS2k5Y2JtTnNZWE56SUZKMWJuUnBiV1ZWUVNCN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUVOeVpXRjBaU0JoSUc1bGR5QnBibk4wWVc1alpTQnZaaUJTZFc1MGFXMWxJRlZ6WlhJZ1FXZGxiblJjYmlBZ0lDb2dRSEJoY21GdElIdHlkVzUwYVcxbFJtRmpkRzl5ZVgwZ2NuVnVkR2x0WlVaaFkzUnZjbmtnTFNCVGNHVmphV1pwWXlCcGJYQnNaVzFsYm5SaGRHbHZiaUJtYjNJZ2RHaGxJR1Z1ZG1seWIyNXRaVzUwSUhkb1pYSmxJSFJvWlNCamIzSmxJSEoxYm5ScGJXVWdkMmxzYkNCeWRXNDdYRzRnSUNBcUlFQndZWEpoYlNCN1pHOXRZV2x1ZlNCa2IyMWhhVzVWVWt3Z0xTQnpjR1ZqYVdaNUlIUm9aU0JrYjIxaGFXNGdZbUZ6WlNCbWIzSWdkR2hsSUhKMWJuUnBiV1U3WEc0Z0lDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpaHlkVzUwYVcxbFJtRmpkRzl5ZVN3Z1pHOXRZV2x1S1NCN1hHNWNiaUFnSUNCcFppQW9JWEoxYm5ScGJXVkdZV04wYjNKNUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxUm9aU0J6WVc1a1ltOTRJR1poWTNSdmNua2dhWE1nWVNCdVpXVmtaV1FnY0dGeVlXMWxkR1Z5SnlrN1hHNGdJQ0FnYVdZZ0tDRmtiMjFoYVc0cElIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbldXOTFJRzVsWldRZ2RHaGxJR1J2YldGcGJpQnZaaUJ5ZFc1MGFXMWxKeWs3WEc1Y2JpQWdJQ0F2THlCRGIyNW1hV2QxY21GMGFXOXVJRzlpYW1WamRDQjNhWFJvSUdsdVptOXliV0YwYVc5dUlISmxiR0YwWldRZ2QybDBhQ0J6WlhKMlpYSnpYRzRnSUNBZ2RHaHBjeTV5ZFc1MGFXMWxRMjl1Wm1sbmRYSmhkR2x2YmlBOUlFOWlhbVZqZEM1aGMzTnBaMjRvZTJSdmJXRnBiam9nWkc5dFlXbHVmU3dnY25WdWRHbHRaVU52Ym1acFozVnlZWFJwYjI0cE8xeHVYRzRnSUNBZ2RHaHBjeTV5ZFc1MGFXMWxSbUZqZEc5eWVTQTlJSEoxYm5ScGJXVkdZV04wYjNKNU8xeHVJQ0FnSUhSb2FYTXVjblZ1ZEdsdFpVTmhkR0ZzYjJkMVpTQTlJSEoxYm5ScGJXVkdZV04wYjNKNUxtTnlaV0YwWlZKMWJuUnBiV1ZEWVhSaGJHOW5kV1VvS1R0Y2JseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NuVnVkR2x0WlVaaFkzUnZjbmt1WTNKbFlYUmxVblZ1ZEdsdFpVTmhkR0ZzYjJkMVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3WlhKemFYTjBaVzVqWlUxaGJtRm5aWElnUFNCeWRXNTBhVzFsUm1GamRHOXllUzVqY21WaGRHVlNkVzUwYVcxbFEyRjBZV3h2WjNWbEtDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduUTJobFkyc2dlVzkxY2lCU2RXNTBhVzFsSUVaaFkzUnZjbmtnWW1WallYVnpaU0JwZENCdVpXVmtJSFJvWlNCU2RXNTBhVzFsSUVOaGRHRnNiMmQxWlNCcGJYQnNaVzFsYm5SaGRHbHZiaWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnY25WdWRHbHRaVVpoWTNSdmNua3VjR1Z5YzJsemRHVnVZMlZOWVc1aFoyVnlJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQjBhR2x6TG5CbGNuTnBjM1JsYm1ObFRXRnVZV2RsY2lBOUlISjFiblJwYldWR1lXTjBiM0o1TG5CbGNuTnBjM1JsYm1ObFRXRnVZV2RsY2lncE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KME5vWldOcklIbHZkWElnVW5WdWRHbHRaU0JHWVdOMGIzSjVJR0psWTJGMWMyVWdhWFFnYm1WbFpDQjBhR1VnVUdWeWMybHpkR1Z1WTJVZ1RXRnVZV2RsY2lCcGJYQnNaVzFsYm5SaGRHbHZiaWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnY25WdWRHbHRaVVpoWTNSdmNua3VjM1J2Y21GblpVMWhibUZuWlhJZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjM1J2Y21GblpVMWhibUZuWlhJZ1BTQnlkVzUwYVcxbFJtRmpkRzl5ZVM1emRHOXlZV2RsVFdGdVlXZGxjaWdwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owTm9aV05ySUhsdmRYSWdVblZ1ZEdsdFpTQkdZV04wYjNKNUlHSmxZMkYxYzJVZ2FYUWdibVZsWkNCMGFHVWdVM1J2Y21GblpTQk5ZVzVoWjJWeUlHbHRjR3hsYldWdWRHRjBhVzl1SnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMGVYQmxiMllnY25WdWRHbHRaVVpoWTNSdmNua3VjblZ1ZEdsdFpVTmhjR0ZpYVd4cGRHbGxjeUE5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1eWRXNTBhVzFsUTJGd1lXSnBiR2wwYVdWeklEMGdjblZ1ZEdsdFpVWmhZM1J2Y25rdWNuVnVkR2x0WlVOaGNHRmlhV3hwZEdsbGN5aDBhR2x6TG5OMGIzSmhaMlZOWVc1aFoyVnlLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2REYUdWamF5QjViM1Z5SUZKMWJuUnBiV1ZHWVdOMGIzSjVJR0psWTJGMWMyVWdhWFFnYm1WbFpDQjBhR1VnVW5WdWRHbHRaU0JEWVhCaFltbHNhWFJwWlhNZ2FXMXdiR1Z0Wlc1MFlYUnBiMjRuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdmVnh1WEc0Z0lHbHVhWFFvS1NCN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1WEc0Z0lDQWdJQ0IwYUdsekxtUnZiV0ZwYmlBOUlIUm9hWE11Y25WdWRHbHRaVU52Ym1acFozVnlZWFJwYjI0dVpHOXRZV2x1TzF4dVhHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1oyVjBRMkZ3WVdKcGJHbDBhV1Z6SUQwZ2RHaHBjeTV5ZFc1MGFXMWxRMkZ3WVdKcGJHbDBhV1Z6TG1kbGRGSjFiblJwYldWRFlYQmhZbWxzYVhScFpYTW9LVHRjYmlBZ0lDQWdJQ0FnYkdWMElHZGxkRkoxYm5ScGJXVlZVa3dnUFNCMGFHbHpMbk4wYjNKaFoyVk5ZVzVoWjJWeUxtZGxkQ2duY25WdWRHbHRaVHBWVWt3bktUdGNibHh1SUNBZ0lDQWdJQ0JRY205dGFYTmxMbUZzYkNoYloyVjBVblZ1ZEdsdFpWVlNUQ3dnWjJWMFEyRndZV0pwYkdsMGFXVnpYU2t1ZEdobGJpZ29jbVZ6ZFd4MGN5a2dQVDRnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1eWRXNTBhVzFsVlZKTUlEMGdjbVZ6ZFd4MGMxc3dYU0EvSUhKbGMzVnNkSE5iTUYwdWNuVnVkR2x0WlZWU1RDQTZJSEpsYzNWc2RITmJNRjA3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuSjFiblJwYldWVlVrd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y25WdWRHbHRaVlZTVENBOUlDZHlkVzUwYVcxbE9pOHZKeUFySUhSb2FYTXVaRzl0WVdsdUlDc2dKeThuSUNzZ1oyVnVaWEpoZEdWSFZVbEVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGIzSmhaMlZOWVc1aFoyVnlMbk5sZENnbmNuVnVkR2x0WlRwVlVrd25MQ0F4TENCN2NuVnVkR2x0WlZWU1REb2dkR2hwY3k1eWRXNTBhVzFsVlZKTWZTazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1allYQmhZbWxzYVhScFpYTWdQU0J5WlhOMWJIUnpXekZkTzF4dVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJ4dllXUkRiMjF3YjI1bGJuUnpLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2ZTa3VkR2hsYmlnb2MzUmhkSFZ6S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h6ZEdGMGRYTXBPMXh1SUNBZ0lDQWdJQ0I5S1M1allYUmphQ2dvWlhKeWIzSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0NkRlVsSlBVam9nSnl3Z1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSnZjaWs3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUgwcE8xeHVYRzRnSUgxY2JseHVJQ0JmYkc5aFpFTnZiWEJ2Ym1WdWRITW9LU0I3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVYRzRnSUNBZ0lDQjBjbmtnZTF4dVhHNGdJQ0FnSUNBZ0lDOHZJRkJ5WlhCaGNtVWdkR2hsSUd4dllXUmxjaUIwYnlCc2IyRmtJSFJvWlNCb2VYQmxjblJwWlhNc0lIQnliM1J2YzNSMVluTWdZVzVrSUdsa2NIQnliM2g1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbXh2WVdSbGNpQTlJRzVsZHlCTWIyRmtaWElvZEdocGN5NXlkVzUwYVcxbFEyOXVabWxuZFhKaGRHbHZiaWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdTVzV6ZEdGdWRHbGhkR1VnZEdobElHbGtaVzUwYVhSNUlFMXZaSFZzWlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbWxrWlc1MGFYUjVUVzlrZFd4bElEMGdibVYzSUVsa1pXNTBhWFI1VFc5a2RXeGxLSFJvYVhNdWNuVnVkR2x0WlZWU1RDd2dkR2hwY3k1eWRXNTBhVzFsUTJGd1lXSnBiR2wwYVdWekxDQjBhR2x6TG5OMGIzSmhaMlZOWVc1aFoyVnlLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlZjMlVnZEdobElITmhibVJpYjNnZ1ptRmpkRzl5ZVNCMGJ5QmpjbVZoZEdVZ1lXNGdRWEJ3VTJGdVpHSnZlRHRjYmlBZ0lDQWdJQ0FnTHk4Z1NXNGdkR2hsSUdaMWRIVnlaU0JqWVc0Z1ltVWdaR1ZqYVdSbFpDQmllU0J3YjJ4cFkzbEZibWRwYm1VZ2FXWWdkMlVnYm1WbFpGeHVJQ0FnSUNBZ0lDQXZMeUJqY21WaGRHVWdZU0JCY0hCVFlXNWtZbTk0SUc5eUlHNXZkRHRjYmlBZ0lDQWdJQ0FnYkdWMElHRndjRk5oYm1SaWIzZ2dQU0IwYUdsekxuSjFiblJwYldWR1lXTjBiM0o1TG1OeVpXRjBaVUZ3Y0ZOaGJtUmliM2dvS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJKYm5OMFlXNTBhV0YwWlNCMGFHVWdVbVZuYVhOMGNua2dUVzlrZFd4bFhHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WbmFYTjBjbmtnUFNCdVpYY2dVbVZuYVhOMGNua29kR2hwY3k1eWRXNTBhVzFsVlZKTUxDQmhjSEJUWVc1a1ltOTRMQ0IwYUdsekxtbGtaVzUwYVhSNVRXOWtkV3hsTENCMGFHbHpMbkoxYm5ScGJXVkRZWFJoYkc5bmRXVXNJSFJvYVhNdWNuVnVkR2x0WlVOaGNHRmlhV3hwZEdsbGN5d2dkR2hwY3k1emRHOXlZV2RsVFdGdVlXZGxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdVMlYwSUhSb1pTQnNiMkZrWlhJZ2RHOGdiRzloWkNCSWVYQmxjblJwWlhNc0lGTjBkV0p6SUdGdVpDQkpaSEJRY205NGFXVnpYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVm5hWE4wY25rdWJHOWhaR1Z5SUQwZ2RHaHBjeTVzYjJGa1pYSTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1NXNXpkR0Z1ZEdsaGRHVWdkR2hsSUUxbGMzTmhaMlVnUW5WelhHNGdJQ0FnSUNBZ0lIUm9hWE11YldWemMyRm5aVUoxY3lBOUlHNWxkeUJOWlhOellXZGxRblZ6S0hSb2FYTXVjbVZuYVhOMGNua3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFbHVjM1JoYm5ScFlYUmxJSFJvWlNCUWIyeHBZM2tnUlc1bmFXNWxYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHOXNhV041Ulc1bmFXNWxJRDBnYm1WM0lGQkZVQ2h1WlhjZ1VuVnVkR2x0WlVOdmNtVkRkSGdvZEdocGN5NXBaR1Z1ZEdsMGVVMXZaSFZzWlN3Z2RHaHBjeTV5WldkcGMzUnllU3dnZEdocGN5NXpkRzl5WVdkbFRXRnVZV2RsY2lrcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXVnpjMkZuWlVKMWN5NXdhWEJsYkdsdVpTNW9ZVzVrYkdWeWN5QTlJRnRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRkJ2YkdsamVTQnRaWE56WVdkbElHRjFkR2h2Y21selpWeHVJQ0FnSUNBZ0lDQWdJQ2hqZEhncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0c5c2FXTjVSVzVuYVc1bExtRjFkR2h2Y21selpTaGpkSGd1YlhObktTNTBhR1Z1S0NoamFHRnVaMlZrVFdkektTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR04wZUM1dGMyY2dQU0JqYUdGdVoyVmtUV2R6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqZEhndWJtVjRkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2t1WTJGMFkyZ29LSEpsWVhOdmJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbVZ5Y205eUtISmxZWE52YmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOMGVDNW1ZV2xzS0hKbFlYTnZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGMDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1FXUmtJSFJ2SUVGd2NDQlRZVzVrWW05NElIUm9aU0JzYVhOMFpXNWxjanRjYmlBZ0lDQWdJQ0FnWVhCd1UyRnVaR0p2ZUM1aFpHUk1hWE4wWlc1bGNpZ25LaWNzSUNodGMyY3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iWE5uS1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1VtVm5hWE4wWlhJZ2JXVnpjMkZuWlVKMWN5QnZiaUJTWldkcGMzUnllVnh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxaMmx6ZEhKNUxtMWxjM05oWjJWQ2RYTWdQU0IwYUdsekxtMWxjM05oWjJWQ2RYTTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1VtVm5hWE4wWlhJZ2NtVm5hWE4wY25rZ2IyNGdTV1JsYm5ScGRIbE5iMlIxYkdWY2JpQWdJQ0FnSUNBZ2RHaHBjeTVwWkdWdWRHbDBlVTF2WkhWc1pTNXlaV2RwYzNSeWVTQTlJSFJvYVhNdWNtVm5hWE4wY25rN1hHNWNiaUFnSUNBZ0lDQWdMeThnVlhObElITmhibVJpYjNnZ1ptRmpkRzl5ZVNCMGJ5QjFjMlVnYzNCbFkybG1hV01nYldWMGFHOWtjMXh1SUNBZ0lDQWdJQ0F2THlCaGJtUWdjMlYwSUhSb1pTQnRaWE56WVdkbElHSjFjeUIwYnlCMGFHVWdabUZqZEc5eWVWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KMWJuUnBiV1ZHWVdOMGIzSjVMbTFsYzNOaFoyVkNkWE1nUFNCMGFHbHpMbTFsYzNOaFoyVkNkWE03WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdTVzV6ZEdGdVkybGhkR1VnZEdobElGTjVibU5vWlhKTllXNWhaMlZ5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk41Ym1Ob1pYSk5ZVzVoWjJWeUlEMGdibVYzSUZONWJtTm9aWEpOWVc1aFoyVnlLSFJvYVhNdWNuVnVkR2x0WlZWU1RDd2dkR2hwY3k1dFpYTnpZV2RsUW5WekxDQjBhR2x6TG5KbFoybHpkSEo1TENCMGFHbHpMbkoxYm5ScGJXVkRZWFJoYkc5bmRXVXNJSFJvYVhNdWMzUnZjbUZuWlUxaGJtRm5aWElwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRk5sZENCcGJuUnZJR3h2WVdSbGNpQjBhR1VnYm1WbFpHVmtJR052YlhCdmJtVnVkSE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXViRzloWkdWeUxuSjFiblJwYldWVlVrd2dQU0IwYUdsekxuSjFiblJwYldWVlVrdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHOWhaR1Z5TG0xbGMzTmhaMlZDZFhNZ1BTQjBhR2x6TG0xbGMzTmhaMlZDZFhNN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ykc5aFpHVnlMbkpsWjJsemRISjVJRDBnZEdocGN5NXlaV2RwYzNSeWVUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1c2IyRmtaWEl1Y25WdWRHbHRaVU5oZEdGc2IyZDFaU0E5SUhSb2FYTXVjblZ1ZEdsdFpVTmhkR0ZzYjJkMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1c2IyRmtaWEl1Y25WdWRHbHRaVVpoWTNSdmNua2dQU0IwYUdsekxuSjFiblJwYldWR1lXTjBiM0o1TzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRWx1YzNSaGJuUnBZWFJsSUhSb1pTQkhjbUZ3YUNCRGIyNXVaV04wYjNKY2JpQWdJQ0FnSUNBZ0x5OGdYM1JvYVhNdVozSmhjR2hEYjI1dVpXTjBiM0lnUFNCdVpYY2dSM0poY0doRGIyNXVaV04wYjNJb1gzUm9hWE11Y25WdWRHbHRaVlZTVEN3Z1gzUm9hWE11YldWemMyRm5aVUoxY3lrN1hHNWNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDBjblZsS1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdjbVZxWldOMEtHVXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdmU2s3WEc1Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlFUmxjR3h2ZVNCSWVYQmxjblI1SUdaeWIyMGdRMkYwWVd4dlozVmxJRlZTVEZ4dUlDQXFJRUJ3WVhKaGJTQWdlMVZTVEM1SWVYQmxjblI1UTJGMFlXeHZaM1ZsVlZKTWZTQWdJQ0JvZVhCbGNuUjVJR2g1Y0dWeWRIbEVaWE5qY21sd2RHOXlJSFZ5YkR0Y2JpQWdLaTljYmlBZ2JHOWhaRWg1Y0dWeWRIa29hSGx3WlhKMGVVUmxjMk55YVhCMGIzSlZVa3dwSUh0Y2JseHVJQ0FnSUdsbUlDZ2hhSGx3WlhKMGVVUmxjMk55YVhCMGIzSlZVa3dwSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduU0hsd1pYSjBlU0JrWlhOamNtbHdkRzl5SUhWeWJDQndZWEpoYldWMFpYSWdhWE1nYm1WbFpHVmtKeWs3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVYRzRnSUNBZ0lDQjBhR2x6TG14dllXUmxjaTVzYjJGa1NIbHdaWEowZVNob2VYQmxjblI1UkdWelkzSnBjSFJ2Y2xWU1RDbGNiaUFnSUNBZ0lDNTBhR1Z1S0NoeVpYTjFiSFFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHlaWE4xYkhRcE8xeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDNWpZWFJqYUNnb2NtVmhjMjl1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJSEpsYW1WamRDaHlaV0Z6YjI0cE8xeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQjlLVHRjYmx4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JHVndiRzk1SUZOMGRXSWdabkp2YlNCRFlYUmhiRzluZFdVZ1ZWSk1JRzl5SUdSdmJXRnBiaUIxY214Y2JpQWdLaUJBY0dGeVlXMGdJSHRWVWt3dVZWSk1mU0FnSUNBZ1pHOXRZV2x1SUNBZ0lDQWdJQ0FnSUdSdmJXRnBibHh1SUNBcUwxeHVJQ0JzYjJGa1UzUjFZaWh3Y205MGIzTjBkV0pWVWt3cElIdGNibHh1SUNBZ0lHbG1JQ2doY0hKdmRHOXpkSFZpVlZKTUtTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxQnliM1J2VTNSMVlpQmtaWE5qY21sd2RHOXlJSFZ5YkNCd1lYSmhiV1YwWlhJZ2FYTWdibVZsWkdWa0p5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dVhHNGdJQ0FnSUNCMGFHbHpMbXh2WVdSbGNpNXNiMkZrVTNSMVlpaHdjbTkwYjNOMGRXSlZVa3dwWEc0Z0lDQWdJQ0F1ZEdobGJpZ29jbVZ6ZFd4MEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGMyOXNkbVVvY21WemRXeDBLVHRjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F1WTJGMFkyZ29LSEpsWVhOdmJpa2dQVDRnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvY21WaGMyOXVLVHRjYmlBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnZlNrN1hHNWNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRVJsY0d4dmVTQnBaSEJRY205NGVTQm1jbTl0SUVOaGRHRnNiMmQxWlNCVlVrd2diM0lnWkc5dFlXbHVJSFZ5YkZ4dUlDQXFJRUJ3WVhKaGJTQWdlMVZTVEM1VlVreDlJQ0FnSUNCa2IyMWhhVzRnSUNBZ0lDQWdJQ0FnWkc5dFlXbHVYRzRnSUNvdlhHNGdJR3h2WVdSSlpIQlFjbTk0ZVNocFpIQlFjbTk0ZVZWU1RDa2dlMXh1WEc0Z0lDQWdhV1lnS0NGcFpIQlFjbTk0ZVZWU1RDa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFVhR1VnU1VSUUlGQnliM2g1SUZWU1RDQnBjeUJoSUc1bFpXUmxaQ0J3WVhKaGJXVjBaWElzSUdOdmRXeGtJR0psSUdFZ1JFOU5RVWxPSUc5eUlHRWdWVkpNSnlrN1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ1BUNGdlMXh1SUNBZ0lDQWdkR2hwY3k1c2IyRmtaWEl1Ykc5aFpFbGtjRkJ5YjNoNUtHbGtjRkJ5YjNoNVZWSk1LVnh1SUNBZ0lDQWdMblJvWlc0b0tISmxjM1ZzZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsYzNWc2RDazdYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdMbU5oZEdOb0tDaHlaV0Z6YjI0cElEMCtJSHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLSEpsWVhOdmJpazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmx4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVnpaV1FnZEc4Z1kyeHZjMlVnWVd4c0lIUm9aU0J5ZFc1MGFXMWxPeUJWYm5KbFoybHpkR1Z5SUdGc2JDQm9lWEJsY25ScFpYTTdYRzRnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJVOFFtOXZiR1ZoYmo1OUlISmxjM1ZzZENCdlppQjBhR1VnWTJ4dmMyVWdiV1YwYUc5a0xDQjNhWFJvSUhSeWRXVWdiM0lnWm1Gc2MyVWdkRzhnZEdobElHOXdaWEpoZEdsdmJpQnpkV05qWlhOek8xeHVJQ0FnS2k5Y2JpQWdZMnh2YzJVb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25WVzV5WldkcGMzUmxjaUJoYkd3Z2FIbHdaWEowYVdWekp5azdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQmZkR2hwY3k1eVpXZHBjM1J5ZVM1MWJuSmxaMmx6ZEdWeVFXeHNTSGx3WlhKMGFXVnpLQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaHlaWE4xYkhRcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkQmJHd2dkR2hsSUdoNWNHVnlkR2xsY3lCaGNtVWdkVzV5WldkcGMzUmxaQ0IzYVhSb0lGTjFZMk5sYzNNNkp5d2djbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDBjblZsS1R0Y2JpQWdJQ0FnSUgwcExtTmhkR05vS0daMWJtTjBhVzl1S0hKbFlYTnZiaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RHWVdsc1pXUWdkRzhnZFc1eVpXZHBjM1JsY2lCMGFHVWdhSGx3WlhKMGFXVnpKeXdnY21WaGMyOXVLVHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLR1poYkhObEtUdGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdmU2s3WEc1Y2JpQWdmVnh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGSjFiblJwYldWVlFUdGNiaUlzSW1WNGNHOXlkQ0JqYjI1emRDQnlkVzUwYVcxbFEyOXVabWxuZFhKaGRHbHZiaUE5SUh0Y2JseHVJQ0J5ZFc1MGFXMWxWVkpNVXpvZ2UxeHVJQ0FnSUhKbFoybHpkSEo1T2lCN1hHNGdJQ0FnSUNCd2NtVm1hWGc2SUNkb2VYQmxjblI1TFhKMWJuUnBiV1U2THk4bkxGeHVJQ0FnSUNBZ2MzVm1abWw0T2lBbmNtVm5hWE4wY25rblhHNGdJQ0FnZlN4Y2JpQWdJQ0JwWkdWdWRHbDBlVTF2WkhWc1pUb2dlMXh1SUNBZ0lDQWdjSEpsWm1sNE9pQW5hSGx3WlhKMGVTMXlkVzUwYVcxbE9pOHZKeXhjYmlBZ0lDQWdJSE4xWm1acGVEb2dKeTlwWkcwblhHNGdJQ0FnZlN4Y2JpQWdJQ0J5ZFc1MGFXMWxWVUU2SUh0Y2JpQWdJQ0FnSUhCeVpXWnBlRG9nSjJoNWNHVnlkSGt0Y25WdWRHbHRaVG92THljc1hHNGdJQ0FnSUNCemRXWm1hWGc2SUNjdmRXRW5YRzRnSUNBZ2ZTeGNiaUFnSUNCallYUmhiRzluZFdVNklIdGNiaUFnSUNBZ0lIQnlaV1pwZURvZ0oyaDVjR1Z5ZEhrdGNuVnVkR2x0WlRvdkx5Y3NYRzRnSUNBZ0lDQnpkV1ptYVhnNklDY3ZZMkYwWVd4dlozVmxKMXh1SUNBZ0lIMHNYRzRnSUNBZ1ozSmhjR2hEYjI1dVpXTjBiM0k2SUh0Y2JpQWdJQ0FnSUhCeVpXWnBlRG9nSjJoNWNHVnlkSGt0Y25WdWRHbHRaVG92THljc1hHNGdJQ0FnSUNCemRXWm1hWGc2SUNjdlozSmhjR2duWEc0Z0lDQWdmU3hjYmlBZ0lDQnplVzVqVFdGdVlXZGxjam9nZTF4dUlDQWdJQ0FnY0hKbFptbDRPaUFuYUhsd1pYSjBlUzF5ZFc1MGFXMWxPaTh2Snl4Y2JpQWdJQ0FnSUhOMVptWnBlRG9nSnk5emJTZGNiaUFnSUNCOVhHNGdJSDBzWEc0Z0lHTmhkR0ZzYjJkMVpWVlNUSE02SUh0Y2JpQWdJQ0J3Y205MGIyTnZiSE4wZFdJNklIdGNiaUFnSUNBZ0lIQnlaV1pwZURvZ0oyaDVjR1Z5ZEhrdFkyRjBZV3h2WjNWbE9pOHZZMkYwWVd4dlozVmxMaWNzWEc0Z0lDQWdJQ0J6ZFdabWFYZzZJQ2N2TG5kbGJHd3RhMjV2ZDI0dmNISnZkRzlqYjJ4emRIVmlMeWNzWEc0Z0lDQWdJQ0JtWVd4c1ltRmphem9nSjJoNWNHVnlkSGt0WTJGMFlXeHZaM1ZsT2k4dlkyRjBZV3h2WjNWbExpVmtiMjFoYVc0bEx5NTNaV3hzTFd0dWIzZHVMM0J5YjNSdlkyOXNjM1IxWWk4blhHNGdJQ0FnZlN4Y2JpQWdJQ0JwWkhCUWNtOTRlVG9nZTF4dUlDQWdJQ0FnY0hKbFptbDRPaUFuYUhsd1pYSjBlUzFqWVhSaGJHOW5kV1U2THk5allYUmhiRzluZFdVdUp5eGNiaUFnSUNBZ0lITjFabVpwZURvZ0p5OHVkMlZzYkMxcmJtOTNiaTlwWkhBdGNISnZlSGt2Snl4Y2JpQWdJQ0FnSUdaaGJHeGlZV05yT2lBbmFIbHdaWEowZVMxallYUmhiRzluZFdVNkx5OWpZWFJoYkc5bmRXVXVKV1J2YldGcGJpVXZMbmRsYkd3dGEyNXZkMjR2YVdSd0xYQnliM2g1THlkY2JpQWdJQ0I5WEc0Z0lIMHNYRzRnSUcxelowNXZaR1ZWVWt3NklIdGNiaUFnSUNCd2NtVm1hWGc2SUNka2IyMWhhVzQ2THk5dGMyY3RibTlrWlM0bkxGeHVJQ0FnSUhOMVptWnBlRG9nSnljc1hHNGdJQ0FnYUhsd1pYSjBlVUZrWkhKbGMzTkJiR3h2WTJGMGFXOXVPaUFuTDJoNWNHVnlkSGt0WVdSa2NtVnpjeTFoYkd4dlkyRjBhVzl1Snl4Y2JpQWdJQ0J2WW1wbFkzUkJaR1J5WlhOelFXeHNiMk5oZEdsdmJqb2dKeTl2WW1wbFkzUXRZV1JrY21WemN5MWhiR3h2WTJGMGFXOXVKeXhjYmlBZ0lDQnpkV0p6WTNKcGNIUnBiMjVOWVc1aFoyVnRaVzUwT2lBbkwzTnRKMXh1SUNCOUxGeHVJQ0JrYjIxaGFXNVNaV2RwYzNSeWVWVlNURG9nZTF4dUlDQWdJSEJ5WldacGVEb2dKMlJ2YldGcGJqb3ZMM0psWjJsemRISjVMaWNzWEc0Z0lDQWdjM1ZtWm1sNE9pQW5KMXh1SUNCOUxGeHVJQ0JuYkc5aVlXeFNaV2RwYzNSeWVWVlNURG9nSjJkc2IySmhiRG92TDNKbFoybHpkSEo1TGlkY2JuMDdYRzRpTENKcGJYQnZjblFnZXlCa2FYWnBaR1ZWVWt3Z2ZTQm1jbTl0SUNjdUxpOTFkR2xzY3k5MWRHbHNjeWM3WEc1cGJYQnZjblFnVTNWaWMyTnlhWEIwYVc5dUlHWnliMjBnSnk0dlUzVmljMk55YVhCMGFXOXVKenRjYmx4dVkyeGhjM01nVDJKelpYSjJaWEpQWW1wbFkzUWdlMXh1WEc0Z0lHTnZibk4wY25WamRHOXlLSEJoY21WdWRDd2dkWEpzTENCamFHbHNaSEpsYm5NcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYM0JoY21WdWRDQTlJSEJoY21WdWREdGNiaUFnSUNCZmRHaHBjeTVmZFhKc0lEMGdkWEpzTzF4dUlDQWdJRjkwYUdsekxsOWphR2xzWkhKbGJuTWdQU0JqYUdsc1pISmxibk03WEc1Y2JpQWdJQ0JmZEdocGN5NWZjM1J2Y21GblpVMWhibUZuWlhJZ1BTQndZWEpsYm5RdVgzTjBiM0poWjJWTllXNWhaMlZ5TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMkoxY3lBOUlIQmhjbVZ1ZEM1ZlluVnpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk1nUFNCN2ZUdGNiaUFnSUNCZmRHaHBjeTVmYzNSdmNtRm5aVk4xWW5OamNtbHdkR2x2Ym5NZ1BTQjdmVHRjYmlBZ2ZWeHVYRzRnSUY5dVpYZFRkV0p6WTNKcGNIUnBiMjRvYUhsd1pYSjBlU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXRvZVhCbGNuUjVYU0E5SUc1bGR5QlRkV0p6WTNKcGNIUnBiMjRvWDNSb2FYTXVYMkoxY3l3Z2FIbHdaWEowZVN3Z1gzUm9hWE11WDNWeWJDd2dYM1JvYVhNdVgyTm9hV3hrY21WdWN5d2dabUZzYzJVcE8xeHVJQ0I5WEc1Y2JpQWdZV1JrVTNWaWMyTnlhWEIwYVc5dUtHaDVjR1Z5ZEhrcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMjVsZDFOMVluTmpjbWx3ZEdsdmJpaG9lWEJsY25SNUtUdGNiaUFnZlZ4dVhHNGdJSEpsYlc5MlpWTjFZbk5qY21sd2RHbHZiaWhvZVhCbGNuUjVLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHeGxkQ0JrYjIxaGFXNGdQU0JrYVhacFpHVlZVa3dvYUhsd1pYSjBlU2t1Wkc5dFlXbHVPMXh1SUNBZ0lHeGxkQ0J2WW1wVlVreFRkV0p6WTNKcGNIUnBiMjRnUFNCZmRHaHBjeTVmZFhKc0lDc2dKeTl6ZFdKelkzSnBjSFJwYjI0bk8xeHVYRzRnSUNBZ2JHVjBJSE4xWW5OamNtbHdkR2x2YmlBOUlGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpXMmg1Y0dWeWRIbGRPMXh1SUNBZ0lHbG1JQ2h6ZFdKelkzSnBjSFJwYjI0cElIdGNiaUFnSUNBZ0lDOHZSa3hQVnkxUFZWUTZJRzFsYzNOaFoyVWdjMlZ1ZENCMGJ5QnlaVzF2ZEdVZ1VtVndiM0owWlhKUFltcGxZM1FnTFQ0Z1gyOXVVbVZ0YjNSbFZXNVRkV0p6WTNKcFltVmNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUFuZFc1emRXSnpZM0pwWW1VbkxDQm1jbTl0T2lCZmRHaHBjeTVmY0dGeVpXNTBMbDkxY213c0lIUnZPaUJ2WW1wVlVreFRkV0p6WTNKcGNIUnBiMjRzWEc0Z0lDQWdJQ0FnSUdKdlpIazZJSHNnY21WemIzVnlZMlU2SUY5MGFHbHpMbDkxY213Z2ZWeHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQzh2VkU5RVR6b2djMmh2ZFd4a0lFa2dkMkZwZENCbWIzSWdjbVZ6Y0c5dWMyVWdZbVZtYjNKbElIVnVjM1ZpYzJOeWFXSmxJRzl1SUcxelp5MXViMlJsWEc0Z0lDQWdJQ0F2TDBaTVQxY3RUMVZVT2lCdFpYTnpZV2RsSUhObGJuUWdkRzhnYlhObkxXNXZaR1VnVTNWaWMyTnlhWEIwYVc5dVRXRnVZV2RsY2lCamIyMXdiMjVsYm5SY2JpQWdJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQW5kVzV6ZFdKelkzSnBZbVVuTENCbWNtOXRPaUJmZEdocGN5NWZjR0Z5Wlc1MExsOTFjbXdzSUhSdk9pQW5aRzl0WVdsdU9pOHZiWE5uTFc1dlpHVXVKeUFySUdSdmJXRnBiaUFySUNjdmMyMG5MRnh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdJSEpsYzI5MWNtTmxPaUJmZEdocGN5NWZkWEpzTENCamFHbHNaSEpsYmxKbGMyOTFjbU5sY3pvZ1gzUm9hWE11WDJOb2FXeGtjbVZ1Y3lCOVhHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdjM1ZpYzJOeWFYQjBhVzl1TGw5eVpXeGxZWE5sVEdsemRHVnVaWEp6S0NrN1hHNGdJQ0FnSUNCa1pXeGxkR1VnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5OYmFIbHdaWEowZVYwN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1QySnpaWEoyWlhKUFltcGxZM1E3WEc0aUxDSnBiWEJ2Y25RZ2V5QmthWFpwWkdWVlVrd2dmU0JtY205dElDY3VMaTkxZEdsc2N5OTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ1UzVmljMk55YVhCMGFXOXVJR1p5YjIwZ0p5NHZVM1ZpYzJOeWFYQjBhVzl1Snp0Y2JseHVZMnhoYzNNZ1VtVndiM0owWlhKUFltcGxZM1FnZTF4dVhHNGdJR052Ym5OMGNuVmpkRzl5S0hCaGNtVnVkQ3dnYjNkdVpYSXNJSFZ5YkNrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZjR0Z5Wlc1MElEMGdjR0Z5Wlc1ME8xeHVJQ0FnSUY5MGFHbHpMbDl2ZDI1bGNpQTlJRzkzYm1WeU8xeHVJQ0FnSUY5MGFHbHpMbDkxY213Z1BTQjFjbXc3WEc1Y2JpQWdJQ0JmZEdocGN5NWZZblZ6SUQwZ2NHRnlaVzUwTGw5aWRYTTdYRzRnSUNBZ1gzUm9hWE11WDNOMGIzSmhaMlZOWVc1aFoyVnlJRDBnY0dGeVpXNTBMbDl6ZEc5eVlXZGxUV0Z1WVdkbGNqdGNibHh1SUNBZ0lGOTBhR2x6TGw5a2IyMWhhVzRnUFNCa2FYWnBaR1ZWVWt3b2IzZHVaWElwTG1SdmJXRnBianRjYmlBZ0lDQmZkR2hwY3k1ZmIySnFVM1ZpYzJOeWFYQjBiM0pWVWt3Z1BTQmZkR2hwY3k1ZmRYSnNJQ3NnSnk5emRXSnpZM0pwY0hScGIyNG5PMXh1WEc0Z0lDQWdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk1nUFNCN2ZUdGNiaUFnSUNCZmRHaHBjeTVmWTJocGJHUnlaVzV6SUQwZ1cxMDdYRzRnSUNBZ1gzUm9hWE11WDJOb2FXeGtjbVZ1VEdsemRHVnVaWEp6SUQwZ1cxMDdYRzVjYmlBZ0lDQmZkR2hwY3k1ZlptOXlkMkZ5WkhNZ1BTQjdmVHRjYmx4dUlDQWdJRjkwYUdsekxsOWhiR3h2WTJGMFpVeHBjM1JsYm1WeWN5Z3BPMXh1SUNCOVhHNWNiaUFnWDJGc2JHOWpZWFJsVEdsemRHVnVaWEp6S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0F2TDJGa1pDQnpkV0p6WTNKcGNIUnBiMjRnYkdsemRHVnVaWEl1TGk1Y2JpQWdJQ0JmZEdocGN5NWZjM1ZpYzJOeWFYQjBhVzl1VEdsemRHVnVaWElnUFNCZmRHaHBjeTVmWW5WekxtRmtaRXhwYzNSbGJtVnlLRjkwYUdsekxsOXZZbXBUZFdKelkzSnBjSFJ2Y2xWU1RDd2dLRzF6WnlrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvWDNSb2FYTXVYMjlpYWxOMVluTmpjbWx3ZEc5eVZWSk1JQ3NnSnkxU1ExWTZJQ2NzSUcxelp5azdYRzRnSUNBZ0lDQnpkMmwwWTJnZ0tHMXpaeTUwZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR05oYzJVZ0ozTjFZbk5qY21saVpTYzZJRjkwYUdsekxsOXZibEpsYlc5MFpWTjFZbk5qY21saVpTaHRjMmNwT3lCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5kVzV6ZFdKelkzSnBZbVVuT2lCZmRHaHBjeTVmYjI1U1pXMXZkR1ZWYmxOMVluTmpjbWxpWlNodGMyY3BPeUJpY21WaGF6dGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmNtVnpjRzl1YzJVbk9pQmZkR2hwY3k1ZmIyNVNaVzF2ZEdWU1pYTndiMjV6WlNodGMyY3BPeUJpY21WaGF6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHeGxkQ0JqYUdGdVoyVlZVa3dnUFNCZmRHaHBjeTVmZFhKc0lDc2dKeTlqYUdGdVoyVnpKenRjYmlBZ0lDQmZkR2hwY3k1ZlkyaGhibWRsVEdsemRHVnVaWElnUFNCZmRHaHBjeTVmWW5WekxtRmtaRXhwYzNSbGJtVnlLR05vWVc1blpWVlNUQ3dnS0cxelp5a2dQVDRnZTF4dUlDQWdJQ0FnTHk5VVQwUlBPaUIzYUdGMElIUnZaRzhnYUdWeVpUOGdVMkYyWlNCamFHRnVaMlZ6UDF4dUlDQWdJQ0FnYVdZZ0tHMXpaeTVpYjJSNUxtRjBkSEpwWW5WMFpTa2dlMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZjR0Z5Wlc1MExsOXpkRzl5WlVSaGRHRlBZbXBsWTNSekxuVndaR0YwWlVSaGRHRW9YM1JvYVhNdVgzVnliQ3dnSjJSaGRHRW5MQ0J0YzJjdVltOWtlUzVoZEhSeWFXSjFkR1VzSUcxelp5NWliMlI1TG5aaGJIVmxMQ0IwY25WbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RUZVc1amFHVnlUV0Z1WVdkbGNpMG5JQ3NnWTJoaGJtZGxWVkpNSUNzZ0p5MVNRMVk2SUNjc0lHMXpaeWs3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNCeVpYTjFiV1ZUZFdKelkzSnBjSFJwYjI1ektITjFZbk5qY21sd2RHbHZibk1wSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdUMkpxWldOMExtdGxlWE1vYzNWaWMyTnlhWEIwYVc5dWN5a3VabTl5UldGamFDZ29hMlY1S1NBOVBpQjdYRzRnSUNBZ0lDQnNaWFFnYUhsd1pYSjBlVlZTVENBOUlITjFZbk5qY21sd2RHbHZibk5iYTJWNVhUdGNibHh1SUNBZ0lDQWdhV1lnS0NGZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWMxdG9lWEJsY25SNVZWSk1YU2tnZTF4dUlDQWdJQ0FnSUNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWMxdG9lWEJsY25SNVZWSk1YU0E5SUc1bGR5QlRkV0p6WTNKcGNIUnBiMjRvWDNSb2FYTXVYMkoxY3l3Z1gzUm9hWE11WDI5M2JtVnlMQ0JmZEdocGN5NWZkWEpzTENCZmRHaHBjeTVmWTJocGJHUnlaVzV6TENCMGNuVmxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQjlYRzVjYmlBZ1gzSmxiR1ZoYzJWTWFYTjBaVzVsY25Nb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1TWFYTjBaVzVsY2k1eVpXMXZkbVVvS1R0Y2JseHVJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVk1hWE4wWlc1bGNpNXlaVzF2ZG1Vb0tUdGNibHh1SUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3k1bWIzSkZZV05vS0NoamJDa2dQVDRnZTF4dUlDQWdJQ0FnWTJ3dWNtVnRiM1psS0NrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCUFltcGxZM1F1YTJWNWN5aGZkR2hwY3k1ZlptOXlkMkZ5WkhNcExtWnZja1ZoWTJnb0tHdGxlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ1gzUm9hWE11Wm05eWQyRnlaRlZ1VTNWaWMyTnlhV0psS0d0bGVTazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ0lDQXZMM0psYlc5MlpTQmhiR3dnYzNWaWMyTnlhWEIwYVc5dWMxeHVJQ0FnSUU5aWFtVmpkQzVyWlhsektGOTBhR2x6TGw5emRXSnpZM0pwY0hScGIyNXpLUzVtYjNKRllXTm9LQ2hyWlhrcElEMCtJSHRjYmlBZ0lDQWdJRjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzJ0bGVWMHVYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXZHBjM1JsY2lCaElHeHBjM1JsYm1WeUlHbHVJSFJvWlNCdGMyY3RibTlrWlNCaGJtUWdhVzRnZEdobElHeHZZMkZzSUUxbGMzTmhaMlZDZFhNc0lITnZJSFJvWVhRZ2JXVnpjMkZuWlhNZ2IyNGdkR2hwY3lCaFpHUnlaWE56SUdGeVpTQm1iM0ozWVhKa1pXUWdkRzhnZEdobElISmxjRzl5ZEdWeUlHOWlhbVZqZEZ4dUlDQWdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZDlJR0ZrWkhKbGMzTWdMU0JWVWt3Z2RHOGdjbVZuYVhOMFpYSWdkR2hsSUd4cGMzUmxibVZ5YzF4dUlDQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0JTWlhSMWNtNGdVSEp2YldselpTQlBTeUJ2Y2lCbGNuSnZjbHh1SUNBZ0tpOWNiaUFnWm05eWQyRnlaRk4xWW5OamNtbGlaU2hoWkdSeVpYTnpaWE1wSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdMeTlHVEU5WExVOVZWRG9nYldWemMyRm5aU0J6Wlc1MElIUnZJSFJvWlNCdGMyY3RibTlrWlNCVGRXSnpZM0pwY0hScGIyNU5ZVzVoWjJWeUlHTnZiWEJ2Ym1WdWRGeHVJQ0FnSUd4bGRDQnViMlJsVTNWaWMyTnlhV0psVFhObklEMGdlMXh1SUNBZ0lDQWdkSGx3WlRvZ0ozTjFZbk5qY21saVpTY3NJR1p5YjIwNklGOTBhR2x6TGw5d1lYSmxiblF1WDNWeWJDd2dkRzg2SUNka2IyMWhhVzQ2THk5dGMyY3RibTlrWlM0bklDc2dYM1JvYVhNdVgyUnZiV0ZwYmlBcklDY3ZjMjBuTEZ4dUlDQWdJQ0FnWW05a2VUb2dleUJ6ZFdKelkzSnBZbVU2SUdGa1pISmxjM05sY3l3Z2MyOTFjbU5sT2lCZmRHaHBjeTVmYjNkdVpYSWdmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dQVDRnZTF4dUlDQWdJQ0FnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaHViMlJsVTNWaWMyTnlhV0psVFhObkxDQW9jbVZ3YkhrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyWnZjbmRoY21RdGMzVmljMk55YVdKbExYSmxjM0J2Ym5ObEtISmxjRzl5ZEdWeUtUb2dKeXdnY21Wd2JIa3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NtVndiSGt1WW05a2VTNWpiMlJsSUQwOVBTQXlNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnYm1WM1JtOXlkMkZ5WkNBOUlGOTBhR2x6TGw5aWRYTXVZV1JrUm05eWQyRnlaQ2hmZEdocGN5NWZkWEpzTENCZmRHaHBjeTVmYjNkdVpYSXBPMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDltYjNKM1lYSmtjMXRoWkdSeVpYTnpaWE5iTUYxZElEMGdibVYzUm05eWQyRnlaRHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0NrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZEZjbkp2Y2lCdmJpQnRjMmN0Ym05a1pTQnpkV0p6WTNKcGNIUnBiMjQ2SUNjZ0t5QnlaWEJzZVM1aWIyUjVMbVJsYzJNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmJsSmxaMmx6ZEdWeUlHRWdiR2x6ZEdWdVpYSWdhVzRnZEdobElHMXpaeTF1YjJSbElHRnVaQ0JwYmlCMGFHVWdiRzlqWVd3Z1RXVnpjMkZuWlVKMWN5d2djMjhnZEdoaGRDQnRaWE56WVdkbGN5QnZiaUIwYUdseklHRmtaSEpsYzNNZ1lYSmxJSEpsYlc5MlpXUWdabkp2YlNCbWIzSjNZWEprWEc0Z0lDQXFJRUJ3WVhKaGJTQWdlM04wY21sdVozMGdZV1JrY21WemN5QXRJRlZTVENCMGJ5QjFiaTF5WldkcGMzUmxjaUIwYUdVZ2JHbHpkR1Z1WlhKelhHNGdJQ0FxTDF4dUlDQm1iM0ozWVhKa1ZXNVRkV0p6WTNKcFltVW9ZV1JrY21WemN5a2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCZmRHaHBjeTVmWm05eWQyRnlaSE5iWVdSa2NtVnpjMTB1Y21WdGIzWmxLQ2s3WEc0Z0lDQWdaR1ZzWlhSbElGOTBhR2x6TGw5bWIzSjNZWEprYzF0aFpHUnlaWE56WFR0Y2JseHVJQ0FnSUM4dlJreFBWeTFQVlZRNklHMWxjM05oWjJVZ2MyVnVkQ0IwYnlCMGFHVWdiWE5uTFc1dlpHVWdVM1ZpYzJOeWFYQjBhVzl1VFdGdVlXZGxjaUJqYjIxd2IyNWxiblJjYmlBZ0lDQnNaWFFnYm05a1pWVnVVM1ZpYzJOeWFXSmxUWE5uSUQwZ2UxeHVJQ0FnSUNBZ2RIbHdaVG9nSjNWdWMzVmljMk55YVdKbEp5d2dabkp2YlRvZ1gzUm9hWE11WDNCaGNtVnVkQzVmZFhKc0xDQjBiem9nSjJSdmJXRnBiam92TDIxelp5MXViMlJsTGljZ0t5QmZkR2hwY3k1ZlpHOXRZV2x1SUNzZ0p5OXpiU2NzWEc0Z0lDQWdJQ0JpYjJSNU9pQjdJSE4xWW5OamNtbGlaVG9nVzJGa1pISmxjM05kTENCemIzVnlZMlU2SUY5MGFHbHpMbDl2ZDI1bGNpQjlYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvYm05a1pWVnVVM1ZpYzJOeWFXSmxUWE5uS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaV2RwYzNSbGNpQnNhWE4wWlc1bGNuTWdabTl5SUdFZ2JHbHpkQ0J2WmlCamFHbHNaSEpsYm5NdUlGQjFZbXhwWXlCamFHRnVibVZzY3lCMWMyVmtJSFJ2SUhSeVlXNXpiV2wwSUcxbGMzTmhaMlZ6TGx4dUlDQWdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZGJYWDBnWTJocGJHUnlaVzV6SUMwZ1kyaGhibTVsYkhNZ2RHOGdjbVZuYVhOMFpYSmNiaUFnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ1VtVjBkWEp1SUZCeWIyMXBjMlVnVDBzZ2IzSWdaWEp5YjNKY2JpQWdJQ292WEc0Z0lHRmtaRU5vYVd4a2NtVnVjeWhqYUdsc1pISmxibk1wSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaGphR2xzWkhKbGJuTXViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lISmxjMjlzZG1Vb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnNaWFFnWTJocGJHUkNZWE5sVlZKTUlEMGdYM1JvYVhNdVgzVnliQ0FySUNjdlkyaHBiR1J5Wlc0dkp6dGNiaUFnSUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYm5NdWNIVnphQ2hqYUdsc1pISmxibk1wTzF4dVhHNGdJQ0FnSUNBdktseHVJQ0FnSUNBZ1gzUm9hWE11WDJOb2FXeGtjbVZ1Y3k1bWIzSkZZV05vS0NoamFHbHNaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWTJocGJHUkpaQ0E5SUdOb2FXeGtRbUZ6WlZWU1RDQXJJR05vYVd4a08xeHVYRzRnSUNBZ0lDQWdJR3hsZENCelpXeG1SbTl5ZDJGeVpDQTlJRjkwYUdsekxsOWlkWE11WVdSa1JtOXlkMkZ5WkNoamFHbHNaRWxrTENCdmQyNWxjaWs3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxia3hwYzNSbGJtVnljeTV3ZFhOb0tITmxiR1pHYjNKM1lYSmtLVHRjYmlBZ0lDQWdJSDBwT3lvdlhHNWNiaUFnSUNBZ0lHeGxkQ0J6ZFdKelkzSnBjSFJwYjI1eklEMGdXMTA3WEc0Z0lDQWdJQ0JqYUdsc1pISmxibk11Wm05eVJXRmphQ2dvWTJocGJHUXBJRDArSUhOMVluTmpjbWx3ZEdsdmJuTXVjSFZ6YUNoamFHbHNaRUpoYzJWVlVrd2dLeUJqYUdsc1pDa3BPMXh1WEc0Z0lDQWdJQ0F2TDE5MGFHbHpMbDl6ZEc5eVlXZGxVM1ZpYzJOeWFYQjBhVzl1YzF0ZmRHaHBjeTVmYjJKcVUzVmljMk55YVhCMGIzSlZVa3hkSUQwZ2UzVnliRG9nWDNSb2FYTXVYM1Z5YkN3Z2IzZHVaWEk2SUY5MGFHbHpMbDl2ZDI1bGNpd2dZMmhwYkdSeVpXNXpPaUJmZEdocGN5NWZZMmhwYkdSeVpXNXpmVHRjYmx4dUlDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2JXVnpjMkZuWlNCelpXNTBJSFJ2SUhSb1pTQnRjMmN0Ym05a1pTQlRkV0p6WTNKcGNIUnBiMjVOWVc1aFoyVnlJR052YlhCdmJtVnVkRnh1SUNBZ0lDQWdiR1YwSUc1dlpHVlRkV0p6WTNKcFltVk5jMmNnUFNCN1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUNkemRXSnpZM0pwWW1VbkxDQm1jbTl0T2lCZmRHaHBjeTVmY0dGeVpXNTBMbDkxY213c0lIUnZPaUFuWkc5dFlXbHVPaTh2YlhObkxXNXZaR1V1SnlBcklGOTBhR2x6TGw5a2IyMWhhVzRnS3lBbkwzTnRKeXhjYmlBZ0lDQWdJQ0FnWW05a2VUb2dleUJ6ZFdKelkzSnBZbVU2SUhOMVluTmpjbWx3ZEdsdmJuTXNJSE52ZFhKalpUb2dYM1JvYVhNdVgyOTNibVZ5SUgxY2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvYm05a1pWTjFZbk5qY21saVpVMXpaeXdnS0hKbGNHeDVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2R1YjJSbExYTjFZbk5qY21saVpTMXlaWE53YjI1elpTaHlaWEJ2Y25SbGNpazZJQ2NzSUhKbGNHeDVLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjR3g1TG1KdlpIa3VZMjlrWlNBOVBUMGdNakF3S1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0F2TDJGa1pDQmphR2xzWkhKbGJpQnNhWE4wWlc1bGNuTWdiMjRnYkc5allXd2dMaTR1WEc0Z0lDQWdJQ0FnSUNBZ2MzVmljMk55YVhCMGFXOXVjeTVtYjNKRllXTm9LQ2hqYUdsc1pGVlNUQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHTm9hV3hrVEdsemRHVnVaWElnUFNCZmRHaHBjeTVmWW5WekxtRmtaRXhwYzNSbGJtVnlLR05vYVd4a1ZWSk1MQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2VkU5RVR6b2dkMmhoZENCMGIyUnZJR2hsY21VL0lGTmhkbVVnWTJocGJHUnlaVzV6UDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblUzbHVZMmhsY2sxaGJtRm5aWEl0SnlBcklHTm9hV3hrVlZKTUlDc2dKeTFTUTFZNklDY3NJRzF6WnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWphR2xzWkhKbGJreHBjM1JsYm1WeWN5NXdkWE5vS0dOb2FXeGtUR2x6ZEdWdVpYSXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYzJWc1prWnZjbmRoY21RZ1BTQmZkR2hwY3k1ZlluVnpMbUZrWkVadmNuZGhjbVFvWTJocGJHUlZVa3dzSUY5MGFHbHpMbDl2ZDI1bGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmWTJocGJHUnlaVzVNYVhOMFpXNWxjbk11Y0hWemFDaHpaV3htUm05eWQyRnlaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0NrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZEZjbkp2Y2lCdmJpQnRjMmN0Ym05a1pTQnpkV0p6WTNKcGNIUnBiMjQ2SUNjZ0t5QnlaWEJzZVM1aWIyUjVMbVJsYzJNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdSbGJHVjBaU2dwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0JrYjIxaGFXNGdQU0JrYVhacFpHVlZVa3dvWDNSb2FYTXVYMjkzYm1WeUtTNWtiMjFoYVc0N1hHNWNiaUFnSUNBdkwwWk1UMWN0VDFWVU9pQnRaWE56WVdkbElITmxiblFnWkdseVpXTjBiSGtnZEc4Z1lXeHNJSE4xWW5OamNtbGlaWEp6SUc5bUlIUm9aU0J5WlhCdmNuUmxjbHh1SUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvZTF4dUlDQWdJQ0FnZEhsd1pUb2dKMlJsYkdWMFpTY3NJR1p5YjIwNklGOTBhR2x6TGw5dlltcFRkV0p6WTNKcGNIUnZjbFZTVEN3Z2RHODZJRjkwYUdsekxsOTFjbXdnS3lBbkwyTm9ZVzVuWlhNblhHNGdJQ0FnZlNrN1hHNWNiaUFnSUNBdkwwWk1UMWN0VDFWVU9pQnRaWE56WVdkbElITmxiblFnZEc4Z2RHaGxJRzF6WnkxdWIyUmxJRTlpYW1WamRFRnNiRzlqWVhScGIyNU5ZVzVoWjJWeUlHTnZiWEJ2Ym1WdWRGeHVJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdkSGx3WlRvZ0oyUmxiR1YwWlNjc0lHWnliMjA2SUY5MGFHbHpMbDl3WVhKbGJuUXVYM1Z5YkN3Z2RHODZJQ2RrYjIxaGFXNDZMeTl0YzJjdGJtOWtaUzRuSUNzZ1pHOXRZV2x1SUNzZ0p5OXZZbXBsWTNRdFlXUmtjbVZ6Y3kxaGJHeHZZMkYwYVc5dUp5eGNiaUFnSUNBZ0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklGOTBhR2x6TGw5MWNtd3NJR05vYVd4a2NtVnVVbVZ6YjNWeVkyVnpPaUJmZEdocGN5NWZZMmhwYkdSeVpXNXpJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJRjkwYUdsekxsOXlaV3hsWVhObFRHbHpkR1Z1WlhKektDazdYRzRnSUNBZ1pHVnNaWFJsSUY5MGFHbHpMbDl3WVhKbGJuUXVYM0psY0c5eWRHVnljMXRmZEdocGN5NWZkWEpzWFR0Y2JpQWdmVnh1WEc0Z0lGOXZibEpsYlc5MFpWSmxjM0J2Ym5ObEtHMXpaeWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0h0Y2JpQWdJQ0FnSUdsa09pQnRjMmN1YVdRc0lIUjVjR1U2SUNkeVpYTndiMjV6WlNjc0lHWnliMjA2SUcxelp5NTBieXdnZEc4NklGOTBhR2x6TGw5MWNtd3NYRzRnSUNBZ0lDQmliMlI1T2lCN0lHTnZaR1U2SUcxelp5NWliMlI1TG1OdlpHVXNJR2xrWlc1MGFYUjVPaUJ0YzJjdVltOWtlUzVwWkdWdWRHbDBlU3dnYzI5MWNtTmxPaUJ0YzJjdVpuSnZiU0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdkwwWk1UMWN0U1U0NklHMWxjM05oWjJVZ2NtVmpaV2wyWldRZ1puSnZiU0JUZVc1amFHVnlJQzArSUhOMVluTmpjbWxpWlZ4dUlDQmZiMjVTWlcxdmRHVlRkV0p6WTNKcFltVW9iWE5uS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnNaWFFnYUhsd1pYSjBlVlZTVENBOUlHMXpaeTVpYjJSNUxuTjFZbk5qY21saVpYSTdYRzVjYmlBZ0lDQXZMM1poYkdsa1lYUmxJR2xtSUhOMVluTmpjbWx3ZEdsdmJpQmhiSEpsWVdSNUlHVjRhWE4wY3o5Y2JpQWdJQ0JwWmlBb1gzUm9hWE11WDNOMVluTmpjbWx3ZEdsdmJuTmJhSGx3WlhKMGVWVlNURjBwSUh0Y2JpQWdJQ0FnSUM4dklHeGxkQ0JsY25KdmNrMXpaeUE5SUh0Y2JpQWdJQ0FnSUM4dklDQWdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnWm5KdmJUb2diWE5uTG5SdkxDQjBiem9nYUhsd1pYSjBlVlZTVEN4Y2JpQWdJQ0FnSUM4dklDQWdZbTlrZVRvZ2V5QmpiMlJsT2lBMU1EQXNJR1JsYzJNNklDZFRkV0p6WTNKcGNIUnBiMjRnWm05eUlDZ25JQ3NnWDNSb2FYTXVYM1Z5YkNBcklDY2dPaUFuSUNzZ0lHaDVjR1Z5ZEhsVlVrd2dLeUFuS1NCaGJISmxZV1I1SUdWNGFYTjBjeUVuSUgxY2JpQWdJQ0FnSUM4dklIMDdYRzRnSUNBZ0lDQXZMMXh1SUNBZ0lDQWdMeThnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaGxjbkp2Y2sxelp5azdYRzRnSUNBZ0lDQXZMeUJ5WlhSMWNtNDdYRzVjYmlBZ0lDQWdJQzh2SUc1bGR5QjJaWEp6YVc5dUlHSmxZMkYxYzJVZ2IyWWdjbVYxYzJGblpWeHVJQ0FnSUNBZ1gzUm9hWE11WDNOMVluTmpjbWx3ZEdsdmJuTmJhSGx3WlhKMGVWVlNURjB1WDNKbGJHVmhjMlZNYVhOMFpXNWxjbk1vS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2TDJGemF5QjBieUJ6ZFdKelkzSnBZbVVnZEc4Z1UzbHVZMmhsY2o4Z0tHUmxjR1Z1WkhNZ2IyNGdkR2hsSUc5d1pYSmhkR2x2YmlCdGIyUmxLVnh1SUNBZ0lDOHZWRTlFVHpvZ1oyVjBJRzF2WkdVZ1puSnZiU0J2WW1wbFkzUWhYRzRnSUNBZ2JHVjBJRzF2WkdVZ1BTQW5jM1ZpTDNCMVlpYzdYRzVjYmlBZ0lDQnBaaUFvYlc5a1pTQTlQVDBnSjNOMVlpOXdkV0luS1NCN1hHNGdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQnRaWE56WVdkbElITmxiblFnZEc4Z2JHOWpZV3dnYUhsd1pYSjBlU0JoWkdSeVpYTnpJRk41Ym1Ob1pYSWdMVDRnWDI5dVJtOXlkMkZ5WkZ4dUlDQWdJQ0FnYkdWMElHWnZjbmRoY21STmMyY2dQU0I3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJQ2RtYjNKM1lYSmtKeXdnWm5KdmJUb2dYM1JvYVhNdVgzVnliQ3dnZEc4NklGOTBhR2x6TGw5dmQyNWxjaXhjYmlBZ0lDQWdJQ0FnWW05a2VUb2dleUIwZVhCbE9pQnRjMmN1ZEhsd1pTd2dabkp2YlRvZ2FIbHdaWEowZVZWU1RDd2dkRzg2SUY5MGFHbHpMbDkxY213c0lHbGtaVzUwYVhSNU9pQnRjMmN1WW05a2VTNXBaR1Z1ZEdsMGVTQjlYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0JmZEdocGN5NWZZblZ6TG5CdmMzUk5aWE56WVdkbEtHWnZjbmRoY21STmMyY3NJQ2h5WlhCc2VTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25abTl5ZDJGeVpDMXlaWEJzZVRvZ0p5d2djbVZ3YkhrcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY21Wd2JIa3VZbTlrZVM1amIyUmxJRDA5UFNBeU1EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JVjkwYUdsekxsOXpkV0p6WTNKcGNIUnBiMjV6VzJoNWNHVnlkSGxWVWt4ZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYzNWaWMyTnlhWEIwYVc5dWMxdG9lWEJsY25SNVZWSk1YU0E5SUc1bGR5QlRkV0p6WTNKcGNIUnBiMjRvWDNSb2FYTXVYMkoxY3l3Z1gzUm9hWE11WDI5M2JtVnlMQ0JmZEdocGN5NWZkWEpzTENCZmRHaHBjeTVmWTJocGJHUnlaVzV6TENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCVGRHOXlaU0JtYjNJZ1pXRmphQ0J5WlhCdmNuUmxjaUJvZVhCbGNuUjVJSFJvWlNCa1lYUmhUMkpxWldOMFhHNGdJQ0FnSUNBZ0lHeGxkQ0IxYzJWeVZWSk1PMXh1SUNBZ0lDQWdJQ0JwWmlBb2JYTm5MbUp2WkhrdWFXUmxiblJwZEhrZ0ppWWdiWE5uTG1KdlpIa3VhV1JsYm5ScGRIa3VkWE5sY2xCeWIyWnBiR1V1ZFhObGNsVlNUQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIVnpaWEpWVWt3Z1BTQnRjMmN1WW05a2VTNXBaR1Z1ZEdsMGVTNTFjMlZ5VUhKdlptbHNaUzUxYzJWeVZWSk1PMXh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDl3WVhKbGJuUXVYM04wYjNKbFJHRjBZVTlpYW1WamRITXVkWEJrWVhSbEtGOTBhR2x6TGw5MWNtd3NJQ2R6ZFdKelkzSnBZbVZ5VlhObGNuTW5MQ0IxYzJWeVZWSk1LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TGw5d1lYSmxiblF1WDNOMGIzSmxSR0YwWVU5aWFtVmpkSE11ZFhCa1lYUmxLRjkwYUdsekxsOTFjbXdzSUNkemRXSnpZM0pwY0hScGIyNXpKeXdnYUhsd1pYSjBlVlZTVENrN1hHNWNiaUFnSUNBZ0lDQWdMeTlHVEU5WExVOVZWRG9nYzNWaWMyTnlhWEIwYVc5dUlISmxjM0J2Ym5ObElITmxiblFnS0dadmNuZGhjbVFnWm5KdmJTQnBiblJsY201aGJDQkllWEJsY25SNUtWeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0h0Y2JpQWdJQ0FnSUNBZ0lDQnBaRG9nYlhObkxtbGtMQ0IwZVhCbE9pQW5jbVZ6Y0c5dWMyVW5MQ0JtY205dE9pQnRjMmN1ZEc4c0lIUnZPaUJ0YzJjdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNCaWIyUjVPaUJ5WlhCc2VTNWliMlI1WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ2ZWeHVYRzRnSUM4dlJreFBWeTFKVGpvZ2JXVnpjMkZuWlNCeVpXTmxhWFpsWkNCbWNtOXRJSEpsYlc5MFpTQlBZbk5sY25abGNrOWlhbVZqZENBdFBpQnlaVzF2ZG1WVGRXSnpZM0pwY0hScGIyNWNiaUFnWDI5dVVtVnRiM1JsVlc1VGRXSnpZM0pwWW1Vb2JYTm5LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCc1pYUWdhSGx3WlhKMGVWVlNUQ0E5SUcxelp5NWliMlI1TG5OMVluTmpjbWxpWlhJN1hHNWNiaUFnSUNCc1pYUWdjM1ZpYzJOeWFYQjBhVzl1SUQwZ1gzUm9hWE11WDNOMVluTmpjbWx3ZEdsdmJuTmJhSGx3WlhKMGVWVlNURjA3WEc0Z0lDQWdhV1lnS0hOMVluTmpjbWx3ZEdsdmJpa2dlMXh1SUNBZ0lDQWdjM1ZpYzJOeWFYQjBhVzl1TGw5eVpXeGxZWE5sVEdsemRHVnVaWEp6S0NrN1hHNGdJQ0FnSUNCa1pXeGxkR1VnWDNSb2FYTXVYM04xWW5OamNtbHdkR2x2Ym5OYmFIbHdaWEowZVZWU1RGMDdYRzVjYmlBZ0lDQWdJQzh2VkU5RVR6b2djMlZ1WkNCMWJpMXpkV0p6WTNKcFltVWdiV1Z6YzJGblpTQjBieUJUZVc1amFHVnlQeUFvWkdWd1pXNWtjeUJ2YmlCMGFHVWdiM0JsY21GMGFXOXVJRzF2WkdVcFhHNGdJQ0FnZlZ4dVhHNGdJSDFjYmx4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlNaWEJ2Y25SbGNrOWlhbVZqZER0Y2JpSXNJbU5zWVhOeklGTjBiM0psUkdGMFlVOWlhbVZqZEhNZ2UxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtITjBiM0poWjJWTllXNWhaMlZ5S1NCN1hHNGdJQ0FnYVdZZ0tDRnpkRzl5WVdkbFRXRnVZV2RsY2lrZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkYlUzUnZjbVVnUkdGMFlTQlBZbXBsWTNSelhTQXRJRTVsWldSeklIUm9aU0J6ZEc5eVlXZGxUV0Z1WVdkbGNpQmpiMjF3YjI1bGJuUW5LVHRjYmx4dUlDQWdJSFJvYVhNdVgzTjBiM0poWjJWTllXNWhaMlZ5SUQwZ2MzUnZjbUZuWlUxaGJtRm5aWEk3WEc0Z0lDQWdkR2hwY3k1ZmMzUnZjbVZFWVhSaFQySnFaV04wSUQwZ2UzMDdYRzRnSUgxY2JseHVJQ0J6WlhRb2NtVnpiM1Z5WTJVc0lHbHpVbVZ3YjNKMFpYSXNJSE5qYUdWdFlTd2djM1JoZEhWekxDQmtZWFJoTENCemRXSnpZM0pwY0hScGIyNHNJR05vYVd4a2NtVnVMQ0JqYUdsc1pISmxibEpsYzI5MWNtTmxjeXdnYzNWaWMyTnlhV0psY2xWelpYSXBJSHRjYmx4dUlDQWdJR3hsZENCMGVYQmxJRDBnZEdocGN5NWZaMlYwVkhsd1pVOW1UMkpxWldOMEtHbHpVbVZ3YjNKMFpYSXBPMXh1SUNBZ0lHbG1JQ2doZEdocGN5NWZjM1J2Y21WRVlYUmhUMkpxWldOMExtaGhjMDkzYmxCeWIzQmxjblI1S0hSNWNHVXBLU0IwYUdsekxsOXpkRzl5WlVSaGRHRlBZbXBsWTNSYmRIbHdaVjBnUFNCN2ZUdGNibHh1SUNBZ0lHbG1JQ2doZEdocGN5NWZjM1J2Y21WRVlYUmhUMkpxWldOMFczUjVjR1ZkTG1oaGMwOTNibEJ5YjNCbGNuUjVLSEpsYzI5MWNtTmxLU2tnZTF4dUlDQWdJQ0FnZEdocGN5NWZjM1J2Y21WRVlYUmhUMkpxWldOMFczUjVjR1ZkVzNKbGMyOTFjbU5sWFNBOUlIdGNiaUFnSUNBZ0lDQWdjbVZ6YjNWeVkyVTZJSEpsYzI5MWNtTmxMRnh1SUNBZ0lDQWdJQ0JwYzFKbGNHOXlkR1Z5T2lCcGMxSmxjRzl5ZEdWeUxGeHVJQ0FnSUNBZ0lDQnpkV0p6WTNKcGNIUnBiMjV6T2lCYlhTeGNiaUFnSUNBZ0lDQWdjM1ZpYzJOeWFXSmxjbFZ6WlhKek9pQmJYVnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWkdGMFlTa2dkR2hwY3k1ZmMzUnZjbVZFWVhSaFQySnFaV04wVzNSNWNHVmRXM0psYzI5MWNtTmxYUzVrWVhSaElEMGdaR0YwWVR0Y2JpQWdJQ0JwWmlBb2MyTm9aVzFoS1NCMGFHbHpMbDl6ZEc5eVpVUmhkR0ZQWW1wbFkzUmJkSGx3WlYxYmNtVnpiM1Z5WTJWZExuTmphR1Z0WVNBOUlITmphR1Z0WVR0Y2JpQWdJQ0JwWmlBb2MzUmhkSFZ6S1NCMGFHbHpMbDl6ZEc5eVpVUmhkR0ZQWW1wbFkzUmJkSGx3WlYxYmNtVnpiM1Z5WTJWZExuTjBZWFIxY3lBOUlITjBZWFIxY3p0Y2JpQWdJQ0JwWmlBb1kyaHBiR1J5Wlc0cElIUm9hWE11WDNOMGIzSmxSR0YwWVU5aWFtVmpkRnQwZVhCbFhWdHlaWE52ZFhKalpWMHVZMmhwYkdSeVpXNGdQU0JqYUdsc1pISmxianRjYmlBZ0lDQnBaaUFvWTJocGJHUnlaVzVTWlhOdmRYSmpaWE1wSUhSb2FYTXVYM04wYjNKbFJHRjBZVTlpYW1WamRGdDBlWEJsWFZ0eVpYTnZkWEpqWlYwdVkyaHBiR1J5Wlc1U1pYTnZkWEpqWlhNZ1BTQmphR2xzWkhKbGJsSmxjMjkxY21ObGN6dGNibHh1SUNBZ0lHbG1JQ2h6ZFdKelkzSnBjSFJwYjI0Z0ppWWdJV2x6VW1Wd2IzSjBaWElwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpWUnZRWEp5WVhrb2NtVnpiM1Z5WTJVc0lDZHpkV0p6WTNKcGNIUnBiMjV6Snl3Z2MzVmljMk55YVhCMGFXOXVMQ0IwZVhCbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NWZjM1J2Y21WRVlYUmhUMkpxWldOMFczUjVjR1ZkVzNKbGMyOTFjbU5sWFM1dmQyNWxjaUE5SUhOMVluTmpjbWx3ZEdsdmJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jM1ZpYzJOeWFXSmxjbFZ6WlhJcElIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOXpkRzl5WlVSaGRHRlBZbXBsWTNSYmRIbHdaVjFiY21WemIzVnlZMlZkTG5OMVluTmpjbWxpWlhKVmMyVnljeTVwYm1SbGVFOW1LSE4xWW5OamNtbGlaWEpWYzJWeUtTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWVWIwRnljbUY1S0hKbGMyOTFjbU5sTENBbmMzVmljMk55YVdKbGNsVnpaWEp6Snl3Z2MzVmljMk55YVdKbGNsVnpaWElzSUhSNWNHVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6ZEc5eVlXZGxUV0Z1WVdkbGNpNXpaWFFvSjNONWJtTm9aWEpOWVc1aFoyVnlPazlpYW1WamRGVlNUSE1uTENBeExDQjBhR2x6TGw5emRHOXlaVVJoZEdGUFltcGxZM1FwTzF4dUlDQjlYRzVjYmlBZ2RYQmtZWFJsUkdGMFlTaHlaWE52ZFhKalpTd2dhMlY1TENCaGRIUnlhV0oxZEdVc0lIWmhiSFZsTENCcGMxSmxjRzl5ZEdWeUlEMGdkSEoxWlNrZ2UxeHVJQ0FnSUd4bGRDQjBlWEJsSUQwZ2RHaHBjeTVmWjJWMFZIbHdaVTltVDJKcVpXTjBLR2x6VW1Wd2IzSjBaWElwTzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDNOMGIzSmxSR0YwWVU5aWFtVmpkQzVvWVhOUGQyNVFjbTl3WlhKMGVTaDBlWEJsS1NBbUppQjBhR2x6TGw5emRHOXlaVVJoZEdGUFltcGxZM1JiZEhsd1pWMWJjbVZ6YjNWeVkyVmRJQ1ltSUhKbGMyOTFjbU5sSUNZbUlHdGxlU0FtSmlCMllXeDFaU2tnZTF4dVhHNGdJQ0FnSUNCcFppQW9hMlY1SUQwOVBTQW5jM1ZpYzJOeWFYQjBhVzl1Y3ljZ2ZId2dhMlY1SUQwOVBTQW5jM1ZpYzJOeWFXSmxjbFZ6WlhKekp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWVWIwRnljbUY1S0hKbGMyOTFjbU5sTENCclpYa3NJSFpoYkhWbExDQjBlWEJsS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM04wYjNKbFJHRjBZVTlpYW1WamRGdDBlWEJsWFZ0eVpYTnZkWEpqWlYxYmEyVjVYVnRoZEhSeWFXSjFkR1ZkSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpkRzl5WVdkbFRXRnVZV2RsY2k1elpYUW9KM041Ym1Ob1pYSk5ZVzVoWjJWeU9rOWlhbVZqZEZWU1RITW5MQ0F4TENCMGFHbHpMbDl6ZEc5eVpVUmhkR0ZQWW1wbFkzUXBPMXh1WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnZFhCa1lYUmxLSEpsYzI5MWNtTmxMQ0JyWlhrc0lIWmhiSFZsTENCcGMxSmxjRzl5ZEdWeUlEMGdkSEoxWlNrZ2UxeHVJQ0FnSUd4bGRDQjBlWEJsSUQwZ2RHaHBjeTVmWjJWMFZIbHdaVTltVDJKcVpXTjBLR2x6VW1Wd2IzSjBaWElwTzF4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11WDNOMGIzSmxSR0YwWVU5aWFtVmpkRnQwZVhCbFhTQW1KaUIwYUdsekxsOXpkRzl5WlVSaGRHRlBZbXBsWTNSYmRIbHdaVjFiY21WemIzVnlZMlZkSUNZbUlISmxjMjkxY21ObElDWW1JR3RsZVNBbUppQjJZV3gxWlNrZ2UxeHVYRzRnSUNBZ0lDQnBaaUFvYTJWNUlEMDlQU0FuYzNWaWMyTnlhWEIwYVc5dWN5Y2dmSHdnYTJWNUlEMDlQU0FuYzNWaWMyTnlhV0psY2xWelpYSnpKeWtnZTF4dUlDQWdJQ0FnSUNCc1pYUWdkWEJrWVhSbElEMGdkSEoxWlR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYTJWNUlEMDlQU0FuYzNWaWMyTnlhWEIwYVc5dWN5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMWNHUmhkR1VnUFNBaGRHaHBjeTVmYVhOUGQyNWxjaWgwYUdsekxsOXpkRzl5WlVSaGRHRlBZbXBsWTNSYmRIbHdaVjFiY21WemIzVnlZMlZkTENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZFhCa1lYUmxLU0IwYUdsekxsOTFjR1JoZEdWVWIwRnljbUY1S0hKbGMyOTFjbU5sTENCclpYa3NJSFpoYkhWbExDQjBlWEJsS1R0Y2JseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSdmNtVkVZWFJoVDJKcVpXTjBXM1I1Y0dWZFczSmxjMjkxY21ObFhWdHJaWGxkSUQwZ2RtRnNkV1U3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpkRzl5WVdkbFRXRnVZV2RsY2k1elpYUW9KM041Ym1Ob1pYSk5ZVzVoWjJWeU9rOWlhbVZqZEZWU1RITW5MQ0F4TENCMGFHbHpMbDl6ZEc5eVpVUmhkR0ZQWW1wbFkzUXBPMXh1WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWkdWc1pYUmxLSEpsYzI5MWNtTmxMQ0JyWlhrc0lIWmhiSFZsTENCcGMxSmxjRzl5ZEdWeUlEMGdkSEoxWlNrZ2UxeHVYRzRnSUNBZ2JHVjBJSFI1Y0dVZ1BTQjBhR2x6TGw5blpYUlVlWEJsVDJaUFltcGxZM1FvYVhOU1pYQnZjblJsY2lrN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k1ZmMzUnZjbVZFWVhSaFQySnFaV04wVzNSNWNHVmRJQ1ltSUhSb2FYTXVYM04wYjNKbFJHRjBZVTlpYW1WamRGdDBlWEJsWFZ0eVpYTnZkWEpqWlYwZ0ppWWdjbVZ6YjNWeVkyVWdKaVlnYTJWNUlDWW1JSFpoYkhWbEtTQjdYRzVjYmlBZ0lDQWdJR2xtSUNoclpYa2dQVDA5SUNkemRXSnpZM0pwY0hScGIyNXpKeUI4ZkNCclpYa2dQVDA5SUNkemRXSnpZM0pwWW1WeVZYTmxjbk1uS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGJXOTJaVVp5YjIxQmNuSmhlU2h5WlhOdmRYSmpaU3dnYTJWNUxDQjJZV3gxWlN3Z2RIbHdaU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZmMzUnZjbVZFWVhSaFQySnFaV04wVzNSNWNHVmRXM0psYzI5MWNtTmxYVnRyWlhsZE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzNSdmNtRm5aVTFoYm1GblpYSXVjMlYwS0NkemVXNWphR1Z5VFdGdVlXZGxjanBQWW1wbFkzUlZVa3h6Snl3Z01Td2dkR2hwY3k1ZmMzUnZjbVZFWVhSaFQySnFaV04wS1R0Y2JseHVJQ0FnSUgxY2JseHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJQUkU4NklHTm9aV05ySUdsbUlIUm9hWE1nY0hKdlkyVnpjeUJwY3lCMmFXRmliR1VnWW1WallYVnpaU0IwYUdVZ2MzUnZjbUZuWlNCdFlXNWhaMlZ5SUdGaWFXeHBkSGtnZEc4Z1pHVnNaWFJsWEc0Z0lDQXFJRzV2ZHlCMGFHVWdjM1J2Y21GblpVMWhibUZuWlhJZ2IyNXNlU0JqWVc0Z1pHVnNaWFJsSUdGdUlITndaV05wWm1saklHdGxlU3dnWW5WMElHNXZkQ0IwYUdVZ2MzQmxZMmxtYVdNZ2RtRnNkV1VnYVc1emFXUmxJSFJvWVhRZ2EyVjVPMXh1SUNBZ0tpOWNiaUFnWkdWc1pYUmxVbVZ6YjNWeVkyVW9jbVZ6YjNWeVkyVXBJSHRjYmlBZ0lDQnBaaUFvY21WemIzVnlZMlVwSUh0Y2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwUVd4c0tDa3VkR2hsYmlnb2MzUnZjbVZrUkdGMFlVOWlhbVZqZEhNcElEMCtJSHRjYmlBZ0lDQWdJQ0FnYkdWMElIUnRjQ0E5SUhOMGIzSmxaRVJoZEdGUFltcGxZM1J6TzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYlhBdWFHRnpUM2R1VUhKdmNHVnlkSGtvY21WemIzVnlZMlVwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElIUnRjQzV2WW5ObGNuWmxjbk5iY21WemIzVnlZMlZkTzF4dUlDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCMGJYQXVjbVZ3YjNKMFpYSnpXM0psYzI5MWNtTmxYVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjM1J2Y21GblpVMWhibUZuWlhJdWMyVjBLQ2R6ZVc1amFHVnlUV0Z1WVdkbGNqcFBZbXBsWTNSVlVreHpKeXdnTVN3Z2RHMXdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RiVTNSdmNtVkVZWFJoVDJKcVpXTjBjMTBnTFNCRFlXNWNYQ2QwSUdSbGJHVjBaU0IwYUdseklDY2dLeUJ5WlhOdmRYSmpaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lIMWNibHh1SUNCblpYUkJiR3dvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTjBiM0poWjJWTllXNWhaMlZ5TG1kbGRDZ25jM2x1WTJobGNrMWhibUZuWlhJNlQySnFaV04wVlZKTWN5Y3BPMXh1SUNCOVhHNWNiaUFnWjJWMEtISmxjMjkxY21ObEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzTjBiM0psUkdGMFlVOWlhbVZqZEZ0eVpYTnZkWEpqWlYwcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6ZEc5eVpVUmhkR0ZQWW1wbFkzUmJjbVZ6YjNWeVkyVmRPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjF0VGRHOXlaVVJoZEdGUFltcGxZM1J6WFNBdElFTmhibHhjSjNRZ1ptbHVaQ0IwYUdseklDY2dLeUJ5WlhOdmRYSmpaU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxWEc0Z0lDQXFMMXh1SUNCblpYUlNaWE52ZFhKalpYTkNlVU55YVhSbGNtbGhLRzF6Wnl3Z2FYTlNaWEJ2Y25SbGNpa2dlMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxLU0E5UGlCN1hHNWNiaUFnSUNBZ0lHeGxkQ0IwZVhCbElEMGdkR2hwY3k1ZloyVjBWSGx3WlU5bVQySnFaV04wS0dselVtVndiM0owWlhJcE8xeHVYRzRnSUNBZ0lDQjBhR2x6TG1kbGRFRnNiQ2dwTG5Sb1pXNG9LSE4wYjNKbFpFUmhkR0ZQWW1wbFkzUnpLU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGemRHOXlaV1JFWVhSaFQySnFaV04wY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0Nka2IyNWNYQ2QwSUdoaGRtVWdjM1J2Y21Wa0lHUmhkR0VnYjJKcVpXTjBjeWNwTzF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTnZiSFpsS0c1MWJHd3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRzF6Wnk1aWIyUjVJQ1ltSUcxelp5NWliMlI1TG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2R5WlhOMWJXVW5LU0FtSmlBaGJYTm5MbUp2WkhrdWNtVnpkVzFsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjMjlzZG1Vb2JuVnNiQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJqYUdWamF5QnBaaUIwYUdVZ2JXVnpjMkZuWlNCb1lYWmxJRzkwYUdWeUlHTnlhWFJsY21saFhHNGdJQ0FnSUNBZ0lDOHZJR2xtSUc1dmRDQnpaV0Z5WTJnZ1ptOXlJRzl1SUhSb1pTQW5abkp2YlNjZ2IyWWdkR2hsSUcxbGMzTmhaMlV1WEc0Z0lDQWdJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnYkdWMElHaGhjMU4xWW5OamNtbHdkR2x2YmlBOUlIUm9hWE11WDJoaGMxTjFZbk5qY21sd2RHbHZiaWh6ZEc5eVpXUkVZWFJoVDJKcVpXTjBjMXQwZVhCbFhTd2diWE5uTG1aeWIyMHBPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FYTlBkMjVsY2lBOUlIUm9hWE11WDNObFlYSmphRTkzYm1WeUtITjBiM0psWkVSaGRHRlBZbXBsWTNSelczUjVjR1ZkTENCdGMyY3Vabkp2YlNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0cxelp5NW9ZWE5QZDI1UWNtOXdaWEowZVNnblpuSnZiU2NwSUNZbUlHaGhjMU4xWW5OamNtbHdkR2x2YmlCOGZDQnBjMDkzYm1WeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElISmxjMjkxY21ObElEMGdkR2hwY3k1ZloyVjBVbVZ6YjNWeVkyVnpRbmxUZFdKelkzSnBjSFJwYjI0b2MzUnZjbVZrUkdGMFlVOWlhbVZqZEhOYmRIbHdaVjBzSUcxelp5NW1jbTl0S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJR3hsZENCcFpHVnVkR2wwZVVadmRXNWtSR0YwWVNBOUlGdGRPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHRjMmN1WW05a2VTQW1KaUJ0YzJjdVltOWtlUzVwWkdWdWRHbDBlU2tnYVdSbGJuUnBkSGxHYjNWdVpFUmhkR0VnUFNCMGFHbHpMbDluWlhSU1pYTnZkWEpqWlhOQ2VVbGtaVzUwYVhSNUtITjBiM0psWkVSaGRHRlBZbXBsWTNSelczUjVjR1ZkTENCdGMyY3VZbTlrZVM1cFpHVnVkR2wwZVNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2MyTm9aVzFoUm05MWJtUkVZWFJoSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHMXpaeTVpYjJSNUlDWW1JRzF6Wnk1aWIyUjVMbk5qYUdWdFlTa2djMk5vWlcxaFJtOTFibVJFWVhSaElEMGdkR2hwY3k1ZloyVjBVbVZ6YjNWeVkyVnpRbmxUWTJobGJXRW9jM1J2Y21Wa1JHRjBZVTlpYW1WamRITmJkSGx3WlYwc0lHMXpaeTVpYjJSNUxuTmphR1Z0WVNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZVVp2ZFc1a0lEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRzF6Wnk1aWIyUjVJQ1ltSUcxelp5NWliMlI1TG5aaGJIVmxLU0JrWVhSaFJtOTFibVFnUFNCMGFHbHpMbDluWlhSU1pYTnZkWEpqWlhOQ2VVUmhkR0VvYzNSdmNtVmtSR0YwWVU5aWFtVmpkSE5iZEhsd1pWMHNJRzF6Wnk1aWIyUjVMblpoYkhWbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dklIbHZkU0JqWVc0Z2NHRnpjeUJoY3lCaGNuSmhlWE1nWVhNZ2VXOTFJSGRoYm5RdUxpQnBkQ0IzYVd4c0lHSmxJRzFsY21kbFpDQnBiaUJ2YmlCd2JHRmpaVnh1SUNBZ0lDQWdJQ0FnSUM4dklISmxiVzkyWldRZ1pIVndiR2xqWVhSbGN6dGNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdQU0IwYUdsekxsOXBiblJsY25ObFkzUnBiMjRvY21WemIzVnlZMlVzSUdsa1pXNTBhWFI1Um05MWJtUkVZWFJoTENCelkyaGxiV0ZHYjNWdVpFUmhkR0VzSUdSaGRHRkdiM1Z1WkNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjMjlzZG1Vb2JuVnNiQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnNaWFFnYVc1cGRDQTlJSHQ5TzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFF1Wm05eVJXRmphQ2dvYTJWNUtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR04xY25KbGJuUkpjMUpsY0c5eWRHVnlJRDBnYzNSdmNtVmtSR0YwWVU5aWFtVmpkSE5iZEhsd1pWMWJhMlY1WFR0Y2JpQWdJQ0FnSUNBZ0lDQnBibWwwVzJ0bGVWMGdQU0JqZFhKeVpXNTBTWE5TWlhCdmNuUmxjanRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYVc1cGREdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRUZEc5eVpTQkVZWFJoSUU5aWFtVmpkSE5kSUMwZ0p5d2dhVzVwZENrN1hHNWNiaUFnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHBibWwwS1R0Y2JpQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ2ZTazdYRzVjYmlBZ2ZWeHVYRzRnSUY5blpYUlNaWE52ZFhKalpYTkNlVWxrWlc1MGFYUjVLSE4wYjNKbFpFUmhkR0VzSUhWelpYSlZVa3dwSUh0Y2JpQWdJQ0JwWmlBb0lYTjBiM0psWkVSaGRHRXBJSEpsZEhWeWJpQmJYVHRjYmx4dUlDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdWEyVjVjeWh6ZEc5eVpXUkVZWFJoS1M1bWFXeDBaWElvS0c5aWFtVmpkRlZTVENrZ1BUNGdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITjBiM0psWkVSaGRHRmJiMkpxWldOMFZWSk1YUzV6ZFdKelkzSnBZbVZ5VlhObGNuTXVabWxzZEdWeUtDaGpkWEp5Wlc1MEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBJRDA5UFNCMWMyVnlWVkpNTzF4dUlDQWdJQ0FnZlNrdWJHVnVaM1JvTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1gyZGxkRkpsYzI5MWNtTmxjMEo1VTNWaWMyTnlhWEIwYVc5dUtITjBiM0psWkVSaGRHRXNJSE4xWW5OamNtbHdkR2x2YmlrZ2UxeHVJQ0FnSUdsbUlDZ2hjM1J2Y21Wa1JHRjBZU2tnY21WMGRYSnVJRnRkTzF4dVhHNGdJQ0FnY21WMGRYSnVJRTlpYW1WamRDNXJaWGx6S0hOMGIzSmxaRVJoZEdFcExtWnBiSFJsY2lnb2IySnFaV04wVlZKTUtTQTlQaUI3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjM1J2Y21Wa1JHRjBZVnR2WW1wbFkzUlZVa3hkTG5OMVluTmpjbWx3ZEdsdmJuTXVabWxzZEdWeUtDaGpkWEp5Wlc1MEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBJRDA5UFNCemRXSnpZM0pwY0hScGIyNDdYRzRnSUNBZ0lDQjlLUzVzWlc1bmRHZzdYRzRnSUNBZ2ZTazdYRzVjYmlBZ2ZWeHVYRzRnSUY5blpYUlNaWE52ZFhKalpYTkNlVk5qYUdWdFlTaHpkRzl5WldSRVlYUmhMQ0J6WTJobGJXRXBJSHRjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG10bGVYTW9jM1J2Y21Wa1JHRjBZU2t1Wm1sc2RHVnlLQ2h2WW1wbFkzUlZVa3dwSUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0JqZFhKeVpXNTBUMkpxWldOMElEMGdjM1J2Y21Wa1JHRjBZVnR2WW1wbFkzUlZVa3hkTzF4dUlDQWdJQ0FnY21WMGRYSnVJRTlpYW1WamRDNXJaWGx6S0dOMWNuSmxiblJQWW1wbFkzUXBMbVpwYkhSbGNpZ29hMlY1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnJaWGtnUFQwOUlDZHpZMmhsYldFbklDWW1JR04xY25KbGJuUlBZbXBsWTNSYmEyVjVYU0E5UFQwZ2MyTm9aVzFoTzF4dUlDQWdJQ0FnZlNrdWJHVnVaM1JvTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1gyZGxkRkpsYzI5MWNtTmxjMEo1UkdGMFlTaHpkRzl5WldSRVlYUmhMQ0JrWVhSaEtTQjdYRzRnSUNBZ2FXWWdLQ0ZrWVhSaEtTQnlaWFIxY200Z1cxMDdYRzVjYmlBZ0lDQnlaWFIxY200Z1QySnFaV04wTG10bGVYTW9jM1J2Y21Wa1JHRjBZU2t1Wm1sc2RHVnlLQ2h2WW1wbFkzUlZVa3dwSUQwK0lIdGNiaUFnSUNBZ0lHeGxkQ0JqZFhKeVpXNTBUMkpxWldOMElEMGdjM1J2Y21Wa1JHRjBZVnR2WW1wbFkzUlZVa3hkTG1SaGRHRTdYRzRnSUNBZ0lDQnlaWFIxY200Z1QySnFaV04wTG10bGVYTW9ZM1Z5Y21WdWRFOWlhbVZqZENrdVptbHNkR1Z5S0NoclpYa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdjMlZoY21Ob0lHOXVJSE4wYjNKbFJHRjBZVTlpYW1WamRITWdabTl5SUhOd1pXTnBabWxqSUd0bGVTQndjbTkyYVdSbFpDQm1jbTl0SUdSaGRHRTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlBZbXBsWTNRdWEyVjVjeWhrWVhSaEtTNW1hV3gwWlhJb2MyVmhjbU5vUm05eUlEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYTJWNUlEMDlQU0J6WldGeVkyaEdiM0lnSmlZZ1kzVnljbVZ1ZEU5aWFtVmpkRnRyWlhsZElEMDlQU0JrWVhSaFczTmxZWEpqYUVadmNsMDdYRzRnSUNBZ0lDQWdJSDBwTG14bGJtZDBhRHRjYmx4dUlDQWdJQ0FnZlNrdWJHVnVaM1JvTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1gyaGhjMU4xWW5OamNtbHdkR2x2YmloemRHOXlaV1JFWVhSaExDQnpkV0p6WTNKcGNIUnBiMjRwSUh0Y2JpQWdJQ0JwWmlBb0lYTjBiM0psWkVSaGRHRXBJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVhMlY1Y3loemRHOXlaV1JFWVhSaEtTNW1hV3gwWlhJb0tHOWlhbVZqZEZWU1RDa2dQVDRnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSE4wYjNKbFpFUmhkR0ZiYjJKcVpXTjBWVkpNWFM1emRXSnpZM0pwY0hScGIyNXpMbVpwYkhSbGNpZ29ZM1Z5Y21WdWRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTNWeWNtVnVkQ0E5UFQwZ2MzVmljMk55YVhCMGFXOXVPMXh1SUNBZ0lDQWdmU2t1YkdWdVozUm9PMXh1SUNBZ0lIMHBMbXhsYm1kMGFDQStJREFnUHlCMGNuVmxJRG9nWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0JmYzJWaGNtTm9UM2R1WlhJb2MzUnZjbVZrUkdGMFlTd2dabkp2YlNrZ2UxeHVJQ0FnSUdsbUlDZ2hjM1J2Y21Wa1JHRjBZU2tnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUU5aWFtVmpkQzVyWlhsektITjBiM0psWkVSaGRHRXBMbVpwYkhSbGNpZ29iMkpxWldOMFZWSk1LU0E5UGlCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzNSdmNtVmtSR0YwWVZ0dlltcGxZM1JWVWt4ZExtOTNibVZ5SUQwOVBTQm1jbTl0TzF4dUlDQWdJSDBwTG14bGJtZDBhQ0ErSURBZ1B5QjBjblZsSURvZ1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCZmFYTlBkMjVsY2loMllXeDFaU3dnZFhKc0tTQjdYRzRnSUNBZ2FXWWdLQ0YyWVd4MVpTa2djbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJSEpsZEhWeWJpQjJZV3gxWlM1dmQyNWxjaUE5UFQwZ2RYSnNJRDhnZEhKMVpTQTZJR1poYkhObE8xeHVJQ0I5WEc1Y2JpQWdYMmx1ZEdWeWMyVmpkR2x2YmlncElIdGNiaUFnSUNCc1pYUWdZWEpuY3lBOUlFRnljbUY1TG1aeWIyMG9ZWEpuZFcxbGJuUnpLVHRjYmx4dUlDQWdJR3hsZENCeVpYTjFiSFFnUFNCaGNtZHpMbkpsWkhWalpTZ29abWx5YzNRc0lITmxZMjl1WkNrZ1BUNGdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHWnBjbk4wTG1OdmJtTmhkQ2h6WldOdmJtUXBPMXh1SUNBZ0lIMHBMbVpwYkhSbGNpZ29kbUZzZFdVc0lHbHVaR1Y0TENCelpXeG1LU0E5UGlCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYzJWc1ppNXBibVJsZUU5bUtIWmhiSFZsS1NBOVBUMGdhVzVrWlhnN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxSmxjM1ZzZENCaGJpQjFibWx4ZFdVZ1lYSnlZWGtnYjJZZ2MzUnlhVzVuY3pvZ0p5d2djbVZ6ZFd4MEtUdGNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNCOVhHNWNiaUFnWDNWd1pHRjBaVlJ2UVhKeVlYa29jbVZ6YjNWeVkyVXNJR3RsZVN3Z2RtRnNkV1VzSUhSNWNHVXBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NWZjM1J2Y21WRVlYUmhUMkpxWldOMFczUjVjR1ZkVzNKbGMyOTFjbU5sWFZ0clpYbGRMbWx1WkdWNFQyWW9kbUZzZFdVcEtTQjBhR2x6TGw5emRHOXlaVVJoZEdGUFltcGxZM1JiZEhsd1pWMWJjbVZ6YjNWeVkyVmRXMnRsZVYwdWNIVnphQ2gyWVd4MVpTazdYRzRnSUgxY2JseHVJQ0JmY21WdGIzWmxSbkp2YlVGeWNtRjVLSEpsYzI5MWNtTmxMQ0JyWlhrc0lIWmhiSFZsTENCMGVYQmxLU0I3WEc0Z0lDQWdiR1YwSUdsdVpHVjRUMlpXWVd4MVpTQTlJSFJvYVhNdVgzTjBiM0psUkdGMFlVOWlhbVZqZEZ0MGVYQmxYVnR5WlhOdmRYSmpaVjFiYTJWNVhTNXBibVJsZUU5bUtIWmhiSFZsS1R0Y2JpQWdJQ0JwWmlBb2FXNWtaWGhQWmxaaGJIVmxLU0IwYUdsekxsOXpkRzl5WlVSaGRHRlBZbXBsWTNSYmRIbHdaVjFiY21WemIzVnlZMlZkVzJ0bGVWMHVjM0JzYVdObEtHbHVaR1Y0VDJaV1lXeDFaU3dnTVNrN1hHNGdJSDFjYmx4dUlDQmZhR0Z6Vm1Gc2RXVW9iMkpxTENCclpYa3NJSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc5aWFpNW9ZWE5QZDI1UWNtOXdaWEowZVNoclpYa3BJQ1ltSUc5aWFsdHJaWGxkSUQwOVBTQjJZV3gxWlR0Y2JpQWdmVnh1WEc0Z0lGOW5aWFJVZVhCbFQyWlBZbXBsWTNRb2FYTlNaWEJ2Y25SbGNpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCcGMxSmxjRzl5ZEdWeUlEOGdKM0psY0c5eWRHVnljeWNnT2lBbmIySnpaWEoyWlhKekp6dGNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRk4wYjNKbFJHRjBZVTlpYW1WamRITTdYRzRpTENKamJHRnpjeUJUZFdKelkzSnBjSFJwYjI0Z2UxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHSjFjeXdnYjNkdVpYSXNJSFZ5YkN3Z1kyaHBiR1J5Wlc1ekxDQnBjMUpsY0c5eWRHVnlLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCc1pYUWdZMmhwYkdSQ1lYTmxWVkpNSUQwZ2RYSnNJQ3NnSnk5amFHbHNaSEpsYmk4bk8xeHVJQ0FnSUd4bGRDQmphR0Z1WjJWVlVrd2dQU0IxY213Z0t5QW5MMk5vWVc1blpYTW5PMXh1WEc0Z0lDQWdMeTl3Y205alpYTnpJR1JsYkdWMFpTQnRaWE56WVdkbFhHNGdJQ0FnWDNSb2FYTXVYMlJsYkdWMFpVeHBjM1JsYm1WeUlEMGdZblZ6TG1Ga1pFeHBjM1JsYm1WeUtHTm9ZVzVuWlZWU1RDd2dLRzF6WnlrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0cxelp5NTBlWEJsSUQwOVBTQW5aR1ZzWlhSbEp5a2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblUzVmljMk55YVhCMGFXOXVMVVJGVEVWVVJUb2dKeXdnYlhObktUdGNibHh1SUNBZ0lDQWdJQ0F2TDBaTVQxY3RUMVZVT2lCdFpYTnpZV2RsSUhObGJuUWdkRzhnWVd4c0lITjFZbk5qY21saVpYSnpYRzRnSUNBZ0lDQWdJR3hsZENCa1pXeGxkR1ZOWlhOellXZGxWRzlJZVhCbGNuUjVJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNka1pXeGxkR1VuTENCbWNtOXRPaUJ0YzJjdVpuSnZiU3dnZEc4NklHOTNibVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ2FXUmxiblJwZEhrNklHMXpaeTVpYjJSNUxtbGtaVzUwYVhSNUxDQnlaWE52ZFhKalpUb2dkWEpzSUgxY2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0F2TDNObGJtUWdaR1ZzWlhSbElIUnZJR2g1Y0dWeWRIbGNiaUFnSUNBZ0lDQWdZblZ6TG5CdmMzUk5aWE56WVdkbEtHUmxiR1YwWlUxbGMzTmhaMlZVYjBoNWNHVnlkSGtzSUNoeVpYQnNlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkVGRXSnpZM0pwY0hScGIyNHRSRVZNUlZSRkxWSkZVRXhaT2lBbkxDQnlaWEJzZVNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmNtVnNaV0Z6WlV4cGMzUmxibVZ5Y3lncE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNrN1hHNWNiaUFnSUNBdkwyRmtaQ0JqYUdGdVoyVWdjSFZpYkdsemFDQmhaR1J5WlhOeklHOXlJR1p2Y25kaGNtUmNiaUFnSUNCcFppQW9hWE5TWlhCdmNuUmxjaWtnZTF4dUlDQWdJQ0FnWDNSb2FYTXVYMk5vWVc1blpVeHBjM1JsYm1WeUlEMGdZblZ6TG1Ga1pGQjFZbXhwYzJnb1kyaGhibWRsVlZKTUtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWDNSb2FYTXVYMk5vWVc1blpVeHBjM1JsYm1WeUlEMGdZblZ6TG1Ga1pFWnZjbmRoY21Rb1kyaGhibWRsVlZKTUxDQnZkMjVsY2lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDNSb2FYTXVYMk5vYVd4a2NtVnVUR2x6ZEdWdVpYSnpJRDBnVzEwN1hHNGdJQ0FnWTJocGJHUnlaVzV6TG1admNrVmhZMmdvS0dOb2FXeGtLU0E5UGlCN1hHNGdJQ0FnSUNCc1pYUWdZMmhwYkdSSlpDQTlJR05vYVd4a1FtRnpaVlZTVENBcklHTm9hV3hrTzF4dVhHNGdJQ0FnSUNBdkwyRmtaQ0JqYUdsc1pISmxiaUJ3ZFdKc2FYTm9JR0ZrWkhKbGMzTmNiaUFnSUNBZ0lHeGxkQ0JqYUdsc1pISmxia1p2Y25kaGNtUWdQU0JpZFhNdVlXUmtVSFZpYkdsemFDaGphR2xzWkVsa0tUdGNiaUFnSUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3k1d2RYTm9LR05vYVd4a2NtVnVSbTl5ZDJGeVpDazdYRzVjYmlBZ0lDQWdJQzh2WVdSa0lITmxiR1lnWm05eWQyRnlaQ0JwWmlCaGJpQnZZbk5sY25abGNseHVJQ0FnSUNBZ2FXWWdLQ0ZwYzFKbGNHOXlkR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6Wld4bVJtOXlkMkZ5WkNBOUlHSjFjeTVoWkdSR2IzSjNZWEprS0dOb2FXeGtTV1FzSUc5M2JtVnlLVHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYMk5vYVd4a2NtVnVUR2x6ZEdWdVpYSnpMbkIxYzJnb2MyVnNaa1p2Y25kaGNtUXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnWDNKbGJHVmhjMlZNYVhOMFpXNWxjbk1vS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJRjkwYUdsekxsOWtaV3hsZEdWTWFYTjBaVzVsY2k1eVpXMXZkbVVvS1R0Y2JseHVJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVk1hWE4wWlc1bGNpNXlaVzF2ZG1Vb0tUdGNibHh1SUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3k1bWIzSkZZV05vS0NobWIzSjNZWEprS1NBOVBpQjdYRzRnSUNBZ0lDQm1iM0ozWVhKa0xuSmxiVzkyWlNncE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVM1ZpYzJOeWFYQjBhVzl1TzF4dUlpd2lMeW9xWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZCVUlFbHViM1podzZmRG8yOGdaU0JUYVhOMFpXMWhjeUJUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCSlRrVlRReTFKUkZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUlZVOUNTVk1nVGtWVVYwOVNTMU1nVTB4Y2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JsSkJWVTVJVDBaRlVpMUhSVk5GVEV4VFEwaEJSbFFnV2xWU0lFWlBSVkpFUlZKVlRrY2dSRVZTSUVGT1IwVlhRVTVFVkVWT0lFWlBVbE5EU0ZWT1J5QkZMbFpjYmlvZ1EyOXdlWEpwWjJoMElESXdNVFlnVDFKQlRrZEZJRk5CWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUVSbGRYUnpZMmhsSUZSbGJHVnJiMjBnUVVkY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1FYQnBlbVZsWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUZSRlEwaE9TVk5EU0VVZ1ZVNUpWa1ZTVTBsVVFWUWdRa1ZTVEVsT1hHNHFYRzRxSUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aU0JjSWt4cFkyVnVjMlZjSWlrN1hHNHFJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlVnZDJsMGFDQjBhR1VnVEdsalpXNXpaUzVjYmlvZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRxWEc0cUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNHFYRzRxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5d2djMjltZEhkaGNtVmNiaW9nWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNGdYQ0pCVXlCSlUxd2lJRUpCVTBsVExGeHVLaUJYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxrZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzVjYmlvZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1VnYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaRnh1S2lCc2FXMXBkR0YwYVc5dWN5QjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaW9xTDF4dWFXMXdiM0owSUhzZ1pHbDJhV1JsVlZKTUlIMGdabkp2YlNBbkxpNHZkWFJwYkhNdmRYUnBiSE1uTzF4dWFXMXdiM0owSUhzZ2MyTm9aVzFoVm1Gc2FXUmhkR2x2YmlCOUlHWnliMjBnSnk0dUwzVjBhV3h6TDNOamFHVnRZVlpoYkdsa1lYUnBiMjRuTzF4dVhHNXBiWEJ2Y25RZ1FXUmtjbVZ6YzBGc2JHOWpZWFJwYjI0Z1puSnZiU0FuTGk0dllXeHNiMk5oZEdsdmJpOUJaR1J5WlhOelFXeHNiMk5oZEdsdmJpYzdYRzVwYlhCdmNuUWdVbVZ3YjNKMFpYSlBZbXBsWTNRZ1puSnZiU0FuTGk5U1pYQnZjblJsY2s5aWFtVmpkQ2M3WEc1cGJYQnZjblFnVDJKelpYSjJaWEpQWW1wbFkzUWdabkp2YlNBbkxpOVBZbk5sY25abGNrOWlhbVZqZENjN1hHNWNibWx0Y0c5eWRDQjdUV1Z6YzJGblpVWmhZM1J2Y25sOUlHWnliMjBnSjNObGNuWnBZMlV0Wm5KaGJXVjNiM0pyTDJScGMzUXZUV1Z6YzJGblpVWmhZM1J2Y25rbk8xeHVYRzVwYlhCdmNuUWdVM1J2Y21WRVlYUmhUMkpxWldOMGN5Qm1jbTl0SUNjdUwxTjBiM0psUkdGMFlVOWlhbVZqZEhNbk8xeHVYRzR2S2lwY2JpQXFJRUJoZFhSb2IzSWdiV2xqWVdWc2NHVmtjbTl6WVVCbmJXRnBiQzVqYjIxY2JpQXFJRU52Y21VZ1UzbHVZM0p2Ym1sNllYUnBiMjRnYzNsemRHVnRMbHh1SUNvdlhHNWpiR0Z6Y3lCVGVXNWphR1Z5VFdGdVlXZGxjaUI3WEc0Z0lDOHFJSEJ5YVhaaGRHVmNiaUFnWDNWeWJEb2dWVkpNWEc0Z0lGOWlkWE02SUUxcGJtbENkWE5jYmlBZ1gzSmxaMmx6ZEhKNU9pQlNaV2RwYzNSeWVWeHVJQ0JmWVd4c2IyTmhkRzl5T2lCQlpHUnlaWE56UVd4c2IyTmhkR2x2Ymx4dVhHNGdJRjl5WlhCdmNuUmxjbk02SUhzZ1QySnFaV04wVlZKTU9pQlNaWEJ2Y25SbGNrOWlhbVZqZENCOVhHNGdJRjl2WW5ObGNuWmxjbk02SUhzZ1QySnFaV04wVlZKTU9pQlBZbk5sY25abGNrOWlhbVZqZENCOVhHNGdJQ292WEc1Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY25WdWRHbHRaVlZTVEN3Z1luVnpMQ0J5WldkcGMzUnllU3dnWTJGMFlXeHZaeXdnYzNSdmNtRm5aVTFoYm1GblpYSXNJR0ZzYkc5allYUnZjaWtnZTF4dUlDQWdJR2xtSUNnaGNuVnVkR2x0WlZWU1RDa2dkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGJVM2x1WTJobGNpQk5ZVzVoWjJWeVhTQXRJRzVsWldSeklIUm9aU0J5ZFc1MGFXMWxWVkpNSUhCaGNtRnRaWFJsY2ljcE8xeHVJQ0FnSUdsbUlDZ2hZblZ6S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjF0VGVXNWphR1Z5SUUxaGJtRm5aWEpkSUMwZ2JtVmxaSE1nZEdobElFMWxjM05oWjJWQ2RYTWdhVzV6ZEdGdVkyVW5LVHRjYmlBZ0lDQnBaaUFvSVhKbFoybHpkSEo1S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjF0VGVXNWphR1Z5SUUxaGJtRm5aWEpkSUMwZ2JtVmxaSE1nZEdobElGSmxaMmx6ZEhKNUlHbHVjM1JoYm1ObEp5azdYRzRnSUNBZ2FXWWdLQ0ZqWVhSaGJHOW5LU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMXRUZVc1amFHVnlJRTFoYm1GblpYSmRJQzBnYm1WbFpITWdkR2hsSUZKMWJuUnBiV1ZEWVhSaGJHOW5kV1VnYVc1emRHRnVZMlVuS1R0Y2JpQWdJQ0JwWmlBb0lYTjBiM0poWjJWTllXNWhaMlZ5S1NCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjF0VGVXNWphR1Z5SUUxaGJtRm5aWEpkSUMwZ2JtVmxaQ0IwYUdVZ2MzUnZjbUZuWlUxaGJtRm5aWElnYVc1emRHRnVZMlVuS1R0Y2JseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZZblZ6SUQwZ1luVnpPMXh1SUNBZ0lGOTBhR2x6TGw5eVpXZHBjM1J5ZVNBOUlISmxaMmx6ZEhKNU8xeHVJQ0FnSUY5MGFHbHpMbDlqWVhSaGJHOW5JRDBnWTJGMFlXeHZaenRjYmlBZ0lDQmZkR2hwY3k1ZmMzUnZjbUZuWlUxaGJtRm5aWElnUFNCemRHOXlZV2RsVFdGdVlXZGxjanRjYmx4dUlDQWdJQzh2VkU5RVR6b2dkR2hsYzJVZ2MyaHZkV3hrSUdKbElITmhkbVZrSUdsdUlIQmxjbk5wYzNSbGJtTmxJR1Z1WjJsdVpUOWNiaUFnSUNCZmRHaHBjeTVmZFhKc0lEMGdjblZ1ZEdsdFpWVlNUQ0FySUNjdmMyMG5PMXh1SUNBZ0lGOTBhR2x6TGw5dlltcGxZM1JWVWt3Z1BTQnlkVzUwYVcxbFZWSk1JQ3NnSnk5dlltcGxZM1F0WVd4c2IyTmhkR2x2YmljN1hHNWNiaUFnSUNCZmRHaHBjeTVmY21Wd2IzSjBaWEp6SUQwZ2UzMDdYRzRnSUNBZ1gzUm9hWE11WDI5aWMyVnlkbVZ5Y3lBOUlIdDlPMXh1WEc0Z0lDQWdYM1JvYVhNdVgzTjBiM0psUkdGMFlVOWlhbVZqZEhNZ1BTQnVaWGNnVTNSdmNtVkVZWFJoVDJKcVpXTjBjeWh6ZEc5eVlXZGxUV0Z1WVdkbGNpazdYRzVjYmlBZ0lDQXZMMVJQUkU4NklIUm9hWE1nYzJodmRXeGtJRzV2ZENCaVpTQm9ZWEprWTI5a1pXUWhYRzRnSUNBZ1gzUm9hWE11WDJSdmJXRnBiaUE5SUdScGRtbGtaVlZTVENoeWRXNTBhVzFsVlZKTUtTNWtiMjFoYVc0N1hHNWNiaUFnSUNCZmRHaHBjeTVmYldZZ1BTQnVaWGNnVFdWemMyRm5aVVpoWTNSdmNua29abUZzYzJVc0lIdDlLVHRjYmx4dUlDQWdJR2xtSUNoaGJHeHZZMkYwYjNJcElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5aGJHeHZZMkYwYjNJZ1BTQmhiR3h2WTJGMGIzSTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDloYkd4dlkyRjBiM0lnUFNCdVpYY2dRV1JrY21WemMwRnNiRzlqWVhScGIyNG9YM1JvYVhNdVgyOWlhbVZqZEZWU1RDd2dZblZ6TENCZmRHaHBjeTVmY21WbmFYTjBjbmtwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR0oxY3k1aFpHUk1hWE4wWlc1bGNpaGZkR2hwY3k1ZmRYSnNMQ0FvYlhObktTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblUzbHVZMmhsY2sxaGJtRm5aWEl0VWtOV09pQW5MQ0J0YzJjcE8xeHVJQ0FnSUNBZ2MzZHBkR05vSUNodGMyY3VkSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkamNtVmhkR1VuT2lCZmRHaHBjeTVmYjI1RGNtVmhkR1VvYlhObktUc2dZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjJSbGJHVjBaU2M2SUY5MGFHbHpMbDl2YmtSbGJHVjBaU2h0YzJjcE95QmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuYzNWaWMyTnlhV0psSnpvZ1gzUm9hWE11WDI5dVRHOWpZV3hUZFdKelkzSnBZbVVvYlhObktUc2dZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lHTmhjMlVnSjNWdWMzVmljMk55YVdKbEp6b2dYM1JvYVhNdVgyOXVURzlqWVd4VmJsTjFZbk5qY21saVpTaHRjMmNwT3lCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmx4dUlDQjlYRzVjYmlBZ1oyVjBJSFZ5YkNncElIc2djbVYwZFhKdUlIUm9hWE11WDNWeWJEc2dmVnh1WEc0Z0lDOHZSa3hQVnkxSlRqb2diV1Z6YzJGblpTQnlaV05sYVhabFpDQm1jbTl0SUZONWJtTm9aWElnTFQ0Z1kzSmxZWFJsWEc0Z0lGOXZia055WldGMFpTaHRjMmNwSUh0Y2JseHVJQ0FnSUdsbUlDaHRjMmN1WW05a2VTNW9ZWE5QZDI1UWNtOXdaWEowZVNnbmNtVnpkVzFsSnlrZ0ppWWdJVzF6Wnk1aWIyUjVMbkpsYzNWdFpTa2dlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYlUzbHVZMmhsY2sxaGJtRm5aWElnTFNCRGNtVmhkR1VnVG1WM0lFOWlhbVZqZEYwbkxDQnRjMmNwTzF4dUlDQWdJQ0FnZEdocGN5NWZibVYzUTNKbFlYUmxLRzF6WnlrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzTjBiM0psUkdGMFlVOWlhbVZqZEhNdVoyVjBVbVZ6YjNWeVkyVnpRbmxEY21sMFpYSnBZU2h0YzJjc0lIUnlkV1VwTG5Sb1pXNG9LSEpsYzNWc2RDa2dQVDRnZTF4dVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzFONWJtTm9aWEpOWVc1aFoyVnlJQzBnUTNKbFlYUmxJRkpsYzNWdFpXUWdUMkpxWldOMFhTY3NJRzF6WnlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ0FtSmlCUFltcGxZM1F1YTJWNWN5aHlaWE4xYkhRcExteGxibWQwYUNBK0lEQXBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZJRlJQUkU4NklITm9iM1ZzWkNCeVpYVnpaU0IwYUdVZ2MzUnZjbUZuWldRZ2FXNW1iM0p0WVhScGIyNWNiaUFnSUNBZ0lDQWdJQ0JQWW1wbFkzUXVhMlY1Y3loeVpYTjFiSFFwTG1admNrVmhZMmdvS0c5aWFsVlNUQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ6ZFcxbFEzSmxZWFJsS0cxelp5d2djbVZ6ZFd4MFcyOWlhbFZTVEYwcE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdMeTltYjNKM1lYSmtJSFJ2SUdoNWNHVnlkSGs2WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEpsY0d4NUlEMGdlMzA3WEc0Z0lDQWdJQ0FnSUNBZ2NtVndiSGt1YVdRZ1BTQnRjMmN1YVdRN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ3YkhrdVpuSnZiU0E5SUcxelp5NTBienRjYmlBZ0lDQWdJQ0FnSUNCeVpYQnNlUzUwYnlBOUlHMXpaeTVtY205dE8xeHVJQ0FnSUNBZ0lDQWdJSEpsY0d4NUxuUjVjR1VnUFNBbmNtVnpjRzl1YzJVbk8xeHVJQ0FnSUNBZ0lDQWdJSEpsY0d4NUxtSnZaSGtnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjJSbE9pQTBNRFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaWE5qT2lBblRtOGdaR0YwWVNCdlltcGxZM1J6SUhSdklHSmxJSEpsYzNWdFpXUW5YRzRnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvY21Wd2JIa3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0I5WEc1Y2JpQWdYMjVsZDBOeVpXRjBaU2h0YzJjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHOTNibVZ5SUQwZ2JYTm5MbVp5YjIwN1hHNGdJQ0FnYkdWMElHUnZiV0ZwYmlBOUlHUnBkbWxrWlZWU1RDaHRjMmN1Wm5KdmJTa3VaRzl0WVdsdU8xeHVYRzRnSUNBZ2FXWWdLRzF6Wnk1aWIyUjVMbkpsYzI5MWNtTmxLU0I3WEc0Z0lDQWdJQ0JmZEdocGN5NWZZWFYwYUc5eWFYTmxLRzF6Wnl3Z2JYTm5MbUp2WkhrdWNtVnpiM1Z5WTJVcE8xeHVJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2WjJWMElITmphR1Z0WVNCbWNtOXRJR05oZEdGc2IyZDFaU0JoYm1RZ2NHRnljMlVnTFQ0Z0tITmphR1Z0WlN3Z1kyaHBiR1J5Wlc0cFhHNGdJQ0FnWDNSb2FYTXVYMk5oZEdGc2IyY3VaMlYwUkdGMFlWTmphR1Z0WVVSbGMyTnlhWEIwYjNJb2JYTm5MbUp2WkhrdWMyTm9aVzFoS1M1MGFHVnVLQ2hrWlhOamNtbHdkRzl5S1NBOVBpQjdYRzVjYmlBZ0lDQWdJR3hsZENCd2NtOXdaWEowYVdWeklEMGdaR1Z6WTNKcGNIUnZjaTV6YjNWeVkyVlFZV05yWVdkbExuTnZkWEpqWlVOdlpHVXVjSEp2Y0dWeWRHbGxjenRjYmlBZ0lDQWdJR3hsZENCelkyaGxiV1VnUFNCd2NtOXdaWEowYVdWekxuTmphR1Z0WlNBL0lIQnliM0JsY25ScFpYTXVjMk5vWlcxbExtTnZibk4wWVc1MElEb2dKM0psYzI5MWNtTmxKenRjYmlBZ0lDQWdJR3hsZENCamFHbHNaSEpsYm5NZ1BTQndjbTl3WlhKMGFXVnpMbU5vYVd4a2NtVnVJRDhnY0hKdmNHVnlkR2xsY3k1amFHbHNaSEpsYmk1amIyNXpkR0Z1ZENBNklGdGRPMXh1WEc0Z0lDQWdJQ0F2THlCRWJ5QnpZMmhsYldFZ2RtRnNhV1JoZEdsdmJseHVJQ0FnSUNBZ0x5OGdWRTlFVHpvZ1kyaGxZMnNnYVdZZ2FYTWdibVZsWkNCMGJ5Qm9ZVzVrYkdVZ2QybDBhQ0IwYUdVZ2NtVnpkV3gwSUc5bUlIWmhiR2xrWVhScGIyNWNiaUFnSUNBZ0lITmphR1Z0WVZaaGJHbGtZWFJwYjI0b2MyTm9aVzFsTENCa1pYTmpjbWx3ZEc5eUxDQnRjMmN1WW05a2VTNTJZV3gxWlNrN1hHNWNiaUFnSUNBZ0lHeGxkQ0J2WW1wbFkzUkpibVp2SUQwZ2UxeHVJQ0FnSUNBZ0lDQnVZVzFsT2lCdGMyY3VZbTlrZVM1MllXeDFaUzV1WVcxbExGeHVJQ0FnSUNBZ0lDQnpZMmhsYldFNklHMXpaeTVpYjJSNUxuWmhiSFZsTG5OamFHVnRZU3hjYmlBZ0lDQWdJQ0FnY21Wd2IzSjBaWEk2SUcxelp5NWliMlI1TG5aaGJIVmxMbkpsY0c5eWRHVnlMRnh1SUNBZ0lDQWdJQ0J5WlhOdmRYSmpaWE02SUcxelp5NWliMlI1TG5aaGJIVmxMbkpsYzI5MWNtTmxjMXh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnTHk4Z2MyaHZkV3hrSUhKbGMzVnpaU0JrWVhSaElHOWlhbVZqZENCMWNtd2dhV1lnYVhRZ2NHRnpjMlZrWEc0Z0lDQWdJQ0JzWlhRZ2NtVjFjMlZFWVhSaFQySnFaV04wSUQwZ2JYTm5MbUp2WkhrdWRtRnNkV1V1Y21WemIzVnlZMlU3WEc1Y2JpQWdJQ0FnSUM4dmNtVnhkV1Z6ZENCaFpHUnlaWE56SUdGc2JHOWpZWFJwYjI0Z2IyWWdZU0J1WlhjZ2IySnFaV04wSUdaeWIyMGdkR2hsSUcxelp5MXViMlJsWEc0Z0lDQWdJQ0JmZEdocGN5NWZZV3hzYjJOaGRHOXlMbU55WldGMFpTaGtiMjFoYVc0c0lERXNJRzlpYW1WamRFbHVabThzSUhOamFHVnRaU3dnY21WMWMyVkVZWFJoVDJKcVpXTjBLUzUwYUdWdUtDaGhiR3h2WTJGMFpXUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJRzlpYWxWU1RDQTlJR0ZzYkc5allYUmxaQzVoWkdSeVpYTnpXekJkTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RCVEV4UFEwRlVUMUlnUTFKRlFWUkZPaWNzSUdGc2JHOWpZWFJsWkNrN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUhOMVluTmpjbWx3ZEdsdmJsVlNUQ0E5SUc5aWFsVlNUQ0FySUNjdmMzVmljMk55YVhCMGFXOXVKenRjYmx4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25VM1ZpYzJOeWFYQjBhVzl1SUZWU1RDY3NJSE4xWW5OamNtbHdkR2x2YmxWU1RDazdYRzVjYmlBZ0lDQWdJQ0FnTHk5VWJ5QnlaV2RwYzNSbGNpQjBhR1VnWkdGMFlVOWlhbVZqZENCcGJpQjBhR1VnY25WdWRHbHRaVkpsWjJsemRISjVYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnblVtVm5hWE4wWlhJZ1QySnFaV04wT2lBbkxDQnRjMmN1WW05a2VTNTJZV3gxWlM1dVlXMWxMQ0J0YzJjdVltOWtlUzUyWVd4MVpTNXpZMmhsYldFc0lHOWlhbFZTVEN3Z2JYTm5MbUp2WkhrdWRtRnNkV1V1Y21Wd2IzSjBaWElzSUcxelp5NWliMlI1TG5aaGJIVmxMbkpsYzI5MWNtTmxjeWs3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDl5WldkcGMzUnllUzV5WldkcGMzUmxja1JoZEdGUFltcGxZM1FvYlhObkxtSnZaSGt1ZG1Gc2RXVXVibUZ0WlN3Z2JYTm5MbUp2WkhrdWRtRnNkV1V1YzJOb1pXMWhMQ0J2WW1wVlVrd3NJRzF6Wnk1aWIyUjVMblpoYkhWbExuSmxjRzl5ZEdWeUxDQnRjMmN1WW05a2VTNTJZV3gxWlM1eVpYTnZkWEpqWlhNc0lHRnNiRzlqWVhSbFpDd2diWE5uTG1KdlpIa3VZWFYwYUc5eWFYTmxLUzUwYUdWdUtDaHlaWE52YkhabEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMFJoZEdGUFltcGxZM1FnYzNWalkyVnpjMloxYkd4NUlISmxaMmx6ZEdWeVpXUW5MQ0J5WlhOdmJIWmxLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDOHZZV3hzSUU5TElDMCtJR055WldGMFpTQnlaWEJ2Y25SbGNpQmhibVFnY21WbmFYTjBaWElnYkdsemRHVnVaWEp6WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEpsY0c5eWRHVnlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXlaWEJ2Y25SbGNuTmJiMkpxVlZKTVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVndiM0owWlhJZ1BTQnVaWGNnVW1Wd2IzSjBaWEpQWW1wbFkzUW9YM1JvYVhNc0lHOTNibVZ5TENCdlltcFZVa3dwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhCdmNuUmxjaUE5SUhSb2FYTXVYM0psY0c5eWRHVnljMXR2WW1wVlVreGRPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkYlUzbHVZMmhsY2sxaGJtRm5aWElnTFNCdVpYY2dRM0psWVhSbFhTQXRJQ2NzSUcxelp5azdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9iWE5uTG1KdlpIa3VhR0Z6VDNkdVVISnZjR1Z5ZEhrb0ozTjBiM0psSnlrZ0ppWWdiWE5uTG1KdlpIa3VjM1J2Y21VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTjBiM0psSUdadmNpQmxZV05vSUhKbGNHOXlkR1Z5SUdoNWNHVnlkSGtnZEdobElHUmhkR0ZQWW1wbFkzUmNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQjFjMlZ5VlZKTU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHMXpaeTVpYjJSNUxtaGhjMDkzYmxCeWIzQmxjblI1S0NkcFpHVnVkR2wwZVNjcElDWW1JRzF6Wnk1aWIyUjVMbWxrWlc1MGFYUjVMblZ6WlhKUWNtOW1hV3hsTG5WelpYSlZVa3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObGNsVlNUQ0E5SUcxelp5NWliMlI1TG1sa1pXNTBhWFI1TG5WelpYSlFjbTltYVd4bExuVnpaWEpWVWt3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOXpkRzl5WlVSaGRHRlBZbXBsWTNSekxuTmxkQ2h2WW1wVlVrd3NJSFJ5ZFdVc0lHMXpaeTVpYjJSNUxuTmphR1Z0WVN3Z0oyOXVKeXdnYlhObkxtSnZaSGt1ZG1Gc2RXVXNJRzkzYm1WeUxDQnVkV3hzTENCamFHbHNaSEpsYm5Nc0lIVnpaWEpWVWt3cE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lISmxjRzl5ZEdWeUxtWnZjbmRoY21SVGRXSnpZM0pwWW1Vb1cyOWlhbFZTVEN3Z2MzVmljMk55YVhCMGFXOXVWVkpNWFNrdWRHaGxiaWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYQnZjblJsY2k1aFpHUkRhR2xzWkhKbGJuTW9ZMmhwYkdSeVpXNXpLUzUwYUdWdUtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM0psY0c5eWRHVnljMXR2WW1wVlVreGRJRDBnY21Wd2IzSjBaWEk3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2JXVnpjMkZuWlNCeVpYTndiMjV6WlNCMGJ5QlRlVzVqYUdWeUlDMCtJR055WldGMFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ2JYTm5MbWxrTENCMGVYQmxPaUFuY21WemNHOXVjMlVuTENCbWNtOXRPaUJ0YzJjdWRHOHNJSFJ2T2lCdmQyNWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdJR052WkdVNklESXdNQ3dnY21WemIzVnlZMlU2SUc5aWFsVlNUQ3dnWTJocGJHUnlaVzVTWlhOdmRYSmpaWE02SUdOb2FXeGtjbVZ1Y3lCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZjMlZ1WkNCamNtVmhkR1VnZEc4Z1lXeHNJRzlpYzJWeWRtVnljeXdnY21WemNHOXVjMlZ6SUhkcGJHd2dZbVVnWkdWc2FYWmxjaUIwYnlCMGFHVWdTSGx3WlhKMGVTQnZkMjVsY2o5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5elkyaGxaSFZzWlNCbWIzSWdibVY0ZENCamVXTnNaU0J1WldWa1pXUXNJR0psWTJGMWMyVWdkR2hsSUZKbGNHOXlkR1Z5SUhOb2IzVnNaQ0JpWlNCaGRtRnBiR0ZpYkdVdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dmQybHNiQ0JwYm5acGRHVWdiM1JvWlhJZ2FIbHdaWEowYVdWelhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDJGMWRHaHZjbWx6WlNodGMyY3NJRzlpYWxWU1RDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMHNJR1oxYm1OMGFXOXVLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGxjbkp2Y2lrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5S1M1allYUmphQ2dvY21WaGMyOXVLU0E5UGlCN1hHNGdJQ0FnSUNBdkwwWk1UMWN0VDFWVU9pQmxjbkp2Y2lCdFpYTnpZV2RsSUhKbGMzQnZibk5sSUhSdklGTjVibU5vWlhJZ0xUNGdZM0psWVhSbFhHNGdJQ0FnSUNCc1pYUWdjbVZ6Y0c5dWMyVk5jMmNnUFNCN1hHNGdJQ0FnSUNBZ0lHbGtPaUJ0YzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NJR1p5YjIwNklHMXpaeTUwYnl3Z2RHODZJRzkzYm1WeUxGeHVJQ0FnSUNBZ0lDQmliMlI1T2lCN0lHTnZaR1U2SURVd01Dd2daR1Z6WXpvZ2NtVmhjMjl1SUgxY2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvY21WemNHOXVjMlZOYzJjcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUgxY2JseHVJQ0JmY21WemRXMWxRM0psWVhSbEtHMXpaeXdnYzNSdmNtVmtUMkpxWldOMEtTQjdYRzVjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ2JHVjBJRzkzYm1WeUlEMGdiWE5uTG1aeWIyMDdYRzRnSUNBZ2JHVjBJSE5qYUdWdFlTQTlJSE4wYjNKbFpFOWlhbVZqZEM1elkyaGxiV0U3WEc0Z0lDQWdiR1YwSUhKbGMyOTFjbU5sSUQwZ2MzUnZjbVZrVDJKcVpXTjBMbkpsYzI5MWNtTmxPMXh1SUNBZ0lHeGxkQ0JwYm1sMGFXRnNSR0YwWVNBOUlITjBiM0psWkU5aWFtVmpkQzVrWVhSaE8xeHVYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRUZVc1amFHVnlUV0Z1WVdkbGNsMGdMU0J5WlhOMWJXVkRjbVZoZEdVbkxDQnRjMmNwTzF4dVhHNGdJQ0FnYkdWMElHRjFkR2hOYzJjZ1BTQnRjMmM3WEc0Z0lDQWdZWFYwYUUxelp5NWliMlI1TG1GMWRHaHZjbWx6WlNBOUlITjBiM0psWkU5aWFtVmpkQzV6ZFdKelkzSnBjSFJwYjI1ek8xeHVYRzRnSUNBZ0x5OGdMeThnVkU5RVR6b2dRMmhsWTJzZ2QyaDVJSFJvWlNCZllYVjBhRzl5YVhObElHbHpJR05oYkd4bFpEdGNiaUFnSUNBdkx5QnBaaUFvY21WemIzVnlZMlVwSUh0Y2JpQWdJQ0F2THlBZ0lGOTBhR2x6TGw5aGRYUm9iM0pwYzJVb1lYVjBhRTF6Wnl3Z2NtVnpiM1Z5WTJVcE8xeHVJQ0FnSUM4dklDQWdjbVYwZFhKdU8xeHVJQ0FnSUM4dklIMWNibHh1SUNBZ0lDOHZaMlYwSUhOamFHVnRZU0JtY205dElHTmhkR0ZzYjJkMVpTQmhibVFnY0dGeWMyVWdMVDRnS0hOamFHVnRaU3dnWTJocGJHUnlaVzRwWEc0Z0lDQWdYM1JvYVhNdVgyTmhkR0ZzYjJjdVoyVjBSR0YwWVZOamFHVnRZVVJsYzJOeWFYQjBiM0lvYzJOb1pXMWhLUzUwYUdWdUtDaGtaWE5qY21sd2RHOXlLU0E5UGlCN1hHNWNiaUFnSUNBZ0lHeGxkQ0J3Y205d1pYSjBhV1Z6SUQwZ1pHVnpZM0pwY0hSdmNpNXpiM1Z5WTJWUVlXTnJZV2RsTG5OdmRYSmpaVU52WkdVdWNISnZjR1Z5ZEdsbGN6dGNiaUFnSUNBZ0lHeGxkQ0J6WTJobGJXVWdQU0J3Y205d1pYSjBhV1Z6TG5OamFHVnRaU0EvSUhCeWIzQmxjblJwWlhNdWMyTm9aVzFsTG1OdmJuTjBZVzUwSURvZ0ozSmxjMjkxY21ObEp6dGNiaUFnSUNBZ0lHeGxkQ0JqYUdsc1pISmxibk1nUFNCd2NtOXdaWEowYVdWekxtTm9hV3hrY21WdUlEOGdjSEp2Y0dWeWRHbGxjeTVqYUdsc1pISmxiaTVqYjI1emRHRnVkQ0E2SUZ0ZE8xeHVYRzRnSUNBZ0lDQXZMeUJFYnlCelkyaGxiV0VnZG1Gc2FXUmhkR2x2Ymx4dUlDQWdJQ0FnTHk4Z1ZFOUVUem9nWTJobFkyc2dhV1lnYVhNZ2JtVmxaQ0IwYnlCb1lXNWtiR1VnZDJsMGFDQjBhR1VnY21WemRXeDBJRzltSUhaaGJHbGtZWFJwYjI1Y2JpQWdJQ0FnSUhOamFHVnRZVlpoYkdsa1lYUnBiMjRvYzJOb1pXMWxMQ0JrWlhOamNtbHdkRzl5TENCcGJtbDBhV0ZzUkdGMFlTazdYRzVjYmlBZ0lDQWdJQzh2WVd4c0lFOUxJQzArSUdOeVpXRjBaU0J5WlhCdmNuUmxjaUJoYm1RZ2NtVm5hWE4wWlhJZ2JHbHpkR1Z1WlhKelhHNGdJQ0FnSUNCc1pYUWdjbVZ3YjNKMFpYSTdYRzVjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmY21Wd2IzSjBaWEp6VzNKbGMyOTFjbU5sWFNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWEJ2Y25SbGNpQTlJRzVsZHlCU1pYQnZjblJsY2s5aWFtVmpkQ2hmZEdocGN5d2diM2R1WlhJc0lISmxjMjkxY21ObEtUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lISmxjRzl5ZEdWeUlEMGdkR2hwY3k1ZmNtVndiM0owWlhKelczSmxjMjkxY21ObFhUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdYM1JvYVhNdVgzSmxjRzl5ZEdWeWMxdHlaWE52ZFhKalpWMGdQU0J5WlhCdmNuUmxjanRjYmx4dUlDQWdJQ0FnY21Wd2IzSjBaWEl1Y21WemRXMWxVM1ZpYzJOeWFYQjBhVzl1Y3loemRHOXlaV1JQWW1wbFkzUXVjM1ZpYzJOeWFYQjBhVzl1Y3lrN1hHNWNiaUFnSUNBZ0lDOHZSa3hQVnkxUFZWUTZJRzFsYzNOaFoyVWdjbVZ6Y0c5dWMyVWdkRzhnVTNsdVkyaGxjaUF0UGlCamNtVmhkR1ZjYmlBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ0lDQnBaRG9nYlhObkxtbGtMQ0IwZVhCbE9pQW5jbVZ6Y0c5dWMyVW5MQ0JtY205dE9pQnRjMmN1ZEc4c0lIUnZPaUJ2ZDI1bGNpeGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2V5QmpiMlJsT2lBeU1EQXNJSEpsYzI5MWNtTmxPaUJ5WlhOdmRYSmpaU3dnWTJocGJHUnlaVzVTWlhOdmRYSmpaWE02SUdOb2FXeGtjbVZ1Y3l3Z2MyTm9aVzFoT2lCelkyaGxiV0VzSUhaaGJIVmxPaUJ6ZEc5eVpXUlBZbXBsWTNRdVpHRjBZU0I5WEc0Z0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0x5OGdMeTl6Wlc1a0lHTnlaV0YwWlNCMGJ5QmhiR3dnYjJKelpYSjJaWEp6TENCeVpYTndiMjV6WlhNZ2QybHNiQ0JpWlNCa1pXeHBkbVZ5SUhSdklIUm9aU0JJZVhCbGNuUjVJRzkzYm1WeVAxeHVJQ0FnSUNBZ0x5OGdMeTl6WTJobFpIVnNaU0JtYjNJZ2JtVjRkQ0JqZVdOc1pTQnVaV1ZrWldRc0lHSmxZMkYxYzJVZ2RHaGxJRkpsY0c5eWRHVnlJSE5vYjNWc1pDQmlaU0JoZG1GcGJHRmliR1V1WEc0Z0lDQWdJQ0F2THlCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUM4dklDQWdMeTkzYVd4c0lHbHVkbWwwWlNCdmRHaGxjaUJvZVhCbGNuUnBaWE5jYmlBZ0lDQWdJQzh2SUNBZ1gzUm9hWE11WDJGMWRHaHZjbWx6WlNoaGRYUm9UWE5uTENCeVpYTnZkWEpqWlNrN1hHNGdJQ0FnSUNBdkx5QjlLVHRjYmx4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1gyRjFkR2h2Y21selpTaHRjMmNzSUc5aWFsVlNUQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzRnSUNBZ2JHVjBJRzlpYWxOMVluTmpjbWx3ZEc5eVZWSk1JRDBnYjJKcVZWSk1JQ3NnSnk5emRXSnpZM0pwY0hScGIyNG5PMXh1WEc0Z0lDQWdiWE5uTG1KdlpIa3VZWFYwYUc5eWFYTmxMbVp2Y2tWaFkyZ29LR2g1Y0dWeWRIbFZVa3dwSUQwK0lIdGNiaUFnSUNBZ0lDOHZSa3hQVnkxUFZWUTZJSE5sYm1RZ2FXNTJhWFJsY3lCMGJ5QnNhWE4wSUc5bUlISmxiVzkwWlNCVGVXNWphR1Z5SUMwK0lGOXZibEpsYlc5MFpVTnlaV0YwWlNBdFBpQnZiazV2ZEdsbWFXTmhkR2x2Ymx4dUlDQWdJQ0FnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaDdYRzRnSUNBZ0lDQWdJSFI1Y0dVNklDZGpjbVZoZEdVbkxDQm1jbTl0T2lCdlltcFRkV0p6WTNKcGNIUnZjbFZTVEN3Z2RHODZJR2g1Y0dWeWRIbFZVa3dzWEc0Z0lDQWdJQ0FnSUdKdlpIazZJSHNnYVdSbGJuUnBkSGs2SUcxelp5NWliMlI1TG1sa1pXNTBhWFI1TENCemIzVnlZMlU2SUcxelp5NW1jbTl0TENCMllXeDFaVG9nYlhObkxtSnZaSGt1ZG1Gc2RXVXNJSE5qYUdWdFlUb2diWE5uTG1KdlpIa3VjMk5vWlcxaElIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHk5R1RFOVhMVWxPT2lCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdaeWIyMGdSR0YwWVU5aWFtVmpkRkpsY0c5eWRHVnlJQzArSUdSbGJHVjBaVnh1SUNCZmIyNUVaV3hsZEdVb2JYTm5LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHeGxkQ0J2WW1wVlVrd2dQU0J0YzJjdVltOWtlUzV5WlhOdmRYSmpaVHRjYmx4dUlDQWdJR3hsZENCdlltcGxZM1FnUFNCZmRHaHBjeTVmY21Wd2IzSjBaWEp6VzI5aWFsVlNURjA3WEc0Z0lDQWdhV1lnS0c5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnTHk5VVQwUlBPaUJwY3lCMGFHVnlaU0JoYm5rZ2NHOXNhV041SUhabGNtbG1hV05oZEdsdmJpQmlaV1p2Y21VZ1pHVnNaWFJsUDF4dUlDQWdJQ0FnYjJKcVpXTjBMbVJsYkdWMFpTZ3BPMXh1WEc0Z0lDQWdJQ0IwYUdsekxsOXpkRzl5WlVSaGRHRlBZbXBsWTNSekxtUmxiR1YwWlZKbGMyOTFjbU5sS0c5aWFsVlNUQ2s3WEc1Y2JpQWdJQ0FnSUM4dlZFOUVUem9nZFc1eVpXZHBjM1JsY2lCdlltcGxZM1EvWEc0Z0lDQWdJQ0JmZEdocGN5NWZZblZ6TG5CdmMzUk5aWE56WVdkbEtIdGNiaUFnSUNBZ0lDQWdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnWm5KdmJUb2diWE5uTG5SdkxDQjBiem9nYlhObkxtWnliMjBzWEc0Z0lDQWdJQ0FnSUdKdlpIazZJSHNnWTI5a1pUb2dNakF3SUgxY2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHZSa3hQVnkxSlRqb2diV1Z6YzJGblpTQnlaV05sYVhabFpDQm1jbTl0SUd4dlkyRnNJRk41Ym1Ob1pYSWdMVDRnYzNWaWMyTnlhV0psWEc0Z0lGOXZia3h2WTJGc1UzVmljMk55YVdKbEtHMXpaeWtnZTF4dVhHNGdJQ0FnZEdocGN5NWZjM1J2Y21WRVlYUmhUMkpxWldOMGN5NW5aWFJTWlhOdmRYSmpaWE5DZVVOeWFYUmxjbWxoS0cxelp5d2dabUZzYzJVcExuUm9aVzRvS0hKbGMzVnNkQ2tnUFQ0Z2UxeHVYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzFONWJtTm9aWEpOWVc1aFoyVnlJQzBnVTNWaWMyTnlhV0psWFNBdElHWnBiSFJsY2lCeVpYTjFiSFFuTENCeVpYTjFiSFFwTzF4dVhHNGdJQ0FnSUNCcFppQW9jbVZ6ZFd4MElDWW1JRTlpYW1WamRDNXJaWGx6S0hKbGMzVnNkQ2t1YkdWdVozUm9JRDRnTUNrZ2UxeHVYRzRnSUNBZ0lDQWdJQzh2SUZSUFJFODZJSE5vYjNWc1pDQnlaWFZ6WlNCMGFHVWdjM1J2Y21GblpXUWdhVzVtYjNKdFlYUnBiMjVjYmlBZ0lDQWdJQ0FnVDJKcVpXTjBMbXRsZVhNb2NtVnpkV3gwS1M1bWIzSkZZV05vS0NodlltcFZVa3dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblcxTjVibU5vWlhKTllXNWhaMlZ5SUMwZ2NtVnpkVzFsSUZOMVluTmpjbWxpWlYwZ0xTQnlaWFZ6WlNCamRYSnlaVzUwSUc5aWFtVmpkQ0IxY213NklDY3NJSEpsYzNWc2RGdHZZbXBWVWt4ZEtUdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOXlaWE4xYldWVGRXSnpZM0pwY0hScGIyNG9iWE5uTENCeVpYTjFiSFJiYjJKcVZWSk1YU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzF6Wnk1aWIyUjVMbk5qYUdWdFlTQW1KaUJ0YzJjdVltOWtlUzV5WlhOdmRYSmpaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25XMU41Ym1Ob1pYSk5ZVzVoWjJWeUlDMGdibVYzSUZOMVluTmpjbWxpWlYwZ0xTQW5MQ0J0YzJjdVltOWtlUzV6WTJobGJXRXNJRzF6Wnk1aWIyUjVMbkpsYzI5MWNtTmxLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZibVYzVTNWaWMyTnlhWEIwYVc5dUtHMXpaeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2TDJadmNuZGhjbVFnZEc4Z2FIbHdaWEowZVRwY2JpQWdJQ0FnSUNBZ2JHVjBJSEpsY0d4NUlEMGdlMzA3WEc0Z0lDQWdJQ0FnSUhKbGNHeDVMbWxrSUQwZ2JYTm5MbWxrTzF4dUlDQWdJQ0FnSUNCeVpYQnNlUzVtY205dElEMGdiWE5uTG5Sdk8xeHVJQ0FnSUNBZ0lDQnlaWEJzZVM1MGJ5QTlJRzF6Wnk1bWNtOXRPMXh1SUNBZ0lDQWdJQ0J5WlhCc2VTNTBlWEJsSUQwZ0ozSmxjM0J2Ym5ObEp6dGNiaUFnSUNBZ0lDQWdjbVZ3YkhrdVltOWtlU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMlJsT2lBME1EUXNYRzRnSUNBZ0lDQWdJQ0FnWkdWell6b2dKMDV2SUdSaGRHRWdiMkpxWldOMGN5QjBieUJpWlNCeVpYTjFiV1ZrSjF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvY21Wd2JIa3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdmU2s3WEc1Y2JpQWdmVnh1WEc0Z0lGOXVaWGRUZFdKelkzSnBjSFJwYjI0b2JYTm5LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHeGxkQ0J2WW1wVlVrd2dQU0J0YzJjdVltOWtlUzV5WlhOdmRYSmpaVHRjYmx4dUlDQWdJR3hsZENCb2VYQmxjblI1VlZKTUlEMGdiWE5uTG1aeWIyMDdYRzRnSUNBZ2JHVjBJR1J2YldGcGJpQTlJR1JwZG1sa1pWVlNUQ2h2WW1wVlVrd3BMbVJ2YldGcGJqdGNiaUFnSUNCc1pYUWdiMkpxVlZKTVUzVmljMk55YVhCMGFXOXVJRDBnYjJKcVZWSk1JQ3NnSnk5emRXSnpZM0pwY0hScGIyNG5PMXh1WEc0Z0lDQWdiR1YwSUdOb2FXeGtRbUZ6WlZWU1RDQTlJRzlpYWxWU1RDQXJJQ2N2WTJocGJHUnlaVzR2Snp0Y2JseHVJQ0FnSUM4dloyVjBJSE5qYUdWdFlTQm1jbTl0SUdOaGRHRnNiMmQxWlNCaGJtUWdjR0Z5YzJVZ0xUNGdLR05vYVd4a2NtVnVLVnh1SUNBZ0lGOTBhR2x6TGw5allYUmhiRzluTG1kbGRFUmhkR0ZUWTJobGJXRkVaWE5qY21sd2RHOXlLRzF6Wnk1aWIyUjVMbk5qYUdWdFlTa3VkR2hsYmlnb1pHVnpZM0pwY0hSdmNpa2dQVDRnZTF4dUlDQWdJQ0FnYkdWMElIQnliM0JsY25ScFpYTWdQU0JrWlhOamNtbHdkRzl5TG5OdmRYSmpaVkJoWTJ0aFoyVXVjMjkxY21ObFEyOWtaUzV3Y205d1pYSjBhV1Z6TzF4dUlDQWdJQ0FnYkdWMElHTm9hV3hrY21WdWN5QTlJSEJ5YjNCbGNuUnBaWE11WTJocGJHUnlaVzRnUHlCd2NtOXdaWEowYVdWekxtTm9hV3hrY21WdUxtTnZibk4wWVc1MElEb2dXMTA3WEc1Y2JpQWdJQ0FnSUM4dlkyaHBiR1J5Wlc0Z1lXUmtjbVZ6YzJWelhHNGdJQ0FnSUNCc1pYUWdjM1ZpYzJOeWFYQjBhVzl1Y3lBOUlGdGRPMXh1SUNBZ0lDQWdjM1ZpYzJOeWFYQjBhVzl1Y3k1d2RYTm9LRzlpYWxWU1RDQXJJQ2N2WTJoaGJtZGxjeWNwTzF4dUlDQWdJQ0FnWTJocGJHUnlaVzV6TG1admNrVmhZMmdvS0dOb2FXeGtLU0E5UGlCemRXSnpZM0pwY0hScGIyNXpMbkIxYzJnb1kyaHBiR1JDWVhObFZWSk1JQ3NnWTJocGJHUXBLVHRjYmx4dUlDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2MzVmljMk55YVdKbElHMWxjM05oWjJVZ2RHOGdkR2hsSUcxelp5MXViMlJsTENCeVpXZHBjM1JsY21sdVp5QnNhWE4wWlc1bGNuTWdiMjRnZEdobElHSnliMnRsY2x4dUlDQWdJQ0FnYkdWMElHNXZaR1ZUZFdKelkzSnBZbVZOYzJjZ1BTQjdYRzRnSUNBZ0lDQWdJSFI1Y0dVNklDZHpkV0p6WTNKcFltVW5MQ0JtY205dE9pQmZkR2hwY3k1ZmRYSnNMQ0IwYnpvZ0oyUnZiV0ZwYmpvdkwyMXpaeTF1YjJSbExpY2dLeUJrYjIxaGFXNGdLeUFuTDNOdEp5eGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2V5QnBaR1Z1ZEdsMGVUb2diWE5uTG1KdlpIa3VhV1JsYm5ScGRIa3NJSE4xWW5OamNtbGlaVG9nYzNWaWMyTnlhWEIwYVc5dWN5d2djMjkxY21ObE9pQm9lWEJsY25SNVZWSk1JSDFjYmlBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUM4dmMzVmljMk55YVdKbElHbHVJRzF6WnkxdWIyUmxYRzRnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0c1dlpHVlRkV0p6WTNKcFltVk5jMmNzSUNoeVpYQnNlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduYm05a1pTMXpkV0p6WTNKcFltVXRjbVZ6Y0c5dWMyVW9iMkp6WlhKMlpYSXBPaUFuTENCeVpYQnNlU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWEJzZVM1aWIyUjVMbU52WkdVZ1BUMDlJREl3TUNrZ2UxeHVYRzRnSUNBZ0lDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2NtVndiSGtnZDJsMGFDQndjbTkyYVhOcGIyNWhiQ0J5WlhOd2IyNXpaVnh1SUNBZ0lDQWdJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2dhSGx3WlhKMGVWVlNUQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ1kyOWtaVG9nTVRBd0xDQmphR2xzWkhKbGJsSmxjMjkxY21ObGN6b2dZMmhwYkdSeVpXNXpMQ0J6WTJobGJXRTZJRzF6Wnk1aWIyUjVMbk5qYUdWdFlTd2djbVZ6YjNWeVkyVTZJRzF6Wnk1aWIyUjVMbkpsYzI5MWNtTmxJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dlJreFBWeTFQVlZRNklITjFZbk5qY21saVpTQnRaWE56WVdkbElIUnZJSEpsYlc5MFpTQlNaWEJ2Y25SbGNrOWlhbVZqZENBdFBpQmZiMjVTWlcxdmRHVlRkV0p6WTNKcFltVmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2IySnFVM1ZpYzJOeWFXSmxUWE5uSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM04xWW5OamNtbGlaU2NzSUdaeWIyMDZJRjkwYUdsekxsOTFjbXdzSUhSdk9pQnZZbXBWVWt4VGRXSnpZM0pwY0hScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3SUdsa1pXNTBhWFI1T2lCdWIyUmxVM1ZpYzJOeWFXSmxUWE5uTG1KdlpIa3VhV1JsYm5ScGRIa3NJSE4xWW5OamNtbGlaWEk2SUdoNWNHVnlkSGxWVWt3Z2ZWeHVJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQXZMM04xWW5OamNtbGlaU0IwYnlCeVpYQnZjblJsY2lCVFRWeHVJQ0FnSUNBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2IySnFVM1ZpYzJOeWFXSmxUWE5uTENBb2NtVndiSGtwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHlaWEJ2Y25SbGNpMXpkV0p6WTNKcFltVXRjbVZ6Y0c5dWMyVXRibVYzT2lBbkxDQnlaWEJzZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVndiSGt1WW05a2VTNWpiMlJsSUQwOVBTQXlNREFwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdiMkp6WlhKMlpYSWdQU0JmZEdocGN5NWZiMkp6WlhKMlpYSnpXMjlpYWxWU1RGMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYjJKelpYSjJaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlluTmxjblpsY2lBOUlHNWxkeUJQWW5ObGNuWmxjazlpYW1WamRDaGZkR2hwY3l3Z2IySnFWVkpNTENCamFHbHNaSEpsYm5NcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TGw5dlluTmxjblpsY25OYmIySnFWVkpNWFNBOUlHOWljMlZ5ZG1WeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRzF6Wnk1aWIyUjVMbWhoYzA5M2JsQnliM0JsY25SNUtDZHpkRzl5WlNjcElDWW1JRzF6Wnk1aWIyUjVMbk4wYjNKbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVTNSdmNtVWdabTl5SUdWaFkyZ2djbVZ3YjNKMFpYSWdhSGx3WlhKMGVTQjBhR1VnWkdGMFlVOWlhbVZqZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQjFjMlZ5VlZKTU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h0YzJjdVltOWtlUzVvWVhOUGQyNVFjbTl3WlhKMGVTZ25hV1JsYm5ScGRIa25LU0FtSmlCdGMyY3VZbTlrZVM1cFpHVnVkR2wwZVM1MWMyVnlVSEp2Wm1sc1pTNTFjMlZ5VlZKTUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWeVZWSk1JRDBnYlhObkxtSnZaSGt1YVdSbGJuUnBkSGt1ZFhObGNsQnliMlpwYkdVdWRYTmxjbFZTVER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZmMzUnZjbVZFWVhSaFQySnFaV04wY3k1elpYUW9iMkpxVlZKTUxDQm1ZV3h6WlN3Z2JYTm5MbUp2WkhrdWMyTm9aVzFoTENBbmIyNG5MQ0I3ZlN3Z2FIbHdaWEowZVZWU1RDd2diblZzYkN3Z1kyaHBiR1J5Wlc1ekxDQjFjMlZ5VlZKTUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZjbVZuYVhOMFpYSWdibVYzSUdoNWNHVnlkSGtnYzNWaWMyTnlhWEIwYVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc5aWMyVnlkbVZ5TG1Ga1pGTjFZbk5qY21sd2RHbHZiaWhvZVhCbGNuUjVWVkpNS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwyWnZjbmRoY21RZ2RHOGdhSGx3WlhKMGVUcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVndiSGt1YVdRZ1BTQnRjMmN1YVdRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGNHeDVMbVp5YjIwZ1BTQmZkR2hwY3k1ZmRYSnNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWEJzZVM1MGJ5QTlJR2g1Y0dWeWRIbFZVa3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY0d4NUxtSnZaSGt1YzJOb1pXMWhJRDBnYlhObkxtSnZaSGt1YzJOb1pXMWhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWEJzZVM1aWIyUjVMbkpsYzI5MWNtTmxJRDBnYlhObkxtSnZaSGt1Y21WemIzVnlZMlU3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdHpkV0p6WTNKcFltVmRJQzBnYm1WM0lITjFZbk5qY21sd2RHbHZiam9nSnl3Z2JYTm5MQ0J5WlhCc2VTd2diMkp6WlhKMlpYSXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNoeVpYQnNlU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUM4dmJHbHpkR1Z1WlhJZ2NtVnFaV04wWldSY2JpQWdJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lCdGMyY3VhV1FzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzSUdaeWIyMDZJRzF6Wnk1MGJ5d2dkRzg2SUdoNWNHVnlkSGxWVWt3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQnlaWEJzZVM1aWIyUjVYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdmU2s3WEc1Y2JpQWdmVnh1WEc0Z0lGOXlaWE4xYldWVGRXSnpZM0pwY0hScGIyNG9iWE5uTENCemRHOXlaV1JQWW1wbFkzUXBJSHRjYmlBZ0lDQnNaWFFnYjJKcVZWSk1JRDBnYzNSdmNtVmtUMkpxWldOMExuSmxjMjkxY21ObE8xeHVJQ0FnSUd4bGRDQnpZMmhsYldFZ1BTQnpkRzl5WldSUFltcGxZM1F1YzJOb1pXMWhPMXh1WEc0Z0lDQWdiR1YwSUdoNWNHVnlkSGxWVWt3Z1BTQnRjMmN1Wm5KdmJUdGNiaUFnSUNCc1pYUWdiMkpxVlZKTVUzVmljMk55YVhCMGFXOXVJRDBnYjJKcVZWSk1JQ3NnSnk5emRXSnpZM0pwY0hScGIyNG5PMXh1WEc0Z0lDQWdiR1YwSUdOb2FXeGtRbUZ6WlZWU1RDQTlJRzlpYWxWU1RDQXJJQ2N2WTJocGJHUnlaVzR2Snp0Y2JseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJVM2x1WTJobGNrMWhibUZuWlhJZ1VtVjFjMlZUZFdKelkzSnBjSFJwYjI1ZElDMGdiMkpxVlZKTU9pQW5MQ0J2WW1wVlVrd3NJQ2NnTFNCelkyaGxiV0U2Snl3Z2MyTm9aVzFoS1R0Y2JseHVJQ0FnSUM4dloyVjBJSE5qYUdWdFlTQm1jbTl0SUdOaGRHRnNiMmQxWlNCaGJtUWdjR0Z5YzJVZ0xUNGdLR05vYVd4a2NtVnVLVnh1SUNBZ0lIUm9hWE11WDJOaGRHRnNiMmN1WjJWMFJHRjBZVk5qYUdWdFlVUmxjMk55YVhCMGIzSW9jMk5vWlcxaEtTNTBhR1Z1S0Noa1pYTmpjbWx3ZEc5eUtTQTlQaUI3WEc0Z0lDQWdJQ0JzWlhRZ2NISnZjR1Z5ZEdsbGN5QTlJR1JsYzJOeWFYQjBiM0l1YzI5MWNtTmxVR0ZqYTJGblpTNXpiM1Z5WTJWRGIyUmxMbkJ5YjNCbGNuUnBaWE03WEc0Z0lDQWdJQ0JzWlhRZ1kyaHBiR1J5Wlc1eklEMGdjSEp2Y0dWeWRHbGxjeTVqYUdsc1pISmxiaUEvSUhCeWIzQmxjblJwWlhNdVkyaHBiR1J5Wlc0dVkyOXVjM1JoYm5RZ09pQmJYVHRjYmx4dUlDQWdJQ0FnTHk5amFHbHNaSEpsYmlCaFpHUnlaWE56WlhOY2JpQWdJQ0FnSUd4bGRDQnpkV0p6WTNKcGNIUnBiMjV6SUQwZ1cxMDdYRzRnSUNBZ0lDQnpkV0p6WTNKcGNIUnBiMjV6TG5CMWMyZ29iMkpxVlZKTUlDc2dKeTlqYUdGdVoyVnpKeWs3WEc0Z0lDQWdJQ0JqYUdsc1pISmxibk11Wm05eVJXRmphQ2dvWTJocGJHUXBJRDArSUhOMVluTmpjbWx3ZEdsdmJuTXVjSFZ6YUNoamFHbHNaRUpoYzJWVlVrd2dLeUJqYUdsc1pDa3BPMXh1WEc0Z0lDQWdJQ0F2TDBaTVQxY3RUMVZVT2lCeVpYQnNlU0IzYVhSb0lIQnliM1pwYzJsdmJtRnNJSEpsYzNCdmJuTmxYRzRnSUNBZ0lDQjBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvZTF4dUlDQWdJQ0FnSUNCcFpEb2diWE5uTG1sa0xDQjBlWEJsT2lBbmNtVnpjRzl1YzJVbkxDQm1jbTl0T2lCdGMyY3VkRzhzSUhSdk9pQm9lWEJsY25SNVZWSk1MRnh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdJR052WkdVNklERXdNQ3dnWTJocGJHUnlaVzVTWlhOdmRYSmpaWE02SUdOb2FXeGtjbVZ1Y3l3Z2MyTm9aVzFoT2lCelkyaGxiV0VzSUhKbGMyOTFjbU5sT2lCdlltcFZVa3dnZlZ4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDOHZSa3hQVnkxUFZWUTZJSE4xWW5OamNtbGlaU0J0WlhOellXZGxJSFJ2SUhKbGJXOTBaU0JTWlhCdmNuUmxjazlpYW1WamRDQXRQaUJmYjI1U1pXMXZkR1ZUZFdKelkzSnBZbVZjYmlBZ0lDQWdJR3hsZENCdlltcFRkV0p6WTNKcFltVk5jMmNnUFNCN1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUNkemRXSnpZM0pwWW1VbkxDQm1jbTl0T2lCMGFHbHpMbDkxY213c0lIUnZPaUJ2WW1wVlVreFRkV0p6WTNKcGNIUnBiMjRzWEc0Z0lDQWdJQ0FnSUdKdlpIazZJSHNnYzNWaWMyTnlhV0psY2pvZ2FIbHdaWEowZVZWU1RDQjlYRzRnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0F2TDNOMVluTmpjbWxpWlNCMGJ5QnlaWEJ2Y25SbGNpQlRUVnh1SUNBZ0lDQWdkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0c5aWFsTjFZbk5qY21saVpVMXpaeXdnS0hKbGNHeDVLU0E5UGlCN1hHNWNiaUFnSUNBZ0lDQWdiR1YwSUc5aWMyVnlkbVZ5SUQwZ2RHaHBjeTVmYjJKelpYSjJaWEp6VzI5aWFsVlNURjA3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hiMkp6WlhKMlpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCdlluTmxjblpsY2lBOUlHNWxkeUJQWW5ObGNuWmxjazlpYW1WamRDaDBhR2x6TENCdlltcFZVa3dzSUdOb2FXeGtjbVZ1Y3lrN1hHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmIySnpaWEoyWlhKelcyOWlhbFZTVEYwZ1BTQnZZbk5sY25abGNqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dmNtVm5hWE4wWlhJZ2JtVjNJR2g1Y0dWeWRIa2djM1ZpYzJOeWFYQjBhVzl1WEc0Z0lDQWdJQ0FnSUc5aWMyVnlkbVZ5TG1Ga1pGTjFZbk5qY21sd2RHbHZiaWhvZVhCbGNuUjVWVkpNS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMMlp2Y25kaGNtUWdkRzhnYUhsd1pYSjBlVHBjYmlBZ0lDQWdJQ0FnYkdWMElISmxjM0J2Ym5ObElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUdsa09pQnRjMmN1YVdRc0lHWnliMjA2SUhSb2FYTXVYM1Z5YkN3Z2RHODZJR2g1Y0dWeWRIbFZVa3dzSUhSNWNHVTZJQ2R5WlhOd2IyNXpaU2NzWEc0Z0lDQWdJQ0FnSUNBZ1ltOWtlVG9nY21Wd2JIa3VZbTlrZVZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSEpsYzNCdmJuTmxMbUp2WkhrdWMyTm9aVzFoSUQwZ2MyTm9aVzFoTzF4dUlDQWdJQ0FnSUNCeVpYTndiMjV6WlM1aWIyUjVMbkpsYzI5MWNtTmxJRDBnYjJKcVZWSk1PMXh1WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJjM1ZpYzJOeWFXSmxYU0F0SUhKbGMzVnRaU0J6ZFdKelkzSnBjSFJwYjI0NklDY3NJRzF6Wnl3Z2NtVndiSGtzSUhKbGMzQnZibk5sTENCdlluTmxjblpsY2lrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0hKbGMzQnZibk5sS1R0Y2JseHVJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4dlJreFBWeTFKVGpvZ2JXVnpjMkZuWlNCeVpXTmxhWFpsWkNCbWNtOXRJR3h2WTJGc0lFUmhkR0ZQWW1wbFkzUlBZbk5sY25abGNpQXRQaUIxYm5OMVluTmpjbWxpWlZ4dUlDQmZiMjVNYjJOaGJGVnVVM1ZpYzJOeWFXSmxLRzF6WnlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JzWlhRZ2FIbHdaWEowZVZWU1RDQTlJRzF6Wnk1bWNtOXRPMXh1SUNBZ0lHeGxkQ0J2WW1wVlVrd2dQU0J0YzJjdVltOWtlUzV5WlhOdmRYSmpaVHRjYmx4dUlDQWdJR3hsZENCdlluTmxjblpsY2lBOUlGOTBhR2x6TGw5dlluTmxjblpsY25OYmIySnFWVkpNWFR0Y2JpQWdJQ0JwWmlBb2IySnpaWEoyWlhJcElIdGNiaUFnSUNBZ0lDOHZWRTlFVHpvZ2FYTWdkR2hsY21VZ1lXNTVJSEJ2YkdsamVTQjJaWEpwWm1sallYUnBiMjRnWW1WbWIzSmxJR1JsYkdWMFpUOWNiaUFnSUNBZ0lHOWljMlZ5ZG1WeUxuSmxiVzkyWlZOMVluTmpjbWx3ZEdsdmJpaG9lWEJsY25SNVZWSk1LVHRjYmx4dUlDQWdJQ0FnTHk5VVQwUlBPaUJrWlhOMGNtOTVJRzlpYW1WamRDQnBiaUIwYUdVZ2NtVm5hWE4wY25rL1hHNGdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLSHRjYmlBZ0lDQWdJQ0FnYVdRNklHMXpaeTVwWkN3Z2RIbHdaVG9nSjNKbGMzQnZibk5sSnl3Z1puSnZiVG9nYlhObkxuUnZMQ0IwYnpvZ2JYTm5MbVp5YjIwc1hHNGdJQ0FnSUNBZ0lHSnZaSGs2SUhzZ1kyOWtaVG9nTWpBd0lIMWNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0IwYUdsekxsOXpkRzl5WlVSaGRHRlBZbXBsWTNSekxtUmxiR1YwWlNodlltcFZVa3dzSUNkemRXSnpZM0pwY0hScGIyNXpKeXdnYUhsd1pYSjBlVlZTVEN3Z2RISjFaU2s3WEc1Y2JpQWdJQ0FnSUM4dlZFOUVUem9nY21WdGIzWmxJRTlpYW1WamRDQnBaaUJ1YnlCdGIzSmxJSE4xWW5OamNtbHdkR2x2Ymo5Y2JpQWdJQ0FnSUM4dlpHVnNaWFJsSUY5MGFHbHpMbDl2WW5ObGNuWmxjbk5iYjJKcVZWSk1YVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JUZVc1amFHVnlUV0Z1WVdkbGNqdGNiaUlzSW1sdGNHOXlkQ0IwZGpRZ1puSnZiU0FuTGk5MGRqUW5PMXh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzJOb1pXMWhWbUZzYVdSaGRHbHZiaWh6WTJobGJXVXNJR1JsYzJOeWFYQjBiM0lzSUhaaGJIVmxLU0I3WEc1Y2JpQWdZMjl1YzI5c1pTNXNiMmNvSjFOamFHVnRaVG9nSnl3Z2MyTm9aVzFsS1R0Y2JseHVJQ0F2THlCelkyaGxiV0VnZG1Gc2FXUmhkR2x2Ymx4dUlDQmpiMjV6YjJ4bExteHZaeWduVW5WdWJtbHVaeUJ2WW1wbFkzUWdkbUZzYVdSaGRHbHZiaTR1TGljcE8xeHVJQ0IwY25rZ2UxeHVJQ0FnSUd4bGRDQnZZbW9nUFNCMllXeDFaVHRjYmlBZ0lDQnNaWFFnYzJOb1pXMWhJRDBnWkdWelkzSnBjSFJ2Y2k1emIzVnlZMlZRWVdOcllXZGxMbk52ZFhKalpVTnZaR1U3WEc1Y2JpQWdJQ0F2THlCaFpHUWdjM1Z3Y0c5eWRDQm1iM0lnYzJOb1pXMWhJSEpsWm1WeVpXNWphVzVuSUdsMGMyVnNabHh1SUNBZ0lIUjJOQzVoWkdSVFkyaGxiV0VvYzJOb1pXMWhMbWxrTENCelkyaGxiV0VwTzF4dVhHNGdJQ0FnTHk4Z2RtRnNhV1JoZEdWY2JpQWdJQ0JzWlhRZ2NtVnpkV3gwSUQwZ2RIWTBMblpoYkdsa1lYUmxUWFZzZEdsd2JHVW9iMkpxTENCelkyaGxiV0VwTzF4dVhHNGdJQ0FnTHk4Z1pHVnNaWFJsSUdWeWNtOXlJSE4wWVdOcmN5QjBieUJwYlhCeWIzWmxJR3h2WjJkcGJtZGNiaUFnSUNCeVpYTjFiSFF1WlhKeWIzSnpMbVp2Y2tWaFkyZ29LR1Z5Y205eUtTQTlQaUI3WEc0Z0lDQWdJQ0JrWld4bGRHVWdaWEp5YjNJdWMzUmhZMnM3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0F2THlCd2NtbHVkQ0J0YjNKbElHUmxkR0ZwYkhNZ1lXSnZkWFFnZG1Gc2FXUmhkR2x2YmlCcFppQnBkQ0JtWVdsc2N5QnZjaUJ6WTJobGJXRWdZMjl1ZEdGcGJuTWdKSEpsWm5OY2JpQWdJQ0JwWmlBb0lYSmxjM1ZzZEM1MllXeHBaQ0I4ZkNBb2NtVnpkV3gwTG0xcGMzTnBibWN1YkdWdVozUm9JRDRnTUNrcElIdGNiaUFnSUNBZ0lHTnZibk52YkdVdWQyRnliaWduVDJKcVpXTjBJSFpoYkdsa1lYUnBiMjRnSnlBcklDaHlaWE4xYkhRdWRtRnNhV1FnUHlBbmMzVmpZMlZsWkdWa0xDQmlkWFFnYzJOb1pXMWhJR052Ym5SaGFXNWxaQ0J5WldabGNtVnVZMlZ6T2ljZ09pQW5abUZwYkdWa09pY3BMQ0JLVTA5T0xuTjBjbWx1WjJsbWVTaHlaWE4xYkhRc0lHNTFiR3dzSURJcEtUdGNiaUFnSUNBZ0lHTnZibk52YkdVdVpHVmlkV2NvSjA5aWFtVmpkRG9uTENCS1UwOU9Mbk4wY21sdVoybG1lU2h2WW1vc0lHNTFiR3dzSURJcExDQW5YRnh5WEZ4dVUyTm9aVzFoT2ljc0lFcFRUMDR1YzNSeWFXNW5hV1o1S0hOamFHVnRZU3dnYm5Wc2JDd2dNaWtwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVDJKcVpXTjBJSFpoYkdsa1lYUnBiMjRnYzNWalkyVmxaR1ZrSnlrN1hHNGdJQ0FnZlZ4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkRmNuSnZjaUJrZFhKcGJtY2diMkpxWldOMElIWmhiR2xrWVhScGIyNDZKeXdnWlNrN1hHNGdJSDFjYmx4dWZWeHVJaXdpTHlwY2JpQkJkWFJvYjNJNklFZGxjbUZwYm5RZ1RIVm1aaUJoYm1RZ2IzUm9aWEp6WEc0Z1dXVmhjam9nTWpBeE0xeHVYRzRnVkdocGN5QmpiMlJsSUdseklISmxiR1ZoYzJWa0lHbHVkRzhnZEdobElGd2ljSFZpYkdsaklHUnZiV0ZwYmx3aUlHSjVJR2wwY3lCaGRYUm9iM0lvY3lrdUlDQkJibmxpYjJSNUlHMWhlU0IxYzJVc0lHRnNkR1Z5SUdGdVpDQmthWE4wY21saWRYUmxJSFJvWlNCamIyUmxJSGRwZEdodmRYUWdjbVZ6ZEhKcFkzUnBiMjR1SUNCVWFHVWdZWFYwYUc5eUlHMWhhMlZ6SUc1dklHZDFZWEpoYm5SbFpYTXNJR0Z1WkNCMFlXdGxjeUJ1YnlCc2FXRmlhV3hwZEhrZ2IyWWdZVzU1SUd0cGJtUWdabTl5SUhWelpTQnZaaUIwYUdseklHTnZaR1V1WEc1Y2JpQkpaaUI1YjNVZ1ptbHVaQ0JoSUdKMVp5QnZjaUJ0WVd0bElHRnVJR2x0Y0hKdmRtVnRaVzUwTENCcGRDQjNiM1ZzWkNCaVpTQmpiM1Z5ZEdWdmRYTWdkRzhnYkdWMElIUm9aU0JoZFhSb2IzSWdhMjV2ZHl3Z1luVjBJR2wwSUdseklHNXZkQ0JqYjIxd2RXeHpiM0o1TGx4dUlDb3ZYRzR2THlCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5S1lYWmhVMk55YVhCMEwxSmxabVZ5Wlc1alpTOUhiRzlpWVd4ZlQySnFaV04wY3k5UFltcGxZM1F2YTJWNWN6OXlaV1JwY21WamRHeHZZMkZzWlQxbGJpMVZVeVp5WldScGNtVmpkSE5zZFdjOVNtRjJZVk5qY21sd2RDVXlSbEpsWm1WeVpXNWpaU1V5Umtkc2IySmhiRjlQWW1wbFkzUnpKVEpHVDJKcVpXTjBKVEpHYTJWNWMxeHVhV1lnS0NGUFltcGxZM1F1YTJWNWN5a2dlMXh1SUNBZ0lFOWlhbVZqZEM1clpYbHpJRDBnS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdoaGMwOTNibEJ5YjNCbGNuUjVJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdoaGMwUnZiblJGYm5WdFFuVm5JRDBnSVNoN2RHOVRkSEpwYm1jNklHNTFiR3g5S1M1d2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTZ25kRzlUZEhKcGJtY25LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZiblJGYm5WdGN5QTlJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuZEc5VGRISnBibWNuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkMGIweHZZMkZzWlZOMGNtbHVaeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNaaGJIVmxUMlluTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkb1lYTlBkMjVRY205d1pYSjBlU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJselVISnZkRzkwZVhCbFQyWW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2R3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oyTnZibk4wY25WamRHOXlKMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSdmJuUkZiblZ0YzB4bGJtZDBhQ0E5SUdSdmJuUkZiblZ0Y3k1c1pXNW5kR2c3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNodlltb3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiMkpxSUNFOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdiMkpxSUNFOVBTQW5ablZ1WTNScGIyNG5JSHg4SUc5aWFpQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjA5aWFtVmpkQzVyWlhseklHTmhiR3hsWkNCdmJpQnViMjR0YjJKcVpXTjBKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0JiWFR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY0hKdmNDQnBiaUJ2WW1vcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodlltb3NJSEJ5YjNBcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzV3ZFhOb0tIQnliM0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0doaGMwUnZiblJGYm5WdFFuVm5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCa2IyNTBSVzUxYlhOTVpXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h2WW1vc0lHUnZiblJGYm5WdGMxdHBYU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzV3ZFhOb0tHUnZiblJGYm5WdGMxdHBYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lIMHBLQ2s3WEc1OVhHNHZMeUJvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxZGxZaTlLWVhaaFUyTnlhWEIwTDFKbFptVnlaVzVqWlM5SGJHOWlZV3hmVDJKcVpXTjBjeTlQWW1wbFkzUXZZM0psWVhSbFhHNXBaaUFvSVU5aWFtVmpkQzVqY21WaGRHVXBJSHRjYmlBZ0lDQlBZbXBsWTNRdVkzSmxZWFJsSUQwZ0tHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnUmlncElIdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvYnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ0lUMDlJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjA5aWFtVmpkQzVqY21WaGRHVWdhVzF3YkdWdFpXNTBZWFJwYjI0Z2IyNXNlU0JoWTJObGNIUnpJRzl1WlNCd1lYSmhiV1YwWlhJdUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JHTG5CeWIzUnZkSGx3WlNBOUlHODdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFWW9LVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5S1NncE8xeHVmVnh1THk4Z2FIUjBjSE02THk5a1pYWmxiRzl3WlhJdWJXOTZhV3hzWVM1dmNtY3ZaVzR0VlZNdlpHOWpjeTlYWldJdlNtRjJZVk5qY21sd2RDOVNaV1psY21WdVkyVXZSMnh2WW1Gc1gwOWlhbVZqZEhNdlFYSnlZWGt2YVhOQmNuSmhlVDl5WldScGNtVmpkR3h2WTJGc1pUMWxiaTFWVXlaeVpXUnBjbVZqZEhOc2RXYzlTbUYyWVZOamNtbHdkQ1V5UmxKbFptVnlaVzVqWlNVeVJrZHNiMkpoYkY5UFltcGxZM1J6SlRKR1FYSnlZWGtsTWtacGMwRnljbUY1WEc1cFppQW9JVUZ5Y21GNUxtbHpRWEp5WVhrcElIdGNiaUFnSUNCQmNuSmhlUzVwYzBGeWNtRjVJRDBnWm5WdVkzUnBiMjRnS0haQmNtY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtY3VZMkZzYkNoMlFYSm5LU0E5UFQwZ1hDSmJiMkpxWldOMElFRnljbUY1WFZ3aU8xeHVJQ0FnSUgwN1hHNTlYRzR2THlCb2RIUndjem92TDJSbGRtVnNiM0JsY2k1dGIzcHBiR3hoTG05eVp5OWxiaTFWVXk5a2IyTnpMMWRsWWk5S1lYWmhVMk55YVhCMEwxSmxabVZ5Wlc1alpTOUhiRzlpWVd4ZlQySnFaV04wY3k5QmNuSmhlUzlwYm1SbGVFOW1QM0psWkdseVpXTjBiRzlqWVd4bFBXVnVMVlZUSm5KbFpHbHlaV04wYzJ4MVp6MUtZWFpoVTJOeWFYQjBKVEpHVW1WbVpYSmxibU5sSlRKR1IyeHZZbUZzWDA5aWFtVmpkSE1sTWtaQmNuSmhlU1V5Um1sdVpHVjRUMlpjYm1sbUlDZ2hRWEp5WVhrdWNISnZkRzkwZVhCbExtbHVaR1Y0VDJZcElIdGNiaUFnSUNCQmNuSmhlUzV3Y205MGIzUjVjR1V1YVc1a1pYaFBaaUE5SUdaMWJtTjBhVzl1SUNoelpXRnlZMmhGYkdWdFpXNTBJQzhxTENCbWNtOXRTVzVrWlhnZ0tpOHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE1nUFQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnZENBOUlFOWlhbVZqZENoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHeGxiaUE5SUhRdWJHVnVaM1JvSUQ0K1BpQXdPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHNaVzRnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBdE1UdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IyWVhJZ2JpQTlJREE3WEc0Z0lDQWdJQ0FnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiaUE5SUU1MWJXSmxjaWhoY21kMWJXVnVkSE5iTVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNGdJVDA5SUc0cElIc2dMeThnYzJodmNuUmpkWFFnWm05eUlIWmxjbWxtZVdsdVp5QnBaaUJwZENkeklFNWhUbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzRnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNodUlDRTlQU0F3SUNZbUlHNGdJVDA5SUVsdVptbHVhWFI1SUNZbUlHNGdJVDA5SUMxSmJtWnBibWwwZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNGdQU0FvYmlBK0lEQWdmSHdnTFRFcElDb2dUV0YwYUM1bWJHOXZjaWhOWVhSb0xtRmljeWh1S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLRzRnUGowZ2JHVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0xURTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlHc2dQU0J1SUQ0OUlEQWdQeUJ1SURvZ1RXRjBhQzV0WVhnb2JHVnVJQzBnVFdGMGFDNWhZbk1vYmlrc0lEQXBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tEc2dheUE4SUd4bGJqc2dheXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2F5QnBiaUIwSUNZbUlIUmJhMTBnUFQwOUlITmxZWEpqYUVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnTFRFN1hHNGdJQ0FnZlR0Y2JuMWNibHh1THk4Z1IzSjFibWRsZVNCUFltcGxZM1F1YVhOR2NtOTZaVzRnYUdGamExeHVhV1lnS0NGUFltcGxZM1F1YVhOR2NtOTZaVzRwSUh0Y2JpQWdJQ0JQWW1wbFkzUXVhWE5HY205NlpXNGdQU0JtZFc1amRHbHZiaUFvYjJKcUtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCclpYa2dQU0JjSW5SMk5GOTBaWE4wWDJaeWIzcGxibDlyWlhsY0lqdGNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHOWlhaTVvWVhOUGQyNVFjbTl3WlhKMGVTaHJaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhrZ0t6MGdUV0YwYUM1eVlXNWtiMjBvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiMkpxVzJ0bGVWMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJRzlpYWx0clpYbGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNTlYRzR2THlCQ1lYTmxaQ0J2YmpvZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyZGxjbUZwYm5Sc2RXWm1MM1Z5YVMxMFpXMXdiR0YwWlhNc0lHSjFkQ0IzYVhSb0lHRnNiQ0IwYUdVZ1pHVXRjM1ZpYzNScGRIVjBhVzl1SUhOMGRXWm1JSEpsYlc5MlpXUmNibHh1ZG1GeUlIVnlhVlJsYlhCc1lYUmxSMnh2WW1Gc1RXOWthV1pwWlhKeklEMGdlMXh1SUNBZ0lGd2lLMXdpT2lCMGNuVmxMRnh1SUNBZ0lGd2lJMXdpT2lCMGNuVmxMRnh1SUNBZ0lGd2lMbHdpT2lCMGNuVmxMRnh1SUNBZ0lGd2lMMXdpT2lCMGNuVmxMRnh1SUNBZ0lGd2lPMXdpT2lCMGNuVmxMRnh1SUNBZ0lGd2lQMXdpT2lCMGNuVmxMRnh1SUNBZ0lGd2lKbHdpT2lCMGNuVmxYRzU5TzF4dWRtRnlJSFZ5YVZSbGJYQnNZWFJsVTNWbVptbGpaWE1nUFNCN1hHNGdJQ0FnWENJcVhDSTZJSFJ5ZFdWY2JuMDdYRzVjYm1aMWJtTjBhVzl1SUc1dmRGSmxZV3hzZVZCbGNtTmxiblJGYm1OdlpHVW9jM1J5YVc1bktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdWdVkyOWtaVlZTU1NoemRISnBibWNwTG5KbGNHeGhZMlVvTHlVeU5Wc3dMVGxkV3pBdE9WMHZaeXdnWm5WdVkzUnBiMjRnS0dSdmRXSnNaVVZ1WTI5a1pXUXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRndpSlZ3aUlDc2daRzkxWW14bFJXNWpiMlJsWkM1emRXSnpkSEpwYm1jb015azdYRzRnSUNBZ2ZTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIVnlhVlJsYlhCc1lYUmxVM1ZpYzNScGRIVjBhVzl1S0hOd1pXTXBJSHRjYmlBZ0lDQjJZWElnYlc5a2FXWnBaWElnUFNCY0lsd2lPMXh1SUNBZ0lHbG1JQ2gxY21sVVpXMXdiR0YwWlVkc2IySmhiRTF2WkdsbWFXVnljMXR6Y0dWakxtTm9ZWEpCZENnd0tWMHBJSHRjYmlBZ0lDQWdJQ0FnYlc5a2FXWnBaWElnUFNCemNHVmpMbU5vWVhKQmRDZ3dLVHRjYmlBZ0lDQWdJQ0FnYzNCbFl5QTlJSE53WldNdWMzVmljM1J5YVc1bktERXBPMXh1SUNBZ0lIMWNiaUFnSUNCMllYSWdjMlZ3WVhKaGRHOXlJRDBnWENKY0lqdGNiaUFnSUNCMllYSWdjSEpsWm1sNElEMGdYQ0pjSWp0Y2JpQWdJQ0IyWVhJZ2MyaHZkV3hrUlhOallYQmxJRDBnZEhKMVpUdGNiaUFnSUNCMllYSWdjMmh2ZDFaaGNtbGhZbXhsY3lBOUlHWmhiSE5sTzF4dUlDQWdJSFpoY2lCMGNtbHRSVzF3ZEhsVGRISnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQnBaaUFvYlc5a2FXWnBaWElnUFQwOUlDY3JKeWtnZTF4dUlDQWdJQ0FnSUNCemFHOTFiR1JGYzJOaGNHVWdQU0JtWVd4elpUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHMXZaR2xtYVdWeUlEMDlQU0JjSWk1Y0lpa2dlMXh1SUNBZ0lDQWdJQ0J3Y21WbWFYZ2dQU0JjSWk1Y0lqdGNiaUFnSUNBZ0lDQWdjMlZ3WVhKaGRHOXlJRDBnWENJdVhDSTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHRiMlJwWm1sbGNpQTlQVDBnWENJdlhDSXBJSHRjYmlBZ0lDQWdJQ0FnY0hKbFptbDRJRDBnWENJdlhDSTdYRzRnSUNBZ0lDQWdJSE5sY0dGeVlYUnZjaUE5SUZ3aUwxd2lPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9iVzlrYVdacFpYSWdQVDA5SUNjakp5a2dlMXh1SUNBZ0lDQWdJQ0J3Y21WbWFYZ2dQU0JjSWlOY0lqdGNiaUFnSUNBZ0lDQWdjMmh2ZFd4a1JYTmpZWEJsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h0YjJScFptbGxjaUE5UFQwZ0p6c25LU0I3WEc0Z0lDQWdJQ0FnSUhCeVpXWnBlQ0E5SUZ3aU8xd2lPMXh1SUNBZ0lDQWdJQ0J6WlhCaGNtRjBiM0lnUFNCY0lqdGNJanRjYmlBZ0lDQWdJQ0FnYzJodmQxWmhjbWxoWW14bGN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUnlhVzFGYlhCMGVWTjBjbWx1WnlBOUlIUnlkV1U3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h0YjJScFptbGxjaUE5UFQwZ0p6OG5LU0I3WEc0Z0lDQWdJQ0FnSUhCeVpXWnBlQ0E5SUZ3aVAxd2lPMXh1SUNBZ0lDQWdJQ0J6WlhCaGNtRjBiM0lnUFNCY0lpWmNJanRjYmlBZ0lDQWdJQ0FnYzJodmQxWmhjbWxoWW14bGN5QTlJSFJ5ZFdVN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNodGIyUnBabWxsY2lBOVBUMGdKeVluS1NCN1hHNGdJQ0FnSUNBZ0lIQnlaV1pwZUNBOUlGd2lKbHdpTzF4dUlDQWdJQ0FnSUNCelpYQmhjbUYwYjNJZ1BTQmNJaVpjSWp0Y2JpQWdJQ0FnSUNBZ2MyaHZkMVpoY21saFlteGxjeUE5SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSFpoY2s1aGJXVnpJRDBnVzEwN1hHNGdJQ0FnZG1GeUlIWmhja3hwYzNRZ1BTQnpjR1ZqTG5Od2JHbDBLRndpTEZ3aUtUdGNiaUFnSUNCMllYSWdkbUZ5VTNCbFkzTWdQU0JiWFR0Y2JpQWdJQ0IyWVhJZ2RtRnlVM0JsWTAxaGNDQTlJSHQ5TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZG1GeVRHbHpkQzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZG1GeVRtRnRaU0E5SUhaaGNreHBjM1JiYVYwN1hHNGdJQ0FnSUNBZ0lIWmhjaUIwY25WdVkyRjBaU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJR2xtSUNoMllYSk9ZVzFsTG1sdVpHVjRUMllvWENJNlhDSXBJQ0U5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEJoY25SeklEMGdkbUZ5VG1GdFpTNXpjR3hwZENoY0lqcGNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWEpPWVcxbElEMGdjR0Z5ZEhOYk1GMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGNuVnVZMkYwWlNBOUlIQmhjbk5sU1c1MEtIQmhjblJ6V3pGZExDQXhNQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJSE4xWm1acFkyVnpJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNoMWNtbFVaVzF3YkdGMFpWTjFabVpwWTJWelczWmhjazVoYldVdVkyaGhja0YwS0haaGNrNWhiV1V1YkdWdVozUm9JQzBnTVNsZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCemRXWm1hV05sYzF0MllYSk9ZVzFsTG1Ob1lYSkJkQ2gyWVhKT1lXMWxMbXhsYm1kMGFDQXRJREVwWFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWEpPWVcxbElEMGdkbUZ5VG1GdFpTNXpkV0p6ZEhKcGJtY29NQ3dnZG1GeVRtRnRaUzVzWlc1bmRHZ2dMU0F4S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnZG1GeVUzQmxZeUE5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJ5ZFc1allYUmxPaUIwY25WdVkyRjBaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUhaaGNrNWhiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkV1ptYVdObGN6b2djM1ZtWm1salpYTmNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZG1GeVUzQmxZM011Y0hWemFDaDJZWEpUY0dWaktUdGNiaUFnSUNBZ0lDQWdkbUZ5VTNCbFkwMWhjRnQyWVhKT1lXMWxYU0E5SUhaaGNsTndaV003WEc0Z0lDQWdJQ0FnSUhaaGNrNWhiV1Z6TG5CMWMyZ29kbUZ5VG1GdFpTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQnpkV0pHZFc1amRHbHZiaUE5SUdaMWJtTjBhVzl1SUNoMllXeDFaVVoxYm1OMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmNJbHdpTzF4dUlDQWdJQ0FnSUNCMllYSWdjM1JoY25SSmJtUmxlQ0E5SURBN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dkbUZ5VTNCbFkzTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMllYSlRjR1ZqSUQwZ2RtRnlVM0JsWTNOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkbUZzZFdVZ1BTQjJZV3gxWlVaMWJtTjBhVzl1S0haaGNsTndaV011Ym1GdFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ1BUMDlJRzUxYkd3Z2ZId2dkbUZzZFdVZ1BUMDlJSFZ1WkdWbWFXNWxaQ0I4ZkNBb1FYSnlZWGt1YVhOQmNuSmhlU2gyWVd4MVpTa2dKaVlnZG1Gc2RXVXViR1Z1WjNSb0lEMDlQU0F3S1NCOGZDQW9kSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5iMkpxWldOMEp5QW1KaUJQWW1wbFkzUXVhMlY1Y3loMllXeDFaU2t1YkdWdVozUm9JRDA5UFNBd0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wWVhKMFNXNWtaWGdyS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUQwOVBTQnpkR0Z5ZEVsdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJQ3M5SUhCeVpXWnBlRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUNzOUlDaHpaWEJoY21GMGIzSWdmSHdnWENJc1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITm9iM2RXWVhKcFlXSnNaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElDczlJSFpoY2xOd1pXTXVibUZ0WlNBcklGd2lQVndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNRHNnYWlBOElIWmhiSFZsTG14bGJtZDBhRHNnYWlzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHFJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwSUNzOUlIWmhjbE53WldNdWMzVm1abWxqWlhOYkp5b25YU0EvSUNoelpYQmhjbUYwYjNJZ2ZId2dYQ0lzWENJcElEb2dYQ0lzWENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kbUZ5VTNCbFl5NXpkV1ptYVdObGMxc25LaWRkSUNZbUlITm9iM2RXWVhKcFlXSnNaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ0t6MGdkbUZ5VTNCbFl5NXVZVzFsSUNzZ1hDSTlYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJQ3M5SUhOb2IzVnNaRVZ6WTJGd1pTQS9JR1Z1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2gyWVd4MVpWdHFYU2t1Y21Wd2JHRmpaU2d2SVM5bkxDQmNJaVV5TVZ3aUtTQTZJRzV2ZEZKbFlXeHNlVkJsY21ObGJuUkZibU52WkdVb2RtRnNkV1ZiYWwwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNCY0ltOWlhbVZqZEZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOb2IzZFdZWEpwWVdKc1pYTWdKaVlnSVhaaGNsTndaV011YzNWbVptbGpaWE5iSnlvblhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnS3owZ2RtRnlVM0JsWXk1dVlXMWxJQ3NnWENJOVhDSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbWFYSnpkQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFptbHljM1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCMllYSlRjR1ZqTG5OMVptWnBZMlZ6V3ljcUoxMGdQeUFvYzJWd1lYSmhkRzl5SUh4OElGd2lMRndpS1NBNklGd2lMRndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGNuTjBJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0FyUFNCemFHOTFiR1JGYzJOaGNHVWdQeUJsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvYTJWNUtTNXlaWEJzWVdObEtDOGhMMmNzSUZ3aUpUSXhYQ0lwSURvZ2JtOTBVbVZoYkd4NVVHVnlZMlZ1ZEVWdVkyOWtaU2hyWlhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUWdLejBnZG1GeVUzQmxZeTV6ZFdabWFXTmxjMXNuS2lkZElEOGdKejBuSURvZ1hDSXNYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBclBTQnphRzkxYkdSRmMyTmhjR1VnUHlCbGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2RtRnNkV1ZiYTJWNVhTa3VjbVZ3YkdGalpTZ3ZJUzluTENCY0lpVXlNVndpS1NBNklHNXZkRkpsWVd4c2VWQmxjbU5sYm5SRmJtTnZaR1VvZG1Gc2RXVmJhMlY1WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyaHZkMVpoY21saFlteGxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRZ0t6MGdkbUZ5VTNCbFl5NXVZVzFsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSeWFXMUZiWEIwZVZOMGNtbHVaeUI4ZkNCMllXeDFaU0FoUFQwZ1hDSmNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBJQ3M5SUZ3aVBWd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gyWVhKVGNHVmpMblJ5ZFc1allYUmxJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaUzV6ZFdKemRISnBibWNvTUN3Z2RtRnlVM0JsWXk1MGNuVnVZMkYwWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBclBTQnphRzkxYkdSRmMyTmhjR1VnUHlCbGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2RtRnNkV1VwTG5KbGNHeGhZMlVvTHlFdlp5d2dYQ0lsTWpGY0lpa2dPaUJ1YjNSU1pXRnNiSGxRWlhKalpXNTBSVzVqYjJSbEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMDdYRzRnSUNBZ2MzVmlSblZ1WTNScGIyNHVkbUZ5VG1GdFpYTWdQU0IyWVhKT1lXMWxjenRjYmlBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQndjbVZtYVhnNklIQnlaV1pwZUN4Y2JpQWdJQ0FnSUNBZ2MzVmljM1JwZEhWMGFXOXVPaUJ6ZFdKR2RXNWpkR2x2Ymx4dUlDQWdJSDA3WEc1OVhHNWNibVoxYm1OMGFXOXVJRlZ5YVZSbGJYQnNZWFJsS0hSbGJYQnNZWFJsS1NCN1hHNGdJQ0FnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlGVnlhVlJsYlhCc1lYUmxLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGVnlhVlJsYlhCc1lYUmxLSFJsYlhCc1lYUmxLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJSEJoY25SeklEMGdkR1Z0Y0d4aGRHVXVjM0JzYVhRb1hDSjdYQ0lwTzF4dUlDQWdJSFpoY2lCMFpYaDBVR0Z5ZEhNZ1BTQmJjR0Z5ZEhNdWMyaHBablFvS1YwN1hHNGdJQ0FnZG1GeUlIQnlaV1pwZUdWeklEMGdXMTA3WEc0Z0lDQWdkbUZ5SUhOMVluTjBhWFIxZEdsdmJuTWdQU0JiWFR0Y2JpQWdJQ0IyWVhJZ2RtRnlUbUZ0WlhNZ1BTQmJYVHRjYmlBZ0lDQjNhR2xzWlNBb2NHRnlkSE11YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY0dGeWRDQTlJSEJoY25SekxuTm9hV1owS0NrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6Y0dWaklEMGdjR0Z5ZEM1emNHeHBkQ2hjSW4xY0lpbGJNRjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaVzFoYVc1a1pYSWdQU0J3WVhKMExuTjFZbk4wY21sdVp5aHpjR1ZqTG14bGJtZDBhQ0FySURFcE8xeHVJQ0FnSUNBZ0lDQjJZWElnWm5WdVkzTWdQU0IxY21sVVpXMXdiR0YwWlZOMVluTjBhWFIxZEdsdmJpaHpjR1ZqS1R0Y2JpQWdJQ0FnSUNBZ2MzVmljM1JwZEhWMGFXOXVjeTV3ZFhOb0tHWjFibU56TG5OMVluTjBhWFIxZEdsdmJpazdYRzRnSUNBZ0lDQWdJSEJ5WldacGVHVnpMbkIxYzJnb1puVnVZM011Y0hKbFptbDRLVHRjYmlBZ0lDQWdJQ0FnZEdWNGRGQmhjblJ6TG5CMWMyZ29jbVZ0WVdsdVpHVnlLVHRjYmlBZ0lDQWdJQ0FnZG1GeVRtRnRaWE1nUFNCMllYSk9ZVzFsY3k1amIyNWpZWFFvWm5WdVkzTXVjM1ZpYzNScGRIVjBhVzl1TG5aaGNrNWhiV1Z6S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1bWFXeHNJRDBnWm5WdVkzUnBiMjRnS0haaGJIVmxSblZ1WTNScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlIUmxlSFJRWVhKMGMxc3dYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCemRXSnpkR2wwZFhScGIyNXpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2MzVmljM1JwZEhWMGFXOXVJRDBnYzNWaWMzUnBkSFYwYVc5dWMxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZENBclBTQnpkV0p6ZEdsMGRYUnBiMjRvZG1Gc2RXVkdkVzVqZEdsdmJpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFFnS3owZ2RHVjRkRkJoY25Selcya2dLeUF4WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDA3WEc0Z0lDQWdkR2hwY3k1MllYSk9ZVzFsY3lBOUlIWmhjazVoYldWek8xeHVJQ0FnSUhSb2FYTXVkR1Z0Y0d4aGRHVWdQU0IwWlcxd2JHRjBaVHRjYm4xY2JseHVWWEpwVkdWdGNHeGhkR1V1Y0hKdmRHOTBlWEJsSUQwZ2UxeHVJQ0FnSUhSdlUzUnlhVzVuT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5SbGJYQnNZWFJsTzF4dUlDQWdJSDBzWEc0Z0lDQWdabWxzYkVaeWIyMVBZbXBsWTNRNklHWjFibU4wYVc5dUlDaHZZbW9wSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVabWxzYkNobWRXNWpkR2x2YmlBb2RtRnlUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzlpYWx0MllYSk9ZVzFsWFR0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVmVHRjYm5aaGNpQldZV3hwWkdGMGIzSkRiMjUwWlhoMElEMGdablZ1WTNScGIyNGdWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDaHdZWEpsYm5Rc0lHTnZiR3hsWTNSTmRXeDBhWEJzWlN3Z1pYSnliM0pTWlhCdmNuUmxjaXdnWTJobFkydFNaV04xY25OcGRtVXNJSFJ5WVdOclZXNXJibTkzYmxCeWIzQmxjblJwWlhNcElIdGNiaUFnSUNCMGFHbHpMbTFwYzNOcGJtY2dQU0JiWFR0Y2JpQWdJQ0IwYUdsekxtMXBjM05wYm1kTllYQWdQU0I3ZlR0Y2JpQWdJQ0IwYUdsekxtWnZjbTFoZEZaaGJHbGtZWFJ2Y25NZ1BTQndZWEpsYm5RZ1B5QlBZbXBsWTNRdVkzSmxZWFJsS0hCaGNtVnVkQzVtYjNKdFlYUldZV3hwWkdGMGIzSnpLU0E2SUh0OU8xeHVJQ0FnSUhSb2FYTXVjMk5vWlcxaGN5QTlJSEJoY21WdWRDQS9JRTlpYW1WamRDNWpjbVZoZEdVb2NHRnlaVzUwTG5OamFHVnRZWE1wSURvZ2UzMDdYRzRnSUNBZ2RHaHBjeTVqYjJ4c1pXTjBUWFZzZEdsd2JHVWdQU0JqYjJ4c1pXTjBUWFZzZEdsd2JHVTdYRzRnSUNBZ2RHaHBjeTVsY25KdmNuTWdQU0JiWFR0Y2JpQWdJQ0IwYUdsekxtaGhibVJzWlVWeWNtOXlJRDBnWTI5c2JHVmpkRTExYkhScGNHeGxJRDhnZEdocGN5NWpiMnhzWldOMFJYSnliM0lnT2lCMGFHbHpMbkpsZEhWeWJrVnljbTl5TzF4dUlDQWdJR2xtSUNoamFHVmphMUpsWTNWeWMybDJaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5vWldOclVtVmpkWEp6YVhabElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WTJGdWJtVmtJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJpQTlJRnRkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0Z6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibFpoYkdsa1lYUnBiMjVGY25KdmNuTWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1SUQwZ0ozUjJORjkyWVd4cFpHRjBhVzl1WDJsa0p6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1MllXeHBaR0YwYVc5dVJYSnliM0p6UzJWNUlEMGdKM1IyTkY5MllXeHBaR0YwYVc5dVgyVnljbTl5YzE5cFpDYzdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBjbUZqYTFWdWEyNXZkMjVRY205d1pYSjBhV1Z6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEhKaFkydFZibXR1YjNkdVVISnZjR1Z5ZEdsbGN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0I3ZlR0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1bGNuSnZjbEpsY0c5eWRHVnlJRDBnWlhKeWIzSlNaWEJ2Y25SbGNpQjhmQ0JrWldaaGRXeDBSWEp5YjNKU1pYQnZjblJsY2lnblpXNG5LVHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdVpYSnliM0pTWlhCdmNuUmxjaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZGtaV0oxWnljcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtUmxabWx1WldSTFpYbDNiM0prY3lBOUlIdDlPMXh1SUNBZ0lHbG1JQ2h3WVhKbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJSEJoY21WdWRDNWtaV1pwYm1Wa1MyVjVkMjl5WkhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR1ZtYVc1bFpFdGxlWGR2Y21SelcydGxlVjBnUFNCd1lYSmxiblF1WkdWbWFXNWxaRXRsZVhkdmNtUnpXMnRsZVYwdWMyeHBZMlVvTUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlPMXh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1WkdWbWFXNWxTMlY1ZDI5eVpDQTlJR1oxYm1OMGFXOXVJQ2hyWlhsM2IzSmtMQ0JyWlhsM2IzSmtSblZ1WTNScGIyNHBJSHRjYmlBZ0lDQjBhR2x6TG1SbFptbHVaV1JMWlhsM2IzSmtjMXRyWlhsM2IzSmtYU0E5SUhSb2FYTXVaR1ZtYVc1bFpFdGxlWGR2Y21SelcydGxlWGR2Y21SZElIeDhJRnRkTzF4dUlDQWdJSFJvYVhNdVpHVm1hVzVsWkV0bGVYZHZjbVJ6VzJ0bGVYZHZjbVJkTG5CMWMyZ29hMlY1ZDI5eVpFWjFibU4wYVc5dUtUdGNibjA3WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1amNtVmhkR1ZGY25KdmNpQTlJR1oxYm1OMGFXOXVJQ2hqYjJSbExDQnRaWE56WVdkbFVHRnlZVzF6TENCa1lYUmhVR0YwYUN3Z2MyTm9aVzFoVUdGMGFDd2djM1ZpUlhKeWIzSnpMQ0JrWVhSaExDQnpZMmhsYldFcElIdGNiaUFnSUNCMllYSWdaWEp5YjNJZ1BTQnVaWGNnVm1Gc2FXUmhkR2x2YmtWeWNtOXlLR052WkdVc0lHMWxjM05oWjJWUVlYSmhiWE1zSUdSaGRHRlFZWFJvTENCelkyaGxiV0ZRWVhSb0xDQnpkV0pGY25KdmNuTXBPMXh1SUNBZ0lHVnljbTl5TG0xbGMzTmhaMlVnUFNCMGFHbHpMbVZ5Y205eVVtVndiM0owWlhJb1pYSnliM0lzSUdSaGRHRXNJSE5qYUdWdFlTazdYRzRnSUNBZ2NtVjBkWEp1SUdWeWNtOXlPMXh1ZlR0Y2JsWmhiR2xrWVhSdmNrTnZiblJsZUhRdWNISnZkRzkwZVhCbExuSmxkSFZ5YmtWeWNtOXlJRDBnWm5WdVkzUnBiMjRnS0dWeWNtOXlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4dWZUdGNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMbU52Ykd4bFkzUkZjbkp2Y2lBOUlHWjFibU4wYVc5dUlDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUdsbUlDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXljeTV3ZFhOb0tHVnljbTl5S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVjSEpsWm1sNFJYSnliM0p6SUQwZ1puVnVZM1JwYjI0Z0tITjBZWEowU1c1a1pYZ3NJR1JoZEdGUVlYUm9MQ0J6WTJobGJXRlFZWFJvS1NCN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlITjBZWEowU1c1a1pYZzdJR2tnUENCMGFHbHpMbVZ5Y205eWN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZ5Y205eWMxdHBYU0E5SUhSb2FYTXVaWEp5YjNKelcybGRMbkJ5WldacGVGZHBkR2dvWkdGMFlWQmhkR2dzSUhOamFHVnRZVkJoZEdncE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JuMDdYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzVpWVc1VmJtdHViM2R1VUhKdmNHVnlkR2xsY3lBOUlHWjFibU4wYVc5dUlDaGtZWFJoTENCelkyaGxiV0VwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUIxYm10dWIzZHVVR0YwYUNCcGJpQjBhR2x6TG5WdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoektTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGNuSnZjaUE5SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1VlRrdE9UMWRPWDFCU1QxQkZVbFJaTENCN2NHRjBhRG9nZFc1cmJtOTNibEJoZEdoOUxDQjFibXR1YjNkdVVHRjBhQ3dnWENKY0lpd2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlIUm9hWE11YUdGdVpHeGxSWEp5YjNJb1pYSnliM0lwTzF4dUlDQWdJQ0FnSUNCcFppQW9jbVZ6ZFd4MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVZV1JrUm05eWJXRjBJRDBnWm5WdVkzUnBiMjRnS0dadmNtMWhkQ3dnZG1Gc2FXUmhkRzl5S1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCbWIzSnRZWFFnUFQwOUlDZHZZbXBsWTNRbktTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR3RsZVNCcGJpQm1iM0p0WVhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV1JrUm05eWJXRjBLR3RsZVN3Z1ptOXliV0YwVzJ0bGVWMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtWnZjbTFoZEZaaGJHbGtZWFJ2Y25OYlptOXliV0YwWFNBOUlIWmhiR2xrWVhSdmNqdGNibjA3WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1eVpYTnZiSFpsVW1WbWN5QTlJR1oxYm1OMGFXOXVJQ2h6WTJobGJXRXNJSFZ5YkVocGMzUnZjbmtwSUh0Y2JpQWdJQ0JwWmlBb2MyTm9aVzFoV3lja2NtVm1KMTBnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0IxY214SWFYTjBiM0o1SUQwZ2RYSnNTR2x6ZEc5eWVTQjhmQ0I3ZlR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFZ5YkVocGMzUnZjbmxiYzJOb1pXMWhXeWNrY21WbUoxMWRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrTkpVa05WVEVGU1gxSkZSa1ZTUlU1RFJTd2dlM1Z5YkhNNklFOWlhbVZqZEM1clpYbHpLSFZ5YkVocGMzUnZjbmtwTG1wdmFXNG9KeXdnSnlsOUxDQW5KeXdnSnljc0lHNTFiR3dzSUhWdVpHVm1hVzVsWkN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjFjbXhJYVhOMGIzSjVXM05qYUdWdFlWc25KSEpsWmlkZFhTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lITmphR1Z0WVNBOUlIUm9hWE11WjJWMFUyTm9aVzFoS0hOamFHVnRZVnNuSkhKbFppZGRMQ0IxY214SWFYTjBiM0o1S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlITmphR1Z0WVR0Y2JuMDdYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzVuWlhSVFkyaGxiV0VnUFNCbWRXNWpkR2x2YmlBb2RYSnNMQ0IxY214SWFYTjBiM0o1S1NCN1hHNGdJQ0FnZG1GeUlITmphR1Z0WVR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTV6WTJobGJXRnpXM1Z5YkYwZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCelkyaGxiV0VnUFNCMGFHbHpMbk5qYUdWdFlYTmJkWEpzWFR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZ6YjJ4MlpWSmxabk1vYzJOb1pXMWhMQ0IxY214SWFYTjBiM0o1S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUdKaGMyVlZjbXdnUFNCMWNtdzdYRzRnSUNBZ2RtRnlJR1p5WVdkdFpXNTBJRDBnWENKY0lqdGNiaUFnSUNCcFppQW9kWEpzTG1sdVpHVjRUMllvSnlNbktTQWhQVDBnTFRFcElIdGNiaUFnSUNBZ0lDQWdabkpoWjIxbGJuUWdQU0IxY213dWMzVmljM1J5YVc1bktIVnliQzVwYm1SbGVFOW1LRndpSTF3aUtTQXJJREVwTzF4dUlDQWdJQ0FnSUNCaVlYTmxWWEpzSUQwZ2RYSnNMbk4xWW5OMGNtbHVaeWd3TENCMWNtd3VhVzVrWlhoUFppaGNJaU5jSWlrcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhSb2FYTXVjMk5vWlcxaGMxdGlZWE5sVlhKc1hTQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2MyTm9aVzFoSUQwZ2RHaHBjeTV6WTJobGJXRnpXMkpoYzJWVmNteGRPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NHOXBiblJsY2xCaGRHZ2dQU0JrWldOdlpHVlZVa2xEYjIxd2IyNWxiblFvWm5KaFoyMWxiblFwTzF4dUlDQWdJQ0FnSUNCcFppQW9jRzlwYm5SbGNsQmhkR2dnUFQwOUlGd2lYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGMyOXNkbVZTWldaektITmphR1Z0WVN3Z2RYSnNTR2x6ZEc5eWVTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvY0c5cGJuUmxjbEJoZEdndVkyaGhja0YwS0RBcElDRTlQU0JjSWk5Y0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjJZWElnY0dGeWRITWdQU0J3YjJsdWRHVnlVR0YwYUM1emNHeHBkQ2hjSWk5Y0lpa3VjMnhwWTJVb01TazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0dGeWRITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamIyMXdiMjVsYm5RZ1BTQndZWEowYzF0cFhTNXlaWEJzWVdObEtDOStNUzluTENCY0lpOWNJaWt1Y21Wd2JHRmpaU2d2ZmpBdlp5d2dYQ0orWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITmphR1Z0WVZ0amIyMXdiMjVsYm5SZElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyaGxiV0VnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCelkyaGxiV0VnUFNCelkyaGxiV0ZiWTI5dGNHOXVaVzUwWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvYzJOb1pXMWhJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxjMjlzZG1WU1pXWnpLSE5qYUdWdFlTd2dkWEpzU0dsemRHOXllU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSb2FYTXViV2x6YzJsdVoxdGlZWE5sVlhKc1hTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YldsemMybHVaeTV3ZFhOb0tHSmhjMlZWY213cE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xcGMzTnBibWRiWW1GelpWVnliRjBnUFNCaVlYTmxWWEpzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFwYzNOcGJtZE5ZWEJiWW1GelpWVnliRjBnUFNCaVlYTmxWWEpzTzF4dUlDQWdJSDFjYm4wN1hHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNXpaV0Z5WTJoVFkyaGxiV0Z6SUQwZ1puVnVZM1JwYjI0Z0tITmphR1Z0WVN3Z2RYSnNLU0I3WEc0Z0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29jMk5vWlcxaEtTa2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhOamFHVnRZUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaV0Z5WTJoVFkyaGxiV0Z6S0hOamFHVnRZVnRwWFN3Z2RYSnNLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvYzJOb1pXMWhJQ1ltSUhSNWNHVnZaaUJ6WTJobGJXRWdQVDA5SUZ3aWIySnFaV04wWENJcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6WTJobGJXRXVhV1FnUFQwOUlGd2ljM1J5YVc1blhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYzFSeWRYTjBaV1JWY213b2RYSnNMQ0J6WTJobGJXRXVhV1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWMyTm9aVzFoYzF0elkyaGxiV0V1YVdSZElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elkyaGxiV0Z6VzNOamFHVnRZUzVwWkYwZ1BTQnpZMmhsYldFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCelkyaGxiV0VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoclpYa2dJVDA5SUZ3aVpXNTFiVndpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpZMmhsYldGYmEyVjVYU0E5UFQwZ1hDSnZZbXBsWTNSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sWVhKamFGTmphR1Z0WVhNb2MyTm9aVzFoVzJ0bGVWMHNJSFZ5YkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHJaWGtnUFQwOUlGd2lKSEpsWmx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQjFjbWtnUFNCblpYUkViMk4xYldWdWRGVnlhU2h6WTJobGJXRmJhMlY1WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMWNta2dKaVlnZEdocGN5NXpZMmhsYldGelczVnlhVjBnUFQwOUlIVnVaR1ZtYVc1bFpDQW1KaUIwYUdsekxtMXBjM05wYm1kTllYQmJkWEpwWFNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXBjM05wYm1kTllYQmJkWEpwWFNBOUlIVnlhVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMDdYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzVoWkdSVFkyaGxiV0VnUFNCbWRXNWpkR2x2YmlBb2RYSnNMQ0J6WTJobGJXRXBJSHRjYmlBZ0lDQXZMMjkyWlhKc2IyRmtYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjFjbXdnSVQwOUlDZHpkSEpwYm1jbklIeDhJSFI1Y0dWdlppQnpZMmhsYldFZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkWEpzSUQwOVBTQW5iMkpxWldOMEp5QW1KaUIwZVhCbGIyWWdkWEpzTG1sa0lEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMk5vWlcxaElEMGdkWEpzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkWEpzSUQwZ2MyTm9aVzFoTG1sa08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gxY213Z1BUMDlJR2RsZEVSdlkzVnRaVzUwVlhKcEtIVnliQ2tnS3lCY0lpTmNJaWtnZTF4dUlDQWdJQ0FnSUNBdkx5QlNaVzF2ZG1VZ1pXMXdkSGtnWm5KaFoyMWxiblJjYmlBZ0lDQWdJQ0FnZFhKc0lEMGdaMlYwUkc5amRXMWxiblJWY21rb2RYSnNLVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV6WTJobGJXRnpXM1Z5YkYwZ1BTQnpZMmhsYldFN1hHNGdJQ0FnWkdWc1pYUmxJSFJvYVhNdWJXbHpjMmx1WjAxaGNGdDFjbXhkTzF4dUlDQWdJRzV2Y20xVFkyaGxiV0VvYzJOb1pXMWhMQ0IxY213cE8xeHVJQ0FnSUhSb2FYTXVjMlZoY21Ob1UyTm9aVzFoY3loelkyaGxiV0VzSUhWeWJDazdYRzU5TzF4dVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNW5aWFJUWTJobGJXRk5ZWEFnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJRzFoY0NBOUlIdDlPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCMGFHbHpMbk5qYUdWdFlYTXBJSHRjYmlBZ0lDQWdJQ0FnYldGd1cydGxlVjBnUFNCMGFHbHpMbk5qYUdWdFlYTmJhMlY1WFR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHMWhjRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMbWRsZEZOamFHVnRZVlZ5YVhNZ1BTQm1kVzVqZEdsdmJpQW9abWxzZEdWeVVtVm5SWGh3S1NCN1hHNGdJQ0FnZG1GeUlHeHBjM1FnUFNCYlhUdGNiaUFnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnZEdocGN5NXpZMmhsYldGektTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaFptbHNkR1Z5VW1WblJYaHdJSHg4SUdacGJIUmxjbEpsWjBWNGNDNTBaWE4wS0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHBjM1F1Y0hWemFDaHJaWGtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnNhWE4wTzF4dWZUdGNibHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1WjJWMFRXbHpjMmx1WjFWeWFYTWdQU0JtZFc1amRHbHZiaUFvWm1sc2RHVnlVbVZuUlhod0tTQjdYRzRnSUNBZ2RtRnlJR3hwYzNRZ1BTQmJYVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2RHaHBjeTV0YVhOemFXNW5UV0Z3S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWm1sc2RHVnlVbVZuUlhod0lIeDhJR1pwYkhSbGNsSmxaMFY0Y0M1MFpYTjBLR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cGMzUXVjSFZ6YUNoclpYa3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCc2FYTjBPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVaSEp2Y0ZOamFHVnRZWE1nUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RHaHBjeTV6WTJobGJXRnpJRDBnZTMwN1hHNGdJQ0FnZEdocGN5NXlaWE5sZENncE8xeHVmVHRjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5KbGMyVjBJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhSb2FYTXViV2x6YzJsdVp5QTlJRnRkTzF4dUlDQWdJSFJvYVhNdWJXbHpjMmx1WjAxaGNDQTlJSHQ5TzF4dUlDQWdJSFJvYVhNdVpYSnliM0p6SUQwZ1cxMDdYRzU5TzF4dVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVRnNiQ0E5SUdaMWJtTjBhVzl1SUNoa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUVlYUm9VR0Z5ZEhNc0lITmphR1Z0WVZCaGRHaFFZWEowY3l3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NCN1hHNGdJQ0FnZG1GeUlIUnZjRXhsZG1Wc08xeHVJQ0FnSUhOamFHVnRZU0E5SUhSb2FYTXVjbVZ6YjJ4MlpWSmxabk1vYzJOb1pXMWhLVHRjYmlBZ0lDQnBaaUFvSVhOamFHVnRZU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tITmphR1Z0WVNCcGJuTjBZVzVqWlc5bUlGWmhiR2xrWVhScGIyNUZjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXljeTV3ZFhOb0tITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelkyaGxiV0U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUhOMFlYSjBSWEp5YjNKRGIzVnVkQ0E5SUhSb2FYTXVaWEp5YjNKekxteGxibWQwYUR0Y2JpQWdJQ0IyWVhJZ1puSnZlbVZ1U1c1a1pYZ3NJSE5qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0ZKYm1SbGVDQTlJRzUxYkd3c0lITmpZVzV1WldSVFkyaGxiV0Z6U1c1a1pYZ2dQU0J1ZFd4c08xeHVJQ0FnSUdsbUlDaDBhR2x6TG1Ob1pXTnJVbVZqZFhKemFYWmxJQ1ltSUdSaGRHRWdKaVlnZEhsd1pXOW1JR1JoZEdFZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0FnSUhSdmNFeGxkbVZzSUQwZ0lYUm9hWE11YzJOaGJtNWxaQzVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhXM1JvYVhNdWRtRnNhV1JoZEdWa1UyTm9aVzFoYzB0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6WTJobGJXRkpibVJsZUNBOUlHUmhkR0ZiZEdocGN5NTJZV3hwWkdGMFpXUlRZMmhsYldGelMyVjVYUzVwYm1SbGVFOW1LSE5qYUdWdFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jMk5vWlcxaFNXNWtaWGdnSVQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxjbkp2Y25NZ1BTQjBhR2x6TG1WeWNtOXljeTVqYjI1allYUW9aR0YwWVZ0MGFHbHpMblpoYkdsa1lYUnBiMjVGY25KdmNuTkxaWGxkVzNOamFHVnRZVWx1WkdWNFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tFOWlhbVZqZEM1cGMwWnliM3BsYmloa1lYUmhLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdabkp2ZW1WdVNXNWtaWGdnUFNCMGFHbHpMbk5qWVc1dVpXUkdjbTk2Wlc0dWFXNWtaWGhQWmloa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htY205NlpXNUpibVJsZUNBaFBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdabkp2ZW1WdVUyTm9aVzFoU1c1a1pYZ2dQU0IwYUdsekxuTmpZVzV1WldSR2NtOTZaVzVUWTJobGJXRnpXMlp5YjNwbGJrbHVaR1Y0WFM1cGJtUmxlRTltS0hOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnliM3BsYmxOamFHVnRZVWx1WkdWNElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVnljbTl5Y3lBOUlIUm9hWE11WlhKeWIzSnpMbU52Ym1OaGRDaDBhR2x6TG5OallXNXVaV1JHY205NlpXNVdZV3hwWkdGMGFXOXVSWEp5YjNKelcyWnliM3BsYmtsdVpHVjRYVnRtY205NlpXNVRZMmhsYldGSmJtUmxlRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXpZMkZ1Ym1Wa0xuQjFjMmdvWkdGMFlTazdYRzRnSUNBZ0lDQWdJR2xtSUNoUFltcGxZM1F1YVhOR2NtOTZaVzRvWkdGMFlTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2htY205NlpXNUpibVJsZUNBOVBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOTZaVzVKYm1SbGVDQTlJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxiaTVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elkyRnVibVZrUm5KdmVtVnVMbkIxYzJnb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpZMkZ1Ym1Wa1JuSnZlbVZ1VTJOb1pXMWhjeTV3ZFhOb0tGdGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhOallXNXVaV1JHY205NlpXNVRZMmhsYldGSmJtUmxlQ0E5SUhSb2FYTXVjMk5oYm01bFpFWnliM3BsYmxOamFHVnRZWE5iWm5KdmVtVnVTVzVrWlhoZExteGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlYTmJabkp2ZW1WdVNXNWtaWGhkVzNOallXNXVaV1JHY205NlpXNVRZMmhsYldGSmJtUmxlRjBnUFNCelkyaGxiV0U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OallXNXVaV1JHY205NlpXNVdZV3hwWkdGMGFXOXVSWEp5YjNKelcyWnliM3BsYmtsdVpHVjRYVnR6WTJGdWJtVmtSbkp2ZW1WdVUyTm9aVzFoU1c1a1pYaGRJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXUmhkR0ZiZEdocGN5NTJZV3hwWkdGMFpXUlRZMmhsYldGelMyVjVYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGtZWFJoTENCMGFHbHpMblpoYkdsa1lYUmxaRk5qYUdWdFlYTkxaWGtzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJiWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBaM1Z5WVdKc1pUb2dkSEoxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1JoZEdFc0lIUm9hWE11ZG1Gc2FXUmhkR2x2YmtWeWNtOXljMHRsZVN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUZ0ZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5SlJTQTNMemdnZDI5eWEyRnliM1Z1WkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjBnUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWdDBhR2x6TG5aaGJHbGtZWFJwYjI1RmNuSnZjbk5MWlhsZElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyTmhibTVsWkZOamFHVnRZWE5KYm1SbGVDQTlJR1JoZEdGYmRHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1WFM1c1pXNW5kR2c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVzNSb2FYTXVkbUZzYVdSaGRHVmtVMk5vWlcxaGMwdGxlVjFiYzJOaGJtNWxaRk5qYUdWdFlYTkpibVJsZUYwZ1BTQnpZMmhsYldFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFczUm9hWE11ZG1Gc2FXUmhkR2x2YmtWeWNtOXljMHRsZVYxYmMyTmhibTVsWkZOamFHVnRZWE5KYm1SbGVGMGdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQmxjbkp2Y2tOdmRXNTBJRDBnZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvTzF4dUlDQWdJSFpoY2lCbGNuSnZjaUE5SUhSb2FYTXVkbUZzYVdSaGRHVkNZWE5wWXloa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDbGNiaUFnSUNBZ0lDQWdmSHdnZEdocGN5NTJZV3hwWkdGMFpVNTFiV1Z5YVdNb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVlRkSEpwYm1jb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVkJjbkpoZVNoa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDbGNiaUFnSUNBZ0lDQWdmSHdnZEdocGN5NTJZV3hwWkdGMFpVOWlhbVZqZENoa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDbGNiaUFnSUNBZ0lDQWdmSHdnZEdocGN5NTJZV3hwWkdGMFpVTnZiV0pwYm1GMGFXOXVjeWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlVoNWNHVnliV1ZrYVdFb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVkdiM0p0WVhRb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVkVaV1pwYm1Wa1MyVjVkMjl5WkhNb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUc1MWJHdzdYRzVjYmlBZ0lDQnBaaUFvZEc5d1RHVjJaV3dwSUh0Y2JpQWdJQ0FnSUNBZ2QyaHBiR1VnS0hSb2FYTXVjMk5oYm01bFpDNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBkR1Z0SUQwZ2RHaHBjeTV6WTJGdWJtVmtMbkJ2Y0NncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJR2wwWlcxYmRHaHBjeTUyWVd4cFpHRjBaV1JUWTJobGJXRnpTMlY1WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OallXNXVaV1JHY205NlpXNGdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WTJGdWJtVmtSbkp2ZW1WdVUyTm9aVzFoY3lBOUlGdGRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hsY25KdmNpQjhmQ0JsY25KdmNrTnZkVzUwSUNFOVBTQjBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnZDJocGJHVWdLQ2hrWVhSaFVHRjBhRkJoY25SeklDWW1JR1JoZEdGUVlYUm9VR0Z5ZEhNdWJHVnVaM1JvS1NCOGZDQW9jMk5vWlcxaFVHRjBhRkJoY25SeklDWW1JSE5qYUdWdFlWQmhkR2hRWVhKMGN5NXNaVzVuZEdncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR0YwWVZCaGNuUWdQU0FvWkdGMFlWQmhkR2hRWVhKMGN5QW1KaUJrWVhSaFVHRjBhRkJoY25SekxteGxibWQwYUNrZ1B5QmNJbHdpSUNzZ1pHRjBZVkJoZEdoUVlYSjBjeTV3YjNBb0tTQTZJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2MyTm9aVzFoVUdGeWRDQTlJQ2h6WTJobGJXRlFZWFJvVUdGeWRITWdKaVlnYzJOb1pXMWhVR0YwYUZCaGNuUnpMbXhsYm1kMGFDa2dQeUJjSWx3aUlDc2djMk5vWlcxaFVHRjBhRkJoY25SekxuQnZjQ2dwSURvZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y205eUlEMGdaWEp5YjNJdWNISmxabWw0VjJsMGFDaGtZWFJoVUdGeWRDd2djMk5vWlcxaFVHRnlkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5WldacGVFVnljbTl5Y3lobGNuSnZja052ZFc1MExDQmtZWFJoVUdGeWRDd2djMk5vWlcxaFVHRnlkQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2MyTmhibTVsWkVaeWIzcGxibE5qYUdWdFlVbHVaR1Y0SUNFOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJOaGJtNWxaRVp5YjNwbGJsWmhiR2xrWVhScGIyNUZjbkp2Y25OYlpuSnZlbVZ1U1c1a1pYaGRXM05qWVc1dVpXUkdjbTk2Wlc1VFkyaGxiV0ZKYm1SbGVGMGdQU0IwYUdsekxtVnljbTl5Y3k1emJHbGpaU2h6ZEdGeWRFVnljbTl5UTI5MWJuUXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9jMk5oYm01bFpGTmphR1Z0WVhOSmJtUmxlQ0FoUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCa1lYUmhXM1JvYVhNdWRtRnNhV1JoZEdsdmJrVnljbTl5YzB0bGVWMWJjMk5oYm01bFpGTmphR1Z0WVhOSmJtUmxlRjBnUFNCMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNoemRHRnlkRVZ5Y205eVEyOTFiblFwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1oaGJtUnNaVVZ5Y205eUtHVnljbTl5S1R0Y2JuMDdYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVVp2Y20xaGRDQTlJR1oxYm1OMGFXOXVJQ2hrWVhSaExDQnpZMmhsYldFcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlITmphR1Z0WVM1bWIzSnRZWFFnSVQwOUlDZHpkSEpwYm1jbklIeDhJQ0YwYUdsekxtWnZjbTFoZEZaaGJHbGtZWFJ2Y25OYmMyTm9aVzFoTG1admNtMWhkRjBwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQmxjbkp2Y2sxbGMzTmhaMlVnUFNCMGFHbHpMbVp2Y20xaGRGWmhiR2xrWVhSdmNuTmJjMk5vWlcxaExtWnZjbTFoZEYwdVkyRnNiQ2h1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJR2xtSUNoMGVYQmxiMllnWlhKeWIzSk5aWE56WVdkbElEMDlQU0FuYzNSeWFXNW5KeUI4ZkNCMGVYQmxiMllnWlhKeWIzSk5aWE56WVdkbElEMDlQU0FuYm5WdFltVnlKeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGtaUFVrMUJWRjlEVlZOVVQwMHNJSHR0WlhOellXZGxPaUJsY25KdmNrMWxjM05oWjJWOUxDQW5KeXdnSnk5bWIzSnRZWFFuTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pYSnliM0pOWlhOellXZGxJQ1ltSUhSNWNHVnZaaUJsY25KdmNrMWxjM05oWjJVZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11Ums5U1RVRlVYME5WVTFSUFRTd2dlMjFsYzNOaFoyVTZJR1Z5Y205eVRXVnpjMkZuWlM1dFpYTnpZV2RsSUh4OElGd2lQMXdpZlN3Z1pYSnliM0pOWlhOellXZGxMbVJoZEdGUVlYUm9JSHg4SUNjbkxDQmxjbkp2Y2sxbGMzTmhaMlV1YzJOb1pXMWhVR0YwYUNCOGZDQmNJaTltYjNKdFlYUmNJaXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkVaV1pwYm1Wa1MyVjVkMjl5WkhNZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJyWlhrZ2FXNGdkR2hwY3k1a1pXWnBibVZrUzJWNWQyOXlaSE1wSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpZMmhsYldGYmEyVjVYU0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCMllXeHBaR0YwYVc5dVJuVnVZM1JwYjI1eklEMGdkR2hwY3k1a1pXWnBibVZrUzJWNWQyOXlaSE5iYTJWNVhUdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IyWVd4cFpHRjBhVzl1Um5WdVkzUnBiMjV6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdablZ1WXlBOUlIWmhiR2xrWVhScGIyNUdkVzVqZEdsdmJuTmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnWm5WdVl5aGtZWFJoTENCelkyaGxiV0ZiYTJWNVhTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCeVpYTjFiSFFnUFQwOUlDZHpkSEpwYm1jbklIeDhJSFI1Y0dWdlppQnlaWE4xYkhRZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVMUlZsWFQxSkVYME5WVTFSUFRTd2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCclpYazZJR3RsZVN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpUb2djbVZ6ZFd4MFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dKeWNzSUNjbkxDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBMbkJ5WldacGVGZHBkR2dvYm5Wc2JDd2dhMlY1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvY21WemRXeDBJQ1ltSUhSNWNHVnZaaUJ5WlhOMWJIUWdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR052WkdVZ1BTQnlaWE4xYkhRdVkyOWtaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOdlpHVWdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFJYSnliM0pEYjJSbGMxdGpiMlJsWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVmJtUmxabWx1WldRZ1pYSnliM0lnWTI5a1pTQW9kWE5sSUdSbFptbHVaVVZ5Y205eUtUb2dKeUFySUdOdlpHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052WkdVZ1BTQkZjbkp2Y2tOdlpHVnpXMk52WkdWZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlHTnZaR1VnSVQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdlpHVWdQU0JGY25KdmNrTnZaR1Z6TGt0RldWZFBVa1JmUTFWVFZFOU5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JXVnpjMkZuWlZCaGNtRnRjeUE5SUNoMGVYQmxiMllnY21WemRXeDBMbTFsYzNOaFoyVWdQVDA5SUNkdlltcGxZM1FuS1NBL0lISmxjM1ZzZEM1dFpYTnpZV2RsSURvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JyWlhrNklHdGxlU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ2NtVnpkV3gwTG0xbGMzTmhaMlVnZkh3Z1hDSS9YQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpZMmhsYldGUVlYUm9JRDBnY21WemRXeDBMbk5qYUdWdFlWQmhkR2dnZkh3Z0tGd2lMMXdpSUNzZ2EyVjVMbkpsY0d4aFkyVW9MMzR2Wnl3Z0ozNHdKeWt1Y21Wd2JHRmpaU2d2WEZ3dkwyY3NJQ2QrTVNjcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loamIyUmxMQ0J0WlhOellXZGxVR0Z5WVcxekxDQnlaWE4xYkhRdVpHRjBZVkJoZEdnZ2ZId2diblZzYkN3Z2MyTm9aVzFoVUdGMGFDd2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnYm5Wc2JEdGNibjA3WEc1Y2JtWjFibU4wYVc5dUlISmxZM1Z5YzJsMlpVTnZiWEJoY21Vb1FTd2dRaWtnZTF4dUlDQWdJR2xtSUNoQklEMDlQU0JDS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9RU0FtSmlCQ0lDWW1JSFI1Y0dWdlppQkJJRDA5UFNCY0ltOWlhbVZqZEZ3aUlDWW1JSFI1Y0dWdlppQkNJRDA5UFNCY0ltOWlhbVZqZEZ3aUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLRUVwSUNFOVBTQkJjbkpoZVM1cGMwRnljbUY1S0VJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaEJLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0VFdWJHVnVaM1JvSUNFOVBTQkNMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dRUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doY21WamRYSnphWFpsUTI5dGNHRnlaU2hCVzJsZExDQkNXMmxkS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUd0bGVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlFRXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1FsdHJaWGxkSUQwOVBTQjFibVJsWm1sdVpXUWdKaVlnUVZ0clpYbGRJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2EyVjVJR2x1SUVJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUVZ0clpYbGRJRDA5UFNCMWJtUmxabWx1WldRZ0ppWWdRbHRyWlhsZElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYTJWNUlHbHVJRUVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWEpsWTNWeWMybDJaVU52YlhCaGNtVW9RVnRyWlhsZExDQkNXMnRsZVYwcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4xY2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkNZWE5wWXlBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFFtRnphV01vWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncElIdGNiaUFnSUNCMllYSWdaWEp5YjNJN1hHNGdJQ0FnYVdZZ0tHVnljbTl5SUQwZ2RHaHBjeTUyWVd4cFpHRjBaVlI1Y0dVb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNpNXdjbVZtYVhoWGFYUm9LRzUxYkd3c0lGd2lkSGx3WlZ3aUtUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHVnljbTl5SUQwZ2RHaHBjeTUyWVd4cFpHRjBaVVZ1ZFcwb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNpNXdjbVZtYVhoWGFYUm9LRzUxYkd3c0lGd2lkSGx3WlZ3aUtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlZSNWNHVWdQU0JtZFc1amRHbHZiaUIyWVd4cFpHRjBaVlI1Y0dVb1pHRjBZU3dnYzJOb1pXMWhLU0I3WEc0Z0lDQWdhV1lnS0hOamFHVnRZUzUwZVhCbElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQmtZWFJoVkhsd1pTQTlJSFI1Y0dWdlppQmtZWFJoTzF4dUlDQWdJR2xtSUNoa1lYUmhJRDA5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUdSaGRHRlVlWEJsSUQwZ1hDSnVkV3hzWENJN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoQmNuSmhlUzVwYzBGeWNtRjVLR1JoZEdFcEtTQjdYRzRnSUNBZ0lDQWdJR1JoZEdGVWVYQmxJRDBnWENKaGNuSmhlVndpTzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnWVd4c2IzZGxaRlI1Y0dWeklEMGdjMk5vWlcxaExuUjVjR1U3WEc0Z0lDQWdhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLR0ZzYkc5M1pXUlVlWEJsY3lrcElIdGNiaUFnSUNBZ0lDQWdZV3hzYjNkbFpGUjVjR1Z6SUQwZ1cyRnNiRzkzWldSVWVYQmxjMTA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JoYkd4dmQyVmtWSGx3WlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUjVjR1VnUFNCaGJHeHZkMlZrVkhsd1pYTmJhVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsSUQwOVBTQmtZWFJoVkhsd1pTQjhmQ0FvZEhsd1pTQTlQVDBnWENKcGJuUmxaMlZ5WENJZ0ppWWdaR0YwWVZSNWNHVWdQVDA5SUZ3aWJuVnRZbVZ5WENJZ0ppWWdLR1JoZEdFZ0pTQXhJRDA5UFNBd0tTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVNVNVdRVXhKUkY5VVdWQkZMQ0I3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJR1JoZEdGVWVYQmxMRnh1SUNBZ0lDQWdJQ0JsZUhCbFkzUmxaRG9nWVd4c2IzZGxaRlI1Y0dWekxtcHZhVzRvWENJdlhDSXBYRzRnSUNBZ2ZTd2dKeWNzSUNjbkxDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVkZiblZ0SUQwZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWRmJuVnRLR1JoZEdFc0lITmphR1Z0WVNrZ2UxeHVJQ0FnSUdsbUlDaHpZMmhsYldGYlhDSmxiblZ0WENKZElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MyTm9aVzFoVzF3aVpXNTFiVndpWFM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pXNTFiVlpoYkNBOUlITmphR1Z0WVZ0Y0ltVnVkVzFjSWwxYmFWMDdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpXTjFjbk5wZG1WRGIyMXdZWEpsS0dSaGRHRXNJR1Z1ZFcxV1lXd3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrVk9WVTFmVFVsVFRVRlVRMGdzSUh0MllXeDFaVG9nS0hSNWNHVnZaaUJLVTA5T0lDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ1B5QktVMDlPTG5OMGNtbHVaMmxtZVNoa1lYUmhLU0E2SUdSaGRHRjlMQ0FuSnl3Z0p5Y3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTUxYldWeWFXTWdQU0JtZFc1amRHbHZiaUIyWVd4cFpHRjBaVTUxYldWeWFXTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MllXeHBaR0YwWlUxMWJIUnBjR3hsVDJZb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVk5hVzVOWVhnb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUhSb2FYTXVkbUZzYVdSaGRHVk9ZVTRvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJRzUxYkd3N1hHNTlPMXh1WEc1MllYSWdRMHhQVTBWZlJVNVBWVWRJWDB4UFZ5QTlJRTFoZEdndWNHOTNLRElzSUMwMU1TazdYRzUyWVhJZ1EweFBVMFZmUlU1UFZVZElYMGhKUjBnZ1BTQXhJQzBnUTB4UFUwVmZSVTVQVlVkSVgweFBWenRjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVFhWc2RHbHdiR1ZQWmlBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFRYVnNkR2x3YkdWUFppaGtZWFJoTENCelkyaGxiV0VwSUh0Y2JpQWdJQ0IyWVhJZ2JYVnNkR2x3YkdWUFppQTlJSE5qYUdWdFlTNXRkV3gwYVhCc1pVOW1JSHg4SUhOamFHVnRZUzVrYVhacGMybGliR1ZDZVR0Y2JpQWdJQ0JwWmlBb2JYVnNkR2x3YkdWUFppQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHUmhkR0VnUFQwOUlGd2liblZ0WW1WeVhDSXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxiV0ZwYm1SbGNpQTlJQ2hrWVhSaElDOGdiWFZzZEdsd2JHVlBaaWtnSlNBeE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY21WdFlXbHVaR1Z5SUQ0OUlFTk1UMU5GWDBWT1QxVkhTRjlNVDFjZ0ppWWdjbVZ0WVdsdVpHVnlJRHdnUTB4UFUwVmZSVTVQVlVkSVgwaEpSMGdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVUbFZOUWtWU1gwMVZURlJKVUV4RlgwOUdMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJR1JoZEdFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JYVnNkR2x3YkdWUFpqb2diWFZzZEdsd2JHVlBabHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dKeWNzSUNjbkxDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVk5hVzVOWVhnZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVMXBiazFoZUNoa1lYUmhMQ0J6WTJobGJXRXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1JoZEdFZ0lUMDlJRndpYm5WdFltVnlYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaHpZMmhsYldFdWJXbHVhVzExYlNBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGtZWFJoSUR3Z2MyTm9aVzFoTG0xcGJtbHRkVzBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVUbFZOUWtWU1gwMUpUa2xOVlUwc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1pHRjBZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YVc1cGJYVnRPaUJ6WTJobGJXRXViV2x1YVcxMWJWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5Y3NJQ2N2YldsdWFXMTFiU2NzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hOamFHVnRZUzVsZUdOc2RYTnBkbVZOYVc1cGJYVnRJQ1ltSUdSaGRHRWdQVDA5SUhOamFHVnRZUzV0YVc1cGJYVnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrNVZUVUpGVWw5TlNVNUpUVlZOWDBWWVEweFZVMGxXUlN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCa1lYUmhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYm1sdGRXMDZJSE5qYUdWdFlTNXRhVzVwYlhWdFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENBbkp5d2dKeTlsZUdOc2RYTnBkbVZOYVc1cGJYVnRKeXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2MyTm9aVzFoTG0xaGVHbHRkVzBnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZU0ErSUhOamFHVnRZUzV0WVhocGJYVnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrNVZUVUpGVWw5TlFWaEpUVlZOTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdSaGRHRXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Y0YVcxMWJUb2djMk5vWlcxaExtMWhlR2x0ZFcxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUNjbkxDQW5MMjFoZUdsdGRXMG5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6WTJobGJXRXVaWGhqYkhWemFYWmxUV0Y0YVcxMWJTQW1KaUJrWVhSaElEMDlQU0J6WTJobGJXRXViV0Y0YVcxMWJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1T1ZVMUNSVkpmVFVGWVNVMVZUVjlGV0VOTVZWTkpWa1VzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWkdGMFlTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWGhwYlhWdE9pQnpZMmhsYldFdWJXRjRhVzExYlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnSnljc0lDY3ZaWGhqYkhWemFYWmxUV0Y0YVcxMWJTY3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVTVoVGlBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFRtRk9LR1JoZEdFc0lITmphR1Z0WVNrZ2UxeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pHRjBZU0FoUFQwZ1hDSnVkVzFpWlhKY0lpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dselRtRk9LR1JoZEdFcElEMDlQU0IwY25WbElIeDhJR1JoZEdFZ1BUMDlJRWx1Wm1sdWFYUjVJSHg4SUdSaGRHRWdQVDA5SUMxSmJtWnBibWwwZVNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrNVZUVUpGVWw5T1QxUmZRVjlPVlUxQ1JWSXNJSHQyWVd4MVpUb2daR0YwWVgwc0lDY25MQ0FuTDNSNWNHVW5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxVM1J5YVc1bklEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVlRkSEpwYm1jb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUyWVd4cFpHRjBaVk4wY21sdVoweGxibWQwYUNoa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDbGNiaUFnSUNBZ0lDQWdmSHdnZEdocGN5NTJZV3hwWkdGMFpWTjBjbWx1WjFCaGRIUmxjbTRvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJRzUxYkd3N1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlZOMGNtbHVaMHhsYm1kMGFDQTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxVM1J5YVc1blRHVnVaM1JvS0dSaGRHRXNJSE5qYUdWdFlTa2dlMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdaR0YwWVNBaFBUMGdYQ0p6ZEhKcGJtZGNJaWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1dGFXNU1aVzVuZEdnZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVM1c1pXNW5kR2dnUENCelkyaGxiV0V1YldsdVRHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMbE5VVWtsT1IxOU1SVTVIVkVoZlUwaFBVbFFzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pXNW5kR2c2SUdSaGRHRXViR1Z1WjNSb0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXBibWx0ZFcwNklITmphR1Z0WVM1dGFXNU1aVzVuZEdoY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUNjbkxDQW5MMjFwYmt4bGJtZDBhQ2NzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1dFlYaE1aVzVuZEdnZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9aR0YwWVM1c1pXNW5kR2dnUGlCelkyaGxiV0V1YldGNFRHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amNtVmhkR1ZGY25KdmNpaEZjbkp2Y2tOdlpHVnpMbE5VVWtsT1IxOU1SVTVIVkVoZlRFOU9SeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGJtZDBhRG9nWkdGMFlTNXNaVzVuZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRhVzExYlRvZ2MyTm9aVzFoTG0xaGVFeGxibWQwYUZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3dnSnljc0lDY3ZiV0Y0VEdWdVozUm9KeXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JuMDdYRzVjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVTNSeWFXNW5VR0YwZEdWeWJpQTlJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxVM1J5YVc1blVHRjBkR1Z5Ymloa1lYUmhMQ0J6WTJobGJXRXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1JoZEdFZ0lUMDlJRndpYzNSeWFXNW5YQ0lnZkh3Z0tIUjVjR1Z2WmlCelkyaGxiV0V1Y0dGMGRHVnliaUFoUFQwZ1hDSnpkSEpwYm1kY0lpQW1KaUFoS0hOamFHVnRZUzV3WVhSMFpYSnVJR2x1YzNSaGJtTmxiMllnVW1WblJYaHdLU2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzRnSUNBZ2ZWeHVJQ0FnSUhaaGNpQnlaV2RsZUhBN1hHNGdJQ0FnYVdZZ0tITmphR1Z0WVM1d1lYUjBaWEp1SUdsdWMzUmhibU5sYjJZZ1VtVm5SWGh3S1NCN1hHNGdJQ0FnSUNBZ0lISmxaMlY0Y0NBOUlITmphR1Z0WVM1d1lYUjBaWEp1TzF4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0p2Wkhrc0lHWnNZV2R6SUQwZ0p5YzdYRzRnSUNBZ0lDQWdJQzh2SUVOb1pXTnJJR1p2Y2lCeVpXZDFiR0Z5SUdWNGNISmxjM05wYjI0Z2JHbDBaWEpoYkhOY2JpQWdJQ0FnSUNBZ0x5OGdRSE5sWlNCb2RIUndPaTh2ZDNkM0xtVmpiV0V0YVc1MFpYSnVZWFJwYjI1aGJDNXZjbWN2WldOdFlTMHlOakl2TlM0eEx5TnpaV010Tnk0NExqVmNiaUFnSUNBZ0lDQWdkbUZ5SUd4cGRHVnlZV3dnUFNCelkyaGxiV0V1Y0dGMGRHVnliaTV0WVhSamFDZ3ZYbHhjTHlndUt5bGNYQzhvVzJsdFoxMHFLU1F2S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR3hwZEdWeVlXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnZaSGtnUFNCc2FYUmxjbUZzV3pGZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm14aFozTWdQU0JzYVhSbGNtRnNXekpkTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZbTlrZVNBOUlITmphR1Z0WVM1d1lYUjBaWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxaMlY0Y0NBOUlHNWxkeUJTWldkRmVIQW9ZbTlrZVN3Z1pteGhaM01wTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvSVhKbFoyVjRjQzUwWlhOMEtHUmhkR0VwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVUxUlNTVTVIWDFCQlZGUkZVazRzSUh0d1lYUjBaWEp1T2lCelkyaGxiV0V1Y0dGMGRHVnlibjBzSUNjbkxDQW5MM0JoZEhSbGNtNG5MQ0J1ZFd4c0xDQmtZWFJoTENCelkyaGxiV0VwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRWEp5WVhrZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVRnljbUY1S0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTQjdYRzRnSUNBZ2FXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtHUmhkR0VwS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTJZV3hwWkdGMFpVRnljbUY1VEdWdVozUm9LR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1Z4dUlDQWdJQ0FnSUNCOGZDQjBhR2x6TG5aaGJHbGtZWFJsUVhKeVlYbFZibWx4ZFdWSmRHVnRjeWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlVGeWNtRjVTWFJsYlhNb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUc1MWJHdzdYRzU5TzF4dVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVRnljbUY1VEdWdVozUm9JRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZCY25KaGVVeGxibWQwYUNoa1lYUmhMQ0J6WTJobGJXRXBJSHRjYmlBZ0lDQjJZWElnWlhKeWIzSTdYRzRnSUNBZ2FXWWdLSE5qYUdWdFlTNXRhVzVKZEdWdGN5QWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaExteGxibWQwYUNBOElITmphR1Z0WVM1dGFXNUpkR1Z0Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSWdQU0IwYUdsekxtTnlaV0YwWlVWeWNtOXlLRVZ5Y205eVEyOWtaWE11UVZKU1FWbGZURVZPUjFSSVgxTklUMUpVTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVnVaM1JvT2lCa1lYUmhMbXhsYm1kMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRhVzVwYlhWdE9pQnpZMmhsYldFdWJXbHVTWFJsYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSUNjbkxDQW5MMjFwYmtsMFpXMXpKeXdnYm5Wc2JDd2daR0YwWVN3Z2MyTm9aVzFoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWhoYm1Sc1pVVnljbTl5S0dWeWNtOXlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2MyTm9aVzFoTG0xaGVFbDBaVzF6SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0V1YkdWdVozUm9JRDRnYzJOb1pXMWhMbTFoZUVsMFpXMXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y2lBOUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NUJVbEpCV1Y5TVJVNUhWRWhmVEU5T1J5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsYm1kMGFEb2daR0YwWVM1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGNGFXMTFiVG9nYzJOb1pXMWhMbTFoZUVsMFpXMXpYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxDQW5KeXdnSnk5dFlYaEpkR1Z0Y3ljc0lHNTFiR3dzSUdSaGRHRXNJSE5qYUdWdFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lXNWtiR1ZGY25KdmNpaGxjbkp2Y2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYRzU5TzF4dVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVRnljbUY1Vlc1cGNYVmxTWFJsYlhNZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVRnljbUY1Vlc1cGNYVmxTWFJsYlhNb1pHRjBZU3dnYzJOb1pXMWhLU0I3WEc0Z0lDQWdhV1lnS0hOamFHVnRZUzUxYm1seGRXVkpkR1Z0Y3lrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR1JoZEdFdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHb2dQU0JwSUNzZ01Uc2dhaUE4SUdSaGRHRXViR1Z1WjNSb095QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jbVZqZFhKemFYWmxRMjl0Y0dGeVpTaGtZWFJoVzJsZExDQmtZWFJoVzJwZEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaWEp5YjNJZ1BTQjBhR2x6TG1OeVpXRjBaVVZ5Y205eUtFVnljbTl5UTI5a1pYTXVRVkpTUVZsZlZVNUpVVlZGTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUmphREU2SUdrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUmphREk2SUdwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dnSnljc0lDY3ZkVzVwY1hWbFNYUmxiWE1uTENCdWRXeHNMQ0JrWVhSaExDQnpZMmhsYldFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lobGNuSnZjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRWEp5WVhsSmRHVnRjeUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsUVhKeVlYbEpkR1Z0Y3loa1lYUmhMQ0J6WTJobGJXRXNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDa2dlMXh1SUNBZ0lHbG1JQ2h6WTJobGJXRXVhWFJsYlhNZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlHVnljbTl5TENCcE8xeHVJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0hOamFHVnRZUzVwZEdWdGN5a3BJSHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJR1JoZEdFdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUR3Z2MyTm9aVzFoTG1sMFpXMXpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaUE5SUhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWkdGMFlWdHBYU3dnYzJOb1pXMWhMbWwwWlcxelcybGRMQ0JiYVYwc0lGdGNJbWwwWlcxelhDSXNJR2xkTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dnS3lCY0lpOWNJaUFySUdrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJsY25KdmNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tITmphR1Z0WVM1aFpHUnBkR2x2Ym1Gc1NYUmxiWE1nSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYzJOb1pXMWhMbUZrWkdsMGFXOXVZV3hKZEdWdGN5QTlQVDBnWENKaWIyOXNaV0Z1WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnpZMmhsYldFdVlXUmthWFJwYjI1aGJFbDBaVzF6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjaUE5SUNoMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVFWSlNRVmxmUVVSRVNWUkpUMDVCVEY5SlZFVk5VeXdnZTMwc0lDY3ZKeUFySUdrc0lDY3ZZV1JrYVhScGIyNWhiRWwwWlcxekp5d2diblZzYkN3Z1pHRjBZU3dnYzJOb1pXMWhLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lobGNuSnZjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR1Z5Y205eUlEMGdkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGtZWFJoVzJsZExDQnpZMmhsYldFdVlXUmthWFJwYjI1aGJFbDBaVzF6TENCYmFWMHNJRnRjSW1Ga1pHbDBhVzl1WVd4SmRHVnRjMXdpWFN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvSUNzZ1hDSXZYQ0lnS3lCcEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUdSaGRHRXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaUE5SUhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWkdGMFlWdHBYU3dnYzJOb1pXMWhMbWwwWlcxekxDQmJhVjBzSUZ0Y0ltbDBaVzF6WENKZExDQmtZWFJoVUc5cGJuUmxjbEJoZEdnZ0t5QmNJaTljSWlBcklHa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dWZUdGNibHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZQWW1wbFkzUWdQU0JtZFc1amRHbHZiaUIyWVd4cFpHRjBaVTlpYW1WamRDaGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnWkdGMFlTQWhQVDBnWENKdlltcGxZM1JjSWlCOGZDQmtZWFJoSUQwOVBTQnVkV3hzSUh4OElFRnljbUY1TG1selFYSnlZWGtvWkdGMFlTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5aaGJHbGtZWFJsVDJKcVpXTjBUV2x1VFdGNFVISnZjR1Z5ZEdsbGN5aGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2xjYmlBZ0lDQWdJQ0FnZkh3Z2RHaHBjeTUyWVd4cFpHRjBaVTlpYW1WamRGSmxjWFZwY21Wa1VISnZjR1Z5ZEdsbGN5aGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2xjYmlBZ0lDQWdJQ0FnZkh3Z2RHaHBjeTUyWVd4cFpHRjBaVTlpYW1WamRGQnliM0JsY25ScFpYTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwWEc0Z0lDQWdJQ0FnSUh4OElIUm9hWE11ZG1Gc2FXUmhkR1ZQWW1wbFkzUkVaWEJsYm1SbGJtTnBaWE1vWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncFhHNGdJQ0FnSUNBZ0lIeDhJRzUxYkd3N1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlU5aWFtVmpkRTFwYmsxaGVGQnliM0JsY25ScFpYTWdQU0JtZFc1amRHbHZiaUIyWVd4cFpHRjBaVTlpYW1WamRFMXBiazFoZUZCeWIzQmxjblJwWlhNb1pHRjBZU3dnYzJOb1pXMWhLU0I3WEc0Z0lDQWdkbUZ5SUd0bGVYTWdQU0JQWW1wbFkzUXVhMlY1Y3loa1lYUmhLVHRjYmlBZ0lDQjJZWElnWlhKeWIzSTdYRzRnSUNBZ2FXWWdLSE5qYUdWdFlTNXRhVzVRY205d1pYSjBhV1Z6SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHdGxlWE11YkdWdVozUm9JRHdnYzJOb1pXMWhMbTFwYmxCeWIzQmxjblJwWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWeWNtOXlJRDBnZEdocGN5NWpjbVZoZEdWRmNuSnZjaWhGY25KdmNrTnZaR1Z6TGs5Q1NrVkRWRjlRVWs5UVJWSlVTVVZUWDAxSlRrbE5WVTBzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowZVVOdmRXNTBPaUJyWlhsekxteGxibWQwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGFXNXBiWFZ0T2lCelkyaGxiV0V1YldsdVVISnZjR1Z5ZEdsbGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z0p5Y3NJQ2N2YldsdVVISnZjR1Z5ZEdsbGN5Y3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWhsY25KdmNpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hOamFHVnRZUzV0WVhoUWNtOXdaWEowYVdWeklDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR3RsZVhNdWJHVnVaM1JvSUQ0Z2MyTm9aVzFoTG0xaGVGQnliM0JsY25ScFpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnljbTl5SUQwZ2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrOUNTa1ZEVkY5UVVrOVFSVkpVU1VWVFgwMUJXRWxOVlUwc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGVVTnZkVzUwT2lCclpYbHpMbXhsYm1kMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWGhwYlhWdE9pQnpZMmhsYldFdWJXRjRVSEp2Y0dWeWRHbGxjMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dKeWNzSUNjdmJXRjRVSEp2Y0dWeWRHbGxjeWNzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWVc1a2JHVkZjbkp2Y2lobGNuSnZjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzUxYkd3N1hHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlU5aWFtVmpkRkpsY1hWcGNtVmtVSEp2Y0dWeWRHbGxjeUE5SUdaMWJtTjBhVzl1SUhaaGJHbGtZWFJsVDJKcVpXTjBVbVZ4ZFdseVpXUlFjbTl3WlhKMGFXVnpLR1JoZEdFc0lITmphR1Z0WVNrZ2UxeHVJQ0FnSUdsbUlDaHpZMmhsYldFdWNtVnhkV2x5WldRZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElITmphR1Z0WVM1eVpYRjFhWEpsWkM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR3RsZVNBOUlITmphR1Z0WVM1eVpYRjFhWEpsWkZ0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtZWFJoVzJ0bGVWMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJsY25KdmNpQTlJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVQUWtwRlExUmZVa1ZSVlVsU1JVUXNJSHRyWlhrNklHdGxlWDBzSUNjbkxDQW5MM0psY1hWcGNtVmtMeWNnS3lCcExDQnVkV3hzTENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbWhoYm1Sc1pVVnljbTl5S0dWeWNtOXlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYSnliM0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1ZlR0Y2JseHVWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDNXdjbTkwYjNSNWNHVXVkbUZzYVdSaGRHVlBZbXBsWTNSUWNtOXdaWEowYVdWeklEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVlBZbXBsWTNSUWNtOXdaWEowYVdWektHUmhkR0VzSUhOamFHVnRZU3dnWkdGMFlWQnZhVzUwWlhKUVlYUm9LU0I3WEc0Z0lDQWdkbUZ5SUdWeWNtOXlPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHdGxlU0JwYmlCa1lYUmhLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnJaWGxRYjJsdWRHVnlVR0YwYUNBOUlHUmhkR0ZRYjJsdWRHVnlVR0YwYUNBcklGd2lMMXdpSUNzZ2EyVjVMbkpsY0d4aFkyVW9MMzR2Wnl3Z0ozNHdKeWt1Y21Wd2JHRmpaU2d2WEZ3dkwyY3NJQ2QrTVNjcE8xeHVJQ0FnSUNBZ0lDQjJZWElnWm05MWJtUk5ZWFJqYUNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCcFppQW9jMk5vWlcxaExuQnliM0JsY25ScFpYTWdJVDA5SUhWdVpHVm1hVzVsWkNBbUppQnpZMmhsYldFdWNISnZjR1Z5ZEdsbGMxdHJaWGxkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZkVzVrVFdGMFkyZ2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnljbTl5SUQwZ2RHaHBjeTUyWVd4cFpHRjBaVUZzYkNoa1lYUmhXMnRsZVYwc0lITmphR1Z0WVM1d2NtOXdaWEowYVdWelcydGxlVjBzSUZ0clpYbGRMQ0JiWENKd2NtOXdaWEowYVdWelhDSXNJR3RsZVYwc0lHdGxlVkJ2YVc1MFpYSlFZWFJvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGNuSnZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb2MyTm9aVzFoTG5CaGRIUmxjbTVRY205d1pYSjBhV1Z6SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlIQmhkSFJsY201TFpYa2dhVzRnYzJOb1pXMWhMbkJoZEhSbGNtNVFjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxaMlY0Y0NBOUlHNWxkeUJTWldkRmVIQW9jR0YwZEdWeWJrdGxlU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxaMlY0Y0M1MFpYTjBLR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05MWJtUk5ZWFJqYUNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVZ0clpYbGRMQ0J6WTJobGJXRXVjR0YwZEdWeWJsQnliM0JsY25ScFpYTmJjR0YwZEdWeWJrdGxlVjBzSUZ0clpYbGRMQ0JiWENKd1lYUjBaWEp1VUhKdmNHVnlkR2xsYzF3aUxDQndZWFIwWlhKdVMyVjVYU3dnYTJWNVVHOXBiblJsY2xCaGRHZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRm1iM1Z1WkUxaGRHTm9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJOb1pXMWhMbUZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6SUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpXMnRsZVZCdmFXNTBaWEpRWVhSb1hTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQjBhR2x6TG5WdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoelcydGxlVkJ2YVc1MFpYSlFZWFJvWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpZMmhsYldFdVlXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTWdQVDA5SUZ3aVltOXZiR1ZoYmx3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ2hjMk5vWlcxaExtRmtaR2wwYVc5dVlXeFFjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNpQTlJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVQUWtwRlExUmZRVVJFU1ZSSlQwNUJURjlRVWs5UVJWSlVTVVZUTENCN2EyVjVPaUJyWlhsOUxDQW5KeXdnSnk5aFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGN5Y3NJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2t1Y0hKbFptbDRWMmwwYUNoclpYa3NJRzUxYkd3cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9aWEp5YjNJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1Z5Y205eU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eUlEMGdkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGtZWFJoVzJ0bGVWMHNJSE5qYUdWdFlTNWhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjeXdnVzJ0bGVWMHNJRnRjSW1Ga1pHbDBhVzl1WVd4UWNtOXdaWEowYVdWelhDSmRMQ0JyWlhsUWIybHVkR1Z5VUdGMGFDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxjbkp2Y2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpJQ1ltSUNGMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRyWlhsUWIybHVkR1Z5VUdGMGFGMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuVnVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpXMnRsZVZCdmFXNTBaWEpRWVhSb1hTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRyWlhsUWIybHVkR1Z5VUdGMGFGMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITmJhMlY1VUc5cGJuUmxjbEJoZEdoZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVmVHRjYmx4dVZtRnNhV1JoZEc5eVEyOXVkR1Y0ZEM1d2NtOTBiM1I1Y0dVdWRtRnNhV1JoZEdWUFltcGxZM1JFWlhCbGJtUmxibU5wWlhNZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVOWlhbVZqZEVSbGNHVnVaR1Z1WTJsbGN5aGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2tnZTF4dUlDQWdJSFpoY2lCbGNuSnZjanRjYmlBZ0lDQnBaaUFvYzJOb1pXMWhMbVJsY0dWdVpHVnVZMmxsY3lBaFBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdSbGNFdGxlU0JwYmlCelkyaGxiV0V1WkdWd1pXNWtaVzVqYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aR0YwWVZ0a1pYQkxaWGxkSUNFOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pHVndJRDBnYzJOb1pXMWhMbVJsY0dWdVpHVnVZMmxsYzF0a1pYQkxaWGxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pHVndJRDA5UFNCY0luTjBjbWx1WjF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtZWFJoVzJSbGNGMGdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYSnliM0lnUFNCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVQwSktSVU5VWDBSRlVFVk9SRVZPUTFsZlMwVlpMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2EyVjVPaUJrWlhCTFpYa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsemMybHVaem9nWkdWd1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxDQW5KeXdnSnljc0lHNTFiR3dzSUdSaGRHRXNJSE5qYUdWdFlTa3VjSEpsWm1sNFYybDBhQ2h1ZFd4c0xDQmtaWEJMWlhrcExuQnlaV1pwZUZkcGRHZ29iblZzYkN3Z1hDSmtaWEJsYm1SbGJtTnBaWE5jSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1b1lXNWtiR1ZGY25KdmNpaGxjbkp2Y2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaWEp5YjNJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29aR1Z3S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdSbGNDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjWFZwY21Wa1MyVjVJRDBnWkdWd1cybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dSaGRHRmJjbVZ4ZFdseVpXUkxaWGxkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjaUE5SUhSb2FYTXVZM0psWVhSbFJYSnliM0lvUlhKeWIzSkRiMlJsY3k1UFFrcEZRMVJmUkVWUVJVNUVSVTVEV1Y5TFJWa3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhMlY1T2lCa1pYQkxaWGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFwYzNOcGJtYzZJSEpsY1hWcGNtVmtTMlY1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dKeWNzSUNjdkp5QXJJR2tzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrdWNISmxabWw0VjJsMGFDaHVkV3hzTENCa1pYQkxaWGtwTG5CeVpXWnBlRmRwZEdnb2JuVnNiQ3dnWENKa1pYQmxibVJsYm1OcFpYTmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFHRnVaR3hsUlhKeWIzSW9aWEp5YjNJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGNuSnZjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aWEp5YjNJZ1BTQjBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHUmhkR0VzSUdSbGNDd2dXMTBzSUZ0Y0ltUmxjR1Z1WkdWdVkybGxjMXdpTENCa1pYQkxaWGxkTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiR3c3WEc1OU8xeHVYRzVXWVd4cFpHRjBiM0pEYjI1MFpYaDBMbkJ5YjNSdmRIbHdaUzUyWVd4cFpHRjBaVU52YldKcGJtRjBhVzl1Y3lBOUlHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFEyOXRZbWx1WVhScGIyNXpLR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWRtRnNhV1JoZEdWQmJHeFBaaWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNsY2JpQWdJQ0FnSUNBZ2ZId2dkR2hwY3k1MllXeHBaR0YwWlVGdWVVOW1LR1JoZEdFc0lITmphR1Z0WVN3Z1pHRjBZVkJ2YVc1MFpYSlFZWFJvS1Z4dUlDQWdJQ0FnSUNCOGZDQjBhR2x6TG5aaGJHbGtZWFJsVDI1bFQyWW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwWEc0Z0lDQWdJQ0FnSUh4OElIUm9hWE11ZG1Gc2FXUmhkR1ZPYjNRb1pHRjBZU3dnYzJOb1pXMWhMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BYRzRnSUNBZ0lDQWdJSHg4SUc1MWJHdzdYRzU5TzF4dVhHNVdZV3hwWkdGMGIzSkRiMjUwWlhoMExuQnliM1J2ZEhsd1pTNTJZV3hwWkdGMFpVRnNiRTltSUQwZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWQmJHeFBaaWhrWVhSaExDQnpZMmhsYldFc0lHUmhkR0ZRYjJsdWRHVnlVR0YwYUNrZ2UxeHVJQ0FnSUdsbUlDaHpZMmhsYldFdVlXeHNUMllnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdkbUZ5SUdWeWNtOXlPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djMk5vWlcxaExtRnNiRTltTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCemRXSlRZMmhsYldFZ1BTQnpZMmhsYldFdVlXeHNUMlpiYVYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNpQTlJSFJvYVhNdWRtRnNhV1JoZEdWQmJHd29aR0YwWVN3Z2MzVmlVMk5vWlcxaExDQmJYU3dnVzF3aVlXeHNUMlpjSWl3Z2FWMHNJR1JoZEdGUWIybHVkR1Z5VUdGMGFDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGNuSnZjanRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYm4wN1hHNWNibFpoYkdsa1lYUnZja052Ym5SbGVIUXVjSEp2ZEc5MGVYQmxMblpoYkdsa1lYUmxRVzU1VDJZZ1BTQm1kVzVqZEdsdmJpQjJZV3hwWkdGMFpVRnVlVTltS0dSaGRHRXNJSE5qYUdWdFlTd2daR0YwWVZCdmFXNTBaWEpRWVhSb0tTQjdYRzRnSUNBZ2FXWWdLSE5qYUdWdFlTNWhibmxQWmlBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JpQWdJQ0IyWVhJZ1pYSnliM0p6SUQwZ1cxMDdYRzRnSUNBZ2RtRnlJSE4wWVhKMFJYSnliM0pEYjNWdWRDQTlJSFJvYVhNdVpYSnliM0p6TG14bGJtZDBhRHRjYmlBZ0lDQjJZWElnYjJ4a1ZXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITXNJRzlzWkV0dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3p0Y2JpQWdJQ0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJRzlzWkZWdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoeklEMGdkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNiaUFnSUNBZ0lDQWdiMnhrUzI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE03WEc0Z0lDQWdmVnh1SUNBZ0lIWmhjaUJsY25KdmNrRjBSVzVrSUQwZ2RISjFaVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSE5qYUdWdFlTNWhibmxQWmk1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2UzMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jeUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCemRXSlRZMmhsYldFZ1BTQnpZMmhsYldFdVlXNTVUMlpiYVYwN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdWeWNtOXlRMjkxYm5RZ1BTQjBhR2x6TG1WeWNtOXljeTVzWlc1bmRHZzdYRzRnSUNBZ0lDQWdJSFpoY2lCbGNuSnZjaUE5SUhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWkdGMFlTd2djM1ZpVTJOb1pXMWhMQ0JiWFN3Z1cxd2lZVzU1VDJaY0lpd2dhVjBzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eUlEMDlQU0J1ZFd4c0lDWW1JR1Z5Y205eVEyOTFiblFnUFQwOUlIUm9hWE11WlhKeWIzSnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNuTWdQU0IwYUdsekxtVnljbTl5Y3k1emJHbGpaU2d3TENCemRHRnlkRVZ5Y205eVEyOTFiblFwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhMjV2ZDI1TFpYa2dhVzRnZEdocGN5NXJibTkzYmxCeWIzQmxjblI1VUdGMGFITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyeGtTMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpXMnR1YjNkdVMyVjVYU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0J2YkdSVmJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2MxdHJibTkzYmt0bGVWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSFZ1YTI1dmQyNUxaWGtnYVc0Z2RHaHBjeTUxYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXOXNaRXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXQxYm10dWIzZHVTMlY1WFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyeGtWVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE5iZFc1cmJtOTNia3RsZVYwZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkbElHNWxaV1FnZEc4Z1kyOXVkR2x1ZFdVZ2JHOXZjR2x1WnlCemJ5QjNaU0JqWVhSamFDQmhiR3dnZEdobElIQnliM0JsY25SNUlHUmxabWx1YVhScGIyNXpMQ0JpZFhRZ2QyVWdaRzl1SjNRZ2QyRnVkQ0IwYnlCeVpYUjFjbTRnWVc0Z1pYSnliM0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsY25KdmNrRjBSVzVrSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhKeWIzSnpMbkIxYzJnb1pYSnliM0l1Y0hKbFptbDRWMmwwYUNodWRXeHNMQ0JjSWx3aUlDc2dhU2t1Y0hKbFptbDRWMmwwYUNodWRXeHNMQ0JjSW1GdWVVOW1YQ0lwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0J2YkdSVmJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNZ1BTQnZiR1JMYm05M2JsQnliM0JsY25SNVVHRjBhSE03WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2hsY25KdmNrRjBSVzVrS1NCN1hHNGdJQ0FnSUNBZ0lHVnljbTl5Y3lBOUlHVnljbTl5Y3k1amIyNWpZWFFvZEdocGN5NWxjbkp2Y25NdWMyeHBZMlVvYzNSaGNuUkZjbkp2Y2tOdmRXNTBLU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaWEp5YjNKeklEMGdkR2hwY3k1bGNuSnZjbk11YzJ4cFkyVW9NQ3dnYzNSaGNuUkZjbkp2Y2tOdmRXNTBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzSmxZWFJsUlhKeWIzSW9SWEp5YjNKRGIyUmxjeTVCVGxsZlQwWmZUVWxUVTBsT1J5d2dlMzBzSUZ3aVhDSXNJRndpTDJGdWVVOW1YQ0lzSUdWeWNtOXljeXdnWkdGMFlTd2djMk5vWlcxaEtUdGNiaUFnSUNCOVhHNTlPMXh1WEc1V1lXeHBaR0YwYjNKRGIyNTBaWGgwTG5CeWIzUnZkSGx3WlM1MllXeHBaR0YwWlU5dVpVOW1JRDBnWm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZQYm1WUFppaGtZWFJoTENCelkyaGxiV0VzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2tnZTF4dUlDQWdJR2xtSUNoelkyaGxiV0V1YjI1bFQyWWdQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJSFpoYkdsa1NXNWtaWGdnUFNCdWRXeHNPMXh1SUNBZ0lIWmhjaUJsY25KdmNuTWdQU0JiWFR0Y2JpQWdJQ0IyWVhJZ2MzUmhjblJGY25KdmNrTnZkVzUwSUQwZ2RHaHBjeTVsY25KdmNuTXViR1Z1WjNSb08xeHVJQ0FnSUhaaGNpQnZiR1JWYm10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3l3Z2IyeGtTMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpPMXh1SUNBZ0lHbG1JQ2gwYUdsekxuUnlZV05yVlc1cmJtOTNibEJ5YjNCbGNuUnBaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2IyeGtWVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1nUFNCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6TzF4dUlDQWdJQ0FnSUNCdmJHUkxibTkzYmxCeWIzQmxjblI1VUdGMGFITWdQU0IwYUdsekxtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNiaUFnSUNCOVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCelkyaGxiV0V1YjI1bFQyWXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRISmhZMnRWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5QTlJSHQ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNZ1BTQjdmVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMllYSWdjM1ZpVTJOb1pXMWhJRDBnYzJOb1pXMWhMbTl1WlU5bVcybGRPMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQmxjbkp2Y2tOdmRXNTBJRDBnZEdocGN5NWxjbkp2Y25NdWJHVnVaM1JvTzF4dUlDQWdJQ0FnSUNCMllYSWdaWEp5YjNJZ1BTQjBhR2x6TG5aaGJHbGtZWFJsUVd4c0tHUmhkR0VzSUhOMVlsTmphR1Z0WVN3Z1cxMHNJRnRjSW05dVpVOW1YQ0lzSUdsZExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaUE5UFQwZ2JuVnNiQ0FtSmlCbGNuSnZja052ZFc1MElEMDlQU0IwYUdsekxtVnljbTl5Y3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMllXeHBaRWx1WkdWNElEMDlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZzYVdSSmJtUmxlQ0E5SUdrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0p6SUQwZ2RHaHBjeTVsY25KdmNuTXVjMnhwWTJVb01Dd2djM1JoY25SRmNuSnZja052ZFc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVqY21WaGRHVkZjbkp2Y2loRmNuSnZja052WkdWekxrOU9SVjlQUmw5TlZVeFVTVkJNUlN3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm1SbGVERTZJSFpoYkdsa1NXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0TWpvZ2FWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNJRndpWENJc0lGd2lMMjl1WlU5bVhDSXNJRzUxYkd3c0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1MGNtRmphMVZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYTI1dmQyNUxaWGtnYVc0Z2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMnhrUzI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6VzJ0dWIzZHVTMlY1WFNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiR1YwWlNCdmJHUlZibXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jMXRyYm05M2JrdGxlVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUhWdWEyNXZkMjVMWlhrZ2FXNGdkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVzlzWkV0dWIzZHVVSEp2Y0dWeWRIbFFZWFJvYzF0MWJtdHViM2R1UzJWNVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMnhrVlc1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhOYmRXNXJibTkzYmt0bGVWMGdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxjbkp2Y25NdWNIVnphQ2hsY25KdmNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJvYVhNdWRISmhZMnRWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblZ1YTI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2IyeGtWVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhMjV2ZDI1UWNtOXdaWEowZVZCaGRHaHpJRDBnYjJ4a1MyNXZkMjVRY205d1pYSjBlVkJoZEdoek8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RtRnNhV1JKYm1SbGVDQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0JsY25KdmNuTWdQU0JsY25KdmNuTXVZMjl1WTJGMEtIUm9hWE11WlhKeWIzSnpMbk5zYVdObEtITjBZWEowUlhKeWIzSkRiM1Z1ZENrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXljeUE5SUhSb2FYTXVaWEp5YjNKekxuTnNhV05sS0RBc0lITjBZWEowUlhKeWIzSkRiM1Z1ZENrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU55WldGMFpVVnljbTl5S0VWeWNtOXlRMjlrWlhNdVQwNUZYMDlHWDAxSlUxTkpUa2NzSUh0OUxDQmNJbHdpTENCY0lpOXZibVZQWmx3aUxDQmxjbkp2Y25Nc0lHUmhkR0VzSUhOamFHVnRZU2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGNuSnZjbk1nUFNCMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNnd0xDQnpkR0Z5ZEVWeWNtOXlRMjkxYm5RcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdiblZzYkR0Y2JuMDdYRzVjYmxaaGJHbGtZWFJ2Y2tOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsTG5aaGJHbGtZWFJsVG05MElEMGdablZ1WTNScGIyNGdkbUZzYVdSaGRHVk9iM1FvWkdGMFlTd2djMk5vWlcxaExDQmtZWFJoVUc5cGJuUmxjbEJoZEdncElIdGNiaUFnSUNCcFppQW9jMk5vWlcxaExtNXZkQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQWdJSDFjYmlBZ0lDQjJZWElnYjJ4a1JYSnliM0pEYjNWdWRDQTlJSFJvYVhNdVpYSnliM0p6TG14bGJtZDBhRHRjYmlBZ0lDQjJZWElnYjJ4a1ZXNXJibTkzYmxCeWIzQmxjblI1VUdGMGFITXNJRzlzWkV0dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3p0Y2JpQWdJQ0JwWmlBb2RHaHBjeTUwY21GamExVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJRzlzWkZWdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoeklEMGdkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N6dGNiaUFnSUNBZ0lDQWdiMnhrUzI1dmQyNVFjbTl3WlhKMGVWQmhkR2h6SUQwZ2RHaHBjeTVyYm05M2JsQnliM0JsY25SNVVHRjBhSE03WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkVzVyYm05M2JsQnliM0JsY25SNVVHRjBhSE1nUFNCN2ZUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cmJtOTNibEJ5YjNCbGNuUjVVR0YwYUhNZ1BTQjdmVHRjYmlBZ0lDQjlYRzRnSUNBZ2RtRnlJR1Z5Y205eUlEMGdkR2hwY3k1MllXeHBaR0YwWlVGc2JDaGtZWFJoTENCelkyaGxiV0V1Ym05MExDQnVkV3hzTENCdWRXeHNMQ0JrWVhSaFVHOXBiblJsY2xCaGRHZ3BPMXh1SUNBZ0lIWmhjaUJ1YjNSRmNuSnZjbk1nUFNCMGFHbHpMbVZ5Y205eWN5NXpiR2xqWlNodmJHUkZjbkp2Y2tOdmRXNTBLVHRjYmlBZ0lDQjBhR2x6TG1WeWNtOXljeUE5SUhSb2FYTXVaWEp5YjNKekxuTnNhV05sS0RBc0lHOXNaRVZ5Y205eVEyOTFiblFwTzF4dUlDQWdJR2xtSUNoMGFHbHpMblJ5WVdOclZXNXJibTkzYmxCeWIzQmxjblJwWlhNcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWJtdHViM2R1VUhKdmNHVnlkSGxRWVhSb2N5QTlJRzlzWkZWdWEyNXZkMjVRY205d1pYSjBlVkJoZEdoek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG10dWIzZHVVSEp2Y0dWeWRIbFFZWFJvY3lBOUlHOXNaRXR1YjNkdVVISnZjR1Z5ZEhsUVlYUm9jenRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR1Z5Y205eUlEMDlQU0J1ZFd4c0lDWW1JRzV2ZEVWeWNtOXljeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WTNKbFlYUmxSWEp5YjNJb1JYSnliM0pEYjJSbGN5NU9UMVJmVUVGVFUwVkVMQ0I3ZlN3Z1hDSmNJaXdnWENJdmJtOTBYQ0lzSUc1MWJHd3NJR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dWZUdGNibHh1Vm1Gc2FXUmhkRzl5UTI5dWRHVjRkQzV3Y205MGIzUjVjR1V1ZG1Gc2FXUmhkR1ZJZVhCbGNtMWxaR2xoSUQwZ1puVnVZM1JwYjI0Z2RtRnNhV1JoZEdWRGIyMWlhVzVoZEdsdmJuTW9aR0YwWVN3Z2MyTm9aVzFoTENCa1lYUmhVRzlwYm5SbGNsQmhkR2dwSUh0Y2JpQWdJQ0JwWmlBb0lYTmphR1Z0WVM1c2FXNXJjeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNCOVhHNGdJQ0FnZG1GeUlHVnljbTl5TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnYzJOb1pXMWhMbXhwYm10ekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnNaRzhnUFNCelkyaGxiV0V1YkdsdWEzTmJhVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaHNaRzh1Y21Wc0lEMDlQU0JjSW1SbGMyTnlhV0psWkdKNVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIwWlcxd2JHRjBaU0E5SUc1bGR5QlZjbWxVWlcxd2JHRjBaU2hzWkc4dWFISmxaaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVd4c1VISmxjMlZ1ZENBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnFJRDBnTURzZ2FpQThJSFJsYlhCc1lYUmxMblpoY2s1aGJXVnpMbXhsYm1kMGFEc2dhaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0VvZEdWdGNHeGhkR1V1ZG1GeVRtRnRaWE5iYWwwZ2FXNGdaR0YwWVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4c1VISmxjMlZ1ZENBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVd4c1VISmxjMlZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6WTJobGJXRlZjbXdnUFNCMFpXMXdiR0YwWlM1bWFXeHNSbkp2YlU5aWFtVmpkQ2hrWVhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzNWaVUyTm9aVzFoSUQwZ2Uxd2lKSEpsWmx3aU9pQnpZMmhsYldGVmNteDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSnZjaUE5SUhSb2FYTXVkbUZzYVdSaGRHVkJiR3dvWkdGMFlTd2djM1ZpVTJOb1pXMWhMQ0JiWFN3Z1cxd2liR2x1YTNOY0lpd2dhVjBzSUdSaGRHRlFiMmx1ZEdWeVVHRjBhQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHVnljbTl5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4wN1hHNWNiaTh2SUhCaGNuTmxWVkpKS0NrZ1lXNWtJSEpsYzI5c2RtVlZjbXdvS1NCaGNtVWdabkp2YlNCb2RIUndjem92TDJkcGMzUXVaMmwwYUhWaUxtTnZiUzh4TURnNE9EVXdYRzR2THlBZ0lDMGdJSEpsYkdWaGMyVmtJR0Z6SUhCMVlteHBZeUJrYjIxaGFXNGdZbmtnWVhWMGFHOXlJQ2hjSWxsaFptWnNaVndpS1NBdElITmxaU0JqYjIxdFpXNTBjeUJ2YmlCbmFYTjBYRzVjYm1aMWJtTjBhVzl1SUhCaGNuTmxWVkpKS0hWeWJDa2dlMXh1SUNBZ0lIWmhjaUJ0SUQwZ1UzUnlhVzVuS0hWeWJDa3VjbVZ3YkdGalpTZ3ZYbHhjY3l0OFhGeHpLeVF2Wnl3Z0p5Y3BMbTFoZEdOb0tDOWVLRnRlT2x4Y0x6OGpYU3M2S1Q4b1hGd3ZYRnd2S0Q4NlcxNDZRRjBxS0Q4Nk9sdGVPa0JkS2lrL1FDay9LQ2hiWGpwY1hDOC9JMTBxS1NnL09qb29YRnhrS2lrcFB5a3BQeWhiWGo4alhTb3BLRnhjUDF0ZUkxMHFLVDhvSTF0Y1hITmNYRk5kS2lrL0x5azdYRzRnSUNBZ0x5OGdZWFYwYUc5eWFYUjVJRDBnSnk4dkp5QXJJSFZ6WlhJZ0t5QW5PaWNnS3lCd1lYTnpJQ2RBSnlBcklHaHZjM1J1WVcxbElDc2dKem9uSUhCdmNuUmNiaUFnSUNCeVpYUjFjbTRnS0cwZ1B5QjdYRzRnSUNBZ0lDQWdJR2h5WldZNklHMWJNRjBnZkh3Z0p5Y3NYRzRnSUNBZ0lDQWdJSEJ5YjNSdlkyOXNPaUJ0V3pGZElIeDhJQ2NuTEZ4dUlDQWdJQ0FnSUNCaGRYUm9iM0pwZEhrNklHMWJNbDBnZkh3Z0p5Y3NYRzRnSUNBZ0lDQWdJR2h2YzNRNklHMWJNMTBnZkh3Z0p5Y3NYRzRnSUNBZ0lDQWdJR2h2YzNSdVlXMWxPaUJ0V3pSZElIeDhJQ2NuTEZ4dUlDQWdJQ0FnSUNCd2IzSjBPaUJ0V3pWZElIeDhJQ2NuTEZ4dUlDQWdJQ0FnSUNCd1lYUm9ibUZ0WlRvZ2JWczJYU0I4ZkNBbkp5eGNiaUFnSUNBZ0lDQWdjMlZoY21Ob09pQnRXemRkSUh4OElDY25MRnh1SUNBZ0lDQWdJQ0JvWVhOb09pQnRXemhkSUh4OElDY25YRzRnSUNBZ2ZTQTZJRzUxYkd3cE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpYTnZiSFpsVlhKc0tHSmhjMlVzSUdoeVpXWXBJSHN2THlCU1JrTWdNems0Tmx4dVhHNGdJQ0FnWm5WdVkzUnBiMjRnY21WdGIzWmxSRzkwVTJWbmJXVnVkSE1vYVc1d2RYUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHOTFkSEIxZENBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JwYm5CMWRDNXlaWEJzWVdObEtDOWVLRnhjTGx4Y0xqOG9YRnd2ZkNRcEtTc3ZMQ0FuSnlsY2JpQWdJQ0FnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzljWEM4b1hGd3VLRnhjTDN3a0tTa3JMMmNzSUNjdkp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M5Y1hDOWNYQzVjWEM0a0x5d2dKeTh1TGk4bktWeHVJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNHeGhZMlVvTDF4Y0x6OWJYbHhjTDEwcUwyY3NJR1oxYm1OMGFXOXVJQ2h3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSEFnUFQwOUlDY3ZMaTRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRDNXdiM0FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZkWFJ3ZFhRdWNIVnphQ2h3S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc5MWRIQjFkQzVxYjJsdUtDY25LUzV5WlhCc1lXTmxLQzllWEZ3dkx5d2dhVzV3ZFhRdVkyaGhja0YwS0RBcElEMDlQU0FuTHljZ1B5QW5MeWNnT2lBbkp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FISmxaaUE5SUhCaGNuTmxWVkpKS0doeVpXWWdmSHdnSnljcE8xeHVJQ0FnSUdKaGMyVWdQU0J3WVhKelpWVlNTU2hpWVhObElIeDhJQ2NuS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUFoYUhKbFppQjhmQ0FoWW1GelpTQS9JRzUxYkd3Z09pQW9hSEpsWmk1d2NtOTBiMk52YkNCOGZDQmlZWE5sTG5CeWIzUnZZMjlzS1NBclhHNGdJQ0FnS0doeVpXWXVjSEp2ZEc5amIyd2dmSHdnYUhKbFppNWhkWFJvYjNKcGRIa2dQeUJvY21WbUxtRjFkR2h2Y21sMGVTQTZJR0poYzJVdVlYVjBhRzl5YVhSNUtTQXJYRzRnSUNBZ2NtVnRiM1psUkc5MFUyVm5iV1Z1ZEhNb2FISmxaaTV3Y205MGIyTnZiQ0I4ZkNCb2NtVm1MbUYxZEdodmNtbDBlU0I4ZkNCb2NtVm1MbkJoZEdodVlXMWxMbU5vWVhKQmRDZ3dLU0E5UFQwZ0p5OG5JRDhnYUhKbFppNXdZWFJvYm1GdFpTQTZJQ2hvY21WbUxuQmhkR2h1WVcxbElEOGdLQ2hpWVhObExtRjFkR2h2Y21sMGVTQW1KaUFoWW1GelpTNXdZWFJvYm1GdFpTQS9JQ2N2SnlBNklDY25LU0FySUdKaGMyVXVjR0YwYUc1aGJXVXVjMnhwWTJVb01Dd2dZbUZ6WlM1d1lYUm9ibUZ0WlM1c1lYTjBTVzVrWlhoUFppZ25MeWNwSUNzZ01Ta2dLeUJvY21WbUxuQmhkR2h1WVcxbEtTQTZJR0poYzJVdWNHRjBhRzVoYldVcEtTQXJYRzRnSUNBZ0tHaHlaV1l1Y0hKdmRHOWpiMndnZkh3Z2FISmxaaTVoZFhSb2IzSnBkSGtnZkh3Z2FISmxaaTV3WVhSb2JtRnRaU0EvSUdoeVpXWXVjMlZoY21Ob0lEb2dLR2h5WldZdWMyVmhjbU5vSUh4OElHSmhjMlV1YzJWaGNtTm9LU2tnSzF4dUlDQWdJR2h5WldZdWFHRnphRHRjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwUkc5amRXMWxiblJWY21rb2RYSnBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIVnlhUzV6Y0d4cGRDZ25JeWNwV3pCZE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCdWIzSnRVMk5vWlcxaEtITmphR1Z0WVN3Z1ltRnpaVlZ5YVNrZ2UxeHVJQ0FnSUdsbUlDaHpZMmhsYldFZ0ppWWdkSGx3Wlc5bUlITmphR1Z0WVNBOVBUMGdYQ0p2WW1wbFkzUmNJaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZbUZ6WlZWeWFTQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpWVhObFZYSnBJRDBnYzJOb1pXMWhMbWxrTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCelkyaGxiV0V1YVdRZ1BUMDlJRndpYzNSeWFXNW5YQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0poYzJWVmNta2dQU0J5WlhOdmJIWmxWWEpzS0dKaGMyVlZjbWtzSUhOamFHVnRZUzVwWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6WTJobGJXRXVhV1FnUFNCaVlYTmxWWEpwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtITmphR1Z0WVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MyTm9aVzFoTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTl5YlZOamFHVnRZU2h6WTJobGJXRmJhVjBzSUdKaGMyVlZjbWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpZMmhsYldGYkp5UnlaV1luWFNBOVBUMGdYQ0p6ZEhKcGJtZGNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOamFHVnRZVnNuSkhKbFppZGRJRDBnY21WemIyeDJaVlZ5YkNoaVlYTmxWWEpwTENCelkyaGxiV0ZiSnlSeVpXWW5YU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCclpYa2dhVzRnYzJOb1pXMWhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHdGxlU0FoUFQwZ1hDSmxiblZ0WENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05eWJWTmphR1Z0WVNoelkyaGxiV0ZiYTJWNVhTd2dZbUZ6WlZWeWFTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCa1pXWmhkV3gwUlhKeWIzSlNaWEJ2Y25SbGNpaHNZVzVuZFdGblpTa2dlMXh1SUNBZ0lHeGhibWQxWVdkbElEMGdiR0Z1WjNWaFoyVWdmSHdnSjJWdUp6dGNibHh1SUNBZ0lIWmhjaUJsY25KdmNrMWxjM05oWjJWeklEMGdiR0Z1WjNWaFoyVnpXMnhoYm1kMVlXZGxYVHRjYmx4dUlDQWdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9aWEp5YjNJcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUcxbGMzTmhaMlZVWlcxd2JHRjBaU0E5SUdWeWNtOXlUV1Z6YzJGblpYTmJaWEp5YjNJdVkyOWtaVjBnZkh3Z1JYSnliM0pOWlhOellXZGxjMFJsWm1GMWJIUmJaWEp5YjNJdVkyOWtaVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2JXVnpjMkZuWlZSbGJYQnNZWFJsSUNFOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aVZXNXJibTkzYmlCbGNuSnZjaUJqYjJSbElGd2lJQ3NnWlhKeWIzSXVZMjlrWlNBcklGd2lPaUJjSWlBcklFcFRUMDR1YzNSeWFXNW5hV1o1S0dWeWNtOXlMbTFsYzNOaFoyVlFZWEpoYlhNcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpoY2lCdFpYTnpZV2RsVUdGeVlXMXpJRDBnWlhKeWIzSXVjR0Z5WVcxek8xeHVJQ0FnSUNBZ0lDQXZMeUJCWkdGd2RHVmtJR1p5YjIwZ1EzSnZZMnRtYjNKa0ozTWdjM1Z3Y0d4aGJuUW9LVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV1Z6YzJGblpWUmxiWEJzWVhSbExuSmxjR3hoWTJVb0wxeGNleWhiWG50OVhTb3BYRng5TDJjc0lHWjFibU4wYVc5dUlDaDNhRzlzWlN3Z2RtRnlUbUZ0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlITjFZbFpoYkhWbElEMGdiV1Z6YzJGblpWQmhjbUZ0YzF0MllYSk9ZVzFsWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ2MzVmlWbUZzZFdVZ1BUMDlJQ2R6ZEhKcGJtY25JSHg4SUhSNWNHVnZaaUJ6ZFdKV1lXeDFaU0E5UFQwZ0oyNTFiV0psY2ljZ1B5QnpkV0pXWVd4MVpTQTZJSGRvYjJ4bE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlPMXh1ZlZ4dVhHNTJZWElnUlhKeWIzSkRiMlJsY3lBOUlIdGNiaUFnSUNCSlRsWkJURWxFWDFSWlVFVTZJREFzWEc0Z0lDQWdSVTVWVFY5TlNWTk5RVlJEU0RvZ01TeGNiaUFnSUNCQlRsbGZUMFpmVFVsVFUwbE9Sem9nTVRBc1hHNGdJQ0FnVDA1RlgwOUdYMDFKVTFOSlRrYzZJREV4TEZ4dUlDQWdJRTlPUlY5UFJsOU5WVXhVU1ZCTVJUb2dNVElzWEc0Z0lDQWdUazlVWDFCQlUxTkZSRG9nTVRNc1hHNGdJQ0FnTHk4Z1RuVnRaWEpwWXlCbGNuSnZjbk5jYmlBZ0lDQk9WVTFDUlZKZlRWVk1WRWxRVEVWZlQwWTZJREV3TUN4Y2JpQWdJQ0JPVlUxQ1JWSmZUVWxPU1UxVlRUb2dNVEF4TEZ4dUlDQWdJRTVWVFVKRlVsOU5TVTVKVFZWTlgwVllRMHhWVTBsV1JUb2dNVEF5TEZ4dUlDQWdJRTVWVFVKRlVsOU5RVmhKVFZWTk9pQXhNRE1zWEc0Z0lDQWdUbFZOUWtWU1gwMUJXRWxOVlUxZlJWaERURlZUU1ZaRk9pQXhNRFFzWEc0Z0lDQWdUbFZOUWtWU1gwNVBWRjlCWDA1VlRVSkZVam9nTVRBMUxGeHVJQ0FnSUM4dklGTjBjbWx1WnlCbGNuSnZjbk5jYmlBZ0lDQlRWRkpKVGtkZlRFVk9SMVJJWDFOSVQxSlVPaUF5TURBc1hHNGdJQ0FnVTFSU1NVNUhYMHhGVGtkVVNGOU1UMDVIT2lBeU1ERXNYRzRnSUNBZ1UxUlNTVTVIWDFCQlZGUkZVazQ2SURJd01peGNiaUFnSUNBdkx5QlBZbXBsWTNRZ1pYSnliM0p6WEc0Z0lDQWdUMEpLUlVOVVgxQlNUMUJGVWxSSlJWTmZUVWxPU1UxVlRUb2dNekF3TEZ4dUlDQWdJRTlDU2tWRFZGOVFVazlRUlZKVVNVVlRYMDFCV0VsTlZVMDZJRE13TVN4Y2JpQWdJQ0JQUWtwRlExUmZVa1ZSVlVsU1JVUTZJRE13TWl4Y2JpQWdJQ0JQUWtwRlExUmZRVVJFU1ZSSlQwNUJURjlRVWs5UVJWSlVTVVZUT2lBek1ETXNYRzRnSUNBZ1QwSktSVU5VWDBSRlVFVk9SRVZPUTFsZlMwVlpPaUF6TURRc1hHNGdJQ0FnTHk4Z1FYSnlZWGtnWlhKeWIzSnpYRzRnSUNBZ1FWSlNRVmxmVEVWT1IxUklYMU5JVDFKVU9pQTBNREFzWEc0Z0lDQWdRVkpTUVZsZlRFVk9SMVJJWDB4UFRrYzZJRFF3TVN4Y2JpQWdJQ0JCVWxKQldWOVZUa2xSVlVVNklEUXdNaXhjYmlBZ0lDQkJVbEpCV1Y5QlJFUkpWRWxQVGtGTVgwbFVSVTFUT2lBME1ETXNYRzRnSUNBZ0x5OGdRM1Z6ZEc5dEwzVnpaWEl0WkdWbWFXNWxaQ0JsY25KdmNuTmNiaUFnSUNCR1QxSk5RVlJmUTFWVFZFOU5PaUExTURBc1hHNGdJQ0FnUzBWWlYwOVNSRjlEVlZOVVQwMDZJRFV3TVN4Y2JpQWdJQ0F2THlCVFkyaGxiV0VnYzNSeWRXTjBkWEpsWEc0Z0lDQWdRMGxTUTFWTVFWSmZVa1ZHUlZKRlRrTkZPaUEyTURBc1hHNGdJQ0FnTHk4Z1RtOXVMWE4wWVc1a1lYSmtJSFpoYkdsa1lYUnBiMjRnYjNCMGFXOXVjMXh1SUNBZ0lGVk9TMDVQVjA1ZlVGSlBVRVZTVkZrNklERXdNREJjYm4wN1hHNTJZWElnUlhKeWIzSkRiMlJsVEc5dmEzVndJRDBnZTMwN1hHNW1iM0lnS0haaGNpQnJaWGtnYVc0Z1JYSnliM0pEYjJSbGN5a2dlMXh1SUNBZ0lFVnljbTl5UTI5a1pVeHZiMnQxY0Z0RmNuSnZja052WkdWelcydGxlVjFkSUQwZ2EyVjVPMXh1ZlZ4dWRtRnlJRVZ5Y205eVRXVnpjMkZuWlhORVpXWmhkV3gwSUQwZ2UxeHVJQ0FnSUVsT1ZrRk1TVVJmVkZsUVJUb2dYQ0pKYm5aaGJHbGtJSFI1Y0dVNklIdDBlWEJsZlNBb1pYaHdaV04wWldRZ2UyVjRjR1ZqZEdWa2ZTbGNJaXhjYmlBZ0lDQkZUbFZOWDAxSlUwMUJWRU5JT2lCY0lrNXZJR1Z1ZFcwZ2JXRjBZMmdnWm05eU9pQjdkbUZzZFdWOVhDSXNYRzRnSUNBZ1FVNVpYMDlHWDAxSlUxTkpUa2M2SUZ3aVJHRjBZU0JrYjJWeklHNXZkQ0J0WVhSamFDQmhibmtnYzJOb1pXMWhjeUJtY205dElGeGNYQ0poYm5sUFpseGNYQ0pjSWl4Y2JpQWdJQ0JQVGtWZlQwWmZUVWxUVTBsT1J6b2dYQ0pFWVhSaElHUnZaWE1nYm05MElHMWhkR05vSUdGdWVTQnpZMmhsYldGeklHWnliMjBnWEZ4Y0ltOXVaVTltWEZ4Y0lsd2lMRnh1SUNBZ0lFOU9SVjlQUmw5TlZVeFVTVkJNUlRvZ1hDSkVZWFJoSUdseklIWmhiR2xrSUdGbllXbHVjM1FnYlc5eVpTQjBhR0Z1SUc5dVpTQnpZMmhsYldFZ1puSnZiU0JjWEZ3aWIyNWxUMlpjWEZ3aU9pQnBibVJwWTJWeklIdHBibVJsZURGOUlHRnVaQ0I3YVc1a1pYZ3lmVndpTEZ4dUlDQWdJRTVQVkY5UVFWTlRSVVE2SUZ3aVJHRjBZU0J0WVhSamFHVnpJSE5qYUdWdFlTQm1jbTl0SUZ4Y1hDSnViM1JjWEZ3aVhDSXNYRzRnSUNBZ0x5OGdUblZ0WlhKcFl5Qmxjbkp2Y25OY2JpQWdJQ0JPVlUxQ1JWSmZUVlZNVkVsUVRFVmZUMFk2SUZ3aVZtRnNkV1VnZTNaaGJIVmxmU0JwY3lCdWIzUWdZU0J0ZFd4MGFYQnNaU0J2WmlCN2JYVnNkR2x3YkdWUFpuMWNJaXhjYmlBZ0lDQk9WVTFDUlZKZlRVbE9TVTFWVFRvZ1hDSldZV3gxWlNCN2RtRnNkV1Y5SUdseklHeGxjM01nZEdoaGJpQnRhVzVwYlhWdElIdHRhVzVwYlhWdGZWd2lMRnh1SUNBZ0lFNVZUVUpGVWw5TlNVNUpUVlZOWDBWWVEweFZVMGxXUlRvZ1hDSldZV3gxWlNCN2RtRnNkV1Y5SUdseklHVnhkV0ZzSUhSdklHVjRZMngxYzJsMlpTQnRhVzVwYlhWdElIdHRhVzVwYlhWdGZWd2lMRnh1SUNBZ0lFNVZUVUpGVWw5TlFWaEpUVlZOT2lCY0lsWmhiSFZsSUh0MllXeDFaWDBnYVhNZ1ozSmxZWFJsY2lCMGFHRnVJRzFoZUdsdGRXMGdlMjFoZUdsdGRXMTlYQ0lzWEc0Z0lDQWdUbFZOUWtWU1gwMUJXRWxOVlUxZlJWaERURlZUU1ZaRk9pQmNJbFpoYkhWbElIdDJZV3gxWlgwZ2FYTWdaWEYxWVd3Z2RHOGdaWGhqYkhWemFYWmxJRzFoZUdsdGRXMGdlMjFoZUdsdGRXMTlYQ0lzWEc0Z0lDQWdUbFZOUWtWU1gwNVBWRjlCWDA1VlRVSkZVam9nWENKV1lXeDFaU0I3ZG1Gc2RXVjlJR2x6SUc1dmRDQmhJSFpoYkdsa0lHNTFiV0psY2x3aUxGeHVJQ0FnSUM4dklGTjBjbWx1WnlCbGNuSnZjbk5jYmlBZ0lDQlRWRkpKVGtkZlRFVk9SMVJJWDFOSVQxSlVPaUJjSWxOMGNtbHVaeUJwY3lCMGIyOGdjMmh2Y25RZ0tIdHNaVzVuZEdoOUlHTm9ZWEp6S1N3Z2JXbHVhVzExYlNCN2JXbHVhVzExYlgxY0lpeGNiaUFnSUNCVFZGSkpUa2RmVEVWT1IxUklYMHhQVGtjNklGd2lVM1J5YVc1bklHbHpJSFJ2YnlCc2IyNW5JQ2g3YkdWdVozUm9mU0JqYUdGeWN5a3NJRzFoZUdsdGRXMGdlMjFoZUdsdGRXMTlYQ0lzWEc0Z0lDQWdVMVJTU1U1SFgxQkJWRlJGVWs0NklGd2lVM1J5YVc1bklHUnZaWE1nYm05MElHMWhkR05vSUhCaGRIUmxjbTQ2SUh0d1lYUjBaWEp1ZlZ3aUxGeHVJQ0FnSUM4dklFOWlhbVZqZENCbGNuSnZjbk5jYmlBZ0lDQlBRa3BGUTFSZlVGSlBVRVZTVkVsRlUxOU5TVTVKVFZWTk9pQmNJbFJ2YnlCbVpYY2djSEp2Y0dWeWRHbGxjeUJrWldacGJtVmtJQ2g3Y0hKdmNHVnlkSGxEYjNWdWRIMHBMQ0J0YVc1cGJYVnRJSHR0YVc1cGJYVnRmVndpTEZ4dUlDQWdJRTlDU2tWRFZGOVFVazlRUlZKVVNVVlRYMDFCV0VsTlZVMDZJRndpVkc5dklHMWhibmtnY0hKdmNHVnlkR2xsY3lCa1pXWnBibVZrSUNoN2NISnZjR1Z5ZEhsRGIzVnVkSDBwTENCdFlYaHBiWFZ0SUh0dFlYaHBiWFZ0ZlZ3aUxGeHVJQ0FnSUU5Q1NrVkRWRjlTUlZGVlNWSkZSRG9nWENKTmFYTnphVzVuSUhKbGNYVnBjbVZrSUhCeWIzQmxjblI1T2lCN2EyVjVmVndpTEZ4dUlDQWdJRTlDU2tWRFZGOUJSRVJKVkVsUFRrRk1YMUJTVDFCRlVsUkpSVk02SUZ3aVFXUmthWFJwYjI1aGJDQndjbTl3WlhKMGFXVnpJRzV2ZENCaGJHeHZkMlZrWENJc1hHNGdJQ0FnVDBKS1JVTlVYMFJGVUVWT1JFVk9RMWxmUzBWWk9pQmNJa1JsY0dWdVpHVnVZM2tnWm1GcGJHVmtJQzBnYTJWNUlHMTFjM1FnWlhocGMzUTZJSHR0YVhOemFXNW5mU0FvWkhWbElIUnZJR3RsZVRvZ2UydGxlWDBwWENJc1hHNGdJQ0FnTHk4Z1FYSnlZWGtnWlhKeWIzSnpYRzRnSUNBZ1FWSlNRVmxmVEVWT1IxUklYMU5JVDFKVU9pQmNJa0Z5Y21GNUlHbHpJSFJ2YnlCemFHOXlkQ0FvZTJ4bGJtZDBhSDBwTENCdGFXNXBiWFZ0SUh0dGFXNXBiWFZ0ZlZ3aUxGeHVJQ0FnSUVGU1VrRlpYMHhGVGtkVVNGOU1UMDVIT2lCY0lrRnljbUY1SUdseklIUnZieUJzYjI1bklDaDdiR1Z1WjNSb2ZTa3NJRzFoZUdsdGRXMGdlMjFoZUdsdGRXMTlYQ0lzWEc0Z0lDQWdRVkpTUVZsZlZVNUpVVlZGT2lCY0lrRnljbUY1SUdsMFpXMXpJR0Z5WlNCdWIzUWdkVzVwY1hWbElDaHBibVJwWTJWeklIdHRZWFJqYURGOUlHRnVaQ0I3YldGMFkyZ3lmU2xjSWl4Y2JpQWdJQ0JCVWxKQldWOUJSRVJKVkVsUFRrRk1YMGxVUlUxVE9pQmNJa0ZrWkdsMGFXOXVZV3dnYVhSbGJYTWdibTkwSUdGc2JHOTNaV1JjSWl4Y2JpQWdJQ0F2THlCR2IzSnRZWFFnWlhKeWIzSnpYRzRnSUNBZ1JrOVNUVUZVWDBOVlUxUlBUVG9nWENKR2IzSnRZWFFnZG1Gc2FXUmhkR2x2YmlCbVlXbHNaV1FnS0h0dFpYTnpZV2RsZlNsY0lpeGNiaUFnSUNCTFJWbFhUMUpFWDBOVlUxUlBUVG9nWENKTFpYbDNiM0prSUdaaGFXeGxaRG9nZTJ0bGVYMGdLSHR0WlhOellXZGxmU2xjSWl4Y2JpQWdJQ0F2THlCVFkyaGxiV0VnYzNSeWRXTjBkWEpsWEc0Z0lDQWdRMGxTUTFWTVFWSmZVa1ZHUlZKRlRrTkZPaUJjSWtOcGNtTjFiR0Z5SUNSeVpXWnpPaUI3ZFhKc2MzMWNJaXhjYmlBZ0lDQXZMeUJPYjI0dGMzUmhibVJoY21RZ2RtRnNhV1JoZEdsdmJpQnZjSFJwYjI1elhHNGdJQ0FnVlU1TFRrOVhUbDlRVWs5UVJWSlVXVG9nWENKVmJtdHViM2R1SUhCeWIzQmxjblI1SUNodWIzUWdhVzRnYzJOb1pXMWhLVndpWEc1OU8xeHVYRzVtZFc1amRHbHZiaUJXWVd4cFpHRjBhVzl1UlhKeWIzSW9ZMjlrWlN3Z2NHRnlZVzF6TENCa1lYUmhVR0YwYUN3Z2MyTm9aVzFoVUdGMGFDd2djM1ZpUlhKeWIzSnpLU0I3WEc0Z0lDQWdSWEp5YjNJdVkyRnNiQ2gwYUdsektUdGNiaUFnSUNCcFppQW9ZMjlrWlNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWs1dklHVnljbTl5SUdOdlpHVWdjM1Z3Y0d4cFpXUTZJRndpSUNzZ2MyTm9aVzFoVUdGMGFDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXViV1Z6YzJGblpTQTlJQ2NuTzF4dUlDQWdJSFJvYVhNdWNHRnlZVzF6SUQwZ2NHRnlZVzF6TzF4dUlDQWdJSFJvYVhNdVkyOWtaU0E5SUdOdlpHVTdYRzRnSUNBZ2RHaHBjeTVrWVhSaFVHRjBhQ0E5SUdSaGRHRlFZWFJvSUh4OElGd2lYQ0k3WEc0Z0lDQWdkR2hwY3k1elkyaGxiV0ZRWVhSb0lEMGdjMk5vWlcxaFVHRjBhQ0I4ZkNCY0lsd2lPMXh1SUNBZ0lIUm9hWE11YzNWaVJYSnliM0p6SUQwZ2MzVmlSWEp5YjNKeklIeDhJRzUxYkd3N1hHNWNiaUFnSUNCMllYSWdaWEp5SUQwZ2JtVjNJRVZ5Y205eUtIUm9hWE11YldWemMyRm5aU2s3WEc0Z0lDQWdkR2hwY3k1emRHRmpheUE5SUdWeWNpNXpkR0ZqYXlCOGZDQmxjbkl1YzNSaFkydDBjbUZqWlR0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11YzNSaFkyc3BJSHRjYmlBZ0lDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJR1Z5Y2p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMFlXTnJJRDBnWlhKeUxuTjBZV05ySUh4OElHVnljaTV6ZEdGamEzUnlZV05sTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZWeHVYRzVXWVd4cFpHRjBhVzl1UlhKeWIzSXVjSEp2ZEc5MGVYQmxJRDBnVDJKcVpXTjBMbU55WldGMFpTaEZjbkp2Y2k1d2NtOTBiM1I1Y0dVcE8xeHVWbUZzYVdSaGRHbHZia1Z5Y205eUxuQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjaUE5SUZaaGJHbGtZWFJwYjI1RmNuSnZjanRjYmxaaGJHbGtZWFJwYjI1RmNuSnZjaTV3Y205MGIzUjVjR1V1Ym1GdFpTQTlJQ2RXWVd4cFpHRjBhVzl1UlhKeWIzSW5PMXh1WEc1V1lXeHBaR0YwYVc5dVJYSnliM0l1Y0hKdmRHOTBlWEJsTG5CeVpXWnBlRmRwZEdnZ1BTQm1kVzVqZEdsdmJpQW9aR0YwWVZCeVpXWnBlQ3dnYzJOb1pXMWhVSEpsWm1sNEtTQjdYRzRnSUNBZ2FXWWdLR1JoZEdGUWNtVm1hWGdnSVQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0FnSUNBZ1pHRjBZVkJ5WldacGVDQTlJR1JoZEdGUWNtVm1hWGd1Y21Wd2JHRmpaU2d2Zmk5bkxDQmNJbjR3WENJcExuSmxjR3hoWTJVb0wxeGNMeTluTENCY0luNHhYQ0lwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdGUVlYUm9JRDBnWENJdlhDSWdLeUJrWVhSaFVISmxabWw0SUNzZ2RHaHBjeTVrWVhSaFVHRjBhRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSE5qYUdWdFlWQnlaV1pwZUNBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQnpZMmhsYldGUWNtVm1hWGdnUFNCelkyaGxiV0ZRY21WbWFYZ3VjbVZ3YkdGalpTZ3ZmaTluTENCY0luNHdYQ0lwTG5KbGNHeGhZMlVvTDF4Y0x5OW5MQ0JjSW40eFhDSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmphR1Z0WVZCaGRHZ2dQU0JjSWk5Y0lpQXJJSE5qYUdWdFlWQnlaV1pwZUNBcklIUm9hWE11YzJOb1pXMWhVR0YwYUR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSb2FYTXVjM1ZpUlhKeWIzSnpJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTV6ZFdKRmNuSnZjbk11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1ZpUlhKeWIzSnpXMmxkTG5CeVpXWnBlRmRwZEdnb1pHRjBZVkJ5WldacGVDd2djMk5vWlcxaFVISmxabWw0S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JuMDdYRzVjYm1aMWJtTjBhVzl1SUdselZISjFjM1JsWkZWeWJDaGlZWE5sVlhKc0xDQjBaWE4wVlhKc0tTQjdYRzRnSUNBZ2FXWWdLSFJsYzNSVmNtd3VjM1ZpYzNSeWFXNW5LREFzSUdKaGMyVlZjbXd1YkdWdVozUm9LU0E5UFQwZ1ltRnpaVlZ5YkNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY21WdFlXbHVaR1Z5SUQwZ2RHVnpkRlZ5YkM1emRXSnpkSEpwYm1jb1ltRnpaVlZ5YkM1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnSUNCcFppQW9LSFJsYzNSVmNtd3ViR1Z1WjNSb0lENGdNQ0FtSmlCMFpYTjBWWEpzTG1Ob1lYSkJkQ2hpWVhObFZYSnNMbXhsYm1kMGFDQXRJREVwSUQwOVBTQmNJaTljSWlsY2JpQWdJQ0FnSUNBZ0lDQWdJSHg4SUhKbGJXRnBibVJsY2k1amFHRnlRWFFvTUNrZ1BUMDlJRndpSTF3aVhHNGdJQ0FnSUNBZ0lDQWdJQ0I4ZkNCeVpXMWhhVzVrWlhJdVkyaGhja0YwS0RBcElEMDlQU0JjSWo5Y0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1ZlZ4dVhHNTJZWElnYkdGdVozVmhaMlZ6SUQwZ2UzMDdYRzVjYm1aMWJtTjBhVzl1SUdOeVpXRjBaVUZ3YVNoc1lXNW5kV0ZuWlNrZ2UxeHVJQ0FnSUhaaGNpQm5iRzlpWVd4RGIyNTBaWGgwSUQwZ2JtVjNJRlpoYkdsa1lYUnZja052Ym5SbGVIUW9LVHRjYmlBZ0lDQjJZWElnWTNWeWNtVnVkRXhoYm1kMVlXZGxPMXh1SUNBZ0lIWmhjaUJqZFhOMGIyMUZjbkp2Y2xKbGNHOXlkR1Z5TzF4dUlDQWdJSFpoY2lCaGNHa2dQU0I3WEc0Z0lDQWdJQ0FnSUhObGRFVnljbTl5VW1Wd2IzSjBaWEk2SUdaMWJtTjBhVzl1SUNoeVpYQnZjblJsY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCeVpYQnZjblJsY2lBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1c1lXNW5kV0ZuWlNoeVpYQnZjblJsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpkWE4wYjIxRmNuSnZjbEpsY0c5eWRHVnlJRDBnY21Wd2IzSjBaWEk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1lXUmtSbTl5YldGME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5iRzlpWVd4RGIyNTBaWGgwTG1Ga1pFWnZjbTFoZEM1aGNIQnNlU2huYkc5aVlXeERiMjUwWlhoMExDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCc1lXNW5kV0ZuWlRvZ1puVnVZM1JwYjI0Z0tHTnZaR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFkyOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqZFhKeVpXNTBUR0Z1WjNWaFoyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXeGhibWQxWVdkbGMxdGpiMlJsWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZaR1VnUFNCamIyUmxMbk53YkdsMEtDY3RKeWxiTUYwN0lDOHZJR1poYkd3Z1ltRmpheUIwYnlCaVlYTmxJR3hoYm1kMVlXZGxYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JHRnVaM1ZoWjJWelcyTnZaR1ZkS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEV4aGJtZDFZV2RsSUQwZ1kyOWtaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjlrWlRzZ0x5OGdjMjhnZVc5MUlHTmhiaUIwWld4c0lHbG1JR1poYkd3dFltRmpheUJvWVhNZ2FHRndjR1Z1WldSY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1lXUmtUR0Z1WjNWaFoyVTZJR1oxYm1OMGFXOXVJQ2hqYjJSbExDQnRaWE56WVdkbFRXRndLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYTJWNU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHJaWGtnYVc0Z1JYSnliM0pEYjJSbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodFpYTnpZV2RsVFdGd1cydGxlVjBnSmlZZ0lXMWxjM05oWjJWTllYQmJSWEp5YjNKRGIyUmxjMXRyWlhsZFhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsVFdGd1cwVnljbTl5UTI5a1pYTmJhMlY1WFYwZ1BTQnRaWE56WVdkbFRXRndXMnRsZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKdmIzUkRiMlJsSUQwZ1kyOWtaUzV6Y0d4cGRDZ25MU2NwV3pCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRnNZVzVuZFdGblpYTmJjbTl2ZEVOdlpHVmRLU0I3SUM4dklIVnpaU0JtYjNJZ1ltRnpaU0JzWVc1bmRXRm5aU0JwWmlCdWIzUWdlV1YwSUdSbFptbHVaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWVc1bmRXRm5aWE5iWTI5a1pWMGdQU0J0WlhOellXZGxUV0Z3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aGJtZDFZV2RsYzF0eWIyOTBRMjlrWlYwZ1BTQnRaWE56WVdkbFRXRndPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lXNW5kV0ZuWlhOYlkyOWtaVjBnUFNCUFltcGxZM1F1WTNKbFlYUmxLR3hoYm1kMVlXZGxjMXR5YjI5MFEyOWtaVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9hMlY1SUdsdUlHMWxjM05oWjJWTllYQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnNZVzVuZFdGblpYTmJjbTl2ZEVOdlpHVmRXMnRsZVYwZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1lXNW5kV0ZuWlhOYmNtOXZkRU52WkdWZFcydGxlVjBnUFNCdFpYTnpZV2RsVFdGd1cydGxlVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGdVozVmhaMlZ6VzJOdlpHVmRXMnRsZVYwZ1BTQnRaWE56WVdkbFRXRndXMnRsZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lHWnlaWE5vUVhCcE9pQm1kVzVqZEdsdmJpQW9iR0Z1WjNWaFoyVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0JqY21WaGRHVkJjR2tvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc1lXNW5kV0ZuWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1c1lXNW5kV0ZuWlNoc1lXNW5kV0ZuWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjJZV3hwWkdGMFpUb2dablZ1WTNScGIyNGdLR1JoZEdFc0lITmphR1Z0WVN3Z1kyaGxZMnRTWldOMWNuTnBkbVVzSUdKaGJsVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaR1ZtSUQwZ1pHVm1ZWFZzZEVWeWNtOXlVbVZ3YjNKMFpYSW9ZM1Z5Y21WdWRFeGhibWQxWVdkbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmxjbkp2Y2xKbGNHOXlkR1Z5SUQwZ1kzVnpkRzl0UlhKeWIzSlNaWEJ2Y25SbGNpQS9JR1oxYm1OMGFXOXVJQ2hsY25KdmNpd2daR0YwWVN3Z2MyTm9aVzFoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOMWMzUnZiVVZ5Y205eVVtVndiM0owWlhJb1pYSnliM0lzSUdSaGRHRXNJSE5qYUdWdFlTa2dmSHdnWkdWbUtHVnljbTl5TENCa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQTZJR1JsWmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCamIyNTBaWGgwSUQwZ2JtVjNJRlpoYkdsa1lYUnZja052Ym5SbGVIUW9aMnh2WW1Gc1EyOXVkR1Y0ZEN3Z1ptRnNjMlVzSUdWeWNtOXlVbVZ3YjNKMFpYSXNJR05vWldOclVtVmpkWEp6YVhabExDQmlZVzVWYm10dWIzZHVVSEp2Y0dWeWRHbGxjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSE5qYUdWdFlTQTlQVDBnWENKemRISnBibWRjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmphR1Z0WVNBOUlIdGNJaVJ5WldaY0lqb2djMk5vWlcxaGZUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVZV1JrVTJOb1pXMWhLRndpWENJc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1pYSnliM0lnUFNCamIyNTBaWGgwTG5aaGJHbGtZWFJsUVd4c0tHUmhkR0VzSUhOamFHVnRZU3dnYm5Wc2JDd2diblZzYkN3Z1hDSmNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWeWNtOXlJQ1ltSUdKaGJsVnVhMjV2ZDI1UWNtOXdaWEowYVdWektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaWEp5YjNJZ1BTQmpiMjUwWlhoMExtSmhibFZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpLR1JoZEdFc0lITmphR1Z0WVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WeWNtOXlJRDBnWlhKeWIzSTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTFwYzNOcGJtY2dQU0JqYjI1MFpYaDBMbTFwYzNOcGJtYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpoYkdsa0lEMGdLR1Z5Y205eUlEMDlQU0J1ZFd4c0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuWmhiR2xrTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjJZV3hwWkdGMFpWSmxjM1ZzZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJSHQ5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MllXeHBaR0YwWlM1aGNIQnNlU2h5WlhOMWJIUXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjJZV3hwWkdGMFpVMTFiSFJwY0d4bE9pQm1kVzVqZEdsdmJpQW9aR0YwWVN3Z2MyTm9aVzFoTENCamFHVmphMUpsWTNWeWMybDJaU3dnWW1GdVZXNXJibTkzYmxCeWIzQmxjblJwWlhNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmtaV1lnUFNCa1pXWmhkV3gwUlhKeWIzSlNaWEJ2Y25SbGNpaGpkWEp5Wlc1MFRHRnVaM1ZoWjJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVnljbTl5VW1Wd2IzSjBaWElnUFNCamRYTjBiMjFGY25KdmNsSmxjRzl5ZEdWeUlEOGdablZ1WTNScGIyNGdLR1Z5Y205eUxDQmtZWFJoTENCelkyaGxiV0VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTNWemRHOXRSWEp5YjNKU1pYQnZjblJsY2lobGNuSnZjaXdnWkdGMFlTd2djMk5vWlcxaEtTQjhmQ0JrWldZb1pYSnliM0lzSUdSaGRHRXNJSE5qYUdWdFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlEb2daR1ZtTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdOdmJuUmxlSFFnUFNCdVpYY2dWbUZzYVdSaGRHOXlRMjl1ZEdWNGRDaG5iRzlpWVd4RGIyNTBaWGgwTENCMGNuVmxMQ0JsY25KdmNsSmxjRzl5ZEdWeUxDQmphR1ZqYTFKbFkzVnljMmwyWlN3Z1ltRnVWVzVyYm05M2JsQnliM0JsY25ScFpYTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnpZMmhsYldFZ1BUMDlJRndpYzNSeWFXNW5YQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelkyaGxiV0VnUFNCN1hDSWtjbVZtWENJNklITmphR1Z0WVgwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwWlhoMExtRmtaRk5qYUdWdFlTaGNJbHdpTENCelkyaGxiV0VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEdWNGRDNTJZV3hwWkdGMFpVRnNiQ2hrWVhSaExDQnpZMmhsYldFc0lHNTFiR3dzSUc1MWJHd3NJRndpWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHSmhibFZ1YTI1dmQyNVFjbTl3WlhKMGFXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQzVpWVc1VmJtdHViM2R1VUhKdmNHVnlkR2xsY3loa1lYUmhMQ0J6WTJobGJXRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlIdDlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG1WeWNtOXljeUE5SUdOdmJuUmxlSFF1WlhKeWIzSnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG0xcGMzTnBibWNnUFNCamIyNTBaWGgwTG0xcGMzTnBibWM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRdWRtRnNhV1FnUFNBb2NtVnpkV3gwTG1WeWNtOXljeTVzWlc1bmRHZ2dQVDA5SURBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWVdSa1UyTm9aVzFoT2lCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWjJ4dlltRnNRMjl1ZEdWNGRDNWhaR1JUWTJobGJXRXVZWEJ3Ykhrb1oyeHZZbUZzUTI5dWRHVjRkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdaMlYwVTJOb1pXMWhPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaMnh2WW1Gc1EyOXVkR1Y0ZEM1blpYUlRZMmhsYldFdVlYQndiSGtvWjJ4dlltRnNRMjl1ZEdWNGRDd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1oyVjBVMk5vWlcxaFRXRndPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdaMnh2WW1Gc1EyOXVkR1Y0ZEM1blpYUlRZMmhsYldGTllYQXVZWEJ3Ykhrb1oyeHZZbUZzUTI5dWRHVjRkQ3dnWVhKbmRXMWxiblJ6S1R0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdaMlYwVTJOb1pXMWhWWEpwY3pvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdkc2IySmhiRU52Ym5SbGVIUXVaMlYwVTJOb1pXMWhWWEpwY3k1aGNIQnNlU2huYkc5aVlXeERiMjUwWlhoMExDQmhjbWQxYldWdWRITXBPMXh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCblpYUk5hWE56YVc1blZYSnBjem9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2RzYjJKaGJFTnZiblJsZUhRdVoyVjBUV2x6YzJsdVoxVnlhWE11WVhCd2JIa29aMnh2WW1Gc1EyOXVkR1Y0ZEN3Z1lYSm5kVzFsYm5SektUdGNiaUFnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnWkhKdmNGTmphR1Z0WVhNNklHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHZHNiMkpoYkVOdmJuUmxlSFF1WkhKdmNGTmphR1Z0WVhNdVlYQndiSGtvWjJ4dlltRnNRMjl1ZEdWNGRDd2dZWEpuZFcxbGJuUnpLVHRjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1pHVm1hVzVsUzJWNWQyOXlaRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJ4dlltRnNRMjl1ZEdWNGRDNWtaV1pwYm1WTFpYbDNiM0prTG1Gd2NHeDVLR2RzYjJKaGJFTnZiblJsZUhRc0lHRnlaM1Z0Wlc1MGN5azdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUdSbFptbHVaVVZ5Y205eU9pQm1kVzVqZEdsdmJpQW9ZMjlrWlU1aGJXVXNJR052WkdWT2RXMWlaWElzSUdSbFptRjFiSFJOWlhOellXZGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR052WkdWT1lXMWxJQ0U5UFNBbmMzUnlhVzVuSnlCOGZDQWhMMTViUVMxYVhTc29YMXRCTFZwZEt5a3FKQzh1ZEdWemRDaGpiMlJsVG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KME52WkdVZ2JtRnRaU0J0ZFhOMElHSmxJR0VnYzNSeWFXNW5JR2x1SUZWUVVFVlNYME5CVTBWZlYwbFVTRjlWVGtSRlVsTkRUMUpGVXljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJqYjJSbFRuVnRZbVZ5SUNFOVBTQW5iblZ0WW1WeUp5QjhmQ0JqYjJSbFRuVnRZbVZ5SUNVZ01TQWhQVDBnTUNCOGZDQmpiMlJsVG5WdFltVnlJRHdnTVRBd01EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KME52WkdVZ2JuVnRZbVZ5SUcxMWMzUWdZbVVnWVc0Z2FXNTBaV2RsY2lBK0lERXdNREF3SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRVZ5Y205eVEyOWtaWE5iWTI5a1pVNWhiV1ZkSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduUlhKeWIzSWdZV3h5WldGa2VTQmtaV1pwYm1Wa09pQW5JQ3NnWTI5a1pVNWhiV1VnS3lBbklHRnpJQ2NnS3lCRmNuSnZja052WkdWelcyTnZaR1ZPWVcxbFhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUVWeWNtOXlRMjlrWlV4dmIydDFjRnRqYjJSbFRuVnRZbVZ5WFNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBWeWNtOXlJR052WkdVZ1lXeHlaV0ZrZVNCMWMyVmtPaUFuSUNzZ1JYSnliM0pEYjJSbFRHOXZhM1Z3VzJOdlpHVk9kVzFpWlhKZElDc2dKeUJoY3lBbklDc2dZMjlrWlU1MWJXSmxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCRmNuSnZja052WkdWelcyTnZaR1ZPWVcxbFhTQTlJR052WkdWT2RXMWlaWEk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQkZjbkp2Y2tOdlpHVk1iMjlyZFhCYlkyOWtaVTUxYldKbGNsMGdQU0JqYjJSbFRtRnRaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFVnljbTl5VFdWemMyRm5aWE5FWldaaGRXeDBXMk52WkdWT1lXMWxYU0E5SUVWeWNtOXlUV1Z6YzJGblpYTkVaV1poZFd4MFcyTnZaR1ZPZFcxaVpYSmRJRDBnWkdWbVlYVnNkRTFsYzNOaFoyVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCc1lXNW5RMjlrWlNCcGJpQnNZVzVuZFdGblpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JHRnVaM1ZoWjJVZ1BTQnNZVzVuZFdGblpYTmJiR0Z1WjBOdlpHVmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoc1lXNW5kV0ZuWlZ0amIyUmxUbUZ0WlYwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdGdVozVmhaMlZiWTI5a1pVNTFiV0psY2wwZ1BTQnNZVzVuZFdGblpWdGpiMlJsVG5WdFltVnlYU0I4ZkNCc1lXNW5kV0ZuWlZ0amIyUmxUbUZ0WlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQnlaWE5sZERvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1oyeHZZbUZzUTI5dWRHVjRkQzV5WlhObGRDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVsY25KdmNpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXBjM05wYm1jZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZG1Gc2FXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J0YVhOemFXNW5PaUJiWFN4Y2JpQWdJQ0FnSUNBZ1pYSnliM0k2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJSFpoYkdsa09pQjBjblZsTEZ4dUlDQWdJQ0FnSUNCdWIzSnRVMk5vWlcxaE9pQnViM0p0VTJOb1pXMWhMRnh1SUNBZ0lDQWdJQ0J5WlhOdmJIWmxWWEpzT2lCeVpYTnZiSFpsVlhKc0xGeHVJQ0FnSUNBZ0lDQm5aWFJFYjJOMWJXVnVkRlZ5YVRvZ1oyVjBSRzlqZFcxbGJuUlZjbWtzWEc0Z0lDQWdJQ0FnSUdWeWNtOXlRMjlrWlhNNklFVnljbTl5UTI5a1pYTmNiaUFnSUNCOU8xeHVJQ0FnSUdGd2FTNXNZVzVuZFdGblpTaHNZVzVuZFdGblpTQjhmQ0FuWlc0bktUdGNiaUFnSUNCeVpYUjFjbTRnWVhCcE8xeHVmVnh1WEc0dkwyVjRjRzl5ZENCbWRXNWpkR2x2YmlCMllXeHBaR0YwYjNJb0tTQjdYRzUyWVhJZ2RIWTBJRDBnWTNKbFlYUmxRWEJwS0NrN1hHNTBkalF1WVdSa1RHRnVaM1ZoWjJVb0oyVnVMV2RpSnl3Z1JYSnliM0pOWlhOellXZGxjMFJsWm1GMWJIUXBPMXh1WEc0dkwyeGxaMkZqZVNCd2NtOXdaWEowZVZ4dWRIWTBMblIyTkNBOUlIUjJORHRjYmk4dmNtVjBkWEp1SUhSMk5EdGNibVY0Y0c5eWRDQmtaV1poZFd4MElIUjJORHRjYmk4dmZTSXNJaThxS2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUVZDQkpibTkyWWNPbnc2TnZJR1VnVTJsemRHVnRZWE1nVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1NVNUZVME10U1VSY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VWVlBRa2xUSUU1RlZGZFBVa3RUSUZOTVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFWlNRVlZPU0U5R1JWSXRSMFZUUlV4TVUwTklRVVpVSUZwVlVpQkdUMFZTUkVWU1ZVNUhJRVJGVWlCQlRrZEZWMEZPUkZSRlRpQkdUMUpUUTBoVlRrY2dSUzVXWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFRndhWHBsWlZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCVVJVTklUa2xUUTBoRklGVk9TVlpGVWxOSlZFRlVJRUpGVWt4SlRseHVLbHh1S2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0cUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1S2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVLbHh1S2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNiaW9nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0cUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRxS2k5Y2JpOHFLbHh1SUNvZ1UzVndjRzl5ZENCdGIyUjFiR1VnZDJsMGFDQnpiMjFsSUdaMWJtTjBhVzl1Y3lCM2FXeHNJR0psSUhWelpXWjFiRnh1SUNvZ1FHMXZaSFZzWlNCMWRHbHNjMXh1SUNvdlhHNWNiaThxS2x4dUlDb2dRSFI1Y0dWa1pXWWdaR2wyYVdSbFZWSk1YRzRnS2lCQWRIbHdaU0JQWW1wbFkzUmNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCMGVYQmxJRlJvWlNCMGVYQmxJRzltSUZWU1RGeHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUdSdmJXRnBiaUJVYUdVZ1pHOXRZV2x1SUc5bUlGVlNURnh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlHbGtaVzUwYVhSNUlGUm9aU0JwWkdWdWRHbDBlU0J2WmlCVlVreGNiaUFxTDF4dVhHNHZLaXBjYmlBcUlFUnBkbWxrWlNCaGJpQjFjbXdnYVc0Z2RIbHdaU3dnWkc5dFlXbHVJR0Z1WkNCcFpHVnVkR2wwZVZ4dUlDb2dRSEJoY21GdElDQjdWVkpNTGxWU1RIMGdkWEpzSUMwZ2RYSnNJR0ZrWkhKbGMzTmNiaUFxSUVCeVpYUjFjbTRnZTJScGRtbGtaVlZTVEgwZ2RHaGxJSEpsYzNWc2RDQnZaaUJrYVhacFpHVlZVa3hjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHUnBkbWxrWlZWU1RDaDFjbXdwSUh0Y2JseHVJQ0JwWmlBb0lYVnliQ2tnZEdoeWIzY2dSWEp5YjNJb0oxVlNUQ0JwY3lCdVpXVmtaV1FnZEc4Z2MzQnNhWFFuS1R0Y2JseHVJQ0F2THlCc1pYUWdjbVVnUFNBdktGdGhMWHBCTFZvdFhTb3BQenBjWEM5Y1hDOG9QenBjWEM0cFB5aGJMV0V0ZWtFdFdqQXRPVUE2SlM1ZlhGd3JmaU05WFhzeUxESTFObjFjWEM1YllTMTZYWHN5TERaOVhGeGlLU29vWEZ3dlcxeGNMMXhjWkZ4Y2QxeGNMaTFkS2lrcUtEODZXMXhjUDEwcEtpZ3VLeWtxTDJkcE8xeHVJQ0JzWlhRZ2NtVWdQU0F2S0Z0aExYcEJMVm90WFNvcE9seGNMMXhjTHlnL09seGNMaWsvS0ZzdFlTMTZRUzFhTUMwNVFEb2xMbDljWEN0K0l6MWRleklzTWpVMmZTa29XeTFoTFhwQkxWb3dMVGxBT2lVdVgxeGNLMzRqUFZ4Y0wxMHFLUzluYVR0Y2JpQWdiR1YwSUhOMVluTjBJRDBnSnlReExDUXlMQ1F6Snp0Y2JpQWdiR1YwSUhCaGNuUnpJRDBnZFhKc0xuSmxjR3hoWTJVb2NtVXNJSE4xWW5OMEtTNXpjR3hwZENnbkxDY3BPMXh1WEc0Z0lDOHZJRWxtSUhSb1pTQjFjbXdnYUdGeklHNXZJSEJ5YjNSdlkyOXNMQ0IwYUdVZ1pHVm1ZWFZzZENCd2NtOTBiMk52YkNCelpYUWdhWE1nYUhSMGNITmNiaUFnYVdZZ0tIQmhjblJ6V3pCZElEMDlQU0IxY213cElIdGNiaUFnSUNCd1lYSjBjMXN3WFNBOUlDZG9kSFJ3Y3ljN1hHNGdJQ0FnY0dGeWRITmJNVjBnUFNCMWNtdzdYRzRnSUgxY2JseHVJQ0JzWlhRZ2NtVnpkV3gwSUQwZ2UxeHVJQ0FnSUhSNWNHVTZJSEJoY25Seld6QmRMRnh1SUNBZ0lHUnZiV0ZwYmpvZ2NHRnlkSE5iTVYwc1hHNGdJQ0FnYVdSbGJuUnBkSGs2SUhCaGNuUnpXekpkWEc0Z0lIMDdYRzVjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHUnBkbWxrWlVWdFlXbHNLR1Z0WVdsc0tTQjdYRzRnSUd4bGRDQnBibVJsZUU5bVFYUWdQU0JsYldGcGJDNXBibVJsZUU5bUtDZEFKeWs3WEc1Y2JpQWdiR1YwSUhKbGMzVnNkQ0E5SUh0Y2JpQWdJQ0IxYzJWeWJtRnRaVG9nWlcxaGFXd3VjM1ZpYzNSeWFXNW5LREFzSUdsdVpHVjRUMlpCZENrc1hHNGdJQ0FnWkc5dFlXbHVPaUJsYldGcGJDNXpkV0p6ZEhKcGJtY29hVzVrWlhoUFprRjBJQ3NnTVN3Z1pXMWhhV3d1YkdWdVozUm9LVnh1SUNCOU8xeHVYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyaGxZMnNnYVdZZ1lXNGdUMkpxWldOMElHbHpJR1Z0Y0hSNVhHNGdLaUJBY0dGeVlXMGdJSHRQWW1wbFkzUjlJRzlpYW1WamRDQlBZbXBsWTNRZ2RHOGdZbVVnWTJobFkydGxaRnh1SUNvZ1FISmxkSFZ5YmlCN1FtOXZiR1ZoYm4wZ0lDQWdJQ0FnYzNSaGRIVnpJRzltSUU5aWFtVmpkQ3dnWlcxd2RIa2diM0lnYm05MElDaDBjblZsZkdaaGJITmxLVHRjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHVnRjSFI1VDJKcVpXTjBLRzlpYW1WamRDa2dlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbXRsZVhNb2IySnFaV04wS1M1c1pXNW5kR2dnUGlBd0lEOGdabUZzYzJVZ09pQjBjblZsTzF4dWZWeHVYRzR2S2lwY2JpQXFJRTFoYTJVZ1lTQkRUMUJaSUc5bUlIUm9aU0J2Y21sbmFXNWhiQ0JrWVhSaFhHNGdLaUJBY0dGeVlXMGdJSHRQWW1wbFkzUjlJQ0J2WW1vZ0xTQnZZbXBsWTNRZ2RHOGdZbVVnWTJ4dmJtVmtYRzRnS2lCQWNtVjBkWEp1SUh0UFltcGxZM1I5WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmtaV1Z3UTJ4dmJtVW9iMkpxS1NCN1hHNGdJQzh2VkU5RVR6b2djMmx0Y0d4bElHSjFkQ0JwYm1WbVptbGphV1Z1ZENCS1UwOU9JR1JsWlhBZ1kyeHZibVV1TGk1Y2JpQWdhV1lnS0c5aWFpa2djbVYwZFhKdUlFcFRUMDR1Y0dGeWMyVW9TbE5QVGk1emRISnBibWRwWm5rb2IySnFLU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnlaVzF2ZG1WUVlYUm9Sbkp2YlZWU1RDaDFjbXdwSUh0Y2JpQWdiR1YwSUhOd2JHbDBWVkpNSUQwZ2RYSnNMbk53YkdsMEtDY3ZKeWs3WEc0Z0lISmxkSFZ5YmlCemNHeHBkRlZTVEZzd1hTQXJJQ2N2THljZ0t5QnpjR3hwZEZWU1RGc3lYU0FySUNjdkp5QXJJSE53YkdsMFZWSk1Xek5kTzF4dWZWeHVYRzR2S2lwY2JpQXFJRTlpZEdGcGJuTWdkR2hsSUhWelpYSWdWVkpNSUhSb1lYUWdZMjl5Y21WemNHOXVaSE1nZEc4Z1lTQm5hWFpsYmlCbGJXRnBiRnh1SUNvZ1FIQmhjbUZ0SUNCN2MzUnlhVzVuZlNCMWMyVnlSVzFoYVd3Z1ZHaGxJSFZ6WlhJZ1pXMWhhV3hjYmlBcUlFQnlaWFIxY200Z2UxVlNUQzVWVWt4OUlIVnpaWEpWVWt3Z1ZHaGxJSFZ6WlhJZ1ZWSk1YRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCblpYUlZjMlZ5VlZKTVJuSnZiVVZ0WVdsc0tIVnpaWEpGYldGcGJDa2dlMXh1SUNCc1pYUWdhVzVrWlhoUFprRjBJRDBnZFhObGNrVnRZV2xzTG1sdVpHVjRUMllvSjBBbktUdGNiaUFnY21WMGRYSnVJQ2QxYzJWeU9pOHZKeUFySUhWelpYSkZiV0ZwYkM1emRXSnpkSEpwYm1jb2FXNWtaWGhQWmtGMElDc2dNU3dnZFhObGNrVnRZV2xzTG14bGJtZDBhQ2tnS3lBbkx5Y2dLeUIxYzJWeVJXMWhhV3d1YzNWaWMzUnlhVzVuS0RBc0lHbHVaR1Y0VDJaQmRDazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1QySjBZV2x1Y3lCMGFHVWdkWE5sY2lCbGJXRnBiQ0IwYUdGMElHTnZjbkpsYzNCdmJtUnpJSFJ2SUdFZ1oybDJaVzRnVlZKTVhHNGdLaUJBY0dGeVlXMGdJSHRWVWt3dVZWSk1mU0IxYzJWeVZWSk1JRlJvWlNCMWMyVnlJRlZTVEZ4dUlDb2dRSEpsZEhWeWJpQjdjM1J5YVc1bmZTQjFjMlZ5UlcxaGFXd2dWR2hsSUhWelpYSWdaVzFoYVd4Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEZWelpYSkZiV0ZwYkVaeWIyMVZVa3dvZFhObGNsVlNUQ2tnZTF4dUlDQnNaWFFnZFhKc0lEMGdaR2wyYVdSbFZWSk1LSFZ6WlhKVlVrd3BPMXh1SUNCeVpYUjFjbTRnZFhKc0xtbGtaVzUwYVhSNUxuSmxjR3hoWTJVb0p5OG5MQ0FuSnlrZ0t5QW5RQ2NnS3lCMWNtd3VaRzl0WVdsdU95QXZMeUJwWkdWdWRHbDBlU0JtYVdWc1pDQm9ZWE1nSnk5bGVHRnRjR3hsU1VRbklHbHVjM1JsWVdRZ2IyWWdKMlY0WVcxd2JHVkpSQ2RjYm4xY2JseHVYRzR2S2lwY2JpQXFJRU5vWldOcklHbG1JSFJvWlNCMWMyVnlJR2xrWlc1MGFXWnBaWElnYVhNZ1lXeHlaV0ZrZVNCcGJpQjBhR1VnVlZKTUlHWnZjbTFoZEN3Z2FXWWdibTkwTENCamIyNTJaWEowSUhSdklGVlNUQ0JtYjNKdFlYUmNiaUFxSUVCd1lYSmhiU0FnZTNOMGNtbHVaMzBnSUNCcFpHVnVkR2xtYVdWeUlDQjFjMlZ5SUdsa1pXNTBhV1pwWlhKY2JpQXFJRUJ5WlhSMWNtNGdlM04wY21sdVozMGdJQ0IxYzJWeVZWSk1JQ0FnSUhSb1pTQjFjMlZ5SUZWU1RGeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWTI5dWRtVnlkRlJ2VlhObGNsVlNUQ2hwWkdWdWRHbG1hV1Z5S1NCN1hHNWNiaUFnTHk4Z1kyaGxZMnNnYVdZZ2RHaGxJR2xrWlc1MGFXWnBaWElnYVhNZ1lXeHlaV0ZrZVNCcGJpQjBhR1VnZFhKc0lHWnZjbTFoZEZ4dUlDQnBaaUFvYVdSbGJuUnBabWxsY2k1emRXSnpkSEpwYm1jb01Dd2dOeWtnUFQwOUlDZDFjMlZ5T2k4dkp5a2dlMXh1SUNBZ0lHeGxkQ0JrYVhacFpHVmtWVkpNSUQwZ1pHbDJhV1JsVlZKTUtHbGtaVzUwYVdacFpYSXBPMXh1WEc0Z0lDQWdMeTlqYUdWamF5QnBaaUIwYUdVZ2RYSnNJR2x6SUhkbGJHd2dabTl5YldGMFpXUmNiaUFnSUNCcFppQW9aR2wyYVdSbFpGVlNUQzVrYjIxaGFXNGdKaVlnWkdsMmFXUmxaRlZTVEM1cFpHVnVkR2wwZVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdsa1pXNTBhV1pwWlhJN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvY205M0lDZDFjMlZ5VlZKTUlIZHBkR2dnZDNKdmJtY2dabTl5YldGMEp6dGNiaUFnSUNCOVhHNWNiaUFnTHk5cFppQnViM1FzSUdOdmJuWmxjblFnZEdobElIVnpaWElnWlcxaGFXd2dkRzhnVlZKTUlHWnZjbTFoZEZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJuWlhSVmMyVnlWVkpNUm5KdmJVVnRZV2xzS0dsa1pXNTBhV1pwWlhJcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBjMFJoZEdGUFltcGxZM1JWVWt3b2RYSnNLU0I3WEc0Z0lHeGxkQ0J6WTJobGJXRnpWRzlKWjI1dmNtVWdQU0JiSjJSdmJXRnBiaTFwWkhBbkxDQW5jblZ1ZEdsdFpTY3NJQ2RrYjIxaGFXNG5MQ0FuYUhsd1pYSjBlU2RkTzF4dUlDQnNaWFFnYzNCc2FYUlZVa3dnUFNBb2RYSnNLUzV6Y0d4cGRDZ25PaTh2SnlrN1hHNGdJR3hsZENCMWNteFRZMmhsYldFZ1BTQnpjR3hwZEZWU1RGc3dYVHRjYmx4dUlDQnlaWFIxY200Z2MyTm9aVzFoYzFSdlNXZHViM0psTG1sdVpHVjRUMllvZFhKc1UyTm9aVzFoS1NBOVBUMGdMVEU3WEc1OVhHNWNiaThxS2x4dUlDb2daMlYwSUdsdVptOXliV0YwYVc5dUlISmxiR0YwYVhabElHVmhZMmdnWTI5dGNHOXVaVzUwSUdOdmJtWnBaM1Z5WldRZ2IyNGdjblZ1ZEdsdFpTQmpiMjVtYVdkMWNtRjBhVzl1TzF4dUlDb2dRSEJoY21GdElDQjdiMkpxWldOMGZTQmpiMjVtYVdkMWNtRjBhVzl1SUc5aWFtVmpkQ0IzYVhSb0lHRnNiQ0JqYjI1bWFXZDFjbUYwYVc5dVhHNGdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZDlJR052YlhCdmJtVnVkQ0FnSUNBZ2MzUnlhVzVuSUhkcGRHZ2dkR2hsSUdOdmJYQnZibVZ1ZENCMGJ5Qm5aWFFnZEdobElHTnZibVpwWjNWeVlYUnBiMjRzSUd4cGEyVXNJSEoxYm5ScGJXVlZVa3hUTENCallYUmhiRzluZFdWVlVreHpMQ0J0YzJkT2IyUmxWVkpNTENCa2IyMWhhVzVTWldkcGMzUnllVlZTVER0Y2JpQXFJRUJ3WVhKaGJTQWdlM04wY21sdVozMGdjbVZ6YjNWeVkyVWdJQ0FnSUNCMGVYQmxJRzltSUhKbGMyOTFjbU5sSUhSdklHZGxkQ3dnYkdsclpTd2dZMkYwWVd4dlozVmxMQ0J5ZFc1MGFXMWxWVUVzSUhCeWIzUnZZMjlzYzNSMVlpd2dhV1J3VUhKdmVIbGNiaUFxSUVCeVpYUjFjbTRnZTI5aWFtVmpkSDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1lXNGdiMkpxWldOMElIZHBkR2dnWVd4c0lHTnZibVpwWjNWeVlYUnBiMjV6TzF4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwUTI5dVptbG5kWEpoZEdsdmJsSmxjMjkxY21ObGN5aGpiMjVtYVdkMWNtRjBhVzl1TENCamIyMXdiMjVsYm5Rc0lISmxjMjkxY21ObEtTQjdYRzRnSUd4bGRDQnZZbXBsWTNSU1pYTnZkWEpqWlNBOUlHTnZibVpwWjNWeVlYUnBiMjViWTI5dGNHOXVaVzUwWFR0Y2JpQWdiR1YwSUhKbGMyOTFjbU5sVkhsd1pTQTlJRzlpYW1WamRGSmxjMjkxY21ObFczSmxjMjkxY21ObFhUdGNibHh1SUNCeVpYUjFjbTRnY21WemIzVnlZMlZVZVhCbE8xeHVmVnh1WEc0dktpcGNiaUFxSUVKMWFXeGtJR0VnWm5Wc2JDQjFjbXdnZDJsMGFDQjBhR1VnY25WdWRHbHRaU0JqYjI1bWFXZDFjbUYwYVc5dU8xeHVJQ29nUUhCaGNtRnRJQ0I3YjJKcVpXTjBmU0JqYjI1bWFXZDFjbUYwYVc5dUlHOWlhbVZqZENCM2FYUm9JR0ZzYkNCamIyNW1hV2QxY21GMGFXOXVYRzRnS2lCQWNHRnlZVzBnSUh0emRISnBibWQ5SUdOdmJYQnZibVZ1ZENBZ0lDQWdjM1J5YVc1bklIZHBkR2dnZEdobElHTnZiWEJ2Ym1WdWRDQjBieUJuWlhRZ2RHaGxJR052Ym1acFozVnlZWFJwYjI0c0lHeHBhMlVzSUhKMWJuUnBiV1ZWVWt4VExDQmpZWFJoYkc5bmRXVlZVa3h6TENCdGMyZE9iMlJsVlZKTUxDQmtiMjFoYVc1U1pXZHBjM1J5ZVZWU1REdGNiaUFxSUVCd1lYSmhiU0FnZTNOMGNtbHVaMzBnY21WemIzVnlZMlVnSUNBZ0lDQjBlWEJsSUc5bUlISmxjMjkxY21ObElIUnZJR2RsZEN3Z2JHbHJaU3dnWTJGMFlXeHZaM1ZsTENCeWRXNTBhVzFsVlVFc0lIQnliM1J2WTI5c2MzUjFZaXdnYVdSd1VISnZlSGxjYmlBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ2RIbHdaU0FnSUNBZ0lDQWdJQ0J5WlhOdmRYSmpaU0IwYnlCblpYUXNJR3hwYTJVZ1lTQm9lWEJsY25SNUlHNWhiV1VnYjNJZ2NISnZkRzlqYjJ4emRIVmlJRzVoYldVN1hHNGdLaUJBY0dGeVlXMGdJSHRpYjI5c1pXRnVmU0IxYzJWR1lXeHNZbUZqYXlBZ2FXWWdkSEoxWlNCMGFHVWdablZ1WTNScGIyNGdkMmxzYkNCamFHVmpheUJwWmlCb1lYWmxJR0VnWm1Gc2JHSmhZMnNnZFhKc08xeHVJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhjblJwWVd3Z2RYSnNJSFJ2SUdOdmJuUmhZM1FnZEdobElISmxjMjkxY21ObE8xeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWW5WcGJHUlZVa3dvWTI5dVptbG5kWEpoZEdsdmJpd2dZMjl0Y0c5dVpXNTBMQ0J5WlhOdmRYSmpaU3dnZEhsd1pTd2dkWE5sUm1Gc2JHSmhZMnNnUFNCbVlXeHpaU2tnZTF4dUlDQnNaWFFnYjJKcVpXTjBVbVZ6YjNWeVkyVWdQU0JqYjI1bWFXZDFjbUYwYVc5dVcyTnZiWEJ2Ym1WdWRGMDdYRzRnSUd4bGRDQjFjbXc3WEc1Y2JpQWdhV1lnS0NGdlltcGxZM1JTWlhOdmRYSmpaUzVvWVhOUGQyNVFjbTl3WlhKMGVTaHlaWE52ZFhKalpTa3BJSHRjYmlBZ0lDQjBhSEp2ZHlCRmNuSnZjaWduVkdobElHTnZibVpwWjNWeVlYUnBiMjRnSnlBcklFcFRUMDR1YzNSeWFXNW5hV1o1S0c5aWFtVmpkRkpsYzI5MWNtTmxMQ0FuSnl3Z01pa2dLeUFuSUdSdmJseGNKM1FnYUdGMlpTQjBhR1VnSnlBcklISmxjMjkxY21ObElDc2dKeUJ5WlhOdmRYSmpaU0I1YjNVZ1lYSmxJR3h2YjJ0cGJtY2dabTl5SnlrN1hHNGdJSDFjYmx4dUlDQnNaWFFnY21WemIzVnlZMlZVZVhCbElEMGdiMkpxWldOMFVtVnpiM1Z5WTJWYmNtVnpiM1Z5WTJWZE8xeHVYRzRnSUdsbUlDaDBlWEJsS1NCN1hHNGdJQ0FnZFhKc0lEMGdjbVZ6YjNWeVkyVlVlWEJsTG5CeVpXWnBlQ0FySUdOdmJtWnBaM1Z5WVhScGIyNHVaRzl0WVdsdUlDc2djbVZ6YjNWeVkyVlVlWEJsTG5OMVptWnBlQ0FySUhSNWNHVTdYRzRnSUNBZ2FXWWdLSEpsYzI5MWNtTmxWSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlU2duWm1Gc2JHSmhZMnNuS1NBbUppQjFjMlZHWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnYVdZZ0tISmxjMjkxY21ObFZIbHdaUzVtWVd4c1ltRmpheTVwYm1SbGVFOW1LQ2NsWkc5dFlXbHVKU2NwS1NCN1hHNGdJQ0FnSUNBZ0lIVnliQ0E5SUhKbGMyOTFjbU5sVkhsd1pTNW1ZV3hzWW1GamF5NXlaWEJzWVdObEtDOG9KV1J2YldGcGJpVXBMMmNzSUdOdmJtWnBaM1Z5WVhScGIyNHVaRzl0WVdsdUtTQXJJSFI1Y0dVN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMWNtd2dQU0J5WlhOdmRYSmpaVlI1Y0dVdVptRnNiR0poWTJzZ0t5QjBlWEJsTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0IxY213Z1BTQnlaWE52ZFhKalpWUjVjR1V1Y0hKbFptbDRJQ3NnWTI5dVptbG5kWEpoZEdsdmJpNWtiMjFoYVc0Z0t5QnlaWE52ZFhKalpWUjVjR1V1YzNWbVptbDRPMXh1SUNCOVhHNWNiaUFnTHk4Z1kyOXVjMjlzWlM1c2IyY29kWEpzS1R0Y2JseHVJQ0J5WlhSMWNtNGdkWEpzTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlZ1WlhKaGRHVkhWVWxFS0NrZ2UxeHVYRzRnSUdaMWJtTjBhVzl1SUhNMEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCTllYUm9MbVpzYjI5eUtDZ3hJQ3NnVFdGMGFDNXlZVzVrYjIwb0tTa2dLaUF3ZURFd01EQXdLVnh1SUNBZ0lDQWdMblJ2VTNSeWFXNW5LREUyS1Z4dUlDQWdJQ0FnTG5OMVluTjBjbWx1WnlneEtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnpOQ2dwSUNzZ2N6UW9LU0FySUNjdEp5QXJJSE0wS0NrZ0t5QW5MU2NnS3lCek5DZ3BJQ3NnSnkwbklDc2djelFvS1NBcklDY3RKeUFySUhNMEtDa2dLeUJ6TkNncElDc2djelFvS1R0Y2JseHVmVnh1SWwxOQoKLy8jIHNvdXJjZU1hcHBpbmdVUkw9UnVudGltZS5qcy5tYXAK",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": "3-81e8c973-1056-e8b8-802c-48df286cccbc0",
    "type": "Runtimes",
    "version": 13.199999999999969,
    "description": "Description of Runtime",
    "objectName": "Runtime",
    "configuration": {},
    "runtimeType": "browser",
    "hypertyCapabilities": {
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true
    },
    "protocolCapabilities": {
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}