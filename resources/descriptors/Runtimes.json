{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for Runtime.js 
// version: 0.7.1
// Last build: Thu Jan 26 2017 17:22:31 GMT+0000 (GMT Standard Time)

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Runtime = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":20,"core-js/shim":413,"regenerator-runtime/runtime":415}],2:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };
},{"core-js/library/fn/json/stringify":21}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":22}],4:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":23}],5:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":24}],6:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":25}],7:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/get-prototype-of":26}],8:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/is-frozen"), __esModule: true };
},{"core-js/library/fn/object/is-frozen":27}],9:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":28}],10:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":29}],11:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":30}],12:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":31}],13:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":32}],14:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],15:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
},{"../core-js/object/define-property":5}],16:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _getPrototypeOf = require("../core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = require("../core-js/object/get-own-property-descriptor");

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};
},{"../core-js/object/get-own-property-descriptor":6,"../core-js/object/get-prototype-of":7}],17:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _setPrototypeOf = require("../core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require("../core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
},{"../core-js/object/create":4,"../core-js/object/set-prototype-of":10,"../helpers/typeof":19}],18:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};
},{"../helpers/typeof":19}],19:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":12,"../core-js/symbol/iterator":13}],20:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;
},{"../../modules/_core":141,"../../modules/core.regexp.escape":237}],21:[function(require,module,exports){
var core  = require('../../modules/_core')
  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};
},{"../../modules/_core":40}],22:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;
},{"../../modules/_core":40,"../../modules/es6.object.assign":106}],23:[function(require,module,exports){
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};
},{"../../modules/_core":40,"../../modules/es6.object.create":107}],24:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};
},{"../../modules/_core":40,"../../modules/es6.object.define-property":108}],25:[function(require,module,exports){
require('../../modules/es6.object.get-own-property-descriptor');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyDescriptor(it, key){
  return $Object.getOwnPropertyDescriptor(it, key);
};
},{"../../modules/_core":40,"../../modules/es6.object.get-own-property-descriptor":109}],26:[function(require,module,exports){
require('../../modules/es6.object.get-prototype-of');
module.exports = require('../../modules/_core').Object.getPrototypeOf;
},{"../../modules/_core":40,"../../modules/es6.object.get-prototype-of":110}],27:[function(require,module,exports){
require('../../modules/es6.object.is-frozen');
module.exports = require('../../modules/_core').Object.isFrozen;
},{"../../modules/_core":40,"../../modules/es6.object.is-frozen":111}],28:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;
},{"../../modules/_core":40,"../../modules/es6.object.keys":112}],29:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;
},{"../../modules/_core":40,"../../modules/es6.object.set-prototype-of":113}],30:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
module.exports = require('../modules/_core').Promise;
},{"../modules/_core":40,"../modules/es6.object.to-string":114,"../modules/es6.promise":115,"../modules/es6.string.iterator":116,"../modules/web.dom.iterable":120}],31:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;
},{"../../modules/_core":40,"../../modules/es6.object.to-string":114,"../../modules/es6.symbol":117,"../../modules/es7.symbol.async-iterator":118,"../../modules/es7.symbol.observable":119}],32:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');
},{"../../modules/_wks-ext":102,"../../modules/es6.string.iterator":116,"../../modules/web.dom.iterable":120}],33:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],34:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],35:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],36:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":59}],37:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":94,"./_to-iobject":96,"./_to-length":97}],38:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":39,"./_wks":103}],39:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],40:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],41:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":33}],42:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],43:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":48}],44:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":50,"./_is-object":59}],45:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],46:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":77,"./_object-keys":80,"./_object-pie":81}],47:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , ctx       = require('./_ctx')
  , hide      = require('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":40,"./_ctx":41,"./_global":50,"./_hide":52}],48:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],49:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":36,"./_ctx":41,"./_is-array-iter":57,"./_iter-call":60,"./_to-length":97,"./core.get-iterator-method":104}],50:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],51:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],52:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":43,"./_object-dp":72,"./_property-desc":83}],53:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":50}],54:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":43,"./_dom-create":44,"./_fails":48}],55:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],56:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":39}],57:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":65,"./_wks":103}],58:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":39}],59:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],60:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":36}],61:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":52,"./_object-create":71,"./_property-desc":83,"./_set-to-string-tag":88,"./_wks":103}],62:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":47,"./_has":51,"./_hide":52,"./_iter-create":61,"./_iterators":65,"./_library":67,"./_object-gpo":78,"./_redefine":85,"./_set-to-string-tag":88,"./_wks":103}],63:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":103}],64:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],65:[function(require,module,exports){
module.exports = {};
},{}],66:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":80,"./_to-iobject":96}],67:[function(require,module,exports){
module.exports = true;
},{}],68:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":48,"./_has":51,"./_is-object":59,"./_object-dp":72,"./_uid":100}],69:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};
},{"./_cof":39,"./_global":50,"./_task":93}],70:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":48,"./_iobject":56,"./_object-gops":77,"./_object-keys":80,"./_object-pie":81,"./_to-object":98}],71:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":36,"./_dom-create":44,"./_enum-bug-keys":45,"./_html":53,"./_object-dps":73,"./_shared-key":89}],72:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":36,"./_descriptors":43,"./_ie8-dom-define":54,"./_to-primitive":99}],73:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":36,"./_descriptors":43,"./_object-dp":72,"./_object-keys":80}],74:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":43,"./_has":51,"./_ie8-dom-define":54,"./_object-pie":81,"./_property-desc":83,"./_to-iobject":96,"./_to-primitive":99}],75:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":76,"./_to-iobject":96}],76:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":45,"./_object-keys-internal":79}],77:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],78:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":51,"./_shared-key":89,"./_to-object":98}],79:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":37,"./_has":51,"./_shared-key":89,"./_to-iobject":96}],80:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":45,"./_object-keys-internal":79}],81:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],82:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":40,"./_export":47,"./_fails":48}],83:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],84:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};
},{"./_hide":52}],85:[function(require,module,exports){
module.exports = require('./_hide');
},{"./_hide":52}],86:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object')
  , anObject = require('./_an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./_an-object":36,"./_ctx":41,"./_is-object":59,"./_object-gopd":74}],87:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , core        = require('./_core')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_core":40,"./_descriptors":43,"./_global":50,"./_object-dp":72,"./_wks":103}],88:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":51,"./_object-dp":72,"./_wks":103}],89:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":90,"./_uid":100}],90:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":50}],91:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":33,"./_an-object":36,"./_wks":103}],92:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":42,"./_to-integer":95}],93:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":39,"./_ctx":41,"./_dom-create":44,"./_global":50,"./_html":53,"./_invoke":55}],94:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":95}],95:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],96:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":42,"./_iobject":56}],97:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":95}],98:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":42}],99:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":59}],100:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],101:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":40,"./_global":50,"./_library":67,"./_object-dp":72,"./_wks-ext":102}],102:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":103}],103:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":50,"./_shared":90,"./_uid":100}],104:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":38,"./_core":40,"./_iterators":65,"./_wks":103}],105:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":34,"./_iter-define":62,"./_iter-step":64,"./_iterators":65,"./_to-iobject":96}],106:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":47,"./_object-assign":70}],107:[function(require,module,exports){
var $export = require('./_export')
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: require('./_object-create')});
},{"./_export":47,"./_object-create":71}],108:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":43,"./_export":47,"./_object-dp":72}],109:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = require('./_to-iobject')
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./_object-gopd":74,"./_object-sap":82,"./_to-iobject":96}],110:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = require('./_to-object')
  , $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./_object-gpo":78,"./_object-sap":82,"./_to-object":98}],111:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./_is-object":59,"./_object-sap":82}],112:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":80,"./_object-sap":82,"./_to-object":98}],113:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});
},{"./_export":47,"./_set-proto":86}],114:[function(require,module,exports){

},{}],115:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":33,"./_an-instance":35,"./_classof":38,"./_core":40,"./_ctx":41,"./_export":47,"./_for-of":49,"./_global":50,"./_is-object":59,"./_iter-detect":63,"./_library":67,"./_microtask":69,"./_redefine-all":84,"./_set-species":87,"./_set-to-string-tag":88,"./_species-constructor":91,"./_task":93,"./_wks":103}],116:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":62,"./_string-at":92}],117:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":36,"./_descriptors":43,"./_enum-keys":46,"./_export":47,"./_fails":48,"./_global":50,"./_has":51,"./_hide":52,"./_is-array":58,"./_keyof":66,"./_library":67,"./_meta":68,"./_object-create":71,"./_object-dp":72,"./_object-gopd":74,"./_object-gopn":76,"./_object-gopn-ext":75,"./_object-gops":77,"./_object-keys":80,"./_object-pie":81,"./_property-desc":83,"./_redefine":85,"./_set-to-string-tag":88,"./_shared":90,"./_to-iobject":96,"./_to-primitive":99,"./_uid":100,"./_wks":103,"./_wks-define":101,"./_wks-ext":102}],118:[function(require,module,exports){
require('./_wks-define')('asyncIterator');
},{"./_wks-define":101}],119:[function(require,module,exports){
require('./_wks-define')('observable');
},{"./_wks-define":101}],120:[function(require,module,exports){
require('./es6.array.iterator');
var global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , TO_STRING_TAG = require('./_wks')('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
},{"./_global":50,"./_hide":52,"./_iterators":65,"./_wks":103,"./es6.array.iterator":105}],121:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"dup":33}],122:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function(it, msg){
  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
  return +it;
};
},{"./_cof":136}],123:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};
},{"./_hide":158,"./_wks":235}],124:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"dup":35}],125:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./_is-object":167,"dup":36}],126:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};
},{"./_to-index":223,"./_to-length":226,"./_to-object":227}],127:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};
},{"./_to-index":223,"./_to-length":226,"./_to-object":227}],128:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":155}],129:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./_to-index":223,"./_to-iobject":225,"./_to-length":226,"dup":37}],130:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./_ctx')
  , IObject  = require('./_iobject')
  , toObject = require('./_to-object')
  , toLength = require('./_to-length')
  , asc      = require('./_array-species-create');
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./_array-species-create":133,"./_ctx":143,"./_iobject":163,"./_to-length":226,"./_to-object":227}],131:[function(require,module,exports){
var aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , IObject   = require('./_iobject')
  , toLength  = require('./_to-length');

module.exports = function(that, callbackfn, aLen, memo, isRight){
  aFunction(callbackfn);
  var O      = toObject(that)
    , self   = IObject(O)
    , length = toLength(O.length)
    , index  = isRight ? length - 1 : 0
    , i      = isRight ? -1 : 1;
  if(aLen < 2)for(;;){
    if(index in self){
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if(isRight ? index < 0 : length <= index){
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};
},{"./_a-function":121,"./_iobject":163,"./_to-length":226,"./_to-object":227}],132:[function(require,module,exports){
var isObject = require('./_is-object')
  , isArray  = require('./_is-array')
  , SPECIES  = require('./_wks')('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};
},{"./_is-array":165,"./_is-object":167,"./_wks":235}],133:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};
},{"./_array-species-constructor":132}],134:[function(require,module,exports){
'use strict';
var aFunction  = require('./_a-function')
  , isObject   = require('./_is-object')
  , invoke     = require('./_invoke')
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};
},{"./_a-function":121,"./_invoke":162,"./_is-object":167}],135:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"./_cof":136,"./_wks":235,"dup":38}],136:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39}],137:[function(require,module,exports){
'use strict';
var dP          = require('./_object-dp').f
  , create      = require('./_object-create')
  , redefineAll = require('./_redefine-all')
  , ctx         = require('./_ctx')
  , anInstance  = require('./_an-instance')
  , defined     = require('./_defined')
  , forOf       = require('./_for-of')
  , $iterDefine = require('./_iter-define')
  , step        = require('./_iter-step')
  , setSpecies  = require('./_set-species')
  , DESCRIPTORS = require('./_descriptors')
  , fastKey     = require('./_meta').fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./_an-instance":124,"./_ctx":143,"./_defined":145,"./_descriptors":146,"./_for-of":155,"./_iter-define":171,"./_iter-step":173,"./_meta":180,"./_object-create":184,"./_object-dp":185,"./_redefine-all":204,"./_set-species":209}],138:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof')
  , from    = require('./_array-from-iterable');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};
},{"./_array-from-iterable":128,"./_classof":135}],139:[function(require,module,exports){
'use strict';
var redefineAll       = require('./_redefine-all')
  , getWeak           = require('./_meta').getWeak
  , anObject          = require('./_an-object')
  , isObject          = require('./_is-object')
  , anInstance        = require('./_an-instance')
  , forOf             = require('./_for-of')
  , createArrayMethod = require('./_array-methods')
  , $has              = require('./_has')
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};
},{"./_an-instance":124,"./_an-object":125,"./_array-methods":130,"./_for-of":155,"./_has":157,"./_is-object":167,"./_meta":180,"./_redefine-all":204}],140:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , $export           = require('./_export')
  , redefine          = require('./_redefine')
  , redefineAll       = require('./_redefine-all')
  , meta              = require('./_meta')
  , forOf             = require('./_for-of')
  , anInstance        = require('./_an-instance')
  , isObject          = require('./_is-object')
  , fails             = require('./_fails')
  , $iterDetect       = require('./_iter-detect')
  , setToStringTag    = require('./_set-to-string-tag')
  , inheritIfRequired = require('./_inherit-if-required');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./_an-instance":124,"./_export":150,"./_fails":152,"./_for-of":155,"./_global":156,"./_inherit-if-required":161,"./_is-object":167,"./_iter-detect":172,"./_meta":180,"./_redefine":205,"./_redefine-all":204,"./_set-to-string-tag":210}],141:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"dup":40}],142:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp')
  , createDesc      = require('./_property-desc');

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};
},{"./_object-dp":185,"./_property-desc":203}],143:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./_a-function":121,"dup":41}],144:[function(require,module,exports){
'use strict';
var anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive')
  , NUMBER      = 'number';

module.exports = function(hint){
  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};
},{"./_an-object":125,"./_to-primitive":228}],145:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"dup":42}],146:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"./_fails":152,"dup":43}],147:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"./_global":156,"./_is-object":167,"dup":44}],148:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"dup":45}],149:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./_object-gops":191,"./_object-keys":194,"./_object-pie":195,"dup":46}],150:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , hide      = require('./_hide')
  , redefine  = require('./_redefine')
  , ctx       = require('./_ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":141,"./_ctx":143,"./_global":156,"./_hide":158,"./_redefine":205}],151:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};
},{"./_wks":235}],152:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],153:[function(require,module,exports){
'use strict';
var hide     = require('./_hide')
  , redefine = require('./_redefine')
  , fails    = require('./_fails')
  , defined  = require('./_defined')
  , wks      = require('./_wks');

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};
},{"./_defined":145,"./_fails":152,"./_hide":158,"./_redefine":205,"./_wks":235}],154:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};
},{"./_an-object":125}],155:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./_an-object":125,"./_ctx":143,"./_is-array-iter":164,"./_iter-call":169,"./_to-length":226,"./core.get-iterator-method":236,"dup":49}],156:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"dup":50}],157:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],158:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./_descriptors":146,"./_object-dp":185,"./_property-desc":203,"dup":52}],159:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./_global":156,"dup":53}],160:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./_descriptors":146,"./_dom-create":147,"./_fails":152,"dup":54}],161:[function(require,module,exports){
var isObject       = require('./_is-object')
  , setPrototypeOf = require('./_set-proto').set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};
},{"./_is-object":167,"./_set-proto":208}],162:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"dup":55}],163:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"./_cof":136,"dup":56}],164:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"./_iterators":174,"./_wks":235,"dup":57}],165:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"./_cof":136,"dup":58}],166:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./_is-object":167}],167:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],168:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object')
  , cof      = require('./_cof')
  , MATCH    = require('./_wks')('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};
},{"./_cof":136,"./_is-object":167,"./_wks":235}],169:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"./_an-object":125,"dup":60}],170:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"./_hide":158,"./_object-create":184,"./_property-desc":203,"./_set-to-string-tag":210,"./_wks":235,"dup":61}],171:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"./_export":150,"./_has":157,"./_hide":158,"./_iter-create":170,"./_iterators":174,"./_library":176,"./_object-gpo":192,"./_redefine":205,"./_set-to-string-tag":210,"./_wks":235,"dup":62}],172:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./_wks":235,"dup":63}],173:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"dup":64}],174:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"dup":65}],175:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./_object-keys":194,"./_to-iobject":225,"dup":66}],176:[function(require,module,exports){
module.exports = false;
},{}],177:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;
},{}],178:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],179:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],180:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"./_fails":152,"./_has":157,"./_is-object":167,"./_object-dp":185,"./_uid":232,"dup":68}],181:[function(require,module,exports){
var Map     = require('./es6.map')
  , $export = require('./_export')
  , shared  = require('./_shared')('metadata')
  , store   = shared.store || (shared.store = new (require('./es6.weak-map')));

var getOrCreateMetadataMap = function(target, targetKey, create){
  var targetMetadata = store.get(target);
  if(!targetMetadata){
    if(!create)return undefined;
    store.set(target, targetMetadata = new Map);
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if(!keyMetadata){
    if(!create)return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map);
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey){
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
    , keys        = [];
  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
  return keys;
};
var toMetaKey = function(it){
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O){
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};
},{"./_export":150,"./_shared":212,"./es6.map":267,"./es6.weak-map":373}],182:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"./_cof":136,"./_global":156,"./_task":222,"dup":69}],183:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"./_fails":152,"./_iobject":163,"./_object-gops":191,"./_object-keys":194,"./_object-pie":195,"./_to-object":227,"dup":70}],184:[function(require,module,exports){
arguments[4][71][0].apply(exports,arguments)
},{"./_an-object":125,"./_dom-create":147,"./_enum-bug-keys":148,"./_html":159,"./_object-dps":186,"./_shared-key":211,"dup":71}],185:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"./_an-object":125,"./_descriptors":146,"./_ie8-dom-define":160,"./_to-primitive":228,"dup":72}],186:[function(require,module,exports){
arguments[4][73][0].apply(exports,arguments)
},{"./_an-object":125,"./_descriptors":146,"./_object-dp":185,"./_object-keys":194,"dup":73}],187:[function(require,module,exports){
// Forced replacement prototype accessors methods
module.exports = require('./_library')|| !require('./_fails')(function(){
  var K = Math.random();
  // In FF throws only define methods
  __defineSetter__.call(null, K, function(){ /* empty */});
  delete require('./_global')[K];
});
},{"./_fails":152,"./_global":156,"./_library":176}],188:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"./_descriptors":146,"./_has":157,"./_ie8-dom-define":160,"./_object-pie":195,"./_property-desc":203,"./_to-iobject":225,"./_to-primitive":228,"dup":74}],189:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"./_object-gopn":190,"./_to-iobject":225,"dup":75}],190:[function(require,module,exports){
arguments[4][76][0].apply(exports,arguments)
},{"./_enum-bug-keys":148,"./_object-keys-internal":193,"dup":76}],191:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"dup":77}],192:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./_has":157,"./_shared-key":211,"./_to-object":227,"dup":78}],193:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"./_array-includes":129,"./_has":157,"./_shared-key":211,"./_to-iobject":225,"dup":79}],194:[function(require,module,exports){
arguments[4][80][0].apply(exports,arguments)
},{"./_enum-bug-keys":148,"./_object-keys-internal":193,"dup":80}],195:[function(require,module,exports){
arguments[4][81][0].apply(exports,arguments)
},{"dup":81}],196:[function(require,module,exports){
arguments[4][82][0].apply(exports,arguments)
},{"./_core":141,"./_export":150,"./_fails":152,"dup":82}],197:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject')
  , isEnum    = require('./_object-pie').f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./_object-keys":194,"./_object-pie":195,"./_to-iobject":225}],198:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN     = require('./_object-gopn')
  , gOPS     = require('./_object-gops')
  , anObject = require('./_an-object')
  , Reflect  = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./_an-object":125,"./_global":156,"./_object-gopn":190,"./_object-gops":191}],199:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat
  , $trim       = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim(String(str), 3)
    , result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;
},{"./_global":156,"./_string-trim":220,"./_string-ws":221}],200:[function(require,module,exports){
var $parseInt = require('./_global').parseInt
  , $trim     = require('./_string-trim').trim
  , ws        = require('./_string-ws')
  , hex       = /^[\-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;
},{"./_global":156,"./_string-trim":220,"./_string-ws":221}],201:[function(require,module,exports){
'use strict';
var path      = require('./_path')
  , invoke    = require('./_invoke')
  , aFunction = require('./_a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
},{"./_a-function":121,"./_invoke":162,"./_path":202}],202:[function(require,module,exports){
module.exports = require('./_global');
},{"./_global":156}],203:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"dup":83}],204:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};
},{"./_redefine":205}],205:[function(require,module,exports){
var global    = require('./_global')
  , hide      = require('./_hide')
  , has       = require('./_has')
  , SRC       = require('./_uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./_core":141,"./_global":156,"./_has":157,"./_hide":158,"./_uid":232}],206:[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],207:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],208:[function(require,module,exports){
arguments[4][86][0].apply(exports,arguments)
},{"./_an-object":125,"./_ctx":143,"./_is-object":167,"./_object-gopd":188,"dup":86}],209:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_descriptors":146,"./_global":156,"./_object-dp":185,"./_wks":235}],210:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./_has":157,"./_object-dp":185,"./_wks":235,"dup":88}],211:[function(require,module,exports){
arguments[4][89][0].apply(exports,arguments)
},{"./_shared":212,"./_uid":232,"dup":89}],212:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"./_global":156,"dup":90}],213:[function(require,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"./_a-function":121,"./_an-object":125,"./_wks":235,"dup":91}],214:[function(require,module,exports){
var fails = require('./_fails');

module.exports = function(method, arg){
  return !!method && fails(function(){
    arg ? method.call(null, function(){}, 1) : method.call(null);
  });
};
},{"./_fails":152}],215:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"./_defined":145,"./_to-integer":224,"dup":92}],216:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp')
  , defined  = require('./_defined');

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./_defined":145,"./_is-regexp":168}],217:[function(require,module,exports){
var $export = require('./_export')
  , fails   = require('./_fails')
  , defined = require('./_defined')
  , quot    = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S  = String(defined(string))
    , p1 = '<' + tag;
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec){
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function(){
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};
},{"./_defined":145,"./_export":150,"./_fails":152}],218:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length')
  , repeat   = require('./_string-repeat')
  , defined  = require('./_defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength || fillStr == '')return S;
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":145,"./_string-repeat":219,"./_to-length":226}],219:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./_defined":145,"./_to-integer":224}],220:[function(require,module,exports){
var $export = require('./_export')
  , defined = require('./_defined')
  , fails   = require('./_fails')
  , spaces  = require('./_string-ws')
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;
},{"./_defined":145,"./_export":150,"./_fails":152,"./_string-ws":221}],221:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
},{}],222:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"./_cof":136,"./_ctx":143,"./_dom-create":147,"./_global":156,"./_html":159,"./_invoke":162,"dup":93}],223:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"./_to-integer":224,"dup":94}],224:[function(require,module,exports){
arguments[4][95][0].apply(exports,arguments)
},{"dup":95}],225:[function(require,module,exports){
arguments[4][96][0].apply(exports,arguments)
},{"./_defined":145,"./_iobject":163,"dup":96}],226:[function(require,module,exports){
arguments[4][97][0].apply(exports,arguments)
},{"./_to-integer":224,"dup":97}],227:[function(require,module,exports){
arguments[4][98][0].apply(exports,arguments)
},{"./_defined":145,"dup":98}],228:[function(require,module,exports){
arguments[4][99][0].apply(exports,arguments)
},{"./_is-object":167,"dup":99}],229:[function(require,module,exports){
'use strict';
if(require('./_descriptors')){
  var LIBRARY             = require('./_library')
    , global              = require('./_global')
    , fails               = require('./_fails')
    , $export             = require('./_export')
    , $typed              = require('./_typed')
    , $buffer             = require('./_typed-buffer')
    , ctx                 = require('./_ctx')
    , anInstance          = require('./_an-instance')
    , propertyDesc        = require('./_property-desc')
    , hide                = require('./_hide')
    , redefineAll         = require('./_redefine-all')
    , toInteger           = require('./_to-integer')
    , toLength            = require('./_to-length')
    , toIndex             = require('./_to-index')
    , toPrimitive         = require('./_to-primitive')
    , has                 = require('./_has')
    , same                = require('./_same-value')
    , classof             = require('./_classof')
    , isObject            = require('./_is-object')
    , toObject            = require('./_to-object')
    , isArrayIter         = require('./_is-array-iter')
    , create              = require('./_object-create')
    , getPrototypeOf      = require('./_object-gpo')
    , gOPN                = require('./_object-gopn').f
    , getIterFn           = require('./core.get-iterator-method')
    , uid                 = require('./_uid')
    , wks                 = require('./_wks')
    , createArrayMethod   = require('./_array-methods')
    , createArrayIncludes = require('./_array-includes')
    , speciesConstructor  = require('./_species-constructor')
    , ArrayIterators      = require('./es6.array.iterator')
    , Iterators           = require('./_iterators')
    , $iterDetect         = require('./_iter-detect')
    , setSpecies          = require('./_set-species')
    , arrayFill           = require('./_array-fill')
    , arrayCopyWithin     = require('./_array-copy-within')
    , $DP                 = require('./_object-dp')
    , $GOPD               = require('./_object-gopd')
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };
},{"./_an-instance":124,"./_array-copy-within":126,"./_array-fill":127,"./_array-includes":129,"./_array-methods":130,"./_classof":135,"./_ctx":143,"./_descriptors":146,"./_export":150,"./_fails":152,"./_global":156,"./_has":157,"./_hide":158,"./_is-array-iter":164,"./_is-object":167,"./_iter-detect":172,"./_iterators":174,"./_library":176,"./_object-create":184,"./_object-dp":185,"./_object-gopd":188,"./_object-gopn":190,"./_object-gpo":192,"./_property-desc":203,"./_redefine-all":204,"./_same-value":207,"./_set-species":209,"./_species-constructor":213,"./_to-index":223,"./_to-integer":224,"./_to-length":226,"./_to-object":227,"./_to-primitive":228,"./_typed":231,"./_typed-buffer":230,"./_uid":232,"./_wks":235,"./core.get-iterator-method":236,"./es6.array.iterator":248}],230:[function(require,module,exports){
'use strict';
var global         = require('./_global')
  , DESCRIPTORS    = require('./_descriptors')
  , LIBRARY        = require('./_library')
  , $typed         = require('./_typed')
  , hide           = require('./_hide')
  , redefineAll    = require('./_redefine-all')
  , fails          = require('./_fails')
  , anInstance     = require('./_an-instance')
  , toInteger      = require('./_to-integer')
  , toLength       = require('./_to-length')
  , gOPN           = require('./_object-gopn').f
  , dP             = require('./_object-dp').f
  , arrayFill      = require('./_array-fill')
  , setToStringTag = require('./_set-to-string-tag')
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;
},{"./_an-instance":124,"./_array-fill":127,"./_descriptors":146,"./_fails":152,"./_global":156,"./_hide":158,"./_library":176,"./_object-dp":185,"./_object-gopn":190,"./_redefine-all":204,"./_set-to-string-tag":210,"./_to-integer":224,"./_to-length":226,"./_typed":231}],231:[function(require,module,exports){
var global = require('./_global')
  , hide   = require('./_hide')
  , uid    = require('./_uid')
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};
},{"./_global":156,"./_hide":158,"./_uid":232}],232:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"dup":100}],233:[function(require,module,exports){
arguments[4][101][0].apply(exports,arguments)
},{"./_core":141,"./_global":156,"./_library":176,"./_object-dp":185,"./_wks-ext":234,"dup":101}],234:[function(require,module,exports){
arguments[4][102][0].apply(exports,arguments)
},{"./_wks":235,"dup":102}],235:[function(require,module,exports){
arguments[4][103][0].apply(exports,arguments)
},{"./_global":156,"./_shared":212,"./_uid":232,"dup":103}],236:[function(require,module,exports){
arguments[4][104][0].apply(exports,arguments)
},{"./_classof":135,"./_core":141,"./_iterators":174,"./_wks":235,"dup":104}],237:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export')
  , $re     = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./_export":150,"./_replacer":206}],238:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});

require('./_add-to-unscopables')('copyWithin');
},{"./_add-to-unscopables":123,"./_array-copy-within":126,"./_export":150}],239:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $every  = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */){
    return $every(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],240:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {fill: require('./_array-fill')});

require('./_add-to-unscopables')('fill');
},{"./_add-to-unscopables":123,"./_array-fill":127,"./_export":150}],241:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */){
    return $filter(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],242:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":123,"./_array-methods":130,"./_export":150}],243:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":123,"./_array-methods":130,"./_export":150}],244:[function(require,module,exports){
'use strict';
var $export  = require('./_export')
  , $forEach = require('./_array-methods')(0)
  , STRICT   = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */){
    return $forEach(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],245:[function(require,module,exports){
'use strict';
var ctx            = require('./_ctx')
  , $export        = require('./_export')
  , toObject       = require('./_to-object')
  , call           = require('./_iter-call')
  , isArrayIter    = require('./_is-array-iter')
  , toLength       = require('./_to-length')
  , createProperty = require('./_create-property')
  , getIterFn      = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":142,"./_ctx":143,"./_export":150,"./_is-array-iter":164,"./_iter-call":169,"./_iter-detect":172,"./_to-length":226,"./_to-object":227,"./core.get-iterator-method":236}],246:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , $indexOf      = require('./_array-includes')(false)
  , $native       = [].indexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});
},{"./_array-includes":129,"./_export":150,"./_strict-method":214}],247:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', {isArray: require('./_is-array')});
},{"./_export":150,"./_is-array":165}],248:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"./_add-to-unscopables":123,"./_iter-define":171,"./_iter-step":173,"./_iterators":174,"./_to-iobject":225,"dup":105}],249:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator){
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});
},{"./_export":150,"./_iobject":163,"./_strict-method":214,"./_to-iobject":225}],250:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , toIObject     = require('./_to-iobject')
  , toInteger     = require('./_to-integer')
  , toLength      = require('./_to-length')
  , $native       = [].lastIndexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
    // convert -0 to +0
    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
    if(index < 0)index = length + index;
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
    return -1;
  }
});
},{"./_export":150,"./_strict-method":214,"./_to-integer":224,"./_to-iobject":225,"./_to-length":226}],251:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $map    = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */){
    return $map(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],252:[function(require,module,exports){
'use strict';
var $export        = require('./_export')
  , createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});
},{"./_create-property":142,"./_export":150,"./_fails":152}],253:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});
},{"./_array-reduce":131,"./_export":150,"./_strict-method":214}],254:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});
},{"./_array-reduce":131,"./_export":150,"./_strict-method":214}],255:[function(require,module,exports){
'use strict';
var $export    = require('./_export')
  , html       = require('./_html')
  , cof        = require('./_cof')
  , toIndex    = require('./_to-index')
  , toLength   = require('./_to-length')
  , arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
},{"./_cof":136,"./_export":150,"./_fails":152,"./_html":159,"./_to-index":223,"./_to-length":226}],256:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $some   = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */){
    return $some(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],257:[function(require,module,exports){
'use strict';
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , fails     = require('./_fails')
  , $sort     = [].sort
  , test      = [1, 2, 3];

$export($export.P + $export.F * (fails(function(){
  // IE8-
  test.sort(undefined);
}) || !fails(function(){
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn){
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});
},{"./_a-function":121,"./_export":150,"./_fails":152,"./_strict-method":214,"./_to-object":227}],258:[function(require,module,exports){
require('./_set-species')('Array');
},{"./_set-species":209}],259:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});
},{"./_export":150}],260:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export')
  , fails   = require('./_fails')
  , getTime = Date.prototype.getTime;

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./_export":150,"./_fails":152}],261:[function(require,module,exports){
'use strict';
var $export     = require('./_export')
  , toObject    = require('./_to-object')
  , toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function(){
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
}), 'Date', {
  toJSON: function toJSON(key){
    var O  = toObject(this)
      , pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});
},{"./_export":150,"./_fails":152,"./_to-object":227,"./_to-primitive":228}],262:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive')
  , proto        = Date.prototype;

if(!(TO_PRIMITIVE in proto))require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
},{"./_date-to-primitive":144,"./_hide":158,"./_wks":235}],263:[function(require,module,exports){
var DateProto    = Date.prototype
  , INVALID_DATE = 'Invalid Date'
  , TO_STRING    = 'toString'
  , $toString    = DateProto[TO_STRING]
  , getTime      = DateProto.getTime;
if(new Date(NaN) + '' != INVALID_DATE){
  require('./_redefine')(DateProto, TO_STRING, function toString(){
    var value = getTime.call(this);
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}
},{"./_redefine":205}],264:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', {bind: require('./_bind')});
},{"./_bind":134,"./_export":150}],265:[function(require,module,exports){
'use strict';
var isObject       = require('./_is-object')
  , getPrototypeOf = require('./_object-gpo')
  , HAS_INSTANCE   = require('./_wks')('hasInstance')
  , FunctionProto  = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
  return false;
}});
},{"./_is-object":167,"./_object-dp":185,"./_object-gpo":192,"./_wks":235}],266:[function(require,module,exports){
var dP         = require('./_object-dp').f
  , createDesc = require('./_property-desc')
  , has        = require('./_has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';

var isExtensible = Object.isExtensible || function(){
  return true;
};

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    try {
      var that = this
        , name = ('' + that).match(nameRE)[1];
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
      return name;
    } catch(e){
      return '';
    }
  }
});
},{"./_descriptors":146,"./_has":157,"./_object-dp":185,"./_property-desc":203}],267:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.1 Map Objects
module.exports = require('./_collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./_collection":140,"./_collection-strong":137}],268:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export')
  , log1p   = require('./_math-log1p')
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./_export":150,"./_math-log1p":178}],269:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export')
  , $asinh  = Math.asinh;

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0 
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});
},{"./_export":150}],270:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export')
  , $atanh  = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0 
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./_export":150}],271:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export')
  , sign    = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./_export":150,"./_math-sign":179}],272:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./_export":150}],273:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./_export":150}],274:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export')
  , $expm1  = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});
},{"./_export":150,"./_math-expm1":177}],275:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export   = require('./_export')
  , sign      = require('./_math-sign')
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./_export":150,"./_math-sign":179}],276:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export')
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./_export":150}],277:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export')
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./_export":150,"./_fails":152}],278:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./_export":150}],279:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', {log1p: require('./_math-log1p')});
},{"./_export":150,"./_math-log1p":178}],280:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./_export":150}],281:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', {sign: require('./_math-sign')});
},{"./_export":150,"./_math-sign":179}],282:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./_export":150,"./_fails":152,"./_math-expm1":177}],283:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./_export":150,"./_math-expm1":177}],284:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./_export":150}],285:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , has               = require('./_has')
  , cof               = require('./_cof')
  , inheritIfRequired = require('./_inherit-if-required')
  , toPrimitive       = require('./_to-primitive')
  , fails             = require('./_fails')
  , gOPN              = require('./_object-gopn').f
  , gOPD              = require('./_object-gopd').f
  , dP                = require('./_object-dp').f
  , $trim             = require('./_string-trim').trim
  , NUMBER            = 'Number'
  , $Number           = global[NUMBER]
  , Base              = $Number
  , proto             = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF        = cof(require('./_object-create')(proto)) == NUMBER
  , TRIM              = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for(var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++){
    if(has(Base, key = keys[j]) && !has($Number, key)){
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}
},{"./_cof":136,"./_descriptors":146,"./_fails":152,"./_global":156,"./_has":157,"./_inherit-if-required":161,"./_object-create":184,"./_object-dp":185,"./_object-gopd":188,"./_object-gopn":190,"./_redefine":205,"./_string-trim":220,"./_to-primitive":228}],286:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./_export":150}],287:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export   = require('./_export')
  , _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./_export":150,"./_global":156}],288:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', {isInteger: require('./_is-integer')});
},{"./_export":150,"./_is-integer":166}],289:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./_export":150}],290:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export   = require('./_export')
  , isInteger = require('./_is-integer')
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./_export":150,"./_is-integer":166}],291:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./_export":150}],292:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./_export":150}],293:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});
},{"./_export":150,"./_parse-float":199}],294:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});
},{"./_export":150,"./_parse-int":200}],295:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , toInteger    = require('./_to-integer')
  , aNumberValue = require('./_a-number-value')
  , repeat       = require('./_string-repeat')
  , $toFixed     = 1..toFixed
  , floor        = Math.floor
  , data         = [0, 0, 0, 0, 0, 0]
  , ERROR        = 'Number.toFixed: incorrect invocation!'
  , ZERO         = '0';

var multiply = function(n, c){
  var i  = -1
    , c2 = c;
  while(++i < 6){
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(n){
  var i = 6
    , c = 0;
  while(--i >= 0){
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function(){
  var i = 6
    , s = '';
  while(--i >= 0){
    if(s !== '' || i === 0 || data[i] !== 0){
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function(x, n, acc){
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x){
  var n  = 0
    , x2 = x;
  while(x2 >= 4096){
    n += 12;
    x2 /= 4096;
  }
  while(x2 >= 2){
    n  += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128..toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function(){
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits){
    var x = aNumberValue(this, ERROR)
      , f = toInteger(fractionDigits)
      , s = ''
      , m = ZERO
      , e, z, j, k;
    if(f < 0 || f > 20)throw RangeError(ERROR);
    if(x != x)return 'NaN';
    if(x <= -1e21 || x >= 1e21)return String(x);
    if(x < 0){
      s = '-';
      x = -x;
    }
    if(x > 1e-21){
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if(e > 0){
        multiply(0, z);
        j = f;
        while(j >= 7){
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while(j >= 23){
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if(f > 0){
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});
},{"./_a-number-value":122,"./_export":150,"./_fails":152,"./_string-repeat":219,"./_to-integer":224}],296:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $fails       = require('./_fails')
  , aNumberValue = require('./_a-number-value')
  , $toPrecision = 1..toPrecision;

$export($export.P + $export.F * ($fails(function(){
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function(){
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision){
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
  }
});
},{"./_a-number-value":122,"./_export":150,"./_fails":152}],297:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"./_export":150,"./_object-assign":183,"dup":106}],298:[function(require,module,exports){
arguments[4][107][0].apply(exports,arguments)
},{"./_export":150,"./_object-create":184,"dup":107}],299:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});
},{"./_descriptors":146,"./_export":150,"./_object-dps":186}],300:[function(require,module,exports){
arguments[4][108][0].apply(exports,arguments)
},{"./_descriptors":146,"./_export":150,"./_object-dp":185,"dup":108}],301:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});
},{"./_is-object":167,"./_meta":180,"./_object-sap":196}],302:[function(require,module,exports){
arguments[4][109][0].apply(exports,arguments)
},{"./_object-gopd":188,"./_object-sap":196,"./_to-iobject":225,"dup":109}],303:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function(){
  return require('./_object-gopn-ext').f;
});
},{"./_object-gopn-ext":189,"./_object-sap":196}],304:[function(require,module,exports){
arguments[4][110][0].apply(exports,arguments)
},{"./_object-gpo":192,"./_object-sap":196,"./_to-object":227,"dup":110}],305:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./_is-object":167,"./_object-sap":196}],306:[function(require,module,exports){
arguments[4][111][0].apply(exports,arguments)
},{"./_is-object":167,"./_object-sap":196,"dup":111}],307:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./_is-object":167,"./_object-sap":196}],308:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', {is: require('./_same-value')});
},{"./_export":150,"./_same-value":207}],309:[function(require,module,exports){
arguments[4][112][0].apply(exports,arguments)
},{"./_object-keys":194,"./_object-sap":196,"./_to-object":227,"dup":112}],310:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});
},{"./_is-object":167,"./_meta":180,"./_object-sap":196}],311:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});
},{"./_is-object":167,"./_meta":180,"./_object-sap":196}],312:[function(require,module,exports){
arguments[4][113][0].apply(exports,arguments)
},{"./_export":150,"./_set-proto":208,"dup":113}],313:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof')
  , test    = {};
test[require('./_wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./_redefine')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./_classof":135,"./_redefine":205,"./_wks":235}],314:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});
},{"./_export":150,"./_parse-float":199}],315:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});
},{"./_export":150,"./_parse-int":200}],316:[function(require,module,exports){
arguments[4][115][0].apply(exports,arguments)
},{"./_a-function":121,"./_an-instance":124,"./_classof":135,"./_core":141,"./_ctx":143,"./_export":150,"./_for-of":155,"./_global":156,"./_is-object":167,"./_iter-detect":172,"./_library":176,"./_microtask":182,"./_redefine-all":204,"./_set-species":209,"./_set-to-string-tag":210,"./_species-constructor":213,"./_task":222,"./_wks":235,"dup":115}],317:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , anObject  = require('./_an-object')
  , rApply    = (require('./_global').Reflect || {}).apply
  , fApply    = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function(){
  rApply(function(){});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    var T = aFunction(target)
      , L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});
},{"./_a-function":121,"./_an-object":125,"./_export":150,"./_fails":152,"./_global":156}],318:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export    = require('./_export')
  , create     = require('./_object-create')
  , aFunction  = require('./_a-function')
  , anObject   = require('./_an-object')
  , isObject   = require('./_is-object')
  , fails      = require('./_fails')
  , bind       = require('./_bind')
  , rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function(){
  function F(){}
  return !(rConstruct(function(){}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function(){
  rConstruct(function(){});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      switch(args.length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./_a-function":121,"./_an-object":125,"./_bind":134,"./_export":150,"./_fails":152,"./_global":156,"./_is-object":167,"./_object-create":184}],319:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = require('./_object-dp')
  , $export     = require('./_export')
  , anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":125,"./_export":150,"./_fails":152,"./_object-dp":185,"./_to-primitive":228}],320:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = require('./_export')
  , gOPD     = require('./_object-gopd').f
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./_an-object":125,"./_export":150,"./_object-gopd":188}],321:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export  = require('./_export')
  , anObject = require('./_an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./_an-object":125,"./_export":150,"./_iter-create":170}],322:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = require('./_object-gopd')
  , $export  = require('./_export')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});
},{"./_an-object":125,"./_export":150,"./_object-gopd":188}],323:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = require('./_export')
  , getProto = require('./_object-gpo')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./_an-object":125,"./_export":150,"./_object-gpo":192}],324:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , isObject       = require('./_is-object')
  , anObject       = require('./_an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});
},{"./_an-object":125,"./_export":150,"./_has":157,"./_is-object":167,"./_object-gopd":188,"./_object-gpo":192}],325:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./_export":150}],326:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export       = require('./_export')
  , anObject      = require('./_an-object')
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./_an-object":125,"./_export":150}],327:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});
},{"./_export":150,"./_own-keys":198}],328:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export            = require('./_export')
  , anObject           = require('./_an-object')
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":125,"./_export":150}],329:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = require('./_export')
  , setProto = require('./_set-proto');

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_export":150,"./_set-proto":208}],330:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = require('./_object-dp')
  , gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , createDesc     = require('./_property-desc')
  , anObject       = require('./_an-object')
  , isObject       = require('./_is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});
},{"./_an-object":125,"./_export":150,"./_has":157,"./_is-object":167,"./_object-dp":185,"./_object-gopd":188,"./_object-gpo":192,"./_property-desc":203}],331:[function(require,module,exports){
var global            = require('./_global')
  , inheritIfRequired = require('./_inherit-if-required')
  , dP                = require('./_object-dp').f
  , gOPN              = require('./_object-gopn').f
  , isRegExp          = require('./_is-regexp')
  , $flags            = require('./_flags')
  , $RegExp           = global.RegExp
  , Base              = $RegExp
  , proto             = $RegExp.prototype
  , re1               = /a/g
  , re2               = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW       = new $RegExp(re1) !== re1;

if(require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function(){
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var tiRE = this instanceof $RegExp
      , piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function(key){
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  };
  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');
},{"./_descriptors":146,"./_fails":152,"./_flags":154,"./_global":156,"./_inherit-if-required":161,"./_is-regexp":168,"./_object-dp":185,"./_object-gopn":190,"./_redefine":205,"./_set-species":209,"./_wks":235}],332:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});
},{"./_descriptors":146,"./_flags":154,"./_object-dp":185}],333:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});
},{"./_fix-re-wks":153}],334:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});
},{"./_fix-re-wks":153}],335:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});
},{"./_fix-re-wks":153}],336:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = require('./_is-regexp')
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});
},{"./_fix-re-wks":153,"./_is-regexp":168}],337:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject    = require('./_an-object')
  , $flags      = require('./_flags')
  , DESCRIPTORS = require('./_descriptors')
  , TO_STRING   = 'toString'
  , $toString   = /./[TO_STRING];

var define = function(fn){
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if(require('./_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
  define(function toString(){
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if($toString.name != TO_STRING){
  define(function toString(){
    return $toString.call(this);
  });
}
},{"./_an-object":125,"./_descriptors":146,"./_fails":152,"./_flags":154,"./_redefine":205,"./es6.regexp.flags":332}],338:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.2 Set Objects
module.exports = require('./_collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./_collection":140,"./_collection-strong":137}],339:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function(createHTML){
  return function anchor(name){
    return createHTML(this, 'a', 'name', name);
  }
});
},{"./_string-html":217}],340:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function(createHTML){
  return function big(){
    return createHTML(this, 'big', '', '');
  }
});
},{"./_string-html":217}],341:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function(createHTML){
  return function blink(){
    return createHTML(this, 'blink', '', '');
  }
});
},{"./_string-html":217}],342:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function(createHTML){
  return function bold(){
    return createHTML(this, 'b', '', '');
  }
});
},{"./_string-html":217}],343:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $at     = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./_export":150,"./_string-at":215}],344:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export   = require('./_export')
  , toLength  = require('./_to-length')
  , context   = require('./_string-context')
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});
},{"./_export":150,"./_fails-is-regexp":151,"./_string-context":216,"./_to-length":226}],345:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function(createHTML){
  return function fixed(){
    return createHTML(this, 'tt', '', '');
  }
});
},{"./_string-html":217}],346:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function(createHTML){
  return function fontcolor(color){
    return createHTML(this, 'font', 'color', color);
  }
});
},{"./_string-html":217}],347:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function(createHTML){
  return function fontsize(size){
    return createHTML(this, 'font', 'size', size);
  }
});
},{"./_string-html":217}],348:[function(require,module,exports){
var $export        = require('./_export')
  , toIndex        = require('./_to-index')
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./_export":150,"./_to-index":223}],349:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export  = require('./_export')
  , context  = require('./_string-context')
  , INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});
},{"./_export":150,"./_fails-is-regexp":151,"./_string-context":216}],350:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function(createHTML){
  return function italics(){
    return createHTML(this, 'i', '', '');
  }
});
},{"./_string-html":217}],351:[function(require,module,exports){
arguments[4][116][0].apply(exports,arguments)
},{"./_iter-define":171,"./_string-at":215,"dup":116}],352:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function(createHTML){
  return function link(url){
    return createHTML(this, 'a', 'href', url);
  }
});
},{"./_string-html":217}],353:[function(require,module,exports){
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});
},{"./_export":150,"./_to-iobject":225,"./_to-length":226}],354:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});
},{"./_export":150,"./_string-repeat":219}],355:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function(createHTML){
  return function small(){
    return createHTML(this, 'small', '', '');
  }
});
},{"./_string-html":217}],356:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export     = require('./_export')
  , toLength    = require('./_to-length')
  , context     = require('./_string-context')
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});
},{"./_export":150,"./_fails-is-regexp":151,"./_string-context":216,"./_to-length":226}],357:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function(createHTML){
  return function strike(){
    return createHTML(this, 'strike', '', '');
  }
});
},{"./_string-html":217}],358:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function(createHTML){
  return function sub(){
    return createHTML(this, 'sub', '', '');
  }
});
},{"./_string-html":217}],359:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function(createHTML){
  return function sup(){
    return createHTML(this, 'sup', '', '');
  }
});
},{"./_string-html":217}],360:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./_string-trim":220}],361:[function(require,module,exports){
arguments[4][117][0].apply(exports,arguments)
},{"./_an-object":125,"./_descriptors":146,"./_enum-keys":149,"./_export":150,"./_fails":152,"./_global":156,"./_has":157,"./_hide":158,"./_is-array":165,"./_keyof":175,"./_library":176,"./_meta":180,"./_object-create":184,"./_object-dp":185,"./_object-gopd":188,"./_object-gopn":190,"./_object-gopn-ext":189,"./_object-gops":191,"./_object-keys":194,"./_object-pie":195,"./_property-desc":203,"./_redefine":205,"./_set-to-string-tag":210,"./_shared":212,"./_to-iobject":225,"./_to-primitive":228,"./_uid":232,"./_wks":235,"./_wks-define":233,"./_wks-ext":234,"dup":117}],362:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $typed       = require('./_typed')
  , buffer       = require('./_typed-buffer')
  , anObject     = require('./_an-object')
  , toIndex      = require('./_to-index')
  , toLength     = require('./_to-length')
  , isObject     = require('./_is-object')
  , ArrayBuffer  = require('./_global').ArrayBuffer
  , speciesConstructor = require('./_species-constructor')
  , $ArrayBuffer = buffer.ArrayBuffer
  , $DataView    = buffer.DataView
  , $isView      = $typed.ABV && ArrayBuffer.isView
  , $slice       = $ArrayBuffer.prototype.slice
  , VIEW         = $typed.VIEW
  , ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it){
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function(){
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end){
    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
    var len    = anObject(this).byteLength
      , first  = toIndex(start, len)
      , final  = toIndex(end === undefined ? len : end, len)
      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
      , viewS  = new $DataView(this)
      , viewT  = new $DataView(result)
      , index  = 0;
    while(first < final){
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);
},{"./_an-object":125,"./_export":150,"./_fails":152,"./_global":156,"./_is-object":167,"./_set-species":209,"./_species-constructor":213,"./_to-index":223,"./_to-length":226,"./_typed":231,"./_typed-buffer":230}],363:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});
},{"./_export":150,"./_typed":231,"./_typed-buffer":230}],364:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],365:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],366:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],367:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],368:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],369:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],370:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],371:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],372:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);
},{"./_typed-array":229}],373:[function(require,module,exports){
'use strict';
var each         = require('./_array-methods')(0)
  , redefine     = require('./_redefine')
  , meta         = require('./_meta')
  , assign       = require('./_object-assign')
  , weak         = require('./_collection-weak')
  , isObject     = require('./_is-object')
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./_array-methods":130,"./_collection":140,"./_collection-weak":139,"./_is-object":167,"./_meta":180,"./_object-assign":183,"./_redefine":205}],374:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');

// 23.4 WeakSet Objects
require('./_collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./_collection":140,"./_collection-weak":139}],375:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export   = require('./_export')
  , $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');
},{"./_add-to-unscopables":123,"./_array-includes":129,"./_export":150}],376:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export   = require('./_export')
  , microtask = require('./_microtask')()
  , process   = require('./_global').process
  , isNode    = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn){
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});
},{"./_cof":136,"./_export":150,"./_global":156,"./_microtask":182}],377:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export')
  , cof     = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it){
    return cof(it) === 'Error';
  }
});
},{"./_cof":136,"./_export":150}],378:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});
},{"./_collection-to-json":138,"./_export":150}],379:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});
},{"./_export":150}],380:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >> 16
      , v1 = $v >> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});
},{"./_export":150}],381:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});
},{"./_export":150}],382:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >>> 16
      , v1 = $v >>> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});
},{"./_export":150}],383:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter){
    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":121,"./_descriptors":146,"./_export":150,"./_object-dp":185,"./_object-forced-pam":187,"./_to-object":227}],384:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter){
    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":121,"./_descriptors":146,"./_export":150,"./_object-dp":185,"./_object-forced-pam":187,"./_to-object":227}],385:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export  = require('./_export')
  , $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./_export":150,"./_object-to-array":197}],386:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export        = require('./_export')
  , ownKeys        = require('./_own-keys')
  , toIObject      = require('./_to-iobject')
  , gOPD           = require('./_object-gopd')
  , createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key;
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
    return result;
  }
});
},{"./_create-property":142,"./_export":150,"./_object-gopd":188,"./_own-keys":198,"./_to-iobject":225}],387:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.get;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":146,"./_export":150,"./_object-forced-pam":187,"./_object-gopd":188,"./_object-gpo":192,"./_to-object":227,"./_to-primitive":228}],388:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.set;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":146,"./_export":150,"./_object-forced-pam":187,"./_object-gopd":188,"./_object-gpo":192,"./_to-object":227,"./_to-primitive":228}],389:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export')
  , $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./_export":150,"./_object-to-array":197}],390:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export     = require('./_export')
  , global      = require('./_global')
  , core        = require('./_core')
  , microtask   = require('./_microtask')()
  , OBSERVABLE  = require('./_wks')('observable')
  , aFunction   = require('./_a-function')
  , anObject    = require('./_an-object')
  , anInstance  = require('./_an-instance')
  , redefineAll = require('./_redefine-all')
  , hide        = require('./_hide')
  , forOf       = require('./_for-of')
  , RETURN      = forOf.RETURN;

var getMethod = function(fn){
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function(subscription){
  var cleanup = subscription._c;
  if(cleanup){
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function(subscription){
  return subscription._o === undefined;
};

var closeSubscription = function(subscription){
  if(!subscriptionClosed(subscription)){
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function(observer, subscriber){
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup      = subscriber(observer)
      , subscription = cleanup;
    if(cleanup != null){
      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch(e){
    observer.error(e);
    return;
  } if(subscriptionClosed(this))cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe(){ closeSubscription(this); }
});

var SubscriptionObserver = function(subscription){
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if(m)return m.call(observer, value);
      } catch(e){
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value){
    var subscription = this._s;
    if(subscriptionClosed(subscription))throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if(!m)throw value;
      value = m.call(observer, value);
    } catch(e){
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch(e){
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber){
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer){
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn){
    var that = this;
    return new (core.Promise || global.Promise)(function(resolve, reject){
      aFunction(fn);
      var subscription = that.subscribe({
        next : function(value){
          try {
            return fn(value);
          } catch(e){
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x){
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if(method){
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function(observer){
        return observable.subscribe(observer);
      });
    }
    return new C(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          try {
            if(forOf(x, false, function(it){
              observer.next(it);
              if(done)return RETURN;
            }) === RETURN)return;
          } catch(e){
            if(done)throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  },
  of: function of(){
    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          for(var i = 0; i < items.length; ++i){
            observer.next(items[i]);
            if(done)return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function(){ return this; });

$export($export.G, {Observable: $Observable});

require('./_set-species')('Observable');
},{"./_a-function":121,"./_an-instance":124,"./_an-object":125,"./_core":141,"./_export":150,"./_for-of":155,"./_global":156,"./_hide":158,"./_microtask":182,"./_redefine-all":204,"./_set-species":209,"./_wks":235}],391:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
}});
},{"./_an-object":125,"./_metadata":181}],392:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , toMetaKey              = metadata.key
  , getOrCreateMetadataMap = metadata.map
  , store                  = metadata.store;

metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
  if(metadataMap.size)return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
}});
},{"./_an-object":125,"./_metadata":181}],393:[function(require,module,exports){
var Set                     = require('./es6.set')
  , from                    = require('./_array-from-iterable')
  , metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , getPrototypeOf          = require('./_object-gpo')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

var ordinaryMetadataKeys = function(O, P){
  var oKeys  = ordinaryOwnMetadataKeys(O, P)
    , parent = getPrototypeOf(O);
  if(parent === null)return oKeys;
  var pKeys  = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":125,"./_array-from-iterable":128,"./_metadata":181,"./_object-gpo":192,"./es6.set":338}],394:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

var ordinaryGetMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181,"./_object-gpo":192}],395:[function(require,module,exports){
var metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":125,"./_metadata":181}],396:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181}],397:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

var ordinaryHasMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181,"./_object-gpo":192}],398:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181}],399:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , aFunction                 = require('./_a-function')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({metadata: function metadata(metadataKey, metadataValue){
  return function decorator(target, targetKey){
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
}});
},{"./_a-function":121,"./_an-object":125,"./_metadata":181}],400:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});
},{"./_collection-to-json":138,"./_export":150}],401:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export')
  , $at     = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./_export":150,"./_string-at":215}],402:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export     = require('./_export')
  , defined     = require('./_defined')
  , toLength    = require('./_to-length')
  , isRegExp    = require('./_is-regexp')
  , getFlags    = require('./_flags')
  , RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function(regexp, string){
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){
  var match = this._r.exec(this._s);
  return {value: match, done: match === null};
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp){
    defined(this);
    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
    var S     = String(this)
      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});
},{"./_defined":145,"./_export":150,"./_flags":154,"./_is-regexp":168,"./_iter-create":170,"./_to-length":226}],403:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});
},{"./_export":150,"./_string-pad":218}],404:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});
},{"./_export":150,"./_string-pad":218}],405:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
}, 'trimStart');
},{"./_string-trim":220}],406:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
}, 'trimEnd');
},{"./_string-trim":220}],407:[function(require,module,exports){
arguments[4][118][0].apply(exports,arguments)
},{"./_wks-define":233,"dup":118}],408:[function(require,module,exports){
arguments[4][119][0].apply(exports,arguments)
},{"./_wks-define":233,"dup":119}],409:[function(require,module,exports){
// https://github.com/ljharb/proposal-global
var $export = require('./_export');

$export($export.S, 'System', {global: require('./_global')});
},{"./_export":150,"./_global":156}],410:[function(require,module,exports){
var $iterators    = require('./es6.array.iterator')
  , redefine      = require('./_redefine')
  , global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , wks           = require('./_wks')
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}
},{"./_global":156,"./_hide":158,"./_iterators":174,"./_redefine":205,"./_wks":235,"./es6.array.iterator":248}],411:[function(require,module,exports){
var $export = require('./_export')
  , $task   = require('./_task');
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./_export":150,"./_task":222}],412:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./_global')
  , $export    = require('./_export')
  , invoke     = require('./_invoke')
  , partial    = require('./_partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./_export":150,"./_global":156,"./_invoke":162,"./_partial":201}],413:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.umulh');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');
},{"./modules/_core":141,"./modules/es6.array.copy-within":238,"./modules/es6.array.every":239,"./modules/es6.array.fill":240,"./modules/es6.array.filter":241,"./modules/es6.array.find":243,"./modules/es6.array.find-index":242,"./modules/es6.array.for-each":244,"./modules/es6.array.from":245,"./modules/es6.array.index-of":246,"./modules/es6.array.is-array":247,"./modules/es6.array.iterator":248,"./modules/es6.array.join":249,"./modules/es6.array.last-index-of":250,"./modules/es6.array.map":251,"./modules/es6.array.of":252,"./modules/es6.array.reduce":254,"./modules/es6.array.reduce-right":253,"./modules/es6.array.slice":255,"./modules/es6.array.some":256,"./modules/es6.array.sort":257,"./modules/es6.array.species":258,"./modules/es6.date.now":259,"./modules/es6.date.to-iso-string":260,"./modules/es6.date.to-json":261,"./modules/es6.date.to-primitive":262,"./modules/es6.date.to-string":263,"./modules/es6.function.bind":264,"./modules/es6.function.has-instance":265,"./modules/es6.function.name":266,"./modules/es6.map":267,"./modules/es6.math.acosh":268,"./modules/es6.math.asinh":269,"./modules/es6.math.atanh":270,"./modules/es6.math.cbrt":271,"./modules/es6.math.clz32":272,"./modules/es6.math.cosh":273,"./modules/es6.math.expm1":274,"./modules/es6.math.fround":275,"./modules/es6.math.hypot":276,"./modules/es6.math.imul":277,"./modules/es6.math.log10":278,"./modules/es6.math.log1p":279,"./modules/es6.math.log2":280,"./modules/es6.math.sign":281,"./modules/es6.math.sinh":282,"./modules/es6.math.tanh":283,"./modules/es6.math.trunc":284,"./modules/es6.number.constructor":285,"./modules/es6.number.epsilon":286,"./modules/es6.number.is-finite":287,"./modules/es6.number.is-integer":288,"./modules/es6.number.is-nan":289,"./modules/es6.number.is-safe-integer":290,"./modules/es6.number.max-safe-integer":291,"./modules/es6.number.min-safe-integer":292,"./modules/es6.number.parse-float":293,"./modules/es6.number.parse-int":294,"./modules/es6.number.to-fixed":295,"./modules/es6.number.to-precision":296,"./modules/es6.object.assign":297,"./modules/es6.object.create":298,"./modules/es6.object.define-properties":299,"./modules/es6.object.define-property":300,"./modules/es6.object.freeze":301,"./modules/es6.object.get-own-property-descriptor":302,"./modules/es6.object.get-own-property-names":303,"./modules/es6.object.get-prototype-of":304,"./modules/es6.object.is":308,"./modules/es6.object.is-extensible":305,"./modules/es6.object.is-frozen":306,"./modules/es6.object.is-sealed":307,"./modules/es6.object.keys":309,"./modules/es6.object.prevent-extensions":310,"./modules/es6.object.seal":311,"./modules/es6.object.set-prototype-of":312,"./modules/es6.object.to-string":313,"./modules/es6.parse-float":314,"./modules/es6.parse-int":315,"./modules/es6.promise":316,"./modules/es6.reflect.apply":317,"./modules/es6.reflect.construct":318,"./modules/es6.reflect.define-property":319,"./modules/es6.reflect.delete-property":320,"./modules/es6.reflect.enumerate":321,"./modules/es6.reflect.get":324,"./modules/es6.reflect.get-own-property-descriptor":322,"./modules/es6.reflect.get-prototype-of":323,"./modules/es6.reflect.has":325,"./modules/es6.reflect.is-extensible":326,"./modules/es6.reflect.own-keys":327,"./modules/es6.reflect.prevent-extensions":328,"./modules/es6.reflect.set":330,"./modules/es6.reflect.set-prototype-of":329,"./modules/es6.regexp.constructor":331,"./modules/es6.regexp.flags":332,"./modules/es6.regexp.match":333,"./modules/es6.regexp.replace":334,"./modules/es6.regexp.search":335,"./modules/es6.regexp.split":336,"./modules/es6.regexp.to-string":337,"./modules/es6.set":338,"./modules/es6.string.anchor":339,"./modules/es6.string.big":340,"./modules/es6.string.blink":341,"./modules/es6.string.bold":342,"./modules/es6.string.code-point-at":343,"./modules/es6.string.ends-with":344,"./modules/es6.string.fixed":345,"./modules/es6.string.fontcolor":346,"./modules/es6.string.fontsize":347,"./modules/es6.string.from-code-point":348,"./modules/es6.string.includes":349,"./modules/es6.string.italics":350,"./modules/es6.string.iterator":351,"./modules/es6.string.link":352,"./modules/es6.string.raw":353,"./modules/es6.string.repeat":354,"./modules/es6.string.small":355,"./modules/es6.string.starts-with":356,"./modules/es6.string.strike":357,"./modules/es6.string.sub":358,"./modules/es6.string.sup":359,"./modules/es6.string.trim":360,"./modules/es6.symbol":361,"./modules/es6.typed.array-buffer":362,"./modules/es6.typed.data-view":363,"./modules/es6.typed.float32-array":364,"./modules/es6.typed.float64-array":365,"./modules/es6.typed.int16-array":366,"./modules/es6.typed.int32-array":367,"./modules/es6.typed.int8-array":368,"./modules/es6.typed.uint16-array":369,"./modules/es6.typed.uint32-array":370,"./modules/es6.typed.uint8-array":371,"./modules/es6.typed.uint8-clamped-array":372,"./modules/es6.weak-map":373,"./modules/es6.weak-set":374,"./modules/es7.array.includes":375,"./modules/es7.asap":376,"./modules/es7.error.is-error":377,"./modules/es7.map.to-json":378,"./modules/es7.math.iaddh":379,"./modules/es7.math.imulh":380,"./modules/es7.math.isubh":381,"./modules/es7.math.umulh":382,"./modules/es7.object.define-getter":383,"./modules/es7.object.define-setter":384,"./modules/es7.object.entries":385,"./modules/es7.object.get-own-property-descriptors":386,"./modules/es7.object.lookup-getter":387,"./modules/es7.object.lookup-setter":388,"./modules/es7.object.values":389,"./modules/es7.observable":390,"./modules/es7.reflect.define-metadata":391,"./modules/es7.reflect.delete-metadata":392,"./modules/es7.reflect.get-metadata":394,"./modules/es7.reflect.get-metadata-keys":393,"./modules/es7.reflect.get-own-metadata":396,"./modules/es7.reflect.get-own-metadata-keys":395,"./modules/es7.reflect.has-metadata":397,"./modules/es7.reflect.has-own-metadata":398,"./modules/es7.reflect.metadata":399,"./modules/es7.set.to-json":400,"./modules/es7.string.at":401,"./modules/es7.string.match-all":402,"./modules/es7.string.pad-end":403,"./modules/es7.string.pad-start":404,"./modules/es7.string.trim-left":405,"./modules/es7.string.trim-right":406,"./modules/es7.symbol.async-iterator":407,"./modules/es7.symbol.observable":408,"./modules/es7.system.global":409,"./modules/web.dom.iterable":410,"./modules/web.immediate":411,"./modules/web.timers":412}],414:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],415:[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = arg;

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":414}],416:[function(require,module,exports){
(function (global){
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for MessageFactory.js 
// version: 0.5.1
// Last build: Mon Jan 16 2017 09:09:26 GMT+0000 (GMT Standard Time)

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.MessageFactory=e()}}(function(){var e;return function t(e,r,n){function o(a,s){if(!r[a]){if(!e[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=r[a]={exports:{}};e[a][0].call(l.exports,function(t){var r=e[a][1][t];return o(r?r:t)},l,l.exports,t,e,r,n)}return r[a].exports}for(var i="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,r){t.exports={"default":e("core-js/library/fn/json/stringify"),__esModule:!0}},{"core-js/library/fn/json/stringify":16}],2:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/create"),__esModule:!0}},{"core-js/library/fn/object/create":17}],3:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/define-property"),__esModule:!0}},{"core-js/library/fn/object/define-property":18}],4:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/freeze"),__esModule:!0}},{"core-js/library/fn/object/freeze":19}],5:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/get-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/get-prototype-of":20}],6:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/keys"),__esModule:!0}},{"core-js/library/fn/object/keys":21}],7:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/set-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/set-prototype-of":22}],8:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol"),__esModule:!0}},{"core-js/library/fn/symbol":23}],9:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol/iterator"),__esModule:!0}},{"core-js/library/fn/symbol/iterator":24}],10:[function(e,t,r){"use strict";r.__esModule=!0,r["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},{}],11:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/define-property"),i=n(o);r["default"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i["default"])(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},{"../core-js/object/define-property":3}],12:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/set-prototype-of"),i=n(o),a=e("../core-js/object/create"),s=n(a),u=e("../helpers/typeof"),c=n(u);r["default"]=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":(0,c["default"])(t)));e.prototype=(0,s["default"])(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(i["default"]?(0,i["default"])(e,t):e.__proto__=t)}},{"../core-js/object/create":2,"../core-js/object/set-prototype-of":7,"../helpers/typeof":14}],13:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../helpers/typeof"),i=n(o);r["default"]=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":(0,i["default"])(t))&&"function"!=typeof t?e:t}},{"../helpers/typeof":14}],14:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/symbol/iterator"),i=n(o),a=e("../core-js/symbol"),s=n(a),u="function"==typeof s["default"]&&"symbol"==typeof i["default"]?function(e){return typeof e}:function(e){return e&&"function"==typeof s["default"]&&e.constructor===s["default"]&&e!==s["default"].prototype?"symbol":typeof e};r["default"]="function"==typeof s["default"]&&"symbol"===u(i["default"])?function(e){return"undefined"==typeof e?"undefined":u(e)}:function(e){return e&&"function"==typeof s["default"]&&e.constructor===s["default"]&&e!==s["default"].prototype?"symbol":"undefined"==typeof e?"undefined":u(e)}},{"../core-js/symbol":8,"../core-js/symbol/iterator":9}],15:[function(e,t,r){t.exports=e("regenerator-runtime")},{"regenerator-runtime":97}],16:[function(e,t,r){var n=e("../../modules/_core"),o=n.JSON||(n.JSON={stringify:JSON.stringify});t.exports=function(e){return o.stringify.apply(o,arguments)}},{"../../modules/_core":30}],17:[function(e,t,r){e("../../modules/es6.object.create");var n=e("../../modules/_core").Object;t.exports=function(e,t){return n.create(e,t)}},{"../../modules/_core":30,"../../modules/es6.object.create":84}],18:[function(e,t,r){e("../../modules/es6.object.define-property");var n=e("../../modules/_core").Object;t.exports=function(e,t,r){return n.defineProperty(e,t,r)}},{"../../modules/_core":30,"../../modules/es6.object.define-property":85}],19:[function(e,t,r){e("../../modules/es6.object.freeze"),t.exports=e("../../modules/_core").Object.freeze},{"../../modules/_core":30,"../../modules/es6.object.freeze":86}],20:[function(e,t,r){e("../../modules/es6.object.get-prototype-of"),t.exports=e("../../modules/_core").Object.getPrototypeOf},{"../../modules/_core":30,"../../modules/es6.object.get-prototype-of":87}],21:[function(e,t,r){e("../../modules/es6.object.keys"),t.exports=e("../../modules/_core").Object.keys},{"../../modules/_core":30,"../../modules/es6.object.keys":88}],22:[function(e,t,r){e("../../modules/es6.object.set-prototype-of"),t.exports=e("../../modules/_core").Object.setPrototypeOf},{"../../modules/_core":30,"../../modules/es6.object.set-prototype-of":89}],23:[function(e,t,r){e("../../modules/es6.symbol"),e("../../modules/es6.object.to-string"),e("../../modules/es7.symbol.async-iterator"),e("../../modules/es7.symbol.observable"),t.exports=e("../../modules/_core").Symbol},{"../../modules/_core":30,"../../modules/es6.object.to-string":90,"../../modules/es6.symbol":92,"../../modules/es7.symbol.async-iterator":93,"../../modules/es7.symbol.observable":94}],24:[function(e,t,r){e("../../modules/es6.string.iterator"),e("../../modules/web.dom.iterable"),t.exports=e("../../modules/_wks-ext").f("iterator")},{"../../modules/_wks-ext":81,"../../modules/es6.string.iterator":91,"../../modules/web.dom.iterable":95}],25:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],26:[function(e,t,r){t.exports=function(){}},{}],27:[function(e,t,r){var n=e("./_is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":46}],28:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_to-length"),i=e("./_to-index");t.exports=function(e){return function(t,r,a){var s,u=n(t),c=o(u.length),l=i(a,c);if(e&&r!=r){for(;c>l;)if(s=u[l++],s!=s)return!0}else for(;c>l;l++)if((e||l in u)&&u[l]===r)return e||l||0;return!e&&-1}}},{"./_to-index":73,"./_to-iobject":75,"./_to-length":76}],29:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],30:[function(e,t,r){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},{}],31:[function(e,t,r){var n=e("./_a-function");t.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},{"./_a-function":25}],32:[function(e,t,r){t.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},{}],33:[function(e,t,r){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":38}],34:[function(e,t,r){var n=e("./_is-object"),o=e("./_global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./_global":39,"./_is-object":46}],35:[function(e,t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],36:[function(e,t,r){var n=e("./_object-keys"),o=e("./_object-gops"),i=e("./_object-pie");t.exports=function(e){var t=n(e),r=o.f;if(r)for(var a,s=r(e),u=i.f,c=0;s.length>c;)u.call(e,a=s[c++])&&t.push(a);return t}},{"./_object-gops":60,"./_object-keys":63,"./_object-pie":64}],37:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_ctx"),a=e("./_hide"),s="prototype",u=function(e,t,r){var c,l,f,d=e&u.F,p=e&u.G,h=e&u.S,y=e&u.P,m=e&u.B,v=e&u.W,_=p?o:o[t]||(o[t]={}),b=_[s],g=p?n:h?n[t]:(n[t]||{})[s];p&&(r=t);for(c in r)l=!d&&g&&void 0!==g[c],l&&c in _||(f=l?g[c]:r[c],_[c]=p&&"function"!=typeof g[c]?r[c]:m&&l?i(f,n):v&&g[c]==f?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t[s]=e[s],t}(f):y&&"function"==typeof f?i(Function.call,f):f,y&&((_.virtual||(_.virtual={}))[c]=f,e&u.R&&b&&!b[c]&&a(b,c,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},{"./_core":30,"./_ctx":31,"./_global":39,"./_hide":41}],38:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],39:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],40:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],41:[function(e,t,r){var n=e("./_object-dp"),o=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./_descriptors":33,"./_object-dp":55,"./_property-desc":66}],42:[function(e,t,r){t.exports=e("./_global").document&&document.documentElement},{"./_global":39}],43:[function(e,t,r){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":33,"./_dom-create":34,"./_fails":38}],44:[function(e,t,r){var n=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./_cof":29}],45:[function(e,t,r){var n=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==n(e)}},{"./_cof":29}],46:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],47:[function(e,t,r){"use strict";var n=e("./_object-create"),o=e("./_property-desc"),i=e("./_set-to-string-tag"),a={};e("./_hide")(a,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),i(e,t+" Iterator")}},{"./_hide":41,"./_object-create":54,"./_property-desc":66,"./_set-to-string-tag":69,"./_wks":82}],48:[function(e,t,r){"use strict";var n=e("./_library"),o=e("./_export"),i=e("./_redefine"),a=e("./_hide"),s=e("./_has"),u=e("./_iterators"),c=e("./_iter-create"),l=e("./_set-to-string-tag"),f=e("./_object-gpo"),d=e("./_wks")("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",y="keys",m="values",v=function(){return this};t.exports=function(e,t,r,_,b,g,E){c(r,t,_);var j,w,O,M=function(e){if(!p&&e in R)return R[e];switch(e){case y:return function(){return new r(this,e)};case m:return function(){return new r(this,e)}}return function(){return new r(this,e)}},x=t+" Iterator",P=b==m,k=!1,R=e.prototype,S=R[d]||R[h]||b&&R[b],T=S||M(b),A=b?P?M("entries"):T:void 0,N="Array"==t?R.entries||S:S;if(N&&(O=f(N.call(new e)),O!==Object.prototype&&(l(O,x,!0),n||s(O,d)||a(O,d,v))),P&&S&&S.name!==m&&(k=!0,T=function(){return S.call(this)}),n&&!E||!p&&!k&&R[d]||a(R,d,T),u[t]=T,u[x]=v,b)if(j={values:P?T:M(m),keys:g?T:M(y),entries:A},E)for(w in j)w in R||i(R,w,j[w]);else o(o.P+o.F*(p||k),t,j);return j}},{"./_export":37,"./_has":40,"./_hide":41,"./_iter-create":47,"./_iterators":50,"./_library":52,"./_object-gpo":61,"./_redefine":67,"./_set-to-string-tag":69,"./_wks":82}],49:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],50:[function(e,t,r){t.exports={}},{}],51:[function(e,t,r){var n=e("./_object-keys"),o=e("./_to-iobject");t.exports=function(e,t){for(var r,i=o(e),a=n(i),s=a.length,u=0;s>u;)if(i[r=a[u++]]===t)return r}},{"./_object-keys":63,"./_to-iobject":75}],52:[function(e,t,r){t.exports=!0},{}],53:[function(e,t,r){var n=e("./_uid")("meta"),o=e("./_is-object"),i=e("./_has"),a=e("./_object-dp").f,s=0,u=Object.isExtensible||function(){return!0},c=!e("./_fails")(function(){return u(Object.preventExtensions({}))}),l=function(e){a(e,n,{value:{i:"O"+ ++s,w:{}}})},f=function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,n)){if(!u(e))return"F";if(!t)return"E";l(e)}return e[n].i},d=function(e,t){if(!i(e,n)){if(!u(e))return!0;if(!t)return!1;l(e)}return e[n].w},p=function(e){return c&&h.NEED&&u(e)&&!i(e,n)&&l(e),e},h=t.exports={KEY:n,NEED:!1,fastKey:f,getWeak:d,onFreeze:p}},{"./_fails":38,"./_has":40,"./_is-object":46,"./_object-dp":55,"./_uid":79}],54:[function(e,t,r){var n=e("./_an-object"),o=e("./_object-dps"),i=e("./_enum-bug-keys"),a=e("./_shared-key")("IE_PROTO"),s=function(){},u="prototype",c=function(){var t,r=e("./_dom-create")("iframe"),n=i.length,o="<",a=">";for(r.style.display="none",e("./_html").appendChild(r),r.src="javascript:",t=r.contentWindow.document,t.open(),t.write(o+"script"+a+"document.F=Object"+o+"/script"+a),t.close(),c=t.F;n--;)delete c[u][i[n]];return c()};t.exports=Object.create||function(e,t){var r;return null!==e?(s[u]=n(e),r=new s,s[u]=null,r[a]=e):r=c(),void 0===t?r:o(r,t)}},{"./_an-object":27,"./_dom-create":34,"./_enum-bug-keys":35,"./_html":42,"./_object-dps":56,"./_shared-key":70}],55:[function(e,t,r){var n=e("./_an-object"),o=e("./_ie8-dom-define"),i=e("./_to-primitive"),a=Object.defineProperty;r.f=e("./_descriptors")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return a(e,t,r)}catch(s){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},{"./_an-object":27,"./_descriptors":33,"./_ie8-dom-define":43,"./_to-primitive":78}],56:[function(e,t,r){var n=e("./_object-dp"),o=e("./_an-object"),i=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){o(e);for(var r,a=i(t),s=a.length,u=0;s>u;)n.f(e,r=a[u++],t[r]);return e}},{"./_an-object":27,"./_descriptors":33,"./_object-dp":55,"./_object-keys":63}],57:[function(e,t,r){var n=e("./_object-pie"),o=e("./_property-desc"),i=e("./_to-iobject"),a=e("./_to-primitive"),s=e("./_has"),u=e("./_ie8-dom-define"),c=Object.getOwnPropertyDescriptor;r.f=e("./_descriptors")?c:function(e,t){if(e=i(e),t=a(t,!0),u)try{return c(e,t)}catch(r){}if(s(e,t))return o(!n.f.call(e,t),e[t])}},{"./_descriptors":33,"./_has":40,"./_ie8-dom-define":43,"./_object-pie":64,"./_property-desc":66,"./_to-iobject":75,"./_to-primitive":78}],58:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_object-gopn").f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(e){try{return o(e)}catch(t){return a.slice()}};t.exports.f=function(e){return a&&"[object Window]"==i.call(e)?s(e):o(n(e))}},{"./_object-gopn":59,"./_to-iobject":75}],59:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys").concat("length","prototype");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},{"./_enum-bug-keys":35,"./_object-keys-internal":62}],60:[function(e,t,r){r.f=Object.getOwnPropertySymbols},{}],61:[function(e,t,r){var n=e("./_has"),o=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},{"./_has":40,"./_shared-key":70,"./_to-object":77}],62:[function(e,t,r){var n=e("./_has"),o=e("./_to-iobject"),i=e("./_array-includes")(!1),a=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var r,s=o(e),u=0,c=[];for(r in s)r!=a&&n(s,r)&&c.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~i(c,r)||c.push(r));return c}},{"./_array-includes":28,"./_has":40,"./_shared-key":70,"./_to-iobject":75}],63:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return n(e,o)}},{"./_enum-bug-keys":35,"./_object-keys-internal":62}],64:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],65:[function(e,t,r){var n=e("./_export"),o=e("./_core"),i=e("./_fails");t.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],a={};a[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",a)}},{"./_core":30,"./_export":37,"./_fails":38}],66:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],67:[function(e,t,r){t.exports=e("./_hide")},{"./_hide":41}],68:[function(e,t,r){var n=e("./_is-object"),o=e("./_an-object"),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,n){try{n=e("./_ctx")(Function.call,e("./_object-gopd").f(Object.prototype,"__proto__").set,2),n(t,[]),r=!(t instanceof Array)}catch(o){r=!0}return function(e,t){return i(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:i}},{"./_an-object":27,"./_ctx":31,"./_is-object":46,"./_object-gopd":57}],69:[function(e,t,r){var n=e("./_object-dp").f,o=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./_has":40,"./_object-dp":55,"./_wks":82}],70:[function(e,t,r){var n=e("./_shared")("keys"),o=e("./_uid");t.exports=function(e){return n[e]||(n[e]=o(e))}},{"./_shared":71,"./_uid":79}],71:[function(e,t,r){var n=e("./_global"),o="__core-js_shared__",i=n[o]||(n[o]={});t.exports=function(e){return i[e]||(i[e]={})}},{"./_global":39}],72:[function(e,t,r){var n=e("./_to-integer"),o=e("./_defined");t.exports=function(e){return function(t,r){var i,a,s=String(o(t)),u=n(r),c=s.length;return u<0||u>=c?e?"":void 0:(i=s.charCodeAt(u),i<55296||i>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):i:e?s.slice(u,u+2):(i-55296<<10)+(a-56320)+65536)}}},{"./_defined":32,"./_to-integer":74}],73:[function(e,t,r){var n=e("./_to-integer"),o=Math.max,i=Math.min;t.exports=function(e,t){return e=n(e),e<0?o(e+t,0):i(e,t)}},{"./_to-integer":74}],74:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},{}],75:[function(e,t,r){var n=e("./_iobject"),o=e("./_defined");t.exports=function(e){return n(o(e))}},{"./_defined":32,"./_iobject":44}],76:[function(e,t,r){var n=e("./_to-integer"),o=Math.min;t.exports=function(e){return e>0?o(n(e),9007199254740991):0}},{"./_to-integer":74}],77:[function(e,t,r){var n=e("./_defined");t.exports=function(e){return Object(n(e))}},{"./_defined":32}],78:[function(e,t,r){var n=e("./_is-object");t.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":46}],79:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],80:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_library"),a=e("./_wks-ext"),s=e("./_object-dp").f;t.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},{"./_core":30,"./_global":39,"./_library":52,"./_object-dp":55,"./_wks-ext":81}],81:[function(e,t,r){r.f=e("./_wks")},{"./_wks":82}],82:[function(e,t,r){var n=e("./_shared")("wks"),o=e("./_uid"),i=e("./_global").Symbol,a="function"==typeof i,s=t.exports=function(e){return n[e]||(n[e]=a&&i[e]||(a?i:o)("Symbol."+e))};s.store=n},{"./_global":39,"./_shared":71,"./_uid":79}],83:[function(e,t,r){"use strict";var n=e("./_add-to-unscopables"),o=e("./_iter-step"),i=e("./_iterators"),a=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./_add-to-unscopables":26,"./_iter-define":48,"./_iter-step":49,"./_iterators":50,"./_to-iobject":75}],84:[function(e,t,r){var n=e("./_export");n(n.S,"Object",{create:e("./_object-create")})},{"./_export":37,"./_object-create":54}],85:[function(e,t,r){var n=e("./_export");n(n.S+n.F*!e("./_descriptors"),"Object",{defineProperty:e("./_object-dp").f})},{"./_descriptors":33,"./_export":37,"./_object-dp":55}],86:[function(e,t,r){var n=e("./_is-object"),o=e("./_meta").onFreeze;e("./_object-sap")("freeze",function(e){return function(t){return e&&n(t)?e(o(t)):t}})},{"./_is-object":46,"./_meta":53,"./_object-sap":65}],87:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-gpo");e("./_object-sap")("getPrototypeOf",function(){return function(e){return o(n(e))}})},{"./_object-gpo":61,"./_object-sap":65,"./_to-object":77}],88:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return o(n(e))}})},{"./_object-keys":63,"./_object-sap":65,"./_to-object":77}],89:[function(e,t,r){var n=e("./_export");n(n.S,"Object",{setPrototypeOf:e("./_set-proto").set})},{"./_export":37,"./_set-proto":68}],90:[function(e,t,r){},{}],91:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":48,"./_string-at":72}],92:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_has"),i=e("./_descriptors"),a=e("./_export"),s=e("./_redefine"),u=e("./_meta").KEY,c=e("./_fails"),l=e("./_shared"),f=e("./_set-to-string-tag"),d=e("./_uid"),p=e("./_wks"),h=e("./_wks-ext"),y=e("./_wks-define"),m=e("./_keyof"),v=e("./_enum-keys"),_=e("./_is-array"),b=e("./_an-object"),g=e("./_to-iobject"),E=e("./_to-primitive"),j=e("./_property-desc"),w=e("./_object-create"),O=e("./_object-gopn-ext"),M=e("./_object-gopd"),x=e("./_object-dp"),P=e("./_object-keys"),k=M.f,R=x.f,S=O.f,T=n.Symbol,A=n.JSON,N=A&&A.stringify,I="prototype",U=p("_hidden"),C=p("toPrimitive"),L={}.propertyIsEnumerable,F=l("symbol-registry"),B=l("symbols"),D=l("op-symbols"),G=Object[I],K="function"==typeof T,Y=n.QObject,q=!Y||!Y[I]||!Y[I].findChild,z=i&&c(function(){return 7!=w(R({},"a",{get:function(){return R(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=k(G,t);n&&delete G[t],R(e,t,r),n&&e!==G&&R(G,t,n)}:R,H=function(e){var t=B[e]=w(T[I]);return t._k=e,t},W=K&&"symbol"==typeof T.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof T},J=function(e,t,r){return e===G&&J(D,t,r),b(e),t=E(t,!0),b(r),o(B,t)?(r.enumerable?(o(e,U)&&e[U][t]&&(e[U][t]=!1),r=w(r,{enumerable:j(0,!1)})):(o(e,U)||R(e,U,j(1,{})),e[U][t]=!0),z(e,t,r)):R(e,t,r)},V=function(e,t){b(e);for(var r,n=v(t=g(t)),o=0,i=n.length;i>o;)J(e,r=n[o++],t[r]);return e},$=function(e,t){return void 0===t?w(e):V(w(e),t)},X=function(e){var t=L.call(this,e=E(e,!0));return!(this===G&&o(B,e)&&!o(D,e))&&(!(t||!o(this,e)||!o(B,e)||o(this,U)&&this[U][e])||t)},Q=function(e,t){if(e=g(e),t=E(t,!0),e!==G||!o(B,t)||o(D,t)){var r=k(e,t);return!r||!o(B,t)||o(e,U)&&e[U][t]||(r.enumerable=!0),r}},Z=function(e){for(var t,r=S(g(e)),n=[],i=0;r.length>i;)o(B,t=r[i++])||t==U||t==u||n.push(t);return n},ee=function(e){for(var t,r=e===G,n=S(r?D:g(e)),i=[],a=0;n.length>a;)!o(B,t=n[a++])||r&&!o(G,t)||i.push(B[t]);return i};K||(T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(r){this===G&&t.call(D,r),o(this,U)&&o(this[U],e)&&(this[U][e]=!1),z(this,e,j(1,r))};return i&&q&&z(G,e,{configurable:!0,set:t}),H(e)},s(T[I],"toString",function(){return this._k}),M.f=Q,x.f=J,e("./_object-gopn").f=O.f=Z,e("./_object-pie").f=X,e("./_object-gops").f=ee,i&&!e("./_library")&&s(G,"propertyIsEnumerable",X,!0),h.f=function(e){return H(p(e))}),a(a.G+a.W+a.F*!K,{Symbol:T});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),re=0;te.length>re;)p(te[re++]);for(var te=P(p.store),re=0;te.length>re;)y(te[re++]);a(a.S+a.F*!K,"Symbol",{"for":function(e){return o(F,e+="")?F[e]:F[e]=T(e)},keyFor:function(e){if(W(e))return m(F,e);throw TypeError(e+" is not a symbol!")},useSetter:function(){q=!0},useSimple:function(){q=!1}}),a(a.S+a.F*!K,"Object",{create:$,defineProperty:J,defineProperties:V,getOwnPropertyDescriptor:Q,getOwnPropertyNames:Z,getOwnPropertySymbols:ee}),A&&a(a.S+a.F*(!K||c(function(){var e=T();return"[null]"!=N([e])||"{}"!=N({a:e})||"{}"!=N(Object(e))})),"JSON",{stringify:function(e){if(void 0!==e&&!W(e)){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);return t=n[1],"function"==typeof t&&(r=t),!r&&_(t)||(t=function(e,t){if(r&&(t=r.call(this,e,t)),!W(t))return t}),n[1]=t,N.apply(A,n)}}}),T[I][C]||e("./_hide")(T[I],C,T[I].valueOf),f(T,"Symbol"),f(Math,"Math",!0),f(n.JSON,"JSON",!0)},{"./_an-object":27,"./_descriptors":33,"./_enum-keys":36,"./_export":37,"./_fails":38,"./_global":39,"./_has":40,"./_hide":41,"./_is-array":45,"./_keyof":51,"./_library":52,"./_meta":53,"./_object-create":54,"./_object-dp":55,"./_object-gopd":57,"./_object-gopn":59,"./_object-gopn-ext":58,"./_object-gops":60,"./_object-keys":63,"./_object-pie":64,"./_property-desc":66,"./_redefine":67,"./_set-to-string-tag":69,"./_shared":71,"./_to-iobject":75,"./_to-primitive":78,"./_uid":79,"./_wks":82,"./_wks-define":80,"./_wks-ext":81}],93:[function(e,t,r){e("./_wks-define")("asyncIterator")},{"./_wks-define":80}],94:[function(e,t,r){e("./_wks-define")("observable")},{"./_wks-define":80}],95:[function(e,t,r){e("./es6.array.iterator");for(var n=e("./_global"),o=e("./_hide"),i=e("./_iterators"),a=e("./_wks")("toStringTag"),s=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],u=0;u<5;u++){var c=s[u],l=n[c],f=l&&l.prototype;f&&!f[a]&&o(f,a,c),i[c]=i.Array}},{"./_global":39,"./_hide":41,"./_iterators":50,"./_wks":82,"./es6.array.iterator":83}],96:[function(e,t,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(e){if(f===setTimeout)return setTimeout(e,0);if((f===n||!f)&&setTimeout)return f=setTimeout,setTimeout(e,0);try{return f(e,0)}catch(t){try{return f.call(null,e,0)}catch(t){return f.call(this,e,0)}}}function a(e){if(d===clearTimeout)return clearTimeout(e);if((d===o||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function s(){m&&h&&(m=!1,h.length?y=h.concat(y):v=-1,y.length&&u())}function u(){if(!m){var e=i(s);m=!0;for(var t=y.length;t;){for(h=y,y=[];++v<t;)h&&h[v].run();v=-1,t=y.length}h=null,m=!1,a(e)}}function c(e,t){this.fun=e,this.array=t}function l(){}var f,d,p=t.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:n}catch(e){f=n}try{d="function"==typeof clearTimeout?clearTimeout:o}catch(e){d=o}}();var h,y=[],m=!1,v=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];y.push(new c(e,t)),1!==y.length||m||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=l,p.addListener=l,p.once=l,p.off=l,p.removeListener=l,p.removeAllListeners=l,p.emit=l,p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},{}],97:[function(e,t,r){(function(r){var n="object"==typeof r?r:"object"==typeof window?window:"object"==typeof self?self:this,o=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,i=o&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=e("./runtime"),o)n.regeneratorRuntime=i;else try{delete n.regeneratorRuntime}catch(a){n.regeneratorRuntime=void 0}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./runtime":98}],98:[function(e,t,r){(function(e,r){!function(r){"use strict";function n(e,t,r,n){var o=t&&t.prototype instanceof i?t:i,a=Object.create(o.prototype),s=new p(n||[]);return a._invoke=l(e,r,s),a}function o(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(n){return{type:"throw",arg:n}}}function i(){}function a(){}function s(){}function u(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function c(t){function r(e,n,i,a){var s=o(t[e],t,n);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&_.call(c,"__await")?Promise.resolve(c.__await).then(function(e){r("next",e,i,a)},function(e){r("throw",e,i,a)}):Promise.resolve(c).then(function(e){u.value=e,i(u)},a)}a(s.arg)}function n(e,t){function n(){return new Promise(function(n,o){r(e,t,n,o)})}return i=i?i.then(n,n):n()}"object"==typeof e&&e.domain&&(r=e.domain.bind(r));var i;this._invoke=n}function l(e,t,r){var n=O;return function(i,a){if(n===x)throw new Error("Generator is already running");if(n===P){if("throw"===i)throw a;return y()}for(;;){var s=r.delegate;if(s){if("return"===i||"throw"===i&&s.iterator[i]===m){r.delegate=null;var u=s.iterator["return"];if(u){var c=o(u,s.iterator,a);if("throw"===c.type){i="throw",a=c.arg;continue}}if("return"===i)continue}var c=o(s.iterator[i],s.iterator,a);if("throw"===c.type){r.delegate=null,i="throw",a=c.arg;continue}i="next",a=m;var l=c.arg;if(!l.done)return n=M,l;r[s.resultName]=l.value,r.next=s.nextLoc,r.delegate=null}if("next"===i)r.sent=r._sent=a;else if("throw"===i){if(n===O)throw n=P,a;r.dispatchException(a)&&(i="next",a=m)}else"return"===i&&r.abrupt("return",a);n=x;var c=o(e,t,r);if("normal"===c.type){n=r.done?P:M;var l={value:c.arg,done:r.done};if(c.arg!==k)return l;r.delegate&&"next"===i&&(a=m)}else"throw"===c.type&&(n=P,i="throw",a=c.arg)}}}function f(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function d(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function p(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(f,this),this.reset(!0)}function h(e){if(e){var t=e[g];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function o(){for(;++r<e.length;)if(_.call(e,r))return o.value=e[r],o.done=!1,o;return o.value=m,o.done=!0,o};return n.next=n}}return{next:y}}function y(){return{value:m,done:!0}}var m,v=Object.prototype,_=v.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},g=b.iterator||"@@iterator",E=b.toStringTag||"@@toStringTag",j="object"==typeof t,w=r.regeneratorRuntime;if(w)return void(j&&(t.exports=w));w=r.regeneratorRuntime=j?t.exports:{},w.wrap=n;var O="suspendedStart",M="suspendedYield",x="executing",P="completed",k={},R={};R[g]=function(){return this};var S=Object.getPrototypeOf,T=S&&S(S(h([])));T&&T!==v&&_.call(T,g)&&(R=T);var A=s.prototype=i.prototype=Object.create(R);a.prototype=A.constructor=s,s.constructor=a,s[E]=a.displayName="GeneratorFunction",w.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===a||"GeneratorFunction"===(t.displayName||t.name));
},w.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,s):(e.__proto__=s,E in e||(e[E]="GeneratorFunction")),e.prototype=Object.create(A),e},w.awrap=function(e){return{__await:e}},u(c.prototype),w.AsyncIterator=c,w.async=function(e,t,r,o){var i=new c(n(e,t,r,o));return w.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},u(A),A[E]="Generator",A.toString=function(){return"[object Generator]"},w.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},w.values=h,p.prototype={constructor:p,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=m,this.done=!1,this.delegate=null,this.tryEntries.forEach(d),!e)for(var t in this)"t"===t.charAt(0)&&_.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=m)},stop:function(){this.done=!0;var e=this.tryEntries[0],t=e.completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){function t(t,n){return i.type="throw",i.arg=e,r.next=t,!!n}if(this.done)throw e;for(var r=this,n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var a=_.call(o,"catchLoc"),s=_.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&_.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?this.next=o.finallyLoc:this.complete(i),k},complete:function(e,t){if("throw"===e.type)throw e.arg;"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=e.arg,this.next="end"):"normal"===e.type&&t&&(this.next=t)},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),d(r),k}},"catch":function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;d(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:h(e),resultName:t,nextLoc:r},k}}}("object"==typeof r?r:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,e("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:96}],99:[function(t,r,n){!function(t,n){"function"==typeof e&&e.amd?e([],n):"undefined"!=typeof r&&r.exports?r.exports=n():t.tv4=n()}(this,function(){function e(e){return encodeURI(e).replace(/%25[0-9][0-9]/g,function(e){return"%"+e.substring(3)})}function t(t){var r="";d[t.charAt(0)]&&(r=t.charAt(0),t=t.substring(1));var n="",o="",i=!0,a=!1,s=!1;"+"===r?i=!1:"."===r?(o=".",n="."):"/"===r?(o="/",n="/"):"#"===r?(o="#",i=!1):";"===r?(o=";",n=";",a=!0,s=!0):"?"===r?(o="?",n="&",a=!0):"&"===r&&(o="&",n="&",a=!0);for(var u=[],c=t.split(","),l=[],f={},h=0;h<c.length;h++){var y=c[h],m=null;if(y.indexOf(":")!==-1){var v=y.split(":");y=v[0],m=parseInt(v[1],10)}for(var _={};p[y.charAt(y.length-1)];)_[y.charAt(y.length-1)]=!0,y=y.substring(0,y.length-1);var b={truncate:m,name:y,suffices:_};l.push(b),f[y]=b,u.push(y)}var g=function(t){for(var r="",u=0,c=0;c<l.length;c++){var f=l[c],d=t(f.name);if(null===d||void 0===d||Array.isArray(d)&&0===d.length||"object"==typeof d&&0===Object.keys(d).length)u++;else if(r+=c===u?o:n||",",Array.isArray(d)){a&&(r+=f.name+"=");for(var p=0;p<d.length;p++)p>0&&(r+=f.suffices["*"]?n||",":",",f.suffices["*"]&&a&&(r+=f.name+"=")),r+=i?encodeURIComponent(d[p]).replace(/!/g,"%21"):e(d[p])}else if("object"==typeof d){a&&!f.suffices["*"]&&(r+=f.name+"=");var h=!0;for(var y in d)h||(r+=f.suffices["*"]?n||",":","),h=!1,r+=i?encodeURIComponent(y).replace(/!/g,"%21"):e(y),r+=f.suffices["*"]?"=":",",r+=i?encodeURIComponent(d[y]).replace(/!/g,"%21"):e(d[y])}else a&&(r+=f.name,s&&""===d||(r+="=")),null!=f.truncate&&(d=d.substring(0,f.truncate)),r+=i?encodeURIComponent(d).replace(/!/g,"%21"):e(d)}return r};return g.varNames=u,{prefix:o,substitution:g}}function r(e){if(!(this instanceof r))return new r(e);for(var n=e.split("{"),o=[n.shift()],i=[],a=[],s=[];n.length>0;){var u=n.shift(),c=u.split("}")[0],l=u.substring(c.length+1),f=t(c);a.push(f.substitution),i.push(f.prefix),o.push(l),s=s.concat(f.substitution.varNames)}this.fill=function(e){for(var t=o[0],r=0;r<a.length;r++){var n=a[r];t+=n(e),t+=o[r+1]}return t},this.varNames=s,this.template=e}function n(e,t){if(e===t)return!0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(Array.isArray(e)!==Array.isArray(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(!n(e[r],t[r]))return!1}else{var o;for(o in e)if(void 0===t[o]&&void 0!==e[o])return!1;for(o in t)if(void 0===e[o]&&void 0!==t[o])return!1;for(o in e)if(!n(e[o],t[o]))return!1}return!0}return!1}function o(e){var t=String(e).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);return t?{href:t[0]||"",protocol:t[1]||"",authority:t[2]||"",host:t[3]||"",hostname:t[4]||"",port:t[5]||"",pathname:t[6]||"",search:t[7]||"",hash:t[8]||""}:null}function i(e,t){function r(e){var t=[];return e.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,function(e){"/.."===e?t.pop():t.push(e)}),t.join("").replace(/^\//,"/"===e.charAt(0)?"/":"")}return t=o(t||""),e=o(e||""),t&&e?(t.protocol||e.protocol)+(t.protocol||t.authority?t.authority:e.authority)+r(t.protocol||t.authority||"/"===t.pathname.charAt(0)?t.pathname:t.pathname?(e.authority&&!e.pathname?"/":"")+e.pathname.slice(0,e.pathname.lastIndexOf("/")+1)+t.pathname:e.pathname)+(t.protocol||t.authority||t.pathname?t.search:t.search||e.search)+t.hash:null}function a(e){return e.split("#")[0]}function s(e,t){if(e&&"object"==typeof e)if(void 0===t?t=e.id:"string"==typeof e.id&&(t=i(t,e.id),e.id=t),Array.isArray(e))for(var r=0;r<e.length;r++)s(e[r],t);else{"string"==typeof e.$ref&&(e.$ref=i(t,e.$ref));for(var n in e)"enum"!==n&&s(e[n],t)}}function u(e){e=e||"en";var t=E[e];return function(e){var r=t[e.code]||g[e.code];if("string"!=typeof r)return"Unknown error code "+e.code+": "+JSON.stringify(e.messageParams);var n=e.params;return r.replace(/\{([^{}]*)\}/g,function(e,t){var r=n[t];return"string"==typeof r||"number"==typeof r?r:e})}}function c(e,t,r,n,o){if(Error.call(this),void 0===e)throw new Error("No error code supplied: "+n);this.message="",this.params=t,this.code=e,this.dataPath=r||"",this.schemaPath=n||"",this.subErrors=o||null;var i=new Error(this.message);if(this.stack=i.stack||i.stacktrace,!this.stack)try{throw i}catch(i){this.stack=i.stack||i.stacktrace}}function l(e,t){if(t.substring(0,e.length)===e){var r=t.substring(e.length);if(t.length>0&&"/"===t.charAt(e.length-1)||"#"===r.charAt(0)||"?"===r.charAt(0))return!0}return!1}function f(e){var t,r,n=new h,o={setErrorReporter:function(e){return"string"==typeof e?this.language(e):(r=e,!0)},addFormat:function(){n.addFormat.apply(n,arguments)},language:function(e){return e?(E[e]||(e=e.split("-")[0]),!!E[e]&&(t=e,e)):t},addLanguage:function(e,t){var r;for(r in v)t[r]&&!t[v[r]]&&(t[v[r]]=t[r]);var n=e.split("-")[0];if(E[n]){E[e]=Object.create(E[n]);for(r in t)"undefined"==typeof E[n][r]&&(E[n][r]=t[r]),E[e][r]=t[r]}else E[e]=t,E[n]=t;return this},freshApi:function(e){var t=f();return e&&t.language(e),t},validate:function(e,o,i,a){var s=u(t),c=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,l=new h(n,(!1),c,i,a);"string"==typeof o&&(o={$ref:o}),l.addSchema("",o);var f=l.validateAll(e,o,null,null,"");return!f&&a&&(f=l.banUnknownProperties(e,o)),this.error=f,this.missing=l.missing,this.valid=null===f,this.valid},validateResult:function(){var e={};return this.validate.apply(e,arguments),e},validateMultiple:function(e,o,i,a){var s=u(t),c=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,l=new h(n,(!0),c,i,a);"string"==typeof o&&(o={$ref:o}),l.addSchema("",o),l.validateAll(e,o,null,null,""),a&&l.banUnknownProperties(e,o);var f={};return f.errors=l.errors,f.missing=l.missing,f.valid=0===f.errors.length,f},addSchema:function(){return n.addSchema.apply(n,arguments)},getSchema:function(){return n.getSchema.apply(n,arguments)},getSchemaMap:function(){return n.getSchemaMap.apply(n,arguments)},getSchemaUris:function(){return n.getSchemaUris.apply(n,arguments)},getMissingUris:function(){return n.getMissingUris.apply(n,arguments)},dropSchemas:function(){n.dropSchemas.apply(n,arguments)},defineKeyword:function(){n.defineKeyword.apply(n,arguments)},defineError:function(e,t,r){if("string"!=typeof e||!/^[A-Z]+(_[A-Z]+)*$/.test(e))throw new Error("Code name must be a string in UPPER_CASE_WITH_UNDERSCORES");if("number"!=typeof t||t%1!==0||t<1e4)throw new Error("Code number must be an integer > 10000");if("undefined"!=typeof v[e])throw new Error("Error already defined: "+e+" as "+v[e]);if("undefined"!=typeof _[t])throw new Error("Error code already used: "+_[t]+" as "+t);v[e]=t,_[t]=e,g[e]=g[t]=r;for(var n in E){var o=E[n];o[e]&&(o[t]=o[t]||o[e])}},reset:function(){n.reset(),this.error=null,this.missing=[],this.valid=!0},missing:[],error:null,valid:!0,normSchema:s,resolveUrl:i,getDocumentUri:a,errorCodes:v};return o.language(e||"en"),o}Object.keys||(Object.keys=function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),r=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],n=r.length;return function(o){if("object"!=typeof o&&"function"!=typeof o||null===o)throw new TypeError("Object.keys called on non-object");var i=[];for(var a in o)e.call(o,a)&&i.push(a);if(t)for(var s=0;s<n;s++)e.call(o,r[s])&&i.push(r[s]);return i}}()),Object.create||(Object.create=function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create implementation only accepts one parameter.");return e.prototype=t,new e}}()),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(0===r)return-1;var n=0;if(arguments.length>1&&(n=Number(arguments[1]),n!==n?n=0:0!==n&&n!==1/0&&n!==-(1/0)&&(n=(n>0||-1)*Math.floor(Math.abs(n)))),n>=r)return-1;for(var o=n>=0?n:Math.max(r-Math.abs(n),0);o<r;o++)if(o in t&&t[o]===e)return o;return-1}),Object.isFrozen||(Object.isFrozen=function(e){for(var t="tv4_test_frozen_key";e.hasOwnProperty(t);)t+=Math.random();try{return e[t]=!0,delete e[t],!1}catch(r){return!0}});var d={"+":!0,"#":!0,".":!0,"/":!0,";":!0,"?":!0,"&":!0},p={"*":!0};r.prototype={toString:function(){return this.template},fillFromObject:function(e){return this.fill(function(t){return e[t]})}};var h=function(e,t,r,n,o){if(this.missing=[],this.missingMap={},this.formatValidators=e?Object.create(e.formatValidators):{},this.schemas=e?Object.create(e.schemas):{},this.collectMultiple=t,this.errors=[],this.handleError=t?this.collectError:this.returnError,n&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey="tv4_validation_id",this.validationErrorsKey="tv4_validation_errors_id"),o&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorReporter=r||u("en"),"string"==typeof this.errorReporter)throw new Error("debug");if(this.definedKeywords={},e)for(var i in e.definedKeywords)this.definedKeywords[i]=e.definedKeywords[i].slice(0)};h.prototype.defineKeyword=function(e,t){this.definedKeywords[e]=this.definedKeywords[e]||[],this.definedKeywords[e].push(t)},h.prototype.createError=function(e,t,r,n,o,i,a){var s=new c(e,t,r,n,o);return s.message=this.errorReporter(s,i,a),s},h.prototype.returnError=function(e){return e},h.prototype.collectError=function(e){return e&&this.errors.push(e),null},h.prototype.prefixErrors=function(e,t,r){for(var n=e;n<this.errors.length;n++)this.errors[n]=this.errors[n].prefixWith(t,r);return this},h.prototype.banUnknownProperties=function(e,t){for(var r in this.unknownPropertyPaths){var n=this.createError(v.UNKNOWN_PROPERTY,{path:r},r,"",null,e,t),o=this.handleError(n);if(o)return o}return null},h.prototype.addFormat=function(e,t){if("object"==typeof e){for(var r in e)this.addFormat(r,e[r]);return this}this.formatValidators[e]=t},h.prototype.resolveRefs=function(e,t){if(void 0!==e.$ref){if(t=t||{},t[e.$ref])return this.createError(v.CIRCULAR_REFERENCE,{urls:Object.keys(t).join(", ")},"","",null,void 0,e);t[e.$ref]=!0,e=this.getSchema(e.$ref,t)}return e},h.prototype.getSchema=function(e,t){var r;if(void 0!==this.schemas[e])return r=this.schemas[e],this.resolveRefs(r,t);var n=e,o="";if(e.indexOf("#")!==-1&&(o=e.substring(e.indexOf("#")+1),n=e.substring(0,e.indexOf("#"))),"object"==typeof this.schemas[n]){r=this.schemas[n];var i=decodeURIComponent(o);if(""===i)return this.resolveRefs(r,t);if("/"!==i.charAt(0))return;for(var a=i.split("/").slice(1),s=0;s<a.length;s++){var u=a[s].replace(/~1/g,"/").replace(/~0/g,"~");if(void 0===r[u]){r=void 0;break}r=r[u]}if(void 0!==r)return this.resolveRefs(r,t)}void 0===this.missing[n]&&(this.missing.push(n),this.missing[n]=n,this.missingMap[n]=n)},h.prototype.searchSchemas=function(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)this.searchSchemas(e[r],t);else if(e&&"object"==typeof e){"string"==typeof e.id&&l(t,e.id)&&void 0===this.schemas[e.id]&&(this.schemas[e.id]=e);for(var n in e)if("enum"!==n)if("object"==typeof e[n])this.searchSchemas(e[n],t);else if("$ref"===n){var o=a(e[n]);o&&void 0===this.schemas[o]&&void 0===this.missingMap[o]&&(this.missingMap[o]=o)}}},h.prototype.addSchema=function(e,t){if("string"!=typeof e||"undefined"==typeof t){if("object"!=typeof e||"string"!=typeof e.id)return;t=e,e=t.id}e===a(e)+"#"&&(e=a(e)),this.schemas[e]=t,delete this.missingMap[e],s(t,e),this.searchSchemas(t,e)},h.prototype.getSchemaMap=function(){var e={};for(var t in this.schemas)e[t]=this.schemas[t];return e},h.prototype.getSchemaUris=function(e){var t=[];for(var r in this.schemas)e&&!e.test(r)||t.push(r);return t},h.prototype.getMissingUris=function(e){var t=[];for(var r in this.missingMap)e&&!e.test(r)||t.push(r);return t},h.prototype.dropSchemas=function(){this.schemas={},this.reset()},h.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[]},h.prototype.validateAll=function(e,t,r,n,o){var i;if(t=this.resolveRefs(t),!t)return null;if(t instanceof c)return this.errors.push(t),t;var a,s=this.errors.length,u=null,l=null;if(this.checkRecursive&&e&&"object"==typeof e){if(i=!this.scanned.length,e[this.validatedSchemasKey]){var f=e[this.validatedSchemasKey].indexOf(t);if(f!==-1)return this.errors=this.errors.concat(e[this.validationErrorsKey][f]),null}if(Object.isFrozen(e)&&(a=this.scannedFrozen.indexOf(e),a!==-1)){var d=this.scannedFrozenSchemas[a].indexOf(t);if(d!==-1)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[a][d]),null}if(this.scanned.push(e),Object.isFrozen(e))a===-1&&(a=this.scannedFrozen.length,this.scannedFrozen.push(e),this.scannedFrozenSchemas.push([])),u=this.scannedFrozenSchemas[a].length,this.scannedFrozenSchemas[a][u]=t,this.scannedFrozenValidationErrors[a][u]=[];else{if(!e[this.validatedSchemasKey])try{Object.defineProperty(e,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(e,this.validationErrorsKey,{value:[],configurable:!0})}catch(p){e[this.validatedSchemasKey]=[],e[this.validationErrorsKey]=[]}l=e[this.validatedSchemasKey].length,e[this.validatedSchemasKey][l]=t,e[this.validationErrorsKey][l]=[]}}var h=this.errors.length,y=this.validateBasic(e,t,o)||this.validateNumeric(e,t,o)||this.validateString(e,t,o)||this.validateArray(e,t,o)||this.validateObject(e,t,o)||this.validateCombinations(e,t,o)||this.validateHypermedia(e,t,o)||this.validateFormat(e,t,o)||this.validateDefinedKeywords(e,t,o)||null;if(i){for(;this.scanned.length;){var m=this.scanned.pop();delete m[this.validatedSchemasKey]}this.scannedFrozen=[],this.scannedFrozenSchemas=[]}if(y||h!==this.errors.length)for(;r&&r.length||n&&n.length;){var v=r&&r.length?""+r.pop():null,_=n&&n.length?""+n.pop():null;y&&(y=y.prefixWith(v,_)),this.prefixErrors(h,v,_)}return null!==u?this.scannedFrozenValidationErrors[a][u]=this.errors.slice(s):null!==l&&(e[this.validationErrorsKey][l]=this.errors.slice(s)),this.handleError(y)},h.prototype.validateFormat=function(e,t){if("string"!=typeof t.format||!this.formatValidators[t.format])return null;var r=this.formatValidators[t.format].call(null,e,t);return"string"==typeof r||"number"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r},"","/format",null,e,t):r&&"object"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r.message||"?"},r.dataPath||"",r.schemaPath||"/format",null,e,t):null},h.prototype.validateDefinedKeywords=function(e,t,r){for(var n in this.definedKeywords)if("undefined"!=typeof t[n])for(var o=this.definedKeywords[n],i=0;i<o.length;i++){var a=o[i],s=a(e,t[n],t,r);if("string"==typeof s||"number"==typeof s)return this.createError(v.KEYWORD_CUSTOM,{key:n,message:s},"","",null,e,t).prefixWith(null,n);if(s&&"object"==typeof s){var u=s.code;if("string"==typeof u){if(!v[u])throw new Error("Undefined error code (use defineError): "+u);u=v[u]}else"number"!=typeof u&&(u=v.KEYWORD_CUSTOM);var c="object"==typeof s.message?s.message:{key:n,message:s.message||"?"},l=s.schemaPath||"/"+n.replace(/~/g,"~0").replace(/\//g,"~1");return this.createError(u,c,s.dataPath||null,l,null,e,t)}}return null},h.prototype.validateBasic=function(e,t,r){var n;return(n=this.validateType(e,t,r))?n.prefixWith(null,"type"):(n=this.validateEnum(e,t,r))?n.prefixWith(null,"type"):null},h.prototype.validateType=function(e,t){if(void 0===t.type)return null;var r=typeof e;null===e?r="null":Array.isArray(e)&&(r="array");var n=t.type;Array.isArray(n)||(n=[n]);for(var o=0;o<n.length;o++){var i=n[o];if(i===r||"integer"===i&&"number"===r&&e%1===0)return null}return this.createError(v.INVALID_TYPE,{type:r,expected:n.join("/")},"","",null,e,t)},h.prototype.validateEnum=function(e,t){if(void 0===t["enum"])return null;for(var r=0;r<t["enum"].length;r++){var o=t["enum"][r];if(n(e,o))return null}return this.createError(v.ENUM_MISMATCH,{value:"undefined"!=typeof JSON?JSON.stringify(e):e},"","",null,e,t)},h.prototype.validateNumeric=function(e,t,r){return this.validateMultipleOf(e,t,r)||this.validateMinMax(e,t,r)||this.validateNaN(e,t,r)||null};var y=Math.pow(2,-51),m=1-y;h.prototype.validateMultipleOf=function(e,t){var r=t.multipleOf||t.divisibleBy;if(void 0===r)return null;if("number"==typeof e){var n=e/r%1;if(n>=y&&n<m)return this.createError(v.NUMBER_MULTIPLE_OF,{value:e,multipleOf:r},"","",null,e,t)}return null},h.prototype.validateMinMax=function(e,t){if("number"!=typeof e)return null;if(void 0!==t.minimum){if(e<t.minimum)return this.createError(v.NUMBER_MINIMUM,{value:e,minimum:t.minimum},"","/minimum",null,e,t);if(t.exclusiveMinimum&&e===t.minimum)return this.createError(v.NUMBER_MINIMUM_EXCLUSIVE,{value:e,minimum:t.minimum},"","/exclusiveMinimum",null,e,t)}if(void 0!==t.maximum){if(e>t.maximum)return this.createError(v.NUMBER_MAXIMUM,{value:e,maximum:t.maximum},"","/maximum",null,e,t);if(t.exclusiveMaximum&&e===t.maximum)return this.createError(v.NUMBER_MAXIMUM_EXCLUSIVE,{value:e,maximum:t.maximum},"","/exclusiveMaximum",null,e,t)}return null},h.prototype.validateNaN=function(e,t){return"number"!=typeof e?null:isNaN(e)===!0||e===1/0||e===-(1/0)?this.createError(v.NUMBER_NOT_A_NUMBER,{value:e},"","/type",null,e,t):null},h.prototype.validateString=function(e,t,r){return this.validateStringLength(e,t,r)||this.validateStringPattern(e,t,r)||null},h.prototype.validateStringLength=function(e,t){return"string"!=typeof e?null:void 0!==t.minLength&&e.length<t.minLength?this.createError(v.STRING_LENGTH_SHORT,{length:e.length,minimum:t.minLength},"","/minLength",null,e,t):void 0!==t.maxLength&&e.length>t.maxLength?this.createError(v.STRING_LENGTH_LONG,{length:e.length,maximum:t.maxLength},"","/maxLength",null,e,t):null},h.prototype.validateStringPattern=function(e,t){if("string"!=typeof e||"string"!=typeof t.pattern&&!(t.pattern instanceof RegExp))return null;var r;if(t.pattern instanceof RegExp)r=t.pattern;else{var n,o="",i=t.pattern.match(/^\/(.+)\/([img]*)$/);i?(n=i[1],o=i[2]):n=t.pattern,r=new RegExp(n,o)}return r.test(e)?null:this.createError(v.STRING_PATTERN,{pattern:t.pattern},"","/pattern",null,e,t)},h.prototype.validateArray=function(e,t,r){return Array.isArray(e)?this.validateArrayLength(e,t,r)||this.validateArrayUniqueItems(e,t,r)||this.validateArrayItems(e,t,r)||null:null},h.prototype.validateArrayLength=function(e,t){var r;return void 0!==t.minItems&&e.length<t.minItems&&(r=this.createError(v.ARRAY_LENGTH_SHORT,{length:e.length,minimum:t.minItems},"","/minItems",null,e,t),this.handleError(r))?r:void 0!==t.maxItems&&e.length>t.maxItems&&(r=this.createError(v.ARRAY_LENGTH_LONG,{length:e.length,maximum:t.maxItems},"","/maxItems",null,e,t),this.handleError(r))?r:null},h.prototype.validateArrayUniqueItems=function(e,t){if(t.uniqueItems)for(var r=0;r<e.length;r++)for(var o=r+1;o<e.length;o++)if(n(e[r],e[o])){var i=this.createError(v.ARRAY_UNIQUE,{match1:r,match2:o},"","/uniqueItems",null,e,t);if(this.handleError(i))return i}return null},h.prototype.validateArrayItems=function(e,t,r){if(void 0===t.items)return null;var n,o;if(Array.isArray(t.items)){for(o=0;o<e.length;o++)if(o<t.items.length){if(n=this.validateAll(e[o],t.items[o],[o],["items",o],r+"/"+o))return n}else if(void 0!==t.additionalItems)if("boolean"==typeof t.additionalItems){if(!t.additionalItems&&(n=this.createError(v.ARRAY_ADDITIONAL_ITEMS,{},"/"+o,"/additionalItems",null,e,t),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalItems,[o],["additionalItems"],r+"/"+o))return n}else for(o=0;o<e.length;o++)if(n=this.validateAll(e[o],t.items,[o],["items"],r+"/"+o))return n;return null},h.prototype.validateObject=function(e,t,r){return"object"!=typeof e||null===e||Array.isArray(e)?null:this.validateObjectMinMaxProperties(e,t,r)||this.validateObjectRequiredProperties(e,t,r)||this.validateObjectProperties(e,t,r)||this.validateObjectDependencies(e,t,r)||null},h.prototype.validateObjectMinMaxProperties=function(e,t){var r,n=Object.keys(e);return void 0!==t.minProperties&&n.length<t.minProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MINIMUM,{propertyCount:n.length,minimum:t.minProperties},"","/minProperties",null,e,t),this.handleError(r))?r:void 0!==t.maxProperties&&n.length>t.maxProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:n.length,maximum:t.maxProperties},"","/maxProperties",null,e,t),this.handleError(r))?r:null},h.prototype.validateObjectRequiredProperties=function(e,t){if(void 0!==t.required)for(var r=0;r<t.required.length;r++){var n=t.required[r];if(void 0===e[n]){var o=this.createError(v.OBJECT_REQUIRED,{key:n},"","/required/"+r,null,e,t);if(this.handleError(o))return o}}return null},h.prototype.validateObjectProperties=function(e,t,r){var n;for(var o in e){var i=r+"/"+o.replace(/~/g,"~0").replace(/\//g,"~1"),a=!1;if(void 0!==t.properties&&void 0!==t.properties[o]&&(a=!0,n=this.validateAll(e[o],t.properties[o],[o],["properties",o],i)))return n;if(void 0!==t.patternProperties)for(var s in t.patternProperties){var u=new RegExp(s);if(u.test(o)&&(a=!0,n=this.validateAll(e[o],t.patternProperties[s],[o],["patternProperties",s],i)))return n}if(a)this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]);else if(void 0!==t.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]),"boolean"==typeof t.additionalProperties){if(!t.additionalProperties&&(n=this.createError(v.OBJECT_ADDITIONAL_PROPERTIES,{key:o},"","/additionalProperties",null,e,t).prefixWith(o,null),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalProperties,[o],["additionalProperties"],i))return n}else this.trackUnknownProperties&&!this.knownPropertyPaths[i]&&(this.unknownPropertyPaths[i]=!0)}return null},h.prototype.validateObjectDependencies=function(e,t,r){var n;if(void 0!==t.dependencies)for(var o in t.dependencies)if(void 0!==e[o]){var i=t.dependencies[o];if("string"==typeof i){if(void 0===e[i]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:i},"","",null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(Array.isArray(i))for(var a=0;a<i.length;a++){var s=i[a];if(void 0===e[s]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:s},"","/"+a,null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(n=this.validateAll(e,i,[],["dependencies",o],r))return n}return null},h.prototype.validateCombinations=function(e,t,r){return this.validateAllOf(e,t,r)||this.validateAnyOf(e,t,r)||this.validateOneOf(e,t,r)||this.validateNot(e,t,r)||null},h.prototype.validateAllOf=function(e,t,r){if(void 0===t.allOf)return null;for(var n,o=0;o<t.allOf.length;o++){var i=t.allOf[o];if(n=this.validateAll(e,i,[],["allOf",o],r))return n}return null},h.prototype.validateAnyOf=function(e,t,r){if(void 0===t.anyOf)return null;var n,o,i=[],a=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var s=!0,u=0;u<t.anyOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.anyOf[u],l=this.errors.length,f=this.validateAll(e,c,[],["anyOf",u],r);if(null===f&&l===this.errors.length){if(this.errors=this.errors.slice(0,a),this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var p in this.unknownPropertyPaths)o[p]||(n[p]=!0);s=!1;continue}return null}f&&i.push(f.prefixWith(null,""+u).prefixWith(null,"anyOf"))}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),s?(i=i.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(v.ANY_OF_MISSING,{},"","/anyOf",i,e,t)):void 0},h.prototype.validateOneOf=function(e,t,r){if(void 0===t.oneOf)return null;var n,o,i=null,a=[],s=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var u=0;u<t.oneOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.oneOf[u],l=this.errors.length,f=this.validateAll(e,c,[],["oneOf",u],r);if(null===f&&l===this.errors.length){if(null!==i)return this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MULTIPLE,{index1:i,index2:u},"","/oneOf",null,e,t);if(i=u,this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var p in this.unknownPropertyPaths)o[p]||(n[p]=!0)}}else f&&a.push(f)}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===i?(a=a.concat(this.errors.slice(s)),this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MISSING,{},"","/oneOf",a,e,t)):(this.errors=this.errors.slice(0,s),null)},h.prototype.validateNot=function(e,t,r){if(void 0===t.not)return null;var n,o,i=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var a=this.validateAll(e,t.not,null,null,r),s=this.errors.slice(i);return this.errors=this.errors.slice(0,i),this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===a&&0===s.length?this.createError(v.NOT_PASSED,{},"","/not",null,e,t):null},h.prototype.validateHypermedia=function(e,t,n){if(!t.links)return null;for(var o,i=0;i<t.links.length;i++){var a=t.links[i];if("describedby"===a.rel){for(var s=new r(a.href),u=!0,c=0;c<s.varNames.length;c++)if(!(s.varNames[c]in e)){u=!1;break}if(u){var l=s.fillFromObject(e),f={$ref:l};if(o=this.validateAll(e,f,[],["links",i],n))return o}}}};var v={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,NUMBER_NOT_A_NUMBER:105,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},_={};for(var b in v)_[v[b]]=b;var g={INVALID_TYPE:"Invalid type: {type} (expected {expected})",ENUM_MISMATCH:"No enum match for: {value}",ANY_OF_MISSING:'Data does not match any schemas from "anyOf"',ONE_OF_MISSING:'Data does not match any schemas from "oneOf"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from "oneOf": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from "not"',NUMBER_MULTIPLE_OF:"Value {value} is not a multiple of {multipleOf}",NUMBER_MINIMUM:"Value {value} is less than minimum {minimum}",NUMBER_MINIMUM_EXCLUSIVE:"Value {value} is equal to exclusive minimum {minimum}",NUMBER_MAXIMUM:"Value {value} is greater than maximum {maximum}",NUMBER_MAXIMUM_EXCLUSIVE:"Value {value} is equal to exclusive maximum {maximum}",NUMBER_NOT_A_NUMBER:"Value {value} is not a valid number",STRING_LENGTH_SHORT:"String is too short ({length} chars), minimum {minimum}",STRING_LENGTH_LONG:"String is too long ({length} chars), maximum {maximum}",STRING_PATTERN:"String does not match pattern: {pattern}",OBJECT_PROPERTIES_MINIMUM:"Too few properties defined ({propertyCount}), minimum {minimum}",OBJECT_PROPERTIES_MAXIMUM:"Too many properties defined ({propertyCount}), maximum {maximum}",OBJECT_REQUIRED:"Missing required property: {key}",OBJECT_ADDITIONAL_PROPERTIES:"Additional properties not allowed",OBJECT_DEPENDENCY_KEY:"Dependency failed - key must exist: {missing} (due to key: {key})",ARRAY_LENGTH_SHORT:"Array is too short ({length}), minimum {minimum}",ARRAY_LENGTH_LONG:"Array is too long ({length}), maximum {maximum}",ARRAY_UNIQUE:"Array items are not unique (indices {match1} and {match2})",ARRAY_ADDITIONAL_ITEMS:"Additional items not allowed",FORMAT_CUSTOM:"Format validation failed ({message})",KEYWORD_CUSTOM:"Keyword failed: {key} ({message})",CIRCULAR_REFERENCE:"Circular $refs: {urls}",UNKNOWN_PROPERTY:"Unknown property (not in schema)"};c.prototype=Object.create(Error.prototype),c.prototype.constructor=c,c.prototype.name="ValidationError",c.prototype.prefixWith=function(e,t){if(null!==e&&(e=e.replace(/~/g,"~0").replace(/\//g,"~1"),this.dataPath="/"+e+this.dataPath),null!==t&&(t=t.replace(/~/g,"~0").replace(/\//g,"~1"),this.schemaPath="/"+t+this.schemaPath),null!==this.subErrors)for(var r=0;r<this.subErrors.length;r++)this.subErrors[r].prefixWith(e,t);return this};var E={},j=f();return j.addLanguage("en-gb",g),j.tv4=j,j})},{}],100:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.MessageFactory=void 0;var o=e("./message-factory/MessageFactory"),i=n(o);r.MessageFactory=i["default"]},{"./message-factory/MessageFactory":103}],101:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.MessageType=r.Message=void 0;
var o=e("babel-runtime/core-js/object/get-prototype-of"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("babel-runtime/helpers/possibleConstructorReturn"),f=n(l),d=e("babel-runtime/helpers/inherits"),p=n(d),h=e("../reTHINKObject/RethinkObject.js"),y=n(h),m=r.Message=function(e){function t(e,r,n,o,a){(0,s["default"])(this,t);var u=(0,f["default"])(this,(t.__proto__||(0,i["default"])(t)).call(this));return u.id=e,u.from=r,u.to=n,u.type=o,u.body=a,u}return(0,p["default"])(t,e),(0,c["default"])(t,[{key:"assertIdentity",value:function(e,t){if(!e||!t)throw new Error("message, token to be removed, and assertedIdentity must be provided");var r=this.body;return r.idToken=null,r.assertedIdentity=t,this.body=r,this}},{key:"addIdToken",value:function(e){if(!e)throw new Error("message, token to be added, must be provided");var t=this.body;return t.idToken=e,this.body=t,this}},{key:"addAccessToken",value:function(e){if(!e)throw new Error("message, token to be added, must be provided");var t=this.body;return t.accessToken=e,this.body=t,this}}]),t}(y["default"]);r.MessageType={CREATE:"create",READ:"read",UPDATE:"update",DELETE:"delete",SUBSCRIBE:"subscribe",UNSUBSCRIBE:"unsubscribe",RESPONSE:"response",FORWARD:"forward",EXECUTE:"execute"};r["default"]=m},{"../reTHINKObject/RethinkObject.js":104,"babel-runtime/core-js/object/get-prototype-of":5,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/helpers/inherits":12,"babel-runtime/helpers/possibleConstructorReturn":13}],102:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=(0,u["default"])(e).reduce(function(t,r){return t[e[r]]=r,t},{});return(0,a["default"])((0,u["default"])(e).reduce(function(t,r){return t[r]=e[r],t},function(e){return t[e]}))}Object.defineProperty(r,"__esModule",{value:!0}),r.UPDATE_OPERATION=r.ATTRIBUTE_TYPE=r.REASON_PHRASE=r.RESPONSE_CODE=r.ExecuteMessageBody=r.ResponseMessageBody=r.ForwardMessageBody=r.UpdateMessageBody=r.DeleteMessageBody=r.ReadMessageBody=r.CreateMessageBody=r.MessageBody=void 0;var i=e("babel-runtime/core-js/object/freeze"),a=n(i),s=e("babel-runtime/core-js/object/keys"),u=n(s),c=e("babel-runtime/core-js/object/get-prototype-of"),l=n(c),f=e("babel-runtime/helpers/classCallCheck"),d=n(f),p=e("babel-runtime/helpers/createClass"),h=n(p),y=e("babel-runtime/helpers/possibleConstructorReturn"),m=n(y),v=e("babel-runtime/helpers/inherits"),_=n(v);r.Enum=o;var b=e("../reTHINKObject/RethinkObject.js"),g=n(b),E=r.MessageBody=function(e){function t(e,r,n,o,i){(0,d["default"])(this,t);var a=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this));return a.idToken=e,a.accessToken=r,a.resource=n,a.schema=o,a.assertedIdentity=i,a}return(0,_["default"])(t,e),(0,h["default"])(t,[{key:"addVia",value:function(e){if(!e)throw new Error("via URL to be added, must be provided");return this.via=e,this}}]),t}(g["default"]),j=(r.CreateMessageBody=function(e){function t(e,r,n,o,i,a,s){if((0,d["default"])(this,t),!e)throw new Error("The value parameter is null");var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,n,o,i,a,s,a,s));return u.value=e,r&&(u.policy=r),u}return(0,_["default"])(t,e),t}(E),r.ReadMessageBody=function(e){function t(e,r,n,o,i,a,s,u){(0,d["default"])(this,t);var c=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return a&&(c.attribute=a),s&&(c.criteriaSyntax=s),u&&(c.criteria=u),c}return(0,_["default"])(t,e),t}(E),r.DeleteMessageBody=function(e){function t(e,r,n,o,i,a){if((0,d["default"])(this,t),n instanceof Array){var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,null,o,i));s.childrenResources=n}else var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return a&&(s.attribute=a),(0,m["default"])(s)}return(0,_["default"])(t,e),t}(E),r.UpdateMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,d["default"])(this,t);var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return u.attribute=a,u.value=s,u}return(0,_["default"])(t,e),(0,h["default"])(t,[{key:"addAttributeType",value:function(e){e&&(this.attributeType=e)}},{key:"addOperation",value:function(e){e&&(this.operation=e)}}]),t}(E),r.ForwardMessageBody=function(e){function t(e,r,n,o,i,a){(0,d["default"])(this,t);var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return s.message=a,s}return(0,_["default"])(t,e),t}(E),r.ResponseMessageBody=function(e){function t(e,r,n,o,i){(0,d["default"])(this,t);var a=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n));return o&&(a.code=o,a.description=j[o]),i&&(a.value=i),a}return(0,_["default"])(t,e),t}(E),r.ExecuteMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,d["default"])(this,t);var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return u.method=a,s&&(s instanceof Array?u.params=s:u.params=[s]),u}return(0,_["default"])(t,e),t}(E),r.RESPONSE_CODE=o({100:"100",101:"101",200:"200",201:"201",202:"202",203:"203",204:"204",205:"205",206:"206",300:"300",301:"301",302:"302",303:"303",304:"304",305:"305",307:"307",400:"400",401:"401",402:"402",403:"403",404:"404",405:"405",406:"406",407:"407",408:"408",409:"409",410:"410",411:"411",412:"412",413:"413",414:"414",415:"415",416:"416",417:"417",426:"426",500:"500",501:"501",502:"502",503:"503",504:"504",505:"505"}),r.REASON_PHRASE=o({100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",426:"Upgrade Required",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported"}));r.ATTRIBUTE_TYPE=o({OBJECT:"OBJECT",ARRAY:"ARRAY"}),r.UPDATE_OPERATION=o({ADD:"ADD",REMOVE:"REMOVE"});r["default"]=E},{"../reTHINKObject/RethinkObject.js":104,"babel-runtime/core-js/object/freeze":4,"babel-runtime/core-js/object/get-prototype-of":5,"babel-runtime/core-js/object/keys":6,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/helpers/inherits":12,"babel-runtime/helpers/possibleConstructorReturn":13}],103:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.IdGenerator=void 0;var o=e("babel-runtime/regenerator"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("./Message.js"),f=n(l),d=e("./MessageBody.js"),p=function(){function e(){(0,s["default"])(this,e),this.myGenerator=(new h).idMaker()}return(0,c["default"])(e,[{key:"createCreateMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to, and value of object to be created MUST be specified");var o=this.myGenerator.next().value,i=new d.CreateMessageBody(r,n,(void 0),(void 0),(void 0),(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.CREATE,i);return a}},{key:"createForwardMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to, and message to forward MUST be specified");var n=this.myGenerator.next().value,o=new d.ForwardMessageBody((void 0),(void 0),(void 0),(void 0),(void 0),r),i=new f["default"](n,e,t,l.MessageType.FORWARD,o);return i}},{key:"createDeleteMessageRequest",value:function(e,t,r,n){if(!e||!t)throw new Error("from and to parameters MUST be specified");var o=this.myGenerator.next().value,i=new d.DeleteMessageBody((void 0),(void 0),r,n,(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.DELETE,i);return a}},{key:"createUpdateMessageRequest",value:function(e,t,r,n,o){if(!e||!t||!r)throw new Error("from, and to and value MUST be specified");var i=this.myGenerator.next().value,a=new d.UpdateMessageBody((void 0),(void 0),n,(void 0),(void 0),o,r),s=new f["default"](i,e,t,l.MessageType.UPDATE,a);return s}},{key:"createReadMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to and the resource to read from MUST be specified");var o=this.myGenerator.next().value,i=new d.ReadMessageBody((void 0),(void 0),r,(void 0),(void 0),n,(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.READ,i);return a}},{key:"createSubscribeMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to and the resource to subscribe to MUST be specified");var n=this.myGenerator.next().value,o=new d.MessageBody((void 0),(void 0),r,(void 0),(void 0)),i=new f["default"](n,e,t,l.MessageType.SUBSCRIBE,o);return i}},{key:"createUnsubscribeMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to and the resource to subscribe to MUST be specified");var n=this.myGenerator.next().value,o=new d.MessageBody((void 0),(void 0),r,(void 0),(void 0)),i=new f["default"](n,e,t,l.MessageType.UNSUBSCRIBE,o);return i}},{key:"createExecuteMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to and the method to execute MUST be specified");var o=this.myGenerator.next().value,i=new d.ExecuteMessageBody((void 0),(void 0),(void 0),(void 0),(void 0),r,n),a=new f["default"](o,e,t,l.MessageType.EXECUTE,i);return a}},{key:"createMessageResponse",value:function(e,t,r,n){if(!t)throw new Error("response Code MUST be specified");var o=new d.ResponseMessageBody((void 0),(void 0),(void 0),t,r,n);return new f["default"](e.id,e.to,e.from,l.MessageType.RESPONSE,o)}},{key:"generateMessageResponse",value:function(e,t,r){if(!e||!t)throw new Error("message and response code MUST be specified");var n=e.body,o=n.idToken,i=n.accessToken,a=n.resource,s=new d.ResponseMessageBody(o,i,a,t,r),u=this.myGenerator.next().value;return new f["default"](u,e.to,e.from,l.MessageType.RESPONSE,s)}}]),e}(),h=r.IdGenerator=function(){function e(){(0,s["default"])(this,e)}return(0,c["default"])(e,[{key:"idMaker",value:i["default"].mark(function t(){var e;return i["default"].wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e=1;case 1:if(!(e<1e6)){t.next=6;break}return t.next=4,e++;case 4:t.next=1;break;case 6:case"end":return t.stop()}},t,this)})}]),e}();r["default"]=p},{"./Message.js":101,"./MessageBody.js":102,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/regenerator":15}],104:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.RethinkObject=void 0;var o=e("babel-runtime/core-js/json/stringify"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("tv4"),f=n(l),d=r.RethinkObject=function(){function e(){(0,s["default"])(this,e)}return(0,c["default"])(e,[{key:"validate",value:function(e){f["default"].addSchema(e.id,e);var t=f["default"].validateMultiple(JSON.parse((0,i["default"])(this)),e);return t.errors.forEach(function(e){delete e.stack}),(!t.valid||t.missing.length>0)&&(console.warn("Object validation "+(t.valid?"succeeded, but schema contained references:":"failed:"),(0,i["default"])(t,null,2)),console.log("Object:",(0,i["default"])(this,null,2))),t.valid}}]),e}();r["default"]=d},{"babel-runtime/core-js/json/stringify":1,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,tv4:99}]},{},[100])(100)});


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],417:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
// import MessageFactory from '../../resources/MessageFactory';

/**
 * Class will ask to the message node for addresses
 */
var AddressAllocation = function () {
  /* private
  _url: URL
  _bus: MiniBus
  */

  /**
   * Create an Address Allocation
   * @param  {URL.URL}      url - url from who is sending the message
   * @param  {MiniBus}      bus - MiniBus used for address allocation
   */
  function AddressAllocation(url, bus, registry) {
    (0, _classCallCheck3.default)(this, AddressAllocation);

    var _this = this;

    // let messageFactory = new MessageFactory();
    //
    // _this._messageFactory = messageFactory;
    _this._url = url;
    _this._bus = bus;
    _this._registry = registry;
  }

  /**
   * get the URL value
   * @return {string} The url value;
   */


  (0, _createClass3.default)(AddressAllocation, [{
    key: 'create',


    /**
     * Ask for creation of a number of Hyperty addresses, to the domain message node.
     * @param  {Domain} domain - Domain of the message node.
     * @param  {number} number - Number of addresses to request
     * @returns {Promise<HypertyURL>}  A list of HypertyURL's
     */
    value: function create(domain, number, info, scheme, reuseURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        if (reuseURL) {

          _this._registry.checkRegisteredURLs(info).then(function (urls) {

            if (urls) {
              console.info('[AddressAllocation - ' + scheme + '] - Reuse URL');
              var value = { newAddress: false, address: urls };
              resolve(value);
            } else {
              console.info('[AddressAllocation - reuseURL] - Object ' + reuseURL + ' not found');
              reject('URL Not Found');
            }
          }).catch(function (reason) {
            reject(reason);
          });
        } else {

          _this._registry.checkRegisteredURLs(info).then(function (urls) {

            // if there is already a URL, then returns that URL, otherwise request a new URL
            if (urls) {

              console.info('[AddressAllocation - ' + scheme + '] - Reuse URL');
              var value = { newAddress: false, address: urls };
              resolve(value);
            } else {

              // if there is no URL saved request a new URL
              _this._allocateNewAddress(domain, scheme, number).then(function (allocated) {
                resolve(allocated);
              }).catch(function (reason) {
                reject(reason);
              });
            }
          }).catch(function (reason) {
            reject(reason);
          });
        }
      });
    }
  }, {
    key: '_allocateNewAddress',
    value: function _allocateNewAddress(domain, scheme, number) {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {

        var msg = {
          type: 'create', from: _this2._url, to: 'domain://msg-node.' + domain + '/address-allocation',
          body: { value: { number: number } }
        };

        if (scheme !== 'hyperty') msg.body.scheme = scheme;

        console.info('[AddressAllocation - ' + scheme + '] - Request new URL');

        // TODO: change this response Message using the MessageFactory
        _this2._bus.postMessage(msg, function (reply) {
          if (reply.body.code === 200) {
            var result = { newAddress: true, address: reply.body.value.allocated };
            resolve(result);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }

    /**
    * Send a request to the domain message node, to deallocate one or more addresses
    * @param  {Domain} domain - Domain of the message node.
    * @param  {addresses} addresses to request the deallocation
    * @returns {Promise}  the response by the message node
    */

  }, {
    key: 'delete',
    value: function _delete(domain, addresses) {
      var _this = this;

      var message = {
        type: 'delete', from: _this._url, to: 'domain://msg-node.' + domain + '/address-allocation',
        body: { childrenResources: addresses }
      };

      return new _promise2.default(function (resolve, reject) {

        _this._bus.postMessage(message, function (reply) {
          console.log('reply', reply);
          if (reply.body.code === 200) {
            resolve(reply.body.code);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return AddressAllocation;
}();

exports.default = AddressAllocation;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],418:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author micaelpedrosa@gmail.com
* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.
* Components that need a message system should receive this class as a dependency or extend it.
* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener
*/
var Bus = function () {
  /* private
  _msgId: number;
  _subscriptions: <url: MsgListener[]>
    _responseTimeOut: number
  _responseCallbacks: <url+id: (msg) => void>
    */

  function Bus() {
    (0, _classCallCheck3.default)(this, Bus);

    var _this = this;
    _this._msgId = 0;
    _this._subscriptions = {};

    _this._responseTimeOut = 5000; //default to 3s
    _this._responseCallbacks = {};

    _this._registerExternalListener();
  }

  /**
  * Register listener to receive message when "msg.to === url".
  * Special url "*" for default listener is accepted to intercept all messages.
  * @param {URL} url Address to intercept, tha is in the message "to"
  * @param {Listener} listener listener
  * @return {MsgListener} instance of MsgListener
  */


  (0, _createClass3.default)(Bus, [{
    key: 'addListener',
    value: function addListener(url, listener) {
      var _this = this;

      var item = new MsgListener(_this._subscriptions, url, listener);
      var itemList = _this._subscriptions[url];
      if (!itemList) {
        itemList = [];
        _this._subscriptions[url] = itemList;
      }

      itemList.push(item);
      return item;
    }

    /**
     * Manually add a response listener. Only one listener per message ID should exist.
     * ATENTION, there is no timeout for this listener.
     * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.
     * @param {URL} url Origin address of the message sent, "msg.from".
     * @param {number} msgId Message ID that is returned from the postMessage.
     * @param {Function} responseListener Callback function for the response
     */

  }, {
    key: 'addResponseListener',
    value: function addResponseListener(url, msgId, responseListener) {
      this._responseCallbacks[url + msgId] = responseListener;
    }

    /**
     * Remove the response listener.
     * @param {URL} url Origin address of the message sent, "msg.from".
     * @param {number} msgId  Message ID that is returned from the postMessage
     */

  }, {
    key: 'removeResponseListener',
    value: function removeResponseListener(url, msgId) {
      delete this._responseCallbacks[url + msgId];
    }

    /**
     * Remove all existent listeners for the URL
     * @param  {URL} url Address registered
     */

  }, {
    key: 'removeAllListenersOf',
    value: function removeAllListenersOf(url) {
      delete this._subscriptions[url];
    }

    /**
     * Helper method to bind listeners (in both directions) into other MiniBus target.
     * @param  {URL} outUrl Outbound URL, register listener for url in direction "this -> target"
     * @param  {URL} inUrl Inbound URL, register listener for url in direction "target -> this"
     * @param  {MiniBus} target The other target MiniBus
     * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.
     */

  }, {
    key: 'bind',
    value: function bind(outUrl, inUrl, target) {
      var _this2 = this;

      var _this = this;

      var thisListn = _this.addListener(outUrl, function (msg) {
        target.postMessage(msg);
      });

      var targetListn = target.addListener(inUrl, function (msg) {
        _this.postMessage(msg);
      });

      return {
        thisListener: thisListn,
        targetListener: targetListn,
        unbind: function unbind() {
          _this2.thisListener.remove();
          _this2.targetListener.remove();
        }
      };
    }

    //publish on default listeners

  }, {
    key: '_publishOnDefault',
    value: function _publishOnDefault(msg) {
      //is there any "*" (default) listeners?
      var itemList = this._subscriptions['*'];
      if (itemList) {
        this._publishOn(itemList, msg);
      }
    }

    //publish on a subscription list.

  }, {
    key: '_publishOn',
    value: function _publishOn(itemList, msg) {
      itemList.forEach(function (sub) {
        sub._callback(msg);
      });
    }
  }, {
    key: '_responseCallback',
    value: function _responseCallback(inMsg, responseCallback) {
      var _this = this;

      //automatic management of response handlers
      if (responseCallback) {
        (function () {
          var responseId = inMsg.from + inMsg.id;
          _this._responseCallbacks[responseId] = responseCallback;

          setTimeout(function () {
            var responseFun = _this._responseCallbacks[responseId];
            delete _this._responseCallbacks[responseId];

            if (responseFun) {
              var errorMsg = {
                id: inMsg.id, type: 'response',
                body: { code: 408, desc: 'Response timeout!', value: inMsg }
              };

              responseFun(errorMsg);
            }
          }, _this._responseTimeOut);
        })();
      }
    }
  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      if (msg.type === 'response') {
        var responseId = msg.to + msg.id;
        var responseFun = _this._responseCallbacks[responseId];

        //if it's a provisional response, don't delete response listener
        if (msg.body.code >= 200) {
          delete _this._responseCallbacks[responseId];
        }

        if (responseFun) {
          responseFun(msg);
          return true;
        }
      }

      return false;
    }

    //receive messages from external interface

  }, {
    key: '_onMessage',
    value: function _onMessage(msg) {
      var _this = this;

      if (!_this._onResponse(msg)) {
        var itemList = _this._subscriptions[msg.to];
        if (itemList) {
          _this._publishOn(itemList, msg);
        } else {
          _this._publishOnDefault(msg);
        }
      }
    }
  }, {
    key: '_genId',
    value: function _genId(inMsg) {
      //TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?
      //Global counter will not work, because there will be multiple MiniBus instances!
      //Per URL, can be a lot of data to maintain!
      //Maybe a counter per MiniBus instance. This is the assumed solution for now.
      if (!inMsg.id || inMsg.id === 0) {
        this._msgId++;
        inMsg.id = this._msgId;
      }
    }

    /**
    * Send messages to local listeners, or if not exists to external listeners.
    * It's has an optional mechanism for automatic management of response handlers.
    * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).
    * @param  {Message} msg Message to send. Message ID is automatically added to the message.
    * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.
    * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.
    */

  }, {
    key: 'postMessage',
    value: function postMessage(inMsg, responseCallback) {}

    /**
     * Not public available, used by the class extension implementation, to process messages from the public "postMessage" without a registered listener.
     * Used to send the message to an external interface, like a WebWorker, IFrame, etc.
     * @param  {Message.Message} msg Message
     */

  }, {
    key: '_onPostMessage',
    value: function _onPostMessage(msg) {} /*implementation will send message to external system*/

    /**
     * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.
     * This method is called one time in the constructor to register external listeners.
     * The implementation will probably call the "_onMessage" method to publish in the local listeners.
     * DO NOT call "postMessage", there is a danger that the message enters in a cycle!
     */

  }, {
    key: '_registerExternalListener',
    value: function _registerExternalListener() {/*implementation will register external listener and call "this._onMessage(msg)" */}
  }]);
  return Bus;
}();

var MsgListener = function () {
  /* private
  _subscriptions: <string: MsgListener[]>;
  _url: string;
  _callback: (msg) => void;
  */

  function MsgListener(subscriptions, url, callback) {
    (0, _classCallCheck3.default)(this, MsgListener);

    var _this = this;

    _this._subscriptions = subscriptions;
    _this._url = url;
    _this._callback = callback;
  }

  (0, _createClass3.default)(MsgListener, [{
    key: 'remove',


    /**
     * Remove this listener from the Bus
     */
    value: function remove() {
      var _this = this;

      var subs = _this._subscriptions[_this._url];
      if (subs) {
        var index = subs.indexOf(_this);
        subs.splice(index, 1);

        //if there are no listeners, remove the subscription entirely.
        if (subs.length === 0) {
          delete _this._subscriptions[_this._url];
        }
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return MsgListener;
}();

exports.default = Bus;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],419:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Bus2 = require('./Bus');

var _Bus3 = _interopRequireDefault(_Bus2);

var _Pipeline = require('./Pipeline');

var _Pipeline2 = _interopRequireDefault(_Pipeline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author micaelpedrosa@gmail.com
* Message BUS Interface is an extension of the Bus
* It doesn't support the default '*' listener, instead it uses the registry.resolve(..)
*/
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var MessageBus = function (_Bus) {
  (0, _inherits3.default)(MessageBus, _Bus);

  /* private
  _registry: Registry
  _forwards: { <from-url>: { fl: MsgListener, sandboxToUrls: Map(Sandbox, [to-url]), urlToSandbox: { to-url: Sandbox } } }
    _pipeline: Pipeline
  */

  //TODO: future optimization
  //1. message batch processing with setInterval
  //2. resolve default gateway/protostub with register.resolve

  function MessageBus(registry) {
    (0, _classCallCheck3.default)(this, MessageBus);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (MessageBus.__proto__ || (0, _getPrototypeOf2.default)(MessageBus)).call(this));

    _this2._registry = registry;
    _this2._forwards = {};

    _this2._pipeline = new _Pipeline2.default(function (error) {
      console.log('PIPELINE-ERROR: ', (0, _stringify2.default)(error));
    });
    return _this2;
  }

  (0, _createClass3.default)(MessageBus, [{
    key: 'postMessage',


    /**
     * Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.
     * External routing use the registry.resolve(..) method to decide the destination sandbox.
     * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}
     * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a "Timeout".
     * @return {number}                  the Message id
     */
    value: function postMessage(inMsg, responseCallback) {
      console.log('onPOSTMessage: ', inMsg);
      var _this = this;

      _this._genId(inMsg);

      _this._pipeline.process(inMsg, function (msg) {

        _this._responseCallback(inMsg, responseCallback);

        if (!_this._onResponse(msg)) {
          var itemList = _this._subscriptions[msg.to];
          if (itemList) {
            //do not publish on default address, because of loopback cycle
            _this._publishOn(itemList, msg);
          } else {
            //if there is no listener, send to external interface
            _this._onPostMessage(msg);
          }
        }
      });

      return inMsg.id;
    }

    /**
     * Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.
     * This means, even if there is a listener for the address, it will also send the message to the external routing.
     * @param {URL} from Publish address.
     */

  }, {
    key: 'addPublish',
    value: function addPublish(from) {
      var _this3 = this;

      var _this = this;

      //verify if forward exist
      var refCount = _this._forwards[from];
      if (!refCount) {
        var forwardListener = _this.addListener(from, function (msg) {
          console.log('MB-PUBLISH: ( ' + from + ' )');
          _this._onPostMessage(msg);
        });

        refCount = {
          counter: 0,
          fl: forwardListener,
          remove: function remove() {
            _this3.counter--;
            if (_this3.counter === 0) {
              _this3.fl.remove();
              delete _this._forwards[from];
            }
          }
        };

        _this._forwards[from] = refCount;
      }

      refCount.counter++;
      return refCount;
    }

    /**
     * Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.
     * @param {URL} from Message destination, it's actually the field "to" of the message.
     * @param {URL} to   Forward address.
     */

  }, {
    key: 'addForward',
    value: function addForward(from, to) {
      var _this = this;

      return _this.addListener(from, function (msg) {
        console.log('MB-FORWARD: ( ' + from + ' to ' + to + ' )');
        _this.forward(to, msg);
      });
    }

    /**
     * Just forward's a message to the forward address. Listeners should be available for the forward address.
     * @param  {URL} url Forward address.
     * @param  {Message} msg Message to forward
     */

  }, {
    key: 'forward',
    value: function forward(url, msg) {
      var _this = this;

      var itemList = _this._subscriptions[url];
      if (itemList) {
        _this._publishOn(itemList, msg);
      }
    }

    //default route, if there are no listeners available for a message destination.

  }, {
    key: '_onPostMessage',
    value: function _onPostMessage(msg) {
      var _this = this;

      //resolve external protostub...
      _this._registry.resolve(msg.to).then(function (route) {
        _this.forward(route, msg);
      }).catch(function (e) {
        console.log('RESOLVE-ERROR: ', e);
      });
    }
  }, {
    key: 'pipeline',
    get: function get() {
      return this._pipeline;
    }
  }]);
  return MessageBus;
}(_Bus3.default);

exports.default = MessageBus;
module.exports = exports['default'];

},{"./Bus":418,"./Pipeline":420,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],420:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author micaelpedrosa@gmail.com
* Sequencial processor of methods. Similar to how Sequential Promise's work, but better fit for message processing.
* Normal use for this, is to intercept all messages with configured handlers, and act accordingly.
*/
var Pipeline = function () {
  /* public
    handlers: ((PipeContext) => void)[]
    onFail: (error) => void
  */

  function Pipeline(_onFail) {
    (0, _classCallCheck3.default)(this, Pipeline);

    var _this = this;

    _this.handlers = [];
    _this.onFail = _onFail;
  }

  /**
   * Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.
   * @param  {Message} msg       Message for the queue
   * @param  {Callback} onDeliver When message is finished processing from all handlers, it will be delivered in this callback.
   */


  (0, _createClass3.default)(Pipeline, [{
    key: "process",
    value: function process(msg, onDeliver) {
      var _this = this;

      if (_this.handlers.length > 0) {
        var iter = new Iterator(_this.handlers);
        iter.next(new PipeContext(_this, iter, msg, onDeliver));
      } else {
        onDeliver(msg);
      }
    }
  }]);
  return Pipeline;
}();

/**
* @author micaelpedrosa@gmail.com
* Wrapper around a message that adds actions that can be fired by any interceptor handler.
* The Pipeline is asynchronous, so an handler should always call an action, the default one is "next()"
*/


var PipeContext = function () {
  /* private
    _inStop: boolean
      _pipeline: Pipeline
    _iter: Iterator
    _msg: Message
  */

  function PipeContext(pipeline, iter, msg, onDeliver) {
    (0, _classCallCheck3.default)(this, PipeContext);

    var _this = this;

    _this._inStop = false;

    _this._pipeline = pipeline;
    _this._iter = iter;
    _this._msg = msg;
    _this._onDeliver = onDeliver;
  }

  (0, _createClass3.default)(PipeContext, [{
    key: "next",


    /**
     * Proceed to the next interceptor handler, unless there was an error. If it's the last one, proceed to onDeliver handler.
     */
    value: function next() {
      var _this = this;

      if (!_this._inStop) {
        if (_this._iter.hasNext) {
          _this._iter.next(_this);
        } else {
          _this._onDeliver(_this._msg);
        }
      }
    }

    /**
     * Proceed directly to the onDeliver handler, unless there was an error.
     */

  }, {
    key: "deliver",
    value: function deliver() {
      var _this = this;
      if (!_this._inStop) {
        _this._inStop = true;
        _this._onDeliver(_this._msg);
      }
    }

    /**
     * Mark the context with an error and proceed to the onFail handler.
     * @param  {[type]} error [description]
     */

  }, {
    key: "fail",
    value: function fail(error) {
      var _this = this;

      if (!_this._inStop) {
        _this._inStop = true;
        if (_this._pipeline.onFail) {
          _this._pipeline.onFail(error);
        }
      }
    }
  }, {
    key: "pipeline",
    get: function get() {
      return this._pipeline;
    }
  }, {
    key: "msg",
    get: function get() {
      return this._msg;
    },
    set: function set(inMsg) {
      this._msg = inMsg;
    }
  }]);
  return PipeContext;
}();

var Iterator = function () {
  /* private
    _index: number
    _array: []
  */

  function Iterator(array) {
    (0, _classCallCheck3.default)(this, Iterator);

    this._index = -1;
    this._array = array;
  }

  (0, _createClass3.default)(Iterator, [{
    key: "hasNext",
    get: function get() {
      return this._index < this._array.length - 1;
    }
  }, {
    key: "next",
    get: function get() {
      this._index++;
      return this._array[this._index];
    }
  }]);
  return Iterator;
}();

exports.default = Pipeline;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],421:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Class with the cryptographic functions for the authentication protocol
*
*/
var Crypto = function () {
  function Crypto() {
    (0, _classCallCheck3.default)(this, Crypto);

    var _this = this;
  }

  /**
  * encode a byteArray value in base 64 encode
  * @param   {byteArray}    value    byteArray value
  * @return  {string}   encoded value
  */


  (0, _createClass3.default)(Crypto, [{
    key: 'encode',
    value: function encode(value) {
      return btoa(value);
    }

    /**
    * decode a base64 value in a new Uint8Array
    * @param   {string}    value    value encoded in base 64
    * @return  {byteArray} decodedValue
    */

  }, {
    key: 'decode',
    value: function decode(value) {
      return new Uint8Array(JSON.parse('[' + atob(value) + ']'));
    }
  }, {
    key: 'encryptRSA',
    value: function encryptRSA(pubKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAencryptKey(new Uint8Array(pubKey)).then(function (publicKey) {

          crypto.subtle.encrypt({
            name: 'RSA-OAEP'
          }, publicKey, //from generateKey or importKey above
          data //ArrayBuffer of data you want to encrypt
          ).then(function (encrypted) {
            //returns an ArrayBuffer containing the encrypted data
            //console.log('crypto-encryptRSA', new Uint8Array(encrypted));
            resolve(new Uint8Array(encrypted));
          }).catch(function (err) {
            console.log('crypto-encryptRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'decryptRSA',
    value: function decryptRSA(privKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAdecryptKey(privKey).then(function (privateKey) {

          crypto.subtle.decrypt({
            name: 'RSA-OAEP'
          }, privateKey, //from generateKey or importKey above
          data //ArrayBuffer of the data
          ).then(function (decrypted) {

            var decryptedData = new Uint8Array(decrypted);

            //console.log('crypto-decryptRSA', decryptedData);
            resolve(decryptedData);
          }).catch(function (err) {
            console.log('crypto-decryptRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'signRSA',
    value: function signRSA(privKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAsignKey(privKey).then(function (privateKey) {

          crypto.subtle.sign({
            name: 'RSASSA-PKCS1-v1_5'
          }, privateKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to sign
          ).then(function (signature) {
            //returns an ArrayBuffer containing the signature
            //console.log('crypto-signRSA', new Uint8Array(signature));
            resolve(new Uint8Array(signature));
          }).catch(function (err) {
            console.log('crypto-signRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'verifyRSA',
    value: function verifyRSA(pubKey, data, signature) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAverifyKey(pubKey).then(function (publicKey) {

          crypto.subtle.verify({
            name: 'RSASSA-PKCS1-v1_5'
          }, publicKey, //from generateKey or importKey above
          signature, //ArrayBuffer of the signature
          _this._utf8Encode(data) //ArrayBuffer of the data
          ).then(function (isvalid) {
            //returns a boolean on whether the signature is true or not
            //console.log('crypto-verifyRSA', isvalid);
            resolve(isvalid);
          }).catch(function (err) {
            console.log('crypto-verifyRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'encryptAES',
    value: function encryptAES(key, data, iv) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importAESkey(key).then(function (aesKey) {

          crypto.subtle.encrypt({
            name: 'AES-CBC',
            //Don't re-use initialization vectors!
            //Always generate a new iv every time your encrypt!
            iv: iv
          }, aesKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to encrypt
          ).then(function (encrypted) {
            //returns an ArrayBuffer containing the encrypted data
            //console.log('crypto-encryptAES', new Uint8Array(encrypted));
            resolve(new Uint8Array(encrypted));
          }).catch(function (err) {
            console.log('crypto-encryptAES', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'decryptAES',
    value: function decryptAES(key, data, iv) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importAESkey(key).then(function (aesKey) {

          crypto.subtle.decrypt({
            name: 'AES-CBC',
            iv: iv
          }, aesKey, //from generateKey or importKey above
          data //ArrayBuffer of the data
          ).then(function (decrypted) {

            var decodedData = _this._utf8Decode(new Uint8Array(decrypted));
            //console.log('crypto-decryptAES', decodedData);
            resolve(decodedData);
          }).catch(function (err) {
            console.log('crypto-decryptAES', err);
            reject(err);
          });
        });
      });
    }

    /**
    * creates a hash using the HMAC algorithm
    * @param  {byteArray}    key       key to be used in the hmac
    * @param  {string}      data       information to be hashed
    * @return  {byteArray}   signature  resulting hash
    */

  }, {
    key: 'hashHMAC',
    value: function hashHMAC(key, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._importHMACkey(key).then(function (hmacKey) {

          crypto.subtle.sign({
            name: 'HMAC'
          }, hmacKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to sign
          ).then(function (signature) {
            //console.log('crypto-hashHMAC', signature);

            //returns an ArrayBuffer containing the signature
            resolve(new Uint8Array(signature));
          }).catch(function (err) {
            console.log('crypto-hashHMAC', err);
            reject(err);
          });
        });
      });
    }

    /**
    * verifies an hash using the HMAC algorithm
    * @param  {byteArray}    key       key to be used in the hmac
    * @param  {string}      data       information to be hashed to compare
    * @param  {byteArray}  signature   hash to compare with the received data
    * @return  {boolean}   isvalid     boolean saying if the data corresponds to the hash received
    */

  }, {
    key: 'verifyHMAC',
    value: function verifyHMAC(key, data, signature) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._importHMACkey(key).then(function (hmacKey) {

          crypto.subtle.verify({
            name: 'HMAC'
          }, hmacKey, //from generateKey or importKey above
          signature, //ArrayBuffer of the signature
          _this._utf8Encode(data) //ArrayBuffer of the data
          ).then(function (isvalid) {
            //returns a boolean on whether the signature is true or not
            //console.log('crypto-verifyHMAC', isvalid);
            isvalid ? resolve(isvalid) : reject(isvalid);
          }).catch(function (err) {
            console.error('crypto-verifyHMAC', err);
            reject(err);
          });
        });
      });
    }

    /**
    * generates a RSA public/private key pair with a modulus length of 2048 bits
    * @return  {JSON}   keyPair    json containing the public and private keys
    */

  }, {
    key: 'generateRSAKeyPair',
    value: function generateRSAKeyPair() {
      var _this = this;
      var keyPair = {};

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.generateKey({
          name: 'RSA-PSS',
          modulusLength: 2048, //can be 1024, 2048, or 4096
          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['sign', 'verify'] //can be any combination of 'sign' and 'verify'

        ).then(function (key) {
          //returns a keypair object
          //console.log(key);

          crypto.subtle.exportKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
          key.publicKey //can be a publicKey or privateKey, as long as extractable was true
          ).then(function (publicKey) {
            //returns the exported key data
            keyPair.public = new Uint8Array(publicKey);
            return crypto.subtle.exportKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
            key.privateKey //can be a publicKey or privateKey, as long as extractable was true
            );
          }).then(function (privateKey) {
            keyPair.private = new Uint8Array(privateKey);
            //console.log('crypto-generateRSAKeyPair', keyPair);

            resolve(keyPair);
          }).catch(function (err) {
            console.error(err);
            reject(err);
          });
        }).catch(function (err) {
          console.error(err);
          reject(err);
        });
      });
    }

    /**
    * Generates a 128 bit random value.
    * @return {byteArray}  array    random value
    */

  }, {
    key: 'generateIV',
    value: function generateIV() {
      var _this = this;

      var array = new Uint8Array(16);
      crypto.getRandomValues(array);

      return array;
    }

    /**
    * Generates a 256 bit random value. 32 bits are extrated from the machine time,
    * the remaining are generated randomly
    * @return {byteArray}  array    random value
    */

  }, {
    key: 'generateRandom',
    value: function generateRandom() {
      var _this = this;

      var array = new Uint8Array(32);
      crypto.getRandomValues(array);

      var date = Date.now();
      var dateEncoded = _this._utf8Encode(date);

      //extract the least significant 4 bytes in the date
      var finalDate = dateEncoded.slice(dateEncoded.length - 4, dateEncoded.length);

      // add in the first 4 bytes of the array the bytes extracted previously;
      for (var i = 0; i < 4; i++) {
        array[i] = finalDate[i];
      }
      return array;
    }

    /**
    * generates a premaster secret (PMS) of 48 bytes (384 bits) randomly
    * @return {byteArray}  array    premaster secret key
    */

  }, {
    key: 'generatePMS',
    value: function generatePMS() {
      var _this = this;

      var array = new Uint8Array(48);
      crypto.getRandomValues(array);
      return array;
    }

    /**
    * generates a masterKey secret (PMS) of 48 bytes (384 bits) using the premaster secret and
    * two randoms
    * @return {byteArray}  array    master secret key with 48 bytes
    */

  }, {
    key: 'generateMasterSecret',
    value: function generateMasterSecret(hmacKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var key = new Uint8Array(48);
        var seed = data;

        _this._digest(hmacKey).then(function (digestedKey) {

          _this.hashHMAC(digestedKey, seed).then(function (keypart0) {

            //copy the first 32 bytes into the key
            for (var i = 0; i < 32; i++) {
              key[i] = keypart0[i];
            }
            return _this.hashHMAC(digestedKey, seed + keypart0);
          }).then(function (keypart1) {

            //copy the first 16 bytes to the key remaining 16 bytes
            for (var i = 0; i < 16; i++) {
              key[i + 32] = keypart1[i];
            }
            //console.log('crypto-generateMasterSecret', key);
            resolve(key);
          }).catch(function (err) {
            console.log('crypto-generateMasterSecret', err);
            reject(err);
          });
        });
      });
    }

    /**
    * generates both users MAC and encryption keys. generate as output an array
    * with 4 byteArray each with 32 bytes
    * @param  {byteArray}        secret       secret to be used in the HMAC function
    * @param  {String}           data         information to be used as seed
    * @return {Array<byteArray>} key          array with the information to generate keys
    */

  }, {
    key: 'generateKeys',
    value: function generateKeys(hmacKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var key = [];
        var seed = data;

        // iterate 4 times to obtain a 1024 key size
        _this.hashHMAC(hmacKey, seed).then(function (keypart0) {
          key.push(keypart0);
          return _this.hashHMAC(hmacKey, seed + keypart0);
        }).then(function (keypart1) {
          key.push(keypart1);
          return _this.hashHMAC(hmacKey, seed + keypart1);
        }).then(function (keypart2) {
          key.push(keypart2);
          return _this.hashHMAC(hmacKey, seed + keypart2);
        }).then(function (keypart3) {
          key.push(keypart3);

          //console.log('crypto-generateKeys', key);
          resolve(key);
        }).catch(function (err) {
          //console.log('crypto-generateKeys', err);
          reject(err);
        });

        //console.log(hmacKey, data);
      });
    }
  }, {
    key: '_importRSAsignKey',
    value: function _importRSAsignKey(privKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        privKey, { //these are the algorithm options
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['sign'] //'verify' for public key import, 'sign' for private key imports
        ).then(function (privateKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAsignKey', privateKey);
          resolve(privateKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAsignKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAverifyKey',
    value: function _importRSAverifyKey(pubKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        pubKey, { //these are the algorithm options
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['verify'] //'verify' for public key import, 'sign' for private key imports
        ).then(function (publicKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAverifyKey', publicKey);
          resolve(publicKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAverifyKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAencryptKey',
    value: function _importRSAencryptKey(pubKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        pubKey, { //these are the algorithm options
          name: 'RSA-OAEP',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['encrypt'] //'encrypt' or 'wrapKey' for public key import or
        //'decrypt' or 'unwrapKey' for private key imports
        ).then(function (publicKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAencryptKey', publicKey);
          resolve(publicKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAencryptKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAdecryptKey',
    value: function _importRSAdecryptKey(privKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        privKey, { //these are the algorithm options
          name: 'RSA-OAEP',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['decrypt'] //'encrypt' or 'wrapKey' for public key import or
        //'decrypt' or 'unwrapKey' for private key imports
        ).then(function (privateKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAdecryptKey', privateKey);
          resolve(privateKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAdecryptKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: 'concatPMSwithRandoms',
    value: function concatPMSwithRandoms(pms, toRandom, fromRandom) {
      var _this = this;

      var finalKey = new Uint8Array(pms.length + toRandom.length + fromRandom.length);

      // add PremasterKey
      for (var i = 0; i < pms.length; i++) {
        finalKey[i] = pms[i];
      }

      //add to random
      for (var _i = 0; _i < toRandom.length; _i++) {
        finalKey[_i + pms.length] = pms[_i];
      }

      //add from random
      for (var _i2 = 0; _i2 < fromRandom.length; _i2++) {
        finalKey[_i2 + pms.length + toRandom.length] = pms[_i2];
      }

      return finalKey;
    }
  }, {
    key: '_generate256bitKey',
    value: function _generate256bitKey() {
      var array = new Uint8Array(32);
      crypto.getRandomValues(array);

      return array;
    }

    /**
    * imports the secret to the HMAC function
    * @param  {byteArray}   arrayBuffer     bytes to import as key
    * @return {JSON}       key              key ready to be used in the HMAC cryptographic function
    */

  }, {
    key: '_importHMACkey',
    value: function _importHMACkey(arrayBuffer) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._digest(arrayBuffer).then(function (key) {

          crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'
          key, { //this is the algorithm options
            name: 'HMAC',
            hash: { name: 'SHA-256' }, //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
            length: 256 //optional, if you want your key length to differ from the hash function's block length
          }, true, //whether the key is extractable (i.e. can be used in exportKey)
          ['sign', 'verify'] //can be any combination of 'sign' and 'verify'
          ).then(function (key) {
            //returns the symmetric key
            //console.log('crypto-_importHMACkey', key);
            resolve(key);
          }).catch(function (err) {
            reject(err);
          });
        });
      });
    }
  }, {
    key: '_digest',
    value: function _digest(value) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.digest({
          name: 'SHA-256'
        }, value //The data you want to hash as an ArrayBuffer
        ).then(function (hash) {
          //returns the hash as an ArrayBuffer
          //console.log('crypto-digest', new Uint8Array(hash));
          resolve(new Uint8Array(hash));
        }).catch(function (err) {
          console.error(err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importAESkey',
    value: function _importAESkey(arrayBuffer) {
      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'
        arrayBuffer, { //this is the algorithm options
          name: 'AES-CBC'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['encrypt', 'decrypt'] //can be 'encrypt', 'decrypt', 'wrapKey', or 'unwrapKey'
        ).then(function (key) {
          //returns the symmetric key
          //console.log('crypto-importAESkey', key);
          resolve(key);
        }).catch(function (err) {
          console.error('crypto-importAESkey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_utf8Encode',
    value: function _utf8Encode(s) {
      return new TextEncoder('utf-8').encode(s);
    }
  }, {
    key: '_utf8Decode',
    value: function _utf8Decode(s) {
      return new TextDecoder('utf-8').decode(s);
    }
  }]);
  return Crypto;
}();

exports.default = Crypto;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],422:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* fake class for the gui to select the identity,
* TODO replace with the proper identity GUI
*
*/
var GuiFake = function GuiFake(url, messageBus) {
  (0, _classCallCheck3.default)(this, GuiFake);

  var _this = this;

  _this._url = url;
  _this._waitTime = 10000;
  _this._messageBus = messageBus;

  _this._messageBus.addListener(_this._url, function (msg) {

    var identities = msg.body.value.identities;
    var idps = msg.body.value.idps;

    var value = void 0;

    if (identities[0] !== undefined) {
      value = { type: 'identity', value: identities[0], code: 200 };
    } else {
      value = { type: 'idp', value: idps[0].domain, code: 200 };
    }

    var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };

    // to test on the identity side the listener without the timeout
    // can represent the time the user takes to choose and identity
    if (msg.body.value === 'wait') {

      setTimeout(function () {
        _this._messageBus.postMessage(replyMsg);
      }, _this._waitTime);
    } else {
      _this._messageBus.postMessage(replyMsg);
    }
  });
};

exports.default = GuiFake;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14}],423:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The Identity Data Model is used to model the reTHINK User entity. The Identity data model is handled by Identity Management functionality.
*
*/
var Identity = function () {
  function Identity(guid, type) {
    (0, _classCallCheck3.default)(this, Identity);

    var _this = this;

    _this.guid = guid;
    _this.type = type;
    _this.identifiersList = {};
  }

  (0, _createClass3.default)(Identity, [{
    key: 'addIdentity',
    value: function addIdentity(identifier) {
      var _this = this;
      var identityInformation = {
        idAssertion: '',
        serviceAddress: '',
        authenticationData: '',
        authorisationData: '',
        userProfile: ''
      };
      _this.identifiersList[identifier] = identityInformation;
    }
  }, {
    key: 'addIdAssertion',
    value: function addIdAssertion(identifier, assertion, idp, scope) {
      var _this = this;

      var newIdAssertion = new IdAssertion(assertion, idp, scope);

      _this.idAssertionList.push(newIdAssertion);
    }
  }]);
  return Identity;
}();

var IdAssertion = function IdAssertion(assertion, idp, scope) {
  (0, _classCallCheck3.default)(this, IdAssertion);

  var _this = this;

  _this.assertion = assertion;
  _this.idp = idp;
  _this.scope = scope;
};

var IdValidation = function () {
  function IdValidation(identity, contents) {
    (0, _classCallCheck3.default)(this, IdValidation);

    var _this = this;
    _this.identity = identity;
    _this.contents = contents;
  }

  (0, _createClass3.default)(IdValidation, [{
    key: 'validates',
    value: function validates(identity, contents) {
      //TODO implement the logic

    }
  }]);
  return IdValidation;
}();

exports.default = Identity;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],424:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils.js');

var _Identity = require('./Identity');

var _Identity2 = _interopRequireDefault(_Identity);

var _Crypto = require('./Crypto');

var _Crypto2 = _interopRequireDefault(_Crypto);

var _GuiFake = require('./GuiFake');

var _GuiFake2 = _interopRequireDefault(_GuiFake);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
*
* The Identity Module (Id Module) is the component responsible for handling the
* user identity and the association of this identity with the Hyperty instances,
* in order to make Hyperty instances identifiable. The identity in the reTHINK project
* is not fixed to a unique Identity Service Provider, but obtained through several
* different Identity sources. With this approach, the Id Module provides to the user the
* option to choose the preferred method for authentication.
* This module will thus able to support multiple Identity acquisition methods,
* such as OpenID connect 1.0, Kerberos System, or authentication through smart cards.
* For example, a user with a Google account can use the Google as an Identity Provider to provide Identity Tokens,
*  which can be used by the Identity Module to associate it with a Hyperty instance.
*
* The Identity Module uses a node package, the HelloJS, which is a client-side JavaScript API for authentication
* that facilitates the requests for the OpenID connect protocol. This method allows for some abstraction
* when making requests for different Identity Providers, such as OpenID connect used by Google, Facebook, Microsoft, for example.
*
* When a request for a user identity is made using the method loginWithRP(identifier, scope),
* this method will analyse the Identity Provider chosen to obtain an identity and will use the HelloJS node package
* with the selected Identity Provider and identity scope. After the HelloJS request for an Access Token
* to the Identity Providers, the user will be prompted to authenticate towards the Identity Provider.
* Upon receiving the Access Token, this token is validated with a RESTful web service request to an endpoint
* on the Identity Provider Authorization Server, and after the validation is done,
* an ID token is obtained with the information according to the scope required.
* This ID token is then preserved in this module that can obtained through the getIdentities()
* and is passed as return value of the loginWithRP function. The methods generateAssertion and validateAssertion have not yet been developed.
*
*/
var IdentityModule = function () {

  /**
  * This is the constructor to initialise the Identity Module it does not require any input.
  */
  function IdentityModule(runtimeURL, runtimeCapabilities, storageManager) {
    (0, _classCallCheck3.default)(this, IdentityModule);

    var _this = this;

    if (!runtimeURL) throw new Error('runtimeURL is missing.');
    if (!storageManager) throw new Error('storageManager is missing');

    _this._runtimeURL = runtimeURL;
    _this.storageManager = storageManager;
    _this._idmURL = _this._runtimeURL + '/idm';
    _this._guiURL = _this._runtimeURL + '/identity-gui';
    _this.runtimeCapabilities = runtimeCapabilities;

    _this._domain = (0, _utils.divideURL)(_this._runtimeURL).domain;

    //to store items with this format: {identity: identityURL, token: tokenID}
    _this.identities = [];
    _this.emailsList = [];
    var newIdentity = new _Identity2.default('guid', 'HUMAN');
    _this.identity = newIdentity;
    _this.crypto = new _Crypto2.default();

    //stores the association of the dataObject and the Hyperty registered within
    _this.dataObjectsIdentity = {};

    // hashTable to store all the crypto information between two hyperties
    _this.chatKeys = {};

    // hashTable to store the symmetric keys to be used in the chat group
    _this.dataObjectSessionKeys = {};

    //failsafe to enable/disable all the criptographic functions
    _this.isToUseEncryption = true;

    // variable to know if the GUI is deployed to choose the identity. if the real GUI is not deployed, a fake gui is deployed instead.
    _this.guiDeployed = false;

    // verification of nodeJS, and in case it is nodeJS then disable encryption
    // TODO improve later, this exists because the crypto lib uses browser cryptographic methods
    //_this.isToUseEncryption = (window) ? true : false;

    _this._loadIdentities();
  }

  /**
  * return the messageBus in this Registry
  * @param {MessageBus}           messageBus
  */


  (0, _createClass3.default)(IdentityModule, [{
    key: 'getIdentities',


    /**
    * Function to return all the identities registered within a session by a user.
    * These identities are returned in an array containing a JSON package for each user identity.
    * @return {Array<Identities>}         Identities
    */
    value: function getIdentities() {
      var _this = this;
      return _this.identities;
    }

    /**
    * gets all the information from a given userURL
    * @param  {String}  userURL     user url
    * @return {JSON}    identity    identity bundle from the userURL
    */

  }, {
    key: 'getIdentity',
    value: function getIdentity(userURL) {
      var _this = this;

      for (var index in _this.identities) {

        var identity = _this.identities[index];
        if (identity.identity === userURL) {
          return identity;
        }
      }

      throw 'identity not found';
    }
  }, {
    key: '_loadIdentities',
    value: function _loadIdentities() {
      var _this = this;
      return new _promise2.default(function (resolve) {

        _this.storageManager.get('idModule:identities').then(function (identities) {

          if (identities) {
            _this.identities = identities;
          }
          resolve();
        });
      });
    }
  }, {
    key: 'deployGUI',
    value: function deployGUI() {
      var _this = this;
      _this.guiDeployed = true;
    }

    /**
    * get a Token to be added to a message
    * @param  {String}  fromURL     origin of the message
    * @param  {String}  toURL     target of the message
    * @return {JSON}    token    token to be added to the message
    */

  }, {
    key: 'getToken',
    value: function getToken(fromURL, toUrl) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        console.log('[Identity.IdentityModule.getToken] from->', fromURL, '  to->', toUrl);
        if (toUrl && toUrl.split('@').length > 1) {
          //        console.log('toUrl', toUrl);
          _this.registry.isLegacy(toUrl).then(function (result) {
            console.log('[Identity.IdentityModule.getToken] isLEGACY: ', result);
            if (result) {

              var token = _this.getAccessToken(toUrl);
              if (token) return resolve(token);

              console.log('[Identity.IdentityModule.getToken] NO Identity.. Login now');
              var domain = (0, _utils.getUserIdentityDomain)(toUrl);
              console.log('[Identity.IdentityModule.getToken] domain->', domain);
              _this.callGenerateMethods(domain).then(function (value) {
                console.log('[Identity.IdentityModule.getToken] CallGeneratemethods', value);
                var token = _this.getAccessToken(toUrl);
                if (token) return resolve(token);else {
                  return reject('No Access token found');
                }
              }, function (err) {
                console.error('[Identity.IdentityModule.getToken] error CallGeneratemethods');
                return reject(err);
              });
            } else {

              _this.getIdToken(fromURL).then(function (identity) {
                console.log('[Identity.IdentityModule.getToken] getIdToken', identity);
                return resolve(identity);
              }).catch(function (error) {
                console.error('[Identity.IdentityModule.getToken] error on getToken', error);
                return reject(error);
              });
            }
          });
        } else {
          _this.getIdToken(fromURL).then(function (identity) {
            console.log('[Identity.IdentityModule.getToken] from getIdToken', identity);
            return resolve(identity);
          }).catch(function (error) {
            return reject(error);
          });
        }
      });
    }

    /**
    * get an Id Token for a HypertyURL
    * @param  {String}  hypertyURL     the Hyperty address
    * @return {JSON}    token    Id token to be added to the message
    */

  }, {
    key: 'getIdToken',
    value: function getIdToken(hypertyURL) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        var splitURL = hypertyURL.split('://');
        if (splitURL[0] !== 'hyperty') {

          _this._getHypertyFromDataObject(hypertyURL).then(function (returnedHypertyURL) {
            var userURL = _this.registry.getHypertyOwner(returnedHypertyURL);

            if (userURL) {

              for (var index in _this.identities) {
                var identity = _this.identities[index];
                if (identity.identity === userURL) {
                  return resolve(identity.messageInfo);
                }
              }
            } else {
              return reject('no identity was found ');
            }
          }).catch(function (reason) {
            console.error('no identity was found: ', reason);
            reject(reason);
          });
        } else {
          var userURL = _this.registry.getHypertyOwner(hypertyURL);
          if (userURL) {

            for (var index in _this.identities) {
              var identity = _this.identities[index];
              if (identity.identity === userURL) {
                return resolve(identity.messageInfo);
              }
            }
          } else {
            return reject('no identity was found.');
          }
        }
      });
    }

    /**
    * get an Access Token for a legacyURL
    * @param  {String}  legacyURL     the legacy address
    * @return {JSON}    token    Access token to be added to the message
    */

  }, {
    key: 'getAccessToken',
    value: function getAccessToken(url) {
      var _this = this;

      /*  let urlSplit = url.split('.');
        let length = urlSplit.length;*/

      var domainToCheck = (0, _utils.divideURL)(url).domain;

      for (var index in _this.identities) {
        var identity = _this.identities[index];
        if (identity.hasOwnProperty('interworking') && identity.interworking.domain === domainToCheck) {
          return identity.interworking.access_token;
        }
      }

      return null;
    }
  }, {
    key: 'getIdentitiesToChoose',
    value: function getIdentitiesToChoose() {
      var _this = this;
      var identities = _this.emailsList;
      var idps = [{ domain: 'google.com', type: 'idToken' }, { domain: 'microsoft.com', type: 'idToken' }, { domain: 'orange.fr', type: 'idToken' }, { domain: 'slack.com', type: 'Legacy' }];

      return { identities: identities, idps: idps };
    }

    /**
    * Function to return all the users URLs registered within a session
    * These users URLs are returned in an array of strings.
    * @param  {Boolean}  emailFormat (Optional)   boolean to indicate to return in email format
    * @return {Array<String>}         users
    */

  }, {
    key: 'getUsersIDs',
    value: function getUsersIDs(emailFormat) {
      var _this = this;
      var users = [];

      //if request comes with the emailFormat option, then convert url to email format
      var converter = emailFormat ? _utils.getUserEmailFromURL : function (value) {
        return value;
      };

      for (var index in _this.identities) {
        var identity = _this.identities[index];
        users.push(converter(identity.identity));
      }
      return users;
    }

    /**
    * Function to return the selected Identity within a session
    * @return {Identity}        identity         identity
    */

  }, {
    key: 'getCurrentIdentity',
    value: function getCurrentIdentity() {
      var _this = this;
      return _this.currentIdentity;
    }

    /**
    * Function to set the current Identity with a given Identity
    * @param {Identity}        identity         identity
    */

  }, {
    key: 'setCurrentIdentity',
    value: function setCurrentIdentity(identity) {
      var _this = this;
      _this.currentIdentity = identity;
    }

    /**
    * Function to remove an identity from the Identities array
    * @param {String}    userID      userID
    */

  }, {
    key: 'deleteIdentity',
    value: function deleteIdentity(userID) {
      var _this = this;

      var userURL = (0, _utils.convertToUserURL)(userID);

      for (var identity in _this.identities) {
        if (_this.identities[identity].identity === userURL) {
          _this.identities.splice(identity, 1);
        }
      }
    }

    /**
    * Function to unregister an identity from the emailsList array and not show in to the GUI
    * @param {String}    email      email
    */

  }, {
    key: 'unregisterIdentity',
    value: function unregisterIdentity(email) {
      var _this = this;

      for (var e in _this.emailsList) {
        if (_this.emailsList[e] === email) {
          _this.emailsList.splice(e, 1);
        }
      }
    }

    /**
    * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL
    * @param {String}     idpDomain     idpDomain (Optional)
    */

  }, {
    key: '_resolveDomain',
    value: function _resolveDomain(idpDomain) {
      if (!idpDomain) {
        return 'domain-idp://google.com';
      } else {
        return 'domain-idp://' + idpDomain;
      }
    }

    /**
    * Function that sends a request to the GUI using messages. Sends all identities registered and
    * the Idps supported, and return the identity/idp received by the GUI
    * @param {Array<identity>}  identities      list of identitiies
    * @param {Array<String>}    idps            list of idps to authenticate
    * @return {Promise}         returns a chosen identity or idp
    */

  }, {
    key: 'requestIdentityToGUI',
    value: function requestIdentityToGUI(identities, idps) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //condition to check if the real GUI is deployed. If not, deploys a fake gui
        if (_this.guiDeployed === false) {

          var guiFake = new _GuiFake2.default(_this._guiURL, _this._messageBus);
          _this.guiFake = guiFake;
          _this.guiDeployed = true;
        }

        var message = { type: 'create', to: _this._guiURL, from: _this._idmURL,
          body: { value: { identities: identities, idps: idps } } };

        var id = _this._messageBus.postMessage(message);

        //add listener without timout
        _this._messageBus.addResponseListener(_this._idmURL, id, function (msg) {
          _this._messageBus.removeResponseListener(_this._idmURL, id);

          if (msg.body.code === 200) {
            var selectedIdentity = msg.body;

            console.log('selectedIdentity: ', selectedIdentity.value);
            resolve(selectedIdentity);
          } else {
            reject('error on requesting an identity to the GUI');
          }
        });
      });
    }
  }, {
    key: 'openPopup',
    value: function openPopup(urlreceived) {

      return new _promise2.default(function (resolve, reject) {

        var win = window.open(urlreceived, 'openIDrequest', 'width=800, height=600');
        if (window.cordova) {
          win.addEventListener('loadstart', function (e) {
            var url = e.url;
            var code = /\&code=(.+)$/.exec(url);
            var error = /\&error=(.+)$/.exec(url);

            if (code || error) {
              win.close();
              resolve(url);
            }
          });
        } else {
          (function () {
            var pollTimer = setInterval(function () {
              try {
                if (win.closed) {
                  reject('Some error occured when trying to get identity.');
                  clearInterval(pollTimer);
                }

                if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {
                  window.clearInterval(pollTimer);
                  var url = win.document.URL;

                  win.close();
                  resolve(url);
                }
              } catch (e) {
                //console.log(e);
              }
            }, 500);
          })();
        }
      });
    }

    /**
    * Function that fetch an identityAssertion from a user.
    *
    * @return {IdAssertion}              IdAssertion
    */

  }, {
    key: 'getIdentityAssertion',
    value: function getIdentityAssertion(identifier, origin, usernameHint, idpDomain) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //CHECK whether is browser environment or nodejs
        //if it is browser, then create a fake identity

        _this.runtimeCapabilities.isAvailable('browser').then(function (result) {
          console.log('runtime browser identity acquisition ', result);

          if (!result) return;

          var identitiesInfo = _this.getIdentitiesToChoose();

          _this.requestIdentityToGUI(identitiesInfo.identities, identitiesInfo.idps).then(function (value) {

            if (value.type === 'identity') {

              var chosenID = (0, _utils.getUserURLFromEmail)(value.value);

              // returns the identity info from the chosen id
              for (var i in _this.identities) {
                if (_this.identities[i].identity === chosenID) {
                  return resolve(_this.identities[i].messageInfo);
                }
              }
              reject('no identity was found .');
            } else if (value.type === 'idp') {

              _this.callGenerateMethods(value.value, origin).then(function (value) {
                resolve(value);
              }, function (err) {
                reject(err);
              });
            } else {
              reject('error on GUI received message.');
            }
          });
        }).catch(function (error) {
          console.log('Error on identity acquisition ', error);
          reject(error);
        });

        _this.runtimeCapabilities.isAvailable('node').then(function (result) {
          console.log('node identity acquisition ', result);

          if (!result) return;

          if (_this.currentIdentity !== undefined) {
            //TODO verify whether the token is still valid or not.
            // should be needed to make further requests, to obtain a valid token
            return resolve(_this.currentIdentity);
          } else {
            (function () {
              console.log('getIdentityAssertion for nodejs');
              var randomNumber = Math.floor(Math.random() * 10000 + 1);
              var identityBundle = {
                assertion: 'assertion',
                idp: 'nodejs',
                userProfile: {
                  avatar: 'https://lh3.googleusercontent.com/-WaCrjVMMV-Q/AAAAAAAAAAI/AAAAAAAAAAs/8OlVqCpSB9c/photo.jpg',
                  cn: 'test nodejs',
                  username: 'nodejs-' + randomNumber + '@nodejs.com',
                  userURL: 'user://nodejs.com/nodejs-' + randomNumber
                } };
              _this.currentIdentity = identityBundle;
              _this.identities.push(identityBundle);
              _this.storageManager.set('idModule:identities', 0, _this.identities).then(function () {

                return resolve(identityBundle);
              });
            })();
          }
        }).catch(function (error) {
          console.log('Error on identity acquisition ', error);
          reject(error);
        });
      });
    }
  }, {
    key: 'callGenerateMethods',
    value: function callGenerateMethods(idp, origin) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var publicKey = void 0;
        var userkeyPair = void 0;

        //generates the RSA key pair
        _this.crypto.generateRSAKeyPair().then(function (keyPair) {

          publicKey = btoa(keyPair.public);
          userkeyPair = keyPair;
          return _this.generateAssertion(publicKey, origin, '', userkeyPair, idp);
        }).then(function (url) {
          return _this.generateAssertion(publicKey, origin, url, userkeyPair, idp);
        }).then(function (value) {
          if (value) {
            resolve(value);
          } else {
            reject('Error on obtaining Identity');
          }
        }).catch(function (err) {
          console.log(err);
          reject(err);
        });
      });
    }
  }, {
    key: 'sendGenerateMessage',
    value: function sendGenerateMessage(contents, origin, usernameHint, idpDomain) {
      var _this = this;
      var domain = _this._resolveDomain(idpDomain);
      var message = void 0;

      return new _promise2.default(function (resolve, reject) {
        message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'generateAssertion', params: { contents: contents, origin: origin, usernameHint: usernameHint } } };
        _this._messageBus.postMessage(message, function (res) {
          var result = res.body.value;

          resolve(result);
        });
      });
    }
  }, {
    key: 'storeIdentity',
    value: function storeIdentity(result, keyPair) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var splitedAssertion = result.assertion.split('.');
        var assertionParsed = void 0;

        //verify if the token contains the 3 components, or just the assertion
        if (splitedAssertion[1]) {
          assertionParsed = JSON.parse(atob(splitedAssertion[1]));
        } else {

          assertionParsed = JSON.parse(atob(result.assertion));
        }
        var idToken = void 0;

        //TODO remove the verification and remove the tokenIDJSON from the google idpProxy;
        if (assertionParsed.tokenIDJSON) {
          idToken = assertionParsed.tokenIDJSON;
        } else {
          idToken = assertionParsed;
        }

        var email = idToken.email || idToken.sub;

        var identifier = (0, _utils.getUserURLFromEmail)(email);

        result.identity = identifier;

        _this.identity.addIdentity(result);

        // check if exists any infoToken in the result received
        var infoToken = result.infoToken ? result.infoToken : {};

        var commonName = idToken.name || email.substring(0, email.indexOf('@'));
        var userProfileBundle = { username: email, cn: commonName, avatar: infoToken.picture, locale: infoToken.locale, userURL: identifier };

        //creation of a new JSON with the identity to send via messages
        var newIdentity = { userProfile: userProfileBundle, idp: result.idp.domain, assertion: result.assertion };
        result.messageInfo = newIdentity;
        result.keyPair = keyPair;

        _this.currentIdentity = newIdentity;

        //verify if the id already exists. If already exists then do not add to the identities list;
        var idAlreadyExists = false;
        var oldId = void 0;
        for (var identity in _this.identities) {
          if (_this.identities[identity].identity === result.identity) {
            idAlreadyExists = true;
            oldId = _this.identities[identity].messageInfo;
          }
        }

        if (idAlreadyExists) {
          resolve(oldId);
          var exists = false;

          //check if the identity exists in emailList, if not add it
          //This is useful if an identity was previously registered but was later unregistered
          for (var i in _this.emailsList) {
            if (_this.emailsList[i] === email) {
              exists = true;
              break;
            }
          }
          if (!exists) {
            _this.emailsList.push(email);
          }
        } else {
          _this.emailsList.push(email);
          _this.identities.push(result);
          _this.storageManager.set('idModule:identities', 0, _this.identities).then(function () {

            resolve(newIdentity);
          });
        }
      });
    }

    /**
    * Requests the IdpProxy from a given Domain for an identityAssertion
    *
    * @param  {DOMString} contents     contents
    * @param  {DOMString} origin       origin
    * @param  {DOMString} usernameHint usernameHint
    * @param  {JSON}      keyPair       user keyPair
    * @return {IdAssertion}              IdAssertion
    */

  }, {
    key: 'generateAssertion',
    value: function generateAssertion(contents, origin, usernameHint, keyPair, idpDomain) {
      var _this = this;

      console.log('generateAssertion');

      return new _promise2.default(function (resolve, reject) {

        _this.sendGenerateMessage(contents, origin, usernameHint, idpDomain).then(function (result) {

          if (result.loginUrl) {

            _this.openPopup(result.loginUrl).then(function (value) {
              resolve(value);
            }, function (err) {
              reject(err);
            });
          } else if (result) {

            _this.storeIdentity(result, keyPair).then(function (value) {
              resolve(value);
            }, function (err) {
              reject(err);
            });
          } else {
            reject('error on obtaining identity information');
          }
        });
      });
    }

    /**
    * OTHER USER'S IDENTITY
    */

    /**
    * Requests the IdpProxy from a given Domain to validate an IdentityAssertion
    * Returns a promise with the result from the validation.
    * @param  {DOMString} assertion
    * @param  {DOMString} origin       origin
    * @return {Promise}         Promise         promise with the result from the validation
    */

  }, {
    key: 'validateAssertion',
    value: function validateAssertion(assertion, origin, idpDomain) {
      var _this = this;

      var domain = _this._resolveDomain(idpDomain);

      var message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'validateAssertion',
          params: { assertion: assertion, origin: origin } } };

      return new _promise2.default(function (resolve, reject) {
        _this._messageBus.postMessage(message, function (result) {
          if (result.body.code === 200) {
            resolve(result.body.value);
          } else {
            reject('error', result.body.code);
          }
        });
      });
    }
  }, {
    key: 'encryptMessage',
    value: function encryptMessage(message) {
      var _this = this;

      console.log('encrypt message ');

      return new _promise2.default(function (resolve, reject) {
        var isHandShakeType = message.type === 'handshake';

        //if is not to apply encryption, then returns resolve
        if (!_this.isToUseEncryption && !isHandShakeType) {
          console.log('encryption disabled');
          return resolve(message);
        }

        //TODO remove this logic and move it to a util function
        var splitedToURL = message.to.split('/');
        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];
        if (splitedToURL.length > 6) {
          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];
        }

        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);
        var isToLegacyIdentity = (0, _utils.isLegacy)(message.to);
        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';

        if (message.type === 'update') {
          resolve(message);
        }

        if (isToLegacyIdentity) {
          resolve(message);
        } else if (isFromHyperty && isToHyperty) {
          var userURL = _this._registry.getHypertyOwner(message.from);
          if (userURL) {
            (function () {

              // check if exists any keys between two users
              var chatKeys = _this.chatKeys[message.from + '<->' + message.to];
              if (!chatKeys) {
                chatKeys = _this._newChatCrypto(message, userURL);
                console.log('createChatKey encrypt', message.from + message.to);
                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;
                message.body.handshakePhase = 'startHandShake';
              }

              if (chatKeys.authenticated && !isHandShakeType) {
                (function () {

                  var iv = _this.crypto.generateIV();
                  _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, message.body.value, iv).then(function (encryptedValue) {

                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, chatKeys.hypertyFrom.messageInfo);

                    _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage).then(function (hash) {
                      //console.log('result of hash ', hash);
                      var value = { iv: _this.crypto.encode(iv), value: _this.crypto.encode(encryptedValue), hash: _this.crypto.encode(hash) };
                      message.body.value = (0, _stringify2.default)(value);

                      resolve(message);
                    });
                  });

                  // if is a handshake message, just resolve it
                })();
              } else if (isHandShakeType) {
                resolve(message);

                // else, starts a new handshake protocol
              } else {
                _this._doHandShakePhase(message, chatKeys).then(function (value) {
                  _this.chatKeys[message.from + '<->' + message.to] = value.chatKeys;

                  _this._messageBus.postMessage(value.message);
                  reject('encrypt handshake protocol phase ');
                });
              }
            })();
          }

          //if from hyperty to a dataObjectURL
        } else if (isFromHyperty && isToDataObject) {
          (function () {
            console.log('dataObject value to encrypt: ', message.body.value);

            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];

            //if no key exists, create a new one if is the reporter of dataObject
            if (!dataObjectKey) {
              var isHypertyReporter = _this.registry.getReporterURLSynchonous(dataObjectURL);
              console.log('isHypertyReporter:', isHypertyReporter);
              // if the hyperty is the reporter of the dataObject then generates a session key
              if (isHypertyReporter && isHypertyReporter === message.from) {

                var sessionKey = _this.crypto.generateRandom();
                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };

                dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];
              }
            }

            //check if there is already a session key for the chat room
            if (dataObjectKey) {

              // and if is to apply encryption, encrypt the messages
              if (dataObjectKey.isToEncrypt) {
                (function () {
                  var iv = _this.crypto.generateIV();

                  _this.crypto.encryptAES(dataObjectKey.sessionKey, _this.crypto.encode((0, _stringify2.default)(message.body.value)), iv).then(function (encryptedValue) {

                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, dataObjectKey.sessionKey);

                    _this.crypto.hashHMAC(dataObjectKey.sessionKey, filteredMessage).then(function (hash) {
                      //console.log('hash ', hash);

                      var newValue = { value: _this.crypto.encode(encryptedValue), iv: _this.crypto.encode(iv), hash: _this.crypto.encode(hash) };

                      message.body.value = (0, _stringify2.default)(newValue);
                      resolve(message);
                    });
                  });

                  // if not, just send the message
                })();
              } else {
                resolve(message);
              }

              // start the generation of a new session Key
            } else {
              reject('failed to decrypt message');
            }
          })();
        }
      });
    }
  }, {
    key: 'decryptMessage',
    value: function decryptMessage(message) {
      var _this = this;

      console.log('decrypt message ');

      return new _promise2.default(function (resolve, reject) {
        var isHandShakeType = message.type === 'handshake';

        //if is not to apply encryption, then returns resolve
        if (!_this.isToUseEncryption && !isHandShakeType) {
          console.log('decryption disabled');
          return resolve(message);
        }

        //TODO remove this logic and move it to a util function

        var splitedToURL = message.to.split('/');
        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];
        if (splitedToURL.length > 6) {
          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];
        }

        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);
        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';

        if (message.type === 'update') {
          resolve(message);
        }

        //is is hyperty to hyperty communication
        if (isFromHyperty && isToHyperty) {
          //console.log('decrypt hyperty to hyperty');
          var userURL = _this._registry.getHypertyOwner(message.to);
          if (userURL) {
            (function () {

              var chatKeys = _this.chatKeys[message.to + '<->' + message.from];
              if (!chatKeys) {
                chatKeys = _this._newChatCrypto(message, userURL, 'decrypt');
                _this.chatKeys[message.to + '<->' + message.from] = chatKeys;
              }

              if (chatKeys.authenticated && !isHandShakeType) {
                (function () {
                  var value = JSON.parse(message.body.value);
                  var iv = _this.crypto.decode(value.iv);
                  var data = _this.crypto.decode(value.value);
                  var hash = _this.crypto.decode(value.hash);
                  _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {
                    console.log('decrypted value ', decryptedData);
                    message.body.value = decryptedData;

                    var filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);

                    _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {
                      //console.log('result of hash verification! ', result);
                      message.body.assertedIdentity = true;
                      resolve(message);
                    });
                  });
                })();
              } else if (isHandShakeType) {
                _this._doHandShakePhase(message, chatKeys).then(function (value) {

                  //if it was started by doMutualAuthentication then ends the protocol
                  if (value === 'handShakeEnd') {
                    reject('decrypt handshake protocol phase ');

                    // if was started by a message, then resend that message
                  } else {
                    _this.chatKeys[message.to + '<->' + message.from] = value.chatKeys;
                    _this._messageBus.postMessage(value.message);
                    reject('decrypt handshake protocol phase ');
                  }
                });
              } else {
                reject('wrong message do decrypt');
              }
            })();
          } else {
            reject('error on decrypt message');
          }

          //if from hyperty to a dataObjectURL
        } else if (isFromHyperty && isToDataObject) {
          (function () {
            console.log('dataObject value to decrypt: ', message.body);

            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];

            if (dataObjectKey) {

              //check if is to apply encryption
              if (dataObjectKey.isToEncrypt) {
                (function () {
                  var parsedValue = JSON.parse(message.body.value);
                  var iv = _this.crypto.decode(parsedValue.iv);
                  var encryptedValue = _this.crypto.decode(parsedValue.value);
                  var hash = _this.crypto.decode(parsedValue.hash);

                  _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, iv).then(function (decryptedValue) {
                    var parsedValue = JSON.parse(atob(decryptedValue));
                    console.log('decrypted Value,', parsedValue);
                    message.body.value = parsedValue;

                    var filteredMessage = _this._filterMessageToHash(message, parsedValue + iv);

                    _this.crypto.verifyHMAC(dataObjectKey.sessionKey, filteredMessage, hash).then(function (result) {
                      //console.log('result of hash verification! ', result);

                      message.body.assertedIdentity = true;
                      resolve(message);
                    });
                  });

                  //if not, just return the message
                })();
              } else {
                message.body.assertedIdentity = true;
                resolve(message);
              }
            } else {
              message.body.assertedIdentity = true;
              resolve(message);

              //reject('no sessionKey for chat room found');
            }
          })();
        } else {
          reject('wrong message to decrypt');
        }
      });
    }
  }, {
    key: 'doMutualAuthentication',
    value: function doMutualAuthentication(sender, receiver) {
      console.log('doMutualAuthentication: ', sender, receiver);
      var _this = this;
      var dataObjectURL = void 0;

      // check if the sender is a dataObject and if so stores that value
      var reporterURL = _this.registry.getReporterURLSynchonous(sender);
      if (reporterURL) {
        dataObjectURL = sender;
        sender = reporterURL;
      }

      var msg = {
        to: receiver,
        from: sender,
        callback: undefined,
        body: { handshakePhase: 'startHandShake', ignore: 'ignoreMessage' }
      };

      return new _promise2.default(function (resolve, reject) {

        if (!sender || !receiver) {
          return reject('sender or receiver missing on doMutualAuthentication');
        }

        var chatKeys = _this.chatKeys[sender + '<->' + receiver];
        var userURL = _this._registry.getHypertyOwner(sender);

        if (userURL) {

          if (!chatKeys) {
            // callback to resolve when finish the mutual authentication
            var resolved = function resolved(value) {
              console.log('callback value:', value);
              resolve(value);
            };
            msg.callback = resolved;
            msg.dataObjectURL = dataObjectURL;

            chatKeys = _this._newChatCrypto(msg, userURL);
            _this.chatKeys[sender + '<->' + receiver] = chatKeys;
          }

          if (chatKeys.authenticated) {

            var startSessionKeyExchange = {
              to: sender,
              from: receiver
            };
            chatKeys.dataObjectURL = dataObjectURL;
            _this._sendReporterSessionKey(startSessionKeyExchange, chatKeys).then(function (value) {

              _this._messageBus.postMessage(value.message);
              resolve('exchange of chat sessionKey initiated');
            });
          } else {

            _this._doHandShakePhase(msg, chatKeys);
          }
        } else {
          reject('error on doMutualAuthentication');
        }
      });
    }
  }, {
    key: '_doHandShakePhase',
    value: function _doHandShakePhase(message, chatKeys) {
      var _this = this;

      //console.log('handshakeType');

      return new _promise2.default(function (resolve, reject) {

        var handshakeType = message.body.handshakePhase;
        var iv = void 0;
        var hash = void 0;
        var value = {};
        var filteredMessage = void 0;

        (function () {
          switch (handshakeType) {

            case 'startHandShake':
              chatKeys.keys.fromRandom = _this.crypto.generateRandom();

              var startHandShakeMsg = {
                type: 'handshake',
                to: message.to,
                from: message.from,
                body: {
                  handshakePhase: 'senderHello',
                  value: _this.crypto.encode(chatKeys.keys.fromRandom)
                }
              };
              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(startHandShakeMsg, undefined, chatKeys.hypertyFrom.messageInfo);

              // check if was the encrypt function or the mutual authentication that request the
              // start of the handShakePhase.
              if (chatKeys.initialMessage) {
                resolve({ message: startHandShakeMsg, chatKeys: chatKeys });
              } else {
                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;
                _this._messageBus.postMessage(startHandShakeMsg);
              }

              break;
            case 'senderHello':

              console.log('senderHello');
              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(message);
              chatKeys.keys.fromRandom = _this.crypto.decode(message.body.value);
              chatKeys.keys.toRandom = _this.crypto.generateRandom();

              var senderHelloMsg = {
                type: 'handshake',
                to: message.from,
                from: message.to,
                body: {
                  handshakePhase: 'receiverHello',
                  value: _this.crypto.encode(chatKeys.keys.toRandom)
                }
              };
              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(senderHelloMsg, undefined, chatKeys.hypertyFrom.messageInfo);
              resolve({ message: senderHelloMsg, chatKeys: chatKeys });

              break;
            case 'receiverHello':

              console.log('receiverHello');
              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(message);

              _this.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp).then(function (value) {

                //TODO remove later this verification as soon as all the IdP proxy are updated in the example
                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;

                var receiverPublicKey = _this.crypto.decode(encodedpublicKey);
                var premasterSecret = _this.crypto.generatePMS();
                var toRandom = message.body.value;
                chatKeys.hypertyTo.assertion = message.body.identity.assertion;
                chatKeys.hypertyTo.publicKey = receiverPublicKey;
                chatKeys.hypertyTo.userID = value.contents.email;
                chatKeys.keys.toRandom = _this.crypto.decode(toRandom);
                chatKeys.keys.premasterKey = premasterSecret;

                var concatKey = _this.crypto.concatPMSwithRandoms(premasterSecret, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);

                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                //generate the master key
              }).then(function (masterKey) {
                chatKeys.keys.masterKey = masterKey;

                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                //generate the symmetric and hash keys
              }).then(function (keys) {

                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[0]);
                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[1]);
                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[2]);
                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[3]);
                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                var messageStructure = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate'
                  }
                };

                // hash the value and the iv
                filteredMessage = _this._filterMessageToHash(messageStructure, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);
                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);
              }).then(function (hash) {
                value.hash = _this.crypto.encode(hash);

                //encrypt the data
                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok', iv);
              }).then(function (encryptedData) {
                value.symetricEncryption = _this.crypto.encode(encryptedData);

                return _this.crypto.encryptRSA(chatKeys.hypertyTo.publicKey, chatKeys.keys.premasterKey);
              }).then(function (encryptedValue) {

                value.assymetricEncryption = _this.crypto.encode(encryptedValue);

                var messageStructure = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate'
                  }
                };

                var messageToHash = _this._filterMessageToHash(messageStructure, chatKeys.keys.premasterKey, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.signRSA(chatKeys.hypertyFrom.privateKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(messageToHash));
              }).then(function (signature) {

                value.signature = _this.crypto.encode(signature);

                var receiverHelloMsg = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate',
                    value: btoa((0, _stringify2.default)(value))
                  }
                };
                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(receiverHelloMsg, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);

                resolve({ message: receiverHelloMsg, chatKeys: chatKeys });
              }, function (error) {
                return reject(error);
              });

              break;
            case 'senderCertificate':

              console.log('senderCertificate');
              var receivedValue = JSON.parse(atob(message.body.value));

              _this.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp).then(function (value) {
                var encryptedPMS = _this.crypto.decode(receivedValue.assymetricEncryption);

                //TODO remove later this verification as soon as all the IdP proxy are updated in the example
                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;

                var senderPublicKey = _this.crypto.decode(encodedpublicKey);
                chatKeys.hypertyTo.assertion = message.body.identity.assertion;
                chatKeys.hypertyTo.publicKey = senderPublicKey;
                chatKeys.hypertyTo.userID = value.contents.email;

                return _this.crypto.decryptRSA(chatKeys.hypertyFrom.privateKey, encryptedPMS);
              }, function (error) {
                console.log(error);
                reject('Error during authentication of identity');

                //obtain the PremasterKey using the private key
              }).then(function (pms) {

                chatKeys.keys.premasterKey = new Uint8Array(pms);

                var signature = _this.crypto.decode(receivedValue.signature);

                var receivedmsgToHash = _this._filterMessageToHash(message, chatKeys.keys.premasterKey);

                return _this.crypto.verifyRSA(chatKeys.hypertyTo.publicKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(receivedmsgToHash), signature);

                // validates the signature received
              }).then(function (signValidationResult) {

                console.log('signature validation result ', signValidationResult);
                var concatKey = _this.crypto.concatPMSwithRandoms(chatKeys.keys.premasterKey, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);

                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                // generates the master keys from the Premaster key and the randoms
              }).then(function (masterKey) {
                chatKeys.keys.masterKey = masterKey;

                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                // generates the symmetric keys to be used in the symmetric encryption
              }).then(function (keys) {
                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[0]);
                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[1]);
                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[2]);
                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[3]);
                iv = _this.crypto.decode(receivedValue.iv);
                var data = _this.crypto.decode(receivedValue.symetricEncryption);

                return _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv);
              }).then(function (decryptedData) {
                //console.log('decryptedData', decryptedData);

                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(message, decryptedData + iv);

                var hashReceived = _this.crypto.decode(receivedValue.hash);

                filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);

                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hashReceived);
              }).then(function (verifiedHash) {

                //console.log('result of hash verification ', verifiedHash);
                var receiverFinishedMessage = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverFinishedMessage'
                  }
                };
                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                filteredMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, receiverFinishedMessage);
              }).then(function (hash) {

                value.hash = _this.crypto.encode(hash);
                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!', iv);
              }).then(function (encryptedValue) {
                value.value = _this.crypto.encode(encryptedValue);
                var receiverFinishedMessage = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverFinishedMessage',
                    value: btoa((0, _stringify2.default)(value))
                  }
                };

                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);
                chatKeys.authenticated = true;
                resolve({ message: receiverFinishedMessage, chatKeys: chatKeys });
              });

              break;
            case 'receiverFinishedMessage':

              console.log('receiverFinishedMessage');
              chatKeys.authenticated = true;

              value = JSON.parse(atob(message.body.value));

              iv = _this.crypto.decode(value.iv);
              var data = _this.crypto.decode(value.value);
              hash = _this.crypto.decode(value.hash);

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {
                console.log('decryptedData', decryptedData);
                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(message, decryptedData + iv);

                var filteredMessage = _this._filterMessageToHash(message, data + iv);
                _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {
                  console.log('hash result', result);

                  // check if there was an initial message that was blocked and send it
                  if (chatKeys.initialMessage) {
                    var initialMessage = {
                      type: 'create',
                      to: message.from,
                      from: message.to,
                      body: {
                        value: chatKeys.initialMessage.body.value
                      }
                    };

                    resolve({ message: initialMessage, chatKeys: chatKeys });

                    //sends the sessionKey to the subscriber hyperty
                  } else {
                    _this._sendReporterSessionKey(message, chatKeys).then(function (value) {
                      resolve(value);
                    });
                  }
                });
              });

              break;
            case 'reporterSessionKey':

              console.log('reporterSessionKey');

              var valueIVandHash = JSON.parse(atob(message.body.value));
              hash = _this.crypto.decode(valueIVandHash.hash);
              iv = _this.crypto.decode(valueIVandHash.iv);
              var encryptedValue = _this.crypto.decode(valueIVandHash.value);
              var parsedValue = void 0;
              var sessionKey = void 0;
              var dataObjectURL = void 0;
              var receiverAcknowledgeMsg = void 0;

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, encryptedValue, iv).then(function (decryptedValue) {

                parsedValue = JSON.parse(decryptedValue);
                sessionKey = _this.crypto.decode(parsedValue.value);
                dataObjectURL = parsedValue.dataObjectURL;

                var messageToHash = _this._filterMessageToHash(message, decryptedValue + iv);

                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, messageToHash, hash);
              }).then(function (hashResult) {

                //console.log('hash successfully validated ', hashResult);

                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };

                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!!', iv);
              }).then(function (encryptedValue) {

                receiverAcknowledgeMsg = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverAcknowledge'
                  }
                };

                value.value = _this.crypto.encode(encryptedValue);
                var messageToHash = _this._filterMessageToHash(receiverAcknowledgeMsg, 'ok!!' + iv, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, messageToHash);
              }).then(function (hashedMessage) {
                var finalValue = btoa((0, _stringify2.default)({ value: value.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));

                receiverAcknowledgeMsg.body.value = finalValue;
                resolve({ message: receiverAcknowledgeMsg, chatKeys: chatKeys });
              });

              break;
            case 'receiverAcknowledge':

              console.log('receiverAcknowledge');

              var receivedvalueIVandHash = JSON.parse(atob(message.body.value));
              var receivedHash = _this.crypto.decode(receivedvalueIVandHash.hash);
              iv = _this.crypto.decode(receivedvalueIVandHash.iv);
              var receivedEncryptedValue = _this.crypto.decode(receivedvalueIVandHash.value);

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, receivedEncryptedValue, iv).then(function (decryptedValue) {

                var filteredMessage = _this._filterMessageToHash(message, decryptedValue + iv);
                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, receivedHash);
              }).then(function (hashResult) {
                //console.log('hashResult ', hashResult);

                var callback = chatKeys.callback;

                if (callback) {
                  callback('handShakeEnd');
                }
                resolve('handShakeEnd');
              });

              break;
            default:
              reject(message);
          }
        })();
      });
    }
  }, {
    key: '_sendReporterSessionKey',
    value: function _sendReporterSessionKey(message, chatKeys) {
      var _this = this;
      var sessionKeyBundle = _this.dataObjectSessionKeys[chatKeys.dataObjectURL];
      var reporterSessionKeyMsg = void 0;
      var valueToEncrypt = void 0;
      var sessionKey = void 0;
      var iv = void 0;
      var value = {};

      return new _promise2.default(function (resolve, reject) {

        //if there is not yet a session Key, generates a new one
        if (!sessionKeyBundle) {
          sessionKey = _this.crypto.generateRandom();
          _this.dataObjectSessionKeys[chatKeys.dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };
        } else {
          sessionKey = sessionKeyBundle.sessionKey;
        }

        valueToEncrypt = (0, _stringify2.default)({ value: _this.crypto.encode(sessionKey), dataObjectURL: chatKeys.dataObjectURL });

        iv = _this.crypto.generateIV();
        value.iv = _this.crypto.encode(iv);
        _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, valueToEncrypt, iv).then(function (encryptedValue) {

          reporterSessionKeyMsg = {
            type: 'handshake',
            to: message.from,
            from: message.to,
            body: {
              handshakePhase: 'reporterSessionKey',
              value: _this.crypto.encode(encryptedValue)
            }
          };

          var filteredMessage = _this._filterMessageToHash(reporterSessionKeyMsg, valueToEncrypt + iv, chatKeys.hypertyFrom.messageInfo);

          return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);
        }).then(function (hashedMessage) {

          var valueWithHash = btoa((0, _stringify2.default)({ value: reporterSessionKeyMsg.body.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));

          reporterSessionKeyMsg.body.value = valueWithHash;
          resolve({ message: reporterSessionKeyMsg, chatKeys: chatKeys });
        });
      });
    }

    /**
    * returns the reporter associated to the dataObject URL
    * @param   {String}   dataObjectURL         dataObject url
    * @return   {String}  reporter              dataObject url reporter
    */

  }, {
    key: '_getHypertyFromDataObject',
    value: function _getHypertyFromDataObject(dataObjectURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //TODO remove this logic and move it to a util function

        var splitedURL = dataObjectURL.split('/');
        var finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3];
        if (splitedURL.length > 6) {
          finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3] + '/' + splitedURL[4];
        }

        // check if is the creator of the hyperty
        var reporterURL = _this.registry.getReporterURLSynchonous(finalURL);

        if (reporterURL) {
          resolve(reporterURL);
        } else {
          // check if there is already an association from an hypertyURL to the dataObject
          var storedReporterURL = _this.dataObjectsIdentity[finalURL];

          if (storedReporterURL) {
            resolve(storedReporterURL);
          } else {
            // check if there is any hyperty that subscribed the dataObjectURL
            var subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);

            if (subscriberHyperty) {
              resolve(subscriberHyperty);
            } else {

              // search in domain registry for the hyperty associated to the dataObject
              // search in case is a subscriber who wants to know the reporter
              _this.registry.discoverDataObjectPerURL(finalURL, splitedURL[2]).then(function (dataObject) {
                _this.dataObjectsIdentity[finalURL] = dataObject.reporter;
                resolve(dataObject.reporter);
              }, function (err) {
                reject(err);
              });
            }
          }
        }
      });
    }

    /**
    * filter the messages to hash, by removing some fields not generated by the runtime core
    * @param {Message}  message                     message
    * @param {String}  decryptedValue (Optional)    value from body.value in case it originally comes encrypted
    * @param {JSON}  identity(Optional)    add the hyperty identity associated in case is not added to the initial message
    * @return {Message}  new message filtered
    */

  }, {
    key: '_filterMessageToHash',
    value: function _filterMessageToHash(message, decryptedValue, identity) {

      return {
        type: message.type,
        from: message.from,
        to: message.to,
        body: {
          identity: identity || message.body.identity,
          value: decryptedValue || message.body.value,
          handshakePhase: message.body.handshakePhase
        }
      };
    }

    /**
    * generates the initial structure for the keys between two users
    * @param {JSON}    message              initial message that triggers the mutual authentication
    * @param {String}  userURL              userURL
    * @param {boolean} receiver(Optional)  indicates if is the sender or the receiver that creates a new chat crypto
    * @return {JSON} newChatCrypto  new JSON structure for the chat crypto
    */

  }, {
    key: '_newChatCrypto',
    value: function _newChatCrypto(message, userURL, receiver) {
      var _this = this;

      //check whether is the sender or the receiver to create a new chatCrypto
      //to mantain consistency on the keys if the receiver create a new chatCrypto,
      //then invert the fields
      var from = receiver ? message.to : message.from;
      var to = receiver ? message.from : message.to;

      var userInfo = _this.getIdentity(userURL);

      var newChatCrypto = {
        hypertyFrom: {
          hyperty: from,
          userID: userInfo.messageInfo.userProfile.username,
          privateKey: userInfo.keyPair.private,
          publicKey: userInfo.keyPair.public,
          assertion: userInfo.assertion,
          messageInfo: userInfo.messageInfo
        },
        hypertyTo: {
          hyperty: to,
          userID: undefined,
          publicKey: undefined,
          assertion: undefined
        },
        keys: {
          hypertyToSessionKey: undefined,
          hypertyFromSessionKey: undefined,
          hypertyToHashKey: undefined,
          hypertyFromHashKey: undefined,
          toRandom: undefined,
          fromRandom: undefined,
          premasterKey: undefined,
          masterKey: undefined
        },
        handshakeHistory: {
          senderHello: undefined,
          receiverHello: undefined,
          senderCertificate: undefined,
          receiverFinishedMessage: undefined
        },
        initialMessage: message.body.ignore ? undefined : message,
        callback: message.callback,
        authenticated: false,
        dataObjectURL: message.dataObjectURL
      };

      return newChatCrypto;
    }
  }, {
    key: 'messageBus',
    get: function get() {
      var _this = this;
      return _this._messageBus;
    }

    /**
    * Set the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */
    ,
    set: function set(messageBus) {
      var _this = this;
      _this._messageBus = messageBus;
    }

    /**
    * return the registry in this idModule
    * @param {registry}           registry
    */

  }, {
    key: 'registry',
    get: function get() {
      var _this = this;
      return _this._registry;
    }

    /**
    * Set the registry in this idModule
    * @param {registry}     reg
    */
    ,
    set: function set(registry) {
      var _this = this;
      _this._registry = registry;
    }
  }]);
  return IdentityModule;
}();

exports.default = IdentityModule;
module.exports = exports['default'];

},{"../utils/utils.js":454,"./Crypto":421,"./GuiFake":422,"./Identity":423,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],425:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ActionsService = function () {
  function ActionsService(context) {
    (0, _classCallCheck3.default)(this, ActionsService);

    this.context = context;
  }

  (0, _createClass3.default)(ActionsService, [{
    key: 'enforcePolicies',
    value: function enforcePolicies(message, isIncomingMessage) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        var policies = _this.context.getPolicies(message, isIncomingMessage);

        if (policies !== undefined) {
          if (policies.serviceProviderPolicy !== undefined) {
            policies.serviceProviderPolicy.enforceActions(_this.context, message).then(function (messages) {
              resolve(messages);
            }, function (error) {
              reject(error);
            });
          } else {
            if (policies.userPolicy !== undefined) {
              policies.userPolicy.enforceActions(_this.context, message).then(function (messages) {
                resolve(messages);
              }, function (error) {
                reject(error);
              });
            } else {
              resolve([message]);
            }
          }
        } else {
          resolve([message]);
        }
      });
    }
  }, {
    key: 'forwardToID',
    value: function forwardToID(message, email) {
      var _this = this;
      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');

      return new _promise2.default(function (resolve, reject) {
        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {
          var splitTo = message.to.split('://');
          if (splitTo[0] !== 'runtime') {
            _this.context.runtimeRegistry.discoverHypertyPerUser(email).then(function (result) {
              message.to = result.hypertyURL;
              message.body.via = undefined;
              resolve(message);
              _this.context.runtimeRegistry._messageBus.postMessage(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        } else {
          resolve(message);
        }
      });
    }
  }, {
    key: 'forwardToHyperty',
    value: function forwardToHyperty(message, hypertyURL) {
      var _this = this;
      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');

      return new _promise2.default(function (resolve) {
        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {
          var splitTo = message.to.split('://');
          if (splitTo[0] !== 'runtime') {
            message.to = hypertyURL;
            message.body.via = undefined;
            resolve(message);
            _this.context.runtimeRegistry._messageBus.postMessage(message);
          } else {
            resolve(message);
          }
        } else {
          resolve(message);
        }
      });
    }
  }, {
    key: 'sendAutomaticMessage',
    value: function sendAutomaticMessage(message, text) {
      var _this = this;
      return new _promise2.default(function (resolve) {
        var automaticMessage = {
          from: message.to,
          to: message.from,
          body: {
            value: text
          },
          type: message.type
        };
        resolve(message);
        _this.context.runtimeRegistry._messageBus.postMessage(automaticMessage);
      });
    }
  }]);
  return ActionsService;
}();

exports.default = ActionsService;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],426:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Operators = function () {
  function Operators() {
    (0, _classCallCheck3.default)(this, Operators);
  }

  (0, _createClass3.default)(Operators, [{
    key: 'and',
    value: function and(params) {
      return params[0] && params[1];
    }
  }, {
    key: 'between',
    value: function between(params) {
      var start = parseInt(params[0][0]);
      var end = parseInt(params[0][1]);
      var now = params[1];

      if (end < start) {
        now = now < start ? now += 2400 : now;
        end += 2400;
      }

      return now > start && now < end;
    }
  }, {
    key: 'equals',
    value: function equals(params) {
      return String(params[0]) === '*' || String(params[0]) === String(params[1]);
    }
  }, {
    key: 'greaterThan',
    value: function greaterThan(params) {
      return params[1] > params[0];
    }
  }, {
    key: 'in',
    value: function _in(params) {
      return params[0].indexOf(params[1]) > -1;
    }
  }, {
    key: 'lessThan',
    value: function lessThan(params) {
      return params[1] < params[0];
    }
  }, {
    key: 'not',
    value: function not(params) {
      return !params[0];
    }
  }, {
    key: 'or',
    value: function or(params) {
      return params[0] || params[1];
    }
  }]);
  return Operators;
}();

exports.default = Operators;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],427:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Operators = require('./Operators');

var _Operators2 = _interopRequireDefault(_Operators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The Policy Decision Point (PDP) decides if a message is to be authorised by checking a set of
* policies. The resource to be verified is specified in the first word of the 'condition' field of
* a Policy object. The implementation that verifies if the message is compliant with a policy is
* specified in a hashtable to allow dynamic definition of the implementation, providing
* extensibility to the Policy Engine functionalities.
*/
var PDP = function () {
  function PDP(context) {
    (0, _classCallCheck3.default)(this, PDP);

    this.context = context;
    this.operators = new _Operators2.default();
  }

  (0, _createClass3.default)(PDP, [{
    key: 'evaluatePolicies',
    value: function evaluatePolicies(message, isIncomingMessage) {
      var policies = this.context.getPolicies(message, isIncomingMessage);
      var result = 'Not Applicable';

      if (policies !== undefined) {
        result = this.evaluatePolicy(message, policies.serviceProviderPolicy, isIncomingMessage);
        if (result || result === 'Not Applicable') {
          var userResult = this.evaluatePolicy(message, policies.userPolicy, isIncomingMessage);
          if (userResult !== 'Not Applicable') {
            result = userResult;
          }
        }
      }

      return result;
    }
  }, {
    key: 'evaluatePolicy',
    value: function evaluatePolicy(message, policy, isIncoming) {
      var result = 'Not Applicable';
      if (policy) {
        result = policy.evaluateRules(this.context, message, isIncoming);
      }

      return result;
    }
  }]);
  return PDP;
}();

exports.default = PDP;
module.exports = exports['default'];

},{"./Operators":426,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],428:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _ActionsService = require('./ActionsService');

var _ActionsService2 = _interopRequireDefault(_ActionsService);

var _PDP = require('./PDP');

var _PDP2 = _interopRequireDefault(_PDP);

var _Policy = require('./Policy');

var _Policy2 = _interopRequireDefault(_Policy);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PEP = function () {

  /**
  * Creates a Policy Enforcement Point (PEP) instance
  * @param    {Object}    context
  */
  function PEP(context) {
    (0, _classCallCheck3.default)(this, PEP);

    var _this = this;

    _this.pdp = new _PDP2.default(context);
    _this.actionsService = new _ActionsService2.default(context);
    _this.context = context;
    context.pep = _this;

    //TODO should be added a trigger to verify when the loadConfigurations is successfully completed
    context.loadConfigurations();
  }

  /**
  * Adds a policy to the Policy Enforcement Point (PEP). The policy can be created by the service
  * provider or by the user.
  * @param    {String}    source
  * @param    {String}    key
  * @param    {Object}    policy
  */


  (0, _createClass3.default)(PEP, [{
    key: 'addPolicy',
    value: function addPolicy(source, key, policy, combiningAlgorithm) {
      if (!source) throw new Error('source is not defined');
      if (!key) throw new Error('key is not defined');

      if (policy === undefined) {
        policy = new _Policy2.default(key, [], [], combiningAlgorithm);
      } else {
        if (!(policy instanceof _Policy2.default)) {
          policy = new _Policy2.default(policy.key, policy.rules, policy.actions, policy.combiningAlgorithm);
        }
      }

      switch (source) {
        case 'SERVICE_PROVIDER':
          this.context.savePolicies(source, policy, key);
          break;
        case 'USER':
          this.context.userPolicies[key] = policy;
          this.context.savePolicies(source);
          break;
        default:
          throw Error('Unknown policy source: ' + source);
      }
    }
  }, {
    key: 'authorise',
    value: function authorise(message) {
      var _this2 = this;

      console.log('[Policy.PEP Authorise] ', message);
      console.log(message);
      if (!message) throw new Error('message is not defined');
      if (!message.from) throw new Error('message.from is not defined');
      if (!message.to) throw new Error('message.to is not defined');
      if (!message.type) throw new Error('message.type is not defined');
      message.body = message.body || {};

      return new _promise2.default(function (resolve, reject) {

        message.body = message.body || {};
        var _this = _this2;
        var result = void 0;
        if (_this._isToVerify(message)) {
          (function () {
            var isIncoming = _this._isIncomingMessage(message);
            _this.context.prepareForEvaluation(message, isIncoming).then(function (message) {
              result = _this.pdp.evaluatePolicies(message, isIncoming);
              if (result === 'Not Applicable') {
                result = _this.context.defaultBehaviour;
                message.body.auth = false;
              }
              _this.actionsService.enforcePolicies(message, isIncoming).then(function (messages) {
                for (var i in messages) {
                  message = messages[i];
                  _this.context.prepareToForward(message, isIncoming, result).then(function (message) {
                    if (result) {
                      message.body.auth = message.body.auth === undefined ? true : message.body.auth;
                      resolve(message);
                    } else {
                      var errorMessage = { body: { code: 403, description: 'Blocked by policy' }, from: message.to, to: message.from, type: 'response' };
                      reject(errorMessage);
                    }
                  }, function (error) {
                    reject(error);
                  });
                }
              }, function (error) {
                reject(error);
              });
            }, function (error) {
              reject(error);
            });
          })();
        } else {
          result = _this.context.defaultBehaviour;
          if (result) {
            message.body.auth = false;
            resolve(message);
          } else {
            var errorMessage = { body: { code: 403, description: 'Blocked by policy' }, from: message.to, to: message.from, type: 'response' };
            reject(errorMessage);
          }
        }
      });
    }
  }, {
    key: 'authoriseSync',
    value: function authoriseSync(message) {
      var result = void 0;
      message.body = message.body || {};
      if (this._isToVerify(message)) {
        var isIncoming = this._isIncomingMessage(message);
        message = this.context.prepareForEvaluation(message, isIncoming);
        result = this.pdp.evaluatePolicies(message, isIncoming);
        if (result === 'Not Applicable') {
          result = this.context.defaultBehaviour;
          message.body.auth = false;
        }
        this.actionsService.enforcePolicies(message, isIncoming);
        message = this.context.prepareToForward(message, isIncoming, result);
        if (result) {
          message.body.auth = message.body.auth === undefined ? true : message.body.auth;
          return true;
        } else {
          return false;
        }
      } else {
        result = this.context.defaultBehaviour;
        if (result) {
          message.body.auth = false;
          return true;
        } else {
          return false;
        }
      }
    }
  }, {
    key: '_isIncomingMessage',
    value: function _isIncomingMessage(message) {

      return !this.context.runtimeRegistry.isLocal(message.from);
    }

    /**
    * Identifies the messages to be verified by the Policy Engine
    * @param    {Message}   message
    * @returns  {boolean}   returns true if the message requires encryption/decryption
    *                       or if its type equals 'handshake'; false otherwise
    */

  }, {
    key: '_isToVerify',
    value: function _isToVerify(message) {
      var schemasToIgnore = ['domain', 'domain-idp', 'global', 'hyperty-runtime', 'runtime'];
      var splitFrom = message.from.split('://');
      var fromSchema = splitFrom[0];
      var splitTo = message.to.split('://');
      var toSchema = splitTo[0];

      // Signalling messages between P2P Stubs don't have to be verified. FFS

      if (message.from.includes('/p2phandler/') || message.from.includes('/p2prequester/') || message.to.includes('/p2phandler/') || message.to.includes('/p2prequester/')) return false;

      // hack to disable Identity verification for messages coming from legacy domains while solution is not implemented

      if (this.context.runtimeRegistry.isInterworkingProtoStub(message.from)) return false;

      if (message.from === fromSchema || message.to === toSchema || message.type === 'read' || message.type === 'response' || (0, _utils.isHypertyURL)(message.from) && message.type === 'delete') {
        return false;
      } else {
        return schemasToIgnore.indexOf(fromSchema) === -1 || schemasToIgnore.indexOf(toSchema) === -1;
      }
    }
  }, {
    key: 'removePolicy',
    value: function removePolicy(source, key) {
      if (!source) throw new Error('source is not defined');
      if (source !== '*' && !key) throw new Error('key is not defined');

      switch (source) {
        case '*':
          this.context.serviceProviderPolicy = {};
          this.context.userPolicies = {};
          this.context.activeUserPolicy = undefined;
          this.context.savePolicies('USER');
          this.context.savePolicies('SERVICE_PROVIDER');
          this.context.saveActivePolicy();
          break;
        case 'SERVICE_PROVIDER':
          delete this.context.serviceProviderPolicy[key];
          this.context.savePolicies();
          break;
        case 'USER':
          delete this.context.userPolicies[key];
          if (key === this.context.activeUserPolicy) {
            this.context.activeUserPolicy = undefined;
            this.context.saveActivePolicy();
          }
          this.context.savePolicies('USER');
          break;
        default:
          throw Error('Unknown policy source: ' + source);
      }
    }
  }]);
  return PEP;
}();

exports.default = PEP;
module.exports = exports['default'];

},{"../utils/utils":454,"./ActionsService":425,"./PDP":427,"./Policy":429,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],429:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _AllowOverrides = require('./combiningAlgorithms/AllowOverrides');

var _AllowOverrides2 = _interopRequireDefault(_AllowOverrides);

var _BlockOverrides = require('./combiningAlgorithms/BlockOverrides');

var _BlockOverrides2 = _interopRequireDefault(_BlockOverrides);

var _FirstApplicable = require('./combiningAlgorithms/FirstApplicable');

var _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);

var _Rule = require('./Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Policy = function () {
  function Policy(key, rules, actions, combiningAlgorithm) {
    (0, _classCallCheck3.default)(this, Policy);

    if (!key) throw new Error('key is not defined');
    if (!actions) throw new Error('actions are not defined');

    this.actions = actions;
    this.key = key;
    this._setRules(rules);
    this._setCombiningAlgorithm(combiningAlgorithm);
  }

  (0, _createClass3.default)(Policy, [{
    key: 'addAction',
    value: function addAction(method, param) {
      this.actions.push({ method: method, param: param });
    }
  }, {
    key: 'createRule',
    value: function createRule(decision, condition, scope, target, priority) {
      if (priority === undefined) {
        priority = this.getLastPriority() + 1;
      }
      var rule = new _Rule2.default(decision, condition, scope, target, priority);
      this.rules.push(rule);
    }
  }, {
    key: 'deleteRule',
    value: function deleteRule(rule) {
      var indexToRemove = this.rules.indexOf(rule);
      this.rules.splice(indexToRemove, 1);
    }
  }, {
    key: 'enforceActions',
    value: function enforceActions(context, message) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var results = [];
        if (_this.actions.length !== 0) {
          for (var i in _this.actions) {
            var result = context.pep.actionsService[_this.actions[i].method](message, _this.actions[i].param);
            results.push(result);
          }
          _promise2.default.all(results).then(function (messages) {
            resolve(messages);
          }, function (error) {
            reject(error);
          });
        } else {
          resolve([message]);
        }
      });
    }
  }, {
    key: 'evaluateRules',
    value: function evaluateRules(context, message, isIncoming) {
      var results = [];
      for (var i in this.rules) {
        results.push(this.rules[i].evaluate(context, message, isIncoming));
      }

      return this.combiningAlgorithm.combine(results);
    }
  }, {
    key: 'getLastPriority',
    value: function getLastPriority() {
      var priorities = [];

      if (this.rules.length !== 0) {
        for (var i in this.rules) {
          priorities.push(this.rules[i].priority);
        }
        return Math.max.apply(Math, priorities);
      } else {
        return -1;
      }
    }
  }, {
    key: 'getRuleByPriority',
    value: function getRuleByPriority(priority) {
      for (var i in this.rules) {
        if (String(this.rules[i].priority) === String(priority)) {
          return this.rules[i];
        }
      }
      throw Error('Rule with priority ' + priority + ' does not exist!');
    }
  }, {
    key: '_setCombiningAlgorithm',
    value: function _setCombiningAlgorithm(combiningAlgorithm) {
      if (!combiningAlgorithm) {
        combiningAlgorithm = 'blockOverrides';
      }
      switch (combiningAlgorithm) {
        case 'blockOverrides':
          this.combiningAlgorithm = new _BlockOverrides2.default();
          break;
        case 'allowOverrides':
          this.combiningAlgorithm = new _AllowOverrides2.default();
          break;
        case 'firstApplicable':
          this.combiningAlgorithm = new _FirstApplicable2.default();
          break;
        default:
          throw Error('Unknown algorithm: ' + combiningAlgorithm);
      }
    }
  }, {
    key: '_setRules',
    value: function _setRules(rules) {
      this.rules = [];

      for (var i in rules) {
        var rule = rules[i];
        if (rule.priority === undefined) {
          rule.priority = this.getLastPriority() + 1;
        }
        if (!(rule instanceof _Rule2.default)) {
          rule = new _Rule2.default(rule.decision, rule.condition, rule.scope, rule.target, rule.priority);
        }
        this.rules.push(rule);
      }
    }
  }, {
    key: 'sortRules',
    value: function sortRules() {
      return this.rules.sort(function (a, b) {
        var x = a.priority;var y = b.priority;
        return x < y ? -1 : x > y ? 1 : 0;
      });
    }
  }]);
  return Policy;
}();

exports.default = Policy;
module.exports = exports['default'];

},{"./Rule":431,"./combiningAlgorithms/AllowOverrides":432,"./combiningAlgorithms/BlockOverrides":433,"./combiningAlgorithms/FirstApplicable":434,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],430:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReThinkCtx = function () {
  function ReThinkCtx() {
    (0, _classCallCheck3.default)(this, ReThinkCtx);

    this.defaultBehaviour = true;
    this.groups = {};
  }

  (0, _createClass3.default)(ReThinkCtx, [{
    key: 'scheme',
    get: function get() {
      return this._scheme;
    },
    set: function set(params) {
      var from = params.message.from;
      if ((0, _utils.isDataObjectURL)(from)) {
        this._scheme = (0, _utils.divideURL)(from).type;
      } else {
        this._scheme = undefined;
      }
    }
  }, {
    key: 'date',
    get: function get() {
      return this._date;
    },
    set: function set(now) {
      var date = new Date();
      var day = String(date.getDate());
      if (day.length === 1) {
        day = '0' + day;
      }
      var month = String(date.getMonth() + 1);
      if (month.length === 1) {
        month = '0' + month;
      }
      this._date = day + '/' + month + '/' + date.getFullYear();
    }
  }, {
    key: 'domain',
    get: function get() {
      return this._domain;
    },
    set: function set(params) {
      if (params.message.body.identity !== undefined) {
        this._domain = (0, _utils.divideEmail)(params.message.body.identity.userProfile.username).domain;
      }
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type;
    },
    set: function set(params) {
      var message = params.message;
      if (message.body.value !== undefined) {
        this._type = message.body.value.resourceType;
      }
    }
  }, {
    key: 'source',
    get: function get() {
      return this._source;
    },
    set: function set(params) {
      if (params.message.body.identity !== undefined) {
        this._source = params.message.body.identity.userProfile.username;
      }
    }
  }, {
    key: 'time',
    get: function get() {
      return this._time;
    },
    set: function set(now) {
      now = new Date();
      var minutes = String(now.getMinutes());
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      this._time = parseInt(String(now.getHours()) + minutes);
    }
  }, {
    key: 'weekday',
    get: function get() {
      return this._weekday;
    },
    set: function set(now) {
      this._weekday = String(new Date().getDay());
    }
  }]);
  return ReThinkCtx;
}();

exports.default = ReThinkCtx;
module.exports = exports['default'];

},{"../utils/utils":454,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],431:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _AdvancedCondition = require('./conditions/AdvancedCondition');

var _AdvancedCondition2 = _interopRequireDefault(_AdvancedCondition);

var _Condition = require('./conditions/Condition');

var _Condition2 = _interopRequireDefault(_Condition);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Rule = function () {
  function Rule(decision, condition, scope, target, priority) {
    (0, _classCallCheck3.default)(this, Rule);

    this.decision = decision;
    this.setCondition(condition);
    this.priority = priority;
    this.scope = scope;
    this.target = target;
  }

  (0, _createClass3.default)(Rule, [{
    key: 'setCondition',
    value: function setCondition(condition) {
      if (!(condition instanceof _Condition2.default || condition instanceof _AdvancedCondition2.default || condition instanceof _AdvancedCondition2.default)) {
        var attribute = condition.attribute;
        switch (attribute) {
          case 'subscription':
            this.condition = new _AdvancedCondition2.default(condition.attribute, condition.operator, condition.params);
            break;
          case undefined:
            this.condition = new _AdvancedCondition2.default(condition);
            break;
          default:
            this.condition = new _Condition2.default(condition.attribute, condition.operator, condition.params);
        }
      } else {
        this.condition = condition;
      }
    }
  }, {
    key: 'evaluate',
    value: function evaluate(context, message, isIncoming) {
      var field = isIncoming ? message.to : message.from;
      var hypertyName = void 0;
      switch (this.scope) {
        case 'global':
          break;

        case 'hyperty':
          if ((0, _utils.isDataObjectURL)(field)) {
            var reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(field));
            if (reporter !== undefined) {
              hypertyName = context.runtimeRegistry.getHypertyName(reporter);
            }
          } else {
            if (field.split('://')[0] === 'hyperty') {
              hypertyName = context.runtimeRegistry.getHypertyName((0, _utils.removePathFromURL)(field));
            }
          }
          if (hypertyName === this.target) {
            break;
          }

          return 'Not Applicable';

        case 'identity':
          var owner = void 0;

          if ((0, _utils.isDataObjectURL)(field)) {
            var _reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(field));
            owner = context.runtimeRegistry.getHypertyOwner(_reporter);
          } else {
            if (field.split('://')[0] === 'hyperty') {
              owner = context.runtimeRegistry.getHypertyOwner((0, _utils.removePathFromURL)(field));
            }
          }
          if (owner !== undefined) {
            owner = (0, _utils.getUserEmailFromURL)(owner);
          }
          if (owner === this.target) {
            break;
          }

          return 'Not Applicable';
      }

      if (this.condition.isApplicable(context, message, this.scope, this.target)) {
        return this.decision;
      } else {
        return 'Not Applicable';
      }
    }
  }]);
  return Rule;
}();

exports.default = Rule;
module.exports = exports['default'];

},{"../utils/utils":454,"./conditions/AdvancedCondition":435,"./conditions/Condition":436,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],432:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to combine the authorization decisions that result from rules evaluation.
*/
var AllowOverrides = function () {
  function AllowOverrides() {
    (0, _classCallCheck3.default)(this, AllowOverrides);
  }

  (0, _createClass3.default)(AllowOverrides, [{
    key: 'combine',


    /**
    * Given an array of individual authorization decisions, prioritizes a positive one.
    * @param    {boolean[]}   decisions
    * @returns  {boolean}
    */
    value: function combine(decisions) {
      if (decisions.indexOf(true) !== -1) {
        return true;
      } else {
        if (decisions.indexOf(false) !== -1) {
          return false;
        } else {
          return 'Not Applicable';
        }
      }
    }
  }]);
  return AllowOverrides;
}();

exports.default = AllowOverrides;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],433:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to combine the authorization decisions that result from rules evaluation.
*/
var BlockOverrides = function () {
  function BlockOverrides() {
    (0, _classCallCheck3.default)(this, BlockOverrides);
  }

  (0, _createClass3.default)(BlockOverrides, [{
    key: 'combine',


    /**
    * Given an array of individual authorisation decisions, prioritises a negative one.
    * @param    {boolean[]}   decisions
    * @returns  {boolean}
    */
    value: function combine(decisions) {
      if (decisions.indexOf(false) !== -1) {
        return false;
      } else {
        if (decisions.indexOf(true) !== -1) {
          return true;
        } else {
          return 'Not Applicable';
        }
      }
    }
  }]);
  return BlockOverrides;
}();

exports.default = BlockOverrides;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],434:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to combine the authorization decisions that result from rules evaluation.
*/
var FirstApplicable = function () {
  function FirstApplicable() {
    (0, _classCallCheck3.default)(this, FirstApplicable);
  }

  (0, _createClass3.default)(FirstApplicable, [{
    key: 'combine',


    /**
    * Given an array of individual authorisation decisions, returns the first one different from 'Not Applicable', either positive or negative.
    * @param    {boolean[]}     decisions
    * @returns  {boolean}
    */
    value: function combine(decisions) {
      for (var i in decisions) {
        if (decisions[i] !== 'Not Applicable') {
          return decisions[i];
        }
      }
      return 'Not Applicable';
    }
  }]);
  return FirstApplicable;
}();

exports.default = FirstApplicable;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],435:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Condition = require('./Condition');

var _Condition2 = _interopRequireDefault(_Condition);

var _Operators = require('../Operators');

var _Operators2 = _interopRequireDefault(_Operators);

var _SubscriptionCondition = require('./SubscriptionCondition');

var _SubscriptionCondition2 = _interopRequireDefault(_SubscriptionCondition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AdvancedCondition = function () {
  function AdvancedCondition(condition) {
    (0, _classCallCheck3.default)(this, AdvancedCondition);

    this.operators = new _Operators2.default();
    if (condition.operators !== undefined) {
      condition = condition.condition;
    }
    condition = this.buildCondition(condition);
    this.condition = condition;
  }

  (0, _createClass3.default)(AdvancedCondition, [{
    key: 'buildCondition',
    value: function buildCondition(condition) {
      if (Array.isArray(condition[1])) {
        condition[1] = this.buildCondition(condition[1]);
      } else {
        if (condition[1].attribute === 'subscription') {
          condition[1] = new _SubscriptionCondition2.default(condition[1].attribute, condition[1].operator, condition[1].params);
        } else {
          condition[1] = new _Condition2.default(condition[1].attribute, condition[1].operator, condition[1].params);
        }
      }

      if (condition[2] !== undefined) {
        if (Array.isArray(condition[2])) {
          condition[2] = this.buildCondition(condition[2]);
        } else {
          if (condition[2].attribute === 'subscription') {
            condition[2] = new _SubscriptionCondition2.default(condition[2].attribute, condition[2].operator, condition[2].params);
          } else {
            condition[2] = new _Condition2.default(condition[2].attribute, condition[2].operator, condition[2].params);
          }
        }
      }
      return condition;
    }
  }, {
    key: 'isApplicable',
    value: function isApplicable(context, message, scope, target, operator, left, right) {
      if (!operator) {
        operator = this.condition[0];
        left = this.condition[1];
        right = this.condition[2];
      }

      while (!(left instanceof _Condition2.default) & !(left instanceof _SubscriptionCondition2.default) & typeof left !== 'boolean') {
        left = this.isApplicable(context, message, scope, target, left[0], left[1], left[2]);
      }
      if (right !== undefined) {
        while (!(right instanceof _Condition2.default) & !(right instanceof _SubscriptionCondition2.default) & typeof right !== 'boolean') {
          right = this.isApplicable(context, message, scope, target, right[0], right[1], right[2]);
        }
      }

      var resultLeft = typeof left === 'boolean' ? left : left.isApplicable(context, message, scope, target);
      var resultRight = void 0;
      if (right !== undefined) {
        resultRight = typeof right === 'boolean' ? right : right.isApplicable(context, message, scope, target);
      }
      return this.operators[operator]([resultLeft, resultRight]);
    }
  }]);
  return AdvancedCondition;
}();

exports.default = AdvancedCondition;
module.exports = exports['default'];

},{"../Operators":426,"./Condition":436,"./SubscriptionCondition":437,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],436:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Operators = require('../Operators');

var _Operators2 = _interopRequireDefault(_Operators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to represent a condition and evaluate its applicability.
*/
var Condition = function () {

  /**
  * Creates a new Condition.
  * @class
  * @param  {string}  attribute
  * @param  {string}  operator
  * @param  {*}       params
  */
  function Condition(attribute, operator, params) {
    (0, _classCallCheck3.default)(this, Condition);

    this.attribute = attribute;
    this.operator = operator;
    this.params = params;
    this.operators = new _Operators2.default();
  }

  /**
  * Verifies if the condition is applicable to the message. First, the system value that corresponds to the attribute is retrieved; then, that value is compared with the parameter specified in the condition by executing the operator implementation. If the operator is 'in' and the name of a group is given, then the array holding the members of the group is retrieved before the comparison.
  * @param  {Object}    context   environment where the Policy Engine is being used
  * @param  {Object}    message
  */


  (0, _createClass3.default)(Condition, [{
    key: 'isApplicable',
    value: function isApplicable(context, message) {
      context[this.attribute] = { message: message };
      var value = context[this.attribute];
      var tempParam = void 0;

      if (this.operator === 'in') {
        if (!Array.isArray(this.params)) {
          tempParam = context.getGroup(this.params, message.to);
          return this.operators[this.operator]([tempParam, value]);
        }
      }

      return this.operators[this.operator]([this.params, value]);
    }
  }]);
  return Condition;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = Condition;
module.exports = exports['default'];

},{"../Operators":426,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],437:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Condition2 = require('./Condition');

var _Condition3 = _interopRequireDefault(_Condition2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to represent a subscription condition and evaluate its applicability.
*/
var SubscriptionCondition = function (_Condition) {
  (0, _inherits3.default)(SubscriptionCondition, _Condition);

  /**
  * Creates a new SubscriptionCondition.
  * @class
  * @param  {string}  attribute
  * @param  {string}  operator
  * @param  {*}       params
  */
  function SubscriptionCondition(attribute, operator, params) {
    (0, _classCallCheck3.default)(this, SubscriptionCondition);
    return (0, _possibleConstructorReturn3.default)(this, (SubscriptionCondition.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition)).call(this, attribute, operator, params));
  }

  /**
  * Verifies if the subscription condition is applicable to the message. First, verifies if the message is of the subscription type; second, verifies if the message is from a remote runtime to guarantee that the subscription is being validated in the destination runtime; third, verifies if the subscription preference is met.
  * @param  {Object}    context   environment where the Policy Engine is being used
  * @param  {Object}    message
  */


  (0, _createClass3.default)(SubscriptionCondition, [{
    key: 'isApplicable',
    value: function isApplicable(context, message) {
      var isSubscription = message.type === 'subscribe';
      var isFromRemoteSM = context.isFromRemoteSM(message.from);
      if (isSubscription & isFromRemoteSM) {
        return (0, _get3.default)(SubscriptionCondition.prototype.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition.prototype), 'isApplicable', this).call(this, context, message);
      } else {
        return false;
      }
    }
  }]);
  return SubscriptionCondition;
}(_Condition3.default); /**
                        * Copyright 2016 PT Inovação e Sistemas SA
                        * Copyright 2016 INESC-ID
                        * Copyright 2016 QUOBIS NETWORKS SL
                        * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                        * Copyright 2016 ORANGE SA
                        * Copyright 2016 Deutsche Telekom AG
                        * Copyright 2016 Apizee
                        * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                        *
                        * Licensed under the Apache License, Version 2.0 (the "License");
                        * you may not use this file except in compliance with the License.
                        * You may obtain a copy of the License at
                        *
                        *   http://www.apache.org/licenses/LICENSE-2.0
                        *
                        * Unless required by applicable law or agreed to in writing, software
                        * distributed under the License is distributed on an "AS IS" BASIS,
                        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                        * See the License for the specific language governing permissions and
                        * limitations under the License.
                        **/

exports.default = SubscriptionCondition;
module.exports = exports['default'];

},{"./Condition":436,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/get":16,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],438:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _AllowOverrides = require('../combiningAlgorithms/AllowOverrides');

var _AllowOverrides2 = _interopRequireDefault(_AllowOverrides);

var _BlockOverrides = require('../combiningAlgorithms/BlockOverrides');

var _BlockOverrides2 = _interopRequireDefault(_BlockOverrides);

var _utils = require('../../utils/utils');

var _FirstApplicable = require('../combiningAlgorithms/FirstApplicable');

var _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);

var _ReThinkCtx2 = require('../ReThinkCtx');

var _ReThinkCtx3 = _interopRequireDefault(_ReThinkCtx2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RuntimeCoreCtx = function (_ReThinkCtx) {
  (0, _inherits3.default)(RuntimeCoreCtx, _ReThinkCtx);

  function RuntimeCoreCtx(idModule, runtimeRegistry, storageManager) {
    (0, _classCallCheck3.default)(this, RuntimeCoreCtx);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (RuntimeCoreCtx.__proto__ || (0, _getPrototypeOf2.default)(RuntimeCoreCtx)).call(this));

    _this2.idModule = idModule;
    _this2.runtimeRegistry = runtimeRegistry;
    _this2.activeUserPolicy = undefined;
    _this2.serviceProviderPolicy = {};
    _this2.userPolicies = {};
    _this2.storageManager = storageManager;
    return _this2;
  }

  (0, _createClass3.default)(RuntimeCoreCtx, [{
    key: 'loadConfigurations',
    value: function loadConfigurations() {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this.storageManager.get('rethink:activePolicy').then(function (value) {
          _this.activeUserPolicy = value;

          return _this.storageManager.get('rethink:groups');
        }).then(function (groupInfo) {
          var groups = groupInfo;
          _this.groups = groups === undefined ? {} : groups;

          return _this.storageManager.get('rethink:spPolicies');
        }).then(function (policiesInfo) {
          var spPolicies = policiesInfo;
          _this.serviceProviderPolicy = spPolicies === undefined ? {} : spPolicies;

          _this._loadUserPolicies().then(function () {
            resolve();
          });
        });
      });
    }
  }, {
    key: 'prepareForEvaluation',
    value: function prepareForEvaluation(message, isIncoming) {
      var _this3 = this;

      return new _promise2.default(function (resolve, reject) {

        var _this = _this3;
        if (isIncoming) {
          if (_this._isToCypherModule(message)) {
            _this.idModule.decryptMessage(message).then(function (message) {
              /*if (message.type === 'update') {
                _this._isValidUpdate(message).then(message => {*/
              resolve(message);
            }, function (error) {
              reject(error);
              /*});
              } else {
                resolve(message);
              }*/
            });
          } else {
            resolve(message);
          }
        } else {
          console.log('ON prepareForEvaluation', message);
          if (_this._isToSetID(message)) {
            _this._getIdentity(message).then(function (identity) {
              message.body.identity = identity;
              resolve(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        }
      });
    }
  }, {
    key: 'getPolicies',
    value: function getPolicies(message, isIncomingMessage) {
      var policies = {};

      if (this.activeUserPolicy !== undefined) {
        policies.userPolicy = this.userPolicies[this.activeUserPolicy];
      }

      policies.serviceProviderPolicy = this.getServiceProviderPolicy(message, isIncomingMessage);

      return policies;
    }
  }, {
    key: '_isValidUpdate',
    value: function _isValidUpdate(message) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        if (message.from.split('://').length > 1) {
          _this.idModule._getHypertyFromDataObject(message.from).then(function (hypertyURL) {
            if (hypertyURL === message.body.source) {
              resolve(message);
            } else {
              reject('The source of the message is not valid.');
            }
          }, function (error) {
            reject(error);
          });
        } else {
          resolve(message);
        }
      });
    }
  }, {
    key: 'prepareToForward',
    value: function prepareToForward(message, isIncoming, result) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        // hack to disable mutual authentication until #147 is fixed
        resolve(message);

        if (isIncoming & result) {
          var isSubscription = message.type === 'subscribe';
          var isFromRemoteSM = _this.isFromRemoteSM(message.from);
          if (isSubscription & isFromRemoteSM) {
            _this.doMutualAuthentication(message).then(function () {
              resolve(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        } else {
          if (_this._isToCypherModule(message)) {
            _this.idModule.encryptMessage(message).then(function (message) {
              resolve(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        }
      });
    }
  }, {
    key: 'doMutualAuthentication',
    value: function doMutualAuthentication(message) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        var to = message.to.split('/');
        var subsIndex = to.indexOf('subscription');
        var isDataObjectSubscription = subsIndex !== -1;
        var isFromRemoteSM = _this.isFromRemoteSM(message.from);
        if (isDataObjectSubscription & isFromRemoteSM) {
          (function () {
            to.pop();
            var dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];
            _this.idModule.doMutualAuthentication(dataObjectURL, message.body.subscriber).then(function () {
              _this.runtimeRegistry.registerSubscriber(dataObjectURL, message.body.subscriber);
              resolve();
            }, function (error) {
              reject(error);
            });
          })();
        }
      });
    }
  }, {
    key: 'getMyEmails',
    value: function getMyEmails() {
      var identities = this.idModule.getIdentities();
      var emails = [];

      for (var i in identities) {
        emails.push((0, _utils.getUserEmailFromURL)(identities[i].identity));
      }

      return emails;
    }
  }, {
    key: 'getMyHyperties',
    value: function getMyHyperties() {
      var hyperties = this.runtimeRegistry.hypertiesList;
      var hypertiesNames = [];

      for (var i in hyperties) {
        var hypertyName = hyperties[i].objectName;
        if (hypertiesNames.indexOf(hypertyName) === -1) {
          hypertiesNames.push(hypertyName);
        }
      }

      return hypertiesNames;
    }
  }, {
    key: 'getServiceProviderPolicy',
    value: function getServiceProviderPolicy(message, isIncoming) {
      var policy = void 0;

      if (isIncoming) {
        var toHyperty = this.runtimeRegistry.getHypertyName(message.to);
        policy = this.serviceProviderPolicy[toHyperty];
      } else {
        var fromHyperty = this.runtimeRegistry.getHypertyName(message.from);
        policy = this.serviceProviderPolicy[fromHyperty];
      }
      return policy;
    }
  }, {
    key: 'isFromRemoteSM',
    value: function isFromRemoteSM(from) {
      var splitFrom = from.split('://');
      return splitFrom[0] === 'runtime' && from !== this.runtimeRegistry.runtimeURL + '/sm';
    }
  }, {
    key: '_isToSetID',
    value: function _isToSetID(message) {
      var schemasToIgnore = ['domain-idp', 'runtime', 'domain'];
      var splitFrom = message.from.split('://');
      var fromSchema = splitFrom[0];

      var _from = message.from;

      if (message.body && message.body.hasOwnProperty('source')) _from = message.body.source;

      // Signalling Messages between P2P Stubs don't have Identities. FFS

      if (_from.includes('/p2prequester/') || _from.includes('/p2phandler/')) return false;

      return schemasToIgnore.indexOf(fromSchema) === -1;
    }
  }, {
    key: 'getURL',
    value: function getURL(url) {
      var splitURL = url.split('/');
      return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];
    }
  }, {
    key: '_getIdentity',
    value: function _getIdentity(message) {
      console.log('[Policy.RuntimeCoreCtx.getIdentity] ', message);

      if (message.body.source !== undefined) {
        return this.idModule.getToken(message.body.source, message.to);
      } else

        /*    if (message.type === 'update') {
              return this.idModule.getToken(message.body.source);
            }
        
            if (message.type === 'response' && message.body.source !== undefined) {
              return this.idModule.getToken(message.body.source);
            }*/

        //    if (divideURL(message.from).type === 'hyperty') {
        return this.idModule.getToken(message.from, message.to);
      /*    } else {
            return this.idModule.getToken(this.getURL(message.from));
          }*/
    }

    /**
    * Identifies the messages to be forwarded to the Identity Module for
    * encryption/decryption and integrity validation.
    * @param {Message}    message
    * @returns {boolean}  returns true if the message requires encryption/decryption
    *                     or if its type equals 'handshake'; false otherwise
    */

  }, {
    key: '_isToCypherModule',
    value: function _isToCypherModule(message) {
      var isCreate = message.type === 'create';
      var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
      var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';
      var isToDataObject = (0, _utils.isDataObjectURL)(message.to);

      // todo: return false for messages coming from interworking stubs.
      // Get descriptor from runtime catalogue and check interworking field.

      return isCreate && isFromHyperty && isToHyperty || isCreate && isFromHyperty && isToDataObject || message.type === 'handshake' || message.type === 'update';
    }

    /**
    * Creates a group with the given name.
    * @param  {String}  groupName
    */

  }, {
    key: '_loadUserPolicies',
    value: function _loadUserPolicies() {
      var _this4 = this;

      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this.storageManager.get('rethink:userPolicies').then(function (value) {
          var policies = value;
          if (policies !== undefined) {
            for (var i in policies) {
              _this4.pep.addPolicy('USER', i, policies[i]);
            }
          }
          resolve();
        });
      });
    }
  }, {
    key: '_getLastComponentOfURL',
    value: function _getLastComponentOfURL(url) {
      var split = url.split('/');
      return split[split.length - 1];
    }
  }, {
    key: '_getPoliciesJSON',
    value: function _getPoliciesJSON(policies) {
      for (var i in policies) {
        var combiningAlgorithm = policies[i].combiningAlgorithm;
        if (combiningAlgorithm instanceof _BlockOverrides2.default) {
          policies[i].combiningAlgorithm = 'blockOverrides';
        } else {
          if (combiningAlgorithm instanceof _AllowOverrides2.default) {
            policies[i].combiningAlgorithm = 'allowOverrides';
          } else {
            if (combiningAlgorithm instanceof _FirstApplicable2.default) {
              policies[i].combiningAlgorithm = 'firstApplicable';
            } else {
              policies[i].combiningAlgorithm = undefined;
            }
          }
        }
      }

      return policies;
    }
  }, {
    key: 'saveActivePolicy',
    value: function saveActivePolicy() {
      var _this5 = this;

      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this.storageManager.set('rethink:activePolicy', 0, _this5.activeUserPolicy).then(function () {
          resolve();
        });
      });
    }
  }, {
    key: 'saveGroups',
    value: function saveGroups() {
      var _this6 = this;

      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this.storageManager.set('rethink:groups', 0, _this6.groups).then(function () {
          resolve();
        });
      });
    }
  }, {
    key: 'savePolicies',
    value: function savePolicies(source, policy, key) {
      var policiesJson = void 0;

      switch (source) {
        case 'USER':
          policiesJson = (0, _stringify2.default)(this.userPolicies);
          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));
          this.storageManager.set('rethink:userPolicies', 0, policiesJson);
          break;
        case 'SERVICE_PROVIDER':
          if (policy !== undefined & key !== undefined) {
            this.serviceProviderPolicy[key] = policy;
          }
          policiesJson = (0, _stringify2.default)(this.serviceProviderPolicy);
          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));
          this.storageManager.set('rethink:spPolicies', 0, policiesJson);
          break;
        default:
          throw Error('Unknown policy source: ' + source);
      }
    }
  }, {
    key: 'getGroupsNames',
    value: function getGroupsNames() {
      var myGroups = this.groups;
      var groupsNames = [];
      if (myGroups !== undefined) {
        for (var groupName in myGroups) {
          groupsNames.push(groupName);
        }
      }
      return groupsNames;
    }
  }, {
    key: 'getGroup',
    value: function getGroup(groupName, destination) {
      var members = [];

      if (groupName === 'preauthorised') {
        var dataObjectURL = destination.split('/');
        dataObjectURL.pop();
        dataObjectURL = dataObjectURL[0] + '//' + dataObjectURL[2];
        members = this.runtimeRegistry.getPreAuthSubscribers(dataObjectURL);
      } else {
        if (this.groups[groupName] !== undefined) {
          members = this.groups[groupName];
        }
      }

      return members;
    }

    /**
    * Creates a group with the given name.
    * @param  {String}  groupName
    */

  }, {
    key: 'createGroup',
    value: function createGroup(groupName) {
      this.groups[groupName] = [];
      this.saveGroups();
    }
  }, {
    key: 'deleteGroup',
    value: function deleteGroup(groupName) {
      delete this.groups[groupName];
      this.saveGroups();
    }

    /**
    * Adds the given user email to the group with the given name.
    * @param  {String}  userEmail
    * @param  {String}  groupName
    */

  }, {
    key: 'addToGroup',
    value: function addToGroup(groupName, userEmail) {
      var myGroups = this.groups;
      if (myGroups[groupName] !== undefined) {
        if (myGroups[groupName].indexOf(userEmail) === -1) {
          myGroups[groupName].push(userEmail);
          this.saveGroups();
        }
      } else {
        throw Error('Group "' + groupName + '" does not exist!');
      }
    }
  }, {
    key: 'removeFromGroup',
    value: function removeFromGroup(groupName, userEmail) {
      var group = this.groups[groupName];

      group.splice(group.indexOf(userEmail), 1);
      this.saveGroups();
    }
  }, {
    key: 'subscription',
    get: function get() {
      return this._subscription;
    },
    set: function set(params) {
      this._subscription = params.message.body.subscriber;
    }
  }]);
  return RuntimeCoreCtx;
}(_ReThinkCtx3.default);

exports.default = RuntimeCoreCtx;
module.exports = exports['default'];

},{"../../utils/utils":454,"../ReThinkCtx":430,"../combiningAlgorithms/AllowOverrides":432,"../combiningAlgorithms/BlockOverrides":433,"../combiningAlgorithms/FirstApplicable":434,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],439:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Core Discovery interface
* Class to allow applications to search for hyperties and DataObjects using the message bus
*/
var Discovery = function () {

  /**
  * To initialise the HypertyDiscover, which will provide the support for hyperties to
  * query users registered in outside the internal core.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {RuntimeURL}          runtimeURL            runtimeURL
  */
  function Discovery(runtimeURL, msgBus) {
    (0, _classCallCheck3.default)(this, Discovery);

    var _this = this;
    _this.messageBus = msgBus;

    _this.domain = (0, _utils.divideURL)(runtimeURL).domain;
    _this.discoveryURL = runtimeURL;
    _this.registryURL = runtimeURL + '/registry/';
  }

  /**
  * function to request about an dataObject registered in domain registry with a given name, and
  * return the dataObject information, if found.
  * @param  {String}              name  dataObject URL
  * @param  {String}            domain (Optional)
  * @return {Promise}          Promise
  */


  (0, _createClass3.default)(Discovery, [{
    key: 'discoverDataObjectPerName',
    value: function discoverDataObjectPerName(name, domain) {
      var _this = this;
      var activeDomain = void 0;

      activeDomain = !domain ? _this.domain : domain;

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: name }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    * function to request about dataObject registered in domain registry, and
    * return the dataObject information, if found.
    * @param  {String}              url  dataObject URL
    * @param  {String}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverDataObjectPerURL',
    value: function discoverDataObjectPerURL(url, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: url }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    *  function to delete an Data Object registered in the Domain Registry
    *  @param   {String}           url              dataObject url
    *  @param   {domain}           domain         (Optional)
    *  @return  {Promise}          Promise          result
    */

  }, {
    key: 'deleteDataObject',
    value: function deleteDataObject(url, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'delete', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { value: { name: url } } };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var response = reply.body.code;

          if (response === 200) {
            resolve(response);
          } else {
            reject('Error on deleting dataObject');
          }
        });
      });
    }

    /**
    * function to request about specific reporter dataObject registered in domain registry, and
    * return the dataObjects from that reporter.
    * @param  {String}           reporter     dataObject reporter
    * @param  {String}           domain       (Optional)
    * @return {Array}           Promise       DataObjects
    */

  }, {
    key: 'discoverDataObjectPerReporter',
    value: function discoverDataObjectPerReporter(reporter, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: reporter }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObjects = reply.body.value;

          if (dataObjects) {
            resolve(dataObjects);
          } else {
            reject('No dataObject was found');
          }
        });
      });
    }

    /** Advanced Search for dataObjects registered in domain registry
    * @param  {String}           user                  user identifier, either in url or email format
    * @param  {Array<string>}    schema (Optional)     types of dataObject schemas
    * @param  {Array<string>}    resources (Optional)  types of dataObject resources
    * @param  {String}           domain (Optional)     domain of the registry to search
    */

  }, {
    key: 'discoverDataObject',
    value: function discoverDataObject(name, schema, resources, domain) {
      var _this = this;
      var activeDomain = void 0;
      //let userIdentifier = convertToUserURL(user);

      activeDomain = !domain ? _this.domain : domain;

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: name,
          criteria: { resources: resources, dataSchemes: schema }
        }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var hyperties = reply.body.value;

          if (hyperties) {
            resolve(hyperties);
          } else {
            reject('No DataObject was found');
          }
        });
      });
    }

    /** Advanced Search for Hyperties registered in domain registry
    * @param  {String}           user                  user identifier, either in url or email format
    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas
    * @param  {Array<string>}    resources (Optional)  types of hyperties resources
    * @param  {String}           domain (Optional)     domain of the registry to search
    */

  }, {
    key: 'discoverHyperty',
    value: function discoverHyperty(user, schema, resources, domain) {
      var _this = this;
      var activeDomain = void 0;
      var userIdentifier = (0, _utils.convertToUserURL)(user);

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: userIdentifier,
          criteria: { resources: resources, dataSchemes: schema }
        }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var hyperties = reply.body.value;

          if (hyperties) {
            resolve(hyperties);
          } else {
            reject('No Hyperty was found');
          }
        });
      });
    }

    /**
    * function to request about users registered in domain registry, and
    * return the last hyperty instance registered by the user.
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverHypertyPerUser',
    value: function discoverHypertyPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL }
      };

      console.log('Message: ', message, activeDomain, identityURL);

      //console.log('message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(message, function (reply) {
          console.log('message reply', reply);

          var hyperty = void 0;
          var mostRecent = void 0;
          var lastHyperty = void 0;
          var value = reply.body.value;

          for (hyperty in value) {
            if (value[hyperty].lastModified !== undefined) {
              if (mostRecent === undefined) {
                mostRecent = new Date(value[hyperty].lastModified);
                lastHyperty = hyperty;
              } else {
                var hypertyDate = new Date(value[hyperty].lastModified);
                if (mostRecent.getTime() < hypertyDate.getTime()) {
                  mostRecent = hypertyDate;
                  lastHyperty = hyperty;
                }
              }
            }
          }

          console.log('Last Hyperty: ', lastHyperty, mostRecent);

          var hypertyURL = lastHyperty;

          if (hypertyURL === undefined) {
            return reject('User Hyperty not found');
          }

          var idPackage = {
            id: email,
            descriptor: value[hypertyURL].descriptor,
            hypertyURL: hypertyURL
          };

          console.log('===> hypertyDiscovery messageBundle: ', idPackage);
          resolve(idPackage);
        });
      });
    }

    /**
    * function to request about users registered in domain registry, and
    * return the all the hyperties registered by the user
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverHypertiesPerUser',
    value: function discoverHypertiesPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL }
      };

      console.log('Message discoverHypertiesPerUser: ', message, activeDomain, identityURL);

      //console.log('message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(message, function (reply) {
          console.log('discoverHypertiesPerUser reply', reply);

          var value = reply.body.value;

          if (!value) {
            return reject('User Hyperty not found');
          }

          resolve(value);
        });
      });
    }

    /**
    *  function to delete an hypertyInstance in the Domain Registry
    *  @param   {String}           user              user url
    *  @param   {String}           hypertyInstance   HypertyInsntance url
    *  @param   {domain}           domain (Optional)
    *  @return  {Promise}          Promise          result
    */

  }, {
    key: 'deleteHyperty',
    value: function deleteHyperty(user, hypertyInstance, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'delete', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { value: { user: user, url: hypertyInstance } } };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var response = reply.body.code;

          if (response) {
            resolve('Hyperty successfully deleted');
          } else {
            reject('Error on deleting hyperty');
          }
        });
      });
    }
  }]);
  return Discovery;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = Discovery;
module.exports = exports['default'];

},{"../utils/utils":454,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],440:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Core Discovery interface
* Class to allow applications to search for hyperties and DataObjects using the message bus
*/
var DiscoveryServiceFramework = function () {

  /**
  * To initialise the HypertyDiscover, which will provide the support for hyperties to
  * query users registered in outside the internal core.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {RuntimeURL}          runtimeURL            runtimeURL
  */
  function DiscoveryServiceFramework(hypertyURL, runtimeURL, msgBus) {
    (0, _classCallCheck3.default)(this, DiscoveryServiceFramework);

    var _this = this;
    _this.messageBus = msgBus;

    _this.domain = (0, _utils.divideURL)(runtimeURL).domain;
    _this.discoveryURL = hypertyURL + '/discovery';
    _this.registryURL = runtimeURL + '/registry/';
  }

  /**
  * function to request about an dataObject registered in domain registry with a given name, and
  * return the dataObject information, if found.
  * @param  {String}              name  dataObject URL
  * @param  {String}            domain (Optional)
  * @return {Promise}          Promise
  */


  (0, _createClass3.default)(DiscoveryServiceFramework, [{
    key: 'discoverDataObjectPerName',
    value: function discoverDataObjectPerName(name, domain) {
      var _this = this;
      var activeDomain = void 0;

      activeDomain = !domain ? _this.domain : domain;

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: name }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    * function to request about dataObject registered in domain registry, and
    * return the dataObject information, if found.
    * @param  {String}              url  dataObject URL
    * @param  {String}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverDataObjectPerURL',
    value: function discoverDataObjectPerURL(url, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: url }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    *  function to delete an Data Object registered in the Domain Registry
    *  @param   {String}           url              dataObject url
    *  @param   {domain}           domain         (Optional)
    *  @return  {Promise}          Promise          result
    */

  }, {
    key: 'deleteDataObject',
    value: function deleteDataObject(url, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'delete', from: _this.discoveryURL, to: _this.registryURL, body: { value: { name: url } } };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var response = reply.body.code;

          if (response === 200) {
            resolve(response);
          } else {
            reject('Error on deleting dataObject');
          }
        });
      });
    }

    /**
    * function to request about specific reporter dataObject registered in domain registry, and
    * return the dataObjects from that reporter.
    * @param  {String}           reporter     dataObject reporter
    * @param  {String}           domain       (Optional)
    * @return {Array}           Promise       DataObjects
    */

  }, {
    key: 'discoverDataObjectPerReporter',
    value: function discoverDataObjectPerReporter(reporter, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: reporter }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObjects = reply.body.value;

          if (dataObjects) {
            resolve(dataObjects);
          } else {
            reject('No dataObject was found');
          }
        });
      });
    }

    /** Advanced Search for dataObjects registered in domain registry
    * @param  {String}           user                  user identifier, either in url or email format
    * @param  {Array<string>}    schema (Optional)     types of dataObject schemas
    * @param  {Array<string>}    resources (Optional)  types of dataObject resources
    * @param  {String}           domain (Optional)     domain of the registry to search
    */

  }, {
    key: 'discoverDataObject',
    value: function discoverDataObject(name, schema, resources, domain) {
      var _this = this;
      var activeDomain = void 0;
      //let userIdentifier = convertToUserURL(user);

      activeDomain = !domain ? _this.domain : domain;

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: name,
          criteria: { resources: resources, dataSchemes: schema }
        }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var hyperties = reply.body.value;

          if (hyperties) {
            resolve(hyperties);
          } else {
            reject('No DataObject was found');
          }
        });
      });
    }

    /** Advanced Search for Hyperties registered in domain registry
    * @param  {String}           user                  user identifier, either in url or email format
    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas
    * @param  {Array<string>}    resources (Optional)  types of hyperties resources
    * @param  {String}           domain (Optional)     domain of the registry to search
    */

  }, {
    key: 'discoverHyperty',
    value: function discoverHyperty(user, schema, resources, domain) {
      var _this = this;
      var activeDomain = void 0;
      var userIdentifier = (0, _utils.convertToUserURL)(user);

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: userIdentifier,
          criteria: { resources: resources, dataSchemes: schema }
        }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var hyperties = reply.body.value;

          if (hyperties) {
            resolve(hyperties);
          } else {
            reject('No Hyperty was found');
          }
        });
      });
    }

    /**
    * function to request about users registered in domain registry, and
    * return the last hyperty instance registered by the user.
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverHypertyPerUser',
    value: function discoverHypertyPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: identityURL }
      };

      console.log('Message: ', message, activeDomain, identityURL);

      //console.log('message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(message, function (reply) {
          console.log('message reply', reply);

          var hyperty = void 0;
          var mostRecent = void 0;
          var lastHyperty = void 0;
          var value = reply.body.value;

          for (hyperty in value) {
            if (value[hyperty].lastModified !== undefined) {
              if (mostRecent === undefined) {
                mostRecent = new Date(value[hyperty].lastModified);
                lastHyperty = hyperty;
              } else {
                var hypertyDate = new Date(value[hyperty].lastModified);
                if (mostRecent.getTime() < hypertyDate.getTime()) {
                  mostRecent = hypertyDate;
                  lastHyperty = hyperty;
                }
              }
            }
          }

          console.log('Last Hyperty: ', lastHyperty, mostRecent);

          var hypertyURL = lastHyperty;

          if (hypertyURL === undefined) {
            return reject('User Hyperty not found');
          }

          var idPackage = {
            id: email,
            descriptor: value[hypertyURL].descriptor,
            hypertyURL: hypertyURL
          };

          console.log('===> hypertyDiscovery messageBundle: ', idPackage);
          resolve(idPackage);
        });
      });
    }

    /**
    * function to request about users registered in domain registry, and
    * return the all the hyperties registered by the user
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverHypertiesPerUser',
    value: function discoverHypertiesPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: identityURL }
      };

      console.log('Message discoverHypertiesPerUser: ', message, activeDomain, identityURL);

      //console.log('message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(message, function (reply) {
          console.log('discoverHypertiesPerUser reply', reply);

          var value = reply.body.value;

          if (!value) {
            return reject('User Hyperty not found');
          }

          resolve(value);
        });
      });
    }

    /**
    *  function to delete an hypertyInstance in the Domain Registry
    *  @param   {String}           user              user url
    *  @param   {String}           hypertyInstance   HypertyInsntance url
    *  @param   {domain}           domain (Optional)
    *  @return  {Promise}          Promise          result
    */

  }, {
    key: 'deleteHyperty',
    value: function deleteHyperty(user, hypertyInstance, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'delete', from: _this.discoveryURL, to: _this.registryURL, body: { value: { user: user, url: hypertyInstance } } };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var response = reply.body.code;

          if (response) {
            resolve('Hyperty successfully deleted');
          } else {
            reject('Error on deleting hyperty');
          }
        });
      });
    }
  }]);
  return DiscoveryServiceFramework;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = DiscoveryServiceFramework;
module.exports = exports['default'];

},{"../utils/utils":454,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],441:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _RegistryDataModel2 = require('./RegistryDataModel');

var _RegistryDataModel3 = _interopRequireDefault(_RegistryDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)
*   HypertyInstance Data Model used to model instances of Hyperties running in devices and servers.
*/
var HypertyInstance = function (_RegistryDataModel) {
  (0, _inherits3.default)(HypertyInstance, _RegistryDataModel);

  function HypertyInstance(id, url, descriptorURL, descriptor, hypertyURL, user, guid, runtime, context, p2pHandler, p2pRequester, dataSchemes, resources, startingTime, lastModified) {
    (0, _classCallCheck3.default)(this, HypertyInstance);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (HypertyInstance.__proto__ || (0, _getPrototypeOf2.default)(HypertyInstance)).call(this, id, url, descriptorURL, p2pRequester, startingTime, lastModified));

    var _this = _this2;
    _this._descriptor = descriptor;
    _this._hypertyURL = hypertyURL;
    _this._user = user;
    _this._guid = guid;
    _this._runtime = runtime;
    _this._context = context;
    _this._p2pHandler = p2pHandler;
    _this._dataSchemes = dataSchemes;
    _this._resources = resources;
    return _this2;
  }

  (0, _createClass3.default)(HypertyInstance, [{
    key: 'user',
    set: function set(identity) {
      var _this = this;
      _this.user = identity;
    },
    get: function get() {
      var _this = this;
      return _this._user;
    }
  }, {
    key: 'hypertyURL',
    get: function get() {
      var _this = this;
      return _this._hypertyURL;
    }
  }, {
    key: 'descriptor',
    get: function get() {
      var _this = this;
      return _this._descriptor;
    }
  }, {
    key: 'objectName',
    get: function get() {
      var _this = this;
      return _this._descriptor._objectName;
    }
  }, {
    key: 'p2pHandler',
    get: function get() {
      var _this = this;
      return _this._p2pHandler;
    }
  }, {
    key: 'dataSchemes',
    get: function get() {
      var _this = this;
      return _this._dataSchemes;
    }
  }, {
    key: 'resources',
    get: function get() {
      var _this = this;
      return _this._resources;
    }
  }, {
    key: 'runtimeURL',
    get: function get() {
      var _this = this;
      return _this._runtime;
    }
  }]);
  return HypertyInstance;
}(_RegistryDataModel3.default); /**
                                * Copyright 2016 PT Inovação e Sistemas SA
                                * Copyright 2016 INESC-ID
                                * Copyright 2016 QUOBIS NETWORKS SL
                                * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                * Copyright 2016 ORANGE SA
                                * Copyright 2016 Deutsche Telekom AG
                                * Copyright 2016 Apizee
                                * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                *
                                * Licensed under the Apache License, Version 2.0 (the "License");
                                * you may not use this file except in compliance with the License.
                                * You may obtain a copy of the License at
                                *
                                *   http://www.apache.org/licenses/LICENSE-2.0
                                *
                                * Unless required by applicable law or agreed to in writing, software
                                * distributed under the License is distributed on an "AS IS" BASIS,
                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                * See the License for the specific language governing permissions and
                                * limitations under the License.
                                **/


exports.default = HypertyInstance;
module.exports = exports['default'];

},{"./RegistryDataModel":443,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],442:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _runtimeUtils = require('../runtime/runtimeUtils');

var _AddressAllocation = require('../allocation/AddressAllocation');

var _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);

var _HypertyInstance = require('./HypertyInstance');

var _HypertyInstance2 = _interopRequireDefault(_HypertyInstance);

var _MessageFactory = require('service-framework/dist/MessageFactory');

var _utils = require('../utils/utils.js');

var _Discovery = require('./Discovery');

var _Discovery2 = _interopRequireDefault(_Discovery);

var _DiscoveryServiceFramework = require('./DiscoveryServiceFramework');

var _DiscoveryServiceFramework2 = _interopRequireDefault(_DiscoveryServiceFramework);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var STATUS = { CREATED: 'created', LIVE: 'live', DEPLOYED: 'deployed', PROGRESS: 'in-progress', DISCONNECTED: 'disconnected', DEAD: 'dead' };

/*import IdentityManager from './IdentityManager';
import Discovery from './Discovery';*/

/**
* Runtime Registry Interface
*/
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var Registry = function () {

  /**
  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL
  * @param  {AppSandbox}          appSandbox            appSandbox
  * @param  {runtimeCatalogue}    runtimeCatalogue      runtimeCatalogue
  * @param  {DomainURL}           remoteRegistry        remoteRegistry
  * @param  {storageManager}      storageManager
  */
  function Registry(runtimeURL, appSandbox, identityModule, runtimeCatalogue, runtimeCapabilities, storageManager, remoteRegistry) {
    (0, _classCallCheck3.default)(this, Registry);


    // how some functions receive the parameters for example:
    // new Registry('hyperty-runtime://sp1/123', appSandbox, idModule, remoteRegistry);
    // registry.registerStub(sandbox, 'sp1');
    // registry.registerHyperty(sandBox, 'hyperty-runtime://sp1/123');
    // registry.resolve('hyperty-runtime://sp1/123');

    if (!runtimeURL) throw new Error('runtimeURL is missing.');
    if (!storageManager) throw new Error('storageManager is missing.');
    /*if (!remoteRegistry) throw new Error('remoteRegistry is missing');*/

    var _this = this;

    _this.registryURL = runtimeURL + '/registry/';
    _this.appSandbox = appSandbox;
    _this.runtimeURL = runtimeURL;
    _this.runtimeCatalogue = runtimeCatalogue;
    _this.remoteRegistry = remoteRegistry;
    _this.idModule = identityModule;
    _this.storageManager = storageManager;
    _this.runtimeCapabilities = runtimeCapabilities;
    _this.identifier = (0, _utils.generateGUID)();

    // the expires in 3600, represents 1 hour
    //the expires is in seconds, unit of measure received by the domain registry
    _this.expiresTime = 3600;

    _this.hypertiesListToRemove = {};
    _this.hypertiesList = [];
    _this.remoteHypertyList = [];
    _this.idpLegacyProxyList = {};

    _this.p2pHandlerStub = {};
    _this.p2pRequesterStub = {};
    _this.p2pConnectionList = {};
    _this.p2pHandlerAssociation = {};

    _this.protostubsList = {};
    _this.idpProxyList = {};
    _this.dataObjectList = {};
    _this.subscribedDataObjectList = {};
    _this.sandboxesList = { sandbox: {}, appSandbox: {} };
    _this.pepList = {};
    _this.registries = {};

    _this._domain = (0, _utils.divideURL)(_this.registryURL).domain;
    _this.sandboxesList.appSandbox[runtimeURL] = appSandbox;
    var msgFactory = new _MessageFactory.MessageFactory('false', '{}');
    _this.messageFactory = msgFactory;
  }

  (0, _createClass3.default)(Registry, [{
    key: 'discoverHypertyPerUser',


    /**
    * function to request about users registered in domain registry, and
    * return the last hyperty instance registered by the user.
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

    // TODO: implement a cache system
    value: function discoverHypertyPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this._domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.registryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL }
      };

      console.log('[Registry] Message: ', message, activeDomain, identityURL);

      //console.log('[Registry] message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this._messageBus.postMessage(message, function (reply) {
          console.log('[Registry] message reply', reply);

          var hyperty = void 0;
          var mostRecent = void 0;
          var lastHyperty = void 0;
          var value = reply.body.value;

          for (hyperty in value) {
            if (value[hyperty].lastModified !== undefined) {
              if (mostRecent === undefined) {
                mostRecent = new Date(value[hyperty].lastModified);
                lastHyperty = hyperty;
              } else {
                var hypertyDate = new Date(value[hyperty].lastModified);
                if (mostRecent.getTime() < hypertyDate.getTime()) {
                  mostRecent = hypertyDate;
                  lastHyperty = hyperty;
                }
              }
            }
          }

          console.log('[Registry] Last Hyperty: ', lastHyperty, mostRecent);

          var hypertyURL = lastHyperty;

          if (hypertyURL === undefined) {
            return reject('User Hyperty not found');
          }

          var idPackage = {
            id: email,
            descriptor: value[hypertyURL].descriptor,
            hypertyURL: hypertyURL
          };

          console.log('[Registry] ===> hypertyDiscovery messageBundle: ', idPackage);
          resolve(idPackage);
        });
      });
    }
  }, {
    key: '_getIdentityAssociated',
    value: function _getIdentityAssociated(type, hypertyURL) {
      var _this = this;

      for (var hyperty in _this.hypertiesList) {
        var value = _this.hypertiesList[hyperty];
        if (value._hypertyURL === hypertyURL) {
          switch (type) {
            case 'username':
              return value._user.username;
            case 'cn':
              return value._user.cn;
            case 'locale':
              return value._user.locale;
            case 'avatar':
              return value._user.avatar;
            case 'userURL':
              return value._user.userURL;
            case '.':
              return value._user;
            default:
              return '';
          }
        }
      }
      return '';
    }

    /**
    * query the domain registry for information from a dataObject URL
    * @param  {String}   url            dataObject URL
    * @return {JSON}     dataObject     data object
    */

  }, {
    key: 'discoverDataObjectPerURL',
    value: function discoverDataObjectPerURL(url, domain) {

      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var activeDomain = void 0;

        if (!domain) {
          activeDomain = _this._domain;
        } else {
          activeDomain = domain;
        }

        var msg = {
          type: 'read', from: _this.registryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: url }
        };

        _this._messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    * This function is used to return the sandbox instance where the Application is executing. It is assumed there is just one App per Runtime instance.
    */

  }, {
    key: 'getAppSandbox',
    value: function getAppSandbox() {
      var _this = this;
      return _this.appSandbox;
    }

    /**
    * This function returns the user associated to the hyperty URL
    * @param    {String}    hypertyURL      hyperty URL
    * @return   {String}    userURL         user URL
    */

  }, {
    key: 'getHypertyOwner',
    value: function getHypertyOwner(hypertyURL) {

      var _this = this;
      var userURL = void 0;

      for (var index in _this.hypertiesList) {
        var hyperty = _this.hypertiesList[index];
        if (hyperty.hypertyURL === hypertyURL) {
          userURL = hyperty.user.userURL;
        }
      }
      return userURL;
    }

    /**
    * returns the hyperty Name from a given url. This url could be from a dataObject or hyperty
    * @param    {String}    url      hyperty or dataObject URL
    * @return   {String}    hypertyName     hyperty Name
    */

  }, {
    key: 'getHypertyName',
    value: function getHypertyName(url) {
      var _this = this;

      var isHypertyURL = (0, _utils.divideURL)(url).type === 'hyperty';

      //value to be returned in the end
      var hypertyName = void 0;

      //if is not an hyperty, check if is a dataObject and obtain his reporter
      var hypertyURL = isHypertyURL ? hypertyURL = url : _this.getReporterURLSynchonous(url);

      for (var index in _this.hypertiesList) {
        var hyperty = _this.hypertiesList[index];
        if (hyperty.hypertyURL === hypertyURL) {
          hypertyName = hyperty.objectName;
          break;
        }
      }
      return hypertyName;
    }

    /**
    * function to return the reporterURL associated with the dataobject URL
    * @param    {String}     dataObjectURL    dataObjectURL
    * @return   {String}     reporterURL      reporterURL
    */

  }, {
    key: 'getReporterURL',
    value: function getReporterURL(dataObjectURL) {
      var _this = this;

      var dataObject = _this.dataObjectList[dataObjectURL];

      return new _promise2.default(function (resolve, reject) {
        if (dataObject) {
          resolve(dataObject.reporter);
        } else {
          reject('No reporter was found');
        }
      });
    }

    /**
    * function to return the reporterURL associated with the dataobject URL. no promise returned
    * @param    {String}     dataObjectURL    dataObjectURL
    * @return   {String}     reporterURL      reporterURL
    */

  }, {
    key: 'getReporterURLSynchonous',
    value: function getReporterURLSynchonous(dataObjectURL) {
      var _this = this;

      var dataObject = _this.dataObjectList[dataObjectURL];

      return dataObject ? dataObject.reporter : undefined;
    }

    /**
    * returns the hyperty URL that subscribed the dataObject
    * @param    {String}     url            url format
    * @return   {String}    Hyperty URL subscribed to the URL
    */

  }, {
    key: 'getDataObjectSubscriberHyperty',
    value: function getDataObjectSubscriberHyperty(url) {
      var _this = this;

      return _this.subscribedDataObjectList[url];
    }

    /**
    * register a desired dataObject to subscribe
    * @param    {String}    dataObjectURL      dataObject URL
    */

  }, {
    key: 'registerSubscribedDataObject',
    value: function registerSubscribedDataObject(dataObjectURL, hypertyURL) {
      var _this = this;
      if (_this.subscribedDataObjectList[dataObjectURL] === undefined) {
        _this.subscribedDataObjectList[dataObjectURL] = hypertyURL;
      }
    }

    /**
    * Function to return the list of pre authorised users received in the creation of a data object
    * @param    {String}            dataObjectURL    dataObjectURL
    * @return   {Array<String>}     preAuth         List of pre authorised users
    */

  }, {
    key: 'getPreAuthSubscribers',
    value: function getPreAuthSubscribers(dataObjectURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];
      var preAuth = [];

      if (dataObject) {
        preAuth = dataObject.preAuth;
      }
      return preAuth;
    }

    /**
    * send requests to unregister all hyperties registered in domain registry
    * @return   {Promise}     return a promise if the result of unregistration all hyperties
    */

  }, {
    key: 'unregisterAllHyperties',
    value: function unregisterAllHyperties() {
      var _this = this;

      var unregisterResults = [];

      return new _promise2.default(function (resolve, reject) {

        for (var index in _this.hypertiesList) {
          var hyperty = _this.hypertiesList[index];
          var result = _this.unregisterHypertyInstance(hyperty.user.userURL, hyperty.hypertyURL);
          unregisterResults.push(result);
        }

        _promise2.default.all(unregisterResults).then(function () {

          resolve('successfully unregistered all hyperties');
        }, function (error) {
          reject(error);
        });
      });
    }

    /**
    *  function to unregister an hypertyInstance in the Domain Registry
    *  @param   {String}      user        user url
    *  @param   {String}      hypertyInstance   HypertyInsntance url
    *
    */

  }, {
    key: 'unregisterHypertyInstance',
    value: function unregisterHypertyInstance(user, hypertyInstance) {
      //TODO working but the user
      var _this = this;

      var message = { type: 'delete', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { value: { user: user, url: hypertyInstance } } };

      _this._messageBus.postMessage(message, function (reply) {
        console.log('[Registry] unregister hyperty Reply', reply);
      });
    }

    /**
    *  function to delete an dataObjectInstance in the Domain Registry
    *  @param   {String}    name      DataObjectName
    */

  }, {
    key: 'deleteDataObjectInstance',
    value: function deleteDataObjectInstance(name) {
      var _this = this;

      var message = { type: 'delete', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { value: { name: name } } };

      _this._messageBus.postMessage(message, function (reply) {
        console.log('[Registry] unregister dataObject Reply', reply);
      });
    }

    /**
    * Function to update an Hyperty
    */

  }, {
    key: 'updateHypertyInstance',
    value: function updateHypertyInstance(resource, value) {
      var _this = this;

      var message = { type: 'UPDATE', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { resource: resource, value: value } };

      _this._messageBus.post.postMessage(message, function (reply) {
        console.log('[Registry] Updated hyperty reply', reply);
      });
    }

    /**
    * register a new subscriber in the dataObject registered
    * @param  {String}   dataObjectURL    dataObject URL
    * @param  {String}   subscriberURL    subscriber URL
    */

  }, {
    key: 'registerSubscriber',
    value: function registerSubscriber(dataObjectURL, subscriberURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];

      if (dataObject) {
        dataObject.subscribers.push(subscriberURL);
        _this.dataObjectList[dataObjectURL] = dataObject;
      }
    }

    /**
    * get the subscribers registered within a dataObject
    * @param  {String}          dataObjectURL    dataObject URL
    * @param  {Array<String>}   Substribers List
    */

  }, {
    key: 'getDataObjectSubscribers',
    value: function getDataObjectSubscribers(dataObjectURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];

      if (dataObject) {
        return dataObject.subscribers;
      } else {
        throw 'No dataObject was found';
      }
    }

    /**
    * To register a new Data Object in the runtime which returns the dataObjectURL allocated to the new Data Object.
    * @param  {String}      identifier                  identifier
    * @param  {String}      dataObjectschema            dataObjectschema
    * @param  {String}      dataObjectUrl               dataObjectUrl
    * @param {String}      dataObjectReporter           dataObjectReporter
    * @param  {Array}     resources                     dataObject resources
    * @param  {Array}     authorise                     list of pre authorised authorised IDs
    */

  }, {
    key: 'registerDataObject',
    value: function registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, resources, addressURL, authorise) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var dataScheme = [];
        var filteredDataScheme = dataObjectUrl.split(':');
        dataScheme.push(filteredDataScheme[0]);

        _this.storageManager.get('registry:DataObjectURLs').then(function (urlsList) {

          if (!urlsList) {
            urlsList = {};
          }

          //update the list with the new elements
          urlsList[identifier + dataObjectschema + resources + dataObjectReporter] = addressURL.address;

          var runtime = 'runtime://domain/dataObjectXPTO';
          var status = 'live';
          var p2pRequester = 'dataObject://domain/requester';

          //message to register the new hyperty, within the domain registry
          var messageValue = {
            name: identifier,
            resources: resources,
            dataSchemes: dataScheme,
            schema: dataObjectschema,
            url: dataObjectUrl,
            expires: _this.expiresTime,
            reporter: dataObjectReporter,
            preAuth: authorise,
            subscribers: [],
            runtime: runtime,
            status: status,
            p2pRequester: p2pRequester
          };

          var message = void 0;

          if (addressURL.newAddress) {

            console.log('[Registry] registering new data object URL', dataObjectUrl);

            message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };
          } else {

            console.log('[Registry] registering previously registered data object URL', dataObjectUrl);

            /*messageValue = {name: identifier, resources: resources, dataSchemes: dataScheme, schema: dataObjectschema, url: dataObjectUrl, expires: _this.expiresTime, reporter: dataObjectReporter, preAuth: authorise, subscribers: []};
             message = {type:'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: {value: messageValue, policy: 'policy'}};*/

            message = {
              type: 'update',
              to: 'domain://registry.' + _this.registryDomain + '/',
              from: _this.registryURL,
              body: { resource: dataObjectUrl, value: { status: 'live' } }
            };
          }

          _this.dataObjectList[dataObjectUrl] = messageValue;

          // step to obtain the list of all URL registered to updated with the new one.
          _this.storageManager.set('registry:DataObjectURLs', 0, urlsList).then(function () {

            /*let message = _this.messageFactory.createCreateMessageRequest(
              _this.registryURL,
              'domain://registry.' + _this.registryDomain + '/',
              messageValue,
              'policy'
            );*/

            _this._messageBus.postMessage(message, function (reply) {
              console.log('[Registry] ===> registerDataObject Reply: ', reply);
              if (reply.body.code === 200) {
                resolve('ok');
              } else {
                reject('error on register DataObject');
              }
            });
          });
        });
      });
    }
  }, {
    key: '_getResourcesAndSchemes',
    value: function _getResourcesAndSchemes(descriptor) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var resources = void 0;

        // check if the hyperty resources is a vector or a string
        // TODO delete later when catalogue is fixed
        if (typeof descriptor.hypertyType === 'string') {
          resources = [];
          resources.push(descriptor.hypertyType);
        } else {
          resources = descriptor.hypertyType;
        }

        var descriptorDataSchema = descriptor.dataObjects;
        var dataSchemasArray = [];

        //this will create a array with a Promise in each position
        for (var index in descriptorDataSchema) {
          dataSchemasArray.push(_this.runtimeCatalogue.getDataSchemaDescriptor(descriptorDataSchema[index]));
        }

        // as soon as the previous array is completed, this will wait for the resolve of all promises in the array
        _promise2.default.all(dataSchemasArray).then(function (dataSchemas) {

          var filteredDataSchemas = [];
          for (var _index in dataSchemas) {
            var dataSchema = dataSchemas[_index];
            filteredDataSchemas.push(dataSchema.sourcePackage.sourceCode.properties.scheme.constant);
          }

          console.log('[Registry] Hyperty Schemas', filteredDataSchemas);
          console.log('[Registry] Hyperty resources', resources);

          resolve({ resources: resources, dataSchema: filteredDataSchemas });
        });
      });
    }

    /**
    * method that returns previously registered Hyperty or DataObjects URLS, for given characteristics
    * @param  {JSON}        info           object or hyperty charateristics info
    * @return {addressURL}  addressURL     return the URL if there is any previousy registered URL, return undefined otherwise
    */

  }, {
    key: 'checkRegisteredURLs',
    value: function checkRegisteredURLs(info) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var objectType = info.reporter ? 'registry:DataObjectURLs' : 'registry:HypertyURLs';

        _this.storageManager.get(objectType).then(function (urlsList) {

          if (!urlsList) {
            urlsList = {};
          }

          if (objectType === 'registry:HypertyURLs') {
            _this._getResourcesAndSchemes(info).then(function (value) {
              if (urlsList[value.resources + value.dataSchema]) {
                console.log('[Registry] reusage of hyperty URL');
                return resolve(urlsList[value.resources + value.dataSchema]);
              } else {
                console.log('[Registry] no hyperty URL was previously registered ');
                return resolve(undefined);
              }
            });
          } else {

            var characteristics = info.name + info.schema + info.resources + info.reporter;

            if (urlsList[characteristics]) {
              console.log('[Registry] reusage of dataObject URL');
              return resolve(urlsList[characteristics]);
            } else {
              console.log('[Registry] no dataObject URL was previously registered');
              return resolve(undefined);
            }
          }
        });
      });
    }
  }, {
    key: 'checkHypertyP2PHandler',
    value: function checkHypertyP2PHandler(hypertyURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var hyperty = void 0;

        for (var i in _this.remoteHypertyList) {
          hyperty = _this.remoteHypertyList[i];

          console.log('[Registry - checkHypertyP2PHandler] - for each Hyperty: ', hyperty);

          if (hyperty.hypertyURL === hypertyURL) {

            if (hyperty.hasOwnProperty('p2pHandler')) {
              resolve({
                p2pHandler: hyperty.p2pHandler,
                p2pRequester: hyperty.p2pRequester,
                runtimeURL: hyperty.runtimeURL
              });
            } else {
              reject('[Registry checkHypertyP2PHandler] Hyperty found does not support P2P', hyperty);
            }
          }
        }

        if (!hyperty) {
          console.log('[Registry - checkHypertyP2PHandler] - Hyperty: ', hyperty);

          var message = {
            type: 'read',
            from: _this.registryURL,
            to: 'domain://registry.' + _this._domain + '/',
            body: {
              resource: hypertyURL
            }
          };

          _this._messageBus.postMessage(message, function (reply) {
            console.log('discover hyperty per url reply', reply);
            if ('value' in reply.body) {

              //todo: store retrieved hyperty
              var resolvedHyperty = reply.body.value;

              if (resolvedHyperty.hasOwnProperty('p2pHandler')) {
                resolve({
                  p2pHandler: resolvedHyperty.p2pHandler,
                  p2pRequester: resolvedHyperty.p2pRequester,
                  runtimeURL: resolvedHyperty.runtime
                });
              } else {
                reject('[Registry checkHypertyP2PHandler] Hyperty found does not support P2P', reply.body.value);
              }
            } else {
              reject('Hyperty with P2PHandler not found', reply.body.code);
            }
          });
        }
      });
    }

    /**
    * To register a new Hyperty in the runtime which returns the HypertyURL allocated to the new Hyperty.
    * @param  {Sandbox}             sandbox               sandbox
    * @param  {HypertyCatalogueURL} HypertyCatalogueURL   descriptor
    * @return {HypertyURL}          HypertyURL
    */

  }, {
    key: 'registerHyperty',
    value: function registerHyperty(sandbox, descriptorURL, descriptor, addressURL) {
      var _this = this;

      var hypertyCapabilities = void 0;

      return new _promise2.default(function (resolve, reject) {

        //assuming descriptor come in this format, the service-provider-domain url is retrieved by a split instruction
        //hyperty-catalogue://<service-provider-domain>/<catalogue-object-identifier>
        var domainUrl = (0, _utils.divideURL)(descriptorURL).domain;

        if (domainUrl.includes('catalogue')) {
          domainUrl = domainUrl.replace('catalogue.', '');
        }

        _this.idModule.getIdentityAssertion().then(function (result) {
          var userProfile = result.userProfile;
          var identityURL = userProfile.userURL;

          if (_this._messageBus === undefined) {
            reject('MessageBus not found on registerStub');
          } else {
            //call check if the protostub exist: to be removed
            /*  _this.resolve(domainUrl).then(function(a) {
              console.log('[Registry registerHyperty] stub to domain registry- ', a);*/

            _this.storageManager.get('registry:HypertyURLs').then(function (urlsList) {

              console.log('[Registry registerHyperty] storageManager] - ', urlsList);

              _this._getResourcesAndSchemes(descriptor).then(function (value) {

                hypertyCapabilities = value;

                if (!urlsList) {
                  urlsList = {};
                }

                urlsList[hypertyCapabilities.resources + hypertyCapabilities.dataSchema] = addressURL.address;
                _this.storageManager.set('registry:HypertyURLs', 0, urlsList).then(function () {

                  _this.registryDomain = domainUrl;

                  //check whether the received sanbox e ApplicationSandbox or a normal sandbox
                  if (sandbox.type === 'app') {
                    _this.sandboxesList.appSandbox[addressURL.address[0]] = sandbox;
                  } else if (sandbox.type === 'normal') {
                    _this.sandboxesList.sandbox[addressURL.address[0]] = sandbox;
                  } else {
                    reject('Wrong SandboxType');
                  }

                  var p2pHandler = void 0;
                  var p2pRequester = void 0;

                  if ((0, _keys2.default)(_this.p2pHandlerStub).length !== 0) {
                    p2pHandler = _this.p2pHandlerStub[_this.runtimeURL].url;
                    p2pRequester = _runtimeUtils.runtimeUtils.runtimeDescriptor.p2pRequesterStub;
                  }

                  var runtime = _this.runtimeURL;
                  var status = 'live';

                  var hyperty = new _HypertyInstance2.default(_this.identifier, _this.registryURL, descriptorURL, descriptor, addressURL.address[0], userProfile, 'guid', _this.runtimeURL, 'ctx', p2pHandler, p2pRequester, hypertyCapabilities.dataSchema, hypertyCapabilities.resources);

                  _this.hypertiesList.push(hyperty);

                  //message to register the new hyperty, within the domain registry
                  var messageValue = void 0;
                  var message = void 0;

                  if (addressURL.newAddress) {
                    console.log('[Registry registerHyperty] registering new Hyperty URL', addressURL.address[0]);

                    messageValue = {
                      user: identityURL,
                      descriptor: descriptorURL,
                      url: addressURL.address[0],
                      expires: _this.expiresTime,
                      resources: hypertyCapabilities.resources,
                      dataSchemes: hypertyCapabilities.dataSchema,
                      runtime: runtime,
                      status: status
                    };

                    if (p2pHandler) {
                      messageValue.p2pHandler = p2pHandler;
                      messageValue.p2pRequester = p2pRequester;
                    }

                    console.log('[Registry registerHyperty] registering new Hyperty at domain registry ', messageValue);

                    message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };
                  } else {
                    console.log('[Registry registerHyperty] registering previously registered Hyperty URL', addressURL.address[0]);

                    message = {
                      type: 'update',
                      to: 'domain://registry.' + _this.registryDomain + '/',
                      from: _this.registryURL,
                      body: { resource: addressURL.address[0], value: { status: 'live', user: identityURL } }
                    };

                    if (p2pHandler) {
                      message.body.value.p2pHandler = p2pHandler;
                    }
                  }

                  console.log('[Registry registerHyperty] updating Hyperty registration at domain registry  - ', message);

                  _this._messageBus.postMessage(message, function (reply) {
                    console.log('[Registry registerHyperty] Hyperty registration update response: ', reply);

                    if (reply.body.code === 200) {
                      resolve(addressURL.address[0]);
                    } else {
                      reject('Failed to register an Hyperty');
                    }
                  });

                  //timer to keep the registration alive
                  // the time is defined by a little less than half of the expires time defined
                  var keepAliveTimer = setInterval(function () {

                    /*let message = _this.messageFactory.createCreateMessageRequest(
                      _this.registryURL,
                      'domain://registry.' + _this.registryDomain + '/',
                      messageValue,
                      'policy'
                    );*/

                    var message = {
                      type: 'update',
                      from: _this.registryURL,
                      to: 'domain://registry.' + _this.registryDomain + '/',
                      body: { resource: addressURL.address[0], value: { status: 'live' } } };

                    _this._messageBus.postMessage(message, function (reply) {
                      console.log('[Registry registerHyperty] KeepAlive Reply: ', reply);
                    });
                  }, _this.expiresTime / 1.1 / 2 * 1000);
                }).catch(function (reason) {
                  console.log('[Registry registerHyperty] Error: ', reason);
                  reject(reason);
                });
              });
            });
          }
        }, function (err) {
          reject('[Registry registerHyperty] Failed to obtain an identity', err);
        });
      });
    }

    /**
    * To unregister a previously registered Hyperty
    * @param  {HypertyURL}          HypertyURL url        url
    */

  }, {
    key: 'unregisterHyperty',
    value: function unregisterHyperty(url) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var found = false;
        var index = 0;

        for (index = 0; index < _this.hypertiesList.length; index++) {
          var hyperty = _this.hypertiesList[index];
          if (hyperty !== undefined) {
            if (hyperty.hypertyURL === url) {
              found = true;
              break;
            }
          }
        }

        if (found === false) {
          reject('Hyperty not found');
        } else {
          delete _this.hypertiesList[index];
          resolve('Hyperty successfully deleted');
        }
      });
    }

    /**
    * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).
    * @param  {DomainURL}           DomainURL            url
    * @return {RuntimeURL}           RuntimeURL
    */

  }, {
    key: 'discoverProtostub',
    value: function discoverProtostub(url) {
      if (!url) throw new Error('Parameter url needed');
      var _this = this;

      var dividedURL = (0, _utils.divideURL)(url);
      var domainURL = dividedURL.domain;

      if (_this.protostubsList.hasOwnProperty(domainURL) && _this.protostubsList[domainURL].status === STATUS.LIVE) {
        return _this.protostubsList[domainURL];
      } else {

        _this.protostubsList[domainURL] = {
          status: STATUS.CREATED
        };

        throw new Error('[Registry - discoverProtoStub ] Message Node Protostub Not Found. Creating one');
      }
    }

    /**
    * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).
    * @param  {RuntimeURL}           RuntimeURL            url
    * @return {RuntimeURL}           RuntimeURL
    */

  }, {
    key: 'discoverP2PStub',
    value: function discoverP2PStub(runtimeURL) {
      var _this = this;

      if (runtimeURL) {

        if (_this.p2pRequesterStub.hasOwnProperty(runtimeURL) && _this.p2pRequesterStub[runtimeURL].status === STATUS.LIVE) {
          return _this.p2pRequesterStub[runtimeURL];
        } else {
          _this.p2pRequesterStub[runtimeURL] = {
            status: STATUS.CREATED
          };

          throw new Error('[Registry - discoverP2PStub ] P2P Requester Stub Not Found. Creating one');
        }
      } else {

        if (_this.p2pHandlerStub.hasOwnProperty(_this.runtimeURL) && _this.p2pHandlerStub[_this.runtimeURL].status === STATUS.LIVE) {
          return _this.p2pHandlerStub[_this.runtimeURL];
        } else {
          _this.p2pHandlerStub[_this.runtimeURL] = {
            status: STATUS.CREATED
          };

          throw new Error('[Registry - discoverP2PStub ] P2P Handler Stub Not Found. Creating one');
        }
      }
    }

    /**
     * To register a new Protocol Stub in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.
     * @param  {Sandbox}       Sandbox
     * @param  {stubID}        Domain or hyperty runtime to register the stub
     * @param  {descriptorURL}     Catalogue URL of the Protostub descriptor
     * @param  {descriptor}     Protostub descriptor
     * @return {RuntimeProtoStubURL}
     */

  }, {
    key: 'registerStub',
    value: function registerStub(sandbox, stubID, p2pConfig, descriptorURL, descriptor) {
      var _this = this;

      var _stubDescriptor = descriptor;

      return new _promise2.default(function (resolve, reject) {

        var runtimeProtoStubURL = void 0;

        //check if messageBus is registered in registry or not
        if (_this._messageBus === undefined) {
          reject('MessageBus not found on registerStub');
        }

        console.info('[Registry - registerStub] - stubID ', stubID);

        if (!stubID.indexOf('msg-node.')) {
          stubID = stubID.substring(stubID.indexOf('.') + 1);
        }

        var isP2PHandler = false;
        var P2PRequesterStub = void 0;

        if (p2pConfig) {
          if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {
            isP2PHandler = p2pConfig.isHandlerStub;
            runtimeProtoStubURL = 'runtime://' + (0, _utils.divideURL)(stubID).domain + '/p2phandler/' + (0, _utils.generateGUID)();
            console.info('[Registry - registerStub - isP2PHandler] - ', runtimeProtoStubURL);

            _this.p2pHandlerStub[stubID] = {
              url: runtimeProtoStubURL,
              status: STATUS.CREATED
            };

            _this.p2pHandlerAssociation[_this.runtimeURL] = [];

            _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;
            resolve(_this.p2pHandlerStub[stubID]);
          } else {
            P2PRequesterStub = p2pConfig.p2pRequesterStub;
            runtimeProtoStubURL = 'runtime://' + (0, _utils.divideURL)(p2pConfig.remoteRuntimeURL).domain + '/p2prequester/' + (0, _utils.generateGUID)();
            console.info('[Registry - registerStub - P2PRequesterStub] - ', P2PRequesterStub, ' - ', runtimeProtoStubURL);

            // to be clarified what is this p2pHandlerAssociation

            _this.p2pHandlerAssociation[_this.runtimeURL].push(runtimeProtoStubURL);
            _this.p2pRequesterStub[stubID] = {
              url: runtimeProtoStubURL,
              status: STATUS.CREATED
            };

            _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;
            resolve(_this.p2pRequesterStub[stubID]);
          }
        } else {
          runtimeProtoStubURL = 'runtime://' + stubID + '/protostub/' + (0, _utils.generateGUID)();

          console.info('[Registry - registerStub - Normal Stub] - ', stubID);

          // TODO: Optimize this
          _this.protostubsList[stubID] = {
            url: runtimeProtoStubURL,
            status: STATUS.CREATED
          };

          if (descriptorURL) _this.protostubsList[stubID].descriptorURL = descriptorURL;

          if (_stubDescriptor && _stubDescriptor.interworking) {
            _this.protostubsList[stubID].interworking = _stubDescriptor.interworking;
          }

          _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;

          resolve(_this.protostubsList[stubID]);
        }

        // resolve(runtimeProtoStubURL);

        _this._messageBus.addListener(runtimeProtoStubURL + '/status', function (msg) {
          if (msg.resource === msg.to + '/status') {
            console.log('RuntimeProtostubURL/status message: ', msg.body.value);

            if (runtimeProtoStubURL.includes('protostub')) {

              var filtered = (0, _keys2.default)(_this.protostubsList).filter(function (key) {
                return _this.protostubsList[key].url === runtimeProtoStubURL;
              }).map(function (key) {
                _this.protostubsList[key].status = msg.body.value;
              });
            } else {

              var remoteRuntimeURL = msg.body.resource;

              var p2pConnection = _this.p2pConnectionList[remoteRuntimeURL];

              if (p2pConnection) {
                _this.p2pConnectionList[remoteRuntimeURL].status = msg.body.value;
                _this.p2pConnectionList[remoteRuntimeURL].url = runtimeProtoStubURL;
              } else {

                p2pConnection = {
                  status: msg.body.value,
                  url: runtimeProtoStubURL
                };

                _this.p2pConnectionList[remoteRuntimeURL] = p2pConnection;
              }

              if (runtimeProtoStubURL.includes('p2prequester')) {

                var _filtered = (0, _keys2.default)(protostubList).filter(function (key) {
                  return protostubList[key].url === runtimeProtoStubURL;
                }).map(function (key) {
                  p2pRequesterStub[key].status = msg.body.value;
                });
              }
            }
          }
        });
      });
    }

    /**
    * To unregister a previously registered protocol stub
    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     hypertyRuntimeURL
    */

  }, {
    key: 'unregisterStub',
    value: function unregisterStub(hypertyRuntimeURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        if (_this.protostubsList.hasOwnProperty(hypertyRuntimeURL)) {
          delete _this.protostubsList[hypertyRuntimeURL];
          resolve('ProtostubURL removed');
        } else {
          reject('Error on unregisterStub: Hyperty not found');
        }
      });
    }

    /**
     * To register a new Identity Provider proxy in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.
     * @param {Sandbox}        Sandbox
     * @param  {DomainURL}     DomainURL service provider domain
     * @return {RuntimeIdpProxyURL}
     */

  }, {
    key: 'registerIdpProxy',
    value: function registerIdpProxy(sandbox, domainURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var idpProxyStubURL = void 0;

        //check if messageBus is registered in registry or not
        if (_this._messageBus === undefined) {
          reject('MessageBus not found on registerStub');
        }

        idpProxyStubURL = 'domain-idp://' + domainURL + '/stub/' + (0, _utils.generateGUID)();

        // TODO: Optimize this
        _this.idpProxyList[domainURL] = {
          url: idpProxyStubURL,
          status: STATUS.PROGRESS
        };

        _this.sandboxesList.sandbox[idpProxyStubURL] = sandbox;

        // sandbox.addListener('*', function(msg) {
        //   _this._messageBus.postMessage(msg);
        // });

        resolve(idpProxyStubURL);

        _this._messageBus.addListener(idpProxyStubURL + '/status', function (msg) {
          if (msg.resource === msg.to + '/status') {
            console.log('[Registry] idpProxyStubURL/status message: ', msg.body.value);
          }
        });
      });
    }

    /**
    * To discover idpProxy stubs available in the runtime for a certain domain. If available, it returns the runtime url for the idpProxy stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers
    * @param  {DomainURL}           DomainURL            url
    * @return {RuntimeURL}           RuntimeURL         idpProxyUrl
    */

  }, {
    key: 'discoverIdpProxy',
    value: function discoverIdpProxy(url) {
      if (!url) throw new Error('Parameter url needed');
      var _this = this;

      var dividedURL = (0, _utils.divideURL)(url);
      var domainURL = dividedURL.domain;

      if (_this.idpProxyList.hasOwnProperty(domainURL) && _this.idpProxyList[domainURL].status === STATUS.LIVE) {
        return _this.idpProxyList[domainURL];
      } else {

        _this.idpProxyList[domainURL] = {
          status: STATUS.PROGRESS
        };

        throw new Error('[Registry - discoverIdpProxy ] Idp Proxy Not Found. Creating one');
      }
    }

    /**
    * To register a new Policy Enforcer in the runtime including as input parameters the function to postMessage, the HypertyURL associated with the PEP, which returns the RuntimeURL allocated to the new Policy Enforcer component.
    * @param  {Message.Message} postMessage postMessage
    * @param  {HypertyURL}          HypertyURL            hyperty
    * @return {HypertyRuntimeURL}   HypertyRuntimeURL
    */

  }, {
    key: 'registerPEP',
    value: function registerPEP(postMessage, hyperty) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        //TODO check what parameter in the postMessage the pep is.
        _this.pepList[hyperty] = postMessage;
        resolve('PEP registered with success');
      });
    }

    /**
    * To unregister a previously registered protocol stub
    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     HypertyRuntimeURL
    */

  }, {
    key: 'unregisterPEP',
    value: function unregisterPEP(HypertyRuntimeURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var result = _this.pepList[HypertyRuntimeURL];

        if (result === undefined) {
          reject('Pep Not found.');
        } else {
          resolve('PEP successfully removed.');
        }
      });
    }

    /**
    * To discover sandboxes available in the runtime for a certain domain. Required by the runtime UA to avoid more than one sandbox for the same domain.
    * @param  {DomainURL} DomainURL url
    * @return {RuntimeSandbox}           RuntimeSandbox
    */

  }, {
    key: 'getSandbox',
    value: function getSandbox(url) {
      if (!url) throw new Error('Parameter url needed');
      console.log('[Registry getSandbox] getSandbox: ', url);

      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        var request = void 0;

        //first try to find the url in the appSandbox list
        request = _this.sandboxesList.appSandbox[url];

        //if no appSandbox was found, try to search in the normal sandboxes list
        if (!request) {
          request = _this.sandboxesList.sandbox[url];

          if (!request) {

            var domain = void 0;

            if (url.includes('://')) domain = (0, _utils.divideURL)(url).domain;else {
              domain = url;
            }

            // search in the sandboxes list for a entry containing the domain given
            for (var sandbox in _this.sandboxesList.sandbox) {
              if (sandbox.includes(domain)) {
                request = _this.sandboxesList.sandbox[sandbox];
                break;
              }
            }
          }
        }

        if (!request) {
          reject('no sandbox found for: ' + url);
        } else {
          resolve(request);
        }
      });
    }
  }, {
    key: 'resolveNormalStub',
    value: function resolveNormalStub(url) {
      console.log('resolveNormalStub ' + url);
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //split the url to find the domainURL. deals with the url for example as:
        //"hyperty-runtime://sp1/protostub/123",
        var dividedURL = (0, _utils.divideURL)(url);
        var domainUrl = dividedURL.domain;
        var type = dividedURL.type;
        var islegacy = void 0;

        if (url.includes(_this.runtimeURL)) {
          console.error('[Registry - resolve] URL to be resolved should have listeners ', url);
          reject('[Registry - resolve] URL to be resolved should have listeners ', url);
        }

        // resolve the domain protostub in case of a message to global registry

        if (url.includes('global://registry')) {
          domainUrl = _this._domain;
        } else {
          if (!domainUrl.indexOf('msg-node.') || !domainUrl.indexOf('registry.')) {
            domainUrl = domainUrl.substring(domainUrl.indexOf('.') + 1);
          }
        }

        _this.isLegacy(url).then(function (isLegacy) {

          // if legacy it should resolve for <protocol>.<domain>

          if (isLegacy && type !== 'domain-idp') domainUrl = type + '.' + (0, _utils.getUserIdentityDomain)(url);

          console.log('[Registry.resolve] domainUrl:', domainUrl);

          var registredComponent = void 0;

          if (type === 'domain-idp') {
            registredComponent = _this.idpProxyList.hasOwnProperty(domainUrl) ? _this.idpProxyList[domainUrl] : false;
          } else {
            registredComponent = _this.protostubsList.hasOwnProperty(domainUrl) ? _this.protostubsList[domainUrl] : false;
          }

          if (registredComponent && registredComponent.hasOwnProperty('status') && registredComponent.status === STATUS.DEPLOYED) {
            console.info('TESTING Resolved: ', registredComponent.url);
            resolve(registredComponent.url);
          } else {
            if (type === 'domain-idp') {
              // _this.trigger('runtime:loadIdpProxy', domainUrl);

              _this._loader.loadIdpProxy(domainUrl).then(function (result) {
                registredComponent = _this.idpProxyList[domainUrl];
                console.info('Resolved IDPProxy: ', registredComponent, result);
                _this.idpProxyList[domainUrl].status = STATUS.DEPLOYED;
                resolve(registredComponent.url);
              }).catch(function (reason) {
                console.error('Error resolving IDPProxy: ', reason);
                reject(reason);
              });
            } else {
              // _this.trigger('runtime:loadStub', domainUrl);

              _this._loader.loadStub(domainUrl).then(function (result) {
                registredComponent = _this.protostubsList[domainUrl];
                console.info('Resolved Protostub: ', registredComponent, result);
                _this.protostubsList[domainUrl].status = STATUS.DEPLOYED;
                resolve(registredComponent.url);
              }).catch(function (reason) {
                console.error('Error resolving Protostub: ', reason);
                reject(reason);
              });
            }
          }
        });
        //      resolve();
      }).catch(function (reason) {
        console.error('[Registry.resolve] Error resolving islegacy: ', reason);
        reject(reason);
      });
    }

    /**
    * To verify if source is valid and to resolve target runtime url address if needed (eg protostub runtime url in case the message is to be dispatched to a remote endpoint).
    * @param  {URL.URL}  url       url
    * @return {Promise<URL.URL>}                 Promise <URL.URL>
    */

  }, {
    key: 'resolve',
    value: function resolve(url) {
      console.log('[Registry - Resolve] -  ' + url);
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //split the url to find the domainURL. deals with the url for example as:
        //"hyperty-runtime://sp1/protostub/123",

        // Skip p2p procedure when not supported by the Runtime or for backend services

        if (!_this.p2pHandlerStub[_this.runtimeURL] || (0, _utils.isBackendServiceURL)(url)) {

          _this.resolveNormalStub(url).then(function (returnURL) {
            resolve(returnURL);
          });
        } else {
          _this.checkHypertyP2PHandler(url).then(function (hypertyInfo) {

            var p2pConnection = _this.p2pConnectionList[hypertyInfo.runtimeURL];

            if (!p2pConnection) {
              p2pConnection = {};
            }

            if (p2pConnection.status === STATUS.LIVE) {
              resolve(p2pConnection.url);
            } else {

              if (p2pConnection.status === STATUS.CREATED) {
                _this.resolveNormalStub(url).then(function (returnURL) {
                  resolve(returnURL);
                });
              } else {
                p2pConnection.status = STATUS.CREATED;
                _this.p2pConnectionList[hypertyInfo.runtimeURL] = p2pConnection;

                console.log('[Registry - resolve] loadStub with p2pRequester: ', hypertyInfo);

                var p2pConfig = { remoteRuntimeURL: hypertyInfo.runtimeURL, p2pHandler: hypertyInfo.p2pHandler, p2pRequesterStub: true };

                // TODO stub load
                _this._loader.loadStub(hypertyInfo.p2pRequester, p2pConfig).then(function (protostubInfo) {
                  p2pConnection.status = STATUS.CREATED;
                  _this.p2pConnectionList[hypertyInfo.runtimeURL] = p2pConnection;

                  resolve(protostubInfo.url);
                }).catch(function (error) {
                  reject(error);
                });
              }
            }
          }, function (reason) {
            console.error('[Registry - Resolve] - Reason: ', reason);

            _this.resolveNormalStub(url).then(function (returnURL) {
              resolve(returnURL);
            });
          });
        }
      });
    }

    /**
    * To verify if url is from a legacy domain.
    * @param  {URL.URL}  url      url
    * @return {boolean}
    */

  }, {
    key: 'isLegacy',
    value: function isLegacy(url) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        if (url === _this._domain) return resolve(false);

        console.log('[Registry] [Registry.Registry.isLegacy] ', url);

        // TODO: to be defined in the runtime configuration
        var nonLegacy = ["runtime", "hyperty-runtime", "domain", "global", "hyperty"];

        var urlDivided = (0, _utils.divideURL)(url);

        if (nonLegacy.indexOf(urlDivided.type) !== -1 || urlDivided.domain === _this._domain) return resolve(false);

        var domain = urlDivided.domain;

        console.log('[Registry] [Registry.Registry.isLegacy] domain: ', domain);
        if (_this.idpLegacyProxyList.hasOwnProperty(domain)) {
          var result = _this.idpLegacyProxyList[domain];
          if (result.interworking) return resolve(result.interworking);else return resolve(false);
        }

        _this._loader.descriptors.getIdpProxyDescriptor(domain).then(function (result) {
          console.log('[Registry] [Registry.Registry.isLegacy] Legacy stub descriptor: ', result);
          _this.idpLegacyProxyList[domain] = result;
          if (result.interworking) resolve(result.interworking);else resolve(false);
        }).catch(function (reason) {
          console.warn('problem loading stub for domain:', domain);
          resolve(false);
        });
      });
    }

    /**
    * To verify if URL is locally registered or not.
    * @param  {URL.URL}  url      url
    * @return {boolean}
    */

  }, {
    key: 'isLocal',
    value: function isLocal(url) {

      var runtimeScheme = ['hyperty-runtime', 'runtime'];
      var hypertyScheme = ['hyperty'];
      var urlScheme = url.split('://')[0];

      // Process Runtime Core URLs.
      // Messages originated from protostubs should also not include the runtimeURL in its URL.

      if (runtimeScheme.indexOf(urlScheme) !== -1) {
        return url.includes(this.runtimeURL);
      }

      // Process Hyperty URLs

      if (hypertyScheme.indexOf(urlScheme) !== -1) {
        return this.hypertiesList.hasOwnProperty(url);
      }

      // Process Data Object URLs

      if (url.includes('/subscription')) {
        url = url.substring(0, url.indexOf('/subscription'));
      }

      return this.dataObjectList.hasOwnProperty(url);
    }

    /**
    * To verify if protostub is to interwork with a legacy domain.
    * @param  {URL.URL}  runtimeProtostubURL      The runtime URL of the Protostub
    * @return {boolean}
    */

  }, {
    key: 'isInterworkingProtoStub',
    value: function isInterworkingProtoStub(runtimeProtostubURL) {

      var _this = this;

      if (!runtimeProtostubURL.includes('/protostub/')) return false;

      var filtered = (0, _keys2.default)(_this.protostubsList).filter(function (key) {
        return _this.protostubsList[key].url === runtimeProtostubURL;
      }).map(function (key) {

        if (_this.protostubsList[key].hasOwnProperty('interworking')) return _this.protostubsList[key].interworking;else return false;
      });

      return false;
    }
  }, {
    key: 'loader',
    set: function set(loader) {
      var _this = this;
      _this._loader = loader;
    },
    get: function get() {
      var _this = this;
      return _this._loader;
    }

    /**
    * return the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */

  }, {
    key: 'messageBus',
    get: function get() {
      var _this = this;
      return _this._messageBus;
    }

    /**
    * Set the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */
    ,
    set: function set(messageBus) {
      var _this = this;
      _this._messageBus = messageBus;

      _this._messageBus.addListener(_this.registryURL, function (msg) {
        console.log('[Registry] listener messageBus');

        var isHyperty = (0, _utils.isHypertyURL)(msg.from);
        var isDiscovery = msg.from.substring(msg.from.length - 10, msg.from.length) === '/discovery';

        var hasCriteria = msg.body.hasOwnProperty('criteria');
        var isURLResource = void 0;
        var isUserResource = void 0;
        var isHypertyResource = void 0;

        if (msg.body.hasOwnProperty('resource') && msg.body.resource !== '.') {
          isURLResource = (0, _utils.isURL)(msg.body.resource);
          isUserResource = (0, _utils.isUserURL)(msg.body.resource);
          isHypertyResource = (0, _utils.isHypertyURL)(msg.body.resource);
        }
        var isDelete = msg.type === 'delete';
        var hasName = void 0;
        var hasUser = void 0;

        if (msg.body.hasOwnProperty('value')) {
          hasName = msg.body.value.hasOwnProperty('name');
          hasUser = msg.body.value.hasOwnProperty('user');
        }

        if (isHyperty && isDiscovery) {
          console.log('[Registry] hypertyDiscovery');
          if (isDelete && hasName) {
            console.log('[Registry] deleteDataObject');
          } else if (isDelete && hasUser) {
            console.log('[Registry] deleteHyperty');
          } else if (hasCriteria && isUserResource) {
            console.log('discoverHyperty');
            for (var i in _this.remoteHypertyList) {
              var hyperty = _this.remoteHypertyList[i];
              if ((0, _stringify2.default)(hyperty.resources) === (0, _stringify2.default)(msg.body.criteria.resources) && (0, _stringify2.default)(hyperty.dataSchemes) === (0, _stringify2.default)(msg.body.criteria.dataSchemes) && hyperty.user.userURL === msg.body.resource) {
                var url = hyperty.url;
                var valueJson = {};
                valueJson[url] = hyperty.info;
                var message = {
                  type: 'response',
                  to: msg.from,
                  from: msg.to,
                  body: {
                    value: valueJson
                  }
                };
                return _this._messageBus.postMessage(message);
              }
            }

            _this.discovery.discoverHyperty(msg.body.resource, msg.body.criteria.dataSchemes, msg.body.criteria.resources).then(function (value) {
              var mostRecentHyperty = void 0;
              (0, _keys2.default)(value).forEach(function (a) {
                var hyperty = new _HypertyInstance2.default(undefined, undefined, value[a].descriptor, undefined, a, { userURL: value[a].userID }, 'guid', _this.runtimeURL, 'ctx', value[a].p2pHandler, value[a].p2pRequester, value[a].dataSchemes, value[a].resources, value[a].startingTime, value[a].lastModified);
                hyperty.info = value;
                if (!mostRecentHyperty) {
                  mostRecentHyperty = hyperty;
                } else {
                  var hypertyDate = new Date(hyperty.lastModified);
                  var mostRecentHypertyDate = new Date(mostRecentHyperty.lastModified);

                  if (hypertyDate > mostRecentHypertyDate) {
                    mostRecentHyperty = hyperty;
                    console.log('update date');
                  }
                }
              });

              if (mostRecentHyperty) {
                console.log('push');
                _this.remoteHypertyList.push(mostRecentHyperty);
              }
            });
          } else if (hasCriteria && !isURLResource) {
            console.log('[Registry] discoverDataObject');
          } else if (isHypertyResource) {
            console.log('[Registry] discoverDataObjectPerReporter');
          } else if (isUserResource) {
            console.log('[Registry] discoverHypertyPerUser');
          } else if (isURLResource) {
            console.log('[Registry] discoverDataObjectPerURL');
          } else if (!isURLResource) {
            console.log('[Registry] discoverDataObjectPerName');
          }
        } else {
          // msg sent by identity manager library
          var userUrl = _this._getIdentityAssociated(msg.body.resource, msg.body.criteria);

          var reply = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { resource: userUrl } };
          reply.body.code = userUrl ? 200 : 404;

          _this._messageBus.postMessage(reply);
        }
      });

      // also set up messageBus in the IdentityModule component
      // TODO redefine a better way to add the messageBus in the IdModule
      _this.idModule.messageBus = messageBus;

      // Install AddressAllocation
      var addressAllocation = new _AddressAllocation2.default(_this.registryURL, messageBus, _this);
      _this.addressAllocation = addressAllocation;

      var discovery = new _Discovery2.default(_this.runtimeURL, messageBus);
      _this.discovery = discovery;

      var discoveryServiceFramework = new _DiscoveryServiceFramework2.default('hyperty://localhost/123', _this.runtimeURL, messageBus);
      _this.discoveryServiceFramework = discoveryServiceFramework;

      /*let identityManager = new IdentityManager('hyperty://localhost/833a6e52-515b-498b-a57b-e3daeece48d2', _this.runtimeURL, messageBus);
      _this.identityManager = identityManager;*/
    }
  }]);
  return Registry;
}();

exports.default = Registry;
module.exports = exports['default'];

},{"../allocation/AddressAllocation":417,"../runtime/runtimeUtils":448,"../utils/utils.js":454,"./Discovery":439,"./DiscoveryServiceFramework":440,"./HypertyInstance":441,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/keys":9,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"service-framework/dist/MessageFactory":416}],443:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
/**
*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)
*   Registry Data Model includes all Objects to be handled by the Registry functionality including
*/
var RegistryDataModel = function () {
  function RegistryDataModel(id, url, descriptorURL, p2pRequester, startingTime, lastModified, status, stubs, stubsConfiguration) {
    (0, _classCallCheck3.default)(this, RegistryDataModel);

    var _this = this;

    _this._id = id;
    _this._url = url;
    _this._descriptorURL = descriptorURL;
    _this._startingTime = startingTime;
    _this._lastModified = lastModified;
    _this._status = status;
    _this._stubs = stubs;
    _this._stubsConfiguration = stubsConfiguration;
    _this._p2pRequester = p2pRequester;
  }

  (0, _createClass3.default)(RegistryDataModel, [{
    key: "id",
    get: function get() {
      var _this = this;
      return _this._id;
    }
  }, {
    key: "url",
    get: function get() {
      var _this = this;
      return _this._url;
    }
  }, {
    key: "descriptor",
    get: function get() {
      var _this = this;
      return _this._descriptorURL;
    }
  }, {
    key: "p2pRequester",
    get: function get() {
      var _this = this;
      return _this._p2pRequester;
    }
  }, {
    key: "lastModified",
    get: function get() {
      var _this = this;
      return _this._lastModified;
    }
  }]);
  return RegistryDataModel;
}();

exports.default = RegistryDataModel;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],444:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Descriptors = function () {
  function Descriptors(runtimeURL, catalogue, runtimeConfiguration) {
    (0, _classCallCheck3.default)(this, Descriptors);

    if (!runtimeURL) throw Error('The descriptor need to know the runtime url to be used');
    if (!catalogue) throw Error('The descriptor needs the catalogue instance');
    if (!runtimeConfiguration) throw Error('The descriptor needs the runtime configuration');

    this.runtimeConfiguration = runtimeConfiguration;
    this.runtimeURL = runtimeURL;
    this.catalogue = catalogue;
  }

  (0, _createClass3.default)(Descriptors, [{
    key: 'getHypertyDescriptor',
    value: function getHypertyDescriptor(hypertyURL) {
      return this.catalogue.getHypertyDescriptor(hypertyURL);
    }
  }, {
    key: 'getStubDescriptor',
    value: function getStubDescriptor(stubURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var domain = void 0;
        var protostub = void 0;
        var protoStubURL = void 0;

        var originDividedURL = (0, _utils.divideURL)(_this.runtimeURL);
        var originDomain = originDividedURL.domain;

        if (stubURL.includes('://')) {
          var dividedURL = (0, _utils.divideURL)(stubURL);
          domain = dividedURL.domain;
          var path = dividedURL.identity;
          if (path) protostub = path.substring(path.lastIndexOf('/') + 1);else {
            protostub = 'default';
          }
        } else {
          protostub = 'default';
          domain = stubURL;
        }

        /*    if (!domain) {
              domain = stubURL;
            }
              if (!protostub) {
              protostub = 'default';
            } else {
              protostub = protostub.substring(protostub.lastIndexOf('/') + 1);
            }*/

        protoStubURL = (0, _utils.buildURL)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub', protostub);
        if (domain !== _this.runtimeConfiguration.domain) {
          if (!stubURL.indexOf('https') || !stubURL.indexOf('hyperty-catalogue')) {
            protoStubURL = stubURL;
          } else {

            // TODO: check how to load form different configuration domain
            var resource = (0, _utils.getConfigurationResources)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');
            protoStubURL = resource.prefix + domain + resource.suffix + protostub;
          }
        }

        console.log('Load ProtocolStub for domain, ' + domain + ' : ', protoStubURL);
        return _this.catalogue.getStubDescriptor(protoStubURL).then(function (result) {

          resolve(result);
        }).catch(function (error) {

          console.log('Error: ', error);

          protostub = domain;
          domain = originDomain;

          var resource = (0, _utils.getConfigurationResources)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');
          protoStubURL = resource.prefix + domain + resource.suffix + protostub;

          console.log('Fallback -> Load Protocolstub for domain, ' + domain + ' : ', protostub);
          return _this.catalogue.getStubDescriptor(protoStubURL);
        }).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }, {
    key: 'getIdpProxyDescriptor',
    value: function getIdpProxyDescriptor(idpProxyURL) {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {

        var domain = void 0;
        var idpproxy = void 0;
        var protoStubURL = void 0;

        var originDividedURL = (0, _utils.divideURL)(_this2.runtimeURL);
        var originDomain = originDividedURL.domain;

        if (idpProxyURL.includes('://')) {
          var dividedURL = (0, _utils.divideURL)(idpProxyURL);
          domain = dividedURL.domain;
          var path = dividedURL.identity;
          if (path) idpproxy = path.substring(path.lastIndexOf('/') + 1);else {
            idpproxy = 'default';
          }
        } else {
          idpproxy = 'default';
          domain = idpProxyURL;
        }

        var resource = (0, _utils.getConfigurationResources)(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy');

        idpProxyURL = resource.prefix + domain + resource.suffix + idpproxy;
        console.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);
        return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL).then(function (result) {

          resolve(result);
        }).catch(function () {

          idpproxy = domain;
          domain = originDomain;

          idpProxyURL = (0, _utils.buildURL)(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy', idpproxy);

          console.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);
          return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL);
        }).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }]);
  return Descriptors;
}();

exports.default = Descriptors;
module.exports = exports['default'];

},{"../utils/utils":454,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],445:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _AddressAllocation = require('../allocation/AddressAllocation');

var _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Loader = function () {
  function Loader(runtimeURL, runtimeConfiguration, runtimeDescriptorsInstance) {
    (0, _classCallCheck3.default)(this, Loader);

    if (!runtimeConfiguration) throw Error('[Runtime.Loader] The descriptor need to know the runtime configuration');
    if (!runtimeDescriptorsInstance) throw Error('[Runtime.Loader] The descriptor need to know the runtime Descriptor instance');

    this.runtimeConfiguration = runtimeConfiguration;
    this.descriptors = runtimeDescriptorsInstance;
  }

  /**
   * Set runtime url
   * @param  {string} value runtimeURL
   */


  (0, _createClass3.default)(Loader, [{
    key: 'loadHyperty',


    /**
    * Deploy Hyperty from Catalogue URL
    * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;
    */
    value: function loadHyperty(hypertyDescriptorURL) {
      var _this = this;

      if (!this._readyToUse()) return false;
      if (!hypertyDescriptorURL) throw new Error('[Runtime.Loader] Hyperty descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var _hypertyURL = void 0;
        var _hypertySandbox = void 0;
        var _hypertyDescriptor = void 0;
        var _hypertySourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.Error('[Runtime.Loader] Something failed on the deploy hyperty: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Get Hyperty descriptor
        // TODO: the request Module should be changed,
        // because at this moment it is incompatible with nodejs;
        // Probably we need to pass a factory like we do for sandboxes;
        console.info('[Runtime.Loader] ------------------ Hyperty ------------------------');
        console.info('[Runtime.Loader] Get hyperty descriptor for :', hypertyDescriptorURL);
        return _this.descriptors.getHypertyDescriptor(hypertyDescriptorURL).then(function (hypertyDescriptor) {
          // at this point, we have completed "step 2 and 3" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md
          console.info('[Runtime.Loader] 1: return hyperty descriptor');

          // hyperty contains the full path of the catalogue URL, e.g.
          // catalogue.rethink.eu/.well-known/..........
          _hypertyDescriptor = hypertyDescriptor;

          var sourcePackageURL = hypertyDescriptor.sourcePackageURL;

          if (sourcePackageURL === '/sourcePackage') {
            return hypertyDescriptor.sourcePackage;
          }

          // Get the hyperty source code
          return _this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
        }, handleError).then(function (sourcePackage) {
          if (haveError) return false;

          console.info('[Runtime.Loader] 2: return hyperty source code');

          // at this point, we have completed "step 4 and 5" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md

          _hypertySourcePackage = sourcePackage;

          //
          // steps 6 -- 9 are skipped.
          // TODO: on release of core 0.2;
          // TODO: Promise to check the policy engine

          // mock-up code;
          // temporary code, only
          var policy = true;

          return policy;
        }, handleError).then(function (policyResult) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 3: return policy engine result' + policyResult);

          // we have completed step 6 to 9 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          //
          // Steps 6 -- 9
          // As a result of the sipped steps, we know at this point if we execute
          // inSameSandbox or not.
          //

          // For testing, just assume we execute in same Sandbox.
          var inSameSandbox = true;
          var sandbox = void 0;

          if (inSameSandbox) {

            // this don't need be a Promise;
            sandbox = _this.registry.getAppSandbox();

            // we have completed step 11 here.
          } else {

            var domain = (0, _utils.divideURL)(hypertyDescriptorURL).domain;

            // getSandbox, this will return a promise;
            sandbox = _this.registry.getSandbox(domain);
          }

          // this will return the sandbox or one promise to getSandbox;
          return sandbox;
        }, handleError).then(function (sandbox) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 4: return the sandbox', sandbox);

          // Return the sandbox indepentely if it running in the same sandbox or not
          // we have completed step 14 here.
          return sandbox;
        }, function (reason) {
          if (haveError) return false;
          console.Error('[Runtime.Loader] 4.1: Try to register a new sandbox');

          // check if the sandbox is registed for this hyperty descriptor url;
          // Make Steps xxx --- xxx
          // Instantiate the Sandbox

          var hypertyCapabilities = {};
          if (_hypertyDescriptor && _hypertyDescriptor.hasOwnProperty('capabilities')) {
            hypertyCapabilities = _hypertyDescriptor.stubCapabilities;
          }

          return _this._runtimeFactory.createSandbox(hypertyCapabilities).then(function (sandbox) {

            sandbox.addListener('*', function (msg) {
              _this.messageBus.postMessage(msg);
            });

            return sandbox;
          });
        }, handleError).then(function (sandbox) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 5: return sandbox and register');

          _hypertySandbox = sandbox;

          var numberOfAddresses = 1;
          return _this._addressAllocation.create(_this._registry._domain, numberOfAddresses, _hypertyDescriptor, 'hyperty');
        }, handleError).then(function (addresses) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 6: return the addresses for the hyperty');

          // Register hyperty
          return _this.registry.registerHyperty(_hypertySandbox, hypertyDescriptorURL, _hypertyDescriptor, addresses);
        }, handleError).then(function (hypertyURL) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 7: Hyperty url, after register hyperty', hypertyURL);

          // we have completed step 16 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          _hypertyURL = hypertyURL;

          // Extend original hyperty configuration;
          var configuration = {};
          if (!(0, _utils.emptyObject)(_hypertyDescriptor.configuration)) {
            try {
              configuration = (0, _assign2.default)({}, JSON.parse(_hypertyDescriptor.configuration));
            } catch (e) {
              configuration = _hypertyDescriptor.configuration;
            }
          }
          configuration.runtimeURL = _this._runtimeURL;

          // We will deploy the component - step 17 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.

          try {
            return _hypertySandbox.deployComponent(_hypertySourcePackage.sourceCode, _hypertyURL, configuration);
          } catch (e) {
            console.Error('[Runtime.Loader] Error on deploy component:', e);
            reject(e);
          }
        }, handleError).then(function (deployComponentStatus) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 8: Deploy component status for hyperty: ', deployComponentStatus);

          // we have completed step 19 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.

          // Add the message bus listener to the appSandbox or hypertSandbox;
          _this.messageBus.addListener(_hypertyURL, function (msg) {
            _hypertySandbox.postMessage(msg);
          });

          // we have completed step 20 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          var hyperty = {
            runtimeHypertyURL: _hypertyURL,
            status: deployComponentStatus
          };

          resolve(hyperty);

          // we have completed step 21 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          console.info('[Runtime.Loader] ------------------ END ------------------------');
        }, handleError).catch(errorReason);
      });
    }

    /**
    * Deploy Stub from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    * @param  {Object}      p2pConfig       configuration of p2p
    */

  }, {
    key: 'loadStub',
    value: function loadStub(protostubURL, p2pConfig) {
      var _this2 = this;

      if (!this._readyToUse()) return false;
      if (!protostubURL) throw new Error('[Runtime.Loader.loadStub]ProtoStub descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        // to analyse if domain for p2pHandlers should be something else and not the default domain itself

        var domain = (0, _utils.divideURL)(protostubURL).domain;

        if (!domain) {
          domain = protostubURL;
        }

        var _stubSandbox = void 0;
        var _stubDescriptor = void 0;
        var _runtimeProtoStubURL = void 0;
        var _stubSourcePackage = void 0;
        var haveError = false;
        var stubId = void 0;

        var errorReason = function errorReason(reason) {
          console.Error('[Runtime.Loader.loadStub]Something failed on the deploy of protocolstub: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Discover Protocol Stub
        var discoverStub = void 0;
        var isP2PHandler = false;
        var isP2PRequester = false;

        console.info('[Runtime.Loader.loadStub] starting loading ', protostubURL, ' p2pconfig ', p2pConfig);
        console.info('[Runtime.Loader.loadStub]Discover or Create a new ProtoStub for domain: ', domain);

        // step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
        try {
          if (p2pConfig) {

            if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {
              // step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
              isP2PHandler = true;
              stubId = _this2.runtimeURL;
              discoverStub = _this2.registry.discoverP2PStub();
            } else {
              isP2PRequester = true;
              var p2pHandlerRuntimeURL = p2pConfig.remoteRuntimeURL;
              stubId = p2pHandlerRuntimeURL;

              // step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

              // step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
              discoverStub = _this2.registry.discoverP2PStub(p2pHandlerRuntimeURL);
            }
          } else {
            // step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            stubId = domain;
            discoverStub = _this2.registry.discoverProtostub(domain);
          }

          // Is registed?
          console.info('[Runtime.Loader.loadStub]1. Proto Stub Discovered for ', protostubURL, ': ', discoverStub);

          // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          resolve(discoverStub);
          console.info(' [Runtime.Loader]------------------- END ---------------------------\n');
        } catch (reason) {

          // is not registed?
          console.info('[Runtime.Loader.loadStub]1. Proto Stub not found ' + reason);

          // step 8 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          _this2.descriptors.getStubDescriptor(protostubURL).then(function (stubDescriptor) {

            if (haveError) return false;
            console.info('[Runtime.Loader.loadStub]2. return the ProtoStub descriptor');

            // step 9 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            _stubDescriptor = stubDescriptor;

            var sourcePackageURL = stubDescriptor.sourcePackageURL;

            if (sourcePackageURL === '/sourcePackage') {
              return stubDescriptor.sourcePackage;
            }

            // step 10 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
          }, handleError).catch(errorReason).then(function (stubSourcePackage) {
            if (haveError) return false;

            // step 11 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub]3. return the ProtoStub Source Code');
            _stubSourcePackage = stubSourcePackage;

            // this will return the sandbox or one promise to getSandbox;
            // step 12 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.registry.getSandbox(domain);
          }).then(function (stubSandbox) {
            if (haveError) return false;

            // step 15 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub]4. if the sandbox is registered then return the sandbox ', stubSandbox);

            _stubSandbox = stubSandbox;
            return stubSandbox;
          }).catch(function (reason) {
            if (haveError) return false;

            // step 13 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub]5. Sandbox was not found, creating a new one ', reason);

            // check if the sandbox is registed for this stub descriptor url;

            // According to debug, it seems RuntimeCatalogue does not support yet constraints. It appears empty!!!!

            var stubCapabilities = {};
            if (_stubDescriptor && _stubDescriptor.hasOwnProperty('constraints')) {
              stubCapabilities = _stubDescriptor.stubCapabilities;
            }

            // step 14 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2._runtimeFactory.createSandbox(stubCapabilities).then(function (sandbox) {

              sandbox.addListener('*', function (msg) {
                _this2.messageBus.postMessage(msg);
              });

              return sandbox;
            });
          }).then(function (sandbox) {
            if (haveError) return false;

            // step 16 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub]6. return the sandbox instance and register', sandbox, 'to domain ', domain);

            _stubSandbox = sandbox;

            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.registry.registerStub(_stubSandbox, stubId, p2pConfig, protostubURL, _stubDescriptor);
          }, handleError).then(function (runtimeProtoStub) {
            if (haveError) return false;

            // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub] 7. return the runtime protostub url: ', runtimeProtoStub);

            _runtimeProtoStubURL = runtimeProtoStub.url;

            // Extend original hyperty configuration;
            var configuration = {};
            if (!(0, _utils.emptyObject)(_stubDescriptor.configuration)) {
              try {
                configuration = (0, _assign2.default)({}, JSON.parse(_stubDescriptor.configuration));
              } catch (e) {
                configuration = _stubDescriptor.configuration;
              }
            }

            if (p2pConfig) {
              try {
                configuration = (0, _assign2.default)(configuration, JSON.parse(p2pConfig));
              } catch (e) {
                configuration = (0, _assign2.default)(configuration, p2pConfig);
              }
            }

            // required for protostub session

            configuration.runtimeURL = _this2._runtimeURL;

            // step 24 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            try {
              return _stubSandbox.deployComponent(_stubSourcePackage.sourceCode, _runtimeProtoStubURL, configuration);
            } catch (e) {
              console.Error('[Runtime.Loader.loadStub] Error on deploy component:', e);
              reject(e);
            }
          }, handleError).then(function (deployComponentStatus) {
            if (haveError) return false;

            // step 26 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub] 8: return deploy component for sandbox status: ', deployComponentStatus);

            // step 27 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            // Add the message bus listener
            _this2.messageBus.addListener(_runtimeProtoStubURL, function (msg) {
              _stubSandbox.postMessage(msg);
            });

            // step 28 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            var stub = void 0;
            if (p2pConfig) {
              console.log('[Runtime.Loader.loadStub] p2pConfig: ', p2pConfig);

              if (p2pConfig.hasOwnProperty('isHandlerStub')) stub = _this2.registry.p2pHandlerStub[_this2._runtimeURL];
              if (p2pConfig.hasOwnProperty('p2pRequesterStub')) stub = _this2.registry.p2pRequesterStub[p2pConfig.remoteRuntimeURL];
            } else {
              stub = _this2.registry.protostubsList[domain];
            }

            console.log('[Runtime.Loader.loadStub] Stub: ', stub);
            resolve(stub.url);
            console.info('[Runtime.Loader.loadStub]------------------- END ---------------------------\n');
          }, handleError).catch(errorReason);
        };
      });
    }

    /**
    * Deploy idpProxy from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadIdpProxy',
    value: function loadIdpProxy(idpProxyURL) {
      var _this3 = this;

      if (!this._readyToUse()) return false;
      if (!idpProxyURL) throw new Error('[Runtime.Loader] IdpProxy descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var domain = (0, _utils.divideURL)(idpProxyURL).domain;

        if (!domain) {
          domain = idpProxyURL;
        }

        var _proxySandbox = void 0;
        var _proxyDescriptor = void 0;
        var _runtimeIdpProxyURL = void 0;
        var _proxySourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.Error('[Runtime.Loader] Something failed on the deploy of IdpProxy: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Discover IDPProxy
        console.info('[Runtime.Loader] ------------------- IDP Proxy Deploy ---------------------------\n');
        console.info('[Runtime.Loader] Discover or Create a new IdpProxy for domain/URL: ', domain);

        try {
          var runtimeIdpProxyURL = _this3.registry.discoverIdpProxy(domain);
          // Is registed?
          console.info('[Runtime.Loader] 1. IDPProxy Discovered: ', runtimeIdpProxyURL);

          // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          var idpProxy = _this3.registry.idpProxyList[domain];
          console.log('Deployed: ', idpProxy);

          resolve(idpProxy);
          console.info('[Runtime.Loader] ------------------- END ---------------------------\n');
        } catch (reason) {

          // is not registed?
          console.info('[Runtime.Loader] 1. IdpProxy not found:', reason);

          // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          _this3.descriptors.getIdpProxyDescriptor(idpProxyURL).then(function (proxyDescriptor) {

            console.info('[Runtime.Loader] 2. Return the IDPProxy descriptor');

            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            _proxyDescriptor = proxyDescriptor;

            var sourcePackageURL = proxyDescriptor.sourcePackageURL;

            if (sourcePackageURL === '/sourcePackage') {
              return proxyDescriptor.sourcePackage;
            }

            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this3.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
          }, handleError).then(function (sourcePackage) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 3. return the IDPProxy source package');

            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _proxySourcePackage = sourcePackage;

            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;
            var policy = true;
            return policy;
          }, handleError).then(function (policy) {
            if (haveError) return false;

            // this will return the sandbox or one promise to getSandbox;
            return _this3.registry.getSandbox(domain);
          }).then(function (proxySandbox) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 4. if the sandbox is registered then return the sandbox', proxySandbox);

            _proxySandbox = proxySandbox;
            return proxySandbox;
          }).catch(function (reason) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 5. Sandbox was not found, creating a new one', reason);

            var proxyCapabilities = {};
            if (_proxyDescriptor && _proxyDescriptor.hasOwnProperty('capabilities')) {
              _proxyDescriptor = _proxyDescriptor.stubCapabilities;
            }

            return _this3._runtimeFactory.createSandbox(proxyCapabilities).then(function (sandbox) {

              sandbox.addListener('*', function (msg) {
                _this3.messageBus.postMessage(msg);
              });
              return sandbox;
            });
          }).then(function (sandbox) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 6. return the sandbox instance and register', sandbox, 'to domain ', domain);

            _proxySandbox = sandbox;

            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this3.registry.registerIdpProxy(sandbox, domain);
          }, handleError).then(function (runtimeIdpProxyURL) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 7. Return the runtime Idp Proxy URL: ', runtimeIdpProxyURL);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _runtimeIdpProxyURL = runtimeIdpProxyURL;

            // Extend original hyperty configuration;
            var configuration = {};
            if (!(0, _utils.emptyObject)(_proxyDescriptor.configuration)) {
              try {
                configuration = (0, _assign2.default)({}, JSON.parse(_proxyDescriptor.configuration));
              } catch (e) {
                configuration = _proxyDescriptor.configuration;
              }
            }
            configuration.runtimeURL = _this3._runtimeURL;

            // Deploy Component step xxx
            try {
              return _proxySandbox.deployComponent(_proxySourcePackage.sourceCode, runtimeIdpProxyURL, configuration);
            } catch (e) {
              console.Error('[Runtime.Loader] Error on deploy component:', e);
              reject(e);
            }
          }, handleError).then(function (deployComponentStatus) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 8: return deploy component for sandbox status: ', deployComponentStatus);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Add the message bus listener
            _this3.messageBus.addListener(_runtimeIdpProxyURL, function (msg) {
              _proxySandbox.postMessage(msg);
            });

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Load Stub function resolved with success;
            // let idpProxy = {
            //   runtimeIdpProxyURL: _runtimeIdpProxyURL,
            //   status: deployComponentStatus
            // };

            _this3.registry.idpProxyList[domain].status = 'deployed';
            var idpProxy = _this3.registry.idpProxyList[domain];

            console.log('Deployed: ', idpProxy);

            resolve(idpProxy);
            console.info('[Runtime.Loader] ------------------- END ---------------------------\n');
          }, handleError).catch(errorReason);
        }
      });
    }

    // Check if the loader is ready to load all components

  }, {
    key: '_readyToUse',
    value: function _readyToUse() {

      var status = false;

      if (!this._runtimeURL) throw new Error('[Runtime.Loader] The loader need the runtime url address');
      if (!this._messagesBus) throw new Error('[Runtime.Loader] The loader need the messageBus component');
      if (!this._registry) throw new Error('[Runtime.Loader] The loader need the registry component');
      if (!this._runtimeFactory) throw new Error('[Runtime.Loader] The loader need the runtime factory component');

      status = true;
      return status;
    }
  }, {
    key: 'runtimeURL',
    set: function set(value) {
      this._runtimeURL = value;
    }

    /**
     * Get runtime url
     * @return {string} value runtimeURL
     */
    ,
    get: function get() {
      return this._runtimeURL;
    }

    /**
     * Set Registry component
     * @param  {Registry} value Registry Component
     */

  }, {
    key: 'registry',
    set: function set(value) {
      this._registry = value;

      // Install AddressAllocation
      var addressAllocation = new _AddressAllocation2.default(this._runtimeURL, this._messagesBus, this._registry);
      this._addressAllocation = addressAllocation;
    }

    /**
     * Get Registry component
     * @return {Registry} Registry component
     */
    ,
    get: function get() {
      return this._registry;
    }

    /**
     * Set Message Bus component
     * @param  {MessageBus} value Message bus component
     */

  }, {
    key: 'messageBus',
    set: function set(value) {
      this._messagesBus = value;
    }

    /**
     * Get Message Bus component
     * @return {MessageBus} Message Bus component
     */
    ,
    get: function get() {
      return this._messagesBus;
    }

    /**
     * Set Runtime Factory component
     * @param  {runtimeFactory} value Factory includes the specific implementations for each environment
     */

  }, {
    key: 'runtimeFactory',
    set: function set(value) {
      this._runtimeFactory = value;
    }

    /**
     * Get Runtime Factory component
     * @return {runtimeFactory} Runtime Factory component
     */
    ,
    get: function get() {
      return this._runtimeFactory;
    }
  }]);
  return Loader;
}();

exports.default = Loader;
module.exports = exports['default'];

},{"../allocation/AddressAllocation":417,"../utils/utils":454,"babel-runtime/core-js/object/assign":3,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],446:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

require('babel-polyfill');

var _Registry = require('../registry/Registry');

var _Registry2 = _interopRequireDefault(_Registry);

var _IdentityModule = require('../identity/IdentityModule');

var _IdentityModule2 = _interopRequireDefault(_IdentityModule);

var _PEP = require('../policy/PEP');

var _PEP2 = _interopRequireDefault(_PEP);

var _MessageBus = require('../bus/MessageBus');

var _MessageBus2 = _interopRequireDefault(_MessageBus);

var _utils = require('../utils/utils');

var _Loader = require('./Loader');

var _Loader2 = _interopRequireDefault(_Loader);

var _Descriptors = require('./Descriptors');

var _Descriptors2 = _interopRequireDefault(_Descriptors);

var _runtimeConfiguration = require('./runtimeConfiguration');

var _runtimeUtils = require('./runtimeUtils');

var _SyncherManager = require('../syncher/SyncherManager');

var _SyncherManager2 = _interopRequireDefault(_SyncherManager);

var _RuntimeCoreCtx = require('../policy/context/RuntimeCoreCtx');

var _RuntimeCoreCtx2 = _interopRequireDefault(_RuntimeCoreCtx);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Runtime User Agent Interface will process all the dependecies of the core runtime;
 * @author Vitor Silva [vitor-t-silva@telecom.pt]
 * @version 0.4.0
 *
 * @property {runtimeFactory} runtimeFactory - Specific implementation for all environments;
 * @property {RuntimeCatalogue} runtimeCatalogue - Catalogue of components can be installed;
 * @property {runtimeURL} runtimeURL - This identify the core runtime, should be unique;
 * @property {IdentityModule} identityModule - Identity Module;
 * @property {PEP} policyEngine - Policy Engine Module;
 * @property {Registry} registry - Registry Module;
 * @property {MessageBus} messageBus - Message Bus is used like a router to redirect the messages from one component to other(s)
 * @property {GraphConnector} graphConnector - Graph Connector handling GUID and contacts
 */


// import GraphConnector from '../graphconnector/GraphConnector';

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var RuntimeUA = function () {

  /**
   * Create a new instance of Runtime User Agent
   * @param {descriptor} runtimeDescriptor - pass all the hyperty runtime descriptor
   * @param {runtimeFactory} runtimeFactory - Specific implementation for the environment where the core runtime will run;
   * @param {domain} domainURL - specify the domain base for the runtime;
   */
  function RuntimeUA(runtimeDescriptor, runtimeFactory, domain) {
    (0, _classCallCheck3.default)(this, RuntimeUA);

    if (!runtimeDescriptor) throw new Error('The runtime descriptor is a needed parameter');
    if (!runtimeFactory) throw new Error('The sandbox factory is a needed parameter');
    if (!domain) throw new Error('You need the domain of runtime');

    // Configuration object with information related with servers
    this.runtimeConfiguration = (0, _assign2.default)({ domain: domain }, _runtimeConfiguration.runtimeConfiguration);
    this.runtimeFactory = runtimeFactory;
    this.runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();

    if (runtimeDescriptor.p2pHandlerStub && typeof runtimeDescriptor.p2pHandlerStub === 'string' && runtimeDescriptor.p2pHandlerStub.includes('://')) {
      this.p2p = true;
    } else {
      this.p2p = false;
    }

    _runtimeUtils.runtimeUtils.runtimeDescriptor = runtimeDescriptor;

    if (typeof runtimeFactory.createRuntimeCatalogue === 'function') {
      this.persistenceManager = runtimeFactory.createRuntimeCatalogue();
    } else {
      throw new Error('Check your Runtime Factory because it need the Runtime Catalogue implementation');
    }

    if (typeof runtimeFactory.persistenceManager === 'function') {
      this.persistenceManager = runtimeFactory.persistenceManager();
    } else {
      throw new Error('Check your Runtime Factory because it need the Persistence Manager implementation');
    }

    if (typeof runtimeFactory.storageManager === 'function') {
      this.storageManager = runtimeFactory.storageManager();
    } else {
      throw new Error('Check your Runtime Factory because it need the Storage Manager implementation');
    }
    if (typeof runtimeFactory.runtimeCapabilities === 'function') {
      this.runtimeCapabilities = runtimeFactory.runtimeCapabilities(this.storageManager);
    } else {
      console.info('Check your RuntimeFactory because it need the Runtime Capabilities implementation');
    }
  }

  (0, _createClass3.default)(RuntimeUA, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {

        _this2.domain = _this2.runtimeConfiguration.domain;

        try {
          var getCapabilities = _this2.runtimeCapabilities.getRuntimeCapabilities();
          var getRuntimeURL = _this2.storageManager.get('runtime:URL');

          _promise2.default.all([getRuntimeURL, getCapabilities]).then(function (results) {

            _this2.runtimeURL = results[0] ? results[0].runtimeURL : results[0];
            if (!_this2.runtimeURL) {
              _this2.runtimeURL = 'runtime://' + _this2.domain + '/' + (0, _utils.generateGUID)();
              _this2.storageManager.set('runtime:URL', 1, { runtimeURL: _this2.runtimeURL });
            }

            _this2.capabilities = results[1];

            return _this2._loadComponents();
          }).then(function (status) {

            if (_this2.p2p) {
              console.info('[RuntimeUA - init] load p2pHandler: ', status);
              return _this2._loadP2PHandler();
            } else {
              console.info('[RuntimeUA - init] P2P not supported');
              return 'P2P Not Supported';
            }
          }).then(function (result) {
            console.info('[runtime ua - init] - status: ', result);
            resolve(true);
          }, function (reason) {
            console.error('ERROR: ', reason);
            resolve(true);
          });
        } catch (e) {
          reject(e);
        }
      });
    }
  }, {
    key: '_loadP2PHandler',
    value: function _loadP2PHandler() {
      var _this3 = this;

      return new _promise2.default(function (resolve) {

        var runtimeDescriptor = _runtimeUtils.runtimeUtils.runtimeDescriptor;
        var p2pStubHandler = runtimeDescriptor.p2pHandlerStub;
        console.log('[RuntimeUA loadP2PHandler] P2PStubHandler: ', p2pStubHandler);

        var p2pConfig = {
          isHandlerStub: true,
          runtimeURL: _this3.runtimeURL
        };

        _this3.loadStub(p2pStubHandler, p2pConfig).then(function (result) {

          var runtimeUAURL = _this3.runtimeURL + '/ua';
          var msg = {
            type: 'subscribe',
            from: runtimeUAURL,
            to: 'domain://msg-node.' + _this3.domain + '/sm',
            body: {
              subscribe: [result],
              source: _this3.runtimeURL
            }
          };

          _this3.messageBus.addListener(runtimeUAURL, function (msg) {
            console.log('[runtime ua - listener] - receive msg: ', msg);
          });

          _this3.messageBus.postMessage(msg, function (reply) {
            console.log('[runtime ua - postMessage] - reply: ', reply);
          });

          console.info('[runtime ua - p2p installation] - success: ', result);
          resolve(true);
        }).catch(function (reason) {
          console.info('[runtime ua - p2p installation] - fail: ', reason);
          resolve(false);
        });
      });
    }
  }, {
    key: '_loadComponents',
    value: function _loadComponents() {
      var _this4 = this;

      return new _promise2.default(function (resolve, reject) {

        try {

          // Prepare the on instance to handle with the fallbacks and runtimeCatalogue;
          _this4.descriptorInstance = new _Descriptors2.default(_this4.runtimeURL, _this4.runtimeCatalogue, _this4.runtimeConfiguration);

          // Prepare the loader to load the hyperties, protostubs and idpproxy;
          _this4.loader = new _Loader2.default(_this4.runtimeURL, _this4.runtimeConfiguration, _this4.descriptorInstance);

          // Instantiate the identity Module
          _this4.identityModule = new _IdentityModule2.default(_this4.runtimeURL, _this4.runtimeCapabilities, _this4.storageManager);

          // Use the sandbox factory to create an AppSandbox;
          // In the future can be decided by policyEngine if we need
          // create a AppSandbox or not;
          var appSandbox = _this4.runtimeFactory.createAppSandbox();

          // Instantiate the Registry Module
          _this4.registry = new _Registry2.default(_this4.runtimeURL, appSandbox, _this4.identityModule, _this4.runtimeCatalogue, _this4.runtimeCapabilities, _this4.storageManager);

          // Set the loader to load Hyperties, Stubs and IdpProxies
          _this4.registry.loader = _this4.loader;

          // Instantiate the Message Bus
          _this4.messageBus = new _MessageBus2.default(_this4.registry);

          // Instantiate the Policy Engine
          _this4.policyEngine = new _PEP2.default(new _RuntimeCoreCtx2.default(_this4.identityModule, _this4.registry, _this4.storageManager));

          _this4.messageBus.pipeline.handlers = [

          // Policy message authorise
          function (ctx) {
            _this4.policyEngine.authorise(ctx.msg).then(function (changedMgs) {
              ctx.msg = changedMgs;
              ctx.next();
            }).catch(function (reason) {
              console.error(reason);
              ctx.fail(reason);
            });
          }];

          // Add to App Sandbox the listener;
          appSandbox.addListener('*', function (msg) {
            _this4.messageBus.postMessage(msg);
          });

          // Register messageBus on Registry
          _this4.registry.messageBus = _this4.messageBus;

          // Register registry on IdentityModule
          _this4.identityModule.registry = _this4.registry;

          // Use sandbox factory to use specific methods
          // and set the message bus to the factory
          _this4.runtimeFactory.messageBus = _this4.messageBus;

          // Instanciate the SyncherManager;
          _this4.syncherManager = new _SyncherManager2.default(_this4.runtimeURL, _this4.messageBus, _this4.registry, _this4.runtimeCatalogue, _this4.storageManager);

          // Set into loader the needed components;
          _this4.loader.runtimeURL = _this4.runtimeURL;
          _this4.loader.messageBus = _this4.messageBus;
          _this4.loader.registry = _this4.registry;
          _this4.loader.runtimeCatalogue = _this4.runtimeCatalogue;
          _this4.loader.runtimeFactory = _this4.runtimeFactory;

          // Instantiate the Graph Connector
          // _this.graphConnector = new GraphConnector(_this.runtimeURL, _this.messageBus);
          resolve(true);
        } catch (e) {
          reject(e);
        }
      });
    }

    /**
    * Deploy Hyperty from Catalogue URL
    * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;
    */

  }, {
    key: 'loadHyperty',
    value: function loadHyperty(hypertyDescriptorURL) {
      var _this5 = this;

      if (!hypertyDescriptorURL) throw new Error('Hyperty descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        _this5.loader.loadHyperty(hypertyDescriptorURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
    * Deploy Stub from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadStub',
    value: function loadStub(protostubURL, p2pConfig) {
      var _this6 = this;

      if (!protostubURL) throw new Error('ProtoStub descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        _this6.loader.loadStub(protostubURL, p2pConfig).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
    * Deploy idpProxy from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadIdpProxy',
    value: function loadIdpProxy(idpProxyURL) {
      var _this7 = this;

      if (!idpProxyURL) throw new Error('The IDP Proxy URL is a needed parameter, could be a DOMAIN or a URL');

      return new _promise2.default(function (resolve, reject) {
        _this7.loader.loadIdpProxy(idpProxyURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
     * Used to close all the runtime; Unregister all hyperties;
     * @return {Promise<Boolean>} result of the close method, with true or false to the operation success;
     */

  }, {
    key: 'close',
    value: function close() {
      var _this = this;

      console.info('Unregister all hyperties');
      return new _promise2.default(function (resolve, reject) {

        _this.registry.unregisterAllHyperties().then(function (result) {
          console.info('All the hyperties are unregisted with Success:', result);
          resolve(true);
        }).catch(function (reason) {
          console.error('Failed to unregister the hyperties', reason);
          reject(false);
        });
      });
    }
  }]);
  return RuntimeUA;
}();

//Main dependecies


exports.default = RuntimeUA;
module.exports = exports['default'];

},{"../bus/MessageBus":419,"../identity/IdentityModule":424,"../policy/PEP":428,"../policy/context/RuntimeCoreCtx":438,"../registry/Registry":442,"../syncher/SyncherManager":452,"../utils/utils":454,"./Descriptors":444,"./Loader":445,"./runtimeConfiguration":447,"./runtimeUtils":448,"babel-polyfill":1,"babel-runtime/core-js/object/assign":3,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],447:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var runtimeConfiguration = exports.runtimeConfiguration = {

  runtimeURLS: {
    registry: {
      prefix: 'hyperty-runtime://',
      suffix: 'registry'
    },
    identityModule: {
      prefix: 'hyperty-runtime://',
      suffix: '/idm'
    },
    runtimeUA: {
      prefix: 'hyperty-runtime://',
      suffix: '/ua'
    },
    catalogue: {
      prefix: 'hyperty-runtime://',
      suffix: '/catalogue'
    },
    graphConnector: {
      prefix: 'hyperty-runtime://',
      suffix: '/graph'
    },
    syncManager: {
      prefix: 'hyperty-runtime://',
      suffix: '/sm'
    }
  },
  catalogueURLs: {
    protocolstub: {
      prefix: 'hyperty-catalogue://catalogue.',
      suffix: '/.well-known/protocolstub/',
      fallback: 'hyperty-catalogue://catalogue.%domain%/.well-known/protocolstub/'
    },
    idpProxy: {
      prefix: 'hyperty-catalogue://catalogue.',
      suffix: '/.well-known/idp-proxy/',
      fallback: 'hyperty-catalogue://catalogue.%domain%/.well-known/idp-proxy/'
    }
  },
  msgNodeURL: {
    prefix: 'domain://msg-node.',
    suffix: '',
    hypertyAddressAllocation: '/hyperty-address-allocation',
    objectAddressAllocation: '/object-address-allocation',
    subscriptionManagement: '/sm'
  },
  domainRegistryURL: {
    prefix: 'domain://registry.',
    suffix: ''
  },
  globalRegistryURL: 'global://registry.'
};

},{}],448:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var runtimeUtils = exports.runtimeUtils = {
  runtimeDescriptor: {}
};

},{}],449:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Subscription = require('./Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ObserverObject = function () {
  function ObserverObject(parent, url, childrens) {
    (0, _classCallCheck3.default)(this, ObserverObject);

    var _this = this;

    _this._parent = parent;
    _this._url = url;
    _this._childrens = childrens;

    _this._storageManager = parent._storageManager;

    _this._bus = parent._bus;

    _this._subscriptions = {};
    _this._storageSubscriptions = {};
  }

  (0, _createClass3.default)(ObserverObject, [{
    key: '_newSubscription',
    value: function _newSubscription(hyperty) {
      var _this = this;

      _this._subscriptions[hyperty] = new _Subscription2.default(_this._bus, hyperty, _this._url, _this._childrens, false);
    }
  }, {
    key: 'addSubscription',
    value: function addSubscription(hyperty) {
      var _this = this;

      _this._newSubscription(hyperty);

      _this._storageSubscriptions[hyperty] = { url: _this._url, childrens: _this._childrens };
      _this._storageManager.set('syncherManager:Observer', 1, _this._storageSubscriptions);
    }
  }, {
    key: 'resumeSubscription',
    value: function resumeSubscription(hyperty) {
      var _this = this;

      console.log('[Observer Object] - resume subscriptions: ', hyperty);
      _this._newSubscription(hyperty);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(hyperty) {
      var _this = this;

      var domain = (0, _utils.divideURL)(hyperty).domain;
      var objURLSubscription = _this._url + '/subscription';

      var subscription = _this._subscriptions[hyperty];
      if (subscription) {
        //FLOW-OUT: message sent to remote ReporterObject -> _onRemoteUnSubscribe
        _this._bus.postMessage({
          type: 'unsubscribe', from: _this._parent._url, to: objURLSubscription,
          body: { resource: _this._url }
        });

        //TODO: should I wait for response before unsubscribe on msg-node
        //FLOW-OUT: message sent to msg-node SubscriptionManager component
        _this._bus.postMessage({
          type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/sm',
          body: { resource: _this._url, childrenResources: _this._childrens }
        });

        subscription._releaseListeners();
        delete _this._subscriptions[hyperty];
      }
    }
  }]);
  return ObserverObject;
}();

exports.default = ObserverObject;
module.exports = exports['default'];

},{"../utils/utils":454,"./Subscription":451,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],450:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Subscription = require('./Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReporterObject = function () {
  function ReporterObject(parent, owner, url) {
    (0, _classCallCheck3.default)(this, ReporterObject);

    var _this = this;

    _this._parent = parent;
    _this._owner = owner;
    _this._url = url;

    _this._bus = parent._bus;
    _this._storageManager = parent._storageManager;

    _this._domain = (0, _utils.divideURL)(owner).domain;
    _this._objSubscriptorURL = _this._url + '/subscription';

    _this._subscriptions = {};
    _this._childrens = [];
    _this._childrenListeners = [];

    _this._storageSubscriptions = {};

    _this._forwards = {};

    _this._allocateListeners();
  }

  (0, _createClass3.default)(ReporterObject, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      //add subscription listener...
      _this._subscriptionListener = _this._bus.addListener(_this._objSubscriptorURL, function (msg) {
        console.log(_this._objSubscriptorURL + '-RCV: ', msg);
        switch (msg.type) {
          case 'subscribe':
            _this._onRemoteSubscribe(msg);break;
          case 'unsubscribe':
            _this._onRemoteUnSubscribe(msg);break;
          case 'response':
            _this._onRemoteResponse(msg);break;
        }
      });

      var changeURL = _this._url + '/changes';
      _this._changeListener = _this._bus.addListener(changeURL, function (msg) {
        //TODO: what todo here? Save changes?
        console.log('SyncherManager-' + changeURL + '-RCV: ', msg);
      });

      _this._storageSubscriptions[_this._url] = { url: _this._url, owner: _this._owner, childrens: _this._childrens, subscriptions: [] };
      _this._storageManager.set('syncherManager:Reporter', 1, _this._storageSubscriptions);
    }
  }, {
    key: 'resumeSubscriptions',
    value: function resumeSubscriptions(subscriptions) {
      var _this = this;
      subscriptions.forEach(function (hypertyURL) {
        console.log('[Reporter Object] - resume subscriptions: ', hypertyURL);
        _this._subscriptions[hypertyURL] = new _Subscription2.default(_this._bus, _this._owner, _this._url, _this._childrens, true);
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._subscriptionListener.remove();

      _this._changeListener.remove();

      _this._childrenListeners.forEach(function (cl) {
        cl.remove();
      });

      (0, _keys2.default)(_this._forwards).forEach(function (key) {
        _this.forwardUnSubscribe(key);
      });

      //remove all subscriptions
      (0, _keys2.default)(_this._subscriptions).forEach(function (key) {
        _this._subscriptions[key]._releaseListeners();
      });
    }

    /**
     * Register a listener in the msg-node and in the local MessageBus, so that messages on this address are forwarded to the reporter object
     * @param  {string} address - URL to register the listeners
     * @return {Promise} Return Promise OK or error
     */

  }, {
    key: 'forwardSubscribe',
    value: function forwardSubscribe(addresses) {
      var _this = this;

      //FLOW-OUT: message sent to the msg-node SubscriptionManager component
      var nodeSubscribeMsg = {
        type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
        body: { subscribe: addresses, source: _this._owner }
      };

      return new _promise2.default(function (resolve, reject) {
        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('forward-subscribe-response(reporter): ', reply);
          if (reply.body.code === 200) {
            var newForward = _this._bus.addForward(_this._url, _this._owner);
            _this._forwards[addresses[0]] = newForward;
            resolve();
          } else {
            reject('Error on msg-node subscription: ' + reply.body.desc);
          }
        });
      });
    }

    /**
     * UnRegister a listener in the msg-node and in the local MessageBus, so that messages on this address are removed from forward
     * @param  {string} address - URL to un-register the listeners
     */

  }, {
    key: 'forwardUnSubscribe',
    value: function forwardUnSubscribe(address) {
      var _this = this;

      _this._forwards[address].remove();
      delete _this._forwards[address];

      //FLOW-OUT: message sent to the msg-node SubscriptionManager component
      var nodeUnSubscribeMsg = {
        type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
        body: { subscribe: [address], source: _this._owner }
      };

      _this._bus.postMessage(nodeUnSubscribeMsg);
    }

    /**
     * Register listeners for a list of childrens. Public channels used to transmit messages.
     * @param  {string[]} childrens - channels to register
     * @return {Promise} Return Promise OK or error
     */

  }, {
    key: 'addChildrens',
    value: function addChildrens(childrens) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        if (childrens.length === 0) {
          resolve();
          return;
        }

        var childBaseURL = _this._url + '/children/';
        _this._childrens.push(childrens);

        /*
        _this._childrens.forEach((child) => {
          let childId = childBaseURL + child;
            let selfForward = _this._bus.addForward(childId, owner);
          _this._childrenListeners.push(selfForward);
        });*/

        var subscriptions = [];
        childrens.forEach(function (child) {
          return subscriptions.push(childBaseURL + child);
        });

        //_this._storageSubscriptions[_this._objSubscriptorURL] = {url: _this._url, owner: _this._owner, childrens: _this._childrens};

        //FLOW-OUT: message sent to the msg-node SubscriptionManager component
        var nodeSubscribeMsg = {
          type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
          body: { subscribe: subscriptions, source: _this._owner }
        };

        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('node-subscribe-response(reporter): ', reply);
          if (reply.body.code === 200) {

            //add children listeners on local ...
            subscriptions.forEach(function (childURL) {
              var childListener = _this._bus.addListener(childURL, function (msg) {
                //TODO: what todo here? Save childrens?
                console.log('SyncherManager-' + childURL + '-RCV: ', msg);
              });
              _this._childrenListeners.push(childListener);

              var selfForward = _this._bus.addForward(childURL, _this._owner);
              _this._childrenListeners.push(selfForward);
            });

            resolve();
          } else {
            reject('Error on msg-node subscription: ' + reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;
      var domain = (0, _utils.divideURL)(_this._owner).domain;

      //FLOW-OUT: message sent directly to all subscribers of the reporter
      _this._bus.postMessage({
        type: 'delete', from: _this._objSubscriptorURL, to: _this._url + '/changes'
      });

      //FLOW-OUT: message sent to the msg-node ObjectAllocationManager component
      _this._bus.postMessage({
        type: 'delete', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',
        body: { resource: _this._url, childrenResources: _this._childrens }
      });

      _this._releaseListeners();
      delete _this._parent._reporters[_this._url];
    }
  }, {
    key: '_onRemoteResponse',
    value: function _onRemoteResponse(msg) {
      var _this = this;

      _this._bus.postMessage({
        id: msg.id, type: 'response', from: msg.to, to: _this._url,
        body: { code: msg.body.code, identity: msg.body.identity, source: msg.from }
      });
    }

    //FLOW-IN: message received from Syncher -> subscribe

  }, {
    key: '_onRemoteSubscribe',
    value: function _onRemoteSubscribe(msg) {
      var _this = this;
      var hypertyURL = msg.body.subscriber;

      //validate if subscription already exists?
      if (_this._subscriptions[hypertyURL]) {
        var errorMsg = {
          id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
          body: { code: 500, desc: 'Subscription for (' + _this._url + ' : ' + hypertyURL + ') already exists!' }
        };

        _this._bus.postMessage(errorMsg);
        return;
      }

      //ask to subscribe to Syncher? (depends on the operation mode)
      //TODO: get mode from object!
      var mode = 'sub/pub';

      if (mode === 'sub/pub') {
        //FLOW-OUT: message sent to local hyperty address Syncher -> _onForward
        var forwardMsg = {
          type: 'forward', from: _this._url, to: _this._owner,
          body: { type: msg.type, from: hypertyURL, to: _this._url, identity: msg.body.identity }
        };

        _this._bus.postMessage(forwardMsg, function (reply) {
          console.log('forward-reply: ', reply);
          if (reply.body.code === 200) {
            if (!_this._subscriptions[hypertyURL]) {
              _this._subscriptions[hypertyURL] = new _Subscription2.default(_this._bus, _this._owner, _this._url, _this._childrens, true);
            }

            var subscriptions = (0, _keys2.default)(_this._subscriptions);
            _this._storageSubscriptions[_this._url].subscriptions = subscriptions;
            _this._storageManager.set('syncherManager:Reporter', 1, _this._storageSubscriptions);
          }

          //FLOW-OUT: subscription response sent (forward from internal Hyperty)
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: reply.body
          });
        });
      }
    }

    //FLOW-IN: message received from remote ObserverObject -> removeSubscription

  }, {
    key: '_onRemoteUnSubscribe',
    value: function _onRemoteUnSubscribe(msg) {
      var _this = this;
      var hypertyURL = msg.body.subscriber;

      var subscription = _this._subscriptions[hypertyURL];
      if (subscription) {
        subscription._releaseListeners();
        delete _this._subscriptions[hypertyURL];

        //TODO: send un-subscribe message to Syncher? (depends on the operation mode)
      }
    }
  }]);
  return ReporterObject;
}();

exports.default = ReporterObject;
module.exports = exports['default'];

},{"../utils/utils":454,"./Subscription":451,"babel-runtime/core-js/object/keys":9,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],451:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Subscription = function () {
  function Subscription(bus, owner, url, childrens, isReporter) {
    (0, _classCallCheck3.default)(this, Subscription);

    var _this = this;
    var childBaseURL = url + '/children/';
    var changeURL = url + '/changes';

    //process delete message
    _this._deleteListener = bus.addListener(changeURL, function (msg) {
      if (msg.type === 'delete') {
        console.log('Subscription-DELETE: ', msg);

        //FLOW-OUT: message sent to all subscribers
        var deleteMessageToHyperty = {
          type: 'delete', from: msg.from, to: owner,
          body: { identity: msg.body.identity, resource: url }
        };

        //send delete to hyperty
        bus.postMessage(deleteMessageToHyperty, function (reply) {
          console.log('Subscription-DELETE-REPLY: ', reply);
          if (reply.body.code === 200) {
            _this._releaseListeners();
          }
        });
      }
    });

    //add change publish address or forward
    if (isReporter) {
      _this._changeListener = bus.addPublish(changeURL);
    } else {
      _this._changeListener = bus.addForward(changeURL, owner);
    }

    _this._childrenListeners = [];
    childrens.forEach(function (child) {
      var childId = childBaseURL + child;

      //add children publish address
      var childrenForward = bus.addPublish(childId);
      _this._childrenListeners.push(childrenForward);

      //add self forward if an observer
      if (!isReporter) {
        var selfForward = bus.addForward(childId, owner);
        _this._childrenListeners.push(selfForward);
      }
    });
  }

  (0, _createClass3.default)(Subscription, [{
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._deleteListener.remove();

      _this._changeListener.remove();

      _this._childrenListeners.forEach(function (forward) {
        forward.remove();
      });
    }
  }]);
  return Subscription;
}();

exports.default = Subscription;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],452:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _AddressAllocation = require('../allocation/AddressAllocation');

var _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);

var _ReporterObject = require('./ReporterObject');

var _ReporterObject2 = _interopRequireDefault(_ReporterObject);

var _ObserverObject = require('./ObserverObject');

var _ObserverObject2 = _interopRequireDefault(_ObserverObject);

var _tv = require('../utils/tv4');

var _tv2 = _interopRequireDefault(_tv);

var _MessageFactory = require('service-framework/dist/MessageFactory');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author micaelpedrosa@gmail.com
 * Core Syncronization system.
 */
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var SyncherManager = function () {
  /* private
  _url: URL
  _bus: MiniBus
  _registry: Registry
  _allocator: AddressAllocation
    _reporters: { ObjectURL: ReporterObject }
  _observers: { ObjectURL: ObserverObject }
  */

  function SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator) {
    (0, _classCallCheck3.default)(this, SyncherManager);

    if (!runtimeURL) throw new Error('[Syncher Manager] - needs the runtimeURL parameter');
    if (!bus) throw new Error('[Syncher Manager] - needs the MessageBus instance');
    if (!registry) throw new Error('[Syncher Manager] - needs the Registry instance');
    if (!catalog) throw new Error('[Syncher Manager] - needs the RuntimeCatalogue instance');
    if (!storageManager) throw new Error('[Syncher Manager] - need the storageManager instance');

    var _this = this;

    _this._bus = bus;
    _this._registry = registry;
    _this._catalog = catalog;
    _this._storageManager = storageManager;

    //TODO: these should be saved in persistence engine?
    _this._url = runtimeURL + '/sm';
    _this._objectURL = runtimeURL + '/object-allocation';

    _this._reporters = {};
    _this._observers = {};

    //TODO: this should not be hardcoded!
    _this._domain = (0, _utils.divideURL)(runtimeURL).domain;

    _this._mf = new _MessageFactory.MessageFactory(false, {});

    if (allocator) {
      _this._allocator = allocator;
    } else {
      _this._allocator = new _AddressAllocation2.default(_this._objectURL, bus, _this._registry);
    }

    bus.addListener(_this._url, function (msg) {
      console.log('SyncherManager-RCV: ', msg);
      switch (msg.type) {
        case 'create':
          _this._onCreate(msg);break;
        case 'delete':
          _this._onDelete(msg);break;
        case 'subscribe':
          _this._onLocalSubscribe(msg);break;
        case 'unsubscribe':
          _this._onLocalUnSubscribe(msg);break;
      }
    });

    // _this._resumeReporterListeners();
    // _this._resumeObserverListeners();
  }

  (0, _createClass3.default)(SyncherManager, [{
    key: '_resumeObserverListeners',
    value: function _resumeObserverListeners() {
      var _this2 = this;

      // Get to the storageManager dataObjectObservers
      this._storageManager.get('syncherManager:Observer').then(function (observers) {
        console.info('[storage manager observer] - Resume Subscriptions: ', observers);
        if (!observers) return;

        (0, _keys2.default)(observers).forEach(function (key) {
          console.info(key, observers[key]);
          var objURL = observers[key].url;
          var childrens = observers[key].childrens;

          var observer = _this2._observers[objURL];
          if (!observer) {
            observer = new _ObserverObject2.default(_this2, objURL, childrens);
            _this2._observers[objURL] = observer;
          }

          //register an used hyperty subscription
          observer.resumeSubscription(key);
        });
      }).catch(function (error) {
        console.error('Error: ', error);
      });
    }
  }, {
    key: '_resumeReporterListeners',
    value: function _resumeReporterListeners() {
      var _this3 = this;

      var reporter = void 0;

      // Get to the storageManager dataObjectObservers
      this._storageManager.get('syncherManager:Reporter').then(function (reporters) {
        if (!reporters) return;

        (0, _keys2.default)(reporters).forEach(function (key) {
          console.info('[storage manager reporter] - Resume Subscriptions: ', reporters);
          var objURL = reporters[key].url;
          var owner = reporters[key].owner;
          var subscriptions = reporters[key].subscriptions;

          reporter = new _ReporterObject2.default(_this3, owner, objURL);
          reporter.resumeSubscriptions(subscriptions);
          _this3._reporters[objURL] = reporter;

          // reporter.resumeSubscriptions(subscriptions);
          // reporter.forwardSubscribe([objURL, subscriptionURL]).then(() => {
          //   this._reporters[objURL] = reporter;
          // });
        });
      }).catch(function (error) {
        console.error('Error: ', error);
      });
    }

    //FLOW-IN: message received from Syncher -> create

  }, {
    key: '_onCreate',
    value: function _onCreate(msg) {
      var _this4 = this;

      var _this = this;
      var owner = msg.from;
      var domain = (0, _utils.divideURL)(msg.from).domain;

      // Hack to ignore data object address reusage request
      if (!msg.body.schema) {
        /*      _this._bus.postMessage({
                id: msg.id, type: 'response', from: msg.to, to: msg.from,
                body: { code: 404, description: 'not found' }
              });*/

        return;
      }

      if (msg.body.resource) {
        _this._authorise(msg, msg.body.resource);
        return;
      }

      //get schema from catalogue and parse -> (scheme, children)
      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {

        var properties = descriptor.sourcePackage.sourceCode.properties;
        var scheme = properties.scheme ? properties.scheme.constant : 'resource';
        var childrens = properties.children ? properties.children.constant : [];

        console.log('Scheme: ', scheme);

        // schema validation
        console.log('Running object validation...');
        try {
          var obj = msg.body.value;
          var schema = descriptor.sourcePackage.sourceCode;

          // add support for schema referencing itself
          _tv2.default.addSchema(schema.id, schema);

          // validate
          var result = _tv2.default.validateMultiple(obj, schema);

          // delete error stacks to improve logging
          result.errors.forEach(function (error) {
            delete error.stack;
          });

          // print more details about validation if it fails or schema contains $refs
          if (!result.valid || result.missing.length > 0) {
            console.warn('Object validation ' + (result.valid ? 'succeeded, but schema contained references:' : 'failed:'), (0, _stringify2.default)(result, null, 2));
            console.debug('Object:', (0, _stringify2.default)(obj, null, 2), '\r\nSchema:', (0, _stringify2.default)(schema, null, 2));
          } else {
            console.log('Object validation succeeded');
          }
        } catch (e) {
          console.warn('Error during object validation:', e);
        }

        var objectInfo = {
          name: msg.body.value.name,
          schema: msg.body.schema,
          reporter: msg.body.value.reporter,
          resources: msg.body.value.resources
        };

        // should resuse data object url if it passed
        var reuseDataObject = msg.body.value.resource;

        //request address allocation of a new object from the msg-node
        _this._allocator.create(domain, 1, objectInfo, scheme, reuseDataObject).then(function (allocated) {
          var objURL = allocated.address[0];

          console.log('ALLOCATOR CREATE:', allocated);

          var subscriptionURL = objURL + '/subscription';

          console.log('Subscription URL', subscriptionURL);

          //To register the dataObject in the runtimeRegistry
          console.info('Register Object: ', msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources);
          _this._registry.registerDataObject(msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources, allocated, msg.body.authorise).then(function (resolve) {
            console.log('DataObject successfully registered', resolve);

            //all OK -> create reporter and register listeners
            var reporter = void 0;

            if (!_this4._reporters[objURL]) {
              reporter = new _ReporterObject2.default(_this, owner, objURL);
            } else {
              reporter = _this4._reporters[objURL];
            }

            reporter.forwardSubscribe([objURL, subscriptionURL]).then(function () {
              reporter.addChildrens(childrens).then(function () {
                _this._reporters[objURL] = reporter;

                //FLOW-OUT: message response to Syncher -> create
                _this._bus.postMessage({
                  id: msg.id, type: 'response', from: msg.to, to: owner,
                  body: { code: 200, resource: objURL, childrenResources: childrens }
                });

                //send create to all observers, responses will be deliver to the Hyperty owner?
                //schedule for next cycle needed, because the Reporter should be available.
                setTimeout(function () {
                  //will invite other hyperties
                  _this._authorise(msg, objURL);
                });
              });
            });
          }, function (error) {
            console.error(error);
          });
        });
      }).catch(function (reason) {
        //FLOW-OUT: error message response to Syncher -> create
        var responseMsg = {
          id: msg.id, type: 'response', from: msg.to, to: owner,
          body: { code: 500, desc: reason }
        };

        _this._bus.postMessage(responseMsg);
      });
    }
  }, {
    key: '_authorise',
    value: function _authorise(msg, objURL) {
      var _this = this;
      var objSubscriptorURL = objURL + '/subscription';

      msg.body.authorise.forEach(function (hypertyURL) {
        //FLOW-OUT: send invites to list of remote Syncher -> _onRemoteCreate -> onNotification
        _this._bus.postMessage({
          type: 'create', from: objSubscriptorURL, to: hypertyURL,
          body: { identity: msg.body.identity, source: msg.from, value: msg.body.value, schema: msg.body.scheme }
        });
      });
    }

    //FLOW-IN: message received from DataObjectReporter -> delete

  }, {
    key: '_onDelete',
    value: function _onDelete(msg) {
      var _this = this;

      var objURL = msg.body.resource;

      var object = _this._reporters[objURL];
      if (object) {
        //TODO: is there any policy verification before delete?
        object.delete();

        //TODO: unregister object?
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200 }
        });
      }
    }

    //FLOW-IN: message received from local Syncher -> subscribe

  }, {
    key: '_onLocalSubscribe',
    value: function _onLocalSubscribe(msg) {
      var _this5 = this;

      var _this = this;

      if (!msg.body.resource) {
        /*  _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 404, description: 'not found' }
          });*/
        return;
      }

      var hypertyURL = msg.from;
      var objURL = msg.body.resource;
      var objURLSubscription = objURL + '/subscription';
      var childBaseURL = objURL + '/children/';

      var domain = (0, _utils.divideURL)(objURL).domain;

      //get schema from catalogue and parse -> (children)
      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {
        var properties = descriptor.sourcePackage.sourceCode.properties;
        var childrens = properties.children ? properties.children.constant : [];

        //children addresses
        var subscriptions = [];
        subscriptions.push(objURL + '/changes');
        childrens.forEach(function (child) {
          return subscriptions.push(childBaseURL + child);
        });

        //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker
        var nodeSubscribeMsg = {
          type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',
          body: { identity: msg.body.identity, subscribe: subscriptions, source: hypertyURL }
        };

        //subscribe in msg-node
        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('node-subscribe-response(observer): ', reply);
          if (reply.body.code === 200) {

            //FLOW-OUT: reply with provisional response
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
              body: { code: 100, childrenResources: childrens }
            });

            //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe
            var objSubscribeMsg = {
              type: 'subscribe', from: _this._url, to: objURLSubscription,
              body: { identity: nodeSubscribeMsg.body.identity, subscriber: hypertyURL }
            };

            //subscribe to reporter SM
            _this._bus.postMessage(objSubscribeMsg, function (reply) {
              console.log('reporter-subscribe-response: ', reply);
              if (reply.body.code === 200) {

                var observer = _this._observers[objURL];
                if (!observer) {
                  observer = new _ObserverObject2.default(_this, objURL, childrens);
                  _this._observers[objURL] = observer;
                }

                //register new hyperty subscription
                observer.addSubscription(hypertyURL);

                //forward to hyperty:
                reply.id = msg.id;
                reply.from = _this._url;
                reply.to = hypertyURL;
                _this5._bus.postMessage(reply);
              }
            });
          } else {
            //listener rejected
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
              body: reply.body
            });
          }
        });
      });
    }

    //FLOW-IN: message received from local DataObjectObserver -> unsubscribe

  }, {
    key: '_onLocalUnSubscribe',
    value: function _onLocalUnSubscribe(msg) {
      var _this = this;

      var hypertyURL = msg.from;
      var objURL = msg.body.resource;

      var observer = _this._observers[objURL];
      if (observer) {
        //TODO: is there any policy verification before delete?
        observer.removeSubscription(hypertyURL);

        //TODO: destroy object in the registry?
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200 }
        });

        //TODO: remove Object if no more subscription?
        //delete _this._observers[objURL];
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return SyncherManager;
}();

exports.default = SyncherManager;
module.exports = exports['default'];

},{"../allocation/AddressAllocation":417,"../utils/tv4":453,"../utils/utils":454,"./ObserverObject":449,"./ReporterObject":450,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/keys":9,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"service-framework/dist/MessageFactory":416}],453:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _isFrozen = require('babel-runtime/core-js/object/is-frozen');

var _isFrozen2 = _interopRequireDefault(_isFrozen);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 Author: Geraint Luff and others
 Year: 2013

 This code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.

 If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.
 */
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys
if (!_keys2.default) {
    Object.keys = function () {
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),
            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
            dontEnumsLength = dontEnums.length;

        return function (obj) {
            if ((typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) !== 'object' && typeof obj !== 'function' || obj === null) {
                throw new TypeError('Object.keys called on non-object');
            }

            var result = [];

            for (var prop in obj) {
                if (hasOwnProperty.call(obj, prop)) {
                    result.push(prop);
                }
            }

            if (hasDontEnumBug) {
                for (var i = 0; i < dontEnumsLength; i++) {
                    if (hasOwnProperty.call(obj, dontEnums[i])) {
                        result.push(dontEnums[i]);
                    }
                }
            }
            return result;
        };
    }();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
if (!_create2.default) {
    Object.create = function () {
        function F() {}

        return function (o) {
            if (arguments.length !== 1) {
                throw new Error('Object.create implementation only accepts one parameter.');
            }
            F.prototype = o;
            return new F();
        };
    }();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray
if (!Array.isArray) {
    Array.isArray = function (vArg) {
        return Object.prototype.toString.call(vArg) === "[object Array]";
    };
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement /*, fromIndex */) {
        if (this === null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;

        if (len === 0) {
            return -1;
        }
        var n = 0;
        if (arguments.length > 1) {
            n = Number(arguments[1]);
            if (n !== n) {
                // shortcut for verifying if it's NaN
                n = 0;
            } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n));
            }
        }
        if (n >= len) {
            return -1;
        }
        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
        for (; k < len; k++) {
            if (k in t && t[k] === searchElement) {
                return k;
            }
        }
        return -1;
    };
}

// Grungey Object.isFrozen hack
if (!_isFrozen2.default) {
    Object.isFrozen = function (obj) {
        var key = "tv4_test_frozen_key";
        while (obj.hasOwnProperty(key)) {
            key += Math.random();
        }
        try {
            obj[key] = true;
            delete obj[key];
            return false;
        } catch (e) {
            return true;
        }
    };
}
// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed

var uriTemplateGlobalModifiers = {
    "+": true,
    "#": true,
    ".": true,
    "/": true,
    ";": true,
    "?": true,
    "&": true
};
var uriTemplateSuffices = {
    "*": true
};

function notReallyPercentEncode(string) {
    return encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {
        return "%" + doubleEncoded.substring(3);
    });
}

function uriTemplateSubstitution(spec) {
    var modifier = "";
    if (uriTemplateGlobalModifiers[spec.charAt(0)]) {
        modifier = spec.charAt(0);
        spec = spec.substring(1);
    }
    var separator = "";
    var prefix = "";
    var shouldEscape = true;
    var showVariables = false;
    var trimEmptyString = false;
    if (modifier === '+') {
        shouldEscape = false;
    } else if (modifier === ".") {
        prefix = ".";
        separator = ".";
    } else if (modifier === "/") {
        prefix = "/";
        separator = "/";
    } else if (modifier === '#') {
        prefix = "#";
        shouldEscape = false;
    } else if (modifier === ';') {
        prefix = ";";
        separator = ";";
        showVariables = true;
        trimEmptyString = true;
    } else if (modifier === '?') {
        prefix = "?";
        separator = "&";
        showVariables = true;
    } else if (modifier === '&') {
        prefix = "&";
        separator = "&";
        showVariables = true;
    }

    var varNames = [];
    var varList = spec.split(",");
    var varSpecs = [];
    var varSpecMap = {};
    for (var i = 0; i < varList.length; i++) {
        var varName = varList[i];
        var truncate = null;
        if (varName.indexOf(":") !== -1) {
            var parts = varName.split(":");
            varName = parts[0];
            truncate = parseInt(parts[1], 10);
        }
        var suffices = {};
        while (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {
            suffices[varName.charAt(varName.length - 1)] = true;
            varName = varName.substring(0, varName.length - 1);
        }
        var varSpec = {
            truncate: truncate,
            name: varName,
            suffices: suffices
        };
        varSpecs.push(varSpec);
        varSpecMap[varName] = varSpec;
        varNames.push(varName);
    }
    var subFunction = function subFunction(valueFunction) {
        var result = "";
        var startIndex = 0;
        for (var i = 0; i < varSpecs.length; i++) {
            var varSpec = varSpecs[i];
            var value = valueFunction(varSpec.name);
            if (value === null || value === undefined || Array.isArray(value) && value.length === 0 || (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && (0, _keys2.default)(value).length === 0) {
                startIndex++;
                continue;
            }
            if (i === startIndex) {
                result += prefix;
            } else {
                result += separator || ",";
            }
            if (Array.isArray(value)) {
                if (showVariables) {
                    result += varSpec.name + "=";
                }
                for (var j = 0; j < value.length; j++) {
                    if (j > 0) {
                        result += varSpec.suffices['*'] ? separator || "," : ",";
                        if (varSpec.suffices['*'] && showVariables) {
                            result += varSpec.name + "=";
                        }
                    }
                    result += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, "%21") : notReallyPercentEncode(value[j]);
                }
            } else if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === "object") {
                if (showVariables && !varSpec.suffices['*']) {
                    result += varSpec.name + "=";
                }
                var first = true;
                for (var key in value) {
                    if (!first) {
                        result += varSpec.suffices['*'] ? separator || "," : ",";
                    }
                    first = false;
                    result += shouldEscape ? encodeURIComponent(key).replace(/!/g, "%21") : notReallyPercentEncode(key);
                    result += varSpec.suffices['*'] ? '=' : ",";
                    result += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, "%21") : notReallyPercentEncode(value[key]);
                }
            } else {
                if (showVariables) {
                    result += varSpec.name;
                    if (!trimEmptyString || value !== "") {
                        result += "=";
                    }
                }
                if (varSpec.truncate != null) {
                    value = value.substring(0, varSpec.truncate);
                }
                result += shouldEscape ? encodeURIComponent(value).replace(/!/g, "%21") : notReallyPercentEncode(value);
            }
        }
        return result;
    };
    subFunction.varNames = varNames;
    return {
        prefix: prefix,
        substitution: subFunction
    };
}

function UriTemplate(template) {
    if (!(this instanceof UriTemplate)) {
        return new UriTemplate(template);
    }
    var parts = template.split("{");
    var textParts = [parts.shift()];
    var prefixes = [];
    var substitutions = [];
    var varNames = [];
    while (parts.length > 0) {
        var part = parts.shift();
        var spec = part.split("}")[0];
        var remainder = part.substring(spec.length + 1);
        var funcs = uriTemplateSubstitution(spec);
        substitutions.push(funcs.substitution);
        prefixes.push(funcs.prefix);
        textParts.push(remainder);
        varNames = varNames.concat(funcs.substitution.varNames);
    }
    this.fill = function (valueFunction) {
        var result = textParts[0];
        for (var i = 0; i < substitutions.length; i++) {
            var substitution = substitutions[i];
            result += substitution(valueFunction);
            result += textParts[i + 1];
        }
        return result;
    };
    this.varNames = varNames;
    this.template = template;
}

UriTemplate.prototype = {
    toString: function toString() {
        return this.template;
    },
    fillFromObject: function fillFromObject(obj) {
        return this.fill(function (varName) {
            return obj[varName];
        });
    }
};
var ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {
    this.missing = [];
    this.missingMap = {};
    this.formatValidators = parent ? (0, _create2.default)(parent.formatValidators) : {};
    this.schemas = parent ? (0, _create2.default)(parent.schemas) : {};
    this.collectMultiple = collectMultiple;
    this.errors = [];
    this.handleError = collectMultiple ? this.collectError : this.returnError;
    if (checkRecursive) {
        this.checkRecursive = true;
        this.scanned = [];
        this.scannedFrozen = [];
        this.scannedFrozenSchemas = [];
        this.scannedFrozenValidationErrors = [];
        this.validatedSchemasKey = 'tv4_validation_id';
        this.validationErrorsKey = 'tv4_validation_errors_id';
    }
    if (trackUnknownProperties) {
        this.trackUnknownProperties = true;
        this.knownPropertyPaths = {};
        this.unknownPropertyPaths = {};
    }
    this.errorReporter = errorReporter || defaultErrorReporter('en');
    if (typeof this.errorReporter === 'string') {
        throw new Error('debug');
    }
    this.definedKeywords = {};
    if (parent) {
        for (var key in parent.definedKeywords) {
            this.definedKeywords[key] = parent.definedKeywords[key].slice(0);
        }
    }
};
ValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {
    this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];
    this.definedKeywords[keyword].push(keywordFunction);
};
ValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {
    var error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);
    error.message = this.errorReporter(error, data, schema);
    return error;
};
ValidatorContext.prototype.returnError = function (error) {
    return error;
};
ValidatorContext.prototype.collectError = function (error) {
    if (error) {
        this.errors.push(error);
    }
    return null;
};
ValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {
    for (var i = startIndex; i < this.errors.length; i++) {
        this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);
    }
    return this;
};
ValidatorContext.prototype.banUnknownProperties = function (data, schema) {
    for (var unknownPath in this.unknownPropertyPaths) {
        var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, { path: unknownPath }, unknownPath, "", null, data, schema);
        var result = this.handleError(error);
        if (result) {
            return result;
        }
    }
    return null;
};

ValidatorContext.prototype.addFormat = function (format, validator) {
    if ((typeof format === 'undefined' ? 'undefined' : (0, _typeof3.default)(format)) === 'object') {
        for (var key in format) {
            this.addFormat(key, format[key]);
        }
        return this;
    }
    this.formatValidators[format] = validator;
};
ValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {
    if (schema['$ref'] !== undefined) {
        urlHistory = urlHistory || {};
        if (urlHistory[schema['$ref']]) {
            return this.createError(ErrorCodes.CIRCULAR_REFERENCE, { urls: (0, _keys2.default)(urlHistory).join(', ') }, '', '', null, undefined, schema);
        }
        urlHistory[schema['$ref']] = true;
        schema = this.getSchema(schema['$ref'], urlHistory);
    }
    return schema;
};
ValidatorContext.prototype.getSchema = function (url, urlHistory) {
    var schema;
    if (this.schemas[url] !== undefined) {
        schema = this.schemas[url];
        return this.resolveRefs(schema, urlHistory);
    }
    var baseUrl = url;
    var fragment = "";
    if (url.indexOf('#') !== -1) {
        fragment = url.substring(url.indexOf("#") + 1);
        baseUrl = url.substring(0, url.indexOf("#"));
    }
    if ((0, _typeof3.default)(this.schemas[baseUrl]) === 'object') {
        schema = this.schemas[baseUrl];
        var pointerPath = decodeURIComponent(fragment);
        if (pointerPath === "") {
            return this.resolveRefs(schema, urlHistory);
        } else if (pointerPath.charAt(0) !== "/") {
            return undefined;
        }
        var parts = pointerPath.split("/").slice(1);
        for (var i = 0; i < parts.length; i++) {
            var component = parts[i].replace(/~1/g, "/").replace(/~0/g, "~");
            if (schema[component] === undefined) {
                schema = undefined;
                break;
            }
            schema = schema[component];
        }
        if (schema !== undefined) {
            return this.resolveRefs(schema, urlHistory);
        }
    }
    if (this.missing[baseUrl] === undefined) {
        this.missing.push(baseUrl);
        this.missing[baseUrl] = baseUrl;
        this.missingMap[baseUrl] = baseUrl;
    }
};
ValidatorContext.prototype.searchSchemas = function (schema, url) {
    if (Array.isArray(schema)) {
        for (var i = 0; i < schema.length; i++) {
            this.searchSchemas(schema[i], url);
        }
    } else if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === "object") {
        if (typeof schema.id === "string") {
            if (isTrustedUrl(url, schema.id)) {
                if (this.schemas[schema.id] === undefined) {
                    this.schemas[schema.id] = schema;
                }
            }
        }
        for (var key in schema) {
            if (key !== "enum") {
                if ((0, _typeof3.default)(schema[key]) === "object") {
                    this.searchSchemas(schema[key], url);
                } else if (key === "$ref") {
                    var uri = getDocumentUri(schema[key]);
                    if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {
                        this.missingMap[uri] = uri;
                    }
                }
            }
        }
    }
};
ValidatorContext.prototype.addSchema = function (url, schema) {
    //overload
    if (typeof url !== 'string' || typeof schema === 'undefined') {
        if ((typeof url === 'undefined' ? 'undefined' : (0, _typeof3.default)(url)) === 'object' && typeof url.id === 'string') {
            schema = url;
            url = schema.id;
        } else {
            return;
        }
    }
    if (url === getDocumentUri(url) + "#") {
        // Remove empty fragment
        url = getDocumentUri(url);
    }
    this.schemas[url] = schema;
    delete this.missingMap[url];
    normSchema(schema, url);
    this.searchSchemas(schema, url);
};

ValidatorContext.prototype.getSchemaMap = function () {
    var map = {};
    for (var key in this.schemas) {
        map[key] = this.schemas[key];
    }
    return map;
};

ValidatorContext.prototype.getSchemaUris = function (filterRegExp) {
    var list = [];
    for (var key in this.schemas) {
        if (!filterRegExp || filterRegExp.test(key)) {
            list.push(key);
        }
    }
    return list;
};

ValidatorContext.prototype.getMissingUris = function (filterRegExp) {
    var list = [];
    for (var key in this.missingMap) {
        if (!filterRegExp || filterRegExp.test(key)) {
            list.push(key);
        }
    }
    return list;
};

ValidatorContext.prototype.dropSchemas = function () {
    this.schemas = {};
    this.reset();
};
ValidatorContext.prototype.reset = function () {
    this.missing = [];
    this.missingMap = {};
    this.errors = [];
};

ValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {
    var topLevel;
    schema = this.resolveRefs(schema);
    if (!schema) {
        return null;
    } else if (schema instanceof ValidationError) {
        this.errors.push(schema);
        return schema;
    }

    var startErrorCount = this.errors.length;
    var frozenIndex,
        scannedFrozenSchemaIndex = null,
        scannedSchemasIndex = null;
    if (this.checkRecursive && data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object') {
        topLevel = !this.scanned.length;
        if (data[this.validatedSchemasKey]) {
            var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);
            if (schemaIndex !== -1) {
                this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);
                return null;
            }
        }
        if ((0, _isFrozen2.default)(data)) {
            frozenIndex = this.scannedFrozen.indexOf(data);
            if (frozenIndex !== -1) {
                var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);
                if (frozenSchemaIndex !== -1) {
                    this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);
                    return null;
                }
            }
        }
        this.scanned.push(data);
        if ((0, _isFrozen2.default)(data)) {
            if (frozenIndex === -1) {
                frozenIndex = this.scannedFrozen.length;
                this.scannedFrozen.push(data);
                this.scannedFrozenSchemas.push([]);
            }
            scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;
            this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;
            this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];
        } else {
            if (!data[this.validatedSchemasKey]) {
                try {
                    (0, _defineProperty2.default)(data, this.validatedSchemasKey, {
                        value: [],
                        configurable: true
                    });
                    (0, _defineProperty2.default)(data, this.validationErrorsKey, {
                        value: [],
                        configurable: true
                    });
                } catch (e) {
                    //IE 7/8 workaround
                    data[this.validatedSchemasKey] = [];
                    data[this.validationErrorsKey] = [];
                }
            }
            scannedSchemasIndex = data[this.validatedSchemasKey].length;
            data[this.validatedSchemasKey][scannedSchemasIndex] = schema;
            data[this.validationErrorsKey][scannedSchemasIndex] = [];
        }
    }

    var errorCount = this.errors.length;
    var error = this.validateBasic(data, schema, dataPointerPath) || this.validateNumeric(data, schema, dataPointerPath) || this.validateString(data, schema, dataPointerPath) || this.validateArray(data, schema, dataPointerPath) || this.validateObject(data, schema, dataPointerPath) || this.validateCombinations(data, schema, dataPointerPath) || this.validateHypermedia(data, schema, dataPointerPath) || this.validateFormat(data, schema, dataPointerPath) || this.validateDefinedKeywords(data, schema, dataPointerPath) || null;

    if (topLevel) {
        while (this.scanned.length) {
            var item = this.scanned.pop();
            delete item[this.validatedSchemasKey];
        }
        this.scannedFrozen = [];
        this.scannedFrozenSchemas = [];
    }

    if (error || errorCount !== this.errors.length) {
        while (dataPathParts && dataPathParts.length || schemaPathParts && schemaPathParts.length) {
            var dataPart = dataPathParts && dataPathParts.length ? "" + dataPathParts.pop() : null;
            var schemaPart = schemaPathParts && schemaPathParts.length ? "" + schemaPathParts.pop() : null;
            if (error) {
                error = error.prefixWith(dataPart, schemaPart);
            }
            this.prefixErrors(errorCount, dataPart, schemaPart);
        }
    }

    if (scannedFrozenSchemaIndex !== null) {
        this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);
    } else if (scannedSchemasIndex !== null) {
        data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);
    }

    return this.handleError(error);
};
ValidatorContext.prototype.validateFormat = function (data, schema) {
    if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {
        return null;
    }
    var errorMessage = this.formatValidators[schema.format].call(null, data, schema);
    if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {
        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage }, '', '/format', null, data, schema);
    } else if (errorMessage && (typeof errorMessage === 'undefined' ? 'undefined' : (0, _typeof3.default)(errorMessage)) === 'object') {
        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage.message || "?" }, errorMessage.dataPath || '', errorMessage.schemaPath || "/format", null, data, schema);
    }
    return null;
};
ValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {
    for (var key in this.definedKeywords) {
        if (typeof schema[key] === 'undefined') {
            continue;
        }
        var validationFunctions = this.definedKeywords[key];
        for (var i = 0; i < validationFunctions.length; i++) {
            var func = validationFunctions[i];
            var result = func(data, schema[key], schema, dataPointerPath);
            if (typeof result === 'string' || typeof result === 'number') {
                return this.createError(ErrorCodes.KEYWORD_CUSTOM, {
                    key: key,
                    message: result
                }, '', '', null, data, schema).prefixWith(null, key);
            } else if (result && (typeof result === 'undefined' ? 'undefined' : (0, _typeof3.default)(result)) === 'object') {
                var code = result.code;
                if (typeof code === 'string') {
                    if (!ErrorCodes[code]) {
                        throw new Error('Undefined error code (use defineError): ' + code);
                    }
                    code = ErrorCodes[code];
                } else if (typeof code !== 'number') {
                    code = ErrorCodes.KEYWORD_CUSTOM;
                }
                var messageParams = (0, _typeof3.default)(result.message) === 'object' ? result.message : {
                    key: key,
                    message: result.message || "?"
                };
                var schemaPath = result.schemaPath || "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
                return this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);
            }
        }
    }
    return null;
};

function recursiveCompare(A, B) {
    if (A === B) {
        return true;
    }
    if (A && B && (typeof A === 'undefined' ? 'undefined' : (0, _typeof3.default)(A)) === "object" && (typeof B === 'undefined' ? 'undefined' : (0, _typeof3.default)(B)) === "object") {
        if (Array.isArray(A) !== Array.isArray(B)) {
            return false;
        } else if (Array.isArray(A)) {
            if (A.length !== B.length) {
                return false;
            }
            for (var i = 0; i < A.length; i++) {
                if (!recursiveCompare(A[i], B[i])) {
                    return false;
                }
            }
        } else {
            var key;
            for (key in A) {
                if (B[key] === undefined && A[key] !== undefined) {
                    return false;
                }
            }
            for (key in B) {
                if (A[key] === undefined && B[key] !== undefined) {
                    return false;
                }
            }
            for (key in A) {
                if (!recursiveCompare(A[key], B[key])) {
                    return false;
                }
            }
        }
        return true;
    }
    return false;
}

ValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {
    var error;
    if (error = this.validateType(data, schema, dataPointerPath)) {
        return error.prefixWith(null, "type");
    }
    if (error = this.validateEnum(data, schema, dataPointerPath)) {
        return error.prefixWith(null, "type");
    }
    return null;
};

ValidatorContext.prototype.validateType = function validateType(data, schema) {
    if (schema.type === undefined) {
        return null;
    }
    var dataType = typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data);
    if (data === null) {
        dataType = "null";
    } else if (Array.isArray(data)) {
        dataType = "array";
    }
    var allowedTypes = schema.type;
    if (!Array.isArray(allowedTypes)) {
        allowedTypes = [allowedTypes];
    }

    for (var i = 0; i < allowedTypes.length; i++) {
        var type = allowedTypes[i];
        if (type === dataType || type === "integer" && dataType === "number" && data % 1 === 0) {
            return null;
        }
    }
    return this.createError(ErrorCodes.INVALID_TYPE, {
        type: dataType,
        expected: allowedTypes.join("/")
    }, '', '', null, data, schema);
};

ValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {
    if (schema["enum"] === undefined) {
        return null;
    }
    for (var i = 0; i < schema["enum"].length; i++) {
        var enumVal = schema["enum"][i];
        if (recursiveCompare(data, enumVal)) {
            return null;
        }
    }
    return this.createError(ErrorCodes.ENUM_MISMATCH, { value: typeof JSON !== 'undefined' ? (0, _stringify2.default)(data) : data }, '', '', null, data, schema);
};

ValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {
    return this.validateMultipleOf(data, schema, dataPointerPath) || this.validateMinMax(data, schema, dataPointerPath) || this.validateNaN(data, schema, dataPointerPath) || null;
};

var CLOSE_ENOUGH_LOW = Math.pow(2, -51);
var CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;
ValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {
    var multipleOf = schema.multipleOf || schema.divisibleBy;
    if (multipleOf === undefined) {
        return null;
    }
    if (typeof data === "number") {
        var remainder = data / multipleOf % 1;
        if (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {
            return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {
                value: data,
                multipleOf: multipleOf
            }, '', '', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {
    if (typeof data !== "number") {
        return null;
    }
    if (schema.minimum !== undefined) {
        if (data < schema.minimum) {
            return this.createError(ErrorCodes.NUMBER_MINIMUM, {
                value: data,
                minimum: schema.minimum
            }, '', '/minimum', null, data, schema);
        }
        if (schema.exclusiveMinimum && data === schema.minimum) {
            return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {
                value: data,
                minimum: schema.minimum
            }, '', '/exclusiveMinimum', null, data, schema);
        }
    }
    if (schema.maximum !== undefined) {
        if (data > schema.maximum) {
            return this.createError(ErrorCodes.NUMBER_MAXIMUM, {
                value: data,
                maximum: schema.maximum
            }, '', '/maximum', null, data, schema);
        }
        if (schema.exclusiveMaximum && data === schema.maximum) {
            return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {
                value: data,
                maximum: schema.maximum
            }, '', '/exclusiveMaximum', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {
    if (typeof data !== "number") {
        return null;
    }
    if (isNaN(data) === true || data === Infinity || data === -Infinity) {
        return this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, { value: data }, '', '/type', null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {
    return this.validateStringLength(data, schema, dataPointerPath) || this.validateStringPattern(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {
    if (typeof data !== "string") {
        return null;
    }
    if (schema.minLength !== undefined) {
        if (data.length < schema.minLength) {
            return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {
                length: data.length,
                minimum: schema.minLength
            }, '', '/minLength', null, data, schema);
        }
    }
    if (schema.maxLength !== undefined) {
        if (data.length > schema.maxLength) {
            return this.createError(ErrorCodes.STRING_LENGTH_LONG, {
                length: data.length,
                maximum: schema.maxLength
            }, '', '/maxLength', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {
    if (typeof data !== "string" || typeof schema.pattern !== "string" && !(schema.pattern instanceof RegExp)) {
        return null;
    }
    var regexp;
    if (schema.pattern instanceof RegExp) {
        regexp = schema.pattern;
    } else {
        var body,
            flags = '';
        // Check for regular expression literals
        // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5
        var literal = schema.pattern.match(/^\/(.+)\/([img]*)$/);
        if (literal) {
            body = literal[1];
            flags = literal[2];
        } else {
            body = schema.pattern;
        }
        regexp = new RegExp(body, flags);
    }
    if (!regexp.test(data)) {
        return this.createError(ErrorCodes.STRING_PATTERN, { pattern: schema.pattern }, '', '/pattern', null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {
    if (!Array.isArray(data)) {
        return null;
    }
    return this.validateArrayLength(data, schema, dataPointerPath) || this.validateArrayUniqueItems(data, schema, dataPointerPath) || this.validateArrayItems(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {
    var error;
    if (schema.minItems !== undefined) {
        if (data.length < schema.minItems) {
            error = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {
                length: data.length,
                minimum: schema.minItems
            }, '', '/minItems', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    if (schema.maxItems !== undefined) {
        if (data.length > schema.maxItems) {
            error = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {
                length: data.length,
                maximum: schema.maxItems
            }, '', '/maxItems', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {
    if (schema.uniqueItems) {
        for (var i = 0; i < data.length; i++) {
            for (var j = i + 1; j < data.length; j++) {
                if (recursiveCompare(data[i], data[j])) {
                    var error = this.createError(ErrorCodes.ARRAY_UNIQUE, {
                        match1: i,
                        match2: j
                    }, '', '/uniqueItems', null, data, schema);
                    if (this.handleError(error)) {
                        return error;
                    }
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {
    if (schema.items === undefined) {
        return null;
    }
    var error, i;
    if (Array.isArray(schema.items)) {
        for (i = 0; i < data.length; i++) {
            if (i < schema.items.length) {
                if (error = this.validateAll(data[i], schema.items[i], [i], ["items", i], dataPointerPath + "/" + i)) {
                    return error;
                }
            } else if (schema.additionalItems !== undefined) {
                if (typeof schema.additionalItems === "boolean") {
                    if (!schema.additionalItems) {
                        error = this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, '/' + i, '/additionalItems', null, data, schema);
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else if (error = this.validateAll(data[i], schema.additionalItems, [i], ["additionalItems"], dataPointerPath + "/" + i)) {
                    return error;
                }
            }
        }
    } else {
        for (i = 0; i < data.length; i++) {
            if (error = this.validateAll(data[i], schema.items, [i], ["items"], dataPointerPath + "/" + i)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {
    if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) !== "object" || data === null || Array.isArray(data)) {
        return null;
    }
    return this.validateObjectMinMaxProperties(data, schema, dataPointerPath) || this.validateObjectRequiredProperties(data, schema, dataPointerPath) || this.validateObjectProperties(data, schema, dataPointerPath) || this.validateObjectDependencies(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {
    var keys = (0, _keys2.default)(data);
    var error;
    if (schema.minProperties !== undefined) {
        if (keys.length < schema.minProperties) {
            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {
                propertyCount: keys.length,
                minimum: schema.minProperties
            }, '', '/minProperties', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    if (schema.maxProperties !== undefined) {
        if (keys.length > schema.maxProperties) {
            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {
                propertyCount: keys.length,
                maximum: schema.maxProperties
            }, '', '/maxProperties', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {
    if (schema.required !== undefined) {
        for (var i = 0; i < schema.required.length; i++) {
            var key = schema.required[i];
            if (data[key] === undefined) {
                var error = this.createError(ErrorCodes.OBJECT_REQUIRED, { key: key }, '', '/required/' + i, null, data, schema);
                if (this.handleError(error)) {
                    return error;
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {
    var error;
    for (var key in data) {
        var keyPointerPath = dataPointerPath + "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
        var foundMatch = false;
        if (schema.properties !== undefined && schema.properties[key] !== undefined) {
            foundMatch = true;
            if (error = this.validateAll(data[key], schema.properties[key], [key], ["properties", key], keyPointerPath)) {
                return error;
            }
        }
        if (schema.patternProperties !== undefined) {
            for (var patternKey in schema.patternProperties) {
                var regexp = new RegExp(patternKey);
                if (regexp.test(key)) {
                    foundMatch = true;
                    if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], ["patternProperties", patternKey], keyPointerPath)) {
                        return error;
                    }
                }
            }
        }
        if (!foundMatch) {
            if (schema.additionalProperties !== undefined) {
                if (this.trackUnknownProperties) {
                    this.knownPropertyPaths[keyPointerPath] = true;
                    delete this.unknownPropertyPaths[keyPointerPath];
                }
                if (typeof schema.additionalProperties === "boolean") {
                    if (!schema.additionalProperties) {
                        error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, { key: key }, '', '/additionalProperties', null, data, schema).prefixWith(key, null);
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else {
                    if (error = this.validateAll(data[key], schema.additionalProperties, [key], ["additionalProperties"], keyPointerPath)) {
                        return error;
                    }
                }
            } else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {
                this.unknownPropertyPaths[keyPointerPath] = true;
            }
        } else if (this.trackUnknownProperties) {
            this.knownPropertyPaths[keyPointerPath] = true;
            delete this.unknownPropertyPaths[keyPointerPath];
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {
    var error;
    if (schema.dependencies !== undefined) {
        for (var depKey in schema.dependencies) {
            if (data[depKey] !== undefined) {
                var dep = schema.dependencies[depKey];
                if (typeof dep === "string") {
                    if (data[dep] === undefined) {
                        error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                            key: depKey,
                            missing: dep
                        }, '', '', null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else if (Array.isArray(dep)) {
                    for (var i = 0; i < dep.length; i++) {
                        var requiredKey = dep[i];
                        if (data[requiredKey] === undefined) {
                            error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                                key: depKey,
                                missing: requiredKey
                            }, '', '/' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
                            if (this.handleError(error)) {
                                return error;
                            }
                        }
                    }
                } else {
                    if (error = this.validateAll(data, dep, [], ["dependencies", depKey], dataPointerPath)) {
                        return error;
                    }
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {
    return this.validateAllOf(data, schema, dataPointerPath) || this.validateAnyOf(data, schema, dataPointerPath) || this.validateOneOf(data, schema, dataPointerPath) || this.validateNot(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {
    if (schema.allOf === undefined) {
        return null;
    }
    var error;
    for (var i = 0; i < schema.allOf.length; i++) {
        var subSchema = schema.allOf[i];
        if (error = this.validateAll(data, subSchema, [], ["allOf", i], dataPointerPath)) {
            return error;
        }
    }
    return null;
};

ValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {
    if (schema.anyOf === undefined) {
        return null;
    }
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    var errorAtEnd = true;
    for (var i = 0; i < schema.anyOf.length; i++) {
        if (this.trackUnknownProperties) {
            this.unknownPropertyPaths = {};
            this.knownPropertyPaths = {};
        }
        var subSchema = schema.anyOf[i];

        var errorCount = this.errors.length;
        var error = this.validateAll(data, subSchema, [], ["anyOf", i], dataPointerPath);

        if (error === null && errorCount === this.errors.length) {
            this.errors = this.errors.slice(0, startErrorCount);

            if (this.trackUnknownProperties) {
                for (var knownKey in this.knownPropertyPaths) {
                    oldKnownPropertyPaths[knownKey] = true;
                    delete oldUnknownPropertyPaths[knownKey];
                }
                for (var unknownKey in this.unknownPropertyPaths) {
                    if (!oldKnownPropertyPaths[unknownKey]) {
                        oldUnknownPropertyPaths[unknownKey] = true;
                    }
                }
                // We need to continue looping so we catch all the property definitions, but we don't want to return an error
                errorAtEnd = false;
                continue;
            }

            return null;
        }
        if (error) {
            errors.push(error.prefixWith(null, "" + i).prefixWith(null, "anyOf"));
        }
    }
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (errorAtEnd) {
        errors = errors.concat(this.errors.slice(startErrorCount));
        this.errors = this.errors.slice(0, startErrorCount);
        return this.createError(ErrorCodes.ANY_OF_MISSING, {}, "", "/anyOf", errors, data, schema);
    }
};

ValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {
    if (schema.oneOf === undefined) {
        return null;
    }
    var validIndex = null;
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    for (var i = 0; i < schema.oneOf.length; i++) {
        if (this.trackUnknownProperties) {
            this.unknownPropertyPaths = {};
            this.knownPropertyPaths = {};
        }
        var subSchema = schema.oneOf[i];

        var errorCount = this.errors.length;
        var error = this.validateAll(data, subSchema, [], ["oneOf", i], dataPointerPath);

        if (error === null && errorCount === this.errors.length) {
            if (validIndex === null) {
                validIndex = i;
            } else {
                this.errors = this.errors.slice(0, startErrorCount);
                return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {
                    index1: validIndex,
                    index2: i
                }, "", "/oneOf", null, data, schema);
            }
            if (this.trackUnknownProperties) {
                for (var knownKey in this.knownPropertyPaths) {
                    oldKnownPropertyPaths[knownKey] = true;
                    delete oldUnknownPropertyPaths[knownKey];
                }
                for (var unknownKey in this.unknownPropertyPaths) {
                    if (!oldKnownPropertyPaths[unknownKey]) {
                        oldUnknownPropertyPaths[unknownKey] = true;
                    }
                }
            }
        } else if (error) {
            errors.push(error);
        }
    }
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (validIndex === null) {
        errors = errors.concat(this.errors.slice(startErrorCount));
        this.errors = this.errors.slice(0, startErrorCount);
        return this.createError(ErrorCodes.ONE_OF_MISSING, {}, "", "/oneOf", errors, data, schema);
    } else {
        this.errors = this.errors.slice(0, startErrorCount);
    }
    return null;
};

ValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {
    if (schema.not === undefined) {
        return null;
    }
    var oldErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
        this.unknownPropertyPaths = {};
        this.knownPropertyPaths = {};
    }
    var error = this.validateAll(data, schema.not, null, null, dataPointerPath);
    var notErrors = this.errors.slice(oldErrorCount);
    this.errors = this.errors.slice(0, oldErrorCount);
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (error === null && notErrors.length === 0) {
        return this.createError(ErrorCodes.NOT_PASSED, {}, "", "/not", null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {
    if (!schema.links) {
        return null;
    }
    var error;
    for (var i = 0; i < schema.links.length; i++) {
        var ldo = schema.links[i];
        if (ldo.rel === "describedby") {
            var template = new UriTemplate(ldo.href);
            var allPresent = true;
            for (var j = 0; j < template.varNames.length; j++) {
                if (!(template.varNames[j] in data)) {
                    allPresent = false;
                    break;
                }
            }
            if (allPresent) {
                var schemaUrl = template.fillFromObject(data);
                var subSchema = { "$ref": schemaUrl };
                if (error = this.validateAll(data, subSchema, [], ["links", i], dataPointerPath)) {
                    return error;
                }
            }
        }
    }
};

// parseURI() and resolveUrl() are from https://gist.github.com/1088850
//   -  released as public domain by author ("Yaffle") - see comments on gist

function parseURI(url) {
    var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
    // authority = '//' + user + ':' + pass '@' + hostname + ':' port
    return m ? {
        href: m[0] || '',
        protocol: m[1] || '',
        authority: m[2] || '',
        host: m[3] || '',
        hostname: m[4] || '',
        port: m[5] || '',
        pathname: m[6] || '',
        search: m[7] || '',
        hash: m[8] || ''
    } : null;
}

function resolveUrl(base, href) {
    // RFC 3986

    function removeDotSegments(input) {
        var output = [];
        input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
            if (p === '/..') {
                output.pop();
            } else {
                output.push(p);
            }
        });
        return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
    }

    href = parseURI(href || '');
    base = parseURI(base || '');

    return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
}

function getDocumentUri(uri) {
    return uri.split('#')[0];
}

function normSchema(schema, baseUri) {
    if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === "object") {
        if (baseUri === undefined) {
            baseUri = schema.id;
        } else if (typeof schema.id === "string") {
            baseUri = resolveUrl(baseUri, schema.id);
            schema.id = baseUri;
        }
        if (Array.isArray(schema)) {
            for (var i = 0; i < schema.length; i++) {
                normSchema(schema[i], baseUri);
            }
        } else {
            if (typeof schema['$ref'] === "string") {
                schema['$ref'] = resolveUrl(baseUri, schema['$ref']);
            }
            for (var key in schema) {
                if (key !== "enum") {
                    normSchema(schema[key], baseUri);
                }
            }
        }
    }
}

function defaultErrorReporter(language) {
    language = language || 'en';

    var errorMessages = languages[language];

    return function (error) {
        var messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];
        if (typeof messageTemplate !== 'string') {
            return "Unknown error code " + error.code + ": " + (0, _stringify2.default)(error.messageParams);
        }
        var messageParams = error.params;
        // Adapted from Crockford's supplant()
        return messageTemplate.replace(/\{([^{}]*)\}/g, function (whole, varName) {
            var subValue = messageParams[varName];
            return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;
        });
    };
}

var ErrorCodes = {
    INVALID_TYPE: 0,
    ENUM_MISMATCH: 1,
    ANY_OF_MISSING: 10,
    ONE_OF_MISSING: 11,
    ONE_OF_MULTIPLE: 12,
    NOT_PASSED: 13,
    // Numeric errors
    NUMBER_MULTIPLE_OF: 100,
    NUMBER_MINIMUM: 101,
    NUMBER_MINIMUM_EXCLUSIVE: 102,
    NUMBER_MAXIMUM: 103,
    NUMBER_MAXIMUM_EXCLUSIVE: 104,
    NUMBER_NOT_A_NUMBER: 105,
    // String errors
    STRING_LENGTH_SHORT: 200,
    STRING_LENGTH_LONG: 201,
    STRING_PATTERN: 202,
    // Object errors
    OBJECT_PROPERTIES_MINIMUM: 300,
    OBJECT_PROPERTIES_MAXIMUM: 301,
    OBJECT_REQUIRED: 302,
    OBJECT_ADDITIONAL_PROPERTIES: 303,
    OBJECT_DEPENDENCY_KEY: 304,
    // Array errors
    ARRAY_LENGTH_SHORT: 400,
    ARRAY_LENGTH_LONG: 401,
    ARRAY_UNIQUE: 402,
    ARRAY_ADDITIONAL_ITEMS: 403,
    // Custom/user-defined errors
    FORMAT_CUSTOM: 500,
    KEYWORD_CUSTOM: 501,
    // Schema structure
    CIRCULAR_REFERENCE: 600,
    // Non-standard validation options
    UNKNOWN_PROPERTY: 1000
};
var ErrorCodeLookup = {};
for (var key in ErrorCodes) {
    ErrorCodeLookup[ErrorCodes[key]] = key;
}
var ErrorMessagesDefault = {
    INVALID_TYPE: "Invalid type: {type} (expected {expected})",
    ENUM_MISMATCH: "No enum match for: {value}",
    ANY_OF_MISSING: "Data does not match any schemas from \"anyOf\"",
    ONE_OF_MISSING: "Data does not match any schemas from \"oneOf\"",
    ONE_OF_MULTIPLE: "Data is valid against more than one schema from \"oneOf\": indices {index1} and {index2}",
    NOT_PASSED: "Data matches schema from \"not\"",
    // Numeric errors
    NUMBER_MULTIPLE_OF: "Value {value} is not a multiple of {multipleOf}",
    NUMBER_MINIMUM: "Value {value} is less than minimum {minimum}",
    NUMBER_MINIMUM_EXCLUSIVE: "Value {value} is equal to exclusive minimum {minimum}",
    NUMBER_MAXIMUM: "Value {value} is greater than maximum {maximum}",
    NUMBER_MAXIMUM_EXCLUSIVE: "Value {value} is equal to exclusive maximum {maximum}",
    NUMBER_NOT_A_NUMBER: "Value {value} is not a valid number",
    // String errors
    STRING_LENGTH_SHORT: "String is too short ({length} chars), minimum {minimum}",
    STRING_LENGTH_LONG: "String is too long ({length} chars), maximum {maximum}",
    STRING_PATTERN: "String does not match pattern: {pattern}",
    // Object errors
    OBJECT_PROPERTIES_MINIMUM: "Too few properties defined ({propertyCount}), minimum {minimum}",
    OBJECT_PROPERTIES_MAXIMUM: "Too many properties defined ({propertyCount}), maximum {maximum}",
    OBJECT_REQUIRED: "Missing required property: {key}",
    OBJECT_ADDITIONAL_PROPERTIES: "Additional properties not allowed",
    OBJECT_DEPENDENCY_KEY: "Dependency failed - key must exist: {missing} (due to key: {key})",
    // Array errors
    ARRAY_LENGTH_SHORT: "Array is too short ({length}), minimum {minimum}",
    ARRAY_LENGTH_LONG: "Array is too long ({length}), maximum {maximum}",
    ARRAY_UNIQUE: "Array items are not unique (indices {match1} and {match2})",
    ARRAY_ADDITIONAL_ITEMS: "Additional items not allowed",
    // Format errors
    FORMAT_CUSTOM: "Format validation failed ({message})",
    KEYWORD_CUSTOM: "Keyword failed: {key} ({message})",
    // Schema structure
    CIRCULAR_REFERENCE: "Circular $refs: {urls}",
    // Non-standard validation options
    UNKNOWN_PROPERTY: "Unknown property (not in schema)"
};

function ValidationError(code, params, dataPath, schemaPath, subErrors) {
    Error.call(this);
    if (code === undefined) {
        throw new Error("No error code supplied: " + schemaPath);
    }
    this.message = '';
    this.params = params;
    this.code = code;
    this.dataPath = dataPath || "";
    this.schemaPath = schemaPath || "";
    this.subErrors = subErrors || null;

    var err = new Error(this.message);
    this.stack = err.stack || err.stacktrace;
    if (!this.stack) {
        try {
            throw err;
        } catch (err) {
            this.stack = err.stack || err.stacktrace;
        }
    }
}

ValidationError.prototype = (0, _create2.default)(Error.prototype);
ValidationError.prototype.constructor = ValidationError;
ValidationError.prototype.name = 'ValidationError';

ValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {
    if (dataPrefix !== null) {
        dataPrefix = dataPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
        this.dataPath = "/" + dataPrefix + this.dataPath;
    }
    if (schemaPrefix !== null) {
        schemaPrefix = schemaPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
        this.schemaPath = "/" + schemaPrefix + this.schemaPath;
    }
    if (this.subErrors !== null) {
        for (var i = 0; i < this.subErrors.length; i++) {
            this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);
        }
    }
    return this;
};

function isTrustedUrl(baseUrl, testUrl) {
    if (testUrl.substring(0, baseUrl.length) === baseUrl) {
        var remainder = testUrl.substring(baseUrl.length);
        if (testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === "/" || remainder.charAt(0) === "#" || remainder.charAt(0) === "?") {
            return true;
        }
    }
    return false;
}

var languages = {};

function createApi(language) {
    var globalContext = new ValidatorContext();
    var currentLanguage;
    var customErrorReporter;
    var api = {
        setErrorReporter: function setErrorReporter(reporter) {
            if (typeof reporter === 'string') {
                return this.language(reporter);
            }
            customErrorReporter = reporter;
            return true;
        },
        addFormat: function addFormat() {
            globalContext.addFormat.apply(globalContext, arguments);
        },
        language: function language(code) {
            if (!code) {
                return currentLanguage;
            }
            if (!languages[code]) {
                code = code.split('-')[0]; // fall back to base language
            }
            if (languages[code]) {
                currentLanguage = code;
                return code; // so you can tell if fall-back has happened
            }
            return false;
        },
        addLanguage: function addLanguage(code, messageMap) {
            var key;
            for (key in ErrorCodes) {
                if (messageMap[key] && !messageMap[ErrorCodes[key]]) {
                    messageMap[ErrorCodes[key]] = messageMap[key];
                }
            }
            var rootCode = code.split('-')[0];
            if (!languages[rootCode]) {
                // use for base language if not yet defined
                languages[code] = messageMap;
                languages[rootCode] = messageMap;
            } else {
                languages[code] = (0, _create2.default)(languages[rootCode]);
                for (key in messageMap) {
                    if (typeof languages[rootCode][key] === 'undefined') {
                        languages[rootCode][key] = messageMap[key];
                    }
                    languages[code][key] = messageMap[key];
                }
            }
            return this;
        },
        freshApi: function freshApi(language) {
            var result = createApi();
            if (language) {
                result.language(language);
            }
            return result;
        },
        validate: function validate(data, schema, checkRecursive, banUnknownProperties) {
            var def = defaultErrorReporter(currentLanguage);
            var errorReporter = customErrorReporter ? function (error, data, schema) {
                return customErrorReporter(error, data, schema) || def(error, data, schema);
            } : def;
            var context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);
            if (typeof schema === "string") {
                schema = { "$ref": schema };
            }
            context.addSchema("", schema);
            var error = context.validateAll(data, schema, null, null, "");
            if (!error && banUnknownProperties) {
                error = context.banUnknownProperties(data, schema);
            }
            this.error = error;
            this.missing = context.missing;
            this.valid = error === null;
            return this.valid;
        },
        validateResult: function validateResult() {
            var result = {};
            this.validate.apply(result, arguments);
            return result;
        },
        validateMultiple: function validateMultiple(data, schema, checkRecursive, banUnknownProperties) {
            var def = defaultErrorReporter(currentLanguage);
            var errorReporter = customErrorReporter ? function (error, data, schema) {
                return customErrorReporter(error, data, schema) || def(error, data, schema);
            } : def;
            var context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);
            if (typeof schema === "string") {
                schema = { "$ref": schema };
            }
            context.addSchema("", schema);
            context.validateAll(data, schema, null, null, "");
            if (banUnknownProperties) {
                context.banUnknownProperties(data, schema);
            }
            var result = {};
            result.errors = context.errors;
            result.missing = context.missing;
            result.valid = result.errors.length === 0;
            return result;
        },
        addSchema: function addSchema() {
            return globalContext.addSchema.apply(globalContext, arguments);
        },
        getSchema: function getSchema() {
            return globalContext.getSchema.apply(globalContext, arguments);
        },
        getSchemaMap: function getSchemaMap() {
            return globalContext.getSchemaMap.apply(globalContext, arguments);
        },
        getSchemaUris: function getSchemaUris() {
            return globalContext.getSchemaUris.apply(globalContext, arguments);
        },
        getMissingUris: function getMissingUris() {
            return globalContext.getMissingUris.apply(globalContext, arguments);
        },
        dropSchemas: function dropSchemas() {
            globalContext.dropSchemas.apply(globalContext, arguments);
        },
        defineKeyword: function defineKeyword() {
            globalContext.defineKeyword.apply(globalContext, arguments);
        },
        defineError: function defineError(codeName, codeNumber, defaultMessage) {
            if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {
                throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');
            }
            if (typeof codeNumber !== 'number' || codeNumber % 1 !== 0 || codeNumber < 10000) {
                throw new Error('Code number must be an integer > 10000');
            }
            if (typeof ErrorCodes[codeName] !== 'undefined') {
                throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);
            }
            if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {
                throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);
            }
            ErrorCodes[codeName] = codeNumber;
            ErrorCodeLookup[codeNumber] = codeName;
            ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;
            for (var langCode in languages) {
                var language = languages[langCode];
                if (language[codeName]) {
                    language[codeNumber] = language[codeNumber] || language[codeName];
                }
            }
        },
        reset: function reset() {
            globalContext.reset();
            this.error = null;
            this.missing = [];
            this.valid = true;
        },
        missing: [],
        error: null,
        valid: true,
        normSchema: normSchema,
        resolveUrl: resolveUrl,
        getDocumentUri: getDocumentUri,
        errorCodes: ErrorCodes
    };
    api.language(language || 'en');
    return api;
}

//export function validator() {
var tv4 = createApi();
tv4.addLanguage('en-gb', ErrorMessagesDefault);

//legacy property
tv4.tv4 = tv4;
//return tv4;
exports.default = tv4;
//}

module.exports = exports['default'];

},{"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/create":4,"babel-runtime/core-js/object/define-property":5,"babel-runtime/core-js/object/is-frozen":8,"babel-runtime/core-js/object/keys":9,"babel-runtime/helpers/typeof":19}],454:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.divideURL = divideURL;
exports.emptyObject = emptyObject;
exports.deepClone = deepClone;
exports.removePathFromURL = removePathFromURL;
exports.getUserURLFromEmail = getUserURLFromEmail;
exports.getUserEmailFromURL = getUserEmailFromURL;
exports.convertToUserURL = convertToUserURL;
exports.isDataObjectURL = isDataObjectURL;
exports.isLegacy = isLegacy;
exports.isURL = isURL;
exports.isUserURL = isUserURL;
exports.isHypertyURL = isHypertyURL;
exports.getConfigurationResources = getConfigurationResources;
exports.buildURL = buildURL;
exports.generateGUID = generateGUID;
exports.getUserIdentityDomain = getUserIdentityDomain;
exports.isBackendServiceURL = isBackendServiceURL;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  function recurse(value) {
    var regex = /([a-zA-Z-]*)(:\/\/(?:\.)?|:)([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
    var subst = '$1,$3,$4';
    var parts = value.replace(regex, subst).split(',');
    return parts;
  }

  var parts = recurse(url);

  // If the url has no scheme
  if (parts[0] === url && !parts[0].includes('@')) {

    var _result = {
      type: "",
      domain: url,
      identity: ""
    };

    console.error('[DivideURL] DivideURL don\'t support url without scheme. Please review your url address', url);

    return _result;
  }

  // check if the url has the scheme and includes an @
  if (parts[0] === url && parts[0].includes('@')) {
    var scheme = parts[0] === url ? 'smtp' : parts[0];
    parts = recurse(scheme + '://' + parts[0]);
  }

  // if the domain includes an @, divide it to domain and identity respectively
  if (parts[1].includes('@')) {
    parts[2] = parts[0] + '://' + parts[1];
    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);
  } /*else if (parts[2].includes('/')) {
    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);
    }*/

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

/**
 * Check if an Object is empty
 * @param  {Object} object Object to be checked
 * @return {Boolean}       status of Object, empty or not (true|false);
 */
function emptyObject(object) {
  return (0, _keys2.default)(object).length > 0 ? false : true;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse((0, _stringify2.default)(obj));
}

function removePathFromURL(url) {
  var splitURL = url.split('/');
  return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];
}

/**
 * Obtains the user URL that corresponds to a given email
 * @param  {string} userEmail The user email
 * @return {URL.URL} userURL The user URL
 */
function getUserURLFromEmail(userEmail) {
  var indexOfAt = userEmail.indexOf('@');
  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);
}

/**
 * Obtains the user email that corresponds to a given URL
 * @param  {URL.URL} userURL The user URL
 * @return {string} userEmail The user email
 */
function getUserEmailFromURL(userURL) {
  var url = divideURL(userURL);
  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'
}

/**
 * Check if the user identifier is already in the URL format, if not, convert to URL format
 * @param  {string}   identifier  user identifier
 * @return {string}   userURL    the user URL
 */
function convertToUserURL(identifier) {

  // check if the identifier is already in the url format
  if (identifier.substring(0, 7) === 'user://') {
    var dividedURL = divideURL(identifier);

    //check if the url is well formated
    if (dividedURL.domain && dividedURL.identity) {
      return identifier;
    } else {
      throw 'userURL with wrong format';
    }

    //if not, convert the user email to URL format
  } else {
    return getUserURLFromEmail(identifier);
  }
}

function isDataObjectURL(url) {
  var schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];
  var splitURL = url.split('://');
  var urlSchema = splitURL[0];

  return schemasToIgnore.indexOf(urlSchema) === -1;
}

function isLegacy(url) {
  if (url.split('@').length > 1) return true;else return false;
}

function isURL(url) {
  return url.split('/').length >= 3;
}

function isUserURL(url) {
  return divideURL(url).type === 'user';
}

function isHypertyURL(url) {
  return divideURL(url).type === 'hyperty';
}

/**
 * get information relative each component configured on runtime configuration;
 * @param  {object} configuration object with all configuration
 * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;
 * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy
 * @return {object}               return an object with all configurations;
 */
function getConfigurationResources(configuration, component, resource) {
  var objectResource = configuration[component];
  var resourceType = objectResource[resource];

  return resourceType;
}

/**
 * Build a full url with the runtime configuration;
 * @param  {object} configuration object with all configuration
 * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;
 * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy
 * @param  {string} type          resource to get, like a hyperty name or protocolstub name;
 * @param  {boolean} useFallback  if true the function will check if have a fallback url;
 * @return {string}               partial url to contact the resource;
 */
function buildURL(configuration, component, resource, type) {
  var useFallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  var objectResource = configuration[component];
  var url = void 0;

  if (!objectResource.hasOwnProperty(resource)) {
    throw Error('The configuration ' + (0, _stringify2.default)(objectResource, '', 2) + ' don\'t have the ' + resource + ' resource you are looking for');
  }

  var resourceType = objectResource[resource];

  if (type) {
    url = resourceType.prefix + configuration.domain + resourceType.suffix + type;
    if (resourceType.hasOwnProperty('fallback') && useFallback) {
      if (resourceType.fallback.indexOf('%domain%')) {
        url = resourceType.fallback.replace(/(%domain%)/g, configuration.domain) + type;
      } else {
        url = resourceType.fallback + type;
      }
    }
  } else {
    url = resourceType.prefix + configuration.domain + resourceType.suffix;
  }

  // console.log(url);

  return url;
}

function generateGUID() {

  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }

  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

function getUserIdentityDomain(url) {
  var dividedURL = divideURL(url);
  var splitedDomain = dividedURL.domain.split('.');
  var splitedLength = splitedDomain.length;
  if (splitedLength == 1) {
    return splitedDomain[splitedLength - 1];
  }
  var domain = splitedDomain[splitedLength - 2] + '.' + splitedDomain[splitedLength - 1];
  return domain;
}

/**
 * Check if URL is from a backend service
 * @param  {string} url     URL to be processed
 * @return {boolean}
 */

function isBackendServiceURL(url) {
  var dividedURL = divideURL(url);
  var splitedDomain = dividedURL.domain.split('.');
  var backendSchemes = ['domain', 'global', 'domain-idp']; // should be defined in the runtime configuration
  var backendSubDomains = ['registry', 'msg-node']; // should be defined in the runtime configuration
  var subDomain = void 0;

  if (splitedDomain.length > 1) {
    subDomain = splitedDomain[0];
  }

  if (subDomain && backendSubDomains.indexOf(subDomain)) return true;

  if (dividedURL.type) return backendSchemes.indexOf(dividedURL.type) !== -1;

  return false;
}

},{"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/keys":9}]},{},[446])(446)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZm9yLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ludm9rZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fa2V5b2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFydGlhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhdGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL3NoaW0uanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIm5vZGVfbW9kdWxlcy9zZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5LmpzIiwic3JjXFxhbGxvY2F0aW9uXFxBZGRyZXNzQWxsb2NhdGlvbi5qcyIsInNyY1xcYnVzXFxCdXMuanMiLCJzcmNcXGJ1c1xcTWVzc2FnZUJ1cy5qcyIsInNyY1xcYnVzXFxQaXBlbGluZS5qcyIsInNyY1xcaWRlbnRpdHlcXENyeXB0by5qcyIsInNyY1xcaWRlbnRpdHlcXEd1aUZha2UuanMiLCJzcmNcXGlkZW50aXR5XFxJZGVudGl0eS5qcyIsInNyY1xcaWRlbnRpdHlcXElkZW50aXR5TW9kdWxlLmpzIiwic3JjXFxwb2xpY3lcXEFjdGlvbnNTZXJ2aWNlLmpzIiwic3JjXFxwb2xpY3lcXE9wZXJhdG9ycy5qcyIsInNyY1xccG9saWN5XFxQRFAuanMiLCJzcmNcXHBvbGljeVxcUEVQLmpzIiwic3JjXFxwb2xpY3lcXFBvbGljeS5qcyIsInNyY1xccG9saWN5XFxSZVRoaW5rQ3R4LmpzIiwic3JjXFxwb2xpY3lcXFJ1bGUuanMiLCJzcmNcXHBvbGljeVxcY29tYmluaW5nQWxnb3JpdGhtc1xcQWxsb3dPdmVycmlkZXMuanMiLCJzcmNcXHBvbGljeVxcY29tYmluaW5nQWxnb3JpdGhtc1xcQmxvY2tPdmVycmlkZXMuanMiLCJzcmNcXHBvbGljeVxcY29tYmluaW5nQWxnb3JpdGhtc1xcRmlyc3RBcHBsaWNhYmxlLmpzIiwic3JjXFxwb2xpY3lcXGNvbmRpdGlvbnNcXEFkdmFuY2VkQ29uZGl0aW9uLmpzIiwic3JjXFxwb2xpY3lcXGNvbmRpdGlvbnNcXENvbmRpdGlvbi5qcyIsInNyY1xccG9saWN5XFxjb25kaXRpb25zXFxTdWJzY3JpcHRpb25Db25kaXRpb24uanMiLCJzcmNcXHBvbGljeVxcY29udGV4dFxcUnVudGltZUNvcmVDdHguanMiLCJzcmNcXHJlZ2lzdHJ5XFxEaXNjb3ZlcnkuanMiLCJzcmNcXHJlZ2lzdHJ5XFxEaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrLmpzIiwic3JjXFxyZWdpc3RyeVxcSHlwZXJ0eUluc3RhbmNlLmpzIiwic3JjXFxyZWdpc3RyeVxcUmVnaXN0cnkuanMiLCJzcmNcXHJlZ2lzdHJ5XFxSZWdpc3RyeURhdGFNb2RlbC5qcyIsInNyY1xccnVudGltZVxcRGVzY3JpcHRvcnMuanMiLCJzcmNcXHJ1bnRpbWVcXExvYWRlci5qcyIsInNyY1xccnVudGltZVxcUnVudGltZVVBLmpzIiwic3JjXFxydW50aW1lXFxydW50aW1lQ29uZmlndXJhdGlvbi5qcyIsInNyY1xccnVudGltZVxccnVudGltZVV0aWxzLmpzIiwic3JjXFxzeW5jaGVyXFxPYnNlcnZlck9iamVjdC5qcyIsInNyY1xcc3luY2hlclxcUmVwb3J0ZXJPYmplY3QuanMiLCJzcmNcXHN5bmNoZXJcXFN1YnNjcmlwdGlvbi5qcyIsInNyY1xcc3luY2hlclxcU3luY2hlck1hbmFnZXIuanMiLCJzcmNcXHV0aWxzXFx0djQuanMiLCJzcmNcXHV0aWxzXFx1dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzNCQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7O0FDQUE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBOztBQ0ZBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7O0FDRkE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU9BOztBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ1BBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOWRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNqQkE7QUFDQTtBQUNBOzs7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzNxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBOztBQUVBOzs7SUFHTSxpQjtBQUNKOzs7OztBQUtBOzs7OztBQUtBLDZCQUFZLEdBQVosRUFBaUIsR0FBakIsRUFBc0IsUUFBdEIsRUFBZ0M7QUFBQTs7QUFDOUIsUUFB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TUFBSSxnQkFBZ0IsV0FBVyxNQUFYLENBQWtCLEtBQWxCLENBQXdCLEdBQXhCLENBQXBCO0FBQ0EsTUFBSSxnQkFBZ0IsY0FBYyxNQUFsQztBQUNBLE1BQUksaUJBQWlCLENBQXJCLEVBQXdCO0FBQ3RCLFdBQU8sY0FBYyxnQkFBZ0IsQ0FBOUIsQ0FBUDtBQUNEO0FBQ0QsTUFBSSxTQUFTLGNBQWMsZ0JBQWdCLENBQTlCLElBQW1DLEdBQW5DLEdBQXlDLGNBQWMsZ0JBQWdCLENBQTlCLENBQXREO0FBQ0EsU0FBTyxNQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztBQU1PLFNBQVMsbUJBQVQsQ0FBNkIsR0FBN0IsRUFBa0M7QUFDdkMsTUFBSSxhQUFhLFVBQVUsR0FBVixDQUFqQjtBQUNBLE1BQUksZ0JBQWdCLFdBQVcsTUFBWCxDQUFrQixLQUFsQixDQUF3QixHQUF4QixDQUFwQjtBQUNBLE1BQUksaUJBQWlCLENBQUMsUUFBRCxFQUFVLFFBQVYsRUFBbUIsWUFBbkIsQ0FBckIsQ0FIdUMsQ0FHZ0I7QUFDdkQsTUFBSSxvQkFBb0IsQ0FBQyxVQUFELEVBQVksVUFBWixDQUF4QixDQUp1QyxDQUlVO0FBQ2pELE1BQUksa0JBQUo7O0FBRUEsTUFBSSxjQUFjLE1BQWQsR0FBdUIsQ0FBM0IsRUFBOEI7QUFDNUIsZ0JBQVksY0FBYyxDQUFkLENBQVo7QUFDRDs7QUFFRCxNQUFJLGFBQWEsa0JBQWtCLE9BQWxCLENBQTBCLFNBQTFCLENBQWpCLEVBQ0MsT0FBTyxJQUFQOztBQUVELE1BQUksV0FBVyxJQUFmLEVBQ0MsT0FBUSxlQUFlLE9BQWYsQ0FBdUIsV0FBVyxJQUFsQyxNQUE0QyxDQUFDLENBQXJEOztBQUVELFNBQU8sS0FBUDtBQUNEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIlwidXNlIHN0cmljdFwiO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xuXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xuXG5yZXF1aXJlKFwiY29yZS1qcy9mbi9yZWdleHAvZXNjYXBlXCIpO1xuXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XG4gIHRocm93IG5ldyBFcnJvcihcIm9ubHkgb25lIGluc3RhbmNlIG9mIGJhYmVsLXBvbHlmaWxsIGlzIGFsbG93ZWRcIik7XG59XG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xuXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcbiAgT1trZXldIHx8IE9iamVjdFtERUZJTkVfUFJPUEVSVFldKE8sIGtleSwge1xuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSk7XG59XG5cbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XG5cblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xufSk7IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ25cIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2lzLWZyb3plblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5c1wiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKTtcblxudmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gIGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGRlc2MgPSAoMCwgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIuZGVmYXVsdCkob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBwYXJlbnQgPSAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShvYmplY3QpO1xuXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7XG4gICAgfVxuICB9IGVsc2UgaWYgKFwidmFsdWVcIiBpbiBkZXNjKSB7XG4gICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGdldHRlciA9IGRlc2MuZ2V0O1xuXG4gICAgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7XG4gIH1cbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKTtcblxudmFyIF9zZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY3JlYXRlID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiKTtcblxudmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzZWxmLCBjYWxsKSB7XG4gIGlmICghc2VsZikge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9pdGVyYXRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKTtcblxudmFyIF9pdGVyYXRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pdGVyYXRvcik7XG5cbnZhciBfc3ltYm9sID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpO1xuXG52YXIgX3N5bWJvbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2wpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9pdGVyYXRvcjIuZGVmYXVsdCA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmogPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihvYmopO1xufTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuUmVnRXhwLmVzY2FwZTsiLCJ2YXIgY29yZSAgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJylcbiAgLCAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0ge3N0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnl9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICByZXR1cm4gJEpTT04uc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmd1bWVudHMpO1xufTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuYXNzaWduOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpe1xuICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7XG59OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyl7XG4gIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpO1xufTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgcmV0dXJuICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpO1xufTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmdldFByb3RvdHlwZU9mOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5pc0Zyb3plbjsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmtleXM7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5zZXRQcm90b3R5cGVPZjsiLCJyZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL19jb3JlJykuUHJvbWlzZTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlN5bWJvbDsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL193a3MtZXh0JykuZignaXRlcmF0b3InKTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKXtcbiAgaWYoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpe1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTsiLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgdG9JbmRleCAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oSVNfSU5DTFVERVMpe1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGVsLCBmcm9tSW5kZXgpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoJHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSB0b0luZGV4KGZyb21JbmRleCwgbGVuZ3RoKVxuICAgICAgLCB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgaWYoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpd2hpbGUobGVuZ3RoID4gaW5kZXgpe1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgaWYodmFsdWUgIT0gdmFsdWUpcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjdG9JbmRleCBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pe1xuICAgICAgaWYoT1tpbmRleF0gPT09IGVsKXJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07IiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXG4gIC8vIEVTMyB3cm9uZyBoZXJlXG4gICwgQVJHID0gY29mKGZ1bmN0aW9uKCl7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgTywgVCwgQjtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxuICAgIDogQVJHID8gY29mKE8pXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTsiLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59OyIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7dmVyc2lvbjogJzIuNC4wJ307XG5pZih0eXBlb2YgX19lID09ICdudW1iZXInKV9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYiLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpe1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuO1xuICBzd2l0Y2gobGVuZ3RoKXtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59OyIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTsiLCIvLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnRcbiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnXG4gICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07IiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSAoXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXG4pLnNwbGl0KCcsJyk7IiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgcmVzdWx0ICAgICA9IGdldEtleXMoaXQpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZihnZXRTeW1ib2xzKXtcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpXG4gICAgICAsIGlzRW51bSAgPSBwSUUuZlxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoc3ltYm9scy5sZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKGl0LCBrZXkgPSBzeW1ib2xzW2krK10pKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgSVNfV1JBUCAgID0gdHlwZSAmICRleHBvcnQuV1xuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXVxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwga2V5LCBvd24sIG91dDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmKG93biAmJiBrZXkgaW4gZXhwb3J0cyljb250aW51ZTtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IG93biA/IHRhcmdldFtrZXldIDogc291cmNlW2tleV07XG4gICAgLy8gcHJldmVudCBnbG9iYWwgcG9sbHV0aW9uIGZvciBuYW1lc3BhY2VzXG4gICAgZXhwb3J0c1trZXldID0gSVNfR0xPQkFMICYmIHR5cGVvZiB0YXJnZXRba2V5XSAhPSAnZnVuY3Rpb24nID8gc291cmNlW2tleV1cbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpXG4gICAgLy8gd3JhcCBnbG9iYWwgY29uc3RydWN0b3JzIGZvciBwcmV2ZW50IGNoYW5nZSB0aGVtIGluIGxpYnJhcnlcbiAgICA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpe1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgICAgaWYodGhpcyBpbnN0YW5jZW9mIEMpe1xuICAgICAgICAgIHN3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBDO1xuICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IEMoYSk7XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQyhhLCBiKTtcbiAgICAgICAgICB9IHJldHVybiBuZXcgQyhhLCBiLCBjKTtcbiAgICAgICAgfSByZXR1cm4gQy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgIHJldHVybiBGO1xuICAgIC8vIG1ha2Ugc3RhdGljIHZlcnNpb25zIGZvciBwcm90b3R5cGUgbWV0aG9kc1xuICAgIH0pKG91dCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUubWV0aG9kcy4lTkFNRSVcbiAgICBpZihJU19QUk9UTyl7XG4gICAgICAoZXhwb3J0cy52aXJ0dWFsIHx8IChleHBvcnRzLnZpcnR1YWwgPSB7fSkpW2tleV0gPSBvdXQ7XG4gICAgICAvLyBleHBvcnQgcHJvdG8gbWV0aG9kcyB0byBjb3JlLiVDT05TVFJVQ1RPUiUucHJvdG90eXBlLiVOQU1FJVxuICAgICAgaWYodHlwZSAmICRleHBvcnQuUiAmJiBleHBQcm90byAmJiAhZXhwUHJvdG9ba2V5XSloaWRlKGV4cFByb3RvLCBrZXksIG91dCk7XG4gICAgfVxuICB9XG59O1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTsiLCJ2YXIgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNhbGwgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ2V0SXRlckZuICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICwgQlJFQUsgICAgICAgPSB7fVxuICAsIFJFVFVSTiAgICAgID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSlcbiAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKVxuICAgICwgaW5kZXggID0gMFxuICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvclxuICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApe1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbmV4cG9ydHMuQlJFQUsgID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbmlmKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07IiwidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2RpdicpLCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7IiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGF0KXtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2goYXJncy5sZW5ndGgpe1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG59OyIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59OyIsIi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3JcbnZhciBJdGVyYXRvcnMgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCBJVEVSQVRPUiAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07IiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZyl7XG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07IiwiLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpe1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2goZSl7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZGVzY3JpcHRvciAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIEl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCAkaXRlckNyZWF0ZSAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIElURVJBVE9SICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gICwgRkZfSVRFUkFUT1IgICAgPSAnQEBpdGVyYXRvcidcbiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJ1xuICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKXtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7XG4gICAgaWYoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHICAgICAgICA9IE5BTUUgKyAnIEl0ZXJhdG9yJ1xuICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTXG4gICAgLCBWQUxVRVNfQlVHID0gZmFsc2VcbiAgICAsIHByb3RvICAgICAgPSBCYXNlLnByb3RvdHlwZVxuICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXVxuICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpXG4gICAgLCAkZW50cmllcyAgID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZFxuICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmVcbiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYoJGFueU5hdGl2ZSl7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTtcbiAgICBpZihJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSl7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICB9XG4gIH1cbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxuICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpe1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XG4gIH1cbiAgLy8gRGVmaW5lIGl0ZXJhdG9yXG4gIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7XG4gIGlmKERFRkFVTFQpe1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXtcbiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59OyIsInZhciBJVEVSQVRPUiAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCl7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uKCl7IHRocm93IDI7IH0pO1xufSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMsIHNraXBDbG9zaW5nKXtcbiAgaWYoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgID0gWzddXG4gICAgICAsIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKXsgcmV0dXJuIHtkb25lOiBzYWZlID0gdHJ1ZX07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb25lLCB2YWx1ZSl7XG4gIHJldHVybiB7dmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmV9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHt9OyIsInZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaW5kZXggID0gMFxuICAgICwga2V5O1xuICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHRydWU7IiwidmFyIE1FVEEgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKVxuICAsIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBoYXMgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgc2V0RGVzYyAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaWQgICAgICAgPSAwO1xudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xudmFyIEZSRUVaRSA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpe1xuICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9fSk7XG59O1xudmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZighaXNPYmplY3QoaXQpKXJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xufTtcbnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIGlmKCFoYXMoaXQsIE1FVEEpKXtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhKGl0KTtcbiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcbn07XG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKXNldE1ldGEoaXQpO1xuICByZXR1cm4gaXQ7XG59O1xudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgS0VZOiAgICAgIE1FVEEsXG4gIE5FRUQ6ICAgICBmYWxzZSxcbiAgZmFzdEtleTogIGZhc3RLZXksXG4gIGdldFdlYWs6ICBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldFxuICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyXG4gICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZVxuICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZShoZWFkKXtcbiAgICAgIGZuICAgPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICBpZihoZWFkKW5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmKHBhcmVudClwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmKGlzTm9kZSl7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlclxuICB9IGVsc2UgaWYoT2JzZXJ2ZXIpe1xuICAgIHZhciB0b2dnbGUgPSB0cnVlXG4gICAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpe1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGZuKXtcbiAgICB2YXIgdGFzayA9IHtmbjogZm4sIG5leHQ6IHVuZGVmaW5lZH07XG4gICAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmKCFoZWFkKXtcbiAgICAgIGhlYWQgPSB0YXNrO1xuICAgICAgbm90aWZ5KCk7XG4gICAgfSBsYXN0ID0gdGFzaztcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxudmFyIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUFMgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKVxuICAsIHBJRSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgJGFzc2lnbiAgPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1Zylcbm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICB2YXIgQSA9IHt9XG4gICAgLCBCID0ge31cbiAgICAsIFMgPSBTeW1ib2woKVxuICAgICwgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uKGspeyBCW2tdID0gazsgfSk7XG4gIHJldHVybiAkYXNzaWduKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUICAgICA9IHRvT2JqZWN0KHRhcmdldClcbiAgICAsIGFMZW4gID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgaW5kZXggPSAxXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mXG4gICAgLCBpc0VudW0gICAgID0gcElFLmY7XG4gIHdoaWxlKGFMZW4gPiBpbmRleCl7XG4gICAgdmFyIFMgICAgICA9IElPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKVxuICAgICAgLCBrZXlzICAgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpXG4gICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAsIGogICAgICA9IDBcbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGxlbmd0aCA+IGopaWYoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSlUW2tleV0gPSBTW2tleV07XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjsiLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZFBzICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgRW1wdHkgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpe1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKVxuICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoXG4gICAgLCBsdCAgICAgPSAnPCdcbiAgICAsIGd0ICAgICA9ICc+J1xuICAgICwgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUoaS0tKWRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xuICByZXR1cm4gY3JlYXRlRGljdCgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKXtcbiAgdmFyIHJlc3VsdDtcbiAgaWYoTyAhPT0gbnVsbCl7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpe1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKXRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XG4gIGlmKCd2YWx1ZScgaW4gQXR0cmlidXRlcylPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59OyIsInZhciBkUCAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldEtleXMgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpe1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpID0gMFxuICAgICwgUDtcbiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07IiwidmFyIHBJRSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgZ09QRCAgICAgICAgICAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QRCA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKXtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBnT1BEKE8sIFApO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIGlmKGhhcyhPLCBQKSlyZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59OyIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBnT1BOICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCB0b1N0cmluZyAgPSB7fS50b1N0cmluZztcblxudmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XG5cbnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uKGl0KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZ09QTihpdCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcbn07XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pe1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59OyIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7IiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElFX1BST1RPICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpXG4gICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbihPKXtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZihoYXMoTywgSUVfUFJPVE8pKXJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcil7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xufTsiLCJ2YXIgaGFzICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b0lPYmplY3QgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBhcnJheUluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxuICAsIElFX1BST1RPICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIG5hbWVzKXtcbiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwga2V5O1xuICBmb3Ioa2V5IGluIE8paWYoa2V5ICE9IElFX1BST1RPKWhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSlpZihoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpe1xuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07IiwiLy8gMTkuMS4yLjE0IC8gMTUuMi4zLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgJGtleXMgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKXtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07IiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7IiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29yZSAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpe1xuICB2YXIgZm4gID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldXG4gICAgLCBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpe1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlICAgICAgIDogdmFsdWVcbiAgfTtcbn07IiwidmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjLCBzYWZlKXtcbiAgZm9yKHZhciBrZXkgaW4gc3JjKXtcbiAgICBpZihzYWZlICYmIHRhcmdldFtrZXldKXRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgZWxzZSBoaWRlKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH0gcmV0dXJuIHRhcmdldDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19oaWRlJyk7IiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pe1xuICBhbk9iamVjdChPKTtcbiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbih0ZXN0LCBidWdneSwgc2V0KXtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoKGUpeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYoYnVnZ3kpTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgU1BFQ0lFUyAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciBDID0gdHlwZW9mIGNvcmVbS0VZXSA9PSAnZnVuY3Rpb24nID8gY29yZVtLRVldIDogZ2xvYmFsW0tFWV07XG4gIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59OyIsInZhciBkZWYgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgaGFzID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXtcbiAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pO1xufTsiLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTsiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJ1xuICAsIHN0b3JlICA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG59OyIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgU1BFQ0lFUyAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywgRCl7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3IsIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07IiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7XG4gIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpe1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpXG4gICAgICAsIGkgPSB0b0ludGVnZXIocG9zKVxuICAgICAgLCBsID0gcy5sZW5ndGhcbiAgICAgICwgYSwgYjtcbiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07IiwidmFyIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgaW52b2tlICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBodG1sICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19odG1sJylcbiAgLCBjZWwgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJylcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgc2V0VGFzayAgICAgICAgICAgID0gZ2xvYmFsLnNldEltbWVkaWF0ZVxuICAsIGNsZWFyVGFzayAgICAgICAgICA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZVxuICAsIE1lc3NhZ2VDaGFubmVsICAgICA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbFxuICAsIGNvdW50ZXIgICAgICAgICAgICA9IDBcbiAgLCBxdWV1ZSAgICAgICAgICAgICAgPSB7fVxuICAsIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnXG4gICwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24oKXtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIGlmKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSl7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KXtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYoIXNldFRhc2sgfHwgIWNsZWFyVGFzayl7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pe1xuICAgIHZhciBhcmdzID0gW10sIGkgPSAxO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uKCl7XG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpe1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZihyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcycpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmKE1lc3NhZ2VDaGFubmVsKXtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsO1xuICAgIHBvcnQgICAgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZihPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbigpe1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogICBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59OyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtYXggICAgICAgPSBNYXRoLm1heFxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbmRleCwgbGVuZ3RoKXtcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcbn07IiwiLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCAgPSBNYXRoLmNlaWxcbiAgLCBmbG9vciA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59OyIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07IiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07IiwiLy8gNy4xLjEzIFRvT2JqZWN0KGFyZ3VtZW50KVxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59OyIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpe1xuICBpZighaXNPYmplY3QoaXQpKXJldHVybiBpdDtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZighUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59OyIsInZhciBpZCA9IDBcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59OyIsInZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpXG4gICwgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTtcbiAgaWYobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSlkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7dmFsdWU6IHdrc0V4dC5mKG5hbWUpfSk7XG59OyIsImV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX3drcycpOyIsInZhciBzdG9yZSAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpXG4gICwgdWlkICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgU3ltYm9sICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbFxuICAsIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlOyIsInZhciBjbGFzc29mICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBJVEVSQVRPUiAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ICE9IHVuZGVmaW5lZClyZXR1cm4gaXRbSVRFUkFUT1JdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJylcbiAgLCBzdGVwICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBJdGVyYXRvcnMgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB0b0lPYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xuXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKVxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBraW5kICA9IHRoaXMuX2tcbiAgICAsIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7XG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc3RlcCgxKTtcbiAgfVxuICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7IiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0Jywge2Fzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpfSk7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtjcmVhdGU6IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKX0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZn0pOyIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbnZhciB0b0lPYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuOSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZihpdCl7XG4gICAgcmV0dXJuICRnZXRQcm90b3R5cGVPZih0b09iamVjdChpdCkpO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbigkaXNGcm96ZW4pe1xuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsICRrZXlzICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpe1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7IiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0fSk7IiwiIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY3R4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBjbGFzc29mICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCAkZXhwb3J0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGlzT2JqZWN0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYUZ1bmN0aW9uICAgICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgYW5JbnN0YW5jZSAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGZvck9mICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpXG4gICwgdGFzayAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldFxuICAsIG1pY3JvdGFzayAgICAgICAgICA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKClcbiAgLCBQUk9NSVNFICAgICAgICAgICAgPSAnUHJvbWlzZSdcbiAgLCBUeXBlRXJyb3IgICAgICAgICAgPSBnbG9iYWwuVHlwZUVycm9yXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCAkUHJvbWlzZSAgICAgICAgICAgPSBnbG9iYWxbUFJPTUlTRV1cbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIGlzTm9kZSAgICAgICAgICAgICA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnXG4gICwgZW1wdHkgICAgICAgICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfVxuICAsIEludGVybmFsLCBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIFdyYXBwZXI7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbigpe1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlICAgICA9ICRQcm9taXNlLnJlc29sdmUoMSlcbiAgICAgICwgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uKGV4ZWMpeyBleGVjKGVtcHR5LCBlbXB0eSk7IH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBzYW1lQ29uc3RydWN0b3IgPSBmdW5jdGlvbihhLCBiKXtcbiAgLy8gd2l0aCBsaWJyYXJ5IHdyYXBwZXIgc3BlY2lhbCBjYXNlXG4gIHJldHVybiBhID09PSBiIHx8IGEgPT09ICRQcm9taXNlICYmIGIgPT09IFdyYXBwZXI7XG59O1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbihpdCl7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZiAodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG59O1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7XG4gIHJldHVybiBzYW1lQ29uc3RydWN0b3IoJFByb21pc2UsIEMpXG4gICAgPyBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICA6IG5ldyBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oQyl7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uKCQkcmVzb2x2ZSwgJCRyZWplY3Qpe1xuICAgIGlmKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcbiAgICByZWplY3QgID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ICA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcbnZhciBwZXJmb3JtID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB7ZXJyb3I6IGV9O1xuICB9XG59O1xudmFyIG5vdGlmeSA9IGZ1bmN0aW9uKHByb21pc2UsIGlzUmVqZWN0KXtcbiAgaWYocHJvbWlzZS5fbilyZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92XG4gICAgICAsIG9rICAgID0gcHJvbWlzZS5fcyA9PSAxXG4gICAgICAsIGkgICAgID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24ocmVhY3Rpb24pe1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbFxuICAgICAgICAsIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlXG4gICAgICAgICwgcmVqZWN0ICA9IHJlYWN0aW9uLnJlamVjdFxuICAgICAgICAsIGRvbWFpbiAgPSByZWFjdGlvbi5kb21haW5cbiAgICAgICAgLCByZXN1bHQsIHRoZW47XG4gICAgICB0cnkge1xuICAgICAgICBpZihoYW5kbGVyKXtcbiAgICAgICAgICBpZighb2spe1xuICAgICAgICAgICAgaWYocHJvbWlzZS5faCA9PSAyKW9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGhhbmRsZXIgPT09IHRydWUpcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmKGRvbWFpbilkb21haW4uZXhpdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2Upe1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSl7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSlydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZihpc1JlamVjdCAmJiAhcHJvbWlzZS5faClvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdlxuICAgICAgLCBhYnJ1cHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYoaXNVbmhhbmRsZWQocHJvbWlzZSkpe1xuICAgICAgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgICBpZihpc05vZGUpe1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnVuaGFuZGxlZHJlamVjdGlvbil7XG4gICAgICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZX0pO1xuICAgICAgICB9IGVsc2UgaWYoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcil7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmKGFicnVwdCl0aHJvdyBhYnJ1cHQuZXJyb3I7XG4gIH0pO1xufTtcbnZhciBpc1VuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICBpZihwcm9taXNlLl9oID09IDEpcmV0dXJuIGZhbHNlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2NcbiAgICAsIGkgICAgID0gMFxuICAgICwgcmVhY3Rpb247XG4gIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpe1xuICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTtcbiAgICBpZihyZWFjdGlvbi5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdGlvbi5wcm9taXNlKSlyZXR1cm4gZmFsc2U7XG4gIH0gcmV0dXJuIHRydWU7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uKCl7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYoaXNOb2RlKXtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCl7XG4gICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3Z9KTtcbiAgICB9XG4gIH0pO1xufTtcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpe1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmKHByb21pc2UuX2QpcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmKCFwcm9taXNlLl9hKXByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XG4gIG5vdGlmeShwcm9taXNlLCB0cnVlKTtcbn07XG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gIHZhciBwcm9taXNlID0gdGhpc1xuICAgICwgdGhlbjtcbiAgaWYocHJvbWlzZS5fZClyZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZihwcm9taXNlID09PSB2YWx1ZSl0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZih0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpe1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB3cmFwcGVyID0ge193OiBwcm9taXNlLCBfZDogZmFsc2V9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2goZSl7XG4gICAgJHJlamVjdC5jYWxsKHtfdzogcHJvbWlzZSwgX2Q6IGZhbHNlfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmKCFVU0VfTkFUSVZFKXtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaChlcnIpe1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCl7XG4gICAgICB2YXIgcmVhY3Rpb24gICAgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcbiAgICAgIHJlYWN0aW9uLm9rICAgICA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCAgID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYodGhpcy5fYSl0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYodGhpcy5fcylub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uKG9uUmVqZWN0ZWQpe1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgcHJvbWlzZSAgPSBuZXcgSW50ZXJuYWw7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgoJHJlc29sdmUsIHByb21pc2UsIDEpO1xuICAgIHRoaXMucmVqZWN0ICA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1Byb21pc2U6ICRQcm9taXNlfSk7XG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoUFJPTUlTRSk7XG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xuXG4vLyBzdGF0aWNzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpe1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcylcbiAgICAgICwgJCRyZWplY3QgICA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgICQkcmVqZWN0KHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCl7XG4gICAgLy8gaW5zdGFuY2VvZiBpbnN0ZWFkIG9mIGludGVybmFsIHNsb3QgY2hlY2sgYmVjYXVzZSB3ZSBzaG91bGQgZml4IGl0IHdpdGhvdXQgcmVwbGFjZW1lbnQgbmF0aXZlIFByb21pc2UgY29yZVxuICAgIGlmKHggaW5zdGFuY2VvZiAkUHJvbWlzZSAmJiBzYW1lQ29uc3RydWN0b3IoeC5jb25zdHJ1Y3RvciwgdGhpcykpcmV0dXJuIHg7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKVxuICAgICAgLCAkJHJlc29sdmUgID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgICQkcmVzb2x2ZSh4KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24oaXRlcil7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKXtcbiAgICB2YXIgQyAgICAgICAgICA9IHRoaXNcbiAgICAgICwgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICAsIHJlc29sdmUgICAgPSBjYXBhYmlsaXR5LnJlc29sdmVcbiAgICAgICwgcmVqZWN0ICAgICA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgdmFsdWVzICAgID0gW11cbiAgICAgICAgLCBpbmRleCAgICAgPSAwXG4gICAgICAgICwgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIHZhciAkaW5kZXggICAgICAgID0gaW5kZXgrK1xuICAgICAgICAgICwgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgIGlmKGFscmVhZHlDYWxsZWQpcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgICAgID0gdGhpc1xuICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgICwgcmVqZWN0ICAgICA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2Upe1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZihhYnJ1cHQpcmVqZWN0KGFicnVwdC5lcnJvcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGluZGV4ID0gdGhpcy5faVxuICAgICwgcG9pbnQ7XG4gIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIHBvaW50ID0gJGF0KE8sIGluZGV4KTtcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgTUVUQSAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuS0VZXG4gICwgJGZhaWxzICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgc2hhcmVkICAgICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIHVpZCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCB3a3MgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCB3a3NEZWZpbmUgICAgICA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKVxuICAsIGtleU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fa2V5b2YnKVxuICAsIGVudW1LZXlzICAgICAgID0gcmVxdWlyZSgnLi9fZW51bS1rZXlzJylcbiAgLCBpc0FycmF5ICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBfY3JlYXRlICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGdPUE5FeHQgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JylcbiAgLCAkR09QRCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCAkRFAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgJGtleXMgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QRCAgICAgICAgICAgPSAkR09QRC5mXG4gICwgZFAgICAgICAgICAgICAgPSAkRFAuZlxuICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mXG4gICwgJFN5bWJvbCAgICAgICAgPSBnbG9iYWwuU3ltYm9sXG4gICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTlxuICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5XG4gICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJ1xuICAsIEhJRERFTiAgICAgICAgID0gd2tzKCdfaGlkZGVuJylcbiAgLCBUT19QUklNSVRJVkUgICA9IHdrcygndG9QcmltaXRpdmUnKVxuICAsIGlzRW51bSAgICAgICAgID0ge30ucHJvcGVydHlJc0VudW1lcmFibGVcbiAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5JylcbiAgLCBBbGxTeW1ib2xzICAgICA9IHNoYXJlZCgnc3ltYm9scycpXG4gICwgT1BTeW1ib2xzICAgICAgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKVxuICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0W1BST1RPVFlQRV1cbiAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbidcbiAgLCBRT2JqZWN0ICAgICAgICA9IGdsb2JhbC5RT2JqZWN0O1xuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcblxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpe1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7dmFsdWU6IDd9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uKGl0LCBrZXksIEQpe1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xuICBkUChpdCwga2V5LCBEKTtcbiAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xufSA6IGRQO1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uKHRhZyl7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xufTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpe1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcbiAgYW5PYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBhbk9iamVjdChEKTtcbiAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSkpe1xuICAgIGlmKCFELmVudW1lcmFibGUpe1xuICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XG4gICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwge2VudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpfSk7XG4gICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTtcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XG59O1xudmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKVxuICAgICwgaSAgICA9IDBcbiAgICAsIGwgPSBrZXlzLmxlbmd0aFxuICAgICwga2V5O1xuICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpe1xuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xuICBpZih0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgaXQgID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybjtcbiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpO1xuICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgcmV0dXJuIEQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHZhciBuYW1lcyAgPSBnT1BOKHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXtcbiAgdmFyIElTX09QICA9IGl0ID09PSBPYmplY3RQcm90b1xuICAgICwgbmFtZXMgID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpXG4gICAgLCByZXN1bHQgPSBbXVxuICAgICwgaSAgICAgID0gMFxuICAgICwga2V5O1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXtcbiAgICBpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcblxuLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pXG5pZighVVNFX05BVElWRSl7XG4gICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKXtcbiAgICBpZih0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCl0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgIGlmKHRoaXMgPT09IE9iamVjdFByb3RvKSRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcbiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZihERVNDUklQVE9SUyAmJiBzZXR0ZXIpc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXR9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xuICB9O1xuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiAgID0gJGRlZmluZVByb3BlcnR5O1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmYgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmKERFU0NSSVBUT1JTICYmICFyZXF1aXJlKCcuL19saWJyYXJ5Jykpe1xuICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpO1xuICB9XG5cbiAgd2tzRXh0LmYgPSBmdW5jdGlvbihuYW1lKXtcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xuICB9XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtTeW1ib2w6ICRTeW1ib2x9KTtcblxuZm9yKHZhciBzeW1ib2xzID0gKFxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxuICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnXG4pLnNwbGl0KCcsJyksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3Moc3ltYm9sc1tpKytdKTtcblxuZm9yKHZhciBzeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrc0RlZmluZShzeW1ib2xzW2krK10pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xuICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSlcbiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKVxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XG4gIH0sXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpe1xuICAgIGlmKGlzU3ltYm9sKGtleSkpcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpO1xuICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTtcbiAgfSxcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHZhciBTID0gJFN5bWJvbCgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcbiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9Jztcbn0pKSwgJ0pTT04nLCB7XG4gIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXtcbiAgICBpZihpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSlyZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICB2YXIgYXJncyA9IFtpdF1cbiAgICAgICwgaSAgICA9IDFcbiAgICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICBpZigkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKXJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgICBpZigkcmVwbGFjZXIpdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcbiAgfVxufSk7XG5cbi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludClcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgJ1N5bWJvbCcpO1xuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcbi8vIDI0LjMuMyBKU09OW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTsiLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTsiLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ29ic2VydmFibGUnKTsiLCJyZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBJdGVyYXRvcnMgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCBUT19TVFJJTkdfVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7XG59IiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgbXNnKXtcbiAgaWYodHlwZW9mIGl0ICE9ICdudW1iZXInICYmIGNvZihpdCkgIT0gJ051bWJlcicpdGhyb3cgVHlwZUVycm9yKG1zZyk7XG4gIHJldHVybiAraXQ7XG59OyIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpXG4gICwgQXJyYXlQcm90byAgPSBBcnJheS5wcm90b3R5cGU7XG5pZihBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTsiLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9JbmRleCAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0Lyo9IDAqLywgc3RhcnQvKj0gMCwgZW5kID0gQGxlbmd0aCovKXtcbiAgdmFyIE8gICAgID0gdG9PYmplY3QodGhpcylcbiAgICAsIGxlbiAgID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgLCB0byAgICA9IHRvSW5kZXgodGFyZ2V0LCBsZW4pXG4gICAgLCBmcm9tICA9IHRvSW5kZXgoc3RhcnQsIGxlbilcbiAgICAsIGVuZCAgID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICAsIGNvdW50ID0gTWF0aC5taW4oKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogdG9JbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pXG4gICAgLCBpbmMgICA9IDE7XG4gIGlmKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCl7XG4gICAgaW5jICA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICAgKz0gY291bnQgLSAxO1xuICB9XG4gIHdoaWxlKGNvdW50LS0gPiAwKXtcbiAgICBpZihmcm9tIGluIE8pT1t0b10gPSBPW2Zyb21dO1xuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xuICAgIHRvICAgKz0gaW5jO1xuICAgIGZyb20gKz0gaW5jO1xuICB9IHJldHVybiBPO1xufTsiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbid1c2Ugc3RyaWN0JztcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9JbmRleCAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQgPSAwLCBlbmQgPSBAbGVuZ3RoICovKXtcbiAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ICA9IHRvSW5kZXgoYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGxlbmd0aClcbiAgICAsIGVuZCAgICA9IGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkXG4gICAgLCBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpO1xuICB3aGlsZShlbmRQb3MgPiBpbmRleClPW2luZGV4KytdID0gdmFsdWU7XG4gIHJldHVybiBPO1xufTsiLCJ2YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyLCBJVEVSQVRPUil7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIElPYmplY3QgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBhc2MgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRZUEUsICRjcmVhdGUpe1xuICB2YXIgSVNfTUFQICAgICAgICA9IFRZUEUgPT0gMVxuICAgICwgSVNfRklMVEVSICAgICA9IFRZUEUgPT0gMlxuICAgICwgSVNfU09NRSAgICAgICA9IFRZUEUgPT0gM1xuICAgICwgSVNfRVZFUlkgICAgICA9IFRZUEUgPT0gNFxuICAgICwgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNlxuICAgICwgTk9fSE9MRVMgICAgICA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYXG4gICAgLCBjcmVhdGUgICAgICAgID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCl7XG4gICAgdmFyIE8gICAgICA9IHRvT2JqZWN0KCR0aGlzKVxuICAgICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgICAsIGYgICAgICA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gMFxuICAgICAgLCByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkXG4gICAgICAsIHZhbCwgcmVzO1xuICAgIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZil7XG4gICAgICB2YWwgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XG4gICAgICBpZihUWVBFKXtcbiAgICAgICAgaWYoSVNfTUFQKXJlc3VsdFtpbmRleF0gPSByZXM7ICAgICAgICAgICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYocmVzKXN3aXRjaChUWVBFKXtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmKElTX0VWRVJZKXJldHVybiBmYWxzZTsgICAgICAgICAgLy8gZXZlcnlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHJlc3VsdDtcbiAgfTtcbn07IiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSU9iamVjdCAgID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgY2FsbGJhY2tmbiwgYUxlbiwgbWVtbywgaXNSaWdodCl7XG4gIGFGdW5jdGlvbihjYWxsYmFja2ZuKTtcbiAgdmFyIE8gICAgICA9IHRvT2JqZWN0KHRoYXQpXG4gICAgLCBzZWxmICAgPSBJT2JqZWN0KE8pXG4gICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIGluZGV4ICA9IGlzUmlnaHQgPyBsZW5ndGggLSAxIDogMFxuICAgICwgaSAgICAgID0gaXNSaWdodCA/IC0xIDogMTtcbiAgaWYoYUxlbiA8IDIpZm9yKDs7KXtcbiAgICBpZihpbmRleCBpbiBzZWxmKXtcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgaW5kZXggKz0gaTtcbiAgICBpZihpc1JpZ2h0ID8gaW5kZXggPCAwIDogbGVuZ3RoIDw9IGluZGV4KXtcbiAgICAgIHRocm93IFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgIH1cbiAgfVxuICBmb3IoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpaWYoaW5kZXggaW4gc2VsZil7XG4gICAgbWVtbyA9IGNhbGxiYWNrZm4obWVtbywgc2VsZltpbmRleF0sIGluZGV4LCBPKTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn07IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBpc0FycmF5ICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5JylcbiAgLCBTUEVDSUVTICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwpe1xuICB2YXIgQztcbiAgaWYoaXNBcnJheShvcmlnaW5hbCkpe1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSlDID0gdW5kZWZpbmVkO1xuICAgIGlmKGlzT2JqZWN0KEMpKXtcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xuICAgICAgaWYoQyA9PT0gbnVsbClDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTsiLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsLCBsZW5ndGgpe1xuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGlzT2JqZWN0ICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGludm9rZSAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZVxuICAsIGZhY3RvcmllcyAgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uKEYsIGxlbiwgYXJncyl7XG4gIGlmKCEobGVuIGluIGZhY3Rvcmllcykpe1xuICAgIGZvcih2YXIgbiA9IFtdLCBpID0gMDsgaSA8IGxlbjsgaSsrKW5baV0gPSAnYVsnICsgaSArICddJztcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiwgYXJncy4uLiAqLyl7XG4gIHZhciBmbiAgICAgICA9IGFGdW5jdGlvbih0aGlzKVxuICAgICwgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24oLyogYXJncy4uLiAqLyl7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG4gIGlmKGlzT2JqZWN0KGZuLnByb3RvdHlwZSkpYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xuICByZXR1cm4gYm91bmQ7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBjcmVhdGUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBjdHggICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCBmb3JPZiAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpXG4gICwgc3RlcCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKVxuICAsIHNldFNwZWNpZXMgID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIGZhc3RLZXkgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXlcbiAgLCBTSVpFICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19zJyA6ICdzaXplJztcblxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24odGhhdCwga2V5KXtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KSwgZW50cnk7XG4gIGlmKGluZGV4ICE9PSAnRicpcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgaWYoZW50cnkuayA9PSBrZXkpcmV0dXJuIGVudHJ5O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpe1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5faSA9IGNyZWF0ZShudWxsKTsgLy8gaW5kZXhcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XG4gICAgICB0aGF0W1NJWkVdID0gMDsgICAgICAgICAvLyBzaXplXG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCl7XG4gICAgICAgIGZvcih2YXIgdGhhdCA9IHRoaXMsIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmKGVudHJ5LnApZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAgICwgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZihlbnRyeSl7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uXG4gICAgICAgICAgICAsIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmKHByZXYpcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZihuZXh0KW5leHQucCA9IHByZXY7XG4gICAgICAgICAgaWYodGhhdC5fZiA9PSBlbnRyeSl0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZih0aGF0Ll9sID09IGVudHJ5KXRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGlzLCBDLCAnZm9yRWFjaCcpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMylcbiAgICAgICAgICAsIGVudHJ5O1xuICAgICAgICB3aGlsZShlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2Ype1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYoREVTQ1JJUFRPUlMpZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICByZXR1cm4gZGVmaW5lZCh0aGlzW1NJWkVdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbih0aGF0LCBrZXksIHZhbHVlKXtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpXG4gICAgICAsIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmKGVudHJ5KXtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmKCF0aGF0Ll9mKXRoYXQuX2YgPSBlbnRyeTtcbiAgICAgIGlmKHByZXYpcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmKGluZGV4ICE9PSAnRicpdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24oQywgTkFNRSwgSVNfTUFQKXtcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXG4gICAgJGl0ZXJEZWZpbmUoQywgTkFNRSwgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuICAgICAgdGhpcy5fdCA9IGl0ZXJhdGVkOyAgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICwga2luZCAgPSB0aGF0Ll9rXG4gICAgICAgICwgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XG4gICAgICBpZighdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKXtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycgLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcbiAgfVxufTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIGZyb20gICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUpe1xuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCl7XG4gICAgaWYoY2xhc3NvZih0aGlzKSAhPSBOQU1FKXRocm93IFR5cGVFcnJvcihOQU1FICsgXCIjdG9KU09OIGlzbid0IGdlbmVyaWNcIik7XG4gICAgcmV0dXJuIGZyb20odGhpcyk7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgZ2V0V2VhayAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZ2V0V2Vha1xuICAsIGFuT2JqZWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpXG4gICwgJGhhcyAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIGFycmF5RmluZCAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNSlcbiAgLCBhcnJheUZpbmRJbmRleCAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpXG4gICwgaWQgICAgICAgICAgICAgICAgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24odGhhdCl7XG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUpO1xufTtcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hID0gW107XG59O1xudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uKHN0b3JlLCBrZXkpe1xuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgfSk7XG59O1xuVW5jYXVnaHRGcm96ZW5TdG9yZS5wcm90b3R5cGUgPSB7XG4gIGdldDogZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZihlbnRyeSlyZXR1cm4gZW50cnlbMV07XG4gIH0sXG4gIGhhczogZnVuY3Rpb24oa2V5KXtcbiAgICByZXR1cm4gISFmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZihlbnRyeSllbnRyeVsxXSA9IHZhbHVlO1xuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSxcbiAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbihpdCl7XG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcbiAgICB9KTtcbiAgICBpZih+aW5kZXgpdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuICEhfmluZGV4O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpe1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBpdGVyYWJsZSl7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgLy8gbGVhayBzdG9yZSBmb3IgdW5jYXVnaHQgZnJvemVuIG9iamVjdHNcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy40LjMuMyBXZWFrU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYoZGF0YSA9PT0gdHJ1ZSlyZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGlzKVsnZGVsZXRlJ10oa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4zLjMuNCBXZWFrTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgaWYoIWlzT2JqZWN0KGtleSkpcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgICAgaWYoZGF0YSA9PT0gdHJ1ZSlyZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGlzKS5oYXMoa2V5KTtcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbih0aGF0LCBrZXksIHZhbHVlKXtcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XG4gICAgaWYoZGF0YSA9PT0gdHJ1ZSl1bmNhdWdodEZyb3plblN0b3JlKHRoYXQpLnNldChrZXksIHZhbHVlKTtcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhhdDtcbiAgfSxcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsICRleHBvcnQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCByZWRlZmluZUFsbCAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgbWV0YSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJylcbiAgLCBmb3JPZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgYW5JbnN0YW5jZSAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGZhaWxzICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsICRpdGVyRGV0ZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKVxuICAsIHNldFRvU3RyaW5nVGFnICAgID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKXtcbiAgdmFyIEJhc2UgID0gZ2xvYmFsW05BTUVdXG4gICAgLCBDICAgICA9IEJhc2VcbiAgICAsIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJ1xuICAgICwgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlXG4gICAgLCBPICAgICA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24oS0VZKXtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbihhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSl7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYil7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZih0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKXtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlICAgICAgICAgICAgID0gbmV3IENcbiAgICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcbiAgICAgICwgSEFTTlRfQ0hBSU5JTkcgICAgICAgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlXG4gICAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICAgICwgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbigpeyBpbnN0YW5jZS5oYXMoMSk7IH0pXG4gICAgICAvLyBtb3N0IGVhcmx5IGltcGxlbWVudGF0aW9ucyBkb2Vzbid0IHN1cHBvcnRzIGl0ZXJhYmxlcywgbW9zdCBtb2Rlcm4gLSBub3QgY2xvc2UgaXQgY29ycmVjdGx5XG4gICAgICAsIEFDQ0VQVF9JVEVSQUJMRVMgICAgID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24oaXRlcil7IG5ldyBDKGl0ZXIpOyB9KSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgICAsIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKClcbiAgICAgICAgICAsIGluZGV4ICAgICA9IDU7XG4gICAgICAgIHdoaWxlKGluZGV4LS0pJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xuICAgICAgfSk7XG4gICAgaWYoIUFDQ0VQVF9JVEVSQUJMRVMpeyBcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRhcmdldCwgaXRlcmFibGUpe1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UsIHRhcmdldCwgQyk7XG4gICAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZihUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKXtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpZml4TWV0aG9kKEFEREVSKTtcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxuICAgIGlmKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmKCFJU19XRUFLKWNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgY3JlYXRlRGVzYyAgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgaW5kZXgsIHZhbHVlKXtcbiAgaWYoaW5kZXggaW4gb2JqZWN0KSRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIE5VTUJFUiAgICAgID0gJ251bWJlcic7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaGludCl7XG4gIGlmKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmUgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcbiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcbiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcbiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXVxuICAgICwgZXhwb3J0cyAgID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSlcbiAgICAsIGV4cFByb3RvICA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pXG4gICAgLCBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYodGFyZ2V0KXJlZGVmaW5lKHRhcmdldCwga2V5LCBvdXQsIHR5cGUgJiAkZXhwb3J0LlUpO1xuICAgIC8vIGV4cG9ydFxuICAgIGlmKGV4cG9ydHNba2V5XSAhPSBvdXQpaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYoSVNfUFJPVE8gJiYgZXhwUHJvdG9ba2V5XSAhPSBvdXQpZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7IiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaChlKXtcbiAgICB0cnkge1xuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xuICAgIH0gY2F0Y2goZil7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGhpZGUgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgZmFpbHMgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCB3a3MgICAgICA9IHJlcXVpcmUoJy4vX3drcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgbGVuZ3RoLCBleGVjKXtcbiAgdmFyIFNZTUJPTCAgID0gd2tzKEtFWSlcbiAgICAsIGZucyAgICAgID0gZXhlYyhkZWZpbmVkLCBTWU1CT0wsICcnW0tFWV0pXG4gICAgLCBzdHJmbiAgICA9IGZuc1swXVxuICAgICwgcnhmbiAgICAgPSBmbnNbMV07XG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbigpeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KSl7XG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbihzdHJpbmcsIGFyZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24oc3RyaW5nKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XG4gICAgKTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7XG4gIHZhciB0aGF0ICAgPSBhbk9iamVjdCh0aGlzKVxuICAgICwgcmVzdWx0ID0gJyc7XG4gIGlmKHRoYXQuZ2xvYmFsKSAgICAgcmVzdWx0ICs9ICdnJztcbiAgaWYodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZih0aGF0Lm11bHRpbGluZSkgIHJlc3VsdCArPSAnbSc7XG4gIGlmKHRoYXQudW5pY29kZSkgICAgcmVzdWx0ICs9ICd1JztcbiAgaWYodGhhdC5zdGlja3kpICAgICByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCB0YXJnZXQsIEMpe1xuICB2YXIgUCwgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgaWYoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZil7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59OyIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBmbG9vciAgICA9IE1hdGguZmxvb3I7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCl7XG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xufTsiLCIvLyA3LjIuOCBJc1JlZ0V4cChhcmd1bWVudClcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgY29mICAgICAgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIE1BVENIICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7IiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwbTEgPSBNYXRoLmV4cG0xO1xubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiB4ID4gLTFlLTYgJiYgeCA8IDFlLTYgPyB4ICsgeCAqIHggLyAyIDogTWF0aC5leHAoeCkgLSAxO1xufSA6ICRleHBtMTsiLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmxvZzFwIHx8IGZ1bmN0aW9uIGxvZzFwKHgpe1xuICByZXR1cm4gKHggPSAreCkgPiAtMWUtOCAmJiB4IDwgMWUtOCA/IHggLSB4ICogeCAvIDIgOiBNYXRoLmxvZygxICsgeCk7XG59OyIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCl7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcbn07IiwidmFyIE1hcCAgICAgPSByZXF1aXJlKCcuL2VzNi5tYXAnKVxuICAsICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNoYXJlZCAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKVxuICAsIHN0b3JlICAgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAocmVxdWlyZSgnLi9lczYud2Vhay1tYXAnKSkpO1xuXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5LCBjcmVhdGUpe1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgaWYoIXRhcmdldE1ldGFkYXRhKXtcbiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7XG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKTtcbiAgfVxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcbiAgaWYoIWtleU1ldGFkYXRhKXtcbiAgICBpZighY3JlYXRlKXJldHVybiB1bmRlZmluZWQ7XG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKTtcbiAgfSByZXR1cm4ga2V5TWV0YWRhdGE7XG59O1xudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbn07XG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKXtcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xufTtcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCh0YXJnZXQsIHRhcmdldEtleSwgZmFsc2UpXG4gICAgLCBrZXlzICAgICAgICA9IFtdO1xuICBpZihtZXRhZGF0YU1hcCltZXRhZGF0YU1hcC5mb3JFYWNoKGZ1bmN0aW9uKF8sIGtleSl7IGtleXMucHVzaChrZXkpOyB9KTtcbiAgcmV0dXJuIGtleXM7XG59O1xudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcbnZhciBleHAgPSBmdW5jdGlvbihPKXtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RvcmU6IHN0b3JlLFxuICBtYXA6IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAsXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxuICBzZXQ6IG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEsXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxuICBrZXk6IHRvTWV0YUtleSxcbiAgZXhwOiBleHBcbn07IiwiLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyl8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbigpeyAvKiBlbXB0eSAqL30pO1xuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XG59KTsiLCJ2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGlzRW51bSAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpc0VudHJpZXMpe1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QoaXQpXG4gICAgICAsIGtleXMgICA9IGdldEtleXMoTylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaSAgICAgID0gMFxuICAgICAgLCByZXN1bHQgPSBbXVxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChPLCBrZXkgPSBrZXlzW2krK10pKXtcbiAgICAgIHJlc3VsdC5wdXNoKGlzRW50cmllcyA/IFtrZXksIE9ba2V5XV0gOiBPW2tleV0pO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn07IiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xudmFyIGdPUE4gICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKVxuICAsIGdPUFMgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBSZWZsZWN0ICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpe1xuICB2YXIga2V5cyAgICAgICA9IGdPUE4uZihhbk9iamVjdChpdCkpXG4gICAgLCBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XG59OyIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXRcbiAgLCAkdHJpbSAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcblxubW9kdWxlLmV4cG9ydHMgPSAxIC8gJHBhcnNlRmxvYXQocmVxdWlyZSgnLi9fc3RyaW5nLXdzJykgKyAnLTAnKSAhPT0gLUluZmluaXR5ID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHIpe1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpXG4gICAgLCByZXN1bHQgPSAkcGFyc2VGbG9hdChzdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XG59IDogJHBhcnNlRmxvYXQ7IiwidmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlSW50XG4gICwgJHRyaW0gICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltXG4gICwgd3MgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJylcbiAgLCBoZXggICAgICAgPSAvXltcXC0rXT8wW3hYXS87XG5cbm1vZHVsZS5leHBvcnRzID0gJHBhcnNlSW50KHdzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdzICsgJzB4MTYnKSAhPT0gMjIgPyBmdW5jdGlvbiBwYXJzZUludChzdHIsIHJhZGl4KXtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50OyIsIid1c2Ugc3RyaWN0JztcbnZhciBwYXRoICAgICAgPSByZXF1aXJlKCcuL19wYXRoJylcbiAgLCBpbnZva2UgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oLyogLi4ucGFyZ3MgKi8pe1xuICB2YXIgZm4gICAgID0gYUZ1bmN0aW9uKHRoaXMpXG4gICAgLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBwYXJncyAgPSBBcnJheShsZW5ndGgpXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBfICAgICAgPSBwYXRoLl9cbiAgICAsIGhvbGRlciA9IGZhbHNlO1xuICB3aGlsZShsZW5ndGggPiBpKWlmKChwYXJnc1tpXSA9IGFyZ3VtZW50c1tpKytdKSA9PT0gXylob2xkZXIgPSB0cnVlO1xuICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIGogPSAwLCBrID0gMCwgYXJncztcbiAgICBpZighaG9sZGVyICYmICFhTGVuKXJldHVybiBpbnZva2UoZm4sIHBhcmdzLCB0aGF0KTtcbiAgICBhcmdzID0gcGFyZ3Muc2xpY2UoKTtcbiAgICBpZihob2xkZXIpZm9yKDtsZW5ndGggPiBqOyBqKyspaWYoYXJnc1tqXSA9PT0gXylhcmdzW2pdID0gYXJndW1lbnRzW2srK107XG4gICAgd2hpbGUoYUxlbiA+IGspYXJncy5wdXNoKGFyZ3VtZW50c1trKytdKTtcbiAgICByZXR1cm4gaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKTsiLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYylyZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFNSQyAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKVxuICAsIFRPX1NUUklORyA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddXG4gICwgVFBMICAgICAgID0gKCcnICsgJHRvU3RyaW5nKS5zcGxpdChUT19TVFJJTkcpO1xuXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIGtleSwgdmFsLCBzYWZlKXtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xuICBpZihPW2tleV0gPT09IHZhbClyZXR1cm47XG4gIGlmKGlzRnVuY3Rpb24paGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmKE8gPT09IGdsb2JhbCl7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGlmKCFzYWZlKXtcbiAgICAgIGRlbGV0ZSBPW2tleV07XG4gICAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoT1trZXldKU9ba2V5XSA9IHZhbDtcbiAgICAgIGVsc2UgaGlkZShPLCBrZXksIHZhbCk7XG4gICAgfVxuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHJlZ0V4cCwgcmVwbGFjZSl7XG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uKHBhcnQpe1xuICAgIHJldHVybiByZXBsYWNlW3BhcnRdO1xuICB9IDogcmVwbGFjZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xuICB9O1xufTsiLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpe1xuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgU1BFQ0lFUyAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSl7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFU10pZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH1cbiAgfSk7XG59OyIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWV0aG9kLCBhcmcpe1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbigpe30sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XG4gIH0pO1xufTsiLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpe1xuICBpZihpc1JlZ0V4cChzZWFyY2hTdHJpbmcpKXRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgcXVvdCAgICA9IC9cIi9nO1xuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXG52YXIgY3JlYXRlSFRNTCA9IGZ1bmN0aW9uKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gIHZhciBTICA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpXG4gICAgLCBwMSA9ICc8JyArIHRhZztcbiAgaWYoYXR0cmlidXRlICE9PSAnJylwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIFN0cmluZyh2YWx1ZSkucmVwbGFjZShxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5BTUUsIGV4ZWMpe1xuICB2YXIgTyA9IHt9O1xuICBPW05BTUVdID0gZXhlYyhjcmVhdGVIVE1MKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpe1xuICAgIHZhciB0ZXN0ID0gJydbTkFNRV0oJ1wiJyk7XG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XG4gIH0pLCAnU3RyaW5nJywgTyk7XG59OyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIHJlcGVhdCAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KXtcbiAgdmFyIFMgICAgICAgICAgICA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICwgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGhcbiAgICAsIGZpbGxTdHIgICAgICA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKVxuICAgICwgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTtcbiAgaWYoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKXJldHVybiBTO1xuICB2YXIgZmlsbExlbiA9IGludE1heExlbmd0aCAtIHN0cmluZ0xlbmd0aFxuICAgICwgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgTWF0aC5jZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICBpZihzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbilzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XG4gIHJldHVybiBsZWZ0ID8gc3RyaW5nRmlsbGVyICsgUyA6IFMgKyBzdHJpbmdGaWxsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGRlZmluZWQgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiByZXBlYXQoY291bnQpe1xuICB2YXIgc3RyID0gU3RyaW5nKGRlZmluZWQodGhpcykpXG4gICAgLCByZXMgPSAnJ1xuICAgICwgbiAgID0gdG9JbnRlZ2VyKGNvdW50KTtcbiAgaWYobiA8IDAgfHwgbiA9PSBJbmZpbml0eSl0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XG4gIGZvcig7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKWlmKG4gJiAxKXJlcyArPSBzdHI7XG4gIHJldHVybiByZXM7XG59OyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzcGFjZXMgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJylcbiAgLCBzcGFjZSAgID0gJ1snICsgc3BhY2VzICsgJ10nXG4gICwgbm9uICAgICA9ICdcXHUyMDBiXFx1MDA4NSdcbiAgLCBsdHJpbSAgID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpXG4gICwgcnRyaW0gICA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uKEtFWSwgZXhlYywgQUxJQVMpe1xuICB2YXIgZXhwICAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYoQUxJQVMpZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uKHN0cmluZywgVFlQRSl7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZihUWVBFICYgMSlzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZihUWVBFICYgMilzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjsiLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7IiwiJ3VzZSBzdHJpY3QnO1xuaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSl7XG4gIHZhciBMSUJSQVJZICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICAgLCBnbG9iYWwgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgICAsIGZhaWxzICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICAgLCAkZXhwb3J0ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgICAsICR0eXBlZCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpXG4gICAgLCAkYnVmZmVyICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJylcbiAgICAsIGN0eCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAgICwgYW5JbnN0YW5jZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgICAsIHByb3BlcnR5RGVzYyAgICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgICAsIGhpZGUgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgICAsIHJlZGVmaW5lQWxsICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAgICwgdG9JbnRlZ2VyICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAgICwgdG9MZW5ndGggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICAgLCB0b0luZGV4ICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAgICwgdG9QcmltaXRpdmUgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICAgLCBoYXMgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgICAsIHNhbWUgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19zYW1lLXZhbHVlJylcbiAgICAsIGNsYXNzb2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgICAsIGlzT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAgICwgdG9PYmplY3QgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICAgLCBpc0FycmF5SXRlciAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpXG4gICAgLCBjcmVhdGUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICAgLCBnZXRQcm90b3R5cGVPZiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICAgLCBnT1BOICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICAgLCBnZXRJdGVyRm4gICAgICAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKVxuICAgICwgdWlkICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICAgLCB3a3MgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgICAsIGNyZWF0ZUFycmF5TWV0aG9kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJylcbiAgICAsIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpXG4gICAgLCBzcGVjaWVzQ29uc3RydWN0b3IgID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpXG4gICAgLCBBcnJheUl0ZXJhdG9ycyAgICAgID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKVxuICAgICwgSXRlcmF0b3JzICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICAgLCAkaXRlckRldGVjdCAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKVxuICAgICwgc2V0U3BlY2llcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJylcbiAgICAsIGFycmF5RmlsbCAgICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJylcbiAgICAsIGFycmF5Q29weVdpdGhpbiAgICAgPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpXG4gICAgLCAkRFAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgICAsICRHT1BEICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICAgLCBkUCAgICAgICAgICAgICAgICAgID0gJERQLmZcbiAgICAsIGdPUEQgICAgICAgICAgICAgICAgPSAkR09QRC5mXG4gICAgLCBSYW5nZUVycm9yICAgICAgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3JcbiAgICAsIFR5cGVFcnJvciAgICAgICAgICAgPSBnbG9iYWwuVHlwZUVycm9yXG4gICAgLCBVaW50OEFycmF5ICAgICAgICAgID0gZ2xvYmFsLlVpbnQ4QXJyYXlcbiAgICAsIEFSUkFZX0JVRkZFUiAgICAgICAgPSAnQXJyYXlCdWZmZXInXG4gICAgLCBTSEFSRURfQlVGRkVSICAgICAgID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVJcbiAgICAsIEJZVEVTX1BFUl9FTEVNRU5UICAgPSAnQllURVNfUEVSX0VMRU1FTlQnXG4gICAgLCBQUk9UT1RZUEUgICAgICAgICAgID0gJ3Byb3RvdHlwZSdcbiAgICAsIEFycmF5UHJvdG8gICAgICAgICAgPSBBcnJheVtQUk9UT1RZUEVdXG4gICAgLCAkQXJyYXlCdWZmZXIgICAgICAgID0gJGJ1ZmZlci5BcnJheUJ1ZmZlclxuICAgICwgJERhdGFWaWV3ICAgICAgICAgICA9ICRidWZmZXIuRGF0YVZpZXdcbiAgICAsIGFycmF5Rm9yRWFjaCAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgwKVxuICAgICwgYXJyYXlGaWx0ZXIgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpXG4gICAgLCBhcnJheVNvbWUgICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMylcbiAgICAsIGFycmF5RXZlcnkgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg0KVxuICAgICwgYXJyYXlGaW5kICAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpXG4gICAgLCBhcnJheUZpbmRJbmRleCAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNilcbiAgICAsIGFycmF5SW5jbHVkZXMgICAgICAgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpXG4gICAgLCBhcnJheUluZGV4T2YgICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyhmYWxzZSlcbiAgICAsIGFycmF5VmFsdWVzICAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXNcbiAgICAsIGFycmF5S2V5cyAgICAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy5rZXlzXG4gICAgLCBhcnJheUVudHJpZXMgICAgICAgID0gQXJyYXlJdGVyYXRvcnMuZW50cmllc1xuICAgICwgYXJyYXlMYXN0SW5kZXhPZiAgICA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2ZcbiAgICAsIGFycmF5UmVkdWNlICAgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZVxuICAgICwgYXJyYXlSZWR1Y2VSaWdodCAgICA9IEFycmF5UHJvdG8ucmVkdWNlUmlnaHRcbiAgICAsIGFycmF5Sm9pbiAgICAgICAgICAgPSBBcnJheVByb3RvLmpvaW5cbiAgICAsIGFycmF5U29ydCAgICAgICAgICAgPSBBcnJheVByb3RvLnNvcnRcbiAgICAsIGFycmF5U2xpY2UgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlXG4gICAgLCBhcnJheVRvU3RyaW5nICAgICAgID0gQXJyYXlQcm90by50b1N0cmluZ1xuICAgICwgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmdcbiAgICAsIElURVJBVE9SICAgICAgICAgICAgPSB3a3MoJ2l0ZXJhdG9yJylcbiAgICAsIFRBRyAgICAgICAgICAgICAgICAgPSB3a3MoJ3RvU3RyaW5nVGFnJylcbiAgICAsIFRZUEVEX0NPTlNUUlVDVE9SICAgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJylcbiAgICAsIERFRl9DT05TVFJVQ1RPUiAgICAgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpXG4gICAgLCBBTExfQ09OU1RSVUNUT1JTICAgID0gJHR5cGVkLkNPTlNUUlxuICAgICwgVFlQRURfQVJSQVkgICAgICAgICA9ICR0eXBlZC5UWVBFRFxuICAgICwgVklFVyAgICAgICAgICAgICAgICA9ICR0eXBlZC5WSUVXXG4gICAgLCBXUk9OR19MRU5HVEggICAgICAgID0gJ1dyb25nIGxlbmd0aCEnO1xuXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24oTywgbGVuZ3RoKXtcbiAgICByZXR1cm4gYWxsb2NhdGUoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxlbmd0aCk7XG4gIH0pO1xuXG4gIHZhciBMSVRUTEVfRU5ESUFOID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA9PT0gMTtcbiAgfSk7XG5cbiAgdmFyIEZPUkNFRF9TRVQgPSAhIVVpbnQ4QXJyYXkgJiYgISFVaW50OEFycmF5W1BST1RPVFlQRV0uc2V0ICYmIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcbiAgfSk7XG5cbiAgdmFyIHN0cmljdFRvTGVuZ3RoID0gZnVuY3Rpb24oaXQsIFNBTUUpe1xuICAgIGlmKGl0ID09PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdmFyIG51bWJlciA9ICtpdFxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChpdCk7XG4gICAgaWYoU0FNRSAmJiAhc2FtZShudW1iZXIsIGxlbmd0aCkpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHJldHVybiBsZW5ndGg7XG4gIH07XG5cbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24oaXQsIEJZVEVTKXtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcbiAgICBpZihvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKXRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9O1xuXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgICBpZihpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpcmV0dXJuIGl0O1xuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XG4gIH07XG5cbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24oQywgbGVuZ3RoKXtcbiAgICBpZighKGlzT2JqZWN0KEMpICYmIFRZUEVEX0NPTlNUUlVDVE9SIGluIEMpKXtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSXQgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IhJyk7XG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24oTywgbGlzdCl7XG4gICAgcmV0dXJuIGZyb21MaXN0KHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsaXN0KTtcbiAgfTtcblxuICB2YXIgZnJvbUxpc3QgPSBmdW5jdGlvbihDLCBsaXN0KXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBsZW5ndGggPSBsaXN0Lmxlbmd0aFxuICAgICAgLCByZXN1bHQgPSBhbGxvY2F0ZShDLCBsZW5ndGgpO1xuICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uKGl0LCBrZXksIGludGVybmFsKXtcbiAgICBkUChpdCwga2V5LCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH19KTtcbiAgfTtcblxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiwgbWFwZm4sIHRoaXNBcmcgKi8pe1xuICAgIHZhciBPICAgICAgID0gdG9PYmplY3Qoc291cmNlKVxuICAgICAgLCBhTGVuICAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWRcbiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKVxuICAgICAgLCBpLCBsZW5ndGgsIHZhbHVlcywgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICFpc0FycmF5SXRlcihpdGVyRm4pKXtcbiAgICAgIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKXtcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XG4gICAgICB9IE8gPSB2YWx1ZXM7XG4gICAgfVxuICAgIGlmKG1hcHBpbmcgJiYgYUxlbiA+IDIpbWFwZm4gPSBjdHgobWFwZm4sIGFyZ3VtZW50c1syXSwgMik7XG4gICAgZm9yKGkgPSAwLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCksIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7IGxlbmd0aCA+IGk7IGkrKyl7XG4gICAgICByZXN1bHRbaV0gPSBtYXBwaW5nID8gbWFwZm4oT1tpXSwgaSkgOiBPW2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKi4uLml0ZW1zKi8pe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcbiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IFVpbnQ4QXJyYXkoMSkpOyB9KTtcblxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKXtcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIHZhciBwcm90byA9IHtcbiAgICBjb3B5V2l0aGluOiBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyosIGVuZCAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheUV2ZXJ5KHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qLCBzdGFydCwgZW5kICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcbiAgICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgocHJlZGljYXRlIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgYXJyYXlGb3JFYWNoKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXtcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gJG1hcCh2YWxpZGF0ZSh0aGlzKSwgbWFwZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyosIGluaXRpYWxWYWx1ZSAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qLCBpbml0aWFsVmFsdWUgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKXtcbiAgICAgIHZhciB0aGF0ICAgPSB0aGlzXG4gICAgICAgICwgbGVuZ3RoID0gdmFsaWRhdGUodGhhdCkubGVuZ3RoXG4gICAgICAgICwgbWlkZGxlID0gTWF0aC5mbG9vcihsZW5ndGggLyAyKVxuICAgICAgICAsIGluZGV4ICA9IDBcbiAgICAgICAgLCB2YWx1ZTtcbiAgICAgIHdoaWxlKGluZGV4IDwgbWlkZGxlKXtcbiAgICAgICAgdmFsdWUgICAgICAgICA9IHRoYXRbaW5kZXhdO1xuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XG4gICAgICAgIHRoYXRbbGVuZ3RoXSAgPSB2YWx1ZTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfSxcbiAgICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pe1xuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xuICAgIH0sXG4gICAgc3ViYXJyYXk6IGZ1bmN0aW9uIHN1YmFycmF5KGJlZ2luLCBlbmQpe1xuICAgICAgdmFyIE8gICAgICA9IHZhbGlkYXRlKHRoaXMpXG4gICAgICAgICwgbGVuZ3RoID0gTy5sZW5ndGhcbiAgICAgICAgLCAkYmVnaW4gPSB0b0luZGV4KGJlZ2luLCBsZW5ndGgpO1xuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxuICAgICAgICBPLmJ1ZmZlcixcbiAgICAgICAgTy5ieXRlT2Zmc2V0ICsgJGJlZ2luICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpe1xuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XG4gIH07XG5cbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qLCBvZmZzZXQgKi8pe1xuICAgIHZhbGlkYXRlKHRoaXMpO1xuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpXG4gICAgICAsIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgICAsIHNyYyAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgbGVuICAgID0gdG9MZW5ndGgoc3JjLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gMDtcbiAgICBpZihsZW4gKyBvZmZzZXQgPiBsZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHdoaWxlKGluZGV4IDwgbGVuKXRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xuICB9O1xuXG4gIHZhciAkaXRlcmF0b3JzID0ge1xuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKXtcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICBrZXlzOiBmdW5jdGlvbiBrZXlzKCl7XG4gICAgICByZXR1cm4gYXJyYXlLZXlzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKXtcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzVEFJbmRleCA9IGZ1bmN0aW9uKHRhcmdldCwga2V5KXtcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxuICAgICAgJiYgdGFyZ2V0W1RZUEVEX0FSUkFZXVxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xuICAgICAgJiYga2V5IGluIHRhcmdldFxuICAgICAgJiYgU3RyaW5nKCtrZXkpID09IFN0cmluZyhrZXkpO1xuICB9O1xuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpe1xuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgPyBwcm9wZXJ0eURlc2MoMiwgdGFyZ2V0W2tleV0pXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xuICB9O1xuICB2YXIgJHNldERlc2MgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzYyl7XG4gICAgaWYoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgICYmIGlzT2JqZWN0KGRlc2MpXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXG4gICAgICAmJiAhaGFzKGRlc2MsICdzZXQnKVxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ3dyaXRhYmxlJykgfHwgZGVzYy53cml0YWJsZSlcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxuICAgICl7XG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH0gZWxzZSByZXR1cm4gZFAodGFyZ2V0LCBrZXksIGRlc2MpO1xuICB9O1xuXG4gIGlmKCFBTExfQ09OU1RSVUNUT1JTKXtcbiAgICAkR09QRC5mID0gJGdldERlc2M7XG4gICAgJERQLmYgICA9ICRzZXREZXNjO1xuICB9XG5cbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXREZXNjLFxuICAgIGRlZmluZVByb3BlcnR5OiAgICAgICAgICAgJHNldERlc2NcbiAgfSk7XG5cbiAgaWYoZmFpbHMoZnVuY3Rpb24oKXsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpe1xuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAkaXRlcmF0b3JzKTtcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xuICAgIHNsaWNlOiAgICAgICAgICAkc2xpY2UsXG4gICAgc2V0OiAgICAgICAgICAgICRzZXQsXG4gICAgY29uc3RydWN0b3I6ICAgIGZ1bmN0aW9uKCl7IC8qIG5vb3AgKi8gfSxcbiAgICB0b1N0cmluZzogICAgICAgYXJyYXlUb1N0cmluZyxcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXG4gIH0pO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnVmZmVyJywgJ2InKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdsZW5ndGgnLCAnZScpO1xuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbVFlQRURfQVJSQVldOyB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCl7XG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcbiAgICB2YXIgTkFNRSAgICAgICA9IEtFWSArIChDTEFNUEVEID8gJ0NsYW1wZWQnIDogJycpICsgJ0FycmF5J1xuICAgICAgLCBJU05UX1VJTlQ4ID0gTkFNRSAhPSAnVWludDhBcnJheSdcbiAgICAgICwgR0VUVEVSICAgICA9ICdnZXQnICsgS0VZXG4gICAgICAsIFNFVFRFUiAgICAgPSAnc2V0JyArIEtFWVxuICAgICAgLCBUeXBlZEFycmF5ID0gZ2xvYmFsW05BTUVdXG4gICAgICAsIEJhc2UgICAgICAgPSBUeXBlZEFycmF5IHx8IHt9XG4gICAgICAsIFRBQyAgICAgICAgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpXG4gICAgICAsIEZPUkNFRCAgICAgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVlxuICAgICAgLCBPICAgICAgICAgID0ge31cbiAgICAgICwgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xuICAgIHZhciBnZXR0ZXIgPSBmdW5jdGlvbih0aGF0LCBpbmRleCl7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICByZXR1cm4gZGF0YS52W0dFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24odGhhdCwgaW5kZXgsIHZhbHVlKXtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIGlmKENMQU1QRUQpdmFsdWUgPSAodmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKSkgPCAwID8gMCA6IHZhbHVlID4gMHhmZiA/IDB4ZmYgOiB2YWx1ZSAmIDB4ZmY7XG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XG4gICAgfTtcbiAgICB2YXIgYWRkRWxlbWVudCA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4KXtcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgcmV0dXJuIHNldHRlcih0aGlzLCBpbmRleCwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGlmKEZPUkNFRCl7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FLCAnX2QnKTtcbiAgICAgICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICAgICAsIG9mZnNldCA9IDBcbiAgICAgICAgICAsIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcbiAgICAgICAgaWYoIWlzT2JqZWN0KGRhdGEpKXtcbiAgICAgICAgICBsZW5ndGggICAgID0gc3RyaWN0VG9MZW5ndGgoZGF0YSwgdHJ1ZSlcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XG4gICAgICAgICAgYnVmZmVyICAgICA9IG5ldyAkQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZihkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKXtcbiAgICAgICAgICBidWZmZXIgPSBkYXRhO1xuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgICBpZigkbGVuZ3RoID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgaWYoJGxlbiAlIEJZVEVTKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xuICAgICAgICAgICAgaWYoYnl0ZUxlbmd0aCA8IDApdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYoVFlQRURfQVJSQVkgaW4gZGF0YSl7XG4gICAgICAgICAgcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xuICAgICAgICAgIGI6IGJ1ZmZlcixcbiAgICAgICAgICBvOiBvZmZzZXQsXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBlOiBsZW5ndGgsXG4gICAgICAgICAgdjogbmV3ICREYXRhVmlldyhidWZmZXIpXG4gICAgICAgIH0pO1xuICAgICAgICB3aGlsZShpbmRleCA8IGxlbmd0aClhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XG4gICAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXkpO1xuICAgIH0gZWxzZSBpZighJGl0ZXJEZXRlY3QoZnVuY3Rpb24oaXRlcil7XG4gICAgICAvLyBWOCB3b3JrcyB3aXRoIGl0ZXJhdG9ycywgYnV0IGZhaWxzIGluIG1hbnkgb3RoZXIgY2FzZXNcbiAgICAgIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00NTUyXG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIH0sIHRydWUpKXtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpe1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xuICAgICAgICB2YXIga2xhc3M7XG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XG4gICAgICAgIGlmKCFpc09iamVjdChkYXRhKSlyZXR1cm4gbmV3IEJhc2Uoc3RyaWN0VG9MZW5ndGgoZGF0YSwgSVNOVF9VSU5UOCkpO1xuICAgICAgICBpZihkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKXtcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSwgJGxlbmd0aClcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxuICAgICAgICAgICAgICA6IG5ldyBCYXNlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmKFRZUEVEX0FSUkFZIGluIGRhdGEpcmV0dXJuIGZyb21MaXN0KFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgIH0pO1xuICAgICAgYXJyYXlGb3JFYWNoKFRBQyAhPT0gRnVuY3Rpb24ucHJvdG90eXBlID8gZ09QTihCYXNlKS5jb25jYXQoZ09QTihUQUMpKSA6IGdPUE4oQmFzZSksIGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIGlmKCEoa2V5IGluIFR5cGVkQXJyYXkpKWhpZGUoVHlwZWRBcnJheSwga2V5LCBCYXNlW2tleV0pO1xuICAgICAgfSk7XG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xuICAgICAgaWYoIUxJQlJBUlkpVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XG4gICAgfVxuICAgIHZhciAkbmF0aXZlSXRlcmF0b3IgICA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgICAsIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3IgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZClcbiAgICAgICwgJGl0ZXJhdG9yICAgICAgICAgPSAkaXRlcmF0b3JzLnZhbHVlcztcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRZUEVEX0FSUkFZLCBOQU1FKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcblxuICAgIGlmKENMQU1QRUQgPyBuZXcgVHlwZWRBcnJheSgxKVtUQUddICE9IE5BTUUgOiAhKFRBRyBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSl7XG4gICAgICBkUChUeXBlZEFycmF5UHJvdG90eXBlLCBUQUcsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gTkFNRTsgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgT1tOQU1FXSA9IFR5cGVkQXJyYXk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVMsXG4gICAgICBmcm9tOiAkZnJvbSxcbiAgICAgIG9mOiAkb2ZcbiAgICB9KTtcblxuICAgIGlmKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcblxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHtzZXQ6ICRzZXR9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgIT0gYXJyYXlUb1N0cmluZyksIE5BTUUsIHt0b1N0cmluZzogYXJyYXlUb1N0cmluZ30pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpe1xuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcbiAgICB9KSwgTkFNRSwge3NsaWNlOiAkc2xpY2V9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpXG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcbiAgICB9KSksIE5BTUUsIHt0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nfSk7XG5cbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcbiAgICBpZighTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcbiAgfTtcbn0gZWxzZSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBERVNDUklQVE9SUyAgICA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsICR0eXBlZCAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKVxuICAsIGhpZGUgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgcmVkZWZpbmVBbGwgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGZhaWxzICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGFuSW5zdGFuY2UgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIHRvSW50ZWdlciAgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgdG9MZW5ndGggICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGdPUE4gICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgZFAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgYXJyYXlGaWxsICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBBUlJBWV9CVUZGRVIgICA9ICdBcnJheUJ1ZmZlcidcbiAgLCBEQVRBX1ZJRVcgICAgICA9ICdEYXRhVmlldydcbiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG4gICwgV1JPTkdfTEVOR1RIICAgPSAnV3JvbmcgbGVuZ3RoISdcbiAgLCBXUk9OR19JTkRFWCAgICA9ICdXcm9uZyBpbmRleCEnXG4gICwgJEFycmF5QnVmZmVyICAgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXVxuICAsICREYXRhVmlldyAgICAgID0gZ2xvYmFsW0RBVEFfVklFV11cbiAgLCBNYXRoICAgICAgICAgICA9IGdsb2JhbC5NYXRoXG4gICwgUmFuZ2VFcnJvciAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvclxuICAsIEluZmluaXR5ICAgICAgID0gZ2xvYmFsLkluZmluaXR5XG4gICwgQmFzZUJ1ZmZlciAgICAgPSAkQXJyYXlCdWZmZXJcbiAgLCBhYnMgICAgICAgICAgICA9IE1hdGguYWJzXG4gICwgcG93ICAgICAgICAgICAgPSBNYXRoLnBvd1xuICAsIGZsb29yICAgICAgICAgID0gTWF0aC5mbG9vclxuICAsIGxvZyAgICAgICAgICAgID0gTWF0aC5sb2dcbiAgLCBMTjIgICAgICAgICAgICA9IE1hdGguTE4yXG4gICwgQlVGRkVSICAgICAgICAgPSAnYnVmZmVyJ1xuICAsIEJZVEVfTEVOR1RIICAgID0gJ2J5dGVMZW5ndGgnXG4gICwgQllURV9PRkZTRVQgICAgPSAnYnl0ZU9mZnNldCdcbiAgLCAkQlVGRkVSICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19iJyA6IEJVRkZFUlxuICAsICRMRU5HVEggICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEhcbiAgLCAkT0ZGU0VUICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xuXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxudmFyIHBhY2tJRUVFNzU0ID0gZnVuY3Rpb24odmFsdWUsIG1MZW4sIG5CeXRlcyl7XG4gIHZhciBidWZmZXIgPSBBcnJheShuQnl0ZXMpXG4gICAgLCBlTGVuICAgPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgICAsIGVNYXggICA9ICgxIDw8IGVMZW4pIC0gMVxuICAgICwgZUJpYXMgID0gZU1heCA+PiAxXG4gICAgLCBydCAgICAgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBzICAgICAgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwXG4gICAgLCBlLCBtLCBjO1xuICB2YWx1ZSA9IGFicyh2YWx1ZSlcbiAgaWYodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KXtcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcbiAgICBlID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XG4gICAgaWYodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSl7XG4gICAgICBlLS07XG4gICAgICBjICo9IDI7XG4gICAgfVxuICAgIGlmKGUgKyBlQmlhcyA+PSAxKXtcbiAgICAgIHZhbHVlICs9IHJ0IC8gYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYodmFsdWUgKiBjID49IDIpe1xuICAgICAgZSsrO1xuICAgICAgYyAvPSAyO1xuICAgIH1cbiAgICBpZihlICsgZUJpYXMgPj0gZU1heCl7XG4gICAgICBtID0gMDtcbiAgICAgIGUgPSBlTWF4O1xuICAgIH0gZWxzZSBpZihlICsgZUJpYXMgPj0gMSl7XG4gICAgICBtID0gKHZhbHVlICogYyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IGUgKyBlQmlhcztcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogcG93KDIsIGVCaWFzIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gMDtcbiAgICB9XG4gIH1cbiAgZm9yKDsgbUxlbiA+PSA4OyBidWZmZXJbaSsrXSA9IG0gJiAyNTUsIG0gLz0gMjU2LCBtTGVuIC09IDgpO1xuICBlID0gZSA8PCBtTGVuIHwgbTtcbiAgZUxlbiArPSBtTGVuO1xuICBmb3IoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcbiAgYnVmZmVyWy0taV0gfD0gcyAqIDEyODtcbiAgcmV0dXJuIGJ1ZmZlcjtcbn07XG52YXIgdW5wYWNrSUVFRTc1NCA9IGZ1bmN0aW9uKGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKXtcbiAgdmFyIGVMZW4gID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gICAgLCBlTWF4ICA9ICgxIDw8IGVMZW4pIC0gMVxuICAgICwgZUJpYXMgPSBlTWF4ID4+IDFcbiAgICAsIG5CaXRzID0gZUxlbiAtIDdcbiAgICAsIGkgICAgID0gbkJ5dGVzIC0gMVxuICAgICwgcyAgICAgPSBidWZmZXJbaS0tXVxuICAgICwgZSAgICAgPSBzICYgMTI3XG4gICAgLCBtO1xuICBzID4+PSA3O1xuICBmb3IoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xuICBlID4+PSAtbkJpdHM7XG4gIG5CaXRzICs9IG1MZW47XG4gIGZvcig7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIGlmKGUgPT09IDApe1xuICAgIGUgPSAxIC0gZUJpYXM7XG4gIH0gZWxzZSBpZihlID09PSBlTWF4KXtcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIHBvdygyLCBtTGVuKTtcbiAgICBlID0gZSAtIGVCaWFzO1xuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcbn07XG5cbnZhciB1bnBhY2tJMzIgPSBmdW5jdGlvbihieXRlcyl7XG4gIHJldHVybiBieXRlc1szXSA8PCAyNCB8IGJ5dGVzWzJdIDw8IDE2IHwgYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xufTtcbnZhciBwYWNrSTggPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmXTtcbn07XG52YXIgcGFja0kxNiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmXTtcbn07XG52YXIgcGFja0kzMiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIFtpdCAmIDB4ZmYsIGl0ID4+IDggJiAweGZmLCBpdCA+PiAxNiAmIDB4ZmYsIGl0ID4+IDI0ICYgMHhmZl07XG59O1xudmFyIHBhY2tGNjQgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgNTIsIDgpO1xufTtcbnZhciBwYWNrRjMyID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDIzLCA0KTtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihDLCBrZXksIGludGVybmFsKXtcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfX0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uKHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pe1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXhcbiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTtcbiAgaWYobnVtSW5kZXggIT0gaW50SW5kZXggfHwgaW50SW5kZXggPCAwIHx8IGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iXG4gICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXVxuICAgICwgcGFjayAgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiBwYWNrLnJldmVyc2UoKTtcbn07XG52YXIgc2V0ID0gZnVuY3Rpb24odmlldywgYnl0ZXMsIGluZGV4LCBjb252ZXJzaW9uLCB2YWx1ZSwgaXNMaXR0bGVFbmRpYW4pe1xuICB2YXIgbnVtSW5kZXggPSAraW5kZXhcbiAgICAsIGludEluZGV4ID0gdG9JbnRlZ2VyKG51bUluZGV4KTtcbiAgaWYobnVtSW5kZXggIT0gaW50SW5kZXggfHwgaW50SW5kZXggPCAwIHx8IGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iXG4gICAgLCBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXVxuICAgICwgcGFjayAgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKXN0b3JlW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGJ5dGVzIC0gaSAtIDFdO1xufTtcblxudmFyIHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHMgPSBmdW5jdGlvbih0aGF0LCBsZW5ndGgpe1xuICBhbkluc3RhbmNlKHRoYXQsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbiAgdmFyIG51bWJlckxlbmd0aCA9ICtsZW5ndGhcbiAgICAsIGJ5dGVMZW5ndGggICA9IHRvTGVuZ3RoKG51bWJlckxlbmd0aCk7XG4gIGlmKG51bWJlckxlbmd0aCAhPSBieXRlTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgcmV0dXJuIGJ5dGVMZW5ndGg7XG59O1xuXG5pZighJHR5cGVkLkFCVil7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCl7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCk7XG4gICAgdGhpcy5fYiAgICAgICA9IGFycmF5RmlsbC5jYWxsKEFycmF5KGJ5dGVMZW5ndGgpLCAwKTtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpe1xuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJ1ZmZlclskTEVOR1RIXVxuICAgICAgLCBvZmZzZXQgICAgICAgPSB0b0ludGVnZXIoYnl0ZU9mZnNldCk7XG4gICAgaWYob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZihvZmZzZXQgKyBieXRlTGVuZ3RoID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB0aGlzWyRCVUZGRVJdID0gYnVmZmVyO1xuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgaWYoREVTQ1JJUFRPUlMpe1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfTEVOR1RILCAnX2wnKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XG4gIH1cblxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCl7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpe1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcbiAgICB9LFxuICAgIGdldEludDE2OiBmdW5jdGlvbiBnZXRJbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gKGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXSkgPDwgMTYgPj4gMTY7XG4gICAgfSxcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XG4gICAgfSxcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgNTIsIDgpO1xuICAgIH0sXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0SW50MTY6IGZ1bmN0aW9uIHNldEludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MzI6IGZ1bmN0aW9uIHNldFVpbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0YzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICBpZighZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgJEFycmF5QnVmZmVyOyAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3ICRBcnJheUJ1ZmZlciguNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pKXtcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpe1xuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKSk7XG4gICAgfTtcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xuICAgIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgKXtcbiAgICAgIGlmKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSloaWRlKCRBcnJheUJ1ZmZlciwga2V5LCBCYXNlQnVmZmVyW2tleV0pO1xuICAgIH07XG4gICAgaWYoIUxJQlJBUlkpQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcbiAgfVxuICAvLyBpT1MgU2FmYXJpIDcueCBidWdcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpXG4gICAgLCAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcbiAgdmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZih2aWV3LmdldEludDgoMCkgfHwgIXZpZXcuZ2V0SW50OCgxKSlyZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfVxuICB9LCB0cnVlKTtcbn1cbnNldFRvU3RyaW5nVGFnKCRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcbmV4cG9ydHNbQVJSQVlfQlVGRkVSXSA9ICRBcnJheUJ1ZmZlcjtcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldzsiLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIFRZUEVEICA9IHVpZCgndHlwZWRfYXJyYXknKVxuICAsIFZJRVcgICA9IHVpZCgndmlldycpXG4gICwgQUJWICAgID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldylcbiAgLCBDT05TVFIgPSBBQlZcbiAgLCBpID0gMCwgbCA9IDksIFR5cGVkO1xuXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xuKS5zcGxpdCgnLCcpO1xuXG53aGlsZShpIDwgbCl7XG4gIGlmKFR5cGVkID0gZ2xvYmFsW1R5cGVkQXJyYXlDb25zdHJ1Y3RvcnNbaSsrXV0pe1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBUWVBFRCwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBQlY6ICAgIEFCVixcbiAgQ09OU1RSOiBDT05TVFIsXG4gIFRZUEVEOiAgVFlQRUQsXG4gIFZJRVc6ICAgVklFV1xufTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHJlICAgICA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVnRXhwJywge2VzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KXsgcmV0dXJuICRyZShpdCk7IH19KTtcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRldmVyeSAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNCk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjUgLyAxNS40LjQuMTYgQXJyYXkucHJvdG90eXBlLmV2ZXJ5KGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7ZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpfSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmaWxsJyk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNilcbiAgLCBLRVkgICAgID0gJ2ZpbmRJbmRleCdcbiAgLCBmb3JjZWQgID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGZpbmQgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KVxuICAsIEtFWSAgICAgPSAnZmluZCdcbiAgLCBmb3JjZWQgID0gdHJ1ZTtcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZihLRVkgaW4gW10pQXJyYXkoMSlbS0VZXShmdW5jdGlvbigpeyBmb3JjZWQgPSBmYWxzZTsgfSk7XG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZvcmNlZCwgJ0FycmF5Jywge1xuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMClcbiAgLCBTVFJJQ1QgICA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGNhbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJylcbiAgLCBpc0FycmF5SXRlciAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpXG4gICwgZ2V0SXRlckZuICAgICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlLyosIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKi8pe1xuICAgIHZhciBPICAgICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKVxuICAgICAgLCBDICAgICAgID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheVxuICAgICAgLCBhTGVuICAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBtYXBmbiAgID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICAgICwgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWRcbiAgICAgICwgaW5kZXggICA9IDBcbiAgICAgICwgaXRlckZuICA9IGdldEl0ZXJGbihPKVxuICAgICAgLCBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYobWFwcGluZyltYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIC8vIGlmIG9iamVjdCBpc24ndCBpdGVyYWJsZSBvciBpdCdzIGFycmF5IHdpdGggZGVmYXVsdCBpdGVyYXRvciAtIHVzZSBzaW1wbGUgY2FzZVxuICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKXtcbiAgICAgIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQzsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IGNhbGwoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICBmb3IocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspe1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRpbmRleE9mICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKVxuICAsICRuYXRpdmUgICAgICAgPSBbXS5pbmRleE9mXG4gICwgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IDAgKi8pe1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIi8vIDIyLjEuMi4yIC8gMTUuNC4zLjIgQXJyYXkuaXNBcnJheShhcmcpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0FycmF5Jywge2lzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyl9KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlKb2luID0gW10uam9pbjtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIHN0cmluZ3NcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcil7XG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvSW50ZWdlciAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCB0b0xlbmd0aCAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCAkbmF0aXZlICAgICAgID0gW10ubGFzdEluZGV4T2ZcbiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTQgLyAxNS40LjQuMTUgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCA9IEBbKi0xXSAqLyl7XG4gICAgLy8gY29udmVydCAtMCB0byArMFxuICAgIGlmKE5FR0FUSVZFX1pFUk8pcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICAgIHZhciBPICAgICAgPSB0b0lPYmplY3QodGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IGxlbmd0aCAtIDE7XG4gICAgaWYoYXJndW1lbnRzLmxlbmd0aCA+IDEpaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xuICAgIGlmKGluZGV4IDwgMClpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgIGZvcig7aW5kZXggPj0gMDsgaW5kZXgtLSlpZihpbmRleCBpbiBPKWlmKE9baW5kZXhdID09PSBzZWFyY2hFbGVtZW50KXJldHVybiBpbmRleCB8fCAwO1xuICAgIHJldHVybiAtMTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRtYXAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5tYXAsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgZnVuY3Rpb24gRigpe31cbiAgcmV0dXJuICEoQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLyl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgYUxlbiAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXN1bHQgPSBuZXcgKHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXkpKGFMZW4pO1xuICAgIHdoaWxlKGFMZW4gPiBpbmRleCljcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhTGVuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIHRydWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTggLyAxNS40LjQuMjEgQXJyYXkucHJvdG90eXBlLnJlZHVjZShjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pe1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaHRtbCAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKVxuICAsIGNvZiAgICAgICAgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIHRvSW5kZXggICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgaWYoaHRtbClhcnJheVNsaWNlLmNhbGwoaHRtbCk7XG59KSwgJ0FycmF5Jywge1xuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCl7XG4gICAgdmFyIGxlbiAgID0gdG9MZW5ndGgodGhpcy5sZW5ndGgpXG4gICAgICAsIGtsYXNzID0gY29mKHRoaXMpO1xuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xuICAgIGlmKGtsYXNzID09ICdBcnJheScpcmV0dXJuIGFycmF5U2xpY2UuY2FsbCh0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB2YXIgc3RhcnQgID0gdG9JbmRleChiZWdpbiwgbGVuKVxuICAgICAgLCB1cFRvICAgPSB0b0luZGV4KGVuZCwgbGVuKVxuICAgICAgLCBzaXplICAgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpXG4gICAgICAsIGNsb25lZCA9IEFycmF5KHNpemUpXG4gICAgICAsIGkgICAgICA9IDA7XG4gICAgZm9yKDsgaSA8IHNpemU7IGkrKyljbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xuICAgICAgPyB0aGlzLmNoYXJBdChzdGFydCArIGkpXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHNvbWUgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBzb21lOiBmdW5jdGlvbiBzb21lKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJHNvbWUodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgdG9PYmplY3QgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBmYWlscyAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgJHNvcnQgICAgID0gW10uc29ydFxuICAsIHRlc3QgICAgICA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gSUU4LVxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAvLyBWOCBidWdcbiAgdGVzdC5zb3J0KG51bGwpO1xuICAvLyBPbGQgV2ViS2l0XG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjI1IEFycmF5LnByb3RvdHlwZS5zb3J0KGNvbXBhcmVmbilcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pe1xuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pOyIsInJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ0FycmF5Jyk7IiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7bm93OiBmdW5jdGlvbigpeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH19KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XG5cbnZhciBseiA9IGZ1bmN0aW9uKG51bSl7XG4gIHJldHVybiBudW0gPiA5ID8gbnVtIDogJzAnICsgbnVtO1xufTtcblxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xuICByZXR1cm4gbmV3IERhdGUoLTVlMTMgLSAxKS50b0lTT1N0cmluZygpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gIG5ldyBEYXRlKE5hTikudG9JU09TdHJpbmcoKTtcbn0pKSwgJ0RhdGUnLCB7XG4gIHRvSVNPU3RyaW5nOiBmdW5jdGlvbiB0b0lTT1N0cmluZygpe1xuICAgIGlmKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKXRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xuICAgIHZhciBkID0gdGhpc1xuICAgICAgLCB5ID0gZC5nZXRVVENGdWxsWWVhcigpXG4gICAgICAsIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpXG4gICAgICAsIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XG4gICAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xuICAgICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xuICAgICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXG4gICAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsIHx8IERhdGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHt0b0lTT1N0cmluZzogZnVuY3Rpb24oKXsgcmV0dXJuIDE7IH19KSAhPT0gMTtcbn0pLCAnRGF0ZScsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KXtcbiAgICB2YXIgTyAgPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBwdiA9IHRvUHJpbWl0aXZlKE8pO1xuICAgIHJldHVybiB0eXBlb2YgcHYgPT0gJ251bWJlcicgJiYgIWlzRmluaXRlKHB2KSA/IG51bGwgOiBPLnRvSVNPU3RyaW5nKCk7XG4gIH1cbn0pOyIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKVxuICAsIHByb3RvICAgICAgICA9IERhdGUucHJvdG90eXBlO1xuXG5pZighKFRPX1BSSU1JVElWRSBpbiBwcm90bykpcmVxdWlyZSgnLi9faGlkZScpKHByb3RvLCBUT19QUklNSVRJVkUsIHJlcXVpcmUoJy4vX2RhdGUtdG8tcHJpbWl0aXZlJykpOyIsInZhciBEYXRlUHJvdG8gICAgPSBEYXRlLnByb3RvdHlwZVxuICAsIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnXG4gICwgVE9fU1RSSU5HICAgID0gJ3RvU3RyaW5nJ1xuICAsICR0b1N0cmluZyAgICA9IERhdGVQcm90b1tUT19TVFJJTkddXG4gICwgZ2V0VGltZSAgICAgID0gRGF0ZVByb3RvLmdldFRpbWU7XG5pZihuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKXtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xuICB9KTtcbn0iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywge2JpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKX0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBIQVNfSU5TVEFOQ0UgICA9IHJlcXVpcmUoJy4vX3drcycpKCdoYXNJbnN0YW5jZScpXG4gICwgRnVuY3Rpb25Qcm90byAgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcbmlmKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7dmFsdWU6IGZ1bmN0aW9uKE8pe1xuICBpZih0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSlyZXR1cm4gZmFsc2U7XG4gIGlmKCFpc09iamVjdCh0aGlzLnByb3RvdHlwZSkpcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAvLyBmb3IgZW52aXJvbm1lbnQgdy9vIG5hdGl2ZSBgQEBoYXNJbnN0YW5jZWAgbG9naWMgZW5vdWdoIGBpbnN0YW5jZW9mYCwgYnV0IGFkZCB0aGlzOlxuICB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpaWYodGhpcy5wcm90b3R5cGUgPT09IE8pcmV0dXJuIHRydWU7XG4gIHJldHVybiBmYWxzZTtcbn19KTsiLCJ2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgaGFzICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgRlByb3RvICAgICA9IEZ1bmN0aW9uLnByb3RvdHlwZVxuICAsIG5hbWVSRSAgICAgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS9cbiAgLCBOQU1FICAgICAgID0gJ25hbWUnO1xuXG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIDE5LjIuNC4yIG5hbWVcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpe1xuICAgIHRyeSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICAgLCBuYW1lID0gKCcnICsgdGhhdCkubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIGhhcyh0aGF0LCBOQU1FKSB8fCAhaXNFeHRlbnNpYmxlKHRoYXQpIHx8IGRQKHRoYXQsIE5BTUUsIGNyZWF0ZURlc2MoNSwgbmFtZSkpO1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnTWFwJywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7IiwiLy8gMjAuMi4yLjMgTWF0aC5hY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGxvZzFwICAgPSByZXF1aXJlKCcuL19tYXRoLWxvZzFwJylcbiAgLCBzcXJ0ICAgID0gTWF0aC5zcXJ0XG4gICwgJGFjb3NoICA9IE1hdGguYWNvc2g7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYWNvc2hcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXG4gIC8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hY29zaChJbmZpbml0eSkgLT4gTmFOIFxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XG4pLCAnTWF0aCcsIHtcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxuICAgICAgOiBsb2cxcCh4IC0gMSArIHNxcnQoeCAtIDEpICogc3FydCh4ICsgMSkpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGFzaW5oICA9IE1hdGguYXNpbmg7XG5cbmZ1bmN0aW9uIGFzaW5oKHgpe1xuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XG59XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMCBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHthc2luaDogYXNpbmh9KTsiLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0YW5oICA9IE1hdGguYXRhbmg7XG5cbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMCBcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KXtcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuOSBNYXRoLmNicnQoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaWduICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KXtcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpe1xuICAgIHJldHVybiAoeCA+Pj49IDApID8gMzEgLSBNYXRoLmZsb29yKE1hdGgubG9nKHggKyAwLjUpICogTWF0aC5MT0cyRSkgOiAzMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpe1xuICAgIHJldHVybiAoZXhwKHggPSAreCkgKyBleHAoLXgpKSAvIDI7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGV4cG0xICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHtleHBtMTogJGV4cG0xfSk7IiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaWduICAgICAgPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKVxuICAsIHBvdyAgICAgICA9IE1hdGgucG93XG4gICwgRVBTSUxPTiAgID0gcG93KDIsIC01MilcbiAgLCBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKVxuICAsIE1BWDMyICAgICA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpXG4gICwgTUlOMzIgICAgID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24obil7XG4gIHJldHVybiBuICsgMSAvIEVQU0lMT04gLSAxIC8gRVBTSUxPTjtcbn07XG5cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBmcm91bmQ6IGZ1bmN0aW9uIGZyb3VuZCh4KXtcbiAgICB2YXIgJGFicyAgPSBNYXRoLmFicyh4KVxuICAgICAgLCAkc2lnbiA9IHNpZ24oeClcbiAgICAgICwgYSwgcmVzdWx0O1xuICAgIGlmKCRhYnMgPCBNSU4zMilyZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICAgIGEgPSAoMSArIEVQU0lMT04zMiAvIEVQU0lMT04pICogJGFicztcbiAgICByZXN1bHQgPSBhIC0gKGEgLSAkYWJzKTtcbiAgICBpZihyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KXJldHVybiAkc2lnbiAqIEluZmluaXR5O1xuICAgIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYWJzICAgICA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMil7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgc3VtICA9IDBcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbGFyZyA9IDBcbiAgICAgICwgYXJnLCBkaXY7XG4gICAgd2hpbGUoaSA8IGFMZW4pe1xuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcbiAgICAgIGlmKGxhcmcgPCBhcmcpe1xuICAgICAgICBkaXYgID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtICA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XG4gICAgICAgIGxhcmcgPSBhcmc7XG4gICAgICB9IGVsc2UgaWYoYXJnID4gMCl7XG4gICAgICAgIGRpdiAgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTggTWF0aC5pbXVsKHgsIHkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGltdWwgICA9IE1hdGguaW11bDtcblxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XG59KSwgJ01hdGgnLCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSl7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCB4biA9ICt4XG4gICAgICAsIHluID0gK3lcbiAgICAgICwgeGwgPSBVSU5UMTYgJiB4blxuICAgICAgLCB5bCA9IFVJTlQxNiAmIHluO1xuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4yMSBNYXRoLmxvZzEwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KXtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMTA7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7bG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKX0pOyIsIi8vIDIwLjIuMi4yMiBNYXRoLmxvZzIoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KXtcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge3NpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpfSk7IiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xufSksICdNYXRoJywge1xuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpe1xuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxuICAgICAgOiAoZXhwKHggLSAxKSAtIGV4cCgteCAtIDEpKSAqIChNYXRoLkUgLyAyKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGV4cG0xICAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KXtcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreClcbiAgICAgICwgYiA9IGV4cG0xKC14KTtcbiAgICByZXR1cm4gYSA9PSBJbmZpbml0eSA/IDEgOiBiID09IEluZmluaXR5ID8gLTEgOiAoYSAtIGIpIC8gKGV4cCh4KSArIGV4cCgteCkpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpe1xuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhhcyAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBjb2YgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJylcbiAgLCB0b1ByaW1pdGl2ZSAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCBnT1BEICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZlxuICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsICR0cmltICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltXG4gICwgTlVNQkVSICAgICAgICAgICAgPSAnTnVtYmVyJ1xuICAsICROdW1iZXIgICAgICAgICAgID0gZ2xvYmFsW05VTUJFUl1cbiAgLCBCYXNlICAgICAgICAgICAgICA9ICROdW1iZXJcbiAgLCBwcm90byAgICAgICAgICAgICA9ICROdW1iZXIucHJvdG90eXBlXG4gIC8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xuICAsIEJST0tFTl9DT0YgICAgICAgID0gY29mKHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKShwcm90bykpID09IE5VTUJFUlxuICAsIFRSSU0gICAgICAgICAgICAgID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XG5cbi8vIDcuMS4zIFRvTnVtYmVyKGFyZ3VtZW50KVxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24oYXJndW1lbnQpe1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZih0eXBlb2YgaXQgPT0gJ3N0cmluZycgJiYgaXQubGVuZ3RoID4gMil7XG4gICAgaXQgPSBUUklNID8gaXQudHJpbSgpIDogJHRyaW0oaXQsIDMpO1xuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMClcbiAgICAgICwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpe1xuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xuICAgICAgaWYodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApcmV0dXJuIE5hTjsgLy8gTnVtYmVyKCcrMHgxJykgc2hvdWxkIGJlIE5hTiwgb2xkIFY4IGZpeFxuICAgIH0gZWxzZSBpZihmaXJzdCA9PT0gNDgpe1xuICAgICAgc3dpdGNoKGl0LmNoYXJDb2RlQXQoMSkpe1xuICAgICAgICBjYXNlIDY2IDogY2FzZSA5OCAgOiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXG4gICAgICAgIGNhc2UgNzkgOiBjYXNlIDExMSA6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQgOiByZXR1cm4gK2l0O1xuICAgICAgfVxuICAgICAgZm9yKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKXtcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAvLyBwYXJzZUludCBwYXJzZXMgYSBzdHJpbmcgdG8gYSBmaXJzdCB1bmF2YWlsYWJsZSBzeW1ib2xcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcbiAgICAgICAgaWYoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKXJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSl7XG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpe1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlXG4gICAgICAsIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB0aGF0IGluc3RhbmNlb2YgJE51bWJlclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uKCl7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLGlzRmluaXRlLGlzSW50ZWdlcixpc05hTixpc1NhZmVJbnRlZ2VyLE1BWF9TQUZFX0lOVEVHRVIsJyArXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspe1xuICAgIGlmKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpe1xuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xuICAgIH1cbiAgfVxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCBOVU1CRVIsICROdW1iZXIpO1xufSIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtFUFNJTE9OOiBNYXRoLnBvdygyLCAtNTIpfSk7IiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KXtcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XG4gIH1cbn0pOyIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7aXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyl9KTsiLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzTmFOOiBmdW5jdGlvbiBpc05hTihudW1iZXIpe1xuICAgIHJldHVybiBudW1iZXIgIT0gbnVtYmVyO1xuICB9XG59KTsiLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJylcbiAgLCBhYnMgICAgICAgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKXtcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmZ9KTsiLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge01JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmfSk7IiwidmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywge3BhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0fSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgJ051bWJlcicsIHtwYXJzZUludDogJHBhcnNlSW50fSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JbnRlZ2VyICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKVxuICAsIHJlcGVhdCAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxuICAsICR0b0ZpeGVkICAgICA9IDEuLnRvRml4ZWRcbiAgLCBmbG9vciAgICAgICAgPSBNYXRoLmZsb29yXG4gICwgZGF0YSAgICAgICAgID0gWzAsIDAsIDAsIDAsIDAsIDBdXG4gICwgRVJST1IgICAgICAgID0gJ051bWJlci50b0ZpeGVkOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnXG4gICwgWkVSTyAgICAgICAgID0gJzAnO1xuXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbihuLCBjKXtcbiAgdmFyIGkgID0gLTFcbiAgICAsIGMyID0gYztcbiAgd2hpbGUoKytpIDwgNil7XG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xudmFyIGRpdmlkZSA9IGZ1bmN0aW9uKG4pe1xuICB2YXIgaSA9IDZcbiAgICAsIGMgPSAwO1xuICB3aGlsZSgtLWkgPj0gMCl7XG4gICAgYyArPSBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBmbG9vcihjIC8gbik7XG4gICAgYyA9IChjICUgbikgKiAxZTc7XG4gIH1cbn07XG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbigpe1xuICB2YXIgaSA9IDZcbiAgICAsIHMgPSAnJztcbiAgd2hpbGUoLS1pID49IDApe1xuICAgIGlmKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCl7XG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcbiAgICAgIHMgPSBzID09PSAnJyA/IHQgOiBzICsgcmVwZWF0LmNhbGwoWkVSTywgNyAtIHQubGVuZ3RoKSArIHQ7XG4gICAgfVxuICB9IHJldHVybiBzO1xufTtcbnZhciBwb3cgPSBmdW5jdGlvbih4LCBuLCBhY2Mpe1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xudmFyIGxvZyA9IGZ1bmN0aW9uKHgpe1xuICB2YXIgbiAgPSAwXG4gICAgLCB4MiA9IHg7XG4gIHdoaWxlKHgyID49IDQwOTYpe1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSh4MiA+PSAyKXtcbiAgICBuICArPSAxO1xuICAgIHgyIC89IDI7XG4gIH0gcmV0dXJuIG47XG59O1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XG4gIDAuOS50b0ZpeGVkKDApICE9PSAnMScgfHxcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9GaXhlZC5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cyl7XG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpXG4gICAgICAsIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpXG4gICAgICAsIHMgPSAnJ1xuICAgICAgLCBtID0gWkVST1xuICAgICAgLCBlLCB6LCBqLCBrO1xuICAgIGlmKGYgPCAwIHx8IGYgPiAyMCl0aHJvdyBSYW5nZUVycm9yKEVSUk9SKTtcbiAgICBpZih4ICE9IHgpcmV0dXJuICdOYU4nO1xuICAgIGlmKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKXJldHVybiBTdHJpbmcoeCk7XG4gICAgaWYoeCA8IDApe1xuICAgICAgcyA9ICctJztcbiAgICAgIHggPSAteDtcbiAgICB9XG4gICAgaWYoeCA+IDFlLTIxKXtcbiAgICAgIGUgPSBsb2coeCAqIHBvdygyLCA2OSwgMSkpIC0gNjk7XG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XG4gICAgICBlID0gNTIgLSBlO1xuICAgICAgaWYoZSA+IDApe1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgaiA9IGY7XG4gICAgICAgIHdoaWxlKGogPj0gNyl7XG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcbiAgICAgICAgICBqIC09IDc7XG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XG4gICAgICAgIGogPSBlIC0gMTtcbiAgICAgICAgd2hpbGUoaiA+PSAyMyl7XG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KDEsIDEpO1xuICAgICAgICBkaXZpZGUoMik7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKSArIHJlcGVhdC5jYWxsKFpFUk8sIGYpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZihmID4gMCl7XG4gICAgICBrID0gbS5sZW5ndGg7XG4gICAgICBtID0gcyArIChrIDw9IGYgPyAnMC4nICsgcmVwZWF0LmNhbGwoWkVSTywgZiAtIGspICsgbSA6IG0uc2xpY2UoMCwgayAtIGYpICsgJy4nICsgbS5zbGljZShrIC0gZikpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gcyArIG07XG4gICAgfSByZXR1cm4gbTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGZhaWxzICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJylcbiAgLCAkdG9QcmVjaXNpb24gPSAxLi50b1ByZWNpc2lvbjtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIElFNy1cbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcbn0pIHx8ICEkZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvUHJlY2lzaW9uLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKXtcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgICByZXR1cm4gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyAkdG9QcmVjaXNpb24uY2FsbCh0aGF0KSA6ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQsIHByZWNpc2lvbik7IFxuICB9XG59KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSwgJ09iamVjdCcsIHtkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJyl9KTsiLCIvLyAxOS4xLjIuNSBPYmplY3QuZnJlZXplKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIG1ldGEgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uKCRmcmVlemUpe1xuICByZXR1cm4gZnVuY3Rpb24gZnJlZXplKGl0KXtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xufSk7IiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uKCRpc0V4dGVuc2libGUpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbigkaXNTZWFsZWQpe1xuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xuICB9O1xufSk7IiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtpczogcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpfSk7IiwiLy8gMTkuMS4yLjE1IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uKCRwcmV2ZW50RXh0ZW5zaW9ucyl7XG4gIHJldHVybiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyhpdCl7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTcgT2JqZWN0LnNlYWwoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uKCRzZWFsKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNlYWwoaXQpe1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCB0ZXN0ICAgID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpe1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn0iLCJ2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDE4LjIuNCBwYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTsiLCJ2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDE4LjIuNSBwYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsiLCIvLyAyNi4xLjEgUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdClcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgckFwcGx5ICAgID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5XG4gICwgZkFwcGx5ICAgID0gRnVuY3Rpb24uYXBwbHk7XG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgckFwcGx5KGZ1bmN0aW9uKCl7fSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCl7XG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KVxuICAgICAgLCBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcbiAgfVxufSk7IiwiLy8gMjYuMS4yIFJlZmxlY3QuY29uc3RydWN0KHRhcmdldCwgYXJndW1lbnRzTGlzdCBbLCBuZXdUYXJnZXRdKVxudmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZSAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgYW5PYmplY3QgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZmFpbHMgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBiaW5kICAgICAgID0gcmVxdWlyZSgnLi9fYmluZCcpXG4gICwgckNvbnN0cnVjdCA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5jb25zdHJ1Y3Q7XG5cbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuLy8gRkYgTmlnaHRseSBzZXRzIHRoaXJkIGFyZ3VtZW50IGFzIGBuZXcudGFyZ2V0YCwgYnV0IGRvZXMgbm90IGNyZWF0ZSBgdGhpc2AgZnJvbSBpdFxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24oKXtcbiAgZnVuY3Rpb24gRigpe31cbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbigpe30sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgckNvbnN0cnVjdChmdW5jdGlvbigpe30pO1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHKSwgJ1JlZmxlY3QnLCB7XG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiwgbmV3VGFyZ2V0Ki8pe1xuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xuICAgIGFuT2JqZWN0KGFyZ3MpO1xuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xuICAgIGlmKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRylyZXR1cm4gckNvbnN0cnVjdChUYXJnZXQsIGFyZ3MsIG5ld1RhcmdldCk7XG4gICAgaWYoVGFyZ2V0ID09IG5ld1RhcmdldCl7XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIG9wdGltaXphdGlvbiBmb3IgMC00IGFyZ3VtZW50c1xuICAgICAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldDtcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcbiAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgIH1cbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XG4gICAgICAkYXJncy5wdXNoLmFwcGx5KCRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gICAgPSBuZXdUYXJnZXQucHJvdG90eXBlXG4gICAgICAsIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgICwgcmVzdWx0ICAgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMyBSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpXG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcblxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwge3ZhbHVlOiAxfSksIDEsIHt2YWx1ZTogMn0pO1xufSksICdSZWZsZWN0Jywge1xuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICBwcm9wZXJ0eUtleSA9IHRvUHJpbWl0aXZlKHByb3BlcnR5S2V5LCB0cnVlKTtcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcbiAgICB0cnkge1xuICAgICAgZFAuZih0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTsiLCIvLyAyNi4xLjQgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBnT1BEICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZlxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZGVsZXRlUHJvcGVydHk6IGZ1bmN0aW9uIGRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHZhciBkZXNjID0gZ09QRChhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjYuMS41IFJlZmxlY3QuZW51bWVyYXRlKHRhcmdldClcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBFbnVtZXJhdGUgPSBmdW5jdGlvbihpdGVyYXRlZCl7XG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdICAgICAgIC8vIGtleXNcbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBpdGVyYXRlZClrZXlzLnB1c2goa2V5KTtcbn07XG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKEVudW1lcmF0ZSwgJ09iamVjdCcsIGZ1bmN0aW9uKCl7XG4gIHZhciB0aGF0ID0gdGhpc1xuICAgICwga2V5cyA9IHRoYXQuX2tcbiAgICAsIGtleTtcbiAgZG8ge1xuICAgIGlmKHRoYXQuX2kgPj0ga2V5cy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgfSB3aGlsZSghKChrZXkgPSBrZXlzW3RoYXQuX2krK10pIGluIHRoYXQuX3QpKTtcbiAgcmV0dXJuIHt2YWx1ZToga2V5LCBkb25lOiBmYWxzZX07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBlbnVtZXJhdGU6IGZ1bmN0aW9uIGVudW1lcmF0ZSh0YXJnZXQpe1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlKHRhcmdldCk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuNyBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHJldHVybiBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICB9XG59KTsiLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdldFByb3RvID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KXtcbiAgICByZXR1cm4gZ2V0UHJvdG8oYW5PYmplY3QodGFyZ2V0KSk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcbnZhciBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5LyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXVxuICAgICwgZGVzYywgcHJvdG87XG4gIGlmKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKXJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xuICBpZihkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKXJldHVybiBoYXMoZGVzYywgJ3ZhbHVlJylcbiAgICA/IGRlc2MudmFsdWVcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcbiAgICAgID8gZGVzYy5nZXQuY2FsbChyZWNlaXZlcilcbiAgICAgIDogdW5kZWZpbmVkO1xuICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKXJldHVybiBnZXQocHJvdG8sIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtnZXQ6IGdldH0pOyIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xuICB9XG59KTsiLCIvLyAyNi4xLjEwIFJlZmxlY3QuaXNFeHRlbnNpYmxlKHRhcmdldClcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBpc0V4dGVuc2libGU6IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZSh0YXJnZXQpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xuICB9XG59KTsiLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7b3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKX0pOyIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXG52YXIgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsICRwcmV2ZW50RXh0ZW5zaW9ucyA9IE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KXtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHRyeSB7XG4gICAgICBpZigkcHJldmVudEV4dGVuc2lvbnMpJHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XG5cbmlmKHNldFByb3RvKSRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pe1xuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xuICAgIHRyeSB7XG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS4xMyBSZWZsZWN0LnNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIFssIHJlY2VpdmVyXSlcbnZhciBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWLyosIHJlY2VpdmVyKi8pe1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXVxuICAgICwgb3duRGVzYyAgPSBnT1BELmYoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpXG4gICAgLCBleGlzdGluZ0Rlc2NyaXB0b3IsIHByb3RvO1xuICBpZighb3duRGVzYyl7XG4gICAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSl7XG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcbiAgfVxuICBpZihoYXMob3duRGVzYywgJ3ZhbHVlJykpe1xuICAgIGlmKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpcmV0dXJuIGZhbHNlO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvciA9IGdPUEQuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpIHx8IGNyZWF0ZURlc2MoMCk7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcbiAgICBkUC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge3NldDogc2V0fSk7IiwidmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKVxuICAsIGRQICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGdPUE4gICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgaXNSZWdFeHAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKVxuICAsICRmbGFncyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKVxuICAsICRSZWdFeHAgICAgICAgICAgID0gZ2xvYmFsLlJlZ0V4cFxuICAsIEJhc2UgICAgICAgICAgICAgID0gJFJlZ0V4cFxuICAsIHByb3RvICAgICAgICAgICAgID0gJFJlZ0V4cC5wcm90b3R5cGVcbiAgLCByZTEgICAgICAgICAgICAgICA9IC9hL2dcbiAgLCByZTIgICAgICAgICAgICAgICA9IC9hL2dcbiAgLy8gXCJuZXdcIiBjcmVhdGVzIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdneSBoZXJlXG4gICwgQ09SUkVDVF9ORVcgICAgICAgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XG5cbmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcbiAgcmV0dXJuICRSZWdFeHAocmUxKSAhPSByZTEgfHwgJFJlZ0V4cChyZTIpID09IHJlMiB8fCAkUmVnRXhwKHJlMSwgJ2knKSAhPSAnL2EvaSc7XG59KSkpe1xuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpe1xuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHBcbiAgICAgICwgcGlSRSA9IGlzUmVnRXhwKHApXG4gICAgICAsIGZpVSAgPSBmID09PSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuICF0aVJFICYmIHBpUkUgJiYgcC5jb25zdHJ1Y3RvciA9PT0gJFJlZ0V4cCAmJiBmaVUgPyBwXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxuICAgICAgICA6IEJhc2UoKHBpUkUgPSBwIGluc3RhbmNlb2YgJFJlZ0V4cCkgPyBwLnNvdXJjZSA6IHAsIHBpUkUgJiYgZmlVID8gJGZsYWdzLmNhbGwocCkgOiBmKVxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcbiAgfTtcbiAgdmFyIHByb3h5ID0gZnVuY3Rpb24oa2V5KXtcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcbiAgICAgIHNldDogZnVuY3Rpb24oaXQpeyBCYXNlW2tleV0gPSBpdDsgfVxuICAgIH0pO1xuICB9O1xuICBmb3IodmFyIGtleXMgPSBnT1BOKEJhc2UpLCBpID0gMDsga2V5cy5sZW5ndGggPiBpOyApcHJveHkoa2V5c1tpKytdKTtcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgJ1JlZ0V4cCcsICRSZWdFeHApO1xufVxuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdSZWdFeHAnKTsiLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKXJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoUmVnRXhwLnByb3RvdHlwZSwgJ2ZsYWdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxufSk7IiwiLy8gQEBtYXRjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdtYXRjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIE1BVENILCAkbWF0Y2gpe1xuICAvLyAyMS4xLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5tYXRjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gbWF0Y2gocmVnZXhwKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW01BVENIXShTdHJpbmcoTykpO1xuICB9LCAkbWF0Y2hdO1xufSk7IiwiLy8gQEByZXBsYWNlIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3JlcGxhY2UnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSl7XG4gIC8vIDIxLjEuMy4xNCBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSlcbiAgcmV0dXJuIFtmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gc2VhcmNoVmFsdWUgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VhcmNoVmFsdWVbUkVQTEFDRV07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgOiAkcmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gIH0sICRyZXBsYWNlXTtcbn0pOyIsIi8vIEBAc2VhcmNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uKGRlZmluZWQsIFNFQVJDSCwgJHNlYXJjaCl7XG4gIC8vIDIxLjEuMy4xNSBTdHJpbmcucHJvdG90eXBlLnNlYXJjaChyZWdleHApXG4gIHJldHVybiBbZnVuY3Rpb24gc2VhcmNoKHJlZ2V4cCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbU0VBUkNIXShTdHJpbmcoTykpO1xuICB9LCAkc2VhcmNoXTtcbn0pOyIsIi8vIEBAc3BsaXQgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbihkZWZpbmVkLCBTUExJVCwgJHNwbGl0KXtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaXNSZWdFeHAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICAgLCBfc3BsaXQgICAgID0gJHNwbGl0XG4gICAgLCAkcHVzaCAgICAgID0gW10ucHVzaFxuICAgICwgJFNQTElUICAgICA9ICdzcGxpdCdcbiAgICAsIExFTkdUSCAgICAgPSAnbGVuZ3RoJ1xuICAgICwgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xuICBpZihcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxuICAgICdhYidbJFNQTElUXSgvKD86YWIpKi8pW0xFTkdUSF0gIT0gMiB8fFxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcbiAgICAnJ1skU1BMSVRdKC8uPy8pW0xFTkdUSF1cbiAgKXtcbiAgICB2YXIgTlBDRyA9IC8oKT8/Ly5leGVjKCcnKVsxXSA9PT0gdW5kZWZpbmVkOyAvLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cFxuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcbiAgICAgIGlmKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKXJldHVybiBbXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZighaXNSZWdFeHAoc2VwYXJhdG9yKSlyZXR1cm4gX3NwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICAgIHZhciBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgPyAneScgOiAnJyk7XG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyA0Mjk0OTY3Mjk1IDogbGltaXQgPj4+IDA7XG4gICAgICAvLyBNYWtlIGBnbG9iYWxgIGFuZCBhdm9pZCBgbGFzdEluZGV4YCBpc3N1ZXMgYnkgd29ya2luZyB3aXRoIGEgY29weVxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcbiAgICAgIHZhciBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoLCBpO1xuICAgICAgLy8gRG9lc24ndCBuZWVkIGZsYWdzIGd5LCBidXQgdGhleSBkb24ndCBodXJ0XG4gICAgICBpZighTlBDRylzZXBhcmF0b3IyID0gbmV3IFJlZ0V4cCgnXicgKyBzZXBhcmF0b3JDb3B5LnNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgICAgd2hpbGUobWF0Y2ggPSBzZXBhcmF0b3JDb3B5LmV4ZWMoc3RyaW5nKSl7XG4gICAgICAgIC8vIGBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleGAgaXMgbm90IHJlbGlhYmxlIGNyb3NzLWJyb3dzZXJcbiAgICAgICAgbGFzdEluZGV4ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICBpZihsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KXtcbiAgICAgICAgICBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3IgTlBDR1xuICAgICAgICAgIGlmKCFOUENHICYmIG1hdGNoW0xFTkdUSF0gPiAxKW1hdGNoWzBdLnJlcGxhY2Uoc2VwYXJhdG9yMiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGZvcihpID0gMTsgaSA8IGFyZ3VtZW50c1tMRU5HVEhdIC0gMjsgaSsrKWlmKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKW1hdGNoW2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICBpZihvdXRwdXRbTEVOR1RIXSA+PSBzcGxpdExpbWl0KWJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmKHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0gPT09IG1hdGNoLmluZGV4KXNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxuICAgICAgfVxuICAgICAgaWYobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nW0xFTkdUSF0pe1xuICAgICAgICBpZihsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKW91dHB1dC5wdXNoKCcnKTtcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dFtMRU5HVEhdID4gc3BsaXRMaW1pdCA/IG91dHB1dC5zbGljZSgwLCBzcGxpdExpbWl0KSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZignMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pe1xuICAgICRzcGxpdCA9IGZ1bmN0aW9uKHNlcGFyYXRvciwgbGltaXQpe1xuICAgICAgcmV0dXJuIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwID8gW10gOiBfc3BsaXQuY2FsbCh0aGlzLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgICB9O1xuICB9XG4gIC8vIDIxLjEuMy4xNyBTdHJpbmcucHJvdG90eXBlLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpXG4gIHJldHVybiBbZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHNlcGFyYXRvciA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZXBhcmF0b3JbU1BMSVRdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChzZXBhcmF0b3IsIE8sIGxpbWl0KSA6ICRzcGxpdC5jYWxsKFN0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gIH0sICRzcGxpdF07XG59KTsiLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnZhciBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgJGZsYWdzICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgVE9fU1RSSU5HICAgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nICAgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uKGZuKXtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcbn07XG5cbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcbmlmKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXsgcmV0dXJuICR0b1N0cmluZy5jYWxsKHtzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJ30pICE9ICcvYS9iJzsgfSkpe1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZigkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpe1xuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnU2V0JywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZyk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMiBTdHJpbmcucHJvdG90eXBlLmFuY2hvcihuYW1lKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBhbmNob3IobmFtZSl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYmlnKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdibGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy41IFN0cmluZy5wcm90b3R5cGUuYm9sZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBib2xkKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuNiBTdHJpbmcucHJvdG90eXBlLmVuZHNXaXRoKHNlYXJjaFN0cmluZyBbLCBlbmRQb3NpdGlvbl0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGNvbnRleHQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JylcbiAgLCBFTkRTX1dJVEggPSAnZW5kc1dpdGgnXG4gICwgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShFTkRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBlbmRQb3NpdGlvbiA9IEBsZW5ndGggKi8pe1xuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIEVORFNfV0lUSClcbiAgICAgICwgZW5kUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aCh0aGF0Lmxlbmd0aClcbiAgICAgICwgZW5kICAgID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IE1hdGgubWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKVxuICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJGVuZHNXaXRoXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxuICAgICAgOiB0aGF0LnNsaWNlKGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZpeGVkJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjcgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3IoY29sb3IpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRjb2xvcihjb2xvcil7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnY29sb3InLCBjb2xvcik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0luZGV4ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCBmcm9tQ2hhckNvZGUgICA9IFN0cmluZy5mcm9tQ2hhckNvZGVcbiAgLCAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xuXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxKSwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciByZXMgID0gW11cbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaSAgICA9IDBcbiAgICAgICwgY29kZTtcbiAgICB3aGlsZShhTGVuID4gaSl7XG4gICAgICBjb2RlID0gK2FyZ3VtZW50c1tpKytdO1xuICAgICAgaWYodG9JbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpdGhyb3cgUmFuZ2VFcnJvcihjb2RlICsgJyBpcyBub3QgYSB2YWxpZCBjb2RlIHBvaW50Jyk7XG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhkODAwLCBjb2RlICUgMHg0MDAgKyAweGRjMDApXG4gICAgICApO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7IiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29udGV4dCAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjkgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGl0YWxpY3MoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XG4gIH1cbn0pOyIsInZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpe1xuICAgIHZhciB0cGwgID0gdG9JT2JqZWN0KGNhbGxTaXRlLnJhdylcbiAgICAgICwgbGVuICA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpXG4gICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlcyAgPSBbXVxuICAgICAgLCBpICAgID0gMDtcbiAgICB3aGlsZShsZW4gPiBpKXtcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xuICAgICAgaWYoaSA8IGFMZW4pcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcbiAgcmVwZWF0OiByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jylcbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc21hbGwnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcbiAgfVxufSk7IiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGNvbnRleHQgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKVxuICAsIFNUQVJUU19XSVRIID0gJ3N0YXJ0c1dpdGgnXG4gICwgJHN0YXJ0c1dpdGggPSAnJ1tTVEFSVFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xuICBzdGFydHNXaXRoOiBmdW5jdGlvbiBzdGFydHNXaXRoKHNlYXJjaFN0cmluZyAvKiwgcG9zaXRpb24gPSAwICovKXtcbiAgICB2YXIgdGhhdCAgID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKVxuICAgICAgLCBpbmRleCAgPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKVxuICAgICAgLCBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gJHN0YXJ0c1dpdGhcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1YicsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc3ViKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjE0IFN0cmluZy5wcm90b3R5cGUuc3VwKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc3VwKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1cCcsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKXtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkdHlwZWQgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpXG4gICwgYnVmZmVyICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJylcbiAgLCBhbk9iamVjdCAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvSW5kZXggICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGlzT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgQXJyYXlCdWZmZXIgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXJcbiAgLCBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJylcbiAgLCAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXJcbiAgLCAkRGF0YVZpZXcgICAgPSBidWZmZXIuRGF0YVZpZXdcbiAgLCAkaXNWaWV3ICAgICAgPSAkdHlwZWQuQUJWICYmIEFycmF5QnVmZmVyLmlzVmlld1xuICAsICRzbGljZSAgICAgICA9ICRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2VcbiAgLCBWSUVXICAgICAgICAgPSAkdHlwZWQuVklFV1xuICAsIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7QXJyYXlCdWZmZXI6ICRBcnJheUJ1ZmZlcn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcbiAgaXNWaWV3OiBmdW5jdGlvbiBpc1ZpZXcoaXQpe1xuICAgIHJldHVybiAkaXNWaWV3ICYmICRpc1ZpZXcoaXQpIHx8IGlzT2JqZWN0KGl0KSAmJiBWSUVXIGluIGl0O1xuICB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAhbmV3ICRBcnJheUJ1ZmZlcigyKS5zbGljZSgxLCB1bmRlZmluZWQpLmJ5dGVMZW5ndGg7XG59KSwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxuICBzbGljZTogZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCl7XG4gICAgaWYoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxuICAgIHZhciBsZW4gICAgPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoXG4gICAgICAsIGZpcnN0ICA9IHRvSW5kZXgoc3RhcnQsIGxlbilcbiAgICAgICwgZmluYWwgID0gdG9JbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKVxuICAgICAgLCByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW5hbCAtIGZpcnN0KSlcbiAgICAgICwgdmlld1MgID0gbmV3ICREYXRhVmlldyh0aGlzKVxuICAgICAgLCB2aWV3VCAgPSBuZXcgJERhdGFWaWV3KHJlc3VsdClcbiAgICAgICwgaW5kZXggID0gMDtcbiAgICB3aGlsZShmaXJzdCA8IGZpbmFsKXtcbiAgICAgIHZpZXdULnNldFVpbnQ4KGluZGV4KyssIHZpZXdTLmdldFVpbnQ4KGZpcnN0KyspKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XG4gIERhdGFWaWV3OiByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKS5EYXRhVmlld1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQzMicsIDQsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0NjQnLCA4LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQxNicsIDIsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQ4JywgMSwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTsiLCIndXNlIHN0cmljdCc7XG52YXIgZWFjaCAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApXG4gICwgcmVkZWZpbmUgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIG1ldGEgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKVxuICAsIGFzc2lnbiAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKVxuICAsIHdlYWsgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpXG4gICwgaXNPYmplY3QgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBnZXRXZWFrICAgICAgPSBtZXRhLmdldFdlYWtcbiAgLCBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlXG4gICwgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZVxuICAsIHRtcCAgICAgICAgICA9IHt9XG4gICwgSW50ZXJuYWxNYXA7XG5cbnZhciB3cmFwcGVyID0gZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKXtcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcbiAgfTtcbn07XG5cbnZhciBtZXRob2RzID0ge1xuICAvLyAyMy4zLjMuMyBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpe1xuICAgIGlmKGlzT2JqZWN0KGtleSkpe1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmdldChrZXkpO1xuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCBrZXksIHZhbHVlKTtcbiAgfVxufTtcblxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdXZWFrTWFwJywgd3JhcHBlciwgbWV0aG9kcywgd2VhaywgdHJ1ZSwgdHJ1ZSk7XG5cbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcbmlmKG5ldyAkV2Vha01hcCgpLnNldCgoT2JqZWN0LmZyZWV6ZSB8fCBPYmplY3QpKHRtcCksIDcpLmdldCh0bXApICE9IDcpe1xuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlcik7XG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICBtZXRhLk5FRUQgPSB0cnVlO1xuICBlYWNoKFsnZGVsZXRlJywgJ2hhcycsICdnZXQnLCAnc2V0J10sIGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIHByb3RvICA9ICRXZWFrTWFwLnByb3RvdHlwZVxuICAgICAgLCBtZXRob2QgPSBwcm90b1trZXldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgLy8gc3RvcmUgZnJvemVuIG9iamVjdHMgb24gaW50ZXJuYWwgd2Vha21hcCBzaGltXG4gICAgICBpZihpc09iamVjdChhKSAmJiAhaXNFeHRlbnNpYmxlKGEpKXtcbiAgICAgICAgaWYoIXRoaXMuX2YpdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Zba2V5XShhLCBiKTtcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcbiAgICAgIH0gcmV0dXJuIG1ldGhvZC5jYWxsKHRoaXMsIGEsIGIpO1xuICAgIH0pO1xuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdXZWFrU2V0JywgZnVuY3Rpb24oZ2V0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjQuMy4xIFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpe1xuICAgIHJldHVybiB3ZWFrLmRlZih0aGlzLCB2YWx1ZSwgdHJ1ZSk7XG4gIH1cbn0sIHdlYWssIGZhbHNlLCB0cnVlKTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpXG4gICwgcHJvY2VzcyAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2Vzc1xuICAsIGlzTm9kZSAgICA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbil7XG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWlzLWVycm9yXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY29mICAgICA9IHJlcXVpcmUoJy4vX2NvZicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ0Vycm9yJywge1xuICBpc0Vycm9yOiBmdW5jdGlvbiBpc0Vycm9yKGl0KXtcbiAgICByZXR1cm4gY29mKGl0KSA9PT0gJ0Vycm9yJztcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ01hcCcpfSk7IiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKXtcbiAgICB2YXIgJHgwID0geDAgPj4+IDBcbiAgICAgICwgJHgxID0geDEgPj4+IDBcbiAgICAgICwgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSArICh5MSA+Pj4gMCkgKyAoKCR4MCAmICR5MCB8ICgkeDAgfCAkeTApICYgfigkeDAgKyAkeTAgPj4+IDApKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaW11bGg6IGZ1bmN0aW9uIGltdWxoKHUsIHYpe1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmZcbiAgICAgICwgJHUgPSArdVxuICAgICAgLCAkdiA9ICt2XG4gICAgICAsIHUwID0gJHUgJiBVSU5UMTZcbiAgICAgICwgdjAgPSAkdiAmIFVJTlQxNlxuICAgICAgLCB1MSA9ICR1ID4+IDE2XG4gICAgICAsIHYxID0gJHYgPj4gMTZcbiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlzdWJoOiBmdW5jdGlvbiBpc3ViaCh4MCwgeDEsIHkwLCB5MSl7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwXG4gICAgICAsICR4MSA9IHgxID4+PiAwXG4gICAgICAsICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpe1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmZcbiAgICAgICwgJHUgPSArdVxuICAgICAgLCAkdiA9ICt2XG4gICAgICAsIHUwID0gJHUgJiBVSU5UMTZcbiAgICAgICwgdjAgPSAkdiAmIFVJTlQxNlxuICAgICAgLCB1MSA9ICR1ID4+PiAxNlxuICAgICAgLCB2MSA9ICR2ID4+PiAxNlxuICAgICAgLCB0ICA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+Pj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+Pj4gMTYpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpe1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7Z2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcil7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtzZXQ6IGFGdW5jdGlvbihzZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRlbnRyaWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKGl0KXtcbiAgICByZXR1cm4gJGVudHJpZXMoaXQpO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xudmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBvd25LZXlzICAgICAgICA9IHJlcXVpcmUoJy4vX293bi1rZXlzJylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCl7XG4gICAgdmFyIE8gICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICAgLCBnZXREZXNjID0gZ09QRC5mXG4gICAgICAsIGtleXMgICAgPSBvd25LZXlzKE8pXG4gICAgICAsIHJlc3VsdCAgPSB7fVxuICAgICAgLCBpICAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUoa2V5cy5sZW5ndGggPiBpKWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwga2V5ID0ga2V5c1tpKytdLCBnZXREZXNjKE8sIGtleSkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjQgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKXtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKVxuICAgICAgLCBEO1xuICAgIGRvIHtcbiAgICAgIGlmKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpcmV0dXJuIEQuZ2V0O1xuICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApe1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpXG4gICAgICAsIEQ7XG4gICAgZG8ge1xuICAgICAgaWYoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSlyZXR1cm4gRC5zZXQ7XG4gICAgfSB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkdmFsdWVzID0gcmVxdWlyZSgnLi9fb2JqZWN0LXRvLWFycmF5JykoZmFsc2UpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoaXQpe1xuICAgIHJldHVybiAkdmFsdWVzKGl0KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgY29yZSAgICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBtaWNyb3Rhc2sgICA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKClcbiAgLCBPQlNFUlZBQkxFICA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJylcbiAgLCBhRnVuY3Rpb24gICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBhbkluc3RhbmNlICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgaGlkZSAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBmb3JPZiAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgUkVUVVJOICAgICAgPSBmb3JPZi5SRVRVUk47XG5cbnZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihmbil7XG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcbn07XG5cbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XG4gIGlmKGNsZWFudXApe1xuICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwKCk7XG4gIH1cbn07XG5cbnZhciBzdWJzY3JpcHRpb25DbG9zZWQgPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XG59O1xuXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpe1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gIH1cbn07XG5cbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihvYnNlcnZlciwgc3Vic2NyaWJlcil7XG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5fbyA9IG9ic2VydmVyO1xuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcbiAgdHJ5IHtcbiAgICB2YXIgY2xlYW51cCAgICAgID0gc3Vic2NyaWJlcihvYnNlcnZlcilcbiAgICAgICwgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcbiAgICBpZihjbGVhbnVwICE9IG51bGwpe1xuICAgICAgaWYodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpY2xlYW51cCA9IGZ1bmN0aW9uKCl7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XG4gICAgICB0aGlzLl9jID0gY2xlYW51cDtcbiAgICB9XG4gIH0gY2F0Y2goZSl7XG4gICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgcmV0dXJuO1xuICB9IGlmKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSljbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xufTtcblxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfVxufSk7XG5cbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIHRoaXMuX3MgPSBzdWJzY3JpcHRpb247XG59O1xuXG5TdWJzY3JpcHRpb25PYnNlcnZlci5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKXtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpe1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIubmV4dCk7XG4gICAgICAgIGlmKG0pcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSl7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpdGhyb3cgdmFsdWU7XG4gICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpO1xuICAgICAgaWYoIW0pdGhyb3cgdmFsdWU7XG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICB0cnkge1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHZhbHVlKXtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZighc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpe1xuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuY29tcGxldGUpO1xuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH0gY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufSk7XG5cbnZhciAkT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcil7XG4gIGFuSW5zdGFuY2UodGhpcywgJE9ic2VydmFibGUsICdPYnNlcnZhYmxlJywgJ19mJykuX2YgPSBhRnVuY3Rpb24oc3Vic2NyaWJlcik7XG59O1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIHtcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpe1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChmbil7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgIGFGdW5jdGlvbihmbik7XG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0IDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4odmFsdWUpO1xuICAgICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiByZWplY3QsXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XG4gIGZyb206IGZ1bmN0aW9uIGZyb20oeCl7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZTtcbiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTtcbiAgICBpZihtZXRob2Qpe1xuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcil7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKXtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIWRvbmUpe1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZihmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24oaXQpe1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcbiAgICAgICAgICAgICAgaWYoZG9uZSlyZXR1cm4gUkVUVVJOO1xuICAgICAgICAgICAgfSkgPT09IFJFVFVSTilyZXR1cm47XG4gICAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIGlmKGRvbmUpdGhyb3cgZTtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKXsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH0sXG4gIG9mOiBmdW5jdGlvbiBvZigpe1xuICAgIGZvcih2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IEFycmF5KGwpOyBpIDwgbDspaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcbiAgICByZXR1cm4gbmV3ICh0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiAkT2JzZXJ2YWJsZSkoZnVuY3Rpb24ob2JzZXJ2ZXIpe1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICBpZighZG9uZSl7XG4gICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXRlbXNbaV0pO1xuICAgICAgICAgICAgaWYoZG9uZSlyZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbmhpZGUoJE9ic2VydmFibGUucHJvdG90eXBlLCBPQlNFUlZBQkxFLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7T2JzZXJ2YWJsZTogJE9ic2VydmFibGV9KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnT2JzZXJ2YWJsZScpOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXlcbiAgLCBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gbWV0YWRhdGEuc2V0O1xuXG5tZXRhZGF0YS5leHAoe2RlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpe1xuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXBcbiAgLCBzdG9yZSAgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEuc3RvcmU7XG5cbm1ldGFkYXRhLmV4cCh7ZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHZhciB0YXJnZXRLZXkgICA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSlcbiAgICAsIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChhbk9iamVjdCh0YXJnZXQpLCB0YXJnZXRLZXksIGZhbHNlKTtcbiAgaWYobWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCB8fCAhbWV0YWRhdGFNYXBbJ2RlbGV0ZSddKG1ldGFkYXRhS2V5KSlyZXR1cm4gZmFsc2U7XG4gIGlmKG1ldGFkYXRhTWFwLnNpemUpcmV0dXJuIHRydWU7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICB0YXJnZXRNZXRhZGF0YVsnZGVsZXRlJ10odGFyZ2V0S2V5KTtcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcbn19KTsiLCJ2YXIgU2V0ICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2VzNi5zZXQnKVxuICAsIGZyb20gICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpXG4gICwgbWV0YWRhdGEgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uKE8sIFApe1xuICB2YXIgb0tleXMgID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUClcbiAgICAsIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICBpZihwYXJlbnQgPT09IG51bGwpcmV0dXJuIG9LZXlzO1xuICB2YXIgcEtleXMgID0gb3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xufTtcblxubWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhc1xuICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXRcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlHZXRNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZihoYXNPd24pcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUdldE1ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogdW5kZWZpbmVkO1xufTtcblxubWV0YWRhdGEuZXhwKHtnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7Z2V0T3duTWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YUtleXModGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldFxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7Z2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhc1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUhhc01ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmKGhhc093bilyZXR1cm4gdHJ1ZTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IGZhbHNlO1xufTtcblxubWV0YWRhdGEuZXhwKHtoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoe2hhc093bk1ldGFkYXRhOiBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgYUZ1bmN0aW9uICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXlcbiAgLCBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gbWV0YWRhdGEuc2V0O1xuXG5tZXRhZGF0YS5leHAoe21ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSl7XG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpe1xuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXG4gICAgICBtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSxcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcbiAgICApO1xuICB9O1xufX0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1NldCcsIHt0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdTZXQnKX0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkYXQgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBhdDogZnVuY3Rpb24gYXQocG9zKXtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vU3RyaW5nLnByb3RvdHlwZS5tYXRjaEFsbC9cbnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZGVmaW5lZCAgICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgaXNSZWdFeHAgICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKVxuICAsIGdldEZsYWdzICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKVxuICAsIFJlZ0V4cFByb3RvID0gUmVnRXhwLnByb3RvdHlwZTtcblxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uKHJlZ2V4cCwgc3RyaW5nKXtcbiAgdGhpcy5fciA9IHJlZ2V4cDtcbiAgdGhpcy5fcyA9IHN0cmluZztcbn07XG5cbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKXtcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xuICByZXR1cm4ge3ZhbHVlOiBtYXRjaCwgZG9uZTogbWF0Y2ggPT09IG51bGx9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKXtcbiAgICBkZWZpbmVkKHRoaXMpO1xuICAgIGlmKCFpc1JlZ0V4cChyZWdleHApKXRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcbiAgICB2YXIgUyAgICAgPSBTdHJpbmcodGhpcylcbiAgICAgICwgZmxhZ3MgPSAnZmxhZ3MnIGluIFJlZ0V4cFByb3RvID8gU3RyaW5nKHJlZ2V4cC5mbGFncykgOiBnZXRGbGFncy5jYWxsKHJlZ2V4cClcbiAgICAgICwgcnggICAgPSBuZXcgUmVnRXhwKHJlZ2V4cC5zb3VyY2UsIH5mbGFncy5pbmRleE9mKCdnJykgPyBmbGFncyA6ICdnJyArIGZsYWdzKTtcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhZCAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIHBhZEVuZDogZnVuY3Rpb24gcGFkRW5kKG1heExlbmd0aCAvKiwgZmlsbFN0cmluZyA9ICcgJyAqLyl7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYWQgICAgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0cnVlKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbUxlZnQnLCBmdW5jdGlvbigkdHJpbSl7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcbiAgfTtcbn0sICd0cmltU3RhcnQnKTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbigkdHJpbSl7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKXtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XG4gIH07XG59LCAndHJpbUVuZCcpOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtZ2xvYmFsXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHtnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpfSk7IiwidmFyICRpdGVyYXRvcnMgICAgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpXG4gICwgcmVkZWZpbmUgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBnbG9iYWwgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgSXRlcmF0b3JzICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgd2tzICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpXG4gICwgSVRFUkFUT1IgICAgICA9IHdrcygnaXRlcmF0b3InKVxuICAsIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJylcbiAgLCBBcnJheVZhbHVlcyAgID0gSXRlcmF0b3JzLkFycmF5O1xuXG5mb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXtcbiAgdmFyIE5BTUUgICAgICAgPSBjb2xsZWN0aW9uc1tpXVxuICAgICwgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXVxuICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGVcbiAgICAsIGtleTtcbiAgaWYocHJvdG8pe1xuICAgIGlmKCFwcm90b1tJVEVSQVRPUl0paGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZighcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgZm9yKGtleSBpbiAkaXRlcmF0b3JzKWlmKCFwcm90b1trZXldKXJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XG4gIH1cbn0iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHRhc2sgICA9IHJlcXVpcmUoJy4vX3Rhc2snKTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XG4gIHNldEltbWVkaWF0ZTogICAkdGFzay5zZXQsXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxufSk7IiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxudmFyIGdsb2JhbCAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGludm9rZSAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIHBhcnRpYWwgICAgPSByZXF1aXJlKCcuL19wYXJ0aWFsJylcbiAgLCBuYXZpZ2F0b3IgID0gZ2xvYmFsLm5hdmlnYXRvclxuICAsIE1TSUUgICAgICAgPSAhIW5hdmlnYXRvciAmJiAvTVNJRSAuXFwuLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyAvLyA8LSBkaXJ0eSBpZTktIGNoZWNrXG52YXIgd3JhcCA9IGZ1bmN0aW9uKHNldCl7XG4gIHJldHVybiBNU0lFID8gZnVuY3Rpb24oZm4sIHRpbWUgLyosIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBzZXQoaW52b2tlKFxuICAgICAgcGFydGlhbCxcbiAgICAgIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSxcbiAgICAgIHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbilcbiAgICApLCB0aW1lKTtcbiAgfSA6IHNldDtcbn07XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcbiAgc2V0VGltZW91dDogIHdyYXAoZ2xvYmFsLnNldFRpbWVvdXQpLFxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXG59KTsiLCJyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWF4LXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hdGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmh5cG90Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYW5jaG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ib2xkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250c2l6ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc21hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmpvaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmNvcHktd2l0aGluJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5hcHBseScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlbGV0ZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLWxlZnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LnZhbHVlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pc3ViaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgudW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWxldGUtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpOyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXG4gKiBhZGRpdGlvbmFsIGdyYW50IG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW5cbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgcHJvY2Vzcy5kb21haW4pIHtcbiAgICAgIGludm9rZSA9IHByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIiB8fFxuICAgICAgICAgICAgICAobWV0aG9kID09PSBcInRocm93XCIgJiYgZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgLy8gQSByZXR1cm4gb3IgdGhyb3cgKHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyB0aHJvd1xuICAgICAgICAgICAgLy8gbWV0aG9kKSBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICAgICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgICAgdmFyIHJldHVybk1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdO1xuICAgICAgICAgICAgaWYgKHJldHVybk1ldGhvZCkge1xuICAgICAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gocmV0dXJuTWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgYXJnKTtcbiAgICAgICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgcmV0dXJuIG1ldGhvZCB0aHJldyBhbiBleGNlcHRpb24sIGxldCB0aGF0XG4gICAgICAgICAgICAgICAgLy8gZXhjZXB0aW9uIHByZXZhaWwgb3ZlciB0aGUgb3JpZ2luYWwgcmV0dXJuIG9yIHRocm93LlxuICAgICAgICAgICAgICAgIG1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICAgICAgLy8gQ29udGludWUgd2l0aCB0aGUgb3V0ZXIgcmV0dXJuLCBub3cgdGhhdCB0aGUgZGVsZWdhdGVcbiAgICAgICAgICAgICAgLy8gaXRlcmF0b3IgaGFzIGJlZW4gdGVybWluYXRlZC5cbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKFxuICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3JbbWV0aG9kXSxcbiAgICAgICAgICAgIGRlbGVnYXRlLml0ZXJhdG9yLFxuICAgICAgICAgICAgYXJnXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gTGlrZSByZXR1cm5pbmcgZ2VuZXJhdG9yLnRocm93KHVuY2F1Z2h0KSwgYnV0IHdpdGhvdXQgdGhlXG4gICAgICAgICAgICAvLyBvdmVyaGVhZCBvZiBhbiBleHRyYSBmdW5jdGlvbiBjYWxsLlxuICAgICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgICAgYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIERlbGVnYXRlIGdlbmVyYXRvciByYW4gYW5kIGhhbmRsZWQgaXRzIG93biBleGNlcHRpb25zIHNvXG4gICAgICAgICAgLy8gcmVnYXJkbGVzcyBvZiB3aGF0IHRoZSBtZXRob2Qgd2FzLCB3ZSBjb250aW51ZSBhcyBpZiBpdCBpc1xuICAgICAgICAgIC8vIFwibmV4dFwiIHdpdGggYW4gdW5kZWZpbmVkIGFyZy5cbiAgICAgICAgICBtZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG4gICAgICAgICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG4gICAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oYXJnKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgICBtZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBhcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIHZhciBpbmZvID0ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGlmIChjb250ZXh0LmRlbGVnYXRlICYmIG1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBtZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG4gICAgICAgIHJldHVybiAhIWNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxuICAvLyBvYmplY3QsIHRoaXMgc2VlbXMgdG8gYmUgdGhlIG1vc3QgcmVsaWFibGUgdGVjaG5pcXVlIHRoYXQgZG9lcyBub3RcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XG4gIHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgPyB3aW5kb3cgOlxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXG4pO1xuIiwiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5cclxuLy8gRGlzdHJpYnV0aW9uIGZpbGUgZm9yIE1lc3NhZ2VGYWN0b3J5LmpzIFxyXG4vLyB2ZXJzaW9uOiAwLjUuMVxyXG4vLyBMYXN0IGJ1aWxkOiBNb24gSmFuIDE2IDIwMTcgMDk6MDk6MjYgR01UKzAwMDAgKEdNVCBTdGFuZGFyZCBUaW1lKVxyXG5cclxuIWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXt2YXIgdDt0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcyx0Lk1lc3NhZ2VGYWN0b3J5PWUoKX19KGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIGZ1bmN0aW9uIHQoZSxyLG4pe2Z1bmN0aW9uIG8oYSxzKXtpZighclthXSl7aWYoIWVbYV0pe3ZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIXMmJnUpcmV0dXJuIHUoYSwhMCk7aWYoaSlyZXR1cm4gaShhLCEwKTt2YXIgYz1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2ErXCInXCIpO3Rocm93IGMuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixjfXZhciBsPXJbYV09e2V4cG9ydHM6e319O2VbYV1bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24odCl7dmFyIHI9ZVthXVsxXVt0XTtyZXR1cm4gbyhyP3I6dCl9LGwsbC5leHBvcnRzLHQsZSxyLG4pfXJldHVybiByW2FdLmV4cG9ydHN9Zm9yKHZhciBpPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsYT0wO2E8bi5sZW5ndGg7YSsrKW8oblthXSk7cmV0dXJuIG99KHsxOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5XCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnlcIjoxNn1dLDI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIjoxN31dLDM6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIjoxOH1dLDQ6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2ZyZWV6ZVwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9mcmVlemVcIjoxOX1dLDU6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiOjIwfV0sNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5c1wiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCI6MjF9XSw3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIjoyMn1dLDg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCI6MjN9XSw5OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiOjI0fV0sMTA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyLl9fZXNNb2R1bGU9ITAscltcImRlZmF1bHRcIl09ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfX0se31dLDExOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLGk9bihvKTtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksKDAsaVtcImRlZmF1bHRcIl0pKGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpfSx7XCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIjozfV0sMTI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLGk9bihvKSxhPWUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIikscz1uKGEpLHU9ZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpLGM9bih1KTtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiKyhcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOigwLGNbXCJkZWZhdWx0XCJdKSh0KSkpO2UucHJvdG90eXBlPSgwLHNbXCJkZWZhdWx0XCJdKSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKGlbXCJkZWZhdWx0XCJdPygwLGlbXCJkZWZhdWx0XCJdKShlLHQpOmUuX19wcm90b19fPXQpfX0se1wiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCI6MixcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIjo3LFwiLi4vaGVscGVycy90eXBlb2ZcIjoxNH1dLDEzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKFwiLi4vaGVscGVycy90eXBlb2ZcIiksaT1uKG8pO3JbXCJkZWZhdWx0XCJdPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6KDAsaVtcImRlZmF1bHRcIl0pKHQpKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9fSx7XCIuLi9oZWxwZXJzL3R5cGVvZlwiOjE0fV0sMTQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKSxpPW4obyksYT1lKFwiLi4vY29yZS1qcy9zeW1ib2xcIikscz1uKGEpLHU9XCJmdW5jdGlvblwiPT10eXBlb2Ygc1tcImRlZmF1bHRcIl0mJlwic3ltYm9sXCI9PXR5cGVvZiBpW1wiZGVmYXVsdFwiXT9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBzW1wiZGVmYXVsdFwiXSYmZS5jb25zdHJ1Y3Rvcj09PXNbXCJkZWZhdWx0XCJdJiZlIT09c1tcImRlZmF1bHRcIl0ucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9O3JbXCJkZWZhdWx0XCJdPVwiZnVuY3Rpb25cIj09dHlwZW9mIHNbXCJkZWZhdWx0XCJdJiZcInN5bWJvbFwiPT09dShpW1wiZGVmYXVsdFwiXSk/ZnVuY3Rpb24oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjp1KGUpfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2Ygc1tcImRlZmF1bHRcIl0mJmUuY29uc3RydWN0b3I9PT1zW1wiZGVmYXVsdFwiXSYmZSE9PXNbXCJkZWZhdWx0XCJdLnByb3RvdHlwZT9cInN5bWJvbFwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6dShlKX19LHtcIi4uL2NvcmUtanMvc3ltYm9sXCI6OCxcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCI6OX1dLDE1OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpfSx7XCJyZWdlbmVyYXRvci1ydW50aW1lXCI6OTd9XSwxNjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLG89bi5KU09OfHwobi5KU09OPXtzdHJpbmdpZnk6SlNPTi5zdHJpbmdpZnl9KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uc3RyaW5naWZ5LmFwcGx5KG8sYXJndW1lbnRzKX19LHtcIi4uLy4uL21vZHVsZXMvX2NvcmVcIjozMH1dLDE3OltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGVcIik7dmFyIG49ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuLmNyZWF0ZShlLHQpfX0se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwLFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZVwiOjg0fV0sMTg6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eVwiKTt2YXIgbj1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3Q7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbi5kZWZpbmVQcm9wZXJ0eShlLHQscil9fSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5XCI6ODV9XSwxOTpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplXCIpLHQuZXhwb3J0cz1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3QuZnJlZXplfSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplXCI6ODZ9XSwyMDpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZlwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0LmdldFByb3RvdHlwZU9mfSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZlwiOjg3fV0sMjE6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXNcIiksdC5leHBvcnRzPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLk9iamVjdC5rZXlzfSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5c1wiOjg4fV0sMjI6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2ZcIiksdC5leHBvcnRzPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLk9iamVjdC5zZXRQcm90b3R5cGVPZn0se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwLFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2ZcIjo4OX1dLDIzOltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbFwiKSxlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZ1wiKSxlKFwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yXCIpLGUoXCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZVwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuU3ltYm9sfSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nXCI6OTAsXCIuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2xcIjo5MixcIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvclwiOjkzLFwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGVcIjo5NH1dLDI0OltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiKSxlKFwiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpLHQuZXhwb3J0cz1lKFwiLi4vLi4vbW9kdWxlcy9fd2tzLWV4dFwiKS5mKFwiaXRlcmF0b3JcIil9LHtcIi4uLy4uL21vZHVsZXMvX3drcy1leHRcIjo4MSxcIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiOjkxLFwiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCI6OTV9XSwyNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhIGZ1bmN0aW9uIVwiKTtyZXR1cm4gZX19LHt9XSwyNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbigpe319LHt9XSwyNzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19pcy1vYmplY3RcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFuKGUpKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhbiBvYmplY3QhXCIpO3JldHVybiBlfX0se1wiLi9faXMtb2JqZWN0XCI6NDZ9XSwyODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1pb2JqZWN0XCIpLG89ZShcIi4vX3RvLWxlbmd0aFwiKSxpPWUoXCIuL190by1pbmRleFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixhKXt2YXIgcyx1PW4odCksYz1vKHUubGVuZ3RoKSxsPWkoYSxjKTtpZihlJiZyIT1yKXtmb3IoO2M+bDspaWYocz11W2wrK10scyE9cylyZXR1cm4hMH1lbHNlIGZvcig7Yz5sO2wrKylpZigoZXx8bCBpbiB1KSYmdVtsXT09PXIpcmV0dXJuIGV8fGx8fDA7cmV0dXJuIWUmJi0xfX19LHtcIi4vX3RvLWluZGV4XCI6NzMsXCIuL190by1pb2JqZWN0XCI6NzUsXCIuL190by1sZW5ndGhcIjo3Nn1dLDI5OltmdW5jdGlvbihlLHQscil7dmFyIG49e30udG9TdHJpbmc7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuLmNhbGwoZSkuc2xpY2UoOCwtMSl9fSx7fV0sMzA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj10LmV4cG9ydHM9e3ZlcnNpb246XCIyLjQuMFwifTtcIm51bWJlclwiPT10eXBlb2YgX19lJiYoX19lPW4pfSx7fV0sMzE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fYS1mdW5jdGlvblwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2lmKG4oZSksdm9pZCAwPT09dClyZXR1cm4gZTtzd2l0Y2gocil7Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gZS5jYWxsKHQscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gZS5jYWxsKHQscixuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLG4sbyl7cmV0dXJuIGUuY2FsbCh0LHIsbixvKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodCxhcmd1bWVudHMpfX19LHtcIi4vX2EtZnVuY3Rpb25cIjoyNX1dLDMyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09ZSl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIrZSk7cmV0dXJuIGV9fSx7fV0sMzM6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9IWUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0se1wiLi9fZmFpbHNcIjozOH1dLDM0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2lzLW9iamVjdFwiKSxvPWUoXCIuL19nbG9iYWxcIikuZG9jdW1lbnQsaT1uKG8pJiZuKG8uY3JlYXRlRWxlbWVudCk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpP28uY3JlYXRlRWxlbWVudChlKTp7fX19LHtcIi4vX2dsb2JhbFwiOjM5LFwiLi9faXMtb2JqZWN0XCI6NDZ9XSwzNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1cImNvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZlwiLnNwbGl0KFwiLFwiKX0se31dLDM2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX29iamVjdC1rZXlzXCIpLG89ZShcIi4vX29iamVjdC1nb3BzXCIpLGk9ZShcIi4vX29iamVjdC1waWVcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW4oZSkscj1vLmY7aWYocilmb3IodmFyIGEscz1yKGUpLHU9aS5mLGM9MDtzLmxlbmd0aD5jOyl1LmNhbGwoZSxhPXNbYysrXSkmJnQucHVzaChhKTtyZXR1cm4gdH19LHtcIi4vX29iamVjdC1nb3BzXCI6NjAsXCIuL19vYmplY3Qta2V5c1wiOjYzLFwiLi9fb2JqZWN0LXBpZVwiOjY0fV0sMzc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZ2xvYmFsXCIpLG89ZShcIi4vX2NvcmVcIiksaT1lKFwiLi9fY3R4XCIpLGE9ZShcIi4vX2hpZGVcIikscz1cInByb3RvdHlwZVwiLHU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBjLGwsZixkPWUmdS5GLHA9ZSZ1LkcsaD1lJnUuUyx5PWUmdS5QLG09ZSZ1LkIsdj1lJnUuVyxfPXA/bzpvW3RdfHwob1t0XT17fSksYj1fW3NdLGc9cD9uOmg/blt0XTooblt0XXx8e30pW3NdO3AmJihyPXQpO2ZvcihjIGluIHIpbD0hZCYmZyYmdm9pZCAwIT09Z1tjXSxsJiZjIGluIF98fChmPWw/Z1tjXTpyW2NdLF9bY109cCYmXCJmdW5jdGlvblwiIT10eXBlb2YgZ1tjXT9yW2NdOm0mJmw/aShmLG4pOnYmJmdbY109PWY/ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24odCxyLG4pe2lmKHRoaXMgaW5zdGFuY2VvZiBlKXtzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7Y2FzZSAwOnJldHVybiBuZXcgZTtjYXNlIDE6cmV0dXJuIG5ldyBlKHQpO2Nhc2UgMjpyZXR1cm4gbmV3IGUodCxyKX1yZXR1cm4gbmV3IGUodCxyLG4pfXJldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07cmV0dXJuIHRbc109ZVtzXSx0fShmKTp5JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBmP2koRnVuY3Rpb24uY2FsbCxmKTpmLHkmJigoXy52aXJ0dWFsfHwoXy52aXJ0dWFsPXt9KSlbY109ZixlJnUuUiYmYiYmIWJbY10mJmEoYixjLGYpKSl9O3UuRj0xLHUuRz0yLHUuUz00LHUuUD04LHUuQj0xNix1Llc9MzIsdS5VPTY0LHUuUj0xMjgsdC5leHBvcnRzPXV9LHtcIi4vX2NvcmVcIjozMCxcIi4vX2N0eFwiOjMxLFwiLi9fZ2xvYmFsXCI6MzksXCIuL19oaWRlXCI6NDF9XSwzODpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXt0cnl7cmV0dXJuISFlKCl9Y2F0Y2godCl7cmV0dXJuITB9fX0se31dLDM5OltmdW5jdGlvbihlLHQscil7dmFyIG49dC5leHBvcnRzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5NYXRoPT1NYXRoP3NlbGY6RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1wibnVtYmVyXCI9PXR5cGVvZiBfX2cmJihfX2c9bil9LHt9XSw0MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXt9Lmhhc093blByb3BlcnR5O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuLmNhbGwoZSx0KX19LHt9XSw0MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3QtZHBcIiksbz1lKFwiLi9fcHJvcGVydHktZGVzY1wiKTt0LmV4cG9ydHM9ZShcIi4vX2Rlc2NyaXB0b3JzXCIpP2Z1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbi5mKGUsdCxvKDEscikpfTpmdW5jdGlvbihlLHQscil7cmV0dXJuIGVbdF09cixlfX0se1wiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX29iamVjdC1kcFwiOjU1LFwiLi9fcHJvcGVydHktZGVzY1wiOjY2fV0sNDI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZShcIi4vX2dsb2JhbFwiKS5kb2N1bWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fSx7XCIuL19nbG9iYWxcIjozOX1dLDQzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSFlKFwiLi9fZGVzY3JpcHRvcnNcIikmJiFlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUoXCIuL19kb20tY3JlYXRlXCIpKFwiZGl2XCIpLFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LHtcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19kb20tY3JlYXRlXCI6MzQsXCIuL19mYWlsc1wiOjM4fV0sNDQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fY29mXCIpO3QuZXhwb3J0cz1PYmplY3QoXCJ6XCIpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApP09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm5cIlN0cmluZ1wiPT1uKGUpP2Uuc3BsaXQoXCJcIik6T2JqZWN0KGUpfX0se1wiLi9fY29mXCI6Mjl9XSw0NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19jb2ZcIik7dC5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiQXJyYXlcIj09bihlKX19LHtcIi4vX2NvZlwiOjI5fV0sNDY6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGU/bnVsbCE9PWU6XCJmdW5jdGlvblwiPT10eXBlb2YgZX19LHt9XSw0NzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL19vYmplY3QtY3JlYXRlXCIpLG89ZShcIi4vX3Byb3BlcnR5LWRlc2NcIiksaT1lKFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIiksYT17fTtlKFwiLi9faGlkZVwiKShhLGUoXCIuL193a3NcIikoXCJpdGVyYXRvclwiKSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSksdC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtlLnByb3RvdHlwZT1uKGEse25leHQ6bygxLHIpfSksaShlLHQrXCIgSXRlcmF0b3JcIil9fSx7XCIuL19oaWRlXCI6NDEsXCIuL19vYmplY3QtY3JlYXRlXCI6NTQsXCIuL19wcm9wZXJ0eS1kZXNjXCI6NjYsXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiOjY5LFwiLi9fd2tzXCI6ODJ9XSw0ODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL19saWJyYXJ5XCIpLG89ZShcIi4vX2V4cG9ydFwiKSxpPWUoXCIuL19yZWRlZmluZVwiKSxhPWUoXCIuL19oaWRlXCIpLHM9ZShcIi4vX2hhc1wiKSx1PWUoXCIuL19pdGVyYXRvcnNcIiksYz1lKFwiLi9faXRlci1jcmVhdGVcIiksbD1lKFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIiksZj1lKFwiLi9fb2JqZWN0LWdwb1wiKSxkPWUoXCIuL193a3NcIikoXCJpdGVyYXRvclwiKSxwPSEoW10ua2V5cyYmXCJuZXh0XCJpbltdLmtleXMoKSksaD1cIkBAaXRlcmF0b3JcIix5PVwia2V5c1wiLG09XCJ2YWx1ZXNcIix2PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixfLGIsZyxFKXtjKHIsdCxfKTt2YXIgaix3LE8sTT1mdW5jdGlvbihlKXtpZighcCYmZSBpbiBSKXJldHVybiBSW2VdO3N3aXRjaChlKXtjYXNlIHk6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9O2Nhc2UgbTpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9fSx4PXQrXCIgSXRlcmF0b3JcIixQPWI9PW0saz0hMSxSPWUucHJvdG90eXBlLFM9UltkXXx8UltoXXx8YiYmUltiXSxUPVN8fE0oYiksQT1iP1A/TShcImVudHJpZXNcIik6VDp2b2lkIDAsTj1cIkFycmF5XCI9PXQ/Ui5lbnRyaWVzfHxTOlM7aWYoTiYmKE89ZihOLmNhbGwobmV3IGUpKSxPIT09T2JqZWN0LnByb3RvdHlwZSYmKGwoTyx4LCEwKSxufHxzKE8sZCl8fGEoTyxkLHYpKSksUCYmUyYmUy5uYW1lIT09bSYmKGs9ITAsVD1mdW5jdGlvbigpe3JldHVybiBTLmNhbGwodGhpcyl9KSxuJiYhRXx8IXAmJiFrJiZSW2RdfHxhKFIsZCxUKSx1W3RdPVQsdVt4XT12LGIpaWYoaj17dmFsdWVzOlA/VDpNKG0pLGtleXM6Zz9UOk0oeSksZW50cmllczpBfSxFKWZvcih3IGluIGopdyBpbiBSfHxpKFIsdyxqW3ddKTtlbHNlIG8oby5QK28uRioocHx8ayksdCxqKTtyZXR1cm4gan19LHtcIi4vX2V4cG9ydFwiOjM3LFwiLi9faGFzXCI6NDAsXCIuL19oaWRlXCI6NDEsXCIuL19pdGVyLWNyZWF0ZVwiOjQ3LFwiLi9faXRlcmF0b3JzXCI6NTAsXCIuL19saWJyYXJ5XCI6NTIsXCIuL19vYmplY3QtZ3BvXCI6NjEsXCIuL19yZWRlZmluZVwiOjY3LFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIjo2OSxcIi4vX3drc1wiOjgyfV0sNDk6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57dmFsdWU6dCxkb25lOiEhZX19fSx7fV0sNTA6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e319LHt9XSw1MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3Qta2V5c1wiKSxvPWUoXCIuL190by1pb2JqZWN0XCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcixpPW8oZSksYT1uKGkpLHM9YS5sZW5ndGgsdT0wO3M+dTspaWYoaVtyPWFbdSsrXV09PT10KXJldHVybiByfX0se1wiLi9fb2JqZWN0LWtleXNcIjo2MyxcIi4vX3RvLWlvYmplY3RcIjo3NX1dLDUyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSEwfSx7fV0sNTM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdWlkXCIpKFwibWV0YVwiKSxvPWUoXCIuL19pcy1vYmplY3RcIiksaT1lKFwiLi9faGFzXCIpLGE9ZShcIi4vX29iamVjdC1kcFwiKS5mLHM9MCx1PU9iamVjdC5pc0V4dGVuc2libGV8fGZ1bmN0aW9uKCl7cmV0dXJuITB9LGM9IWUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JldHVybiB1KE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpfSksbD1mdW5jdGlvbihlKXthKGUsbix7dmFsdWU6e2k6XCJPXCIrICsrcyx3Ont9fX0pfSxmPWZ1bmN0aW9uKGUsdCl7aWYoIW8oZSkpcmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGU/ZTooXCJzdHJpbmdcIj09dHlwZW9mIGU/XCJTXCI6XCJQXCIpK2U7aWYoIWkoZSxuKSl7aWYoIXUoZSkpcmV0dXJuXCJGXCI7aWYoIXQpcmV0dXJuXCJFXCI7bChlKX1yZXR1cm4gZVtuXS5pfSxkPWZ1bmN0aW9uKGUsdCl7aWYoIWkoZSxuKSl7aWYoIXUoZSkpcmV0dXJuITA7aWYoIXQpcmV0dXJuITE7bChlKX1yZXR1cm4gZVtuXS53fSxwPWZ1bmN0aW9uKGUpe3JldHVybiBjJiZoLk5FRUQmJnUoZSkmJiFpKGUsbikmJmwoZSksZX0saD10LmV4cG9ydHM9e0tFWTpuLE5FRUQ6ITEsZmFzdEtleTpmLGdldFdlYWs6ZCxvbkZyZWV6ZTpwfX0se1wiLi9fZmFpbHNcIjozOCxcIi4vX2hhc1wiOjQwLFwiLi9faXMtb2JqZWN0XCI6NDYsXCIuL19vYmplY3QtZHBcIjo1NSxcIi4vX3VpZFwiOjc5fV0sNTQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fYW4tb2JqZWN0XCIpLG89ZShcIi4vX29iamVjdC1kcHNcIiksaT1lKFwiLi9fZW51bS1idWcta2V5c1wiKSxhPWUoXCIuL19zaGFyZWQta2V5XCIpKFwiSUVfUFJPVE9cIikscz1mdW5jdGlvbigpe30sdT1cInByb3RvdHlwZVwiLGM9ZnVuY3Rpb24oKXt2YXIgdCxyPWUoXCIuL19kb20tY3JlYXRlXCIpKFwiaWZyYW1lXCIpLG49aS5sZW5ndGgsbz1cIjxcIixhPVwiPlwiO2ZvcihyLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsZShcIi4vX2h0bWxcIikuYXBwZW5kQ2hpbGQociksci5zcmM9XCJqYXZhc2NyaXB0OlwiLHQ9ci5jb250ZW50V2luZG93LmRvY3VtZW50LHQub3BlbigpLHQud3JpdGUobytcInNjcmlwdFwiK2ErXCJkb2N1bWVudC5GPU9iamVjdFwiK28rXCIvc2NyaXB0XCIrYSksdC5jbG9zZSgpLGM9dC5GO24tLTspZGVsZXRlIGNbdV1baVtuXV07cmV0dXJuIGMoKX07dC5leHBvcnRzPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIG51bGwhPT1lPyhzW3VdPW4oZSkscj1uZXcgcyxzW3VdPW51bGwsclthXT1lKTpyPWMoKSx2b2lkIDA9PT10P3I6byhyLHQpfX0se1wiLi9fYW4tb2JqZWN0XCI6MjcsXCIuL19kb20tY3JlYXRlXCI6MzQsXCIuL19lbnVtLWJ1Zy1rZXlzXCI6MzUsXCIuL19odG1sXCI6NDIsXCIuL19vYmplY3QtZHBzXCI6NTYsXCIuL19zaGFyZWQta2V5XCI6NzB9XSw1NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19hbi1vYmplY3RcIiksbz1lKFwiLi9faWU4LWRvbS1kZWZpbmVcIiksaT1lKFwiLi9fdG8tcHJpbWl0aXZlXCIpLGE9T2JqZWN0LmRlZmluZVByb3BlcnR5O3IuZj1lKFwiLi9fZGVzY3JpcHRvcnNcIik/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHQ9aSh0LCEwKSxuKHIpLG8pdHJ5e3JldHVybiBhKGUsdCxyKX1jYXRjaChzKXt9aWYoXCJnZXRcImluIHJ8fFwic2V0XCJpbiByKXRocm93IFR5cGVFcnJvcihcIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIVwiKTtyZXR1cm5cInZhbHVlXCJpbiByJiYoZVt0XT1yLnZhbHVlKSxlfX0se1wiLi9fYW4tb2JqZWN0XCI6MjcsXCIuL19kZXNjcmlwdG9yc1wiOjMzLFwiLi9faWU4LWRvbS1kZWZpbmVcIjo0MyxcIi4vX3RvLXByaW1pdGl2ZVwiOjc4fV0sNTY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWRwXCIpLG89ZShcIi4vX2FuLW9iamVjdFwiKSxpPWUoXCIuL19vYmplY3Qta2V5c1wiKTt0LmV4cG9ydHM9ZShcIi4vX2Rlc2NyaXB0b3JzXCIpP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzOmZ1bmN0aW9uKGUsdCl7byhlKTtmb3IodmFyIHIsYT1pKHQpLHM9YS5sZW5ndGgsdT0wO3M+dTspbi5mKGUscj1hW3UrK10sdFtyXSk7cmV0dXJuIGV9fSx7XCIuL19hbi1vYmplY3RcIjoyNyxcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19vYmplY3QtZHBcIjo1NSxcIi4vX29iamVjdC1rZXlzXCI6NjN9XSw1NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3QtcGllXCIpLG89ZShcIi4vX3Byb3BlcnR5LWRlc2NcIiksaT1lKFwiLi9fdG8taW9iamVjdFwiKSxhPWUoXCIuL190by1wcmltaXRpdmVcIikscz1lKFwiLi9faGFzXCIpLHU9ZShcIi4vX2llOC1kb20tZGVmaW5lXCIpLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtyLmY9ZShcIi4vX2Rlc2NyaXB0b3JzXCIpP2M6ZnVuY3Rpb24oZSx0KXtpZihlPWkoZSksdD1hKHQsITApLHUpdHJ5e3JldHVybiBjKGUsdCl9Y2F0Y2gocil7fWlmKHMoZSx0KSlyZXR1cm4gbyghbi5mLmNhbGwoZSx0KSxlW3RdKX19LHtcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19oYXNcIjo0MCxcIi4vX2llOC1kb20tZGVmaW5lXCI6NDMsXCIuL19vYmplY3QtcGllXCI6NjQsXCIuL19wcm9wZXJ0eS1kZXNjXCI6NjYsXCIuL190by1pb2JqZWN0XCI6NzUsXCIuL190by1wcmltaXRpdmVcIjo3OH1dLDU4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLWlvYmplY3RcIiksbz1lKFwiLi9fb2JqZWN0LWdvcG5cIikuZixpPXt9LnRvU3RyaW5nLGE9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdLHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBvKGUpfWNhdGNoKHQpe3JldHVybiBhLnNsaWNlKCl9fTt0LmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gYSYmXCJbb2JqZWN0IFdpbmRvd11cIj09aS5jYWxsKGUpP3MoZSk6byhuKGUpKX19LHtcIi4vX29iamVjdC1nb3BuXCI6NTksXCIuL190by1pb2JqZWN0XCI6NzV9XSw1OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbFwiKSxvPWUoXCIuL19lbnVtLWJ1Zy1rZXlzXCIpLmNvbmNhdChcImxlbmd0aFwiLFwicHJvdG90eXBlXCIpO3IuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc3x8ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSxvKX19LHtcIi4vX2VudW0tYnVnLWtleXNcIjozNSxcIi4vX29iamVjdC1rZXlzLWludGVybmFsXCI6NjJ9XSw2MDpbZnVuY3Rpb24oZSx0LHIpe3IuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSx7fV0sNjE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faGFzXCIpLG89ZShcIi4vX3RvLW9iamVjdFwiKSxpPWUoXCIuL19zaGFyZWQta2V5XCIpKFwiSUVfUFJPVE9cIiksYT1PYmplY3QucHJvdG90eXBlO3QuZXhwb3J0cz1PYmplY3QuZ2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKGUpe3JldHVybiBlPW8oZSksbihlLGkpP2VbaV06XCJmdW5jdGlvblwiPT10eXBlb2YgZS5jb25zdHJ1Y3RvciYmZSBpbnN0YW5jZW9mIGUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU6ZSBpbnN0YW5jZW9mIE9iamVjdD9hOm51bGx9fSx7XCIuL19oYXNcIjo0MCxcIi4vX3NoYXJlZC1rZXlcIjo3MCxcIi4vX3RvLW9iamVjdFwiOjc3fV0sNjI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faGFzXCIpLG89ZShcIi4vX3RvLWlvYmplY3RcIiksaT1lKFwiLi9fYXJyYXktaW5jbHVkZXNcIikoITEpLGE9ZShcIi4vX3NoYXJlZC1rZXlcIikoXCJJRV9QUk9UT1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcixzPW8oZSksdT0wLGM9W107Zm9yKHIgaW4gcylyIT1hJiZuKHMscikmJmMucHVzaChyKTtmb3IoO3QubGVuZ3RoPnU7KW4ocyxyPXRbdSsrXSkmJih+aShjLHIpfHxjLnB1c2gocikpO3JldHVybiBjfX0se1wiLi9fYXJyYXktaW5jbHVkZXNcIjoyOCxcIi4vX2hhc1wiOjQwLFwiLi9fc2hhcmVkLWtleVwiOjcwLFwiLi9fdG8taW9iamVjdFwiOjc1fV0sNjM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWxcIiksbz1lKFwiLi9fZW51bS1idWcta2V5c1wiKTt0LmV4cG9ydHM9T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsbyl9fSx7XCIuL19lbnVtLWJ1Zy1rZXlzXCI6MzUsXCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbFwiOjYyfV0sNjQ6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LHt9XSw2NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19leHBvcnRcIiksbz1lKFwiLi9fY29yZVwiKSxpPWUoXCIuL19mYWlsc1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj0oby5PYmplY3R8fHt9KVtlXXx8T2JqZWN0W2VdLGE9e307YVtlXT10KHIpLG4obi5TK24uRippKGZ1bmN0aW9uKCl7cigxKX0pLFwiT2JqZWN0XCIsYSl9fSx7XCIuL19jb3JlXCI6MzAsXCIuL19leHBvcnRcIjozNyxcIi4vX2ZhaWxzXCI6Mzh9XSw2NjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybntlbnVtZXJhYmxlOiEoMSZlKSxjb25maWd1cmFibGU6ISgyJmUpLHdyaXRhYmxlOiEoNCZlKSx2YWx1ZTp0fX19LHt9XSw2NzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKFwiLi9faGlkZVwiKX0se1wiLi9faGlkZVwiOjQxfV0sNjg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faXMtb2JqZWN0XCIpLG89ZShcIi4vX2FuLW9iamVjdFwiKSxpPWZ1bmN0aW9uKGUsdCl7aWYobyhlKSwhbih0KSYmbnVsbCE9PXQpdGhyb3cgVHlwZUVycm9yKHQrXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpfTt0LmV4cG9ydHM9e3NldDpPYmplY3Quc2V0UHJvdG90eXBlT2Z8fChcIl9fcHJvdG9fX1wiaW57fT9mdW5jdGlvbih0LHIsbil7dHJ5e249ZShcIi4vX2N0eFwiKShGdW5jdGlvbi5jYWxsLGUoXCIuL19vYmplY3QtZ29wZFwiKS5mKE9iamVjdC5wcm90b3R5cGUsXCJfX3Byb3RvX19cIikuc2V0LDIpLG4odCxbXSkscj0hKHQgaW5zdGFuY2VvZiBBcnJheSl9Y2F0Y2gobyl7cj0hMH1yZXR1cm4gZnVuY3Rpb24oZSx0KXtyZXR1cm4gaShlLHQpLHI/ZS5fX3Byb3RvX189dDpuKGUsdCksZX19KHt9LCExKTp2b2lkIDApLGNoZWNrOml9fSx7XCIuL19hbi1vYmplY3RcIjoyNyxcIi4vX2N0eFwiOjMxLFwiLi9faXMtb2JqZWN0XCI6NDYsXCIuL19vYmplY3QtZ29wZFwiOjU3fV0sNjk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWRwXCIpLmYsbz1lKFwiLi9faGFzXCIpLGk9ZShcIi4vX3drc1wiKShcInRvU3RyaW5nVGFnXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7ZSYmIW8oZT1yP2U6ZS5wcm90b3R5cGUsaSkmJm4oZSxpLHtjb25maWd1cmFibGU6ITAsdmFsdWU6dH0pfX0se1wiLi9faGFzXCI6NDAsXCIuL19vYmplY3QtZHBcIjo1NSxcIi4vX3drc1wiOjgyfV0sNzA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fc2hhcmVkXCIpKFwia2V5c1wiKSxvPWUoXCIuL191aWRcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1vKGUpKX19LHtcIi4vX3NoYXJlZFwiOjcxLFwiLi9fdWlkXCI6Nzl9XSw3MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19nbG9iYWxcIiksbz1cIl9fY29yZS1qc19zaGFyZWRfX1wiLGk9bltvXXx8KG5bb109e30pO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaVtlXXx8KGlbZV09e30pfX0se1wiLi9fZ2xvYmFsXCI6Mzl9XSw3MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1pbnRlZ2VyXCIpLG89ZShcIi4vX2RlZmluZWRcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIpe3ZhciBpLGEscz1TdHJpbmcobyh0KSksdT1uKHIpLGM9cy5sZW5ndGg7cmV0dXJuIHU8MHx8dT49Yz9lP1wiXCI6dm9pZCAwOihpPXMuY2hhckNvZGVBdCh1KSxpPDU1Mjk2fHxpPjU2MzE5fHx1KzE9PT1jfHwoYT1zLmNoYXJDb2RlQXQodSsxKSk8NTYzMjB8fGE+NTczNDM/ZT9zLmNoYXJBdCh1KTppOmU/cy5zbGljZSh1LHUrMik6KGktNTUyOTY8PDEwKSsoYS01NjMyMCkrNjU1MzYpfX19LHtcIi4vX2RlZmluZWRcIjozMixcIi4vX3RvLWludGVnZXJcIjo3NH1dLDczOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLWludGVnZXJcIiksbz1NYXRoLm1heCxpPU1hdGgubWluO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBlPW4oZSksZTwwP28oZSt0LDApOmkoZSx0KX19LHtcIi4vX3RvLWludGVnZXJcIjo3NH1dLDc0OltmdW5jdGlvbihlLHQscil7dmFyIG49TWF0aC5jZWlsLG89TWF0aC5mbG9vcjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlzTmFOKGU9K2UpPzA6KGU+MD9vOm4pKGUpfX0se31dLDc1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2lvYmplY3RcIiksbz1lKFwiLi9fZGVmaW5lZFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4obyhlKSl9fSx7XCIuL19kZWZpbmVkXCI6MzIsXCIuL19pb2JqZWN0XCI6NDR9XSw3NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1pbnRlZ2VyXCIpLG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlPjA/byhuKGUpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSx7XCIuL190by1pbnRlZ2VyXCI6NzR9XSw3NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19kZWZpbmVkXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0KG4oZSkpfX0se1wiLi9fZGVmaW5lZFwiOjMyfV0sNzg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faXMtb2JqZWN0XCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKCFuKGUpKXJldHVybiBlO3ZhciByLG87aWYodCYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mKHI9ZS52YWx1ZU9mKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO2lmKCF0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87dGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpfX0se1wiLi9faXMtb2JqZWN0XCI6NDZ9XSw3OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPTAsbz1NYXRoLnJhbmRvbSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm5cIlN5bWJvbChcIi5jb25jYXQodm9pZCAwPT09ZT9cIlwiOmUsXCIpX1wiLCgrK24rbykudG9TdHJpbmcoMzYpKX19LHt9XSw4MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19nbG9iYWxcIiksbz1lKFwiLi9fY29yZVwiKSxpPWUoXCIuL19saWJyYXJ5XCIpLGE9ZShcIi4vX3drcy1leHRcIikscz1lKFwiLi9fb2JqZWN0LWRwXCIpLmY7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW8uU3ltYm9sfHwoby5TeW1ib2w9aT97fTpuLlN5bWJvbHx8e30pO1wiX1wiPT1lLmNoYXJBdCgwKXx8ZSBpbiB0fHxzKHQsZSx7dmFsdWU6YS5mKGUpfSl9fSx7XCIuL19jb3JlXCI6MzAsXCIuL19nbG9iYWxcIjozOSxcIi4vX2xpYnJhcnlcIjo1MixcIi4vX29iamVjdC1kcFwiOjU1LFwiLi9fd2tzLWV4dFwiOjgxfV0sODE6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9ZShcIi4vX3drc1wiKX0se1wiLi9fd2tzXCI6ODJ9XSw4MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19zaGFyZWRcIikoXCJ3a3NcIiksbz1lKFwiLi9fdWlkXCIpLGk9ZShcIi4vX2dsb2JhbFwiKS5TeW1ib2wsYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpLHM9dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1hJiZpW2VdfHwoYT9pOm8pKFwiU3ltYm9sLlwiK2UpKX07cy5zdG9yZT1ufSx7XCIuL19nbG9iYWxcIjozOSxcIi4vX3NoYXJlZFwiOjcxLFwiLi9fdWlkXCI6Nzl9XSw4MzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL19hZGQtdG8tdW5zY29wYWJsZXNcIiksbz1lKFwiLi9faXRlci1zdGVwXCIpLGk9ZShcIi4vX2l0ZXJhdG9yc1wiKSxhPWUoXCIuL190by1pb2JqZWN0XCIpO3QuZXhwb3J0cz1lKFwiLi9faXRlci1kZWZpbmVcIikoQXJyYXksXCJBcnJheVwiLGZ1bmN0aW9uKGUsdCl7dGhpcy5fdD1hKGUpLHRoaXMuX2k9MCx0aGlzLl9rPXR9LGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fdCx0PXRoaXMuX2sscj10aGlzLl9pKys7cmV0dXJuIWV8fHI+PWUubGVuZ3RoPyh0aGlzLl90PXZvaWQgMCxvKDEpKTpcImtleXNcIj09dD9vKDAscik6XCJ2YWx1ZXNcIj09dD9vKDAsZVtyXSk6bygwLFtyLGVbcl1dKX0sXCJ2YWx1ZXNcIiksaS5Bcmd1bWVudHM9aS5BcnJheSxuKFwia2V5c1wiKSxuKFwidmFsdWVzXCIpLG4oXCJlbnRyaWVzXCIpfSx7XCIuL19hZGQtdG8tdW5zY29wYWJsZXNcIjoyNixcIi4vX2l0ZXItZGVmaW5lXCI6NDgsXCIuL19pdGVyLXN0ZXBcIjo0OSxcIi4vX2l0ZXJhdG9yc1wiOjUwLFwiLi9fdG8taW9iamVjdFwiOjc1fV0sODQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZXhwb3J0XCIpO24obi5TLFwiT2JqZWN0XCIse2NyZWF0ZTplKFwiLi9fb2JqZWN0LWNyZWF0ZVwiKX0pfSx7XCIuL19leHBvcnRcIjozNyxcIi4vX29iamVjdC1jcmVhdGVcIjo1NH1dLDg1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2V4cG9ydFwiKTtuKG4uUytuLkYqIWUoXCIuL19kZXNjcmlwdG9yc1wiKSxcIk9iamVjdFwiLHtkZWZpbmVQcm9wZXJ0eTplKFwiLi9fb2JqZWN0LWRwXCIpLmZ9KX0se1wiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX2V4cG9ydFwiOjM3LFwiLi9fb2JqZWN0LWRwXCI6NTV9XSw4NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19pcy1vYmplY3RcIiksbz1lKFwiLi9fbWV0YVwiKS5vbkZyZWV6ZTtlKFwiLi9fb2JqZWN0LXNhcFwiKShcImZyZWV6ZVwiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSYmbih0KT9lKG8odCkpOnR9fSl9LHtcIi4vX2lzLW9iamVjdFwiOjQ2LFwiLi9fbWV0YVwiOjUzLFwiLi9fb2JqZWN0LXNhcFwiOjY1fV0sODc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdG8tb2JqZWN0XCIpLG89ZShcIi4vX29iamVjdC1ncG9cIik7ZShcIi4vX29iamVjdC1zYXBcIikoXCJnZXRQcm90b3R5cGVPZlwiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBvKG4oZSkpfX0pfSx7XCIuL19vYmplY3QtZ3BvXCI6NjEsXCIuL19vYmplY3Qtc2FwXCI6NjUsXCIuL190by1vYmplY3RcIjo3N31dLDg4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLW9iamVjdFwiKSxvPWUoXCIuL19vYmplY3Qta2V5c1wiKTtlKFwiLi9fb2JqZWN0LXNhcFwiKShcImtleXNcIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbyhuKGUpKX19KX0se1wiLi9fb2JqZWN0LWtleXNcIjo2MyxcIi4vX29iamVjdC1zYXBcIjo2NSxcIi4vX3RvLW9iamVjdFwiOjc3fV0sODk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZXhwb3J0XCIpO24obi5TLFwiT2JqZWN0XCIse3NldFByb3RvdHlwZU9mOmUoXCIuL19zZXQtcHJvdG9cIikuc2V0fSl9LHtcIi4vX2V4cG9ydFwiOjM3LFwiLi9fc2V0LXByb3RvXCI6Njh9XSw5MDpbZnVuY3Rpb24oZSx0LHIpe30se31dLDkxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vX3N0cmluZy1hdFwiKSghMCk7ZShcIi4vX2l0ZXItZGVmaW5lXCIpKFN0cmluZyxcIlN0cmluZ1wiLGZ1bmN0aW9uKGUpe3RoaXMuX3Q9U3RyaW5nKGUpLHRoaXMuX2k9MH0sZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuX3Qscj10aGlzLl9pO3JldHVybiByPj10Lmxlbmd0aD97dmFsdWU6dm9pZCAwLGRvbmU6ITB9OihlPW4odCxyKSx0aGlzLl9pKz1lLmxlbmd0aCx7dmFsdWU6ZSxkb25lOiExfSl9KX0se1wiLi9faXRlci1kZWZpbmVcIjo0OCxcIi4vX3N0cmluZy1hdFwiOjcyfV0sOTI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9fZ2xvYmFsXCIpLG89ZShcIi4vX2hhc1wiKSxpPWUoXCIuL19kZXNjcmlwdG9yc1wiKSxhPWUoXCIuL19leHBvcnRcIikscz1lKFwiLi9fcmVkZWZpbmVcIiksdT1lKFwiLi9fbWV0YVwiKS5LRVksYz1lKFwiLi9fZmFpbHNcIiksbD1lKFwiLi9fc2hhcmVkXCIpLGY9ZShcIi4vX3NldC10by1zdHJpbmctdGFnXCIpLGQ9ZShcIi4vX3VpZFwiKSxwPWUoXCIuL193a3NcIiksaD1lKFwiLi9fd2tzLWV4dFwiKSx5PWUoXCIuL193a3MtZGVmaW5lXCIpLG09ZShcIi4vX2tleW9mXCIpLHY9ZShcIi4vX2VudW0ta2V5c1wiKSxfPWUoXCIuL19pcy1hcnJheVwiKSxiPWUoXCIuL19hbi1vYmplY3RcIiksZz1lKFwiLi9fdG8taW9iamVjdFwiKSxFPWUoXCIuL190by1wcmltaXRpdmVcIiksaj1lKFwiLi9fcHJvcGVydHktZGVzY1wiKSx3PWUoXCIuL19vYmplY3QtY3JlYXRlXCIpLE89ZShcIi4vX29iamVjdC1nb3BuLWV4dFwiKSxNPWUoXCIuL19vYmplY3QtZ29wZFwiKSx4PWUoXCIuL19vYmplY3QtZHBcIiksUD1lKFwiLi9fb2JqZWN0LWtleXNcIiksaz1NLmYsUj14LmYsUz1PLmYsVD1uLlN5bWJvbCxBPW4uSlNPTixOPUEmJkEuc3RyaW5naWZ5LEk9XCJwcm90b3R5cGVcIixVPXAoXCJfaGlkZGVuXCIpLEM9cChcInRvUHJpbWl0aXZlXCIpLEw9e30ucHJvcGVydHlJc0VudW1lcmFibGUsRj1sKFwic3ltYm9sLXJlZ2lzdHJ5XCIpLEI9bChcInN5bWJvbHNcIiksRD1sKFwib3Atc3ltYm9sc1wiKSxHPU9iamVjdFtJXSxLPVwiZnVuY3Rpb25cIj09dHlwZW9mIFQsWT1uLlFPYmplY3QscT0hWXx8IVlbSV18fCFZW0ldLmZpbmRDaGlsZCx6PWkmJmMoZnVuY3Rpb24oKXtyZXR1cm4gNyE9dyhSKHt9LFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUih0aGlzLFwiYVwiLHt2YWx1ZTo3fSkuYX19KSkuYX0pP2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1rKEcsdCk7biYmZGVsZXRlIEdbdF0sUihlLHQsciksbiYmZSE9PUcmJlIoRyx0LG4pfTpSLEg9ZnVuY3Rpb24oZSl7dmFyIHQ9QltlXT13KFRbSV0pO3JldHVybiB0Ll9rPWUsdH0sVz1LJiZcInN5bWJvbFwiPT10eXBlb2YgVC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBUfSxKPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT09PUcmJkooRCx0LHIpLGIoZSksdD1FKHQsITApLGIociksbyhCLHQpPyhyLmVudW1lcmFibGU/KG8oZSxVKSYmZVtVXVt0XSYmKGVbVV1bdF09ITEpLHI9dyhyLHtlbnVtZXJhYmxlOmooMCwhMSl9KSk6KG8oZSxVKXx8UihlLFUsaigxLHt9KSksZVtVXVt0XT0hMCkseihlLHQscikpOlIoZSx0LHIpfSxWPWZ1bmN0aW9uKGUsdCl7YihlKTtmb3IodmFyIHIsbj12KHQ9Zyh0KSksbz0wLGk9bi5sZW5ndGg7aT5vOylKKGUscj1uW28rK10sdFtyXSk7cmV0dXJuIGV9LCQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dD93KGUpOlYodyhlKSx0KX0sWD1mdW5jdGlvbihlKXt2YXIgdD1MLmNhbGwodGhpcyxlPUUoZSwhMCkpO3JldHVybiEodGhpcz09PUcmJm8oQixlKSYmIW8oRCxlKSkmJighKHR8fCFvKHRoaXMsZSl8fCFvKEIsZSl8fG8odGhpcyxVKSYmdGhpc1tVXVtlXSl8fHQpfSxRPWZ1bmN0aW9uKGUsdCl7aWYoZT1nKGUpLHQ9RSh0LCEwKSxlIT09R3x8IW8oQix0KXx8byhELHQpKXt2YXIgcj1rKGUsdCk7cmV0dXJuIXJ8fCFvKEIsdCl8fG8oZSxVKSYmZVtVXVt0XXx8KHIuZW51bWVyYWJsZT0hMCkscn19LFo9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9UyhnKGUpKSxuPVtdLGk9MDtyLmxlbmd0aD5pOylvKEIsdD1yW2krK10pfHx0PT1VfHx0PT11fHxuLnB1c2godCk7cmV0dXJuIG59LGVlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPWU9PT1HLG49UyhyP0Q6ZyhlKSksaT1bXSxhPTA7bi5sZW5ndGg+YTspIW8oQix0PW5bYSsrXSl8fHImJiFvKEcsdCl8fGkucHVzaChCW3RdKTtyZXR1cm4gaX07S3x8KFQ9ZnVuY3Rpb24oKXtpZih0aGlzIGluc3RhbmNlb2YgVCl0aHJvdyBUeXBlRXJyb3IoXCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhXCIpO3ZhciBlPWQoYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApLHQ9ZnVuY3Rpb24ocil7dGhpcz09PUcmJnQuY2FsbChELHIpLG8odGhpcyxVKSYmbyh0aGlzW1VdLGUpJiYodGhpc1tVXVtlXT0hMSkseih0aGlzLGUsaigxLHIpKX07cmV0dXJuIGkmJnEmJnooRyxlLHtjb25maWd1cmFibGU6ITAsc2V0OnR9KSxIKGUpfSxzKFRbSV0sXCJ0b1N0cmluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2t9KSxNLmY9USx4LmY9SixlKFwiLi9fb2JqZWN0LWdvcG5cIikuZj1PLmY9WixlKFwiLi9fb2JqZWN0LXBpZVwiKS5mPVgsZShcIi4vX29iamVjdC1nb3BzXCIpLmY9ZWUsaSYmIWUoXCIuL19saWJyYXJ5XCIpJiZzKEcsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFgsITApLGguZj1mdW5jdGlvbihlKXtyZXR1cm4gSChwKGUpKX0pLGEoYS5HK2EuVythLkYqIUsse1N5bWJvbDpUfSk7Zm9yKHZhciB0ZT1cImhhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzXCIuc3BsaXQoXCIsXCIpLHJlPTA7dGUubGVuZ3RoPnJlOylwKHRlW3JlKytdKTtmb3IodmFyIHRlPVAocC5zdG9yZSkscmU9MDt0ZS5sZW5ndGg+cmU7KXkodGVbcmUrK10pO2EoYS5TK2EuRiohSyxcIlN5bWJvbFwiLHtcImZvclwiOmZ1bmN0aW9uKGUpe3JldHVybiBvKEYsZSs9XCJcIik/RltlXTpGW2VdPVQoZSl9LGtleUZvcjpmdW5jdGlvbihlKXtpZihXKGUpKXJldHVybiBtKEYsZSk7dGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgc3ltYm9sIVwiKX0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7cT0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7cT0hMX19KSxhKGEuUythLkYqIUssXCJPYmplY3RcIix7Y3JlYXRlOiQsZGVmaW5lUHJvcGVydHk6SixkZWZpbmVQcm9wZXJ0aWVzOlYsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOlEsZ2V0T3duUHJvcGVydHlOYW1lczpaLGdldE93blByb3BlcnR5U3ltYm9sczplZX0pLEEmJmEoYS5TK2EuRiooIUt8fGMoZnVuY3Rpb24oKXt2YXIgZT1UKCk7cmV0dXJuXCJbbnVsbF1cIiE9TihbZV0pfHxcInt9XCIhPU4oe2E6ZX0pfHxcInt9XCIhPU4oT2JqZWN0KGUpKX0pKSxcIkpTT05cIix7c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe2lmKHZvaWQgMCE9PWUmJiFXKGUpKXtmb3IodmFyIHQscixuPVtlXSxvPTE7YXJndW1lbnRzLmxlbmd0aD5vOyluLnB1c2goYXJndW1lbnRzW28rK10pO3JldHVybiB0PW5bMV0sXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHI9dCksIXImJl8odCl8fCh0PWZ1bmN0aW9uKGUsdCl7aWYociYmKHQ9ci5jYWxsKHRoaXMsZSx0KSksIVcodCkpcmV0dXJuIHR9KSxuWzFdPXQsTi5hcHBseShBLG4pfX19KSxUW0ldW0NdfHxlKFwiLi9faGlkZVwiKShUW0ldLEMsVFtJXS52YWx1ZU9mKSxmKFQsXCJTeW1ib2xcIiksZihNYXRoLFwiTWF0aFwiLCEwKSxmKG4uSlNPTixcIkpTT05cIiwhMCl9LHtcIi4vX2FuLW9iamVjdFwiOjI3LFwiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX2VudW0ta2V5c1wiOjM2LFwiLi9fZXhwb3J0XCI6MzcsXCIuL19mYWlsc1wiOjM4LFwiLi9fZ2xvYmFsXCI6MzksXCIuL19oYXNcIjo0MCxcIi4vX2hpZGVcIjo0MSxcIi4vX2lzLWFycmF5XCI6NDUsXCIuL19rZXlvZlwiOjUxLFwiLi9fbGlicmFyeVwiOjUyLFwiLi9fbWV0YVwiOjUzLFwiLi9fb2JqZWN0LWNyZWF0ZVwiOjU0LFwiLi9fb2JqZWN0LWRwXCI6NTUsXCIuL19vYmplY3QtZ29wZFwiOjU3LFwiLi9fb2JqZWN0LWdvcG5cIjo1OSxcIi4vX29iamVjdC1nb3BuLWV4dFwiOjU4LFwiLi9fb2JqZWN0LWdvcHNcIjo2MCxcIi4vX29iamVjdC1rZXlzXCI6NjMsXCIuL19vYmplY3QtcGllXCI6NjQsXCIuL19wcm9wZXJ0eS1kZXNjXCI6NjYsXCIuL19yZWRlZmluZVwiOjY3LFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIjo2OSxcIi4vX3NoYXJlZFwiOjcxLFwiLi9fdG8taW9iamVjdFwiOjc1LFwiLi9fdG8tcHJpbWl0aXZlXCI6NzgsXCIuL191aWRcIjo3OSxcIi4vX3drc1wiOjgyLFwiLi9fd2tzLWRlZmluZVwiOjgwLFwiLi9fd2tzLWV4dFwiOjgxfV0sOTM6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi9fd2tzLWRlZmluZVwiKShcImFzeW5jSXRlcmF0b3JcIil9LHtcIi4vX3drcy1kZWZpbmVcIjo4MH1dLDk0OltmdW5jdGlvbihlLHQscil7ZShcIi4vX3drcy1kZWZpbmVcIikoXCJvYnNlcnZhYmxlXCIpfSx7XCIuL193a3MtZGVmaW5lXCI6ODB9XSw5NTpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuL2VzNi5hcnJheS5pdGVyYXRvclwiKTtmb3IodmFyIG49ZShcIi4vX2dsb2JhbFwiKSxvPWUoXCIuL19oaWRlXCIpLGk9ZShcIi4vX2l0ZXJhdG9yc1wiKSxhPWUoXCIuL193a3NcIikoXCJ0b1N0cmluZ1RhZ1wiKSxzPVtcIk5vZGVMaXN0XCIsXCJET01Ub2tlbkxpc3RcIixcIk1lZGlhTGlzdFwiLFwiU3R5bGVTaGVldExpc3RcIixcIkNTU1J1bGVMaXN0XCJdLHU9MDt1PDU7dSsrKXt2YXIgYz1zW3VdLGw9bltjXSxmPWwmJmwucHJvdG90eXBlO2YmJiFmW2FdJiZvKGYsYSxjKSxpW2NdPWkuQXJyYXl9fSx7XCIuL19nbG9iYWxcIjozOSxcIi4vX2hpZGVcIjo0MSxcIi4vX2l0ZXJhdG9yc1wiOjUwLFwiLi9fd2tzXCI6ODIsXCIuL2VzNi5hcnJheS5pdGVyYXRvclwiOjgzfV0sOTY6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBvKCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGkoZSl7aWYoZj09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigoZj09PW58fCFmKSYmc2V0VGltZW91dClyZXR1cm4gZj1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIGYoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGYuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIGYuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBhKGUpe2lmKGQ9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigoZD09PW98fCFkKSYmY2xlYXJUaW1lb3V0KXJldHVybiBkPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e3JldHVybiBkKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gZC5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIGQuY2FsbCh0aGlzLGUpfX19ZnVuY3Rpb24gcygpe20mJmgmJihtPSExLGgubGVuZ3RoP3k9aC5jb25jYXQoeSk6dj0tMSx5Lmxlbmd0aCYmdSgpKX1mdW5jdGlvbiB1KCl7aWYoIW0pe3ZhciBlPWkocyk7bT0hMDtmb3IodmFyIHQ9eS5sZW5ndGg7dDspe2ZvcihoPXkseT1bXTsrK3Y8dDspaCYmaFt2XS5ydW4oKTt2PS0xLHQ9eS5sZW5ndGh9aD1udWxsLG09ITEsYShlKX19ZnVuY3Rpb24gYyhlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIGwoKXt9dmFyIGYsZCxwPXQuZXhwb3J0cz17fTshZnVuY3Rpb24oKXt0cnl7Zj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bn1jYXRjaChlKXtmPW59dHJ5e2Q9XCJmdW5jdGlvblwiPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpvfWNhdGNoKGUpe2Q9b319KCk7dmFyIGgseT1bXSxtPSExLHY9LTE7cC5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0W3ItMV09YXJndW1lbnRzW3JdO3kucHVzaChuZXcgYyhlLHQpKSwxIT09eS5sZW5ndGh8fG18fGkodSl9LGMucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LHAudGl0bGU9XCJicm93c2VyXCIscC5icm93c2VyPSEwLHAuZW52PXt9LHAuYXJndj1bXSxwLnZlcnNpb249XCJcIixwLnZlcnNpb25zPXt9LHAub249bCxwLmFkZExpc3RlbmVyPWwscC5vbmNlPWwscC5vZmY9bCxwLnJlbW92ZUxpc3RlbmVyPWwscC5yZW1vdmVBbGxMaXN0ZW5lcnM9bCxwLmVtaXQ9bCxwLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9LHAuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9LHAuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfSxwLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSx7fV0sOTc6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24ocil7dmFyIG49XCJvYmplY3RcIj09dHlwZW9mIHI/cjpcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsbz1uLnJlZ2VuZXJhdG9yUnVudGltZSYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobikuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKT49MCxpPW8mJm4ucmVnZW5lcmF0b3JSdW50aW1lO2lmKG4ucmVnZW5lcmF0b3JSdW50aW1lPXZvaWQgMCx0LmV4cG9ydHM9ZShcIi4vcnVudGltZVwiKSxvKW4ucmVnZW5lcmF0b3JSdW50aW1lPWk7ZWxzZSB0cnl7ZGVsZXRlIG4ucmVnZW5lcmF0b3JSdW50aW1lfWNhdGNoKGEpe24ucmVnZW5lcmF0b3JSdW50aW1lPXZvaWQgMH19KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4vcnVudGltZVwiOjk4fV0sOTg6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24oZSxyKXshZnVuY3Rpb24ocil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQscixuKXt2YXIgbz10JiZ0LnByb3RvdHlwZSBpbnN0YW5jZW9mIGk/dDppLGE9T2JqZWN0LmNyZWF0ZShvLnByb3RvdHlwZSkscz1uZXcgcChufHxbXSk7cmV0dXJuIGEuX2ludm9rZT1sKGUscixzKSxhfWZ1bmN0aW9uIG8oZSx0LHIpe3RyeXtyZXR1cm57dHlwZTpcIm5vcm1hbFwiLGFyZzplLmNhbGwodCxyKX19Y2F0Y2gobil7cmV0dXJue3R5cGU6XCJ0aHJvd1wiLGFyZzpufX19ZnVuY3Rpb24gaSgpe31mdW5jdGlvbiBhKCl7fWZ1bmN0aW9uIHMoKXt9ZnVuY3Rpb24gdShlKXtbXCJuZXh0XCIsXCJ0aHJvd1wiLFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24odCl7ZVt0XT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5faW52b2tlKHQsZSl9fSl9ZnVuY3Rpb24gYyh0KXtmdW5jdGlvbiByKGUsbixpLGEpe3ZhciBzPW8odFtlXSx0LG4pO2lmKFwidGhyb3dcIiE9PXMudHlwZSl7dmFyIHU9cy5hcmcsYz11LnZhbHVlO3JldHVybiBjJiZcIm9iamVjdFwiPT10eXBlb2YgYyYmXy5jYWxsKGMsXCJfX2F3YWl0XCIpP1Byb21pc2UucmVzb2x2ZShjLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24oZSl7cihcIm5leHRcIixlLGksYSl9LGZ1bmN0aW9uKGUpe3IoXCJ0aHJvd1wiLGUsaSxhKX0pOlByb21pc2UucmVzb2x2ZShjKS50aGVuKGZ1bmN0aW9uKGUpe3UudmFsdWU9ZSxpKHUpfSxhKX1hKHMuYXJnKX1mdW5jdGlvbiBuKGUsdCl7ZnVuY3Rpb24gbigpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLG8pe3IoZSx0LG4sbyl9KX1yZXR1cm4gaT1pP2kudGhlbihuLG4pOm4oKX1cIm9iamVjdFwiPT10eXBlb2YgZSYmZS5kb21haW4mJihyPWUuZG9tYWluLmJpbmQocikpO3ZhciBpO3RoaXMuX2ludm9rZT1ufWZ1bmN0aW9uIGwoZSx0LHIpe3ZhciBuPU87cmV0dXJuIGZ1bmN0aW9uKGksYSl7aWYobj09PXgpdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtpZihuPT09UCl7aWYoXCJ0aHJvd1wiPT09aSl0aHJvdyBhO3JldHVybiB5KCl9Zm9yKDs7KXt2YXIgcz1yLmRlbGVnYXRlO2lmKHMpe2lmKFwicmV0dXJuXCI9PT1pfHxcInRocm93XCI9PT1pJiZzLml0ZXJhdG9yW2ldPT09bSl7ci5kZWxlZ2F0ZT1udWxsO3ZhciB1PXMuaXRlcmF0b3JbXCJyZXR1cm5cIl07aWYodSl7dmFyIGM9byh1LHMuaXRlcmF0b3IsYSk7aWYoXCJ0aHJvd1wiPT09Yy50eXBlKXtpPVwidGhyb3dcIixhPWMuYXJnO2NvbnRpbnVlfX1pZihcInJldHVyblwiPT09aSljb250aW51ZX12YXIgYz1vKHMuaXRlcmF0b3JbaV0scy5pdGVyYXRvcixhKTtpZihcInRocm93XCI9PT1jLnR5cGUpe3IuZGVsZWdhdGU9bnVsbCxpPVwidGhyb3dcIixhPWMuYXJnO2NvbnRpbnVlfWk9XCJuZXh0XCIsYT1tO3ZhciBsPWMuYXJnO2lmKCFsLmRvbmUpcmV0dXJuIG49TSxsO3Jbcy5yZXN1bHROYW1lXT1sLnZhbHVlLHIubmV4dD1zLm5leHRMb2Msci5kZWxlZ2F0ZT1udWxsfWlmKFwibmV4dFwiPT09aSlyLnNlbnQ9ci5fc2VudD1hO2Vsc2UgaWYoXCJ0aHJvd1wiPT09aSl7aWYobj09PU8pdGhyb3cgbj1QLGE7ci5kaXNwYXRjaEV4Y2VwdGlvbihhKSYmKGk9XCJuZXh0XCIsYT1tKX1lbHNlXCJyZXR1cm5cIj09PWkmJnIuYWJydXB0KFwicmV0dXJuXCIsYSk7bj14O3ZhciBjPW8oZSx0LHIpO2lmKFwibm9ybWFsXCI9PT1jLnR5cGUpe249ci5kb25lP1A6TTt2YXIgbD17dmFsdWU6Yy5hcmcsZG9uZTpyLmRvbmV9O2lmKGMuYXJnIT09aylyZXR1cm4gbDtyLmRlbGVnYXRlJiZcIm5leHRcIj09PWkmJihhPW0pfWVsc2VcInRocm93XCI9PT1jLnR5cGUmJihuPVAsaT1cInRocm93XCIsYT1jLmFyZyl9fX1mdW5jdGlvbiBmKGUpe3ZhciB0PXt0cnlMb2M6ZVswXX07MSBpbiBlJiYodC5jYXRjaExvYz1lWzFdKSwyIGluIGUmJih0LmZpbmFsbHlMb2M9ZVsyXSx0LmFmdGVyTG9jPWVbM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKHQpfWZ1bmN0aW9uIGQoZSl7dmFyIHQ9ZS5jb21wbGV0aW9ufHx7fTt0LnR5cGU9XCJub3JtYWxcIixkZWxldGUgdC5hcmcsZS5jb21wbGV0aW9uPXR9ZnVuY3Rpb24gcChlKXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6XCJyb290XCJ9XSxlLmZvckVhY2goZix0aGlzKSx0aGlzLnJlc2V0KCEwKX1mdW5jdGlvbiBoKGUpe2lmKGUpe3ZhciB0PWVbZ107aWYodClyZXR1cm4gdC5jYWxsKGUpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUubmV4dClyZXR1cm4gZTtpZighaXNOYU4oZS5sZW5ndGgpKXt2YXIgcj0tMSxuPWZ1bmN0aW9uIG8oKXtmb3IoOysrcjxlLmxlbmd0aDspaWYoXy5jYWxsKGUscikpcmV0dXJuIG8udmFsdWU9ZVtyXSxvLmRvbmU9ITEsbztyZXR1cm4gby52YWx1ZT1tLG8uZG9uZT0hMCxvfTtyZXR1cm4gbi5uZXh0PW59fXJldHVybntuZXh0Onl9fWZ1bmN0aW9uIHkoKXtyZXR1cm57dmFsdWU6bSxkb25lOiEwfX12YXIgbSx2PU9iamVjdC5wcm90b3R5cGUsXz12Lmhhc093blByb3BlcnR5LGI9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sP1N5bWJvbDp7fSxnPWIuaXRlcmF0b3J8fFwiQEBpdGVyYXRvclwiLEU9Yi50b1N0cmluZ1RhZ3x8XCJAQHRvU3RyaW5nVGFnXCIsaj1cIm9iamVjdFwiPT10eXBlb2YgdCx3PXIucmVnZW5lcmF0b3JSdW50aW1lO2lmKHcpcmV0dXJuIHZvaWQoaiYmKHQuZXhwb3J0cz13KSk7dz1yLnJlZ2VuZXJhdG9yUnVudGltZT1qP3QuZXhwb3J0czp7fSx3LndyYXA9bjt2YXIgTz1cInN1c3BlbmRlZFN0YXJ0XCIsTT1cInN1c3BlbmRlZFlpZWxkXCIseD1cImV4ZWN1dGluZ1wiLFA9XCJjb21wbGV0ZWRcIixrPXt9LFI9e307UltnXT1mdW5jdGlvbigpe3JldHVybiB0aGlzfTt2YXIgUz1PYmplY3QuZ2V0UHJvdG90eXBlT2YsVD1TJiZTKFMoaChbXSkpKTtUJiZUIT09diYmXy5jYWxsKFQsZykmJihSPVQpO3ZhciBBPXMucHJvdG90eXBlPWkucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoUik7YS5wcm90b3R5cGU9QS5jb25zdHJ1Y3Rvcj1zLHMuY29uc3RydWN0b3I9YSxzW0VdPWEuZGlzcGxheU5hbWU9XCJHZW5lcmF0b3JGdW5jdGlvblwiLHcuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbihlKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLmNvbnN0cnVjdG9yO3JldHVybiEhdCYmKHQ9PT1hfHxcIkdlbmVyYXRvckZ1bmN0aW9uXCI9PT0odC5kaXNwbGF5TmFtZXx8dC5uYW1lKSk7XHJcbn0sdy5tYXJrPWZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mKGUscyk6KGUuX19wcm90b19fPXMsRSBpbiBlfHwoZVtFXT1cIkdlbmVyYXRvckZ1bmN0aW9uXCIpKSxlLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEEpLGV9LHcuYXdyYXA9ZnVuY3Rpb24oZSl7cmV0dXJue19fYXdhaXQ6ZX19LHUoYy5wcm90b3R5cGUpLHcuQXN5bmNJdGVyYXRvcj1jLHcuYXN5bmM9ZnVuY3Rpb24oZSx0LHIsbyl7dmFyIGk9bmV3IGMobihlLHQscixvKSk7cmV0dXJuIHcuaXNHZW5lcmF0b3JGdW5jdGlvbih0KT9pOmkubmV4dCgpLnRoZW4oZnVuY3Rpb24oZSl7cmV0dXJuIGUuZG9uZT9lLnZhbHVlOmkubmV4dCgpfSl9LHUoQSksQVtFXT1cIkdlbmVyYXRvclwiLEEudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgR2VuZXJhdG9yXVwifSx3LmtleXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIGUpdC5wdXNoKHIpO3JldHVybiB0LnJldmVyc2UoKSxmdW5jdGlvbiBuKCl7Zm9yKDt0Lmxlbmd0aDspe3ZhciByPXQucG9wKCk7aWYociBpbiBlKXJldHVybiBuLnZhbHVlPXIsbi5kb25lPSExLG59cmV0dXJuIG4uZG9uZT0hMCxufX0sdy52YWx1ZXM9aCxwLnByb3RvdHlwZT17Y29uc3RydWN0b3I6cCxyZXNldDpmdW5jdGlvbihlKXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCx0aGlzLnNlbnQ9dGhpcy5fc2VudD1tLHRoaXMuZG9uZT0hMSx0aGlzLmRlbGVnYXRlPW51bGwsdGhpcy50cnlFbnRyaWVzLmZvckVhY2goZCksIWUpZm9yKHZhciB0IGluIHRoaXMpXCJ0XCI9PT10LmNoYXJBdCgwKSYmXy5jYWxsKHRoaXMsdCkmJiFpc05hTigrdC5zbGljZSgxKSkmJih0aGlzW3RdPW0pfSxzdG9wOmZ1bmN0aW9uKCl7dGhpcy5kb25lPSEwO3ZhciBlPXRoaXMudHJ5RW50cmllc1swXSx0PWUuY29tcGxldGlvbjtpZihcInRocm93XCI9PT10LnR5cGUpdGhyb3cgdC5hcmc7cmV0dXJuIHRoaXMucnZhbH0sZGlzcGF0Y2hFeGNlcHRpb246ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0LG4pe3JldHVybiBpLnR5cGU9XCJ0aHJvd1wiLGkuYXJnPWUsci5uZXh0PXQsISFufWlmKHRoaXMuZG9uZSl0aHJvdyBlO2Zvcih2YXIgcj10aGlzLG49dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO24+PTA7LS1uKXt2YXIgbz10aGlzLnRyeUVudHJpZXNbbl0saT1vLmNvbXBsZXRpb247aWYoXCJyb290XCI9PT1vLnRyeUxvYylyZXR1cm4gdChcImVuZFwiKTtpZihvLnRyeUxvYzw9dGhpcy5wcmV2KXt2YXIgYT1fLmNhbGwobyxcImNhdGNoTG9jXCIpLHM9Xy5jYWxsKG8sXCJmaW5hbGx5TG9jXCIpO2lmKGEmJnMpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiB0KG8uY2F0Y2hMb2MsITApO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIHQoby5maW5hbGx5TG9jKX1lbHNlIGlmKGEpe2lmKHRoaXMucHJldjxvLmNhdGNoTG9jKXJldHVybiB0KG8uY2F0Y2hMb2MsITApfWVsc2V7aWYoIXMpdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7aWYodGhpcy5wcmV2PG8uZmluYWxseUxvYylyZXR1cm4gdChvLmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHI9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3I+PTA7LS1yKXt2YXIgbj10aGlzLnRyeUVudHJpZXNbcl07aWYobi50cnlMb2M8PXRoaXMucHJldiYmXy5jYWxsKG4sXCJmaW5hbGx5TG9jXCIpJiZ0aGlzLnByZXY8bi5maW5hbGx5TG9jKXt2YXIgbz1uO2JyZWFrfX1vJiYoXCJicmVha1wiPT09ZXx8XCJjb250aW51ZVwiPT09ZSkmJm8udHJ5TG9jPD10JiZ0PD1vLmZpbmFsbHlMb2MmJihvPW51bGwpO3ZhciBpPW8/by5jb21wbGV0aW9uOnt9O3JldHVybiBpLnR5cGU9ZSxpLmFyZz10LG8/dGhpcy5uZXh0PW8uZmluYWxseUxvYzp0aGlzLmNvbXBsZXRlKGkpLGt9LGNvbXBsZXRlOmZ1bmN0aW9uKGUsdCl7aWYoXCJ0aHJvd1wiPT09ZS50eXBlKXRocm93IGUuYXJnO1wiYnJlYWtcIj09PWUudHlwZXx8XCJjb250aW51ZVwiPT09ZS50eXBlP3RoaXMubmV4dD1lLmFyZzpcInJldHVyblwiPT09ZS50eXBlPyh0aGlzLnJ2YWw9ZS5hcmcsdGhpcy5uZXh0PVwiZW5kXCIpOlwibm9ybWFsXCI9PT1lLnR5cGUmJnQmJih0aGlzLm5leHQ9dCl9LGZpbmlzaDpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3Q+PTA7LS10KXt2YXIgcj10aGlzLnRyeUVudHJpZXNbdF07aWYoci5maW5hbGx5TG9jPT09ZSlyZXR1cm4gdGhpcy5jb21wbGV0ZShyLmNvbXBsZXRpb24sci5hZnRlckxvYyksZChyKSxrfX0sXCJjYXRjaFwiOmZ1bmN0aW9uKGUpe2Zvcih2YXIgdD10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7dD49MDstLXQpe3ZhciByPXRoaXMudHJ5RW50cmllc1t0XTtpZihyLnRyeUxvYz09PWUpe3ZhciBuPXIuY29tcGxldGlvbjtpZihcInRocm93XCI9PT1uLnR5cGUpe3ZhciBvPW4uYXJnO2Qocil9cmV0dXJuIG99fXRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKX0sZGVsZWdhdGVZaWVsZDpmdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMuZGVsZWdhdGU9e2l0ZXJhdG9yOmgoZSkscmVzdWx0TmFtZTp0LG5leHRMb2M6cn0sa319fShcIm9iamVjdFwiPT10eXBlb2Ygcj9yOlwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3c/d2luZG93Olwib2JqZWN0XCI9PXR5cGVvZiBzZWxmP3NlbGY6dGhpcyl9KS5jYWxsKHRoaXMsZShcIl9wcm9jZXNzXCIpLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7X3Byb2Nlc3M6OTZ9XSw5OTpbZnVuY3Rpb24odCxyLG4peyFmdW5jdGlvbih0LG4pe1wiZnVuY3Rpb25cIj09dHlwZW9mIGUmJmUuYW1kP2UoW10sbik6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHImJnIuZXhwb3J0cz9yLmV4cG9ydHM9bigpOnQudHY0PW4oKX0odGhpcyxmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7cmV0dXJuIGVuY29kZVVSSShlKS5yZXBsYWNlKC8lMjVbMC05XVswLTldL2csZnVuY3Rpb24oZSl7cmV0dXJuXCIlXCIrZS5zdWJzdHJpbmcoMyl9KX1mdW5jdGlvbiB0KHQpe3ZhciByPVwiXCI7ZFt0LmNoYXJBdCgwKV0mJihyPXQuY2hhckF0KDApLHQ9dC5zdWJzdHJpbmcoMSkpO3ZhciBuPVwiXCIsbz1cIlwiLGk9ITAsYT0hMSxzPSExO1wiK1wiPT09cj9pPSExOlwiLlwiPT09cj8obz1cIi5cIixuPVwiLlwiKTpcIi9cIj09PXI/KG89XCIvXCIsbj1cIi9cIik6XCIjXCI9PT1yPyhvPVwiI1wiLGk9ITEpOlwiO1wiPT09cj8obz1cIjtcIixuPVwiO1wiLGE9ITAscz0hMCk6XCI/XCI9PT1yPyhvPVwiP1wiLG49XCImXCIsYT0hMCk6XCImXCI9PT1yJiYobz1cIiZcIixuPVwiJlwiLGE9ITApO2Zvcih2YXIgdT1bXSxjPXQuc3BsaXQoXCIsXCIpLGw9W10sZj17fSxoPTA7aDxjLmxlbmd0aDtoKyspe3ZhciB5PWNbaF0sbT1udWxsO2lmKHkuaW5kZXhPZihcIjpcIikhPT0tMSl7dmFyIHY9eS5zcGxpdChcIjpcIik7eT12WzBdLG09cGFyc2VJbnQodlsxXSwxMCl9Zm9yKHZhciBfPXt9O3BbeS5jaGFyQXQoeS5sZW5ndGgtMSldOylfW3kuY2hhckF0KHkubGVuZ3RoLTEpXT0hMCx5PXkuc3Vic3RyaW5nKDAseS5sZW5ndGgtMSk7dmFyIGI9e3RydW5jYXRlOm0sbmFtZTp5LHN1ZmZpY2VzOl99O2wucHVzaChiKSxmW3ldPWIsdS5wdXNoKHkpfXZhciBnPWZ1bmN0aW9uKHQpe2Zvcih2YXIgcj1cIlwiLHU9MCxjPTA7YzxsLmxlbmd0aDtjKyspe3ZhciBmPWxbY10sZD10KGYubmFtZSk7aWYobnVsbD09PWR8fHZvaWQgMD09PWR8fEFycmF5LmlzQXJyYXkoZCkmJjA9PT1kLmxlbmd0aHx8XCJvYmplY3RcIj09dHlwZW9mIGQmJjA9PT1PYmplY3Qua2V5cyhkKS5sZW5ndGgpdSsrO2Vsc2UgaWYocis9Yz09PXU/bzpufHxcIixcIixBcnJheS5pc0FycmF5KGQpKXthJiYocis9Zi5uYW1lK1wiPVwiKTtmb3IodmFyIHA9MDtwPGQubGVuZ3RoO3ArKylwPjAmJihyKz1mLnN1ZmZpY2VzW1wiKlwiXT9ufHxcIixcIjpcIixcIixmLnN1ZmZpY2VzW1wiKlwiXSYmYSYmKHIrPWYubmFtZStcIj1cIikpLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KGRbcF0pLnJlcGxhY2UoLyEvZyxcIiUyMVwiKTplKGRbcF0pfWVsc2UgaWYoXCJvYmplY3RcIj09dHlwZW9mIGQpe2EmJiFmLnN1ZmZpY2VzW1wiKlwiXSYmKHIrPWYubmFtZStcIj1cIik7dmFyIGg9ITA7Zm9yKHZhciB5IGluIGQpaHx8KHIrPWYuc3VmZmljZXNbXCIqXCJdP258fFwiLFwiOlwiLFwiKSxoPSExLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KHkpLnJlcGxhY2UoLyEvZyxcIiUyMVwiKTplKHkpLHIrPWYuc3VmZmljZXNbXCIqXCJdP1wiPVwiOlwiLFwiLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KGRbeV0pLnJlcGxhY2UoLyEvZyxcIiUyMVwiKTplKGRbeV0pfWVsc2UgYSYmKHIrPWYubmFtZSxzJiZcIlwiPT09ZHx8KHIrPVwiPVwiKSksbnVsbCE9Zi50cnVuY2F0ZSYmKGQ9ZC5zdWJzdHJpbmcoMCxmLnRydW5jYXRlKSkscis9aT9lbmNvZGVVUklDb21wb25lbnQoZCkucmVwbGFjZSgvIS9nLFwiJTIxXCIpOmUoZCl9cmV0dXJuIHJ9O3JldHVybiBnLnZhck5hbWVzPXUse3ByZWZpeDpvLHN1YnN0aXR1dGlvbjpnfX1mdW5jdGlvbiByKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIHIpKXJldHVybiBuZXcgcihlKTtmb3IodmFyIG49ZS5zcGxpdChcIntcIiksbz1bbi5zaGlmdCgpXSxpPVtdLGE9W10scz1bXTtuLmxlbmd0aD4wOyl7dmFyIHU9bi5zaGlmdCgpLGM9dS5zcGxpdChcIn1cIilbMF0sbD11LnN1YnN0cmluZyhjLmxlbmd0aCsxKSxmPXQoYyk7YS5wdXNoKGYuc3Vic3RpdHV0aW9uKSxpLnB1c2goZi5wcmVmaXgpLG8ucHVzaChsKSxzPXMuY29uY2F0KGYuc3Vic3RpdHV0aW9uLnZhck5hbWVzKX10aGlzLmZpbGw9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW9bMF0scj0wO3I8YS5sZW5ndGg7cisrKXt2YXIgbj1hW3JdO3QrPW4oZSksdCs9b1tyKzFdfXJldHVybiB0fSx0aGlzLnZhck5hbWVzPXMsdGhpcy50ZW1wbGF0ZT1lfWZ1bmN0aW9uIG4oZSx0KXtpZihlPT09dClyZXR1cm4hMDtpZihlJiZ0JiZcIm9iamVjdFwiPT10eXBlb2YgZSYmXCJvYmplY3RcIj09dHlwZW9mIHQpe2lmKEFycmF5LmlzQXJyYXkoZSkhPT1BcnJheS5pc0FycmF5KHQpKXJldHVybiExO2lmKEFycmF5LmlzQXJyYXkoZSkpe2lmKGUubGVuZ3RoIT09dC5sZW5ndGgpcmV0dXJuITE7Zm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspaWYoIW4oZVtyXSx0W3JdKSlyZXR1cm4hMX1lbHNle3ZhciBvO2ZvcihvIGluIGUpaWYodm9pZCAwPT09dFtvXSYmdm9pZCAwIT09ZVtvXSlyZXR1cm4hMTtmb3IobyBpbiB0KWlmKHZvaWQgMD09PWVbb10mJnZvaWQgMCE9PXRbb10pcmV0dXJuITE7Zm9yKG8gaW4gZSlpZighbihlW29dLHRbb10pKXJldHVybiExfXJldHVybiEwfXJldHVybiExfWZ1bmN0aW9uIG8oZSl7dmFyIHQ9U3RyaW5nKGUpLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIikubWF0Y2goL14oW146XFwvPyNdKzopPyhcXC9cXC8oPzpbXjpAXSooPzo6W146QF0qKT9AKT8oKFteOlxcLz8jXSopKD86OihcXGQqKSk/KSk/KFtePyNdKikoXFw/W14jXSopPygjW1xcc1xcU10qKT8vKTtyZXR1cm4gdD97aHJlZjp0WzBdfHxcIlwiLHByb3RvY29sOnRbMV18fFwiXCIsYXV0aG9yaXR5OnRbMl18fFwiXCIsaG9zdDp0WzNdfHxcIlwiLGhvc3RuYW1lOnRbNF18fFwiXCIscG9ydDp0WzVdfHxcIlwiLHBhdGhuYW1lOnRbNl18fFwiXCIsc2VhcmNoOnRbN118fFwiXCIsaGFzaDp0WzhdfHxcIlwifTpudWxsfWZ1bmN0aW9uIGkoZSx0KXtmdW5jdGlvbiByKGUpe3ZhciB0PVtdO3JldHVybiBlLnJlcGxhY2UoL14oXFwuXFwuPyhcXC98JCkpKy8sXCJcIikucmVwbGFjZSgvXFwvKFxcLihcXC98JCkpKy9nLFwiL1wiKS5yZXBsYWNlKC9cXC9cXC5cXC4kLyxcIi8uLi9cIikucmVwbGFjZSgvXFwvP1teXFwvXSovZyxmdW5jdGlvbihlKXtcIi8uLlwiPT09ZT90LnBvcCgpOnQucHVzaChlKX0pLHQuam9pbihcIlwiKS5yZXBsYWNlKC9eXFwvLyxcIi9cIj09PWUuY2hhckF0KDApP1wiL1wiOlwiXCIpfXJldHVybiB0PW8odHx8XCJcIiksZT1vKGV8fFwiXCIpLHQmJmU/KHQucHJvdG9jb2x8fGUucHJvdG9jb2wpKyh0LnByb3RvY29sfHx0LmF1dGhvcml0eT90LmF1dGhvcml0eTplLmF1dGhvcml0eSkrcih0LnByb3RvY29sfHx0LmF1dGhvcml0eXx8XCIvXCI9PT10LnBhdGhuYW1lLmNoYXJBdCgwKT90LnBhdGhuYW1lOnQucGF0aG5hbWU/KGUuYXV0aG9yaXR5JiYhZS5wYXRobmFtZT9cIi9cIjpcIlwiKStlLnBhdGhuYW1lLnNsaWNlKDAsZS5wYXRobmFtZS5sYXN0SW5kZXhPZihcIi9cIikrMSkrdC5wYXRobmFtZTplLnBhdGhuYW1lKSsodC5wcm90b2NvbHx8dC5hdXRob3JpdHl8fHQucGF0aG5hbWU/dC5zZWFyY2g6dC5zZWFyY2h8fGUuc2VhcmNoKSt0Lmhhc2g6bnVsbH1mdW5jdGlvbiBhKGUpe3JldHVybiBlLnNwbGl0KFwiI1wiKVswXX1mdW5jdGlvbiBzKGUsdCl7aWYoZSYmXCJvYmplY3RcIj09dHlwZW9mIGUpaWYodm9pZCAwPT09dD90PWUuaWQ6XCJzdHJpbmdcIj09dHlwZW9mIGUuaWQmJih0PWkodCxlLmlkKSxlLmlkPXQpLEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspcyhlW3JdLHQpO2Vsc2V7XCJzdHJpbmdcIj09dHlwZW9mIGUuJHJlZiYmKGUuJHJlZj1pKHQsZS4kcmVmKSk7Zm9yKHZhciBuIGluIGUpXCJlbnVtXCIhPT1uJiZzKGVbbl0sdCl9fWZ1bmN0aW9uIHUoZSl7ZT1lfHxcImVuXCI7dmFyIHQ9RVtlXTtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHI9dFtlLmNvZGVdfHxnW2UuY29kZV07aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHIpcmV0dXJuXCJVbmtub3duIGVycm9yIGNvZGUgXCIrZS5jb2RlK1wiOiBcIitKU09OLnN0cmluZ2lmeShlLm1lc3NhZ2VQYXJhbXMpO3ZhciBuPWUucGFyYW1zO3JldHVybiByLnJlcGxhY2UoL1xceyhbXnt9XSopXFx9L2csZnVuY3Rpb24oZSx0KXt2YXIgcj1uW3RdO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiByfHxcIm51bWJlclwiPT10eXBlb2Ygcj9yOmV9KX19ZnVuY3Rpb24gYyhlLHQscixuLG8pe2lmKEVycm9yLmNhbGwodGhpcyksdm9pZCAwPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJObyBlcnJvciBjb2RlIHN1cHBsaWVkOiBcIituKTt0aGlzLm1lc3NhZ2U9XCJcIix0aGlzLnBhcmFtcz10LHRoaXMuY29kZT1lLHRoaXMuZGF0YVBhdGg9cnx8XCJcIix0aGlzLnNjaGVtYVBhdGg9bnx8XCJcIix0aGlzLnN1YkVycm9ycz1vfHxudWxsO3ZhciBpPW5ldyBFcnJvcih0aGlzLm1lc3NhZ2UpO2lmKHRoaXMuc3RhY2s9aS5zdGFja3x8aS5zdGFja3RyYWNlLCF0aGlzLnN0YWNrKXRyeXt0aHJvdyBpfWNhdGNoKGkpe3RoaXMuc3RhY2s9aS5zdGFja3x8aS5zdGFja3RyYWNlfX1mdW5jdGlvbiBsKGUsdCl7aWYodC5zdWJzdHJpbmcoMCxlLmxlbmd0aCk9PT1lKXt2YXIgcj10LnN1YnN0cmluZyhlLmxlbmd0aCk7aWYodC5sZW5ndGg+MCYmXCIvXCI9PT10LmNoYXJBdChlLmxlbmd0aC0xKXx8XCIjXCI9PT1yLmNoYXJBdCgwKXx8XCI/XCI9PT1yLmNoYXJBdCgwKSlyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBmKGUpe3ZhciB0LHIsbj1uZXcgaCxvPXtzZXRFcnJvclJlcG9ydGVyOmZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3RoaXMubGFuZ3VhZ2UoZSk6KHI9ZSwhMCl9LGFkZEZvcm1hdDpmdW5jdGlvbigpe24uYWRkRm9ybWF0LmFwcGx5KG4sYXJndW1lbnRzKX0sbGFuZ3VhZ2U6ZnVuY3Rpb24oZSl7cmV0dXJuIGU/KEVbZV18fChlPWUuc3BsaXQoXCItXCIpWzBdKSwhIUVbZV0mJih0PWUsZSkpOnR9LGFkZExhbmd1YWdlOmZ1bmN0aW9uKGUsdCl7dmFyIHI7Zm9yKHIgaW4gdil0W3JdJiYhdFt2W3JdXSYmKHRbdltyXV09dFtyXSk7dmFyIG49ZS5zcGxpdChcIi1cIilbMF07aWYoRVtuXSl7RVtlXT1PYmplY3QuY3JlYXRlKEVbbl0pO2ZvcihyIGluIHQpXCJ1bmRlZmluZWRcIj09dHlwZW9mIEVbbl1bcl0mJihFW25dW3JdPXRbcl0pLEVbZV1bcl09dFtyXX1lbHNlIEVbZV09dCxFW25dPXQ7cmV0dXJuIHRoaXN9LGZyZXNoQXBpOmZ1bmN0aW9uKGUpe3ZhciB0PWYoKTtyZXR1cm4gZSYmdC5sYW5ndWFnZShlKSx0fSx2YWxpZGF0ZTpmdW5jdGlvbihlLG8saSxhKXt2YXIgcz11KHQpLGM9cj9mdW5jdGlvbihlLHQsbil7cmV0dXJuIHIoZSx0LG4pfHxzKGUsdCxuKX06cyxsPW5ldyBoKG4sKCExKSxjLGksYSk7XCJzdHJpbmdcIj09dHlwZW9mIG8mJihvPXskcmVmOm99KSxsLmFkZFNjaGVtYShcIlwiLG8pO3ZhciBmPWwudmFsaWRhdGVBbGwoZSxvLG51bGwsbnVsbCxcIlwiKTtyZXR1cm4hZiYmYSYmKGY9bC5iYW5Vbmtub3duUHJvcGVydGllcyhlLG8pKSx0aGlzLmVycm9yPWYsdGhpcy5taXNzaW5nPWwubWlzc2luZyx0aGlzLnZhbGlkPW51bGw9PT1mLHRoaXMudmFsaWR9LHZhbGlkYXRlUmVzdWx0OmZ1bmN0aW9uKCl7dmFyIGU9e307cmV0dXJuIHRoaXMudmFsaWRhdGUuYXBwbHkoZSxhcmd1bWVudHMpLGV9LHZhbGlkYXRlTXVsdGlwbGU6ZnVuY3Rpb24oZSxvLGksYSl7dmFyIHM9dSh0KSxjPXI/ZnVuY3Rpb24oZSx0LG4pe3JldHVybiByKGUsdCxuKXx8cyhlLHQsbil9OnMsbD1uZXcgaChuLCghMCksYyxpLGEpO1wic3RyaW5nXCI9PXR5cGVvZiBvJiYobz17JHJlZjpvfSksbC5hZGRTY2hlbWEoXCJcIixvKSxsLnZhbGlkYXRlQWxsKGUsbyxudWxsLG51bGwsXCJcIiksYSYmbC5iYW5Vbmtub3duUHJvcGVydGllcyhlLG8pO3ZhciBmPXt9O3JldHVybiBmLmVycm9ycz1sLmVycm9ycyxmLm1pc3Npbmc9bC5taXNzaW5nLGYudmFsaWQ9MD09PWYuZXJyb3JzLmxlbmd0aCxmfSxhZGRTY2hlbWE6ZnVuY3Rpb24oKXtyZXR1cm4gbi5hZGRTY2hlbWEuYXBwbHkobixhcmd1bWVudHMpfSxnZXRTY2hlbWE6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRTY2hlbWEuYXBwbHkobixhcmd1bWVudHMpfSxnZXRTY2hlbWFNYXA6ZnVuY3Rpb24oKXtyZXR1cm4gbi5nZXRTY2hlbWFNYXAuYXBwbHkobixhcmd1bWVudHMpfSxnZXRTY2hlbWFVcmlzOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZ2V0U2NoZW1hVXJpcy5hcHBseShuLGFyZ3VtZW50cyl9LGdldE1pc3NpbmdVcmlzOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZ2V0TWlzc2luZ1VyaXMuYXBwbHkobixhcmd1bWVudHMpfSxkcm9wU2NoZW1hczpmdW5jdGlvbigpe24uZHJvcFNjaGVtYXMuYXBwbHkobixhcmd1bWVudHMpfSxkZWZpbmVLZXl3b3JkOmZ1bmN0aW9uKCl7bi5kZWZpbmVLZXl3b3JkLmFwcGx5KG4sYXJndW1lbnRzKX0sZGVmaW5lRXJyb3I6ZnVuY3Rpb24oZSx0LHIpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHwhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChlKSl0aHJvdyBuZXcgRXJyb3IoXCJDb2RlIG5hbWUgbXVzdCBiZSBhIHN0cmluZyBpbiBVUFBFUl9DQVNFX1dJVEhfVU5ERVJTQ09SRVNcIik7aWYoXCJudW1iZXJcIiE9dHlwZW9mIHR8fHQlMSE9PTB8fHQ8MWU0KXRocm93IG5ldyBFcnJvcihcIkNvZGUgbnVtYmVyIG11c3QgYmUgYW4gaW50ZWdlciA+IDEwMDAwXCIpO2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB2W2VdKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGFscmVhZHkgZGVmaW5lZDogXCIrZStcIiBhcyBcIit2W2VdKTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgX1t0XSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBjb2RlIGFscmVhZHkgdXNlZDogXCIrX1t0XStcIiBhcyBcIit0KTt2W2VdPXQsX1t0XT1lLGdbZV09Z1t0XT1yO2Zvcih2YXIgbiBpbiBFKXt2YXIgbz1FW25dO29bZV0mJihvW3RdPW9bdF18fG9bZV0pfX0scmVzZXQ6ZnVuY3Rpb24oKXtuLnJlc2V0KCksdGhpcy5lcnJvcj1udWxsLHRoaXMubWlzc2luZz1bXSx0aGlzLnZhbGlkPSEwfSxtaXNzaW5nOltdLGVycm9yOm51bGwsdmFsaWQ6ITAsbm9ybVNjaGVtYTpzLHJlc29sdmVVcmw6aSxnZXREb2N1bWVudFVyaTphLGVycm9yQ29kZXM6dn07cmV0dXJuIG8ubGFuZ3VhZ2UoZXx8XCJlblwiKSxvfU9iamVjdC5rZXlzfHwoT2JqZWN0LmtleXM9ZnVuY3Rpb24oKXt2YXIgZT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHQ9IXt0b1N0cmluZzpudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZShcInRvU3RyaW5nXCIpLHI9W1widG9TdHJpbmdcIixcInRvTG9jYWxlU3RyaW5nXCIsXCJ2YWx1ZU9mXCIsXCJoYXNPd25Qcm9wZXJ0eVwiLFwiaXNQcm90b3R5cGVPZlwiLFwicHJvcGVydHlJc0VudW1lcmFibGVcIixcImNvbnN0cnVjdG9yXCJdLG49ci5sZW5ndGg7cmV0dXJuIGZ1bmN0aW9uKG8pe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBvJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBvfHxudWxsPT09byl0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0LmtleXMgY2FsbGVkIG9uIG5vbi1vYmplY3RcIik7dmFyIGk9W107Zm9yKHZhciBhIGluIG8pZS5jYWxsKG8sYSkmJmkucHVzaChhKTtpZih0KWZvcih2YXIgcz0wO3M8bjtzKyspZS5jYWxsKG8scltzXSkmJmkucHVzaChyW3NdKTtyZXR1cm4gaX19KCkpLE9iamVjdC5jcmVhdGV8fChPYmplY3QuY3JlYXRlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe31yZXR1cm4gZnVuY3Rpb24odCl7aWYoMSE9PWFyZ3VtZW50cy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiT2JqZWN0LmNyZWF0ZSBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgb25lIHBhcmFtZXRlci5cIik7cmV0dXJuIGUucHJvdG90eXBlPXQsbmV3IGV9fSgpKSxBcnJheS5pc0FycmF5fHwoQXJyYXkuaXNBcnJheT1mdW5jdGlvbihlKXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9KSxBcnJheS5wcm90b3R5cGUuaW5kZXhPZnx8KEFycmF5LnByb3RvdHlwZS5pbmRleE9mPWZ1bmN0aW9uKGUpe2lmKG51bGw9PT10aGlzKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIHQ9T2JqZWN0KHRoaXMpLHI9dC5sZW5ndGg+Pj4wO2lmKDA9PT1yKXJldHVybi0xO3ZhciBuPTA7aWYoYXJndW1lbnRzLmxlbmd0aD4xJiYobj1OdW1iZXIoYXJndW1lbnRzWzFdKSxuIT09bj9uPTA6MCE9PW4mJm4hPT0xLzAmJm4hPT0tKDEvMCkmJihuPShuPjB8fC0xKSpNYXRoLmZsb29yKE1hdGguYWJzKG4pKSkpLG4+PXIpcmV0dXJuLTE7Zm9yKHZhciBvPW4+PTA/bjpNYXRoLm1heChyLU1hdGguYWJzKG4pLDApO288cjtvKyspaWYobyBpbiB0JiZ0W29dPT09ZSlyZXR1cm4gbztyZXR1cm4tMX0pLE9iamVjdC5pc0Zyb3plbnx8KE9iamVjdC5pc0Zyb3plbj1mdW5jdGlvbihlKXtmb3IodmFyIHQ9XCJ0djRfdGVzdF9mcm96ZW5fa2V5XCI7ZS5oYXNPd25Qcm9wZXJ0eSh0KTspdCs9TWF0aC5yYW5kb20oKTt0cnl7cmV0dXJuIGVbdF09ITAsZGVsZXRlIGVbdF0sITF9Y2F0Y2gocil7cmV0dXJuITB9fSk7dmFyIGQ9e1wiK1wiOiEwLFwiI1wiOiEwLFwiLlwiOiEwLFwiL1wiOiEwLFwiO1wiOiEwLFwiP1wiOiEwLFwiJlwiOiEwfSxwPXtcIipcIjohMH07ci5wcm90b3R5cGU9e3RvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGVtcGxhdGV9LGZpbGxGcm9tT2JqZWN0OmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmZpbGwoZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19KX19O3ZhciBoPWZ1bmN0aW9uKGUsdCxyLG4sbyl7aWYodGhpcy5taXNzaW5nPVtdLHRoaXMubWlzc2luZ01hcD17fSx0aGlzLmZvcm1hdFZhbGlkYXRvcnM9ZT9PYmplY3QuY3JlYXRlKGUuZm9ybWF0VmFsaWRhdG9ycyk6e30sdGhpcy5zY2hlbWFzPWU/T2JqZWN0LmNyZWF0ZShlLnNjaGVtYXMpOnt9LHRoaXMuY29sbGVjdE11bHRpcGxlPXQsdGhpcy5lcnJvcnM9W10sdGhpcy5oYW5kbGVFcnJvcj10P3RoaXMuY29sbGVjdEVycm9yOnRoaXMucmV0dXJuRXJyb3IsbiYmKHRoaXMuY2hlY2tSZWN1cnNpdmU9ITAsdGhpcy5zY2FubmVkPVtdLHRoaXMuc2Nhbm5lZEZyb3plbj1bXSx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzPVtdLHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnM9W10sdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5PVwidHY0X3ZhbGlkYXRpb25faWRcIix0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXk9XCJ0djRfdmFsaWRhdGlvbl9lcnJvcnNfaWRcIiksbyYmKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcz0hMCx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9KSx0aGlzLmVycm9yUmVwb3J0ZXI9cnx8dShcImVuXCIpLFwic3RyaW5nXCI9PXR5cGVvZiB0aGlzLmVycm9yUmVwb3J0ZXIpdGhyb3cgbmV3IEVycm9yKFwiZGVidWdcIik7aWYodGhpcy5kZWZpbmVkS2V5d29yZHM9e30sZSlmb3IodmFyIGkgaW4gZS5kZWZpbmVkS2V5d29yZHMpdGhpcy5kZWZpbmVkS2V5d29yZHNbaV09ZS5kZWZpbmVkS2V5d29yZHNbaV0uc2xpY2UoMCl9O2gucHJvdG90eXBlLmRlZmluZUtleXdvcmQ9ZnVuY3Rpb24oZSx0KXt0aGlzLmRlZmluZWRLZXl3b3Jkc1tlXT10aGlzLmRlZmluZWRLZXl3b3Jkc1tlXXx8W10sdGhpcy5kZWZpbmVkS2V5d29yZHNbZV0ucHVzaCh0KX0saC5wcm90b3R5cGUuY3JlYXRlRXJyb3I9ZnVuY3Rpb24oZSx0LHIsbixvLGksYSl7dmFyIHM9bmV3IGMoZSx0LHIsbixvKTtyZXR1cm4gcy5tZXNzYWdlPXRoaXMuZXJyb3JSZXBvcnRlcihzLGksYSksc30saC5wcm90b3R5cGUucmV0dXJuRXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9LGgucHJvdG90eXBlLmNvbGxlY3RFcnJvcj1mdW5jdGlvbihlKXtyZXR1cm4gZSYmdGhpcy5lcnJvcnMucHVzaChlKSxudWxsfSxoLnByb3RvdHlwZS5wcmVmaXhFcnJvcnM9ZnVuY3Rpb24oZSx0LHIpe2Zvcih2YXIgbj1lO248dGhpcy5lcnJvcnMubGVuZ3RoO24rKyl0aGlzLmVycm9yc1tuXT10aGlzLmVycm9yc1tuXS5wcmVmaXhXaXRoKHQscik7cmV0dXJuIHRoaXN9LGgucHJvdG90eXBlLmJhblVua25vd25Qcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpe3ZhciBuPXRoaXMuY3JlYXRlRXJyb3Iodi5VTktOT1dOX1BST1BFUlRZLHtwYXRoOnJ9LHIsXCJcIixudWxsLGUsdCksbz10aGlzLmhhbmRsZUVycm9yKG4pO2lmKG8pcmV0dXJuIG99cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLmFkZEZvcm1hdD1mdW5jdGlvbihlLHQpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlKXtmb3IodmFyIHIgaW4gZSl0aGlzLmFkZEZvcm1hdChyLGVbcl0pO3JldHVybiB0aGlzfXRoaXMuZm9ybWF0VmFsaWRhdG9yc1tlXT10fSxoLnByb3RvdHlwZS5yZXNvbHZlUmVmcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PWUuJHJlZil7aWYodD10fHx7fSx0W2UuJHJlZl0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5DSVJDVUxBUl9SRUZFUkVOQ0Use3VybHM6T2JqZWN0LmtleXModCkuam9pbihcIiwgXCIpfSxcIlwiLFwiXCIsbnVsbCx2b2lkIDAsZSk7dFtlLiRyZWZdPSEwLGU9dGhpcy5nZXRTY2hlbWEoZS4kcmVmLHQpfXJldHVybiBlfSxoLnByb3RvdHlwZS5nZXRTY2hlbWE9ZnVuY3Rpb24oZSx0KXt2YXIgcjtpZih2b2lkIDAhPT10aGlzLnNjaGVtYXNbZV0pcmV0dXJuIHI9dGhpcy5zY2hlbWFzW2VdLHRoaXMucmVzb2x2ZVJlZnMocix0KTt2YXIgbj1lLG89XCJcIjtpZihlLmluZGV4T2YoXCIjXCIpIT09LTEmJihvPWUuc3Vic3RyaW5nKGUuaW5kZXhPZihcIiNcIikrMSksbj1lLnN1YnN0cmluZygwLGUuaW5kZXhPZihcIiNcIikpKSxcIm9iamVjdFwiPT10eXBlb2YgdGhpcy5zY2hlbWFzW25dKXtyPXRoaXMuc2NoZW1hc1tuXTt2YXIgaT1kZWNvZGVVUklDb21wb25lbnQobyk7aWYoXCJcIj09PWkpcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMocix0KTtpZihcIi9cIiE9PWkuY2hhckF0KDApKXJldHVybjtmb3IodmFyIGE9aS5zcGxpdChcIi9cIikuc2xpY2UoMSkscz0wO3M8YS5sZW5ndGg7cysrKXt2YXIgdT1hW3NdLnJlcGxhY2UoL34xL2csXCIvXCIpLnJlcGxhY2UoL34wL2csXCJ+XCIpO2lmKHZvaWQgMD09PXJbdV0pe3I9dm9pZCAwO2JyZWFrfXI9clt1XX1pZih2b2lkIDAhPT1yKXJldHVybiB0aGlzLnJlc29sdmVSZWZzKHIsdCl9dm9pZCAwPT09dGhpcy5taXNzaW5nW25dJiYodGhpcy5taXNzaW5nLnB1c2gobiksdGhpcy5taXNzaW5nW25dPW4sdGhpcy5taXNzaW5nTWFwW25dPW4pfSxoLnByb3RvdHlwZS5zZWFyY2hTY2hlbWFzPWZ1bmN0aW9uKGUsdCl7aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyl0aGlzLnNlYXJjaFNjaGVtYXMoZVtyXSx0KTtlbHNlIGlmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKXtcInN0cmluZ1wiPT10eXBlb2YgZS5pZCYmbCh0LGUuaWQpJiZ2b2lkIDA9PT10aGlzLnNjaGVtYXNbZS5pZF0mJih0aGlzLnNjaGVtYXNbZS5pZF09ZSk7Zm9yKHZhciBuIGluIGUpaWYoXCJlbnVtXCIhPT1uKWlmKFwib2JqZWN0XCI9PXR5cGVvZiBlW25dKXRoaXMuc2VhcmNoU2NoZW1hcyhlW25dLHQpO2Vsc2UgaWYoXCIkcmVmXCI9PT1uKXt2YXIgbz1hKGVbbl0pO28mJnZvaWQgMD09PXRoaXMuc2NoZW1hc1tvXSYmdm9pZCAwPT09dGhpcy5taXNzaW5nTWFwW29dJiYodGhpcy5taXNzaW5nTWFwW29dPW8pfX19LGgucHJvdG90eXBlLmFkZFNjaGVtYT1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHxcInVuZGVmaW5lZFwiPT10eXBlb2YgdCl7aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fFwic3RyaW5nXCIhPXR5cGVvZiBlLmlkKXJldHVybjt0PWUsZT10LmlkfWU9PT1hKGUpK1wiI1wiJiYoZT1hKGUpKSx0aGlzLnNjaGVtYXNbZV09dCxkZWxldGUgdGhpcy5taXNzaW5nTWFwW2VdLHModCxlKSx0aGlzLnNlYXJjaFNjaGVtYXModCxlKX0saC5wcm90b3R5cGUuZ2V0U2NoZW1hTWFwPWZ1bmN0aW9uKCl7dmFyIGU9e307Zm9yKHZhciB0IGluIHRoaXMuc2NoZW1hcyllW3RdPXRoaXMuc2NoZW1hc1t0XTtyZXR1cm4gZX0saC5wcm90b3R5cGUuZ2V0U2NoZW1hVXJpcz1mdW5jdGlvbihlKXt2YXIgdD1bXTtmb3IodmFyIHIgaW4gdGhpcy5zY2hlbWFzKWUmJiFlLnRlc3Qocil8fHQucHVzaChyKTtyZXR1cm4gdH0saC5wcm90b3R5cGUuZ2V0TWlzc2luZ1VyaXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIHRoaXMubWlzc2luZ01hcCllJiYhZS50ZXN0KHIpfHx0LnB1c2gocik7cmV0dXJuIHR9LGgucHJvdG90eXBlLmRyb3BTY2hlbWFzPWZ1bmN0aW9uKCl7dGhpcy5zY2hlbWFzPXt9LHRoaXMucmVzZXQoKX0saC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLm1pc3Npbmc9W10sdGhpcy5taXNzaW5nTWFwPXt9LHRoaXMuZXJyb3JzPVtdfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFsbD1mdW5jdGlvbihlLHQscixuLG8pe3ZhciBpO2lmKHQ9dGhpcy5yZXNvbHZlUmVmcyh0KSwhdClyZXR1cm4gbnVsbDtpZih0IGluc3RhbmNlb2YgYylyZXR1cm4gdGhpcy5lcnJvcnMucHVzaCh0KSx0O3ZhciBhLHM9dGhpcy5lcnJvcnMubGVuZ3RoLHU9bnVsbCxsPW51bGw7aWYodGhpcy5jaGVja1JlY3Vyc2l2ZSYmZSYmXCJvYmplY3RcIj09dHlwZW9mIGUpe2lmKGk9IXRoaXMuc2Nhbm5lZC5sZW5ndGgsZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXt2YXIgZj1lW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0uaW5kZXhPZih0KTtpZihmIT09LTEpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLmNvbmNhdChlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bZl0pLG51bGx9aWYoT2JqZWN0LmlzRnJvemVuKGUpJiYoYT10aGlzLnNjYW5uZWRGcm96ZW4uaW5kZXhPZihlKSxhIT09LTEpKXt2YXIgZD10aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2FdLmluZGV4T2YodCk7aWYoZCE9PS0xKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5jb25jYXQodGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1thXVtkXSksbnVsbH1pZih0aGlzLnNjYW5uZWQucHVzaChlKSxPYmplY3QuaXNGcm96ZW4oZSkpYT09PS0xJiYoYT10aGlzLnNjYW5uZWRGcm96ZW4ubGVuZ3RoLHRoaXMuc2Nhbm5lZEZyb3plbi5wdXNoKGUpLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMucHVzaChbXSkpLHU9dGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXS5sZW5ndGgsdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXVt1XT10LHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbYV1bdV09W107ZWxzZXtpZighZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKXRyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXkse3ZhbHVlOltdLGNvbmZpZ3VyYWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSx7dmFsdWU6W10sY29uZmlndXJhYmxlOiEwfSl9Y2F0Y2gocCl7ZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldPVtdLGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XT1bXX1sPWVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5sZW5ndGgsZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldW2xdPXQsZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW2xdPVtdfX12YXIgaD10aGlzLmVycm9ycy5sZW5ndGgseT10aGlzLnZhbGlkYXRlQmFzaWMoZSx0LG8pfHx0aGlzLnZhbGlkYXRlTnVtZXJpYyhlLHQsbyl8fHRoaXMudmFsaWRhdGVTdHJpbmcoZSx0LG8pfHx0aGlzLnZhbGlkYXRlQXJyYXkoZSx0LG8pfHx0aGlzLnZhbGlkYXRlT2JqZWN0KGUsdCxvKXx8dGhpcy52YWxpZGF0ZUNvbWJpbmF0aW9ucyhlLHQsbyl8fHRoaXMudmFsaWRhdGVIeXBlcm1lZGlhKGUsdCxvKXx8dGhpcy52YWxpZGF0ZUZvcm1hdChlLHQsbyl8fHRoaXMudmFsaWRhdGVEZWZpbmVkS2V5d29yZHMoZSx0LG8pfHxudWxsO2lmKGkpe2Zvcig7dGhpcy5zY2FubmVkLmxlbmd0aDspe3ZhciBtPXRoaXMuc2Nhbm5lZC5wb3AoKTtkZWxldGUgbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldfXRoaXMuc2Nhbm5lZEZyb3plbj1bXSx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzPVtdfWlmKHl8fGghPT10aGlzLmVycm9ycy5sZW5ndGgpZm9yKDtyJiZyLmxlbmd0aHx8biYmbi5sZW5ndGg7KXt2YXIgdj1yJiZyLmxlbmd0aD9cIlwiK3IucG9wKCk6bnVsbCxfPW4mJm4ubGVuZ3RoP1wiXCIrbi5wb3AoKTpudWxsO3kmJih5PXkucHJlZml4V2l0aCh2LF8pKSx0aGlzLnByZWZpeEVycm9ycyhoLHYsXyl9cmV0dXJuIG51bGwhPT11P3RoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbYV1bdV09dGhpcy5lcnJvcnMuc2xpY2Uocyk6bnVsbCE9PWwmJihlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bbF09dGhpcy5lcnJvcnMuc2xpY2UocykpLHRoaXMuaGFuZGxlRXJyb3IoeSl9LGgucHJvdG90eXBlLnZhbGlkYXRlRm9ybWF0PWZ1bmN0aW9uKGUsdCl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQuZm9ybWF0fHwhdGhpcy5mb3JtYXRWYWxpZGF0b3JzW3QuZm9ybWF0XSlyZXR1cm4gbnVsbDt2YXIgcj10aGlzLmZvcm1hdFZhbGlkYXRvcnNbdC5mb3JtYXRdLmNhbGwobnVsbCxlLHQpO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiByfHxcIm51bWJlclwiPT10eXBlb2Ygcj90aGlzLmNyZWF0ZUVycm9yKHYuRk9STUFUX0NVU1RPTSx7bWVzc2FnZTpyfSxcIlwiLFwiL2Zvcm1hdFwiLG51bGwsZSx0KTpyJiZcIm9iamVjdFwiPT10eXBlb2Ygcj90aGlzLmNyZWF0ZUVycm9yKHYuRk9STUFUX0NVU1RPTSx7bWVzc2FnZTpyLm1lc3NhZ2V8fFwiP1wifSxyLmRhdGFQYXRofHxcIlwiLHIuc2NoZW1hUGF0aHx8XCIvZm9ybWF0XCIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlRGVmaW5lZEtleXdvcmRzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG4gaW4gdGhpcy5kZWZpbmVkS2V5d29yZHMpaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHRbbl0pZm9yKHZhciBvPXRoaXMuZGVmaW5lZEtleXdvcmRzW25dLGk9MDtpPG8ubGVuZ3RoO2krKyl7dmFyIGE9b1tpXSxzPWEoZSx0W25dLHQscik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHN8fFwibnVtYmVyXCI9PXR5cGVvZiBzKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuS0VZV09SRF9DVVNUT00se2tleTpuLG1lc3NhZ2U6c30sXCJcIixcIlwiLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbik7aWYocyYmXCJvYmplY3RcIj09dHlwZW9mIHMpe3ZhciB1PXMuY29kZTtpZihcInN0cmluZ1wiPT10eXBlb2YgdSl7aWYoIXZbdV0pdGhyb3cgbmV3IEVycm9yKFwiVW5kZWZpbmVkIGVycm9yIGNvZGUgKHVzZSBkZWZpbmVFcnJvcik6IFwiK3UpO3U9dlt1XX1lbHNlXCJudW1iZXJcIiE9dHlwZW9mIHUmJih1PXYuS0VZV09SRF9DVVNUT00pO3ZhciBjPVwib2JqZWN0XCI9PXR5cGVvZiBzLm1lc3NhZ2U/cy5tZXNzYWdlOntrZXk6bixtZXNzYWdlOnMubWVzc2FnZXx8XCI/XCJ9LGw9cy5zY2hlbWFQYXRofHxcIi9cIituLnJlcGxhY2UoL34vZyxcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLFwifjFcIik7cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IodSxjLHMuZGF0YVBhdGh8fG51bGwsbCxudWxsLGUsdCl9fXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUJhc2ljPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtyZXR1cm4obj10aGlzLnZhbGlkYXRlVHlwZShlLHQscikpP24ucHJlZml4V2l0aChudWxsLFwidHlwZVwiKToobj10aGlzLnZhbGlkYXRlRW51bShlLHQscikpP24ucHJlZml4V2l0aChudWxsLFwidHlwZVwiKTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZVR5cGU9ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDA9PT10LnR5cGUpcmV0dXJuIG51bGw7dmFyIHI9dHlwZW9mIGU7bnVsbD09PWU/cj1cIm51bGxcIjpBcnJheS5pc0FycmF5KGUpJiYocj1cImFycmF5XCIpO3ZhciBuPXQudHlwZTtBcnJheS5pc0FycmF5KG4pfHwobj1bbl0pO2Zvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKXt2YXIgaT1uW29dO2lmKGk9PT1yfHxcImludGVnZXJcIj09PWkmJlwibnVtYmVyXCI9PT1yJiZlJTE9PT0wKXJldHVybiBudWxsfXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuSU5WQUxJRF9UWVBFLHt0eXBlOnIsZXhwZWN0ZWQ6bi5qb2luKFwiL1wiKX0sXCJcIixcIlwiLG51bGwsZSx0KX0saC5wcm90b3R5cGUudmFsaWRhdGVFbnVtPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dFtcImVudW1cIl0pcmV0dXJuIG51bGw7Zm9yKHZhciByPTA7cjx0W1wiZW51bVwiXS5sZW5ndGg7cisrKXt2YXIgbz10W1wiZW51bVwiXVtyXTtpZihuKGUsbykpcmV0dXJuIG51bGx9cmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5FTlVNX01JU01BVENILHt2YWx1ZTpcInVuZGVmaW5lZFwiIT10eXBlb2YgSlNPTj9KU09OLnN0cmluZ2lmeShlKTplfSxcIlwiLFwiXCIsbnVsbCxlLHQpfSxoLnByb3RvdHlwZS52YWxpZGF0ZU51bWVyaWM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlTXVsdGlwbGVPZihlLHQscil8fHRoaXMudmFsaWRhdGVNaW5NYXgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTmFOKGUsdCxyKXx8bnVsbH07dmFyIHk9TWF0aC5wb3coMiwtNTEpLG09MS15O2gucHJvdG90eXBlLnZhbGlkYXRlTXVsdGlwbGVPZj1mdW5jdGlvbihlLHQpe3ZhciByPXQubXVsdGlwbGVPZnx8dC5kaXZpc2libGVCeTtpZih2b2lkIDA9PT1yKXJldHVybiBudWxsO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXt2YXIgbj1lL3IlMTtpZihuPj15JiZuPG0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTVVMVElQTEVfT0Yse3ZhbHVlOmUsbXVsdGlwbGVPZjpyfSxcIlwiLFwiXCIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heD1mdW5jdGlvbihlLHQpe2lmKFwibnVtYmVyXCIhPXR5cGVvZiBlKXJldHVybiBudWxsO2lmKHZvaWQgMCE9PXQubWluaW11bSl7aWYoZTx0Lm1pbmltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUlOSU1VTSx7dmFsdWU6ZSxtaW5pbXVtOnQubWluaW11bX0sXCJcIixcIi9taW5pbXVtXCIsbnVsbCxlLHQpO2lmKHQuZXhjbHVzaXZlTWluaW11bSYmZT09PXQubWluaW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRSx7dmFsdWU6ZSxtaW5pbXVtOnQubWluaW11bX0sXCJcIixcIi9leGNsdXNpdmVNaW5pbXVtXCIsbnVsbCxlLHQpfWlmKHZvaWQgMCE9PXQubWF4aW11bSl7aWYoZT50Lm1heGltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUFYSU1VTSx7dmFsdWU6ZSxtYXhpbXVtOnQubWF4aW11bX0sXCJcIixcIi9tYXhpbXVtXCIsbnVsbCxlLHQpO2lmKHQuZXhjbHVzaXZlTWF4aW11bSYmZT09PXQubWF4aW11bSlyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRSx7dmFsdWU6ZSxtYXhpbXVtOnQubWF4aW11bX0sXCJcIixcIi9leGNsdXNpdmVNYXhpbXVtXCIsbnVsbCxlLHQpfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU5hTj1mdW5jdGlvbihlLHQpe3JldHVyblwibnVtYmVyXCIhPXR5cGVvZiBlP251bGw6aXNOYU4oZSk9PT0hMHx8ZT09PTEvMHx8ZT09PS0oMS8wKT90aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX05PVF9BX05VTUJFUix7dmFsdWU6ZX0sXCJcIixcIi90eXBlXCIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy52YWxpZGF0ZVN0cmluZ0xlbmd0aChlLHQscil8fHRoaXMudmFsaWRhdGVTdHJpbmdQYXR0ZXJuKGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdMZW5ndGg9ZnVuY3Rpb24oZSx0KXtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZT9udWxsOnZvaWQgMCE9PXQubWluTGVuZ3RoJiZlLmxlbmd0aDx0Lm1pbkxlbmd0aD90aGlzLmNyZWF0ZUVycm9yKHYuU1RSSU5HX0xFTkdUSF9TSE9SVCx7bGVuZ3RoOmUubGVuZ3RoLG1pbmltdW06dC5taW5MZW5ndGh9LFwiXCIsXCIvbWluTGVuZ3RoXCIsbnVsbCxlLHQpOnZvaWQgMCE9PXQubWF4TGVuZ3RoJiZlLmxlbmd0aD50Lm1heExlbmd0aD90aGlzLmNyZWF0ZUVycm9yKHYuU1RSSU5HX0xFTkdUSF9MT05HLHtsZW5ndGg6ZS5sZW5ndGgsbWF4aW11bTp0Lm1heExlbmd0aH0sXCJcIixcIi9tYXhMZW5ndGhcIixudWxsLGUsdCk6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdQYXR0ZXJuPWZ1bmN0aW9uKGUsdCl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGV8fFwic3RyaW5nXCIhPXR5cGVvZiB0LnBhdHRlcm4mJiEodC5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKSlyZXR1cm4gbnVsbDt2YXIgcjtpZih0LnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApcj10LnBhdHRlcm47ZWxzZXt2YXIgbixvPVwiXCIsaT10LnBhdHRlcm4ubWF0Y2goL15cXC8oLispXFwvKFtpbWddKikkLyk7aT8obj1pWzFdLG89aVsyXSk6bj10LnBhdHRlcm4scj1uZXcgUmVnRXhwKG4sbyl9cmV0dXJuIHIudGVzdChlKT9udWxsOnRoaXMuY3JlYXRlRXJyb3Iodi5TVFJJTkdfUEFUVEVSTix7cGF0dGVybjp0LnBhdHRlcm59LFwiXCIsXCIvcGF0dGVyblwiLG51bGwsZSx0KX0saC5wcm90b3R5cGUudmFsaWRhdGVBcnJheT1mdW5jdGlvbihlLHQscil7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/dGhpcy52YWxpZGF0ZUFycmF5TGVuZ3RoKGUsdCxyKXx8dGhpcy52YWxpZGF0ZUFycmF5VW5pcXVlSXRlbXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQXJyYXlJdGVtcyhlLHQscil8fG51bGw6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBcnJheUxlbmd0aD1mdW5jdGlvbihlLHQpe3ZhciByO3JldHVybiB2b2lkIDAhPT10Lm1pbkl0ZW1zJiZlLmxlbmd0aDx0Lm1pbkl0ZW1zJiYocj10aGlzLmNyZWF0ZUVycm9yKHYuQVJSQVlfTEVOR1RIX1NIT1JULHtsZW5ndGg6ZS5sZW5ndGgsbWluaW11bTp0Lm1pbkl0ZW1zfSxcIlwiLFwiL21pbkl0ZW1zXCIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6dm9pZCAwIT09dC5tYXhJdGVtcyYmZS5sZW5ndGg+dC5tYXhJdGVtcyYmKHI9dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX0xFTkdUSF9MT05HLHtsZW5ndGg6ZS5sZW5ndGgsbWF4aW11bTp0Lm1heEl0ZW1zfSxcIlwiLFwiL21heEl0ZW1zXCIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zPWZ1bmN0aW9uKGUsdCl7aWYodC51bmlxdWVJdGVtcylmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKylmb3IodmFyIG89cisxO288ZS5sZW5ndGg7bysrKWlmKG4oZVtyXSxlW29dKSl7dmFyIGk9dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX1VOSVFVRSx7bWF0Y2gxOnIsbWF0Y2gyOm99LFwiXCIsXCIvdW5pcXVlSXRlbXNcIixudWxsLGUsdCk7aWYodGhpcy5oYW5kbGVFcnJvcihpKSlyZXR1cm4gaX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBcnJheUl0ZW1zPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10Lml0ZW1zKXJldHVybiBudWxsO3ZhciBuLG87aWYoQXJyYXkuaXNBcnJheSh0Lml0ZW1zKSl7Zm9yKG89MDtvPGUubGVuZ3RoO28rKylpZihvPHQuaXRlbXMubGVuZ3RoKXtpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0Lml0ZW1zW29dLFtvXSxbXCJpdGVtc1wiLG9dLHIrXCIvXCIrbykpcmV0dXJuIG59ZWxzZSBpZih2b2lkIDAhPT10LmFkZGl0aW9uYWxJdGVtcylpZihcImJvb2xlYW5cIj09dHlwZW9mIHQuYWRkaXRpb25hbEl0ZW1zKXtpZighdC5hZGRpdGlvbmFsSXRlbXMmJihuPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9BRERJVElPTkFMX0lURU1TLHt9LFwiL1wiK28sXCIvYWRkaXRpb25hbEl0ZW1zXCIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IobikpKXJldHVybiBufWVsc2UgaWYobj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5hZGRpdGlvbmFsSXRlbXMsW29dLFtcImFkZGl0aW9uYWxJdGVtc1wiXSxyK1wiL1wiK28pKXJldHVybiBufWVsc2UgZm9yKG89MDtvPGUubGVuZ3RoO28rKylpZihuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0Lml0ZW1zLFtvXSxbXCJpdGVtc1wiXSxyK1wiL1wiK28pKXJldHVybiBuO3JldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdD1mdW5jdGlvbihlLHQscil7cmV0dXJuXCJvYmplY3RcIiE9dHlwZW9mIGV8fG51bGw9PT1lfHxBcnJheS5pc0FycmF5KGUpP251bGw6dGhpcy52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7dmFyIHIsbj1PYmplY3Qua2V5cyhlKTtyZXR1cm4gdm9pZCAwIT09dC5taW5Qcm9wZXJ0aWVzJiZuLmxlbmd0aDx0Lm1pblByb3BlcnRpZXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNLHtwcm9wZXJ0eUNvdW50Om4ubGVuZ3RoLG1pbmltdW06dC5taW5Qcm9wZXJ0aWVzfSxcIlwiLFwiL21pblByb3BlcnRpZXNcIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjp2b2lkIDAhPT10Lm1heFByb3BlcnRpZXMmJm4ubGVuZ3RoPnQubWF4UHJvcGVydGllcyYmKHI9dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU0se3Byb3BlcnR5Q291bnQ6bi5sZW5ndGgsbWF4aW11bTp0Lm1heFByb3BlcnRpZXN9LFwiXCIsXCIvbWF4UHJvcGVydGllc1wiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwIT09dC5yZXF1aXJlZClmb3IodmFyIHI9MDtyPHQucmVxdWlyZWQubGVuZ3RoO3IrKyl7dmFyIG49dC5yZXF1aXJlZFtyXTtpZih2b2lkIDA9PT1lW25dKXt2YXIgbz10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX1JFUVVJUkVELHtrZXk6bn0sXCJcIixcIi9yZXF1aXJlZC9cIityLG51bGwsZSx0KTtpZih0aGlzLmhhbmRsZUVycm9yKG8pKXJldHVybiBvfX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzPWZ1bmN0aW9uKGUsdCxyKXt2YXIgbjtmb3IodmFyIG8gaW4gZSl7dmFyIGk9citcIi9cIitvLnJlcGxhY2UoL34vZyxcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLFwifjFcIiksYT0hMTtpZih2b2lkIDAhPT10LnByb3BlcnRpZXMmJnZvaWQgMCE9PXQucHJvcGVydGllc1tvXSYmKGE9ITAsbj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5wcm9wZXJ0aWVzW29dLFtvXSxbXCJwcm9wZXJ0aWVzXCIsb10saSkpKXJldHVybiBuO2lmKHZvaWQgMCE9PXQucGF0dGVyblByb3BlcnRpZXMpZm9yKHZhciBzIGluIHQucGF0dGVyblByb3BlcnRpZXMpe3ZhciB1PW5ldyBSZWdFeHAocyk7aWYodS50ZXN0KG8pJiYoYT0hMCxuPXRoaXMudmFsaWRhdGVBbGwoZVtvXSx0LnBhdHRlcm5Qcm9wZXJ0aWVzW3NdLFtvXSxbXCJwYXR0ZXJuUHJvcGVydGllc1wiLHNdLGkpKSlyZXR1cm4gbn1pZihhKXRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2ldPSEwLGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2ldKTtlbHNlIGlmKHZvaWQgMCE9PXQuYWRkaXRpb25hbFByb3BlcnRpZXMpe2lmKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2ldPSEwLGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2ldKSxcImJvb2xlYW5cIj09dHlwZW9mIHQuYWRkaXRpb25hbFByb3BlcnRpZXMpe2lmKCF0LmFkZGl0aW9uYWxQcm9wZXJ0aWVzJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUyx7a2V5Om99LFwiXCIsXCIvYWRkaXRpb25hbFByb3BlcnRpZXNcIixudWxsLGUsdCkucHJlZml4V2l0aChvLG51bGwpLHRoaXMuaGFuZGxlRXJyb3IobikpKXJldHVybiBufWVsc2UgaWYobj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5hZGRpdGlvbmFsUHJvcGVydGllcyxbb10sW1wiYWRkaXRpb25hbFByb3BlcnRpZXNcIl0saSkpcmV0dXJuIG59ZWxzZSB0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJiF0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXSYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNbaV09ITApfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcz1mdW5jdGlvbihlLHQscil7dmFyIG47aWYodm9pZCAwIT09dC5kZXBlbmRlbmNpZXMpZm9yKHZhciBvIGluIHQuZGVwZW5kZW5jaWVzKWlmKHZvaWQgMCE9PWVbb10pe3ZhciBpPXQuZGVwZW5kZW5jaWVzW29dO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBpKXtpZih2b2lkIDA9PT1lW2ldJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLHtrZXk6byxtaXNzaW5nOml9LFwiXCIsXCJcIixudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG8pLnByZWZpeFdpdGgobnVsbCxcImRlcGVuZGVuY2llc1wiKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKEFycmF5LmlzQXJyYXkoaSkpZm9yKHZhciBhPTA7YTxpLmxlbmd0aDthKyspe3ZhciBzPWlbYV07aWYodm9pZCAwPT09ZVtzXSYmKG49dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9ERVBFTkRFTkNZX0tFWSx7a2V5Om8sbWlzc2luZzpzfSxcIlwiLFwiL1wiK2EsbnVsbCxlLHQpLnByZWZpeFdpdGgobnVsbCxvKS5wcmVmaXhXaXRoKG51bGwsXCJkZXBlbmRlbmNpZXNcIiksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihuPXRoaXMudmFsaWRhdGVBbGwoZSxpLFtdLFtcImRlcGVuZGVuY2llc1wiLG9dLHIpKXJldHVybiBufXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUNvbWJpbmF0aW9ucz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMudmFsaWRhdGVBbGxPZihlLHQscil8fHRoaXMudmFsaWRhdGVBbnlPZihlLHQscil8fHRoaXMudmFsaWRhdGVPbmVPZihlLHQscil8fHRoaXMudmFsaWRhdGVOb3QoZSx0LHIpfHxudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFsbE9mPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10LmFsbE9mKXJldHVybiBudWxsO2Zvcih2YXIgbixvPTA7bzx0LmFsbE9mLmxlbmd0aDtvKyspe3ZhciBpPXQuYWxsT2Zbb107aWYobj10aGlzLnZhbGlkYXRlQWxsKGUsaSxbXSxbXCJhbGxPZlwiLG9dLHIpKXJldHVybiBufXJldHVybiBudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZUFueU9mPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10LmFueU9mKXJldHVybiBudWxsO3ZhciBuLG8saT1bXSxhPXRoaXMuZXJyb3JzLmxlbmd0aDt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJihuPXRoaXMudW5rbm93blByb3BlcnR5UGF0aHMsbz10aGlzLmtub3duUHJvcGVydHlQYXRocyk7Zm9yKHZhciBzPSEwLHU9MDt1PHQuYW55T2YubGVuZ3RoO3UrKyl7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSk7dmFyIGM9dC5hbnlPZlt1XSxsPXRoaXMuZXJyb3JzLmxlbmd0aCxmPXRoaXMudmFsaWRhdGVBbGwoZSxjLFtdLFtcImFueU9mXCIsdV0scik7aWYobnVsbD09PWYmJmw9PT10aGlzLmVycm9ycy5sZW5ndGgpe2lmKHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsYSksdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKXtmb3IodmFyIGQgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpb1tkXT0hMCxkZWxldGUgbltkXTtmb3IodmFyIHAgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocylvW3BdfHwobltwXT0hMCk7cz0hMTtjb250aW51ZX1yZXR1cm4gbnVsbH1mJiZpLnB1c2goZi5wcmVmaXhXaXRoKG51bGwsXCJcIit1KS5wcmVmaXhXaXRoKG51bGwsXCJhbnlPZlwiKSl9cmV0dXJuIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9bix0aGlzLmtub3duUHJvcGVydHlQYXRocz1vKSxzPyhpPWkuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKGEpKSx0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLGEpLHRoaXMuY3JlYXRlRXJyb3Iodi5BTllfT0ZfTUlTU0lORyx7fSxcIlwiLFwiL2FueU9mXCIsaSxlLHQpKTp2b2lkIDB9LGgucHJvdG90eXBlLnZhbGlkYXRlT25lT2Y9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQub25lT2YpcmV0dXJuIG51bGw7dmFyIG4sbyxpPW51bGwsYT1bXSxzPXRoaXMuZXJyb3JzLmxlbmd0aDt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJihuPXRoaXMudW5rbm93blByb3BlcnR5UGF0aHMsbz10aGlzLmtub3duUHJvcGVydHlQYXRocyk7Zm9yKHZhciB1PTA7dTx0Lm9uZU9mLmxlbmd0aDt1Kyspe3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30pO3ZhciBjPXQub25lT2ZbdV0sbD10aGlzLmVycm9ycy5sZW5ndGgsZj10aGlzLnZhbGlkYXRlQWxsKGUsYyxbXSxbXCJvbmVPZlwiLHVdLHIpO2lmKG51bGw9PT1mJiZsPT09dGhpcy5lcnJvcnMubGVuZ3RoKXtpZihudWxsIT09aSlyZXR1cm4gdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxzKSx0aGlzLmNyZWF0ZUVycm9yKHYuT05FX09GX01VTFRJUExFLHtpbmRleDE6aSxpbmRleDI6dX0sXCJcIixcIi9vbmVPZlwiLG51bGwsZSx0KTtpZihpPXUsdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKXtmb3IodmFyIGQgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpb1tkXT0hMCxkZWxldGUgbltkXTtmb3IodmFyIHAgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocylvW3BdfHwobltwXT0hMCl9fWVsc2UgZiYmYS5wdXNoKGYpfXJldHVybiB0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPW4sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9byksbnVsbD09PWk/KGE9YS5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2UocykpLHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAscyksdGhpcy5jcmVhdGVFcnJvcih2Lk9ORV9PRl9NSVNTSU5HLHt9LFwiXCIsXCIvb25lT2ZcIixhLGUsdCkpOih0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLG51bGwpfSxoLnByb3RvdHlwZS52YWxpZGF0ZU5vdD1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5ub3QpcmV0dXJuIG51bGw7dmFyIG4sbyxpPXRoaXMuZXJyb3JzLmxlbmd0aDt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJihuPXRoaXMudW5rbm93blByb3BlcnR5UGF0aHMsbz10aGlzLmtub3duUHJvcGVydHlQYXRocyx0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgYT10aGlzLnZhbGlkYXRlQWxsKGUsdC5ub3QsbnVsbCxudWxsLHIpLHM9dGhpcy5lcnJvcnMuc2xpY2UoaSk7cmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAsaSksdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLG51bGw9PT1hJiYwPT09cy5sZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2Lk5PVF9QQVNTRUQse30sXCJcIixcIi9ub3RcIixudWxsLGUsdCk6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVIeXBlcm1lZGlhPWZ1bmN0aW9uKGUsdCxuKXtpZighdC5saW5rcylyZXR1cm4gbnVsbDtmb3IodmFyIG8saT0wO2k8dC5saW5rcy5sZW5ndGg7aSsrKXt2YXIgYT10LmxpbmtzW2ldO2lmKFwiZGVzY3JpYmVkYnlcIj09PWEucmVsKXtmb3IodmFyIHM9bmV3IHIoYS5ocmVmKSx1PSEwLGM9MDtjPHMudmFyTmFtZXMubGVuZ3RoO2MrKylpZighKHMudmFyTmFtZXNbY11pbiBlKSl7dT0hMTticmVha31pZih1KXt2YXIgbD1zLmZpbGxGcm9tT2JqZWN0KGUpLGY9eyRyZWY6bH07aWYobz10aGlzLnZhbGlkYXRlQWxsKGUsZixbXSxbXCJsaW5rc1wiLGldLG4pKXJldHVybiBvfX19fTt2YXIgdj17SU5WQUxJRF9UWVBFOjAsRU5VTV9NSVNNQVRDSDoxLEFOWV9PRl9NSVNTSU5HOjEwLE9ORV9PRl9NSVNTSU5HOjExLE9ORV9PRl9NVUxUSVBMRToxMixOT1RfUEFTU0VEOjEzLE5VTUJFUl9NVUxUSVBMRV9PRjoxMDAsTlVNQkVSX01JTklNVU06MTAxLE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRToxMDIsTlVNQkVSX01BWElNVU06MTAzLE5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRToxMDQsTlVNQkVSX05PVF9BX05VTUJFUjoxMDUsU1RSSU5HX0xFTkdUSF9TSE9SVDoyMDAsU1RSSU5HX0xFTkdUSF9MT05HOjIwMSxTVFJJTkdfUEFUVEVSTjoyMDIsT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTTozMDAsT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTozMDEsT0JKRUNUX1JFUVVJUkVEOjMwMixPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOjMwMyxPQkpFQ1RfREVQRU5ERU5DWV9LRVk6MzA0LEFSUkFZX0xFTkdUSF9TSE9SVDo0MDAsQVJSQVlfTEVOR1RIX0xPTkc6NDAxLEFSUkFZX1VOSVFVRTo0MDIsQVJSQVlfQURESVRJT05BTF9JVEVNUzo0MDMsRk9STUFUX0NVU1RPTTo1MDAsS0VZV09SRF9DVVNUT006NTAxLENJUkNVTEFSX1JFRkVSRU5DRTo2MDAsVU5LTk9XTl9QUk9QRVJUWToxZTN9LF89e307Zm9yKHZhciBiIGluIHYpX1t2W2JdXT1iO3ZhciBnPXtJTlZBTElEX1RZUEU6XCJJbnZhbGlkIHR5cGU6IHt0eXBlfSAoZXhwZWN0ZWQge2V4cGVjdGVkfSlcIixFTlVNX01JU01BVENIOlwiTm8gZW51bSBtYXRjaCBmb3I6IHt2YWx1ZX1cIixBTllfT0ZfTUlTU0lORzonRGF0YSBkb2VzIG5vdCBtYXRjaCBhbnkgc2NoZW1hcyBmcm9tIFwiYW55T2ZcIicsT05FX09GX01JU1NJTkc6J0RhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSBcIm9uZU9mXCInLE9ORV9PRl9NVUxUSVBMRTonRGF0YSBpcyB2YWxpZCBhZ2FpbnN0IG1vcmUgdGhhbiBvbmUgc2NoZW1hIGZyb20gXCJvbmVPZlwiOiBpbmRpY2VzIHtpbmRleDF9IGFuZCB7aW5kZXgyfScsTk9UX1BBU1NFRDonRGF0YSBtYXRjaGVzIHNjaGVtYSBmcm9tIFwibm90XCInLE5VTUJFUl9NVUxUSVBMRV9PRjpcIlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgbXVsdGlwbGUgb2Yge211bHRpcGxlT2Z9XCIsTlVNQkVSX01JTklNVU06XCJWYWx1ZSB7dmFsdWV9IGlzIGxlc3MgdGhhbiBtaW5pbXVtIHttaW5pbXVtfVwiLE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRTpcIlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1pbmltdW0ge21pbmltdW19XCIsTlVNQkVSX01BWElNVU06XCJWYWx1ZSB7dmFsdWV9IGlzIGdyZWF0ZXIgdGhhbiBtYXhpbXVtIHttYXhpbXVtfVwiLE5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRTpcIlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1heGltdW0ge21heGltdW19XCIsTlVNQkVSX05PVF9BX05VTUJFUjpcIlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgdmFsaWQgbnVtYmVyXCIsU1RSSU5HX0xFTkdUSF9TSE9SVDpcIlN0cmluZyBpcyB0b28gc2hvcnQgKHtsZW5ndGh9IGNoYXJzKSwgbWluaW11bSB7bWluaW11bX1cIixTVFJJTkdfTEVOR1RIX0xPTkc6XCJTdHJpbmcgaXMgdG9vIGxvbmcgKHtsZW5ndGh9IGNoYXJzKSwgbWF4aW11bSB7bWF4aW11bX1cIixTVFJJTkdfUEFUVEVSTjpcIlN0cmluZyBkb2VzIG5vdCBtYXRjaCBwYXR0ZXJuOiB7cGF0dGVybn1cIixPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOlwiVG9vIGZldyBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1pbmltdW0ge21pbmltdW19XCIsT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTpcIlRvbyBtYW55IHByb3BlcnRpZXMgZGVmaW5lZCAoe3Byb3BlcnR5Q291bnR9KSwgbWF4aW11bSB7bWF4aW11bX1cIixPQkpFQ1RfUkVRVUlSRUQ6XCJNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5OiB7a2V5fVwiLE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6XCJBZGRpdGlvbmFsIHByb3BlcnRpZXMgbm90IGFsbG93ZWRcIixPQkpFQ1RfREVQRU5ERU5DWV9LRVk6XCJEZXBlbmRlbmN5IGZhaWxlZCAtIGtleSBtdXN0IGV4aXN0OiB7bWlzc2luZ30gKGR1ZSB0byBrZXk6IHtrZXl9KVwiLEFSUkFZX0xFTkdUSF9TSE9SVDpcIkFycmF5IGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0pLCBtaW5pbXVtIHttaW5pbXVtfVwiLEFSUkFZX0xFTkdUSF9MT05HOlwiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX1cIixBUlJBWV9VTklRVUU6XCJBcnJheSBpdGVtcyBhcmUgbm90IHVuaXF1ZSAoaW5kaWNlcyB7bWF0Y2gxfSBhbmQge21hdGNoMn0pXCIsQVJSQVlfQURESVRJT05BTF9JVEVNUzpcIkFkZGl0aW9uYWwgaXRlbXMgbm90IGFsbG93ZWRcIixGT1JNQVRfQ1VTVE9NOlwiRm9ybWF0IHZhbGlkYXRpb24gZmFpbGVkICh7bWVzc2FnZX0pXCIsS0VZV09SRF9DVVNUT006XCJLZXl3b3JkIGZhaWxlZDoge2tleX0gKHttZXNzYWdlfSlcIixDSVJDVUxBUl9SRUZFUkVOQ0U6XCJDaXJjdWxhciAkcmVmczoge3VybHN9XCIsVU5LTk9XTl9QUk9QRVJUWTpcIlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpXCJ9O2MucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKSxjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jLGMucHJvdG90eXBlLm5hbWU9XCJWYWxpZGF0aW9uRXJyb3JcIixjLnByb3RvdHlwZS5wcmVmaXhXaXRoPWZ1bmN0aW9uKGUsdCl7aWYobnVsbCE9PWUmJihlPWUucmVwbGFjZSgvfi9nLFwifjBcIikucmVwbGFjZSgvXFwvL2csXCJ+MVwiKSx0aGlzLmRhdGFQYXRoPVwiL1wiK2UrdGhpcy5kYXRhUGF0aCksbnVsbCE9PXQmJih0PXQucmVwbGFjZSgvfi9nLFwifjBcIikucmVwbGFjZSgvXFwvL2csXCJ+MVwiKSx0aGlzLnNjaGVtYVBhdGg9XCIvXCIrdCt0aGlzLnNjaGVtYVBhdGgpLG51bGwhPT10aGlzLnN1YkVycm9ycylmb3IodmFyIHI9MDtyPHRoaXMuc3ViRXJyb3JzLmxlbmd0aDtyKyspdGhpcy5zdWJFcnJvcnNbcl0ucHJlZml4V2l0aChlLHQpO3JldHVybiB0aGlzfTt2YXIgRT17fSxqPWYoKTtyZXR1cm4gai5hZGRMYW5ndWFnZShcImVuLWdiXCIsZyksai50djQ9aixqfSl9LHt9XSwxMDA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksci5NZXNzYWdlRmFjdG9yeT12b2lkIDA7dmFyIG89ZShcIi4vbWVzc2FnZS1mYWN0b3J5L01lc3NhZ2VGYWN0b3J5XCIpLGk9bihvKTtyLk1lc3NhZ2VGYWN0b3J5PWlbXCJkZWZhdWx0XCJdfSx7XCIuL21lc3NhZ2UtZmFjdG9yeS9NZXNzYWdlRmFjdG9yeVwiOjEwM31dLDEwMTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyLk1lc3NhZ2VUeXBlPXIuTWVzc2FnZT12b2lkIDA7XHJcbnZhciBvPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksaT1uKG8pLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSxzPW4oYSksdT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpLGM9bih1KSxsPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSxmPW4obCksZD1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpLHA9bihkKSxoPWUoXCIuLi9yZVRISU5LT2JqZWN0L1JldGhpbmtPYmplY3QuanNcIikseT1uKGgpLG09ci5NZXNzYWdlPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxhKXsoMCxzW1wiZGVmYXVsdFwiXSkodGhpcyx0KTt2YXIgdT0oMCxmW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGlbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzKSk7cmV0dXJuIHUuaWQ9ZSx1LmZyb209cix1LnRvPW4sdS50eXBlPW8sdS5ib2R5PWEsdX1yZXR1cm4oMCxwW1wiZGVmYXVsdFwiXSkodCxlKSwoMCxjW1wiZGVmYXVsdFwiXSkodCxbe2tleTpcImFzc2VydElkZW50aXR5XCIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtpZighZXx8IXQpdGhyb3cgbmV3IEVycm9yKFwibWVzc2FnZSwgdG9rZW4gdG8gYmUgcmVtb3ZlZCwgYW5kIGFzc2VydGVkSWRlbnRpdHkgbXVzdCBiZSBwcm92aWRlZFwiKTt2YXIgcj10aGlzLmJvZHk7cmV0dXJuIHIuaWRUb2tlbj1udWxsLHIuYXNzZXJ0ZWRJZGVudGl0eT10LHRoaXMuYm9keT1yLHRoaXN9fSx7a2V5OlwiYWRkSWRUb2tlblwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIm1lc3NhZ2UsIHRva2VuIHRvIGJlIGFkZGVkLCBtdXN0IGJlIHByb3ZpZGVkXCIpO3ZhciB0PXRoaXMuYm9keTtyZXR1cm4gdC5pZFRva2VuPWUsdGhpcy5ib2R5PXQsdGhpc319LHtrZXk6XCJhZGRBY2Nlc3NUb2tlblwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcIm1lc3NhZ2UsIHRva2VuIHRvIGJlIGFkZGVkLCBtdXN0IGJlIHByb3ZpZGVkXCIpO3ZhciB0PXRoaXMuYm9keTtyZXR1cm4gdC5hY2Nlc3NUb2tlbj1lLHRoaXMuYm9keT10LHRoaXN9fV0pLHR9KHlbXCJkZWZhdWx0XCJdKTtyLk1lc3NhZ2VUeXBlPXtDUkVBVEU6XCJjcmVhdGVcIixSRUFEOlwicmVhZFwiLFVQREFURTpcInVwZGF0ZVwiLERFTEVURTpcImRlbGV0ZVwiLFNVQlNDUklCRTpcInN1YnNjcmliZVwiLFVOU1VCU0NSSUJFOlwidW5zdWJzY3JpYmVcIixSRVNQT05TRTpcInJlc3BvbnNlXCIsRk9SV0FSRDpcImZvcndhcmRcIixFWEVDVVRFOlwiZXhlY3V0ZVwifTtyW1wiZGVmYXVsdFwiXT1tfSx7XCIuLi9yZVRISU5LT2JqZWN0L1JldGhpbmtPYmplY3QuanNcIjoxMDQsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIjo1LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6MTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjoxMSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjEyLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxM31dLDEwMjpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1mdW5jdGlvbiBvKGUpe3ZhciB0PSgwLHVbXCJkZWZhdWx0XCJdKShlKS5yZWR1Y2UoZnVuY3Rpb24odCxyKXtyZXR1cm4gdFtlW3JdXT1yLHR9LHt9KTtyZXR1cm4oMCxhW1wiZGVmYXVsdFwiXSkoKDAsdVtcImRlZmF1bHRcIl0pKGUpLnJlZHVjZShmdW5jdGlvbih0LHIpe3JldHVybiB0W3JdPWVbcl0sdH0sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksci5VUERBVEVfT1BFUkFUSU9OPXIuQVRUUklCVVRFX1RZUEU9ci5SRUFTT05fUEhSQVNFPXIuUkVTUE9OU0VfQ09ERT1yLkV4ZWN1dGVNZXNzYWdlQm9keT1yLlJlc3BvbnNlTWVzc2FnZUJvZHk9ci5Gb3J3YXJkTWVzc2FnZUJvZHk9ci5VcGRhdGVNZXNzYWdlQm9keT1yLkRlbGV0ZU1lc3NhZ2VCb2R5PXIuUmVhZE1lc3NhZ2VCb2R5PXIuQ3JlYXRlTWVzc2FnZUJvZHk9ci5NZXNzYWdlQm9keT12b2lkIDA7dmFyIGk9ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZnJlZXplXCIpLGE9bihpKSxzPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXNcIiksdT1uKHMpLGM9ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSxsPW4oYyksZj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpLGQ9bihmKSxwPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIiksaD1uKHApLHk9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCIpLG09bih5KSx2PWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIiksXz1uKHYpO3IuRW51bT1vO3ZhciBiPWUoXCIuLi9yZVRISU5LT2JqZWN0L1JldGhpbmtPYmplY3QuanNcIiksZz1uKGIpLEU9ci5NZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIGE9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcykpO3JldHVybiBhLmlkVG9rZW49ZSxhLmFjY2Vzc1Rva2VuPXIsYS5yZXNvdXJjZT1uLGEuc2NoZW1hPW8sYS5hc3NlcnRlZElkZW50aXR5PWksYX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSwoMCxoW1wiZGVmYXVsdFwiXSkodCxbe2tleTpcImFkZFZpYVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKCFlKXRocm93IG5ldyBFcnJvcihcInZpYSBVUkwgdG8gYmUgYWRkZWQsIG11c3QgYmUgcHJvdmlkZWRcIik7cmV0dXJuIHRoaXMudmlhPWUsdGhpc319XSksdH0oZ1tcImRlZmF1bHRcIl0pLGo9KHIuQ3JlYXRlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzKXtpZigoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KSwhZSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgdmFsdWUgcGFyYW1ldGVyIGlzIG51bGxcIik7dmFyIHU9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxuLG8saSxhLHMsYSxzKSk7cmV0dXJuIHUudmFsdWU9ZSxyJiYodS5wb2xpY3k9ciksdX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLlJlYWRNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMsdSl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIGM9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gYSYmKGMuYXR0cmlidXRlPWEpLHMmJihjLmNyaXRlcmlhU3ludGF4PXMpLHUmJihjLmNyaXRlcmlhPXUpLGN9cmV0dXJuKDAsX1tcImRlZmF1bHRcIl0pKHQsZSksdH0oRSksci5EZWxldGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhKXtpZigoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KSxuIGluc3RhbmNlb2YgQXJyYXkpe3ZhciBzPSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG51bGwsbyxpKSk7cy5jaGlsZHJlblJlc291cmNlcz1ufWVsc2UgdmFyIHM9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gYSYmKHMuYXR0cmlidXRlPWEpLCgwLG1bXCJkZWZhdWx0XCJdKShzKX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLlVwZGF0ZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEscyl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIHU9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gdS5hdHRyaWJ1dGU9YSx1LnZhbHVlPXMsdX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSwoMCxoW1wiZGVmYXVsdFwiXSkodCxbe2tleTpcImFkZEF0dHJpYnV0ZVR5cGVcIix2YWx1ZTpmdW5jdGlvbihlKXtlJiYodGhpcy5hdHRyaWJ1dGVUeXBlPWUpfX0se2tleTpcImFkZE9wZXJhdGlvblwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UmJih0aGlzLm9wZXJhdGlvbj1lKX19XSksdH0oRSksci5Gb3J3YXJkTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIHM9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gcy5tZXNzYWdlPWEsc31yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLlJlc3BvbnNlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGkpeygwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpO3ZhciBhPSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG4pKTtyZXR1cm4gbyYmKGEuY29kZT1vLGEuZGVzY3JpcHRpb249altvXSksaSYmKGEudmFsdWU9aSksYX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLkV4ZWN1dGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpeygwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpO3ZhciB1PSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHUubWV0aG9kPWEscyYmKHMgaW5zdGFuY2VvZiBBcnJheT91LnBhcmFtcz1zOnUucGFyYW1zPVtzXSksdX1yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLlJFU1BPTlNFX0NPREU9byh7MTAwOlwiMTAwXCIsMTAxOlwiMTAxXCIsMjAwOlwiMjAwXCIsMjAxOlwiMjAxXCIsMjAyOlwiMjAyXCIsMjAzOlwiMjAzXCIsMjA0OlwiMjA0XCIsMjA1OlwiMjA1XCIsMjA2OlwiMjA2XCIsMzAwOlwiMzAwXCIsMzAxOlwiMzAxXCIsMzAyOlwiMzAyXCIsMzAzOlwiMzAzXCIsMzA0OlwiMzA0XCIsMzA1OlwiMzA1XCIsMzA3OlwiMzA3XCIsNDAwOlwiNDAwXCIsNDAxOlwiNDAxXCIsNDAyOlwiNDAyXCIsNDAzOlwiNDAzXCIsNDA0OlwiNDA0XCIsNDA1OlwiNDA1XCIsNDA2OlwiNDA2XCIsNDA3OlwiNDA3XCIsNDA4OlwiNDA4XCIsNDA5OlwiNDA5XCIsNDEwOlwiNDEwXCIsNDExOlwiNDExXCIsNDEyOlwiNDEyXCIsNDEzOlwiNDEzXCIsNDE0OlwiNDE0XCIsNDE1OlwiNDE1XCIsNDE2OlwiNDE2XCIsNDE3OlwiNDE3XCIsNDI2OlwiNDI2XCIsNTAwOlwiNTAwXCIsNTAxOlwiNTAxXCIsNTAyOlwiNTAyXCIsNTAzOlwiNTAzXCIsNTA0OlwiNTA0XCIsNTA1OlwiNTA1XCJ9KSxyLlJFQVNPTl9QSFJBU0U9byh7MTAwOlwiQ29udGludWVcIiwxMDE6XCJTd2l0Y2hpbmcgUHJvdG9jb2xzXCIsMjAwOlwiT0tcIiwyMDE6XCJDcmVhdGVkXCIsMjAyOlwiQWNjZXB0ZWRcIiwyMDM6XCJOb24tQXV0aG9yaXRhdGl2ZSBJbmZvcm1hdGlvblwiLDIwNDpcIk5vIENvbnRlbnRcIiwyMDU6XCJSZXNldCBDb250ZW50XCIsMjA2OlwiUGFydGlhbCBDb250ZW50XCIsMzAwOlwiTXVsdGlwbGUgQ2hvaWNlc1wiLDMwMTpcIk1vdmVkIFBlcm1hbmVudGx5XCIsMzAyOlwiRm91bmRcIiwzMDM6XCJTZWUgT3RoZXJcIiwzMDQ6XCJOb3QgTW9kaWZpZWRcIiwzMDU6XCJVc2UgUHJveHlcIiwzMDc6XCJUZW1wb3JhcnkgUmVkaXJlY3RcIiw0MDA6XCJCYWQgUmVxdWVzdFwiLDQwMTpcIlVuYXV0aG9yaXplZFwiLDQwMjpcIlBheW1lbnQgUmVxdWlyZWRcIiw0MDM6XCJGb3JiaWRkZW5cIiw0MDQ6XCJOb3QgRm91bmRcIiw0MDU6XCJNZXRob2QgTm90IEFsbG93ZWRcIiw0MDY6XCJOb3QgQWNjZXB0YWJsZVwiLDQwNzpcIlByb3h5IEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkXCIsNDA4OlwiUmVxdWVzdCBUaW1lb3V0XCIsNDA5OlwiQ29uZmxpY3RcIiw0MTA6XCJHb25lXCIsNDExOlwiTGVuZ3RoIFJlcXVpcmVkXCIsNDEyOlwiUHJlY29uZGl0aW9uIEZhaWxlZFwiLDQxMzpcIlBheWxvYWQgVG9vIExhcmdlXCIsNDE0OlwiUmVxdWVzdC1VUkkgVG9vIExvbmdcIiw0MTU6XCJVbnN1cHBvcnRlZCBNZWRpYSBUeXBlXCIsNDE2OlwiUmFuZ2UgTm90IFNhdGlzZmlhYmxlXCIsNDE3OlwiRXhwZWN0YXRpb24gRmFpbGVkXCIsNDI2OlwiVXBncmFkZSBSZXF1aXJlZFwiLDUwMDpcIkludGVybmFsIFNlcnZlciBFcnJvclwiLDUwMTpcIk5vdCBJbXBsZW1lbnRlZFwiLDUwMjpcIkJhZCBHYXRld2F5XCIsNTAzOlwiU2VydmljZSBVbmF2YWlsYWJsZVwiLDUwNDpcIkdhdGV3YXkgVGltZS1vdXRcIiw1MDU6XCJIVFRQIFZlcnNpb24gTm90IFN1cHBvcnRlZFwifSkpO3IuQVRUUklCVVRFX1RZUEU9byh7T0JKRUNUOlwiT0JKRUNUXCIsQVJSQVk6XCJBUlJBWVwifSksci5VUERBVEVfT1BFUkFUSU9OPW8oe0FERDpcIkFERFwiLFJFTU9WRTpcIlJFTU9WRVwifSk7cltcImRlZmF1bHRcIl09RX0se1wiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzXCI6MTA0LFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9mcmVlemVcIjo0LFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCI6NSxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5c1wiOjYsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjoxMCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiOjExLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTIsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjEzfV0sMTAzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIuSWRHZW5lcmF0b3I9dm9pZCAwO3ZhciBvPWUoXCJiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yXCIpLGk9bihvKSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikscz1uKGEpLHU9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSxjPW4odSksbD1lKFwiLi9NZXNzYWdlLmpzXCIpLGY9bihsKSxkPWUoXCIuL01lc3NhZ2VCb2R5LmpzXCIpLHA9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7KDAsc1tcImRlZmF1bHRcIl0pKHRoaXMsZSksdGhpcy5teUdlbmVyYXRvcj0obmV3IGgpLmlkTWFrZXIoKX1yZXR1cm4oMCxjW1wiZGVmYXVsdFwiXSkoZSxbe2tleTpcImNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoXCJmcm9tLCB0bywgYW5kIHZhbHVlIG9mIG9iamVjdCB0byBiZSBjcmVhdGVkIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBvPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGk9bmV3IGQuQ3JlYXRlTWVzc2FnZUJvZHkocixuLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApKSxhPW5ldyBmW1wiZGVmYXVsdFwiXShvLGUsdCxsLk1lc3NhZ2VUeXBlLkNSRUFURSxpKTtyZXR1cm4gYX19LHtrZXk6XCJjcmVhdGVGb3J3YXJkTWVzc2FnZVJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoXCJmcm9tLCB0bywgYW5kIG1lc3NhZ2UgdG8gZm9yd2FyZCBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbj10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxvPW5ldyBkLkZvcndhcmRNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSxyKSxpPW5ldyBmW1wiZGVmYXVsdFwiXShuLGUsdCxsLk1lc3NhZ2VUeXBlLkZPUldBUkQsbyk7cmV0dXJuIGl9fSx7a2V5OlwiY3JlYXRlRGVsZXRlTWVzc2FnZVJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXQpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSBhbmQgdG8gcGFyYW1ldGVycyBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLkRlbGV0ZU1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLHIsbiwodm9pZCAwKSwodm9pZCAwKSksYT1uZXcgZltcImRlZmF1bHRcIl0obyxlLHQsbC5NZXNzYWdlVHlwZS5ERUxFVEUsaSk7cmV0dXJuIGF9fSx7a2V5OlwiY3JlYXRlVXBkYXRlTWVzc2FnZVJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuLG8pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgYW5kIHRvIGFuZCB2YWx1ZSBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgaT10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxhPW5ldyBkLlVwZGF0ZU1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLG4sKHZvaWQgMCksKHZvaWQgMCksbyxyKSxzPW5ldyBmW1wiZGVmYXVsdFwiXShpLGUsdCxsLk1lc3NhZ2VUeXBlLlVQREFURSxhKTtyZXR1cm4gc319LHtrZXk6XCJjcmVhdGVSZWFkTWVzc2FnZVJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcihcImZyb20sIHRvIGFuZCB0aGUgcmVzb3VyY2UgdG8gcmVhZCBmcm9tIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBvPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGk9bmV3IGQuUmVhZE1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLHIsKHZvaWQgMCksKHZvaWQgMCksbiwodm9pZCAwKSwodm9pZCAwKSksYT1uZXcgZltcImRlZmF1bHRcIl0obyxlLHQsbC5NZXNzYWdlVHlwZS5SRUFELGkpO3JldHVybiBhfX0se2tleTpcImNyZWF0ZVN1YnNjcmliZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgdG8gYW5kIHRoZSByZXNvdXJjZSB0byBzdWJzY3JpYmUgdG8gTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG49dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsbz1uZXcgZC5NZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLCh2b2lkIDApLCh2b2lkIDApKSxpPW5ldyBmW1wiZGVmYXVsdFwiXShuLGUsdCxsLk1lc3NhZ2VUeXBlLlNVQlNDUklCRSxvKTtyZXR1cm4gaX19LHtrZXk6XCJjcmVhdGVVbnN1YnNjcmliZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgdG8gYW5kIHRoZSByZXNvdXJjZSB0byBzdWJzY3JpYmUgdG8gTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG49dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsbz1uZXcgZC5NZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLCh2b2lkIDApLCh2b2lkIDApKSxpPW5ldyBmW1wiZGVmYXVsdFwiXShuLGUsdCxsLk1lc3NhZ2VUeXBlLlVOU1VCU0NSSUJFLG8pO3JldHVybiBpfX0se2tleTpcImNyZWF0ZUV4ZWN1dGVNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgdG8gYW5kIHRoZSBtZXRob2QgdG8gZXhlY3V0ZSBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLkV4ZWN1dGVNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSxyLG4pLGE9bmV3IGZbXCJkZWZhdWx0XCJdKG8sZSx0LGwuTWVzc2FnZVR5cGUuRVhFQ1VURSxpKTtyZXR1cm4gYX19LHtrZXk6XCJjcmVhdGVNZXNzYWdlUmVzcG9uc2VcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJyZXNwb25zZSBDb2RlIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBvPW5ldyBkLlJlc3BvbnNlTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksdCxyLG4pO3JldHVybiBuZXcgZltcImRlZmF1bHRcIl0oZS5pZCxlLnRvLGUuZnJvbSxsLk1lc3NhZ2VUeXBlLlJFU1BPTlNFLG8pfX0se2tleTpcImdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdCl0aHJvdyBuZXcgRXJyb3IoXCJtZXNzYWdlIGFuZCByZXNwb25zZSBjb2RlIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBuPWUuYm9keSxvPW4uaWRUb2tlbixpPW4uYWNjZXNzVG9rZW4sYT1uLnJlc291cmNlLHM9bmV3IGQuUmVzcG9uc2VNZXNzYWdlQm9keShvLGksYSx0LHIpLHU9dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWU7cmV0dXJuIG5ldyBmW1wiZGVmYXVsdFwiXSh1LGUudG8sZS5mcm9tLGwuTWVzc2FnZVR5cGUuUkVTUE9OU0Uscyl9fV0pLGV9KCksaD1yLklkR2VuZXJhdG9yPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeygwLHNbXCJkZWZhdWx0XCJdKSh0aGlzLGUpfXJldHVybigwLGNbXCJkZWZhdWx0XCJdKShlLFt7a2V5OlwiaWRNYWtlclwiLHZhbHVlOmlbXCJkZWZhdWx0XCJdLm1hcmsoZnVuY3Rpb24gdCgpe3ZhciBlO3JldHVybiBpW1wiZGVmYXVsdFwiXS53cmFwKGZ1bmN0aW9uKHQpe2Zvcig7Oylzd2l0Y2godC5wcmV2PXQubmV4dCl7Y2FzZSAwOmU9MTtjYXNlIDE6aWYoIShlPDFlNikpe3QubmV4dD02O2JyZWFrfXJldHVybiB0Lm5leHQ9NCxlKys7Y2FzZSA0OnQubmV4dD0xO2JyZWFrO2Nhc2UgNjpjYXNlXCJlbmRcIjpyZXR1cm4gdC5zdG9wKCl9fSx0LHRoaXMpfSl9XSksZX0oKTtyW1wiZGVmYXVsdFwiXT1wfSx7XCIuL01lc3NhZ2UuanNcIjoxMDEsXCIuL01lc3NhZ2VCb2R5LmpzXCI6MTAyLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6MTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjoxMSxcImJhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3JcIjoxNX1dLDEwNDpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyLlJldGhpbmtPYmplY3Q9dm9pZCAwO3ZhciBvPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnlcIiksaT1uKG8pLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSxzPW4oYSksdT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpLGM9bih1KSxsPWUoXCJ0djRcIiksZj1uKGwpLGQ9ci5SZXRoaW5rT2JqZWN0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeygwLHNbXCJkZWZhdWx0XCJdKSh0aGlzLGUpfXJldHVybigwLGNbXCJkZWZhdWx0XCJdKShlLFt7a2V5OlwidmFsaWRhdGVcIix2YWx1ZTpmdW5jdGlvbihlKXtmW1wiZGVmYXVsdFwiXS5hZGRTY2hlbWEoZS5pZCxlKTt2YXIgdD1mW1wiZGVmYXVsdFwiXS52YWxpZGF0ZU11bHRpcGxlKEpTT04ucGFyc2UoKDAsaVtcImRlZmF1bHRcIl0pKHRoaXMpKSxlKTtyZXR1cm4gdC5lcnJvcnMuZm9yRWFjaChmdW5jdGlvbihlKXtkZWxldGUgZS5zdGFja30pLCghdC52YWxpZHx8dC5taXNzaW5nLmxlbmd0aD4wKSYmKGNvbnNvbGUud2FybihcIk9iamVjdCB2YWxpZGF0aW9uIFwiKyh0LnZhbGlkP1wic3VjY2VlZGVkLCBidXQgc2NoZW1hIGNvbnRhaW5lZCByZWZlcmVuY2VzOlwiOlwiZmFpbGVkOlwiKSwoMCxpW1wiZGVmYXVsdFwiXSkodCxudWxsLDIpKSxjb25zb2xlLmxvZyhcIk9iamVjdDpcIiwoMCxpW1wiZGVmYXVsdFwiXSkodGhpcyxudWxsLDIpKSksdC52YWxpZH19XSksZX0oKTtyW1wiZGVmYXVsdFwiXT1kfSx7XCJiYWJlbC1ydW50aW1lL2NvcmUtanMvanNvbi9zdHJpbmdpZnlcIjoxLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6MTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjoxMSx0djQ6OTl9XX0se30sWzEwMF0pKDEwMCl9KTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVzc2FnZUZhY3RvcnkuanMubWFwXHJcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuLy8gaW1wb3J0IE1lc3NhZ2VGYWN0b3J5IGZyb20gJy4uLy4uL3Jlc291cmNlcy9NZXNzYWdlRmFjdG9yeSc7XHJcblxyXG4vKipcclxuICogQ2xhc3Mgd2lsbCBhc2sgdG8gdGhlIG1lc3NhZ2Ugbm9kZSBmb3IgYWRkcmVzc2VzXHJcbiAqL1xyXG5jbGFzcyBBZGRyZXNzQWxsb2NhdGlvbiB7XHJcbiAgLyogcHJpdmF0ZVxyXG4gIF91cmw6IFVSTFxyXG4gIF9idXM6IE1pbmlCdXNcclxuICAqL1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYW4gQWRkcmVzcyBBbGxvY2F0aW9uXHJcbiAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgICB1cmwgLSB1cmwgZnJvbSB3aG8gaXMgc2VuZGluZyB0aGUgbWVzc2FnZVxyXG4gICAqIEBwYXJhbSAge01pbmlCdXN9ICAgICAgYnVzIC0gTWluaUJ1cyB1c2VkIGZvciBhZGRyZXNzIGFsbG9jYXRpb25cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcih1cmwsIGJ1cywgcmVnaXN0cnkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgLy8gbGV0IG1lc3NhZ2VGYWN0b3J5ID0gbmV3IE1lc3NhZ2VGYWN0b3J5KCk7XHJcbiAgICAvL1xyXG4gICAgLy8gX3RoaXMuX21lc3NhZ2VGYWN0b3J5ID0gbWVzc2FnZUZhY3Rvcnk7XHJcbiAgICBfdGhpcy5fdXJsID0gdXJsO1xyXG4gICAgX3RoaXMuX2J1cyA9IGJ1cztcclxuICAgIF90aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0IHRoZSBVUkwgdmFsdWVcclxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB1cmwgdmFsdWU7XHJcbiAgICovXHJcbiAgZ2V0IHVybCgpIHsgcmV0dXJuIHRoaXMuX3VybDsgfVxyXG5cclxuICAvKipcclxuICAgKiBBc2sgZm9yIGNyZWF0aW9uIG9mIGEgbnVtYmVyIG9mIEh5cGVydHkgYWRkcmVzc2VzLCB0byB0aGUgZG9tYWluIG1lc3NhZ2Ugbm9kZS5cclxuICAgKiBAcGFyYW0gIHtEb21haW59IGRvbWFpbiAtIERvbWFpbiBvZiB0aGUgbWVzc2FnZSBub2RlLlxyXG4gICAqIEBwYXJhbSAge251bWJlcn0gbnVtYmVyIC0gTnVtYmVyIG9mIGFkZHJlc3NlcyB0byByZXF1ZXN0XHJcbiAgICogQHJldHVybnMge1Byb21pc2U8SHlwZXJ0eVVSTD59ICBBIGxpc3Qgb2YgSHlwZXJ0eVVSTCdzXHJcbiAgICovXHJcbiAgY3JlYXRlKGRvbWFpbiwgbnVtYmVyLCBpbmZvLCBzY2hlbWUsIHJldXNlVVJMKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBpZiAocmV1c2VVUkwpIHtcclxuXHJcbiAgICAgICAgX3RoaXMuX3JlZ2lzdHJ5LmNoZWNrUmVnaXN0ZXJlZFVSTHMoaW5mbykudGhlbigodXJscykgPT4ge1xyXG5cclxuICAgICAgICAgIGlmICh1cmxzKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gJyArIHNjaGVtZSArICddIC0gUmV1c2UgVVJMJyk7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHtuZXdBZGRyZXNzOiBmYWxzZSwgYWRkcmVzczogdXJsc307XHJcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbQWRkcmVzc0FsbG9jYXRpb24gLSByZXVzZVVSTF0gLSBPYmplY3QgJyArIHJldXNlVVJMICsgJyBub3QgZm91bmQnKTtcclxuICAgICAgICAgICAgcmVqZWN0KCdVUkwgTm90IEZvdW5kJyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcclxuICAgICAgICAgIHJlamVjdChyZWFzb24pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgX3RoaXMuX3JlZ2lzdHJ5LmNoZWNrUmVnaXN0ZXJlZFVSTHMoaW5mbykudGhlbigodXJscykgPT4ge1xyXG5cclxuICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBVUkwsIHRoZW4gcmV0dXJucyB0aGF0IFVSTCwgb3RoZXJ3aXNlIHJlcXVlc3QgYSBuZXcgVVJMXHJcbiAgICAgICAgICBpZiAodXJscykge1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbQWRkcmVzc0FsbG9jYXRpb24gLSAnICsgc2NoZW1lICsgJ10gLSBSZXVzZSBVUkwnKTtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0ge25ld0FkZHJlc3M6IGZhbHNlLCBhZGRyZXNzOiB1cmxzfTtcclxuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcblxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIFVSTCBzYXZlZCByZXF1ZXN0IGEgbmV3IFVSTFxyXG4gICAgICAgICAgICBfdGhpcy5fYWxsb2NhdGVOZXdBZGRyZXNzKGRvbWFpbiwgc2NoZW1lLCBudW1iZXIpLnRoZW4oKGFsbG9jYXRlZCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJlc29sdmUoYWxsb2NhdGVkKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgICAgcmVqZWN0KHJlYXNvbik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBfYWxsb2NhdGVOZXdBZGRyZXNzKGRvbWFpbiwgc2NoZW1lLCBudW1iZXIpIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IG1zZyA9IHtcclxuICAgICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogdGhpcy5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL2FkZHJlc3MtYWxsb2NhdGlvbicsXHJcbiAgICAgICAgYm9keToge3ZhbHVlOiB7IG51bWJlcjogbnVtYmVyIH0gfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKHNjaGVtZSAhPT0gJ2h5cGVydHknKSBtc2cuYm9keS5zY2hlbWUgPSBzY2hlbWU7XHJcblxyXG4gICAgICBjb25zb2xlLmluZm8oJ1tBZGRyZXNzQWxsb2NhdGlvbiAtICcgKyBzY2hlbWUgKyAnXSAtIFJlcXVlc3QgbmV3IFVSTCcpO1xyXG5cclxuICAgICAgLy8gVE9ETzogY2hhbmdlIHRoaXMgcmVzcG9uc2UgTWVzc2FnZSB1c2luZyB0aGUgTWVzc2FnZUZhY3RvcnlcclxuICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICBsZXQgcmVzdWx0ID0ge25ld0FkZHJlc3M6IHRydWUsIGFkZHJlc3M6IHJlcGx5LmJvZHkudmFsdWUuYWxsb2NhdGVkfTtcclxuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFNlbmQgYSByZXF1ZXN0IHRvIHRoZSBkb21haW4gbWVzc2FnZSBub2RlLCB0byBkZWFsbG9jYXRlIG9uZSBvciBtb3JlIGFkZHJlc3Nlc1xyXG4gICogQHBhcmFtICB7RG9tYWlufSBkb21haW4gLSBEb21haW4gb2YgdGhlIG1lc3NhZ2Ugbm9kZS5cclxuICAqIEBwYXJhbSAge2FkZHJlc3Nlc30gYWRkcmVzc2VzIHRvIHJlcXVlc3QgdGhlIGRlYWxsb2NhdGlvblxyXG4gICogQHJldHVybnMge1Byb21pc2V9ICB0aGUgcmVzcG9uc2UgYnkgdGhlIG1lc3NhZ2Ugbm9kZVxyXG4gICovXHJcbiAgZGVsZXRlKGRvbWFpbiwgYWRkcmVzc2VzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBtZXNzYWdlID0ge1xyXG4gICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9hZGRyZXNzLWFsbG9jYXRpb24nLFxyXG4gICAgICBib2R5OiB7Y2hpbGRyZW5SZXNvdXJjZXM6IGFkZHJlc3Nlc31cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3JlcGx5JywgcmVwbHkpO1xyXG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LmNvZGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWRkcmVzc0FsbG9jYXRpb247XHJcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuXHJcbi8qKlxyXG4qIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb21cclxuKiBNaW5pbWFsIGludGVyZmFjZSBhbmQgaW1wbGVtZW50YXRpb24gdG8gc2VuZCBhbmQgcmVjZWl2ZSBtZXNzYWdlcy4gSXQgY2FuIGJlIHJldXNlZCBpbiBtYW55IHR5cGUgb2YgY29tcG9uZW50cy5cclxuKiBDb21wb25lbnRzIHRoYXQgbmVlZCBhIG1lc3NhZ2Ugc3lzdGVtIHNob3VsZCByZWNlaXZlIHRoaXMgY2xhc3MgYXMgYSBkZXBlbmRlbmN5IG9yIGV4dGVuZCBpdC5cclxuKiBFeHRlbnNpb25zIHNob3VsZCBpbXBsZW1lbnQgdGhlIGZvbGxvd2luZyBwcml2YXRlIG1ldGhvZHM6IF9vblBvc3RNZXNzYWdlIGFuZCBfcmVnaXN0ZXJFeHRlcm5hbExpc3RlbmVyXHJcbiovXHJcbmNsYXNzIEJ1cyB7XHJcbiAgLyogcHJpdmF0ZVxyXG4gIF9tc2dJZDogbnVtYmVyO1xyXG4gIF9zdWJzY3JpcHRpb25zOiA8dXJsOiBNc2dMaXN0ZW5lcltdPlxyXG5cclxuICBfcmVzcG9uc2VUaW1lT3V0OiBudW1iZXJcclxuICBfcmVzcG9uc2VDYWxsYmFja3M6IDx1cmwraWQ6IChtc2cpID0+IHZvaWQ+XHJcblxyXG4gICovXHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzLl9tc2dJZCA9IDA7XHJcbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHt9O1xyXG5cclxuICAgIF90aGlzLl9yZXNwb25zZVRpbWVPdXQgPSA1MDAwOyAvL2RlZmF1bHQgdG8gM3NcclxuICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrcyA9IHt9O1xyXG5cclxuICAgIF90aGlzLl9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogUmVnaXN0ZXIgbGlzdGVuZXIgdG8gcmVjZWl2ZSBtZXNzYWdlIHdoZW4gXCJtc2cudG8gPT09IHVybFwiLlxyXG4gICogU3BlY2lhbCB1cmwgXCIqXCIgZm9yIGRlZmF1bHQgbGlzdGVuZXIgaXMgYWNjZXB0ZWQgdG8gaW50ZXJjZXB0IGFsbCBtZXNzYWdlcy5cclxuICAqIEBwYXJhbSB7VVJMfSB1cmwgQWRkcmVzcyB0byBpbnRlcmNlcHQsIHRoYSBpcyBpbiB0aGUgbWVzc2FnZSBcInRvXCJcclxuICAqIEBwYXJhbSB7TGlzdGVuZXJ9IGxpc3RlbmVyIGxpc3RlbmVyXHJcbiAgKiBAcmV0dXJuIHtNc2dMaXN0ZW5lcn0gaW5zdGFuY2Ugb2YgTXNnTGlzdGVuZXJcclxuICAqL1xyXG4gIGFkZExpc3RlbmVyKHVybCwgbGlzdGVuZXIpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IGl0ZW0gPSBuZXcgTXNnTGlzdGVuZXIoX3RoaXMuX3N1YnNjcmlwdGlvbnMsIHVybCwgbGlzdGVuZXIpO1xyXG4gICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTtcclxuICAgIGlmICghaXRlbUxpc3QpIHtcclxuICAgICAgaXRlbUxpc3QgPSBbXTtcclxuICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXSA9IGl0ZW1MaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIGl0ZW1MaXN0LnB1c2goaXRlbSk7XHJcbiAgICByZXR1cm4gaXRlbTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1hbnVhbGx5IGFkZCBhIHJlc3BvbnNlIGxpc3RlbmVyLiBPbmx5IG9uZSBsaXN0ZW5lciBwZXIgbWVzc2FnZSBJRCBzaG91bGQgZXhpc3QuXHJcbiAgICogQVRFTlRJT04sIHRoZXJlIGlzIG5vIHRpbWVvdXQgZm9yIHRoaXMgbGlzdGVuZXIuXHJcbiAgICogVGhlIGxpc3RlbmVyIHNob3VsZCBiZSByZW1vdmVkIHdpdGggYSByZW1vdmVSZXNwb25zZUxpc3RlbmVyLCBmYWlsaW5nIHRvIGRvIHRoaXMgd2lsbCByZXN1bHQgaW4gYSB1bnJlbGVhc2VkIG1lbW9yeSBwcm9ibGVtLlxyXG4gICAqIEBwYXJhbSB7VVJMfSB1cmwgT3JpZ2luIGFkZHJlc3Mgb2YgdGhlIG1lc3NhZ2Ugc2VudCwgXCJtc2cuZnJvbVwiLlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtc2dJZCBNZXNzYWdlIElEIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB0aGUgcG9zdE1lc3NhZ2UuXHJcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzcG9uc2VMaXN0ZW5lciBDYWxsYmFjayBmdW5jdGlvbiBmb3IgdGhlIHJlc3BvbnNlXHJcbiAgICovXHJcbiAgYWRkUmVzcG9uc2VMaXN0ZW5lcih1cmwsIG1zZ0lkLCByZXNwb25zZUxpc3RlbmVyKSB7XHJcbiAgICB0aGlzLl9yZXNwb25zZUNhbGxiYWNrc1t1cmwgKyBtc2dJZF0gPSByZXNwb25zZUxpc3RlbmVyO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlIHRoZSByZXNwb25zZSBsaXN0ZW5lci5cclxuICAgKiBAcGFyYW0ge1VSTH0gdXJsIE9yaWdpbiBhZGRyZXNzIG9mIHRoZSBtZXNzYWdlIHNlbnQsIFwibXNnLmZyb21cIi5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gbXNnSWQgIE1lc3NhZ2UgSUQgdGhhdCBpcyByZXR1cm5lZCBmcm9tIHRoZSBwb3N0TWVzc2FnZVxyXG4gICAqL1xyXG4gIHJlbW92ZVJlc3BvbnNlTGlzdGVuZXIodXJsLCBtc2dJZCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3VybCArIG1zZ0lkXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSBhbGwgZXhpc3RlbnQgbGlzdGVuZXJzIGZvciB0aGUgVVJMXHJcbiAgICogQHBhcmFtICB7VVJMfSB1cmwgQWRkcmVzcyByZWdpc3RlcmVkXHJcbiAgICovXHJcbiAgcmVtb3ZlQWxsTGlzdGVuZXJzT2YodXJsKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fc3Vic2NyaXB0aW9uc1t1cmxdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSGVscGVyIG1ldGhvZCB0byBiaW5kIGxpc3RlbmVycyAoaW4gYm90aCBkaXJlY3Rpb25zKSBpbnRvIG90aGVyIE1pbmlCdXMgdGFyZ2V0LlxyXG4gICAqIEBwYXJhbSAge1VSTH0gb3V0VXJsIE91dGJvdW5kIFVSTCwgcmVnaXN0ZXIgbGlzdGVuZXIgZm9yIHVybCBpbiBkaXJlY3Rpb24gXCJ0aGlzIC0+IHRhcmdldFwiXHJcbiAgICogQHBhcmFtICB7VVJMfSBpblVybCBJbmJvdW5kIFVSTCwgcmVnaXN0ZXIgbGlzdGVuZXIgZm9yIHVybCBpbiBkaXJlY3Rpb24gXCJ0YXJnZXQgLT4gdGhpc1wiXHJcbiAgICogQHBhcmFtICB7TWluaUJ1c30gdGFyZ2V0IFRoZSBvdGhlciB0YXJnZXQgTWluaUJ1c1xyXG4gICAqIEByZXR1cm4ge0JvdW5kfSBhbiBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgcHJvcGVydGllcyBbdGhpc0xpc3RlbmVyLCB0YXJnZXRMaXN0ZW5lcl0gYW5kIHRoZSB1bmJpbmQgbWV0aG9kLlxyXG4gICAqL1xyXG4gIGJpbmQob3V0VXJsLCBpblVybCwgdGFyZ2V0KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCB0aGlzTGlzdG4gPSBfdGhpcy5hZGRMaXN0ZW5lcihvdXRVcmwsIChtc2cpID0+IHtcclxuICAgICAgdGFyZ2V0LnBvc3RNZXNzYWdlKG1zZyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgdGFyZ2V0TGlzdG4gPSB0YXJnZXQuYWRkTGlzdGVuZXIoaW5VcmwsIChtc2cpID0+IHtcclxuICAgICAgX3RoaXMucG9zdE1lc3NhZ2UobXNnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRoaXNMaXN0ZW5lcjogdGhpc0xpc3RuLFxyXG4gICAgICB0YXJnZXRMaXN0ZW5lcjogdGFyZ2V0TGlzdG4sXHJcbiAgICAgIHVuYmluZDogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudGhpc0xpc3RlbmVyLnJlbW92ZSgpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0TGlzdGVuZXIucmVtb3ZlKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvL3B1Ymxpc2ggb24gZGVmYXVsdCBsaXN0ZW5lcnNcclxuICBfcHVibGlzaE9uRGVmYXVsdChtc2cpIHtcclxuICAgIC8vaXMgdGhlcmUgYW55IFwiKlwiIChkZWZhdWx0KSBsaXN0ZW5lcnM/XHJcbiAgICBsZXQgaXRlbUxpc3QgPSB0aGlzLl9zdWJzY3JpcHRpb25zWycqJ107XHJcbiAgICBpZiAoaXRlbUxpc3QpIHtcclxuICAgICAgdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy9wdWJsaXNoIG9uIGEgc3Vic2NyaXB0aW9uIGxpc3QuXHJcbiAgX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKSB7XHJcbiAgICBpdGVtTGlzdC5mb3JFYWNoKChzdWIpID0+IHtcclxuICAgICAgc3ViLl9jYWxsYmFjayhtc2cpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfcmVzcG9uc2VDYWxsYmFjayhpbk1zZywgcmVzcG9uc2VDYWxsYmFjaykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICAvL2F1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzXHJcbiAgICBpZiAocmVzcG9uc2VDYWxsYmFjaykge1xyXG4gICAgICBsZXQgcmVzcG9uc2VJZCA9IGluTXNnLmZyb20gKyBpbk1zZy5pZDtcclxuICAgICAgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdID0gcmVzcG9uc2VDYWxsYmFjaztcclxuXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGxldCByZXNwb25zZUZ1biA9IF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXTtcclxuICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdO1xyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2VGdW4pIHtcclxuICAgICAgICAgIGxldCBlcnJvck1zZyA9IHtcclxuICAgICAgICAgICAgaWQ6IGluTXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLFxyXG4gICAgICAgICAgICBib2R5OiB7IGNvZGU6IDQwOCwgZGVzYzogJ1Jlc3BvbnNlIHRpbWVvdXQhJywgdmFsdWU6IGluTXNnIH1cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgcmVzcG9uc2VGdW4oZXJyb3JNc2cpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgX3RoaXMuX3Jlc3BvbnNlVGltZU91dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfb25SZXNwb25zZShtc2cpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKG1zZy50eXBlID09PSAncmVzcG9uc2UnKSB7XHJcbiAgICAgIGxldCByZXNwb25zZUlkID0gbXNnLnRvICsgbXNnLmlkO1xyXG4gICAgICBsZXQgcmVzcG9uc2VGdW4gPSBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbcmVzcG9uc2VJZF07XHJcblxyXG4gICAgICAvL2lmIGl0J3MgYSBwcm92aXNpb25hbCByZXNwb25zZSwgZG9uJ3QgZGVsZXRlIHJlc3BvbnNlIGxpc3RlbmVyXHJcbiAgICAgIGlmIChtc2cuYm9keS5jb2RlID49IDIwMCkge1xyXG4gICAgICAgIGRlbGV0ZSBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbcmVzcG9uc2VJZF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyZXNwb25zZUZ1bikge1xyXG4gICAgICAgIHJlc3BvbnNlRnVuKG1zZyk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvL3JlY2VpdmUgbWVzc2FnZXMgZnJvbSBleHRlcm5hbCBpbnRlcmZhY2VcclxuICBfb25NZXNzYWdlKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHtcclxuICAgICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbbXNnLnRvXTtcclxuICAgICAgaWYgKGl0ZW1MaXN0KSB7XHJcbiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBfdGhpcy5fcHVibGlzaE9uRGVmYXVsdChtc2cpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfZ2VuSWQoaW5Nc2cpIHtcclxuICAgIC8vVE9ETzogaG93IGRvIHdlIG1hbmFnZSBtZXNzYWdlIElEJ3M/IFNob3VsZCBpdCBiZSBhIGdsb2JhbCBydW50aW1lIGNvdW50ZXIsIG9yIHBlciBVUkwgYWRkcmVzcz9cclxuICAgIC8vR2xvYmFsIGNvdW50ZXIgd2lsbCBub3Qgd29yaywgYmVjYXVzZSB0aGVyZSB3aWxsIGJlIG11bHRpcGxlIE1pbmlCdXMgaW5zdGFuY2VzIVxyXG4gICAgLy9QZXIgVVJMLCBjYW4gYmUgYSBsb3Qgb2YgZGF0YSB0byBtYWludGFpbiFcclxuICAgIC8vTWF5YmUgYSBjb3VudGVyIHBlciBNaW5pQnVzIGluc3RhbmNlLiBUaGlzIGlzIHRoZSBhc3N1bWVkIHNvbHV0aW9uIGZvciBub3cuXHJcbiAgICBpZiAoIWluTXNnLmlkIHx8IGluTXNnLmlkID09PSAwKSB7XHJcbiAgICAgIHRoaXMuX21zZ0lkKys7XHJcbiAgICAgIGluTXNnLmlkID0gdGhpcy5fbXNnSWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFNlbmQgbWVzc2FnZXMgdG8gbG9jYWwgbGlzdGVuZXJzLCBvciBpZiBub3QgZXhpc3RzIHRvIGV4dGVybmFsIGxpc3RlbmVycy5cclxuICAqIEl0J3MgaGFzIGFuIG9wdGlvbmFsIG1lY2hhbmlzbSBmb3IgYXV0b21hdGljIG1hbmFnZW1lbnQgb2YgcmVzcG9uc2UgaGFuZGxlcnMuXHJcbiAgKiBUaGUgcmVzcG9uc2UgaGFuZGxlciB3aWxsIGJlIHVucmVnaXN0ZXJlZCBhZnRlciByZWNlaXZpbmcgdGhlIHJlc3BvbnNlLCBvciBhZnRlciByZXNwb25zZSB0aW1lb3V0IChkZWZhdWx0IHRvIDNzKS5cclxuICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBNZXNzYWdlIHRvIHNlbmQuIE1lc3NhZ2UgSUQgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgbWVzc2FnZS5cclxuICAqIEBwYXJhbSAge0Z1bmN0aW9ufSByZXNwb25zZUNhbGxiYWNrIE9wdGlvbmFsIHBhcmFtZXRlciwgaWYgdGhlIGRldmVsb3BlciB3aGF0J3MgYXV0b21hdGljIHJlc3BvbnNlIG1hbmFnZW1lbnQuXHJcbiAgKiBAcmV0dXJuIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lc3NhZ2UgSUQsIGluIGNhc2UgaXQgc2hvdWxkIGJlIG5lZWRlZCBmb3IgbWFudWFsIG1hbmFnZW1lbnQgb2YgdGhlIHJlc3BvbnNlIGhhbmRsZXIuXHJcbiAgKi9cclxuICBwb3N0TWVzc2FnZShpbk1zZywgcmVzcG9uc2VDYWxsYmFjaykgeyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE5vdCBwdWJsaWMgYXZhaWxhYmxlLCB1c2VkIGJ5IHRoZSBjbGFzcyBleHRlbnNpb24gaW1wbGVtZW50YXRpb24sIHRvIHByb2Nlc3MgbWVzc2FnZXMgZnJvbSB0aGUgcHVibGljIFwicG9zdE1lc3NhZ2VcIiB3aXRob3V0IGEgcmVnaXN0ZXJlZCBsaXN0ZW5lci5cclxuICAgKiBVc2VkIHRvIHNlbmQgdGhlIG1lc3NhZ2UgdG8gYW4gZXh0ZXJuYWwgaW50ZXJmYWNlLCBsaWtlIGEgV2ViV29ya2VyLCBJRnJhbWUsIGV0Yy5cclxuICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9IG1zZyBNZXNzYWdlXHJcbiAgICovXHJcbiAgX29uUG9zdE1lc3NhZ2UobXNnKSB7IC8qaW1wbGVtZW50YXRpb24gd2lsbCBzZW5kIG1lc3NhZ2UgdG8gZXh0ZXJuYWwgc3lzdGVtKi8gfVxyXG5cclxuICAvKipcclxuICAgKiBOb3QgcHVibGljIGF2YWlsYWJsZSwgdXNlZCBieSB0aGUgY2xhc3MgZXh0ZW5zaW9uIGltcGxlbWVudGF0aW9uLCB0byBwcm9jZXNzIGFsbCBtZXNzYWdlcyB0aGF0IGVudGVyIHRoZSBNaW5pQnVzIGZyb20gYW4gZXh0ZXJuYWwgaW50ZXJmYWNlLCBsaWtlIGEgV2ViV29ya2VyLCBJRnJhbWUsIGV0Yy5cclxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgb25lIHRpbWUgaW4gdGhlIGNvbnN0cnVjdG9yIHRvIHJlZ2lzdGVyIGV4dGVybmFsIGxpc3RlbmVycy5cclxuICAgKiBUaGUgaW1wbGVtZW50YXRpb24gd2lsbCBwcm9iYWJseSBjYWxsIHRoZSBcIl9vbk1lc3NhZ2VcIiBtZXRob2QgdG8gcHVibGlzaCBpbiB0aGUgbG9jYWwgbGlzdGVuZXJzLlxyXG4gICAqIERPIE5PVCBjYWxsIFwicG9zdE1lc3NhZ2VcIiwgdGhlcmUgaXMgYSBkYW5nZXIgdGhhdCB0aGUgbWVzc2FnZSBlbnRlcnMgaW4gYSBjeWNsZSFcclxuICAgKi9cclxuICBfcmVnaXN0ZXJFeHRlcm5hbExpc3RlbmVyKCkgeyAvKmltcGxlbWVudGF0aW9uIHdpbGwgcmVnaXN0ZXIgZXh0ZXJuYWwgbGlzdGVuZXIgYW5kIGNhbGwgXCJ0aGlzLl9vbk1lc3NhZ2UobXNnKVwiICovIH1cclxuXHJcbn1cclxuXHJcbmNsYXNzIE1zZ0xpc3RlbmVyIHtcclxuICAvKiBwcml2YXRlXHJcbiAgX3N1YnNjcmlwdGlvbnM6IDxzdHJpbmc6IE1zZ0xpc3RlbmVyW10+O1xyXG4gIF91cmw6IHN0cmluZztcclxuICBfY2FsbGJhY2s6IChtc2cpID0+IHZvaWQ7XHJcbiAgKi9cclxuXHJcbiAgY29uc3RydWN0b3Ioc3Vic2NyaXB0aW9ucywgdXJsLCBjYWxsYmFjaykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnM7XHJcbiAgICBfdGhpcy5fdXJsID0gdXJsO1xyXG4gICAgX3RoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgfVxyXG5cclxuICBnZXQgdXJsKCkgeyByZXR1cm4gdGhpcy5fdXJsOyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSB0aGlzIGxpc3RlbmVyIGZyb20gdGhlIEJ1c1xyXG4gICAqL1xyXG4gIHJlbW92ZSgpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IHN1YnMgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXTtcclxuICAgIGlmIChzdWJzKSB7XHJcbiAgICAgIGxldCBpbmRleCA9IHN1YnMuaW5kZXhPZihfdGhpcyk7XHJcbiAgICAgIHN1YnMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHJcbiAgICAgIC8vaWYgdGhlcmUgYXJlIG5vIGxpc3RlbmVycywgcmVtb3ZlIHRoZSBzdWJzY3JpcHRpb24gZW50aXJlbHkuXHJcbiAgICAgIGlmIChzdWJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnVzO1xyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcbmltcG9ydCBCdXMgZnJvbSAnLi9CdXMnO1xyXG5pbXBvcnQgUGlwZWxpbmUgZnJvbSAnLi9QaXBlbGluZSc7XHJcblxyXG4vKipcclxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXHJcbiogTWVzc2FnZSBCVVMgSW50ZXJmYWNlIGlzIGFuIGV4dGVuc2lvbiBvZiB0aGUgQnVzXHJcbiogSXQgZG9lc24ndCBzdXBwb3J0IHRoZSBkZWZhdWx0ICcqJyBsaXN0ZW5lciwgaW5zdGVhZCBpdCB1c2VzIHRoZSByZWdpc3RyeS5yZXNvbHZlKC4uKVxyXG4qL1xyXG5jbGFzcyBNZXNzYWdlQnVzIGV4dGVuZHMgQnVzIHtcclxuICAvKiBwcml2YXRlXHJcbiAgX3JlZ2lzdHJ5OiBSZWdpc3RyeVxyXG4gIF9mb3J3YXJkczogeyA8ZnJvbS11cmw+OiB7IGZsOiBNc2dMaXN0ZW5lciwgc2FuZGJveFRvVXJsczogTWFwKFNhbmRib3gsIFt0by11cmxdKSwgdXJsVG9TYW5kYm94OiB7IHRvLXVybDogU2FuZGJveCB9IH0gfVxyXG5cclxuICBfcGlwZWxpbmU6IFBpcGVsaW5lXHJcbiAgKi9cclxuXHJcbiAgLy9UT0RPOiBmdXR1cmUgb3B0aW1pemF0aW9uXHJcbiAgLy8xLiBtZXNzYWdlIGJhdGNoIHByb2Nlc3Npbmcgd2l0aCBzZXRJbnRlcnZhbFxyXG4gIC8vMi4gcmVzb2x2ZSBkZWZhdWx0IGdhdGV3YXkvcHJvdG9zdHViIHdpdGggcmVnaXN0ZXIucmVzb2x2ZVxyXG5cclxuICBjb25zdHJ1Y3RvcihyZWdpc3RyeSkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XHJcbiAgICB0aGlzLl9mb3J3YXJkcyA9IHt9O1xyXG5cclxuICAgIHRoaXMuX3BpcGVsaW5lID0gbmV3IFBpcGVsaW5lKChlcnJvcikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygnUElQRUxJTkUtRVJST1I6ICcsIEpTT04uc3RyaW5naWZ5KGVycm9yKSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldCBwaXBlbGluZSgpIHsgcmV0dXJuIHRoaXMuX3BpcGVsaW5lOyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFBvc3QgYSBtZXNzYWdlIGZvciByb3V0aW5nLiBJdCB3aWxsIGZpcnN0IHNlYXJjaCBmb3IgYSBsaXN0ZW5lciwgaWYgdGhlcmUgaXMgbm8gb25lLCBpdCBzZW5kcyB0byBhIGV4dGVybmFsIHJvdXRpbmcgdXNpbmcgdGhlIF9vblBvc3RNZXNzYWdlLlxyXG4gICAqIEV4dGVybmFsIHJvdXRpbmcgdXNlIHRoZSByZWdpc3RyeS5yZXNvbHZlKC4uKSBtZXRob2QgdG8gZGVjaWRlIHRoZSBkZXN0aW5hdGlvbiBzYW5kYm94LlxyXG4gICAqIEBwYXJhbSAge01lc3NhZ2V9IGluTXNnICAgICAgICAgICAgSlNPTiB3aXRoIG1hbmRhdG9yeSBNZXNzYWdlIHN0cnVjdHVyZSB7aWQsIHR5cGUsIGZyb20sIHRvfVxyXG4gICAqIEBwYXJhbSAge0NhbGxiYWNrfSByZXNwb25zZUNhbGxiYWNrIE9wdGlvbmFsIGNhbGxiYWNrIGlmIGEgcmVzcG9uc2UgaXMgZXhwZWN0ZWQgZnJvbSB0aGUgcmVxdWVzdC4gQSByZXNwb25zZSB3aWxsIGJlIGFsd2F5cyBzZW50LCBldmVuIGlmIGl0IGlzIGEgXCJUaW1lb3V0XCIuXHJcbiAgICogQHJldHVybiB7bnVtYmVyfSAgICAgICAgICAgICAgICAgIHRoZSBNZXNzYWdlIGlkXHJcbiAgICovXHJcbiAgcG9zdE1lc3NhZ2UoaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spIHtcclxuICAgIGNvbnNvbGUubG9nKCdvblBPU1RNZXNzYWdlOiAnLCBpbk1zZyk7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl9nZW5JZChpbk1zZyk7XHJcblxyXG4gICAgX3RoaXMuX3BpcGVsaW5lLnByb2Nlc3MoaW5Nc2csIChtc2cpID0+IHtcclxuXHJcbiAgICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKTtcclxuXHJcbiAgICAgIGlmICghX3RoaXMuX29uUmVzcG9uc2UobXNnKSkge1xyXG4gICAgICAgIGxldCBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW21zZy50b107XHJcbiAgICAgICAgaWYgKGl0ZW1MaXN0KSB7XHJcbiAgICAgICAgICAvL2RvIG5vdCBwdWJsaXNoIG9uIGRlZmF1bHQgYWRkcmVzcywgYmVjYXVzZSBvZiBsb29wYmFjayBjeWNsZVxyXG4gICAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy9pZiB0aGVyZSBpcyBubyBsaXN0ZW5lciwgc2VuZCB0byBleHRlcm5hbCBpbnRlcmZhY2VcclxuICAgICAgICAgIF90aGlzLl9vblBvc3RNZXNzYWdlKG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gaW5Nc2cuaWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGFuIGV4dGVybmFsIHB1Ymxpc2ggYWRkcmVzcyBsaXN0ZW5lci4gRXZlcnkgbWVzc2FnZSBmb3IgdGhlIGFkZHJlc3Mgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIGV4dGVybmFsIHJvdXRpbmcgYnkgX29uUG9zdE1lc3NhZ2UuXHJcbiAgICogVGhpcyBtZWFucywgZXZlbiBpZiB0aGVyZSBpcyBhIGxpc3RlbmVyIGZvciB0aGUgYWRkcmVzcywgaXQgd2lsbCBhbHNvIHNlbmQgdGhlIG1lc3NhZ2UgdG8gdGhlIGV4dGVybmFsIHJvdXRpbmcuXHJcbiAgICogQHBhcmFtIHtVUkx9IGZyb20gUHVibGlzaCBhZGRyZXNzLlxyXG4gICAqL1xyXG4gIGFkZFB1Ymxpc2goZnJvbSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICAvL3ZlcmlmeSBpZiBmb3J3YXJkIGV4aXN0XHJcbiAgICBsZXQgcmVmQ291bnQgPSBfdGhpcy5fZm9yd2FyZHNbZnJvbV07XHJcbiAgICBpZiAoIXJlZkNvdW50KSB7XHJcbiAgICAgIGxldCBmb3J3YXJkTGlzdGVuZXIgPSBfdGhpcy5hZGRMaXN0ZW5lcihmcm9tLCAobXNnKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ01CLVBVQkxJU0g6ICggJyArIGZyb20gKyAnICknKTtcclxuICAgICAgICBfdGhpcy5fb25Qb3N0TWVzc2FnZShtc2cpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJlZkNvdW50ID0ge1xyXG4gICAgICAgIGNvdW50ZXI6IDAsXHJcbiAgICAgICAgZmw6IGZvcndhcmRMaXN0ZW5lcixcclxuICAgICAgICByZW1vdmU6ICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuY291bnRlci0tO1xyXG4gICAgICAgICAgaWYgKHRoaXMuY291bnRlciA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmZsLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBkZWxldGUgX3RoaXMuX2ZvcndhcmRzW2Zyb21dO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgX3RoaXMuX2ZvcndhcmRzW2Zyb21dID0gcmVmQ291bnQ7XHJcbiAgIH1cclxuXHJcbiAgIHJlZkNvdW50LmNvdW50ZXIrKztcclxuICAgcmV0dXJuIHJlZkNvdW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBhIGZvcndhcmQgbGlzdGVuZXIgZm9yIGEgbWVzc2FnZSBkZXN0aW5hdGlvbi4gRXZlcnkgbWVzc2FnZSByZWFjaGluZyBhbiBhZGRyZXNzIHdpbGwgYmUgYWxzbyBzZW50IHRvIHRoZSBmb3J3YXJkIGFkZHJlc3MuXHJcbiAgICogQHBhcmFtIHtVUkx9IGZyb20gTWVzc2FnZSBkZXN0aW5hdGlvbiwgaXQncyBhY3R1YWxseSB0aGUgZmllbGQgXCJ0b1wiIG9mIHRoZSBtZXNzYWdlLlxyXG4gICAqIEBwYXJhbSB7VVJMfSB0byAgIEZvcndhcmQgYWRkcmVzcy5cclxuICAgKi9cclxuICAgYWRkRm9yd2FyZChmcm9tLCB0bykge1xyXG4gICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgIHJldHVybiBfdGhpcy5hZGRMaXN0ZW5lcihmcm9tLCAobXNnKSA9PiB7XHJcbiAgICAgICBjb25zb2xlLmxvZygnTUItRk9SV0FSRDogKCAnICsgZnJvbSArICcgdG8gJyArIHRvICsgJyApJyk7XHJcbiAgICAgICBfdGhpcy5mb3J3YXJkKHRvLCBtc2cpO1xyXG4gICAgIH0pO1xyXG4gICB9XHJcblxyXG4gICAvKipcclxuICAgICogSnVzdCBmb3J3YXJkJ3MgYSBtZXNzYWdlIHRvIHRoZSBmb3J3YXJkIGFkZHJlc3MuIExpc3RlbmVycyBzaG91bGQgYmUgYXZhaWxhYmxlIGZvciB0aGUgZm9yd2FyZCBhZGRyZXNzLlxyXG4gICAgKiBAcGFyYW0gIHtVUkx9IHVybCBGb3J3YXJkIGFkZHJlc3MuXHJcbiAgICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBNZXNzYWdlIHRvIGZvcndhcmRcclxuICAgICovXHJcbiAgIGZvcndhcmQodXJsLCBtc2cpIHtcclxuICAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICBsZXQgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1t1cmxdO1xyXG4gICAgIGlmIChpdGVtTGlzdCkge1xyXG4gICAgICAgX3RoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcclxuICAgICB9XHJcbiAgIH1cclxuXHJcbiAgIC8vZGVmYXVsdCByb3V0ZSwgaWYgdGhlcmUgYXJlIG5vIGxpc3RlbmVycyBhdmFpbGFibGUgZm9yIGEgbWVzc2FnZSBkZXN0aW5hdGlvbi5cclxuICAgX29uUG9zdE1lc3NhZ2UobXNnKSB7XHJcbiAgICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgLy9yZXNvbHZlIGV4dGVybmFsIHByb3Rvc3R1Yi4uLlxyXG4gICAgIF90aGlzLl9yZWdpc3RyeS5yZXNvbHZlKG1zZy50bykudGhlbigocm91dGUpID0+IHtcclxuICAgICAgIF90aGlzLmZvcndhcmQocm91dGUsIG1zZyk7XHJcbiAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZSkge1xyXG4gICAgICAgY29uc29sZS5sb2coJ1JFU09MVkUtRVJST1I6ICcsIGUpO1xyXG4gICAgIH0pO1xyXG4gICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lc3NhZ2VCdXM7XHJcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuXHJcbi8qKlxyXG4qIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb21cclxuKiBTZXF1ZW5jaWFsIHByb2Nlc3NvciBvZiBtZXRob2RzLiBTaW1pbGFyIHRvIGhvdyBTZXF1ZW50aWFsIFByb21pc2UncyB3b3JrLCBidXQgYmV0dGVyIGZpdCBmb3IgbWVzc2FnZSBwcm9jZXNzaW5nLlxyXG4qIE5vcm1hbCB1c2UgZm9yIHRoaXMsIGlzIHRvIGludGVyY2VwdCBhbGwgbWVzc2FnZXMgd2l0aCBjb25maWd1cmVkIGhhbmRsZXJzLCBhbmQgYWN0IGFjY29yZGluZ2x5LlxyXG4qL1xyXG5jbGFzcyBQaXBlbGluZSB7XHJcbiAgLyogcHVibGljXHJcbiAgICBoYW5kbGVyczogKChQaXBlQ29udGV4dCkgPT4gdm9pZClbXVxyXG4gICAgb25GYWlsOiAoZXJyb3IpID0+IHZvaWRcclxuICAqL1xyXG5cclxuICBjb25zdHJ1Y3Rvcihfb25GYWlsKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLmhhbmRsZXJzID0gW107XHJcbiAgICBfdGhpcy5vbkZhaWwgPSBfb25GYWlsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW5zZXJ0IGEgbWVzc2FnZSBpbiB0aGUgcGlwZWxpbmUgcXVldWUuIEFsbCBtZXNzYWdlcyBhcmUgd3JhcHBlZCB3aXRoIGEgUGlwZUNvbnRleHQuXHJcbiAgICogQHBhcmFtICB7TWVzc2FnZX0gbXNnICAgICAgIE1lc3NhZ2UgZm9yIHRoZSBxdWV1ZVxyXG4gICAqIEBwYXJhbSAge0NhbGxiYWNrfSBvbkRlbGl2ZXIgV2hlbiBtZXNzYWdlIGlzIGZpbmlzaGVkIHByb2Nlc3NpbmcgZnJvbSBhbGwgaGFuZGxlcnMsIGl0IHdpbGwgYmUgZGVsaXZlcmVkIGluIHRoaXMgY2FsbGJhY2suXHJcbiAgICovXHJcbiAgcHJvY2Vzcyhtc2csIG9uRGVsaXZlcikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoX3RoaXMuaGFuZGxlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICBsZXQgaXRlciA9IG5ldyBJdGVyYXRvcihfdGhpcy5oYW5kbGVycyk7XHJcbiAgICAgIGl0ZXIubmV4dChuZXcgUGlwZUNvbnRleHQoX3RoaXMsIGl0ZXIsIG1zZywgb25EZWxpdmVyKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvbkRlbGl2ZXIobXNnKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4qIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb21cclxuKiBXcmFwcGVyIGFyb3VuZCBhIG1lc3NhZ2UgdGhhdCBhZGRzIGFjdGlvbnMgdGhhdCBjYW4gYmUgZmlyZWQgYnkgYW55IGludGVyY2VwdG9yIGhhbmRsZXIuXHJcbiogVGhlIFBpcGVsaW5lIGlzIGFzeW5jaHJvbm91cywgc28gYW4gaGFuZGxlciBzaG91bGQgYWx3YXlzIGNhbGwgYW4gYWN0aW9uLCB0aGUgZGVmYXVsdCBvbmUgaXMgXCJuZXh0KClcIlxyXG4qL1xyXG5jbGFzcyBQaXBlQ29udGV4dCB7XHJcbiAgLyogcHJpdmF0ZVxyXG4gICAgX2luU3RvcDogYm9vbGVhblxyXG5cclxuICAgIF9waXBlbGluZTogUGlwZWxpbmVcclxuICAgIF9pdGVyOiBJdGVyYXRvclxyXG4gICAgX21zZzogTWVzc2FnZVxyXG4gICovXHJcblxyXG4gIGNvbnN0cnVjdG9yKHBpcGVsaW5lLCBpdGVyLCBtc2csIG9uRGVsaXZlcikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5faW5TdG9wID0gZmFsc2U7XHJcblxyXG4gICAgX3RoaXMuX3BpcGVsaW5lID0gcGlwZWxpbmU7XHJcbiAgICBfdGhpcy5faXRlciA9IGl0ZXI7XHJcbiAgICBfdGhpcy5fbXNnID0gbXNnO1xyXG4gICAgX3RoaXMuX29uRGVsaXZlciA9IG9uRGVsaXZlcjtcclxuICB9XHJcblxyXG4gIGdldCBwaXBlbGluZSgpIHsgcmV0dXJuIHRoaXMuX3BpcGVsaW5lOyB9XHJcblxyXG4gIGdldCBtc2coKSB7IHJldHVybiB0aGlzLl9tc2c7IH1cclxuICBzZXQgbXNnKGluTXNnKSB7IHRoaXMuX21zZyA9IGluTXNnOyB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb2NlZWQgdG8gdGhlIG5leHQgaW50ZXJjZXB0b3IgaGFuZGxlciwgdW5sZXNzIHRoZXJlIHdhcyBhbiBlcnJvci4gSWYgaXQncyB0aGUgbGFzdCBvbmUsIHByb2NlZWQgdG8gb25EZWxpdmVyIGhhbmRsZXIuXHJcbiAgICovXHJcbiAgbmV4dCgpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKCFfdGhpcy5faW5TdG9wKSB7XHJcbiAgICAgIGlmIChfdGhpcy5faXRlci5oYXNOZXh0KSB7XHJcbiAgICAgICAgX3RoaXMuX2l0ZXIubmV4dChfdGhpcyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgX3RoaXMuX29uRGVsaXZlcihfdGhpcy5fbXNnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUHJvY2VlZCBkaXJlY3RseSB0byB0aGUgb25EZWxpdmVyIGhhbmRsZXIsIHVubGVzcyB0aGVyZSB3YXMgYW4gZXJyb3IuXHJcbiAgICovXHJcbiAgZGVsaXZlcigpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZiAoIV90aGlzLl9pblN0b3ApIHtcclxuICAgICAgX3RoaXMuX2luU3RvcCA9IHRydWU7XHJcbiAgICAgIF90aGlzLl9vbkRlbGl2ZXIoX3RoaXMuX21zZyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYXJrIHRoZSBjb250ZXh0IHdpdGggYW4gZXJyb3IgYW5kIHByb2NlZWQgdG8gdGhlIG9uRmFpbCBoYW5kbGVyLlxyXG4gICAqIEBwYXJhbSAge1t0eXBlXX0gZXJyb3IgW2Rlc2NyaXB0aW9uXVxyXG4gICAqL1xyXG4gIGZhaWwoZXJyb3IpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKCFfdGhpcy5faW5TdG9wKSB7XHJcbiAgICAgIF90aGlzLl9pblN0b3AgPSB0cnVlO1xyXG4gICAgICBpZiAoX3RoaXMuX3BpcGVsaW5lLm9uRmFpbCkge1xyXG4gICAgICAgIF90aGlzLl9waXBlbGluZS5vbkZhaWwoZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBJdGVyYXRvciB7XHJcbiAgLyogcHJpdmF0ZVxyXG4gICAgX2luZGV4OiBudW1iZXJcclxuICAgIF9hcnJheTogW11cclxuICAqL1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcnJheSkge1xyXG4gICAgdGhpcy5faW5kZXggPSAtMTtcclxuICAgIHRoaXMuX2FycmF5ID0gYXJyYXk7XHJcbiAgfVxyXG5cclxuICBnZXQgaGFzTmV4dCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pbmRleCA8IHRoaXMuX2FycmF5Lmxlbmd0aCAtIDE7XHJcbiAgfVxyXG5cclxuICBnZXQgbmV4dCgpIHtcclxuICAgIHRoaXMuX2luZGV4Kys7XHJcbiAgICByZXR1cm4gdGhpcy5fYXJyYXlbdGhpcy5faW5kZXhdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGlwZWxpbmU7XHJcbiIsIi8qKlxyXG4qIENsYXNzIHdpdGggdGhlIGNyeXB0b2dyYXBoaWMgZnVuY3Rpb25zIGZvciB0aGUgYXV0aGVudGljYXRpb24gcHJvdG9jb2xcclxuKlxyXG4qL1xyXG5jbGFzcyBDcnlwdG8ge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBlbmNvZGUgYSBieXRlQXJyYXkgdmFsdWUgaW4gYmFzZSA2NCBlbmNvZGVcclxuICAqIEBwYXJhbSAgIHtieXRlQXJyYXl9ICAgIHZhbHVlICAgIGJ5dGVBcnJheSB2YWx1ZVxyXG4gICogQHJldHVybiAge3N0cmluZ30gICBlbmNvZGVkIHZhbHVlXHJcbiAgKi9cclxuICBlbmNvZGUodmFsdWUpIHtcclxuICAgIHJldHVybiBidG9hKHZhbHVlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZGVjb2RlIGEgYmFzZTY0IHZhbHVlIGluIGEgbmV3IFVpbnQ4QXJyYXlcclxuICAqIEBwYXJhbSAgIHtzdHJpbmd9ICAgIHZhbHVlICAgIHZhbHVlIGVuY29kZWQgaW4gYmFzZSA2NFxyXG4gICogQHJldHVybiAge2J5dGVBcnJheX0gZGVjb2RlZFZhbHVlXHJcbiAgKi9cclxuICBkZWNvZGUodmFsdWUpIHtcclxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShKU09OLnBhcnNlKCdbJyArIGF0b2IodmFsdWUpICsgJ10nKSk7XHJcbiAgfVxyXG5cclxuICBlbmNyeXB0UlNBKHB1YktleSwgZGF0YSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIF90aGlzLl9pbXBvcnRSU0FlbmNyeXB0S2V5KG5ldyBVaW50OEFycmF5KHB1YktleSkpLnRoZW4oZnVuY3Rpb24ocHVibGljS2V5KSB7XHJcblxyXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuZW5jcnlwdChcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHVibGljS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXHJcbiAgICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHRcclxuICAgICAgICApXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZW5jcnlwdGVkKSB7XHJcbiAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgZW5jcnlwdGVkIGRhdGFcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1lbmNyeXB0UlNBJywgbmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkKSk7XHJcbiAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpO1xyXG5cclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIGVycik7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIGRlY3J5cHRSU0EocHJpdktleSwgZGF0YSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIF90aGlzLl9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xyXG5cclxuICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByaXZhdGVLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcclxuICAgICAgICAgICAgZGF0YSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRlY3J5cHRlZCkge1xyXG5cclxuICAgICAgICAgIGxldCBkZWNyeXB0ZWREYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkKTtcclxuXHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZGVjcnlwdFJTQScsIGRlY3J5cHRlZERhdGEpO1xyXG4gICAgICAgICAgcmVzb2x2ZShkZWNyeXB0ZWREYXRhKTtcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRSU0EnLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2lnblJTQShwcml2S2V5LCBkYXRhKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgX3RoaXMuX2ltcG9ydFJTQXNpZ25LZXkocHJpdktleSkudGhlbihmdW5jdGlvbihwcml2YXRlS2V5KSB7XHJcblxyXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuc2lnbihcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJpdmF0ZUtleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxyXG4gICAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gc2lnblxyXG4gICAgICAgIClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihzaWduYXR1cmUpIHtcclxuICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBzaWduYXR1cmVcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1zaWduUlNBJywgbmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKSk7XHJcbiAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpO1xyXG5cclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8tc2lnblJTQScsIGVycik7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdmVyaWZ5UlNBKHB1YktleSwgZGF0YSwgc2lnbmF0dXJlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgX3RoaXMuX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpLnRoZW4oZnVuY3Rpb24ocHVibGljS2V5KSB7XHJcblxyXG4gICAgICAgIGNyeXB0by5zdWJ0bGUudmVyaWZ5KFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwdWJsaWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcclxuICAgICAgICAgICAgc2lnbmF0dXJlLCAvL0FycmF5QnVmZmVyIG9mIHRoZSBzaWduYXR1cmVcclxuICAgICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YVxyXG4gICAgICAgIClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihpc3ZhbGlkKSB7XHJcbiAgICAgICAgICAvL3JldHVybnMgYSBib29sZWFuIG9uIHdoZXRoZXIgdGhlIHNpZ25hdHVyZSBpcyB0cnVlIG9yIG5vdFxyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLXZlcmlmeVJTQScsIGlzdmFsaWQpO1xyXG4gICAgICAgICAgcmVzb2x2ZShpc3ZhbGlkKTtcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLXZlcmlmeVJTQScsIGVycik7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5jcnlwdEFFUyhrZXksIGRhdGEsIGl2KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgX3RoaXMuX2ltcG9ydEFFU2tleShrZXkpLnRoZW4oZnVuY3Rpb24oYWVzS2V5KSB7XHJcblxyXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuZW5jcnlwdChcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIG5hbWU6ICdBRVMtQ0JDJyxcclxuICAgICAgICAgICAgICAvL0Rvbid0IHJlLXVzZSBpbml0aWFsaXphdGlvbiB2ZWN0b3JzIVxyXG4gICAgICAgICAgICAgIC8vQWx3YXlzIGdlbmVyYXRlIGEgbmV3IGl2IGV2ZXJ5IHRpbWUgeW91ciBlbmNyeXB0IVxyXG4gICAgICAgICAgICAgIGl2OiBpdlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhZXNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcclxuICAgICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHRcclxuICAgICAgICApXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZW5jcnlwdGVkKSB7XHJcbiAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgZW5jcnlwdGVkIGRhdGFcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1lbmNyeXB0QUVTJywgbmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkKSk7XHJcbiAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpO1xyXG5cclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdEFFUycsIGVycik7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVjcnlwdEFFUyhrZXksIGRhdGEsIGl2KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgX3RoaXMuX2ltcG9ydEFFU2tleShrZXkpLnRoZW4oZnVuY3Rpb24oYWVzS2V5KSB7XHJcblxyXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuZGVjcnlwdChcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIG5hbWU6ICdBRVMtQ0JDJyxcclxuICAgICAgICAgICAgICBpdjogaXZcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWVzS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXHJcbiAgICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YVxyXG4gICAgICAgIClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihkZWNyeXB0ZWQpIHtcclxuXHJcbiAgICAgICAgICBsZXQgZGVjb2RlZERhdGEgPSBfdGhpcy5fdXRmOERlY29kZShuZXcgVWludDhBcnJheShkZWNyeXB0ZWQpKTtcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1kZWNyeXB0QUVTJywgZGVjb2RlZERhdGEpO1xyXG4gICAgICAgICAgcmVzb2x2ZShkZWNvZGVkRGF0YSk7XHJcblxyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1kZWNyeXB0QUVTJywgZXJyKTtcclxuICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGNyZWF0ZXMgYSBoYXNoIHVzaW5nIHRoZSBITUFDIGFsZ29yaXRobVxyXG4gICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgICBrZXkgICAgICAga2V5IHRvIGJlIHVzZWQgaW4gdGhlIGhtYWNcclxuICAqIEBwYXJhbSAge3N0cmluZ30gICAgICBkYXRhICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIGhhc2hlZFxyXG4gICogQHJldHVybiAge2J5dGVBcnJheX0gICBzaWduYXR1cmUgIHJlc3VsdGluZyBoYXNoXHJcbiAgKi9cclxuICBoYXNoSE1BQyhrZXksIGRhdGEpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5faW1wb3J0SE1BQ2tleShrZXkpLnRoZW4oZnVuY3Rpb24oaG1hY0tleSkge1xyXG5cclxuICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbmFtZTogJ0hNQUMnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBobWFjS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXHJcbiAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIHNpZ25cclxuICAgICAgICApXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oc2lnbmF0dXJlKSB7XHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8taGFzaEhNQUMnLCBzaWduYXR1cmUpO1xyXG5cclxuICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBzaWduYXR1cmVcclxuICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKSk7XHJcblxyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1oYXNoSE1BQycsIGVycik7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogdmVyaWZpZXMgYW4gaGFzaCB1c2luZyB0aGUgSE1BQyBhbGdvcml0aG1cclxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjXHJcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgZGF0YSAgICAgICBpbmZvcm1hdGlvbiB0byBiZSBoYXNoZWQgdG8gY29tcGFyZVxyXG4gICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgc2lnbmF0dXJlICAgaGFzaCB0byBjb21wYXJlIHdpdGggdGhlIHJlY2VpdmVkIGRhdGFcclxuICAqIEByZXR1cm4gIHtib29sZWFufSAgIGlzdmFsaWQgICAgIGJvb2xlYW4gc2F5aW5nIGlmIHRoZSBkYXRhIGNvcnJlc3BvbmRzIHRvIHRoZSBoYXNoIHJlY2VpdmVkXHJcbiAgKi9cclxuICB2ZXJpZnlITUFDKGtleSwgZGF0YSwgc2lnbmF0dXJlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMuX2ltcG9ydEhNQUNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uKGhtYWNLZXkpIHtcclxuXHJcbiAgICAgICAgY3J5cHRvLnN1YnRsZS52ZXJpZnkoXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdITUFDJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcclxuICAgICAgICAgIHNpZ25hdHVyZSwgLy9BcnJheUJ1ZmZlciBvZiB0aGUgc2lnbmF0dXJlXHJcbiAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGlzdmFsaWQpIHtcclxuICAgICAgICAgIC8vcmV0dXJucyBhIGJvb2xlYW4gb24gd2hldGhlciB0aGUgc2lnbmF0dXJlIGlzIHRydWUgb3Igbm90XHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tdmVyaWZ5SE1BQycsIGlzdmFsaWQpO1xyXG4gICAgICAgICAgKGlzdmFsaWQpID8gcmVzb2x2ZShpc3ZhbGlkKSA6IHJlamVjdChpc3ZhbGlkKTtcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tdmVyaWZ5SE1BQycsIGVycik7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGdlbmVyYXRlcyBhIFJTQSBwdWJsaWMvcHJpdmF0ZSBrZXkgcGFpciB3aXRoIGEgbW9kdWx1cyBsZW5ndGggb2YgMjA0OCBiaXRzXHJcbiAgKiBAcmV0dXJuICB7SlNPTn0gICBrZXlQYWlyICAgIGpzb24gY29udGFpbmluZyB0aGUgcHVibGljIGFuZCBwcml2YXRlIGtleXNcclxuICAqL1xyXG4gIGdlbmVyYXRlUlNBS2V5UGFpcigpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQga2V5UGFpciA9IHt9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgY3J5cHRvLnN1YnRsZS5nZW5lcmF0ZUtleShcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6ICdSU0EtUFNTJyxcclxuICAgICAgICBtb2R1bHVzTGVuZ3RoOiAyMDQ4LCAvL2NhbiBiZSAxMDI0LCAyMDQ4LCBvciA0MDk2XHJcbiAgICAgICAgcHVibGljRXhwb25lbnQ6IG5ldyBVaW50OEFycmF5KFsweDAxLCAweDAwLCAweDAxXSksXHJcbiAgICAgICAgaGFzaDoge25hbWU6ICdTSEEtMjU2J30gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xyXG4gICAgICB9LFxyXG4gICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXHJcbiAgICAgIFsnc2lnbicsICd2ZXJpZnknXSAvL2NhbiBiZSBhbnkgY29tYmluYXRpb24gb2YgJ3NpZ24nIGFuZCAndmVyaWZ5J1xyXG5cclxuICAgICAgKS50aGVuKGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgIC8vcmV0dXJucyBhIGtleXBhaXIgb2JqZWN0XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhrZXkpO1xyXG5cclxuICAgICAgICBjcnlwdG8uc3VidGxlLmV4cG9ydEtleShcclxuICAgICAgICAgICdzcGtpJywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcclxuICAgICAgICAgIGtleS5wdWJsaWNLZXkgLy9jYW4gYmUgYSBwdWJsaWNLZXkgb3IgcHJpdmF0ZUtleSwgYXMgbG9uZyBhcyBleHRyYWN0YWJsZSB3YXMgdHJ1ZVxyXG4gICAgICAgICkudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcclxuICAgICAgICAgIC8vcmV0dXJucyB0aGUgZXhwb3J0ZWQga2V5IGRhdGFcclxuICAgICAgICAgIGtleVBhaXIucHVibGljICA9IG5ldyBVaW50OEFycmF5KHB1YmxpY0tleSk7XHJcbiAgICAgICAgICByZXR1cm4gY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoXHJcbiAgICAgICAgICAgICdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXHJcbiAgICAgICAgICAgIGtleS5wcml2YXRlS2V5IC8vY2FuIGJlIGEgcHVibGljS2V5IG9yIHByaXZhdGVLZXksIGFzIGxvbmcgYXMgZXh0cmFjdGFibGUgd2FzIHRydWVcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihwcml2YXRlS2V5KSB7XHJcbiAgICAgICAgICBrZXlQYWlyLnByaXZhdGUgID0gbmV3IFVpbnQ4QXJyYXkocHJpdmF0ZUtleSk7XHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZ2VuZXJhdGVSU0FLZXlQYWlyJywga2V5UGFpcik7XHJcblxyXG4gICAgICAgICAgcmVzb2x2ZShrZXlQYWlyKTtcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogR2VuZXJhdGVzIGEgMTI4IGJpdCByYW5kb20gdmFsdWUuXHJcbiAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICByYW5kb20gdmFsdWVcclxuICAqL1xyXG4gIGdlbmVyYXRlSVYoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBhcnJheSA9IG5ldyAgVWludDhBcnJheSgxNik7XHJcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcclxuXHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEdlbmVyYXRlcyBhIDI1NiBiaXQgcmFuZG9tIHZhbHVlLiAzMiBiaXRzIGFyZSBleHRyYXRlZCBmcm9tIHRoZSBtYWNoaW5lIHRpbWUsXHJcbiAgKiB0aGUgcmVtYWluaW5nIGFyZSBnZW5lcmF0ZWQgcmFuZG9tbHlcclxuICAqIEByZXR1cm4ge2J5dGVBcnJheX0gIGFycmF5ICAgIHJhbmRvbSB2YWx1ZVxyXG4gICovXHJcbiAgZ2VuZXJhdGVSYW5kb20oKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBhcnJheSA9IG5ldyAgVWludDhBcnJheSgzMik7XHJcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcclxuXHJcbiAgICBsZXQgZGF0ZSA9IERhdGUubm93KCk7XHJcbiAgICBsZXQgZGF0ZUVuY29kZWQgPSBfdGhpcy5fdXRmOEVuY29kZShkYXRlKTtcclxuXHJcbiAgICAvL2V4dHJhY3QgdGhlIGxlYXN0IHNpZ25pZmljYW50IDQgYnl0ZXMgaW4gdGhlIGRhdGVcclxuICAgIGxldCBmaW5hbERhdGUgPSBkYXRlRW5jb2RlZC5zbGljZShkYXRlRW5jb2RlZC5sZW5ndGggLSA0LCBkYXRlRW5jb2RlZC5sZW5ndGgpO1xyXG5cclxuICAgIC8vIGFkZCBpbiB0aGUgZmlyc3QgNCBieXRlcyBvZiB0aGUgYXJyYXkgdGhlIGJ5dGVzIGV4dHJhY3RlZCBwcmV2aW91c2x5O1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHsgYXJyYXlbaV0gPSBmaW5hbERhdGVbaV07IH1cclxuICAgIHJldHVybiBhcnJheTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZ2VuZXJhdGVzIGEgcHJlbWFzdGVyIHNlY3JldCAoUE1TKSBvZiA0OCBieXRlcyAoMzg0IGJpdHMpIHJhbmRvbWx5XHJcbiAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICBwcmVtYXN0ZXIgc2VjcmV0IGtleVxyXG4gICovXHJcbiAgZ2VuZXJhdGVQTVMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBhcnJheSA9IG5ldyBVaW50OEFycmF5KDQ4KTtcclxuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBnZW5lcmF0ZXMgYSBtYXN0ZXJLZXkgc2VjcmV0IChQTVMpIG9mIDQ4IGJ5dGVzICgzODQgYml0cykgdXNpbmcgdGhlIHByZW1hc3RlciBzZWNyZXQgYW5kXHJcbiAgKiB0d28gcmFuZG9tc1xyXG4gICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgbWFzdGVyIHNlY3JldCBrZXkgd2l0aCA0OCBieXRlc1xyXG4gICovXHJcbiAgZ2VuZXJhdGVNYXN0ZXJTZWNyZXQoaG1hY0tleSwgZGF0YSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGxldCBrZXkgPSBuZXcgVWludDhBcnJheSg0OCk7XHJcbiAgICAgIGxldCBzZWVkID0gZGF0YTtcclxuXHJcbiAgICAgIF90aGlzLl9kaWdlc3QoaG1hY0tleSkudGhlbigoZGlnZXN0ZWRLZXkpID0+IHtcclxuXHJcbiAgICAgICAgX3RoaXMuaGFzaEhNQUMoZGlnZXN0ZWRLZXksIHNlZWQpLnRoZW4oZnVuY3Rpb24oa2V5cGFydDApIHtcclxuXHJcbiAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDMyIGJ5dGVzIGludG8gdGhlIGtleVxyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzMjsgaSsrKSB7IGtleVtpXSA9IGtleXBhcnQwW2ldOyB9XHJcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoZGlnZXN0ZWRLZXksIHNlZWQgKyBrZXlwYXJ0MCk7XHJcblxyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24oa2V5cGFydDEpIHtcclxuXHJcbiAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDE2IGJ5dGVzIHRvIHRoZSBrZXkgcmVtYWluaW5nIDE2IGJ5dGVzXHJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHsga2V5W2kgKyAzMl0gPSBrZXlwYXJ0MVtpXTsgfVxyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0Jywga2V5KTtcclxuICAgICAgICAgIHJlc29sdmUoa2V5KTtcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0JywgZXJyKTtcclxuICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZ2VuZXJhdGVzIGJvdGggdXNlcnMgTUFDIGFuZCBlbmNyeXB0aW9uIGtleXMuIGdlbmVyYXRlIGFzIG91dHB1dCBhbiBhcnJheVxyXG4gICogd2l0aCA0IGJ5dGVBcnJheSBlYWNoIHdpdGggMzIgYnl0ZXNcclxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAgICAgIHNlY3JldCAgICAgICBzZWNyZXQgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBmdW5jdGlvblxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZGF0YSAgICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIHVzZWQgYXMgc2VlZFxyXG4gICogQHJldHVybiB7QXJyYXk8Ynl0ZUFycmF5Pn0ga2V5ICAgICAgICAgIGFycmF5IHdpdGggdGhlIGluZm9ybWF0aW9uIHRvIGdlbmVyYXRlIGtleXNcclxuICAqL1xyXG4gIGdlbmVyYXRlS2V5cyhobWFjS2V5LCBkYXRhKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIGxldCBrZXkgPSBbXTtcclxuICAgICAgbGV0IHNlZWQgPSBkYXRhO1xyXG5cclxuICAgICAgLy8gaXRlcmF0ZSA0IHRpbWVzIHRvIG9idGFpbiBhIDEwMjQga2V5IHNpemVcclxuICAgICAgX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCkudGhlbihmdW5jdGlvbihrZXlwYXJ0MCkge1xyXG4gICAgICAgIGtleS5wdXNoKGtleXBhcnQwKTtcclxuICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCArIGtleXBhcnQwKTtcclxuXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oa2V5cGFydDEpIHtcclxuICAgICAgICBrZXkucHVzaChrZXlwYXJ0MSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQgKyBrZXlwYXJ0MSk7XHJcblxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKGtleXBhcnQyKSB7XHJcbiAgICAgICAga2V5LnB1c2goa2V5cGFydDIpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkICsga2V5cGFydDIpO1xyXG5cclxuICAgICAgfSkudGhlbihmdW5jdGlvbihrZXlwYXJ0Mykge1xyXG4gICAgICAgIGtleS5wdXNoKGtleXBhcnQzKTtcclxuXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlS2V5cycsIGtleSk7XHJcbiAgICAgICAgcmVzb2x2ZShrZXkpO1xyXG5cclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlS2V5cycsIGVycik7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy9jb25zb2xlLmxvZyhobWFjS2V5LCBkYXRhKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2ltcG9ydFJTQXNpZ25LZXkocHJpdktleSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxyXG4gICAgICAgICAgJ3BrY3M4JywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcclxuICAgICAgICAgIHByaXZLZXksXHJcbiAgICAgICAgICB7ICAgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zXHJcbiAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsXHJcbiAgICAgICAgICAgIGhhc2g6IHtuYW1lOiAnU0hBLTI1Nid9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMidcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXHJcbiAgICAgICAgICBbJ3NpZ24nXSAvLyd2ZXJpZnknIGZvciBwdWJsaWMga2V5IGltcG9ydCwgJ3NpZ24nIGZvciBwcml2YXRlIGtleSBpbXBvcnRzXHJcbiAgICAgIClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xyXG4gICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KVxyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0UlNBc2lnbktleScsIHByaXZhdGVLZXkpO1xyXG4gICAgICAgIHJlc29sdmUocHJpdmF0ZUtleSk7XHJcblxyXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQXNpZ25LZXknLCBlcnIpO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcclxuICAgICAgICAgICdzcGtpJywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcclxuICAgICAgICAgIHB1YktleSxcclxuICAgICAgICAgIHsgICAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnNcclxuICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JyxcclxuICAgICAgICAgICAgaGFzaDoge25hbWU6ICdTSEEtMjU2J30gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcclxuICAgICAgICAgIFsndmVyaWZ5J10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xyXG4gICAgICApXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHB1YmxpY0tleSkge1xyXG4gICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KVxyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5JywgcHVibGljS2V5KTtcclxuICAgICAgICByZXNvbHZlKHB1YmxpY0tleSk7XHJcblxyXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQXZlcmlmeUtleScsIGVycik7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfaW1wb3J0UlNBZW5jcnlwdEtleShwdWJLZXkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcclxuICAgICAgICAgICdzcGtpJywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcclxuICAgICAgICAgIHB1YktleSxcclxuICAgICAgICAgIHsgICAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnNcclxuICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJyxcclxuICAgICAgICAgICAgaGFzaDoge25hbWU6ICdTSEEtMjU2J30gLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcclxuICAgICAgICAgIFsnZW5jcnlwdCddIC8vJ2VuY3J5cHQnIG9yICd3cmFwS2V5JyBmb3IgcHVibGljIGtleSBpbXBvcnQgb3JcclxuICAgICAgICAgICAgICAgICAgICAgIC8vJ2RlY3J5cHQnIG9yICd1bndyYXBLZXknIGZvciBwcml2YXRlIGtleSBpbXBvcnRzXHJcbiAgICAgIClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24ocHVibGljS2V5KSB7XHJcbiAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0FlbmNyeXB0S2V5JywgcHVibGljS2V5KTtcclxuICAgICAgICByZXNvbHZlKHB1YmxpY0tleSk7XHJcblxyXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdjcnlwdG8tX2ltcG9ydFJTQWVuY3J5cHRLZXknLCBlcnIpO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2ltcG9ydFJTQWRlY3J5cHRLZXkocHJpdktleSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxyXG4gICAgICAgICAgJ3BrY3M4JywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcclxuICAgICAgICAgIHByaXZLZXksXHJcbiAgICAgICAgICB7ICAgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zXHJcbiAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXHJcbiAgICAgICAgICAgIGhhc2g6IHtuYW1lOiAnU0hBLTI1Nid9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMidcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXHJcbiAgICAgICAgICBbJ2RlY3J5cHQnXSAvLydlbmNyeXB0JyBvciAnd3JhcEtleScgZm9yIHB1YmxpYyBrZXkgaW1wb3J0IG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLydkZWNyeXB0JyBvciAndW53cmFwS2V5JyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xyXG4gICAgICApXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHByaXZhdGVLZXkpIHtcclxuICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSlcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQWRlY3J5cHRLZXknLCBwcml2YXRlS2V5KTtcclxuICAgICAgICByZXNvbHZlKHByaXZhdGVLZXkpO1xyXG5cclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0FkZWNyeXB0S2V5JywgZXJyKTtcclxuICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbmNhdFBNU3dpdGhSYW5kb21zKHBtcywgdG9SYW5kb20sIGZyb21SYW5kb20pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IGZpbmFsS2V5ID0gbmV3IFVpbnQ4QXJyYXkocG1zLmxlbmd0aCArIHRvUmFuZG9tLmxlbmd0aCArIGZyb21SYW5kb20ubGVuZ3RoKTtcclxuXHJcbiAgICAvLyBhZGQgUHJlbWFzdGVyS2V5XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBtcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBmaW5hbEtleVtpXSA9IHBtc1tpXTtcclxuICAgIH1cclxuXHJcbiAgICAvL2FkZCB0byByYW5kb21cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9SYW5kb20ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgZmluYWxLZXlbaSArIHBtcy5sZW5ndGhdID0gcG1zW2ldO1xyXG4gICAgfVxyXG5cclxuICAgIC8vYWRkIGZyb20gcmFuZG9tXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyb21SYW5kb20ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgZmluYWxLZXlbaSArIHBtcy5sZW5ndGggKyB0b1JhbmRvbS5sZW5ndGhdID0gcG1zW2ldO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmaW5hbEtleTtcclxuICB9XHJcblxyXG4gIF9nZW5lcmF0ZTI1NmJpdEtleSgpIHtcclxuICAgIGxldCBhcnJheSA9IG5ldyAgVWludDhBcnJheSgzMik7XHJcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcclxuXHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGltcG9ydHMgdGhlIHNlY3JldCB0byB0aGUgSE1BQyBmdW5jdGlvblxyXG4gICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgIGFycmF5QnVmZmVyICAgICBieXRlcyB0byBpbXBvcnQgYXMga2V5XHJcbiAgKiBAcmV0dXJuIHtKU09OfSAgICAgICBrZXkgICAgICAgICAgICAgIGtleSByZWFkeSB0byBiZSB1c2VkIGluIHRoZSBITUFDIGNyeXB0b2dyYXBoaWMgZnVuY3Rpb25cclxuICAqL1xyXG4gIF9pbXBvcnRITUFDa2V5KGFycmF5QnVmZmVyKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLl9kaWdlc3QoYXJyYXlCdWZmZXIpLnRoZW4oKGtleSkgPT4ge1xyXG5cclxuICAgICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcclxuICAgICAgICAncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdydcclxuICAgICAgICBrZXksXHJcbiAgICAgICAgeyAgIC8vdGhpcyBpcyB0aGUgYWxnb3JpdGhtIG9wdGlvbnNcclxuICAgICAgICAgIG5hbWU6ICdITUFDJyxcclxuICAgICAgICAgIGhhc2g6IHtuYW1lOiAnU0hBLTI1Nid9LCAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXHJcbiAgICAgICAgICBsZW5ndGg6IDI1NiAvL29wdGlvbmFsLCBpZiB5b3Ugd2FudCB5b3VyIGtleSBsZW5ndGggdG8gZGlmZmVyIGZyb20gdGhlIGhhc2ggZnVuY3Rpb24ncyBibG9jayBsZW5ndGhcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcclxuICAgICAgICBbJ3NpZ24nLCAndmVyaWZ5J10gLy9jYW4gYmUgYW55IGNvbWJpbmF0aW9uIG9mICdzaWduJyBhbmQgJ3ZlcmlmeSdcclxuICAgICAgICApLnRoZW4oZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgICAvL3JldHVybnMgdGhlIHN5bW1ldHJpYyBrZXlcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0SE1BQ2tleScsIGtleSk7XHJcbiAgICAgICAgICByZXNvbHZlKGtleSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9kaWdlc3QodmFsdWUpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBjcnlwdG8uc3VidGxlLmRpZ2VzdChcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgbmFtZTogJ1NIQS0yNTYnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgdmFsdWUgLy9UaGUgZGF0YSB5b3Ugd2FudCB0byBoYXNoIGFzIGFuIEFycmF5QnVmZmVyXHJcbiAgICAgIClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oaGFzaCkge1xyXG4gICAgICAgIC8vcmV0dXJucyB0aGUgaGFzaCBhcyBhbiBBcnJheUJ1ZmZlclxyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1kaWdlc3QnLCBuZXcgVWludDhBcnJheShoYXNoKSk7XHJcbiAgICAgICAgcmVzb2x2ZShuZXcgVWludDhBcnJheShoYXNoKSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2ltcG9ydEFFU2tleShhcnJheUJ1ZmZlcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcclxuICAgICAgICAgICdyYXcnLCAvL2NhbiBiZSAnandrJyBvciAncmF3J1xyXG4gICAgICAgICAgYXJyYXlCdWZmZXIsXHJcbiAgICAgICAgICB7ICAgLy90aGlzIGlzIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xyXG4gICAgICAgICAgICBuYW1lOiAnQUVTLUNCQydcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXHJcbiAgICAgICAgICBbJ2VuY3J5cHQnLCAnZGVjcnlwdCddIC8vY2FuIGJlICdlbmNyeXB0JywgJ2RlY3J5cHQnLCAnd3JhcEtleScsIG9yICd1bndyYXBLZXknXHJcbiAgICAgIClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgLy9yZXR1cm5zIHRoZSBzeW1tZXRyaWMga2V5XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWltcG9ydEFFU2tleScsIGtleSk7XHJcbiAgICAgICAgcmVzb2x2ZShrZXkpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLWltcG9ydEFFU2tleScsIGVycik7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfdXRmOEVuY29kZShzKSB7XHJcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCd1dGYtOCcpLmVuY29kZShzKTtcclxuICB9XHJcblxyXG4gIF91dGY4RGVjb2RlKHMpIHtcclxuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoJ3V0Zi04JykuZGVjb2RlKHMpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ3J5cHRvO1xyXG4iLCIvKipcclxuKiBmYWtlIGNsYXNzIGZvciB0aGUgZ3VpIHRvIHNlbGVjdCB0aGUgaWRlbnRpdHksXHJcbiogVE9ETyByZXBsYWNlIHdpdGggdGhlIHByb3BlciBpZGVudGl0eSBHVUlcclxuKlxyXG4qL1xyXG5jbGFzcyBHdWlGYWtlIHtcclxuXHJcbiAgY29uc3RydWN0b3IodXJsLCBtZXNzYWdlQnVzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl91cmwgPSB1cmw7XHJcbiAgICBfdGhpcy5fd2FpdFRpbWUgPSAxMDAwMDtcclxuICAgIF90aGlzLl9tZXNzYWdlQnVzID0gbWVzc2FnZUJ1cztcclxuXHJcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5fdXJsLCBtc2cgPT4ge1xyXG5cclxuICAgICAgbGV0IGlkZW50aXRpZXMgPSBtc2cuYm9keS52YWx1ZS5pZGVudGl0aWVzO1xyXG4gICAgICBsZXQgaWRwcyA9IG1zZy5ib2R5LnZhbHVlLmlkcHM7XHJcblxyXG4gICAgICBsZXQgdmFsdWU7XHJcblxyXG4gICAgICBpZiAoaWRlbnRpdGllc1swXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdmFsdWUgPSB7dHlwZTogJ2lkZW50aXR5JywgdmFsdWU6IGlkZW50aXRpZXNbMF0sIGNvZGU6IDIwMH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFsdWUgPSB7dHlwZTogJ2lkcCcsIHZhbHVlOiBpZHBzWzBdLmRvbWFpbiwgY29kZTogMjAwfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHJlcGx5TXNnID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB2YWx1ZX07XHJcblxyXG4gICAgICAvLyB0byB0ZXN0IG9uIHRoZSBpZGVudGl0eSBzaWRlIHRoZSBsaXN0ZW5lciB3aXRob3V0IHRoZSB0aW1lb3V0XHJcbiAgICAgIC8vIGNhbiByZXByZXNlbnQgdGhlIHRpbWUgdGhlIHVzZXIgdGFrZXMgdG8gY2hvb3NlIGFuZCBpZGVudGl0eVxyXG4gICAgICBpZiAobXNnLmJvZHkudmFsdWUgPT09ICd3YWl0Jykge1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcclxuICAgICAgICB9LCBfdGhpcy5fd2FpdFRpbWUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5TXNnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgR3VpRmFrZTtcclxuIiwiLyoqXHJcbiogVGhlIElkZW50aXR5IERhdGEgTW9kZWwgaXMgdXNlZCB0byBtb2RlbCB0aGUgcmVUSElOSyBVc2VyIGVudGl0eS4gVGhlIElkZW50aXR5IGRhdGEgbW9kZWwgaXMgaGFuZGxlZCBieSBJZGVudGl0eSBNYW5hZ2VtZW50IGZ1bmN0aW9uYWxpdHkuXHJcbipcclxuKi9cclxuY2xhc3MgSWRlbnRpdHkge1xyXG5cclxuICBjb25zdHJ1Y3RvcihndWlkLCB0eXBlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLmd1aWQgPSBndWlkO1xyXG4gICAgX3RoaXMudHlwZSA9IHR5cGU7XHJcbiAgICBfdGhpcy5pZGVudGlmaWVyc0xpc3QgPSB7fTtcclxuXHJcbiAgfVxyXG5cclxuICBhZGRJZGVudGl0eShpZGVudGlmaWVyKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGlkZW50aXR5SW5mb3JtYXRpb24gPSB7XHJcbiAgICAgIGlkQXNzZXJ0aW9uOiAnJyxcclxuICAgICAgc2VydmljZUFkZHJlc3M6ICcnLFxyXG4gICAgICBhdXRoZW50aWNhdGlvbkRhdGE6ICcnLFxyXG4gICAgICBhdXRob3Jpc2F0aW9uRGF0YTogJycsXHJcbiAgICAgIHVzZXJQcm9maWxlOiAnJ1xyXG4gICAgfTtcclxuICAgIF90aGlzLmlkZW50aWZpZXJzTGlzdFtpZGVudGlmaWVyXSA9IGlkZW50aXR5SW5mb3JtYXRpb247XHJcbiAgfVxyXG5cclxuICBhZGRJZEFzc2VydGlvbihpZGVudGlmaWVyLCBhc3NlcnRpb24sIGlkcCwgc2NvcGUpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IG5ld0lkQXNzZXJ0aW9uID0gbmV3IElkQXNzZXJ0aW9uKGFzc2VydGlvbiwgaWRwLCBzY29wZSk7XHJcblxyXG4gICAgX3RoaXMuaWRBc3NlcnRpb25MaXN0LnB1c2gobmV3SWRBc3NlcnRpb24pO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgSWRBc3NlcnRpb24ge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihhc3NlcnRpb24sIGlkcCwgc2NvcGUpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuYXNzZXJ0aW9uID0gYXNzZXJ0aW9uO1xyXG4gICAgX3RoaXMuaWRwID0gaWRwO1xyXG4gICAgX3RoaXMuc2NvcGUgPSBzY29wZTtcclxuICB9XHJcblxyXG59XHJcblxyXG5jbGFzcyBJZFZhbGlkYXRpb24ge1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZGVudGl0eSwgY29udGVudHMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5pZGVudGl0eSA9IGlkZW50aXR5O1xyXG4gICAgX3RoaXMuY29udGVudHMgPSBjb250ZW50cztcclxuICB9XHJcblxyXG4gIHZhbGlkYXRlcyhpZGVudGl0eSwgY29udGVudHMpIHtcclxuICAgIC8vVE9ETyBpbXBsZW1lbnQgdGhlIGxvZ2ljXHJcblxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSWRlbnRpdHk7XHJcbiIsIlxyXG5pbXBvcnQge2RpdmlkZVVSTCwgZ2V0VXNlclVSTEZyb21FbWFpbCwgZ2V0VXNlckVtYWlsRnJvbVVSTCwgaXNEYXRhT2JqZWN0VVJMLCBjb252ZXJ0VG9Vc2VyVVJMLCBnZXRVc2VySWRlbnRpdHlEb21haW4sIGlzTGVnYWN5fSBmcm9tICcuLi91dGlscy91dGlscy5qcyc7XHJcbmltcG9ydCBJZGVudGl0eSBmcm9tICcuL0lkZW50aXR5JztcclxuaW1wb3J0IENyeXB0byBmcm9tICcuL0NyeXB0byc7XHJcbmltcG9ydCBHdWlGYWtlIGZyb20gJy4vR3VpRmFrZSc7XHJcblxyXG4vKipcclxuKlxyXG4qIFRoZSBJZGVudGl0eSBNb2R1bGUgKElkIE1vZHVsZSkgaXMgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgdGhlXHJcbiogdXNlciBpZGVudGl0eSBhbmQgdGhlIGFzc29jaWF0aW9uIG9mIHRoaXMgaWRlbnRpdHkgd2l0aCB0aGUgSHlwZXJ0eSBpbnN0YW5jZXMsXHJcbiogaW4gb3JkZXIgdG8gbWFrZSBIeXBlcnR5IGluc3RhbmNlcyBpZGVudGlmaWFibGUuIFRoZSBpZGVudGl0eSBpbiB0aGUgcmVUSElOSyBwcm9qZWN0XHJcbiogaXMgbm90IGZpeGVkIHRvIGEgdW5pcXVlIElkZW50aXR5IFNlcnZpY2UgUHJvdmlkZXIsIGJ1dCBvYnRhaW5lZCB0aHJvdWdoIHNldmVyYWxcclxuKiBkaWZmZXJlbnQgSWRlbnRpdHkgc291cmNlcy4gV2l0aCB0aGlzIGFwcHJvYWNoLCB0aGUgSWQgTW9kdWxlIHByb3ZpZGVzIHRvIHRoZSB1c2VyIHRoZVxyXG4qIG9wdGlvbiB0byBjaG9vc2UgdGhlIHByZWZlcnJlZCBtZXRob2QgZm9yIGF1dGhlbnRpY2F0aW9uLlxyXG4qIFRoaXMgbW9kdWxlIHdpbGwgdGh1cyBhYmxlIHRvIHN1cHBvcnQgbXVsdGlwbGUgSWRlbnRpdHkgYWNxdWlzaXRpb24gbWV0aG9kcyxcclxuKiBzdWNoIGFzIE9wZW5JRCBjb25uZWN0IDEuMCwgS2VyYmVyb3MgU3lzdGVtLCBvciBhdXRoZW50aWNhdGlvbiB0aHJvdWdoIHNtYXJ0IGNhcmRzLlxyXG4qIEZvciBleGFtcGxlLCBhIHVzZXIgd2l0aCBhIEdvb2dsZSBhY2NvdW50IGNhbiB1c2UgdGhlIEdvb2dsZSBhcyBhbiBJZGVudGl0eSBQcm92aWRlciB0byBwcm92aWRlIElkZW50aXR5IFRva2VucyxcclxuKiAgd2hpY2ggY2FuIGJlIHVzZWQgYnkgdGhlIElkZW50aXR5IE1vZHVsZSB0byBhc3NvY2lhdGUgaXQgd2l0aCBhIEh5cGVydHkgaW5zdGFuY2UuXHJcbipcclxuKiBUaGUgSWRlbnRpdHkgTW9kdWxlIHVzZXMgYSBub2RlIHBhY2thZ2UsIHRoZSBIZWxsb0pTLCB3aGljaCBpcyBhIGNsaWVudC1zaWRlIEphdmFTY3JpcHQgQVBJIGZvciBhdXRoZW50aWNhdGlvblxyXG4qIHRoYXQgZmFjaWxpdGF0ZXMgdGhlIHJlcXVlc3RzIGZvciB0aGUgT3BlbklEIGNvbm5lY3QgcHJvdG9jb2wuIFRoaXMgbWV0aG9kIGFsbG93cyBmb3Igc29tZSBhYnN0cmFjdGlvblxyXG4qIHdoZW4gbWFraW5nIHJlcXVlc3RzIGZvciBkaWZmZXJlbnQgSWRlbnRpdHkgUHJvdmlkZXJzLCBzdWNoIGFzIE9wZW5JRCBjb25uZWN0IHVzZWQgYnkgR29vZ2xlLCBGYWNlYm9vaywgTWljcm9zb2Z0LCBmb3IgZXhhbXBsZS5cclxuKlxyXG4qIFdoZW4gYSByZXF1ZXN0IGZvciBhIHVzZXIgaWRlbnRpdHkgaXMgbWFkZSB1c2luZyB0aGUgbWV0aG9kIGxvZ2luV2l0aFJQKGlkZW50aWZpZXIsIHNjb3BlKSxcclxuKiB0aGlzIG1ldGhvZCB3aWxsIGFuYWx5c2UgdGhlIElkZW50aXR5IFByb3ZpZGVyIGNob3NlbiB0byBvYnRhaW4gYW4gaWRlbnRpdHkgYW5kIHdpbGwgdXNlIHRoZSBIZWxsb0pTIG5vZGUgcGFja2FnZVxyXG4qIHdpdGggdGhlIHNlbGVjdGVkIElkZW50aXR5IFByb3ZpZGVyIGFuZCBpZGVudGl0eSBzY29wZS4gQWZ0ZXIgdGhlIEhlbGxvSlMgcmVxdWVzdCBmb3IgYW4gQWNjZXNzIFRva2VuXHJcbiogdG8gdGhlIElkZW50aXR5IFByb3ZpZGVycywgdGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCB0byBhdXRoZW50aWNhdGUgdG93YXJkcyB0aGUgSWRlbnRpdHkgUHJvdmlkZXIuXHJcbiogVXBvbiByZWNlaXZpbmcgdGhlIEFjY2VzcyBUb2tlbiwgdGhpcyB0b2tlbiBpcyB2YWxpZGF0ZWQgd2l0aCBhIFJFU1RmdWwgd2ViIHNlcnZpY2UgcmVxdWVzdCB0byBhbiBlbmRwb2ludFxyXG4qIG9uIHRoZSBJZGVudGl0eSBQcm92aWRlciBBdXRob3JpemF0aW9uIFNlcnZlciwgYW5kIGFmdGVyIHRoZSB2YWxpZGF0aW9uIGlzIGRvbmUsXHJcbiogYW4gSUQgdG9rZW4gaXMgb2J0YWluZWQgd2l0aCB0aGUgaW5mb3JtYXRpb24gYWNjb3JkaW5nIHRvIHRoZSBzY29wZSByZXF1aXJlZC5cclxuKiBUaGlzIElEIHRva2VuIGlzIHRoZW4gcHJlc2VydmVkIGluIHRoaXMgbW9kdWxlIHRoYXQgY2FuIG9idGFpbmVkIHRocm91Z2ggdGhlIGdldElkZW50aXRpZXMoKVxyXG4qIGFuZCBpcyBwYXNzZWQgYXMgcmV0dXJuIHZhbHVlIG9mIHRoZSBsb2dpbldpdGhSUCBmdW5jdGlvbi4gVGhlIG1ldGhvZHMgZ2VuZXJhdGVBc3NlcnRpb24gYW5kIHZhbGlkYXRlQXNzZXJ0aW9uIGhhdmUgbm90IHlldCBiZWVuIGRldmVsb3BlZC5cclxuKlxyXG4qL1xyXG5jbGFzcyBJZGVudGl0eU1vZHVsZSB7XHJcblxyXG4gIC8qKlxyXG4gICogVGhpcyBpcyB0aGUgY29uc3RydWN0b3IgdG8gaW5pdGlhbGlzZSB0aGUgSWRlbnRpdHkgTW9kdWxlIGl0IGRvZXMgbm90IHJlcXVpcmUgYW55IGlucHV0LlxyXG4gICovXHJcbiAgY29uc3RydWN0b3IocnVudGltZVVSTCwgcnVudGltZUNhcGFiaWxpdGllcywgc3RvcmFnZU1hbmFnZXIpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKCFydW50aW1lVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ3J1bnRpbWVVUkwgaXMgbWlzc2luZy4nKTtcclxuICAgIGlmICghc3RvcmFnZU1hbmFnZXIpIHRocm93IG5ldyBFcnJvcignc3RvcmFnZU1hbmFnZXIgaXMgbWlzc2luZycpO1xyXG5cclxuICAgIF90aGlzLl9ydW50aW1lVVJMID0gcnVudGltZVVSTDtcclxuICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyID0gc3RvcmFnZU1hbmFnZXI7XHJcbiAgICBfdGhpcy5faWRtVVJMID0gX3RoaXMuX3J1bnRpbWVVUkwgKyAnL2lkbSc7XHJcbiAgICBfdGhpcy5fZ3VpVVJMID0gX3RoaXMuX3J1bnRpbWVVUkwgKyAnL2lkZW50aXR5LWd1aSc7XHJcbiAgICBfdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzID0gcnVudGltZUNhcGFiaWxpdGllcztcclxuXHJcbiAgICBfdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKF90aGlzLl9ydW50aW1lVVJMKS5kb21haW47XHJcblxyXG4gICAgLy90byBzdG9yZSBpdGVtcyB3aXRoIHRoaXMgZm9ybWF0OiB7aWRlbnRpdHk6IGlkZW50aXR5VVJMLCB0b2tlbjogdG9rZW5JRH1cclxuICAgIF90aGlzLmlkZW50aXRpZXMgPSBbXTtcclxuICAgIF90aGlzLmVtYWlsc0xpc3QgPSBbXTtcclxuICAgIGxldCBuZXdJZGVudGl0eSA9IG5ldyBJZGVudGl0eSgnZ3VpZCcsJ0hVTUFOJyk7XHJcbiAgICBfdGhpcy5pZGVudGl0eSA9IG5ld0lkZW50aXR5O1xyXG4gICAgX3RoaXMuY3J5cHRvID0gbmV3IENyeXB0bygpO1xyXG5cclxuICAgIC8vc3RvcmVzIHRoZSBhc3NvY2lhdGlvbiBvZiB0aGUgZGF0YU9iamVjdCBhbmQgdGhlIEh5cGVydHkgcmVnaXN0ZXJlZCB3aXRoaW5cclxuICAgIF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHkgPSB7fTtcclxuXHJcbiAgICAvLyBoYXNoVGFibGUgdG8gc3RvcmUgYWxsIHRoZSBjcnlwdG8gaW5mb3JtYXRpb24gYmV0d2VlbiB0d28gaHlwZXJ0aWVzXHJcbiAgICBfdGhpcy5jaGF0S2V5cyA9IHt9O1xyXG5cclxuICAgIC8vIGhhc2hUYWJsZSB0byBzdG9yZSB0aGUgc3ltbWV0cmljIGtleXMgdG8gYmUgdXNlZCBpbiB0aGUgY2hhdCBncm91cFxyXG4gICAgX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzID0ge307XHJcblxyXG4gICAgLy9mYWlsc2FmZSB0byBlbmFibGUvZGlzYWJsZSBhbGwgdGhlIGNyaXB0b2dyYXBoaWMgZnVuY3Rpb25zXHJcbiAgICBfdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiA9IHRydWU7XHJcblxyXG4gICAgLy8gdmFyaWFibGUgdG8ga25vdyBpZiB0aGUgR1VJIGlzIGRlcGxveWVkIHRvIGNob29zZSB0aGUgaWRlbnRpdHkuIGlmIHRoZSByZWFsIEdVSSBpcyBub3QgZGVwbG95ZWQsIGEgZmFrZSBndWkgaXMgZGVwbG95ZWQgaW5zdGVhZC5cclxuICAgIF90aGlzLmd1aURlcGxveWVkID0gZmFsc2U7XHJcblxyXG4gICAgLy8gdmVyaWZpY2F0aW9uIG9mIG5vZGVKUywgYW5kIGluIGNhc2UgaXQgaXMgbm9kZUpTIHRoZW4gZGlzYWJsZSBlbmNyeXB0aW9uXHJcbiAgICAvLyBUT0RPIGltcHJvdmUgbGF0ZXIsIHRoaXMgZXhpc3RzIGJlY2F1c2UgdGhlIGNyeXB0byBsaWIgdXNlcyBicm93c2VyIGNyeXB0b2dyYXBoaWMgbWV0aG9kc1xyXG4gICAgLy9fdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiA9ICh3aW5kb3cpID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgIF90aGlzLl9sb2FkSWRlbnRpdGllcygpO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogcmV0dXJuIHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnlcclxuICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXNcclxuICAqL1xyXG4gIGdldCBtZXNzYWdlQnVzKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1cztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogU2V0IHRoZSBtZXNzYWdlQnVzIGluIHRoaXMgUmVnaXN0cnlcclxuICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXNcclxuICAqL1xyXG4gIHNldCBtZXNzYWdlQnVzKG1lc3NhZ2VCdXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiByZXR1cm4gdGhlIHJlZ2lzdHJ5IGluIHRoaXMgaWRNb2R1bGVcclxuICAqIEBwYXJhbSB7cmVnaXN0cnl9ICAgICAgICAgICByZWdpc3RyeVxyXG4gICovXHJcbiAgZ2V0IHJlZ2lzdHJ5KCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fcmVnaXN0cnk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFNldCB0aGUgcmVnaXN0cnkgaW4gdGhpcyBpZE1vZHVsZVxyXG4gICogQHBhcmFtIHtyZWdpc3RyeX0gICAgIHJlZ1xyXG4gICovXHJcbiAgc2V0IHJlZ2lzdHJ5KHJlZ2lzdHJ5KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIHJldHVybiBhbGwgdGhlIGlkZW50aXRpZXMgcmVnaXN0ZXJlZCB3aXRoaW4gYSBzZXNzaW9uIGJ5IGEgdXNlci5cclxuICAqIFRoZXNlIGlkZW50aXRpZXMgYXJlIHJldHVybmVkIGluIGFuIGFycmF5IGNvbnRhaW5pbmcgYSBKU09OIHBhY2thZ2UgZm9yIGVhY2ggdXNlciBpZGVudGl0eS5cclxuICAqIEByZXR1cm4ge0FycmF5PElkZW50aXRpZXM+fSAgICAgICAgIElkZW50aXRpZXNcclxuICAqL1xyXG4gIGdldElkZW50aXRpZXMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLmlkZW50aXRpZXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGdldHMgYWxsIHRoZSBpbmZvcm1hdGlvbiBmcm9tIGEgZ2l2ZW4gdXNlclVSTFxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgdXNlclVSTCAgICAgdXNlciB1cmxcclxuICAqIEByZXR1cm4ge0pTT059ICAgIGlkZW50aXR5ICAgIGlkZW50aXR5IGJ1bmRsZSBmcm9tIHRoZSB1c2VyVVJMXHJcbiAgKi9cclxuICBnZXRJZGVudGl0eSh1c2VyVVJMKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGZvciAobGV0IGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHtcclxuXHJcbiAgICAgIGxldCBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdO1xyXG4gICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHtcclxuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyAnaWRlbnRpdHkgbm90IGZvdW5kJztcclxuICB9XHJcblxyXG4gIF9sb2FkSWRlbnRpdGllcygpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuXHJcbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgnaWRNb2R1bGU6aWRlbnRpdGllcycpLnRoZW4oKGlkZW50aXRpZXMpID0+IHtcclxuXHJcbiAgICAgICAgaWYgKGlkZW50aXRpZXMpIHtcclxuICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMgPSBpZGVudGl0aWVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZXBsb3lHVUkoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMuZ3VpRGVwbG95ZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICogZ2V0IGEgVG9rZW4gdG8gYmUgYWRkZWQgdG8gYSBtZXNzYWdlXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICBmcm9tVVJMICAgICBvcmlnaW4gb2YgdGhlIG1lc3NhZ2VcclxuICAqIEBwYXJhbSAge1N0cmluZ30gIHRvVVJMICAgICB0YXJnZXQgb2YgdGhlIG1lc3NhZ2VcclxuICAqIEByZXR1cm4ge0pTT059ICAgIHRva2VuICAgIHRva2VuIHRvIGJlIGFkZGVkIHRvIHRoZSBtZXNzYWdlXHJcbiAgKi9cclxuXHJcbiAgZ2V0VG9rZW4oZnJvbVVSTCwgdG9VcmwpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIGZyb20tPicsIGZyb21VUkwsICcgIHRvLT4nLCB0b1VybCk7XHJcbiAgICAgIGlmICh0b1VybCAmJiB0b1VybC5zcGxpdCgnQCcpLmxlbmd0aCA+IDEpIHtcclxuLy8gICAgICAgIGNvbnNvbGUubG9nKCd0b1VybCcsIHRvVXJsKTtcclxuICAgICAgICBfdGhpcy5yZWdpc3RyeS5pc0xlZ2FjeSh0b1VybCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIGlzTEVHQUNZOiAnLCByZXN1bHQpO1xyXG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IHRva2VuID0gX3RoaXMuZ2V0QWNjZXNzVG9rZW4odG9VcmwpO1xyXG4gICAgICAgICAgICBpZiAodG9rZW4pXHJcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodG9rZW4pO1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRUb2tlbl0gTk8gSWRlbnRpdHkuLiBMb2dpbiBub3cnKTtcclxuICAgICAgICAgICAgbGV0IGRvbWFpbiA9IGdldFVzZXJJZGVudGl0eURvbWFpbih0b1VybCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIGRvbWFpbi0+JywgZG9tYWluKTtcclxuICAgICAgICAgICAgX3RoaXMuY2FsbEdlbmVyYXRlTWV0aG9kcyhkb21haW4pLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRUb2tlbl0gQ2FsbEdlbmVyYXRlbWV0aG9kcycsIHZhbHVlKTtcclxuICAgICAgICAgICAgICBsZXQgdG9rZW4gPSBfdGhpcy5nZXRBY2Nlc3NUb2tlbih0b1VybCk7XHJcbiAgICAgICAgICAgICAgaWYgKHRva2VuKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodG9rZW4pO1xyXG4gICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCgnTm8gQWNjZXNzIHRva2VuIGZvdW5kJyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCAoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBlcnJvciBDYWxsR2VuZXJhdGVtZXRob2RzJyk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5nZXRJZFRva2VuKGZyb21VUkwpLnRoZW4oZnVuY3Rpb24oaWRlbnRpdHkpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBnZXRJZFRva2VuJywgaWRlbnRpdHkpO1xyXG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5KTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIGVycm9yIG9uIGdldFRva2VuJywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBfdGhpcy5nZXRJZFRva2VuKGZyb21VUkwpLnRoZW4oZnVuY3Rpb24oaWRlbnRpdHkpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIGZyb20gZ2V0SWRUb2tlbicsIGlkZW50aXR5KTtcclxuICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5KTtcclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBnZXQgYW4gSWQgVG9rZW4gZm9yIGEgSHlwZXJ0eVVSTFxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgaHlwZXJ0eVVSTCAgICAgdGhlIEh5cGVydHkgYWRkcmVzc1xyXG4gICogQHJldHVybiB7SlNPTn0gICAgdG9rZW4gICAgSWQgdG9rZW4gdG8gYmUgYWRkZWQgdG8gdGhlIG1lc3NhZ2VcclxuICAqL1xyXG5cclxuXHJcbiAgZ2V0SWRUb2tlbihoeXBlcnR5VVJMKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBsZXQgc3BsaXRVUkwgPSBoeXBlcnR5VVJMLnNwbGl0KCc6Ly8nKTtcclxuICAgICAgaWYgKHNwbGl0VVJMWzBdICE9PSAnaHlwZXJ0eScpIHtcclxuXHJcbiAgICAgICAgX3RoaXMuX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdChoeXBlcnR5VVJMKS50aGVuKChyZXR1cm5lZEh5cGVydHlVUkwpID0+IHtcclxuICAgICAgICAgIGxldCB1c2VyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHJldHVybmVkSHlwZXJ0eVVSTCk7XHJcblxyXG4gICAgICAgICAgaWYgKHVzZXJVUkwpIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICBsZXQgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTtcclxuICAgICAgICAgICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5Lm1lc3NhZ2VJbmZvKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoJ25vIGlkZW50aXR5IHdhcyBmb3VuZCAnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdubyBpZGVudGl0eSB3YXMgZm91bmQ6ICcsIHJlYXNvbik7XHJcbiAgICAgICAgICByZWplY3QocmVhc29uKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgdXNlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKTtcclxuICAgICAgICBpZiAodXNlclVSTCkge1xyXG5cclxuICAgICAgICAgIGZvciAobGV0IGluZGV4IGluIF90aGlzLmlkZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgbGV0IGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07XHJcbiAgICAgICAgICAgIGlmIChpZGVudGl0eS5pZGVudGl0eSA9PT0gdXNlclVSTCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5Lm1lc3NhZ2VJbmZvKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBpZGVudGl0eSB3YXMgZm91bmQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZ2V0IGFuIEFjY2VzcyBUb2tlbiBmb3IgYSBsZWdhY3lVUkxcclxuICAqIEBwYXJhbSAge1N0cmluZ30gIGxlZ2FjeVVSTCAgICAgdGhlIGxlZ2FjeSBhZGRyZXNzXHJcbiAgKiBAcmV0dXJuIHtKU09OfSAgICB0b2tlbiAgICBBY2Nlc3MgdG9rZW4gdG8gYmUgYWRkZWQgdG8gdGhlIG1lc3NhZ2VcclxuICAqL1xyXG5cclxuICBnZXRBY2Nlc3NUb2tlbih1cmwpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gIC8qICBsZXQgdXJsU3BsaXQgPSB1cmwuc3BsaXQoJy4nKTtcclxuICAgIGxldCBsZW5ndGggPSB1cmxTcGxpdC5sZW5ndGg7Ki9cclxuXHJcbiAgICBsZXQgZG9tYWluVG9DaGVjayA9IGRpdmlkZVVSTCh1cmwpLmRvbWFpbjtcclxuXHJcbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XHJcbiAgICAgIGxldCBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdO1xyXG4gICAgICBpZiAoaWRlbnRpdHkuaGFzT3duUHJvcGVydHkoJ2ludGVyd29ya2luZycpICYmIGlkZW50aXR5LmludGVyd29ya2luZy5kb21haW4gPT09IGRvbWFpblRvQ2hlY2spIHtcclxuICAgICAgICByZXR1cm4gaWRlbnRpdHkuaW50ZXJ3b3JraW5nLmFjY2Vzc190b2tlbjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWRlbnRpdGllc1RvQ2hvb3NlKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBpZGVudGl0aWVzID0gX3RoaXMuZW1haWxzTGlzdDtcclxuICAgIGxldCBpZHBzID0gW3tkb21haW46ICdnb29nbGUuY29tJywgdHlwZTogJ2lkVG9rZW4nfSx7ZG9tYWluOiAnbWljcm9zb2Z0LmNvbScsIHR5cGU6ICdpZFRva2VuJ30sIHtkb21haW46ICdvcmFuZ2UuZnInLCB0eXBlOiAnaWRUb2tlbid9LCB7ZG9tYWluOiAnc2xhY2suY29tJywgdHlwZTogJ0xlZ2FjeSd9XTtcclxuXHJcbiAgICByZXR1cm4ge2lkZW50aXRpZXM6IGlkZW50aXRpZXMsIGlkcHM6IGlkcHN9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gYWxsIHRoZSB1c2VycyBVUkxzIHJlZ2lzdGVyZWQgd2l0aGluIGEgc2Vzc2lvblxyXG4gICogVGhlc2UgdXNlcnMgVVJMcyBhcmUgcmV0dXJuZWQgaW4gYW4gYXJyYXkgb2Ygc3RyaW5ncy5cclxuICAqIEBwYXJhbSAge0Jvb2xlYW59ICBlbWFpbEZvcm1hdCAoT3B0aW9uYWwpICAgYm9vbGVhbiB0byBpbmRpY2F0ZSB0byByZXR1cm4gaW4gZW1haWwgZm9ybWF0XHJcbiAgKiBAcmV0dXJuIHtBcnJheTxTdHJpbmc+fSAgICAgICAgIHVzZXJzXHJcbiAgKi9cclxuICBnZXRVc2Vyc0lEcyhlbWFpbEZvcm1hdCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCB1c2VycyA9IFtdO1xyXG5cclxuICAgIC8vaWYgcmVxdWVzdCBjb21lcyB3aXRoIHRoZSBlbWFpbEZvcm1hdCBvcHRpb24sIHRoZW4gY29udmVydCB1cmwgdG8gZW1haWwgZm9ybWF0XHJcbiAgICBsZXQgY29udmVydGVyID0gKGVtYWlsRm9ybWF0KSA/IGdldFVzZXJFbWFpbEZyb21VUkwgOiAodmFsdWUpID0+IHtyZXR1cm4gdmFsdWU7fTtcclxuXHJcbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XHJcbiAgICAgIGxldCBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdO1xyXG4gICAgICB1c2Vycy5wdXNoKGNvbnZlcnRlcihpZGVudGl0eS5pZGVudGl0eSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVzZXJzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gdGhlIHNlbGVjdGVkIElkZW50aXR5IHdpdGhpbiBhIHNlc3Npb25cclxuICAqIEByZXR1cm4ge0lkZW50aXR5fSAgICAgICAgaWRlbnRpdHkgICAgICAgICBpZGVudGl0eVxyXG4gICovXHJcbiAgZ2V0Q3VycmVudElkZW50aXR5KCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5jdXJyZW50SWRlbnRpdHk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIHNldCB0aGUgY3VycmVudCBJZGVudGl0eSB3aXRoIGEgZ2l2ZW4gSWRlbnRpdHlcclxuICAqIEBwYXJhbSB7SWRlbnRpdHl9ICAgICAgICBpZGVudGl0eSAgICAgICAgIGlkZW50aXR5XHJcbiAgKi9cclxuICBzZXRDdXJyZW50SWRlbnRpdHkoaWRlbnRpdHkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5jdXJyZW50SWRlbnRpdHkgPSBpZGVudGl0eTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gcmVtb3ZlIGFuIGlkZW50aXR5IGZyb20gdGhlIElkZW50aXRpZXMgYXJyYXlcclxuICAqIEBwYXJhbSB7U3RyaW5nfSAgICB1c2VySUQgICAgICB1c2VySURcclxuICAqL1xyXG4gIGRlbGV0ZUlkZW50aXR5KHVzZXJJRCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgdXNlclVSTCA9IGNvbnZlcnRUb1VzZXJVUkwodXNlcklEKTtcclxuXHJcbiAgICBmb3IgKGxldCBpZGVudGl0eSBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XHJcbiAgICAgIGlmIChfdGhpcy5pZGVudGl0aWVzW2lkZW50aXR5XS5pZGVudGl0eSA9PT0gdXNlclVSTCkge1xyXG4gICAgICAgIF90aGlzLmlkZW50aXRpZXMuc3BsaWNlKGlkZW50aXR5LCAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byB1bnJlZ2lzdGVyIGFuIGlkZW50aXR5IGZyb20gdGhlIGVtYWlsc0xpc3QgYXJyYXkgYW5kIG5vdCBzaG93IGluIHRvIHRoZSBHVUlcclxuICAqIEBwYXJhbSB7U3RyaW5nfSAgICBlbWFpbCAgICAgIGVtYWlsXHJcbiAgKi9cclxuICB1bnJlZ2lzdGVySWRlbnRpdHkoZW1haWwpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgZm9yIChsZXQgZSBpbiBfdGhpcy5lbWFpbHNMaXN0KSB7XHJcbiAgICAgIGlmIChfdGhpcy5lbWFpbHNMaXN0W2VdID09PSBlbWFpbCkge1xyXG4gICAgICAgIF90aGlzLmVtYWlsc0xpc3Quc3BsaWNlKGUsIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRoYXQgcmVzb2x2ZSBhbmQgY3JlYXRlIHRoZSBkb21haW5VUkwgaW4gY2FzZSBpdCBpcyBwcm92aWRlZCBvbmUuIElmIG5vdCwgcmVzb2x2ZSB0aGUgZGVmYXVsdCBkb21haW5VUkxcclxuICAqIEBwYXJhbSB7U3RyaW5nfSAgICAgaWRwRG9tYWluICAgICBpZHBEb21haW4gKE9wdGlvbmFsKVxyXG4gICovXHJcbiAgX3Jlc29sdmVEb21haW4oaWRwRG9tYWluKSB7XHJcbiAgICBpZiAoIWlkcERvbWFpbikge1xyXG4gICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAnZG9tYWluLWlkcDovLycgKyBpZHBEb21haW47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRoYXQgc2VuZHMgYSByZXF1ZXN0IHRvIHRoZSBHVUkgdXNpbmcgbWVzc2FnZXMuIFNlbmRzIGFsbCBpZGVudGl0aWVzIHJlZ2lzdGVyZWQgYW5kXHJcbiAgKiB0aGUgSWRwcyBzdXBwb3J0ZWQsIGFuZCByZXR1cm4gdGhlIGlkZW50aXR5L2lkcCByZWNlaXZlZCBieSB0aGUgR1VJXHJcbiAgKiBAcGFyYW0ge0FycmF5PGlkZW50aXR5Pn0gIGlkZW50aXRpZXMgICAgICBsaXN0IG9mIGlkZW50aXRpaWVzXHJcbiAgKiBAcGFyYW0ge0FycmF5PFN0cmluZz59ICAgIGlkcHMgICAgICAgICAgICBsaXN0IG9mIGlkcHMgdG8gYXV0aGVudGljYXRlXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgIHJldHVybnMgYSBjaG9zZW4gaWRlbnRpdHkgb3IgaWRwXHJcbiAgKi9cclxuICByZXF1ZXN0SWRlbnRpdHlUb0dVSShpZGVudGl0aWVzLCBpZHBzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG5cclxuICAgICAgLy9jb25kaXRpb24gdG8gY2hlY2sgaWYgdGhlIHJlYWwgR1VJIGlzIGRlcGxveWVkLiBJZiBub3QsIGRlcGxveXMgYSBmYWtlIGd1aVxyXG4gICAgICBpZiAoX3RoaXMuZ3VpRGVwbG95ZWQgPT09IGZhbHNlKSB7XHJcblxyXG4gICAgICAgIGxldCBndWlGYWtlID0gbmV3IEd1aUZha2UoX3RoaXMuX2d1aVVSTCwgX3RoaXMuX21lc3NhZ2VCdXMpO1xyXG4gICAgICAgIF90aGlzLmd1aUZha2UgPSBndWlGYWtlO1xyXG4gICAgICAgIF90aGlzLmd1aURlcGxveWVkID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IG1lc3NhZ2UgPSB7dHlwZTonY3JlYXRlJywgdG86IF90aGlzLl9ndWlVUkwsIGZyb206IF90aGlzLl9pZG1VUkwsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keToge3ZhbHVlOiB7aWRlbnRpdGllczogaWRlbnRpdGllcywgaWRwczogaWRwc319fTtcclxuXHJcbiAgICAgIGxldCBpZCA9IF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xyXG5cclxuICAgICAgLy9hZGQgbGlzdGVuZXIgd2l0aG91dCB0aW1vdXRcclxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkUmVzcG9uc2VMaXN0ZW5lcihfdGhpcy5faWRtVVJMLCBpZCwgbXNnID0+IHtcclxuICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5yZW1vdmVSZXNwb25zZUxpc3RlbmVyKF90aGlzLl9pZG1VUkwsIGlkKTtcclxuXHJcbiAgICAgICAgaWYgKG1zZy5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgbGV0IHNlbGVjdGVkSWRlbnRpdHkgPSBtc2cuYm9keTtcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2VsZWN0ZWRJZGVudGl0eTogJywgc2VsZWN0ZWRJZGVudGl0eS52YWx1ZSk7XHJcbiAgICAgICAgICByZXNvbHZlKHNlbGVjdGVkSWRlbnRpdHkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIHJlcXVlc3RpbmcgYW4gaWRlbnRpdHkgdG8gdGhlIEdVSScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG9wZW5Qb3B1cCh1cmxyZWNlaXZlZCkge1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBsZXQgd2luID0gd2luZG93Lm9wZW4odXJscmVjZWl2ZWQsICdvcGVuSURyZXF1ZXN0JywgJ3dpZHRoPTgwMCwgaGVpZ2h0PTYwMCcpO1xyXG4gICAgICBpZiAod2luZG93LmNvcmRvdmEpIHtcclxuICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0JywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgbGV0IHVybCA9IGUudXJsO1xyXG4gICAgICAgICAgbGV0IGNvZGUgPSAvXFwmY29kZT0oLispJC8uZXhlYyh1cmwpO1xyXG4gICAgICAgICAgbGV0IGVycm9yID0gL1xcJmVycm9yPSguKykkLy5leGVjKHVybCk7XHJcblxyXG4gICAgICAgICAgaWYgKGNvZGUgfHwgZXJyb3IpIHtcclxuICAgICAgICAgICAgd2luLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUodXJsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBsZXQgcG9sbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAod2luLmNsb3NlZCkge1xyXG4gICAgICAgICAgICAgIHJlamVjdCgnU29tZSBlcnJvciBvY2N1cmVkIHdoZW4gdHJ5aW5nIHRvIGdldCBpZGVudGl0eS4nKTtcclxuICAgICAgICAgICAgICBjbGVhckludGVydmFsKHBvbGxUaW1lcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh3aW4uZG9jdW1lbnQuVVJMLmluZGV4T2YoJ2lkX3Rva2VuJykgIT09IC0xIHx8IHdpbi5kb2N1bWVudC5VUkwuaW5kZXhPZihsb2NhdGlvbi5vcmlnaW4pICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHBvbGxUaW1lcik7XHJcbiAgICAgICAgICAgICAgbGV0IHVybCA9ICAgd2luLmRvY3VtZW50LlVSTDtcclxuXHJcbiAgICAgICAgICAgICAgd2luLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSh1cmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgNTAwKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRoYXQgZmV0Y2ggYW4gaWRlbnRpdHlBc3NlcnRpb24gZnJvbSBhIHVzZXIuXHJcbiAgKlxyXG4gICogQHJldHVybiB7SWRBc3NlcnRpb259ICAgICAgICAgICAgICBJZEFzc2VydGlvblxyXG4gICovXHJcbiAgZ2V0SWRlbnRpdHlBc3NlcnRpb24oaWRlbnRpZmllciwgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGlkcERvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcclxuXHJcbiAgICAgIC8vQ0hFQ0sgd2hldGhlciBpcyBicm93c2VyIGVudmlyb25tZW50IG9yIG5vZGVqc1xyXG4gICAgICAvL2lmIGl0IGlzIGJyb3dzZXIsIHRoZW4gY3JlYXRlIGEgZmFrZSBpZGVudGl0eVxyXG5cclxuICAgICAgX3RoaXMucnVudGltZUNhcGFiaWxpdGllcy5pc0F2YWlsYWJsZSgnYnJvd3NlcicpLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdydW50aW1lIGJyb3dzZXIgaWRlbnRpdHkgYWNxdWlzaXRpb24gJywgcmVzdWx0KTtcclxuXHJcbiAgICAgICAgaWYgKCFyZXN1bHQpIHJldHVybjtcclxuXHJcbiAgICAgICAgbGV0IGlkZW50aXRpZXNJbmZvID0gX3RoaXMuZ2V0SWRlbnRpdGllc1RvQ2hvb3NlKCk7XHJcblxyXG4gICAgICAgIF90aGlzLnJlcXVlc3RJZGVudGl0eVRvR1VJKGlkZW50aXRpZXNJbmZvLmlkZW50aXRpZXMsIGlkZW50aXRpZXNJbmZvLmlkcHMpLnRoZW4odmFsdWUgPT4ge1xyXG5cclxuICAgICAgICAgIGlmICh2YWx1ZS50eXBlID09PSAnaWRlbnRpdHknKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgY2hvc2VuSUQgPSBnZXRVc2VyVVJMRnJvbUVtYWlsKHZhbHVlLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJldHVybnMgdGhlIGlkZW50aXR5IGluZm8gZnJvbSB0aGUgY2hvc2VuIGlkXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gX3RoaXMuaWRlbnRpdGllcykge1xyXG4gICAgICAgICAgICAgIGlmIChfdGhpcy5pZGVudGl0aWVzW2ldLmlkZW50aXR5ID09PSBjaG9zZW5JRCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMuaWRlbnRpdGllc1tpXS5tZXNzYWdlSW5mbyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlamVjdCgnbm8gaWRlbnRpdHkgd2FzIGZvdW5kIC4nKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUudHlwZSA9PT0gJ2lkcCcpIHtcclxuXHJcbiAgICAgICAgICAgIF90aGlzLmNhbGxHZW5lcmF0ZU1ldGhvZHModmFsdWUudmFsdWUsIG9yaWdpbikudGhlbigodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIEdVSSByZWNlaXZlZCBtZXNzYWdlLicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIG9uIGlkZW50aXR5IGFjcXVpc2l0aW9uICcsIGVycm9yKTtcclxuICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIF90aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMuaXNBdmFpbGFibGUoJ25vZGUnKS50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnbm9kZSBpZGVudGl0eSBhY3F1aXNpdGlvbiAnLCByZXN1bHQpO1xyXG5cclxuICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAoX3RoaXMuY3VycmVudElkZW50aXR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIC8vVE9ETyB2ZXJpZnkgd2hldGhlciB0aGUgdG9rZW4gaXMgc3RpbGwgdmFsaWQgb3Igbm90LlxyXG4gICAgICAgICAgLy8gc2hvdWxkIGJlIG5lZWRlZCB0byBtYWtlIGZ1cnRoZXIgcmVxdWVzdHMsIHRvIG9idGFpbiBhIHZhbGlkIHRva2VuXHJcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShfdGhpcy5jdXJyZW50SWRlbnRpdHkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0SWRlbnRpdHlBc3NlcnRpb24gZm9yIG5vZGVqcycpO1xyXG4gICAgICAgICAgbGV0IHJhbmRvbU51bWJlciA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkgKyAxKTtcclxuICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHtcclxuICAgICAgICAgICAgYXNzZXJ0aW9uOiAnYXNzZXJ0aW9uJyxcclxuICAgICAgICAgICAgaWRwOidub2RlanMnLFxyXG4gICAgICAgICAgICB1c2VyUHJvZmlsZToge1xyXG4gICAgICAgICAgICAgIGF2YXRhcjogJ2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tV2FDcmpWTU1WLVEvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQXMvOE9sVnFDcFNCOWMvcGhvdG8uanBnJyxcclxuICAgICAgICAgICAgICBjbjogJ3Rlc3Qgbm9kZWpzJyxcclxuICAgICAgICAgICAgICB1c2VybmFtZTogJ25vZGVqcy0nICsgcmFuZG9tTnVtYmVyICsgJ0Bub2RlanMuY29tJyxcclxuICAgICAgICAgICAgICB1c2VyVVJMOiAndXNlcjovL25vZGVqcy5jb20vbm9kZWpzLScgKyByYW5kb21OdW1iZXJcclxuICAgICAgICAgICAgfX07XHJcbiAgICAgICAgICBfdGhpcy5jdXJyZW50SWRlbnRpdHkgPSBpZGVudGl0eUJ1bmRsZTtcclxuICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMucHVzaChpZGVudGl0eUJ1bmRsZSk7XHJcbiAgICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ2lkTW9kdWxlOmlkZW50aXRpZXMnLCAwLCBfdGhpcy5pZGVudGl0aWVzKS50aGVuKCgpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGlkZW50aXR5QnVuZGxlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igb24gaWRlbnRpdHkgYWNxdWlzaXRpb24gJywgZXJyb3IpO1xyXG4gICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjYWxsR2VuZXJhdGVNZXRob2RzKGlkcCwgb3JpZ2luKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBsZXQgcHVibGljS2V5O1xyXG4gICAgICBsZXQgdXNlcmtleVBhaXI7XHJcblxyXG4gICAgICAvL2dlbmVyYXRlcyB0aGUgUlNBIGtleSBwYWlyXHJcbiAgICAgIF90aGlzLmNyeXB0by5nZW5lcmF0ZVJTQUtleVBhaXIoKS50aGVuKGZ1bmN0aW9uKGtleVBhaXIpIHtcclxuXHJcbiAgICAgICAgcHVibGljS2V5ID0gYnRvYShrZXlQYWlyLnB1YmxpYyk7XHJcbiAgICAgICAgdXNlcmtleVBhaXIgPSBrZXlQYWlyO1xyXG4gICAgICAgIHJldHVybiBfdGhpcy5nZW5lcmF0ZUFzc2VydGlvbihwdWJsaWNLZXksIG9yaWdpbiwgJycsIHVzZXJrZXlQYWlyLCBpZHApO1xyXG5cclxuICAgICAgfSkudGhlbihmdW5jdGlvbih1cmwpIHtcclxuICAgICAgICByZXR1cm4gX3RoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocHVibGljS2V5LCBvcmlnaW4sIHVybCwgdXNlcmtleVBhaXIsIGlkcCk7XHJcblxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBvYnRhaW5pbmcgSWRlbnRpdHknKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZW5kR2VuZXJhdGVNZXNzYWdlKGNvbnRlbnRzLCBvcmlnaW4sIHVzZXJuYW1lSGludCwgaWRwRG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGRvbWFpbiA9IF90aGlzLl9yZXNvbHZlRG9tYWluKGlkcERvbWFpbik7XHJcbiAgICBsZXQgbWVzc2FnZTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBtZXNzYWdlID0ge3R5cGU6J2V4ZWN1dGUnLCB0bzogZG9tYWluLCBmcm9tOiBfdGhpcy5faWRtVVJMLCBib2R5OiB7cmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogJ2dlbmVyYXRlQXNzZXJ0aW9uJywgcGFyYW1zOiB7Y29udGVudHM6IGNvbnRlbnRzLCBvcmlnaW46IG9yaWdpbiwgdXNlcm5hbWVIaW50OiB1c2VybmFtZUhpbnR9fX07XHJcbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXMpID0+IHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gcmVzLmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdG9yZUlkZW50aXR5KHJlc3VsdCwga2V5UGFpcikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IHNwbGl0ZWRBc3NlcnRpb24gPSByZXN1bHQuYXNzZXJ0aW9uLnNwbGl0KCcuJyk7XHJcbiAgICAgIGxldCBhc3NlcnRpb25QYXJzZWQ7XHJcblxyXG4gICAgICAvL3ZlcmlmeSBpZiB0aGUgdG9rZW4gY29udGFpbnMgdGhlIDMgY29tcG9uZW50cywgb3IganVzdCB0aGUgYXNzZXJ0aW9uXHJcbiAgICAgIGlmIChzcGxpdGVkQXNzZXJ0aW9uWzFdKSB7XHJcbiAgICAgICAgYXNzZXJ0aW9uUGFyc2VkID0gSlNPTi5wYXJzZShhdG9iKHNwbGl0ZWRBc3NlcnRpb25bMV0pKTtcclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgYXNzZXJ0aW9uUGFyc2VkID0gSlNPTi5wYXJzZShhdG9iKHJlc3VsdC5hc3NlcnRpb24pKTtcclxuICAgICAgfVxyXG4gICAgICBsZXQgaWRUb2tlbjtcclxuXHJcbiAgICAgIC8vVE9ETyByZW1vdmUgdGhlIHZlcmlmaWNhdGlvbiBhbmQgcmVtb3ZlIHRoZSB0b2tlbklESlNPTiBmcm9tIHRoZSBnb29nbGUgaWRwUHJveHk7XHJcbiAgICAgIGlmIChhc3NlcnRpb25QYXJzZWQudG9rZW5JREpTT04pIHtcclxuICAgICAgICBpZFRva2VuID0gYXNzZXJ0aW9uUGFyc2VkLnRva2VuSURKU09OO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlkVG9rZW4gPSBhc3NlcnRpb25QYXJzZWQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBlbWFpbCA9IGlkVG9rZW4uZW1haWwgfHwgaWRUb2tlbi5zdWI7XHJcblxyXG4gICAgICBsZXQgaWRlbnRpZmllciA9IGdldFVzZXJVUkxGcm9tRW1haWwoZW1haWwpO1xyXG5cclxuICAgICAgcmVzdWx0LmlkZW50aXR5ID0gaWRlbnRpZmllcjtcclxuXHJcbiAgICAgIF90aGlzLmlkZW50aXR5LmFkZElkZW50aXR5KHJlc3VsdCk7XHJcblxyXG4gICAgICAvLyBjaGVjayBpZiBleGlzdHMgYW55IGluZm9Ub2tlbiBpbiB0aGUgcmVzdWx0IHJlY2VpdmVkXHJcbiAgICAgIGxldCBpbmZvVG9rZW4gPSAocmVzdWx0LmluZm9Ub2tlbikgPyByZXN1bHQuaW5mb1Rva2VuIDoge307XHJcblxyXG4gICAgICBsZXQgY29tbW9uTmFtZSA9IGlkVG9rZW4ubmFtZSB8fCBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTtcclxuICAgICAgbGV0IHVzZXJQcm9maWxlQnVuZGxlID0ge3VzZXJuYW1lOiBlbWFpbCwgY246IGNvbW1vbk5hbWUsIGF2YXRhcjogaW5mb1Rva2VuLnBpY3R1cmUsIGxvY2FsZTogaW5mb1Rva2VuLmxvY2FsZSwgdXNlclVSTDogaWRlbnRpZmllcn07XHJcblxyXG4gICAgICAvL2NyZWF0aW9uIG9mIGEgbmV3IEpTT04gd2l0aCB0aGUgaWRlbnRpdHkgdG8gc2VuZCB2aWEgbWVzc2FnZXNcclxuICAgICAgbGV0IG5ld0lkZW50aXR5ID0ge3VzZXJQcm9maWxlOiB1c2VyUHJvZmlsZUJ1bmRsZSwgaWRwOiByZXN1bHQuaWRwLmRvbWFpbiwgYXNzZXJ0aW9uOiByZXN1bHQuYXNzZXJ0aW9ufTtcclxuICAgICAgcmVzdWx0Lm1lc3NhZ2VJbmZvID0gbmV3SWRlbnRpdHk7XHJcbiAgICAgIHJlc3VsdC5rZXlQYWlyID0ga2V5UGFpcjtcclxuXHJcbiAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IG5ld0lkZW50aXR5O1xyXG5cclxuICAgICAgLy92ZXJpZnkgaWYgdGhlIGlkIGFscmVhZHkgZXhpc3RzLiBJZiBhbHJlYWR5IGV4aXN0cyB0aGVuIGRvIG5vdCBhZGQgdG8gdGhlIGlkZW50aXRpZXMgbGlzdDtcclxuICAgICAgbGV0IGlkQWxyZWFkeUV4aXN0cyA9IGZhbHNlO1xyXG4gICAgICBsZXQgb2xkSWQ7XHJcbiAgICAgIGZvciAobGV0IGlkZW50aXR5IGluIF90aGlzLmlkZW50aXRpZXMpIHtcclxuICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0uaWRlbnRpdHkgPT09IHJlc3VsdC5pZGVudGl0eSkge1xyXG4gICAgICAgICAgaWRBbHJlYWR5RXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgIG9sZElkID0gX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0ubWVzc2FnZUluZm87XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaWRBbHJlYWR5RXhpc3RzKSB7XHJcbiAgICAgICAgcmVzb2x2ZShvbGRJZCk7XHJcbiAgICAgICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvL2NoZWNrIGlmIHRoZSBpZGVudGl0eSBleGlzdHMgaW4gZW1haWxMaXN0LCBpZiBub3QgYWRkIGl0XHJcbiAgICAgICAgLy9UaGlzIGlzIHVzZWZ1bCBpZiBhbiBpZGVudGl0eSB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkIGJ1dCB3YXMgbGF0ZXIgdW5yZWdpc3RlcmVkXHJcbiAgICAgICAgZm9yIChsZXQgaSBpbiBfdGhpcy5lbWFpbHNMaXN0KSB7XHJcbiAgICAgICAgICBpZiAoX3RoaXMuZW1haWxzTGlzdFtpXSA9PT0gZW1haWwpIHtcclxuICAgICAgICAgICAgZXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZXhpc3RzKSB7XHJcbiAgICAgICAgICBfdGhpcy5lbWFpbHNMaXN0LnB1c2goZW1haWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgX3RoaXMuZW1haWxzTGlzdC5wdXNoKGVtYWlsKTtcclxuICAgICAgICBfdGhpcy5pZGVudGl0aWVzLnB1c2gocmVzdWx0KTtcclxuICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ2lkTW9kdWxlOmlkZW50aXRpZXMnLCAwLCBfdGhpcy5pZGVudGl0aWVzKS50aGVuKCgpID0+IHtcclxuXHJcbiAgICAgICAgICByZXNvbHZlKG5ld0lkZW50aXR5KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBSZXF1ZXN0cyB0aGUgSWRwUHJveHkgZnJvbSBhIGdpdmVuIERvbWFpbiBmb3IgYW4gaWRlbnRpdHlBc3NlcnRpb25cclxuICAqXHJcbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IGNvbnRlbnRzICAgICBjb250ZW50c1xyXG4gICogQHBhcmFtICB7RE9NU3RyaW5nfSBvcmlnaW4gICAgICAgb3JpZ2luXHJcbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IHVzZXJuYW1lSGludCB1c2VybmFtZUhpbnRcclxuICAqIEBwYXJhbSAge0pTT059ICAgICAga2V5UGFpciAgICAgICB1c2VyIGtleVBhaXJcclxuICAqIEByZXR1cm4ge0lkQXNzZXJ0aW9ufSAgICAgICAgICAgICAgSWRBc3NlcnRpb25cclxuICAqL1xyXG4gIGdlbmVyYXRlQXNzZXJ0aW9uKGNvbnRlbnRzLCBvcmlnaW4sIHVzZXJuYW1lSGludCwga2V5UGFpciwgaWRwRG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdnZW5lcmF0ZUFzc2VydGlvbicpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMuc2VuZEdlbmVyYXRlTWVzc2FnZShjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGlkcERvbWFpbikudGhlbigocmVzdWx0KSA9PiB7XHJcblxyXG4gICAgICAgIGlmIChyZXN1bHQubG9naW5VcmwpIHtcclxuXHJcbiAgICAgICAgICBfdGhpcy5vcGVuUG9wdXAocmVzdWx0LmxvZ2luVXJsKS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgIH0sIChlcnIpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCkge1xyXG5cclxuICAgICAgICAgIF90aGlzLnN0b3JlSWRlbnRpdHkocmVzdWx0LCBrZXlQYWlyKS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgIH0sIChlcnIpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gb2J0YWluaW5nIGlkZW50aXR5IGluZm9ybWF0aW9uJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogT1RIRVIgVVNFUidTIElERU5USVRZXHJcbiAgKi9cclxuXHJcbiAgLyoqXHJcbiAgKiBSZXF1ZXN0cyB0aGUgSWRwUHJveHkgZnJvbSBhIGdpdmVuIERvbWFpbiB0byB2YWxpZGF0ZSBhbiBJZGVudGl0eUFzc2VydGlvblxyXG4gICogUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgcmVzdWx0IGZyb20gdGhlIHZhbGlkYXRpb24uXHJcbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IGFzc2VydGlvblxyXG4gICogQHBhcmFtICB7RE9NU3RyaW5nfSBvcmlnaW4gICAgICAgb3JpZ2luXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgIFByb21pc2UgICAgICAgICBwcm9taXNlIHdpdGggdGhlIHJlc3VsdCBmcm9tIHRoZSB2YWxpZGF0aW9uXHJcbiAgKi9cclxuICB2YWxpZGF0ZUFzc2VydGlvbihhc3NlcnRpb24sIG9yaWdpbiwgaWRwRG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBkb21haW4gPSBfdGhpcy5fcmVzb2x2ZURvbWFpbihpZHBEb21haW4pO1xyXG5cclxuICAgIGxldCBtZXNzYWdlID0ge3R5cGU6J2V4ZWN1dGUnLCB0bzogZG9tYWluLCBmcm9tOiBfdGhpcy5faWRtVVJMLCBib2R5OiB7cmVzb3VyY2U6ICdpZGVudGl0eScsIG1ldGhvZDogJ3ZhbGlkYXRlQXNzZXJ0aW9uJyxcclxuICAgICAgICAgICAgcGFyYW1zOiB7YXNzZXJ0aW9uOiBhc3NlcnRpb24sIG9yaWdpbjogb3JpZ2lufX19O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIGlmIChyZXN1bHQuYm9keS5jb2RlID09PSAyMDApIHtcclxuICAgICAgICAgIHJlc29sdmUocmVzdWx0LmJvZHkudmFsdWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ2Vycm9yJywgcmVzdWx0LmJvZHkuY29kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5jcnlwdE1lc3NhZ2UobWVzc2FnZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBjb25zb2xlLmxvZygnZW5jcnlwdCBtZXNzYWdlICcpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgbGV0IGlzSGFuZFNoYWtlVHlwZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2hhbmRzaGFrZSc7XHJcblxyXG4gICAgICAvL2lmIGlzIG5vdCB0byBhcHBseSBlbmNyeXB0aW9uLCB0aGVuIHJldHVybnMgcmVzb2x2ZVxyXG4gICAgICBpZiAoIV90aGlzLmlzVG9Vc2VFbmNyeXB0aW9uICYmICFpc0hhbmRTaGFrZVR5cGUpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZW5jcnlwdGlvbiBkaXNhYmxlZCcpO1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgbG9naWMgYW5kIG1vdmUgaXQgdG8gYSB1dGlsIGZ1bmN0aW9uXHJcbiAgICAgIGxldCBzcGxpdGVkVG9VUkwgPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7XHJcbiAgICAgIGxldCBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXTtcclxuICAgICAgaWYgKHNwbGl0ZWRUb1VSTC5sZW5ndGggPiA2KSB7XHJcbiAgICAgICAgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM10gKyAnLycgKyBzcGxpdGVkVG9VUkxbNF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBpc1RvRGF0YU9iamVjdCA9IGlzRGF0YU9iamVjdFVSTChkYXRhT2JqZWN0VVJMKTtcclxuICAgICAgbGV0IGlzVG9MZWdhY3lJZGVudGl0eSA9IGlzTGVnYWN5KG1lc3NhZ2UudG8pO1xyXG4gICAgICBsZXQgaXNGcm9tSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JztcclxuICAgICAgbGV0IGlzVG9IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JztcclxuXHJcbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnKSB7XHJcbiAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGlzVG9MZWdhY3lJZGVudGl0eSkge1xyXG4gICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoaXNGcm9tSHlwZXJ0eSAmJiBpc1RvSHlwZXJ0eSkge1xyXG4gICAgICAgIGxldCB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihtZXNzYWdlLmZyb20pO1xyXG4gICAgICAgIGlmICh1c2VyVVJMKSB7XHJcblxyXG4gICAgICAgICAgLy8gY2hlY2sgaWYgZXhpc3RzIGFueSBrZXlzIGJldHdlZW4gdHdvIHVzZXJzXHJcbiAgICAgICAgICBsZXQgY2hhdEtleXMgPSBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLmZyb20gKyAnPC0+JyArIG1lc3NhZ2UudG9dO1xyXG4gICAgICAgICAgaWYgKCFjaGF0S2V5cykge1xyXG4gICAgICAgICAgICBjaGF0S2V5cyA9IF90aGlzLl9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY3JlYXRlQ2hhdEtleSBlbmNyeXB0JywgbWVzc2FnZS5mcm9tICsgbWVzc2FnZS50byk7XHJcbiAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b10gPSBjaGF0S2V5cztcclxuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlID0gJ3N0YXJ0SGFuZFNoYWtlJztcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoY2hhdEtleXMuYXV0aGVudGljYXRlZCAmJiAhaXNIYW5kU2hha2VUeXBlKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpO1xyXG4gICAgICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgbWVzc2FnZS5ib2R5LnZhbHVlLCBpdikudGhlbihlbmNyeXB0ZWRWYWx1ZSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBtZXNzYWdlLmJvZHkudmFsdWUgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xyXG5cclxuICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSkudGhlbihoYXNoID0+IHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoICcsIGhhc2gpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0ge2l2OiBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KSwgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2gpfTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIGlzIGEgaGFuZHNoYWtlIG1lc3NhZ2UsIGp1c3QgcmVzb2x2ZSBpdFxyXG4gICAgICAgICAgfSBlbHNlIGlmIChpc0hhbmRTaGFrZVR5cGUpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGVsc2UsIHN0YXJ0cyBhIG5ldyBoYW5kc2hha2UgcHJvdG9jb2xcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9kb0hhbmRTaGFrZVBoYXNlKG1lc3NhZ2UsIGNoYXRLZXlzKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IHZhbHVlLmNoYXRLZXlzO1xyXG5cclxuICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh2YWx1ZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICByZWplY3QoJ2VuY3J5cHQgaGFuZHNoYWtlIHByb3RvY29sIHBoYXNlICcpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAvL2lmIGZyb20gaHlwZXJ0eSB0byBhIGRhdGFPYmplY3RVUkxcclxuICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2RhdGFPYmplY3QgdmFsdWUgdG8gZW5jcnlwdDogJywgbWVzc2FnZS5ib2R5LnZhbHVlKTtcclxuXHJcbiAgICAgICAgbGV0IGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07XHJcblxyXG4gICAgICAgIC8vaWYgbm8ga2V5IGV4aXN0cywgY3JlYXRlIGEgbmV3IG9uZSBpZiBpcyB0aGUgcmVwb3J0ZXIgb2YgZGF0YU9iamVjdFxyXG4gICAgICAgIGlmICghZGF0YU9iamVjdEtleSkge1xyXG4gICAgICAgICAgbGV0IGlzSHlwZXJ0eVJlcG9ydGVyID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGRhdGFPYmplY3RVUkwpO1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2lzSHlwZXJ0eVJlcG9ydGVyOicsIGlzSHlwZXJ0eVJlcG9ydGVyKTtcclxuICAgICAgICAgIC8vIGlmIHRoZSBoeXBlcnR5IGlzIHRoZSByZXBvcnRlciBvZiB0aGUgZGF0YU9iamVjdCB0aGVuIGdlbmVyYXRlcyBhIHNlc3Npb24ga2V5XHJcbiAgICAgICAgICBpZiAoaXNIeXBlcnR5UmVwb3J0ZXIgJiYgaXNIeXBlcnR5UmVwb3J0ZXIgPT09IG1lc3NhZ2UuZnJvbSkge1xyXG5cclxuICAgICAgICAgICAgbGV0IHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTtcclxuICAgICAgICAgICAgX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdID0ge3Nlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlfTtcclxuXHJcbiAgICAgICAgICAgIGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2NoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBzZXNzaW9uIGtleSBmb3IgdGhlIGNoYXQgcm9vbVxyXG4gICAgICAgIGlmIChkYXRhT2JqZWN0S2V5KSB7XHJcblxyXG4gICAgICAgICAgLy8gYW5kIGlmIGlzIHRvIGFwcGx5IGVuY3J5cHRpb24sIGVuY3J5cHQgdGhlIG1lc3NhZ2VzXHJcbiAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleS5pc1RvRW5jcnlwdCkge1xyXG4gICAgICAgICAgICBsZXQgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpO1xyXG5cclxuICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBfdGhpcy5jcnlwdG8uZW5jb2RlKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UuYm9keS52YWx1ZSkpLCBpdikudGhlbihlbmNyeXB0ZWRWYWx1ZSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBtZXNzYWdlLmJvZHkudmFsdWUgKyBpdiwgZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5KTtcclxuXHJcbiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmhhc2hITUFDKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZmlsdGVyZWRNZXNzYWdlKS50aGVuKGhhc2ggPT4ge1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnaGFzaCAnLCBoYXNoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3VmFsdWUgPSB7dmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpLCBpdjogX3RoaXMuY3J5cHRvLmVuY29kZShpdiksIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCl9O1xyXG5cclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIGlmIG5vdCwganVzdCBzZW5kIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIHN0YXJ0IHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IHNlc3Npb24gS2V5XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnZmFpbGVkIHRvIGRlY3J5cHQgbWVzc2FnZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZWNyeXB0TWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0IG1lc3NhZ2UgJyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBsZXQgaXNIYW5kU2hha2VUeXBlID0gbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJztcclxuXHJcbiAgICAgIC8vaWYgaXMgbm90IHRvIGFwcGx5IGVuY3J5cHRpb24sIHRoZW4gcmV0dXJucyByZXNvbHZlXHJcbiAgICAgIGlmICghX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gJiYgIWlzSGFuZFNoYWtlVHlwZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0aW9uIGRpc2FibGVkJyk7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyBsb2dpYyBhbmQgbW92ZSBpdCB0byBhIHV0aWwgZnVuY3Rpb25cclxuXHJcbiAgICAgIGxldCBzcGxpdGVkVG9VUkwgPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7XHJcbiAgICAgIGxldCBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXTtcclxuICAgICAgaWYgKHNwbGl0ZWRUb1VSTC5sZW5ndGggPiA2KSB7XHJcbiAgICAgICAgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM10gKyAnLycgKyBzcGxpdGVkVG9VUkxbNF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBpc1RvRGF0YU9iamVjdCA9IGlzRGF0YU9iamVjdFVSTChkYXRhT2JqZWN0VVJMKTtcclxuICAgICAgbGV0IGlzRnJvbUh5cGVydHkgPSBkaXZpZGVVUkwobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eSc7XHJcbiAgICAgIGxldCBpc1RvSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLnRvKS50eXBlID09PSAnaHlwZXJ0eSc7XHJcblxyXG4gICAgICBpZiAobWVzc2FnZS50eXBlID09PSAndXBkYXRlJykge1xyXG4gICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vaXMgaXMgaHlwZXJ0eSB0byBoeXBlcnR5IGNvbW11bmljYXRpb25cclxuICAgICAgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0h5cGVydHkpIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdkZWNyeXB0IGh5cGVydHkgdG8gaHlwZXJ0eScpO1xyXG4gICAgICAgIGxldCB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihtZXNzYWdlLnRvKTtcclxuICAgICAgICBpZiAodXNlclVSTCkge1xyXG5cclxuICAgICAgICAgIGxldCBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW21lc3NhZ2UudG8gKyAnPC0+JyArIG1lc3NhZ2UuZnJvbV07XHJcbiAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzID0gX3RoaXMuX25ld0NoYXRDcnlwdG8obWVzc2FnZSwgdXNlclVSTCwgJ2RlY3J5cHQnKTtcclxuICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXSA9IGNoYXRLZXlzO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkICYmICFpc0hhbmRTaGFrZVR5cGUpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gSlNPTi5wYXJzZShtZXNzYWdlLmJvZHkudmFsdWUpO1xyXG4gICAgICAgICAgICBsZXQgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLml2KTtcclxuICAgICAgICAgICAgbGV0IGRhdGEgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLnZhbHVlKTtcclxuICAgICAgICAgICAgbGV0IGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLmhhc2gpO1xyXG4gICAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGRhdGEsIGl2KS50aGVuKGRlY3J5cHRlZERhdGEgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWQgdmFsdWUgJywgZGVjcnlwdGVkRGF0YSk7XHJcbiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gZGVjcnlwdGVkRGF0YTtcclxuXHJcbiAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7XHJcblxyXG4gICAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXN1bHQgb2YgaGFzaCB2ZXJpZmljYXRpb24hICcsIHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzSGFuZFNoYWtlVHlwZSkge1xyXG4gICAgICAgICAgICBfdGhpcy5fZG9IYW5kU2hha2VQaGFzZShtZXNzYWdlLCBjaGF0S2V5cykudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG5cclxuICAgICAgICAgICAgICAvL2lmIGl0IHdhcyBzdGFydGVkIGJ5IGRvTXV0dWFsQXV0aGVudGljYXRpb24gdGhlbiBlbmRzIHRoZSBwcm90b2NvbFxyXG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ2hhbmRTaGFrZUVuZCcpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgnZGVjcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIGlmIHdhcyBzdGFydGVkIGJ5IGEgbWVzc2FnZSwgdGhlbiByZXNlbmQgdGhhdCBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UudG8gKyAnPC0+JyArIG1lc3NhZ2UuZnJvbV0gPSB2YWx1ZS5jaGF0S2V5cztcclxuICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KCdkZWNyeXB0IGhhbmRzaGFrZSBwcm90b2NvbCBwaGFzZSAnKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KCd3cm9uZyBtZXNzYWdlIGRvIGRlY3J5cHQnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdlcnJvciBvbiBkZWNyeXB0IG1lc3NhZ2UnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vaWYgZnJvbSBoeXBlcnR5IHRvIGEgZGF0YU9iamVjdFVSTFxyXG4gICAgICB9IGVsc2UgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0RhdGFPYmplY3QpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZGF0YU9iamVjdCB2YWx1ZSB0byBkZWNyeXB0OiAnLCBtZXNzYWdlLmJvZHkpO1xyXG5cclxuICAgICAgICBsZXQgZGF0YU9iamVjdEtleSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkpIHtcclxuXHJcbiAgICAgICAgICAvL2NoZWNrIGlmIGlzIHRvIGFwcGx5IGVuY3J5cHRpb25cclxuICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5LmlzVG9FbmNyeXB0KSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJzZWRWYWx1ZSA9IEpTT04ucGFyc2UobWVzc2FnZS5ib2R5LnZhbHVlKTtcclxuICAgICAgICAgICAgbGV0IGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS5pdik7XHJcbiAgICAgICAgICAgIGxldCBlbmNyeXB0ZWRWYWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUocGFyc2VkVmFsdWUudmFsdWUpO1xyXG4gICAgICAgICAgICBsZXQgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUocGFyc2VkVmFsdWUuaGFzaCk7XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIGVuY3J5cHRlZFZhbHVlLCBpdikudGhlbihkZWNyeXB0ZWRWYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgbGV0IHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShhdG9iKGRlY3J5cHRlZFZhbHVlKSk7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRlZCBWYWx1ZSwnLCBwYXJzZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gcGFyc2VkVmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBwYXJzZWRWYWx1ZSArIGl2KTtcclxuXHJcbiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIGhhc2gpLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoIHZlcmlmaWNhdGlvbiEgJywgcmVzdWx0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvL2lmIG5vdCwganVzdCByZXR1cm4gdGhlIG1lc3NhZ2VcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcblxyXG4gICAgICAgICAgLy9yZWplY3QoJ25vIHNlc3Npb25LZXkgZm9yIGNoYXQgcm9vbSBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVqZWN0KCd3cm9uZyBtZXNzYWdlIHRvIGRlY3J5cHQnKTtcclxuICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZG9NdXR1YWxBdXRoZW50aWNhdGlvbihzZW5kZXIsIHJlY2VpdmVyKSB7XHJcbiAgICBjb25zb2xlLmxvZygnZG9NdXR1YWxBdXRoZW50aWNhdGlvbjogJywgc2VuZGVyLCByZWNlaXZlcik7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGRhdGFPYmplY3RVUkw7XHJcblxyXG4gICAgLy8gY2hlY2sgaWYgdGhlIHNlbmRlciBpcyBhIGRhdGFPYmplY3QgYW5kIGlmIHNvIHN0b3JlcyB0aGF0IHZhbHVlXHJcbiAgICBsZXQgcmVwb3J0ZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMoc2VuZGVyKTtcclxuICAgIGlmIChyZXBvcnRlclVSTCkge1xyXG4gICAgICBkYXRhT2JqZWN0VVJMID0gc2VuZGVyO1xyXG4gICAgICBzZW5kZXIgPSByZXBvcnRlclVSTDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0bzogcmVjZWl2ZXIsXHJcbiAgICAgIGZyb206IHNlbmRlcixcclxuICAgICAgY2FsbGJhY2s6IHVuZGVmaW5lZCxcclxuICAgICAgYm9keToge2hhbmRzaGFrZVBoYXNlOiAnc3RhcnRIYW5kU2hha2UnLCBpZ25vcmU6ICdpZ25vcmVNZXNzYWdlJ31cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgaWYgKCFzZW5kZXIgfHwgIXJlY2VpdmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlamVjdCgnc2VuZGVyIG9yIHJlY2VpdmVyIG1pc3Npbmcgb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgY2hhdEtleXMgPSBfdGhpcy5jaGF0S2V5c1tzZW5kZXIgKyAnPC0+JyArIHJlY2VpdmVyXTtcclxuICAgICAgbGV0IHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHNlbmRlcik7XHJcblxyXG4gICAgICBpZiAodXNlclVSTCkge1xyXG5cclxuICAgICAgICBpZiAoIWNoYXRLZXlzKSB7XHJcbiAgICAgICAgICAvLyBjYWxsYmFjayB0byByZXNvbHZlIHdoZW4gZmluaXNoIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb25cclxuICAgICAgICAgIGxldCByZXNvbHZlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYWxsYmFjayB2YWx1ZTonLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIG1zZy5jYWxsYmFjayA9IHJlc29sdmVkO1xyXG4gICAgICAgICAgbXNnLmRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMO1xyXG5cclxuICAgICAgICAgIGNoYXRLZXlzID0gX3RoaXMuX25ld0NoYXRDcnlwdG8obXNnLCB1c2VyVVJMKTtcclxuICAgICAgICAgIF90aGlzLmNoYXRLZXlzW3NlbmRlciArICc8LT4nICsgcmVjZWl2ZXJdID0gY2hhdEtleXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhdEtleXMuYXV0aGVudGljYXRlZCkge1xyXG5cclxuICAgICAgICAgIGxldCBzdGFydFNlc3Npb25LZXlFeGNoYW5nZSA9IHtcclxuICAgICAgICAgICAgdG86IHNlbmRlcixcclxuICAgICAgICAgICAgZnJvbTogcmVjZWl2ZXJcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBjaGF0S2V5cy5kYXRhT2JqZWN0VVJMID0gZGF0YU9iamVjdFVSTDtcclxuICAgICAgICAgIF90aGlzLl9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5KHN0YXJ0U2Vzc2lvbktleUV4Y2hhbmdlLCBjaGF0S2V5cykudGhlbih2YWx1ZSA9PiB7XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh2YWx1ZS5tZXNzYWdlKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSgnZXhjaGFuZ2Ugb2YgY2hhdCBzZXNzaW9uS2V5IGluaXRpYXRlZCcpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICBfdGhpcy5fZG9IYW5kU2hha2VQaGFzZShtc2csIGNoYXRLZXlzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVqZWN0KCdlcnJvciBvbiBkb011dHVhbEF1dGhlbnRpY2F0aW9uJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIF9kb0hhbmRTaGFrZVBoYXNlKG1lc3NhZ2UsIGNoYXRLZXlzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIC8vY29uc29sZS5sb2coJ2hhbmRzaGFrZVR5cGUnKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcclxuXHJcbiAgICAgIGxldCBoYW5kc2hha2VUeXBlID0gbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlO1xyXG4gICAgICBsZXQgaXY7XHJcbiAgICAgIGxldCBoYXNoO1xyXG4gICAgICBsZXQgdmFsdWUgPSB7fTtcclxuICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZTtcclxuICAgICAgc3dpdGNoIChoYW5kc2hha2VUeXBlKSB7XHJcblxyXG4gICAgICAgIGNhc2UgJ3N0YXJ0SGFuZFNoYWtlJzpcclxuICAgICAgICAgIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpO1xyXG5cclxuICAgICAgICAgIGxldCBzdGFydEhhbmRTaGFrZU1zZyA9IHtcclxuICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXHJcbiAgICAgICAgICAgIHRvOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgICAgICBmcm9tOiBtZXNzYWdlLmZyb20sXHJcbiAgICAgICAgICAgIGJvZHk6IHtcclxuICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckhlbGxvJyxcclxuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2goc3RhcnRIYW5kU2hha2VNc2csIHVuZGVmaW5lZCwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xyXG5cclxuICAgICAgICAgIC8vIGNoZWNrIGlmIHdhcyB0aGUgZW5jcnlwdCBmdW5jdGlvbiBvciB0aGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uIHRoYXQgcmVxdWVzdCB0aGVcclxuICAgICAgICAgIC8vIHN0YXJ0IG9mIHRoZSBoYW5kU2hha2VQaGFzZS5cclxuICAgICAgICAgIGlmIChjaGF0S2V5cy5pbml0aWFsTWVzc2FnZSkge3Jlc29sdmUoe21lc3NhZ2U6IHN0YXJ0SGFuZFNoYWtlTXNnLCBjaGF0S2V5czogY2hhdEtleXN9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b10gPSBjaGF0S2V5cztcclxuICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2Uoc3RhcnRIYW5kU2hha2VNc2cpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzZW5kZXJIZWxsbyc6XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ3NlbmRlckhlbGxvJyk7XHJcbiAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSk7XHJcbiAgICAgICAgICBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20gPSBfdGhpcy5jcnlwdG8uZGVjb2RlKG1lc3NhZ2UuYm9keS52YWx1ZSk7XHJcbiAgICAgICAgICBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7XHJcblxyXG4gICAgICAgICAgbGV0IHNlbmRlckhlbGxvTXNnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcclxuICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcclxuICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcclxuICAgICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJIZWxsbycsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoY2hhdEtleXMua2V5cy50b1JhbmRvbSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHNlbmRlckhlbGxvTXNnLCB1bmRlZmluZWQsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcclxuICAgICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IHNlbmRlckhlbGxvTXNnLCBjaGF0S2V5czogY2hhdEtleXN9KTtcclxuXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncmVjZWl2ZXJIZWxsbyc6XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ3JlY2VpdmVySGVsbG8nKTtcclxuICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgIF90aGlzLnZhbGlkYXRlQXNzZXJ0aW9uKG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb24sIHVuZGVmaW5lZCwgbWVzc2FnZS5ib2R5LmlkZW50aXR5LmlkcCkudGhlbigodmFsdWUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vVE9ETyByZW1vdmUgbGF0ZXIgdGhpcyB2ZXJpZmljYXRpb24gYXMgc29vbiBhcyBhbGwgdGhlIElkUCBwcm94eSBhcmUgdXBkYXRlZCBpbiB0aGUgZXhhbXBsZVxyXG4gICAgICAgICAgICBsZXQgZW5jb2RlZHB1YmxpY0tleSA9ICh0eXBlb2YgdmFsdWUuY29udGVudHMgPT09ICdzdHJpbmcnKSA/IHZhbHVlLmNvbnRlbnRzIDogdmFsdWUuY29udGVudHMubm9uY2U7XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjZWl2ZXJQdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKGVuY29kZWRwdWJsaWNLZXkpO1xyXG4gICAgICAgICAgICBsZXQgcHJlbWFzdGVyU2VjcmV0ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUE1TKCk7XHJcbiAgICAgICAgICAgIGxldCB0b1JhbmRvbSA9IG1lc3NhZ2UuYm9keS52YWx1ZTtcclxuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLmFzc2VydGlvbiA9IG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb247XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXkgPSByZWNlaXZlclB1YmxpY0tleTtcclxuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnVzZXJJRCAgICA9IHZhbHVlLmNvbnRlbnRzLmVtYWlsO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICA9IF90aGlzLmNyeXB0by5kZWNvZGUodG9SYW5kb20pO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSA9IHByZW1hc3RlclNlY3JldDtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb25jYXRLZXkgPSBfdGhpcy5jcnlwdG8uY29uY2F0UE1Td2l0aFJhbmRvbXMocHJlbWFzdGVyU2VjcmV0LCBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tLCBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZU1hc3RlclNlY3JldChjb25jYXRLZXksICdtZXNzYWdlSGlzdG9yaWMnICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XHJcblxyXG4gICAgICAgICAgICAvL2dlbmVyYXRlIHRoZSBtYXN0ZXIga2V5XHJcbiAgICAgICAgICB9KS50aGVuKChtYXN0ZXJLZXkpID0+IHtcclxuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5tYXN0ZXJLZXkgPSBtYXN0ZXJLZXk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlS2V5cyhtYXN0ZXJLZXksICdrZXkgZXhwYW5zaW9uJyArIGNoYXRLZXlzLmtleXMudG9SYW5kb20gKyBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pO1xyXG5cclxuICAgICAgICAgICAgLy9nZW5lcmF0ZSB0aGUgc3ltbWV0cmljIGFuZCBoYXNoIGtleXNcclxuICAgICAgICAgIH0pLnRoZW4oKGtleXMpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMF0pO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMV0pO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzJdKTtcclxuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzNdKTtcclxuICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpO1xyXG4gICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2VTdHJ1Y3R1cmUgPSB7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXHJcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcclxuICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgICAgICAgIGJvZHk6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gaGFzaCB0aGUgdmFsdWUgYW5kIHRoZSBpdlxyXG4gICAgICAgICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlU3RydWN0dXJlLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKTtcclxuICAgICAgICAgIH0pLnRoZW4oKGhhc2gpID0+IHtcclxuICAgICAgICAgICAgdmFsdWUuaGFzaCA9IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCk7XHJcblxyXG4gICAgICAgICAgICAvL2VuY3J5cHQgdGhlIGRhdGFcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2snLCBpdik7XHJcbiAgICAgICAgICB9KS50aGVuKChlbmNyeXB0ZWREYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHZhbHVlLnN5bWV0cmljRW5jcnlwdGlvbiA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkRGF0YSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRSU0EoY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSwgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkpO1xyXG5cclxuICAgICAgICAgIH0pLnRoZW4oKGVuY3J5cHRlZFZhbHVlKSA9PiB7XHJcblxyXG4gICAgICAgICAgICB2YWx1ZS5hc3N5bWV0cmljRW5jcnlwdGlvbiA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2VTdHJ1Y3R1cmUgPSB7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXHJcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcclxuICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgICAgICAgIGJvZHk6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2VUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlU3RydWN0dXJlLCBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5zaWduUlNBKGNoYXRLZXlzLmh5cGVydHlGcm9tLnByaXZhdGVLZXksIEpTT04uc3RyaW5naWZ5KGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgSlNPTi5zdHJpbmdpZnkobWVzc2FnZVRvSGFzaCkpO1xyXG5cclxuICAgICAgICAgIH0pLnRoZW4oc2lnbmF0dXJlID0+IHtcclxuXHJcbiAgICAgICAgICAgIHZhbHVlLnNpZ25hdHVyZSA9IF90aGlzLmNyeXB0by5lbmNvZGUoc2lnbmF0dXJlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZWNlaXZlckhlbGxvTXNnID0ge1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxyXG4gICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXHJcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcclxuICAgICAgICAgICAgICBib2R5OiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckNlcnRpZmljYXRlJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBidG9hKEpTT04uc3RyaW5naWZ5KHZhbHVlKSlcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVyQ2VydGlmaWNhdGUgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckhlbGxvTXNnLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcclxuXHJcbiAgICAgICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IHJlY2VpdmVySGVsbG9Nc2csIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xyXG5cclxuICAgICAgICAgIH0sIGVycm9yID0+IHJlamVjdChlcnJvcikpO1xyXG5cclxuICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzZW5kZXJDZXJ0aWZpY2F0ZSc6XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ3NlbmRlckNlcnRpZmljYXRlJyk7XHJcbiAgICAgICAgICBsZXQgcmVjZWl2ZWRWYWx1ZSA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTtcclxuXHJcbiAgICAgICAgICBfdGhpcy52YWxpZGF0ZUFzc2VydGlvbihtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uLCB1bmRlZmluZWQsIG1lc3NhZ2UuYm9keS5pZGVudGl0eS5pZHApLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBlbmNyeXB0ZWRQTVMgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuYXNzeW1ldHJpY0VuY3J5cHRpb24pO1xyXG5cclxuICAgICAgICAgICAgLy9UT0RPIHJlbW92ZSBsYXRlciB0aGlzIHZlcmlmaWNhdGlvbiBhcyBzb29uIGFzIGFsbCB0aGUgSWRQIHByb3h5IGFyZSB1cGRhdGVkIGluIHRoZSBleGFtcGxlXHJcbiAgICAgICAgICAgIGxldCBlbmNvZGVkcHVibGljS2V5ID0gKHR5cGVvZiB2YWx1ZS5jb250ZW50cyA9PT0gJ3N0cmluZycpID8gdmFsdWUuY29udGVudHMgOiB2YWx1ZS5jb250ZW50cy5ub25jZTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzZW5kZXJQdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKGVuY29kZWRwdWJsaWNLZXkpO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8uYXNzZXJ0aW9uID0gbWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbjtcclxuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSA9IHNlbmRlclB1YmxpY0tleTtcclxuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnVzZXJJRCAgICA9IHZhbHVlLmNvbnRlbnRzLmVtYWlsO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5kZWNyeXB0UlNBKGNoYXRLZXlzLmh5cGVydHlGcm9tLnByaXZhdGVLZXksIGVuY3J5cHRlZFBNUyk7XHJcblxyXG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBkdXJpbmcgYXV0aGVudGljYXRpb24gb2YgaWRlbnRpdHknKTtcclxuXHJcbiAgICAgICAgICAgIC8vb2J0YWluIHRoZSBQcmVtYXN0ZXJLZXkgdXNpbmcgdGhlIHByaXZhdGUga2V5XHJcbiAgICAgICAgICB9KS50aGVuKHBtcyA9PiB7XHJcblxyXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSA9IG5ldyBVaW50OEFycmF5KHBtcyk7XHJcblxyXG4gICAgICAgICAgICBsZXQgc2lnbmF0dXJlID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLnNpZ25hdHVyZSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVjZWl2ZWRtc2dUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeVJTQShjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5LCBKU09OLnN0cmluZ2lmeShjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5KSArIEpTT04uc3RyaW5naWZ5KHJlY2VpdmVkbXNnVG9IYXNoKSwgc2lnbmF0dXJlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHZhbGlkYXRlcyB0aGUgc2lnbmF0dXJlIHJlY2VpdmVkXHJcbiAgICAgICAgICB9KS50aGVuKHNpZ25WYWxpZGF0aW9uUmVzdWx0ID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzaWduYXR1cmUgdmFsaWRhdGlvbiByZXN1bHQgJywgc2lnblZhbGlkYXRpb25SZXN1bHQpO1xyXG4gICAgICAgICAgICBsZXQgY29uY2F0S2V5ID0gX3RoaXMuY3J5cHRvLmNvbmNhdFBNU3dpdGhSYW5kb21zKGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5LCBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tLCBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZU1hc3RlclNlY3JldChjb25jYXRLZXksICdtZXNzYWdlSGlzdG9yaWMnICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XHJcblxyXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZXMgdGhlIG1hc3RlciBrZXlzIGZyb20gdGhlIFByZW1hc3RlciBrZXkgYW5kIHRoZSByYW5kb21zXHJcbiAgICAgICAgICB9KS50aGVuKG1hc3RlcktleSA9PiB7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMubWFzdGVyS2V5ID0gbWFzdGVyS2V5O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5nZW5lcmF0ZUtleXMobWFzdGVyS2V5LCAna2V5IGV4cGFuc2lvbicgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlcyB0aGUgc3ltbWV0cmljIGtleXMgdG8gYmUgdXNlZCBpbiB0aGUgc3ltbWV0cmljIGVuY3J5cHRpb25cclxuICAgICAgICAgIH0pLnRoZW4oa2V5cyA9PiB7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1swXSk7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMV0pO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMl0pO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzNdKTtcclxuICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuaXYpO1xyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5zeW1ldHJpY0VuY3J5cHRpb24pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpO1xyXG5cclxuICAgICAgICAgIH0pLnRoZW4oZGVjcnlwdGVkRGF0YSA9PiB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2RlY3J5cHRlZERhdGEnLCBkZWNyeXB0ZWREYXRhKTtcclxuXHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVyQ2VydGlmaWNhdGUgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWREYXRhICsgaXYpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGhhc2hSZWNlaXZlZCA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5oYXNoKTtcclxuXHJcbiAgICAgICAgICAgIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIGhhc2hSZWNlaXZlZCk7XHJcblxyXG4gICAgICAgICAgfSkudGhlbih2ZXJpZmllZEhhc2ggID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoIHZlcmlmaWNhdGlvbiAnLCB2ZXJpZmllZEhhc2gpO1xyXG4gICAgICAgICAgICBsZXQgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXHJcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcclxuICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgICAgICAgIGJvZHk6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XHJcbiAgICAgICAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7XHJcblxyXG4gICAgICAgICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSwgJ29rIScgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSkudGhlbihoYXNoID0+IHtcclxuXHJcbiAgICAgICAgICAgIHZhbHVlLmhhc2ggPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2gpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvayEnLCBpdik7XHJcblxyXG4gICAgICAgICAgfSkudGhlbihlbmNyeXB0ZWRWYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgIHZhbHVlLnZhbHVlID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGxldCByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcclxuICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxyXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXHJcbiAgICAgICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZScsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogYnRvYShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5yZWNlaXZlckZpbmlzaGVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCAnb2shJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXNvbHZlKHttZXNzYWdlOiByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSwgY2hhdEtleXM6IGNoYXRLZXlzfSk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnOlxyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZScpO1xyXG4gICAgICAgICAgY2hhdEtleXMuYXV0aGVudGljYXRlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7XHJcblxyXG4gICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLml2KTtcclxuICAgICAgICAgIGxldCBkYXRhID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS52YWx1ZSk7XHJcbiAgICAgICAgICBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5oYXNoKTtcclxuXHJcbiAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGRhdGEsIGl2KS50aGVuKGRlY3J5cHRlZERhdGEgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGVkRGF0YScsIGRlY3J5cHRlZERhdGEpO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkYXRhICsgaXYpO1xyXG4gICAgICAgICAgICBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaCkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdoYXNoIHJlc3VsdCcsIHJlc3VsdCk7XHJcblxyXG4gICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIHdhcyBhbiBpbml0aWFsIG1lc3NhZ2UgdGhhdCB3YXMgYmxvY2tlZCBhbmQgc2VuZCBpdFxyXG4gICAgICAgICAgICAgIGlmIChjaGF0S2V5cy5pbml0aWFsTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGluaXRpYWxNZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnY3JlYXRlJyxcclxuICAgICAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcclxuICAgICAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcclxuICAgICAgICAgICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjaGF0S2V5cy5pbml0aWFsTWVzc2FnZS5ib2R5LnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogaW5pdGlhbE1lc3NhZ2UsIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2VuZHMgdGhlIHNlc3Npb25LZXkgdG8gdGhlIHN1YnNjcmliZXIgaHlwZXJ0eVxyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fc2VuZFJlcG9ydGVyU2Vzc2lvbktleShtZXNzYWdlLCBjaGF0S2V5cykudGhlbih2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyZXBvcnRlclNlc3Npb25LZXknOlxyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXBvcnRlclNlc3Npb25LZXknKTtcclxuXHJcbiAgICAgICAgICBsZXQgdmFsdWVJVmFuZEhhc2ggPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7XHJcbiAgICAgICAgICBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZUlWYW5kSGFzaC5oYXNoKTtcclxuICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZUlWYW5kSGFzaC5pdik7XHJcbiAgICAgICAgICBsZXQgZW5jcnlwdGVkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlSVZhbmRIYXNoLnZhbHVlKTtcclxuICAgICAgICAgIGxldCBwYXJzZWRWYWx1ZTtcclxuICAgICAgICAgIGxldCBzZXNzaW9uS2V5O1xyXG4gICAgICAgICAgbGV0IGRhdGFPYmplY3RVUkw7XHJcbiAgICAgICAgICBsZXQgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZztcclxuXHJcbiAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGVuY3J5cHRlZFZhbHVlLCBpdikudGhlbihkZWNyeXB0ZWRWYWx1ZSA9PiB7XHJcblxyXG4gICAgICAgICAgICBwYXJzZWRWYWx1ZSA9IEpTT04ucGFyc2UoZGVjcnlwdGVkVmFsdWUpO1xyXG4gICAgICAgICAgICBzZXNzaW9uS2V5ID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS52YWx1ZSk7XHJcbiAgICAgICAgICAgIGRhdGFPYmplY3RVUkwgPSBwYXJzZWRWYWx1ZS5kYXRhT2JqZWN0VVJMO1xyXG5cclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2VUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWRWYWx1ZSArIGl2KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIG1lc3NhZ2VUb0hhc2gsIGhhc2gpO1xyXG5cclxuICAgICAgICAgIH0pLnRoZW4oaGFzaFJlc3VsdCA9PiB7XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdoYXNoIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgJywgaGFzaFJlc3VsdCk7XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gPSAge3Nlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlfTtcclxuXHJcbiAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcclxuICAgICAgICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgJ29rISEnLCBpdik7XHJcbiAgICAgICAgICB9KS50aGVuKGVuY3J5cHRlZFZhbHVlID0+IHtcclxuXHJcbiAgICAgICAgICAgIHJlY2VpdmVyQWNrbm93bGVkZ2VNc2cgPSB7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXHJcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcclxuICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgICAgICAgIGJvZHk6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJBY2tub3dsZWRnZSdcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpO1xyXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVRvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVyQWNrbm93bGVkZ2VNc2csICdvayEhJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBtZXNzYWdlVG9IYXNoKTtcclxuICAgICAgICAgIH0pLnRoZW4oaGFzaGVkTWVzc2FnZSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBmaW5hbFZhbHVlID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dmFsdWU6IHZhbHVlLnZhbHVlLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2hlZE1lc3NhZ2UpLCBpdjogdmFsdWUuaXZ9KSk7XHJcblxyXG4gICAgICAgICAgICByZWNlaXZlckFja25vd2xlZGdlTXNnLmJvZHkudmFsdWUgPSBmaW5hbFZhbHVlO1xyXG4gICAgICAgICAgICByZXNvbHZlKHttZXNzYWdlOiByZWNlaXZlckFja25vd2xlZGdlTXNnLCBjaGF0S2V5czogY2hhdEtleXN9KTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyZWNlaXZlckFja25vd2xlZGdlJzpcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygncmVjZWl2ZXJBY2tub3dsZWRnZScpO1xyXG5cclxuICAgICAgICAgIGxldCByZWNlaXZlZHZhbHVlSVZhbmRIYXNoID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpO1xyXG4gICAgICAgICAgbGV0IHJlY2VpdmVkSGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaC5oYXNoKTtcclxuICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZHZhbHVlSVZhbmRIYXNoLml2KTtcclxuICAgICAgICAgIGxldCByZWNlaXZlZEVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZHZhbHVlSVZhbmRIYXNoLnZhbHVlKTtcclxuXHJcbiAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIHJlY2VpdmVkRW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGRlY3J5cHRlZFZhbHVlID0+IHtcclxuXHJcbiAgICAgICAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWRWYWx1ZSArIGl2KTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCByZWNlaXZlZEhhc2gpO1xyXG4gICAgICAgICAgfSkudGhlbihoYXNoUmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnaGFzaFJlc3VsdCAnLCBoYXNoUmVzdWx0KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjYWxsYmFjayA9IGNoYXRLZXlzLmNhbGxiYWNrO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgY2FsbGJhY2soJ2hhbmRTaGFrZUVuZCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc29sdmUoJ2hhbmRTaGFrZUVuZCcpO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICByZWplY3QobWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3NlbmRSZXBvcnRlclNlc3Npb25LZXkobWVzc2FnZSwgY2hhdEtleXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgc2Vzc2lvbktleUJ1bmRsZSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tjaGF0S2V5cy5kYXRhT2JqZWN0VVJMXTtcclxuICAgIGxldCByZXBvcnRlclNlc3Npb25LZXlNc2c7XHJcbiAgICBsZXQgdmFsdWVUb0VuY3J5cHQ7XHJcbiAgICBsZXQgc2Vzc2lvbktleTtcclxuICAgIGxldCBpdjtcclxuICAgIGxldCB2YWx1ZSA9IHt9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIC8vaWYgdGhlcmUgaXMgbm90IHlldCBhIHNlc3Npb24gS2V5LCBnZW5lcmF0ZXMgYSBuZXcgb25lXHJcbiAgICAgIGlmICghc2Vzc2lvbktleUJ1bmRsZSkge1xyXG4gICAgICAgIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTtcclxuICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbY2hhdEtleXMuZGF0YU9iamVjdFVSTF0gPSB7c2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWV9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlc3Npb25LZXkgPSBzZXNzaW9uS2V5QnVuZGxlLnNlc3Npb25LZXk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhbHVlVG9FbmNyeXB0ID0gSlNPTi5zdHJpbmdpZnkoe3ZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKHNlc3Npb25LZXkpLCBkYXRhT2JqZWN0VVJMOiBjaGF0S2V5cy5kYXRhT2JqZWN0VVJMfSk7XHJcblxyXG4gICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XHJcbiAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7XHJcbiAgICAgIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCB2YWx1ZVRvRW5jcnlwdCwgaXYpLnRoZW4oZW5jcnlwdGVkVmFsdWUgPT4ge1xyXG5cclxuICAgICAgICByZXBvcnRlclNlc3Npb25LZXlNc2cgPSB7XHJcbiAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcclxuICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXHJcbiAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3JlcG9ydGVyU2Vzc2lvbktleScsXHJcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZXBvcnRlclNlc3Npb25LZXlNc2csIHZhbHVlVG9FbmNyeXB0ICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKTtcclxuICAgICAgfSkudGhlbihoYXNoZWRNZXNzYWdlID0+IHtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlV2l0aEhhc2ggPSBidG9hKEpTT04uc3RyaW5naWZ5KHt2YWx1ZTogcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLmJvZHkudmFsdWUsIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaGVkTWVzc2FnZSksIGl2OiB2YWx1ZS5pdn0pKTtcclxuXHJcbiAgICAgICAgcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLmJvZHkudmFsdWUgPSB2YWx1ZVdpdGhIYXNoO1xyXG4gICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IHJlcG9ydGVyU2Vzc2lvbktleU1zZywgY2hhdEtleXM6IGNoYXRLZXlzfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIHJldHVybnMgdGhlIHJlcG9ydGVyIGFzc29jaWF0ZWQgdG8gdGhlIGRhdGFPYmplY3QgVVJMXHJcbiAgKiBAcGFyYW0gICB7U3RyaW5nfSAgIGRhdGFPYmplY3RVUkwgICAgICAgICBkYXRhT2JqZWN0IHVybFxyXG4gICogQHJldHVybiAgIHtTdHJpbmd9ICByZXBvcnRlciAgICAgICAgICAgICAgZGF0YU9iamVjdCB1cmwgcmVwb3J0ZXJcclxuICAqL1xyXG4gIF9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QoZGF0YU9iamVjdFVSTCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgbG9naWMgYW5kIG1vdmUgaXQgdG8gYSB1dGlsIGZ1bmN0aW9uXHJcblxyXG4gICAgICBsZXQgc3BsaXRlZFVSTCA9IGRhdGFPYmplY3RVUkwuc3BsaXQoJy8nKTtcclxuICAgICAgbGV0IGZpbmFsVVJMID0gc3BsaXRlZFVSTFswXSArICcvLycgKyBzcGxpdGVkVVJMWzJdICsgJy8nICsgc3BsaXRlZFVSTFszXTtcclxuICAgICAgaWYgKHNwbGl0ZWRVUkwubGVuZ3RoID4gNikge1xyXG4gICAgICAgIGZpbmFsVVJMID0gc3BsaXRlZFVSTFswXSArICcvLycgKyBzcGxpdGVkVVJMWzJdICsgJy8nICsgc3BsaXRlZFVSTFszXSArICcvJyArIHNwbGl0ZWRVUkxbNF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGNoZWNrIGlmIGlzIHRoZSBjcmVhdG9yIG9mIHRoZSBoeXBlcnR5XHJcbiAgICAgIGxldCByZXBvcnRlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhmaW5hbFVSTCk7XHJcblxyXG4gICAgICBpZiAocmVwb3J0ZXJVUkwpIHtcclxuICAgICAgICByZXNvbHZlKHJlcG9ydGVyVVJMKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhbHJlYWR5IGFuIGFzc29jaWF0aW9uIGZyb20gYW4gaHlwZXJ0eVVSTCB0byB0aGUgZGF0YU9iamVjdFxyXG4gICAgICAgIGxldCBzdG9yZWRSZXBvcnRlclVSTCA9IF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHlbZmluYWxVUkxdO1xyXG5cclxuICAgICAgICBpZiAoc3RvcmVkUmVwb3J0ZXJVUkwpIHtcclxuICAgICAgICAgIHJlc29sdmUoc3RvcmVkUmVwb3J0ZXJVUkwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGVyZSBpcyBhbnkgaHlwZXJ0eSB0aGF0IHN1YnNjcmliZWQgdGhlIGRhdGFPYmplY3RVUkxcclxuICAgICAgICAgIGxldCBzdWJzY3JpYmVySHlwZXJ0eSA9IF90aGlzLnJlZ2lzdHJ5LmdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eShkYXRhT2JqZWN0VVJMKTtcclxuXHJcbiAgICAgICAgICBpZiAoc3Vic2NyaWJlckh5cGVydHkpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShzdWJzY3JpYmVySHlwZXJ0eSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gc2VhcmNoIGluIGRvbWFpbiByZWdpc3RyeSBmb3IgdGhlIGh5cGVydHkgYXNzb2NpYXRlZCB0byB0aGUgZGF0YU9iamVjdFxyXG4gICAgICAgICAgICAvLyBzZWFyY2ggaW4gY2FzZSBpcyBhIHN1YnNjcmliZXIgd2hvIHdhbnRzIHRvIGtub3cgdGhlIHJlcG9ydGVyXHJcbiAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5LmRpc2NvdmVyRGF0YU9iamVjdFBlclVSTChmaW5hbFVSTCwgc3BsaXRlZFVSTFsyXSkudGhlbihkYXRhT2JqZWN0ID0+IHtcclxuICAgICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5W2ZpbmFsVVJMXSA9IGRhdGFPYmplY3QucmVwb3J0ZXI7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0LnJlcG9ydGVyKTtcclxuICAgICAgICAgICAgfSwgZXJyID0+IHtcclxuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZmlsdGVyIHRoZSBtZXNzYWdlcyB0byBoYXNoLCBieSByZW1vdmluZyBzb21lIGZpZWxkcyBub3QgZ2VuZXJhdGVkIGJ5IHRoZSBydW50aW1lIGNvcmVcclxuICAqIEBwYXJhbSB7TWVzc2FnZX0gIG1lc3NhZ2UgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlXHJcbiAgKiBAcGFyYW0ge1N0cmluZ30gIGRlY3J5cHRlZFZhbHVlIChPcHRpb25hbCkgICAgdmFsdWUgZnJvbSBib2R5LnZhbHVlIGluIGNhc2UgaXQgb3JpZ2luYWxseSBjb21lcyBlbmNyeXB0ZWRcclxuICAqIEBwYXJhbSB7SlNPTn0gIGlkZW50aXR5KE9wdGlvbmFsKSAgICBhZGQgdGhlIGh5cGVydHkgaWRlbnRpdHkgYXNzb2NpYXRlZCBpbiBjYXNlIGlzIG5vdCBhZGRlZCB0byB0aGUgaW5pdGlhbCBtZXNzYWdlXHJcbiAgKiBAcmV0dXJuIHtNZXNzYWdlfSAgbmV3IG1lc3NhZ2UgZmlsdGVyZWRcclxuICAqL1xyXG4gIF9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZFZhbHVlLCBpZGVudGl0eSkge1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHR5cGU6IG1lc3NhZ2UudHlwZSxcclxuICAgICAgZnJvbTogbWVzc2FnZS5mcm9tLFxyXG4gICAgICB0bzogICBtZXNzYWdlLnRvLFxyXG4gICAgICBib2R5OiB7XHJcbiAgICAgICAgaWRlbnRpdHk6IGlkZW50aXR5IHx8IG1lc3NhZ2UuYm9keS5pZGVudGl0eSxcclxuICAgICAgICB2YWx1ZTogZGVjcnlwdGVkVmFsdWUgfHwgbWVzc2FnZS5ib2R5LnZhbHVlLFxyXG4gICAgICAgIGhhbmRzaGFrZVBoYXNlOiBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2VcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZ2VuZXJhdGVzIHRoZSBpbml0aWFsIHN0cnVjdHVyZSBmb3IgdGhlIGtleXMgYmV0d2VlbiB0d28gdXNlcnNcclxuICAqIEBwYXJhbSB7SlNPTn0gICAgbWVzc2FnZSAgICAgICAgICAgICAgaW5pdGlhbCBtZXNzYWdlIHRoYXQgdHJpZ2dlcnMgdGhlIG11dHVhbCBhdXRoZW50aWNhdGlvblxyXG4gICogQHBhcmFtIHtTdHJpbmd9ICB1c2VyVVJMICAgICAgICAgICAgICB1c2VyVVJMXHJcbiAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlY2VpdmVyKE9wdGlvbmFsKSAgaW5kaWNhdGVzIGlmIGlzIHRoZSBzZW5kZXIgb3IgdGhlIHJlY2VpdmVyIHRoYXQgY3JlYXRlcyBhIG5ldyBjaGF0IGNyeXB0b1xyXG4gICogQHJldHVybiB7SlNPTn0gbmV3Q2hhdENyeXB0byAgbmV3IEpTT04gc3RydWN0dXJlIGZvciB0aGUgY2hhdCBjcnlwdG9cclxuICAqL1xyXG4gIF9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwsIHJlY2VpdmVyKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIC8vY2hlY2sgd2hldGhlciBpcyB0aGUgc2VuZGVyIG9yIHRoZSByZWNlaXZlciB0byBjcmVhdGUgYSBuZXcgY2hhdENyeXB0b1xyXG4gICAgLy90byBtYW50YWluIGNvbnNpc3RlbmN5IG9uIHRoZSBrZXlzIGlmIHRoZSByZWNlaXZlciBjcmVhdGUgYSBuZXcgY2hhdENyeXB0byxcclxuICAgIC8vdGhlbiBpbnZlcnQgdGhlIGZpZWxkc1xyXG4gICAgbGV0IGZyb20gPSAocmVjZWl2ZXIpID8gbWVzc2FnZS50byA6IG1lc3NhZ2UuZnJvbTtcclxuICAgIGxldCB0byA9IChyZWNlaXZlcikgPyBtZXNzYWdlLmZyb20gOiBtZXNzYWdlLnRvO1xyXG5cclxuICAgIGxldCB1c2VySW5mbyA9IF90aGlzLmdldElkZW50aXR5KHVzZXJVUkwpO1xyXG5cclxuICAgIGxldCBuZXdDaGF0Q3J5cHRvID1cclxuICAgIHtcclxuICAgICAgaHlwZXJ0eUZyb206XHJcbiAgICAgIHtcclxuICAgICAgICBoeXBlcnR5OiBmcm9tLFxyXG4gICAgICAgIHVzZXJJRDogdXNlckluZm8ubWVzc2FnZUluZm8udXNlclByb2ZpbGUudXNlcm5hbWUsXHJcbiAgICAgICAgcHJpdmF0ZUtleTogdXNlckluZm8ua2V5UGFpci5wcml2YXRlLFxyXG4gICAgICAgIHB1YmxpY0tleTogdXNlckluZm8ua2V5UGFpci5wdWJsaWMsXHJcbiAgICAgICAgYXNzZXJ0aW9uOiB1c2VySW5mby5hc3NlcnRpb24sXHJcbiAgICAgICAgbWVzc2FnZUluZm86IHVzZXJJbmZvLm1lc3NhZ2VJbmZvXHJcbiAgICAgIH0sXHJcbiAgICAgIGh5cGVydHlUbzpcclxuICAgICAge1xyXG4gICAgICAgIGh5cGVydHk6IHRvLFxyXG4gICAgICAgIHVzZXJJRDogdW5kZWZpbmVkLFxyXG4gICAgICAgIHB1YmxpY0tleTogdW5kZWZpbmVkLFxyXG4gICAgICAgIGFzc2VydGlvbjogdW5kZWZpbmVkXHJcbiAgICAgIH0sXHJcbiAgICAgIGtleXM6XHJcbiAgICAgIHtcclxuICAgICAgICBoeXBlcnR5VG9TZXNzaW9uS2V5OiB1bmRlZmluZWQsXHJcbiAgICAgICAgaHlwZXJ0eUZyb21TZXNzaW9uS2V5OiB1bmRlZmluZWQsXHJcbiAgICAgICAgaHlwZXJ0eVRvSGFzaEtleTogdW5kZWZpbmVkLFxyXG4gICAgICAgIGh5cGVydHlGcm9tSGFzaEtleTogdW5kZWZpbmVkLFxyXG4gICAgICAgIHRvUmFuZG9tOiB1bmRlZmluZWQsXHJcbiAgICAgICAgZnJvbVJhbmRvbTogdW5kZWZpbmVkLFxyXG4gICAgICAgIHByZW1hc3RlcktleTogdW5kZWZpbmVkLFxyXG4gICAgICAgIG1hc3RlcktleTogdW5kZWZpbmVkXHJcbiAgICAgIH0sXHJcbiAgICAgIGhhbmRzaGFrZUhpc3Rvcnk6IHtcclxuICAgICAgICBzZW5kZXJIZWxsbzogdW5kZWZpbmVkLFxyXG4gICAgICAgIHJlY2VpdmVySGVsbG86IHVuZGVmaW5lZCxcclxuICAgICAgICBzZW5kZXJDZXJ0aWZpY2F0ZTogdW5kZWZpbmVkLFxyXG4gICAgICAgIHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlOiB1bmRlZmluZWRcclxuICAgICAgfSxcclxuICAgICAgaW5pdGlhbE1lc3NhZ2U6IChtZXNzYWdlLmJvZHkuaWdub3JlKSA/IHVuZGVmaW5lZCA6IG1lc3NhZ2UsXHJcbiAgICAgIGNhbGxiYWNrOiBtZXNzYWdlLmNhbGxiYWNrLFxyXG4gICAgICBhdXRoZW50aWNhdGVkOiBmYWxzZSxcclxuICAgICAgZGF0YU9iamVjdFVSTDogbWVzc2FnZS5kYXRhT2JqZWN0VVJMXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXdDaGF0Q3J5cHRvO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSWRlbnRpdHlNb2R1bGU7XHJcbiIsImNsYXNzIEFjdGlvbnNTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCkge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICB9XHJcblxyXG4gIGVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBsZXQgcG9saWNpZXMgPSBfdGhpcy5jb250ZXh0LmdldFBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKTtcclxuXHJcbiAgICAgIGlmIChwb2xpY2llcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBwb2xpY2llcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kuZW5mb3JjZUFjdGlvbnMoX3RoaXMuY29udGV4dCwgbWVzc2FnZSkudGhlbihtZXNzYWdlcyA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpO1xyXG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKHBvbGljaWVzLnVzZXJQb2xpY3kgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBwb2xpY2llcy51c2VyUG9saWN5LmVuZm9yY2VBY3Rpb25zKF90aGlzLmNvbnRleHQsIG1lc3NhZ2UpLnRoZW4obWVzc2FnZXMgPT4ge1xyXG4gICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpO1xyXG4gICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoW21lc3NhZ2VdKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzb2x2ZShbbWVzc2FnZV0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZvcndhcmRUb0lEKG1lc3NhZ2UsIGVtYWlsKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgaWYgKCFfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdmb3J3YXJkIG1lc3NhZ2UgdG8gZ2l2ZW4gSUQgaXMgdW5zdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudCcpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGlmIChfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5oeXBlcnRpZXNMaXN0WzBdLmh5cGVydHlVUkwgPT09IG1lc3NhZ2UudG8pIHtcclxuICAgICAgICBsZXQgc3BsaXRUbyA9IChtZXNzYWdlLnRvKS5zcGxpdCgnOi8vJyk7XHJcbiAgICAgICAgaWYgKHNwbGl0VG9bMF0gIT09ICdydW50aW1lJykge1xyXG4gICAgICAgICAgX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZGlzY292ZXJIeXBlcnR5UGVyVXNlcihlbWFpbCkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICBtZXNzYWdlLnRvID0gcmVzdWx0Lmh5cGVydHlVUkw7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52aWEgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmb3J3YXJkVG9IeXBlcnR5KG1lc3NhZ2UsIGh5cGVydHlVUkwpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZiAoIV90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ2ZvcndhcmQgbWVzc2FnZSB0byBnaXZlbiBJRCBpcyB1bnN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Jyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgIGlmIChfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5oeXBlcnRpZXNMaXN0WzBdLmh5cGVydHlVUkwgPT09IG1lc3NhZ2UudG8pIHtcclxuICAgICAgICBsZXQgc3BsaXRUbyA9IChtZXNzYWdlLnRvKS5zcGxpdCgnOi8vJyk7XHJcbiAgICAgICAgaWYgKHNwbGl0VG9bMF0gIT09ICdydW50aW1lJykge1xyXG4gICAgICAgICAgbWVzc2FnZS50byA9IGh5cGVydHlVUkw7XHJcbiAgICAgICAgICBtZXNzYWdlLmJvZHkudmlhID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICAgIF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNlbmRBdXRvbWF0aWNNZXNzYWdlKG1lc3NhZ2UsIHRleHQpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgbGV0IGF1dG9tYXRpY01lc3NhZ2UgPSB7XHJcbiAgICAgICAgZnJvbTogbWVzc2FnZS50byxcclxuICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxyXG4gICAgICAgIGJvZHk6IHtcclxuICAgICAgICAgIHZhbHVlOiB0ZXh0XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0eXBlOiBtZXNzYWdlLnR5cGVcclxuICAgICAgfTtcclxuICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UoYXV0b21hdGljTWVzc2FnZSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBY3Rpb25zU2VydmljZTtcclxuIiwiY2xhc3MgT3BlcmF0b3JzIHtcclxuXHJcbiAgYW5kKHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHBhcmFtc1swXSAmJiBwYXJhbXNbMV07XHJcbiAgfVxyXG5cclxuICBiZXR3ZWVuKHBhcmFtcykge1xyXG4gICAgbGV0IHN0YXJ0ID0gcGFyc2VJbnQocGFyYW1zWzBdWzBdKTtcclxuICAgIGxldCBlbmQgPSBwYXJzZUludChwYXJhbXNbMF1bMV0pO1xyXG4gICAgbGV0IG5vdyA9IHBhcmFtc1sxXTtcclxuXHJcbiAgICBpZiAoZW5kIDwgc3RhcnQpIHtcclxuICAgICAgbm93ID0gKG5vdyA8IHN0YXJ0KSA/IG5vdyArPSAyNDAwIDogbm93O1xyXG4gICAgICBlbmQgKz0gMjQwMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKG5vdyA+IHN0YXJ0ICYmIG5vdyA8IGVuZCk7XHJcbiAgfVxyXG5cclxuICBlcXVhbHMocGFyYW1zKSB7XHJcbiAgICByZXR1cm4gU3RyaW5nKHBhcmFtc1swXSkgPT09ICcqJyB8fCBTdHJpbmcocGFyYW1zWzBdKSA9PT0gU3RyaW5nKHBhcmFtc1sxXSk7XHJcbiAgfVxyXG5cclxuICBncmVhdGVyVGhhbihwYXJhbXMpIHtcclxuICAgIHJldHVybiBwYXJhbXNbMV0gPiBwYXJhbXNbMF07XHJcbiAgfVxyXG5cclxuICBpbihwYXJhbXMpIHtcclxuICAgIHJldHVybiBwYXJhbXNbMF0uaW5kZXhPZihwYXJhbXNbMV0pID4gLTE7XHJcbiAgfVxyXG5cclxuICBsZXNzVGhhbihwYXJhbXMpIHtcclxuICAgIHJldHVybiBwYXJhbXNbMV0gPCBwYXJhbXNbMF07XHJcbiAgfVxyXG5cclxuICBub3QocGFyYW1zKSB7XHJcbiAgICByZXR1cm4gIXBhcmFtc1swXTtcclxuICB9XHJcblxyXG4gIG9yKHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHBhcmFtc1swXSB8fCBwYXJhbXNbMV07XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgT3BlcmF0b3JzO1xyXG4iLCJpbXBvcnQgT3BlcmF0b3JzIGZyb20gJy4vT3BlcmF0b3JzJztcclxuXHJcbi8qKlxyXG4qIFRoZSBQb2xpY3kgRGVjaXNpb24gUG9pbnQgKFBEUCkgZGVjaWRlcyBpZiBhIG1lc3NhZ2UgaXMgdG8gYmUgYXV0aG9yaXNlZCBieSBjaGVja2luZyBhIHNldCBvZlxyXG4qIHBvbGljaWVzLiBUaGUgcmVzb3VyY2UgdG8gYmUgdmVyaWZpZWQgaXMgc3BlY2lmaWVkIGluIHRoZSBmaXJzdCB3b3JkIG9mIHRoZSAnY29uZGl0aW9uJyBmaWVsZCBvZlxyXG4qIGEgUG9saWN5IG9iamVjdC4gVGhlIGltcGxlbWVudGF0aW9uIHRoYXQgdmVyaWZpZXMgaWYgdGhlIG1lc3NhZ2UgaXMgY29tcGxpYW50IHdpdGggYSBwb2xpY3kgaXNcclxuKiBzcGVjaWZpZWQgaW4gYSBoYXNodGFibGUgdG8gYWxsb3cgZHluYW1pYyBkZWZpbml0aW9uIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgcHJvdmlkaW5nXHJcbiogZXh0ZW5zaWJpbGl0eSB0byB0aGUgUG9saWN5IEVuZ2luZSBmdW5jdGlvbmFsaXRpZXMuXHJcbiovXHJcbmNsYXNzIFBEUCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcclxuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB0aGlzLm9wZXJhdG9ycyA9IG5ldyBPcGVyYXRvcnMoKTtcclxuICB9XHJcblxyXG4gIGV2YWx1YXRlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpIHtcclxuICAgIGxldCBwb2xpY2llcyA9IHRoaXMuY29udGV4dC5nZXRQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSk7XHJcbiAgICBsZXQgcmVzdWx0ID0gJ05vdCBBcHBsaWNhYmxlJztcclxuXHJcbiAgICBpZiAocG9saWNpZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXN1bHQgPSB0aGlzLmV2YWx1YXRlUG9saWN5KG1lc3NhZ2UsIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSwgaXNJbmNvbWluZ01lc3NhZ2UpO1xyXG4gICAgICBpZiAocmVzdWx0IHx8IHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykge1xyXG4gICAgICAgIGxldCB1c2VyUmVzdWx0ID0gdGhpcy5ldmFsdWF0ZVBvbGljeShtZXNzYWdlLCBwb2xpY2llcy51c2VyUG9saWN5LCBpc0luY29taW5nTWVzc2FnZSk7XHJcbiAgICAgICAgaWYgKHVzZXJSZXN1bHQgIT09ICdOb3QgQXBwbGljYWJsZScpIHtcclxuICAgICAgICAgIHJlc3VsdCA9IHVzZXJSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGV2YWx1YXRlUG9saWN5KG1lc3NhZ2UsIHBvbGljeSwgaXNJbmNvbWluZykge1xyXG4gICAgbGV0IHJlc3VsdCA9ICdOb3QgQXBwbGljYWJsZSc7XHJcbiAgICBpZiAocG9saWN5KSB7XHJcbiAgICAgIHJlc3VsdCA9IHBvbGljeS5ldmFsdWF0ZVJ1bGVzKHRoaXMuY29udGV4dCwgbWVzc2FnZSwgaXNJbmNvbWluZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQRFA7XHJcbiIsImltcG9ydCBBY3Rpb25zU2VydmljZSBmcm9tICcuL0FjdGlvbnNTZXJ2aWNlJztcbmltcG9ydCBQRFAgZnJvbSAnLi9QRFAnO1xuaW1wb3J0IFBvbGljeSBmcm9tICcuL1BvbGljeSc7XG5pbXBvcnQge2lzSHlwZXJ0eVVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5jbGFzcyBQRVAge1xuXG4gIC8qKlxuICAqIENyZWF0ZXMgYSBQb2xpY3kgRW5mb3JjZW1lbnQgUG9pbnQgKFBFUCkgaW5zdGFuY2VcbiAgKiBAcGFyYW0gICAge09iamVjdH0gICAgY29udGV4dFxuICAqL1xuICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnBkcCA9IG5ldyBQRFAoY29udGV4dCk7XG4gICAgX3RoaXMuYWN0aW9uc1NlcnZpY2UgPSBuZXcgQWN0aW9uc1NlcnZpY2UoY29udGV4dCk7XG4gICAgX3RoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgY29udGV4dC5wZXAgPSBfdGhpcztcblxuICAgIC8vVE9ETyBzaG91bGQgYmUgYWRkZWQgYSB0cmlnZ2VyIHRvIHZlcmlmeSB3aGVuIHRoZSBsb2FkQ29uZmlndXJhdGlvbnMgaXMgc3VjY2Vzc2Z1bGx5IGNvbXBsZXRlZFxuICAgIGNvbnRleHQubG9hZENvbmZpZ3VyYXRpb25zKCk7XG4gIH1cblxuICAvKipcbiAgKiBBZGRzIGEgcG9saWN5IHRvIHRoZSBQb2xpY3kgRW5mb3JjZW1lbnQgUG9pbnQgKFBFUCkuIFRoZSBwb2xpY3kgY2FuIGJlIGNyZWF0ZWQgYnkgdGhlIHNlcnZpY2VcbiAgKiBwcm92aWRlciBvciBieSB0aGUgdXNlci5cbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgc291cmNlXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGtleVxuICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICBwb2xpY3lcbiAgKi9cbiAgYWRkUG9saWN5KHNvdXJjZSwga2V5LCBwb2xpY3ksIGNvbWJpbmluZ0FsZ29yaXRobSkge1xuICAgIGlmICghc291cmNlKSB0aHJvdyBuZXcgRXJyb3IoJ3NvdXJjZSBpcyBub3QgZGVmaW5lZCcpO1xuICAgIGlmICgha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpO1xuXG4gICAgaWYgKHBvbGljeSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwb2xpY3kgPSBuZXcgUG9saWN5KGtleSwgW10sIFtdLCBjb21iaW5pbmdBbGdvcml0aG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIShwb2xpY3kgaW5zdGFuY2VvZiBQb2xpY3kpKSB7XG4gICAgICAgIHBvbGljeSA9IG5ldyBQb2xpY3kocG9saWN5LmtleSwgcG9saWN5LnJ1bGVzLCBwb2xpY3kuYWN0aW9ucywgcG9saWN5LmNvbWJpbmluZ0FsZ29yaXRobSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoIChzb3VyY2UpIHtcbiAgICAgIGNhc2UgJ1NFUlZJQ0VfUFJPVklERVInOlxuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKHNvdXJjZSwgcG9saWN5LCBrZXkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1VTRVInOlxuICAgICAgICB0aGlzLmNvbnRleHQudXNlclBvbGljaWVzW2tleV0gPSBwb2xpY3k7XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoc291cmNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTtcbiAgICB9XG4gIH1cblxuICBhdXRob3Jpc2UobWVzc2FnZSkge1xuICAgIGNvbnNvbGUubG9nKCdbUG9saWN5LlBFUCBBdXRob3Jpc2VdICcsIG1lc3NhZ2UpO1xuICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xuICAgIGlmICghbWVzc2FnZSkgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgaWYgKCFtZXNzYWdlLmZyb20pIHRocm93IG5ldyBFcnJvcignbWVzc2FnZS5mcm9tIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgaWYgKCFtZXNzYWdlLnRvKSB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UudG8gaXMgbm90IGRlZmluZWQnKTtcbiAgICBpZiAoIW1lc3NhZ2UudHlwZSkgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlLnR5cGUgaXMgbm90IGRlZmluZWQnKTtcbiAgICBtZXNzYWdlLmJvZHkgPSBtZXNzYWdlLmJvZHkgfHwge307XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBtZXNzYWdlLmJvZHkgPSBtZXNzYWdlLmJvZHkgfHwge307XG4gICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgbGV0IHJlc3VsdDtcbiAgICAgIGlmIChfdGhpcy5faXNUb1ZlcmlmeShtZXNzYWdlKSkge1xuICAgICAgICBsZXQgaXNJbmNvbWluZyA9IF90aGlzLl9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgX3RoaXMuY29udGV4dC5wcmVwYXJlRm9yRXZhbHVhdGlvbihtZXNzYWdlLCBpc0luY29taW5nKS50aGVuKG1lc3NhZ2UgPT4ge1xuICAgICAgICAgIHJlc3VsdCA9IF90aGlzLnBkcC5ldmFsdWF0ZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmcpO1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09ICdOb3QgQXBwbGljYWJsZScpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IF90aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91cjtcbiAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzLmFjdGlvbnNTZXJ2aWNlLmVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgaW4gbWVzc2FnZXMpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzW2ldO1xuICAgICAgICAgICAgICBfdGhpcy5jb250ZXh0LnByZXBhcmVUb0ZvcndhcmQobWVzc2FnZSwgaXNJbmNvbWluZywgcmVzdWx0KS50aGVuKG1lc3NhZ2UgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gKG1lc3NhZ2UuYm9keS5hdXRoID09PSB1bmRlZmluZWQpID8gdHJ1ZSA6IG1lc3NhZ2UuYm9keS5hdXRoO1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IHsgYm9keTogeyBjb2RlOiA0MDMsIGRlc2NyaXB0aW9uOiAnQmxvY2tlZCBieSBwb2xpY3knIH0sIGZyb206IG1lc3NhZ2UudG8sIHRvOiBtZXNzYWdlLmZyb20sIHR5cGU6ICdyZXNwb25zZScgfTtcbiAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IF90aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91cjtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7XG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0geyBib2R5OiB7IGNvZGU6IDQwMywgZGVzY3JpcHRpb246ICdCbG9ja2VkIGJ5IHBvbGljeScgfSwgZnJvbTogbWVzc2FnZS50bywgdG86IG1lc3NhZ2UuZnJvbSwgdHlwZTogJ3Jlc3BvbnNlJyB9O1xuICAgICAgICAgIHJlamVjdChlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBhdXRob3Jpc2VTeW5jKG1lc3NhZ2UpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIG1lc3NhZ2UuYm9keSA9IG1lc3NhZ2UuYm9keSB8fCB7fTtcbiAgICBpZiAodGhpcy5faXNUb1ZlcmlmeShtZXNzYWdlKSkge1xuICAgICAgbGV0IGlzSW5jb21pbmcgPSB0aGlzLl9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKTtcbiAgICAgIG1lc3NhZ2UgPSB0aGlzLmNvbnRleHQucHJlcGFyZUZvckV2YWx1YXRpb24obWVzc2FnZSwgaXNJbmNvbWluZyk7XG4gICAgICByZXN1bHQgPSB0aGlzLnBkcC5ldmFsdWF0ZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmcpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91cjtcbiAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWN0aW9uc1NlcnZpY2UuZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmcpO1xuICAgICAgbWVzc2FnZSA9IHRoaXMuY29udGV4dC5wcmVwYXJlVG9Gb3J3YXJkKG1lc3NhZ2UsIGlzSW5jb21pbmcsIHJlc3VsdCk7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gKG1lc3NhZ2UuYm9keS5hdXRoID09PSB1bmRlZmluZWQpID8gdHJ1ZSA6IG1lc3NhZ2UuYm9keS5hdXRoO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gdGhpcy5jb250ZXh0LmRlZmF1bHRCZWhhdmlvdXI7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIG1lc3NhZ2UuYm9keS5hdXRoID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9pc0luY29taW5nTWVzc2FnZShtZXNzYWdlKSB7XG5cbiAgICByZXR1cm4gISh0aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmlzTG9jYWwobWVzc2FnZS5mcm9tKSk7XG4gIH1cblxuICAvKipcbiAgKiBJZGVudGlmaWVzIHRoZSBtZXNzYWdlcyB0byBiZSB2ZXJpZmllZCBieSB0aGUgUG9saWN5IEVuZ2luZVxuICAqIEBwYXJhbSAgICB7TWVzc2FnZX0gICBtZXNzYWdlXG4gICogQHJldHVybnMgIHtib29sZWFufSAgIHJldHVybnMgdHJ1ZSBpZiB0aGUgbWVzc2FnZSByZXF1aXJlcyBlbmNyeXB0aW9uL2RlY3J5cHRpb25cbiAgKiAgICAgICAgICAgICAgICAgICAgICAgb3IgaWYgaXRzIHR5cGUgZXF1YWxzICdoYW5kc2hha2UnOyBmYWxzZSBvdGhlcndpc2VcbiAgKi9cbiAgX2lzVG9WZXJpZnkobWVzc2FnZSkge1xuICAgIGxldCBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbicsICdkb21haW4taWRwJywgJ2dsb2JhbCcsICdoeXBlcnR5LXJ1bnRpbWUnLCAncnVudGltZSddO1xuICAgIGxldCBzcGxpdEZyb20gPSAobWVzc2FnZS5mcm9tKS5zcGxpdCgnOi8vJyk7XG4gICAgbGV0IGZyb21TY2hlbWEgPSBzcGxpdEZyb21bMF07XG4gICAgbGV0IHNwbGl0VG8gPSAobWVzc2FnZS50bykuc3BsaXQoJzovLycpO1xuICAgIGxldCB0b1NjaGVtYSA9ICBzcGxpdFRvWzBdO1xuXG4gICAgLy8gU2lnbmFsbGluZyBtZXNzYWdlcyBiZXR3ZWVuIFAyUCBTdHVicyBkb24ndCBoYXZlIHRvIGJlIHZlcmlmaWVkLiBGRlNcblxuICAgIGlmIChtZXNzYWdlLmZyb20uaW5jbHVkZXMoJy9wMnBoYW5kbGVyLycpIHx8IG1lc3NhZ2UuZnJvbS5pbmNsdWRlcygnL3AycHJlcXVlc3Rlci8nKSB8fCBtZXNzYWdlLnRvLmluY2x1ZGVzKCcvcDJwaGFuZGxlci8nKSB8fCBtZXNzYWdlLnRvLmluY2x1ZGVzKCcvcDJwcmVxdWVzdGVyLycpKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgLy8gaGFjayB0byBkaXNhYmxlIElkZW50aXR5IHZlcmlmaWNhdGlvbiBmb3IgbWVzc2FnZXMgY29taW5nIGZyb20gbGVnYWN5IGRvbWFpbnMgd2hpbGUgc29sdXRpb24gaXMgbm90IGltcGxlbWVudGVkXG5cbiAgICBpZiAodGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5pc0ludGVyd29ya2luZ1Byb3RvU3R1YihtZXNzYWdlLmZyb20pKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG1lc3NhZ2UuZnJvbSA9PT0gZnJvbVNjaGVtYSB8fCBtZXNzYWdlLnRvID09PSB0b1NjaGVtYSB8fCBtZXNzYWdlLnR5cGUgPT09ICdyZWFkJyB8fCBtZXNzYWdlLnR5cGUgPT09ICdyZXNwb25zZScgfHwgKGlzSHlwZXJ0eVVSTChtZXNzYWdlLmZyb20pICYmIG1lc3NhZ2UudHlwZSA9PT0gJ2RlbGV0ZScpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZihmcm9tU2NoZW1hKSA9PT0gLTEgfHwgc2NoZW1hc1RvSWdub3JlLmluZGV4T2YodG9TY2hlbWEpID09PSAtMTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVQb2xpY3koc291cmNlLCBrZXkpIHtcbiAgICBpZiAoIXNvdXJjZSkgdGhyb3cgbmV3IEVycm9yKCdzb3VyY2UgaXMgbm90IGRlZmluZWQnKTtcbiAgICBpZiAoc291cmNlICE9PSAnKicgJiYgIWtleSkgdGhyb3cgbmV3IEVycm9yKCdrZXkgaXMgbm90IGRlZmluZWQnKTtcblxuICAgIHN3aXRjaCAoc291cmNlKSB7XG4gICAgICBjYXNlICcqJzpcbiAgICAgICAgdGhpcy5jb250ZXh0LnNlcnZpY2VQcm92aWRlclBvbGljeSA9IHt9O1xuICAgICAgICB0aGlzLmNvbnRleHQudXNlclBvbGljaWVzID0ge307XG4gICAgICAgIHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKCdVU0VSJyk7XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoJ1NFUlZJQ0VfUFJPVklERVInKTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVBY3RpdmVQb2xpY3koKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdTRVJWSUNFX1BST1ZJREVSJzpcbiAgICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC5zZXJ2aWNlUHJvdmlkZXJQb2xpY3lba2V5XTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1VTRVInOlxuICAgICAgICBkZWxldGUgdGhpcy5jb250ZXh0LnVzZXJQb2xpY2llc1trZXldO1xuICAgICAgICBpZiAoa2V5ID09PSB0aGlzLmNvbnRleHQuYWN0aXZlVXNlclBvbGljeSkge1xuICAgICAgICAgIHRoaXMuY29udGV4dC5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHRoaXMuY29udGV4dC5zYXZlQWN0aXZlUG9saWN5KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnVVNFUicpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIHBvbGljeSBzb3VyY2U6ICcgKyBzb3VyY2UpO1xuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBFUDtcbiIsImltcG9ydCBBbGxvd092ZXJyaWRlcyBmcm9tICcuL2NvbWJpbmluZ0FsZ29yaXRobXMvQWxsb3dPdmVycmlkZXMnO1xyXG5pbXBvcnQgQmxvY2tPdmVycmlkZXMgZnJvbSAnLi9jb21iaW5pbmdBbGdvcml0aG1zL0Jsb2NrT3ZlcnJpZGVzJztcclxuaW1wb3J0IEZpcnN0QXBwbGljYWJsZSBmcm9tICcuL2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlJztcclxuaW1wb3J0IFJ1bGUgZnJvbSAnLi9SdWxlJztcclxuXHJcbmNsYXNzIFBvbGljeSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGtleSwgcnVsZXMsIGFjdGlvbnMsIGNvbWJpbmluZ0FsZ29yaXRobSkge1xyXG4gICAgaWYgKCFrZXkpIHRocm93IG5ldyBFcnJvcigna2V5IGlzIG5vdCBkZWZpbmVkJyk7XHJcbiAgICBpZiAoIWFjdGlvbnMpIHRocm93IG5ldyBFcnJvcignYWN0aW9ucyBhcmUgbm90IGRlZmluZWQnKTtcclxuXHJcbiAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zO1xyXG4gICAgdGhpcy5rZXkgPSBrZXk7XHJcbiAgICB0aGlzLl9zZXRSdWxlcyhydWxlcyk7XHJcbiAgICB0aGlzLl9zZXRDb21iaW5pbmdBbGdvcml0aG0oY29tYmluaW5nQWxnb3JpdGhtKTtcclxuICB9XHJcblxyXG4gIGFkZEFjdGlvbihtZXRob2QsIHBhcmFtKSB7XHJcbiAgICB0aGlzLmFjdGlvbnMucHVzaCh7IG1ldGhvZDogbWV0aG9kLCBwYXJhbTogcGFyYW0gfSk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVSdWxlKGRlY2lzaW9uLCBjb25kaXRpb24sIHNjb3BlLCB0YXJnZXQsIHByaW9yaXR5KSB7XHJcbiAgICBpZiAocHJpb3JpdHkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBwcmlvcml0eSA9IHRoaXMuZ2V0TGFzdFByaW9yaXR5KCkgKyAxO1xyXG4gICAgfVxyXG4gICAgbGV0IHJ1bGUgPSBuZXcgUnVsZShkZWNpc2lvbiwgY29uZGl0aW9uLCBzY29wZSwgdGFyZ2V0LCBwcmlvcml0eSk7XHJcbiAgICB0aGlzLnJ1bGVzLnB1c2gocnVsZSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVSdWxlKHJ1bGUpIHtcclxuICAgIGxldCBpbmRleFRvUmVtb3ZlID0gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xyXG4gICAgdGhpcy5ydWxlcy5zcGxpY2UoaW5kZXhUb1JlbW92ZSwgMSk7XHJcbiAgfVxyXG5cclxuICBlbmZvcmNlQWN0aW9ucyhjb250ZXh0LCBtZXNzYWdlKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBsZXQgcmVzdWx0cyA9IFtdO1xyXG4gICAgICBpZiAodGhpcy5hY3Rpb25zLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgaW4gdGhpcy5hY3Rpb25zKSB7XHJcbiAgICAgICAgICBsZXQgcmVzdWx0ID0gY29udGV4dC5wZXAuYWN0aW9uc1NlcnZpY2VbdGhpcy5hY3Rpb25zW2ldLm1ldGhvZF0obWVzc2FnZSwgdGhpcy5hY3Rpb25zW2ldLnBhcmFtKTtcclxuICAgICAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBQcm9taXNlLmFsbChyZXN1bHRzKS50aGVuKChtZXNzYWdlcykgPT4ge1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlcyk7XHJcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKFttZXNzYWdlXSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZXZhbHVhdGVSdWxlcyhjb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKSB7XHJcbiAgICBsZXQgcmVzdWx0cyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSBpbiB0aGlzLnJ1bGVzKSB7XHJcbiAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnJ1bGVzW2ldLmV2YWx1YXRlKGNvbnRleHQsIG1lc3NhZ2UsIGlzSW5jb21pbmcpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5jb21iaW5pbmdBbGdvcml0aG0uY29tYmluZShyZXN1bHRzKTtcclxuICB9XHJcblxyXG4gIGdldExhc3RQcmlvcml0eSgpIHtcclxuICAgIGxldCBwcmlvcml0aWVzID0gW107XHJcblxyXG4gICAgaWYgKHRoaXMucnVsZXMubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgIGZvciAobGV0IGkgaW4gdGhpcy5ydWxlcykge1xyXG4gICAgICAgIHByaW9yaXRpZXMucHVzaCh0aGlzLnJ1bGVzW2ldLnByaW9yaXR5KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkoTWF0aCwgcHJpb3JpdGllcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gLTE7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRSdWxlQnlQcmlvcml0eShwcmlvcml0eSkge1xyXG4gICAgZm9yIChsZXQgaSBpbiB0aGlzLnJ1bGVzKSB7XHJcbiAgICAgIGlmIChTdHJpbmcodGhpcy5ydWxlc1tpXS5wcmlvcml0eSkgPT09IFN0cmluZyhwcmlvcml0eSkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ydWxlc1tpXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhyb3cgRXJyb3IoJ1J1bGUgd2l0aCBwcmlvcml0eSAnICsgcHJpb3JpdHkgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xyXG4gIH1cclxuXHJcbiAgX3NldENvbWJpbmluZ0FsZ29yaXRobShjb21iaW5pbmdBbGdvcml0aG0pIHtcclxuICAgIGlmICghY29tYmluaW5nQWxnb3JpdGhtKSB7XHJcbiAgICAgIGNvbWJpbmluZ0FsZ29yaXRobSA9ICdibG9ja092ZXJyaWRlcyc7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKGNvbWJpbmluZ0FsZ29yaXRobSkge1xyXG4gICAgICBjYXNlICdibG9ja092ZXJyaWRlcyc6XHJcbiAgICAgICAgdGhpcy5jb21iaW5pbmdBbGdvcml0aG0gPSBuZXcgQmxvY2tPdmVycmlkZXMoKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnYWxsb3dPdmVycmlkZXMnOlxyXG4gICAgICAgIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtID0gbmV3IEFsbG93T3ZlcnJpZGVzKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2ZpcnN0QXBwbGljYWJsZSc6XHJcbiAgICAgICAgdGhpcy5jb21iaW5pbmdBbGdvcml0aG0gPSBuZXcgRmlyc3RBcHBsaWNhYmxlKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gYWxnb3JpdGhtOiAnICsgY29tYmluaW5nQWxnb3JpdGhtKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zZXRSdWxlcyhydWxlcykge1xyXG4gICAgdGhpcy5ydWxlcyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgaW4gcnVsZXMpIHtcclxuICAgICAgbGV0IHJ1bGUgPSBydWxlc1tpXTtcclxuICAgICAgaWYgKHJ1bGUucHJpb3JpdHkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJ1bGUucHJpb3JpdHkgPSB0aGlzLmdldExhc3RQcmlvcml0eSgpICsgMTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIShydWxlIGluc3RhbmNlb2YgUnVsZSkpIHtcclxuICAgICAgICBydWxlID0gbmV3IFJ1bGUocnVsZS5kZWNpc2lvbiwgcnVsZS5jb25kaXRpb24sIHJ1bGUuc2NvcGUsIHJ1bGUudGFyZ2V0LCBydWxlLnByaW9yaXR5KTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnJ1bGVzLnB1c2gocnVsZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzb3J0UnVsZXMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgICAgbGV0IHggPSBhLnByaW9yaXR5OyBsZXQgeSA9IGIucHJpb3JpdHk7XHJcbiAgICAgIHJldHVybiAoKHggPCB5KSA/IC0xIDogKCh4ID4geSkgPyAxIDogMCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9saWN5O1xyXG4iLCJpbXBvcnQge2RpdmlkZUVtYWlsLCBkaXZpZGVVUkwsIGlzRGF0YU9iamVjdFVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuY2xhc3MgUmVUaGlua0N0eCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5kZWZhdWx0QmVoYXZpb3VyID0gdHJ1ZTtcclxuICAgIHRoaXMuZ3JvdXBzID0ge307XHJcbiAgfVxyXG5cclxuICBnZXQgc2NoZW1lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NjaGVtZTtcclxuICB9XHJcblxyXG4gIGdldCBkYXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RhdGU7XHJcbiAgfVxyXG5cclxuICBnZXQgZG9tYWluKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2RvbWFpbjtcclxuICB9XHJcblxyXG4gIGdldCB0eXBlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XHJcbiAgfVxyXG5cclxuICBnZXQgc291cmNlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZTtcclxuICB9XHJcblxyXG4gIGdldCB0aW1lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3RpbWU7XHJcbiAgfVxyXG5cclxuICBnZXQgd2Vla2RheSgpIHtcclxuICAgIHJldHVybiB0aGlzLl93ZWVrZGF5O1xyXG4gIH1cclxuXHJcbiAgc2V0IHNjaGVtZShwYXJhbXMpIHtcclxuICAgIGxldCBmcm9tID0gcGFyYW1zLm1lc3NhZ2UuZnJvbTtcclxuICAgIGlmIChpc0RhdGFPYmplY3RVUkwoZnJvbSkpIHtcclxuICAgICAgdGhpcy5fc2NoZW1lID0gZGl2aWRlVVJMKGZyb20pLnR5cGU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9zY2hlbWUgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQgZGF0ZShub3cpIHtcclxuICAgIGxldCBkYXRlID0gbmV3IERhdGUoKTtcclxuICAgIGxldCBkYXkgPSBTdHJpbmcoZGF0ZS5nZXREYXRlKCkpO1xyXG4gICAgaWYgKGRheS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgZGF5ID0gJzAnICsgZGF5O1xyXG4gICAgfVxyXG4gICAgbGV0IG1vbnRoID0gU3RyaW5nKGRhdGUuZ2V0TW9udGgoKSArIDEpO1xyXG4gICAgaWYgKG1vbnRoLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBtb250aCA9ICcwJyArIG1vbnRoO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fZGF0ZSA9IGRheSArICcvJyArIG1vbnRoICsgJy8nICsgZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gIH1cclxuXHJcbiAgc2V0IGRvbWFpbihwYXJhbXMpIHtcclxuICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5fZG9tYWluID0gZGl2aWRlRW1haWwocGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VybmFtZSkuZG9tYWluO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0IHR5cGUocGFyYW1zKSB7XHJcbiAgICBsZXQgbWVzc2FnZSA9IHBhcmFtcy5tZXNzYWdlO1xyXG4gICAgaWYgKG1lc3NhZ2UuYm9keS52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuX3R5cGUgPSBtZXNzYWdlLmJvZHkudmFsdWUucmVzb3VyY2VUeXBlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0IHNvdXJjZShwYXJhbXMpIHtcclxuICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy5fc291cmNlID0gcGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS51c2VybmFtZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldCB0aW1lKG5vdykge1xyXG4gICAgbm93ID0gbmV3IERhdGUoKTtcclxuICAgIGxldCBtaW51dGVzID0gU3RyaW5nKG5vdy5nZXRNaW51dGVzKCkpO1xyXG4gICAgaWYgKG1pbnV0ZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIG1pbnV0ZXMgPSAnMCcgKyBtaW51dGVzO1xyXG4gICAgfVxyXG4gICAgdGhpcy5fdGltZSA9IHBhcnNlSW50KFN0cmluZyhub3cuZ2V0SG91cnMoKSkgKyBtaW51dGVzKTtcclxuICB9XHJcblxyXG4gIHNldCB3ZWVrZGF5KG5vdykge1xyXG4gICAgdGhpcy5fd2Vla2RheSA9IFN0cmluZyhuZXcgRGF0ZSgpLmdldERheSgpKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSZVRoaW5rQ3R4O1xyXG4iLCJpbXBvcnQgQWR2YW5jZWRDb25kaXRpb24gZnJvbSAnLi9jb25kaXRpb25zL0FkdmFuY2VkQ29uZGl0aW9uJztcclxuaW1wb3J0IENvbmRpdGlvbiBmcm9tICcuL2NvbmRpdGlvbnMvQ29uZGl0aW9uJztcclxuaW1wb3J0IHtnZXRVc2VyRW1haWxGcm9tVVJMLCBpc0RhdGFPYmplY3RVUkwsIHJlbW92ZVBhdGhGcm9tVVJMfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCBTdWJzY3JpcHRpb25Db25kaXRpb24gZnJvbSAnLi9jb25kaXRpb25zL0FkdmFuY2VkQ29uZGl0aW9uJztcclxuXHJcbmNsYXNzIFJ1bGUge1xyXG5cclxuICBjb25zdHJ1Y3RvcihkZWNpc2lvbiwgY29uZGl0aW9uLCBzY29wZSwgdGFyZ2V0LCBwcmlvcml0eSkge1xyXG4gICAgdGhpcy5kZWNpc2lvbiA9IGRlY2lzaW9uO1xyXG4gICAgdGhpcy5zZXRDb25kaXRpb24oY29uZGl0aW9uKTtcclxuICAgIHRoaXMucHJpb3JpdHkgPSBwcmlvcml0eTtcclxuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcclxuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gIH1cclxuXHJcbiAgc2V0Q29uZGl0aW9uKGNvbmRpdGlvbikge1xyXG4gICAgaWYgKCEoY29uZGl0aW9uIGluc3RhbmNlb2YgQ29uZGl0aW9uIHx8IGNvbmRpdGlvbiBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbkNvbmRpdGlvbiB8fCBjb25kaXRpb24gaW5zdGFuY2VvZiBBZHZhbmNlZENvbmRpdGlvbikpIHtcclxuICAgICAgbGV0IGF0dHJpYnV0ZSA9IGNvbmRpdGlvbi5hdHRyaWJ1dGU7XHJcbiAgICAgIHN3aXRjaCAoYXR0cmlidXRlKSB7XHJcbiAgICAgICAgY2FzZSAnc3Vic2NyaXB0aW9uJzpcclxuICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gbmV3IFN1YnNjcmlwdGlvbkNvbmRpdGlvbihjb25kaXRpb24uYXR0cmlidXRlLCBjb25kaXRpb24ub3BlcmF0b3IsIGNvbmRpdGlvbi5wYXJhbXMpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSB1bmRlZmluZWQ6XHJcbiAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IG5ldyBBZHZhbmNlZENvbmRpdGlvbihjb25kaXRpb24pO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gbmV3IENvbmRpdGlvbihjb25kaXRpb24uYXR0cmlidXRlLCBjb25kaXRpb24ub3BlcmF0b3IsIGNvbmRpdGlvbi5wYXJhbXMpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGV2YWx1YXRlKGNvbnRleHQsIG1lc3NhZ2UsIGlzSW5jb21pbmcpIHtcclxuICAgIGxldCBmaWVsZCA9IChpc0luY29taW5nKSA/IG1lc3NhZ2UudG8gOiBtZXNzYWdlLmZyb207XHJcbiAgICBsZXQgaHlwZXJ0eU5hbWU7XHJcbiAgICBzd2l0Y2ggKHRoaXMuc2NvcGUpIHtcclxuICAgICAgY2FzZSAnZ2xvYmFsJzpcclxuICAgICAgICBicmVhaztcclxuXHJcbiAgICAgIGNhc2UgJ2h5cGVydHknOlxyXG4gICAgICAgIGlmIChpc0RhdGFPYmplY3RVUkwoZmllbGQpKSB7XHJcbiAgICAgICAgICBsZXQgcmVwb3J0ZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMocmVtb3ZlUGF0aEZyb21VUkwoZmllbGQpKTtcclxuICAgICAgICAgIGlmIChyZXBvcnRlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGh5cGVydHlOYW1lID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUocmVwb3J0ZXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoZmllbGQuc3BsaXQoJzovLycpWzBdID09PSAnaHlwZXJ0eScpIHtcclxuICAgICAgICAgICAgaHlwZXJ0eU5hbWUgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShyZW1vdmVQYXRoRnJvbVVSTChmaWVsZCkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaHlwZXJ0eU5hbWUgPT09IHRoaXMudGFyZ2V0KSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xyXG5cclxuICAgICAgY2FzZSAnaWRlbnRpdHknOlxyXG4gICAgICAgIGxldCBvd25lcjtcclxuXHJcbiAgICAgICAgaWYgKGlzRGF0YU9iamVjdFVSTChmaWVsZCkpIHtcclxuICAgICAgICAgIGxldCByZXBvcnRlciA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhyZW1vdmVQYXRoRnJvbVVSTChmaWVsZCkpO1xyXG4gICAgICAgICAgb3duZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIocmVwb3J0ZXIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoZmllbGQuc3BsaXQoJzovLycpWzBdID09PSAnaHlwZXJ0eScpIHtcclxuICAgICAgICAgICAgb3duZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIocmVtb3ZlUGF0aEZyb21VUkwoZmllbGQpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG93bmVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIG93bmVyID0gZ2V0VXNlckVtYWlsRnJvbVVSTChvd25lcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvd25lciA9PT0gdGhpcy50YXJnZXQpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuY29uZGl0aW9uLmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCB0aGlzLnNjb3BlLCB0aGlzLnRhcmdldCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuZGVjaXNpb247XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJztcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJ1bGU7XHJcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuXHJcbi8qKlxyXG4qIEBhdXRob3IgQW5hIENhbGRlaXJhIDxhbmEuY2FsZGVpcmFAdGVjbmljby51bGlzYm9hLnB0PlxyXG4qIEBjbGFzc2Rlc2MgQ2xhc3MgdG8gY29tYmluZSB0aGUgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMgdGhhdCByZXN1bHQgZnJvbSBydWxlcyBldmFsdWF0aW9uLlxyXG4qL1xyXG5jbGFzcyBBbGxvd092ZXJyaWRlcyB7XHJcblxyXG4gIC8qKlxyXG4gICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3JpemF0aW9uIGRlY2lzaW9ucywgcHJpb3JpdGl6ZXMgYSBwb3NpdGl2ZSBvbmUuXHJcbiAgKiBAcGFyYW0gICAge2Jvb2xlYW5bXX0gICBkZWNpc2lvbnNcclxuICAqIEByZXR1cm5zICB7Ym9vbGVhbn1cclxuICAqL1xyXG4gIGNvbWJpbmUoZGVjaXNpb25zKSB7XHJcbiAgICBpZiAoZGVjaXNpb25zLmluZGV4T2YodHJ1ZSkgIT09IC0xKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKGZhbHNlKSAhPT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBbGxvd092ZXJyaWRlcztcclxuIiwiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5cclxuLyoqXHJcbiogQGF1dGhvciBBbmEgQ2FsZGVpcmEgPGFuYS5jYWxkZWlyYUB0ZWNuaWNvLnVsaXNib2EucHQ+XHJcbiogQGNsYXNzZGVzYyBDbGFzcyB0byBjb21iaW5lIHRoZSBhdXRob3JpemF0aW9uIGRlY2lzaW9ucyB0aGF0IHJlc3VsdCBmcm9tIHJ1bGVzIGV2YWx1YXRpb24uXHJcbiovXHJcbmNsYXNzIEJsb2NrT3ZlcnJpZGVzIHtcclxuXHJcbiAgLyoqXHJcbiAgKiBHaXZlbiBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIGF1dGhvcmlzYXRpb24gZGVjaXNpb25zLCBwcmlvcml0aXNlcyBhIG5lZ2F0aXZlIG9uZS5cclxuICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgIGRlY2lzaW9uc1xyXG4gICogQHJldHVybnMgIHtib29sZWFufVxyXG4gICovXHJcbiAgY29tYmluZShkZWNpc2lvbnMpIHtcclxuICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZihmYWxzZSkgIT09IC0xKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZih0cnVlKSAhPT0gLTEpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJsb2NrT3ZlcnJpZGVzO1xyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG4vKipcclxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cclxuKiBAY2xhc3NkZXNjIENsYXNzIHRvIGNvbWJpbmUgdGhlIGF1dGhvcml6YXRpb24gZGVjaXNpb25zIHRoYXQgcmVzdWx0IGZyb20gcnVsZXMgZXZhbHVhdGlvbi5cclxuKi9cclxuY2xhc3MgRmlyc3RBcHBsaWNhYmxlIHtcclxuXHJcbiAgLyoqXHJcbiAgKiBHaXZlbiBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIGF1dGhvcmlzYXRpb24gZGVjaXNpb25zLCByZXR1cm5zIHRoZSBmaXJzdCBvbmUgZGlmZmVyZW50IGZyb20gJ05vdCBBcHBsaWNhYmxlJywgZWl0aGVyIHBvc2l0aXZlIG9yIG5lZ2F0aXZlLlxyXG4gICogQHBhcmFtICAgIHtib29sZWFuW119ICAgICBkZWNpc2lvbnNcclxuICAqIEByZXR1cm5zICB7Ym9vbGVhbn1cclxuICAqL1xyXG4gIGNvbWJpbmUoZGVjaXNpb25zKSB7XHJcbiAgICBmb3IgKGxldCBpIGluIGRlY2lzaW9ucykge1xyXG4gICAgICBpZiAoZGVjaXNpb25zW2ldICE9PSAnTm90IEFwcGxpY2FibGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY2lzaW9uc1tpXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRmlyc3RBcHBsaWNhYmxlO1xyXG4iLCJpbXBvcnQgQ29uZGl0aW9uIGZyb20gJy4vQ29uZGl0aW9uJztcclxuaW1wb3J0IE9wZXJhdG9ycyBmcm9tICcuLi9PcGVyYXRvcnMnO1xyXG5pbXBvcnQgU3Vic2NyaXB0aW9uQ29uZGl0aW9uIGZyb20gJy4vU3Vic2NyaXB0aW9uQ29uZGl0aW9uJztcclxuXHJcbmNsYXNzIEFkdmFuY2VkQ29uZGl0aW9uIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29uZGl0aW9uKSB7XHJcbiAgICB0aGlzLm9wZXJhdG9ycyA9IG5ldyBPcGVyYXRvcnMoKTtcclxuICAgIGlmIChjb25kaXRpb24ub3BlcmF0b3JzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgY29uZGl0aW9uID0gY29uZGl0aW9uLmNvbmRpdGlvbjtcclxuICAgIH1cclxuICAgIGNvbmRpdGlvbiA9IHRoaXMuYnVpbGRDb25kaXRpb24oY29uZGl0aW9uKTtcclxuICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xyXG4gIH1cclxuXHJcbiAgYnVpbGRDb25kaXRpb24oY29uZGl0aW9uKSB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb25kaXRpb25bMV0pKSB7XHJcbiAgICAgIGNvbmRpdGlvblsxXSA9IHRoaXMuYnVpbGRDb25kaXRpb24oY29uZGl0aW9uWzFdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChjb25kaXRpb25bMV0uYXR0cmlidXRlID09PSAnc3Vic2NyaXB0aW9uJykge1xyXG4gICAgICAgIGNvbmRpdGlvblsxXSA9IG5ldyBTdWJzY3JpcHRpb25Db25kaXRpb24oY29uZGl0aW9uWzFdLmF0dHJpYnV0ZSwgY29uZGl0aW9uWzFdLm9wZXJhdG9yLCBjb25kaXRpb25bMV0ucGFyYW1zKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb25kaXRpb25bMV0gPSBuZXcgQ29uZGl0aW9uKGNvbmRpdGlvblsxXS5hdHRyaWJ1dGUsIGNvbmRpdGlvblsxXS5vcGVyYXRvciwgY29uZGl0aW9uWzFdLnBhcmFtcyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoY29uZGl0aW9uWzJdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZGl0aW9uWzJdKSkge1xyXG4gICAgICAgIGNvbmRpdGlvblsyXSA9IHRoaXMuYnVpbGRDb25kaXRpb24oY29uZGl0aW9uWzJdKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoY29uZGl0aW9uWzJdLmF0dHJpYnV0ZSA9PT0gJ3N1YnNjcmlwdGlvbicpIHtcclxuICAgICAgICAgIGNvbmRpdGlvblsyXSA9IG5ldyBTdWJzY3JpcHRpb25Db25kaXRpb24oY29uZGl0aW9uWzJdLmF0dHJpYnV0ZSwgY29uZGl0aW9uWzJdLm9wZXJhdG9yLCBjb25kaXRpb25bMl0ucGFyYW1zKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uZGl0aW9uWzJdID0gbmV3IENvbmRpdGlvbihjb25kaXRpb25bMl0uYXR0cmlidXRlLCBjb25kaXRpb25bMl0ub3BlcmF0b3IsIGNvbmRpdGlvblsyXS5wYXJhbXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbmRpdGlvbjtcclxuICB9XHJcblxyXG4gIGlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCBzY29wZSwgdGFyZ2V0LCBvcGVyYXRvciwgbGVmdCwgcmlnaHQpIHtcclxuICAgIGlmICghb3BlcmF0b3IpIHtcclxuICAgICAgb3BlcmF0b3IgPSB0aGlzLmNvbmRpdGlvblswXTtcclxuICAgICAgbGVmdCA9IHRoaXMuY29uZGl0aW9uWzFdO1xyXG4gICAgICByaWdodCA9IHRoaXMuY29uZGl0aW9uWzJdO1xyXG4gICAgfVxyXG5cclxuICAgIHdoaWxlICghKGxlZnQgaW5zdGFuY2VvZiBDb25kaXRpb24pICYgIShsZWZ0IGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uQ29uZGl0aW9uKSAmICh0eXBlb2YgbGVmdCAhPT0gJ2Jvb2xlYW4nKSkge1xyXG4gICAgICBsZWZ0ID0gdGhpcy5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgbGVmdFswXSwgbGVmdFsxXSwgbGVmdFsyXSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB3aGlsZSAoIShyaWdodCBpbnN0YW5jZW9mIENvbmRpdGlvbikgJiAhKHJpZ2h0IGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uQ29uZGl0aW9uKSAmICh0eXBlb2YgcmlnaHQgIT09ICdib29sZWFuJykpIHtcclxuICAgICAgICByaWdodCA9IHRoaXMuaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHNjb3BlLCB0YXJnZXQsIHJpZ2h0WzBdLCByaWdodFsxXSwgcmlnaHRbMl0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHJlc3VsdExlZnQgPSAodHlwZW9mIGxlZnQgPT09ICdib29sZWFuJykgPyBsZWZ0IDogbGVmdC5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCk7XHJcbiAgICBsZXQgcmVzdWx0UmlnaHQ7XHJcbiAgICBpZiAocmlnaHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXN1bHRSaWdodCA9ICh0eXBlb2YgcmlnaHQgPT09ICdib29sZWFuJykgPyByaWdodCA6IHJpZ2h0LmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCBzY29wZSwgdGFyZ2V0KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLm9wZXJhdG9yc1tvcGVyYXRvcl0oW3Jlc3VsdExlZnQsIHJlc3VsdFJpZ2h0XSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWR2YW5jZWRDb25kaXRpb247XHJcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuXHJcbmltcG9ydCBPcGVyYXRvcnMgZnJvbSAnLi4vT3BlcmF0b3JzJztcclxuXHJcbi8qKlxyXG4qIEBhdXRob3IgQW5hIENhbGRlaXJhIDxhbmEuY2FsZGVpcmFAdGVjbmljby51bGlzYm9hLnB0PlxyXG4qIEBjbGFzc2Rlc2MgQ2xhc3MgdG8gcmVwcmVzZW50IGEgY29uZGl0aW9uIGFuZCBldmFsdWF0ZSBpdHMgYXBwbGljYWJpbGl0eS5cclxuKi9cclxuY2xhc3MgQ29uZGl0aW9uIHtcclxuXHJcbiAgLyoqXHJcbiAgKiBDcmVhdGVzIGEgbmV3IENvbmRpdGlvbi5cclxuICAqIEBjbGFzc1xyXG4gICogQHBhcmFtICB7c3RyaW5nfSAgYXR0cmlidXRlXHJcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBvcGVyYXRvclxyXG4gICogQHBhcmFtICB7Kn0gICAgICAgcGFyYW1zXHJcbiAgKi9cclxuICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpIHtcclxuICAgIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlO1xyXG4gICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICB0aGlzLm9wZXJhdG9ycyA9IG5ldyBPcGVyYXRvcnMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogVmVyaWZpZXMgaWYgdGhlIGNvbmRpdGlvbiBpcyBhcHBsaWNhYmxlIHRvIHRoZSBtZXNzYWdlLiBGaXJzdCwgdGhlIHN5c3RlbSB2YWx1ZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBhdHRyaWJ1dGUgaXMgcmV0cmlldmVkOyB0aGVuLCB0aGF0IHZhbHVlIGlzIGNvbXBhcmVkIHdpdGggdGhlIHBhcmFtZXRlciBzcGVjaWZpZWQgaW4gdGhlIGNvbmRpdGlvbiBieSBleGVjdXRpbmcgdGhlIG9wZXJhdG9yIGltcGxlbWVudGF0aW9uLiBJZiB0aGUgb3BlcmF0b3IgaXMgJ2luJyBhbmQgdGhlIG5hbWUgb2YgYSBncm91cCBpcyBnaXZlbiwgdGhlbiB0aGUgYXJyYXkgaG9sZGluZyB0aGUgbWVtYmVycyBvZiB0aGUgZ3JvdXAgaXMgcmV0cmlldmVkIGJlZm9yZSB0aGUgY29tcGFyaXNvbi5cclxuICAqIEBwYXJhbSAge09iamVjdH0gICAgY29udGV4dCAgIGVudmlyb25tZW50IHdoZXJlIHRoZSBQb2xpY3kgRW5naW5lIGlzIGJlaW5nIHVzZWRcclxuICAqIEBwYXJhbSAge09iamVjdH0gICAgbWVzc2FnZVxyXG4gICovXHJcbiAgaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UpIHtcclxuICAgIGNvbnRleHRbdGhpcy5hdHRyaWJ1dGVdID0geyBtZXNzYWdlOiBtZXNzYWdlIH07XHJcbiAgICBsZXQgdmFsdWUgPSBjb250ZXh0W3RoaXMuYXR0cmlidXRlXTtcclxuICAgIGxldCB0ZW1wUGFyYW07XHJcblxyXG4gICAgaWYgKHRoaXMub3BlcmF0b3IgPT09ICdpbicpIHtcclxuICAgICAgaWYgKCEoQXJyYXkuaXNBcnJheSh0aGlzLnBhcmFtcykpKSB7XHJcbiAgICAgICAgdGVtcFBhcmFtID0gY29udGV4dC5nZXRHcm91cCh0aGlzLnBhcmFtcywgbWVzc2FnZS50byk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3JzW3RoaXMub3BlcmF0b3JdKFt0ZW1wUGFyYW0sIHZhbHVlXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbdGhpcy5vcGVyYXRvcl0oW3RoaXMucGFyYW1zLCB2YWx1ZV0pO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbmRpdGlvbjtcclxuIiwiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5cclxuaW1wb3J0IENvbmRpdGlvbiBmcm9tICcuL0NvbmRpdGlvbic7XHJcblxyXG4vKipcclxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cclxuKiBAY2xhc3NkZXNjIENsYXNzIHRvIHJlcHJlc2VudCBhIHN1YnNjcmlwdGlvbiBjb25kaXRpb24gYW5kIGV2YWx1YXRlIGl0cyBhcHBsaWNhYmlsaXR5LlxyXG4qL1xyXG5jbGFzcyBTdWJzY3JpcHRpb25Db25kaXRpb24gZXh0ZW5kcyBDb25kaXRpb24ge1xyXG5cclxuICAvKipcclxuICAqIENyZWF0ZXMgYSBuZXcgU3Vic2NyaXB0aW9uQ29uZGl0aW9uLlxyXG4gICogQGNsYXNzXHJcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBhdHRyaWJ1dGVcclxuICAqIEBwYXJhbSAge3N0cmluZ30gIG9wZXJhdG9yXHJcbiAgKiBAcGFyYW0gIHsqfSAgICAgICBwYXJhbXNcclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZSwgb3BlcmF0b3IsIHBhcmFtcykge1xyXG4gICAgc3VwZXIoYXR0cmlidXRlLCBvcGVyYXRvciwgcGFyYW1zKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogVmVyaWZpZXMgaWYgdGhlIHN1YnNjcmlwdGlvbiBjb25kaXRpb24gaXMgYXBwbGljYWJsZSB0byB0aGUgbWVzc2FnZS4gRmlyc3QsIHZlcmlmaWVzIGlmIHRoZSBtZXNzYWdlIGlzIG9mIHRoZSBzdWJzY3JpcHRpb24gdHlwZTsgc2Vjb25kLCB2ZXJpZmllcyBpZiB0aGUgbWVzc2FnZSBpcyBmcm9tIGEgcmVtb3RlIHJ1bnRpbWUgdG8gZ3VhcmFudGVlIHRoYXQgdGhlIHN1YnNjcmlwdGlvbiBpcyBiZWluZyB2YWxpZGF0ZWQgaW4gdGhlIGRlc3RpbmF0aW9uIHJ1bnRpbWU7IHRoaXJkLCB2ZXJpZmllcyBpZiB0aGUgc3Vic2NyaXB0aW9uIHByZWZlcmVuY2UgaXMgbWV0LlxyXG4gICogQHBhcmFtICB7T2JqZWN0fSAgICBjb250ZXh0ICAgZW52aXJvbm1lbnQgd2hlcmUgdGhlIFBvbGljeSBFbmdpbmUgaXMgYmVpbmcgdXNlZFxyXG4gICogQHBhcmFtICB7T2JqZWN0fSAgICBtZXNzYWdlXHJcbiAgKi9cclxuICBpc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSkge1xyXG4gICAgbGV0IGlzU3Vic2NyaXB0aW9uID0gbWVzc2FnZS50eXBlID09PSAnc3Vic2NyaWJlJztcclxuICAgIGxldCBpc0Zyb21SZW1vdGVTTSA9IGNvbnRleHQuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTtcclxuICAgIGlmIChpc1N1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7XHJcbiAgICAgIHJldHVybiBzdXBlci5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3Vic2NyaXB0aW9uQ29uZGl0aW9uO1xyXG4iLCJpbXBvcnQgQWxsb3dPdmVycmlkZXMgZnJvbSAnLi4vY29tYmluaW5nQWxnb3JpdGhtcy9BbGxvd092ZXJyaWRlcyc7XHJcbmltcG9ydCBCbG9ja092ZXJyaWRlcyBmcm9tICcuLi9jb21iaW5pbmdBbGdvcml0aG1zL0Jsb2NrT3ZlcnJpZGVzJztcclxuaW1wb3J0IHtkaXZpZGVVUkwsIGdldFVzZXJFbWFpbEZyb21VUkwsIGlzRGF0YU9iamVjdFVSTH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgRmlyc3RBcHBsaWNhYmxlIGZyb20gJy4uL2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlJztcclxuaW1wb3J0IFJlVGhpbmtDdHggZnJvbSAnLi4vUmVUaGlua0N0eCc7XHJcblxyXG5jbGFzcyBSdW50aW1lQ29yZUN0eCBleHRlbmRzIFJlVGhpbmtDdHgge1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZE1vZHVsZSwgcnVudGltZVJlZ2lzdHJ5LCBzdG9yYWdlTWFuYWdlcikge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMuaWRNb2R1bGUgPSBpZE1vZHVsZTtcclxuICAgIHRoaXMucnVudGltZVJlZ2lzdHJ5ID0gcnVudGltZVJlZ2lzdHJ5O1xyXG4gICAgdGhpcy5hY3RpdmVVc2VyUG9saWN5ID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kgPSB7fTtcclxuICAgIHRoaXMudXNlclBvbGljaWVzID0ge307XHJcbiAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyID0gc3RvcmFnZU1hbmFnZXI7XHJcbiAgfVxyXG5cclxuICBnZXQgc3Vic2NyaXB0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbjtcclxuICB9XHJcblxyXG4gIHNldCBzdWJzY3JpcHRpb24ocGFyYW1zKSB7XHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSBwYXJhbXMubWVzc2FnZS5ib2R5LnN1YnNjcmliZXI7XHJcbiAgfVxyXG5cclxuICBsb2FkQ29uZmlndXJhdGlvbnMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JldGhpbms6YWN0aXZlUG9saWN5JykudGhlbigodmFsdWUpID0+IHtcclxuICAgICAgICBfdGhpcy5hY3RpdmVVc2VyUG9saWN5ID0gdmFsdWU7XHJcblxyXG4gICAgICAgIHJldHVybiBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JldGhpbms6Z3JvdXBzJyk7XHJcbiAgICAgIH0pLnRoZW4oKGdyb3VwSW5mbykgPT4ge1xyXG4gICAgICAgIGxldCBncm91cHMgPSBncm91cEluZm87XHJcbiAgICAgICAgX3RoaXMuZ3JvdXBzID0gKGdyb3VwcyA9PT0gdW5kZWZpbmVkKSA/IHt9IDogZ3JvdXBzO1xyXG5cclxuICAgICAgICByZXR1cm4gX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOnNwUG9saWNpZXMnKTtcclxuICAgICAgfSkudGhlbigocG9saWNpZXNJbmZvKSA9PiB7XHJcbiAgICAgICAgbGV0IHNwUG9saWNpZXMgPSBwb2xpY2llc0luZm87XHJcbiAgICAgICAgX3RoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5ID0gKHNwUG9saWNpZXMgPT09IHVuZGVmaW5lZCkgPyB7fSA6IHNwUG9saWNpZXM7XHJcblxyXG4gICAgICAgIF90aGlzLl9sb2FkVXNlclBvbGljaWVzKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcmVwYXJlRm9yRXZhbHVhdGlvbihtZXNzYWdlLCBpc0luY29taW5nKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgICAgaWYgKGlzSW5jb21pbmcpIHtcclxuICAgICAgICBpZiAoX3RoaXMuX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkpIHtcclxuICAgICAgICAgIF90aGlzLmlkTW9kdWxlLmRlY3J5cHRNZXNzYWdlKG1lc3NhZ2UpLnRoZW4oZnVuY3Rpb24obWVzc2FnZSkge1xyXG4gICAgICAgICAgICAvKmlmIChtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnKSB7XHJcbiAgICAgICAgICAgICAgX3RoaXMuX2lzVmFsaWRVcGRhdGUobWVzc2FnZSkudGhlbihtZXNzYWdlID0+IHsqL1xyXG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIC8qfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgfSovXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ09OIHByZXBhcmVGb3JFdmFsdWF0aW9uJywgbWVzc2FnZSk7XHJcbiAgICAgICAgaWYgKF90aGlzLl9pc1RvU2V0SUQobWVzc2FnZSkpIHtcclxuICAgICAgICAgIF90aGlzLl9nZXRJZGVudGl0eShtZXNzYWdlKS50aGVuKGlkZW50aXR5ID0+IHtcclxuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmlkZW50aXR5ID0gaWRlbnRpdHk7XHJcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0UG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpIHtcclxuICAgIGxldCBwb2xpY2llcyA9IHt9O1xyXG5cclxuICAgIGlmICh0aGlzLmFjdGl2ZVVzZXJQb2xpY3kgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBwb2xpY2llcy51c2VyUG9saWN5ID0gdGhpcy51c2VyUG9saWNpZXNbdGhpcy5hY3RpdmVVc2VyUG9saWN5XTtcclxuICAgIH1cclxuXHJcbiAgICBwb2xpY2llcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kgPSB0aGlzLmdldFNlcnZpY2VQcm92aWRlclBvbGljeShtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSk7XHJcblxyXG4gICAgcmV0dXJuIHBvbGljaWVzO1xyXG4gIH1cclxuXHJcbiAgX2lzVmFsaWRVcGRhdGUobWVzc2FnZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGlmIChtZXNzYWdlLmZyb20uc3BsaXQoJzovLycpLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICBfdGhpcy5pZE1vZHVsZS5fZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0KG1lc3NhZ2UuZnJvbSkudGhlbihoeXBlcnR5VVJMID0+IHtcclxuICAgICAgICAgIGlmIChoeXBlcnR5VVJMID09PSBtZXNzYWdlLmJvZHkuc291cmNlKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QoJ1RoZSBzb3VyY2Ugb2YgdGhlIG1lc3NhZ2UgaXMgbm90IHZhbGlkLicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByZXBhcmVUb0ZvcndhcmQobWVzc2FnZSwgaXNJbmNvbWluZywgcmVzdWx0KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIC8vIGhhY2sgdG8gZGlzYWJsZSBtdXR1YWwgYXV0aGVudGljYXRpb24gdW50aWwgIzE0NyBpcyBmaXhlZFxyXG4gICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG5cclxuICAgICAgaWYgKGlzSW5jb21pbmcgJiByZXN1bHQpIHtcclxuICAgICAgICBsZXQgaXNTdWJzY3JpcHRpb24gPSBtZXNzYWdlLnR5cGUgPT09ICdzdWJzY3JpYmUnO1xyXG4gICAgICAgIGxldCBpc0Zyb21SZW1vdGVTTSA9IF90aGlzLmlzRnJvbVJlbW90ZVNNKG1lc3NhZ2UuZnJvbSk7XHJcbiAgICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uICYgaXNGcm9tUmVtb3RlU00pIHtcclxuICAgICAgICAgIF90aGlzLmRvTXV0dWFsQXV0aGVudGljYXRpb24obWVzc2FnZSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoX3RoaXMuX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkpIHtcclxuICAgICAgICAgIF90aGlzLmlkTW9kdWxlLmVuY3J5cHRNZXNzYWdlKG1lc3NhZ2UpLnRoZW4oKG1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRvTXV0dWFsQXV0aGVudGljYXRpb24obWVzc2FnZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgbGV0IHRvID0gbWVzc2FnZS50by5zcGxpdCgnLycpO1xyXG4gICAgICBsZXQgc3Vic0luZGV4ID0gdG8uaW5kZXhPZignc3Vic2NyaXB0aW9uJyk7XHJcbiAgICAgIGxldCBpc0RhdGFPYmplY3RTdWJzY3JpcHRpb24gPSBzdWJzSW5kZXggIT09IC0xO1xyXG4gICAgICBsZXQgaXNGcm9tUmVtb3RlU00gPSBfdGhpcy5pc0Zyb21SZW1vdGVTTShtZXNzYWdlLmZyb20pO1xyXG4gICAgICBpZiAoaXNEYXRhT2JqZWN0U3Vic2NyaXB0aW9uICYgaXNGcm9tUmVtb3RlU00pIHtcclxuICAgICAgICB0by5wb3AoKTtcclxuICAgICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IHRvWzBdICsgJy8vJyArIHRvWzJdICsgJy8nICsgdG9bM107XHJcbiAgICAgICAgX3RoaXMuaWRNb2R1bGUuZG9NdXR1YWxBdXRoZW50aWNhdGlvbihkYXRhT2JqZWN0VVJMLCBtZXNzYWdlLmJvZHkuc3Vic2NyaWJlcikudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICBfdGhpcy5ydW50aW1lUmVnaXN0cnkucmVnaXN0ZXJTdWJzY3JpYmVyKGRhdGFPYmplY3RVUkwsIG1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyKTtcclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0TXlFbWFpbHMoKSB7XHJcbiAgICBsZXQgaWRlbnRpdGllcyA9IHRoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdGllcygpO1xyXG4gICAgbGV0IGVtYWlscyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgaW4gaWRlbnRpdGllcykge1xyXG4gICAgICBlbWFpbHMucHVzaChnZXRVc2VyRW1haWxGcm9tVVJMKGlkZW50aXRpZXNbaV0uaWRlbnRpdHkpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZW1haWxzO1xyXG4gIH1cclxuXHJcbiAgZ2V0TXlIeXBlcnRpZXMoKSB7XHJcbiAgICBsZXQgaHlwZXJ0aWVzID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuaHlwZXJ0aWVzTGlzdDtcclxuICAgIGxldCBoeXBlcnRpZXNOYW1lcyA9IFtdO1xyXG5cclxuICAgIGZvciAobGV0IGkgaW4gaHlwZXJ0aWVzKSB7XHJcbiAgICAgIGxldCBoeXBlcnR5TmFtZSA9IGh5cGVydGllc1tpXS5vYmplY3ROYW1lO1xyXG4gICAgICBpZiAoaHlwZXJ0aWVzTmFtZXMuaW5kZXhPZihoeXBlcnR5TmFtZSkgPT09IC0xKSB7XHJcbiAgICAgICAgaHlwZXJ0aWVzTmFtZXMucHVzaChoeXBlcnR5TmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaHlwZXJ0aWVzTmFtZXM7XHJcbiAgfVxyXG5cclxuICBnZXRTZXJ2aWNlUHJvdmlkZXJQb2xpY3kobWVzc2FnZSwgaXNJbmNvbWluZykge1xyXG4gICAgbGV0IHBvbGljeTtcclxuXHJcbiAgICBpZiAoaXNJbmNvbWluZykge1xyXG4gICAgICBsZXQgdG9IeXBlcnR5ID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUobWVzc2FnZS50byk7XHJcbiAgICAgIHBvbGljeSA9IHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5W3RvSHlwZXJ0eV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQgZnJvbUh5cGVydHkgPSB0aGlzLnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5TmFtZShtZXNzYWdlLmZyb20pO1xyXG4gICAgICBwb2xpY3kgPSB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeVtmcm9tSHlwZXJ0eV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcG9saWN5O1xyXG4gIH1cclxuXHJcbiAgaXNGcm9tUmVtb3RlU00oZnJvbSkge1xyXG4gICAgbGV0IHNwbGl0RnJvbSA9IGZyb20uc3BsaXQoJzovLycpO1xyXG4gICAgcmV0dXJuIHNwbGl0RnJvbVswXSA9PT0gJ3J1bnRpbWUnICYmIGZyb20gIT09IHRoaXMucnVudGltZVJlZ2lzdHJ5LnJ1bnRpbWVVUkwgKyAnL3NtJztcclxuICB9XHJcblxyXG4gIF9pc1RvU2V0SUQobWVzc2FnZSkge1xyXG4gICAgbGV0IHNjaGVtYXNUb0lnbm9yZSA9IFsnZG9tYWluLWlkcCcsICdydW50aW1lJywgJ2RvbWFpbiddO1xyXG4gICAgbGV0IHNwbGl0RnJvbSA9IChtZXNzYWdlLmZyb20pLnNwbGl0KCc6Ly8nKTtcclxuICAgIGxldCBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdO1xyXG5cclxuICAgIGxldCBfZnJvbSA9IG1lc3NhZ2UuZnJvbTtcclxuXHJcbiAgICBpZiAobWVzc2FnZS5ib2R5ICYmIG1lc3NhZ2UuYm9keS5oYXNPd25Qcm9wZXJ0eSgnc291cmNlJykpXHJcbiAgICAgIF9mcm9tID0gbWVzc2FnZS5ib2R5LnNvdXJjZTtcclxuXHJcbiAgICAvLyBTaWduYWxsaW5nIE1lc3NhZ2VzIGJldHdlZW4gUDJQIFN0dWJzIGRvbid0IGhhdmUgSWRlbnRpdGllcy4gRkZTXHJcblxyXG4gICAgaWYgKF9mcm9tLmluY2x1ZGVzKCcvcDJwcmVxdWVzdGVyLycpIHx8IF9mcm9tLmluY2x1ZGVzKCcvcDJwaGFuZGxlci8nKSlcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgIHJldHVybiBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZihmcm9tU2NoZW1hKSA9PT0gLTE7XHJcbiAgfVxyXG5cclxuICBnZXRVUkwodXJsKSB7XHJcbiAgICBsZXQgc3BsaXRVUkwgPSB1cmwuc3BsaXQoJy8nKTtcclxuICAgIHJldHVybiBzcGxpdFVSTFswXSArICcvLycgKyBzcGxpdFVSTFsyXSArICcvJyArIHNwbGl0VVJMWzNdO1xyXG4gIH1cclxuXHJcbiAgX2dldElkZW50aXR5KG1lc3NhZ2UpIHtcclxuICAgIGNvbnNvbGUubG9nKCdbUG9saWN5LlJ1bnRpbWVDb3JlQ3R4LmdldElkZW50aXR5XSAnLCBtZXNzYWdlKTtcclxuXHJcbiAgICBpZiAobWVzc2FnZS5ib2R5LnNvdXJjZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmlkTW9kdWxlLmdldFRva2VuKG1lc3NhZ2UuYm9keS5zb3VyY2UsIG1lc3NhZ2UudG8pO1xyXG4gICAgfSBlbHNlXHJcblxyXG4vKiAgICBpZiAobWVzc2FnZS50eXBlID09PSAndXBkYXRlJykge1xyXG4gICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRUb2tlbihtZXNzYWdlLmJvZHkuc291cmNlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWVzc2FnZS50eXBlID09PSAncmVzcG9uc2UnICYmIG1lc3NhZ2UuYm9keS5zb3VyY2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRUb2tlbihtZXNzYWdlLmJvZHkuc291cmNlKTtcclxuICAgIH0qL1xyXG5cclxuLy8gICAgaWYgKGRpdmlkZVVSTChtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5Jykge1xyXG4gICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRUb2tlbihtZXNzYWdlLmZyb20sIG1lc3NhZ2UudG8pO1xyXG4vKiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRUb2tlbih0aGlzLmdldFVSTChtZXNzYWdlLmZyb20pKTtcclxuICAgIH0qL1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBJZGVudGlmaWVzIHRoZSBtZXNzYWdlcyB0byBiZSBmb3J3YXJkZWQgdG8gdGhlIElkZW50aXR5IE1vZHVsZSBmb3JcclxuICAqIGVuY3J5cHRpb24vZGVjcnlwdGlvbiBhbmQgaW50ZWdyaXR5IHZhbGlkYXRpb24uXHJcbiAgKiBAcGFyYW0ge01lc3NhZ2V9ICAgIG1lc3NhZ2VcclxuICAqIEByZXR1cm5zIHtib29sZWFufSAgcmV0dXJucyB0cnVlIGlmIHRoZSBtZXNzYWdlIHJlcXVpcmVzIGVuY3J5cHRpb24vZGVjcnlwdGlvblxyXG4gICogICAgICAgICAgICAgICAgICAgICBvciBpZiBpdHMgdHlwZSBlcXVhbHMgJ2hhbmRzaGFrZSc7IGZhbHNlIG90aGVyd2lzZVxyXG4gICovXHJcbiAgX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkge1xyXG4gICAgbGV0IGlzQ3JlYXRlID0gbWVzc2FnZS50eXBlID09PSAnY3JlYXRlJztcclxuICAgIGxldCBpc0Zyb21IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknO1xyXG4gICAgbGV0IGlzVG9IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JztcclxuICAgIGxldCBpc1RvRGF0YU9iamVjdCA9IGlzRGF0YU9iamVjdFVSTChtZXNzYWdlLnRvKTtcclxuXHJcbiAgICAvLyB0b2RvOiByZXR1cm4gZmFsc2UgZm9yIG1lc3NhZ2VzIGNvbWluZyBmcm9tIGludGVyd29ya2luZyBzdHVicy5cclxuICAgIC8vIEdldCBkZXNjcmlwdG9yIGZyb20gcnVudGltZSBjYXRhbG9ndWUgYW5kIGNoZWNrIGludGVyd29ya2luZyBmaWVsZC5cclxuXHJcbiAgICByZXR1cm4gKGlzQ3JlYXRlICYmIGlzRnJvbUh5cGVydHkgJiYgaXNUb0h5cGVydHkpIHx8IChpc0NyZWF0ZSAmJiBpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB8fCBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZSc7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIENyZWF0ZXMgYSBncm91cCB3aXRoIHRoZSBnaXZlbiBuYW1lLlxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgZ3JvdXBOYW1lXHJcbiAgKi9cclxuICBfbG9hZFVzZXJQb2xpY2llcygpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgncmV0aGluazp1c2VyUG9saWNpZXMnKS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgIGxldCBwb2xpY2llcyA9IHZhbHVlO1xyXG4gICAgICAgIGlmIChwb2xpY2llcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBmb3IgKGxldCBpIGluIHBvbGljaWVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGVwLmFkZFBvbGljeSgnVVNFUicsIGksIHBvbGljaWVzW2ldKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIF9nZXRMYXN0Q29tcG9uZW50T2ZVUkwodXJsKSB7XHJcbiAgICBsZXQgc3BsaXQgPSB1cmwuc3BsaXQoJy8nKTtcclxuICAgIHJldHVybiBzcGxpdFtzcGxpdC5sZW5ndGggLSAxXTtcclxuICB9XHJcblxyXG4gIF9nZXRQb2xpY2llc0pTT04ocG9saWNpZXMpIHtcclxuICAgIGZvciAobGV0IGkgaW4gcG9saWNpZXMpIHtcclxuICAgICAgbGV0IGNvbWJpbmluZ0FsZ29yaXRobSA9IHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobTtcclxuICAgICAgaWYgKGNvbWJpbmluZ0FsZ29yaXRobSBpbnN0YW5jZW9mIEJsb2NrT3ZlcnJpZGVzKSB7XHJcbiAgICAgICAgcG9saWNpZXNbaV0uY29tYmluaW5nQWxnb3JpdGhtID0gJ2Jsb2NrT3ZlcnJpZGVzJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgQWxsb3dPdmVycmlkZXMpIHtcclxuICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdhbGxvd092ZXJyaWRlcyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmIChjb21iaW5pbmdBbGdvcml0aG0gaW5zdGFuY2VvZiBGaXJzdEFwcGxpY2FibGUpIHtcclxuICAgICAgICAgICAgcG9saWNpZXNbaV0uY29tYmluaW5nQWxnb3JpdGhtID0gJ2ZpcnN0QXBwbGljYWJsZSc7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwb2xpY2llc1tpXS5jb21iaW5pbmdBbGdvcml0aG0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBvbGljaWVzO1xyXG4gIH1cclxuXHJcbiAgc2F2ZUFjdGl2ZVBvbGljeSgpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZXRoaW5rOmFjdGl2ZVBvbGljeScsIDAsIHRoaXMuYWN0aXZlVXNlclBvbGljeSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2F2ZUdyb3VwcygpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZXRoaW5rOmdyb3VwcycsIDAsIHRoaXMuZ3JvdXBzKS50aGVuKCgpID0+IHtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzYXZlUG9saWNpZXMoc291cmNlLCBwb2xpY3ksIGtleSkge1xyXG4gICAgbGV0IHBvbGljaWVzSnNvbjtcclxuXHJcbiAgICBzd2l0Y2ggKHNvdXJjZSkge1xyXG4gICAgICBjYXNlICdVU0VSJzpcclxuICAgICAgICBwb2xpY2llc0pzb24gPSBKU09OLnN0cmluZ2lmeSh0aGlzLnVzZXJQb2xpY2llcyk7XHJcbiAgICAgICAgcG9saWNpZXNKc29uID0gdGhpcy5fZ2V0UG9saWNpZXNKU09OKEpTT04ucGFyc2UocG9saWNpZXNKc29uKSk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ3JldGhpbms6dXNlclBvbGljaWVzJywgMCwgcG9saWNpZXNKc29uKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnU0VSVklDRV9QUk9WSURFUic6XHJcbiAgICAgICAgaWYgKHBvbGljeSAhPT0gdW5kZWZpbmVkICYga2V5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5W2tleV0gPSBwb2xpY3k7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBvbGljaWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5KTtcclxuICAgICAgICBwb2xpY2llc0pzb24gPSB0aGlzLl9nZXRQb2xpY2llc0pTT04oSlNPTi5wYXJzZShwb2xpY2llc0pzb24pKTtcclxuICAgICAgICB0aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazpzcFBvbGljaWVzJywgMCwgcG9saWNpZXNKc29uKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEdyb3Vwc05hbWVzKCkge1xyXG4gICAgbGV0IG15R3JvdXBzID0gdGhpcy5ncm91cHM7XHJcbiAgICBsZXQgZ3JvdXBzTmFtZXMgPSBbXTtcclxuICAgIGlmIChteUdyb3VwcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGZvciAobGV0IGdyb3VwTmFtZSBpbiBteUdyb3Vwcykge1xyXG4gICAgICAgIGdyb3Vwc05hbWVzLnB1c2goZ3JvdXBOYW1lKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdyb3Vwc05hbWVzO1xyXG4gIH1cclxuXHJcbiAgZ2V0R3JvdXAoZ3JvdXBOYW1lLCBkZXN0aW5hdGlvbikge1xyXG4gICAgbGV0IG1lbWJlcnMgPSBbXTtcclxuXHJcbiAgICBpZiAoZ3JvdXBOYW1lID09PSAncHJlYXV0aG9yaXNlZCcpIHtcclxuICAgICAgbGV0IGRhdGFPYmplY3RVUkwgPSBkZXN0aW5hdGlvbi5zcGxpdCgnLycpO1xyXG4gICAgICBkYXRhT2JqZWN0VVJMLnBvcCgpO1xyXG4gICAgICBkYXRhT2JqZWN0VVJMID0gZGF0YU9iamVjdFVSTFswXSArICcvLycgKyBkYXRhT2JqZWN0VVJMWzJdO1xyXG4gICAgICBtZW1iZXJzID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0UHJlQXV0aFN1YnNjcmliZXJzKGRhdGFPYmplY3RVUkwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIG1lbWJlcnMgPSB0aGlzLmdyb3Vwc1tncm91cE5hbWVdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1lbWJlcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIENyZWF0ZXMgYSBncm91cCB3aXRoIHRoZSBnaXZlbiBuYW1lLlxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgZ3JvdXBOYW1lXHJcbiAgKi9cclxuICBjcmVhdGVHcm91cChncm91cE5hbWUpIHtcclxuICAgIHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV0gPSBbXTtcclxuICAgIHRoaXMuc2F2ZUdyb3VwcygpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlR3JvdXAoZ3JvdXBOYW1lKSB7XHJcbiAgICBkZWxldGUgdGhpcy5ncm91cHNbZ3JvdXBOYW1lXTtcclxuICAgIHRoaXMuc2F2ZUdyb3VwcygpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBBZGRzIHRoZSBnaXZlbiB1c2VyIGVtYWlsIHRvIHRoZSBncm91cCB3aXRoIHRoZSBnaXZlbiBuYW1lLlxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgdXNlckVtYWlsXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICBncm91cE5hbWVcclxuICAqL1xyXG4gIGFkZFRvR3JvdXAoZ3JvdXBOYW1lLCB1c2VyRW1haWwpIHtcclxuICAgIGxldCBteUdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xyXG4gICAgaWYgKG15R3JvdXBzW2dyb3VwTmFtZV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBpZiAobXlHcm91cHNbZ3JvdXBOYW1lXS5pbmRleE9mKHVzZXJFbWFpbCkgPT09IC0xKSB7XHJcbiAgICAgICAgbXlHcm91cHNbZ3JvdXBOYW1lXS5wdXNoKHVzZXJFbWFpbCk7XHJcbiAgICAgICAgdGhpcy5zYXZlR3JvdXBzKCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IEVycm9yKCdHcm91cCBcIicgKyBncm91cE5hbWUgKyAnXCIgZG9lcyBub3QgZXhpc3QhJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW1vdmVGcm9tR3JvdXAoZ3JvdXBOYW1lLCB1c2VyRW1haWwpIHtcclxuICAgIGxldCBncm91cCA9IHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV07XHJcblxyXG4gICAgZ3JvdXAuc3BsaWNlKGdyb3VwLmluZGV4T2YodXNlckVtYWlsKSwgMSk7XHJcbiAgICB0aGlzLnNhdmVHcm91cHMoKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSdW50aW1lQ29yZUN0eDtcclxuIiwiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5cclxuaW1wb3J0IHtkaXZpZGVVUkwsIGNvbnZlcnRUb1VzZXJVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbi8qKlxyXG4qIENvcmUgRGlzY292ZXJ5IGludGVyZmFjZVxyXG4qIENsYXNzIHRvIGFsbG93IGFwcGxpY2F0aW9ucyB0byBzZWFyY2ggZm9yIGh5cGVydGllcyBhbmQgRGF0YU9iamVjdHMgdXNpbmcgdGhlIG1lc3NhZ2UgYnVzXHJcbiovXHJcbmNsYXNzIERpc2NvdmVyeSB7XHJcblxyXG4gIC8qKlxyXG4gICogVG8gaW5pdGlhbGlzZSB0aGUgSHlwZXJ0eURpc2NvdmVyLCB3aGljaCB3aWxsIHByb3ZpZGUgdGhlIHN1cHBvcnQgZm9yIGh5cGVydGllcyB0b1xyXG4gICogcXVlcnkgdXNlcnMgcmVnaXN0ZXJlZCBpbiBvdXRzaWRlIHRoZSBpbnRlcm5hbCBjb3JlLlxyXG4gICogQHBhcmFtICB7TWVzc2FnZUJ1c30gICAgICAgICAgbXNnYnVzICAgICAgICAgICAgICAgIG1zZ2J1c1xyXG4gICogQHBhcmFtICB7UnVudGltZVVSTH0gICAgICAgICAgcnVudGltZVVSTCAgICAgICAgICAgIHJ1bnRpbWVVUkxcclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIG1zZ0J1cykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzLm1lc3NhZ2VCdXMgPSBtc2dCdXM7XHJcblxyXG4gICAgX3RoaXMuZG9tYWluID0gZGl2aWRlVVJMKHJ1bnRpbWVVUkwpLmRvbWFpbjtcclxuICAgIF90aGlzLmRpc2NvdmVyeVVSTCA9IHJ1bnRpbWVVUkw7XHJcbiAgICBfdGhpcy5yZWdpc3RyeVVSTCA9IHJ1bnRpbWVVUkwgKyAnL3JlZ2lzdHJ5Lyc7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IGFuIGRhdGFPYmplY3QgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkgd2l0aCBhIGdpdmVuIG5hbWUsIGFuZFxyXG4gICogcmV0dXJuIHRoZSBkYXRhT2JqZWN0IGluZm9ybWF0aW9uLCBpZiBmb3VuZC5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIG5hbWUgIGRhdGFPYmplY3QgVVJMXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2VcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdFBlck5hbWUobmFtZSwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBhY3RpdmVEb21haW4gPSAoIWRvbWFpbikgPyBfdGhpcy5kb21haW4gOiBkb21haW47XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogbmFtZX1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgZGF0YU9iamVjdCA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChkYXRhT2JqZWN0KSB7XHJcbiAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3Qgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IGRhdGFPYmplY3QgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZFxyXG4gICogcmV0dXJuIHRoZSBkYXRhT2JqZWN0IGluZm9ybWF0aW9uLCBpZiBmb3VuZC5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIHVybCAgZGF0YU9iamVjdCBVUkxcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKVxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgUHJvbWlzZVxyXG4gICovXHJcbiAgZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKHVybCwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogdXJsfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGxldCBkYXRhT2JqZWN0ID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGFPYmplY3QpIHtcclxuICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnRGF0YU9iamVjdCBub3QgZm91bmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqICBmdW5jdGlvbiB0byBkZWxldGUgYW4gRGF0YSBPYmplY3QgcmVnaXN0ZXJlZCBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XHJcbiAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgIHVybCAgICAgICAgICAgICAgZGF0YU9iamVjdCB1cmxcclxuICAqICBAcGFyYW0gICB7ZG9tYWlufSAgICAgICAgICAgZG9tYWluICAgICAgICAgKE9wdGlvbmFsKVxyXG4gICogIEByZXR1cm4gIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlICAgICAgICAgIHJlc3VsdFxyXG4gICovXHJcbiAgZGVsZXRlRGF0YU9iamVjdCh1cmwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgIGJvZHk6IHsgdmFsdWU6IHtuYW1lOiB1cmx9fX07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXBseS5ib2R5LmNvZGU7XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBkZWxldGluZyBkYXRhT2JqZWN0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBzcGVjaWZpYyByZXBvcnRlciBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybiB0aGUgZGF0YU9iamVjdHMgZnJvbSB0aGF0IHJlcG9ydGVyLlxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgcmVwb3J0ZXIgICAgIGRhdGFPYmplY3QgcmVwb3J0ZXJcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAgICAgICAoT3B0aW9uYWwpXHJcbiAgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgIFByb21pc2UgICAgICAgRGF0YU9iamVjdHNcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdFBlclJlcG9ydGVyKHJlcG9ydGVyLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG5cclxuICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiByZXBvcnRlcn1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgZGF0YU9iamVjdHMgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoZGF0YU9iamVjdHMpIHtcclxuICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ05vIGRhdGFPYmplY3Qgd2FzIGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqIEFkdmFuY2VkIFNlYXJjaCBmb3IgZGF0YU9iamVjdHMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnlcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgICAgICB1c2VyIGlkZW50aWZpZXIsIGVpdGhlciBpbiB1cmwgb3IgZW1haWwgZm9ybWF0XHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgZGF0YU9iamVjdCBzY2hlbWFzXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgZGF0YU9iamVjdCByZXNvdXJjZXNcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpICAgICBkb21haW4gb2YgdGhlIHJlZ2lzdHJ5IHRvIHNlYXJjaFxyXG4gICovXHJcbiAgZGlzY292ZXJEYXRhT2JqZWN0KG5hbWUsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG4gICAgLy9sZXQgdXNlcklkZW50aWZpZXIgPSBjb252ZXJ0VG9Vc2VyVVJMKHVzZXIpO1xyXG5cclxuICAgIGFjdGl2ZURvbWFpbiA9ICghZG9tYWluKSA/IF90aGlzLmRvbWFpbiA6IGRvbWFpbjtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiBuYW1lLFxyXG4gICAgICBjcml0ZXJpYToge3Jlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogc2NoZW1hfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IGh5cGVydGllcyA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChoeXBlcnRpZXMpIHtcclxuICAgICAgICAgIHJlc29sdmUoaHlwZXJ0aWVzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdObyBEYXRhT2JqZWN0IHdhcyBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKiBBZHZhbmNlZCBTZWFyY2ggZm9yIEh5cGVydGllcyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeVxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgdXNlciAgICAgICAgICAgICAgICAgIHVzZXIgaWRlbnRpZmllciwgZWl0aGVyIGluIHVybCBvciBlbWFpbCBmb3JtYXRcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHNjaGVtYSAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGh5cGVydGllcyByZXNvdXJjZXNcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpICAgICBkb21haW4gb2YgdGhlIHJlZ2lzdHJ5IHRvIHNlYXJjaFxyXG4gICovXHJcbiAgZGlzY292ZXJIeXBlcnR5KHVzZXIsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG4gICAgbGV0IHVzZXJJZGVudGlmaWVyID0gY29udmVydFRvVXNlclVSTCh1c2VyKTtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogdXNlcklkZW50aWZpZXIsXHJcbiAgICAgIGNyaXRlcmlhOiB7cmVzb3VyY2VzOiByZXNvdXJjZXMsIGRhdGFTY2hlbWVzOiBzY2hlbWF9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgaHlwZXJ0aWVzID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKGh5cGVydGllcykge1xyXG4gICAgICAgICAgcmVzb2x2ZShoeXBlcnRpZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ05vIEh5cGVydHkgd2FzIGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybiB0aGUgbGFzdCBoeXBlcnR5IGluc3RhbmNlIHJlZ2lzdGVyZWQgYnkgdGhlIHVzZXIuXHJcbiAgKiBAcGFyYW0gIHtlbWFpbH0gICAgICAgICAgICAgIGVtYWlsXHJcbiAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2VcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0eVBlclVzZXIoZW1haWwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpZGVudGl0eVVSTCA9ICd1c2VyOi8vJyArIGVtYWlsLnN1YnN0cmluZyhlbWFpbC5pbmRleE9mKCdAJykgKyAxLCBlbWFpbC5sZW5ndGgpICsgJy8nICsgZW1haWwuc3Vic3RyaW5nKDAsIGVtYWlsLmluZGV4T2YoJ0AnKSk7XHJcblxyXG4gICAgLy8gbWVzc2FnZSB0byBxdWVyeSBkb21haW4gcmVnaXN0cnksIGFza2luZyBmb3IgYSB1c2VyIGh5cGVydHkuXHJcbiAgICBsZXQgbWVzc2FnZSA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogaWRlbnRpdHlVUkx9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlOiAnLCBtZXNzYWdlLCBhY3RpdmVEb21haW4sIGlkZW50aXR5VVJMKTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKCdtZXNzYWdlIFJFQUQnLCBtZXNzYWdlKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ21lc3NhZ2UgcmVwbHknLCByZXBseSk7XHJcblxyXG4gICAgICAgIGxldCBoeXBlcnR5O1xyXG4gICAgICAgIGxldCBtb3N0UmVjZW50O1xyXG4gICAgICAgIGxldCBsYXN0SHlwZXJ0eTtcclxuICAgICAgICBsZXQgdmFsdWUgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBmb3IgKGh5cGVydHkgaW4gdmFsdWUpIHtcclxuICAgICAgICAgIGlmICh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAobW9zdFJlY2VudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgbW9zdFJlY2VudCA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7XHJcbiAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGxldCBoeXBlcnR5RGF0ZSA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7XHJcbiAgICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnQuZ2V0VGltZSgpIDwgaHlwZXJ0eURhdGUuZ2V0VGltZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBtb3N0UmVjZW50ID0gaHlwZXJ0eURhdGU7XHJcbiAgICAgICAgICAgICAgICBsYXN0SHlwZXJ0eSA9IGh5cGVydHk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnTGFzdCBIeXBlcnR5OiAnLCBsYXN0SHlwZXJ0eSwgbW9zdFJlY2VudCk7XHJcblxyXG4gICAgICAgIGxldCBoeXBlcnR5VVJMID0gbGFzdEh5cGVydHk7XHJcblxyXG4gICAgICAgIGlmIChoeXBlcnR5VVJMID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHJldHVybiByZWplY3QoJ1VzZXIgSHlwZXJ0eSBub3QgZm91bmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpZFBhY2thZ2UgPSB7XHJcbiAgICAgICAgICBpZDogZW1haWwsXHJcbiAgICAgICAgICBkZXNjcmlwdG9yOiB2YWx1ZVtoeXBlcnR5VVJMXS5kZXNjcmlwdG9yLFxyXG4gICAgICAgICAgaHlwZXJ0eVVSTDogaHlwZXJ0eVVSTFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCc9PT0+IGh5cGVydHlEaXNjb3ZlcnkgbWVzc2FnZUJ1bmRsZTogJywgaWRQYWNrYWdlKTtcclxuICAgICAgICByZXNvbHZlKGlkUGFja2FnZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgdXNlcnMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZFxyXG4gICogcmV0dXJuIHRoZSBhbGwgdGhlIGh5cGVydGllcyByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyXHJcbiAgKiBAcGFyYW0gIHtlbWFpbH0gICAgICAgICAgICAgIGVtYWlsXHJcbiAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2VcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0aWVzUGVyVXNlcihlbWFpbCwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGlkZW50aXR5VVJMID0gJ3VzZXI6Ly8nICsgZW1haWwuc3Vic3RyaW5nKGVtYWlsLmluZGV4T2YoJ0AnKSArIDEsIGVtYWlsLmxlbmd0aCkgKyAnLycgKyBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTtcclxuXHJcbiAgICAvLyBtZXNzYWdlIHRvIHF1ZXJ5IGRvbWFpbiByZWdpc3RyeSwgYXNraW5nIGZvciBhIHVzZXIgaHlwZXJ0eS5cclxuICAgIGxldCBtZXNzYWdlID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiBpZGVudGl0eVVSTH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc29sZS5sb2coJ01lc3NhZ2UgZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyOiAnLCBtZXNzYWdlLCBhY3RpdmVEb21haW4sIGlkZW50aXR5VVJMKTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKCdtZXNzYWdlIFJFQUQnLCBtZXNzYWdlKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2Rpc2NvdmVySHlwZXJ0aWVzUGVyVXNlciByZXBseScsIHJlcGx5KTtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnVXNlciBIeXBlcnR5IG5vdCBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqICBmdW5jdGlvbiB0byBkZWxldGUgYW4gaHlwZXJ0eUluc3RhbmNlIGluIHRoZSBEb21haW4gUmVnaXN0cnlcclxuICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgICAgICAgdXNlciAgICAgICAgICAgICAgdXNlciB1cmxcclxuICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgICAgICAgaHlwZXJ0eUluc3RhbmNlICAgSHlwZXJ0eUluc250YW5jZSB1cmxcclxuICAqICBAcGFyYW0gICB7ZG9tYWlufSAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqICBAcmV0dXJuICB7UHJvbWlzZX0gICAgICAgICAgUHJvbWlzZSAgICAgICAgICByZXN1bHRcclxuICAqL1xyXG4gIGRlbGV0ZUh5cGVydHkodXNlciwgaHlwZXJ0eUluc3RhbmNlLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG5cclxuICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsICAgYm9keTogeyB2YWx1ZToge3VzZXI6IHVzZXIsIHVybDogaHlwZXJ0eUluc3RhbmNlIH19fTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGxldCByZXNwb25zZSA9IHJlcGx5LmJvZHkuY29kZTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICByZXNvbHZlKCdIeXBlcnR5IHN1Y2Nlc3NmdWxseSBkZWxldGVkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gZGVsZXRpbmcgaHlwZXJ0eScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGlzY292ZXJ5O1xyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG5pbXBvcnQge2RpdmlkZVVSTCwgY29udmVydFRvVXNlclVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuLyoqXHJcbiogQ29yZSBEaXNjb3ZlcnkgaW50ZXJmYWNlXHJcbiogQ2xhc3MgdG8gYWxsb3cgYXBwbGljYXRpb25zIHRvIHNlYXJjaCBmb3IgaHlwZXJ0aWVzIGFuZCBEYXRhT2JqZWN0cyB1c2luZyB0aGUgbWVzc2FnZSBidXNcclxuKi9cclxuY2xhc3MgRGlzY292ZXJ5U2VydmljZUZyYW1ld29yayB7XHJcblxyXG4gIC8qKlxyXG4gICogVG8gaW5pdGlhbGlzZSB0aGUgSHlwZXJ0eURpc2NvdmVyLCB3aGljaCB3aWxsIHByb3ZpZGUgdGhlIHN1cHBvcnQgZm9yIGh5cGVydGllcyB0b1xyXG4gICogcXVlcnkgdXNlcnMgcmVnaXN0ZXJlZCBpbiBvdXRzaWRlIHRoZSBpbnRlcm5hbCBjb3JlLlxyXG4gICogQHBhcmFtICB7TWVzc2FnZUJ1c30gICAgICAgICAgbXNnYnVzICAgICAgICAgICAgICAgIG1zZ2J1c1xyXG4gICogQHBhcmFtICB7UnVudGltZVVSTH0gICAgICAgICAgcnVudGltZVVSTCAgICAgICAgICAgIHJ1bnRpbWVVUkxcclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKGh5cGVydHlVUkwsIHJ1bnRpbWVVUkwsIG1zZ0J1cykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzLm1lc3NhZ2VCdXMgPSBtc2dCdXM7XHJcblxyXG4gICAgX3RoaXMuZG9tYWluID0gZGl2aWRlVVJMKHJ1bnRpbWVVUkwpLmRvbWFpbjtcclxuICAgIF90aGlzLmRpc2NvdmVyeVVSTCA9IGh5cGVydHlVUkwgKyAnL2Rpc2NvdmVyeSc7XHJcbiAgICBfdGhpcy5yZWdpc3RyeVVSTCA9IHJ1bnRpbWVVUkwgKyAnL3JlZ2lzdHJ5Lyc7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IGFuIGRhdGFPYmplY3QgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnkgd2l0aCBhIGdpdmVuIG5hbWUsIGFuZFxyXG4gICogcmV0dXJuIHRoZSBkYXRhT2JqZWN0IGluZm9ybWF0aW9uLCBpZiBmb3VuZC5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIG5hbWUgIGRhdGFPYmplY3QgVVJMXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2VcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdFBlck5hbWUobmFtZSwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBhY3RpdmVEb21haW4gPSAoIWRvbWFpbikgPyBfdGhpcy5kb21haW4gOiBkb21haW47XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyByZXNvdXJjZTogbmFtZX1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgZGF0YU9iamVjdCA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChkYXRhT2JqZWN0KSB7XHJcbiAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3Qgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IGRhdGFPYmplY3QgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZFxyXG4gICogcmV0dXJuIHRoZSBkYXRhT2JqZWN0IGluZm9ybWF0aW9uLCBpZiBmb3VuZC5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICAgIHVybCAgZGF0YU9iamVjdCBVUkxcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKVxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICAgUHJvbWlzZVxyXG4gICovXHJcbiAgZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKHVybCwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyByZXNvdXJjZTogdXJsfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGxldCBkYXRhT2JqZWN0ID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGFPYmplY3QpIHtcclxuICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnRGF0YU9iamVjdCBub3QgZm91bmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqICBmdW5jdGlvbiB0byBkZWxldGUgYW4gRGF0YSBPYmplY3QgcmVnaXN0ZXJlZCBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XHJcbiAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgIHVybCAgICAgICAgICAgICAgZGF0YU9iamVjdCB1cmxcclxuICAqICBAcGFyYW0gICB7ZG9tYWlufSAgICAgICAgICAgZG9tYWluICAgICAgICAgKE9wdGlvbmFsKVxyXG4gICogIEByZXR1cm4gIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlICAgICAgICAgIHJlc3VsdFxyXG4gICovXHJcbiAgZGVsZXRlRGF0YU9iamVjdCh1cmwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgIGJvZHk6IHsgdmFsdWU6IHtuYW1lOiB1cmx9fX07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXBseS5ib2R5LmNvZGU7XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBkZWxldGluZyBkYXRhT2JqZWN0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBzcGVjaWZpYyByZXBvcnRlciBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybiB0aGUgZGF0YU9iamVjdHMgZnJvbSB0aGF0IHJlcG9ydGVyLlxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgcmVwb3J0ZXIgICAgIGRhdGFPYmplY3QgcmVwb3J0ZXJcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAgICAgICAoT3B0aW9uYWwpXHJcbiAgKiBAcmV0dXJuIHtBcnJheX0gICAgICAgICAgIFByb21pc2UgICAgICAgRGF0YU9iamVjdHNcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdFBlclJlcG9ydGVyKHJlcG9ydGVyLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG5cclxuICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86IF90aGlzLnJlZ2lzdHJ5VVJMLCBib2R5OiB7IHJlc291cmNlOiByZXBvcnRlcn1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgZGF0YU9iamVjdHMgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoZGF0YU9iamVjdHMpIHtcclxuICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ05vIGRhdGFPYmplY3Qgd2FzIGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqIEFkdmFuY2VkIFNlYXJjaCBmb3IgZGF0YU9iamVjdHMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnlcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgICAgICB1c2VyIGlkZW50aWZpZXIsIGVpdGhlciBpbiB1cmwgb3IgZW1haWwgZm9ybWF0XHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgZGF0YU9iamVjdCBzY2hlbWFzXHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICByZXNvdXJjZXMgKE9wdGlvbmFsKSAgdHlwZXMgb2YgZGF0YU9iamVjdCByZXNvdXJjZXNcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpICAgICBkb21haW4gb2YgdGhlIHJlZ2lzdHJ5IHRvIHNlYXJjaFxyXG4gICovXHJcbiAgZGlzY292ZXJEYXRhT2JqZWN0KG5hbWUsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG4gICAgLy9sZXQgdXNlcklkZW50aWZpZXIgPSBjb252ZXJ0VG9Vc2VyVVJMKHVzZXIpO1xyXG5cclxuICAgIGFjdGl2ZURvbWFpbiA9ICghZG9tYWluKSA/IF90aGlzLmRvbWFpbiA6IGRvbWFpbjtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86IF90aGlzLnJlZ2lzdHJ5VVJMLCBib2R5OiB7IHJlc291cmNlOiBuYW1lLFxyXG4gICAgICBjcml0ZXJpYToge3Jlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogc2NoZW1hfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IGh5cGVydGllcyA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChoeXBlcnRpZXMpIHtcclxuICAgICAgICAgIHJlc29sdmUoaHlwZXJ0aWVzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdObyBEYXRhT2JqZWN0IHdhcyBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKiBBZHZhbmNlZCBTZWFyY2ggZm9yIEh5cGVydGllcyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeVxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgdXNlciAgICAgICAgICAgICAgICAgIHVzZXIgaWRlbnRpZmllciwgZWl0aGVyIGluIHVybCBvciBlbWFpbCBmb3JtYXRcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHNjaGVtYSAoT3B0aW9uYWwpICAgICB0eXBlcyBvZiBoeXBlcnRpZXMgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGh5cGVydGllcyByZXNvdXJjZXNcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpICAgICBkb21haW4gb2YgdGhlIHJlZ2lzdHJ5IHRvIHNlYXJjaFxyXG4gICovXHJcbiAgZGlzY292ZXJIeXBlcnR5KHVzZXIsIHNjaGVtYSwgcmVzb3VyY2VzLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG4gICAgbGV0IHVzZXJJZGVudGlmaWVyID0gY29udmVydFRvVXNlclVSTCh1c2VyKTtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyByZXNvdXJjZTogdXNlcklkZW50aWZpZXIsXHJcbiAgICAgIGNyaXRlcmlhOiB7cmVzb3VyY2VzOiByZXNvdXJjZXMsIGRhdGFTY2hlbWVzOiBzY2hlbWF9XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgaHlwZXJ0aWVzID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKGh5cGVydGllcykge1xyXG4gICAgICAgICAgcmVzb2x2ZShoeXBlcnRpZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ05vIEh5cGVydHkgd2FzIGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybiB0aGUgbGFzdCBoeXBlcnR5IGluc3RhbmNlIHJlZ2lzdGVyZWQgYnkgdGhlIHVzZXIuXHJcbiAgKiBAcGFyYW0gIHtlbWFpbH0gICAgICAgICAgICAgIGVtYWlsXHJcbiAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2VcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0eVBlclVzZXIoZW1haWwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpZGVudGl0eVVSTCA9ICd1c2VyOi8vJyArIGVtYWlsLnN1YnN0cmluZyhlbWFpbC5pbmRleE9mKCdAJykgKyAxLCBlbWFpbC5sZW5ndGgpICsgJy8nICsgZW1haWwuc3Vic3RyaW5nKDAsIGVtYWlsLmluZGV4T2YoJ0AnKSk7XHJcblxyXG4gICAgLy8gbWVzc2FnZSB0byBxdWVyeSBkb21haW4gcmVnaXN0cnksIGFza2luZyBmb3IgYSB1c2VyIGh5cGVydHkuXHJcbiAgICBsZXQgbWVzc2FnZSA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyByZXNvdXJjZTogaWRlbnRpdHlVUkx9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlOiAnLCBtZXNzYWdlLCBhY3RpdmVEb21haW4sIGlkZW50aXR5VVJMKTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKCdtZXNzYWdlIFJFQUQnLCBtZXNzYWdlKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ21lc3NhZ2UgcmVwbHknLCByZXBseSk7XHJcblxyXG4gICAgICAgIGxldCBoeXBlcnR5O1xyXG4gICAgICAgIGxldCBtb3N0UmVjZW50O1xyXG4gICAgICAgIGxldCBsYXN0SHlwZXJ0eTtcclxuICAgICAgICBsZXQgdmFsdWUgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBmb3IgKGh5cGVydHkgaW4gdmFsdWUpIHtcclxuICAgICAgICAgIGlmICh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAobW9zdFJlY2VudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgbW9zdFJlY2VudCA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7XHJcbiAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGxldCBoeXBlcnR5RGF0ZSA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7XHJcbiAgICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnQuZ2V0VGltZSgpIDwgaHlwZXJ0eURhdGUuZ2V0VGltZSgpKSB7XHJcbiAgICAgICAgICAgICAgICBtb3N0UmVjZW50ID0gaHlwZXJ0eURhdGU7XHJcbiAgICAgICAgICAgICAgICBsYXN0SHlwZXJ0eSA9IGh5cGVydHk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnTGFzdCBIeXBlcnR5OiAnLCBsYXN0SHlwZXJ0eSwgbW9zdFJlY2VudCk7XHJcblxyXG4gICAgICAgIGxldCBoeXBlcnR5VVJMID0gbGFzdEh5cGVydHk7XHJcblxyXG4gICAgICAgIGlmIChoeXBlcnR5VVJMID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHJldHVybiByZWplY3QoJ1VzZXIgSHlwZXJ0eSBub3QgZm91bmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBpZFBhY2thZ2UgPSB7XHJcbiAgICAgICAgICBpZDogZW1haWwsXHJcbiAgICAgICAgICBkZXNjcmlwdG9yOiB2YWx1ZVtoeXBlcnR5VVJMXS5kZXNjcmlwdG9yLFxyXG4gICAgICAgICAgaHlwZXJ0eVVSTDogaHlwZXJ0eVVSTFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCc9PT0+IGh5cGVydHlEaXNjb3ZlcnkgbWVzc2FnZUJ1bmRsZTogJywgaWRQYWNrYWdlKTtcclxuICAgICAgICByZXNvbHZlKGlkUGFja2FnZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgdXNlcnMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZFxyXG4gICogcmV0dXJuIHRoZSBhbGwgdGhlIGh5cGVydGllcyByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyXHJcbiAgKiBAcGFyYW0gIHtlbWFpbH0gICAgICAgICAgICAgIGVtYWlsXHJcbiAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2VcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0aWVzUGVyVXNlcihlbWFpbCwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGlkZW50aXR5VVJMID0gJ3VzZXI6Ly8nICsgZW1haWwuc3Vic3RyaW5nKGVtYWlsLmluZGV4T2YoJ0AnKSArIDEsIGVtYWlsLmxlbmd0aCkgKyAnLycgKyBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTtcclxuXHJcbiAgICAvLyBtZXNzYWdlIHRvIHF1ZXJ5IGRvbWFpbiByZWdpc3RyeSwgYXNraW5nIGZvciBhIHVzZXIgaHlwZXJ0eS5cclxuICAgIGxldCBtZXNzYWdlID0ge1xyXG4gICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86IF90aGlzLnJlZ2lzdHJ5VVJMLCBib2R5OiB7IHJlc291cmNlOiBpZGVudGl0eVVSTH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc29sZS5sb2coJ01lc3NhZ2UgZGlzY292ZXJIeXBlcnRpZXNQZXJVc2VyOiAnLCBtZXNzYWdlLCBhY3RpdmVEb21haW4sIGlkZW50aXR5VVJMKTtcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKCdtZXNzYWdlIFJFQUQnLCBtZXNzYWdlKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2Rpc2NvdmVySHlwZXJ0aWVzUGVyVXNlciByZXBseScsIHJlcGx5KTtcclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnVXNlciBIeXBlcnR5IG5vdCBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqICBmdW5jdGlvbiB0byBkZWxldGUgYW4gaHlwZXJ0eUluc3RhbmNlIGluIHRoZSBEb21haW4gUmVnaXN0cnlcclxuICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgICAgICAgdXNlciAgICAgICAgICAgICAgdXNlciB1cmxcclxuICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgICAgICAgaHlwZXJ0eUluc3RhbmNlICAgSHlwZXJ0eUluc250YW5jZSB1cmxcclxuICAqICBAcGFyYW0gICB7ZG9tYWlufSAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqICBAcmV0dXJuICB7UHJvbWlzZX0gICAgICAgICAgUHJvbWlzZSAgICAgICAgICByZXN1bHRcclxuICAqL1xyXG4gIGRlbGV0ZUh5cGVydHkodXNlciwgaHlwZXJ0eUluc3RhbmNlLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG5cclxuICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogX3RoaXMucmVnaXN0cnlVUkwsICAgYm9keTogeyB2YWx1ZToge3VzZXI6IHVzZXIsIHVybDogaHlwZXJ0eUluc3RhbmNlIH19fTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGxldCByZXNwb25zZSA9IHJlcGx5LmJvZHkuY29kZTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICByZXNvbHZlKCdIeXBlcnR5IHN1Y2Nlc3NmdWxseSBkZWxldGVkJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gZGVsZXRpbmcgaHlwZXJ0eScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRGlzY292ZXJ5U2VydmljZUZyYW1ld29yaztcclxuIiwiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5pbXBvcnQgUmVnaXN0cnlEYXRhTW9kZWwgZnJvbSAnLi9SZWdpc3RyeURhdGFNb2RlbCc7XHJcblxyXG4vKipcclxuKiAgIEBhdXRob3I6IEdpbCBEaWFzIChnaWwuZGlhc0B0ZWNuaWNvLnVsaXNib2EucHQpXHJcbiogICBIeXBlcnR5SW5zdGFuY2UgRGF0YSBNb2RlbCB1c2VkIHRvIG1vZGVsIGluc3RhbmNlcyBvZiBIeXBlcnRpZXMgcnVubmluZyBpbiBkZXZpY2VzIGFuZCBzZXJ2ZXJzLlxyXG4qL1xyXG5jbGFzcyBIeXBlcnR5SW5zdGFuY2UgZXh0ZW5kcyBSZWdpc3RyeURhdGFNb2RlbCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlkLCB1cmwsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGh5cGVydHlVUkwsIHVzZXIsIGd1aWQsIHJ1bnRpbWUsIGNvbnRleHQsIHAycEhhbmRsZXIsIHAycFJlcXVlc3RlciwgZGF0YVNjaGVtZXMsIHJlc291cmNlcywgc3RhcnRpbmdUaW1lLCBsYXN0TW9kaWZpZWQpIHtcclxuICAgIHN1cGVyKGlkLCB1cmwsIGRlc2NyaXB0b3JVUkwsIHAycFJlcXVlc3Rlciwgc3RhcnRpbmdUaW1lLCBsYXN0TW9kaWZpZWQpO1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzLl9kZXNjcmlwdG9yID0gZGVzY3JpcHRvcjtcclxuICAgIF90aGlzLl9oeXBlcnR5VVJMID0gaHlwZXJ0eVVSTDtcclxuICAgIF90aGlzLl91c2VyID0gdXNlcjtcclxuICAgIF90aGlzLl9ndWlkID0gZ3VpZDtcclxuICAgIF90aGlzLl9ydW50aW1lID0gcnVudGltZTtcclxuICAgIF90aGlzLl9jb250ZXh0ID0gY29udGV4dDtcclxuICAgIF90aGlzLl9wMnBIYW5kbGVyID0gcDJwSGFuZGxlcjtcclxuICAgIF90aGlzLl9kYXRhU2NoZW1lcyA9IGRhdGFTY2hlbWVzO1xyXG4gICAgX3RoaXMuX3Jlc291cmNlcyA9IHJlc291cmNlcztcclxuICB9XHJcblxyXG4gIHNldCB1c2VyKGlkZW50aXR5KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMudXNlciA9IGlkZW50aXR5O1xyXG4gIH1cclxuXHJcbiAgZ2V0IHVzZXIoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl91c2VyO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGh5cGVydHlVUkwoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl9oeXBlcnR5VVJMO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRlc2NyaXB0b3IoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG9iamVjdE5hbWUoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yLl9vYmplY3ROYW1lO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHAycEhhbmRsZXIoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl9wMnBIYW5kbGVyO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRhdGFTY2hlbWVzKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fZGF0YVNjaGVtZXM7XHJcbiAgfVxyXG5cclxuICBnZXQgcmVzb3VyY2VzKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fcmVzb3VyY2VzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHJ1bnRpbWVVUkwoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl9ydW50aW1lO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgSHlwZXJ0eUluc3RhbmNlO1xyXG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbmltcG9ydCB7IHJ1bnRpbWVVdGlscyB9IGZyb20gJy4uL3J1bnRpbWUvcnVudGltZVV0aWxzJztcblxuaW1wb3J0IEFkZHJlc3NBbGxvY2F0aW9uIGZyb20gJy4uL2FsbG9jYXRpb24vQWRkcmVzc0FsbG9jYXRpb24nO1xuaW1wb3J0IEh5cGVydHlJbnN0YW5jZSBmcm9tICcuL0h5cGVydHlJbnN0YW5jZSc7XG5cbmltcG9ydCB7TWVzc2FnZUZhY3Rvcnl9IGZyb20gJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvTWVzc2FnZUZhY3RvcnknO1xuaW1wb3J0IHtkaXZpZGVVUkwsIGlzSHlwZXJ0eVVSTCwgaXNVUkwsIGlzVXNlclVSTCwgZ2VuZXJhdGVHVUlELCBnZXRVc2VySWRlbnRpdHlEb21haW4sIGlzTGVnYWN5LCBpc0JhY2tlbmRTZXJ2aWNlVVJMfSBmcm9tICcuLi91dGlscy91dGlscy5qcyc7XG5cbmltcG9ydCBEaXNjb3ZlcnkgZnJvbSAnLi9EaXNjb3ZlcnknO1xuaW1wb3J0IERpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcmsgZnJvbSAnLi9EaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrJztcblxuY29uc3QgU1RBVFVTID0geyBDUkVBVEVEOiAnY3JlYXRlZCcsIExJVkU6ICdsaXZlJywgREVQTE9ZRUQ6ICdkZXBsb3llZCcsIFBST0dSRVNTOiAnaW4tcHJvZ3Jlc3MnLCBESVNDT05ORUNURUQ6ICdkaXNjb25uZWN0ZWQnLCBERUFEOiAnZGVhZCcgfTtcblxuLyppbXBvcnQgSWRlbnRpdHlNYW5hZ2VyIGZyb20gJy4vSWRlbnRpdHlNYW5hZ2VyJztcbmltcG9ydCBEaXNjb3ZlcnkgZnJvbSAnLi9EaXNjb3ZlcnknOyovXG5cbi8qKlxuKiBSdW50aW1lIFJlZ2lzdHJ5IEludGVyZmFjZVxuKi9cbmNsYXNzIFJlZ2lzdHJ5IHtcblxuICAvKipcbiAgKiBUbyBpbml0aWFsaXNlIHRoZSBSdW50aW1lIFJlZ2lzdHJ5IHdpdGggdGhlIFJ1bnRpbWVVUkwgdGhhdCB3aWxsIGJlIHRoZSBiYXNpcyB0byBkZXJpdmUgdGhlIGludGVybmFsIHJ1bnRpbWUgYWRkcmVzc2VzIHdoZW4gYWxsb2NhdGluZyBhZGRyZXNzZXMgdG8gaW50ZXJuYWwgcnVudGltZSBjb21wb25lbnQuIEluIGFkZGl0aW9uLCB0aGUgUmVnaXN0cnkgZG9tYWluIGJhY2stZW5kIHRvIGJlIHVzZWQgdG8gcmVtb3RlbHkgcmVnaXN0ZXIgUnVudGltZSBjb21wb25lbnRzLCBpcyBhbHNvIHBhc3NlZCBhcyBpbnB1dCBwYXJhbWV0ZXIuXG4gICogQHBhcmFtICB7TWVzc2FnZUJ1c30gICAgICAgICAgbXNnYnVzICAgICAgICAgICAgICAgIG1zZ2J1c1xuICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMXG4gICogQHBhcmFtICB7QXBwU2FuZGJveH0gICAgICAgICAgYXBwU2FuZGJveCAgICAgICAgICAgIGFwcFNhbmRib3hcbiAgKiBAcGFyYW0gIHtydW50aW1lQ2F0YWxvZ3VlfSAgICBydW50aW1lQ2F0YWxvZ3VlICAgICAgcnVudGltZUNhdGFsb2d1ZVxuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIHJlbW90ZVJlZ2lzdHJ5ICAgICAgICByZW1vdGVSZWdpc3RyeVxuICAqIEBwYXJhbSAge3N0b3JhZ2VNYW5hZ2VyfSAgICAgIHN0b3JhZ2VNYW5hZ2VyXG4gICovXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIGFwcFNhbmRib3gsIGlkZW50aXR5TW9kdWxlLCBydW50aW1lQ2F0YWxvZ3VlLCBydW50aW1lQ2FwYWJpbGl0aWVzLCBzdG9yYWdlTWFuYWdlciwgcmVtb3RlUmVnaXN0cnkpIHtcblxuICAgIC8vIGhvdyBzb21lIGZ1bmN0aW9ucyByZWNlaXZlIHRoZSBwYXJhbWV0ZXJzIGZvciBleGFtcGxlOlxuICAgIC8vIG5ldyBSZWdpc3RyeSgnaHlwZXJ0eS1ydW50aW1lOi8vc3AxLzEyMycsIGFwcFNhbmRib3gsIGlkTW9kdWxlLCByZW1vdGVSZWdpc3RyeSk7XG4gICAgLy8gcmVnaXN0cnkucmVnaXN0ZXJTdHViKHNhbmRib3gsICdzcDEnKTtcbiAgICAvLyByZWdpc3RyeS5yZWdpc3Rlckh5cGVydHkoc2FuZEJveCwgJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnKTtcbiAgICAvLyByZWdpc3RyeS5yZXNvbHZlKCdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJyk7XG5cbiAgICBpZiAoIXJ1bnRpbWVVUkwpIHRocm93IG5ldyBFcnJvcigncnVudGltZVVSTCBpcyBtaXNzaW5nLicpO1xuICAgIGlmICghc3RvcmFnZU1hbmFnZXIpIHRocm93IG5ldyBFcnJvcignc3RvcmFnZU1hbmFnZXIgaXMgbWlzc2luZy4nKTtcbiAgICAvKmlmICghcmVtb3RlUmVnaXN0cnkpIHRocm93IG5ldyBFcnJvcigncmVtb3RlUmVnaXN0cnkgaXMgbWlzc2luZycpOyovXG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMucmVnaXN0cnlVUkwgPSBydW50aW1lVVJMICsgJy9yZWdpc3RyeS8nO1xuICAgIF90aGlzLmFwcFNhbmRib3ggPSBhcHBTYW5kYm94O1xuICAgIF90aGlzLnJ1bnRpbWVVUkwgPSBydW50aW1lVVJMO1xuICAgIF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUgPSBydW50aW1lQ2F0YWxvZ3VlO1xuICAgIF90aGlzLnJlbW90ZVJlZ2lzdHJ5ID0gcmVtb3RlUmVnaXN0cnk7XG4gICAgX3RoaXMuaWRNb2R1bGUgPSBpZGVudGl0eU1vZHVsZTtcbiAgICBfdGhpcy5zdG9yYWdlTWFuYWdlciA9IHN0b3JhZ2VNYW5hZ2VyO1xuICAgIF90aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMgPSBydW50aW1lQ2FwYWJpbGl0aWVzO1xuICAgIF90aGlzLmlkZW50aWZpZXIgPSBnZW5lcmF0ZUdVSUQoKTtcblxuICAgIC8vIHRoZSBleHBpcmVzIGluIDM2MDAsIHJlcHJlc2VudHMgMSBob3VyXG4gICAgLy90aGUgZXhwaXJlcyBpcyBpbiBzZWNvbmRzLCB1bml0IG9mIG1lYXN1cmUgcmVjZWl2ZWQgYnkgdGhlIGRvbWFpbiByZWdpc3RyeVxuICAgIF90aGlzLmV4cGlyZXNUaW1lID0gMzYwMDtcblxuICAgIF90aGlzLmh5cGVydGllc0xpc3RUb1JlbW92ZSA9IHt9O1xuICAgIF90aGlzLmh5cGVydGllc0xpc3QgPSBbXTtcbiAgICBfdGhpcy5yZW1vdGVIeXBlcnR5TGlzdCA9IFtdO1xuICAgIF90aGlzLmlkcExlZ2FjeVByb3h5TGlzdCA9IHt9O1xuXG4gICAgX3RoaXMucDJwSGFuZGxlclN0dWIgPSB7fTtcbiAgICBfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViID0ge307XG4gICAgX3RoaXMucDJwQ29ubmVjdGlvbkxpc3QgPSB7fTtcbiAgICBfdGhpcy5wMnBIYW5kbGVyQXNzb2NpYXRpb24gPSB7fTtcblxuICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0ID0ge307XG4gICAgX3RoaXMuaWRwUHJveHlMaXN0ID0ge307XG4gICAgX3RoaXMuZGF0YU9iamVjdExpc3QgPSB7fTtcbiAgICBfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3QgPSB7fTtcbiAgICBfdGhpcy5zYW5kYm94ZXNMaXN0ID0ge3NhbmRib3g6IHt9LCBhcHBTYW5kYm94OiB7fSB9O1xuICAgIF90aGlzLnBlcExpc3QgPSB7fTtcbiAgICBfdGhpcy5yZWdpc3RyaWVzID0ge307XG5cbiAgICBfdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKF90aGlzLnJlZ2lzdHJ5VVJMKS5kb21haW47XG4gICAgX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W3J1bnRpbWVVUkxdID0gYXBwU2FuZGJveDtcbiAgICBsZXQgbXNnRmFjdG9yeSA9IG5ldyBNZXNzYWdlRmFjdG9yeSgnZmFsc2UnLCAne30nKTtcbiAgICBfdGhpcy5tZXNzYWdlRmFjdG9yeSA9IG1zZ0ZhY3Rvcnk7XG4gIH1cblxuICBzZXQgbG9hZGVyKGxvYWRlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX2xvYWRlciA9IGxvYWRlcjtcbiAgfVxuXG4gIGdldCBsb2FkZXIoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX2xvYWRlcjtcbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1cztcbiAgfVxuXG4gIC8qKlxuICAqIFNldCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBzZXQgbWVzc2FnZUJ1cyhtZXNzYWdlQnVzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5yZWdpc3RyeVVSTCwgZnVuY3Rpb24obXNnKSB7XG4gICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBsaXN0ZW5lciBtZXNzYWdlQnVzJyk7XG5cbiAgICAgIGxldCBpc0h5cGVydHkgPSBpc0h5cGVydHlVUkwobXNnLmZyb20pO1xuICAgICAgbGV0IGlzRGlzY292ZXJ5ID0gbXNnLmZyb20uc3Vic3RyaW5nKG1zZy5mcm9tLmxlbmd0aCAtIDEwLCBtc2cuZnJvbS5sZW5ndGgpID09PSAnL2Rpc2NvdmVyeSc7XG5cbiAgICAgIGxldCBoYXNDcml0ZXJpYSA9IG1zZy5ib2R5Lmhhc093blByb3BlcnR5KCdjcml0ZXJpYScpO1xuICAgICAgbGV0IGlzVVJMUmVzb3VyY2U7XG4gICAgICBsZXQgaXNVc2VyUmVzb3VyY2U7XG4gICAgICBsZXQgaXNIeXBlcnR5UmVzb3VyY2U7XG5cbiAgICAgIGlmIChtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgncmVzb3VyY2UnKSAmJiBtc2cuYm9keS5yZXNvdXJjZSAhPT0gJy4nKSB7XG4gICAgICAgIGlzVVJMUmVzb3VyY2UgPSBpc1VSTChtc2cuYm9keS5yZXNvdXJjZSk7XG4gICAgICAgIGlzVXNlclJlc291cmNlID0gaXNVc2VyVVJMKG1zZy5ib2R5LnJlc291cmNlKTtcbiAgICAgICAgaXNIeXBlcnR5UmVzb3VyY2UgPSBpc0h5cGVydHlVUkwobXNnLmJvZHkucmVzb3VyY2UpO1xuICAgICAgfVxuICAgICAgbGV0IGlzRGVsZXRlID0gbXNnLnR5cGUgPT09ICdkZWxldGUnO1xuICAgICAgbGV0IGhhc05hbWU7XG4gICAgICBsZXQgaGFzVXNlcjtcblxuICAgICAgaWYgKG1zZy5ib2R5Lmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XG4gICAgICAgIGhhc05hbWUgPSBtc2cuYm9keS52YWx1ZS5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpO1xuICAgICAgICBoYXNVc2VyID0gbXNnLmJvZHkudmFsdWUuaGFzT3duUHJvcGVydHkoJ3VzZXInKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzSHlwZXJ0eSAmJiBpc0Rpc2NvdmVyeSkge1xuICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBoeXBlcnR5RGlzY292ZXJ5Jyk7XG4gICAgICAgIGlmIChpc0RlbGV0ZSAmJiBoYXNOYW1lKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gZGVsZXRlRGF0YU9iamVjdCcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVsZXRlICYmIGhhc1VzZXIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBkZWxldGVIeXBlcnR5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaGFzQ3JpdGVyaWEgJiYgaXNVc2VyUmVzb3VyY2UpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZGlzY292ZXJIeXBlcnR5Jyk7XG4gICAgICAgICAgZm9yIChsZXQgaSBpbiBfdGhpcy5yZW1vdGVIeXBlcnR5TGlzdCkge1xuICAgICAgICAgICAgbGV0IGh5cGVydHkgPSBfdGhpcy5yZW1vdGVIeXBlcnR5TGlzdFtpXTtcbiAgICAgICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShoeXBlcnR5LnJlc291cmNlcykgPT09IEpTT04uc3RyaW5naWZ5KG1zZy5ib2R5LmNyaXRlcmlhLnJlc291cmNlcykgJiZcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoaHlwZXJ0eS5kYXRhU2NoZW1lcykgPT09IEpTT04uc3RyaW5naWZ5KG1zZy5ib2R5LmNyaXRlcmlhLmRhdGFTY2hlbWVzKSAmJlxuICAgICAgICAgICAgICBoeXBlcnR5LnVzZXIudXNlclVSTCA9PT0gbXNnLmJvZHkucmVzb3VyY2UpIHtcbiAgICAgICAgICAgICAgbGV0IHVybCA9IGh5cGVydHkudXJsO1xuICAgICAgICAgICAgICBsZXQgdmFsdWVKc29uID0ge307XG4gICAgICAgICAgICAgIHZhbHVlSnNvblt1cmxdID0gaHlwZXJ0eS5pbmZvO1xuICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmVzcG9uc2UnLFxuICAgICAgICAgICAgICAgIHRvOiBtc2cuZnJvbSxcbiAgICAgICAgICAgICAgICBmcm9tOiBtc2cudG8sXG4gICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlSnNvblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzLmRpc2NvdmVyeS5kaXNjb3Zlckh5cGVydHkobXNnLmJvZHkucmVzb3VyY2UsIG1zZy5ib2R5LmNyaXRlcmlhLmRhdGFTY2hlbWVzLCBtc2cuYm9keS5jcml0ZXJpYS5yZXNvdXJjZXMpLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBsZXQgbW9zdFJlY2VudEh5cGVydHk7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIGxldCBoeXBlcnR5ID0gbmV3IEh5cGVydHlJbnN0YW5jZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdmFsdWVbYV0uZGVzY3JpcHRvciwgdW5kZWZpbmVkLCBhLCB7IHVzZXJVUkw6IHZhbHVlW2FdLnVzZXJJRCB9LFxuICAgICAgICAgICAgICAgICdndWlkJywgX3RoaXMucnVudGltZVVSTCwgJ2N0eCcsIHZhbHVlW2FdLnAycEhhbmRsZXIsIHZhbHVlW2FdLnAycFJlcXVlc3RlciwgdmFsdWVbYV0uZGF0YVNjaGVtZXMsIHZhbHVlW2FdLnJlc291cmNlcyxcbiAgICAgICAgICAgICAgICB2YWx1ZVthXS5zdGFydGluZ1RpbWUsIHZhbHVlW2FdLmxhc3RNb2RpZmllZCk7XG4gICAgICAgICAgICAgIGh5cGVydHkuaW5mbyA9IHZhbHVlO1xuICAgICAgICAgICAgICBpZiAoIW1vc3RSZWNlbnRIeXBlcnR5KSB7XG4gICAgICAgICAgICAgICAgbW9zdFJlY2VudEh5cGVydHkgPSBoeXBlcnR5O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBoeXBlcnR5RGF0ZSA9IG5ldyBEYXRlKGh5cGVydHkubGFzdE1vZGlmaWVkKTtcbiAgICAgICAgICAgICAgICBsZXQgbW9zdFJlY2VudEh5cGVydHlEYXRlID0gbmV3IERhdGUobW9zdFJlY2VudEh5cGVydHkubGFzdE1vZGlmaWVkKTtcblxuICAgICAgICAgICAgICAgIGlmIChoeXBlcnR5RGF0ZSA+IG1vc3RSZWNlbnRIeXBlcnR5RGF0ZSkge1xuICAgICAgICAgICAgICAgICAgbW9zdFJlY2VudEh5cGVydHkgPSBoeXBlcnR5O1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3VwZGF0ZSBkYXRlJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnRIeXBlcnR5KSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwdXNoJyk7XG4gICAgICAgICAgICAgIF90aGlzLnJlbW90ZUh5cGVydHlMaXN0LnB1c2gobW9zdFJlY2VudEh5cGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoaGFzQ3JpdGVyaWEgJiYgIWlzVVJMUmVzb3VyY2UpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBkaXNjb3ZlckRhdGFPYmplY3QnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0h5cGVydHlSZXNvdXJjZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIGRpc2NvdmVyRGF0YU9iamVjdFBlclJlcG9ydGVyJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNVc2VyUmVzb3VyY2UpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBkaXNjb3Zlckh5cGVydHlQZXJVc2VyJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNVUkxSZXNvdXJjZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIGRpc2NvdmVyRGF0YU9iamVjdFBlclVSTCcpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc1VSTFJlc291cmNlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gZGlzY292ZXJEYXRhT2JqZWN0UGVyTmFtZScpO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG1zZyBzZW50IGJ5IGlkZW50aXR5IG1hbmFnZXIgbGlicmFyeVxuICAgICAgICBsZXQgdXNlclVybCA9IF90aGlzLl9nZXRJZGVudGl0eUFzc29jaWF0ZWQobXNnLmJvZHkucmVzb3VyY2UsIG1zZy5ib2R5LmNyaXRlcmlhKTtcblxuICAgICAgICBsZXQgcmVwbHkgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHtyZXNvdXJjZTogdXNlclVybH19O1xuICAgICAgICByZXBseS5ib2R5LmNvZGUgPSAodXNlclVybCkgPyAyMDAgOiA0MDQ7XG5cbiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UocmVwbHkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gYWxzbyBzZXQgdXAgbWVzc2FnZUJ1cyBpbiB0aGUgSWRlbnRpdHlNb2R1bGUgY29tcG9uZW50XG4gICAgLy8gVE9ETyByZWRlZmluZSBhIGJldHRlciB3YXkgdG8gYWRkIHRoZSBtZXNzYWdlQnVzIGluIHRoZSBJZE1vZHVsZVxuICAgIF90aGlzLmlkTW9kdWxlLm1lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzO1xuXG4gICAgLy8gSW5zdGFsbCBBZGRyZXNzQWxsb2NhdGlvblxuICAgIGxldCBhZGRyZXNzQWxsb2NhdGlvbiA9IG5ldyBBZGRyZXNzQWxsb2NhdGlvbihfdGhpcy5yZWdpc3RyeVVSTCwgbWVzc2FnZUJ1cywgX3RoaXMpO1xuICAgIF90aGlzLmFkZHJlc3NBbGxvY2F0aW9uID0gYWRkcmVzc0FsbG9jYXRpb247XG5cbiAgICBsZXQgZGlzY292ZXJ5ID0gbmV3IERpc2NvdmVyeShfdGhpcy5ydW50aW1lVVJMLCBtZXNzYWdlQnVzKTtcbiAgICBfdGhpcy5kaXNjb3ZlcnkgPSBkaXNjb3Zlcnk7XG5cbiAgICBsZXQgZGlzY292ZXJ5U2VydmljZUZyYW1ld29yayA9IG5ldyBEaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrKCdoeXBlcnR5Oi8vbG9jYWxob3N0LzEyMycsIF90aGlzLnJ1bnRpbWVVUkwsIG1lc3NhZ2VCdXMpO1xuICAgIF90aGlzLmRpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcmsgPSBkaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrO1xuXG4gICAgLypsZXQgaWRlbnRpdHlNYW5hZ2VyID0gbmV3IElkZW50aXR5TWFuYWdlcignaHlwZXJ0eTovL2xvY2FsaG9zdC84MzNhNmU1Mi01MTViLTQ5OGItYTU3Yi1lM2RhZWVjZTQ4ZDInLCBfdGhpcy5ydW50aW1lVVJMLCBtZXNzYWdlQnVzKTtcbiAgICBfdGhpcy5pZGVudGl0eU1hbmFnZXIgPSBpZGVudGl0eU1hbmFnZXI7Ki9cbiAgfVxuXG4gIC8qKlxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgdXNlcnMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnksIGFuZFxuICAqIHJldHVybiB0aGUgbGFzdCBoeXBlcnR5IGluc3RhbmNlIHJlZ2lzdGVyZWQgYnkgdGhlIHVzZXIuXG4gICogQHBhcmFtICB7ZW1haWx9ICAgICAgICAgICAgICBlbWFpbFxuICAqIEBwYXJhbSAge2RvbWFpbn0gICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKVxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2VcbiAgKi9cblxuICAvLyBUT0RPOiBpbXBsZW1lbnQgYSBjYWNoZSBzeXN0ZW1cbiAgZGlzY292ZXJIeXBlcnR5UGVyVXNlcihlbWFpbCwgZG9tYWluKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xuXG4gICAgaWYgKCFkb21haW4pIHtcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLl9kb21haW47XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcbiAgICB9XG5cbiAgICBsZXQgaWRlbnRpdHlVUkwgPSAndXNlcjovLycgKyBlbWFpbC5zdWJzdHJpbmcoZW1haWwuaW5kZXhPZignQCcpICsgMSwgZW1haWwubGVuZ3RoKSArICcvJyArIGVtYWlsLnN1YnN0cmluZygwLCBlbWFpbC5pbmRleE9mKCdAJykpO1xuXG4gICAgLy8gbWVzc2FnZSB0byBxdWVyeSBkb21haW4gcmVnaXN0cnksIGFza2luZyBmb3IgYSB1c2VyIGh5cGVydHkuXG4gICAgbGV0IG1lc3NhZ2UgPSB7XG4gICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IGlkZW50aXR5VVJMfVxuICAgIH07XG5cbiAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBNZXNzYWdlOiAnLCBtZXNzYWdlLCBhY3RpdmVEb21haW4sIGlkZW50aXR5VVJMKTtcblxuICAgIC8vY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gbWVzc2FnZSBSRUFEJywgbWVzc2FnZSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gbWVzc2FnZSByZXBseScsIHJlcGx5KTtcblxuICAgICAgICBsZXQgaHlwZXJ0eTtcbiAgICAgICAgbGV0IG1vc3RSZWNlbnQ7XG4gICAgICAgIGxldCBsYXN0SHlwZXJ0eTtcbiAgICAgICAgbGV0IHZhbHVlID0gcmVwbHkuYm9keS52YWx1ZTtcblxuICAgICAgICBmb3IgKGh5cGVydHkgaW4gdmFsdWUpIHtcbiAgICAgICAgICBpZiAodmFsdWVbaHlwZXJ0eV0ubGFzdE1vZGlmaWVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChtb3N0UmVjZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgbW9zdFJlY2VudCA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7XG4gICAgICAgICAgICAgIGxhc3RIeXBlcnR5ID0gaHlwZXJ0eTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxldCBoeXBlcnR5RGF0ZSA9IG5ldyBEYXRlKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCk7XG4gICAgICAgICAgICAgIGlmIChtb3N0UmVjZW50LmdldFRpbWUoKSA8IGh5cGVydHlEYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBoeXBlcnR5RGF0ZTtcbiAgICAgICAgICAgICAgICBsYXN0SHlwZXJ0eSA9IGh5cGVydHk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBMYXN0IEh5cGVydHk6ICcsIGxhc3RIeXBlcnR5LCBtb3N0UmVjZW50KTtcblxuICAgICAgICBsZXQgaHlwZXJ0eVVSTCA9IGxhc3RIeXBlcnR5O1xuXG4gICAgICAgIGlmIChoeXBlcnR5VVJMID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdVc2VyIEh5cGVydHkgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaWRQYWNrYWdlID0ge1xuICAgICAgICAgIGlkOiBlbWFpbCxcbiAgICAgICAgICBkZXNjcmlwdG9yOiB2YWx1ZVtoeXBlcnR5VVJMXS5kZXNjcmlwdG9yLFxuICAgICAgICAgIGh5cGVydHlVUkw6IGh5cGVydHlVUkxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSA9PT0+IGh5cGVydHlEaXNjb3ZlcnkgbWVzc2FnZUJ1bmRsZTogJywgaWRQYWNrYWdlKTtcbiAgICAgICAgcmVzb2x2ZShpZFBhY2thZ2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBfZ2V0SWRlbnRpdHlBc3NvY2lhdGVkKHR5cGUsIGh5cGVydHlVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yIChsZXQgaHlwZXJ0eSBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICBsZXQgdmFsdWUgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2h5cGVydHldO1xuICAgICAgaWYgKHZhbHVlLl9oeXBlcnR5VVJMID09PSBoeXBlcnR5VVJMKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3VzZXJuYW1lJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci51c2VybmFtZTtcbiAgICAgICAgICBjYXNlICdjbic6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIuY247XG4gICAgICAgICAgY2FzZSAnbG9jYWxlJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci5sb2NhbGU7XG4gICAgICAgICAgY2FzZSAnYXZhdGFyJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci5hdmF0YXI7XG4gICAgICAgICAgY2FzZSAndXNlclVSTCc6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIudXNlclVSTDtcbiAgICAgICAgICBjYXNlICcuJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlcjtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8qKlxuICAqIHF1ZXJ5IHRoZSBkb21haW4gcmVnaXN0cnkgZm9yIGluZm9ybWF0aW9uIGZyb20gYSBkYXRhT2JqZWN0IFVSTFxuICAqIEBwYXJhbSAge1N0cmluZ30gICB1cmwgICAgICAgICAgICBkYXRhT2JqZWN0IFVSTFxuICAqIEByZXR1cm4ge0pTT059ICAgICBkYXRhT2JqZWN0ICAgICBkYXRhIG9iamVjdFxuICAqL1xuICBkaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwodXJsLCBkb21haW4pIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGxldCBhY3RpdmVEb21haW47XG5cbiAgICAgIGlmICghZG9tYWluKSB7XG4gICAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLl9kb21haW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XG4gICAgICB9XG5cbiAgICAgIGxldCBtc2cgPSB7XG4gICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogdXJsIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XG5cbiAgICAgICAgbGV0IGRhdGFPYmplY3QgPSByZXBseS5ib2R5LnZhbHVlO1xuXG4gICAgICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3Qgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHJldHVybiB0aGUgc2FuZGJveCBpbnN0YW5jZSB3aGVyZSB0aGUgQXBwbGljYXRpb24gaXMgZXhlY3V0aW5nLiBJdCBpcyBhc3N1bWVkIHRoZXJlIGlzIGp1c3Qgb25lIEFwcCBwZXIgUnVudGltZSBpbnN0YW5jZS5cbiAgKi9cbiAgZ2V0QXBwU2FuZGJveCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5hcHBTYW5kYm94O1xuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB1c2VyIGFzc29jaWF0ZWQgdG8gdGhlIGh5cGVydHkgVVJMXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGh5cGVydHlVUkwgICAgICBoeXBlcnR5IFVSTFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICB1c2VyVVJMICAgICAgICAgdXNlciBVUkxcbiAgKi9cbiAgZ2V0SHlwZXJ0eU93bmVyKGh5cGVydHlVUkwpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHVzZXJVUkw7XG5cbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICBsZXQgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCkge1xuICAgICAgICB1c2VyVVJMID0gaHlwZXJ0eS51c2VyLnVzZXJVUkw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1c2VyVVJMO1xuICB9XG5cbiAgLyoqXG4gICogcmV0dXJucyB0aGUgaHlwZXJ0eSBOYW1lIGZyb20gYSBnaXZlbiB1cmwuIFRoaXMgdXJsIGNvdWxkIGJlIGZyb20gYSBkYXRhT2JqZWN0IG9yIGh5cGVydHlcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgdXJsICAgICAgaHlwZXJ0eSBvciBkYXRhT2JqZWN0IFVSTFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICBoeXBlcnR5TmFtZSAgICAgaHlwZXJ0eSBOYW1lXG4gICovXG4gIGdldEh5cGVydHlOYW1lKHVybCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgaXNIeXBlcnR5VVJMID0gZGl2aWRlVVJMKHVybCkudHlwZSA9PT0gJ2h5cGVydHknO1xuXG4gICAgLy92YWx1ZSB0byBiZSByZXR1cm5lZCBpbiB0aGUgZW5kXG4gICAgbGV0IGh5cGVydHlOYW1lO1xuXG4gICAgLy9pZiBpcyBub3QgYW4gaHlwZXJ0eSwgY2hlY2sgaWYgaXMgYSBkYXRhT2JqZWN0IGFuZCBvYnRhaW4gaGlzIHJlcG9ydGVyXG4gICAgbGV0IGh5cGVydHlVUkwgPSAoaXNIeXBlcnR5VVJMKSA/IGh5cGVydHlVUkwgPSB1cmwgOiBfdGhpcy5nZXRSZXBvcnRlclVSTFN5bmNob25vdXModXJsKTtcblxuICAgIGZvciAobGV0IGluZGV4IGluIF90aGlzLmh5cGVydGllc0xpc3QpIHtcbiAgICAgIGxldCBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07XG4gICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSBoeXBlcnR5VVJMKSB7XG4gICAgICAgIGh5cGVydHlOYW1lID0gaHlwZXJ0eS5vYmplY3ROYW1lO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGh5cGVydHlOYW1lO1xuICB9XG5cbiAgLyoqXG4gICogZnVuY3Rpb24gdG8gcmV0dXJuIHRoZSByZXBvcnRlclVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIGRhdGFvYmplY3QgVVJMXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkxcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgIHJlcG9ydGVyVVJMICAgICAgcmVwb3J0ZXJVUkxcbiAgKi9cbiAgZ2V0UmVwb3J0ZXJVUkwoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKGRhdGFPYmplY3QpIHtcbiAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0LnJlcG9ydGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgnTm8gcmVwb3J0ZXIgd2FzIGZvdW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBmdW5jdGlvbiB0byByZXR1cm4gdGhlIHJlcG9ydGVyVVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YW9iamVjdCBVUkwuIG5vIHByb21pc2UgcmV0dXJuZWRcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdFVSTFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICAgcmVwb3J0ZXJVUkwgICAgICByZXBvcnRlclVSTFxuICAqL1xuICBnZXRSZXBvcnRlclVSTFN5bmNob25vdXMoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdO1xuXG4gICAgcmV0dXJuIChkYXRhT2JqZWN0KSA/IGRhdGFPYmplY3QucmVwb3J0ZXIgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgKiByZXR1cm5zIHRoZSBoeXBlcnR5IFVSTCB0aGF0IHN1YnNjcmliZWQgdGhlIGRhdGFPYmplY3RcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIHVybCAgICAgICAgICAgIHVybCBmb3JtYXRcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgSHlwZXJ0eSBVUkwgc3Vic2NyaWJlZCB0byB0aGUgVVJMXG4gICovXG4gIGdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eSh1cmwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdFt1cmxdO1xuICB9XG5cbiAgLyoqXG4gICogcmVnaXN0ZXIgYSBkZXNpcmVkIGRhdGFPYmplY3QgdG8gc3Vic2NyaWJlXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGRhdGFPYmplY3RVUkwgICAgICBkYXRhT2JqZWN0IFVSTFxuICAqL1xuICByZWdpc3RlclN1YnNjcmliZWREYXRhT2JqZWN0KGRhdGFPYmplY3RVUkwsIGh5cGVydHlVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGlmIChfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID0gaHlwZXJ0eVVSTDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gdGhlIGxpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgdXNlcnMgcmVjZWl2ZWQgaW4gdGhlIGNyZWF0aW9uIG9mIGEgZGF0YSBvYmplY3RcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgICAgICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkxcbiAgKiBAcmV0dXJuICAge0FycmF5PFN0cmluZz59ICAgICBwcmVBdXRoICAgICAgICAgTGlzdCBvZiBwcmUgYXV0aG9yaXNlZCB1c2Vyc1xuICAqL1xuICBnZXRQcmVBdXRoU3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcbiAgICBsZXQgcHJlQXV0aCA9IFtdO1xuXG4gICAgaWYgKGRhdGFPYmplY3QpIHtcbiAgICAgIHByZUF1dGggPSBkYXRhT2JqZWN0LnByZUF1dGg7XG4gICAgfVxuICAgIHJldHVybiBwcmVBdXRoO1xuICB9XG5cbiAgLyoqXG4gICogc2VuZCByZXF1ZXN0cyB0byB1bnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnlcbiAgKiBAcmV0dXJuICAge1Byb21pc2V9ICAgICByZXR1cm4gYSBwcm9taXNlIGlmIHRoZSByZXN1bHQgb2YgdW5yZWdpc3RyYXRpb24gYWxsIGh5cGVydGllc1xuICAqL1xuICB1bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgdW5yZWdpc3RlclJlc3VsdHMgPSBbXTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICAgIGxldCBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07XG4gICAgICAgIGxldCByZXN1bHQgPSBfdGhpcy51bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKGh5cGVydHkudXNlci51c2VyVVJMLCBoeXBlcnR5Lmh5cGVydHlVUkwpO1xuICAgICAgICB1bnJlZ2lzdGVyUmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIFByb21pc2UuYWxsKHVucmVnaXN0ZXJSZXN1bHRzKS50aGVuKCgpID0+IHtcblxuICAgICAgICByZXNvbHZlKCdzdWNjZXNzZnVsbHkgdW5yZWdpc3RlcmVkIGFsbCBoeXBlcnRpZXMnKTtcbiAgICAgIH0sIGVycm9yID0+IHsgcmVqZWN0KGVycm9yKTt9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqICBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIGFuIGh5cGVydHlJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgdXNlciAgICAgICAgdXNlciB1cmxcbiAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICBoeXBlcnR5SW5zdGFuY2UgICBIeXBlcnR5SW5zbnRhbmNlIHVybFxuICAqXG4gICovXG4gIHVucmVnaXN0ZXJIeXBlcnR5SW5zdGFuY2UodXNlciwgaHlwZXJ0eUluc3RhbmNlKSB7XG4gICAgLy9UT0RPIHdvcmtpbmcgYnV0IHRoZSB1c2VyXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBtZXNzYWdlID0geyB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4gKyAnLycsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgdmFsdWU6IHt1c2VyOiB1c2VyLCB1cmw6IGh5cGVydHlJbnN0YW5jZSB9fX07XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIHVucmVnaXN0ZXIgaHlwZXJ0eSBSZXBseScsIHJlcGx5KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqICBmdW5jdGlvbiB0byBkZWxldGUgYW4gZGF0YU9iamVjdEluc3RhbmNlIGluIHRoZSBEb21haW4gUmVnaXN0cnlcbiAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgbmFtZSAgICAgIERhdGFPYmplY3ROYW1lXG4gICovXG4gIGRlbGV0ZURhdGFPYmplY3RJbnN0YW5jZShuYW1lKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBtZXNzYWdlID0geyB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4gKyAnLycsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgdmFsdWU6IHtuYW1lOiBuYW1lfX19O1xuXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSB1bnJlZ2lzdGVyIGRhdGFPYmplY3QgUmVwbHknLCByZXBseSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byB1cGRhdGUgYW4gSHlwZXJ0eVxuICAqL1xuICB1cGRhdGVIeXBlcnR5SW5zdGFuY2UocmVzb3VyY2UsIHZhbHVlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBtZXNzYWdlID0geyB0eXBlOiAnVVBEQVRFJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4gKyAnLycsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IHJlc291cmNlLCB2YWx1ZTogdmFsdWV9fTtcblxuICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3QucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBVcGRhdGVkIGh5cGVydHkgcmVwbHknLCByZXBseSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiByZWdpc3RlciBhIG5ldyBzdWJzY3JpYmVyIGluIHRoZSBkYXRhT2JqZWN0IHJlZ2lzdGVyZWRcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0IFVSTFxuICAqIEBwYXJhbSAge1N0cmluZ30gICBzdWJzY3JpYmVyVVJMICAgIHN1YnNjcmliZXIgVVJMXG4gICovXG4gIHJlZ2lzdGVyU3Vic2NyaWJlcihkYXRhT2JqZWN0VVJMLCBzdWJzY3JpYmVyVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdO1xuXG4gICAgaWYgKGRhdGFPYmplY3QpIHtcbiAgICAgIGRhdGFPYmplY3Quc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyVVJMKTtcbiAgICAgIF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID0gZGF0YU9iamVjdDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBnZXQgdGhlIHN1YnNjcmliZXJzIHJlZ2lzdGVyZWQgd2l0aGluIGEgZGF0YU9iamVjdFxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0IFVSTFxuICAqIEBwYXJhbSAge0FycmF5PFN0cmluZz59ICAgU3Vic3RyaWJlcnMgTGlzdFxuICAqL1xuICBnZXREYXRhT2JqZWN0U3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICByZXR1cm4gZGF0YU9iamVjdC5zdWJzY3JpYmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ05vIGRhdGFPYmplY3Qgd2FzIGZvdW5kJztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBUbyByZWdpc3RlciBhIG5ldyBEYXRhIE9iamVjdCBpbiB0aGUgcnVudGltZSB3aGljaCByZXR1cm5zIHRoZSBkYXRhT2JqZWN0VVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IERhdGEgT2JqZWN0LlxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBpZGVudGlmaWVyICAgICAgICAgICAgICAgICAgaWRlbnRpZmllclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBkYXRhT2JqZWN0c2NoZW1hICAgICAgICAgICAgZGF0YU9iamVjdHNjaGVtYVxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBkYXRhT2JqZWN0VXJsICAgICAgICAgICAgICAgZGF0YU9iamVjdFVybFxuICAqIEBwYXJhbSB7U3RyaW5nfSAgICAgIGRhdGFPYmplY3RSZXBvcnRlciAgICAgICAgICAgZGF0YU9iamVjdFJlcG9ydGVyXG4gICogQHBhcmFtICB7QXJyYXl9ICAgICByZXNvdXJjZXMgICAgICAgICAgICAgICAgICAgICBkYXRhT2JqZWN0IHJlc291cmNlc1xuICAqIEBwYXJhbSAge0FycmF5fSAgICAgYXV0aG9yaXNlICAgICAgICAgICAgICAgICAgICAgbGlzdCBvZiBwcmUgYXV0aG9yaXNlZCBhdXRob3Jpc2VkIElEc1xuICAqL1xuICByZWdpc3RlckRhdGFPYmplY3QoaWRlbnRpZmllciwgZGF0YU9iamVjdHNjaGVtYSwgZGF0YU9iamVjdFVybCwgZGF0YU9iamVjdFJlcG9ydGVyLCByZXNvdXJjZXMsIGFkZHJlc3NVUkwsIGF1dGhvcmlzZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGxldCBkYXRhU2NoZW1lID0gW107XG4gICAgICBsZXQgZmlsdGVyZWREYXRhU2NoZW1lID0gZGF0YU9iamVjdFVybC5zcGxpdCgnOicpO1xuICAgICAgZGF0YVNjaGVtZS5wdXNoKGZpbHRlcmVkRGF0YVNjaGVtZVswXSk7XG5cbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgncmVnaXN0cnk6RGF0YU9iamVjdFVSTHMnKS50aGVuKCh1cmxzTGlzdCkgPT4ge1xuXG4gICAgICAgIGlmICghdXJsc0xpc3QpIHtcbiAgICAgICAgICB1cmxzTGlzdCA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy91cGRhdGUgdGhlIGxpc3Qgd2l0aCB0aGUgbmV3IGVsZW1lbnRzXG4gICAgICAgIHVybHNMaXN0W2lkZW50aWZpZXIgKyBkYXRhT2JqZWN0c2NoZW1hICsgcmVzb3VyY2VzICsgZGF0YU9iamVjdFJlcG9ydGVyXSA9IGFkZHJlc3NVUkwuYWRkcmVzcztcblxuICAgICAgICBsZXQgcnVudGltZSA9ICdydW50aW1lOi8vZG9tYWluL2RhdGFPYmplY3RYUFRPJztcbiAgICAgICAgbGV0IHN0YXR1cyA9ICdsaXZlJztcbiAgICAgICAgbGV0IHAycFJlcXVlc3RlciA9ICdkYXRhT2JqZWN0Oi8vZG9tYWluL3JlcXVlc3Rlcic7XG5cbiAgICAgICAgLy9tZXNzYWdlIHRvIHJlZ2lzdGVyIHRoZSBuZXcgaHlwZXJ0eSwgd2l0aGluIHRoZSBkb21haW4gcmVnaXN0cnlcbiAgICAgICAgbGV0IG1lc3NhZ2VWYWx1ZSA9IHtcbiAgICAgICAgICBuYW1lOiBpZGVudGlmaWVyLFxuICAgICAgICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxuICAgICAgICAgIGRhdGFTY2hlbWVzOiBkYXRhU2NoZW1lLFxuICAgICAgICAgIHNjaGVtYTogZGF0YU9iamVjdHNjaGVtYSxcbiAgICAgICAgICB1cmw6IGRhdGFPYmplY3RVcmwsXG4gICAgICAgICAgZXhwaXJlczogX3RoaXMuZXhwaXJlc1RpbWUsXG4gICAgICAgICAgcmVwb3J0ZXI6IGRhdGFPYmplY3RSZXBvcnRlcixcbiAgICAgICAgICBwcmVBdXRoOiBhdXRob3Jpc2UsXG4gICAgICAgICAgc3Vic2NyaWJlcnM6IFtdLFxuICAgICAgICAgIHJ1bnRpbWU6IHJ1bnRpbWUsXG4gICAgICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICAgICAgcDJwUmVxdWVzdGVyOiBwMnBSZXF1ZXN0ZXJcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgbWVzc2FnZTtcblxuICAgICAgICBpZiAoYWRkcmVzc1VSTC5uZXdBZGRyZXNzKSB7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSByZWdpc3RlcmluZyBuZXcgZGF0YSBvYmplY3QgVVJMJywgZGF0YU9iamVjdFVybCk7XG5cbiAgICAgICAgICBtZXNzYWdlID0ge3R5cGU6J2NyZWF0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywgYm9keToge3ZhbHVlOiBtZXNzYWdlVmFsdWUsIHBvbGljeTogJ3BvbGljeSd9fTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gcmVnaXN0ZXJpbmcgcHJldmlvdXNseSByZWdpc3RlcmVkIGRhdGEgb2JqZWN0IFVSTCcsIGRhdGFPYmplY3RVcmwpO1xuXG4gICAgICAgICAgLyptZXNzYWdlVmFsdWUgPSB7bmFtZTogaWRlbnRpZmllciwgcmVzb3VyY2VzOiByZXNvdXJjZXMsIGRhdGFTY2hlbWVzOiBkYXRhU2NoZW1lLCBzY2hlbWE6IGRhdGFPYmplY3RzY2hlbWEsIHVybDogZGF0YU9iamVjdFVybCwgZXhwaXJlczogX3RoaXMuZXhwaXJlc1RpbWUsIHJlcG9ydGVyOiBkYXRhT2JqZWN0UmVwb3J0ZXIsIHByZUF1dGg6IGF1dGhvcmlzZSwgc3Vic2NyaWJlcnM6IFtdfTtcblxuICAgICAgICAgIG1lc3NhZ2UgPSB7dHlwZTonY3JlYXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLCBib2R5OiB7dmFsdWU6IG1lc3NhZ2VWYWx1ZSwgcG9saWN5OiAncG9saWN5J319OyovXG5cbiAgICAgICAgICBtZXNzYWdlID0ge1xuICAgICAgICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJyxcbiAgICAgICAgICAgIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgYm9keToge3Jlc291cmNlOiBkYXRhT2JqZWN0VXJsLCB2YWx1ZToge3N0YXR1czogJ2xpdmUnfSB9XG4gICAgICAgICAgfTtcblxuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVybF0gPSBtZXNzYWdlVmFsdWU7XG5cbiAgICAgICAgLy8gc3RlcCB0byBvYnRhaW4gdGhlIGxpc3Qgb2YgYWxsIFVSTCByZWdpc3RlcmVkIHRvIHVwZGF0ZWQgd2l0aCB0aGUgbmV3IG9uZS5cbiAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZWdpc3RyeTpEYXRhT2JqZWN0VVJMcycsIDAsIHVybHNMaXN0KS50aGVuKCgpID0+IHtcblxuICAgICAgICAgIC8qbGV0IG1lc3NhZ2UgPSBfdGhpcy5tZXNzYWdlRmFjdG9yeS5jcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdChcbiAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJyxcbiAgICAgICAgICAgIG1lc3NhZ2VWYWx1ZSxcbiAgICAgICAgICAgICdwb2xpY3knXG4gICAgICAgICAgKTsqL1xuXG4gICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSA9PT0+IHJlZ2lzdGVyRGF0YU9iamVjdCBSZXBseTogJywgcmVwbHkpO1xuICAgICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoJ29rJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIHJlZ2lzdGVyIERhdGFPYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9nZXRSZXNvdXJjZXNBbmRTY2hlbWVzKGRlc2NyaXB0b3IpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xuXG4gICAgICBsZXQgcmVzb3VyY2VzO1xuXG4gICAgICAvLyBjaGVjayBpZiB0aGUgaHlwZXJ0eSByZXNvdXJjZXMgaXMgYSB2ZWN0b3Igb3IgYSBzdHJpbmdcbiAgICAgIC8vIFRPRE8gZGVsZXRlIGxhdGVyIHdoZW4gY2F0YWxvZ3VlIGlzIGZpeGVkXG4gICAgICBpZiAodHlwZW9mIChkZXNjcmlwdG9yLmh5cGVydHlUeXBlKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVzb3VyY2VzID0gW107XG4gICAgICAgIHJlc291cmNlcy5wdXNoKGRlc2NyaXB0b3IuaHlwZXJ0eVR5cGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb3VyY2VzID0gZGVzY3JpcHRvci5oeXBlcnR5VHlwZTtcbiAgICAgIH1cblxuICAgICAgbGV0IGRlc2NyaXB0b3JEYXRhU2NoZW1hID0gZGVzY3JpcHRvci5kYXRhT2JqZWN0cztcbiAgICAgIGxldCBkYXRhU2NoZW1hc0FycmF5ID0gW107XG5cbiAgICAgIC8vdGhpcyB3aWxsIGNyZWF0ZSBhIGFycmF5IHdpdGggYSBQcm9taXNlIGluIGVhY2ggcG9zaXRpb25cbiAgICAgIGZvciAobGV0IGluZGV4IGluIGRlc2NyaXB0b3JEYXRhU2NoZW1hKSB7XG4gICAgICAgIGRhdGFTY2hlbWFzQXJyYXkucHVzaChfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKGRlc2NyaXB0b3JEYXRhU2NoZW1hW2luZGV4XSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBhcyBzb29uIGFzIHRoZSBwcmV2aW91cyBhcnJheSBpcyBjb21wbGV0ZWQsIHRoaXMgd2lsbCB3YWl0IGZvciB0aGUgcmVzb2x2ZSBvZiBhbGwgcHJvbWlzZXMgaW4gdGhlIGFycmF5XG4gICAgICBQcm9taXNlLmFsbChkYXRhU2NoZW1hc0FycmF5KS50aGVuKGZ1bmN0aW9uKGRhdGFTY2hlbWFzKSB7XG5cbiAgICAgICAgbGV0IGZpbHRlcmVkRGF0YVNjaGVtYXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggaW4gZGF0YVNjaGVtYXMpIHtcbiAgICAgICAgICBsZXQgZGF0YVNjaGVtYSA9IGRhdGFTY2hlbWFzW2luZGV4XTtcbiAgICAgICAgICBmaWx0ZXJlZERhdGFTY2hlbWFzLnB1c2goZGF0YVNjaGVtYS5zb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUucHJvcGVydGllcy5zY2hlbWUuY29uc3RhbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gSHlwZXJ0eSBTY2hlbWFzJywgZmlsdGVyZWREYXRhU2NoZW1hcyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIEh5cGVydHkgcmVzb3VyY2VzJywgcmVzb3VyY2VzKTtcblxuICAgICAgICByZXNvbHZlKHtyZXNvdXJjZXM6IHJlc291cmNlcywgZGF0YVNjaGVtYTogZmlsdGVyZWREYXRhU2NoZW1hc30pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBtZXRob2QgdGhhdCByZXR1cm5zIHByZXZpb3VzbHkgcmVnaXN0ZXJlZCBIeXBlcnR5IG9yIERhdGFPYmplY3RzIFVSTFMsIGZvciBnaXZlbiBjaGFyYWN0ZXJpc3RpY3NcbiAgKiBAcGFyYW0gIHtKU09OfSAgICAgICAgaW5mbyAgICAgICAgICAgb2JqZWN0IG9yIGh5cGVydHkgY2hhcmF0ZXJpc3RpY3MgaW5mb1xuICAqIEByZXR1cm4ge2FkZHJlc3NVUkx9ICBhZGRyZXNzVVJMICAgICByZXR1cm4gdGhlIFVSTCBpZiB0aGVyZSBpcyBhbnkgcHJldmlvdXN5IHJlZ2lzdGVyZWQgVVJMLCByZXR1cm4gdW5kZWZpbmVkIG90aGVyd2lzZVxuICAqL1xuICBjaGVja1JlZ2lzdGVyZWRVUkxzKGluZm8pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IG9iamVjdFR5cGUgPSAoaW5mby5yZXBvcnRlcikgPyAncmVnaXN0cnk6RGF0YU9iamVjdFVSTHMnIDogJ3JlZ2lzdHJ5Okh5cGVydHlVUkxzJztcblxuICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KG9iamVjdFR5cGUpLnRoZW4oKHVybHNMaXN0KSA9PiB7XG5cbiAgICAgICAgaWYgKCF1cmxzTGlzdCkge1xuICAgICAgICAgIHVybHNMaXN0ID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2JqZWN0VHlwZSA9PT0gJ3JlZ2lzdHJ5Okh5cGVydHlVUkxzJykge1xuICAgICAgICAgIF90aGlzLl9nZXRSZXNvdXJjZXNBbmRTY2hlbWVzKGluZm8pLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAodXJsc0xpc3RbdmFsdWUucmVzb3VyY2VzICsgdmFsdWUuZGF0YVNjaGVtYV0pIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gcmV1c2FnZSBvZiBoeXBlcnR5IFVSTCcpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh1cmxzTGlzdFt2YWx1ZS5yZXNvdXJjZXMgKyB2YWx1ZS5kYXRhU2NoZW1hXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBubyBoeXBlcnR5IFVSTCB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkICcpO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgbGV0IGNoYXJhY3RlcmlzdGljcyA9IGluZm8ubmFtZSArIGluZm8uc2NoZW1hICsgaW5mby5yZXNvdXJjZXMgKyBpbmZvLnJlcG9ydGVyO1xuXG4gICAgICAgICAgaWYgKHVybHNMaXN0W2NoYXJhY3RlcmlzdGljc10pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIHJldXNhZ2Ugb2YgZGF0YU9iamVjdCBVUkwnKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVybHNMaXN0W2NoYXJhY3RlcmlzdGljc10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBubyBkYXRhT2JqZWN0IFVSTCB3YXMgcHJldmlvdXNseSByZWdpc3RlcmVkJyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgY2hlY2tIeXBlcnR5UDJQSGFuZGxlcihoeXBlcnR5VVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgaHlwZXJ0eTtcblxuICAgICAgZm9yIChsZXQgaSBpbiBfdGhpcy5yZW1vdGVIeXBlcnR5TGlzdCkge1xuICAgICAgICBoeXBlcnR5ID0gX3RoaXMucmVtb3RlSHlwZXJ0eUxpc3RbaV07XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeSAtIGNoZWNrSHlwZXJ0eVAyUEhhbmRsZXJdIC0gZm9yIGVhY2ggSHlwZXJ0eTogJywgaHlwZXJ0eSk7XG5cbiAgICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCkge1xuXG4gICAgICAgICAgaWYgKGh5cGVydHkuaGFzT3duUHJvcGVydHkoJ3AycEhhbmRsZXInKSkge1xuICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgIHAycEhhbmRsZXI6IGh5cGVydHkucDJwSGFuZGxlcixcbiAgICAgICAgICAgICAgcDJwUmVxdWVzdGVyOiBoeXBlcnR5LnAycFJlcXVlc3RlcixcbiAgICAgICAgICAgICAgcnVudGltZVVSTDogaHlwZXJ0eS5ydW50aW1lVVJMXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdbUmVnaXN0cnkgY2hlY2tIeXBlcnR5UDJQSGFuZGxlcl0gSHlwZXJ0eSBmb3VuZCBkb2VzIG5vdCBzdXBwb3J0IFAyUCcsIGh5cGVydHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWh5cGVydHkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeSAtIGNoZWNrSHlwZXJ0eVAyUEhhbmRsZXJdIC0gSHlwZXJ0eTogJywgaHlwZXJ0eSk7XG5cbiAgICAgICAgbGV0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgdHlwZTogJ3JlYWQnLFxuICAgICAgICAgIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4gKyAnLycsXG4gICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICByZXNvdXJjZTogaHlwZXJ0eVVSTFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb3ZlciBoeXBlcnR5IHBlciB1cmwgcmVwbHknLCByZXBseSk7XG4gICAgICAgICAgaWYgKCd2YWx1ZScgaW4gcmVwbHkuYm9keSkge1xuXG4gICAgICAgICAgICAvL3RvZG86IHN0b3JlIHJldHJpZXZlZCBoeXBlcnR5XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZWRIeXBlcnR5ID0gcmVwbHkuYm9keS52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKHJlc29sdmVkSHlwZXJ0eS5oYXNPd25Qcm9wZXJ0eSgncDJwSGFuZGxlcicpKSB7XG4gICAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIHAycEhhbmRsZXI6IHJlc29sdmVkSHlwZXJ0eS5wMnBIYW5kbGVyLFxuICAgICAgICAgICAgICAgIHAycFJlcXVlc3RlcjogcmVzb2x2ZWRIeXBlcnR5LnAycFJlcXVlc3RlcixcbiAgICAgICAgICAgICAgICBydW50aW1lVVJMOiByZXNvbHZlZEh5cGVydHkucnVudGltZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlamVjdCgnW1JlZ2lzdHJ5IGNoZWNrSHlwZXJ0eVAyUEhhbmRsZXJdIEh5cGVydHkgZm91bmQgZG9lcyBub3Qgc3VwcG9ydCBQMlAnLCByZXBseS5ib2R5LnZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ0h5cGVydHkgd2l0aCBQMlBIYW5kbGVyIG5vdCBmb3VuZCcsIHJlcGx5LmJvZHkuY29kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFRvIHJlZ2lzdGVyIGEgbmV3IEh5cGVydHkgaW4gdGhlIHJ1bnRpbWUgd2hpY2ggcmV0dXJucyB0aGUgSHlwZXJ0eVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBIeXBlcnR5LlxuICAqIEBwYXJhbSAge1NhbmRib3h9ICAgICAgICAgICAgIHNhbmRib3ggICAgICAgICAgICAgICBzYW5kYm94XG4gICogQHBhcmFtICB7SHlwZXJ0eUNhdGFsb2d1ZVVSTH0gSHlwZXJ0eUNhdGFsb2d1ZVVSTCAgIGRlc2NyaXB0b3JcbiAgKiBAcmV0dXJuIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMXG4gICovXG4gIHJlZ2lzdGVySHlwZXJ0eShzYW5kYm94LCBkZXNjcmlwdG9yVVJMLCBkZXNjcmlwdG9yLCBhZGRyZXNzVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBoeXBlcnR5Q2FwYWJpbGl0aWVzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAvL2Fzc3VtaW5nIGRlc2NyaXB0b3IgY29tZSBpbiB0aGlzIGZvcm1hdCwgdGhlIHNlcnZpY2UtcHJvdmlkZXItZG9tYWluIHVybCBpcyByZXRyaWV2ZWQgYnkgYSBzcGxpdCBpbnN0cnVjdGlvblxuICAgICAgLy9oeXBlcnR5LWNhdGFsb2d1ZTovLzxzZXJ2aWNlLXByb3ZpZGVyLWRvbWFpbj4vPGNhdGFsb2d1ZS1vYmplY3QtaWRlbnRpZmllcj5cbiAgICAgIGxldCBkb21haW5VcmwgPSBkaXZpZGVVUkwoZGVzY3JpcHRvclVSTCkuZG9tYWluO1xuXG4gICAgICBpZiAoZG9tYWluVXJsLmluY2x1ZGVzKCdjYXRhbG9ndWUnKSkge1xuICAgICAgICBkb21haW5VcmwgPSBkb21haW5VcmwucmVwbGFjZSgnY2F0YWxvZ3VlLicsICcnKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdHlBc3NlcnRpb24oKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBsZXQgdXNlclByb2ZpbGUgPSByZXN1bHQudXNlclByb2ZpbGU7XG4gICAgICAgIGxldCBpZGVudGl0eVVSTCA9IHVzZXJQcm9maWxlLnVzZXJVUkw7XG5cbiAgICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vY2FsbCBjaGVjayBpZiB0aGUgcHJvdG9zdHViIGV4aXN0OiB0byBiZSByZW1vdmVkXG4gICAgICAgICAgLyogIF90aGlzLnJlc29sdmUoZG9tYWluVXJsKS50aGVuKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBzdHViIHRvIGRvbWFpbiByZWdpc3RyeS0gJywgYSk7Ki9cblxuICAgICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgncmVnaXN0cnk6SHlwZXJ0eVVSTHMnKS50aGVuKCh1cmxzTGlzdCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gc3RvcmFnZU1hbmFnZXJdIC0gJywgdXJsc0xpc3QpO1xuXG4gICAgICAgICAgICBfdGhpcy5fZ2V0UmVzb3VyY2VzQW5kU2NoZW1lcyhkZXNjcmlwdG9yKS50aGVuKCh2YWx1ZSkgPT4ge1xuXG4gICAgICAgICAgICAgIGh5cGVydHlDYXBhYmlsaXRpZXMgPSB2YWx1ZTtcblxuICAgICAgICAgICAgICBpZiAoIXVybHNMaXN0KSB7XG4gICAgICAgICAgICAgICAgdXJsc0xpc3QgPSB7fTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHVybHNMaXN0W2h5cGVydHlDYXBhYmlsaXRpZXMucmVzb3VyY2VzICsgaHlwZXJ0eUNhcGFiaWxpdGllcy5kYXRhU2NoZW1hXSA9IGFkZHJlc3NVUkwuYWRkcmVzcztcbiAgICAgICAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZWdpc3RyeTpIeXBlcnR5VVJMcycsIDAsIHVybHNMaXN0KS50aGVuKCgpID0+IHtcblxuICAgICAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5RG9tYWluID0gZG9tYWluVXJsO1xuXG4gICAgICAgICAgICAgICAgLy9jaGVjayB3aGV0aGVyIHRoZSByZWNlaXZlZCBzYW5ib3ggZSBBcHBsaWNhdGlvblNhbmRib3ggb3IgYSBub3JtYWwgc2FuZGJveFxuICAgICAgICAgICAgICAgIGlmIChzYW5kYm94LnR5cGUgPT09ICdhcHAnKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LmFwcFNhbmRib3hbYWRkcmVzc1VSTC5hZGRyZXNzWzBdXSA9IHNhbmRib3g7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzYW5kYm94LnR5cGUgPT09ICdub3JtYWwnKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbYWRkcmVzc1VSTC5hZGRyZXNzWzBdXSA9IHNhbmRib3g7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJlamVjdCgnV3JvbmcgU2FuZGJveFR5cGUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgcDJwSGFuZGxlcjtcbiAgICAgICAgICAgICAgICBsZXQgcDJwUmVxdWVzdGVyO1xuXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKF90aGlzLnAycEhhbmRsZXJTdHViKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgIHAycEhhbmRsZXIgPSBfdGhpcy5wMnBIYW5kbGVyU3R1YltfdGhpcy5ydW50aW1lVVJMXS51cmw7XG4gICAgICAgICAgICAgICAgICBwMnBSZXF1ZXN0ZXIgPSBydW50aW1lVXRpbHMucnVudGltZURlc2NyaXB0b3IucDJwUmVxdWVzdGVyU3R1YjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgcnVudGltZSA9IF90aGlzLnJ1bnRpbWVVUkw7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXR1cyA9ICdsaXZlJztcblxuICAgICAgICAgICAgICAgIGxldCBoeXBlcnR5ID0gbmV3IEh5cGVydHlJbnN0YW5jZShfdGhpcy5pZGVudGlmaWVyLCBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yVVJMLCBkZXNjcmlwdG9yLCBhZGRyZXNzVVJMLmFkZHJlc3NbMF0sIHVzZXJQcm9maWxlLCAnZ3VpZCcsIF90aGlzLnJ1bnRpbWVVUkwsICdjdHgnLCBwMnBIYW5kbGVyLCBwMnBSZXF1ZXN0ZXIsIGh5cGVydHlDYXBhYmlsaXRpZXMuZGF0YVNjaGVtYSwgaHlwZXJ0eUNhcGFiaWxpdGllcy5yZXNvdXJjZXMpO1xuXG4gICAgICAgICAgICAgICAgX3RoaXMuaHlwZXJ0aWVzTGlzdC5wdXNoKGh5cGVydHkpO1xuXG4gICAgICAgICAgICAgICAgLy9tZXNzYWdlIHRvIHJlZ2lzdGVyIHRoZSBuZXcgaHlwZXJ0eSwgd2l0aGluIHRoZSBkb21haW4gcmVnaXN0cnlcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZVZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFkZHJlc3NVUkwubmV3QWRkcmVzcykge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIHJlZ2lzdGVyaW5nIG5ldyBIeXBlcnR5IFVSTCcsIGFkZHJlc3NVUkwuYWRkcmVzc1swXSk7XG5cbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VWYWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcjogaWRlbnRpdHlVUkwsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3JVUkwsXG4gICAgICAgICAgICAgICAgICAgIHVybDogYWRkcmVzc1VSTC5hZGRyZXNzWzBdLFxuICAgICAgICAgICAgICAgICAgICBleHBpcmVzOiBfdGhpcy5leHBpcmVzVGltZSxcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzOiBoeXBlcnR5Q2FwYWJpbGl0aWVzLnJlc291cmNlcyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVNjaGVtZXM6IGh5cGVydHlDYXBhYmlsaXRpZXMuZGF0YVNjaGVtYSxcbiAgICAgICAgICAgICAgICAgICAgcnVudGltZTogcnVudGltZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiBzdGF0dXNcbiAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgIGlmIChwMnBIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VWYWx1ZS5wMnBIYW5kbGVyID0gcDJwSGFuZGxlcjtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlLnAycFJlcXVlc3RlciA9IHAycFJlcXVlc3RlcjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIHJlZ2lzdGVyaW5nIG5ldyBIeXBlcnR5IGF0IGRvbWFpbiByZWdpc3RyeSAnLCBtZXNzYWdlVmFsdWUpO1xuXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlID0ge3R5cGU6J2NyZWF0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywgYm9keToge3ZhbHVlOiBtZXNzYWdlVmFsdWUsIHBvbGljeTogJ3BvbGljeSd9fTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gcmVnaXN0ZXJpbmcgcHJldmlvdXNseSByZWdpc3RlcmVkIEh5cGVydHkgVVJMJywgYWRkcmVzc1VSTC5hZGRyZXNzWzBdKTtcblxuICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge3Jlc291cmNlOiBhZGRyZXNzVVJMLmFkZHJlc3NbMF0sIHZhbHVlOiB7IHN0YXR1czogJ2xpdmUnLCB1c2VyOiBpZGVudGl0eVVSTCB9fVxuICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHAycEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlLnAycEhhbmRsZXIgPSBwMnBIYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSB1cGRhdGluZyBIeXBlcnR5IHJlZ2lzdHJhdGlvbiBhdCBkb21haW4gcmVnaXN0cnkgIC0gJywgbWVzc2FnZSk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBIeXBlcnR5IHJlZ2lzdHJhdGlvbiB1cGRhdGUgcmVzcG9uc2U6ICcsIHJlcGx5KTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYWRkcmVzc1VSTC5hZGRyZXNzWzBdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgnRmFpbGVkIHRvIHJlZ2lzdGVyIGFuIEh5cGVydHknKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vdGltZXIgdG8ga2VlcCB0aGUgcmVnaXN0cmF0aW9uIGFsaXZlXG4gICAgICAgICAgICAgICAgLy8gdGhlIHRpbWUgaXMgZGVmaW5lZCBieSBhIGxpdHRsZSBsZXNzIHRoYW4gaGFsZiBvZiB0aGUgZXhwaXJlcyB0aW1lIGRlZmluZWRcbiAgICAgICAgICAgICAgICBsZXQga2VlcEFsaXZlVGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgLypsZXQgbWVzc2FnZSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5LmNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KFxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgICAgICAgICAgICAgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAncG9saWN5J1xuICAgICAgICAgICAgICAgICAgKTsqL1xuXG4gICAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTondXBkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7IHJlc291cmNlOiBhZGRyZXNzVVJMLmFkZHJlc3NbMF0sIHZhbHVlOiB7c3RhdHVzOiAnbGl2ZSd9IH19O1xuXG4gICAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIEtlZXBBbGl2ZSBSZXBseTogJywgcmVwbHkpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwoKChfdGhpcy5leHBpcmVzVGltZSAvIDEuMSkgLyAyKSAqIDEwMDApKTtcblxuICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gRXJyb3I6ICcsIHJlYXNvbik7XG4gICAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICByZWplY3QoJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIEZhaWxlZCB0byBvYnRhaW4gYW4gaWRlbnRpdHknLCBlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIEh5cGVydHlcbiAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMIHVybCAgICAgICAgdXJsXG4gICovXG4gIHVucmVnaXN0ZXJIeXBlcnR5KHVybCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICBsZXQgaW5kZXggPSAwO1xuXG4gICAgICBmb3JcdChpbmRleCA9IDA7IGluZGV4IDwgX3RoaXMuaHlwZXJ0aWVzTGlzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgbGV0IGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTtcbiAgICAgICAgaWYgKGh5cGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlVUkwgPT09IHVybCkge1xuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3VuZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmVqZWN0KCdIeXBlcnR5IG5vdCBmb3VuZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuICAgICAgICByZXNvbHZlKCdIeXBlcnR5IHN1Y2Nlc3NmdWxseSBkZWxldGVkJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIGRpc2NvdmVyIHByb3RvY29sIHN0dWJzIGF2YWlsYWJsZSBpbiB0aGUgcnVudGltZSBmb3IgYSBjZXJ0YWluIGRvbWFpbi4gSWYgYXZhaWxhYmxlLCBpdCByZXR1cm5zIHRoZSBydW50aW1lIHVybCBmb3IgdGhlIHByb3RvY29sIHN0dWIgdGhhdCBjb25uZWN0cyB0byB0aGUgcmVxdWVzdGVkIGRvbWFpbi4gUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgQlVTIHRvIHJvdXRlIG1lc3NhZ2VzIHRvIHJlbW90ZSBzZXJ2ZXJzIG9yIHBlZXJzIChkbyB3ZSBuZWVkIHNvbWV0aGluZyBzaW1pbGFyIGZvciBIeXBlcnRpZXM/KS5cbiAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICAgICAgICBEb21haW5VUkwgICAgICAgICAgICB1cmxcbiAgKiBAcmV0dXJuIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTFxuICAqL1xuICBkaXNjb3ZlclByb3Rvc3R1Yih1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTCh1cmwpO1xuICAgIGxldCBkb21haW5VUkwgPSBkaXZpZGVkVVJMLmRvbWFpbjtcblxuICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShkb21haW5VUkwpICYmIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0uc3RhdHVzID09PSBTVEFUVVMuTElWRSkge1xuICAgICAgcmV0dXJuIChfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VUkxdKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VUkxdID0ge1xuICAgICAgICBzdGF0dXM6IFNUQVRVUy5DUkVBVEVEXG4gICAgICB9O1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tSZWdpc3RyeSAtIGRpc2NvdmVyUHJvdG9TdHViIF0gTWVzc2FnZSBOb2RlIFByb3Rvc3R1YiBOb3QgRm91bmQuIENyZWF0aW5nIG9uZScpO1xuXG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgKiBUbyBkaXNjb3ZlciBwcm90b2NvbCBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBwcm90b2NvbCBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVycyAoZG8gd2UgbmVlZCBzb21ldGhpbmcgc2ltaWxhciBmb3IgSHlwZXJ0aWVzPykuXG4gICogQHBhcmFtICB7UnVudGltZVVSTH0gICAgICAgICAgIFJ1bnRpbWVVUkwgICAgICAgICAgICB1cmxcbiAgKiBAcmV0dXJuIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTFxuICAqL1xuICBkaXNjb3ZlclAyUFN0dWIocnVudGltZVVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAocnVudGltZVVSTCkge1xuXG4gICAgICBpZiAoX3RoaXMucDJwUmVxdWVzdGVyU3R1Yi5oYXNPd25Qcm9wZXJ0eShydW50aW1lVVJMKSAmJiBfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViW3J1bnRpbWVVUkxdLnN0YXR1cyA9PT0gU1RBVFVTLkxJVkUpIHtcbiAgICAgICAgcmV0dXJuIChfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViW3J1bnRpbWVVUkxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnAycFJlcXVlc3RlclN0dWJbcnVudGltZVVSTF0gPSB7XG4gICAgICAgICAgc3RhdHVzOiBTVEFUVVMuQ1JFQVRFRFxuICAgICAgICB9O1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW1JlZ2lzdHJ5IC0gZGlzY292ZXJQMlBTdHViIF0gUDJQIFJlcXVlc3RlciBTdHViIE5vdCBGb3VuZC4gQ3JlYXRpbmcgb25lJyk7XG5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuXG4gICAgICBpZiAoX3RoaXMucDJwSGFuZGxlclN0dWIuaGFzT3duUHJvcGVydHkoX3RoaXMucnVudGltZVVSTCkgJiYgX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0uc3RhdHVzID09PSBTVEFUVVMuTElWRSkge1xuICAgICAgICByZXR1cm4gKF90aGlzLnAycEhhbmRsZXJTdHViW190aGlzLnJ1bnRpbWVVUkxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLnAycEhhbmRsZXJTdHViW190aGlzLnJ1bnRpbWVVUkxdID0ge1xuICAgICAgICAgIHN0YXR1czogU1RBVFVTLkNSRUFURURcbiAgICAgICAgfTtcblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tSZWdpc3RyeSAtIGRpc2NvdmVyUDJQU3R1YiBdIFAyUCBIYW5kbGVyIFN0dWIgTm90IEZvdW5kLiBDcmVhdGluZyBvbmUnKTtcbiAgICAgIH1cblxuICAgIH1cblxuICB9XG5cbiAgLyoqXG4gICAqIFRvIHJlZ2lzdGVyIGEgbmV3IFByb3RvY29sIFN0dWIgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgRG9tYWluVVJMIHRoYXQgaXMgY29ubmVjdGVkIHdpdGggdGhlIHN0dWIsIHdoaWNoIHJldHVybnMgdGhlIFJ1bnRpbWVVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgUHJvdG9jb2xTdHViLlxuICAgKiBAcGFyYW0gIHtTYW5kYm94fSAgICAgICBTYW5kYm94XG4gICAqIEBwYXJhbSAge3N0dWJJRH0gICAgICAgIERvbWFpbiBvciBoeXBlcnR5IHJ1bnRpbWUgdG8gcmVnaXN0ZXIgdGhlIHN0dWJcbiAgICogQHBhcmFtICB7ZGVzY3JpcHRvclVSTH0gICAgIENhdGFsb2d1ZSBVUkwgb2YgdGhlIFByb3Rvc3R1YiBkZXNjcmlwdG9yXG4gICAqIEBwYXJhbSAge2Rlc2NyaXB0b3J9ICAgICBQcm90b3N0dWIgZGVzY3JpcHRvclxuICAgKiBAcmV0dXJuIHtSdW50aW1lUHJvdG9TdHViVVJMfVxuICAgKi9cbiAgcmVnaXN0ZXJTdHViKHNhbmRib3gsIHN0dWJJRCwgcDJwQ29uZmlnLCBkZXNjcmlwdG9yVVJMLCBkZXNjcmlwdG9yKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBfc3R1YkRlc2NyaXB0b3IgPSBkZXNjcmlwdG9yO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIGxldCBydW50aW1lUHJvdG9TdHViVVJMO1xuXG4gICAgICAvL2NoZWNrIGlmIG1lc3NhZ2VCdXMgaXMgcmVnaXN0ZXJlZCBpbiByZWdpc3RyeSBvciBub3RcbiAgICAgIGlmIChfdGhpcy5fbWVzc2FnZUJ1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlamVjdCgnTWVzc2FnZUJ1cyBub3QgZm91bmQgb24gcmVnaXN0ZXJTdHViJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUuaW5mbygnW1JlZ2lzdHJ5IC0gcmVnaXN0ZXJTdHViXSAtIHN0dWJJRCAnLCBzdHViSUQpO1xuXG4gICAgICBpZiAoIXN0dWJJRC5pbmRleE9mKCdtc2ctbm9kZS4nKSkge1xuICAgICAgICBzdHViSUQgPSBzdHViSUQuc3Vic3RyaW5nKHN0dWJJRC5pbmRleE9mKCcuJykgKyAxKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGlzUDJQSGFuZGxlciA9IGZhbHNlO1xuICAgICAgbGV0IFAyUFJlcXVlc3RlclN0dWI7XG5cbiAgICAgIGlmIChwMnBDb25maWcpIHtcbiAgICAgICAgaWYgKHAycENvbmZpZy5oYXNPd25Qcm9wZXJ0eSgnaXNIYW5kbGVyU3R1YicpICYmIHAycENvbmZpZy5pc0hhbmRsZXJTdHViKSB7XG4gICAgICAgICAgaXNQMlBIYW5kbGVyID0gcDJwQ29uZmlnLmlzSGFuZGxlclN0dWI7XG4gICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCA9ICdydW50aW1lOi8vJyArIGRpdmlkZVVSTChzdHViSUQpLmRvbWFpbiArICcvcDJwaGFuZGxlci8nICsgZ2VuZXJhdGVHVUlEKCk7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbUmVnaXN0cnkgLSByZWdpc3RlclN0dWIgLSBpc1AyUEhhbmRsZXJdIC0gJywgcnVudGltZVByb3RvU3R1YlVSTCk7XG5cbiAgICAgICAgICBfdGhpcy5wMnBIYW5kbGVyU3R1YltzdHViSURdID0ge1xuICAgICAgICAgICAgdXJsOiBydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgICAgICAgc3RhdHVzOiBTVEFUVVMuQ1JFQVRFRFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGhpcy5wMnBIYW5kbGVyQXNzb2NpYXRpb25bX3RoaXMucnVudGltZVVSTF0gPSBbXTtcblxuICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtydW50aW1lUHJvdG9TdHViVVJMXSA9IHNhbmRib3g7XG4gICAgICAgICAgcmVzb2x2ZShfdGhpcy5wMnBIYW5kbGVyU3R1YltzdHViSURdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBQMlBSZXF1ZXN0ZXJTdHViID0gcDJwQ29uZmlnLnAycFJlcXVlc3RlclN0dWI7XG4gICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCA9ICdydW50aW1lOi8vJyArIGRpdmlkZVVSTChwMnBDb25maWcucmVtb3RlUnVudGltZVVSTCkuZG9tYWluICsgJy9wMnByZXF1ZXN0ZXIvJyArIGdlbmVyYXRlR1VJRCgpO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1JlZ2lzdHJ5IC0gcmVnaXN0ZXJTdHViIC0gUDJQUmVxdWVzdGVyU3R1Yl0gLSAnLCBQMlBSZXF1ZXN0ZXJTdHViLCAnIC0gJywgcnVudGltZVByb3RvU3R1YlVSTCk7XG5cbiAgICAgICAgICAvLyB0byBiZSBjbGFyaWZpZWQgd2hhdCBpcyB0aGlzIHAycEhhbmRsZXJBc3NvY2lhdGlvblxuXG4gICAgICAgICAgX3RoaXMucDJwSGFuZGxlckFzc29jaWF0aW9uW190aGlzLnJ1bnRpbWVVUkxdLnB1c2gocnVudGltZVByb3RvU3R1YlVSTCk7XG4gICAgICAgICAgX3RoaXMucDJwUmVxdWVzdGVyU3R1YltzdHViSURdID0ge1xuICAgICAgICAgICAgdXJsOiBydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgICAgICAgc3RhdHVzOiBTVEFUVVMuQ1JFQVRFRFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbcnVudGltZVByb3RvU3R1YlVSTF0gPSBzYW5kYm94O1xuICAgICAgICAgIHJlc29sdmUoX3RoaXMucDJwUmVxdWVzdGVyU3R1YltzdHViSURdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCA9ICdydW50aW1lOi8vJyArIHN0dWJJRCArICcvcHJvdG9zdHViLycgKyBnZW5lcmF0ZUdVSUQoKTtcblxuICAgICAgICBjb25zb2xlLmluZm8oJ1tSZWdpc3RyeSAtIHJlZ2lzdGVyU3R1YiAtIE5vcm1hbCBTdHViXSAtICcsIHN0dWJJRCk7XG5cbiAgICAgICAgLy8gVE9ETzogT3B0aW1pemUgdGhpc1xuICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtzdHViSURdID0ge1xuICAgICAgICAgIHVybDogcnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5DUkVBVEVEXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGRlc2NyaXB0b3JVUkwpXG4gICAgICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0W3N0dWJJRF0uZGVzY3JpcHRvclVSTCA9IGRlc2NyaXB0b3JVUkw7XG5cbiAgICAgICAgaWYgKF9zdHViRGVzY3JpcHRvciAmJiAoX3N0dWJEZXNjcmlwdG9yLmludGVyd29ya2luZykpIHtcbiAgICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtzdHViSURdLmludGVyd29ya2luZyA9IF9zdHViRGVzY3JpcHRvci5pbnRlcndvcmtpbmc7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbcnVudGltZVByb3RvU3R1YlVSTF0gPSBzYW5kYm94O1xuXG4gICAgICAgIHJlc29sdmUoX3RoaXMucHJvdG9zdHVic0xpc3Rbc3R1YklEXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlc29sdmUocnVudGltZVByb3RvU3R1YlVSTCk7XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKHJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsIChtc2cpID0+IHtcbiAgICAgICAgaWYgKG1zZy5yZXNvdXJjZSA9PT0gbXNnLnRvICsgJy9zdGF0dXMnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1J1bnRpbWVQcm90b3N0dWJVUkwvc3RhdHVzIG1lc3NhZ2U6ICcsIG1zZy5ib2R5LnZhbHVlKTtcblxuICAgICAgICAgIGlmIChydW50aW1lUHJvdG9TdHViVVJMLmluY2x1ZGVzKCdwcm90b3N0dWInKSkge1xuXG4gICAgICAgICAgICBsZXQgZmlsdGVyZWQgPSBPYmplY3Qua2V5cyhfdGhpcy5wcm90b3N0dWJzTGlzdCkuZmlsdGVyKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgXHRyZXR1cm4gX3RoaXMucHJvdG9zdHVic0xpc3Rba2V5XS51cmwgPT09IHJ1bnRpbWVQcm90b1N0dWJVUkw7XG4gICAgICAgICAgICAgIH0pLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgIFx0X3RoaXMucHJvdG9zdHVic0xpc3Rba2V5XS5zdGF0dXMgPSBtc2cuYm9keS52YWx1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcblxuXG4gICAgICAgICAgICBsZXQgcmVtb3RlUnVudGltZVVSTCA9IG1zZy5ib2R5LnJlc291cmNlO1xuXG4gICAgICAgICAgICBsZXQgcDJwQ29ubmVjdGlvbiA9IF90aGlzLnAycENvbm5lY3Rpb25MaXN0W3JlbW90ZVJ1bnRpbWVVUkxdO1xuXG4gICAgICAgICAgICBpZiAocDJwQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdFtyZW1vdGVSdW50aW1lVVJMXS5zdGF0dXMgPSAgbXNnLmJvZHkudmFsdWU7XG4gICAgICAgICAgICAgIF90aGlzLnAycENvbm5lY3Rpb25MaXN0W3JlbW90ZVJ1bnRpbWVVUkxdLnVybCA9ICBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICBwMnBDb25uZWN0aW9uID0ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogbXNnLmJvZHkudmFsdWUsXG4gICAgICAgICAgICAgICAgdXJsOiBydW50aW1lUHJvdG9TdHViVVJMXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbcmVtb3RlUnVudGltZVVSTF0gPSAgcDJwQ29ubmVjdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChydW50aW1lUHJvdG9TdHViVVJMLmluY2x1ZGVzKCdwMnByZXF1ZXN0ZXInKSkge1xuXG4gICAgICAgICAgICBsZXQgZmlsdGVyZWQgPSBPYmplY3Qua2V5cyhwcm90b3N0dWJMaXN0KS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICAgICAgICBcdHJldHVybiBwcm90b3N0dWJMaXN0W2tleV0udXJsID09PSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICAgICAgICAgICB9KS5tYXAoKGtleSkgPT4ge1xuICAgICAgICAgICAgICBcdHAycFJlcXVlc3RlclN0dWJba2V5XS5zdGF0dXMgPSBtc2cuYm9keS52YWx1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1YlxuICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMICAgICBoeXBlcnR5UnVudGltZVVSTFxuICAqL1xuICB1bnJlZ2lzdGVyU3R1YihoeXBlcnR5UnVudGltZVVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShoeXBlcnR5UnVudGltZVVSTCkpIHtcbiAgICAgICAgZGVsZXRlIF90aGlzLnByb3Rvc3R1YnNMaXN0W2h5cGVydHlSdW50aW1lVVJMXTtcbiAgICAgICAgcmVzb2x2ZSgnUHJvdG9zdHViVVJMIHJlbW92ZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgnRXJyb3Igb24gdW5yZWdpc3RlclN0dWI6IEh5cGVydHkgbm90IGZvdW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVG8gcmVnaXN0ZXIgYSBuZXcgSWRlbnRpdHkgUHJvdmlkZXIgcHJveHkgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgRG9tYWluVVJMIHRoYXQgaXMgY29ubmVjdGVkIHdpdGggdGhlIHN0dWIsIHdoaWNoIHJldHVybnMgdGhlIFJ1bnRpbWVVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgUHJvdG9jb2xTdHViLlxuICAgKiBAcGFyYW0ge1NhbmRib3h9ICAgICAgICBTYW5kYm94XG4gICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgIERvbWFpblVSTCBzZXJ2aWNlIHByb3ZpZGVyIGRvbWFpblxuICAgKiBAcmV0dXJuIHtSdW50aW1lSWRwUHJveHlVUkx9XG4gICAqL1xuICByZWdpc3RlcklkcFByb3h5KHNhbmRib3gsIGRvbWFpblVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGlkcFByb3h5U3R1YlVSTDtcblxuICAgICAgLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90XG4gICAgICBpZiAoX3RoaXMuX21lc3NhZ2VCdXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpO1xuICAgICAgfVxuXG4gICAgICBpZHBQcm94eVN0dWJVUkwgPSAnZG9tYWluLWlkcDovLycgKyBkb21haW5VUkwgKyAnL3N0dWIvJyArIGdlbmVyYXRlR1VJRCgpO1xuXG4gICAgICAvLyBUT0RPOiBPcHRpbWl6ZSB0aGlzXG4gICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXSA9IHtcbiAgICAgICAgdXJsOiBpZHBQcm94eVN0dWJVUkwsXG4gICAgICAgIHN0YXR1czogU1RBVFVTLlBST0dSRVNTXG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbaWRwUHJveHlTdHViVVJMXSA9IHNhbmRib3g7XG5cbiAgICAgIC8vIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgIC8vICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgIC8vIH0pO1xuXG4gICAgICByZXNvbHZlKGlkcFByb3h5U3R1YlVSTCk7XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKGlkcFByb3h5U3R1YlVSTCArICcvc3RhdHVzJywgKG1zZykgPT4ge1xuICAgICAgICBpZiAobXNnLnJlc291cmNlID09PSBtc2cudG8gKyAnL3N0YXR1cycpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBpZHBQcm94eVN0dWJVUkwvc3RhdHVzIG1lc3NhZ2U6ICcsIG1zZy5ib2R5LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyBkaXNjb3ZlciBpZHBQcm94eSBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBpZHBQcm94eSBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVyc1xuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIERvbWFpblVSTCAgICAgICAgICAgIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMICAgICAgICAgaWRwUHJveHlVcmxcbiAgKi9cbiAgZGlzY292ZXJJZHBQcm94eSh1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTCh1cmwpO1xuICAgIGxldCBkb21haW5VUkwgPSBkaXZpZGVkVVJMLmRvbWFpbjtcblxuICAgIGlmIChfdGhpcy5pZHBQcm94eUxpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVVJMKSAmJiBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5MSVZFKSB7XG4gICAgICByZXR1cm4gKF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VUkxdKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXSA9IHtcbiAgICAgICAgc3RhdHVzOiBTVEFUVVMuUFJPR1JFU1NcbiAgICAgIH07XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcignW1JlZ2lzdHJ5IC0gZGlzY292ZXJJZHBQcm94eSBdIElkcCBQcm94eSBOb3QgRm91bmQuIENyZWF0aW5nIG9uZScpO1xuXG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgKiBUbyByZWdpc3RlciBhIG5ldyBQb2xpY3kgRW5mb3JjZXIgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgSHlwZXJ0eVVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIFBFUCwgd2hpY2ggcmV0dXJucyB0aGUgUnVudGltZVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBQb2xpY3kgRW5mb3JjZXIgY29tcG9uZW50LlxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gcG9zdE1lc3NhZ2UgcG9zdE1lc3NhZ2VcbiAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMICAgICAgICAgICAgaHlwZXJ0eVxuICAqIEByZXR1cm4ge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMXG4gICovXG4gIHJlZ2lzdGVyUEVQKHBvc3RNZXNzYWdlLCBoeXBlcnR5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuICAgICAgLy9UT0RPIGNoZWNrIHdoYXQgcGFyYW1ldGVyIGluIHRoZSBwb3N0TWVzc2FnZSB0aGUgcGVwIGlzLlxuICAgICAgX3RoaXMucGVwTGlzdFtoeXBlcnR5XSA9IHBvc3RNZXNzYWdlO1xuICAgICAgcmVzb2x2ZSgnUEVQIHJlZ2lzdGVyZWQgd2l0aCBzdWNjZXNzJyk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1YlxuICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMICAgICBIeXBlcnR5UnVudGltZVVSTFxuICAqL1xuICB1bnJlZ2lzdGVyUEVQKEh5cGVydHlSdW50aW1lVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBsZXQgcmVzdWx0ID0gX3RoaXMucGVwTGlzdFtIeXBlcnR5UnVudGltZVVSTF07XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWplY3QoJ1BlcCBOb3QgZm91bmQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCdQRVAgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQuJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIGRpc2NvdmVyIHNhbmRib3hlcyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIFVBIHRvIGF2b2lkIG1vcmUgdGhhbiBvbmUgc2FuZGJveCBmb3IgdGhlIHNhbWUgZG9tYWluLlxuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gRG9tYWluVVJMIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVTYW5kYm94fSAgICAgICAgICAgUnVudGltZVNhbmRib3hcbiAgKi9cbiAgZ2V0U2FuZGJveCh1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnkgZ2V0U2FuZGJveF0gZ2V0U2FuZGJveDogJywgdXJsKTtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIGxldCByZXF1ZXN0O1xuXG4gICAgICAvL2ZpcnN0IHRyeSB0byBmaW5kIHRoZSB1cmwgaW4gdGhlIGFwcFNhbmRib3ggbGlzdFxuICAgICAgcmVxdWVzdCA9IF90aGlzLnNhbmRib3hlc0xpc3QuYXBwU2FuZGJveFt1cmxdO1xuXG4gICAgICAvL2lmIG5vIGFwcFNhbmRib3ggd2FzIGZvdW5kLCB0cnkgdG8gc2VhcmNoIGluIHRoZSBub3JtYWwgc2FuZGJveGVzIGxpc3RcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0ID0gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3VybF07XG5cbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG5cbiAgICAgICAgICBsZXQgZG9tYWluO1xuXG4gICAgICAgICAgaWYgKHVybC5pbmNsdWRlcygnOi8vJykpXG4gICAgICAgICAgIGRvbWFpbiA9IGRpdmlkZVVSTCh1cmwpLmRvbWFpbjtcbiAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgZG9tYWluID0gdXJsO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzZWFyY2ggaW4gdGhlIHNhbmRib3hlcyBsaXN0IGZvciBhIGVudHJ5IGNvbnRhaW5pbmcgdGhlIGRvbWFpbiBnaXZlblxuICAgICAgICAgIGZvciAobGV0IHNhbmRib3ggaW4gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94KSB7XG4gICAgICAgICAgICBpZiAoc2FuZGJveC5pbmNsdWRlcyhkb21haW4pKSB7XG4gICAgICAgICAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbc2FuZGJveF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmVqZWN0KCdubyBzYW5kYm94IGZvdW5kIGZvcjogJyArIHVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICByZXNvbHZlTm9ybWFsU3R1Yih1cmwpIHtcbiAgICBjb25zb2xlLmxvZygncmVzb2x2ZU5vcm1hbFN0dWIgJyArIHVybCk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIC8vc3BsaXQgdGhlIHVybCB0byBmaW5kIHRoZSBkb21haW5VUkwuIGRlYWxzIHdpdGggdGhlIHVybCBmb3IgZXhhbXBsZSBhczpcbiAgICAgIC8vXCJoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvcHJvdG9zdHViLzEyM1wiLFxuICAgICAgbGV0IGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodXJsKTtcbiAgICAgIGxldCBkb21haW5VcmwgPSBkaXZpZGVkVVJMLmRvbWFpbjtcbiAgICAgIGxldCB0eXBlID0gZGl2aWRlZFVSTC50eXBlO1xuICAgICAgbGV0IGlzbGVnYWN5O1xuXG4gICAgICBpZiAodXJsLmluY2x1ZGVzKF90aGlzLnJ1bnRpbWVVUkwpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tSZWdpc3RyeSAtIHJlc29sdmVdIFVSTCB0byBiZSByZXNvbHZlZCBzaG91bGQgaGF2ZSBsaXN0ZW5lcnMgJywgdXJsKTtcbiAgICAgICAgcmVqZWN0KCdbUmVnaXN0cnkgLSByZXNvbHZlXSBVUkwgdG8gYmUgcmVzb2x2ZWQgc2hvdWxkIGhhdmUgbGlzdGVuZXJzICcsIHVybCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlc29sdmUgdGhlIGRvbWFpbiBwcm90b3N0dWIgaW4gY2FzZSBvZiBhIG1lc3NhZ2UgdG8gZ2xvYmFsIHJlZ2lzdHJ5XG5cbiAgICAgIGlmICh1cmwuaW5jbHVkZXMoJ2dsb2JhbDovL3JlZ2lzdHJ5JykpIHtcbiAgICAgICAgZG9tYWluVXJsID0gX3RoaXMuX2RvbWFpbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZG9tYWluVXJsLmluZGV4T2YoJ21zZy1ub2RlLicpIHx8ICFkb21haW5VcmwuaW5kZXhPZigncmVnaXN0cnkuJykpIHtcbiAgICAgICAgICBkb21haW5VcmwgPSBkb21haW5Vcmwuc3Vic3RyaW5nKGRvbWFpblVybC5pbmRleE9mKCcuJykgKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpcy5pc0xlZ2FjeSh1cmwpLnRoZW4oKGlzTGVnYWN5KSA9PiB7XG5cbiAgICAgICAgLy8gaWYgbGVnYWN5IGl0IHNob3VsZCByZXNvbHZlIGZvciA8cHJvdG9jb2w+Ljxkb21haW4+XG5cbiAgICAgICAgICBpZiAoaXNMZWdhY3kgJiYgdHlwZSAhPT0gJ2RvbWFpbi1pZHAnKVxuICAgICAgICAgICAgICBkb21haW5VcmwgPSB0eXBlICsgJy4nICsgZ2V0VXNlcklkZW50aXR5RG9tYWluKHVybCk7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5LnJlc29sdmVdIGRvbWFpblVybDonLCBkb21haW5VcmwpO1xuXG4gICAgICAgIGxldCByZWdpc3RyZWRDb21wb25lbnQ7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkb21haW4taWRwJykge1xuICAgICAgICAgIHJlZ2lzdHJlZENvbXBvbmVudCAgPSBfdGhpcy5pZHBQcm94eUxpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVXJsKSA/IF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdIDogZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVnaXN0cmVkQ29tcG9uZW50ICA9IF90aGlzLnByb3Rvc3R1YnNMaXN0Lmhhc093blByb3BlcnR5KGRvbWFpblVybCkgPyBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdIDogZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVnaXN0cmVkQ29tcG9uZW50ICYmIHJlZ2lzdHJlZENvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgnc3RhdHVzJykgJiYgcmVnaXN0cmVkQ29tcG9uZW50LnN0YXR1cyA9PT0gU1RBVFVTLkRFUExPWUVEKSB7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCdURVNUSU5HIFJlc29sdmVkOiAnLCByZWdpc3RyZWRDb21wb25lbnQudXJsKTtcbiAgICAgICAgICByZXNvbHZlKHJlZ2lzdHJlZENvbXBvbmVudC51cmwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlID09PSAnZG9tYWluLWlkcCcpIHtcbiAgICAgICAgICAgIC8vIF90aGlzLnRyaWdnZXIoJ3J1bnRpbWU6bG9hZElkcFByb3h5JywgZG9tYWluVXJsKTtcblxuICAgICAgICAgICAgX3RoaXMuX2xvYWRlci5sb2FkSWRwUHJveHkoZG9tYWluVXJsKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgcmVnaXN0cmVkQ29tcG9uZW50ICA9IF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdO1xuICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1Jlc29sdmVkIElEUFByb3h5OiAnLCByZWdpc3RyZWRDb21wb25lbnQsIHJlc3VsdCk7XG4gICAgICAgICAgICAgIF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdLnN0YXR1cyA9IFNUQVRVUy5ERVBMT1lFRDtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZWdpc3RyZWRDb21wb25lbnQudXJsKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzb2x2aW5nIElEUFByb3h5OiAnLCByZWFzb24pO1xuICAgICAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIF90aGlzLnRyaWdnZXIoJ3J1bnRpbWU6bG9hZFN0dWInLCBkb21haW5VcmwpO1xuXG4gICAgICAgICAgICBfdGhpcy5fbG9hZGVyLmxvYWRTdHViKGRvbWFpblVybCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgIHJlZ2lzdHJlZENvbXBvbmVudCAgPSBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdO1xuICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1Jlc29sdmVkIFByb3Rvc3R1YjogJywgcmVnaXN0cmVkQ29tcG9uZW50LCByZXN1bHQpO1xuICAgICAgICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdLnN0YXR1cyA9IFNUQVRVUy5ERVBMT1lFRDtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZWdpc3RyZWRDb21wb25lbnQudXJsKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzb2x2aW5nIFByb3Rvc3R1YjogJywgcmVhc29uKTtcbiAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuLy8gICAgICByZXNvbHZlKCk7XG4gICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcignW1JlZ2lzdHJ5LnJlc29sdmVdIEVycm9yIHJlc29sdmluZyBpc2xlZ2FjeTogJywgcmVhc29uKTtcbiAgICAgIHJlamVjdChyZWFzb24pO1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyB2ZXJpZnkgaWYgc291cmNlIGlzIHZhbGlkIGFuZCB0byByZXNvbHZlIHRhcmdldCBydW50aW1lIHVybCBhZGRyZXNzIGlmIG5lZWRlZCAoZWcgcHJvdG9zdHViIHJ1bnRpbWUgdXJsIGluIGNhc2UgdGhlIG1lc3NhZ2UgaXMgdG8gYmUgZGlzcGF0Y2hlZCB0byBhIHJlbW90ZSBlbmRwb2ludCkuXG4gICogQHBhcmFtICB7VVJMLlVSTH0gIHVybCAgICAgICB1cmxcbiAgKiBAcmV0dXJuIHtQcm9taXNlPFVSTC5VUkw+fSAgICAgICAgICAgICAgICAgUHJvbWlzZSA8VVJMLlVSTD5cbiAgKi9cbiAgcmVzb2x2ZSh1cmwpIHtcbiAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IC0gUmVzb2x2ZV0gLSAgJyArIHVybCk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIC8vc3BsaXQgdGhlIHVybCB0byBmaW5kIHRoZSBkb21haW5VUkwuIGRlYWxzIHdpdGggdGhlIHVybCBmb3IgZXhhbXBsZSBhczpcbiAgICAgIC8vXCJoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvcHJvdG9zdHViLzEyM1wiLFxuXG4gICAgICAvLyBTa2lwIHAycCBwcm9jZWR1cmUgd2hlbiBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBSdW50aW1lIG9yIGZvciBiYWNrZW5kIHNlcnZpY2VzXG5cbiAgICAgIGlmICghX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0gfHwgaXNCYWNrZW5kU2VydmljZVVSTCh1cmwpKSB7XG5cbiAgICAgICAgX3RoaXMucmVzb2x2ZU5vcm1hbFN0dWIodXJsKS50aGVuKChyZXR1cm5VUkwpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHJldHVyblVSTCk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5jaGVja0h5cGVydHlQMlBIYW5kbGVyKHVybCkudGhlbigoaHlwZXJ0eUluZm8pID0+IHtcblxuICAgICAgICAgIGxldCBwMnBDb25uZWN0aW9uID0gX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbaHlwZXJ0eUluZm8ucnVudGltZVVSTF07XG5cbiAgICAgICAgICBpZiAoIXAycENvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHAycENvbm5lY3Rpb24gPSB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocDJwQ29ubmVjdGlvbi5zdGF0dXMgPT09IFNUQVRVUy5MSVZFKSB7XG4gICAgICAgICAgICByZXNvbHZlKHAycENvbm5lY3Rpb24udXJsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAocDJwQ29ubmVjdGlvbi5zdGF0dXMgPT09IFNUQVRVUy5DUkVBVEVEKSB7XG4gICAgICAgICAgICAgIF90aGlzLnJlc29sdmVOb3JtYWxTdHViKHVybCkudGhlbigocmV0dXJuVVJMKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5VUkwpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHAycENvbm5lY3Rpb24uc3RhdHVzID0gU1RBVFVTLkNSRUFURUQ7XG4gICAgICAgICAgICAgIF90aGlzLnAycENvbm5lY3Rpb25MaXN0W2h5cGVydHlJbmZvLnJ1bnRpbWVVUkxdID0gcDJwQ29ubmVjdGlvbjtcblxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gbG9hZFN0dWIgd2l0aCBwMnBSZXF1ZXN0ZXI6ICcsIGh5cGVydHlJbmZvKTtcblxuICAgICAgICAgICAgICBsZXQgcDJwQ29uZmlnID0geyByZW1vdGVSdW50aW1lVVJMOiBoeXBlcnR5SW5mby5ydW50aW1lVVJMLCBwMnBIYW5kbGVyOiBoeXBlcnR5SW5mby5wMnBIYW5kbGVyLCBwMnBSZXF1ZXN0ZXJTdHViOiB0cnVlIH07XG5cbiAgICAgICAgICAgICAgLy8gVE9ETyBzdHViIGxvYWRcbiAgICAgICAgICAgICAgX3RoaXMuX2xvYWRlci5sb2FkU3R1YihoeXBlcnR5SW5mby5wMnBSZXF1ZXN0ZXIsIHAycENvbmZpZykudGhlbigocHJvdG9zdHViSW5mbykgPT4ge1xuICAgICAgICAgICAgICAgIHAycENvbm5lY3Rpb24uc3RhdHVzID0gU1RBVFVTLkNSRUFURUQ7XG4gICAgICAgICAgICAgICAgX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbaHlwZXJ0eUluZm8ucnVudGltZVVSTF0gPSBwMnBDb25uZWN0aW9uO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwcm90b3N0dWJJbmZvLnVybCk7XG4gICAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgKHJlYXNvbikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tSZWdpc3RyeSAtIFJlc29sdmVdIC0gUmVhc29uOiAnLCByZWFzb24pO1xuXG4gICAgICAgICAgX3RoaXMucmVzb2x2ZU5vcm1hbFN0dWIodXJsKS50aGVuKChyZXR1cm5VUkwpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVVJMKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG5cbiAgLyoqXG4gICogVG8gdmVyaWZ5IGlmIHVybCBpcyBmcm9tIGEgbGVnYWN5IGRvbWFpbi5cbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgdXJsICAgICAgdXJsXG4gICogQHJldHVybiB7Ym9vbGVhbn1cbiAgKi9cbiAgaXNMZWdhY3kodXJsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBpZiAodXJsID09PSBfdGhpcy5fZG9tYWluKVxuICAgICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIFtSZWdpc3RyeS5SZWdpc3RyeS5pc0xlZ2FjeV0gJywgdXJsKTtcblxuICAgICAgLy8gVE9ETzogdG8gYmUgZGVmaW5lZCBpbiB0aGUgcnVudGltZSBjb25maWd1cmF0aW9uXG4gICAgICBsZXQgbm9uTGVnYWN5ID0gW1wicnVudGltZVwiLFwiaHlwZXJ0eS1ydW50aW1lXCIsXCJkb21haW5cIixcImdsb2JhbFwiLFwiaHlwZXJ0eVwiXTtcblxuICAgICAgbGV0IHVybERpdmlkZWQgPSBkaXZpZGVVUkwodXJsKTtcblxuICAgICAgaWYgKG5vbkxlZ2FjeS5pbmRleE9mKHVybERpdmlkZWQudHlwZSkgIT09IC0xIHx8IHVybERpdmlkZWQuZG9tYWluID09PSBfdGhpcy5fZG9tYWluKVxuICAgICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSk7XG5cbiAgICAgIGxldCBkb21haW4gPSB1cmxEaXZpZGVkLmRvbWFpbjtcblxuICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gW1JlZ2lzdHJ5LlJlZ2lzdHJ5LmlzTGVnYWN5XSBkb21haW46ICcsIGRvbWFpbik7XG4gICAgICBpZiAoX3RoaXMuaWRwTGVnYWN5UHJveHlMaXN0Lmhhc093blByb3BlcnR5KGRvbWFpbikpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IF90aGlzLmlkcExlZ2FjeVByb3h5TGlzdFtkb21haW5dO1xuICAgICAgICBpZiAocmVzdWx0LmludGVyd29ya2luZylcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXN1bHQuaW50ZXJ3b3JraW5nKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX2xvYWRlci5kZXNjcmlwdG9ycy5nZXRJZHBQcm94eURlc2NyaXB0b3IoZG9tYWluKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBbUmVnaXN0cnkuUmVnaXN0cnkuaXNMZWdhY3ldIExlZ2FjeSBzdHViIGRlc2NyaXB0b3I6ICcsIHJlc3VsdCk7XG4gICAgICAgICAgX3RoaXMuaWRwTGVnYWN5UHJveHlMaXN0W2RvbWFpbl0gPSByZXN1bHQ7XG4gICAgICAgICAgaWYgKHJlc3VsdC5pbnRlcndvcmtpbmcpXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5pbnRlcndvcmtpbmcpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdwcm9ibGVtIGxvYWRpbmcgc3R1YiBmb3IgZG9tYWluOicsIGRvbWFpbik7XG4gICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogVG8gdmVyaWZ5IGlmIFVSTCBpcyBsb2NhbGx5IHJlZ2lzdGVyZWQgb3Igbm90LlxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICB1cmwgICAgICB1cmxcbiAgKiBAcmV0dXJuIHtib29sZWFufVxuICAqL1xuXG4gIGlzTG9jYWwodXJsKSB7XG5cbiAgICBsZXQgcnVudGltZVNjaGVtZSA9IFsnaHlwZXJ0eS1ydW50aW1lJywgJ3J1bnRpbWUnXTtcbiAgICBsZXQgaHlwZXJ0eVNjaGVtZSA9IFsnaHlwZXJ0eSddO1xuICAgIGxldCB1cmxTY2hlbWUgPSB1cmwuc3BsaXQoJzovLycpWzBdO1xuXG4gICAgLy8gUHJvY2VzcyBSdW50aW1lIENvcmUgVVJMcy5cbiAgICAvLyBNZXNzYWdlcyBvcmlnaW5hdGVkIGZyb20gcHJvdG9zdHVicyBzaG91bGQgYWxzbyBub3QgaW5jbHVkZSB0aGUgcnVudGltZVVSTCBpbiBpdHMgVVJMLlxuXG4gICAgaWYgKHJ1bnRpbWVTY2hlbWUuaW5kZXhPZih1cmxTY2hlbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHVybC5pbmNsdWRlcyh0aGlzLnJ1bnRpbWVVUkwpO1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgSHlwZXJ0eSBVUkxzXG5cbiAgICBpZiAoaHlwZXJ0eVNjaGVtZS5pbmRleE9mKHVybFNjaGVtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gdGhpcy5oeXBlcnRpZXNMaXN0Lmhhc093blByb3BlcnR5KHVybCk7XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBEYXRhIE9iamVjdCBVUkxzXG5cbiAgICBpZiAodXJsLmluY2x1ZGVzKCcvc3Vic2NyaXB0aW9uJykpIHtcbiAgICAgIHVybCA9IHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJy9zdWJzY3JpcHRpb24nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGF0YU9iamVjdExpc3QuaGFzT3duUHJvcGVydHkodXJsKTtcbiAgfVxuXG4gIC8qKlxuICAqIFRvIHZlcmlmeSBpZiBwcm90b3N0dWIgaXMgdG8gaW50ZXJ3b3JrIHdpdGggYSBsZWdhY3kgZG9tYWluLlxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICBydW50aW1lUHJvdG9zdHViVVJMICAgICAgVGhlIHJ1bnRpbWUgVVJMIG9mIHRoZSBQcm90b3N0dWJcbiAgKiBAcmV0dXJuIHtib29sZWFufVxuICAqL1xuXG4gIGlzSW50ZXJ3b3JraW5nUHJvdG9TdHViKHJ1bnRpbWVQcm90b3N0dWJVUkwpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIShydW50aW1lUHJvdG9zdHViVVJMLmluY2x1ZGVzKCcvcHJvdG9zdHViLycpKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGxldCBmaWx0ZXJlZCA9IE9iamVjdC5rZXlzKF90aGlzLnByb3Rvc3R1YnNMaXN0KS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gX3RoaXMucHJvdG9zdHVic0xpc3Rba2V5XS51cmwgPT09IHJ1bnRpbWVQcm90b3N0dWJVUkw7XG4gICAgICB9KS5tYXAoKGtleSkgPT4ge1xuXG4gICAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdFtrZXldLmhhc093blByb3BlcnR5KCdpbnRlcndvcmtpbmcnKSlcbiAgICAgICAgICByZXR1cm4gX3RoaXMucHJvdG9zdHVic0xpc3Rba2V5XS5pbnRlcndvcmtpbmc7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWdpc3RyeTtcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuLyoqXHJcbiogICBAYXV0aG9yOiBHaWwgRGlhcyAoZ2lsLmRpYXNAdGVjbmljby51bGlzYm9hLnB0KVxyXG4qICAgUmVnaXN0cnkgRGF0YSBNb2RlbCBpbmNsdWRlcyBhbGwgT2JqZWN0cyB0byBiZSBoYW5kbGVkIGJ5IHRoZSBSZWdpc3RyeSBmdW5jdGlvbmFsaXR5IGluY2x1ZGluZ1xyXG4qL1xyXG5jbGFzcyBSZWdpc3RyeURhdGFNb2RlbCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlkLCB1cmwsIGRlc2NyaXB0b3JVUkwsIHAycFJlcXVlc3Rlciwgc3RhcnRpbmdUaW1lLCBsYXN0TW9kaWZpZWQsIHN0YXR1cywgc3R1YnMsIHN0dWJzQ29uZmlndXJhdGlvbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5faWQgPSBpZDtcclxuICAgIF90aGlzLl91cmwgPSB1cmw7XHJcbiAgICBfdGhpcy5fZGVzY3JpcHRvclVSTCA9IGRlc2NyaXB0b3JVUkw7XHJcbiAgICBfdGhpcy5fc3RhcnRpbmdUaW1lID0gc3RhcnRpbmdUaW1lO1xyXG4gICAgX3RoaXMuX2xhc3RNb2RpZmllZCA9IGxhc3RNb2RpZmllZDtcclxuICAgIF90aGlzLl9zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICBfdGhpcy5fc3R1YnMgPSBzdHVicztcclxuICAgIF90aGlzLl9zdHVic0NvbmZpZ3VyYXRpb24gPSBzdHVic0NvbmZpZ3VyYXRpb247XHJcbiAgICBfdGhpcy5fcDJwUmVxdWVzdGVyID0gcDJwUmVxdWVzdGVyO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlkKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5faWQ7XHJcbiAgfVxyXG5cclxuICBnZXQgdXJsKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fdXJsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRlc2NyaXB0b3IoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yVVJMO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHAycFJlcXVlc3RlcigpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gX3RoaXMuX3AycFJlcXVlc3RlcjtcclxuICB9XHJcblxyXG4gIGdldCBsYXN0TW9kaWZpZWQoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl9sYXN0TW9kaWZpZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0cnlEYXRhTW9kZWw7XHJcbiIsImltcG9ydCB7ZGl2aWRlVVJMLCBnZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzLCBidWlsZFVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuY2xhc3MgRGVzY3JpcHRvcnMge1xyXG5cclxuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMLCBjYXRhbG9ndWUsIHJ1bnRpbWVDb25maWd1cmF0aW9uKSB7XHJcbiAgICBpZiAoIXJ1bnRpbWVVUkwpIHRocm93IEVycm9yKCdUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgdXJsIHRvIGJlIHVzZWQnKTtcclxuICAgIGlmICghY2F0YWxvZ3VlKSB0aHJvdyBFcnJvcignVGhlIGRlc2NyaXB0b3IgbmVlZHMgdGhlIGNhdGFsb2d1ZSBpbnN0YW5jZScpO1xyXG4gICAgaWYgKCFydW50aW1lQ29uZmlndXJhdGlvbikgdGhyb3cgRXJyb3IoJ1RoZSBkZXNjcmlwdG9yIG5lZWRzIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb24nKTtcclxuXHJcbiAgICB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uID0gcnVudGltZUNvbmZpZ3VyYXRpb247XHJcbiAgICB0aGlzLnJ1bnRpbWVVUkwgPSBydW50aW1lVVJMO1xyXG4gICAgdGhpcy5jYXRhbG9ndWUgPSBjYXRhbG9ndWU7XHJcbiAgfVxyXG5cclxuICBnZXRIeXBlcnR5RGVzY3JpcHRvciAoaHlwZXJ0eVVSTCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldEh5cGVydHlEZXNjcmlwdG9yKGh5cGVydHlVUkwpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U3R1YkRlc2NyaXB0b3IgKHN0dWJVUkwpIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IGRvbWFpbjtcclxuICAgICAgbGV0IHByb3Rvc3R1YjtcclxuICAgICAgbGV0IHByb3RvU3R1YlVSTDtcclxuXHJcbiAgICAgIGxldCBvcmlnaW5EaXZpZGVkVVJMID0gZGl2aWRlVVJMKHRoaXMucnVudGltZVVSTCk7XHJcbiAgICAgIGxldCBvcmlnaW5Eb21haW4gPSBvcmlnaW5EaXZpZGVkVVJMLmRvbWFpbjtcclxuXHJcbiAgICAgIGlmIChzdHViVVJMLmluY2x1ZGVzKCc6Ly8nKSkge1xyXG4gICAgICAgIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKHN0dWJVUkwpO1xyXG4gICAgICAgIGRvbWFpbiA9IGRpdmlkZWRVUkwuZG9tYWluO1xyXG4gICAgICAgIGxldCBwYXRoID0gZGl2aWRlZFVSTC5pZGVudGl0eTtcclxuICAgICAgICBpZiAocGF0aClcclxuICAgICAgICAgIHByb3Rvc3R1YiA9IHBhdGguc3Vic3RyaW5nKHBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwcm90b3N0dWIgPSAnZGVmYXVsdCc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcHJvdG9zdHViID0gJ2RlZmF1bHQnO1xyXG4gICAgICAgIGRvbWFpbiA9IHN0dWJVUkw7XHJcbiAgICAgIH1cclxuXHJcbiAgLyogICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgICBkb21haW4gPSBzdHViVVJMO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXByb3Rvc3R1Yikge1xyXG4gICAgICAgIHByb3Rvc3R1YiA9ICdkZWZhdWx0JztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwcm90b3N0dWIgPSBwcm90b3N0dWIuc3Vic3RyaW5nKHByb3Rvc3R1Yi5sYXN0SW5kZXhPZignLycpICsgMSk7XHJcbiAgICAgIH0qL1xyXG5cclxuICAgICAgcHJvdG9TdHViVVJMID0gYnVpbGRVUkwodGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAncHJvdG9jb2xzdHViJywgcHJvdG9zdHViKTtcclxuICAgICAgaWYgKGRvbWFpbiAhPT0gdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbi5kb21haW4pIHtcclxuICAgICAgICBpZiAoIXN0dWJVUkwuaW5kZXhPZignaHR0cHMnKSB8fCAhc3R1YlVSTC5pbmRleE9mKCdoeXBlcnR5LWNhdGFsb2d1ZScpKSB7XHJcbiAgICAgICAgICBwcm90b1N0dWJVUkwgPSBzdHViVVJMO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gVE9ETzogY2hlY2sgaG93IHRvIGxvYWQgZm9ybSBkaWZmZXJlbnQgY29uZmlndXJhdGlvbiBkb21haW5cclxuICAgICAgICAgIGxldCByZXNvdXJjZSA9IGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXModGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAncHJvdG9jb2xzdHViJyk7XHJcbiAgICAgICAgICBwcm90b1N0dWJVUkwgPSByZXNvdXJjZS5wcmVmaXggKyBkb21haW4gKyByZXNvdXJjZS5zdWZmaXggKyBwcm90b3N0dWI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnTG9hZCBQcm90b2NvbFN0dWIgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBwcm90b1N0dWJVUkwpO1xyXG4gICAgICByZXR1cm4gdGhpcy5jYXRhbG9ndWUuZ2V0U3R1YkRlc2NyaXB0b3IocHJvdG9TdHViVVJMKS50aGVuKChyZXN1bHQpID0+IHtcclxuXHJcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG5cclxuICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvcjogJywgZXJyb3IpO1xyXG5cclxuICAgICAgICBwcm90b3N0dWIgPSBkb21haW47XHJcbiAgICAgICAgZG9tYWluID0gb3JpZ2luRG9tYWluO1xyXG5cclxuICAgICAgICBsZXQgcmVzb3VyY2UgPSBnZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzKHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ3Byb3RvY29sc3R1YicpO1xyXG4gICAgICAgIHByb3RvU3R1YlVSTCA9IHJlc291cmNlLnByZWZpeCArIGRvbWFpbiArIHJlc291cmNlLnN1ZmZpeCArIHByb3Rvc3R1YjtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhbGxiYWNrIC0+IExvYWQgUHJvdG9jb2xzdHViIGZvciBkb21haW4sICcgKyBkb21haW4gKyAnIDogJywgcHJvdG9zdHViKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYXRhbG9ndWUuZ2V0U3R1YkRlc2NyaXB0b3IocHJvdG9TdHViVVJMKTtcclxuICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IGRvbWFpbjtcclxuICAgICAgbGV0IGlkcHByb3h5O1xyXG4gICAgICBsZXQgcHJvdG9TdHViVVJMO1xyXG5cclxuICAgICAgbGV0IG9yaWdpbkRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodGhpcy5ydW50aW1lVVJMKTtcclxuICAgICAgbGV0IG9yaWdpbkRvbWFpbiA9IG9yaWdpbkRpdmlkZWRVUkwuZG9tYWluO1xyXG5cclxuICAgICAgaWYgKGlkcFByb3h5VVJMLmluY2x1ZGVzKCc6Ly8nKSkge1xyXG4gICAgICAgIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKGlkcFByb3h5VVJMKTtcclxuICAgICAgICBkb21haW4gPSBkaXZpZGVkVVJMLmRvbWFpbjtcclxuICAgICAgICBsZXQgcGF0aCA9IGRpdmlkZWRVUkwuaWRlbnRpdHk7XHJcbiAgICAgICAgaWYgKHBhdGgpXHJcbiAgICAgICAgICBpZHBwcm94eSA9IHBhdGguc3Vic3RyaW5nKHBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZHBwcm94eSA9ICdkZWZhdWx0JztcclxuICAgICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZHBwcm94eSA9ICdkZWZhdWx0JztcclxuICAgICAgICBkb21haW4gPSBpZHBQcm94eVVSTDtcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICAgIGxldCByZXNvdXJjZSA9IGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXModGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAnaWRwUHJveHknKTtcclxuXHJcbiAgICAgIGlkcFByb3h5VVJMID0gcmVzb3VyY2UucHJlZml4ICsgZG9tYWluICsgcmVzb3VyY2Uuc3VmZml4ICsgaWRwcHJveHk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdMb2FkIElkcCBQcm94eSBmb3IgZG9tYWluLCAnICsgZG9tYWluICsgJyA6ICcsIGlkcFByb3h5VVJMKTtcclxuICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCkudGhlbigocmVzdWx0KSA9PiB7XHJcblxyXG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuXHJcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcclxuXHJcbiAgICAgICAgaWRwcHJveHkgPSBkb21haW47XHJcbiAgICAgICAgZG9tYWluID0gb3JpZ2luRG9tYWluO1xyXG5cclxuICAgICAgICBpZHBQcm94eVVSTCA9IGJ1aWxkVVJMKHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ2lkcFByb3h5JywgaWRwcHJveHkpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnTG9hZCBJZHAgUHJveHkgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBpZHBQcm94eVVSTCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCk7XHJcbiAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgIHJlamVjdChyZWFzb24pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERlc2NyaXB0b3JzO1xyXG4iLCJpbXBvcnQge2RpdmlkZVVSTCwgZW1wdHlPYmplY3R9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBBZGRyZXNzQWxsb2NhdGlvbiBmcm9tICcuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uJztcblxuY2xhc3MgTG9hZGVyIHtcblxuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMLCBydW50aW1lQ29uZmlndXJhdGlvbiwgcnVudGltZURlc2NyaXB0b3JzSW5zdGFuY2UpIHtcbiAgICBpZiAoIXJ1bnRpbWVDb25maWd1cmF0aW9uKSB0aHJvdyAgIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIFRoZSBkZXNjcmlwdG9yIG5lZWQgdG8ga25vdyB0aGUgcnVudGltZSBjb25maWd1cmF0aW9uJyk7XG4gICAgaWYgKCFydW50aW1lRGVzY3JpcHRvcnNJbnN0YW5jZSkgdGhyb3cgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgRGVzY3JpcHRvciBpbnN0YW5jZScpO1xuXG4gICAgdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiA9IHJ1bnRpbWVDb25maWd1cmF0aW9uO1xuICAgIHRoaXMuZGVzY3JpcHRvcnMgPSBydW50aW1lRGVzY3JpcHRvcnNJbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcnVudGltZSB1cmxcbiAgICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZSBydW50aW1lVVJMXG4gICAqL1xuICBzZXQgcnVudGltZVVSTCh2YWx1ZSkge1xuICAgIHRoaXMuX3J1bnRpbWVVUkwgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcnVudGltZSB1cmxcbiAgICogQHJldHVybiB7c3RyaW5nfSB2YWx1ZSBydW50aW1lVVJMXG4gICAqL1xuICBnZXQgcnVudGltZVVSTCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZVVSTDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgUmVnaXN0cnkgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge1JlZ2lzdHJ5fSB2YWx1ZSBSZWdpc3RyeSBDb21wb25lbnRcbiAgICovXG4gIHNldCByZWdpc3RyeSh2YWx1ZSkge1xuICAgIHRoaXMuX3JlZ2lzdHJ5ID0gdmFsdWU7XG5cbiAgICAvLyBJbnN0YWxsIEFkZHJlc3NBbGxvY2F0aW9uXG4gICAgbGV0IGFkZHJlc3NBbGxvY2F0aW9uID0gbmV3IEFkZHJlc3NBbGxvY2F0aW9uKHRoaXMuX3J1bnRpbWVVUkwsIHRoaXMuX21lc3NhZ2VzQnVzLCB0aGlzLl9yZWdpc3RyeSk7XG4gICAgdGhpcy5fYWRkcmVzc0FsbG9jYXRpb24gPSBhZGRyZXNzQWxsb2NhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgUmVnaXN0cnkgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlZ2lzdHJ5fSBSZWdpc3RyeSBjb21wb25lbnRcbiAgICovXG4gIGdldCByZWdpc3RyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVnaXN0cnk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IE1lc3NhZ2UgQnVzIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gIHtNZXNzYWdlQnVzfSB2YWx1ZSBNZXNzYWdlIGJ1cyBjb21wb25lbnRcbiAgICovXG4gIHNldCBtZXNzYWdlQnVzKHZhbHVlKSB7XG4gICAgdGhpcy5fbWVzc2FnZXNCdXMgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgTWVzc2FnZSBCdXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge01lc3NhZ2VCdXN9IE1lc3NhZ2UgQnVzIGNvbXBvbmVudFxuICAgKi9cbiAgZ2V0IG1lc3NhZ2VCdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VzQnVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBSdW50aW1lIEZhY3RvcnkgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge3J1bnRpbWVGYWN0b3J5fSB2YWx1ZSBGYWN0b3J5IGluY2x1ZGVzIHRoZSBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbnMgZm9yIGVhY2ggZW52aXJvbm1lbnRcbiAgICovXG4gIHNldCBydW50aW1lRmFjdG9yeSh2YWx1ZSkge1xuICAgIHRoaXMuX3J1bnRpbWVGYWN0b3J5ID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnRcbiAgICogQHJldHVybiB7cnVudGltZUZhY3Rvcnl9IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnRcbiAgICovXG4gIGdldCBydW50aW1lRmFjdG9yeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZUZhY3Rvcnk7XG4gIH1cblxuICAvKipcbiAgKiBEZXBsb3kgSHlwZXJ0eSBmcm9tIENhdGFsb2d1ZSBVUkxcbiAgKiBAcGFyYW0gIHtVUkwuSHlwZXJ0eUNhdGFsb2d1ZVVSTH0gICAgaHlwZXJ0eSBoeXBlcnR5RGVzY3JpcHRvciB1cmw7XG4gICovXG4gIGxvYWRIeXBlcnR5KGh5cGVydHlEZXNjcmlwdG9yVVJMKSB7XG5cbiAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghaHlwZXJ0eURlc2NyaXB0b3JVUkwpIHRocm93IG5ldyAgIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIEh5cGVydHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IF9oeXBlcnR5VVJMO1xuICAgICAgbGV0IF9oeXBlcnR5U2FuZGJveDtcbiAgICAgIGxldCBfaHlwZXJ0eURlc2NyaXB0b3I7XG4gICAgICBsZXQgX2h5cGVydHlTb3VyY2VQYWNrYWdlO1xuICAgICAgbGV0IGhhdmVFcnJvciA9IGZhbHNlO1xuXG4gICAgICBsZXQgZXJyb3JSZWFzb24gPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBTb21ldGhpbmcgZmFpbGVkIG9uIHRoZSBkZXBsb3kgaHlwZXJ0eTogJywgcmVhc29uKTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICBsZXQgaGFuZGxlRXJyb3IgPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGhhdmVFcnJvciA9IHRydWU7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgLy8gR2V0IEh5cGVydHkgZGVzY3JpcHRvclxuICAgICAgLy8gVE9ETzogdGhlIHJlcXVlc3QgTW9kdWxlIHNob3VsZCBiZSBjaGFuZ2VkLFxuICAgICAgLy8gYmVjYXVzZSBhdCB0aGlzIG1vbWVudCBpdCBpcyBpbmNvbXBhdGlibGUgd2l0aCBub2RlanM7XG4gICAgICAvLyBQcm9iYWJseSB3ZSBuZWVkIHRvIHBhc3MgYSBmYWN0b3J5IGxpa2Ugd2UgZG8gZm9yIHNhbmRib3hlcztcbiAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAtLS0tLS0tLS0tLS0tLS0tLS0gSHlwZXJ0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSBHZXQgaHlwZXJ0eSBkZXNjcmlwdG9yIGZvciA6JywgaHlwZXJ0eURlc2NyaXB0b3JVUkwpO1xuICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRvcnMuZ2V0SHlwZXJ0eURlc2NyaXB0b3IoaHlwZXJ0eURlc2NyaXB0b3JVUkwpXG4gICAgICAudGhlbigoaHlwZXJ0eURlc2NyaXB0b3IpID0+IHtcbiAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb21wbGV0ZWQgXCJzdGVwIDIgYW5kIDNcIiBhcyBzaG93biBpbiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAxOiByZXR1cm4gaHlwZXJ0eSBkZXNjcmlwdG9yJyk7XG5cbiAgICAgICAgLy8gaHlwZXJ0eSBjb250YWlucyB0aGUgZnVsbCBwYXRoIG9mIHRoZSBjYXRhbG9ndWUgVVJMLCBlLmcuXG4gICAgICAgIC8vIGNhdGFsb2d1ZS5yZXRoaW5rLmV1Ly53ZWxsLWtub3duLy4uLi4uLi4uLi5cbiAgICAgICAgX2h5cGVydHlEZXNjcmlwdG9yID0gaHlwZXJ0eURlc2NyaXB0b3I7XG5cbiAgICAgICAgbGV0IHNvdXJjZVBhY2thZ2VVUkwgPSBoeXBlcnR5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMO1xuXG4gICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7XG4gICAgICAgICAgcmV0dXJuIGh5cGVydHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGh5cGVydHkgc291cmNlIGNvZGVcbiAgICAgICAgcmV0dXJuIHRoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRTb3VyY2VQYWNrYWdlRnJvbVVSTChzb3VyY2VQYWNrYWdlVVJMKTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLnRoZW4oKHNvdXJjZVBhY2thZ2UpID0+IHtcbiAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAyOiByZXR1cm4gaHlwZXJ0eSBzb3VyY2UgY29kZScpO1xuXG4gICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgY29tcGxldGVkIFwic3RlcCA0IGFuZCA1XCIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZFxuXG4gICAgICAgIF9oeXBlcnR5U291cmNlUGFja2FnZSA9IHNvdXJjZVBhY2thZ2U7XG5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gc3RlcHMgNiAtLSA5IGFyZSBza2lwcGVkLlxuICAgICAgICAvLyBUT0RPOiBvbiByZWxlYXNlIG9mIGNvcmUgMC4yO1xuICAgICAgICAvLyBUT0RPOiBQcm9taXNlIHRvIGNoZWNrIHRoZSBwb2xpY3kgZW5naW5lXG5cbiAgICAgICAgLy8gbW9jay11cCBjb2RlO1xuICAgICAgICAvLyB0ZW1wb3JhcnkgY29kZSwgb25seVxuICAgICAgICBsZXQgcG9saWN5ID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gcG9saWN5O1xuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigocG9saWN5UmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDM6IHJldHVybiBwb2xpY3kgZW5naW5lIHJlc3VsdCcgKyBwb2xpY3lSZXN1bHQpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNiB0byA5IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuICAgICAgICAvL1xuICAgICAgICAvLyBTdGVwcyA2IC0tIDlcbiAgICAgICAgLy8gQXMgYSByZXN1bHQgb2YgdGhlIHNpcHBlZCBzdGVwcywgd2Uga25vdyBhdCB0aGlzIHBvaW50IGlmIHdlIGV4ZWN1dGVcbiAgICAgICAgLy8gaW5TYW1lU2FuZGJveCBvciBub3QuXG4gICAgICAgIC8vXG5cbiAgICAgICAgLy8gRm9yIHRlc3RpbmcsIGp1c3QgYXNzdW1lIHdlIGV4ZWN1dGUgaW4gc2FtZSBTYW5kYm94LlxuICAgICAgICBsZXQgaW5TYW1lU2FuZGJveCA9IHRydWU7XG4gICAgICAgIGxldCBzYW5kYm94O1xuXG4gICAgICAgIGlmIChpblNhbWVTYW5kYm94KSB7XG5cbiAgICAgICAgICAvLyB0aGlzIGRvbid0IG5lZWQgYmUgYSBQcm9taXNlO1xuICAgICAgICAgIHNhbmRib3ggPSB0aGlzLnJlZ2lzdHJ5LmdldEFwcFNhbmRib3goKTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTEgaGVyZS5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwoaHlwZXJ0eURlc2NyaXB0b3JVUkwpLmRvbWFpbjtcblxuICAgICAgICAgIC8vIGdldFNhbmRib3gsIHRoaXMgd2lsbCByZXR1cm4gYSBwcm9taXNlO1xuICAgICAgICAgIHNhbmRib3ggPSB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNhbmRib3ggb3Igb25lIHByb21pc2UgdG8gZ2V0U2FuZGJveDtcbiAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgIC50aGVuKChzYW5kYm94KSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDQ6IHJldHVybiB0aGUgc2FuZGJveCcsIHNhbmRib3gpO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgc2FuZGJveCBpbmRlcGVudGVseSBpZiBpdCBydW5uaW5nIGluIHRoZSBzYW1lIHNhbmRib3ggb3Igbm90XG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTQgaGVyZS5cbiAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICB9LCAocmVhc29uKSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS4gIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIDQuMTogVHJ5IHRvIHJlZ2lzdGVyIGEgbmV3IHNhbmRib3gnKTtcblxuICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBoeXBlcnR5IGRlc2NyaXB0b3IgdXJsO1xuICAgICAgICAvLyBNYWtlIFN0ZXBzIHh4eCAtLS0geHh4XG4gICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBTYW5kYm94XG5cbiAgICAgICAgbGV0IGh5cGVydHlDYXBhYmlsaXRpZXMgPSB7fTtcbiAgICAgICAgaWYgKF9oeXBlcnR5RGVzY3JpcHRvciAmJiBfaHlwZXJ0eURlc2NyaXB0b3IuaGFzT3duUHJvcGVydHkoJ2NhcGFiaWxpdGllcycpKSB7XG4gICAgICAgICAgaHlwZXJ0eUNhcGFiaWxpdGllcyA9IF9oeXBlcnR5RGVzY3JpcHRvci5zdHViQ2FwYWJpbGl0aWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goaHlwZXJ0eUNhcGFiaWxpdGllcykudGhlbigoc2FuZGJveCkgPT4ge1xuXG4gICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIChtc2cpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICAgIH0pO1xuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA1OiByZXR1cm4gc2FuZGJveCBhbmQgcmVnaXN0ZXInKTtcblxuICAgICAgICBfaHlwZXJ0eVNhbmRib3ggPSBzYW5kYm94O1xuXG4gICAgICAgIGxldCBudW1iZXJPZkFkZHJlc3NlcyA9IDE7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRyZXNzQWxsb2NhdGlvbi5jcmVhdGUodGhpcy5fcmVnaXN0cnkuX2RvbWFpbiwgbnVtYmVyT2ZBZGRyZXNzZXMsIF9oeXBlcnR5RGVzY3JpcHRvciwgJ2h5cGVydHknKTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLnRoZW4oKGFkZHJlc3NlcykgPT4ge1xuICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA2OiByZXR1cm4gdGhlIGFkZHJlc3NlcyBmb3IgdGhlIGh5cGVydHknKTtcblxuICAgICAgICAvLyBSZWdpc3RlciBoeXBlcnR5XG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LnJlZ2lzdGVySHlwZXJ0eShfaHlwZXJ0eVNhbmRib3gsIGh5cGVydHlEZXNjcmlwdG9yVVJMLCBfaHlwZXJ0eURlc2NyaXB0b3IsIGFkZHJlc3Nlcyk7XG4gICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgIC50aGVuKChoeXBlcnR5VVJMKSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDc6IEh5cGVydHkgdXJsLCBhZnRlciByZWdpc3RlciBoeXBlcnR5JywgaHlwZXJ0eVVSTCk7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxNiBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy5cbiAgICAgICAgX2h5cGVydHlVUkwgPSBoeXBlcnR5VVJMO1xuXG4gICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247XG4gICAgICAgIGxldCBjb25maWd1cmF0aW9uID0ge307XG4gICAgICAgIGlmICghZW1wdHlPYmplY3QoX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCBKU09OLnBhcnNlKF9oeXBlcnR5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9oeXBlcnR5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSB0aGlzLl9ydW50aW1lVVJMO1xuXG4gICAgICAgIC8vIFdlIHdpbGwgZGVwbG95IHRoZSBjb21wb25lbnQgLSBzdGVwIDE3IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIF9oeXBlcnR5U2FuZGJveC5kZXBsb3lDb21wb25lbnQoX2h5cGVydHlTb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUsIF9oeXBlcnR5VVJMLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpO1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigoZGVwbG95Q29tcG9uZW50U3RhdHVzKSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDg6IERlcGxveSBjb21wb25lbnQgc3RhdHVzIGZvciBoeXBlcnR5OiAnLCBkZXBsb3lDb21wb25lbnRTdGF0dXMpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTkgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG5cbiAgICAgICAgLy8gQWRkIHRoZSBtZXNzYWdlIGJ1cyBsaXN0ZW5lciB0byB0aGUgYXBwU2FuZGJveCBvciBoeXBlcnRTYW5kYm94O1xuICAgICAgICB0aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX2h5cGVydHlVUkwsIChtc2cpID0+IHtcbiAgICAgICAgICBfaHlwZXJ0eVNhbmRib3gucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAyMCBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy5cbiAgICAgICAgbGV0IGh5cGVydHkgPSB7XG4gICAgICAgICAgcnVudGltZUh5cGVydHlVUkw6IF9oeXBlcnR5VVJMLFxuICAgICAgICAgIHN0YXR1czogZGVwbG95Q29tcG9uZW50U3RhdHVzXG4gICAgICAgIH07XG5cbiAgICAgICAgcmVzb2x2ZShoeXBlcnR5KTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIxIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLmNhdGNoKGVycm9yUmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIERlcGxveSBTdHViIGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW5cbiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgcDJwQ29uZmlnICAgICAgIGNvbmZpZ3VyYXRpb24gb2YgcDJwXG4gICovXG4gIGxvYWRTdHViKHByb3Rvc3R1YlVSTCwgcDJwQ29uZmlnKSB7XG5cbiAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghcHJvdG9zdHViVVJMKSB0aHJvdyBuZXcgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXVByb3RvU3R1YiBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAvLyB0byBhbmFseXNlIGlmIGRvbWFpbiBmb3IgcDJwSGFuZGxlcnMgc2hvdWxkIGJlIHNvbWV0aGluZyBlbHNlIGFuZCBub3QgdGhlIGRlZmF1bHQgZG9tYWluIGl0c2VsZlxuXG4gICAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKHByb3Rvc3R1YlVSTCkuZG9tYWluO1xuXG4gICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICBkb21haW4gPSBwcm90b3N0dWJVUkw7XG4gICAgICB9XG5cbiAgICAgIGxldCBfc3R1YlNhbmRib3g7XG4gICAgICBsZXQgX3N0dWJEZXNjcmlwdG9yO1xuICAgICAgbGV0IF9ydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICAgbGV0IF9zdHViU291cmNlUGFja2FnZTtcbiAgICAgIGxldCBoYXZlRXJyb3IgPSBmYWxzZTtcbiAgICAgIGxldCBzdHViSWQ7XG5cbiAgICAgIGxldCBlcnJvclJlYXNvbiA9IChyZWFzb24pID0+IHtcbiAgICAgICAgY29uc29sZS4gIEVycm9yKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIHByb3RvY29sc3R1YjogJywgcmVhc29uKTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICBsZXQgaGFuZGxlRXJyb3IgPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGhhdmVFcnJvciA9IHRydWU7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgLy8gRGlzY292ZXIgUHJvdG9jb2wgU3R1YlxuICAgICAgbGV0IGRpc2NvdmVyU3R1YjtcbiAgICAgIGxldCBpc1AyUEhhbmRsZXIgPSBmYWxzZTtcbiAgICAgIGxldCBpc1AyUFJlcXVlc3RlciA9IGZhbHNlO1xuXG4gICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gc3RhcnRpbmcgbG9hZGluZyAnLCBwcm90b3N0dWJVUkwsICcgcDJwY29uZmlnICcsIHAycENvbmZpZyk7XG4gICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl1EaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgUHJvdG9TdHViIGZvciBkb21haW46ICcsIGRvbWFpbik7XG5cbiAgICAgIC8vIHN0ZXAgMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChwMnBDb25maWcpIHtcblxuICAgICAgICAgIGlmIChwMnBDb25maWcuaGFzT3duUHJvcGVydHkoJ2lzSGFuZGxlclN0dWInKSAmJiBwMnBDb25maWcuaXNIYW5kbGVyU3R1Yikge1xuICAgICAgICAgICAgLy8gc3RlcCA2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgaXNQMlBIYW5kbGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0dWJJZCA9IHRoaXMucnVudGltZVVSTDtcbiAgICAgICAgICAgIGRpc2NvdmVyU3R1YiA9IHRoaXMucmVnaXN0cnkuZGlzY292ZXJQMlBTdHViKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzUDJQUmVxdWVzdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBwMnBIYW5kbGVyUnVudGltZVVSTCA9IHAycENvbmZpZy5yZW1vdGVSdW50aW1lVVJMO1xuICAgICAgICAgICAgc3R1YklkID0gcDJwSGFuZGxlclJ1bnRpbWVVUkw7XG5cbiAgICAgICAgICAgIC8vIHN0ZXAgNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgICAgLy8gc3RlcCA1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgZGlzY292ZXJTdHViID0gdGhpcy5yZWdpc3RyeS5kaXNjb3ZlclAyUFN0dWIocDJwSGFuZGxlclJ1bnRpbWVVUkwpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHN0ZXAgMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBzdHViSWQgPSBkb21haW47XG4gICAgICAgICAgZGlzY292ZXJTdHViID0gdGhpcy5yZWdpc3RyeS5kaXNjb3ZlclByb3Rvc3R1Yihkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXMgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTEuIFByb3RvIFN0dWIgRGlzY292ZXJlZCBmb3IgJywgcHJvdG9zdHViVVJMLCAnOiAnLCBkaXNjb3ZlclN0dWIpO1xuXG4gICAgICAgIC8vIHN0ZXAgMjMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgIHJlc29sdmUoZGlzY292ZXJTdHViKTtcbiAgICAgICAgY29uc29sZS5pbmZvKCcgW1J1bnRpbWUuTG9hZGVyXS0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuXG4gICAgICB9XG5cbiAgICAgIGNhdGNoIChyZWFzb24pIHtcblxuICAgICAgICAvLyBpcyBub3QgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTEuIFByb3RvIFN0dWIgbm90IGZvdW5kICcgKyByZWFzb24pO1xuXG4gICAgICAgIC8vIHN0ZXAgOCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgdGhpcy5kZXNjcmlwdG9ycy5nZXRTdHViRGVzY3JpcHRvcihwcm90b3N0dWJVUkwpXG4gICAgICAgIC50aGVuKChzdHViRGVzY3JpcHRvcikgPT4ge1xuXG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTIuIHJldHVybiB0aGUgUHJvdG9TdHViIGRlc2NyaXB0b3InKTtcblxuICAgICAgICAgIC8vIHN0ZXAgOSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBfc3R1YkRlc2NyaXB0b3IgPSBzdHViRGVzY3JpcHRvcjtcblxuICAgICAgICAgIGxldCBzb3VyY2VQYWNrYWdlVVJMID0gc3R1YkRlc2NyaXB0b3Iuc291cmNlUGFja2FnZVVSTDtcblxuICAgICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7XG4gICAgICAgICAgICByZXR1cm4gc3R1YkRlc2NyaXB0b3Iuc291cmNlUGFja2FnZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzdGVwIDEwIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIHJldHVybiB0aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0U291cmNlUGFja2FnZUZyb21VUkwoc291cmNlUGFja2FnZVVSTCk7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAuY2F0Y2goZXJyb3JSZWFzb24pXG4gICAgICAgIC50aGVuKChzdHViU291cmNlUGFja2FnZSkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIC8vIHN0ZXAgMTEgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdMy4gcmV0dXJuIHRoZSBQcm90b1N0dWIgU291cmNlIENvZGUnKTtcbiAgICAgICAgICBfc3R1YlNvdXJjZVBhY2thZ2UgPSBzdHViU291cmNlUGFja2FnZTtcblxuICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNhbmRib3ggb3Igb25lIHByb21pc2UgdG8gZ2V0U2FuZGJveDtcbiAgICAgICAgICAvLyBzdGVwIDEyIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHN0dWJTYW5kYm94KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgLy8gc3RlcCAxNSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl00LiBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlcmVkIHRoZW4gcmV0dXJuIHRoZSBzYW5kYm94ICcsIHN0dWJTYW5kYm94KTtcblxuICAgICAgICAgIF9zdHViU2FuZGJveCA9IHN0dWJTYW5kYm94O1xuICAgICAgICAgIHJldHVybiBzdHViU2FuZGJveDtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAvLyBzdGVwIDEzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTUuIFNhbmRib3ggd2FzIG5vdCBmb3VuZCwgY3JlYXRpbmcgYSBuZXcgb25lICcsIHJlYXNvbik7XG5cbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBzdHViIGRlc2NyaXB0b3IgdXJsO1xuXG4gICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIGRlYnVnLCBpdCBzZWVtcyBSdW50aW1lQ2F0YWxvZ3VlIGRvZXMgbm90IHN1cHBvcnQgeWV0IGNvbnN0cmFpbnRzLiBJdCBhcHBlYXJzIGVtcHR5ISEhIVxuXG4gICAgICAgICAgbGV0IHN0dWJDYXBhYmlsaXRpZXMgPSB7fTtcbiAgICAgICAgICBpZiAoX3N0dWJEZXNjcmlwdG9yICYmIF9zdHViRGVzY3JpcHRvci5oYXNPd25Qcm9wZXJ0eSgnY29uc3RyYWludHMnKSkge1xuICAgICAgICAgICAgc3R1YkNhcGFiaWxpdGllcyA9IF9zdHViRGVzY3JpcHRvci5zdHViQ2FwYWJpbGl0aWVzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHN0ZXAgMTQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goc3R1YkNhcGFiaWxpdGllcykudGhlbigoc2FuZGJveCkgPT4ge1xuXG4gICAgICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgKG1zZykgPT4ge1xuICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gc2FuZGJveDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9KVxuICAgICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIC8vIHN0ZXAgMTYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTtcblxuICAgICAgICAgIF9zdHViU2FuZGJveCA9IHNhbmRib3g7XG5cbiAgICAgICAgICAvLyB3ZSBuZWVkIHJlZ2lzdGVyIHN0dWIgb24gcmVnaXN0cnkgLSBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5yZWdpc3RlclN0dWIoX3N0dWJTYW5kYm94LCBzdHViSWQsIHAycENvbmZpZywgcHJvdG9zdHViVVJMLCBfc3R1YkRlc2NyaXB0b3IpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHJ1bnRpbWVQcm90b1N0dWIpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAvLyBzdGVwIDIzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSA3LiByZXR1cm4gdGhlIHJ1bnRpbWUgcHJvdG9zdHViIHVybDogJywgcnVudGltZVByb3RvU3R1Yik7XG5cbiAgICAgICAgICBfcnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWIudXJsO1xuXG4gICAgICAgICAgLy8gRXh0ZW5kIG9yaWdpbmFsIGh5cGVydHkgY29uZmlndXJhdGlvbjtcbiAgICAgICAgICBsZXQgY29uZmlndXJhdGlvbiA9IHt9O1xuICAgICAgICAgIGlmICghZW1wdHlPYmplY3QoX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgSlNPTi5wYXJzZShfc3R1YkRlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHAycENvbmZpZykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oY29uZmlndXJhdGlvbiwgSlNPTi5wYXJzZShwMnBDb25maWcpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oY29uZmlndXJhdGlvbiwgcDJwQ29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyByZXF1aXJlZCBmb3IgcHJvdG9zdHViIHNlc3Npb25cblxuICAgICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSB0aGlzLl9ydW50aW1lVVJMO1xuXG4gICAgICAgICAgLy8gc3RlcCAyNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdHViU2FuZGJveC5kZXBsb3lDb21wb25lbnQoX3N0dWJTb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUsIF9ydW50aW1lUHJvdG9TdHViVVJMLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLiAgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSBFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpO1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC50aGVuKChkZXBsb3lDb21wb25lbnRTdGF0dXMpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAvLyBzdGVwIDI2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSA4OiByZXR1cm4gZGVwbG95IGNvbXBvbmVudCBmb3Igc2FuZGJveCBzdGF0dXM6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7XG5cbiAgICAgICAgICAvLyBzdGVwIDI3IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXJcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3J1bnRpbWVQcm90b1N0dWJVUkwsIChtc2cpID0+IHtcbiAgICAgICAgICAgIF9zdHViU2FuZGJveC5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gc3RlcCAyOCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBsZXQgc3R1YjtcbiAgICAgICAgICBpZiAocDJwQ29uZmlnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSBwMnBDb25maWc6ICcsIHAycENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmIChwMnBDb25maWcuaGFzT3duUHJvcGVydHkoJ2lzSGFuZGxlclN0dWInKSkgc3R1YiA9IHRoaXMucmVnaXN0cnkucDJwSGFuZGxlclN0dWJbdGhpcy5fcnVudGltZVVSTF07XG4gICAgICAgICAgICBpZiAocDJwQ29uZmlnLmhhc093blByb3BlcnR5KCdwMnBSZXF1ZXN0ZXJTdHViJykpIHN0dWIgPSB0aGlzLnJlZ2lzdHJ5LnAycFJlcXVlc3RlclN0dWJbcDJwQ29uZmlnLnJlbW90ZVJ1bnRpbWVVUkxdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHViID0gdGhpcy5yZWdpc3RyeS5wcm90b3N0dWJzTGlzdFtkb21haW5dO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdIFN0dWI6ICcsIHN0dWIpO1xuICAgICAgICAgIHJlc29sdmUoc3R1Yi51cmwpO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXS0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLmNhdGNoKGVycm9yUmVhc29uKTtcblxuICAgICAgfTtcblxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBEZXBsb3kgaWRwUHJveHkgZnJvbSBDYXRhbG9ndWUgVVJMIG9yIGRvbWFpbiB1cmxcbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpblxuICAqL1xuXG4gIGxvYWRJZHBQcm94eShpZHBQcm94eVVSTCkge1xuXG4gICAgaWYgKCF0aGlzLl9yZWFkeVRvVXNlKCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIWlkcFByb3h5VVJMKSB0aHJvdyBuZXcgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBJZHBQcm94eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKGlkcFByb3h5VVJMKS5kb21haW47XG5cbiAgICAgIGlmICghZG9tYWluKSB7XG4gICAgICAgIGRvbWFpbiA9IGlkcFByb3h5VVJMO1xuICAgICAgfVxuXG4gICAgICBsZXQgX3Byb3h5U2FuZGJveDtcbiAgICAgIGxldCBfcHJveHlEZXNjcmlwdG9yO1xuICAgICAgbGV0IF9ydW50aW1lSWRwUHJveHlVUkw7XG4gICAgICBsZXQgX3Byb3h5U291cmNlUGFja2FnZTtcbiAgICAgIGxldCBoYXZlRXJyb3IgPSBmYWxzZTtcblxuICAgICAgbGV0IGVycm9yUmVhc29uID0gKHJlYXNvbikgPT4ge1xuICAgICAgICBjb25zb2xlLiAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIElkcFByb3h5OiAnLCByZWFzb24pO1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBoYW5kbGVFcnJvciA9IChyZWFzb24pID0+IHtcbiAgICAgICAgaGF2ZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICAvLyBEaXNjb3ZlciBJRFBQcm94eVxuICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIC0tLS0tLS0tLS0tLS0tLS0tLS0gSURQIFByb3h5IERlcGxveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nKTtcbiAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSBEaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgSWRwUHJveHkgZm9yIGRvbWFpbi9VUkw6ICcsIGRvbWFpbik7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBydW50aW1lSWRwUHJveHlVUkwgPSB0aGlzLnJlZ2lzdHJ5LmRpc2NvdmVySWRwUHJveHkoZG9tYWluKTtcbiAgICAgICAgLy8gSXMgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAxLiBJRFBQcm94eSBEaXNjb3ZlcmVkOiAnLCBydW50aW1lSWRwUHJveHlVUkwpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICBsZXQgaWRwUHJveHkgPSB0aGlzLnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtkb21haW5dO1xuICAgICAgICBjb25zb2xlLmxvZygnRGVwbG95ZWQ6ICcsIGlkcFByb3h5KTtcblxuICAgICAgICByZXNvbHZlKGlkcFByb3h5KTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIC0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuICAgICAgfVxuXG4gICAgICBjYXRjaChyZWFzb24pIHtcblxuICAgICAgICAvLyBpcyBub3QgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAxLiBJZHBQcm94eSBub3QgZm91bmQ6JywgcmVhc29uKTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIGRlc2NyaXB0b3Igc3RlcCA0IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICB0aGlzLmRlc2NyaXB0b3JzLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTClcbiAgICAgICAgLnRoZW4oKHByb3h5RGVzY3JpcHRvcikgPT4ge1xuXG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDIuIFJldHVybiB0aGUgSURQUHJveHkgZGVzY3JpcHRvcicpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIF9wcm94eURlc2NyaXB0b3IgPSBwcm94eURlc2NyaXB0b3I7XG5cbiAgICAgICAgICBsZXQgc291cmNlUGFja2FnZVVSTCA9IHByb3h5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMO1xuXG4gICAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm94eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGdldCBQcm90b1N0dWIgU291cmNlIGNvZGUgZnJvbSBkZXNjcmlwdG9yIC0gc3RlcCA2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIHJldHVybiB0aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0U291cmNlUGFja2FnZUZyb21VUkwoc291cmNlUGFja2FnZVVSTCk7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigoc291cmNlUGFja2FnZSkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gMy4gcmV0dXJuIHRoZSBJRFBQcm94eSBzb3VyY2UgcGFja2FnZScpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA3IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgX3Byb3h5U291cmNlUGFja2FnZSA9IHNvdXJjZVBhY2thZ2U7XG5cbiAgICAgICAgICAvLyBUT0RPOiBDaGVjayBvbiBQRVAgKHBvbGljeSBFbmdpbmUpIGlmIHdlIG5lZWQgdGhlIHNhbmRib3ggYW5kIGNoZWNrIGlmIHRoZSBTYW5kYm94IEZhY3RvcnkgaGF2ZSB0aGUgY29udGV4dCBzYW5kYm94O1xuICAgICAgICAgIGxldCBwb2xpY3kgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBwb2xpY3k7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigocG9saWN5KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94O1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHByb3h5U2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gNC4gaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZXJlZCB0aGVuIHJldHVybiB0aGUgc2FuZGJveCcsIHByb3h5U2FuZGJveCk7XG5cbiAgICAgICAgICBfcHJveHlTYW5kYm94ID0gcHJveHlTYW5kYm94O1xuICAgICAgICAgIHJldHVybiBwcm94eVNhbmRib3g7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA1LiBTYW5kYm94IHdhcyBub3QgZm91bmQsIGNyZWF0aW5nIGEgbmV3IG9uZScsIHJlYXNvbik7XG5cbiAgICAgICAgICBsZXQgcHJveHlDYXBhYmlsaXRpZXMgPSB7fTtcbiAgICAgICAgICBpZiAoX3Byb3h5RGVzY3JpcHRvciAmJiBfcHJveHlEZXNjcmlwdG9yLmhhc093blByb3BlcnR5KCdjYXBhYmlsaXRpZXMnKSkge1xuICAgICAgICAgICAgX3Byb3h5RGVzY3JpcHRvciA9IF9wcm94eURlc2NyaXB0b3Iuc3R1YkNhcGFiaWxpdGllcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5fcnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveChwcm94eUNhcGFiaWxpdGllcykudGhlbigoc2FuZGJveCkgPT4ge1xuXG4gICAgICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgKG1zZykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzYW5kYm94O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTtcblxuICAgICAgICAgIF9wcm94eVNhbmRib3ggPSBzYW5kYm94O1xuXG4gICAgICAgICAgLy8gd2UgbmVlZCByZWdpc3RlciBzdHViIG9uIHJlZ2lzdHJ5IC0gc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkucmVnaXN0ZXJJZHBQcm94eShzYW5kYm94LCBkb21haW4pO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHJ1bnRpbWVJZHBQcm94eVVSTCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gNy4gUmV0dXJuIHRoZSBydW50aW1lIElkcCBQcm94eSBVUkw6ICcsIHJ1bnRpbWVJZHBQcm94eVVSTCk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgIF9ydW50aW1lSWRwUHJveHlVUkwgPSBydW50aW1lSWRwUHJveHlVUkw7XG5cbiAgICAgICAgICAvLyBFeHRlbmQgb3JpZ2luYWwgaHlwZXJ0eSBjb25maWd1cmF0aW9uO1xuICAgICAgICAgIGxldCBjb25maWd1cmF0aW9uID0ge307XG4gICAgICAgICAgaWYgKCFlbXB0eU9iamVjdChfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgSlNPTi5wYXJzZShfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9wcm94eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uZmlndXJhdGlvbi5ydW50aW1lVVJMID0gdGhpcy5fcnVudGltZVVSTDtcblxuICAgICAgICAgIC8vIERlcGxveSBDb21wb25lbnQgc3RlcCB4eHhcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIF9wcm94eVNhbmRib3guZGVwbG95Q29tcG9uZW50KF9wcm94eVNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgcnVudGltZUlkcFByb3h5VVJMLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLiAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gRXJyb3Igb24gZGVwbG95IGNvbXBvbmVudDonLCBlKTtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigoZGVwbG95Q29tcG9uZW50U3RhdHVzKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA4OiByZXR1cm4gZGVwbG95IGNvbXBvbmVudCBmb3Igc2FuZGJveCBzdGF0dXM6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXJcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3J1bnRpbWVJZHBQcm94eVVSTCwgKG1zZykgPT4ge1xuICAgICAgICAgICAgX3Byb3h5U2FuZGJveC5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgICAvLyBMb2FkIFN0dWIgZnVuY3Rpb24gcmVzb2x2ZWQgd2l0aCBzdWNjZXNzO1xuICAgICAgICAgIC8vIGxldCBpZHBQcm94eSA9IHtcbiAgICAgICAgICAvLyAgIHJ1bnRpbWVJZHBQcm94eVVSTDogX3J1bnRpbWVJZHBQcm94eVVSTCxcbiAgICAgICAgICAvLyAgIHN0YXR1czogZGVwbG95Q29tcG9uZW50U3RhdHVzXG4gICAgICAgICAgLy8gfTtcblxuICAgICAgICAgIHRoaXMucmVnaXN0cnkuaWRwUHJveHlMaXN0W2RvbWFpbl0uc3RhdHVzID0gJ2RlcGxveWVkJztcbiAgICAgICAgICBsZXQgaWRwUHJveHkgPSB0aGlzLnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtkb21haW5dO1xuXG4gICAgICAgICAgY29uc29sZS5sb2coJ0RlcGxveWVkOiAnLCBpZHBQcm94eSk7XG5cbiAgICAgICAgICByZXNvbHZlKGlkcFByb3h5KTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJyk7XG5cbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC5jYXRjaChlcnJvclJlYXNvbik7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSBsb2FkZXIgaXMgcmVhZHkgdG8gbG9hZCBhbGwgY29tcG9uZW50c1xuICBfcmVhZHlUb1VzZSgpIHtcblxuICAgIGxldCBzdGF0dXMgPSBmYWxzZTtcblxuICAgIGlmICghdGhpcy5fcnVudGltZVVSTCkgdGhyb3cgbmV3ICAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gVGhlIGxvYWRlciBuZWVkIHRoZSBydW50aW1lIHVybCBhZGRyZXNzJyk7XG4gICAgaWYgKCF0aGlzLl9tZXNzYWdlc0J1cykgdGhyb3cgbmV3ICAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gVGhlIGxvYWRlciBuZWVkIHRoZSBtZXNzYWdlQnVzIGNvbXBvbmVudCcpO1xuICAgIGlmICghdGhpcy5fcmVnaXN0cnkpIHRocm93IG5ldyAgIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIFRoZSBsb2FkZXIgbmVlZCB0aGUgcmVnaXN0cnkgY29tcG9uZW50Jyk7XG4gICAgaWYgKCF0aGlzLl9ydW50aW1lRmFjdG9yeSkgdGhyb3cgbmV3ICAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gVGhlIGxvYWRlciBuZWVkIHRoZSBydW50aW1lIGZhY3RvcnkgY29tcG9uZW50Jyk7XG5cbiAgICBzdGF0dXMgPSB0cnVlO1xuICAgIHJldHVybiBzdGF0dXM7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2FkZXI7XG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG5pbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcclxuXHJcbi8vTWFpbiBkZXBlbmRlY2llc1xyXG5pbXBvcnQgUmVnaXN0cnkgZnJvbSAnLi4vcmVnaXN0cnkvUmVnaXN0cnknO1xyXG5pbXBvcnQgSWRlbnRpdHlNb2R1bGUgZnJvbSAnLi4vaWRlbnRpdHkvSWRlbnRpdHlNb2R1bGUnO1xyXG5pbXBvcnQgUEVQIGZyb20gJy4uL3BvbGljeS9QRVAnO1xyXG5pbXBvcnQgTWVzc2FnZUJ1cyBmcm9tICcuLi9idXMvTWVzc2FnZUJ1cyc7XHJcbmltcG9ydCB7IGdlbmVyYXRlR1VJRCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi9Mb2FkZXInO1xyXG5pbXBvcnQgRGVzY3JpcHRvcnMgZnJvbSAnLi9EZXNjcmlwdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBydW50aW1lQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vcnVudGltZUNvbmZpZ3VyYXRpb24nO1xyXG5pbXBvcnQgeyBydW50aW1lVXRpbHMgfSBmcm9tICcuL3J1bnRpbWVVdGlscyc7XHJcblxyXG4vLyBpbXBvcnQgR3JhcGhDb25uZWN0b3IgZnJvbSAnLi4vZ3JhcGhjb25uZWN0b3IvR3JhcGhDb25uZWN0b3InO1xyXG5cclxuaW1wb3J0IFN5bmNoZXJNYW5hZ2VyIGZyb20gJy4uL3N5bmNoZXIvU3luY2hlck1hbmFnZXInO1xyXG5pbXBvcnQgUnVudGltZUNvcmVDdHggZnJvbSAnLi4vcG9saWN5L2NvbnRleHQvUnVudGltZUNvcmVDdHgnO1xyXG4vKipcclxuICogUnVudGltZSBVc2VyIEFnZW50IEludGVyZmFjZSB3aWxsIHByb2Nlc3MgYWxsIHRoZSBkZXBlbmRlY2llcyBvZiB0aGUgY29yZSBydW50aW1lO1xyXG4gKiBAYXV0aG9yIFZpdG9yIFNpbHZhIFt2aXRvci10LXNpbHZhQHRlbGVjb20ucHRdXHJcbiAqIEB2ZXJzaW9uIDAuNC4wXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7cnVudGltZUZhY3Rvcnl9IHJ1bnRpbWVGYWN0b3J5IC0gU3BlY2lmaWMgaW1wbGVtZW50YXRpb24gZm9yIGFsbCBlbnZpcm9ubWVudHM7XHJcbiAqIEBwcm9wZXJ0eSB7UnVudGltZUNhdGFsb2d1ZX0gcnVudGltZUNhdGFsb2d1ZSAtIENhdGFsb2d1ZSBvZiBjb21wb25lbnRzIGNhbiBiZSBpbnN0YWxsZWQ7XHJcbiAqIEBwcm9wZXJ0eSB7cnVudGltZVVSTH0gcnVudGltZVVSTCAtIFRoaXMgaWRlbnRpZnkgdGhlIGNvcmUgcnVudGltZSwgc2hvdWxkIGJlIHVuaXF1ZTtcclxuICogQHByb3BlcnR5IHtJZGVudGl0eU1vZHVsZX0gaWRlbnRpdHlNb2R1bGUgLSBJZGVudGl0eSBNb2R1bGU7XHJcbiAqIEBwcm9wZXJ0eSB7UEVQfSBwb2xpY3lFbmdpbmUgLSBQb2xpY3kgRW5naW5lIE1vZHVsZTtcclxuICogQHByb3BlcnR5IHtSZWdpc3RyeX0gcmVnaXN0cnkgLSBSZWdpc3RyeSBNb2R1bGU7XHJcbiAqIEBwcm9wZXJ0eSB7TWVzc2FnZUJ1c30gbWVzc2FnZUJ1cyAtIE1lc3NhZ2UgQnVzIGlzIHVzZWQgbGlrZSBhIHJvdXRlciB0byByZWRpcmVjdCB0aGUgbWVzc2FnZXMgZnJvbSBvbmUgY29tcG9uZW50IHRvIG90aGVyKHMpXHJcbiAqIEBwcm9wZXJ0eSB7R3JhcGhDb25uZWN0b3J9IGdyYXBoQ29ubmVjdG9yIC0gR3JhcGggQ29ubmVjdG9yIGhhbmRsaW5nIEdVSUQgYW5kIGNvbnRhY3RzXHJcbiAqL1xyXG5jbGFzcyBSdW50aW1lVUEge1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgUnVudGltZSBVc2VyIEFnZW50XHJcbiAgICogQHBhcmFtIHtkZXNjcmlwdG9yfSBydW50aW1lRGVzY3JpcHRvciAtIHBhc3MgYWxsIHRoZSBoeXBlcnR5IHJ1bnRpbWUgZGVzY3JpcHRvclxyXG4gICAqIEBwYXJhbSB7cnVudGltZUZhY3Rvcnl9IHJ1bnRpbWVGYWN0b3J5IC0gU3BlY2lmaWMgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBlbnZpcm9ubWVudCB3aGVyZSB0aGUgY29yZSBydW50aW1lIHdpbGwgcnVuO1xyXG4gICAqIEBwYXJhbSB7ZG9tYWlufSBkb21haW5VUkwgLSBzcGVjaWZ5IHRoZSBkb21haW4gYmFzZSBmb3IgdGhlIHJ1bnRpbWU7XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocnVudGltZURlc2NyaXB0b3IsIHJ1bnRpbWVGYWN0b3J5LCBkb21haW4pIHtcclxuICAgIGlmICghcnVudGltZURlc2NyaXB0b3IpIHRocm93IG5ldyBFcnJvcignVGhlIHJ1bnRpbWUgZGVzY3JpcHRvciBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcclxuICAgIGlmICghcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIHNhbmRib3ggZmFjdG9yeSBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcclxuICAgIGlmICghZG9tYWluKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRoZSBkb21haW4gb2YgcnVudGltZScpO1xyXG5cclxuICAgIC8vIENvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gcmVsYXRlZCB3aXRoIHNlcnZlcnNcclxuICAgIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKHtkb21haW46IGRvbWFpbn0sIHJ1bnRpbWVDb25maWd1cmF0aW9uKTtcclxuICAgIHRoaXMucnVudGltZUZhY3RvcnkgPSBydW50aW1lRmFjdG9yeTtcclxuICAgIHRoaXMucnVudGltZUNhdGFsb2d1ZSA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTtcclxuXHJcbiAgICAgIGlmIChydW50aW1lRGVzY3JpcHRvci5wMnBIYW5kbGVyU3R1YiAmJiB0eXBlb2YgcnVudGltZURlc2NyaXB0b3IucDJwSGFuZGxlclN0dWIgID09PSAnc3RyaW5nJyAmJiBydW50aW1lRGVzY3JpcHRvci5wMnBIYW5kbGVyU3R1Yi5pbmNsdWRlcygnOi8vJykpIHtcclxuICAgICAgICB0aGlzLnAycCA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wMnAgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgIHJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvciA9IHJ1bnRpbWVEZXNjcmlwdG9yO1xyXG5cclxuICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3RvcnkuY3JlYXRlUnVudGltZUNhdGFsb2d1ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2hlY2sgeW91ciBSdW50aW1lIEZhY3RvcnkgYmVjYXVzZSBpdCBuZWVkIHRoZSBSdW50aW1lIENhdGFsb2d1ZSBpbXBsZW1lbnRhdGlvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3RvcnkucGVyc2lzdGVuY2VNYW5hZ2VyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyID0gcnVudGltZUZhY3RvcnkucGVyc2lzdGVuY2VNYW5hZ2VyKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZCB0aGUgUGVyc2lzdGVuY2UgTWFuYWdlciBpbXBsZW1lbnRhdGlvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3Rvcnkuc3RvcmFnZU1hbmFnZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LnN0b3JhZ2VNYW5hZ2VyKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZCB0aGUgU3RvcmFnZSBNYW5hZ2VyIGltcGxlbWVudGF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHJ1bnRpbWVGYWN0b3J5LnJ1bnRpbWVDYXBhYmlsaXRpZXMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzID0gcnVudGltZUZhY3RvcnkucnVudGltZUNhcGFiaWxpdGllcyh0aGlzLnN0b3JhZ2VNYW5hZ2VyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuaW5mbygnQ2hlY2sgeW91ciBSdW50aW1lRmFjdG9yeSBiZWNhdXNlIGl0IG5lZWQgdGhlIFJ1bnRpbWUgQ2FwYWJpbGl0aWVzIGltcGxlbWVudGF0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICB0aGlzLmRvbWFpbiA9IHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24uZG9tYWluO1xyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICBsZXQgZ2V0Q2FwYWJpbGl0aWVzID0gdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzLmdldFJ1bnRpbWVDYXBhYmlsaXRpZXMoKTtcclxuICAgICAgICBsZXQgZ2V0UnVudGltZVVSTCA9IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdydW50aW1lOlVSTCcpO1xyXG5cclxuICAgICAgICBQcm9taXNlLmFsbChbZ2V0UnVudGltZVVSTCwgZ2V0Q2FwYWJpbGl0aWVzXSkudGhlbigocmVzdWx0cykgPT4ge1xyXG5cclxuICAgICAgICAgIHRoaXMucnVudGltZVVSTCA9IHJlc3VsdHNbMF0gPyByZXN1bHRzWzBdLnJ1bnRpbWVVUkwgOiByZXN1bHRzWzBdO1xyXG4gICAgICAgICAgaWYgKCF0aGlzLnJ1bnRpbWVVUkwpIHtcclxuICAgICAgICAgICAgdGhpcy5ydW50aW1lVVJMID0gJ3J1bnRpbWU6Ly8nICsgdGhpcy5kb21haW4gKyAnLycgKyBnZW5lcmF0ZUdVSUQoKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ3J1bnRpbWU6VVJMJywgMSwge3J1bnRpbWVVUkw6IHRoaXMucnVudGltZVVSTH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuY2FwYWJpbGl0aWVzID0gcmVzdWx0c1sxXTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZENvbXBvbmVudHMoKTtcclxuICAgICAgICB9KS50aGVuKChzdGF0dXMpID0+IHtcclxuXHJcbiAgICAgICAgICBpZiAodGhpcy5wMnApIHtcclxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZVVBIC0gaW5pdF0gbG9hZCBwMnBIYW5kbGVyOiAnLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFAyUEhhbmRsZXIoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWVVQSAtIGluaXRdIFAyUCBub3Qgc3VwcG9ydGVkJyk7XHJcbiAgICAgICAgICAgIHJldHVybiAoJ1AyUCBOb3QgU3VwcG9ydGVkJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tydW50aW1lIHVhIC0gaW5pdF0gLSBzdGF0dXM6ICcsIHJlc3VsdCk7XHJcbiAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgIH0sIChyZWFzb24pID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VSUk9SOiAnLCByZWFzb24pO1xyXG4gICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBfbG9hZFAyUEhhbmRsZXIoKSB7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcblxyXG4gICAgICBsZXQgcnVudGltZURlc2NyaXB0b3IgPSBydW50aW1lVXRpbHMucnVudGltZURlc2NyaXB0b3I7XHJcbiAgICAgIGxldCBwMnBTdHViSGFuZGxlciA9IHJ1bnRpbWVEZXNjcmlwdG9yLnAycEhhbmRsZXJTdHViO1xyXG4gICAgICBjb25zb2xlLmxvZygnW1J1bnRpbWVVQSBsb2FkUDJQSGFuZGxlcl0gUDJQU3R1YkhhbmRsZXI6ICcsIHAycFN0dWJIYW5kbGVyKTtcclxuXHJcbiAgICAgIGxldCBwMnBDb25maWcgPSB7XHJcbiAgICAgICAgaXNIYW5kbGVyU3R1YjogdHJ1ZSxcclxuICAgICAgICBydW50aW1lVVJMOiB0aGlzLnJ1bnRpbWVVUkxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMubG9hZFN0dWIocDJwU3R1YkhhbmRsZXIsIHAycENvbmZpZykudGhlbigocmVzdWx0KSA9PiB7XHJcblxyXG4gICAgICAgIGxldCBydW50aW1lVUFVUkwgPSB0aGlzLnJ1bnRpbWVVUkwgKyAnL3VhJztcclxuICAgICAgICBsZXQgbXNnID0ge1xyXG4gICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsXHJcbiAgICAgICAgICBmcm9tOiBydW50aW1lVUFVUkwsXHJcbiAgICAgICAgICB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyB0aGlzLmRvbWFpbiArICcvc20nLFxyXG4gICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmU6IFtyZXN1bHRdLFxyXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMucnVudGltZVVSTFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihydW50aW1lVUFVUkwsIChtc2cpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbcnVudGltZSB1YSAtIGxpc3RlbmVyXSAtIHJlY2VpdmUgbXNnOiAnLCBtc2cpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbcnVudGltZSB1YSAtIHBvc3RNZXNzYWdlXSAtIHJlcGx5OiAnLCByZXBseSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW3J1bnRpbWUgdWEgLSBwMnAgaW5zdGFsbGF0aW9uXSAtIHN1Y2Nlc3M6ICcsIHJlc3VsdCk7XHJcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW3J1bnRpbWUgdWEgLSBwMnAgaW5zdGFsbGF0aW9uXSAtIGZhaWw6ICcsIHJlYXNvbik7XHJcbiAgICAgICAgcmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIF9sb2FkQ29tcG9uZW50cygpIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgb24gaW5zdGFuY2UgdG8gaGFuZGxlIHdpdGggdGhlIGZhbGxiYWNrcyBhbmQgcnVudGltZUNhdGFsb2d1ZTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0b3JJbnN0YW5jZSA9IG5ldyBEZXNjcmlwdG9ycyh0aGlzLnJ1bnRpbWVVUkwsIHRoaXMucnVudGltZUNhdGFsb2d1ZSwgdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbik7XHJcblxyXG4gICAgICAgIC8vIFByZXBhcmUgdGhlIGxvYWRlciB0byBsb2FkIHRoZSBoeXBlcnRpZXMsIHByb3Rvc3R1YnMgYW5kIGlkcHByb3h5O1xyXG4gICAgICAgIHRoaXMubG9hZGVyID0gbmV3IExvYWRlcih0aGlzLnJ1bnRpbWVVUkwsIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sIHRoaXMuZGVzY3JpcHRvckluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIGlkZW50aXR5IE1vZHVsZVxyXG4gICAgICAgIHRoaXMuaWRlbnRpdHlNb2R1bGUgPSBuZXcgSWRlbnRpdHlNb2R1bGUodGhpcy5ydW50aW1lVVJMLCB0aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMsIHRoaXMuc3RvcmFnZU1hbmFnZXIpO1xyXG5cclxuICAgICAgICAvLyBVc2UgdGhlIHNhbmRib3ggZmFjdG9yeSB0byBjcmVhdGUgYW4gQXBwU2FuZGJveDtcclxuICAgICAgICAvLyBJbiB0aGUgZnV0dXJlIGNhbiBiZSBkZWNpZGVkIGJ5IHBvbGljeUVuZ2luZSBpZiB3ZSBuZWVkXHJcbiAgICAgICAgLy8gY3JlYXRlIGEgQXBwU2FuZGJveCBvciBub3Q7XHJcbiAgICAgICAgbGV0IGFwcFNhbmRib3ggPSB0aGlzLnJ1bnRpbWVGYWN0b3J5LmNyZWF0ZUFwcFNhbmRib3goKTtcclxuXHJcbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFJlZ2lzdHJ5IE1vZHVsZVxyXG4gICAgICAgIHRoaXMucmVnaXN0cnkgPSBuZXcgUmVnaXN0cnkodGhpcy5ydW50aW1lVVJMLCBhcHBTYW5kYm94LCB0aGlzLmlkZW50aXR5TW9kdWxlLCB0aGlzLnJ1bnRpbWVDYXRhbG9ndWUsIHRoaXMucnVudGltZUNhcGFiaWxpdGllcywgdGhpcy5zdG9yYWdlTWFuYWdlcik7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgbG9hZGVyIHRvIGxvYWQgSHlwZXJ0aWVzLCBTdHVicyBhbmQgSWRwUHJveGllc1xyXG4gICAgICAgIHRoaXMucmVnaXN0cnkubG9hZGVyID0gdGhpcy5sb2FkZXI7XHJcblxyXG4gICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBNZXNzYWdlIEJ1c1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1cyA9IG5ldyBNZXNzYWdlQnVzKHRoaXMucmVnaXN0cnkpO1xyXG5cclxuICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgUG9saWN5IEVuZ2luZVxyXG4gICAgICAgIHRoaXMucG9saWN5RW5naW5lID0gbmV3IFBFUChuZXcgUnVudGltZUNvcmVDdHgodGhpcy5pZGVudGl0eU1vZHVsZSwgdGhpcy5yZWdpc3RyeSwgdGhpcy5zdG9yYWdlTWFuYWdlcikpO1xyXG5cclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucGlwZWxpbmUuaGFuZGxlcnMgPSBbXHJcblxyXG4gICAgICAgICAgLy8gUG9saWN5IG1lc3NhZ2UgYXV0aG9yaXNlXHJcbiAgICAgICAgICAoY3R4KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucG9saWN5RW5naW5lLmF1dGhvcmlzZShjdHgubXNnKS50aGVuKChjaGFuZ2VkTWdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgY3R4Lm1zZyA9IGNoYW5nZWRNZ3M7XHJcbiAgICAgICAgICAgICAgY3R4Lm5leHQoKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uKTtcclxuICAgICAgICAgICAgICBjdHguZmFpbChyZWFzb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICAvLyBBZGQgdG8gQXBwIFNhbmRib3ggdGhlIGxpc3RlbmVyO1xyXG4gICAgICAgIGFwcFNhbmRib3guYWRkTGlzdGVuZXIoJyonLCAobXNnKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVnaXN0ZXIgbWVzc2FnZUJ1cyBvbiBSZWdpc3RyeVxyXG4gICAgICAgIHRoaXMucmVnaXN0cnkubWVzc2FnZUJ1cyA9IHRoaXMubWVzc2FnZUJ1cztcclxuXHJcbiAgICAgICAgLy8gUmVnaXN0ZXIgcmVnaXN0cnkgb24gSWRlbnRpdHlNb2R1bGVcclxuICAgICAgICB0aGlzLmlkZW50aXR5TW9kdWxlLnJlZ2lzdHJ5ID0gdGhpcy5yZWdpc3RyeTtcclxuXHJcbiAgICAgICAgLy8gVXNlIHNhbmRib3ggZmFjdG9yeSB0byB1c2Ugc3BlY2lmaWMgbWV0aG9kc1xyXG4gICAgICAgIC8vIGFuZCBzZXQgdGhlIG1lc3NhZ2UgYnVzIHRvIHRoZSBmYWN0b3J5XHJcbiAgICAgICAgdGhpcy5ydW50aW1lRmFjdG9yeS5tZXNzYWdlQnVzID0gdGhpcy5tZXNzYWdlQnVzO1xyXG5cclxuICAgICAgICAvLyBJbnN0YW5jaWF0ZSB0aGUgU3luY2hlck1hbmFnZXI7XHJcbiAgICAgICAgdGhpcy5zeW5jaGVyTWFuYWdlciA9IG5ldyBTeW5jaGVyTWFuYWdlcih0aGlzLnJ1bnRpbWVVUkwsIHRoaXMubWVzc2FnZUJ1cywgdGhpcy5yZWdpc3RyeSwgdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLCB0aGlzLnN0b3JhZ2VNYW5hZ2VyKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IGludG8gbG9hZGVyIHRoZSBuZWVkZWQgY29tcG9uZW50cztcclxuICAgICAgICB0aGlzLmxvYWRlci5ydW50aW1lVVJMID0gdGhpcy5ydW50aW1lVVJMO1xyXG4gICAgICAgIHRoaXMubG9hZGVyLm1lc3NhZ2VCdXMgPSB0aGlzLm1lc3NhZ2VCdXM7XHJcbiAgICAgICAgdGhpcy5sb2FkZXIucmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5O1xyXG4gICAgICAgIHRoaXMubG9hZGVyLnJ1bnRpbWVDYXRhbG9ndWUgPSB0aGlzLnJ1bnRpbWVDYXRhbG9ndWU7XHJcbiAgICAgICAgdGhpcy5sb2FkZXIucnVudGltZUZhY3RvcnkgPSB0aGlzLnJ1bnRpbWVGYWN0b3J5O1xyXG5cclxuICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgR3JhcGggQ29ubmVjdG9yXHJcbiAgICAgICAgLy8gX3RoaXMuZ3JhcGhDb25uZWN0b3IgPSBuZXcgR3JhcGhDb25uZWN0b3IoX3RoaXMucnVudGltZVVSTCwgX3RoaXMubWVzc2FnZUJ1cyk7XHJcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIERlcGxveSBIeXBlcnR5IGZyb20gQ2F0YWxvZ3VlIFVSTFxyXG4gICogQHBhcmFtICB7VVJMLkh5cGVydHlDYXRhbG9ndWVVUkx9ICAgIGh5cGVydHkgaHlwZXJ0eURlc2NyaXB0b3IgdXJsO1xyXG4gICovXHJcbiAgbG9hZEh5cGVydHkoaHlwZXJ0eURlc2NyaXB0b3JVUkwpIHtcclxuXHJcbiAgICBpZiAoIWh5cGVydHlEZXNjcmlwdG9yVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ0h5cGVydHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICB0aGlzLmxvYWRlci5sb2FkSHlwZXJ0eShoeXBlcnR5RGVzY3JpcHRvclVSTClcclxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcclxuICAgICAgICByZWplY3QocmVhc29uKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBEZXBsb3kgU3R1YiBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybFxyXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW5cclxuICAqL1xyXG4gIGxvYWRTdHViKHByb3Rvc3R1YlVSTCwgcDJwQ29uZmlnKSB7XHJcblxyXG4gICAgaWYgKCFwcm90b3N0dWJVUkwpIHRocm93IG5ldyBFcnJvcignUHJvdG9TdHViIGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQnKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgdGhpcy5sb2FkZXIubG9hZFN0dWIocHJvdG9zdHViVVJMLCBwMnBDb25maWcpXHJcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRGVwbG95IGlkcFByb3h5IGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsXHJcbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpblxyXG4gICovXHJcbiAgbG9hZElkcFByb3h5KGlkcFByb3h5VVJMKSB7XHJcblxyXG4gICAgaWYgKCFpZHBQcm94eVVSTCkgdGhyb3cgbmV3IEVycm9yKCdUaGUgSURQIFByb3h5IFVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIsIGNvdWxkIGJlIGEgRE9NQUlOIG9yIGEgVVJMJyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5sb2FkZXIubG9hZElkcFByb3h5KGlkcFByb3h5VVJMKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgIHJlamVjdChyZWFzb24pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZWQgdG8gY2xvc2UgYWxsIHRoZSBydW50aW1lOyBVbnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXM7XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxCb29sZWFuPn0gcmVzdWx0IG9mIHRoZSBjbG9zZSBtZXRob2QsIHdpdGggdHJ1ZSBvciBmYWxzZSB0byB0aGUgb3BlcmF0aW9uIHN1Y2Nlc3M7XHJcbiAgICovXHJcbiAgY2xvc2UoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGNvbnNvbGUuaW5mbygnVW5yZWdpc3RlciBhbGwgaHlwZXJ0aWVzJyk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5yZWdpc3RyeS51bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzKCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICBjb25zb2xlLmluZm8oJ0FsbCB0aGUgaHlwZXJ0aWVzIGFyZSB1bnJlZ2lzdGVkIHdpdGggU3VjY2VzczonLCByZXN1bHQpO1xyXG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB1bnJlZ2lzdGVyIHRoZSBoeXBlcnRpZXMnLCByZWFzb24pO1xyXG4gICAgICAgIHJlamVjdChmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSdW50aW1lVUE7XHJcbiIsImV4cG9ydCBjb25zdCBydW50aW1lQ29uZmlndXJhdGlvbiA9IHtcclxuXHJcbiAgcnVudGltZVVSTFM6IHtcclxuICAgIHJlZ2lzdHJ5OiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXHJcbiAgICAgIHN1ZmZpeDogJ3JlZ2lzdHJ5J1xyXG4gICAgfSxcclxuICAgIGlkZW50aXR5TW9kdWxlOiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXHJcbiAgICAgIHN1ZmZpeDogJy9pZG0nXHJcbiAgICB9LFxyXG4gICAgcnVudGltZVVBOiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXHJcbiAgICAgIHN1ZmZpeDogJy91YSdcclxuICAgIH0sXHJcbiAgICBjYXRhbG9ndWU6IHtcclxuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJyxcclxuICAgICAgc3VmZml4OiAnL2NhdGFsb2d1ZSdcclxuICAgIH0sXHJcbiAgICBncmFwaENvbm5lY3Rvcjoge1xyXG4gICAgICBwcmVmaXg6ICdoeXBlcnR5LXJ1bnRpbWU6Ly8nLFxyXG4gICAgICBzdWZmaXg6ICcvZ3JhcGgnXHJcbiAgICB9LFxyXG4gICAgc3luY01hbmFnZXI6IHtcclxuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJyxcclxuICAgICAgc3VmZml4OiAnL3NtJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgY2F0YWxvZ3VlVVJMczoge1xyXG4gICAgcHJvdG9jb2xzdHViOiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicsXHJcbiAgICAgIHN1ZmZpeDogJy8ud2VsbC1rbm93bi9wcm90b2NvbHN0dWIvJyxcclxuICAgICAgZmFsbGJhY2s6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4lZG9tYWluJS8ud2VsbC1rbm93bi9wcm90b2NvbHN0dWIvJ1xyXG4gICAgfSxcclxuICAgIGlkcFByb3h5OiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicsXHJcbiAgICAgIHN1ZmZpeDogJy8ud2VsbC1rbm93bi9pZHAtcHJveHkvJyxcclxuICAgICAgZmFsbGJhY2s6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4lZG9tYWluJS8ud2VsbC1rbm93bi9pZHAtcHJveHkvJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgbXNnTm9kZVVSTDoge1xyXG4gICAgcHJlZml4OiAnZG9tYWluOi8vbXNnLW5vZGUuJyxcclxuICAgIHN1ZmZpeDogJycsXHJcbiAgICBoeXBlcnR5QWRkcmVzc0FsbG9jYXRpb246ICcvaHlwZXJ0eS1hZGRyZXNzLWFsbG9jYXRpb24nLFxyXG4gICAgb2JqZWN0QWRkcmVzc0FsbG9jYXRpb246ICcvb2JqZWN0LWFkZHJlc3MtYWxsb2NhdGlvbicsXHJcbiAgICBzdWJzY3JpcHRpb25NYW5hZ2VtZW50OiAnL3NtJ1xyXG4gIH0sXHJcbiAgZG9tYWluUmVnaXN0cnlVUkw6IHtcclxuICAgIHByZWZpeDogJ2RvbWFpbjovL3JlZ2lzdHJ5LicsXHJcbiAgICBzdWZmaXg6ICcnXHJcbiAgfSxcclxuICBnbG9iYWxSZWdpc3RyeVVSTDogJ2dsb2JhbDovL3JlZ2lzdHJ5LidcclxufTtcclxuIiwiZXhwb3J0IGxldCBydW50aW1lVXRpbHMgPSB7XHJcbiAgcnVudGltZURlc2NyaXB0b3I6IHt9XHJcbn07XHJcbiIsImltcG9ydCB7IGRpdmlkZVVSTCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuL1N1YnNjcmlwdGlvbic7XHJcblxyXG5jbGFzcyBPYnNlcnZlck9iamVjdCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmVudCwgdXJsLCBjaGlsZHJlbnMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX3BhcmVudCA9IHBhcmVudDtcclxuICAgIF90aGlzLl91cmwgPSB1cmw7XHJcbiAgICBfdGhpcy5fY2hpbGRyZW5zID0gY2hpbGRyZW5zO1xyXG5cclxuICAgIF90aGlzLl9zdG9yYWdlTWFuYWdlciA9IHBhcmVudC5fc3RvcmFnZU1hbmFnZXI7XHJcblxyXG4gICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzO1xyXG5cclxuICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307XHJcbiAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnMgPSB7fTtcclxuICB9XHJcblxyXG4gIF9uZXdTdWJzY3JpcHRpb24oaHlwZXJ0eSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XSA9IG5ldyBTdWJzY3JpcHRpb24oX3RoaXMuX2J1cywgaHlwZXJ0eSwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgYWRkU3Vic2NyaXB0aW9uKGh5cGVydHkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX25ld1N1YnNjcmlwdGlvbihoeXBlcnR5KTtcclxuXHJcbiAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnNbaHlwZXJ0eV0gPSB7dXJsOiBfdGhpcy5fdXJsLCBjaGlsZHJlbnM6IF90aGlzLl9jaGlsZHJlbnN9O1xyXG4gICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyLnNldCgnc3luY2hlck1hbmFnZXI6T2JzZXJ2ZXInLCAxLCBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcmVzdW1lU3Vic2NyaXB0aW9uKGh5cGVydHkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tPYnNlcnZlciBPYmplY3RdIC0gcmVzdW1lIHN1YnNjcmlwdGlvbnM6ICcsIGh5cGVydHkpO1xyXG4gICAgX3RoaXMuX25ld1N1YnNjcmlwdGlvbihoeXBlcnR5KTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVN1YnNjcmlwdGlvbihoeXBlcnR5KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwoaHlwZXJ0eSkuZG9tYWluO1xyXG4gICAgbGV0IG9ialVSTFN1YnNjcmlwdGlvbiA9IF90aGlzLl91cmwgKyAnL3N1YnNjcmlwdGlvbic7XHJcblxyXG4gICAgbGV0IHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldO1xyXG4gICAgaWYgKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gcmVtb3RlIFJlcG9ydGVyT2JqZWN0IC0+IF9vblJlbW90ZVVuU3Vic2NyaWJlXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbixcclxuICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvL1RPRE86IHNob3VsZCBJIHdhaXQgZm9yIHJlc3BvbnNlIGJlZm9yZSB1bnN1YnNjcmliZSBvbiBtc2ctbm9kZVxyXG4gICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnRcclxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL3NtJyxcclxuICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsLCBjaGlsZHJlblJlc291cmNlczogX3RoaXMuX2NoaWxkcmVucyB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc3Vic2NyaXB0aW9uLl9yZWxlYXNlTGlzdGVuZXJzKCk7XHJcbiAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBPYnNlcnZlck9iamVjdDtcclxuIiwiaW1wb3J0IHsgZGl2aWRlVVJMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4vU3Vic2NyaXB0aW9uJztcclxuXHJcbmNsYXNzIFJlcG9ydGVyT2JqZWN0IHtcclxuXHJcbiAgY29uc3RydWN0b3IocGFyZW50LCBvd25lciwgdXJsKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICBfdGhpcy5fb3duZXIgPSBvd25lcjtcclxuICAgIF90aGlzLl91cmwgPSB1cmw7XHJcblxyXG4gICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzO1xyXG4gICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyID0gcGFyZW50Ll9zdG9yYWdlTWFuYWdlcjtcclxuXHJcbiAgICBfdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKG93bmVyKS5kb21haW47XHJcbiAgICBfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwgPSBfdGhpcy5fdXJsICsgJy9zdWJzY3JpcHRpb24nO1xyXG5cclxuICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307XHJcbiAgICBfdGhpcy5fY2hpbGRyZW5zID0gW107XHJcbiAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMgPSBbXTtcclxuXHJcbiAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnMgPSB7fTtcclxuXHJcbiAgICBfdGhpcy5fZm9yd2FyZHMgPSB7fTtcclxuXHJcbiAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIF9hbGxvY2F0ZUxpc3RlbmVycygpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgLy9hZGQgc3Vic2NyaXB0aW9uIGxpc3RlbmVyLi4uXHJcbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9uTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCwgKG1zZykgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwgKyAnLVJDVjogJywgbXNnKTtcclxuICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ3N1YnNjcmliZSc6IF90aGlzLl9vblJlbW90ZVN1YnNjcmliZShtc2cpOyBicmVhaztcclxuICAgICAgICBjYXNlICd1bnN1YnNjcmliZSc6IF90aGlzLl9vblJlbW90ZVVuU3Vic2NyaWJlKG1zZyk7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3Jlc3BvbnNlJzogX3RoaXMuX29uUmVtb3RlUmVzcG9uc2UobXNnKTsgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBjaGFuZ2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGFuZ2VzJztcclxuICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoY2hhbmdlVVJMLCAobXNnKSA9PiB7XHJcbiAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hhbmdlcz9cclxuICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLScgKyBjaGFuZ2VVUkwgKyAnLVJDVjogJywgbXNnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIF90aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXSA9IHt1cmw6IF90aGlzLl91cmwsIG93bmVyOiBfdGhpcy5fb3duZXIsIGNoaWxkcmVuczogX3RoaXMuX2NoaWxkcmVucywgc3Vic2NyaXB0aW9uczogW119O1xyXG4gICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyLnNldCgnc3luY2hlck1hbmFnZXI6UmVwb3J0ZXInLCAxLCBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcmVzdW1lU3Vic2NyaXB0aW9ucyhzdWJzY3JpcHRpb25zKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChoeXBlcnR5VVJMKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbUmVwb3J0ZXIgT2JqZWN0XSAtIHJlc3VtZSBzdWJzY3JpcHRpb25zOiAnLCBoeXBlcnR5VVJMKTtcclxuICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF0gPSBuZXcgU3Vic2NyaXB0aW9uKF90aGlzLl9idXMsIF90aGlzLl9vd25lciwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgdHJ1ZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBfcmVsZWFzZUxpc3RlbmVycygpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbkxpc3RlbmVyLnJlbW92ZSgpO1xyXG5cclxuICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lci5yZW1vdmUoKTtcclxuXHJcbiAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaCgoY2wpID0+IHtcclxuICAgICAgY2wucmVtb3ZlKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhfdGhpcy5fZm9yd2FyZHMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICBfdGhpcy5mb3J3YXJkVW5TdWJzY3JpYmUoa2V5KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vcmVtb3ZlIGFsbCBzdWJzY3JpcHRpb25zXHJcbiAgICBPYmplY3Qua2V5cyhfdGhpcy5fc3Vic2NyaXB0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2tleV0uX3JlbGVhc2VMaXN0ZW5lcnMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgYSBsaXN0ZW5lciBpbiB0aGUgbXNnLW5vZGUgYW5kIGluIHRoZSBsb2NhbCBNZXNzYWdlQnVzLCBzbyB0aGF0IG1lc3NhZ2VzIG9uIHRoaXMgYWRkcmVzcyBhcmUgZm9yd2FyZGVkIHRvIHRoZSByZXBvcnRlciBvYmplY3RcclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGFkZHJlc3MgLSBVUkwgdG8gcmVnaXN0ZXIgdGhlIGxpc3RlbmVyc1xyXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybiBQcm9taXNlIE9LIG9yIGVycm9yXHJcbiAgICovXHJcbiAgZm9yd2FyZFN1YnNjcmliZShhZGRyZXNzZXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudFxyXG4gICAgbGV0IG5vZGVTdWJzY3JpYmVNc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJyxcclxuICAgICAgYm9keTogeyBzdWJzY3JpYmU6IGFkZHJlc3Nlcywgc291cmNlOiBfdGhpcy5fb3duZXIgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIChyZXBseSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdmb3J3YXJkLXN1YnNjcmliZS1yZXNwb25zZShyZXBvcnRlcik6ICcsIHJlcGx5KTtcclxuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuICAgICAgICAgIGxldCBuZXdGb3J3YXJkID0gX3RoaXMuX2J1cy5hZGRGb3J3YXJkKF90aGlzLl91cmwsIF90aGlzLl9vd25lcik7XHJcbiAgICAgICAgICBfdGhpcy5fZm9yd2FyZHNbYWRkcmVzc2VzWzBdXSA9IG5ld0ZvcndhcmQ7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gbXNnLW5vZGUgc3Vic2NyaXB0aW9uOiAnICsgcmVwbHkuYm9keS5kZXNjKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVblJlZ2lzdGVyIGEgbGlzdGVuZXIgaW4gdGhlIG1zZy1ub2RlIGFuZCBpbiB0aGUgbG9jYWwgTWVzc2FnZUJ1cywgc28gdGhhdCBtZXNzYWdlcyBvbiB0aGlzIGFkZHJlc3MgYXJlIHJlbW92ZWQgZnJvbSBmb3J3YXJkXHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBhZGRyZXNzIC0gVVJMIHRvIHVuLXJlZ2lzdGVyIHRoZSBsaXN0ZW5lcnNcclxuICAgKi9cclxuICBmb3J3YXJkVW5TdWJzY3JpYmUoYWRkcmVzcykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5fZm9yd2FyZHNbYWRkcmVzc10ucmVtb3ZlKCk7XHJcbiAgICBkZWxldGUgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3NdO1xyXG5cclxuICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnRcclxuICAgIGxldCBub2RlVW5TdWJzY3JpYmVNc2cgPSB7XHJcbiAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgX3RoaXMuX2RvbWFpbiArICcvc20nLFxyXG4gICAgICBib2R5OiB7IHN1YnNjcmliZTogW2FkZHJlc3NdLCBzb3VyY2U6IF90aGlzLl9vd25lciB9XHJcbiAgICB9O1xyXG5cclxuICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVVuU3Vic2NyaWJlTXNnKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdGVyIGxpc3RlbmVycyBmb3IgYSBsaXN0IG9mIGNoaWxkcmVucy4gUHVibGljIGNoYW5uZWxzIHVzZWQgdG8gdHJhbnNtaXQgbWVzc2FnZXMuXHJcbiAgICogQHBhcmFtICB7c3RyaW5nW119IGNoaWxkcmVucyAtIGNoYW5uZWxzIHRvIHJlZ2lzdGVyXHJcbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJuIFByb21pc2UgT0sgb3IgZXJyb3JcclxuICAgKi9cclxuICBhZGRDaGlsZHJlbnMoY2hpbGRyZW5zKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGlmIChjaGlsZHJlbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGNoaWxkQmFzZVVSTCA9IF90aGlzLl91cmwgKyAnL2NoaWxkcmVuLyc7XHJcbiAgICAgIF90aGlzLl9jaGlsZHJlbnMucHVzaChjaGlsZHJlbnMpO1xyXG5cclxuICAgICAgLypcclxuICAgICAgX3RoaXMuX2NoaWxkcmVucy5mb3JFYWNoKChjaGlsZCkgPT4ge1xyXG4gICAgICAgIGxldCBjaGlsZElkID0gY2hpbGRCYXNlVVJMICsgY2hpbGQ7XHJcblxyXG4gICAgICAgIGxldCBzZWxmRm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChjaGlsZElkLCBvd25lcik7XHJcbiAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goc2VsZkZvcndhcmQpO1xyXG4gICAgICB9KTsqL1xyXG5cclxuICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSBbXTtcclxuICAgICAgY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiBzdWJzY3JpcHRpb25zLnB1c2goY2hpbGRCYXNlVVJMICsgY2hpbGQpKTtcclxuXHJcbiAgICAgIC8vX3RoaXMuX3N0b3JhZ2VTdWJzY3JpcHRpb25zW190aGlzLl9vYmpTdWJzY3JpcHRvclVSTF0gPSB7dXJsOiBfdGhpcy5fdXJsLCBvd25lcjogX3RoaXMuX293bmVyLCBjaGlsZHJlbnM6IF90aGlzLl9jaGlsZHJlbnN9O1xyXG5cclxuICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudFxyXG4gICAgICBsZXQgbm9kZVN1YnNjcmliZU1zZyA9IHtcclxuICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsXHJcbiAgICAgICAgYm9keTogeyBzdWJzY3JpYmU6IHN1YnNjcmlwdGlvbnMsIHNvdXJjZTogX3RoaXMuX293bmVyIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ25vZGUtc3Vic2NyaWJlLXJlc3BvbnNlKHJlcG9ydGVyKTogJywgcmVwbHkpO1xyXG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG5cclxuICAgICAgICAgIC8vYWRkIGNoaWxkcmVuIGxpc3RlbmVycyBvbiBsb2NhbCAuLi5cclxuICAgICAgICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoY2hpbGRVUkwpID0+IHtcclxuICAgICAgICAgICAgbGV0IGNoaWxkTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoaWxkVVJMLCAobXNnKSA9PiB7XHJcbiAgICAgICAgICAgICAgLy9UT0RPOiB3aGF0IHRvZG8gaGVyZT8gU2F2ZSBjaGlsZHJlbnM/XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLScgKyBjaGlsZFVSTCArICctUkNWOiAnLCBtc2cpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goY2hpbGRMaXN0ZW5lcik7XHJcblxyXG4gICAgICAgICAgICBsZXQgc2VsZkZvcndhcmQgPSBfdGhpcy5fYnVzLmFkZEZvcndhcmQoY2hpbGRVUkwsIF90aGlzLl9vd25lcik7XHJcbiAgICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKHNlbGZGb3J3YXJkKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBtc2ctbm9kZSBzdWJzY3JpcHRpb246ICcgKyByZXBseS5ib2R5LmRlc2MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZSgpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKF90aGlzLl9vd25lcikuZG9tYWluO1xyXG5cclxuICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCBkaXJlY3RseSB0byBhbGwgc3Vic2NyaWJlcnMgb2YgdGhlIHJlcG9ydGVyXHJcbiAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcclxuICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCwgdG86IF90aGlzLl91cmwgKyAnL2NoYW5nZXMnXHJcbiAgICB9KTtcclxuXHJcbiAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIE9iamVjdEFsbG9jYXRpb25NYW5hZ2VyIGNvbXBvbmVudFxyXG4gICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvb2JqZWN0LWFkZHJlc3MtYWxsb2NhdGlvbicsXHJcbiAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwsIGNoaWxkcmVuUmVzb3VyY2VzOiBfdGhpcy5fY2hpbGRyZW5zIH1cclxuICAgIH0pO1xyXG5cclxuICAgIF90aGlzLl9yZWxlYXNlTGlzdGVuZXJzKCk7XHJcbiAgICBkZWxldGUgX3RoaXMuX3BhcmVudC5fcmVwb3J0ZXJzW190aGlzLl91cmxdO1xyXG4gIH1cclxuXHJcbiAgX29uUmVtb3RlUmVzcG9uc2UobXNnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBfdGhpcy5fdXJsLFxyXG4gICAgICBib2R5OiB7IGNvZGU6IG1zZy5ib2R5LmNvZGUsIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSwgc291cmNlOiBtc2cuZnJvbSB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIFN5bmNoZXIgLT4gc3Vic2NyaWJlXHJcbiAgX29uUmVtb3RlU3Vic2NyaWJlKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBoeXBlcnR5VVJMID0gbXNnLmJvZHkuc3Vic2NyaWJlcjtcclxuXHJcbiAgICAvL3ZhbGlkYXRlIGlmIHN1YnNjcmlwdGlvbiBhbHJlYWR5IGV4aXN0cz9cclxuICAgIGlmIChfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSkge1xyXG4gICAgICBsZXQgZXJyb3JNc2cgPSB7XHJcbiAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCxcclxuICAgICAgICBib2R5OiB7IGNvZGU6IDUwMCwgZGVzYzogJ1N1YnNjcmlwdGlvbiBmb3IgKCcgKyBfdGhpcy5fdXJsICsgJyA6ICcgKyAgaHlwZXJ0eVVSTCArICcpIGFscmVhZHkgZXhpc3RzIScgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShlcnJvck1zZyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvL2FzayB0byBzdWJzY3JpYmUgdG8gU3luY2hlcj8gKGRlcGVuZHMgb24gdGhlIG9wZXJhdGlvbiBtb2RlKVxyXG4gICAgLy9UT0RPOiBnZXQgbW9kZSBmcm9tIG9iamVjdCFcclxuICAgIGxldCBtb2RlID0gJ3N1Yi9wdWInO1xyXG5cclxuICAgIGlmIChtb2RlID09PSAnc3ViL3B1YicpIHtcclxuICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIGxvY2FsIGh5cGVydHkgYWRkcmVzcyBTeW5jaGVyIC0+IF9vbkZvcndhcmRcclxuICAgICAgbGV0IGZvcndhcmRNc2cgPSB7XHJcbiAgICAgICAgdHlwZTogJ2ZvcndhcmQnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogX3RoaXMuX293bmVyLFxyXG4gICAgICAgIGJvZHk6IHsgdHlwZTogbXNnLnR5cGUsIGZyb206IGh5cGVydHlVUkwsIHRvOiBfdGhpcy5fdXJsLCBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHkgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShmb3J3YXJkTXNnLCAocmVwbHkpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZm9yd2FyZC1yZXBseTogJywgcmVwbHkpO1xyXG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgaWYgKCFfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSkge1xyXG4gICAgICAgICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXSA9IG5ldyBTdWJzY3JpcHRpb24oX3RoaXMuX2J1cywgX3RoaXMuX293bmVyLCBfdGhpcy5fdXJsLCBfdGhpcy5fY2hpbGRyZW5zLCB0cnVlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBsZXQgc3Vic2NyaXB0aW9ucyA9IE9iamVjdC5rZXlzKF90aGlzLl9zdWJzY3JpcHRpb25zKTtcclxuICAgICAgICAgIF90aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9uc1tfdGhpcy5fdXJsXS5zdWJzY3JpcHRpb25zID0gc3Vic2NyaXB0aW9ucztcclxuICAgICAgICAgIF90aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOlJlcG9ydGVyJywgMSwgX3RoaXMuX3N0b3JhZ2VTdWJzY3JpcHRpb25zKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL0ZMT1ctT1VUOiBzdWJzY3JpcHRpb24gcmVzcG9uc2Ugc2VudCAoZm9yd2FyZCBmcm9tIGludGVybmFsIEh5cGVydHkpXHJcbiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSxcclxuICAgICAgICAgIGJvZHk6IHJlcGx5LmJvZHlcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIHJlbW90ZSBPYnNlcnZlck9iamVjdCAtPiByZW1vdmVTdWJzY3JpcHRpb25cclxuICBfb25SZW1vdGVVblN1YnNjcmliZShtc2cpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgaHlwZXJ0eVVSTCA9IG1zZy5ib2R5LnN1YnNjcmliZXI7XHJcblxyXG4gICAgbGV0IHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdO1xyXG4gICAgaWYgKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICBzdWJzY3JpcHRpb24uX3JlbGVhc2VMaXN0ZW5lcnMoKTtcclxuICAgICAgZGVsZXRlIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdO1xyXG5cclxuICAgICAgLy9UT0RPOiBzZW5kIHVuLXN1YnNjcmliZSBtZXNzYWdlIHRvIFN5bmNoZXI/IChkZXBlbmRzIG9uIHRoZSBvcGVyYXRpb24gbW9kZSlcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVwb3J0ZXJPYmplY3Q7XHJcbiIsImNsYXNzIFN1YnNjcmlwdGlvbiB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGJ1cywgb3duZXIsIHVybCwgY2hpbGRyZW5zLCBpc1JlcG9ydGVyKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGNoaWxkQmFzZVVSTCA9IHVybCArICcvY2hpbGRyZW4vJztcclxuICAgIGxldCBjaGFuZ2VVUkwgPSB1cmwgKyAnL2NoYW5nZXMnO1xyXG5cclxuICAgIC8vcHJvY2VzcyBkZWxldGUgbWVzc2FnZVxyXG4gICAgX3RoaXMuX2RlbGV0ZUxpc3RlbmVyID0gYnVzLmFkZExpc3RlbmVyKGNoYW5nZVVSTCwgKG1zZykgPT4ge1xyXG4gICAgICBpZiAobXNnLnR5cGUgPT09ICdkZWxldGUnKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1N1YnNjcmlwdGlvbi1ERUxFVEU6ICcsIG1zZyk7XHJcblxyXG4gICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBhbGwgc3Vic2NyaWJlcnNcclxuICAgICAgICBsZXQgZGVsZXRlTWVzc2FnZVRvSHlwZXJ0eSA9IHtcclxuICAgICAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBtc2cuZnJvbSwgdG86IG93bmVyLFxyXG4gICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHJlc291cmNlOiB1cmwgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vc2VuZCBkZWxldGUgdG8gaHlwZXJ0eVxyXG4gICAgICAgIGJ1cy5wb3N0TWVzc2FnZShkZWxldGVNZXNzYWdlVG9IeXBlcnR5LCAocmVwbHkpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24tREVMRVRFLVJFUExZOiAnLCByZXBseSk7XHJcbiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuICAgICAgICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy9hZGQgY2hhbmdlIHB1Ymxpc2ggYWRkcmVzcyBvciBmb3J3YXJkXHJcbiAgICBpZiAoaXNSZXBvcnRlcikge1xyXG4gICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBidXMuYWRkUHVibGlzaChjaGFuZ2VVUkwpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZEZvcndhcmQoY2hhbmdlVVJMLCBvd25lcik7XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107XHJcbiAgICBjaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHtcclxuICAgICAgbGV0IGNoaWxkSWQgPSBjaGlsZEJhc2VVUkwgKyBjaGlsZDtcclxuXHJcbiAgICAgIC8vYWRkIGNoaWxkcmVuIHB1Ymxpc2ggYWRkcmVzc1xyXG4gICAgICBsZXQgY2hpbGRyZW5Gb3J3YXJkID0gYnVzLmFkZFB1Ymxpc2goY2hpbGRJZCk7XHJcbiAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGNoaWxkcmVuRm9yd2FyZCk7XHJcblxyXG4gICAgICAvL2FkZCBzZWxmIGZvcndhcmQgaWYgYW4gb2JzZXJ2ZXJcclxuICAgICAgaWYgKCFpc1JlcG9ydGVyKSB7XHJcbiAgICAgICAgbGV0IHNlbGZGb3J3YXJkID0gYnVzLmFkZEZvcndhcmQoY2hpbGRJZCwgb3duZXIpO1xyXG4gICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKHNlbGZGb3J3YXJkKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfcmVsZWFzZUxpc3RlbmVycygpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX2RlbGV0ZUxpc3RlbmVyLnJlbW92ZSgpO1xyXG5cclxuICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lci5yZW1vdmUoKTtcclxuXHJcbiAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaCgoZm9yd2FyZCkgPT4ge1xyXG4gICAgICBmb3J3YXJkLnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgU3Vic2NyaXB0aW9uO1xyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcbmltcG9ydCB7IGRpdmlkZVVSTCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IEFkZHJlc3NBbGxvY2F0aW9uIGZyb20gJy4uL2FsbG9jYXRpb24vQWRkcmVzc0FsbG9jYXRpb24nO1xyXG5pbXBvcnQgUmVwb3J0ZXJPYmplY3QgZnJvbSAnLi9SZXBvcnRlck9iamVjdCc7XHJcbmltcG9ydCBPYnNlcnZlck9iamVjdCBmcm9tICcuL09ic2VydmVyT2JqZWN0JztcclxuaW1wb3J0IHR2NCBmcm9tICcuLi91dGlscy90djQnO1xyXG5cclxuaW1wb3J0IHtNZXNzYWdlRmFjdG9yeX0gZnJvbSAnc2VydmljZS1mcmFtZXdvcmsvZGlzdC9NZXNzYWdlRmFjdG9yeSc7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxyXG4gKiBDb3JlIFN5bmNyb25pemF0aW9uIHN5c3RlbS5cclxuICovXHJcbmNsYXNzIFN5bmNoZXJNYW5hZ2VyIHtcclxuICAvKiBwcml2YXRlXHJcbiAgX3VybDogVVJMXHJcbiAgX2J1czogTWluaUJ1c1xyXG4gIF9yZWdpc3RyeTogUmVnaXN0cnlcclxuICBfYWxsb2NhdG9yOiBBZGRyZXNzQWxsb2NhdGlvblxyXG5cclxuICBfcmVwb3J0ZXJzOiB7IE9iamVjdFVSTDogUmVwb3J0ZXJPYmplY3QgfVxyXG4gIF9vYnNlcnZlcnM6IHsgT2JqZWN0VVJMOiBPYnNlcnZlck9iamVjdCB9XHJcbiAgKi9cclxuXHJcbiAgY29uc3RydWN0b3IocnVudGltZVVSTCwgYnVzLCByZWdpc3RyeSwgY2F0YWxvZywgc3RvcmFnZU1hbmFnZXIsIGFsbG9jYXRvcikge1xyXG4gICAgaWYgKCFydW50aW1lVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIHJ1bnRpbWVVUkwgcGFyYW1ldGVyJyk7XHJcbiAgICBpZiAoIWJ1cykgdGhyb3cgbmV3IEVycm9yKCdbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWRzIHRoZSBNZXNzYWdlQnVzIGluc3RhbmNlJyk7XHJcbiAgICBpZiAoIXJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIFJlZ2lzdHJ5IGluc3RhbmNlJyk7XHJcbiAgICBpZiAoIWNhdGFsb2cpIHRocm93IG5ldyBFcnJvcignW1N5bmNoZXIgTWFuYWdlcl0gLSBuZWVkcyB0aGUgUnVudGltZUNhdGFsb2d1ZSBpbnN0YW5jZScpO1xyXG4gICAgaWYgKCFzdG9yYWdlTWFuYWdlcikgdGhyb3cgbmV3IEVycm9yKCdbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWQgdGhlIHN0b3JhZ2VNYW5hZ2VyIGluc3RhbmNlJyk7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5fYnVzID0gYnVzO1xyXG4gICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XHJcbiAgICBfdGhpcy5fY2F0YWxvZyA9IGNhdGFsb2c7XHJcbiAgICBfdGhpcy5fc3RvcmFnZU1hbmFnZXIgPSBzdG9yYWdlTWFuYWdlcjtcclxuXHJcbiAgICAvL1RPRE86IHRoZXNlIHNob3VsZCBiZSBzYXZlZCBpbiBwZXJzaXN0ZW5jZSBlbmdpbmU/XHJcbiAgICBfdGhpcy5fdXJsID0gcnVudGltZVVSTCArICcvc20nO1xyXG4gICAgX3RoaXMuX29iamVjdFVSTCA9IHJ1bnRpbWVVUkwgKyAnL29iamVjdC1hbGxvY2F0aW9uJztcclxuXHJcbiAgICBfdGhpcy5fcmVwb3J0ZXJzID0ge307XHJcbiAgICBfdGhpcy5fb2JzZXJ2ZXJzID0ge307XHJcblxyXG4gICAgLy9UT0RPOiB0aGlzIHNob3VsZCBub3QgYmUgaGFyZGNvZGVkIVxyXG4gICAgX3RoaXMuX2RvbWFpbiA9IGRpdmlkZVVSTChydW50aW1lVVJMKS5kb21haW47XHJcblxyXG4gICAgX3RoaXMuX21mID0gbmV3IE1lc3NhZ2VGYWN0b3J5KGZhbHNlLCB7fSk7XHJcblxyXG4gICAgaWYgKGFsbG9jYXRvcikge1xyXG4gICAgICBfdGhpcy5fYWxsb2NhdG9yID0gYWxsb2NhdG9yO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgX3RoaXMuX2FsbG9jYXRvciA9IG5ldyBBZGRyZXNzQWxsb2NhdGlvbihfdGhpcy5fb2JqZWN0VVJMLCBidXMsIF90aGlzLl9yZWdpc3RyeSk7XHJcbiAgICB9XHJcblxyXG4gICAgYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIChtc2cpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLVJDVjogJywgbXNnKTtcclxuICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ2NyZWF0ZSc6IF90aGlzLl9vbkNyZWF0ZShtc2cpOyBicmVhaztcclxuICAgICAgICBjYXNlICdkZWxldGUnOiBfdGhpcy5fb25EZWxldGUobXNnKTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzogX3RoaXMuX29uTG9jYWxTdWJzY3JpYmUobXNnKTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOiBfdGhpcy5fb25Mb2NhbFVuU3Vic2NyaWJlKG1zZyk7IGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBfdGhpcy5fcmVzdW1lUmVwb3J0ZXJMaXN0ZW5lcnMoKTtcclxuICAgIC8vIF90aGlzLl9yZXN1bWVPYnNlcnZlckxpc3RlbmVycygpO1xyXG5cclxuICB9XHJcblxyXG4gIGdldCB1cmwoKSB7IHJldHVybiB0aGlzLl91cmw7IH1cclxuXHJcbiAgX3Jlc3VtZU9ic2VydmVyTGlzdGVuZXJzKCkge1xyXG5cclxuICAgIC8vIEdldCB0byB0aGUgc3RvcmFnZU1hbmFnZXIgZGF0YU9iamVjdE9ic2VydmVyc1xyXG4gICAgdGhpcy5fc3RvcmFnZU1hbmFnZXIuZ2V0KCdzeW5jaGVyTWFuYWdlcjpPYnNlcnZlcicpLnRoZW4oKG9ic2VydmVycykgPT4ge1xyXG4gICAgICBjb25zb2xlLmluZm8oJ1tzdG9yYWdlIG1hbmFnZXIgb2JzZXJ2ZXJdIC0gUmVzdW1lIFN1YnNjcmlwdGlvbnM6ICcsIG9ic2VydmVycyk7XHJcbiAgICAgIGlmICghb2JzZXJ2ZXJzKSByZXR1cm47XHJcblxyXG4gICAgICBPYmplY3Qua2V5cyhvYnNlcnZlcnMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhrZXksIG9ic2VydmVyc1trZXldKTtcclxuICAgICAgICBsZXQgb2JqVVJMID0gb2JzZXJ2ZXJzW2tleV0udXJsO1xyXG4gICAgICAgIGxldCBjaGlsZHJlbnMgPSBvYnNlcnZlcnNba2V5XS5jaGlsZHJlbnM7XHJcblxyXG4gICAgICAgIGxldCBvYnNlcnZlciA9IHRoaXMuX29ic2VydmVyc1tvYmpVUkxdO1xyXG4gICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcclxuICAgICAgICAgIG9ic2VydmVyID0gbmV3IE9ic2VydmVyT2JqZWN0KHRoaXMsIG9ialVSTCwgY2hpbGRyZW5zKTtcclxuICAgICAgICAgIHRoaXMuX29ic2VydmVyc1tvYmpVUkxdID0gb2JzZXJ2ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3JlZ2lzdGVyIGFuIHVzZWQgaHlwZXJ0eSBzdWJzY3JpcHRpb25cclxuICAgICAgICBvYnNlcnZlci5yZXN1bWVTdWJzY3JpcHRpb24oa2V5KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiAnLCBlcnJvcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9yZXN1bWVSZXBvcnRlckxpc3RlbmVycygpIHtcclxuICAgIGxldCByZXBvcnRlcjtcclxuXHJcbiAgICAvLyBHZXQgdG8gdGhlIHN0b3JhZ2VNYW5hZ2VyIGRhdGFPYmplY3RPYnNlcnZlcnNcclxuICAgIHRoaXMuX3N0b3JhZ2VNYW5hZ2VyLmdldCgnc3luY2hlck1hbmFnZXI6UmVwb3J0ZXInKS50aGVuKChyZXBvcnRlcnMpID0+IHtcclxuICAgICAgaWYgKCFyZXBvcnRlcnMpIHJldHVybjtcclxuXHJcbiAgICAgIE9iamVjdC5rZXlzKHJlcG9ydGVycykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCdbc3RvcmFnZSBtYW5hZ2VyIHJlcG9ydGVyXSAtIFJlc3VtZSBTdWJzY3JpcHRpb25zOiAnLCByZXBvcnRlcnMpO1xyXG4gICAgICAgIGxldCBvYmpVUkwgPSByZXBvcnRlcnNba2V5XS51cmw7XHJcbiAgICAgICAgbGV0IG93bmVyID0gcmVwb3J0ZXJzW2tleV0ub3duZXI7XHJcbiAgICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSByZXBvcnRlcnNba2V5XS5zdWJzY3JpcHRpb25zO1xyXG5cclxuICAgICAgICByZXBvcnRlciA9IG5ldyBSZXBvcnRlck9iamVjdCh0aGlzLCBvd25lciwgb2JqVVJMKTtcclxuICAgICAgICByZXBvcnRlci5yZXN1bWVTdWJzY3JpcHRpb25zKHN1YnNjcmlwdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3JlcG9ydGVyc1tvYmpVUkxdID0gcmVwb3J0ZXI7XHJcblxyXG4gICAgICAgIC8vIHJlcG9ydGVyLnJlc3VtZVN1YnNjcmlwdGlvbnMoc3Vic2NyaXB0aW9ucyk7XHJcbiAgICAgICAgLy8gcmVwb3J0ZXIuZm9yd2FyZFN1YnNjcmliZShbb2JqVVJMLCBzdWJzY3JpcHRpb25VUkxdKS50aGVuKCgpID0+IHtcclxuICAgICAgICAvLyAgIHRoaXMuX3JlcG9ydGVyc1tvYmpVUkxdID0gcmVwb3J0ZXI7XHJcbiAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6ICcsIGVycm9yKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gU3luY2hlciAtPiBjcmVhdGVcclxuICBfb25DcmVhdGUobXNnKSB7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBvd25lciA9IG1zZy5mcm9tO1xyXG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChtc2cuZnJvbSkuZG9tYWluO1xyXG5cclxuICAgIC8vIEhhY2sgdG8gaWdub3JlIGRhdGEgb2JqZWN0IGFkZHJlc3MgcmV1c2FnZSByZXF1ZXN0XHJcbiAgICBpZiAoIW1zZy5ib2R5LnNjaGVtYSkge1xyXG4vKiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxyXG4gICAgICAgIGJvZHk6IHsgY29kZTogNDA0LCBkZXNjcmlwdGlvbjogJ25vdCBmb3VuZCcgfVxyXG4gICAgICB9KTsqL1xyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtc2cuYm9keS5yZXNvdXJjZSkge1xyXG4gICAgICBfdGhpcy5fYXV0aG9yaXNlKG1zZywgbXNnLmJvZHkucmVzb3VyY2UpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy9nZXQgc2NoZW1hIGZyb20gY2F0YWxvZ3VlIGFuZCBwYXJzZSAtPiAoc2NoZW1lLCBjaGlsZHJlbilcclxuICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKG1zZy5ib2R5LnNjaGVtYSkudGhlbigoZGVzY3JpcHRvcikgPT4ge1xyXG5cclxuICAgICAgbGV0IHByb3BlcnRpZXMgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzO1xyXG4gICAgICBsZXQgc2NoZW1lID0gcHJvcGVydGllcy5zY2hlbWUgPyBwcm9wZXJ0aWVzLnNjaGVtZS5jb25zdGFudCA6ICdyZXNvdXJjZSc7XHJcbiAgICAgIGxldCBjaGlsZHJlbnMgPSBwcm9wZXJ0aWVzLmNoaWxkcmVuID8gcHJvcGVydGllcy5jaGlsZHJlbi5jb25zdGFudCA6IFtdO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coJ1NjaGVtZTogJywgc2NoZW1lKTtcclxuXHJcbiAgICAgIC8vIHNjaGVtYSB2YWxpZGF0aW9uXHJcbiAgICAgIGNvbnNvbGUubG9nKCdSdW5uaW5nIG9iamVjdCB2YWxpZGF0aW9uLi4uJyk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IG1zZy5ib2R5LnZhbHVlO1xyXG4gICAgICAgIGxldCBzY2hlbWEgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHN1cHBvcnQgZm9yIHNjaGVtYSByZWZlcmVuY2luZyBpdHNlbGZcclxuICAgICAgICB0djQuYWRkU2NoZW1hKHNjaGVtYS5pZCwgc2NoZW1hKTtcclxuXHJcbiAgICAgICAgLy8gdmFsaWRhdGVcclxuICAgICAgICBsZXQgcmVzdWx0ID0gdHY0LnZhbGlkYXRlTXVsdGlwbGUob2JqLCBzY2hlbWEpO1xyXG5cclxuICAgICAgICAvLyBkZWxldGUgZXJyb3Igc3RhY2tzIHRvIGltcHJvdmUgbG9nZ2luZ1xyXG4gICAgICAgIHJlc3VsdC5lcnJvcnMuZm9yRWFjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgIGRlbGV0ZSBlcnJvci5zdGFjaztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gcHJpbnQgbW9yZSBkZXRhaWxzIGFib3V0IHZhbGlkYXRpb24gaWYgaXQgZmFpbHMgb3Igc2NoZW1hIGNvbnRhaW5zICRyZWZzXHJcbiAgICAgICAgaWYgKCFyZXN1bHQudmFsaWQgfHwgKHJlc3VsdC5taXNzaW5nLmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ09iamVjdCB2YWxpZGF0aW9uICcgKyAocmVzdWx0LnZhbGlkID8gJ3N1Y2NlZWRlZCwgYnV0IHNjaGVtYSBjb250YWluZWQgcmVmZXJlbmNlczonIDogJ2ZhaWxlZDonKSwgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKSk7XHJcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKCdPYmplY3Q6JywgSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCAyKSwgJ1xcclxcblNjaGVtYTonLCBKU09OLnN0cmluZ2lmeShzY2hlbWEsIG51bGwsIDIpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ09iamVjdCB2YWxpZGF0aW9uIHN1Y2NlZWRlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgZHVyaW5nIG9iamVjdCB2YWxpZGF0aW9uOicsIGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgb2JqZWN0SW5mbyA9IHtcclxuICAgICAgICBuYW1lOiBtc2cuYm9keS52YWx1ZS5uYW1lLFxyXG4gICAgICAgIHNjaGVtYTogbXNnLmJvZHkuc2NoZW1hLFxyXG4gICAgICAgIHJlcG9ydGVyOiBtc2cuYm9keS52YWx1ZS5yZXBvcnRlcixcclxuICAgICAgICByZXNvdXJjZXM6IG1zZy5ib2R5LnZhbHVlLnJlc291cmNlc1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gc2hvdWxkIHJlc3VzZSBkYXRhIG9iamVjdCB1cmwgaWYgaXQgcGFzc2VkXHJcbiAgICAgIGxldCByZXVzZURhdGFPYmplY3QgPSBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZTtcclxuXHJcbiAgICAgIC8vcmVxdWVzdCBhZGRyZXNzIGFsbG9jYXRpb24gb2YgYSBuZXcgb2JqZWN0IGZyb20gdGhlIG1zZy1ub2RlXHJcbiAgICAgIF90aGlzLl9hbGxvY2F0b3IuY3JlYXRlKGRvbWFpbiwgMSwgb2JqZWN0SW5mbywgc2NoZW1lLCByZXVzZURhdGFPYmplY3QpLnRoZW4oKGFsbG9jYXRlZCkgPT4ge1xyXG4gICAgICAgIGxldCBvYmpVUkwgPSBhbGxvY2F0ZWQuYWRkcmVzc1swXTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ0FMTE9DQVRPUiBDUkVBVEU6JywgYWxsb2NhdGVkKTtcclxuXHJcbiAgICAgICAgbGV0IHN1YnNjcmlwdGlvblVSTCA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJztcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1N1YnNjcmlwdGlvbiBVUkwnLCBzdWJzY3JpcHRpb25VUkwpO1xyXG5cclxuICAgICAgICAvL1RvIHJlZ2lzdGVyIHRoZSBkYXRhT2JqZWN0IGluIHRoZSBydW50aW1lUmVnaXN0cnlcclxuICAgICAgICBjb25zb2xlLmluZm8oJ1JlZ2lzdGVyIE9iamVjdDogJywgbXNnLmJvZHkudmFsdWUubmFtZSwgbXNnLmJvZHkudmFsdWUuc2NoZW1hLCBvYmpVUkwsIG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLCBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZXMpO1xyXG4gICAgICAgIF90aGlzLl9yZWdpc3RyeS5yZWdpc3RlckRhdGFPYmplY3QobXNnLmJvZHkudmFsdWUubmFtZSwgbXNnLmJvZHkudmFsdWUuc2NoZW1hLCBvYmpVUkwsIG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLCBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZXMsIGFsbG9jYXRlZCwgbXNnLmJvZHkuYXV0aG9yaXNlKS50aGVuKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdCBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCcsIHJlc29sdmUpO1xyXG5cclxuICAgICAgICAgIC8vYWxsIE9LIC0+IGNyZWF0ZSByZXBvcnRlciBhbmQgcmVnaXN0ZXIgbGlzdGVuZXJzXHJcbiAgICAgICAgICBsZXQgcmVwb3J0ZXI7XHJcblxyXG4gICAgICAgICAgaWYgKCF0aGlzLl9yZXBvcnRlcnNbb2JqVVJMXSkge1xyXG4gICAgICAgICAgICByZXBvcnRlciA9IG5ldyBSZXBvcnRlck9iamVjdChfdGhpcywgb3duZXIsIG9ialVSTCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXBvcnRlciA9IHRoaXMuX3JlcG9ydGVyc1tvYmpVUkxdO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJlcG9ydGVyLmZvcndhcmRTdWJzY3JpYmUoW29ialVSTCwgc3Vic2NyaXB0aW9uVVJMXSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlcG9ydGVyLmFkZENoaWxkcmVucyhjaGlsZHJlbnMpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgIF90aGlzLl9yZXBvcnRlcnNbb2JqVVJMXSA9IHJlcG9ydGVyO1xyXG5cclxuICAgICAgICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlXHJcbiAgICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lcixcclxuICAgICAgICAgICAgICAgIGJvZHk6IHsgY29kZTogMjAwLCByZXNvdXJjZTogb2JqVVJMLCBjaGlsZHJlblJlc291cmNlczogY2hpbGRyZW5zIH1cclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgLy9zZW5kIGNyZWF0ZSB0byBhbGwgb2JzZXJ2ZXJzLCByZXNwb25zZXMgd2lsbCBiZSBkZWxpdmVyIHRvIHRoZSBIeXBlcnR5IG93bmVyP1xyXG4gICAgICAgICAgICAgIC8vc2NoZWR1bGUgZm9yIG5leHQgY3ljbGUgbmVlZGVkLCBiZWNhdXNlIHRoZSBSZXBvcnRlciBzaG91bGQgYmUgYXZhaWxhYmxlLlxyXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy93aWxsIGludml0ZSBvdGhlciBoeXBlcnRpZXNcclxuICAgICAgICAgICAgICAgIF90aGlzLl9hdXRob3Jpc2UobXNnLCBvYmpVUkwpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAvL0ZMT1ctT1VUOiBlcnJvciBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlXHJcbiAgICAgIGxldCByZXNwb25zZU1zZyA9IHtcclxuICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lcixcclxuICAgICAgICBib2R5OiB7IGNvZGU6IDUwMCwgZGVzYzogcmVhc29uIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVzcG9uc2VNc2cpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfYXV0aG9yaXNlKG1zZywgb2JqVVJMKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IG9ialN1YnNjcmlwdG9yVVJMID0gb2JqVVJMICsgJy9zdWJzY3JpcHRpb24nO1xyXG5cclxuICAgIG1zZy5ib2R5LmF1dGhvcmlzZS5mb3JFYWNoKChoeXBlcnR5VVJMKSA9PiB7XHJcbiAgICAgIC8vRkxPVy1PVVQ6IHNlbmQgaW52aXRlcyB0byBsaXN0IG9mIHJlbW90ZSBTeW5jaGVyIC0+IF9vblJlbW90ZUNyZWF0ZSAtPiBvbk5vdGlmaWNhdGlvblxyXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogb2JqU3Vic2NyaXB0b3JVUkwsIHRvOiBoeXBlcnR5VVJMLFxyXG4gICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCBzb3VyY2U6IG1zZy5mcm9tLCB2YWx1ZTogbXNnLmJvZHkudmFsdWUsIHNjaGVtYTogbXNnLmJvZHkuc2NoZW1lIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIERhdGFPYmplY3RSZXBvcnRlciAtPiBkZWxldGVcclxuICBfb25EZWxldGUobXNnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBvYmpVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTtcclxuXHJcbiAgICBsZXQgb2JqZWN0ID0gX3RoaXMuX3JlcG9ydGVyc1tvYmpVUkxdO1xyXG4gICAgaWYgKG9iamVjdCkge1xyXG4gICAgICAvL1RPRE86IGlzIHRoZXJlIGFueSBwb2xpY3kgdmVyaWZpY2F0aW9uIGJlZm9yZSBkZWxldGU/XHJcbiAgICAgIG9iamVjdC5kZWxldGUoKTtcclxuXHJcbiAgICAgIC8vVE9ETzogdW5yZWdpc3RlciBvYmplY3Q/XHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxyXG4gICAgICAgIGJvZHk6IHsgY29kZTogMjAwIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBsb2NhbCBTeW5jaGVyIC0+IHN1YnNjcmliZVxyXG4gIF9vbkxvY2FsU3Vic2NyaWJlKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoIW1zZy5ib2R5LnJlc291cmNlKSB7XHJcbiAgICAvKiAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sXHJcbiAgICAgICAgYm9keTogeyBjb2RlOiA0MDQsIGRlc2NyaXB0aW9uOiAnbm90IGZvdW5kJyB9XHJcbiAgICAgIH0pOyovXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaHlwZXJ0eVVSTCA9IG1zZy5mcm9tO1xyXG4gICAgbGV0IG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlO1xyXG4gICAgbGV0IG9ialVSTFN1YnNjcmlwdGlvbiA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJztcclxuICAgIGxldCBjaGlsZEJhc2VVUkwgPSBvYmpVUkwgKyAnL2NoaWxkcmVuLyc7XHJcblxyXG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChvYmpVUkwpLmRvbWFpbjtcclxuXHJcbiAgICAvL2dldCBzY2hlbWEgZnJvbSBjYXRhbG9ndWUgYW5kIHBhcnNlIC0+IChjaGlsZHJlbilcclxuICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKG1zZy5ib2R5LnNjaGVtYSkudGhlbigoZGVzY3JpcHRvcikgPT4ge1xyXG4gICAgICBsZXQgcHJvcGVydGllcyA9IGRlc2NyaXB0b3Iuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXM7XHJcbiAgICAgIGxldCBjaGlsZHJlbnMgPSBwcm9wZXJ0aWVzLmNoaWxkcmVuID8gcHJvcGVydGllcy5jaGlsZHJlbi5jb25zdGFudCA6IFtdO1xyXG5cclxuICAgICAgLy9jaGlsZHJlbiBhZGRyZXNzZXNcclxuICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSBbXTtcclxuICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKG9ialVSTCArICcvY2hhbmdlcycpO1xyXG4gICAgICBjaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHN1YnNjcmlwdGlvbnMucHVzaChjaGlsZEJhc2VVUkwgKyBjaGlsZCkpO1xyXG5cclxuICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gdGhlIG1zZy1ub2RlLCByZWdpc3RlcmluZyBsaXN0ZW5lcnMgb24gdGhlIGJyb2tlclxyXG4gICAgICBsZXQgbm9kZVN1YnNjcmliZU1zZyA9IHtcclxuICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9zbScsXHJcbiAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHN1YnNjcmliZTogc3Vic2NyaXB0aW9ucywgc291cmNlOiBoeXBlcnR5VVJMIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vc3Vic2NyaWJlIGluIG1zZy1ub2RlXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ25vZGUtc3Vic2NyaWJlLXJlc3BvbnNlKG9ic2VydmVyKTogJywgcmVwbHkpO1xyXG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG5cclxuICAgICAgICAgIC8vRkxPVy1PVVQ6IHJlcGx5IHdpdGggcHJvdmlzaW9uYWwgcmVzcG9uc2VcclxuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBoeXBlcnR5VVJMLFxyXG4gICAgICAgICAgICBib2R5OiB7IGNvZGU6IDEwMCwgY2hpbGRyZW5SZXNvdXJjZXM6IGNoaWxkcmVucyB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvL0ZMT1ctT1VUOiBzdWJzY3JpYmUgbWVzc2FnZSB0byByZW1vdGUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlU3Vic2NyaWJlXHJcbiAgICAgICAgICBsZXQgb2JqU3Vic2NyaWJlTXNnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbixcclxuICAgICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbm9kZVN1YnNjcmliZU1zZy5ib2R5LmlkZW50aXR5LCBzdWJzY3JpYmVyOiBoeXBlcnR5VVJMIH1cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgLy9zdWJzY3JpYmUgdG8gcmVwb3J0ZXIgU01cclxuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uob2JqU3Vic2NyaWJlTXNnLCAocmVwbHkpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcG9ydGVyLXN1YnNjcmliZS1yZXNwb25zZTogJywgcmVwbHkpO1xyXG4gICAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuXHJcbiAgICAgICAgICAgICAgbGV0IG9ic2VydmVyID0gX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdO1xyXG4gICAgICAgICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyID0gbmV3IE9ic2VydmVyT2JqZWN0KF90aGlzLCBvYmpVUkwsIGNoaWxkcmVucyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF0gPSBvYnNlcnZlcjtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIC8vcmVnaXN0ZXIgbmV3IGh5cGVydHkgc3Vic2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuYWRkU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpO1xyXG5cclxuICAgICAgICAgICAgICAvL2ZvcndhcmQgdG8gaHlwZXJ0eTpcclxuICAgICAgICAgICAgICByZXBseS5pZCA9IG1zZy5pZDtcclxuICAgICAgICAgICAgICByZXBseS5mcm9tID0gX3RoaXMuX3VybDtcclxuICAgICAgICAgICAgICByZXBseS50byA9IGh5cGVydHlVUkw7XHJcbiAgICAgICAgICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlcGx5KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy9saXN0ZW5lciByZWplY3RlZFxyXG4gICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsXHJcbiAgICAgICAgICAgIGJvZHk6IHJlcGx5LmJvZHlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGxvY2FsIERhdGFPYmplY3RPYnNlcnZlciAtPiB1bnN1YnNjcmliZVxyXG4gIF9vbkxvY2FsVW5TdWJzY3JpYmUobXNnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBoeXBlcnR5VVJMID0gbXNnLmZyb207XHJcbiAgICBsZXQgb2JqVVJMID0gbXNnLmJvZHkucmVzb3VyY2U7XHJcblxyXG4gICAgbGV0IG9ic2VydmVyID0gX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdO1xyXG4gICAgaWYgKG9ic2VydmVyKSB7XHJcbiAgICAgIC8vVE9ETzogaXMgdGhlcmUgYW55IHBvbGljeSB2ZXJpZmljYXRpb24gYmVmb3JlIGRlbGV0ZT9cclxuICAgICAgb2JzZXJ2ZXIucmVtb3ZlU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpO1xyXG5cclxuICAgICAgLy9UT0RPOiBkZXN0cm95IG9iamVjdCBpbiB0aGUgcmVnaXN0cnk/XHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxyXG4gICAgICAgIGJvZHk6IHsgY29kZTogMjAwIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvL1RPRE86IHJlbW92ZSBPYmplY3QgaWYgbm8gbW9yZSBzdWJzY3JpcHRpb24/XHJcbiAgICAgIC8vZGVsZXRlIF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTeW5jaGVyTWFuYWdlcjtcclxuIiwiLypcclxuIEF1dGhvcjogR2VyYWludCBMdWZmIGFuZCBvdGhlcnNcclxuIFllYXI6IDIwMTNcclxuXHJcbiBUaGlzIGNvZGUgaXMgcmVsZWFzZWQgaW50byB0aGUgXCJwdWJsaWMgZG9tYWluXCIgYnkgaXRzIGF1dGhvcihzKS4gIEFueWJvZHkgbWF5IHVzZSwgYWx0ZXIgYW5kIGRpc3RyaWJ1dGUgdGhlIGNvZGUgd2l0aG91dCByZXN0cmljdGlvbi4gIFRoZSBhdXRob3IgbWFrZXMgbm8gZ3VhcmFudGVlcywgYW5kIHRha2VzIG5vIGxpYWJpbGl0eSBvZiBhbnkga2luZCBmb3IgdXNlIG9mIHRoaXMgY29kZS5cclxuXHJcbiBJZiB5b3UgZmluZCBhIGJ1ZyBvciBtYWtlIGFuIGltcHJvdmVtZW50LCBpdCB3b3VsZCBiZSBjb3VydGVvdXMgdG8gbGV0IHRoZSBhdXRob3Iga25vdywgYnV0IGl0IGlzIG5vdCBjb21wdWxzb3J5LlxyXG4gKi9cclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2tleXM/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRk9iamVjdCUyRmtleXNcclxuaWYgKCFPYmplY3Qua2V5cykge1xyXG4gICAgT2JqZWN0LmtleXMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXHJcbiAgICAgICAgICAgIGhhc0RvbnRFbnVtQnVnID0gISh7dG9TdHJpbmc6IG51bGx9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKSxcclxuICAgICAgICAgICAgZG9udEVudW1zID0gW1xyXG4gICAgICAgICAgICAgICAgJ3RvU3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICd0b0xvY2FsZVN0cmluZycsXHJcbiAgICAgICAgICAgICAgICAndmFsdWVPZicsXHJcbiAgICAgICAgICAgICAgICAnaGFzT3duUHJvcGVydHknLFxyXG4gICAgICAgICAgICAgICAgJ2lzUHJvdG90eXBlT2YnLFxyXG4gICAgICAgICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcclxuICAgICAgICAgICAgICAgICdjb25zdHJ1Y3RvcidcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZG9udEVudW1zTGVuZ3RoID0gZG9udEVudW1zLmxlbmd0aDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicgfHwgb2JqID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gbm9uLW9iamVjdCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3ApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaGFzRG9udEVudW1CdWcpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9udEVudW1zTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGRvbnRFbnVtc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZG9udEVudW1zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9O1xyXG4gICAgfSkoKTtcclxufVxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvY3JlYXRlXHJcbmlmICghT2JqZWN0LmNyZWF0ZSkge1xyXG4gICAgT2JqZWN0LmNyZWF0ZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gRigpIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobykge1xyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEYucHJvdG90eXBlID0gbztcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pKCk7XHJcbn1cclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheT9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGQXJyYXklMkZpc0FycmF5XHJcbmlmICghQXJyYXkuaXNBcnJheSkge1xyXG4gICAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uICh2QXJnKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2QXJnKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xyXG4gICAgfTtcclxufVxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mP3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZBcnJheSUyRmluZGV4T2ZcclxuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xyXG4gICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiAoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKSB7XHJcbiAgICAgICAgaWYgKHRoaXMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcclxuICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XHJcblxyXG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbiA9IDA7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIG4gPSBOdW1iZXIoYXJndW1lbnRzWzFdKTtcclxuICAgICAgICAgICAgaWYgKG4gIT09IG4pIHsgLy8gc2hvcnRjdXQgZm9yIHZlcmlmeWluZyBpZiBpdCdzIE5hTlxyXG4gICAgICAgICAgICAgICAgbiA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobiAhPT0gMCAmJiBuICE9PSBJbmZpbml0eSAmJiBuICE9PSAtSW5maW5pdHkpIHtcclxuICAgICAgICAgICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4gPj0gbGVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGsgPSBuID49IDAgPyBuIDogTWF0aC5tYXgobGVuIC0gTWF0aC5hYnMobiksIDApO1xyXG4gICAgICAgIGZvciAoOyBrIDwgbGVuOyBrKyspIHtcclxuICAgICAgICAgICAgaWYgKGsgaW4gdCAmJiB0W2tdID09PSBzZWFyY2hFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBHcnVuZ2V5IE9iamVjdC5pc0Zyb3plbiBoYWNrXHJcbmlmICghT2JqZWN0LmlzRnJvemVuKSB7XHJcbiAgICBPYmplY3QuaXNGcm96ZW4gPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IFwidHY0X3Rlc3RfZnJvemVuX2tleVwiO1xyXG4gICAgICAgIHdoaWxlIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBrZXkgKz0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgb2JqW2tleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICBkZWxldGUgb2JqW2tleV07XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLy8gQmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXJhaW50bHVmZi91cmktdGVtcGxhdGVzLCBidXQgd2l0aCBhbGwgdGhlIGRlLXN1YnN0aXR1dGlvbiBzdHVmZiByZW1vdmVkXHJcblxyXG52YXIgdXJpVGVtcGxhdGVHbG9iYWxNb2RpZmllcnMgPSB7XHJcbiAgICBcIitcIjogdHJ1ZSxcclxuICAgIFwiI1wiOiB0cnVlLFxyXG4gICAgXCIuXCI6IHRydWUsXHJcbiAgICBcIi9cIjogdHJ1ZSxcclxuICAgIFwiO1wiOiB0cnVlLFxyXG4gICAgXCI/XCI6IHRydWUsXHJcbiAgICBcIiZcIjogdHJ1ZVxyXG59O1xyXG52YXIgdXJpVGVtcGxhdGVTdWZmaWNlcyA9IHtcclxuICAgIFwiKlwiOiB0cnVlXHJcbn07XHJcblxyXG5mdW5jdGlvbiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHN0cmluZykge1xyXG4gICAgcmV0dXJuIGVuY29kZVVSSShzdHJpbmcpLnJlcGxhY2UoLyUyNVswLTldWzAtOV0vZywgZnVuY3Rpb24gKGRvdWJsZUVuY29kZWQpIHtcclxuICAgICAgICByZXR1cm4gXCIlXCIgKyBkb3VibGVFbmNvZGVkLnN1YnN0cmluZygzKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cmlUZW1wbGF0ZVN1YnN0aXR1dGlvbihzcGVjKSB7XHJcbiAgICB2YXIgbW9kaWZpZXIgPSBcIlwiO1xyXG4gICAgaWYgKHVyaVRlbXBsYXRlR2xvYmFsTW9kaWZpZXJzW3NwZWMuY2hhckF0KDApXSkge1xyXG4gICAgICAgIG1vZGlmaWVyID0gc3BlYy5jaGFyQXQoMCk7XHJcbiAgICAgICAgc3BlYyA9IHNwZWMuc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG4gICAgdmFyIHNlcGFyYXRvciA9IFwiXCI7XHJcbiAgICB2YXIgcHJlZml4ID0gXCJcIjtcclxuICAgIHZhciBzaG91bGRFc2NhcGUgPSB0cnVlO1xyXG4gICAgdmFyIHNob3dWYXJpYWJsZXMgPSBmYWxzZTtcclxuICAgIHZhciB0cmltRW1wdHlTdHJpbmcgPSBmYWxzZTtcclxuICAgIGlmIChtb2RpZmllciA9PT0gJysnKSB7XHJcbiAgICAgICAgc2hvdWxkRXNjYXBlID0gZmFsc2U7XHJcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSBcIi5cIikge1xyXG4gICAgICAgIHByZWZpeCA9IFwiLlwiO1xyXG4gICAgICAgIHNlcGFyYXRvciA9IFwiLlwiO1xyXG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gXCIvXCIpIHtcclxuICAgICAgICBwcmVmaXggPSBcIi9cIjtcclxuICAgICAgICBzZXBhcmF0b3IgPSBcIi9cIjtcclxuICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICcjJykge1xyXG4gICAgICAgIHByZWZpeCA9IFwiI1wiO1xyXG4gICAgICAgIHNob3VsZEVzY2FwZSA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJzsnKSB7XHJcbiAgICAgICAgcHJlZml4ID0gXCI7XCI7XHJcbiAgICAgICAgc2VwYXJhdG9yID0gXCI7XCI7XHJcbiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7XHJcbiAgICAgICAgdHJpbUVtcHR5U3RyaW5nID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICc/Jykge1xyXG4gICAgICAgIHByZWZpeCA9IFwiP1wiO1xyXG4gICAgICAgIHNlcGFyYXRvciA9IFwiJlwiO1xyXG4gICAgICAgIHNob3dWYXJpYWJsZXMgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJyYnKSB7XHJcbiAgICAgICAgcHJlZml4ID0gXCImXCI7XHJcbiAgICAgICAgc2VwYXJhdG9yID0gXCImXCI7XHJcbiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHZhck5hbWVzID0gW107XHJcbiAgICB2YXIgdmFyTGlzdCA9IHNwZWMuc3BsaXQoXCIsXCIpO1xyXG4gICAgdmFyIHZhclNwZWNzID0gW107XHJcbiAgICB2YXIgdmFyU3BlY01hcCA9IHt9O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHZhck5hbWUgPSB2YXJMaXN0W2ldO1xyXG4gICAgICAgIHZhciB0cnVuY2F0ZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHZhck5hbWUuaW5kZXhPZihcIjpcIikgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHZhck5hbWUuc3BsaXQoXCI6XCIpO1xyXG4gICAgICAgICAgICB2YXJOYW1lID0gcGFydHNbMF07XHJcbiAgICAgICAgICAgIHRydW5jYXRlID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN1ZmZpY2VzID0ge307XHJcbiAgICAgICAgd2hpbGUgKHVyaVRlbXBsYXRlU3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0pIHtcclxuICAgICAgICAgICAgc3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0gPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXJOYW1lID0gdmFyTmFtZS5zdWJzdHJpbmcoMCwgdmFyTmFtZS5sZW5ndGggLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhclNwZWMgPSB7XHJcbiAgICAgICAgICAgIHRydW5jYXRlOiB0cnVuY2F0ZSxcclxuICAgICAgICAgICAgbmFtZTogdmFyTmFtZSxcclxuICAgICAgICAgICAgc3VmZmljZXM6IHN1ZmZpY2VzXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXJTcGVjcy5wdXNoKHZhclNwZWMpO1xyXG4gICAgICAgIHZhclNwZWNNYXBbdmFyTmFtZV0gPSB2YXJTcGVjO1xyXG4gICAgICAgIHZhck5hbWVzLnB1c2godmFyTmFtZSk7XHJcbiAgICB9XHJcbiAgICB2YXIgc3ViRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFsdWVGdW5jdGlvbikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xyXG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhclNwZWNzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB2YXJTcGVjID0gdmFyU3BlY3NbaV07XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlRnVuY3Rpb24odmFyU3BlYy5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkgfHwgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCkpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXgrKztcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpID09PSBzdGFydEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gcHJlZml4O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IChzZXBhcmF0b3IgfHwgXCIsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3dWYXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgXCI9XCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyAoc2VwYXJhdG9yIHx8IFwiLFwiKSA6IFwiLFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyU3BlYy5zdWZmaWNlc1snKiddICYmIHNob3dWYXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyBcIj1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2hvdWxkRXNjYXBlID8gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlW2pdKS5yZXBsYWNlKC8hL2csIFwiJTIxXCIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZVtqXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcyAmJiAhdmFyU3BlYy5zdWZmaWNlc1snKiddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMubmFtZSArIFwiPVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/IChzZXBhcmF0b3IgfHwgXCIsXCIpIDogXCIsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudChrZXkpLnJlcGxhY2UoLyEvZywgXCIlMjFcIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/ICc9JyA6IFwiLFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWVba2V5XSkucmVwbGFjZSgvIS9nLCBcIiUyMVwiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWVba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmltRW1wdHlTdHJpbmcgfHwgdmFsdWUgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiPVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YXJTcGVjLnRydW5jYXRlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2YXJTcGVjLnRydW5jYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLnJlcGxhY2UoLyEvZywgXCIlMjFcIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIHN1YkZ1bmN0aW9uLnZhck5hbWVzID0gdmFyTmFtZXM7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHByZWZpeDogcHJlZml4LFxyXG4gICAgICAgIHN1YnN0aXR1dGlvbjogc3ViRnVuY3Rpb25cclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFVyaVRlbXBsYXRlKHRlbXBsYXRlKSB7XHJcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJpVGVtcGxhdGUpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVcmlUZW1wbGF0ZSh0ZW1wbGF0ZSk7XHJcbiAgICB9XHJcbiAgICB2YXIgcGFydHMgPSB0ZW1wbGF0ZS5zcGxpdChcIntcIik7XHJcbiAgICB2YXIgdGV4dFBhcnRzID0gW3BhcnRzLnNoaWZ0KCldO1xyXG4gICAgdmFyIHByZWZpeGVzID0gW107XHJcbiAgICB2YXIgc3Vic3RpdHV0aW9ucyA9IFtdO1xyXG4gICAgdmFyIHZhck5hbWVzID0gW107XHJcbiAgICB3aGlsZSAocGFydHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHMuc2hpZnQoKTtcclxuICAgICAgICB2YXIgc3BlYyA9IHBhcnQuc3BsaXQoXCJ9XCIpWzBdO1xyXG4gICAgICAgIHZhciByZW1haW5kZXIgPSBwYXJ0LnN1YnN0cmluZyhzcGVjLmxlbmd0aCArIDEpO1xyXG4gICAgICAgIHZhciBmdW5jcyA9IHVyaVRlbXBsYXRlU3Vic3RpdHV0aW9uKHNwZWMpO1xyXG4gICAgICAgIHN1YnN0aXR1dGlvbnMucHVzaChmdW5jcy5zdWJzdGl0dXRpb24pO1xyXG4gICAgICAgIHByZWZpeGVzLnB1c2goZnVuY3MucHJlZml4KTtcclxuICAgICAgICB0ZXh0UGFydHMucHVzaChyZW1haW5kZXIpO1xyXG4gICAgICAgIHZhck5hbWVzID0gdmFyTmFtZXMuY29uY2F0KGZ1bmNzLnN1YnN0aXR1dGlvbi52YXJOYW1lcyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZpbGwgPSBmdW5jdGlvbiAodmFsdWVGdW5jdGlvbikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0ZXh0UGFydHNbMF07XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzdGl0dXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb25zW2ldO1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gc3Vic3RpdHV0aW9uKHZhbHVlRnVuY3Rpb24pO1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gdGV4dFBhcnRzW2kgKyAxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICB0aGlzLnZhck5hbWVzID0gdmFyTmFtZXM7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcbn1cclxuXHJcblVyaVRlbXBsYXRlLnByb3RvdHlwZSA9IHtcclxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGU7XHJcbiAgICB9LFxyXG4gICAgZmlsbEZyb21PYmplY3Q6IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uICh2YXJOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmpbdmFyTmFtZV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBWYWxpZGF0b3JDb250ZXh0ID0gZnVuY3Rpb24gVmFsaWRhdG9yQ29udGV4dChwYXJlbnQsIGNvbGxlY3RNdWx0aXBsZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIHRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgIHRoaXMubWlzc2luZyA9IFtdO1xyXG4gICAgdGhpcy5taXNzaW5nTWFwID0ge307XHJcbiAgICB0aGlzLmZvcm1hdFZhbGlkYXRvcnMgPSBwYXJlbnQgPyBPYmplY3QuY3JlYXRlKHBhcmVudC5mb3JtYXRWYWxpZGF0b3JzKSA6IHt9O1xyXG4gICAgdGhpcy5zY2hlbWFzID0gcGFyZW50ID8gT2JqZWN0LmNyZWF0ZShwYXJlbnQuc2NoZW1hcykgOiB7fTtcclxuICAgIHRoaXMuY29sbGVjdE11bHRpcGxlID0gY29sbGVjdE11bHRpcGxlO1xyXG4gICAgdGhpcy5lcnJvcnMgPSBbXTtcclxuICAgIHRoaXMuaGFuZGxlRXJyb3IgPSBjb2xsZWN0TXVsdGlwbGUgPyB0aGlzLmNvbGxlY3RFcnJvciA6IHRoaXMucmV0dXJuRXJyb3I7XHJcbiAgICBpZiAoY2hlY2tSZWN1cnNpdmUpIHtcclxuICAgICAgICB0aGlzLmNoZWNrUmVjdXJzaXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNjYW5uZWQgPSBbXTtcclxuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4gPSBbXTtcclxuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107XHJcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9ycyA9IFtdO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleSA9ICd0djRfdmFsaWRhdGlvbl9pZCc7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5ID0gJ3R2NF92YWxpZGF0aW9uX2Vycm9yc19pZCc7XHJcbiAgICB9XHJcbiAgICBpZiAodHJhY2tVbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcclxuICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XHJcbiAgICB9XHJcbiAgICB0aGlzLmVycm9yUmVwb3J0ZXIgPSBlcnJvclJlcG9ydGVyIHx8IGRlZmF1bHRFcnJvclJlcG9ydGVyKCdlbicpO1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLmVycm9yUmVwb3J0ZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZWJ1ZycpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5kZWZpbmVkS2V5d29yZHMgPSB7fTtcclxuICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyZW50LmRlZmluZWRLZXl3b3Jkcykge1xyXG4gICAgICAgICAgICB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXldID0gcGFyZW50LmRlZmluZWRLZXl3b3Jkc1trZXldLnNsaWNlKDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZGVmaW5lS2V5d29yZCA9IGZ1bmN0aW9uIChrZXl3b3JkLCBrZXl3b3JkRnVuY3Rpb24pIHtcclxuICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdID0gdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0gfHwgW107XHJcbiAgICB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXl3b3JkXS5wdXNoKGtleXdvcmRGdW5jdGlvbik7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmNyZWF0ZUVycm9yID0gZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMsIGRhdGEsIHNjaGVtYSkge1xyXG4gICAgdmFyIGVycm9yID0gbmV3IFZhbGlkYXRpb25FcnJvcihjb2RlLCBtZXNzYWdlUGFyYW1zLCBkYXRhUGF0aCwgc2NoZW1hUGF0aCwgc3ViRXJyb3JzKTtcclxuICAgIGVycm9yLm1lc3NhZ2UgPSB0aGlzLmVycm9yUmVwb3J0ZXIoZXJyb3IsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJldHVybkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmNvbGxlY3RFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaChlcnJvcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucHJlZml4RXJyb3JzID0gZnVuY3Rpb24gKHN0YXJ0SW5kZXgsIGRhdGFQYXRoLCBzY2hlbWFQYXRoKSB7XHJcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRoaXMuZXJyb3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvcnNbaV0gPSB0aGlzLmVycm9yc1tpXS5wcmVmaXhXaXRoKGRhdGFQYXRoLCBzY2hlbWFQYXRoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5iYW5Vbmtub3duUHJvcGVydGllcyA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEpIHtcclxuICAgIGZvciAodmFyIHVua25vd25QYXRoIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpIHtcclxuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuVU5LTk9XTl9QUk9QRVJUWSwge3BhdGg6IHVua25vd25QYXRofSwgdW5rbm93blBhdGgsIFwiXCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmFkZEZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQsIHZhbGlkYXRvcikge1xyXG4gICAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGZvcm1hdCkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZEZvcm1hdChrZXksIGZvcm1hdFtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZvcm1hdFZhbGlkYXRvcnNbZm9ybWF0XSA9IHZhbGlkYXRvcjtcclxufTtcclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucmVzb2x2ZVJlZnMgPSBmdW5jdGlvbiAoc2NoZW1hLCB1cmxIaXN0b3J5KSB7XHJcbiAgICBpZiAoc2NoZW1hWyckcmVmJ10gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHVybEhpc3RvcnkgPSB1cmxIaXN0b3J5IHx8IHt9O1xyXG4gICAgICAgIGlmICh1cmxIaXN0b3J5W3NjaGVtYVsnJHJlZiddXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkNJUkNVTEFSX1JFRkVSRU5DRSwge3VybHM6IE9iamVjdC5rZXlzKHVybEhpc3RvcnkpLmpvaW4oJywgJyl9LCAnJywgJycsIG51bGwsIHVuZGVmaW5lZCwgc2NoZW1hKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXJsSGlzdG9yeVtzY2hlbWFbJyRyZWYnXV0gPSB0cnVlO1xyXG4gICAgICAgIHNjaGVtYSA9IHRoaXMuZ2V0U2NoZW1hKHNjaGVtYVsnJHJlZiddLCB1cmxIaXN0b3J5KTtcclxuICAgIH1cclxuICAgIHJldHVybiBzY2hlbWE7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHVybEhpc3RvcnkpIHtcclxuICAgIHZhciBzY2hlbWE7XHJcbiAgICBpZiAodGhpcy5zY2hlbWFzW3VybF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHNjaGVtYSA9IHRoaXMuc2NoZW1hc1t1cmxdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSwgdXJsSGlzdG9yeSk7XHJcbiAgICB9XHJcbiAgICB2YXIgYmFzZVVybCA9IHVybDtcclxuICAgIHZhciBmcmFnbWVudCA9IFwiXCI7XHJcbiAgICBpZiAodXJsLmluZGV4T2YoJyMnKSAhPT0gLTEpIHtcclxuICAgICAgICBmcmFnbWVudCA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YoXCIjXCIpICsgMSk7XHJcbiAgICAgICAgYmFzZVVybCA9IHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoXCIjXCIpKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdGhpcy5zY2hlbWFzW2Jhc2VVcmxdID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHNjaGVtYSA9IHRoaXMuc2NoZW1hc1tiYXNlVXJsXTtcclxuICAgICAgICB2YXIgcG9pbnRlclBhdGggPSBkZWNvZGVVUklDb21wb25lbnQoZnJhZ21lbnQpO1xyXG4gICAgICAgIGlmIChwb2ludGVyUGF0aCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEsIHVybEhpc3RvcnkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocG9pbnRlclBhdGguY2hhckF0KDApICE9PSBcIi9cIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGFydHMgPSBwb2ludGVyUGF0aC5zcGxpdChcIi9cIikuc2xpY2UoMSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gcGFydHNbaV0ucmVwbGFjZSgvfjEvZywgXCIvXCIpLnJlcGxhY2UoL34wL2csIFwiflwiKTtcclxuICAgICAgICAgICAgaWYgKHNjaGVtYVtjb21wb25lbnRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHNjaGVtYSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNjaGVtYSA9IHNjaGVtYVtjb21wb25lbnRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2NoZW1hICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5taXNzaW5nW2Jhc2VVcmxdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLm1pc3NpbmcucHVzaChiYXNlVXJsKTtcclxuICAgICAgICB0aGlzLm1pc3NpbmdbYmFzZVVybF0gPSBiYXNlVXJsO1xyXG4gICAgICAgIHRoaXMubWlzc2luZ01hcFtiYXNlVXJsXSA9IGJhc2VVcmw7XHJcbiAgICB9XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnNlYXJjaFNjaGVtYXMgPSBmdW5jdGlvbiAoc2NoZW1hLCB1cmwpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaFNjaGVtYXMoc2NoZW1hW2ldLCB1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5pZCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpZiAoaXNUcnVzdGVkVXJsKHVybCwgc2NoZW1hLmlkKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NoZW1hc1tzY2hlbWEuaWRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYXNbc2NoZW1hLmlkXSA9IHNjaGVtYTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgIT09IFwiZW51bVwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVtrZXldID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYVtrZXldLCB1cmwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwiJHJlZlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVyaSA9IGdldERvY3VtZW50VXJpKHNjaGVtYVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXJpICYmIHRoaXMuc2NoZW1hc1t1cmldID09PSB1bmRlZmluZWQgJiYgdGhpcy5taXNzaW5nTWFwW3VyaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pc3NpbmdNYXBbdXJpXSA9IHVyaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmFkZFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHNjaGVtYSkge1xyXG4gICAgLy9vdmVybG9hZFxyXG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzY2hlbWEgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09ICdvYmplY3QnICYmIHR5cGVvZiB1cmwuaWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHNjaGVtYSA9IHVybDtcclxuICAgICAgICAgICAgdXJsID0gc2NoZW1hLmlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh1cmwgPT09IGdldERvY3VtZW50VXJpKHVybCkgKyBcIiNcIikge1xyXG4gICAgICAgIC8vIFJlbW92ZSBlbXB0eSBmcmFnbWVudFxyXG4gICAgICAgIHVybCA9IGdldERvY3VtZW50VXJpKHVybCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNjaGVtYXNbdXJsXSA9IHNjaGVtYTtcclxuICAgIGRlbGV0ZSB0aGlzLm1pc3NpbmdNYXBbdXJsXTtcclxuICAgIG5vcm1TY2hlbWEoc2NoZW1hLCB1cmwpO1xyXG4gICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYSwgdXJsKTtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYU1hcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtYXAgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNjaGVtYXMpIHtcclxuICAgICAgICBtYXBba2V5XSA9IHRoaXMuc2NoZW1hc1trZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1hcDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYVVyaXMgPSBmdW5jdGlvbiAoZmlsdGVyUmVnRXhwKSB7XHJcbiAgICB2YXIgbGlzdCA9IFtdO1xyXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuc2NoZW1hcykge1xyXG4gICAgICAgIGlmICghZmlsdGVyUmVnRXhwIHx8IGZpbHRlclJlZ0V4cC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgbGlzdC5wdXNoKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxpc3Q7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcyA9IGZ1bmN0aW9uIChmaWx0ZXJSZWdFeHApIHtcclxuICAgIHZhciBsaXN0ID0gW107XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5taXNzaW5nTWFwKSB7XHJcbiAgICAgICAgaWYgKCFmaWx0ZXJSZWdFeHAgfHwgZmlsdGVyUmVnRXhwLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICBsaXN0LnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGlzdDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmRyb3BTY2hlbWFzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5zY2hlbWFzID0ge307XHJcbiAgICB0aGlzLnJlc2V0KCk7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5taXNzaW5nID0gW107XHJcbiAgICB0aGlzLm1pc3NpbmdNYXAgPSB7fTtcclxuICAgIHRoaXMuZXJyb3JzID0gW107XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFsbCA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGRhdGFQYXRoUGFydHMsIHNjaGVtYVBhdGhQYXJ0cywgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICB2YXIgdG9wTGV2ZWw7XHJcbiAgICBzY2hlbWEgPSB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSk7XHJcbiAgICBpZiAoIXNjaGVtYSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBWYWxpZGF0aW9uRXJyb3IpIHtcclxuICAgICAgICB0aGlzLmVycm9ycy5wdXNoKHNjaGVtYSk7XHJcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xyXG4gICAgdmFyIGZyb3plbkluZGV4LCBzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggPSBudWxsLCBzY2FubmVkU2NoZW1hc0luZGV4ID0gbnVsbDtcclxuICAgIGlmICh0aGlzLmNoZWNrUmVjdXJzaXZlICYmIGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgdG9wTGV2ZWwgPSAhdGhpcy5zY2FubmVkLmxlbmd0aDtcclxuICAgICAgICBpZiAoZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKSB7XHJcbiAgICAgICAgICAgIHZhciBzY2hlbWFJbmRleCA9IGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5pbmRleE9mKHNjaGVtYSk7XHJcbiAgICAgICAgICAgIGlmIChzY2hlbWFJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuY29uY2F0KGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtzY2hlbWFJbmRleF0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbihkYXRhKSkge1xyXG4gICAgICAgICAgICBmcm96ZW5JbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plbi5pbmRleE9mKGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoZnJvemVuSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJvemVuU2NoZW1hSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2Zyb3plbkluZGV4XS5pbmRleE9mKHNjaGVtYSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJvemVuU2NoZW1hSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5jb25jYXQodGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bZnJvemVuU2NoZW1hSW5kZXhdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNjYW5uZWQucHVzaChkYXRhKTtcclxuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuKGRhdGEpKSB7XHJcbiAgICAgICAgICAgIGlmIChmcm96ZW5JbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGZyb3plbkluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plbi5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcy5wdXNoKFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2Zyb3plbkluZGV4XS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSBzY2hlbWE7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSBbXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIWRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwgdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGEsIHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vSUUgNy84IHdvcmthcm91bmRcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV0gPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzY2FubmVkU2NoZW1hc0luZGV4ID0gZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmxlbmd0aDtcclxuICAgICAgICAgICAgZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldW3NjYW5uZWRTY2hlbWFzSW5kZXhdID0gc2NoZW1hO1xyXG4gICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XHJcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQmFzaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU51bWVyaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQXJyYXkoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9iamVjdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVIeXBlcm1lZGlhKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVGb3JtYXQoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCBudWxsO1xyXG5cclxuICAgIGlmICh0b3BMZXZlbCkge1xyXG4gICAgICAgIHdoaWxlICh0aGlzLnNjYW5uZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5zY2FubmVkLnBvcCgpO1xyXG4gICAgICAgICAgICBkZWxldGUgaXRlbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4gPSBbXTtcclxuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVycm9yIHx8IGVycm9yQ291bnQgIT09IHRoaXMuZXJyb3JzLmxlbmd0aCkge1xyXG4gICAgICAgIHdoaWxlICgoZGF0YVBhdGhQYXJ0cyAmJiBkYXRhUGF0aFBhcnRzLmxlbmd0aCkgfHwgKHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoKSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YVBhcnQgPSAoZGF0YVBhdGhQYXJ0cyAmJiBkYXRhUGF0aFBhcnRzLmxlbmd0aCkgPyBcIlwiICsgZGF0YVBhdGhQYXJ0cy5wb3AoKSA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBzY2hlbWFQYXJ0ID0gKHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoKSA/IFwiXCIgKyBzY2hlbWFQYXRoUGFydHMucG9wKCkgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3IucHJlZml4V2l0aChkYXRhUGFydCwgc2NoZW1hUGFydCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wcmVmaXhFcnJvcnMoZXJyb3JDb3VudCwgZGF0YVBhcnQsIHNjaGVtYVBhcnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ICE9PSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCk7XHJcbiAgICB9IGVsc2UgaWYgKHNjYW5uZWRTY2hlbWFzSW5kZXggIT09IG51bGwpIHtcclxuICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSB0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcclxufTtcclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICBpZiAodHlwZW9mIHNjaGVtYS5mb3JtYXQgIT09ICdzdHJpbmcnIHx8ICF0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0pIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHZhciBlcnJvck1lc3NhZ2UgPSB0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0uY2FsbChudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgaWYgKHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7bWVzc2FnZTogZXJyb3JNZXNzYWdlfSwgJycsICcvZm9ybWF0JywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgIH0gZWxzZSBpZiAoZXJyb3JNZXNzYWdlICYmIHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7bWVzc2FnZTogZXJyb3JNZXNzYWdlLm1lc3NhZ2UgfHwgXCI/XCJ9LCBlcnJvck1lc3NhZ2UuZGF0YVBhdGggfHwgJycsIGVycm9yTWVzc2FnZS5zY2hlbWFQYXRoIHx8IFwiL2Zvcm1hdFwiLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlRGVmaW5lZEtleXdvcmRzID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5kZWZpbmVkS2V5d29yZHMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVtrZXldID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbGlkYXRpb25GdW5jdGlvbnMgPSB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXldO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsaWRhdGlvbkZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZnVuYyA9IHZhbGlkYXRpb25GdW5jdGlvbnNbaV07XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jKGRhdGEsIHNjaGVtYVtrZXldLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcmVzdWx0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5LRVlXT1JEX0NVU1RPTSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpLnByZWZpeFdpdGgobnVsbCwga2V5KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gcmVzdWx0LmNvZGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFFcnJvckNvZGVzW2NvZGVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5kZWZpbmVkIGVycm9yIGNvZGUgKHVzZSBkZWZpbmVFcnJvcik6ICcgKyBjb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEVycm9yQ29kZXNbY29kZV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSBFcnJvckNvZGVzLktFWVdPUkRfQ1VTVE9NO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VQYXJhbXMgPSAodHlwZW9mIHJlc3VsdC5tZXNzYWdlID09PSAnb2JqZWN0JykgPyByZXN1bHQubWVzc2FnZSA6IHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZSB8fCBcIj9cIlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciBzY2hlbWFQYXRoID0gcmVzdWx0LnNjaGVtYVBhdGggfHwgKFwiL1wiICsga2V5LnJlcGxhY2UoL34vZywgJ34wJykucmVwbGFjZSgvXFwvL2csICd+MScpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIHJlc3VsdC5kYXRhUGF0aCB8fCBudWxsLCBzY2hlbWFQYXRoLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5mdW5jdGlvbiByZWN1cnNpdmVDb21wYXJlKEEsIEIpIHtcclxuICAgIGlmIChBID09PSBCKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoQSAmJiBCICYmIHR5cGVvZiBBID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBCID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoQSkgIT09IEFycmF5LmlzQXJyYXkoQikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShBKSkge1xyXG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggIT09IEIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBBLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlY3Vyc2l2ZUNvbXBhcmUoQVtpXSwgQltpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIga2V5O1xyXG4gICAgICAgICAgICBmb3IgKGtleSBpbiBBKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQltrZXldID09PSB1bmRlZmluZWQgJiYgQVtrZXldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gQikge1xyXG4gICAgICAgICAgICAgICAgaWYgKEFba2V5XSA9PT0gdW5kZWZpbmVkICYmIEJba2V5XSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoa2V5IGluIEEpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVjdXJzaXZlQ29tcGFyZShBW2tleV0sIEJba2V5XSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQmFzaWMgPSBmdW5jdGlvbiB2YWxpZGF0ZUJhc2ljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICB2YXIgZXJyb3I7XHJcbiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3IucHJlZml4V2l0aChudWxsLCBcInR5cGVcIik7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlRW51bShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3IucHJlZml4V2l0aChudWxsLCBcInR5cGVcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlVHlwZSA9IGZ1bmN0aW9uIHZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEpIHtcclxuICAgIGlmIChzY2hlbWEudHlwZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICB2YXIgZGF0YVR5cGUgPSB0eXBlb2YgZGF0YTtcclxuICAgIGlmIChkYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgZGF0YVR5cGUgPSBcIm51bGxcIjtcclxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgIGRhdGFUeXBlID0gXCJhcnJheVwiO1xyXG4gICAgfVxyXG4gICAgdmFyIGFsbG93ZWRUeXBlcyA9IHNjaGVtYS50eXBlO1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFsbG93ZWRUeXBlcykpIHtcclxuICAgICAgICBhbGxvd2VkVHlwZXMgPSBbYWxsb3dlZFR5cGVzXTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbG93ZWRUeXBlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciB0eXBlID0gYWxsb3dlZFR5cGVzW2ldO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBkYXRhVHlwZSB8fCAodHlwZSA9PT0gXCJpbnRlZ2VyXCIgJiYgZGF0YVR5cGUgPT09IFwibnVtYmVyXCIgJiYgKGRhdGEgJSAxID09PSAwKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5JTlZBTElEX1RZUEUsIHtcclxuICAgICAgICB0eXBlOiBkYXRhVHlwZSxcclxuICAgICAgICBleHBlY3RlZDogYWxsb3dlZFR5cGVzLmpvaW4oXCIvXCIpXHJcbiAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUVudW0gPSBmdW5jdGlvbiB2YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hKSB7XHJcbiAgICBpZiAoc2NoZW1hW1wiZW51bVwiXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYVtcImVudW1cIl0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgZW51bVZhbCA9IHNjaGVtYVtcImVudW1cIl1baV07XHJcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZUNvbXBhcmUoZGF0YSwgZW51bVZhbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5FTlVNX01JU01BVENILCB7dmFsdWU6ICh0eXBlb2YgSlNPTiAhPT0gJ3VuZGVmaW5lZCcpID8gSlNPTi5zdHJpbmdpZnkoZGF0YSkgOiBkYXRhfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOdW1lcmljID0gZnVuY3Rpb24gdmFsaWRhdGVOdW1lcmljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU11bHRpcGxlT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU1pbk1heChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlTmFOKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IG51bGw7XHJcbn07XHJcblxyXG52YXIgQ0xPU0VfRU5PVUdIX0xPVyA9IE1hdGgucG93KDIsIC01MSk7XHJcbnZhciBDTE9TRV9FTk9VR0hfSElHSCA9IDEgLSBDTE9TRV9FTk9VR0hfTE9XO1xyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU11bHRpcGxlT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZU11bHRpcGxlT2YoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICB2YXIgbXVsdGlwbGVPZiA9IHNjaGVtYS5tdWx0aXBsZU9mIHx8IHNjaGVtYS5kaXZpc2libGVCeTtcclxuICAgIGlmIChtdWx0aXBsZU9mID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHZhciByZW1haW5kZXIgPSAoZGF0YSAvIG11bHRpcGxlT2YpICUgMTtcclxuICAgICAgICBpZiAocmVtYWluZGVyID49IENMT1NFX0VOT1VHSF9MT1cgJiYgcmVtYWluZGVyIDwgQ0xPU0VfRU5PVUdIX0hJR0gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTVVMVElQTEVfT0YsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogbXVsdGlwbGVPZlxyXG4gICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heCA9IGZ1bmN0aW9uIHZhbGlkYXRlTWluTWF4KGRhdGEsIHNjaGVtYSkge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hLm1pbmltdW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChkYXRhIDwgc2NoZW1hLm1pbmltdW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUlOSU1VTSwge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluaW11bVxyXG4gICAgICAgICAgICB9LCAnJywgJy9taW5pbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtICYmIGRhdGEgPT09IHNjaGVtYS5taW5pbXVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFLCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5pbXVtXHJcbiAgICAgICAgICAgIH0sICcnLCAnL2V4Y2x1c2l2ZU1pbmltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzY2hlbWEubWF4aW11bSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGRhdGEgPiBzY2hlbWEubWF4aW11bSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NQVhJTVVNLCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhpbXVtXHJcbiAgICAgICAgICAgIH0sICcnLCAnL21heGltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2NoZW1hLmV4Y2x1c2l2ZU1heGltdW0gJiYgZGF0YSA9PT0gc2NoZW1hLm1heGltdW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heGltdW1cclxuICAgICAgICAgICAgfSwgJycsICcvZXhjbHVzaXZlTWF4aW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU5hTiA9IGZ1bmN0aW9uIHZhbGlkYXRlTmFOKGRhdGEsIHNjaGVtYSkge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNOYU4oZGF0YSkgPT09IHRydWUgfHwgZGF0YSA9PT0gSW5maW5pdHkgfHwgZGF0YSA9PT0gLUluZmluaXR5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTk9UX0FfTlVNQkVSLCB7dmFsdWU6IGRhdGF9LCAnJywgJy90eXBlJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmcgPSBmdW5jdGlvbiB2YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTdHJpbmdMZW5ndGgoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZVN0cmluZ1BhdHRlcm4oZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nTGVuZ3RoID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdMZW5ndGgoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWEubWluTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBzY2hlbWEubWluTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX0xFTkdUSF9TSE9SVCwge1xyXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5MZW5ndGhcclxuICAgICAgICAgICAgfSwgJycsICcvbWluTGVuZ3RoJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hLm1heExlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gc2NoZW1hLm1heExlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19MRU5HVEhfTE9ORywge1xyXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhMZW5ndGhcclxuICAgICAgICAgICAgfSwgJycsICcvbWF4TGVuZ3RoJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nUGF0dGVybiA9IGZ1bmN0aW9uIHZhbGlkYXRlU3RyaW5nUGF0dGVybihkYXRhLCBzY2hlbWEpIHtcclxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiB8fCAodHlwZW9mIHNjaGVtYS5wYXR0ZXJuICE9PSBcInN0cmluZ1wiICYmICEoc2NoZW1hLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApKSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdmFyIHJlZ2V4cDtcclxuICAgIGlmIChzY2hlbWEucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgIHJlZ2V4cCA9IHNjaGVtYS5wYXR0ZXJuO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIGJvZHksIGZsYWdzID0gJyc7XHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFsc1xyXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTcuOC41XHJcbiAgICAgICAgdmFyIGxpdGVyYWwgPSBzY2hlbWEucGF0dGVybi5tYXRjaCgvXlxcLyguKylcXC8oW2ltZ10qKSQvKTtcclxuICAgICAgICBpZiAobGl0ZXJhbCkge1xyXG4gICAgICAgICAgICBib2R5ID0gbGl0ZXJhbFsxXTtcclxuICAgICAgICAgICAgZmxhZ3MgPSBsaXRlcmFsWzJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYm9keSA9IHNjaGVtYS5wYXR0ZXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZWdleHAgPSBuZXcgUmVnRXhwKGJvZHksIGZsYWdzKTtcclxuICAgIH1cclxuICAgIGlmICghcmVnZXhwLnRlc3QoZGF0YSkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19QQVRURVJOLCB7cGF0dGVybjogc2NoZW1hLnBhdHRlcm59LCAnJywgJy9wYXR0ZXJuJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheSA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXkoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVBcnJheUxlbmd0aChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheUxlbmd0aCA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlMZW5ndGgoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICB2YXIgZXJyb3I7XHJcbiAgICBpZiAoc2NoZW1hLm1pbkl0ZW1zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBzY2hlbWEubWluSXRlbXMpIHtcclxuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfTEVOR1RIX1NIT1JULCB7XHJcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbkl0ZW1zXHJcbiAgICAgICAgICAgIH0sICcnLCAnL21pbkl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hLm1heEl0ZW1zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBzY2hlbWEubWF4SXRlbXMpIHtcclxuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfTEVOR1RIX0xPTkcsIHtcclxuICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4SXRlbXNcclxuICAgICAgICAgICAgfSwgJycsICcvbWF4SXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zID0gZnVuY3Rpb24gdmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGRhdGEsIHNjaGVtYSkge1xyXG4gICAgaWYgKHNjaGVtYS51bmlxdWVJdGVtcykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCBkYXRhLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlQ29tcGFyZShkYXRhW2ldLCBkYXRhW2pdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9VTklRVUUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gxOiBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDI6IGpcclxuICAgICAgICAgICAgICAgICAgICB9LCAnJywgJy91bmlxdWVJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlJdGVtcyA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgaWYgKHNjaGVtYS5pdGVtcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3IsIGk7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEuaXRlbXMpKSB7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCBzY2hlbWEuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5pdGVtc1tpXSwgW2ldLCBbXCJpdGVtc1wiLCBpXSwgZGF0YVBvaW50ZXJQYXRoICsgXCIvXCIgKyBpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzY2hlbWEuYWRkaXRpb25hbEl0ZW1zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSAodGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0FERElUSU9OQUxfSVRFTVMsIHt9LCAnLycgKyBpLCAnL2FkZGl0aW9uYWxJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5hZGRpdGlvbmFsSXRlbXMsIFtpXSwgW1wiYWRkaXRpb25hbEl0ZW1zXCJdLCBkYXRhUG9pbnRlclBhdGggKyBcIi9cIiArIGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5pdGVtcywgW2ldLCBbXCJpdGVtc1wiXSwgZGF0YVBvaW50ZXJQYXRoICsgXCIvXCIgKyBpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwib2JqZWN0XCIgfHwgZGF0YSA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xyXG4gICAgdmFyIGVycm9yO1xyXG4gICAgaWYgKHNjaGVtYS5taW5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoa2V5cy5sZW5ndGggPCBzY2hlbWEubWluUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNLCB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvdW50OiBrZXlzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5Qcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgIH0sICcnLCAnL21pblByb3BlcnRpZXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzY2hlbWEubWF4UHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gc2NoZW1hLm1heFByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSwge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlDb3VudDoga2V5cy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4UHJvcGVydGllc1xyXG4gICAgICAgICAgICB9LCAnJywgJy9tYXhQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICBpZiAoc2NoZW1hLnJlcXVpcmVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5yZXF1aXJlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gc2NoZW1hLnJlcXVpcmVkW2ldO1xyXG4gICAgICAgICAgICBpZiAoZGF0YVtrZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUkVRVUlSRUQsIHtrZXk6IGtleX0sICcnLCAnL3JlcXVpcmVkLycgKyBpLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcclxuICAgIHZhciBlcnJvcjtcclxuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgdmFyIGtleVBvaW50ZXJQYXRoID0gZGF0YVBvaW50ZXJQYXRoICsgXCIvXCIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cXC8vZywgJ34xJyk7XHJcbiAgICAgICAgdmFyIGZvdW5kTWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICBpZiAoc2NoZW1hLnByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCAmJiBzY2hlbWEucHJvcGVydGllc1trZXldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZm91bmRNYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtrZXldLCBzY2hlbWEucHJvcGVydGllc1trZXldLCBba2V5XSwgW1wicHJvcGVydGllc1wiLCBrZXldLCBrZXlQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgcGF0dGVybktleSBpbiBzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKHBhdHRlcm5LZXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4cC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5LZXldLCBba2V5XSwgW1wicGF0dGVyblByb3BlcnRpZXNcIiwgcGF0dGVybktleV0sIGtleVBvaW50ZXJQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZm91bmRNYXRjaCkge1xyXG4gICAgICAgICAgICBpZiAoc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVMsIHtrZXk6IGtleX0sICcnLCAnL2FkZGl0aW9uYWxQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKGtleSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzLCBba2V5XSwgW1wiYWRkaXRpb25hbFByb3BlcnRpZXNcIl0sIGtleVBvaW50ZXJQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyAmJiAhdGhpcy5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0gPSB0cnVlO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICB2YXIgZXJyb3I7XHJcbiAgICBpZiAoc2NoZW1hLmRlcGVuZGVuY2llcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZm9yICh2YXIgZGVwS2V5IGluIHNjaGVtYS5kZXBlbmRlbmNpZXMpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFbZGVwS2V5XSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVwID0gc2NoZW1hLmRlcGVuZGVuY2llc1tkZXBLZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXAgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtkZXBdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3Npbmc6IGRlcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBkZXBLZXkpLnByZWZpeFdpdGgobnVsbCwgXCJkZXBlbmRlbmNpZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRlcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRLZXkgPSBkZXBbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW3JlcXVpcmVkS2V5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfREVQRU5ERU5DWV9LRVksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nOiByZXF1aXJlZEtleVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJycsICcvJyArIGksIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBkZXBLZXkpLnByZWZpeFdpdGgobnVsbCwgXCJkZXBlbmRlbmNpZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgZGVwLCBbXSwgW1wiZGVwZW5kZW5jaWVzXCIsIGRlcEtleV0sIGRhdGFQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVDb21iaW5hdGlvbnMgPSBmdW5jdGlvbiB2YWxpZGF0ZUNvbWJpbmF0aW9ucyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVBbGxPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQW55T2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9uZU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVOb3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQWxsT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZUFsbE9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBpZiAoc2NoZW1hLmFsbE9mID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHZhciBlcnJvcjtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmFsbE9mLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5hbGxPZltpXTtcclxuICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHN1YlNjaGVtYSwgW10sIFtcImFsbE9mXCIsIGldLCBkYXRhUG9pbnRlclBhdGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQW55T2YgPSBmdW5jdGlvbiB2YWxpZGF0ZUFueU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBpZiAoc2NoZW1hLmFueU9mID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHZhciBlcnJvcnMgPSBbXTtcclxuICAgIHZhciBzdGFydEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XHJcbiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRocztcclxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3JBdEVuZCA9IHRydWU7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5hbnlPZi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3ViU2NoZW1hID0gc2NoZW1hLmFueU9mW2ldO1xyXG5cclxuICAgICAgICB2YXIgZXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDtcclxuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHN1YlNjaGVtYSwgW10sIFtcImFueU9mXCIsIGldLCBkYXRhUG9pbnRlclBhdGgpO1xyXG5cclxuICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgZXJyb3JDb3VudCA9PT0gdGhpcy5lcnJvcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtub3duS2V5IGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHVua25vd25LZXkgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNvbnRpbnVlIGxvb3Bpbmcgc28gd2UgY2F0Y2ggYWxsIHRoZSBwcm9wZXJ0eSBkZWZpbml0aW9ucywgYnV0IHdlIGRvbid0IHdhbnQgdG8gcmV0dXJuIGFuIGVycm9yXHJcbiAgICAgICAgICAgICAgICBlcnJvckF0RW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvci5wcmVmaXhXaXRoKG51bGwsIFwiXCIgKyBpKS5wcmVmaXhXaXRoKG51bGwsIFwiYW55T2ZcIikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3JBdEVuZCkge1xyXG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KSk7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQU5ZX09GX01JU1NJTkcsIHt9LCBcIlwiLCBcIi9hbnlPZlwiLCBlcnJvcnMsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9uZU9mID0gZnVuY3Rpb24gdmFsaWRhdGVPbmVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgaWYgKHNjaGVtYS5vbmVPZiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICB2YXIgdmFsaWRJbmRleCA9IG51bGw7XHJcbiAgICB2YXIgZXJyb3JzID0gW107XHJcbiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xyXG4gICAgdmFyIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzLCBvbGRLbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzO1xyXG4gICAgICAgIG9sZEtub3duUHJvcGVydHlQYXRocyA9IHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEub25lT2YubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5vbmVPZltpXTtcclxuXHJcbiAgICAgICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbXCJvbmVPZlwiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKTtcclxuXHJcbiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGVycm9yQ291bnQgPT09IHRoaXMuZXJyb3JzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAodmFsaWRJbmRleCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9ORV9PRl9NVUxUSVBMRSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4MTogdmFsaWRJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDI6IGlcclxuICAgICAgICAgICAgICAgIH0sIFwiXCIsIFwiL29uZU9mXCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga25vd25LZXkgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHNba25vd25LZXldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2xkVW5rbm93blByb3BlcnR5UGF0aHNba25vd25LZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdW5rbm93bktleSBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvbGRLbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsaWRJbmRleCA9PT0gbnVsbCkge1xyXG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KSk7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT05FX09GX01JU1NJTkcsIHt9LCBcIlwiLCBcIi9vbmVPZlwiLCBlcnJvcnMsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOb3QgPSBmdW5jdGlvbiB2YWxpZGF0ZU5vdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgaWYgKHNjaGVtYS5ub3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdmFyIG9sZEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XHJcbiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRocztcclxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xyXG4gICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYS5ub3QsIG51bGwsIG51bGwsIGRhdGFQb2ludGVyUGF0aCk7XHJcbiAgICB2YXIgbm90RXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2Uob2xkRXJyb3JDb3VudCk7XHJcbiAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIG9sZEVycm9yQ291bnQpO1xyXG4gICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRocztcclxuICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRocztcclxuICAgIH1cclxuICAgIGlmIChlcnJvciA9PT0gbnVsbCAmJiBub3RFcnJvcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OT1RfUEFTU0VELCB7fSwgXCJcIiwgXCIvbm90XCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlSHlwZXJtZWRpYSA9IGZ1bmN0aW9uIHZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBpZiAoIXNjaGVtYS5saW5rcykge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdmFyIGVycm9yO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgbGRvID0gc2NoZW1hLmxpbmtzW2ldO1xyXG4gICAgICAgIGlmIChsZG8ucmVsID09PSBcImRlc2NyaWJlZGJ5XCIpIHtcclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gbmV3IFVyaVRlbXBsYXRlKGxkby5ocmVmKTtcclxuICAgICAgICAgICAgdmFyIGFsbFByZXNlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRlbXBsYXRlLnZhck5hbWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISh0ZW1wbGF0ZS52YXJOYW1lc1tqXSBpbiBkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbFByZXNlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWxsUHJlc2VudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjaGVtYVVybCA9IHRlbXBsYXRlLmZpbGxGcm9tT2JqZWN0KGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHtcIiRyZWZcIjogc2NoZW1hVXJsfTtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgW1wibGlua3NcIiwgaV0sIGRhdGFQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyBwYXJzZVVSSSgpIGFuZCByZXNvbHZlVXJsKCkgYXJlIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTA4ODg1MFxyXG4vLyAgIC0gIHJlbGVhc2VkIGFzIHB1YmxpYyBkb21haW4gYnkgYXV0aG9yIChcIllhZmZsZVwiKSAtIHNlZSBjb21tZW50cyBvbiBnaXN0XHJcblxyXG5mdW5jdGlvbiBwYXJzZVVSSSh1cmwpIHtcclxuICAgIHZhciBtID0gU3RyaW5nKHVybCkucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpLm1hdGNoKC9eKFteOlxcLz8jXSs6KT8oXFwvXFwvKD86W146QF0qKD86OlteOkBdKik/QCk/KChbXjpcXC8/I10qKSg/OjooXFxkKikpPykpPyhbXj8jXSopKFxcP1teI10qKT8oI1tcXHNcXFNdKik/Lyk7XHJcbiAgICAvLyBhdXRob3JpdHkgPSAnLy8nICsgdXNlciArICc6JyArIHBhc3MgJ0AnICsgaG9zdG5hbWUgKyAnOicgcG9ydFxyXG4gICAgcmV0dXJuIChtID8ge1xyXG4gICAgICAgIGhyZWY6IG1bMF0gfHwgJycsXHJcbiAgICAgICAgcHJvdG9jb2w6IG1bMV0gfHwgJycsXHJcbiAgICAgICAgYXV0aG9yaXR5OiBtWzJdIHx8ICcnLFxyXG4gICAgICAgIGhvc3Q6IG1bM10gfHwgJycsXHJcbiAgICAgICAgaG9zdG5hbWU6IG1bNF0gfHwgJycsXHJcbiAgICAgICAgcG9ydDogbVs1XSB8fCAnJyxcclxuICAgICAgICBwYXRobmFtZTogbVs2XSB8fCAnJyxcclxuICAgICAgICBzZWFyY2g6IG1bN10gfHwgJycsXHJcbiAgICAgICAgaGFzaDogbVs4XSB8fCAnJ1xyXG4gICAgfSA6IG51bGwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNvbHZlVXJsKGJhc2UsIGhyZWYpIHsvLyBSRkMgMzk4NlxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZURvdFNlZ21lbnRzKGlucHV0KSB7XHJcbiAgICAgICAgdmFyIG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGlucHV0LnJlcGxhY2UoL14oXFwuXFwuPyhcXC98JCkpKy8sICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvKFxcLihcXC98JCkpKy9nLCAnLycpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC9cXC5cXC4kLywgJy8uLi8nKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvP1teXFwvXSovZywgZnVuY3Rpb24gKHApIHtcclxuICAgICAgICAgICAgICAgIGlmIChwID09PSAnLy4uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wb3AoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gocCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJykucmVwbGFjZSgvXlxcLy8sIGlucHV0LmNoYXJBdCgwKSA9PT0gJy8nID8gJy8nIDogJycpO1xyXG4gICAgfVxyXG5cclxuICAgIGhyZWYgPSBwYXJzZVVSSShocmVmIHx8ICcnKTtcclxuICAgIGJhc2UgPSBwYXJzZVVSSShiYXNlIHx8ICcnKTtcclxuXHJcbiAgICByZXR1cm4gIWhyZWYgfHwgIWJhc2UgPyBudWxsIDogKGhyZWYucHJvdG9jb2wgfHwgYmFzZS5wcm90b2NvbCkgK1xyXG4gICAgKGhyZWYucHJvdG9jb2wgfHwgaHJlZi5hdXRob3JpdHkgPyBocmVmLmF1dGhvcml0eSA6IGJhc2UuYXV0aG9yaXR5KSArXHJcbiAgICByZW1vdmVEb3RTZWdtZW50cyhocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5IHx8IGhyZWYucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgPyBocmVmLnBhdGhuYW1lIDogKGhyZWYucGF0aG5hbWUgPyAoKGJhc2UuYXV0aG9yaXR5ICYmICFiYXNlLnBhdGhuYW1lID8gJy8nIDogJycpICsgYmFzZS5wYXRobmFtZS5zbGljZSgwLCBiYXNlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKSArIGhyZWYucGF0aG5hbWUpIDogYmFzZS5wYXRobmFtZSkpICtcclxuICAgIChocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5IHx8IGhyZWYucGF0aG5hbWUgPyBocmVmLnNlYXJjaCA6IChocmVmLnNlYXJjaCB8fCBiYXNlLnNlYXJjaCkpICtcclxuICAgIGhyZWYuaGFzaDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRVcmkodXJpKSB7XHJcbiAgICByZXR1cm4gdXJpLnNwbGl0KCcjJylbMF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5vcm1TY2hlbWEoc2NoZW1hLCBiYXNlVXJpKSB7XHJcbiAgICBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBpZiAoYmFzZVVyaSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGJhc2VVcmkgPSBzY2hlbWEuaWQ7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hLmlkID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGJhc2VVcmkgPSByZXNvbHZlVXJsKGJhc2VVcmksIHNjaGVtYS5pZCk7XHJcbiAgICAgICAgICAgIHNjaGVtYS5pZCA9IGJhc2VVcmk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG5vcm1TY2hlbWEoc2NoZW1hW2ldLCBiYXNlVXJpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hWyckcmVmJ10gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNjaGVtYVsnJHJlZiddID0gcmVzb2x2ZVVybChiYXNlVXJpLCBzY2hlbWFbJyRyZWYnXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gXCJlbnVtXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBub3JtU2NoZW1hKHNjaGVtYVtrZXldLCBiYXNlVXJpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZGVmYXVsdEVycm9yUmVwb3J0ZXIobGFuZ3VhZ2UpIHtcclxuICAgIGxhbmd1YWdlID0gbGFuZ3VhZ2UgfHwgJ2VuJztcclxuXHJcbiAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IGxhbmd1YWdlc1tsYW5ndWFnZV07XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHZhciBtZXNzYWdlVGVtcGxhdGUgPSBlcnJvck1lc3NhZ2VzW2Vycm9yLmNvZGVdIHx8IEVycm9yTWVzc2FnZXNEZWZhdWx0W2Vycm9yLmNvZGVdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZVRlbXBsYXRlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJVbmtub3duIGVycm9yIGNvZGUgXCIgKyBlcnJvci5jb2RlICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IubWVzc2FnZVBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtZXNzYWdlUGFyYW1zID0gZXJyb3IucGFyYW1zO1xyXG4gICAgICAgIC8vIEFkYXB0ZWQgZnJvbSBDcm9ja2ZvcmQncyBzdXBwbGFudCgpXHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VUZW1wbGF0ZS5yZXBsYWNlKC9cXHsoW157fV0qKVxcfS9nLCBmdW5jdGlvbiAod2hvbGUsIHZhck5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIHN1YlZhbHVlID0gbWVzc2FnZVBhcmFtc1t2YXJOYW1lXTtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzdWJWYWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHN1YlZhbHVlID09PSAnbnVtYmVyJyA/IHN1YlZhbHVlIDogd2hvbGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcblxyXG52YXIgRXJyb3JDb2RlcyA9IHtcclxuICAgIElOVkFMSURfVFlQRTogMCxcclxuICAgIEVOVU1fTUlTTUFUQ0g6IDEsXHJcbiAgICBBTllfT0ZfTUlTU0lORzogMTAsXHJcbiAgICBPTkVfT0ZfTUlTU0lORzogMTEsXHJcbiAgICBPTkVfT0ZfTVVMVElQTEU6IDEyLFxyXG4gICAgTk9UX1BBU1NFRDogMTMsXHJcbiAgICAvLyBOdW1lcmljIGVycm9yc1xyXG4gICAgTlVNQkVSX01VTFRJUExFX09GOiAxMDAsXHJcbiAgICBOVU1CRVJfTUlOSU1VTTogMTAxLFxyXG4gICAgTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiAxMDIsXHJcbiAgICBOVU1CRVJfTUFYSU1VTTogMTAzLFxyXG4gICAgTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiAxMDQsXHJcbiAgICBOVU1CRVJfTk9UX0FfTlVNQkVSOiAxMDUsXHJcbiAgICAvLyBTdHJpbmcgZXJyb3JzXHJcbiAgICBTVFJJTkdfTEVOR1RIX1NIT1JUOiAyMDAsXHJcbiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6IDIwMSxcclxuICAgIFNUUklOR19QQVRURVJOOiAyMDIsXHJcbiAgICAvLyBPYmplY3QgZXJyb3JzXHJcbiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiAzMDAsXHJcbiAgICBPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOiAzMDEsXHJcbiAgICBPQkpFQ1RfUkVRVUlSRUQ6IDMwMixcclxuICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IDMwMyxcclxuICAgIE9CSkVDVF9ERVBFTkRFTkNZX0tFWTogMzA0LFxyXG4gICAgLy8gQXJyYXkgZXJyb3JzXHJcbiAgICBBUlJBWV9MRU5HVEhfU0hPUlQ6IDQwMCxcclxuICAgIEFSUkFZX0xFTkdUSF9MT05HOiA0MDEsXHJcbiAgICBBUlJBWV9VTklRVUU6IDQwMixcclxuICAgIEFSUkFZX0FERElUSU9OQUxfSVRFTVM6IDQwMyxcclxuICAgIC8vIEN1c3RvbS91c2VyLWRlZmluZWQgZXJyb3JzXHJcbiAgICBGT1JNQVRfQ1VTVE9NOiA1MDAsXHJcbiAgICBLRVlXT1JEX0NVU1RPTTogNTAxLFxyXG4gICAgLy8gU2NoZW1hIHN0cnVjdHVyZVxyXG4gICAgQ0lSQ1VMQVJfUkVGRVJFTkNFOiA2MDAsXHJcbiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zXHJcbiAgICBVTktOT1dOX1BST1BFUlRZOiAxMDAwXHJcbn07XHJcbnZhciBFcnJvckNvZGVMb29rdXAgPSB7fTtcclxuZm9yICh2YXIga2V5IGluIEVycm9yQ29kZXMpIHtcclxuICAgIEVycm9yQ29kZUxvb2t1cFtFcnJvckNvZGVzW2tleV1dID0ga2V5O1xyXG59XHJcbnZhciBFcnJvck1lc3NhZ2VzRGVmYXVsdCA9IHtcclxuICAgIElOVkFMSURfVFlQRTogXCJJbnZhbGlkIHR5cGU6IHt0eXBlfSAoZXhwZWN0ZWQge2V4cGVjdGVkfSlcIixcclxuICAgIEVOVU1fTUlTTUFUQ0g6IFwiTm8gZW51bSBtYXRjaCBmb3I6IHt2YWx1ZX1cIixcclxuICAgIEFOWV9PRl9NSVNTSU5HOiBcIkRhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSBcXFwiYW55T2ZcXFwiXCIsXHJcbiAgICBPTkVfT0ZfTUlTU0lORzogXCJEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXFxcIm9uZU9mXFxcIlwiLFxyXG4gICAgT05FX09GX01VTFRJUExFOiBcIkRhdGEgaXMgdmFsaWQgYWdhaW5zdCBtb3JlIHRoYW4gb25lIHNjaGVtYSBmcm9tIFxcXCJvbmVPZlxcXCI6IGluZGljZXMge2luZGV4MX0gYW5kIHtpbmRleDJ9XCIsXHJcbiAgICBOT1RfUEFTU0VEOiBcIkRhdGEgbWF0Y2hlcyBzY2hlbWEgZnJvbSBcXFwibm90XFxcIlwiLFxyXG4gICAgLy8gTnVtZXJpYyBlcnJvcnNcclxuICAgIE5VTUJFUl9NVUxUSVBMRV9PRjogXCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIG11bHRpcGxlIG9mIHttdWx0aXBsZU9mfVwiLFxyXG4gICAgTlVNQkVSX01JTklNVU06IFwiVmFsdWUge3ZhbHVlfSBpcyBsZXNzIHRoYW4gbWluaW11bSB7bWluaW11bX1cIixcclxuICAgIE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRTogXCJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtaW5pbXVtIHttaW5pbXVtfVwiLFxyXG4gICAgTlVNQkVSX01BWElNVU06IFwiVmFsdWUge3ZhbHVlfSBpcyBncmVhdGVyIHRoYW4gbWF4aW11bSB7bWF4aW11bX1cIixcclxuICAgIE5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRTogXCJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtYXhpbXVtIHttYXhpbXVtfVwiLFxyXG4gICAgTlVNQkVSX05PVF9BX05VTUJFUjogXCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIHZhbGlkIG51bWJlclwiLFxyXG4gICAgLy8gU3RyaW5nIGVycm9yc1xyXG4gICAgU1RSSU5HX0xFTkdUSF9TSE9SVDogXCJTdHJpbmcgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSBjaGFycyksIG1pbmltdW0ge21pbmltdW19XCIsXHJcbiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6IFwiU3RyaW5nIGlzIHRvbyBsb25nICh7bGVuZ3RofSBjaGFycyksIG1heGltdW0ge21heGltdW19XCIsXHJcbiAgICBTVFJJTkdfUEFUVEVSTjogXCJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggcGF0dGVybjoge3BhdHRlcm59XCIsXHJcbiAgICAvLyBPYmplY3QgZXJyb3JzXHJcbiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiBcIlRvbyBmZXcgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtaW5pbXVtIHttaW5pbXVtfVwiLFxyXG4gICAgT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTogXCJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19XCIsXHJcbiAgICBPQkpFQ1RfUkVRVUlSRUQ6IFwiTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eToge2tleX1cIixcclxuICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IFwiQWRkaXRpb25hbCBwcm9wZXJ0aWVzIG5vdCBhbGxvd2VkXCIsXHJcbiAgICBPQkpFQ1RfREVQRU5ERU5DWV9LRVk6IFwiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSlcIixcclxuICAgIC8vIEFycmF5IGVycm9yc1xyXG4gICAgQVJSQVlfTEVOR1RIX1NIT1JUOiBcIkFycmF5IGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0pLCBtaW5pbXVtIHttaW5pbXVtfVwiLFxyXG4gICAgQVJSQVlfTEVOR1RIX0xPTkc6IFwiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX1cIixcclxuICAgIEFSUkFZX1VOSVFVRTogXCJBcnJheSBpdGVtcyBhcmUgbm90IHVuaXF1ZSAoaW5kaWNlcyB7bWF0Y2gxfSBhbmQge21hdGNoMn0pXCIsXHJcbiAgICBBUlJBWV9BRERJVElPTkFMX0lURU1TOiBcIkFkZGl0aW9uYWwgaXRlbXMgbm90IGFsbG93ZWRcIixcclxuICAgIC8vIEZvcm1hdCBlcnJvcnNcclxuICAgIEZPUk1BVF9DVVNUT006IFwiRm9ybWF0IHZhbGlkYXRpb24gZmFpbGVkICh7bWVzc2FnZX0pXCIsXHJcbiAgICBLRVlXT1JEX0NVU1RPTTogXCJLZXl3b3JkIGZhaWxlZDoge2tleX0gKHttZXNzYWdlfSlcIixcclxuICAgIC8vIFNjaGVtYSBzdHJ1Y3R1cmVcclxuICAgIENJUkNVTEFSX1JFRkVSRU5DRTogXCJDaXJjdWxhciAkcmVmczoge3VybHN9XCIsXHJcbiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zXHJcbiAgICBVTktOT1dOX1BST1BFUlRZOiBcIlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpXCJcclxufTtcclxuXHJcbmZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihjb2RlLCBwYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMpIHtcclxuICAgIEVycm9yLmNhbGwodGhpcyk7XHJcbiAgICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZXJyb3IgY29kZSBzdXBwbGllZDogXCIgKyBzY2hlbWFQYXRoKTtcclxuICAgIH1cclxuICAgIHRoaXMubWVzc2FnZSA9ICcnO1xyXG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgdGhpcy5kYXRhUGF0aCA9IGRhdGFQYXRoIHx8IFwiXCI7XHJcbiAgICB0aGlzLnNjaGVtYVBhdGggPSBzY2hlbWFQYXRoIHx8IFwiXCI7XHJcbiAgICB0aGlzLnN1YkVycm9ycyA9IHN1YkVycm9ycyB8fCBudWxsO1xyXG5cclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtcclxuICAgIHRoaXMuc3RhY2sgPSBlcnIuc3RhY2sgfHwgZXJyLnN0YWNrdHJhY2U7XHJcbiAgICBpZiAoIXRoaXMuc3RhY2spIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFjayA9IGVyci5zdGFjayB8fCBlcnIuc3RhY2t0cmFjZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XHJcblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWYWxpZGF0aW9uRXJyb3I7XHJcblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9ICdWYWxpZGF0aW9uRXJyb3InO1xyXG5cclxuVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5wcmVmaXhXaXRoID0gZnVuY3Rpb24gKGRhdGFQcmVmaXgsIHNjaGVtYVByZWZpeCkge1xyXG4gICAgaWYgKGRhdGFQcmVmaXggIT09IG51bGwpIHtcclxuICAgICAgICBkYXRhUHJlZml4ID0gZGF0YVByZWZpeC5yZXBsYWNlKC9+L2csIFwifjBcIikucmVwbGFjZSgvXFwvL2csIFwifjFcIik7XHJcbiAgICAgICAgdGhpcy5kYXRhUGF0aCA9IFwiL1wiICsgZGF0YVByZWZpeCArIHRoaXMuZGF0YVBhdGg7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hUHJlZml4ICE9PSBudWxsKSB7XHJcbiAgICAgICAgc2NoZW1hUHJlZml4ID0gc2NoZW1hUHJlZml4LnJlcGxhY2UoL34vZywgXCJ+MFwiKS5yZXBsYWNlKC9cXC8vZywgXCJ+MVwiKTtcclxuICAgICAgICB0aGlzLnNjaGVtYVBhdGggPSBcIi9cIiArIHNjaGVtYVByZWZpeCArIHRoaXMuc2NoZW1hUGF0aDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnN1YkVycm9ycyAhPT0gbnVsbCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJFcnJvcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJFcnJvcnNbaV0ucHJlZml4V2l0aChkYXRhUHJlZml4LCBzY2hlbWFQcmVmaXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gaXNUcnVzdGVkVXJsKGJhc2VVcmwsIHRlc3RVcmwpIHtcclxuICAgIGlmICh0ZXN0VXJsLnN1YnN0cmluZygwLCBiYXNlVXJsLmxlbmd0aCkgPT09IGJhc2VVcmwpIHtcclxuICAgICAgICB2YXIgcmVtYWluZGVyID0gdGVzdFVybC5zdWJzdHJpbmcoYmFzZVVybC5sZW5ndGgpO1xyXG4gICAgICAgIGlmICgodGVzdFVybC5sZW5ndGggPiAwICYmIHRlc3RVcmwuY2hhckF0KGJhc2VVcmwubGVuZ3RoIC0gMSkgPT09IFwiL1wiKVxyXG4gICAgICAgICAgICB8fCByZW1haW5kZXIuY2hhckF0KDApID09PSBcIiNcIlxyXG4gICAgICAgICAgICB8fCByZW1haW5kZXIuY2hhckF0KDApID09PSBcIj9cIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbnZhciBsYW5ndWFnZXMgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFwaShsYW5ndWFnZSkge1xyXG4gICAgdmFyIGdsb2JhbENvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dCgpO1xyXG4gICAgdmFyIGN1cnJlbnRMYW5ndWFnZTtcclxuICAgIHZhciBjdXN0b21FcnJvclJlcG9ydGVyO1xyXG4gICAgdmFyIGFwaSA9IHtcclxuICAgICAgICBzZXRFcnJvclJlcG9ydGVyOiBmdW5jdGlvbiAocmVwb3J0ZXIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBvcnRlciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlKHJlcG9ydGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXN0b21FcnJvclJlcG9ydGVyID0gcmVwb3J0ZXI7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWRkRm9ybWF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuYWRkRm9ybWF0LmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYW5ndWFnZTogZnVuY3Rpb24gKGNvZGUpIHtcclxuICAgICAgICAgICAgaWYgKCFjb2RlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudExhbmd1YWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VzW2NvZGVdKSB7XHJcbiAgICAgICAgICAgICAgICBjb2RlID0gY29kZS5zcGxpdCgnLScpWzBdOyAvLyBmYWxsIGJhY2sgdG8gYmFzZSBsYW5ndWFnZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsYW5ndWFnZXNbY29kZV0pIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRMYW5ndWFnZSA9IGNvZGU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZTsgLy8gc28geW91IGNhbiB0ZWxsIGlmIGZhbGwtYmFjayBoYXMgaGFwcGVuZWRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGRMYW5ndWFnZTogZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2VNYXApIHtcclxuICAgICAgICAgICAgdmFyIGtleTtcclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gRXJyb3JDb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VNYXBba2V5XSAmJiAhbWVzc2FnZU1hcFtFcnJvckNvZGVzW2tleV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU1hcFtFcnJvckNvZGVzW2tleV1dID0gbWVzc2FnZU1hcFtrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByb290Q29kZSA9IGNvZGUuc3BsaXQoJy0nKVswXTtcclxuICAgICAgICAgICAgaWYgKCFsYW5ndWFnZXNbcm9vdENvZGVdKSB7IC8vIHVzZSBmb3IgYmFzZSBsYW5ndWFnZSBpZiBub3QgeWV0IGRlZmluZWRcclxuICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9IG1lc3NhZ2VNYXA7XHJcbiAgICAgICAgICAgICAgICBsYW5ndWFnZXNbcm9vdENvZGVdID0gbWVzc2FnZU1hcDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9IE9iamVjdC5jcmVhdGUobGFuZ3VhZ2VzW3Jvb3RDb2RlXSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBtZXNzYWdlTWFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXNbcm9vdENvZGVdW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tyb290Q29kZV1ba2V5XSA9IG1lc3NhZ2VNYXBba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW2NvZGVdW2tleV0gPSBtZXNzYWdlTWFwW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcmVzaEFwaTogZnVuY3Rpb24gKGxhbmd1YWdlKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcGkoKTtcclxuICAgICAgICAgICAgaWYgKGxhbmd1YWdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQubGFuZ3VhZ2UobGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZhdWx0RXJyb3JSZXBvcnRlcihjdXJyZW50TGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JSZXBvcnRlciA9IGN1c3RvbUVycm9yUmVwb3J0ZXIgPyBmdW5jdGlvbiAoZXJyb3IsIGRhdGEsIHNjaGVtYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUVycm9yUmVwb3J0ZXIoZXJyb3IsIGRhdGEsIHNjaGVtYSkgfHwgZGVmKGVycm9yLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICB9IDogZGVmO1xyXG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBWYWxpZGF0b3JDb250ZXh0KGdsb2JhbENvbnRleHQsIGZhbHNlLCBlcnJvclJlcG9ydGVyLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgc2NoZW1hID0ge1wiJHJlZlwiOiBzY2hlbWF9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQuYWRkU2NoZW1hKFwiXCIsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbnRleHQudmFsaWRhdGVBbGwoZGF0YSwgc2NoZW1hLCBudWxsLCBudWxsLCBcIlwiKTtcclxuICAgICAgICAgICAgaWYgKCFlcnJvciAmJiBiYW5Vbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBjb250ZXh0LmJhblVua25vd25Qcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICB0aGlzLm1pc3NpbmcgPSBjb250ZXh0Lm1pc3Npbmc7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSAoZXJyb3IgPT09IG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbGlkYXRlUmVzdWx0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZS5hcHBseShyZXN1bHQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWxpZGF0ZU11bHRpcGxlOiBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgdmFyIGRlZiA9IGRlZmF1bHRFcnJvclJlcG9ydGVyKGN1cnJlbnRMYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIHZhciBlcnJvclJlcG9ydGVyID0gY3VzdG9tRXJyb3JSZXBvcnRlciA/IGZ1bmN0aW9uIChlcnJvciwgZGF0YSwgc2NoZW1hKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tRXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKSB8fCBkZWYoZXJyb3IsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgIH0gOiBkZWY7XHJcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IFZhbGlkYXRvckNvbnRleHQoZ2xvYmFsQ29udGV4dCwgdHJ1ZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNjaGVtYSA9IHtcIiRyZWZcIjogc2NoZW1hfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZXh0LmFkZFNjaGVtYShcIlwiLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYSwgbnVsbCwgbnVsbCwgXCJcIik7XHJcbiAgICAgICAgICAgIGlmIChiYW5Vbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5iYW5Vbmtub3duUHJvcGVydGllcyhkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgcmVzdWx0LmVycm9ycyA9IGNvbnRleHQuZXJyb3JzO1xyXG4gICAgICAgICAgICByZXN1bHQubWlzc2luZyA9IGNvbnRleHQubWlzc2luZztcclxuICAgICAgICAgICAgcmVzdWx0LnZhbGlkID0gKHJlc3VsdC5lcnJvcnMubGVuZ3RoID09PSAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZFNjaGVtYTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5hZGRTY2hlbWEuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldFNjaGVtYTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWEuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldFNjaGVtYU1hcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWFNYXAuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldFNjaGVtYVVyaXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0U2NoZW1hVXJpcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0TWlzc2luZ1VyaXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0TWlzc2luZ1VyaXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRyb3BTY2hlbWFzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuZHJvcFNjaGVtYXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlZmluZUtleXdvcmQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5kZWZpbmVLZXl3b3JkLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWZpbmVFcnJvcjogZnVuY3Rpb24gKGNvZGVOYW1lLCBjb2RlTnVtYmVyLCBkZWZhdWx0TWVzc2FnZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvZGVOYW1lICE9PSAnc3RyaW5nJyB8fCAhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChjb2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgaW4gVVBQRVJfQ0FTRV9XSVRIX1VOREVSU0NPUkVTJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2RlTnVtYmVyICE9PSAnbnVtYmVyJyB8fCBjb2RlTnVtYmVyICUgMSAhPT0gMCB8fCBjb2RlTnVtYmVyIDwgMTAwMDApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBudW1iZXIgbXVzdCBiZSBhbiBpbnRlZ2VyID4gMTAwMDAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZXNbY29kZU5hbWVdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBhbHJlYWR5IGRlZmluZWQ6ICcgKyBjb2RlTmFtZSArICcgYXMgJyArIEVycm9yQ29kZXNbY29kZU5hbWVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgY29kZSBhbHJlYWR5IHVzZWQ6ICcgKyBFcnJvckNvZGVMb29rdXBbY29kZU51bWJlcl0gKyAnIGFzICcgKyBjb2RlTnVtYmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBFcnJvckNvZGVzW2NvZGVOYW1lXSA9IGNvZGVOdW1iZXI7XHJcbiAgICAgICAgICAgIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSA9IGNvZGVOYW1lO1xyXG4gICAgICAgICAgICBFcnJvck1lc3NhZ2VzRGVmYXVsdFtjb2RlTmFtZV0gPSBFcnJvck1lc3NhZ2VzRGVmYXVsdFtjb2RlTnVtYmVyXSA9IGRlZmF1bHRNZXNzYWdlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBsYW5nQ29kZSBpbiBsYW5ndWFnZXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlc1tsYW5nQ29kZV07XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ3VhZ2VbY29kZU5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VbY29kZU51bWJlcl0gPSBsYW5ndWFnZVtjb2RlTnVtYmVyXSB8fCBsYW5ndWFnZVtjb2RlTmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbENvbnRleHQucmVzZXQoKTtcclxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMubWlzc2luZyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1pc3Npbmc6IFtdLFxyXG4gICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgIG5vcm1TY2hlbWE6IG5vcm1TY2hlbWEsXHJcbiAgICAgICAgcmVzb2x2ZVVybDogcmVzb2x2ZVVybCxcclxuICAgICAgICBnZXREb2N1bWVudFVyaTogZ2V0RG9jdW1lbnRVcmksXHJcbiAgICAgICAgZXJyb3JDb2RlczogRXJyb3JDb2Rlc1xyXG4gICAgfTtcclxuICAgIGFwaS5sYW5ndWFnZShsYW5ndWFnZSB8fCAnZW4nKTtcclxuICAgIHJldHVybiBhcGk7XHJcbn1cclxuXHJcbi8vZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRvcigpIHtcclxudmFyIHR2NCA9IGNyZWF0ZUFwaSgpO1xyXG50djQuYWRkTGFuZ3VhZ2UoJ2VuLWdiJywgRXJyb3JNZXNzYWdlc0RlZmF1bHQpO1xyXG5cclxuLy9sZWdhY3kgcHJvcGVydHlcclxudHY0LnR2NCA9IHR2NDtcclxuLy9yZXR1cm4gdHY0O1xyXG5leHBvcnQgZGVmYXVsdCB0djQ7XHJcbi8vfSIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuLyoqXHJcbiAqIFN1cHBvcnQgbW9kdWxlIHdpdGggc29tZSBmdW5jdGlvbnMgd2lsbCBiZSB1c2VmdWxcclxuICogQG1vZHVsZSB1dGlsc1xyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiBkaXZpZGVVUkxcclxuICogQHR5cGUgT2JqZWN0XHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIFVSTFxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gb2YgVVJMXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eSBUaGUgaWRlbnRpdHkgb2YgVVJMXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIERpdmlkZSBhbiB1cmwgaW4gdHlwZSwgZG9tYWluIGFuZCBpZGVudGl0eVxyXG4gKiBAcGFyYW0gIHtVUkwuVVJMfSB1cmwgLSB1cmwgYWRkcmVzc1xyXG4gKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlVVJMKHVybCkge1xyXG5cclxuXHRmdW5jdGlvbiByZWN1cnNlKHZhbHVlKSB7XHJcblx0XHRjb25zdCByZWdleCA9IC8oW2EtekEtWi1dKikoOlxcL1xcLyg/OlxcLik/fDopKFstYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1xcK34jPVxcL10qKS9naTtcclxuICAgIGNvbnN0IHN1YnN0ID0gJyQxLCQzLCQ0JztcclxuXHQgIGxldCBwYXJ0cyA9IHZhbHVlLnJlcGxhY2UocmVnZXgsIHN1YnN0KS5zcGxpdCgnLCcpO1xyXG5cdFx0cmV0dXJuIHBhcnRzO1xyXG5cdH1cclxuXHJcblx0bGV0IHBhcnRzID0gcmVjdXJzZSh1cmwpO1xyXG5cclxuICAvLyBJZiB0aGUgdXJsIGhhcyBubyBzY2hlbWVcclxuICBpZiAocGFydHNbMF0gPT09IHVybCAmJiAhcGFydHNbMF0uaW5jbHVkZXMoJ0AnKSkge1xyXG5cclxuICAgIGxldCByZXN1bHQgPSB7XHJcbiAgICAgIHR5cGU6IFwiXCIsXHJcbiAgICAgIGRvbWFpbjogdXJsLFxyXG4gICAgICBpZGVudGl0eTogXCJcIlxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zb2xlLmVycm9yKCdbRGl2aWRlVVJMXSBEaXZpZGVVUkwgZG9uXFwndCBzdXBwb3J0IHVybCB3aXRob3V0IHNjaGVtZS4gUGxlYXNlIHJldmlldyB5b3VyIHVybCBhZGRyZXNzJywgdXJsKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcblx0Ly8gY2hlY2sgaWYgdGhlIHVybCBoYXMgdGhlIHNjaGVtZSBhbmQgaW5jbHVkZXMgYW4gQFxyXG5cdGlmIChwYXJ0c1swXSA9PT0gdXJsICYmIHBhcnRzWzBdLmluY2x1ZGVzKCdAJykpIHtcclxuXHRcdGxldCBzY2hlbWUgPSBwYXJ0c1swXSA9PT0gdXJsID8gJ3NtdHAnIDogcGFydHNbMF07XHJcblx0XHRwYXJ0cyA9IHJlY3Vyc2Uoc2NoZW1lICsgJzovLycgKyBwYXJ0c1swXSk7XHJcblx0fVxyXG5cclxuXHQvLyBpZiB0aGUgZG9tYWluIGluY2x1ZGVzIGFuIEAsIGRpdmlkZSBpdCB0byBkb21haW4gYW5kIGlkZW50aXR5IHJlc3BlY3RpdmVseVxyXG5cdGlmIChwYXJ0c1sxXS5pbmNsdWRlcygnQCcpKSB7XHJcblx0XHRwYXJ0c1syXSA9IHBhcnRzWzBdICsgJzovLycgKyBwYXJ0c1sxXTtcclxuXHRcdHBhcnRzWzFdID0gcGFydHNbMV0uc3Vic3RyKHBhcnRzWzFdLmluZGV4T2YoJ0AnKSArIDEpXHJcbiAgICB9IFx0LyplbHNlIGlmIChwYXJ0c1syXS5pbmNsdWRlcygnLycpKSB7XHJcbiAgICBwYXJ0c1syXSA9IHBhcnRzWzJdLnN1YnN0cihwYXJ0c1syXS5sYXN0SW5kZXhPZignLycpKzEpO1xyXG4gIH0qL1xyXG5cclxuICBsZXQgcmVzdWx0ID0ge1xyXG4gICAgdHlwZTogcGFydHNbMF0sXHJcbiAgICBkb21haW46IHBhcnRzWzFdLFxyXG4gICAgaWRlbnRpdHk6IHBhcnRzWzJdXHJcbiAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGFuIE9iamVjdCBpcyBlbXB0eVxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gYmUgY2hlY2tlZFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBzdGF0dXMgb2YgT2JqZWN0LCBlbXB0eSBvciBub3QgKHRydWV8ZmFsc2UpO1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5T2JqZWN0KG9iamVjdCkge1xyXG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCA+IDAgPyBmYWxzZSA6IHRydWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYWtlIGEgQ09QWSBvZiB0aGUgb3JpZ2luYWwgZGF0YVxyXG4gKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogLSBvYmplY3QgdG8gYmUgY2xvbmVkXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ2xvbmUob2JqKSB7XHJcbiAgLy9UT0RPOiBzaW1wbGUgYnV0IGluZWZmaWNpZW50IEpTT04gZGVlcCBjbG9uZS4uLlxyXG4gIGlmIChvYmopIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUGF0aEZyb21VUkwodXJsKSB7XHJcbiAgbGV0IHNwbGl0VVJMID0gdXJsLnNwbGl0KCcvJyk7XHJcbiAgcmV0dXJuIHNwbGl0VVJMWzBdICsgJy8vJyArIHNwbGl0VVJMWzJdICsgJy8nICsgc3BsaXRVUkxbM107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPYnRhaW5zIHRoZSB1c2VyIFVSTCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gZW1haWxcclxuICogQHBhcmFtICB7c3RyaW5nfSB1c2VyRW1haWwgVGhlIHVzZXIgZW1haWxcclxuICogQHJldHVybiB7VVJMLlVSTH0gdXNlclVSTCBUaGUgdXNlciBVUkxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyVVJMRnJvbUVtYWlsKHVzZXJFbWFpbCkge1xyXG4gIGxldCBpbmRleE9mQXQgPSB1c2VyRW1haWwuaW5kZXhPZignQCcpO1xyXG4gIHJldHVybiAndXNlcjovLycgKyB1c2VyRW1haWwuc3Vic3RyaW5nKGluZGV4T2ZBdCArIDEsIHVzZXJFbWFpbC5sZW5ndGgpICsgJy8nICsgdXNlckVtYWlsLnN1YnN0cmluZygwLCBpbmRleE9mQXQpO1xyXG59XHJcblxyXG4vKipcclxuICogT2J0YWlucyB0aGUgdXNlciBlbWFpbCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gVVJMXHJcbiAqIEBwYXJhbSAge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckVtYWlsRnJvbVVSTCh1c2VyVVJMKSB7XHJcbiAgbGV0IHVybCA9IGRpdmlkZVVSTCh1c2VyVVJMKTtcclxuICByZXR1cm4gdXJsLmlkZW50aXR5LnJlcGxhY2UoJy8nLCAnJykgKyAnQCcgKyB1cmwuZG9tYWluOyAvLyBpZGVudGl0eSBmaWVsZCBoYXMgJy9leGFtcGxlSUQnIGluc3RlYWQgb2YgJ2V4YW1wbGVJRCdcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoZSB1c2VyIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgVVJMIGZvcm1hdCwgaWYgbm90LCBjb252ZXJ0IHRvIFVSTCBmb3JtYXRcclxuICogQHBhcmFtICB7c3RyaW5nfSAgIGlkZW50aWZpZXIgIHVzZXIgaWRlbnRpZmllclxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgdXNlclVSTCAgICB0aGUgdXNlciBVUkxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9Vc2VyVVJMKGlkZW50aWZpZXIpIHtcclxuXHJcbiAgLy8gY2hlY2sgaWYgdGhlIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgdXJsIGZvcm1hdFxyXG4gIGlmIChpZGVudGlmaWVyLnN1YnN0cmluZygwLCA3KSA9PT0gJ3VzZXI6Ly8nKSB7XHJcbiAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChpZGVudGlmaWVyKTtcclxuXHJcbiAgICAvL2NoZWNrIGlmIHRoZSB1cmwgaXMgd2VsbCBmb3JtYXRlZFxyXG4gICAgaWYgKGRpdmlkZWRVUkwuZG9tYWluICYmIGRpdmlkZWRVUkwuaWRlbnRpdHkpIHtcclxuICAgICAgcmV0dXJuIGlkZW50aWZpZXI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyAndXNlclVSTCB3aXRoIHdyb25nIGZvcm1hdCc7XHJcbiAgICB9XHJcblxyXG4gIC8vaWYgbm90LCBjb252ZXJ0IHRoZSB1c2VyIGVtYWlsIHRvIFVSTCBmb3JtYXRcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGdldFVzZXJVUkxGcm9tRW1haWwoaWRlbnRpZmllcik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRhT2JqZWN0VVJMKHVybCkge1xyXG4gIGxldCBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nLCAnaHlwZXJ0eSddO1xyXG4gIGxldCBzcGxpdFVSTCA9ICh1cmwpLnNwbGl0KCc6Ly8nKTtcclxuICBsZXQgdXJsU2NoZW1hID0gc3BsaXRVUkxbMF07XHJcblxyXG4gIHJldHVybiBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZih1cmxTY2hlbWEpID09PSAtMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVnYWN5KHVybCkge1xyXG4gIGlmICh1cmwuc3BsaXQoJ0AnKS5sZW5ndGggPiAxKVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgZWxzZVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNVUkwodXJsKSB7XHJcbiAgcmV0dXJuICh1cmwpLnNwbGl0KCcvJykubGVuZ3RoID49IDM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1VzZXJVUkwodXJsKSB7XHJcbiAgcmV0dXJuIGRpdmlkZVVSTCh1cmwpLnR5cGUgPT09ICd1c2VyJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzSHlwZXJ0eVVSTCh1cmwpIHtcclxuICByZXR1cm4gZGl2aWRlVVJMKHVybCkudHlwZSA9PT0gJ2h5cGVydHknO1xyXG59XHJcblxyXG4vKipcclxuICogZ2V0IGluZm9ybWF0aW9uIHJlbGF0aXZlIGVhY2ggY29tcG9uZW50IGNvbmZpZ3VyZWQgb24gcnVudGltZSBjb25maWd1cmF0aW9uO1xyXG4gKiBAcGFyYW0gIHtvYmplY3R9IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggYWxsIGNvbmZpZ3VyYXRpb25cclxuICogQHBhcmFtICB7c3RyaW5nfSBjb21wb25lbnQgICAgIHN0cmluZyB3aXRoIHRoZSBjb21wb25lbnQgdG8gZ2V0IHRoZSBjb25maWd1cmF0aW9uLCBsaWtlLCBydW50aW1lVVJMUywgY2F0YWxvZ3VlVVJMcywgbXNnTm9kZVVSTCwgZG9tYWluUmVnaXN0cnlVUkw7XHJcbiAqIEBwYXJhbSAge3N0cmluZ30gcmVzb3VyY2UgICAgICB0eXBlIG9mIHJlc291cmNlIHRvIGdldCwgbGlrZSwgY2F0YWxvZ3VlLCBydW50aW1lVUEsIHByb3RvY29sc3R1YiwgaWRwUHJveHlcclxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgICAgIHJldHVybiBhbiBvYmplY3Qgd2l0aCBhbGwgY29uZmlndXJhdGlvbnM7XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcyhjb25maWd1cmF0aW9uLCBjb21wb25lbnQsIHJlc291cmNlKSB7XHJcbiAgbGV0IG9iamVjdFJlc291cmNlID0gY29uZmlndXJhdGlvbltjb21wb25lbnRdO1xyXG4gIGxldCByZXNvdXJjZVR5cGUgPSBvYmplY3RSZXNvdXJjZVtyZXNvdXJjZV07XHJcblxyXG4gIHJldHVybiByZXNvdXJjZVR5cGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCdWlsZCBhIGZ1bGwgdXJsIHdpdGggdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbjtcclxuICogQHBhcmFtICB7b2JqZWN0fSBjb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIGFsbCBjb25maWd1cmF0aW9uXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gY29tcG9uZW50ICAgICBzdHJpbmcgd2l0aCB0aGUgY29tcG9uZW50IHRvIGdldCB0aGUgY29uZmlndXJhdGlvbiwgbGlrZSwgcnVudGltZVVSTFMsIGNhdGFsb2d1ZVVSTHMsIG1zZ05vZGVVUkwsIGRvbWFpblJlZ2lzdHJ5VVJMO1xyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHJlc291cmNlICAgICAgdHlwZSBvZiByZXNvdXJjZSB0byBnZXQsIGxpa2UsIGNhdGFsb2d1ZSwgcnVudGltZVVBLCBwcm90b2NvbHN0dWIsIGlkcFByb3h5XHJcbiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZSAgICAgICAgICByZXNvdXJjZSB0byBnZXQsIGxpa2UgYSBoeXBlcnR5IG5hbWUgb3IgcHJvdG9jb2xzdHViIG5hbWU7XHJcbiAqIEBwYXJhbSAge2Jvb2xlYW59IHVzZUZhbGxiYWNrICBpZiB0cnVlIHRoZSBmdW5jdGlvbiB3aWxsIGNoZWNrIGlmIGhhdmUgYSBmYWxsYmFjayB1cmw7XHJcbiAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgICBwYXJ0aWFsIHVybCB0byBjb250YWN0IHRoZSByZXNvdXJjZTtcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBidWlsZFVSTChjb25maWd1cmF0aW9uLCBjb21wb25lbnQsIHJlc291cmNlLCB0eXBlLCB1c2VGYWxsYmFjayA9IGZhbHNlKSB7XHJcbiAgbGV0IG9iamVjdFJlc291cmNlID0gY29uZmlndXJhdGlvbltjb21wb25lbnRdO1xyXG4gIGxldCB1cmw7XHJcblxyXG4gIGlmICghb2JqZWN0UmVzb3VyY2UuaGFzT3duUHJvcGVydHkocmVzb3VyY2UpKSB7XHJcbiAgICB0aHJvdyBFcnJvcignVGhlIGNvbmZpZ3VyYXRpb24gJyArIEpTT04uc3RyaW5naWZ5KG9iamVjdFJlc291cmNlLCAnJywgMikgKyAnIGRvblxcJ3QgaGF2ZSB0aGUgJyArIHJlc291cmNlICsgJyByZXNvdXJjZSB5b3UgYXJlIGxvb2tpbmcgZm9yJyk7XHJcbiAgfVxyXG5cclxuICBsZXQgcmVzb3VyY2VUeXBlID0gb2JqZWN0UmVzb3VyY2VbcmVzb3VyY2VdO1xyXG5cclxuICBpZiAodHlwZSkge1xyXG4gICAgdXJsID0gcmVzb3VyY2VUeXBlLnByZWZpeCArIGNvbmZpZ3VyYXRpb24uZG9tYWluICsgcmVzb3VyY2VUeXBlLnN1ZmZpeCArIHR5cGU7XHJcbiAgICBpZiAocmVzb3VyY2VUeXBlLmhhc093blByb3BlcnR5KCdmYWxsYmFjaycpICYmIHVzZUZhbGxiYWNrKSB7XHJcbiAgICAgIGlmIChyZXNvdXJjZVR5cGUuZmFsbGJhY2suaW5kZXhPZignJWRvbWFpbiUnKSkge1xyXG4gICAgICAgIHVybCA9IHJlc291cmNlVHlwZS5mYWxsYmFjay5yZXBsYWNlKC8oJWRvbWFpbiUpL2csIGNvbmZpZ3VyYXRpb24uZG9tYWluKSArIHR5cGU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdXJsID0gcmVzb3VyY2VUeXBlLmZhbGxiYWNrICsgdHlwZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICB1cmwgPSByZXNvdXJjZVR5cGUucHJlZml4ICsgY29uZmlndXJhdGlvbi5kb21haW4gKyByZXNvdXJjZVR5cGUuc3VmZml4O1xyXG4gIH1cclxuXHJcbiAgLy8gY29uc29sZS5sb2codXJsKTtcclxuXHJcbiAgcmV0dXJuIHVybDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlR1VJRCgpIHtcclxuXHJcbiAgZnVuY3Rpb24gczQoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcclxuICAgICAgLnRvU3RyaW5nKDE2KVxyXG4gICAgICAuc3Vic3RyaW5nKDEpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHM0KCkgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArIHM0KCkgKyBzNCgpO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJJZGVudGl0eURvbWFpbih1cmwpIHtcclxuICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTCh1cmwpO1xyXG4gIGxldCBzcGxpdGVkRG9tYWluID0gZGl2aWRlZFVSTC5kb21haW4uc3BsaXQoJy4nKTtcclxuICBsZXQgc3BsaXRlZExlbmd0aCA9IHNwbGl0ZWREb21haW4ubGVuZ3RoO1xyXG4gIGlmIChzcGxpdGVkTGVuZ3RoID09IDEpIHtcclxuICAgIHJldHVybiBzcGxpdGVkRG9tYWluW3NwbGl0ZWRMZW5ndGggLSAxXTtcclxuICB9XHJcbiAgbGV0IGRvbWFpbiA9IHNwbGl0ZWREb21haW5bc3BsaXRlZExlbmd0aCAtIDJdICsgJy4nICsgc3BsaXRlZERvbWFpbltzcGxpdGVkTGVuZ3RoIC0gMV07XHJcbiAgcmV0dXJuIGRvbWFpbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIFVSTCBpcyBmcm9tIGEgYmFja2VuZCBzZXJ2aWNlXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gdXJsICAgICBVUkwgdG8gYmUgcHJvY2Vzc2VkXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQmFja2VuZFNlcnZpY2VVUkwodXJsKSB7XHJcbiAgbGV0IGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodXJsKTtcclxuICBsZXQgc3BsaXRlZERvbWFpbiA9IGRpdmlkZWRVUkwuZG9tYWluLnNwbGl0KCcuJyk7XHJcbiAgbGV0IGJhY2tlbmRTY2hlbWVzID0gWydkb21haW4nLCdnbG9iYWwnLCdkb21haW4taWRwJ107IC8vIHNob3VsZCBiZSBkZWZpbmVkIGluIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb25cclxuICBsZXQgYmFja2VuZFN1YkRvbWFpbnMgPSBbJ3JlZ2lzdHJ5JywnbXNnLW5vZGUnXTsgLy8gc2hvdWxkIGJlIGRlZmluZWQgaW4gdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvblxyXG4gIGxldCBzdWJEb21haW47XHJcblxyXG4gIGlmIChzcGxpdGVkRG9tYWluLmxlbmd0aCA+IDEpIHtcclxuICAgIHN1YkRvbWFpbiA9IHNwbGl0ZWREb21haW5bMF07XHJcbiAgfVxyXG5cclxuICBpZiAoc3ViRG9tYWluICYmIGJhY2tlbmRTdWJEb21haW5zLmluZGV4T2Yoc3ViRG9tYWluKSlcclxuICAgcmV0dXJuIHRydWU7XHJcblxyXG4gIGlmIChkaXZpZGVkVVJMLnR5cGUpXHJcbiAgIHJldHVybiAoYmFja2VuZFNjaGVtZXMuaW5kZXhPZihkaXZpZGVkVVJMLnR5cGUpICE9PSAtMSk7XHJcblxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG4iXX0=

//# sourceMappingURL=Runtime.js.map
",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": "3-80c98ad1-ef3c-59f8-ba61-b46ece8aacef0",
    "type": "Runtimes",
    "version": 2.0000000000000004,
    "description": "Description of Runtime",
    "objectName": "Runtime",
    "configuration": {},
    "runtimeType": "browser",
    "hypertyCapabilities": {
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true
    },
    "protocolCapabilities": {
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy",
    "p2pHandlerStub": "https://localhost/.well-known/protocolstub/P2PHandlerProtoStub",
    "p2pRequesterStub": "https://localhost/.well-known/protocolstub/P2PRequesterProtoStub"
  }
}
